{"version":3,"sources":["ui/selectors/index.js","ui/selectors/metametrics.js","ui/selectors/multichain.ts","ui/selectors/permissions.js","ui/selectors/selectors.js","ui/selectors/transactions.js","ui/selectors/util.js","ui/store/actionConstants.ts","ui/store/actions.ts","ui/store/background-connection.ts","app/scripts/constants/sentry-state.ts","app/scripts/lib/extractEthjsErrorMessage.js","app/scripts/lib/get-first-preferred-lang-code.js","app/scripts/lib/local-store.js","app/scripts/lib/manifestFlags.ts","app/scripts/lib/multichain/address.ts","app/scripts/lib/network-store.js"],"names":["_confirm","require","Object","keys","forEach","key","exports","defineProperty","enumerable","get","_confirmTransaction","_customGas","_firstTimeFlow","_metametrics","_permissions","_selectors","_transactions","_approvals","_reselect","selectFragments","state","metamask","fragments","getDataCollectionForMarketing","dataCollectionForMarketing","getParticipateInMetaMetrics","Boolean","participateInMetaMetrics","selectFragmentBySuccessEvent","createSelector","_","fragmentOptions","persist","values","find","fragment","successEvent","undefined","selectFragmentById","fragmentId","selectMatchingFragment","params","existingId","matchedBySuccessEvent","matchedById","account","_getMultichainCoinRat","ticker","getMultichainProviderConfig","getMultichainIsEvm","_metamask","getConversionRate","getMultichainCoinRates","toLowerCase","conversionRate","chainId","currentCurrency","getCurrentCurrency","isEvm","symbol","getMultichainDefaultToken","getNativeCurrency","getMultichainCurrencyImage","selectedAccount","getSelectedInternalAccount","isTestnet","getMultichainIsTestnet","isMainnet","getShouldShowFiat","getShowFiatInTestnets","obj","_propTypes","__esModule","default","_keyringApi","_utils","_toolkit","_Numeric","_networks","_assets","_network","MultichainNetworkPropType","shape","nickname","string","isRequired","isEvmNetwork","bool","network","oneOfType","rpcUrl","type","rpcPrefs","blockExplorerUrl","imageUrl","id","InternalAccountPropType","address","metadata","name","snap","enabled","keyring","getMultichainNetworkProviders","_state","MULTICHAIN_PROVIDER_CONFIGS","getMultichainNetwork","_networkConfiguration","evmChainId","getCurrentChainId","evmNetwork","getProviderConfig","evmChainIdKey","CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP","getNetworkConfigurationsByChainId","KnownCaipNamespace","Eip155","Number","nonEvmNetwork","provider","isAddressCompatible","Error","isOnboarded","getCompletedOnboarding","getMaybeSelectedInternalAccount","isEvmAccountType","_provider$rpcPrefs","getNativeCurrencyImage","_getProviderConfig","getMultichainIsMainnet","providerConfig","getIsMainnet","MultichainNetworks","BITCOIN","TEST_NETWORK_IDS","includes","BITCOIN_TESTNET","getMultichainBalances","balances","rates","getMultichainSelectedAccountCachedBalance","getSelectedAccountCachedBalance","_balances$account$id","asset","MultichainNativeAssets","amount","getBtcCachedBalance","getMultichainSelectedAccountCachedBalanceIsZero","balance","base","Numeric","isZero","_subjects$activeTab$o2","activeTab","subjects","origin","permissions","length","selectedInternalAccount","connectedAccounts","getPermittedAccountsForCurrentTab","internalAccounts","accounts","numberOfAccounts","findIndex","getInternalAccount","subjectMetadata","getSubjectMetadata","accountsMap","getPermittedAccountsByOrigin","addressConnectedIconMap","subjectKey","iconUrl","nameToRender","getPermissionSubjects","connectedSubjects","entries","subjectValue","getAccountsFromSubject","extensionId","push","requests","getPermissionsRequests","_getSnapInstallOrUpda","getSnapInstallOrUpdateRequests","permissionHistory","reduce","lastConnectedInfo","eth_accounts","JSON","parse","stringify","_permissionHistory$ac","permissionHistoryByAccount","orderedAccounts","getMetaMaskAccountsOrdered","filter","map","lastActive","sort","lastSelected","lastSelectedA","lastSelectedB","_permissionHistory$ac2","getPermittedAccountsForSelectedTab","_getPermissionSubject","_subjects$activeTab$o","parentCapability","value","_state$metamask$pendi","pendingApprovals","requestState","_state$metamask$pendi2","permissionName","getTargetSubjectMetadata","snapId","_origin","_permissions$WALLET_S","_snapsRpcMethods","WALLET_SNAP_PERMISSION_KEY","caveats","_subject","_controllerUtils","_util","getPermissionSubjectsDeepEqual","createDeepEqualSelector","getSubjectMetadataDeepEqual","getPermittedAccounts","getAccountsFromPermission","getAccountsPermissionFromSubject","_state$metamask$subje","subjectSelector","getOriginOfCurrentTab","acc","getConnectedSubjectsForAllAddresses","accountsToConnections","isAccountConnectedToCurrentTab","permittedAccounts","some","subject","_subject$permissions","accountsPermission","accountsCaveat","Array","isArray","caveat","CaveatTypes","restrictReturnedAccounts","getAccountsCaveatFromPermission","requestData","_getApprovalRequestsB","getApprovalRequestsByType","ApprovalType","WalletRequestPermissions","accountType","getAccountType","methodName","internalAccount","methods","networkClientId","isEIP1559Network","isNotEIP1559Network","addressIsLedger","isAddressLedger","transportTypePreferenceIsWebHID","getLedgerTransportType","_hardwareWallets","LedgerTransportTypes","webhid","webHidIsNotConnected","_app","getLedgerWebHidConnectedStatus","WebHIDConnectedStatuses","connected","transportIsNotSuccessfullyCreated","getLedgerTransportStatus","HardwareTransportStates","verified","accountAddress","_stringUtils","isEqualCaseInsensitive","addressLabel","_labels","TRUNCATED_NAME_CHAR_LIMIT","slice","_util2","shortenAddress","label","entry","getAddressBookEntry","getInternalAccounts","advancedGasFee","featureFlags","advancedInlineGas","getMetaMaskCachedBalances","hasNoNativeFundsOnAnyAccounts","every","hasNoTokens","getNumberOfTokens","allTokens","appState","isLoading","accountDetailsModalComponent","isCustomNetwork","getIsCustomNetwork","getRpcPrefsForCurrentProvider","blockExplorerLinkText","firstPart","secondPart","getURLHostName","qrHardware","String","customNonceValue","customTokenAmount","_state$metamask$allDe","currentChainId","selectedAddress","allDetectedTokens","editedNetwork","ensResolutionsByAddress","getInternalAccountByAddress","_state$metamask$names","names","_nameController","NameType","ETHEREUM_ADDRESS","externalServicesOnboardingToggleState","featureNotificationsEnabled","getPreferences","gasIsLoading","getCurrentKeyring","isHardwareWallet","networksMetadata","getSelectedNetworkClientId","status","NetworkStatus","Blocked","accountId","ipfsGateway","addSnapAccountEnabled","isAddingNewNetwork","bitcoinSupportEnabled","bitcoinTestnetSupportEnabled","_bridge","ALLOWED_BRIDGE_CHAIN_IDS","CHAIN_IDS","LINEA_MAINNET","isMultiRpcOnboarding","usedNetworks","getIsTestnet","securityAlertsEnabled","_state$metamask$qrHar","sign","request","_swaps","ALLOWED_PROD_SWAPS_CHAIN_IDS","useTokenDetection","getUseTokenDetection","isDynamicTokenListAvailable","getIsDynamicTokenListAvailable","watchEthereumAccountEnabled","_keyring","KeyringType","keyringRemovalSnapModal","data","fourBytePrefix","addHexPrefix","knownMethodData","use4ByteResolution","_state$metamask$inter","_state$metamask$inter2","metaMetricsId","nameSources","CHAIN_ID_TOKEN_IMAGE_MAP","numberOfUnapprovedTx","getNumberOfAllUnapprovedTransactionsAndMessages","selectedTabOrigin","useRequestQueue","getUseRequestQueue","getEnvironmentType","_app2","ENVIRONMENT_TYPE_POPUP","getIsUnlocked","networkIdForThisDomain","getAllDomains","currentNetwork","getCurrentNetwork","selectedNetworkConfigurationId","switchedNetworkNeverShowMessage","newNetworkAddedName","newNftAddedMessage","newPrivacyPolicyToastShownDate","newTokensImported","newTokensImportedError","nextNonce","showNftDetectionEnablementToast","isNftStillFetchingIndication","onboardedInThisUISession","onboardingDate","openSeaEnabled","orderedNetworkList","petnamesEnabled","redesignedConfirmationsEnabled","redesignedTransactionsEnabled","removeNftMessage","chainIds","processedChainIds","flattenedChainIds","flat","TEST_CHAINS","_getSelectedInternalA","rawAccount","getMetaMaskAccountBalances","sendInputCurrencySwitched","hideZeroBalanceTokens","showFiatInTestnets","useCurrencyRateCheck","getUseCurrencyRateCheck","isConvertibleToFiat","tokens","seedPhraseBackedUp","dismissSeedBackUpReminder","accountBalance","getCurrentEthBalance","parseInt","showAccountBanner","showBasicFunctionalityModal","showBetaHeader","showExtensionInFullSizeView","showNetworkBanner","outdatedBrowserWarningLastShown","Date","getTime","_time","DAY","showPermissionsTour","newPrivacyPolicyToastClickedOrClosed","newPrivacyPolicyDate","_privacyPolicy","PRIVACY_POLICY_DATE","currentDate","now","recoveryPhraseReminderLastShown","recoveryPhraseReminderHasBeenShown","currentTime","frequency","surveyLinkLastClickedOrClosed","startTime","_survey","SURVEY_DATE","SURVEY_START_TIME","endTime","SURVEY_END_TIME","termsOfUseLastAgreed","_terms","TERMS_OF_USE_LAST_UPDATED","showWhatsNewPopup","snapRegistryList","snapsInstallPrivacyWarningShown","announcements","allowedAnnouncementIds","currentKeyring","currentKeyringIsLedger","ledger","isFirefox","window","navigator","userAgent","_notifications","NOTIFICATION_DROP_LEDGER_FIREFOX","getAllowedAnnouncementIds","announcementsToShow","announcement","isShown","a","b","date","_getUnapprovedConfirm2","getUnapprovedConfirmations","_requestData$asset2","WatchAsset","tokenId","_getUnapprovedConfirm","_requestData$asset","getSelectedAccount","SWAPS_CHAINID_DEFAULT_TOKEN_MAP","_conversion","hexToDecimal","getValueFromWeiHex","numberOfDecimals","toDenomination","switchedNetworkDetails","networkConfigurations","switchedNetwork","rpcEndpoints","rpcEndpoint","targetAddress","getMetaMaskAccounts","accountsWithSendEtherInfoSelector","getAccountByAddress","GOERLI_DISPLAY_NAME","_designSystem","BackgroundColor","goerli","SEPOLIA_DISPLAY_NAME","sepolia","theme","pendingApprovalCount","unapprovedPersonalMsgCount","unapprovedDecryptMsgCount","unapprovedEncryptionPublicKeyMsgCount","unapprovedTypedMessagesCount","_state$metamask$curre","currencyRates","usdConversionRate","unapprovedTxs","getUnapprovedTransactions","getOrderedConnectedAccountsForConnectedDapp","connectedAccount","useBlockie","useNftDetection","isSmartTransaction","getIsSmartTransaction","useNonceField","web3ShimUsageOrigins","snapsAddSnapAccountModalDismissed","_getMetaMaskAccountBa","selectedAccountBalance","cachedBalance","NETWORK_TYPES","RPC","selectedNetworkClientId","Available","_permissionController","_snapsUtils","_lodash","_semver","_transactionController","_networkController","_templates","_tokens","_types","_util3","_multichain","_keyring$type","getAccountTypeForKeyring","trezor","lattice","qr","imported","cachedBalances","multichainBalances","multichainNetwork","_multichainBalances$i","getInternalAccountsSortedByKeyring","getMetaMaskKeyrings","keyrings","addresses","_state$metamask$accou","accountsByChainId","accumulator","getMetaMaskAccountsConnected","domains","getConfirmationExchangeRates","confirmationExchangeRates","getTokenExchangeRates","_state$metamask$marke","contractMarketData","marketData","price","getAddressBook","addressBook","contact","getCurrentAccountWithSendEtherInfo","currentAddress","_getCurrentAccountWit","getTokensMarketData","_state$metamask$marke2","networkConfigurationsByChainId","getQueuedRequestCount","queuedRequestCount","getUnapprovedTemplatedConfirmations","approval","TEMPLATED_CONFIRMATION_APPROVAL_TYPES","getPrioritizedUnapprovedTemplatedConfirmations","unapprovedTemplatedConfirmations","PRIORITY_APPROVAL_TEMPLATE_TYPES","MAINNET","preferences","getShowTestNetworks","showTestNetworks","getEmbeddableSvg","memoize","svgString","encodeURIComponent","subjectType","SubjectType","Snap","svgIcon","remainingMetadata","rawStateSelector","selectSnapId","selectInstalledSnaps","snaps","getSnapRegistryData","_state$metamask$datab","database","verifiedSnaps","snapsRegistryData","getSnapLatestVersion","snapRegistryData","versions","latest","version","gt","getAllSnapAvailableUpdates","installedSnaps","snapMap","Map","latestVersion","set","selectInterfaceId","getAnySnapUpdateAvailable","getHideSnapBranding","_installedSnaps$snapI","hideSnapBranding","getMemoizedTargetSubjectMetadata","interfaces","getMemoizedUnapprovedConfirmations","confirmations","getMemoizedUnapprovedTemplatedConfirmations","interfaceId","getMemoizedInterfaces","getInterface","getInterfaceContent","getMemoizedInterface","snapInterface","_interfaces$id","content","getMemoizedInterfaceContent","getMultipleTargetsSubjectMetadata","origins","originsMetadata","getUseExternalServices","useExternalServices","getIsBridgeEnabled","_state$metamask$bridg","bridgeState","bridgeFeatureFlags","shouldUseExternalServices","BridgeFeatureFlagsKey","EXTENSION_SUPPORT","getMemoizedMetaMaskInternalAccounts","getMemoizedAddressBook","getRemoteTokenList","tokenList","remoteTokenList","getTokenList","getIsTokenDetectionInactiveOnMainnet","isTokenDetectionInactiveOnMainnet","STATIC_MAINNET_TOKEN_LIST","getMemoizedMetadataContract","getRemoteTokens","_address","getTxData","getMetadataContractName","confirmTransaction","txData","getUnapprovedTransaction","transactionId","getTransaction","getCurrentNetworkTransactions","getAllConnectedAccounts","getFullTxData","TransactionStatus","unapproved","_transactionId","_status","customTxParamsData","hexTransactionAmount","transaction","fullTxData","simulationFails","txParams","getConnectedSitesList","connectedSubjectsForAllAddresses","connectedAddresses","sitesList","connectedAddress","app","siteKey","addressToNameMap","getConnectedSnapsList","getSnapsList","snapsData","snapsList","getMemoizedCurrentChainId","getMemoizedTxId","txId","getMemoizedUnapprovedPersonalMessages","unapprovedPersonalMsgs","getMemoizedUnapprovedTypedMessages","unapprovedTypedMessages","getSnaps","getLocale","currentLocale","getSnap","getSnapsMetadata","locale","snapsMetadata","manifest","localizationFiles","getLocalizedSnapManifest","proposedName","description","getSnapMetadata","stripSnapPrefix","getEnabledSnaps","cur","getInsightSnaps","_subjects$id","getSignatureInsightSnaps","_subjects$id2","getSignatureInsightSnapIds","getInsightSnapIds","getNameLookupSnapsIds","_subjects$id3","getNotifySnaps","_subjects$id4","snap_notify","getSnapInsights","insights","getNotifications","notifications","createdDate","getUnreadNotifications","notification","readDate","getReadNotificationsCount","getUnreadNotificationsCount","getPinnedAccountsList","pinnedAccountList","getHiddenAccountsList","hiddenAccountList","getAllUnapprovedTransactions","allUnapprovedMessages","unapprovedDecryptMsgs","unapprovedEncryptionPublicKeyMsgs","_currentNetwork$block","defaultRpcEndpointIndex","blockExplorerUrls","defaultBlockExplorerUrlIndex","url","nativeCurrency","RpcEndpointType","Infura","providerType","getConnectedSitesListWithNetworkInfo","networks","connectedNetwork","networkIconUrl","networkName","getAllEnabledNetworks","BSC","POLYGON","AVALANCHE","LINEA_GOERLI","LINEA_SEPOLIA","ARBITRUM","OPTIMISM","BASE","ZKSYNC_ERA","CRONOS","CELO","GNOSIS","FANTOM","POLYGON_ZKEVM","MOONBEAM","MOONRIVER","CHAIN_ID_TO_RPC_URL_MAP","getTokenDetectionSupportNetworkByChainId","MAINNET_DISPLAY_NAME","BSC_DISPLAY_NAME","POLYGON_DISPLAY_NAME","AVALANCHE_DISPLAY_NAME","LINEA_GOERLI_DISPLAY_NAME","LINEA_SEPOLIA_DISPLAY_NAME","LINEA_MAINNET_DISPLAY_NAME","ARBITRUM_DISPLAY_NAME","OPTIMISM_DISPLAY_NAME","BASE_DISPLAY_NAME","ZK_SYNC_ERA_DISPLAY_NAME","CRONOS_DISPLAY_NAME","CELO_DISPLAY_NAME","GNOSIS_DISPLAY_NAME","FANTOM_DISPLAY_NAME","POLYGON_ZKEVM_DISPLAY_NAME","MOONBEAM_DISPLAY_NAME","MOONRIVER_DISPLAY_NAME","getUpdatedAndSortedAccounts","getOrderedConnectedAccountsForActiveTab","pinnedAddresses","hiddenAddresses","connection","matchingAccount","connections","accountsWithLastSelected","mostRecentAccount","prev","current","pinned","hidden","active","_key","SnapStatus","Installing","preinstalled","targetSubjectMetadata","packageName","useSafeChainsListValidationSelector","useSafeChainsListValidation","Transaction","hasPendingApprovals","TRANSACTION_APPROVAL_TYPES","_txHelper","_transaction","INVALID_INITIAL_TRANSACTION_TYPES","TransactionType","cancel","retry","allowedSwapsSmartTransactionStatusesForActivityList","SmartTransactionStatuses","PENDING","UNKNOWN","RESOLVED","CANCELLED","getTransactions","transactions","time","incomingTxListSelector","currentNetworkTransactions","filterAndShapeUnapprovedTransactions","sortedTransactions","getApprovedAndSignedTransactions","approved","signed","incomingTransactionsPreferences","tx","incoming","to","unapprovedPersonalMsgsSelector","unapprovedDecryptMsgsSelector","unapprovedEncryptionPublicKeyMsgsSelector","unapprovedTypedMessagesSelector","smartTransactionsListSelector","_state$metamask$smart","smartTransactionsState","smartTransactions","smartTransaction","_smartTransaction$txP","from","confirmed","swap","swapApproval","stx","_stx$status","startsWith","SmartTransactionStatus","cancelled","selectedAddressTxListSelector","smTransactions","concat","unapprovedMessagesSelector","transactionSubSelector","unapprovedMessages","incomingTxList","transactionsSelector","subSelectorTxList","selectedAddressTxList","insertTransactionGroupByTime","transactionGroups","transactionGroup","primaryTransaction","groupToInsertTime","insertIndex","i","txGroup","splice","nonceSortedTransactionsSelector","unapprovedTransactionGroups","incomingTransactionGroups","orderedNonces","nonceToTransactionsMap","nonce","txTime","txReceipt","initialTransaction","hasRetried","hasCancelled","_nonceProps$primaryTr","_nonceProps$initialTr","nonceProps","insertTransactionByTime","primaryTxTime","initialTxTime","currentTransaction","isOnChainFailure","isEphemeral","failed","isRetryOrCancel","occurredAfterPrimary","hasPriorityStatus","PRIORITY_STATUS_HASH","isConfirmed","occurredBeforeInitial","isValidRetry","dropped","isValidCancel","eligibleForInitial","shouldBePrimary","previousPrimaryTransaction","previousInitialTransaction","nonces","nonceToInsert","insertOrderedNonce","orderedTransactionGroups","nonNonceTransactionGroups","mergeNonNonceTransactionGroups","_txGroup$initialTrans","nonRetryOrCancel","nonceSortedPendingTransactionsSelector","PENDING_STATUS_HASH","nonceSortedCompletedTransactionsSelector","reverse","submittedPendingTransactionsSelector","submitted","EthDecrypt","EthGetEncryptionPublicKey","EthSignTypedData","PersonalSign","selectTransactionMetadata","selectTransactionSender","_transaction$txParams","createSelectorCreator","defaultMemoize","isEqual","result","GO_HOME","MODAL_OPEN","MODAL_CLOSE","SET_CONFIRMATION_EXCHANGE_RATES","ALERT_OPEN","ALERT_CLOSE","QR_CODE_DETECTED","NETWORK_DROPDOWN_OPEN","NETWORK_DROPDOWN_CLOSE","IMPORT_NFTS_MODAL_OPEN","IMPORT_NFTS_MODAL_CLOSE","SHOW_IPFS_MODAL_OPEN","SHOW_IPFS_MODAL_CLOSE","IMPORT_TOKENS_POPOVER_OPEN","IMPORT_TOKENS_POPOVER_CLOSE","SHOW_BASIC_FUNCTIONALITY_MODAL_OPEN","SHOW_BASIC_FUNCTIONALITY_MODAL_CLOSE","ONBOARDING_TOGGLE_BASIC_FUNCTIONALITY_ON","ONBOARDING_TOGGLE_BASIC_FUNCTIONALITY_OFF","UPDATE_METAMASK_STATE","SELECTED_ADDRESS_CHANGED","SELECTED_ACCOUNT_CHANGED","ACCOUNT_CHANGED","CHAIN_CHANGED","ADDRESS_BOOK_UPDATED","GAS_FEE_ESTIMATES_UPDATED","CLOSE_WELCOME_SCREEN","CLEAR_SWAP_AND_SEND_STATE","UNLOCK_IN_PROGRESS","UNLOCK_FAILED","UNLOCK_SUCCEEDED","LOCK_METAMASK","DISPLAY_WARNING","HIDE_WARNING","CAPTURE_SINGLE_EXCEPTION","SHOW_ACCOUNTS_PAGE","SHOW_CONF_TX_PAGE","SHOW_SEND_TOKEN_PAGE","SHOW_PRIVATE_KEY","SET_ACCOUNT_LABEL","CLEAR_ACCOUNT_DETAILS","SET_ACCOUNT_DETAILS_ADDRESS","COMPLETED_TX","TRANSACTION_ERROR","UPDATE_TRANSACTION_PARAMS","SET_NEXT_NONCE","SET_HARDWARE_WALLET_DEFAULT_HD_PATH","SHOW_LOADING","HIDE_LOADING","SHOW_NFT_STILL_FETCHING_INDICATION","HIDE_NFT_STILL_FETCHING_INDICATION","SHOW_NFT_DETECTION_ENABLEMENT_TOAST","TOGGLE_ACCOUNT_MENU","TOGGLE_NETWORK_MENU","DEPRECATED_NETWORK_POPOVER_OPEN","DEPRECATED_NETWORK_POPOVER_CLOSE","UPDATE_CUSTOM_NONCE","SET_PARTICIPATE_IN_METAMETRICS","SET_DATA_COLLECTION_FOR_MARKETING","SET_CURRENT_LOCALE","COMPLETE_ONBOARDING","RESET_ONBOARDING","ONBOARDED_IN_THIS_UI_SESSION","SET_WEBHID_CONNECTED_STATUS","SET_LEDGER_TRANSPORT_STATUS","SET_PENDING_TOKENS","CLEAR_PENDING_TOKENS","SET_FIRST_TIME_FLOW_TYPE","SET_SELECTED_NETWORK_CONFIGURATION_ID","SET_NEW_NETWORK_ADDED","SET_EDIT_NETWORK","SET_NEW_NFT_ADDED_MESSAGE","SET_REMOVE_NFT_MESSAGE","LOADING_METHOD_DATA_STARTED","LOADING_METHOD_DATA_FINISHED","SET_REQUEST_ACCOUNT_TABS","SET_OPEN_METAMASK_TAB_IDS","HIDE_WHATS_NEW_POPUP","TOGGLE_GAS_LOADING_ANIMATION","SET_SMART_TRANSACTIONS_ERROR","DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE","TOGGLE_CURRENCY_INPUT_SWITCH","SET_NEW_TOKENS_IMPORTED","SET_NEW_TOKENS_IMPORTED_ERROR","SET_CUSTOM_TOKEN_AMOUNT","CONNECT_ACCOUNTS_MODAL_OPEN","CONNECT_ACCOUNTS_MODAL_CLOSE","SHOW_KEYRING_SNAP_REMOVAL_RESULT","HIDE_KEYRING_SNAP_REMOVAL_RESULT","SET_SHOW_NFT_AUTO_DETECT_MODAL_UPGRADE","async","_backgroundConnection","submitRequestToBackground","error","dispatch","displayWarning","tokensToImport","_error","logErrorWithMessage","forceUpdateMetamaskState","Promise","resolve","reject","callBackgroundMethod","networkConfiguration","_loglevel","debug","getState","oldAccounts","_keyringController","KeyringTypes","hd","addedAccountAddress","showLoadingIndication","hideLoadingIndication","tokenID","dontShowLoadingIndicator","isErrorWithMessage","message","recipient","memo","_hexstringUtils","toChecksumHexAddress","decimals","image","options","actionId","generateActionId","transactionMeta","ORIGIN_METAMASK","showConfTxPage","err","networkClientIdForThisDomain","setActiveNetworkConfigurationId","setSwitchedNetworkDetails","backedupData","msgData","completedTx","closeCurrentNotificationWindow","uuid","errorObj","parseSmartTransactionsError","actionConstants","payload","txMeta","_showLoadingIndication","_ethRpcErrors","ethErrors","userRejectedRequest","serialize","then","_send","resetSendState","catch","txMetaList","txIds","cancellations","all","ENVIRONMENT_TYPE_NOTIFICATION","closeNotificationPopup","singleExceptions","_browser","captureException","nft","deviceName","hdPath","unlocked","page","t","ledgerTransportType","capitalize","HardwareDeviceNames","connectedDevices","hid","requestDevice","filters","vendorId","LEDGER_USB_VENDOR_ID","device","match","customGasSettings","newTxId","newState","_err$message","showModal","originalTransactionId","currentNetworkTxList","password","createNewVault","getSeedPhrase","seedPhrase","encodedSeedPhrase","Buffer","unMarkPasswordForgotten","showAccountsPage","newTx","pollingToken","addPollingTokenToAppState","removePollingTokenFromAppState","transactionData","contractAddress","decryptedMsgData","metamaskId","notificationIdsToDelete","expirationTime","NOTIFICATIONS_EXPIRATION_DELAY","showNftStillFetchingIndication","hideNftStillFetchingIndication","ids","timestamp","performance","timeOrigin","setPrivateKey","setShowHoldToReveal","err2","accountPromises","resolve2","reject2","fetchParams","fetchParamsMetaData","quotes","selectedAggId","unsignedTransaction","approveTxParams","smartTransactionFees","tokensToDetect","_fourByte","getMethodDataAsync","networkEIP1559Compatibility","console","maxPriorityFeePerGas","maxFeePerGas","transactionParams","setNextNonce","setOpenMetamaskTabsIDs","website","setRequestAccountTabIds","userAddress","args","tokensToIgnore","_tokensToIgnore","strategy","loadingMessage","ownerAddress","nftAddress","nftId","backgroundSetLocked","errorMessage","qrCodeData","computeEstimatedGasLimit","messageList","userRejectionError","serializeError","requestId","info","shouldShowLoadingIndicator","addressToRemove","_subjects$snapId","isAccountsSnap","snap_manageAccounts","verifyPassword","setSeedPhraseBackedUp","resetOnboardingAction","_dispatch","jsonString","permissionNames","networkConfigurationId","val","alertId","enabledness","setPreference","routeState","completeOnboarding","currencyCode","dataCollectionPreference","feature","activated","notificationType","updatedFeatureFlags","path","initialAggId","isProfileSyncingEnabled","lastShown","participationPreference","pendingTokens","customToken","selectedTokens","tokenAddressList","isCustom","tokenAddress","found","addr","unlisted","unconnectedAccountAccountAlertIsEnabled","getUnconnectedAccountAlertEnabledness","activeTabOrigin","permittedAccountsForCurrentTab","currentTabIsConnectedToPreviousAddress","currentTabIsConnectedToNextAddress","switchingToUnconnectedAddress","_setSelectedInternalAccount","_unconnectedAccount","switchedToUnconnectedAccount","setUnconnectedAccountAlertShown","aggId","smartTransactionsOptInStatus","_selectors2","getSmartTransactionsOptInStatus","trackMetaMetricsEvent","category","MetaMetricsEventCategory","Settings","event","MetaMetricsEventName","SettingsUpdated","properties","stx_opt_in","prev_stx_opt_in","refreshInterval","shown","errorKey","swapsLiveness","quotesPollingLimitEnabled","gasLimit","gasPrice","lastAgreed","msg","signedTransactions","createSignedTransactions","fees","signedCanceledTransactions","cancelFees","cbor","unlockInProgress","unlockSucceeded","unlockFailed","submitPassword","indexes","hdPathDescription","index","loadingIndicatorMessage","getIsSendActive","send","stage","SEND_STAGES","INACTIVE","waitForResult","updateTransactionParams","goHome","updateCustomNonce","editableParams","updatedTransaction","previousGasParams","getFirstSnapInstallOrUpdateRequest","swapsCustomUserFeeLevel","txGasFees","currentSendFlowHistoryLength","sendFlowHistory","notificationIdViewedStatusMap","_interopRequireDefault","_switchDirection","_i18n","e","r","_getRequireWildcardCache","has","n","__proto__","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","_interopRequireWildcard","WeakMap","toString","updateMetamaskState","patches","_newState$addressBook","_currentState$address","currentState","oldState","patch","op","applyPatches","currentInternalAccount","newLocale","newProviderConfig","newInternalAccount","newSelectedAddress","updateCurrentLocale","newAddressBook","oldAddressBook","newAccounts","newSelectedAccount","oldSelectedAccount","oldAccount","gasFeeEstimates","gasEstimateType","initializeSendState","chainHasChanged","approvalFlows","getApprovalFlows","hasTransactionPendingApprovals","getIsSigningQRHardwareTransaction","preference","updatedPreferences","pendingPatches","loadRelativeTimeFormatLocaleData","localeMessages","fetchLocale","textDirection","setCurrentLocale","messages","seedPhraseBackupState","requestAccountTabIds","openMetaMaskTabIDs","POLLING_TOKEN_ENVIRONMENT_TYPES","global","platform","closeCurrentWindow","areCancelTransactions","unsignedTransactionsWithFees","fee","unsignedTransactionWithFees","decimalToHex","gas","backgroundConnection","background","promisifiedBackground","_pify","method","_promisifiedBackgroun","Math","random","callback","_background","_object","MMI_SENTRY_BACKGROUND_STATE","MMIController","opts","CustodyController","store","MmiConfigurationController","configurationClient","SENTRY_BACKGROUND_STATE","AccountsController","AccountTracker","currentBlockGasLimit","currentBlockGasLimitByChainId","AddressBookController","AlertController","alertEnabledness","unconnectedAccountAlertShownOrigins","AnnouncementController","AuthenticationController","isSignedIn","NetworkOrderController","AccountOrderController","AppMetadataController","currentAppVersion","currentMigrationVersion","previousAppVersion","previousMigrationVersion","ApprovalController","AppStateController","browserEnvironment","connectedStatusPopoverHasBeenShown","currentPopupId","currentExtensionPopupId","defaultHomeActiveTabName","fullScreenGasPollTokens","hadAdvancedGasFeesSetPriorToMigration92_3","nftsDetectionNoticeDismissed","nftsDropdownState","notificationGasPollTokens","popupGasPollTokens","showTestnetMessageInDropdown","timeoutMinutes","trezorModel","MultichainBalancesController","BridgeController","extensionSupport","destNetworkAllowlist","srcNetworkAllowlist","CronjobController","jobs","CurrencyController","DecryptMessageController","EncryptionPublicKeyController","EnsController","ensEntries","GasFeeController","estimatedGasFeeTimeBounds","gasFeeEstimatesByChainId","nonRPCGasFeeApisDisabled","KeyringController","isUnlocked","LoggingController","logs","NotificationServicesController","subscriptionAccountsSeen","isMetamaskNotificationsFeatureSeen","isNotificationServicesEnabled","isFeatureAnnouncementsEnabled","metamaskNotificationsList","metamaskNotificationsReadList","isCheckingAccountsPresence","isFetchingMetamaskNotifications","isUpdatingMetamaskNotifications","isUpdatingMetamaskNotificationsAccount","MetaMetricsController","eventsBeforeMetricsOptIn","previousUserTraits","segmentApiCalls","traits","marketingCampaignCookieId","latestNonAnonymousEventTimestamp","MetaMetricsDataDeletionController","metaMetricsDataDeletionId","metaMetricsDataDeletionTimestamp","NameController","useExternalNameSources","NetworkController","NftController","allNftContracts","allNfts","ignoredNfts","NotificationController","OnboardingController","completedOnboarding","firstTimeFlowType","onboardingTabs","PPOMController","storageMetadata","versionInfo","PermissionController","PermissionLogController","permissionActivityLog","PhishingController","PreferencesController","forgottenPassword","identities","isIpfsGatewayEnabled","lostIdentities","autoLockTimeLimit","isRedesignedConfirmationsDeveloperEnabled","useNativeCurrencyAsPrimaryCurrency","showConfirmationAdvancedDetails","signatureSecurityAlertResponses","useAddressBarEnsResolution","useMultiAccountBalanceChecker","usePhishDetect","useTransactionSimulations","enableMV3TimestampSave","NotificationServicesPushController","fcmToken","MultichainRatesController","fiatCurrency","cryptocurrencies","QueuedRequestController","SelectedNetworkController","SignatureController","SmartTransactionsController","approvalTxFees","tradeTxFees","liveness","userOptIn","userOptInV2","SnapController","SnapInterfaceController","SnapInsightsController","SnapsRegistry","lastUpdated","databaseUnavailable","SubjectMetadataController","SwapsController","swapsState","approveTxId","customApproveTxData","customGasPrice","customMaxFeePerGas","customMaxGas","customMaxPriorityFeePerGas","quotesLastFetched","saveFetchedQuotes","swapsFeatureFlags","swapsFeatureIsLive","swapsQuotePrefetchingRefreshTime","swapsQuoteRefreshTime","swapsStxBatchStatusRefreshTime","swapsStxStatusDeadline","swapsStxGetTransactionsRefreshTime","swapsStxMaxFeeMultiplier","swapsUserFeeLevel","topAggId","tradeTxId","TokenDetectionController","AllProperties","TokenListController","preventPollingOnNetworkRestart","tokensChainsCache","TokenRatesController","TokensController","allIgnoredTokens","detectedTokens","ignoredTokens","TransactionController","lastFetchedBlockNumbers","methodData","TxController","UserOperationController","userOperations","UserStorageController","isProfileSyncingUpdateLoading","flattenedBackgroundStateMask","partialBackgroundState","controllerState","SENTRY_UI_STATE","history","isInitialized","isAccountMenuOpen","isNetworkMenuOpen","welcomeScreenSeen","unconnectedAccount","ethJsRpcSlug","payloadAndError","indexOf","errorLabelPrefix","userPreferredLocaleCodes","_webextensionPolyfill","i18n","getAcceptLanguages","firstPreferredLangCode","code","replace","existingLocaleCodes","split","_index","zh","_browserRuntime","constructor","this","isSupported","storage","local","dataPersistenceFailing","mostRecentRetrievedState","isExtensionInitialized","setMetadata","initMetaData","_set","meta","_get","checkForLastError","cleanUpMostRecentRetrievedState","runtime","getManifest","_flags","isEthAddress","_ethSigUtil","normalize","isValidHexAddress","_defineProperty","arg","input","hint","prim","Symbol","toPrimitive","res","TypeError","_toPrimitive","_toPropertyKey","configurable","writable","fetchWithTimeout","_initialized","_initializing","_init","response","ok","json","_metadata"],"mappings":"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","file":"../metamask/common-11.js","sourcesContent":["export * from '../pages/confirmations/selectors/confirm';\nexport * from './confirm-transaction';\nexport * from './custom-gas';\nexport * from './first-time-flow';\nexport * from './metametrics';\nexport * from './permissions';\nexport * from './selectors';\nexport * from './transactions';\nexport * from './approvals';\n","import { createSelector } from 'reselect';\n\nexport const selectFragments = (state) => state.metamask.fragments;\n\nexport const getDataCollectionForMarketing = (state) =>\n  state.metamask.dataCollectionForMarketing;\n\nexport const getParticipateInMetaMetrics = (state) =>\n  Boolean(state.metamask.participateInMetaMetrics);\n\nexport const selectFragmentBySuccessEvent = createSelector(\n  selectFragments,\n  (_, fragmentOptions) => fragmentOptions,\n  (fragments, fragmentOptions) => {\n    if (fragmentOptions.persist) {\n      return Object.values(fragments).find(\n        (fragment) => fragment.successEvent === fragmentOptions.successEvent,\n      );\n    }\n    return undefined;\n  },\n);\n\nexport const selectFragmentById = createSelector(\n  selectFragments,\n  (_, fragmentId) => fragmentId,\n  (fragments, fragmentId) => {\n    // A valid existing fragment must exist in state.\n    // If these conditions are not meant we will create a new fragment.\n    if (fragmentId && fragments?.[fragmentId]) {\n      return fragments[fragmentId];\n    }\n    return undefined;\n  },\n);\n\nexport const selectMatchingFragment = createSelector(\n  (state, params) =>\n    selectFragmentBySuccessEvent(state, params.fragmentOptions),\n  (state, params) => selectFragmentById(state, params.existingId),\n  (matchedBySuccessEvent, matchedById) => matchedById ?? matchedBySuccessEvent,\n);\n","import PropTypes from 'prop-types';\nimport { InternalAccount, isEvmAccountType } from '@metamask/keyring-api';\nimport type { RatesControllerState } from '@metamask/assets-controllers';\nimport { CaipChainId, Hex, KnownCaipNamespace } from '@metamask/utils';\nimport { createSelector } from '@reduxjs/toolkit';\nimport { NetworkType } from '@metamask/controller-utils';\nimport { Numeric } from '../../shared/modules/Numeric';\nimport {\n  MultichainProviderConfig,\n  MULTICHAIN_PROVIDER_CONFIGS,\n  MultichainNetworks,\n} from '../../shared/constants/multichain/networks';\nimport {\n  getCompletedOnboarding,\n  getConversionRate,\n  getNativeCurrency,\n  getProviderConfig,\n} from '../ducks/metamask/metamask';\nimport { BalancesControllerState } from '../../app/scripts/lib/accounts/BalancesController';\nimport { MultichainNativeAssets } from '../../shared/constants/multichain/assets';\nimport {\n  CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP,\n  TEST_NETWORK_IDS,\n} from '../../shared/constants/network';\nimport { AccountsState } from './accounts';\nimport {\n  getCurrentChainId,\n  getCurrentCurrency,\n  getIsMainnet,\n  getMaybeSelectedInternalAccount,\n  getNativeCurrencyImage,\n  getNetworkConfigurationsByChainId,\n  getSelectedAccountCachedBalance,\n  getSelectedInternalAccount,\n  getShouldShowFiat,\n  getShowFiatInTestnets,\n} from '.';\n\nexport type RatesState = {\n  metamask: RatesControllerState;\n};\n\nexport type BalancesState = {\n  metamask: BalancesControllerState;\n};\n\nexport type MultichainState = AccountsState & RatesState & BalancesState;\n\n// TODO: Remove after updating to @metamask/network-controller 20.0.0\nexport type ProviderConfigWithImageUrlAndExplorerUrl = {\n  rpcUrl?: string;\n  type: NetworkType;\n  chainId: Hex;\n  ticker: string;\n  nickname?: string;\n  id?: string;\n} & {\n  rpcPrefs?: { blockExplorerUrl?: string; imageUrl?: string };\n};\n\nexport type MultichainNetwork = {\n  nickname: string;\n  isEvmNetwork: boolean;\n  chainId: CaipChainId;\n  network: // TODO: Maybe updates ProviderConfig to add rpcPrefs.imageUrl field\n  ProviderConfigWithImageUrlAndExplorerUrl | MultichainProviderConfig;\n};\n\nexport const MultichainNetworkPropType = PropTypes.shape({\n  nickname: PropTypes.string.isRequired,\n  isEvmNetwork: PropTypes.bool.isRequired,\n  chainId: PropTypes.string,\n  network: PropTypes.oneOfType([\n    PropTypes.shape({\n      rpcUrl: PropTypes.string,\n      type: PropTypes.string.isRequired,\n      chainId: PropTypes.string.isRequired,\n      ticker: PropTypes.string.isRequired,\n      rpcPrefs: PropTypes.shape({\n        blockExplorerUrl: PropTypes.string,\n        imageUrl: PropTypes.string,\n      }),\n      nickname: PropTypes.string,\n      id: PropTypes.string,\n    }),\n    PropTypes.shape({\n      chainId: PropTypes.string.isRequired,\n      ticker: PropTypes.string.isRequired,\n      rpcPrefs: PropTypes.shape({\n        blockExplorerUrl: PropTypes.string,\n        imageUrl: PropTypes.string,\n      }),\n    }),\n  ]).isRequired,\n});\n\nexport const InternalAccountPropType = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  address: PropTypes.string.isRequired,\n  metadata: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    snap: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string,\n      enabled: PropTypes.bool,\n    }),\n    keyring: PropTypes.shape({\n      type: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n  type: PropTypes.string.isRequired,\n});\n\nexport function getMultichainNetworkProviders(\n  _state: MultichainState,\n): MultichainProviderConfig[] {\n  // TODO: need state from the ChainController?\n  return Object.values(MULTICHAIN_PROVIDER_CONFIGS);\n}\n\nexport function getMultichainNetwork(\n  state: MultichainState,\n  account?: InternalAccount,\n): MultichainNetwork {\n  const isEvm = getMultichainIsEvm(state, account);\n\n  if (isEvm) {\n    // EVM networks\n    const evmChainId: Hex = getCurrentChainId(state);\n\n    // TODO: Update to use network configurations when @metamask/network-controller is updated to 20.0.0\n    // ProviderConfig will be deprecated to use NetworkConfigurations\n    // When a user updates a network name its only updated in the NetworkConfigurations.\n    const evmNetwork: ProviderConfigWithImageUrlAndExplorerUrl =\n      getProviderConfig(state) as ProviderConfigWithImageUrlAndExplorerUrl;\n\n    const evmChainIdKey =\n      evmChainId as keyof typeof CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP;\n\n    evmNetwork.rpcPrefs = {\n      ...evmNetwork.rpcPrefs,\n      imageUrl: CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[evmChainIdKey],\n    };\n\n    const networkConfigurations = getNetworkConfigurationsByChainId(state);\n    return {\n      nickname: networkConfigurations[evmChainId]?.name ?? evmNetwork.rpcUrl,\n      isEvmNetwork: true,\n      // We assume the chain ID is `string` or `number`, so we convert it to a\n      // `Number` to be compliant with EIP155 CAIP chain ID\n      chainId: `${KnownCaipNamespace.Eip155}:${Number(\n        evmChainId,\n      )}` as CaipChainId,\n      network: evmNetwork,\n    };\n  }\n\n  // Non-EVM networks:\n  // (Hardcoded for testing)\n  // HACK: For now, we rely on the account type being \"sort-of\" CAIP compliant, so use\n  // this as a CAIP-2 namespace and apply our filter with it\n  // For non-EVM, we know we have a selected account, since the logic `isEvm` is based\n  // on having a non-EVM account being selected!\n  const selectedAccount = account ?? getSelectedInternalAccount(state);\n  const nonEvmNetworks = getMultichainNetworkProviders(state);\n  const nonEvmNetwork = nonEvmNetworks.find((provider) => {\n    return provider.isAddressCompatible(selectedAccount.address);\n  });\n\n  if (!nonEvmNetwork) {\n    throw new Error(\n      'Could not find non-EVM provider for the current configuration. This should never happen.',\n    );\n  }\n\n  return {\n    // TODO: Adapt this for other non-EVM networks\n    nickname: nonEvmNetwork.nickname,\n    isEvmNetwork: false,\n    chainId: nonEvmNetwork?.chainId,\n    network: nonEvmNetwork,\n  };\n}\n\n// FIXME: All the following might have side-effect, like if the current account is a bitcoin one and that\n// a popup (for ethereum related stuffs) is being shown (and uses this function), then the native\n// currency will be BTC..\n\nexport function getMultichainIsEvm(\n  state: MultichainState,\n  account?: InternalAccount,\n) {\n  const isOnboarded = getCompletedOnboarding(state);\n  // Selected account is not available during onboarding (this is used in\n  // the AppHeader)\n  const selectedAccount = account ?? getMaybeSelectedInternalAccount(state);\n\n  // There are no selected account during onboarding. we default to the original EVM behavior.\n  return (\n    !isOnboarded || !selectedAccount || isEvmAccountType(selectedAccount.type)\n  );\n}\n\nexport function getMultichainIsBitcoin(\n  state: MultichainState,\n  account?: InternalAccount,\n) {\n  const isEvm = getMultichainIsEvm(state, account);\n  const { symbol } = getMultichainDefaultToken(state, account);\n\n  return !isEvm && symbol === 'BTC';\n}\n\n/**\n * Retrieves the provider configuration for a multichain network.\n *\n * This function extracts the `network` field from the result of `getMultichainNetwork(state)`,\n * which is expected to be a `MultichainProviderConfig` object. The naming might suggest that\n * it returns a network, but it actually returns a provider configuration specific to a multichain setup.\n *\n * @param state - The redux state.\n * @param account - The multichain account.\n * @returns The current multichain provider configuration.\n */\nexport function getMultichainProviderConfig(\n  state: MultichainState,\n  account?: InternalAccount,\n) {\n  return getMultichainNetwork(state, account).network;\n}\n\nexport function getMultichainCurrentNetwork(state: MultichainState) {\n  return getMultichainProviderConfig(state);\n}\n\nexport function getMultichainNativeCurrency(\n  state: MultichainState,\n  account?: InternalAccount,\n) {\n  return getMultichainIsEvm(state, account)\n    ? getNativeCurrency(state)\n    : getMultichainProviderConfig(state, account).ticker;\n}\n\nexport function getMultichainCurrentCurrency(state: MultichainState) {\n  const currentCurrency = getCurrentCurrency(state);\n\n  if (getMultichainIsEvm(state)) {\n    return currentCurrency;\n  }\n\n  // For non-EVM:\n  // To mimic `getCurrentCurrency` we only consider fiat values, otherwise we\n  // fallback to the current ticker symbol value\n  return currentCurrency && currentCurrency.toLowerCase() === 'usd'\n    ? 'usd'\n    : getMultichainProviderConfig(state).ticker;\n}\n\nexport function getMultichainCurrencyImage(\n  state: MultichainState,\n  account?: InternalAccount,\n) {\n  if (getMultichainIsEvm(state, account)) {\n    return getNativeCurrencyImage(state);\n  }\n\n  const provider = getMultichainProviderConfig(\n    state,\n    account,\n  ) as MultichainProviderConfig;\n  return provider.rpcPrefs?.imageUrl;\n}\n\nexport function getMultichainNativeCurrencyImage(\n  state: MultichainState,\n  account?: InternalAccount,\n) {\n  return getMultichainCurrencyImage(state, account);\n}\n\nexport function getMultichainShouldShowFiat(\n  state: MultichainState,\n  account?: InternalAccount,\n) {\n  const selectedAccount = account ?? getSelectedInternalAccount(state);\n  const isTestnet = getMultichainIsTestnet(state, selectedAccount);\n  const isMainnet = !isTestnet;\n\n  return getMultichainIsEvm(state, selectedAccount)\n    ? getShouldShowFiat(state)\n    : isMainnet || (isTestnet && getShowFiatInTestnets(state));\n}\n\nexport function getMultichainDefaultToken(\n  state: MultichainState,\n  account?: InternalAccount,\n) {\n  const symbol = getMultichainIsEvm(state, account)\n    ? // We fallback to 'ETH' to keep original behavior of `getSwapsDefaultToken`\n      getProviderConfig(state)?.ticker ?? 'ETH'\n    : getMultichainProviderConfig(state, account).ticker;\n\n  return { symbol };\n}\n\nexport function getMultichainCurrentChainId(state: MultichainState) {\n  const { chainId } = getMultichainProviderConfig(state);\n  return chainId;\n}\n\nexport function getMultichainIsMainnet(\n  state: MultichainState,\n  account?: InternalAccount,\n) {\n  const selectedAccount = account ?? getSelectedInternalAccount(state);\n  const providerConfig = getMultichainProviderConfig(state, selectedAccount);\n  return getMultichainIsEvm(state, account)\n    ? getIsMainnet(state)\n    : // TODO: For now we only check for bitcoin, but we will need to\n      // update this for other non-EVM networks later!\n      providerConfig.chainId === MultichainNetworks.BITCOIN;\n}\n\nexport function getMultichainIsTestnet(\n  state: MultichainState,\n  account?: InternalAccount,\n) {\n  // NOTE: Since there are 2 different implementations for `IsTestnet` and `IsMainnet` we follow\n  // the same pattern here too!\n  const selectedAccount = account ?? getSelectedInternalAccount(state);\n  const providerConfig = getMultichainProviderConfig(state, selectedAccount);\n  return getMultichainIsEvm(state, account)\n    ? // FIXME: There are multiple ways of checking for an EVM test network, but\n      // current implementation differ between each other. So we do not use\n      // `getIsTestnet` here and uses the actual `TEST_NETWORK_IDS` which seems\n      // more up-to-date\n      (TEST_NETWORK_IDS as string[]).includes(providerConfig.chainId)\n    : // TODO: For now we only check for bitcoin, but we will need to\n      // update this for other non-EVM networks later!\n      (providerConfig as MultichainProviderConfig).chainId ===\n        MultichainNetworks.BITCOIN_TESTNET;\n}\n\nexport function getMultichainBalances(\n  state: MultichainState,\n): BalancesState['metamask']['balances'] {\n  return state.metamask.balances;\n}\n\nexport const getMultichainCoinRates = (state: MultichainState) => {\n  return state.metamask.rates;\n};\n\nfunction getBtcCachedBalance(state: MultichainState) {\n  const balances = getMultichainBalances(state);\n  const account = getSelectedInternalAccount(state);\n  const asset = getMultichainIsMainnet(state)\n    ? MultichainNativeAssets.BITCOIN\n    : MultichainNativeAssets.BITCOIN_TESTNET;\n\n  return balances?.[account.id]?.[asset]?.amount;\n}\n\n// This selector is not compatible with `useMultichainSelector` since it uses the selected\n// account implicitly!\nexport function getMultichainSelectedAccountCachedBalance(\n  state: MultichainState,\n) {\n  return getMultichainIsEvm(state)\n    ? getSelectedAccountCachedBalance(state)\n    : getBtcCachedBalance(state);\n}\n\nexport const getMultichainSelectedAccountCachedBalanceIsZero = createSelector(\n  [getMultichainIsEvm, getMultichainSelectedAccountCachedBalance],\n  (isEvm, balance) => {\n    const base = isEvm ? 16 : 10;\n    const numericBalance = new Numeric(balance, base);\n    return numericBalance.isZero();\n  },\n);\n\nexport function getMultichainConversionRate(\n  state: MultichainState,\n  account?: InternalAccount,\n) {\n  const { ticker } = getMultichainProviderConfig(state, account);\n\n  return getMultichainIsEvm(state, account)\n    ? getConversionRate(state)\n    : getMultichainCoinRates(state)?.[ticker.toLowerCase()]?.conversionRate;\n}\n","import { ApprovalType } from '@metamask/controller-utils';\nimport { WALLET_SNAP_PERMISSION_KEY } from '@metamask/snaps-rpc-methods';\nimport { isEvmAccountType } from '@metamask/keyring-api';\nimport { CaveatTypes } from '../../shared/constants/permissions';\nimport { getApprovalRequestsByType } from './approvals';\nimport { createDeepEqualSelector } from './util';\nimport {\n  getInternalAccount,\n  getMetaMaskAccountsOrdered,\n  getOriginOfCurrentTab,\n  getSelectedInternalAccount,\n  getTargetSubjectMetadata,\n} from '.';\n\n// selectors\n\n/**\n * Deep equal selector to get the permission subjects object.\n *\n * @param {object} state - The current state.\n * @returns {object} The permissions subjects object.\n */\nexport const getPermissionSubjectsDeepEqual = createDeepEqualSelector(\n  (state) => state.metamask.subjects || {},\n  (subjects) => subjects,\n);\n\n/**\n * Deep equal selector to get the subject metadata object.\n *\n * @param {object} state - The current state.\n * @returns {object} The subject metadata object.\n */\nexport const getSubjectMetadataDeepEqual = createDeepEqualSelector(\n  (state) => state.metamask.subjectMetadata,\n  (metadata) => metadata,\n);\n\n/**\n * Selector to get the permission subjects object.\n *\n * @param {object} state - The current state.\n * @returns {object} The permissions subjects object.\n */\nexport function getPermissionSubjects(state) {\n  return state.metamask.subjects || {};\n}\n\n/**\n * Selects the permitted accounts from the eth_accounts permission given state\n * and an origin.\n *\n * @param {object} state - The current state.\n * @param {string} origin - The origin/subject to get the permitted accounts for.\n * @returns {Array<string>} An empty array or an array of accounts.\n */\nexport function getPermittedAccounts(state, origin) {\n  return getAccountsFromPermission(\n    getAccountsPermissionFromSubject(subjectSelector(state, origin)),\n  );\n}\n\n/**\n * Selects the permitted accounts from the eth_accounts permission for the\n * origin of the current tab.\n *\n * @param {object} state - The current state.\n * @returns {Array<string>} An empty array or an array of accounts.\n */\nexport function getPermittedAccountsForCurrentTab(state) {\n  return getPermittedAccounts(state, getOriginOfCurrentTab(state));\n}\n\nexport function getPermittedAccountsForSelectedTab(state, activeTab) {\n  return getPermittedAccounts(state, activeTab);\n}\n\n/**\n * Returns a map of permitted accounts by origin for all origins.\n *\n * @param {object} state - The current state.\n * @returns {object} Permitted accounts by origin.\n */\nexport function getPermittedAccountsByOrigin(state) {\n  const subjects = getPermissionSubjects(state);\n  return Object.keys(subjects).reduce((acc, subjectKey) => {\n    const accounts = getAccountsFromSubject(subjects[subjectKey]);\n    if (accounts.length > 0) {\n      acc[subjectKey] = accounts;\n    }\n    return acc;\n  }, {});\n}\n\nexport function getSubjectMetadata(state) {\n  return state.metamask.subjectMetadata;\n}\n\n/**\n * Returns an array of connected subject objects, with the following properties:\n * - extensionId\n * - key (i.e. origin)\n * - name\n * - icon\n *\n * @param {object} state - The current state.\n * @returns {Array<object>} An array of connected subject objects.\n */\nexport function getConnectedSubjectsForSelectedAddress(state) {\n  const selectedInternalAccount = getSelectedInternalAccount(state);\n  const subjects = getPermissionSubjects(state);\n  const subjectMetadata = getSubjectMetadata(state);\n\n  const connectedSubjects = [];\n\n  Object.entries(subjects).forEach(([subjectKey, subjectValue]) => {\n    const exposedAccounts = getAccountsFromSubject(subjectValue);\n    if (!exposedAccounts.includes(selectedInternalAccount.address)) {\n      return;\n    }\n\n    const { extensionId, name, iconUrl } = subjectMetadata[subjectKey] || {};\n\n    connectedSubjects.push({\n      extensionId,\n      origin: subjectKey,\n      name,\n      iconUrl,\n    });\n  });\n\n  return connectedSubjects;\n}\n\n/**\n *  @typedef {import('./selectors.types').AccountConnections} AccountConnections\n */\n\n/**\n * Retrieves the connected subjects for all addresses.\n *\n * @returns {AccountConnections}  The connected subjects for all addresses.\n */\nexport const getConnectedSubjectsForAllAddresses = createDeepEqualSelector(\n  getPermissionSubjects,\n  getSubjectMetadata,\n  (subjects, subjectMetadata) => {\n    const accountsToConnections = {};\n    Object.entries(subjects).forEach(([subjectKey, subjectValue]) => {\n      const exposedAccounts = getAccountsFromSubject(subjectValue);\n      exposedAccounts.forEach((address) => {\n        if (!accountsToConnections[address]) {\n          accountsToConnections[address] = [];\n        }\n        const metadata = subjectMetadata[subjectKey];\n        accountsToConnections[address].push({\n          origin: subjectKey,\n          ...metadata,\n        });\n      });\n    });\n\n    return accountsToConnections;\n  },\n);\n\nexport function getSubjectsWithPermission(state, permissionName) {\n  const subjects = getPermissionSubjects(state);\n\n  const connectedSubjects = [];\n\n  Object.entries(subjects).forEach(([origin, { permissions }]) => {\n    if (permissions[permissionName]) {\n      const { extensionId, name, iconUrl } =\n        getTargetSubjectMetadata(state, origin) || {};\n\n      connectedSubjects.push({\n        extensionId,\n        origin,\n        name,\n        iconUrl,\n      });\n    }\n  });\n  return connectedSubjects;\n}\n\nexport function getSubjectsWithSnapPermission(state, snapId) {\n  const subjects = getPermissionSubjects(state);\n\n  return Object.entries(subjects)\n    .filter(\n      ([_origin, { permissions }]) =>\n        permissions[WALLET_SNAP_PERMISSION_KEY]?.caveats[0].value[snapId],\n    )\n    .map(([origin, _subject]) => {\n      const { extensionId, name, iconUrl } =\n        getTargetSubjectMetadata(state, origin) || {};\n      return {\n        extensionId,\n        origin,\n        name,\n        iconUrl,\n      };\n    });\n}\n\n/**\n * Returns an object mapping addresses to objects mapping origins to connected\n * subject info. Subject info objects have the following properties:\n * - iconUrl\n * - name\n *\n * @param {object} state - The current state.\n * @returns {object} A mapping of addresses to a mapping of origins to\n * connected subject info.\n */\nexport function getAddressConnectedSubjectMap(state) {\n  const subjectMetadata = getSubjectMetadata(state);\n  const accountsMap = getPermittedAccountsByOrigin(state);\n  const addressConnectedIconMap = {};\n\n  Object.keys(accountsMap).forEach((subjectKey) => {\n    const { iconUrl, name } = subjectMetadata[subjectKey] || {};\n\n    accountsMap[subjectKey].forEach((address) => {\n      const nameToRender = name || subjectKey;\n\n      addressConnectedIconMap[address] = addressConnectedIconMap[address]\n        ? {\n            ...addressConnectedIconMap[address],\n            [subjectKey]: { iconUrl, name: nameToRender },\n          }\n        : { [subjectKey]: { iconUrl, name: nameToRender } };\n    });\n  });\n\n  return addressConnectedIconMap;\n}\n\nexport const isAccountConnectedToCurrentTab = createDeepEqualSelector(\n  getPermittedAccountsForCurrentTab,\n  (_state, address) => address,\n  (permittedAccounts, address) => {\n    return permittedAccounts.some((account) => account === address);\n  },\n);\n\n// selector helpers\n\nfunction getAccountsFromSubject(subject) {\n  return getAccountsFromPermission(getAccountsPermissionFromSubject(subject));\n}\n\nfunction getAccountsPermissionFromSubject(subject = {}) {\n  return subject.permissions?.eth_accounts || {};\n}\n\nfunction getAccountsFromPermission(accountsPermission) {\n  const accountsCaveat = getAccountsCaveatFromPermission(accountsPermission);\n  return accountsCaveat && Array.isArray(accountsCaveat.value)\n    ? accountsCaveat.value\n    : [];\n}\n\nfunction getAccountsCaveatFromPermission(accountsPermission = {}) {\n  return (\n    Array.isArray(accountsPermission.caveats) &&\n    accountsPermission.caveats.find(\n      (caveat) => caveat.type === CaveatTypes.restrictReturnedAccounts,\n    )\n  );\n}\n\nfunction subjectSelector(state, origin) {\n  return origin && state.metamask.subjects?.[origin];\n}\n\nexport function getAccountToConnectToActiveTab(state) {\n  const selectedInternalAccount = getSelectedInternalAccount(state);\n  const connectedAccounts = getPermittedAccountsForCurrentTab(state);\n\n  const {\n    metamask: {\n      internalAccounts: { accounts },\n    },\n  } = state;\n  const numberOfAccounts = Object.keys(accounts).length;\n\n  if (\n    connectedAccounts.length &&\n    connectedAccounts.length !== numberOfAccounts\n  ) {\n    if (\n      connectedAccounts.findIndex(\n        (address) => address === selectedInternalAccount.address,\n      ) === -1\n    ) {\n      return getInternalAccount(state, selectedInternalAccount.id);\n    }\n  }\n\n  return undefined;\n}\n\nexport function getOrderedConnectedAccountsForActiveTab(state) {\n  const {\n    activeTab,\n    metamask: { permissionHistory },\n  } = state;\n\n  const permissionHistoryByAccount =\n    // eslint-disable-next-line camelcase\n    permissionHistory[activeTab.origin]?.eth_accounts?.accounts;\n  const orderedAccounts = getMetaMaskAccountsOrdered(state);\n  const connectedAccounts = getPermittedAccountsForCurrentTab(state);\n\n  return orderedAccounts\n    .filter((account) => connectedAccounts.includes(account.address))\n    .filter((account) => isEvmAccountType(account.type))\n    .map((account) => ({\n      ...account,\n      metadata: {\n        ...account.metadata,\n        lastActive: permissionHistoryByAccount?.[account.address],\n      },\n    }))\n    .sort(\n      ({ lastSelected: lastSelectedA }, { lastSelected: lastSelectedB }) => {\n        if (lastSelectedA === lastSelectedB) {\n          return 0;\n        } else if (lastSelectedA === undefined) {\n          return 1;\n        } else if (lastSelectedB === undefined) {\n          return -1;\n        }\n\n        return lastSelectedB - lastSelectedA;\n      },\n    );\n}\n\nexport function getOrderedConnectedAccountsForConnectedDapp(state, activeTab) {\n  const {\n    metamask: { permissionHistory },\n  } = state;\n\n  const permissionHistoryByAccount =\n    // eslint-disable-next-line camelcase\n    permissionHistory[activeTab.origin]?.eth_accounts?.accounts;\n  const orderedAccounts = getMetaMaskAccountsOrdered(state);\n  const connectedAccounts = getPermittedAccountsForSelectedTab(\n    state,\n    activeTab,\n  );\n\n  return orderedAccounts\n    .filter((account) => connectedAccounts.includes(account.address))\n    .filter((account) => isEvmAccountType(account.type))\n    .map((account) => ({\n      ...account,\n      metadata: {\n        ...account.metadata,\n        lastActive: permissionHistoryByAccount?.[account.address],\n      },\n    }))\n    .sort(\n      ({ lastSelected: lastSelectedA }, { lastSelected: lastSelectedB }) => {\n        if (lastSelectedA === lastSelectedB) {\n          return 0;\n        } else if (lastSelectedA === undefined) {\n          return 1;\n        } else if (lastSelectedB === undefined) {\n          return -1;\n        }\n\n        return lastSelectedB - lastSelectedA;\n      },\n    );\n}\n\nexport function getPermissionsForActiveTab(state) {\n  const { activeTab, metamask } = state;\n  const { subjects = {} } = metamask;\n\n  const permissions = subjects[activeTab.origin]?.permissions ?? {};\n  return Object.keys(permissions).map((parentCapability) => {\n    return {\n      key: parentCapability,\n      value: permissions[parentCapability],\n    };\n  });\n}\n\nexport function activeTabHasPermissions(state) {\n  const { activeTab, metamask } = state;\n  const { subjects = {} } = metamask;\n\n  return Boolean(\n    Object.keys(subjects[activeTab.origin]?.permissions || {}).length > 0,\n  );\n}\n\n/**\n * Get the connected accounts history for all origins.\n *\n * @param {Record<string, unknown>} state - The MetaMask state.\n * @returns {Record<string, { accounts: Record<string, number> }>} An object\n * with account connection histories by origin.\n */\nexport function getLastConnectedInfo(state) {\n  const { permissionHistory = {} } = state.metamask;\n  return Object.keys(permissionHistory).reduce((lastConnectedInfo, origin) => {\n    if (permissionHistory[origin].eth_accounts) {\n      lastConnectedInfo[origin] = JSON.parse(\n        JSON.stringify(permissionHistory[origin].eth_accounts),\n      );\n    }\n\n    return lastConnectedInfo;\n  }, {});\n}\n\nexport function getSnapInstallOrUpdateRequests(state) {\n  return Object.values(state.metamask.pendingApprovals)\n    .filter(\n      ({ type }) =>\n        type === 'wallet_installSnap' ||\n        type === 'wallet_updateSnap' ||\n        type === 'wallet_installSnapResult',\n    )\n    .map(({ requestData }) => requestData);\n}\n\nexport function getFirstSnapInstallOrUpdateRequest(state) {\n  return getSnapInstallOrUpdateRequests(state)?.[0] ?? null;\n}\n\nexport function getPermissionsRequests(state) {\n  return getApprovalRequestsByType(\n    state,\n    ApprovalType.WalletRequestPermissions,\n  )?.map(({ requestData }) => requestData);\n}\n\nexport function getFirstPermissionRequest(state) {\n  const requests = getPermissionsRequests(state);\n  return requests && requests[0] ? requests[0] : null;\n}\n\nexport function getPermissions(state, origin) {\n  return getPermissionSubjects(state)[origin]?.permissions;\n}\n\nexport function getRequestState(state, id) {\n  return state.metamask.pendingApprovals[id]?.requestState;\n}\n\nexport function getRequestType(state, id) {\n  return state.metamask.pendingApprovals[id]?.type;\n}\n","import { SubjectType } from '@metamask/permission-controller';\nimport { ApprovalType } from '@metamask/controller-utils';\nimport {\n  stripSnapPrefix,\n  getLocalizedSnapManifest,\n  SnapStatus,\n} from '@metamask/snaps-utils';\nimport { memoize } from 'lodash';\nimport semver from 'semver';\nimport { createSelector } from 'reselect';\nimport { NameType } from '@metamask/name-controller';\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport { isEvmAccountType } from '@metamask/keyring-api';\nimport { RpcEndpointType } from '@metamask/network-controller';\nimport { addHexPrefix, getEnvironmentType } from '../../app/scripts/lib/util';\nimport {\n  TEST_CHAINS,\n  MAINNET_DISPLAY_NAME,\n  BSC_DISPLAY_NAME,\n  POLYGON_DISPLAY_NAME,\n  AVALANCHE_DISPLAY_NAME,\n  CHAIN_ID_TO_RPC_URL_MAP,\n  CHAIN_IDS,\n  NETWORK_TYPES,\n  NetworkStatus,\n  SEPOLIA_DISPLAY_NAME,\n  GOERLI_DISPLAY_NAME,\n  LINEA_GOERLI_DISPLAY_NAME,\n  LINEA_MAINNET_DISPLAY_NAME,\n  CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP,\n  ARBITRUM_DISPLAY_NAME,\n  OPTIMISM_DISPLAY_NAME,\n  BASE_DISPLAY_NAME,\n  ZK_SYNC_ERA_DISPLAY_NAME,\n  CHAIN_ID_TOKEN_IMAGE_MAP,\n  LINEA_SEPOLIA_DISPLAY_NAME,\n  CRONOS_DISPLAY_NAME,\n  CELO_DISPLAY_NAME,\n  GNOSIS_DISPLAY_NAME,\n  FANTOM_DISPLAY_NAME,\n  POLYGON_ZKEVM_DISPLAY_NAME,\n  MOONBEAM_DISPLAY_NAME,\n  MOONRIVER_DISPLAY_NAME,\n  TEST_NETWORK_IDS,\n} from '../../shared/constants/network';\nimport {\n  WebHIDConnectedStatuses,\n  LedgerTransportTypes,\n  HardwareTransportStates,\n} from '../../shared/constants/hardware-wallets';\nimport { KeyringType } from '../../shared/constants/keyring';\nimport { getIsSmartTransaction } from '../../shared/modules/selectors';\n\nimport { TRUNCATED_NAME_CHAR_LIMIT } from '../../shared/constants/labels';\n\nimport {\n  SWAPS_CHAINID_DEFAULT_TOKEN_MAP,\n  ALLOWED_PROD_SWAPS_CHAIN_IDS,\n  ALLOWED_DEV_SWAPS_CHAIN_IDS,\n} from '../../shared/constants/swaps';\n\nimport { ALLOWED_BRIDGE_CHAIN_IDS } from '../../shared/constants/bridge';\n\nimport {\n  shortenAddress,\n  getAccountByAddress,\n  getURLHostName,\n} from '../helpers/utils/util';\n\nimport {\n  PRIORITY_APPROVAL_TEMPLATE_TYPES,\n  TEMPLATED_CONFIRMATION_APPROVAL_TYPES,\n} from '../pages/confirmations/confirmation/templates';\nimport { STATIC_MAINNET_TOKEN_LIST } from '../../shared/constants/tokens';\nimport { DAY } from '../../shared/constants/time';\nimport { TERMS_OF_USE_LAST_UPDATED } from '../../shared/constants/terms';\nimport {\n  getProviderConfig,\n  getConversionRate,\n  isNotEIP1559Network,\n  isEIP1559Network,\n  getLedgerTransportType,\n  isAddressLedger,\n  getIsUnlocked,\n} from '../ducks/metamask/metamask';\nimport {\n  getLedgerWebHidConnectedStatus,\n  getLedgerTransportStatus,\n} from '../ducks/app/app';\nimport { isEqualCaseInsensitive } from '../../shared/modules/string-utils';\nimport {\n  getValueFromWeiHex,\n  hexToDecimal,\n} from '../../shared/modules/conversion.utils';\nimport { BackgroundColor } from '../helpers/constants/design-system';\nimport { NOTIFICATION_DROP_LEDGER_FIREFOX } from '../../shared/notifications';\nimport {\n  SURVEY_DATE,\n  SURVEY_END_TIME,\n  SURVEY_START_TIME,\n} from '../helpers/constants/survey';\nimport { PRIVACY_POLICY_DATE } from '../helpers/constants/privacy-policy';\nimport { ENVIRONMENT_TYPE_POPUP } from '../../shared/constants/app';\nimport { MultichainNativeAssets } from '../../shared/constants/multichain/assets';\nimport { BridgeFeatureFlagsKey } from '../../app/scripts/controllers/bridge/types';\nimport {\n  getAllUnapprovedTransactions,\n  getCurrentNetworkTransactions,\n  getUnapprovedTransactions,\n} from './transactions';\n// eslint-disable-next-line import/order\nimport {\n  getPermissionSubjects,\n  getConnectedSubjectsForAllAddresses,\n  getOrderedConnectedAccountsForActiveTab,\n  getOrderedConnectedAccountsForConnectedDapp,\n  getSubjectMetadata,\n} from './permissions';\nimport { createDeepEqualSelector } from './util';\nimport { getMultichainBalances, getMultichainNetwork } from './multichain';\n\n/**\n * Returns true if the currently selected network is inaccessible or whether no\n * provider has been set yet for the currently selected network.\n *\n * @param {object} state - Redux state object.\n */\nexport function isNetworkLoading(state) {\n  const selectedNetworkClientId = getSelectedNetworkClientId(state);\n  return (\n    selectedNetworkClientId &&\n    state.metamask.networksMetadata[selectedNetworkClientId].status !==\n      NetworkStatus.Available\n  );\n}\n\nexport function getSelectedNetworkClientId(state) {\n  return state.metamask.selectedNetworkClientId;\n}\n\nexport function getNetworkIdentifier(state) {\n  const { type, nickname, rpcUrl } = getProviderConfig(state);\n\n  return nickname || rpcUrl || type;\n}\n\nexport function getCurrentChainId(state) {\n  const { chainId } = getProviderConfig(state);\n  return chainId;\n}\n\nexport function getMetaMetricsId(state) {\n  const { metaMetricsId } = state.metamask;\n  return metaMetricsId;\n}\n\nexport function isCurrentProviderCustom(state) {\n  const provider = getProviderConfig(state);\n  return (\n    provider.type === NETWORK_TYPES.RPC &&\n    !Object.values(CHAIN_IDS).includes(provider.chainId)\n  );\n}\n\nexport function getCurrentQRHardwareState(state) {\n  const { qrHardware } = state.metamask;\n  return qrHardware || {};\n}\n\nexport function getIsSigningQRHardwareTransaction(state) {\n  return state.metamask.qrHardware?.sign?.request !== undefined;\n}\n\nexport function getCurrentKeyring(state) {\n  const internalAccount = getSelectedInternalAccount(state);\n\n  if (!internalAccount) {\n    return null;\n  }\n\n  return internalAccount.metadata.keyring;\n}\n\n/**\n * The function returns true if network and account details are fetched and\n * both of them support EIP-1559.\n *\n * @param state\n * @param [networkClientId] - The optional network client ID to check network and account for EIP-1559 support\n */\nexport function checkNetworkAndAccountSupports1559(state, networkClientId) {\n  const networkSupports1559 = isEIP1559Network(state, networkClientId);\n  return networkSupports1559;\n}\n\n/**\n * The function returns true if network and account details are fetched and\n * either of them do not support EIP-1559.\n *\n * @param state\n */\nexport function checkNetworkOrAccountNotSupports1559(state) {\n  const networkNotSupports1559 = isNotEIP1559Network(state);\n  return networkNotSupports1559;\n}\n\n/**\n * Checks if the current wallet is a hardware wallet.\n *\n * @param {object} state\n * @returns {boolean}\n */\nexport function isHardwareWallet(state) {\n  const keyring = getCurrentKeyring(state);\n  return Boolean(keyring?.type?.includes('Hardware'));\n}\n\n/**\n * Checks if the account supports smart transactions.\n *\n * @param {object} state - The state object.\n * @returns {boolean}\n */\nexport function accountSupportsSmartTx(state) {\n  const accountType = getAccountType(state);\n  return Boolean(accountType !== 'snap');\n}\n\n/**\n * Get a HW wallet type, e.g. \"Ledger Hardware\"\n *\n * @param {object} state\n * @returns {string | undefined}\n */\nexport function getHardwareWalletType(state) {\n  const keyring = getCurrentKeyring(state);\n  return isHardwareWallet(state) ? keyring.type : undefined;\n}\n\nexport function getAccountType(state) {\n  const currentKeyring = getCurrentKeyring(state);\n  return getAccountTypeForKeyring(currentKeyring);\n}\n\nexport function getAccountTypeForKeyring(keyring) {\n  if (!keyring) {\n    return '';\n  }\n\n  const { type } = keyring;\n\n\n  switch (type) {\n    case KeyringType.trezor:\n    case KeyringType.ledger:\n    case KeyringType.lattice:\n    case KeyringType.qr:\n      return 'hardware';\n    case KeyringType.imported:\n      return 'imported';\n    ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n    case KeyringType.snap:\n      return 'snap';\n    ///: END:ONLY_INCLUDE_IF\n    default:\n      return 'default';\n  }\n}\n\n/**\n * Get MetaMask accounts, including account name and balance.\n */\nexport const getMetaMaskAccounts = createSelector(\n  getInternalAccounts,\n  getMetaMaskAccountBalances,\n  getMetaMaskCachedBalances,\n  getMultichainBalances,\n  getMultichainNetwork,\n  (\n    internalAccounts,\n    balances,\n    cachedBalances,\n    multichainBalances,\n    multichainNetwork,\n  ) =>\n    Object.values(internalAccounts).reduce((accounts, internalAccount) => {\n      // TODO: mix in the identity state here as well, consolidating this\n      // selector with `accountsWithSendEtherInfoSelector`\n      let account = internalAccount;\n\n      // TODO: `AccountTracker` balances are in hex and `MultichainBalance` are in number.\n      // We should consolidate the format to either hex or number\n      if (isEvmAccountType(internalAccount.type)) {\n        if (balances?.[internalAccount.address]) {\n          account = {\n            ...account,\n            ...balances[internalAccount.address],\n          };\n        }\n      } else {\n        account = {\n          ...account,\n          balance:\n            multichainBalances?.[internalAccount.id]?.[\n              MultichainNativeAssets[multichainNetwork.chainId]\n            ]?.amount ?? '0',\n        };\n      }\n\n      if (account.balance === null || account.balance === undefined) {\n        account = {\n          ...account,\n          balance:\n            (cachedBalances && cachedBalances[internalAccount.address]) ??\n            '0x0',\n        };\n      }\n\n      return {\n        ...accounts,\n        [internalAccount.address]: account,\n      };\n    }, {}),\n);\n/**\n * Returns the address of the selected InternalAccount from the Metamask state.\n *\n * @param state - The Metamask state object.\n * @returns {string} The selected address.\n */\nexport function getSelectedAddress(state) {\n  return getSelectedInternalAccount(state)?.address;\n}\n\nexport function getInternalAccountByAddress(state, address) {\n  return Object.values(state.metamask.internalAccounts.accounts).find(\n    (account) => isEqualCaseInsensitive(account.address, address),\n  );\n}\n\nexport function getMaybeSelectedInternalAccount(state) {\n  // Same as `getSelectedInternalAccount`, but might potentially be `undefined`:\n  // - This might happen during the onboarding\n  const accountId = state.metamask.internalAccounts?.selectedAccount;\n  return accountId\n    ? state.metamask.internalAccounts?.accounts[accountId]\n    : undefined;\n}\n\nexport function getSelectedInternalAccount(state) {\n  const accountId = state.metamask.internalAccounts.selectedAccount;\n  return state.metamask.internalAccounts.accounts[accountId];\n}\n\nexport function checkIfMethodIsEnabled(state, methodName) {\n  const internalAccount = getSelectedInternalAccount(state);\n  return Boolean(internalAccount.methods.includes(methodName));\n}\n\nexport function getSelectedInternalAccountWithBalance(state) {\n  const selectedAccount = getSelectedInternalAccount(state);\n  const rawAccount = getMetaMaskAccountBalances(state)[selectedAccount.address];\n\n  const selectedAccountWithBalance = {\n    ...selectedAccount,\n    balance: rawAccount ? rawAccount.balance : '0x0',\n  };\n\n  return selectedAccountWithBalance;\n}\n\nexport function getInternalAccounts(state) {\n  return Object.values(state.metamask.internalAccounts.accounts);\n}\n\nexport function getInternalAccount(state, accountId) {\n  return state.metamask.internalAccounts.accounts[accountId];\n}\n\n/**\n * Returns an array of internal accounts sorted by keyring.\n *\n * @param keyrings - The array of keyrings.\n * @param accounts - The object containing the accounts.\n * @returns The array of internal accounts sorted by keyring.\n */\nexport const getInternalAccountsSortedByKeyring = createSelector(\n  getMetaMaskKeyrings,\n  getMetaMaskAccounts,\n  (keyrings, accounts) => {\n    // keep existing keyring order\n    const internalAccounts = keyrings\n      .map(({ accounts: addresses }) => addresses)\n      .flat()\n      .map((address) => {\n        return accounts[address];\n      });\n\n    return internalAccounts;\n  },\n);\n\nexport function getNumberOfTokens(state) {\n  const { tokens } = state.metamask;\n  return tokens ? tokens.length : 0;\n}\n\nexport function getMetaMaskKeyrings(state) {\n  return state.metamask.keyrings;\n}\n\n/**\n * Get account balances state.\n *\n * @param {object} state - Redux state\n * @returns {object} A map of account addresses to account objects (which includes the account balance)\n */\nexport function getMetaMaskAccountBalances(state) {\n  return state.metamask.accounts;\n}\n\nexport function getMetaMaskCachedBalances(state) {\n  const chainId = getCurrentChainId(state);\n\n  if (state.metamask.accountsByChainId?.[chainId]) {\n    return Object.entries(state.metamask.accountsByChainId[chainId]).reduce(\n      (accumulator, [key, value]) => {\n        accumulator[key] = value.balance;\n        return accumulator;\n      },\n      {},\n    );\n  }\n  return {};\n}\n\n/**\n *  @typedef {import('./selectors.types').InternalAccountWithBalance} InternalAccountWithBalance\n */\n\n/**\n * Get ordered (by keyrings) accounts with InternalAccount and balance\n *\n * @returns {InternalAccountWithBalance} An array of internal accounts with balance\n */\nexport const getMetaMaskAccountsOrdered = createSelector(\n  getInternalAccountsSortedByKeyring,\n  getMetaMaskAccounts,\n  (internalAccounts, accounts) => {\n    return internalAccounts.map((internalAccount) => ({\n      ...internalAccount,\n      ...accounts[internalAccount.address],\n    }));\n  },\n);\n\nexport const getMetaMaskAccountsConnected = createSelector(\n  getMetaMaskAccountsOrdered,\n  (connectedAccounts) =>\n    connectedAccounts.map(({ address }) => address.toLowerCase()),\n);\n\nexport function isBalanceCached(state) {\n  const { address: selectedAddress } = getSelectedInternalAccount(state);\n  const selectedAccountBalance =\n    getMetaMaskAccountBalances(state)[selectedAddress]?.balance;\n  const cachedBalance = getSelectedAccountCachedBalance(state);\n\n  return Boolean(!selectedAccountBalance && cachedBalance);\n}\n\nexport function getSelectedAccountCachedBalance(state) {\n  const cachedBalances = getMetaMaskCachedBalances(state);\n  const { address: selectedAddress } = getSelectedInternalAccount(state);\n\n  return cachedBalances?.[selectedAddress];\n}\n\nexport function getAllTokens(state) {\n  return state.metamask.allTokens;\n}\n\n/**\n * Selector to return an origin to network ID map\n *\n * @param state - Redux state object.\n * @returns Object - Installed Snaps.\n */\nexport function getAllDomains(state) {\n  return state.metamask.domains;\n}\n\nexport const getConfirmationExchangeRates = (state) => {\n  return state.metamask.confirmationExchangeRates;\n};\n\nexport const getSelectedAccount = createDeepEqualSelector(\n  getMetaMaskAccounts,\n  getSelectedInternalAccount,\n  (accounts, selectedAccount) => {\n    // At the time of onboarding there is no selected account\n    if (selectedAccount) {\n      return {\n        ...selectedAccount,\n        ...accounts[selectedAccount.address],\n      };\n    }\n    return undefined;\n  },\n);\n\nexport function getTargetAccount(state, targetAddress) {\n  const accounts = getMetaMaskAccounts(state);\n  return accounts[targetAddress];\n}\n\nexport const getTokenExchangeRates = (state) => {\n  const chainId = getCurrentChainId(state);\n  const contractMarketData = state.metamask.marketData?.[chainId] ?? {};\n\n  return Object.entries(contractMarketData).reduce(\n    (acc, [address, marketData]) => {\n      acc[address] = marketData?.price ?? null;\n      return acc;\n    },\n    {},\n  );\n};\n\nexport const getTokensMarketData = (state) => {\n  const chainId = getCurrentChainId(state);\n  return state.metamask.marketData?.[chainId];\n};\n\nexport function getAddressBook(state) {\n  const chainId = getCurrentChainId(state);\n  if (!state.metamask.addressBook[chainId]) {\n    return [];\n  }\n  return Object.values(state.metamask.addressBook[chainId]);\n}\n\nexport function getEnsResolutionByAddress(state, address) {\n  if (state.metamask.ensResolutionsByAddress[address]) {\n    return state.metamask.ensResolutionsByAddress[address];\n  }\n\n  const entry =\n    getAddressBookEntry(state, address) ||\n    getInternalAccountByAddress(state, address);\n\n  return entry?.name || '';\n}\n\nexport function getAddressBookEntry(state, address) {\n  const addressBook = getAddressBook(state);\n  const entry = addressBook.find((contact) =>\n    isEqualCaseInsensitive(contact.address, address),\n  );\n  return entry;\n}\n\nexport function getAddressBookEntryOrAccountName(state, address) {\n  const entry = getAddressBookEntry(state, address);\n  if (entry && entry.name !== '') {\n    return entry.name;\n  }\n\n  const internalAccount = Object.values(getInternalAccounts(state)).find(\n    (account) => isEqualCaseInsensitive(account.address, address),\n  );\n\n  return internalAccount?.metadata.name || address;\n}\n\nexport function getAccountName(accounts, accountAddress) {\n  const account = accounts.find((internalAccount) =>\n    isEqualCaseInsensitive(internalAccount.address, accountAddress),\n  );\n  return account && account.metadata.name !== '' ? account.metadata.name : '';\n}\n\nexport function accountsWithSendEtherInfoSelector(state) {\n  const accounts = getMetaMaskAccounts(state);\n  const internalAccounts = getInternalAccounts(state);\n\n  const accountsWithSendEtherInfo = Object.values(internalAccounts).map(\n    (internalAccount) => {\n      return {\n        ...internalAccount,\n        ...accounts[internalAccount.address],\n      };\n    },\n  );\n\n  return accountsWithSendEtherInfo;\n}\n\nexport function getAccountsWithLabels(state) {\n  return getMetaMaskAccountsOrdered(state).map((account) => {\n    const {\n      address,\n      metadata: { name },\n      balance,\n    } = account;\n    return {\n      ...account,\n      addressLabel: `${\n        name.length < TRUNCATED_NAME_CHAR_LIMIT\n          ? name\n          : `${name.slice(0, TRUNCATED_NAME_CHAR_LIMIT - 1)}...`\n      } (${shortenAddress(address)})`,\n      label: name,\n      balance,\n    };\n  });\n}\n\nexport function getCurrentAccountWithSendEtherInfo(state) {\n  const { address: currentAddress } = getSelectedInternalAccount(state);\n  const accounts = accountsWithSendEtherInfoSelector(state);\n\n  return getAccountByAddress(accounts, currentAddress);\n}\n\nexport function getTargetAccountWithSendEtherInfo(state, targetAddress) {\n  const accounts = accountsWithSendEtherInfoSelector(state);\n  return getAccountByAddress(accounts, targetAddress);\n}\n\nexport function getCurrentEthBalance(state) {\n  return getCurrentAccountWithSendEtherInfo(state)?.balance;\n}\n\nexport function getGasIsLoading(state) {\n  return state.appState.gasIsLoading;\n}\n\n/**\n * Retrieves user preference to never see the \"Switched Network\" toast\n *\n * @param state - Redux state object.\n * @returns Boolean preference value\n */\nexport function getNeverShowSwitchedNetworkMessage(state) {\n  return state.metamask.switchedNetworkNeverShowMessage;\n}\n\nexport const getNetworkConfigurationsByChainId = createDeepEqualSelector(\n  (state) => state.metamask.networkConfigurationsByChainId,\n  /**\n   * @param networkConfigurationsByChainId\n   * @returns { import('@metamask/network-controller').NetworkState['networkConfigurationsByChainId']}\n   */\n  (networkConfigurationsByChainId) => networkConfigurationsByChainId,\n);\n\nexport function getRequestingNetworkInfo(state, chainIds) {\n  // If chainIds is undefined, set it to an empty array\n  let processedChainIds = chainIds === undefined ? [] : chainIds;\n\n  // If chainIds is a string, convert it to an array\n  if (typeof processedChainIds === 'string') {\n    processedChainIds = [processedChainIds];\n  }\n\n  // Ensure chainIds is flattened if it contains nested arrays\n  const flattenedChainIds = processedChainIds.flat();\n\n  // Filter the non-test networks to include only those with chainId in flattenedChainIds\n  return Object.values(getNetworkConfigurationsByChainId(state)).filter(\n    (network) =>\n      !TEST_CHAINS.includes(network.chainId) &&\n      flattenedChainIds.includes(network.chainId),\n  );\n}\n\n/**\n * Provides information about the last network change if present\n *\n * @param state - Redux state object.\n * @returns An object with information about the network with the given networkClientId\n */\nexport function getSwitchedNetworkDetails(state) {\n  const { switchedNetworkDetails } = state.metamask;\n  const networkConfigurations = getNetworkConfigurationsByChainId(state);\n\n  if (switchedNetworkDetails) {\n    const switchedNetwork = Object.values(networkConfigurations).find(\n      (network) =>\n        network.rpcEndpoints.some(\n          (rpcEndpoint) =>\n            rpcEndpoint.networkClientId ===\n            switchedNetworkDetails.networkClientId,\n        ),\n    );\n    return {\n      nickname: switchedNetwork?.name,\n      imageUrl: CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[switchedNetwork?.chainId],\n      origin: switchedNetworkDetails?.origin,\n    };\n  }\n\n  return null;\n}\n\nexport function getAppIsLoading(state) {\n  return state.appState.isLoading;\n}\n\nexport function getNftIsStillFetchingIndication(state) {\n  return state.appState.isNftStillFetchingIndication;\n}\n\nexport function getNftDetectionEnablementToast(state) {\n  return state.appState.showNftDetectionEnablementToast;\n}\n\nexport function getCurrentCurrency(state) {\n  return state.metamask.currentCurrency;\n}\n\nexport function getTotalUnapprovedCount(state) {\n  return state.metamask.pendingApprovalCount ?? 0;\n}\n\nexport function getQueuedRequestCount(state) {\n  return state.metamask.queuedRequestCount ?? 0;\n}\n\nexport function getTotalUnapprovedMessagesCount(state) {\n  const {\n    unapprovedPersonalMsgCount = 0,\n    unapprovedDecryptMsgCount = 0,\n    unapprovedEncryptionPublicKeyMsgCount = 0,\n    unapprovedTypedMessagesCount = 0,\n  } = state.metamask;\n\n  return (\n    unapprovedPersonalMsgCount +\n    unapprovedDecryptMsgCount +\n    unapprovedEncryptionPublicKeyMsgCount +\n    unapprovedTypedMessagesCount\n  );\n}\n\nexport function getTotalUnapprovedSignatureRequestCount(state) {\n  const { unapprovedPersonalMsgCount = 0, unapprovedTypedMessagesCount = 0 } =\n    state.metamask;\n\n  return unapprovedPersonalMsgCount + unapprovedTypedMessagesCount;\n}\n\nexport function getUnapprovedTxCount(state) {\n  const unapprovedTxs = getUnapprovedTransactions(state);\n  return Object.keys(unapprovedTxs).length;\n}\n\nexport const getUnapprovedConfirmations = createDeepEqualSelector(\n  (state) => state.metamask.pendingApprovals || {},\n  (pendingApprovals) => Object.values(pendingApprovals),\n);\n\nexport function getUnapprovedTemplatedConfirmations(state) {\n  const unapprovedConfirmations = getUnapprovedConfirmations(state);\n  return unapprovedConfirmations.filter((approval) =>\n    TEMPLATED_CONFIRMATION_APPROVAL_TYPES.includes(approval.type),\n  );\n}\n\nexport const getPrioritizedUnapprovedTemplatedConfirmations = createSelector(\n  getUnapprovedTemplatedConfirmations,\n  (unapprovedTemplatedConfirmations) =>\n    unapprovedTemplatedConfirmations.filter(({ type }) =>\n      PRIORITY_APPROVAL_TEMPLATE_TYPES.includes(type),\n    ),\n);\n\nexport function getSuggestedTokens(state) {\n  return (\n    getUnapprovedConfirmations(state)?.filter(({ type, requestData }) => {\n      return (\n        type === ApprovalType.WatchAsset &&\n        requestData?.asset?.tokenId === undefined\n      );\n    }) || []\n  );\n}\n\nexport function getSuggestedNfts(state) {\n  return (\n    getUnapprovedConfirmations(state)?.filter(({ requestData, type }) => {\n      return (\n        type === ApprovalType.WatchAsset &&\n        requestData?.asset?.tokenId !== undefined\n      );\n    }) || []\n  );\n}\n\nexport function getIsMainnet(state) {\n  const chainId = getCurrentChainId(state);\n  return chainId === CHAIN_IDS.MAINNET;\n}\n\nexport function getIsLineaMainnet(state) {\n  const chainId = getCurrentChainId(state);\n  return chainId === CHAIN_IDS.LINEA_MAINNET;\n}\n\nexport function getIsTestnet(state) {\n  const chainId = getCurrentChainId(state);\n  return TEST_CHAINS.includes(chainId);\n}\n\nexport function getIsNonStandardEthChain(state) {\n  return !(getIsMainnet(state) || getIsTestnet(state) || process.env.IN_TEST);\n}\n\nexport function getPreferences({ metamask }) {\n  return metamask.preferences;\n}\n\nexport function getSendInputCurrencySwitched({ appState }) {\n  return appState.sendInputCurrencySwitched;\n}\nexport function getShowTestNetworks(state) {\n  const { showTestNetworks } = getPreferences(state);\n  return Boolean(showTestNetworks);\n}\n\nexport function getPetnamesEnabled(state) {\n  const { petnamesEnabled = true } = getPreferences(state);\n  return petnamesEnabled;\n}\n\nexport function getRedesignedConfirmationsEnabled(state) {\n  const { redesignedConfirmationsEnabled } = getPreferences(state);\n  return redesignedConfirmationsEnabled;\n}\n\nexport function getRedesignedTransactionsEnabled(state) {\n  const { redesignedTransactionsEnabled } = getPreferences(state);\n  return redesignedTransactionsEnabled;\n}\n\nexport function getFeatureNotificationsEnabled(state) {\n  const { featureNotificationsEnabled = false } = getPreferences(state);\n  return featureNotificationsEnabled;\n}\n\nexport function getShowExtensionInFullSizeView(state) {\n  const { showExtensionInFullSizeView } = getPreferences(state);\n  return Boolean(showExtensionInFullSizeView);\n}\n\nexport function getTestNetworkBackgroundColor(state) {\n  const currentNetwork = getProviderConfig(state).ticker;\n  switch (true) {\n    case currentNetwork?.includes(GOERLI_DISPLAY_NAME):\n      return BackgroundColor.goerli;\n    case currentNetwork?.includes(SEPOLIA_DISPLAY_NAME):\n      return BackgroundColor.sepolia;\n    default:\n      return undefined;\n  }\n}\n\nexport function getShouldShowFiat(state) {\n  const currentChainId = getCurrentChainId(state);\n  const isTestnet = TEST_NETWORK_IDS.includes(currentChainId);\n  const { showFiatInTestnets } = getPreferences(state);\n  const conversionRate = getConversionRate(state);\n  const useCurrencyRateCheck = getUseCurrencyRateCheck(state);\n  const isConvertibleToFiat = Boolean(useCurrencyRateCheck && conversionRate);\n\n  if (isTestnet) {\n    return showFiatInTestnets && isConvertibleToFiat;\n  }\n\n  return isConvertibleToFiat;\n}\n\nexport function getShouldHideZeroBalanceTokens(state) {\n  const { hideZeroBalanceTokens } = getPreferences(state);\n  return hideZeroBalanceTokens;\n}\n\nexport function getAdvancedInlineGasShown(state) {\n  return Boolean(state.metamask.featureFlags.advancedInlineGas);\n}\n\nexport function getUseNonceField(state) {\n  const isSmartTransaction = getIsSmartTransaction(state);\n  return Boolean(!isSmartTransaction && state.metamask.useNonceField);\n}\n\nexport function getCustomNonceValue(state) {\n  return String(state.metamask.customNonceValue);\n}\n\n/**\n * @param {string} svgString - The raw SVG string to make embeddable.\n * @returns {string} The embeddable SVG string.\n */\nconst getEmbeddableSvg = memoize(\n  (svgString) => `data:image/svg+xml;utf8,${encodeURIComponent(svgString)}`,\n);\n\nexport function getTargetSubjectMetadata(state, origin) {\n  const metadata = getSubjectMetadata(state)[origin];\n\n  if (metadata?.subjectType === SubjectType.Snap) {\n    const { svgIcon, ...remainingMetadata } = metadata;\n    return {\n      ...remainingMetadata,\n      iconUrl: svgIcon ? getEmbeddableSvg(svgIcon) : null,\n    };\n  }\n\n  return metadata;\n}\n\n/**\n * Input selector for reusing the same state object.\n * Used in memoized selectors created with createSelector\n * when raw state is needed to be passed to other selectors\n * used to achieve re-usability.\n *\n * @param state - Redux state object.\n * @returns Object - Redux state object.\n */\nexport const rawStateSelector = (state) => state;\n\n/**\n * Input selector used to retrieve Snaps that are added to Snaps Directory.\n *\n * @param state - Redux state object.\n * @returns Object - Containing verified Snaps from the Directory.\n */\nconst selectVerifiedSnapsRegistry = (state) =>\n  state.metamask.database?.verifiedSnaps;\n\n/**\n * Input selector providing a way to pass a snapId as an argument.\n *\n * @param _state - Redux state object.\n * @param snapId - ID of a Snap.\n * @returns string - ID of a Snap that can be used as input selector.\n */\nconst selectSnapId = (_state, snapId) => snapId;\n\n/**\n * Input selector for retrieving all installed Snaps.\n *\n * @param state - Redux state object.\n * @returns Object - Installed Snaps.\n */\nexport const selectInstalledSnaps = (state) => state.metamask.snaps;\n\n/**\n * Retrieve registry data for requested Snap.\n *\n * @param state - Redux state object.\n * @param snapId - ID of a Snap.\n * @returns Object containing metadata stored in Snaps registry for requested Snap.\n */\nexport const getSnapRegistryData = createSelector(\n  [selectVerifiedSnapsRegistry, selectSnapId],\n  (snapsRegistryData, snapId) => {\n    return snapsRegistryData ? snapsRegistryData[snapId] : null;\n  },\n);\n\n/**\n * Find and return Snap's latest version available in registry.\n *\n * @param state - Redux state object.\n * @param snapId - ID of a Snap.\n * @returns String SemVer version.\n */\nexport const getSnapLatestVersion = createSelector(\n  [getSnapRegistryData],\n  (snapRegistryData) => {\n    if (!snapRegistryData) {\n      return null;\n    }\n\n    return Object.keys(snapRegistryData.versions).reduce((latest, version) => {\n      return semver.gt(version, latest) ? version : latest;\n    }, '0.0.0');\n  },\n);\n\n/**\n * Return a Map of all installed Snaps with available update status.\n *\n * @param state - Redux state object.\n * @returns Map Snap IDs mapped to a boolean value (true if update is available, false otherwise).\n */\nexport const getAllSnapAvailableUpdates = createSelector(\n  [selectInstalledSnaps, rawStateSelector],\n  (installedSnaps, state) => {\n    const snapMap = new Map();\n\n    Object.keys(installedSnaps).forEach((snapId) => {\n      const latestVersion = getSnapLatestVersion(state, snapId);\n\n      snapMap.set(\n        snapId,\n        latestVersion\n          ? semver.gt(latestVersion, installedSnaps[snapId].version)\n          : false,\n      );\n    });\n\n    return snapMap;\n  },\n);\n\n/**\n * Return status of Snaps update availability for any installed Snap.\n *\n * @param state - Redux state object.\n * @returns boolean true if update is available, false otherwise.\n */\nexport const getAnySnapUpdateAvailable = createSelector(\n  [getAllSnapAvailableUpdates],\n  (snapMap) => {\n    return [...snapMap.values()].some((value) => value === true);\n  },\n);\n\n/**\n * Return if the snap branding should show in the UI.\n */\nexport const getHideSnapBranding = createSelector(\n  [selectInstalledSnaps, selectSnapId],\n  (installedSnaps, snapId) => {\n    return installedSnaps[snapId]?.hideSnapBranding;\n  },\n);\n\n/**\n * Get a memoized version of the target subject metadata.\n */\nexport const getMemoizedTargetSubjectMetadata = createDeepEqualSelector(\n  getTargetSubjectMetadata,\n  (interfaces) => interfaces,\n);\n\n/**\n * Get a memoized version of the unapproved confirmations.\n */\nexport const getMemoizedUnapprovedConfirmations = createDeepEqualSelector(\n  getUnapprovedConfirmations,\n  (confirmations) => confirmations,\n);\n\n/**\n * Get a memoized version of the unapproved templated confirmations.\n */\nexport const getMemoizedUnapprovedTemplatedConfirmations =\n  createDeepEqualSelector(\n    getUnapprovedTemplatedConfirmations,\n    (confirmations) => confirmations,\n  );\n\n/**\n * Get the Snap interfaces from the redux state.\n *\n * @param state - Redux state object.\n * @returns the Snap interfaces.\n */\nconst getInterfaces = (state) => state.metamask.interfaces;\n\n/**\n * Input selector providing a way to pass a Snap interface ID as an argument.\n *\n * @param _state - Redux state object.\n * @param interfaceId - ID of a Snap interface.\n * @returns ID of a Snap Interface that can be used as input selector.\n */\nconst selectInterfaceId = (_state, interfaceId) => interfaceId;\n\n/**\n * Get a memoized version of the Snap interfaces.\n */\nexport const getMemoizedInterfaces = createDeepEqualSelector(\n  getInterfaces,\n  (interfaces) => interfaces,\n);\n\n/**\n * Get a Snap Interface with a given ID.\n */\nexport const getInterface = createSelector(\n  [getMemoizedInterfaces, selectInterfaceId],\n  (interfaces, id) => interfaces[id],\n);\n\n/**\n * Get a memoized version of a Snap interface with a given ID\n */\nexport const getMemoizedInterface = createDeepEqualSelector(\n  getInterface,\n  (snapInterface) => snapInterface,\n);\n\n/**\n * Get the content from a Snap interface with a given ID.\n */\nexport const getInterfaceContent = createSelector(\n  [getMemoizedInterfaces, selectInterfaceId],\n  (interfaces, id) => interfaces[id]?.content,\n);\n\n/**\n * Get a memoized version of the content from a Snap interface with a given ID.\n */\nexport const getMemoizedInterfaceContent = createDeepEqualSelector(\n  getInterfaceContent,\n  (content) => content,\n);\n\n/**\n * Input selector providing a way to pass the origins as an argument.\n *\n * @param _state - Redux state object.\n * @param origins - Object containing origins.\n * @returns object - Object with keys that can be used as input selector.\n */\nconst selectOrigins = (_state, origins) => origins;\n\n/**\n * Retrieve metadata for multiple subjects (origins).\n *\n * @param state - Redux state object.\n * @param origins - Object containing keys that represent subject's identification.\n * @returns Key:value object containing metadata attached to each subject key.\n */\nexport const getMultipleTargetsSubjectMetadata = createDeepEqualSelector(\n  [rawStateSelector, selectOrigins],\n  (state, origins) => {\n    return Object.keys(origins ?? {}).reduce((originsMetadata, origin) => {\n      originsMetadata[origin] = getTargetSubjectMetadata(state, origin);\n      return originsMetadata;\n    }, {});\n  },\n);\n\nexport function getRpcPrefsForCurrentProvider(state) {\n  const { rpcPrefs } = getProviderConfig(state);\n  return rpcPrefs || {};\n}\n\nexport function getKnownMethodData(state, data) {\n  if (!data) {\n    return null;\n  }\n  const prefixedData = addHexPrefix(data);\n  const fourBytePrefix = prefixedData.slice(0, 10);\n  const { knownMethodData, use4ByteResolution } = state.metamask;\n  // If 4byte setting is off, we do not want to return the knownMethodData\n  return use4ByteResolution ? knownMethodData?.[fourBytePrefix] ?? {} : {};\n}\n\nexport function getFeatureFlags(state) {\n  return state.metamask.featureFlags;\n}\n\nexport function getOriginOfCurrentTab(state) {\n  return state.activeTab.origin;\n}\n\nexport function getIpfsGateway(state) {\n  return state.metamask.ipfsGateway;\n}\n\nexport function getUseExternalServices(state) {\n  return state.metamask.useExternalServices;\n}\n\nexport function getInfuraBlocked(state) {\n  return (\n    state.metamask.networksMetadata[getSelectedNetworkClientId(state)]\n      .status === NetworkStatus.Blocked\n  );\n}\n\nexport function getUSDConversionRate(state) {\n  return state.metamask.currencyRates[getProviderConfig(state).ticker]\n    ?.usdConversionRate;\n}\n\nexport function getWeb3ShimUsageStateForOrigin(state, origin) {\n  return state.metamask.web3ShimUsageOrigins[origin];\n}\n\n/**\n * @typedef {object} SwapsEthToken\n * @property {string} symbol - The symbol for ETH, namely \"ETH\"\n * @property {string} name - The name of the ETH currency, \"Ether\"\n * @property {string} address - A substitute address for the metaswap-api to\n * recognize the ETH token\n * @property {string} decimals - The number of ETH decimals, i.e. 18\n * @property {string} balance - The user's ETH balance in decimal wei, with a\n * precision of 4 decimal places\n * @property {string} string - The user's ETH balance in decimal ETH\n */\n\n/**\n * Swaps related code uses token objects for various purposes. These objects\n * always have the following properties: `symbol`, `name`, `address`, and\n * `decimals`.\n *\n * When available for the current account, the objects can have `balance` and\n * `string` properties.\n * `balance` is the users token balance in decimal values, denominated in the\n * minimal token units (according to its decimals).\n * `string` is the token balance in a readable format, ready for rendering.\n *\n * Swaps treats the selected chain's currency as a token, and we use the token constants\n * in the SWAPS_CHAINID_DEFAULT_TOKEN_MAP to set the standard properties for\n * the token. The getSwapsDefaultToken selector extends that object with\n * `balance` and `string` values of the same type as in regular ERC-20 token\n * objects, per the above description.\n *\n * @param {object} state - the redux state object\n * @returns {SwapsEthToken} The token object representation of the currently\n * selected account's ETH balance, as expected by the Swaps API.\n */\n\nexport function getSwapsDefaultToken(state) {\n  const selectedAccount = getSelectedAccount(state);\n  const balance = selectedAccount?.balance;\n  const chainId = getCurrentChainId(state);\n  const defaultTokenObject = SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId];\n\n  return {\n    ...defaultTokenObject,\n    balance: hexToDecimal(balance),\n    string: getValueFromWeiHex({\n      value: balance,\n      numberOfDecimals: 4,\n      toDenomination: 'ETH',\n    }),\n  };\n}\n\nexport function getIsSwapsChain(state) {\n  const chainId = getCurrentChainId(state);\n  const isNotDevelopment =\n    process.env.METAMASK_ENVIRONMENT !== 'development' &&\n    process.env.METAMASK_ENVIRONMENT !== 'testing';\n  return isNotDevelopment\n    ? ALLOWED_PROD_SWAPS_CHAIN_IDS.includes(chainId)\n    : ALLOWED_DEV_SWAPS_CHAIN_IDS.includes(chainId);\n}\n\nexport function getIsBridgeChain(state) {\n  const chainId = getCurrentChainId(state);\n  return ALLOWED_BRIDGE_CHAIN_IDS.includes(chainId);\n}\n\nfunction getBridgeFeatureFlags(state) {\n  return state.metamask.bridgeState?.bridgeFeatureFlags;\n}\n\nexport const getIsBridgeEnabled = createSelector(\n  [getBridgeFeatureFlags, getUseExternalServices],\n  (bridgeFeatureFlags, shouldUseExternalServices) => {\n    return (\n      (shouldUseExternalServices &&\n        bridgeFeatureFlags?.[BridgeFeatureFlagsKey.EXTENSION_SUPPORT]) ??\n      false\n    );\n  },\n);\n\nexport function getNativeCurrencyImage(state) {\n  const chainId = getCurrentChainId(state);\n  return CHAIN_ID_TOKEN_IMAGE_MAP[chainId];\n}\n\nexport function getNextSuggestedNonce(state) {\n  return Number(state.metamask.nextNonce);\n}\n\nexport function getShowWhatsNewPopup(state) {\n  return state.appState.showWhatsNewPopup;\n}\n\n/**\n * Returns a memoized selector that gets the internal accounts from the Redux store.\n *\n * @param state - The Redux store state.\n * @returns {Array} An array of internal accounts.\n */\nexport const getMemoizedMetaMaskInternalAccounts = createDeepEqualSelector(\n  getInternalAccounts,\n  (internalAccounts) => internalAccounts,\n);\n\nexport const getMemoizedAddressBook = createDeepEqualSelector(\n  getAddressBook,\n  (addressBook) => addressBook,\n);\n\nexport const getRemoteTokenList = createDeepEqualSelector(\n  (state) => state.metamask.tokenList,\n  (remoteTokenList) => remoteTokenList,\n);\n\n/**\n * To retrieve the token list for use throughout the UI. Will return the remotely fetched list\n * from the tokens controller if token detection is enabled, or the static list if not.\n *\n * @type {() => object}\n */\nexport const getTokenList = createSelector(\n  getRemoteTokenList,\n  getIsTokenDetectionInactiveOnMainnet,\n  (remoteTokenList, isTokenDetectionInactiveOnMainnet) =>\n    isTokenDetectionInactiveOnMainnet\n      ? STATIC_MAINNET_TOKEN_LIST\n      : remoteTokenList,\n);\n\n/**\n * Returns a memoized selector that gets contract info.\n *\n * @param state - The Redux store state.\n * @param addresses - An array of contract addresses.\n * @returns {Array} A map of contract info, keyed by address.\n */\nexport const getRemoteTokens = createSelector(\n  getRemoteTokenList,\n  (_state, addresses) => addresses,\n  (remoteTokenList, addresses) =>\n    addresses.map((address) => remoteTokenList[address?.toLowerCase()]),\n);\n\nexport const getMemoizedMetadataContract = createSelector(\n  (state, _address) => getTokenList(state),\n  (_state, address) => address,\n  (tokenList, address) => tokenList[address?.toLowerCase()],\n);\n\n/**\n * @type (state: any, address: string) => string\n */\nexport const getMetadataContractName = createSelector(\n  getMemoizedMetadataContract,\n  (entry) => entry?.name ?? '',\n);\n\nexport const getTxData = (state) => state.confirmTransaction.txData;\n\nexport const getUnapprovedTransaction = createDeepEqualSelector(\n  (state) => getUnapprovedTransactions(state),\n  (_, transactionId) => transactionId,\n  (unapprovedTxs, transactionId) =>\n    Object.values(unapprovedTxs).find(({ id }) => id === transactionId),\n);\n\nexport const getTransaction = createDeepEqualSelector(\n  (state) => getCurrentNetworkTransactions(state),\n  (_, transactionId) => transactionId,\n  (unapprovedTxs, transactionId) => {\n    return (\n      Object.values(unapprovedTxs).find(({ id }) => id === transactionId) || {}\n    );\n  },\n);\n\nexport const getFullTxData = createDeepEqualSelector(\n  getTxData,\n  (state, transactionId, status) => {\n    if (status === TransactionStatus.unapproved) {\n      return getUnapprovedTransaction(state, transactionId) ?? {};\n    }\n    return getTransaction(state, transactionId);\n  },\n  (\n    _state,\n    _transactionId,\n    _status,\n    customTxParamsData,\n    hexTransactionAmount,\n  ) => ({\n    customTxParamsData,\n    hexTransactionAmount,\n  }),\n  (txData, transaction, { customTxParamsData, hexTransactionAmount }) => {\n    let fullTxData = { ...txData, ...transaction };\n    if (transaction && transaction.simulationFails) {\n      fullTxData.simulationFails = { ...transaction.simulationFails };\n    }\n    if (customTxParamsData) {\n      fullTxData = {\n        ...fullTxData,\n        txParams: {\n          ...fullTxData.txParams,\n          data: customTxParamsData,\n        },\n      };\n    }\n    if (hexTransactionAmount) {\n      fullTxData = {\n        ...fullTxData,\n        txParams: {\n          ...fullTxData.txParams,\n          value: hexTransactionAmount,\n        },\n      };\n    }\n    return fullTxData;\n  },\n);\n\nexport const getAllConnectedAccounts = createDeepEqualSelector(\n  getConnectedSubjectsForAllAddresses,\n  (connectedSubjects) => {\n    return Object.keys(connectedSubjects);\n  },\n);\nexport const getConnectedSitesList = createDeepEqualSelector(\n  getConnectedSubjectsForAllAddresses,\n  getInternalAccounts,\n  getAllConnectedAccounts,\n  (connectedSubjectsForAllAddresses, internalAccounts, connectedAddresses) => {\n    const sitesList = {};\n    connectedAddresses.forEach((connectedAddress) => {\n      connectedSubjectsForAllAddresses[connectedAddress].forEach((app) => {\n        const siteKey = app.origin;\n\n        const internalAccount = internalAccounts.find((account) =>\n          isEqualCaseInsensitive(account.address, connectedAddress),\n        );\n\n        if (sitesList[siteKey]) {\n          sitesList[siteKey].addresses.push(connectedAddress);\n          sitesList[siteKey].addressToNameMap[connectedAddress] =\n            internalAccount?.metadata.name || ''; // Map address to name\n        } else {\n          sitesList[siteKey] = {\n            ...app,\n            addresses: [connectedAddress],\n            addressToNameMap: {\n              [connectedAddress]: internalAccount?.metadata.name || '',\n            },\n          };\n        }\n      });\n    });\n    return sitesList;\n  },\n);\n\nexport const getConnectedSnapsList = createDeepEqualSelector(\n  getSnapsList,\n  (snapsData) => {\n    const snapsList = {};\n\n    Object.values(snapsData).forEach((snap) => {\n      if (!snapsList[snap.name]) {\n        snapsList[snap.name] = snap;\n      }\n    });\n\n    return snapsList;\n  },\n);\n\nexport const getMemoizedCurrentChainId = createDeepEqualSelector(\n  getCurrentChainId,\n  (chainId) => chainId,\n);\n\nexport const getMemoizedTxId = createDeepEqualSelector(\n  (state) => state.appState.txId,\n  (txId) => txId,\n);\n\nexport const getMemoizedUnapprovedPersonalMessages = createDeepEqualSelector(\n  (state) => state.metamask.unapprovedPersonalMsgs,\n  (unapprovedPersonalMsgs) => unapprovedPersonalMsgs,\n);\n\nexport const getMemoizedUnapprovedTypedMessages = createDeepEqualSelector(\n  (state) => state.metamask.unapprovedTypedMessages,\n  (unapprovedTypedMessages) => unapprovedTypedMessages,\n);\n\nexport function getSnaps(state) {\n  return state.metamask.snaps;\n}\n\nexport function getLocale(state) {\n  return state.metamask.currentLocale;\n}\n\nexport const getSnap = createDeepEqualSelector(\n  getSnaps,\n  (_, snapId) => snapId,\n  (snaps, snapId) => {\n    return snaps[snapId];\n  },\n);\n\n/**\n * Get a selector that returns all Snaps metadata (name and description) for all Snaps.\n *\n * @param {object} state - The Redux state object.\n * @returns {object} An object mapping all installed snaps to their metadata, which contains the snap name and description.\n */\nexport const getSnapsMetadata = createDeepEqualSelector(\n  getLocale,\n  getSnaps,\n  (locale, snaps) => {\n    return Object.values(snaps).reduce((snapsMetadata, snap) => {\n      const snapId = snap.id;\n      const manifest = snap.localizationFiles\n        ? getLocalizedSnapManifest(\n            snap.manifest,\n            locale,\n            snap.localizationFiles,\n          )\n        : snap.manifest;\n\n      snapsMetadata[snapId] = {\n        name: manifest.proposedName,\n        description: manifest.description,\n      };\n      return snapsMetadata;\n    }, {});\n  },\n);\n\n/**\n * Get a selector that returns the snap metadata (name and description) for a\n * given `snapId`.\n *\n * @param {object} state - The Redux state object.\n * @param {string} snapId - The snap ID to get the metadata for.\n * @returns {object} An object containing the snap name and description.\n */\nexport const getSnapMetadata = createDeepEqualSelector(\n  getSnapsMetadata,\n  (_, snapId) => snapId,\n  (metadata, snapId) => {\n    return (\n      metadata[snapId] ?? {\n        name: snapId ? stripSnapPrefix(snapId) : null,\n      }\n    );\n  },\n);\n\nexport const getEnabledSnaps = createDeepEqualSelector(getSnaps, (snaps) => {\n  return Object.values(snaps).reduce((acc, cur) => {\n    if (cur.enabled) {\n      acc[cur.id] = cur;\n    }\n    return acc;\n  }, {});\n});\n\nexport const getInsightSnaps = createDeepEqualSelector(\n  getEnabledSnaps,\n  getPermissionSubjects,\n  (snaps, subjects) => {\n    return Object.values(snaps).filter(\n      ({ id }) => subjects[id]?.permissions['endowment:transaction-insight'],\n    );\n  },\n);\n\nexport const getSignatureInsightSnaps = createDeepEqualSelector(\n  getEnabledSnaps,\n  getPermissionSubjects,\n  (snaps, subjects) => {\n    return Object.values(snaps).filter(\n      ({ id }) => subjects[id]?.permissions['endowment:signature-insight'],\n    );\n  },\n);\n\nexport const getSignatureInsightSnapIds = createDeepEqualSelector(\n  getSignatureInsightSnaps,\n  (snaps) => snaps.map((snap) => snap.id),\n);\n\nexport const getInsightSnapIds = createDeepEqualSelector(\n  getInsightSnaps,\n  (snaps) => snaps.map((snap) => snap.id),\n);\n\nexport const getNameLookupSnapsIds = createDeepEqualSelector(\n  getEnabledSnaps,\n  getPermissionSubjects,\n  (snaps, subjects) => {\n    return Object.values(snaps)\n      .filter(({ id }) => subjects[id]?.permissions['endowment:name-lookup'])\n      .map((snap) => snap.id);\n  },\n);\n\nexport const getNotifySnaps = createDeepEqualSelector(\n  getEnabledSnaps,\n  getPermissionSubjects,\n  (snaps, subjects) => {\n    return Object.values(snaps).filter(\n      ({ id }) => subjects[id]?.permissions.snap_notify,\n    );\n  },\n);\n\nfunction getAllSnapInsights(state) {\n  return state.metamask.insights;\n}\n\nexport const getSnapInsights = createDeepEqualSelector(\n  getAllSnapInsights,\n  (_, id) => id,\n  (insights, id) => insights?.[id],\n);\n\n/**\n * @typedef {object} Notification\n * @property {string} id - A unique identifier for the notification\n * @property {string} origin - A string identifing the snap origin\n * @property {EpochTimeStamp} createdDate - A date in epochTimeStramps, identifying when the notification was first committed\n * @property {EpochTimeStamp} readDate - A date in epochTimeStramps, identifying when the notification was read by the user\n * @property {string} message - A string containing the notification message\n */\n\n/**\n * Notifications are managed by the notification controller and referenced by\n * `state.metamask.notifications`. This function returns a list of notifications\n * the can be shown to the user.\n *\n * The returned notifications are sorted by date.\n *\n * @param {object} state - the redux state object\n * @returns {Notification[]} An array of notifications that can be shown to the user\n */\n\nexport function getNotifications(state) {\n  const notifications = Object.values(state.metamask.notifications);\n\n  const notificationsSortedByDate = notifications.sort(\n    (a, b) => new Date(b.createdDate) - new Date(a.createdDate),\n  );\n  return notificationsSortedByDate;\n}\n\nexport function getUnreadNotifications(state) {\n  const notifications = getNotifications(state);\n\n  const unreadNotificationCount = notifications.filter(\n    (notification) => notification.readDate === null,\n  );\n\n  return unreadNotificationCount;\n}\n\nexport const getReadNotificationsCount = createSelector(\n  getNotifications,\n  (notifications) =>\n    notifications.filter((notification) => notification.readDate !== null)\n      .length,\n);\n\nexport const getUnreadNotificationsCount = createSelector(\n  getUnreadNotifications,\n  (notifications) => notifications.length,\n);\n\n/**\n * Get an object of announcement IDs and if they are allowed or not.\n *\n * @param {object} state\n * @returns {object}\n */\nfunction getAllowedAnnouncementIds(state) {\n  const currentKeyring = getCurrentKeyring(state);\n  const currentKeyringIsLedger = currentKeyring?.type === KeyringType.ledger;\n  const isFirefox = window.navigator.userAgent.includes('Firefox');\n\n  return {\n    [NOTIFICATION_DROP_LEDGER_FIREFOX]: currentKeyringIsLedger && isFirefox,\n  };\n}\n\n/**\n * @typedef {object} Announcement\n * @property {number} id - A unique identifier for the announcement\n * @property {string} date - A date in YYYY-MM-DD format, identifying when the notification was first committed\n */\n\n/**\n * Announcements are managed by the announcement controller and referenced by\n * `state.metamask.announcements`. This function returns a list of announcements\n * the can be shown to the user. This list includes all announcements that do not\n * have a truthy `isShown` property.\n *\n * The returned announcements are sorted by date.\n *\n * @param {object} state - the redux state object\n * @returns {Announcement[]} An array of announcements that can be shown to the user\n */\n\nexport function getSortedAnnouncementsToShow(state) {\n  const announcements = Object.values(state.metamask.announcements);\n  const allowedAnnouncementIds = getAllowedAnnouncementIds(state);\n  const announcementsToShow = announcements.filter(\n    (announcement) =>\n      !announcement.isShown && allowedAnnouncementIds[announcement.id],\n  );\n  const announcementsSortedByDate = announcementsToShow.sort(\n    (a, b) => new Date(b.date) - new Date(a.date),\n  );\n  return announcementsSortedByDate;\n}\n\n/**\n * @param state\n * @returns {{networkId: string}[]}\n */\nexport function getOrderedNetworksList(state) {\n  return state.metamask.orderedNetworkList;\n}\n\nexport function getPinnedAccountsList(state) {\n  return state.metamask.pinnedAccountList;\n}\n\nexport function getHiddenAccountsList(state) {\n  return state.metamask.hiddenAccountList;\n}\n\nexport function getShowRecoveryPhraseReminder(state) {\n  const {\n    recoveryPhraseReminderLastShown,\n    recoveryPhraseReminderHasBeenShown,\n  } = state.metamask;\n\n  const currentTime = new Date().getTime();\n  const frequency = recoveryPhraseReminderHasBeenShown ? DAY * 90 : DAY * 2;\n\n  return currentTime - recoveryPhraseReminderLastShown >= frequency;\n}\n\n/**\n * Retrieves the number of unapproved transactions and messages\n *\n * @param state - Redux state object.\n * @returns Number of unapproved transactions\n */\nexport function getNumberOfAllUnapprovedTransactionsAndMessages(state) {\n  const unapprovedTxs = getAllUnapprovedTransactions(state);\n  const queuedRequestCount = getQueuedRequestCount(state);\n\n  const allUnapprovedMessages = {\n    ...unapprovedTxs,\n    ...state.metamask.unapprovedDecryptMsgs,\n    ...state.metamask.unapprovedPersonalMsgs,\n    ...state.metamask.unapprovedEncryptionPublicKeyMsgs,\n    ...state.metamask.unapprovedTypedMessages,\n  };\n  const numUnapprovedMessages = Object.keys(allUnapprovedMessages).length;\n  return numUnapprovedMessages + queuedRequestCount;\n}\n\nexport const getCurrentNetwork = createDeepEqualSelector(\n  getNetworkConfigurationsByChainId,\n  getCurrentChainId,\n\n  /**\n   * Get the current network configuration.\n   *\n   * @param networkConfigurationsByChainId\n   * @param currentChainId\n   * @returns {{\n   *   chainId: `0x${string}`;\n   *   id?: string;\n   *   nickname?: string;\n   *   providerType?: string;\n   *   rpcPrefs?: { blockExplorerUrl?: string; imageUrl?: string; };\n   *   rpcUrl: string;\n   *   ticker: string;\n   * }} networkConfiguration - Configuration for the current network.\n   */\n  (networkConfigurationsByChainId, currentChainId) => {\n    const currentNetwork = networkConfigurationsByChainId[currentChainId];\n\n    const rpcEndpoint =\n      currentNetwork.rpcEndpoints[currentNetwork.defaultRpcEndpointIndex];\n\n    const blockExplorerUrl =\n      currentNetwork.blockExplorerUrls?.[\n        currentNetwork.defaultBlockExplorerUrlIndex\n      ];\n\n    return {\n      chainId: currentNetwork.chainId,\n      id: rpcEndpoint.networkClientId,\n      nickname: currentNetwork.name,\n      rpcUrl: rpcEndpoint.url,\n      ticker: currentNetwork.nativeCurrency,\n      blockExplorerUrl,\n      rpcPrefs: {\n        blockExplorerUrl,\n        imageUrl: CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[currentNetwork.chainId],\n      },\n      ...(rpcEndpoint.type === RpcEndpointType.Infura && {\n        providerType: rpcEndpoint.networkClientId,\n      }),\n    };\n  },\n);\n\nexport const getConnectedSitesListWithNetworkInfo = createDeepEqualSelector(\n  getConnectedSitesList,\n  getAllDomains,\n  getNetworkConfigurationsByChainId,\n  getCurrentNetwork,\n  (sitesList, domains, networks, currentNetwork) => {\n    Object.keys(sitesList).forEach((siteKey) => {\n      const connectedNetwork = Object.values(networks).find((network) =>\n        network.rpcEndpoints.some(\n          (rpcEndpoint) => rpcEndpoint.networkClientId === domains[siteKey],\n        ),\n      );\n\n      // For the testnets, if we do not have an image, we will have a fallback string\n      sitesList[siteKey].networkIconUrl =\n        CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[connectedNetwork?.chainId] || '';\n      sitesList[siteKey].networkName =\n        connectedNetwork?.name || currentNetwork?.nickname || '';\n    });\n    return sitesList;\n  },\n);\n\n/**\n * Returns the network client ID of the network that should be auto-switched to\n * based on the current tab origin and its last network connected to\n *\n * @param state - Redux state object.\n * @returns Network ID to switch to\n */\nexport function getNetworkToAutomaticallySwitchTo(state) {\n  const numberOfUnapprovedTx =\n    getNumberOfAllUnapprovedTransactionsAndMessages(state);\n\n  // This block autoswitches chains based on the last chain used\n  // for a given dapp, when there are no pending confimrations\n  // This allows the user to be connected on one chain\n  // for one dapp, and automatically change for another\n  const selectedTabOrigin = getOriginOfCurrentTab(state);\n  const useRequestQueue = getUseRequestQueue(state);\n  if (\n    getEnvironmentType() === ENVIRONMENT_TYPE_POPUP &&\n    getIsUnlocked(state) &&\n    useRequestQueue &&\n    selectedTabOrigin &&\n    numberOfUnapprovedTx === 0\n  ) {\n    const domainNetworks = getAllDomains(state);\n    const networkIdForThisDomain = domainNetworks[selectedTabOrigin];\n    const currentNetwork = getCurrentNetwork(state);\n\n    // If we have a match, \"silently\" switch networks if the network differs\n    // from the current network\n    if (\n      networkIdForThisDomain &&\n      currentNetwork.id !== networkIdForThisDomain\n    ) {\n      return networkIdForThisDomain;\n    }\n  }\n  return null;\n}\n\nexport function getShowTermsOfUse(state) {\n  const { termsOfUseLastAgreed } = state.metamask;\n\n  if (!termsOfUseLastAgreed) {\n    return true;\n  }\n  return (\n    new Date(termsOfUseLastAgreed).getTime() <\n    new Date(TERMS_OF_USE_LAST_UPDATED).getTime()\n  );\n}\n\n/**\n * Determines if the survey toast should be shown based on the current time, survey start and end times, and whether the survey link was last clicked or closed.\n *\n * @param {*} state - The application state containing the necessary survey data.\n * @returns {boolean} True if the current time is between the survey start and end times and the survey link was not last clicked or closed. False otherwise.\n */\nexport function getShowSurveyToast(state) {\n  const { surveyLinkLastClickedOrClosed } = state.metamask;\n  const startTime = new Date(`${SURVEY_DATE} ${SURVEY_START_TIME}`).getTime();\n  const endTime = new Date(`${SURVEY_DATE} ${SURVEY_END_TIME}`).getTime();\n  const now = Date.now();\n  return now > startTime && now < endTime && !surveyLinkLastClickedOrClosed;\n}\n\n/**\n * Determines if the privacy policy toast should be shown based on the current date and whether the new privacy policy toast was clicked or closed.\n *\n * @param {*} state - The application state containing the privacy policy data.\n * @returns {boolean} True if the current date is on or after the new privacy policy date and the privacy policy toast was not clicked or closed. False otherwise.\n */\nexport function getShowPrivacyPolicyToast(state) {\n  const { newPrivacyPolicyToastClickedOrClosed, onboardingDate } =\n    state.metamask;\n  const newPrivacyPolicyDate = new Date(PRIVACY_POLICY_DATE);\n  const currentDate = new Date(Date.now());\n  return (\n    !newPrivacyPolicyToastClickedOrClosed &&\n    currentDate >= newPrivacyPolicyDate &&\n    // users who onboarded before the privacy policy date should see the notice\n    // and\n    // old users who don't have onboardingDate set should see the notice\n    (onboardingDate < newPrivacyPolicyDate || !onboardingDate)\n  );\n}\n\nexport function getShowOutdatedBrowserWarning(state) {\n  const { outdatedBrowserWarningLastShown } = state.metamask;\n  if (!outdatedBrowserWarningLastShown) {\n    return true;\n  }\n  const currentTime = new Date().getTime();\n  return currentTime - outdatedBrowserWarningLastShown >= DAY * 2;\n}\n\nexport function getNewPrivacyPolicyToastShownDate(state) {\n  return state.metamask.newPrivacyPolicyToastShownDate;\n}\n\nexport function getOnboardingDate(state) {\n  return state.metamask.onboardingDate;\n}\n\nexport function getShowBetaHeader(state) {\n  return state.metamask.showBetaHeader;\n}\n\nexport function getShowPermissionsTour(state) {\n  return state.metamask.showPermissionsTour;\n}\n\nexport function getShowNetworkBanner(state) {\n  return state.metamask.showNetworkBanner;\n}\n\nexport function getShowAccountBanner(state) {\n  return state.metamask.showAccountBanner;\n}\n/**\n * To get the useTokenDetection flag which determines whether a static or dynamic token list is used\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getUseTokenDetection(state) {\n  return Boolean(state.metamask.useTokenDetection);\n}\n\n/**\n * To get the useNftDetection flag which determines whether we autodetect NFTs\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getUseNftDetection(state) {\n  return Boolean(state.metamask.useNftDetection);\n}\n\n/**\n * To get the useBlockie flag which determines whether we show blockies or Jazzicons\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getUseBlockie(state) {\n  return Boolean(state.metamask.useBlockie);\n}\n\n/**\n * To get the openSeaEnabled flag which determines whether we use OpenSea's API\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getOpenSeaEnabled(state) {\n  return Boolean(state.metamask.openSeaEnabled);\n}\n\n/**\n * To get the `theme` value which determines which theme is selected\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getTheme(state) {\n  return state.metamask.theme;\n}\n\nexport function doesAddressRequireLedgerHidConnection(state, address) {\n  const addressIsLedger = isAddressLedger(state, address);\n  const transportTypePreferenceIsWebHID =\n    getLedgerTransportType(state) === LedgerTransportTypes.webhid;\n  const webHidIsNotConnected =\n    getLedgerWebHidConnectedStatus(state) !== WebHIDConnectedStatuses.connected;\n  const ledgerTransportStatus = getLedgerTransportStatus(state);\n  const transportIsNotSuccessfullyCreated =\n    ledgerTransportStatus !== HardwareTransportStates.verified;\n\n  return (\n    addressIsLedger &&\n    transportTypePreferenceIsWebHID &&\n    (webHidIsNotConnected || transportIsNotSuccessfullyCreated)\n  );\n}\n\nexport function getNewNftAddedMessage(state) {\n  return state.appState.newNftAddedMessage;\n}\n\nexport function getRemoveNftMessage(state) {\n  return state.appState.removeNftMessage;\n}\n\n/**\n * To retrieve the name of the new Network added using add network form\n *\n * @param {*} state\n * @returns string\n */\nexport function getNewNetworkAdded(state) {\n  return state.appState.newNetworkAddedName;\n}\n\n/**\n * @param state\n * @returns {{ chainId: import('@metamask/utils').Hex; nickname: string; editCompleted: boolean} | undefined}\n */\nexport function getEditedNetwork(state) {\n  return state.appState.editedNetwork;\n}\n\nexport function getIsAddingNewNetwork(state) {\n  return state.appState.isAddingNewNetwork;\n}\n\nexport function getIsMultiRpcOnboarding(state) {\n  return state.appState.isMultiRpcOnboarding;\n}\n\nexport function getNetworksTabSelectedNetworkConfigurationId(state) {\n  return state.appState.selectedNetworkConfigurationId;\n}\n\nexport const getAllEnabledNetworks = createDeepEqualSelector(\n  getNetworkConfigurationsByChainId,\n  getShowTestNetworks,\n  (networkConfigurationsByChainId, showTestNetworks) =>\n    Object.entries(networkConfigurationsByChainId).reduce(\n      (acc, [chainId, network]) => {\n        if (showTestNetworks || !TEST_CHAINS.includes(chainId)) {\n          acc[chainId] = network;\n        }\n        return acc;\n      },\n      {},\n    ),\n);\n\n/**\n *  To retrieve the maxBaseFee and priorityFee the user has set as default\n *\n * @param {*} state\n * @returns {{maxBaseFee: string, priorityFee: string} | undefined}\n */\nexport function getAdvancedGasFeeValues(state) {\n  // This will not work when we switch to supporting multi-chain.\n  // There are four non-test files that use this selector.\n  // advanced-gas-fee-defaults\n  // base-fee-input\n  // priority-fee-input\n  // useGasItemFeeDetails\n  // The first three are part of the AdvancedGasFeePopover\n  // The latter is used by the EditGasPopover\n  // Both of those are used in Confirmations as well as transaction-list-item\n  // All of the call sites have access to the GasFeeContext, which has a\n  // transaction object set on it, but there are currently no guarantees that\n  // the transaction has a chainId associated with it. To have this method\n  // support multichain we'll need a reliable way for the chainId of the\n  // transaction being modified to be available to all callsites and either\n  // pass it in to the selector as a second parameter, or access it at the\n  // callsite.\n  return state.metamask.advancedGasFee[getCurrentChainId(state)];\n}\n\n/**\n * To get the name of the network that support token detection based in chainId.\n *\n * @param state\n * @returns string e.g. ethereum, bsc or polygon\n */\nexport const getTokenDetectionSupportNetworkByChainId = (state) => {\n  const chainId = getCurrentChainId(state);\n  switch (chainId) {\n    case CHAIN_IDS.MAINNET:\n      return MAINNET_DISPLAY_NAME;\n    case CHAIN_IDS.BSC:\n      return BSC_DISPLAY_NAME;\n    case CHAIN_IDS.POLYGON:\n      return POLYGON_DISPLAY_NAME;\n    case CHAIN_IDS.AVALANCHE:\n      return AVALANCHE_DISPLAY_NAME;\n    case CHAIN_IDS.LINEA_GOERLI:\n      return LINEA_GOERLI_DISPLAY_NAME;\n    case CHAIN_IDS.LINEA_SEPOLIA:\n      return LINEA_SEPOLIA_DISPLAY_NAME;\n    case CHAIN_IDS.LINEA_MAINNET:\n      return LINEA_MAINNET_DISPLAY_NAME;\n    case CHAIN_IDS.ARBITRUM:\n      return ARBITRUM_DISPLAY_NAME;\n    case CHAIN_IDS.OPTIMISM:\n      return OPTIMISM_DISPLAY_NAME;\n    case CHAIN_IDS.BASE:\n      return BASE_DISPLAY_NAME;\n    case CHAIN_IDS.ZKSYNC_ERA:\n      return ZK_SYNC_ERA_DISPLAY_NAME;\n    case CHAIN_IDS.CRONOS:\n      return CRONOS_DISPLAY_NAME;\n    case CHAIN_IDS.CELO:\n      return CELO_DISPLAY_NAME;\n    case CHAIN_IDS.GNOSIS:\n      return GNOSIS_DISPLAY_NAME;\n    case CHAIN_IDS.FANTOM:\n      return FANTOM_DISPLAY_NAME;\n    case CHAIN_IDS.POLYGON_ZKEVM:\n      return POLYGON_ZKEVM_DISPLAY_NAME;\n    case CHAIN_IDS.MOONBEAM:\n      return MOONBEAM_DISPLAY_NAME;\n    case CHAIN_IDS.MOONRIVER:\n      return MOONRIVER_DISPLAY_NAME;\n    default:\n      return '';\n  }\n};\n/**\n * Returns true if a token list is available for the current network.\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getIsDynamicTokenListAvailable(state) {\n  const chainId = getCurrentChainId(state);\n  return [\n    CHAIN_IDS.MAINNET,\n    CHAIN_IDS.BSC,\n    CHAIN_IDS.POLYGON,\n    CHAIN_IDS.AVALANCHE,\n    CHAIN_IDS.LINEA_GOERLI,\n    CHAIN_IDS.LINEA_SEPOLIA,\n    CHAIN_IDS.LINEA_MAINNET,\n    CHAIN_IDS.ARBITRUM,\n    CHAIN_IDS.OPTIMISM,\n    CHAIN_IDS.BASE,\n    CHAIN_IDS.ZKSYNC_ERA,\n    CHAIN_IDS.CRONOS,\n    CHAIN_IDS.CELO,\n    CHAIN_IDS.GNOSIS,\n    CHAIN_IDS.FANTOM,\n    CHAIN_IDS.POLYGON_ZKEVM,\n    CHAIN_IDS.MOONBEAM,\n    CHAIN_IDS.MOONRIVER,\n  ].includes(chainId);\n}\n\n/**\n * To retrieve the list of tokens detected and saved on the state to detectedToken object.\n *\n * @param {*} state\n * @returns list of token objects\n */\nexport function getDetectedTokensInCurrentNetwork(state) {\n  const currentChainId = getCurrentChainId(state);\n  const { address: selectedAddress } = getSelectedInternalAccount(state);\n  return state.metamask.allDetectedTokens?.[currentChainId]?.[selectedAddress];\n}\n\n/**\n * To fetch the name of the tokens that are imported from tokens found page\n *\n * @param {*} state\n * @returns\n */\nexport function getNewTokensImported(state) {\n  return state.appState.newTokensImported;\n}\n\nexport function getNewTokensImportedError(state) {\n  return state.appState.newTokensImportedError;\n}\n\n/**\n * To check if the token detection is OFF and the network is Mainnet\n * so that the user can skip third party token api fetch\n * and use the static tokenlist from contract-metadata\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getIsTokenDetectionInactiveOnMainnet(state) {\n  const isMainnet = getIsMainnet(state);\n  const useTokenDetection = getUseTokenDetection(state);\n\n  return !useTokenDetection && isMainnet;\n}\n\n/**\n * To check for the chainId that supports token detection ,\n * currently it returns true for Ethereum Mainnet, Polygon, BSC, and Avalanche\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getIsTokenDetectionSupported(state) {\n  const useTokenDetection = getUseTokenDetection(state);\n  const isDynamicTokenListAvailable = getIsDynamicTokenListAvailable(state);\n\n  return useTokenDetection && isDynamicTokenListAvailable;\n}\n\n/**\n * To check if the token detection is OFF for the token detection supported networks\n * and the network is not Mainnet\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getIstokenDetectionInactiveOnNonMainnetSupportedNetwork(state) {\n  const useTokenDetection = getUseTokenDetection(state);\n  const isMainnet = getIsMainnet(state);\n  const isDynamicTokenListAvailable = getIsDynamicTokenListAvailable(state);\n\n  return isDynamicTokenListAvailable && !useTokenDetection && !isMainnet;\n}\n\n/**\n * To get the `useRequestQueue` value which determines whether we use a request queue infront of provider api calls. This will have the effect of implementing per-dapp network switching.\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getUseRequestQueue(state) {\n  return state.metamask.useRequestQueue;\n}\n\n/**\n * To get the `getIsSecurityAlertsEnabled` value which determines whether security check is enabled\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getIsSecurityAlertsEnabled(state) {\n  return state.metamask.securityAlertsEnabled;\n}\n\n///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n/**\n * Get the state of the `addSnapAccountEnabled` flag.\n *\n * @param {*} state\n * @returns The state of the `addSnapAccountEnabled` flag.\n */\nexport function getIsAddSnapAccountEnabled(state) {\n  return state.metamask.addSnapAccountEnabled;\n}\n///: END:ONLY_INCLUDE_IF\n\nexport function getIsWatchEthereumAccountEnabled(state) {\n  return state.metamask.watchEthereumAccountEnabled;\n}\n\n/**\n * Get the state of the `bitcoinSupportEnabled` flag.\n *\n * @param {*} state\n * @returns The state of the `bitcoinSupportEnabled` flag.\n */\nexport function getIsBitcoinSupportEnabled(state) {\n  return state.metamask.bitcoinSupportEnabled;\n}\n\n/**\n * Get the state of the `bitcoinTestnetSupportEnabled` flag.\n *\n * @param {*} state\n * @returns The state of the `bitcoinTestnetSupportEnabled` flag.\n */\nexport function getIsBitcoinTestnetSupportEnabled(state) {\n  return state.metamask.bitcoinTestnetSupportEnabled;\n}\n\nexport function getIsCustomNetwork(state) {\n  const chainId = getCurrentChainId(state);\n\n  return !CHAIN_ID_TO_RPC_URL_MAP[chainId];\n}\n\nexport function getBlockExplorerLinkText(\n  state,\n  accountDetailsModalComponent = false,\n) {\n  const isCustomNetwork = getIsCustomNetwork(state);\n  const rpcPrefs = getRpcPrefsForCurrentProvider(state);\n\n  let blockExplorerLinkText = {\n    firstPart: 'addBlockExplorer',\n    secondPart: '',\n  };\n\n  if (rpcPrefs.blockExplorerUrl) {\n    blockExplorerLinkText = accountDetailsModalComponent\n      ? {\n          firstPart: 'blockExplorerView',\n          secondPart: getURLHostName(rpcPrefs.blockExplorerUrl),\n        }\n      : {\n          firstPart: 'viewinExplorer',\n          secondPart: 'blockExplorerAccountAction',\n        };\n  } else if (isCustomNetwork === false) {\n    blockExplorerLinkText = accountDetailsModalComponent\n      ? { firstPart: 'etherscanViewOn', secondPart: '' }\n      : {\n          firstPart: 'viewOnEtherscan',\n          secondPart: 'blockExplorerAccountAction',\n        };\n  }\n\n  return blockExplorerLinkText;\n}\n\nexport function getIsNetworkUsed(state) {\n  const chainId = getCurrentChainId(state);\n  const { usedNetworks } = state.metamask;\n\n  return Boolean(usedNetworks[chainId]);\n}\n\nexport function getAllAccountsOnNetworkAreEmpty(state) {\n  const balances = getMetaMaskCachedBalances(state) ?? {};\n  const hasNoNativeFundsOnAnyAccounts = Object.values(balances).every(\n    (balance) => balance === '0x0' || balance === '0x00',\n  );\n  const hasNoTokens = getNumberOfTokens(state) === 0;\n\n  return hasNoNativeFundsOnAnyAccounts && hasNoTokens;\n}\n\nexport function getShouldShowSeedPhraseReminder(state) {\n  const { tokens, seedPhraseBackedUp, dismissSeedBackUpReminder } =\n    state.metamask;\n\n  // if there is no account, we don't need to show the seed phrase reminder\n  const accountBalance = getSelectedInternalAccount(state)\n    ? getCurrentEthBalance(state)\n    : 0;\n\n  return (\n    seedPhraseBackedUp === false &&\n    (parseInt(accountBalance, 16) > 0 || tokens.length > 0) &&\n    dismissSeedBackUpReminder === false\n  );\n}\n\nexport function getCustomTokenAmount(state) {\n  return state.appState.customTokenAmount;\n}\n\nexport function getUnconnectedAccounts(state, activeTab) {\n  const accounts = getMetaMaskAccountsOrdered(state);\n  const connectedAccounts = getOrderedConnectedAccountsForConnectedDapp(\n    state,\n    activeTab,\n  );\n  const unConnectedAccounts = accounts.filter((account) => {\n    return !connectedAccounts.some(\n      (connectedAccount) => connectedAccount.address === account.address,\n    );\n  });\n  return unConnectedAccounts;\n}\n\nexport const getUpdatedAndSortedAccounts = createDeepEqualSelector(\n  getMetaMaskAccountsOrdered,\n  getPinnedAccountsList,\n  getHiddenAccountsList,\n  getOrderedConnectedAccountsForActiveTab,\n  (accounts, pinnedAddresses, hiddenAddresses, connectedAccounts) => {\n    connectedAccounts.forEach((connection) => {\n      // Find if the connection exists in accounts\n      const matchingAccount = accounts.find(\n        (account) => account.id === connection.id,\n      );\n\n      // If a matching account is found and the connection has metadata, add the connections property to true and lastSelected timestamp from metadata\n      if (matchingAccount && connection.metadata) {\n        matchingAccount.connections = true;\n        matchingAccount.lastSelected = connection.metadata.lastSelected;\n      }\n    });\n\n    // Find the account with the most recent lastSelected timestamp among accounts with metadata\n    const accountsWithLastSelected = accounts.filter(\n      (account) => account.connections && account.lastSelected,\n    );\n\n    const mostRecentAccount =\n      accountsWithLastSelected.length > 0\n        ? accountsWithLastSelected.reduce((prev, current) =>\n            prev.lastSelected > current.lastSelected ? prev : current,\n          )\n        : null;\n\n    accounts.forEach((account) => {\n      account.pinned = Boolean(pinnedAddresses.includes(account.address));\n      account.hidden = Boolean(hiddenAddresses.includes(account.address));\n      account.active = Boolean(\n        mostRecentAccount && account.id === mostRecentAccount.id,\n      );\n    });\n\n    const sortedPinnedAccounts = pinnedAddresses\n      ?.map((address) =>\n        accounts.find((account) => account.address === address),\n      )\n      .filter((account) =>\n        Boolean(\n          account &&\n            pinnedAddresses.includes(account.address) &&\n            !hiddenAddresses?.includes(account.address),\n        ),\n      );\n\n    const notPinnedAccounts = accounts.filter(\n      (account) =>\n        !pinnedAddresses.includes(account.address) &&\n        !hiddenAddresses.includes(account.address),\n    );\n\n    const filteredHiddenAccounts = accounts.filter((account) =>\n      hiddenAddresses.includes(account.address),\n    );\n\n    const sortedSearchResults = [\n      ...sortedPinnedAccounts,\n      ...notPinnedAccounts,\n      ...filteredHiddenAccounts,\n    ];\n\n    return sortedSearchResults;\n  },\n);\n\nexport function getOnboardedInThisUISession(state) {\n  return state.appState.onboardedInThisUISession;\n}\n\nexport function getShowBasicFunctionalityModal(state) {\n  return state.appState.showBasicFunctionalityModal;\n}\n\nexport function getExternalServicesOnboardingToggleState(state) {\n  return state.appState.externalServicesOnboardingToggleState;\n}\n\nexport const useSafeChainsListValidationSelector = (state) => {\n  return state.metamask.useSafeChainsListValidation;\n};\n\nexport function getShowFiatInTestnets(state) {\n  const { showFiatInTestnets } = getPreferences(state);\n  return showFiatInTestnets;\n}\n\n/**\n * To get the useCurrencyRateCheck flag which to check if the user prefers currency conversion\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getUseCurrencyRateCheck(state) {\n  return Boolean(state.metamask.useCurrencyRateCheck);\n}\n\nexport function getNames(state) {\n  return state.metamask.names || {};\n}\n\nexport function getEthereumAddressNames(state) {\n  return state.metamask.names?.[NameType.ETHEREUM_ADDRESS] || {};\n}\n\nexport function getNameSources(state) {\n  return state.metamask.nameSources || {};\n}\n\n/**\n * To get all installed snaps with proper metadata\n *\n * @param {*} state\n * @returns Boolean\n */\nexport function getSnapsList(state) {\n  const snaps = getSnaps(state);\n  return Object.entries(snaps)\n    .filter(([_key, snap]) => {\n      // Always hide installing Snaps.\n      if (snap.status === SnapStatus.Installing) {\n        return false;\n      }\n\n      // For backwards compatibility, preinstalled Snaps must specify hidden = false to be displayed.\n      if (snap.preinstalled) {\n        return snap.hidden === false;\n      }\n\n      return true;\n    })\n    .map(([key, snap]) => {\n      const targetSubjectMetadata = getTargetSubjectMetadata(state, snap?.id);\n      return {\n        key,\n        id: snap.id,\n        iconUrl: targetSubjectMetadata?.iconUrl,\n        subjectType: targetSubjectMetadata?.subjectType,\n        packageName: stripSnapPrefix(snap.id),\n        name: getSnapMetadata(state, snap.id).name,\n      };\n    });\n}\n\n/**\n * To get the state of snaps privacy warning popover.\n *\n * @param state - Redux state object.\n * @returns True if popover has been shown, false otherwise.\n */\nexport function getSnapsInstallPrivacyWarningShown(state) {\n  const { snapsInstallPrivacyWarningShown } = state.metamask;\n\n  if (\n    snapsInstallPrivacyWarningShown === undefined ||\n    snapsInstallPrivacyWarningShown === null\n  ) {\n    return false;\n  }\n\n  return snapsInstallPrivacyWarningShown;\n}\n\n///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\nexport function getsnapsAddSnapAccountModalDismissed(state) {\n  const { snapsAddSnapAccountModalDismissed } = state.metamask;\n\n  return snapsAddSnapAccountModalDismissed;\n}\n\nexport function getSnapRegistry(state) {\n  const { snapRegistryList } = state.metamask;\n  return snapRegistryList;\n}\n\nexport function getKeyringSnapAccounts(state) {\n  const internalAccounts = getInternalAccounts(state);\n\n  const keyringAccounts = Object.values(internalAccounts).filter(\n    (internalAccount) => {\n      const { keyring } = internalAccount.metadata;\n      return keyring.type === KeyringType.snap;\n    },\n  );\n  return keyringAccounts;\n}\n\nexport function getKeyringSnapRemovalResult(state) {\n  return state.appState.keyringRemovalSnapModal;\n}\n\n///: END:ONLY_INCLUDE_IF\n","import { ApprovalType } from '@metamask/controller-utils';\nimport { createSelector } from 'reselect';\nimport {\n  TransactionStatus,\n  TransactionType,\n} from '@metamask/transaction-controller';\nimport { SmartTransactionStatuses } from '@metamask/smart-transactions-controller/dist/types';\nimport {\n  PRIORITY_STATUS_HASH,\n  PENDING_STATUS_HASH,\n} from '../helpers/constants/transactions';\nimport txHelper from '../helpers/utils/tx-helper';\nimport { SmartTransactionStatus } from '../../shared/constants/transaction';\nimport { hexToDecimal } from '../../shared/modules/conversion.utils';\nimport { getProviderConfig } from '../ducks/metamask/metamask';\nimport { getCurrentChainId, getSelectedInternalAccount } from './selectors';\nimport { hasPendingApprovals, getApprovalRequestsByType } from './approvals';\nimport {\n  createDeepEqualSelector,\n  filterAndShapeUnapprovedTransactions,\n} from './util';\n\nconst INVALID_INITIAL_TRANSACTION_TYPES = [\n  TransactionType.cancel,\n  TransactionType.retry,\n];\n\n// The statuses listed below are allowed in the Activity list for Smart Swaps.\n// SUCCESS and REVERTED statuses are excluded because smart transactions with\n// those statuses are already in the regular transaction list.\n// TODO: When Swaps and non-Swaps transactions are treated the same,\n// we will only allow the PENDING smart transaction status in the Activity list.\nconst allowedSwapsSmartTransactionStatusesForActivityList = [\n  SmartTransactionStatuses.PENDING,\n  SmartTransactionStatuses.UNKNOWN,\n  SmartTransactionStatuses.RESOLVED,\n  SmartTransactionStatuses.CANCELLED,\n];\n\nexport const getTransactions = createDeepEqualSelector(\n  (state) => {\n    const { transactions } = state.metamask ?? {};\n\n    if (!transactions?.length) {\n      return [];\n    }\n\n    return [...transactions].sort((a, b) => a.time - b.time); // Ascending\n  },\n  (transactions) => transactions,\n);\n\nexport const getCurrentNetworkTransactions = createDeepEqualSelector(\n  (state) => {\n    const transactions = getTransactions(state);\n\n    if (!transactions.length) {\n      return [];\n    }\n\n    const { chainId } = getProviderConfig(state);\n\n    return transactions.filter(\n      (transaction) => transaction.chainId === chainId,\n    );\n  },\n  (transactions) => transactions,\n);\n\nexport const getUnapprovedTransactions = createDeepEqualSelector(\n  (state) => {\n    const currentNetworkTransactions = getCurrentNetworkTransactions(state);\n    return filterAndShapeUnapprovedTransactions(currentNetworkTransactions);\n  },\n  (transactions) => transactions,\n);\n\n// Unlike `getUnapprovedTransactions` and `getCurrentNetworkTransactions`\n// returns the total number of unapproved transactions on all networks\nexport const getAllUnapprovedTransactions = createDeepEqualSelector(\n  (state) => {\n    const { transactions } = state.metamask || [];\n    if (!transactions?.length) {\n      return [];\n    }\n\n    const sortedTransactions = [...transactions].sort(\n      (a, b) => a.time - b.time,\n    );\n\n    return filterAndShapeUnapprovedTransactions(sortedTransactions);\n  },\n  (transactions) => transactions,\n);\n\nexport const getApprovedAndSignedTransactions = createDeepEqualSelector(\n  (state) => {\n    // Fetch transactions across all networks to address a nonce management limitation.\n    // This issue arises when a pending transaction exists on one network, and the user initiates another transaction on a different network.\n    const transactions = getTransactions(state);\n\n    return transactions.filter((transaction) =>\n      [TransactionStatus.approved, TransactionStatus.signed].includes(\n        transaction.status,\n      ),\n    );\n  },\n  (transactions) => transactions,\n);\n\nexport const incomingTxListSelector = createDeepEqualSelector(\n  (state) => {\n    const { incomingTransactionsPreferences } = state.metamask;\n    if (!incomingTransactionsPreferences) {\n      return [];\n    }\n\n    const currentNetworkTransactions = getCurrentNetworkTransactions(state);\n    const { address: selectedAddress } = getSelectedInternalAccount(state);\n\n    return currentNetworkTransactions.filter(\n      (tx) =>\n        tx.type === TransactionType.incoming &&\n        tx.txParams.to === selectedAddress,\n    );\n  },\n  (transactions) => transactions,\n);\n\nexport const unapprovedPersonalMsgsSelector = (state) =>\n  state.metamask.unapprovedPersonalMsgs;\nexport const unapprovedDecryptMsgsSelector = (state) =>\n  state.metamask.unapprovedDecryptMsgs;\nexport const unapprovedEncryptionPublicKeyMsgsSelector = (state) =>\n  state.metamask.unapprovedEncryptionPublicKeyMsgs;\nexport const unapprovedTypedMessagesSelector = (state) =>\n  state.metamask.unapprovedTypedMessages;\n\nexport const smartTransactionsListSelector = (state) => {\n  const { address: selectedAddress } = getSelectedInternalAccount(state);\n  return state.metamask.smartTransactionsState?.smartTransactions?.[\n    getCurrentChainId(state)\n  ]\n    ?.filter((smartTransaction) => {\n      if (\n        smartTransaction.txParams?.from !== selectedAddress ||\n        smartTransaction.confirmed\n      ) {\n        return false;\n      }\n      // If a swap or non-swap smart transaction is pending, we want to show it in the Activity list.\n      if (smartTransaction.status === SmartTransactionStatuses.PENDING) {\n        return true;\n      }\n      // In the future we should have the same behavior for Swaps and non-Swaps transactions.\n      // For that we need to submit Smart Swaps via the TransactionController as we do for\n      // non-Swaps Smart Transactions.\n      return (\n        (smartTransaction.type === TransactionType.swap ||\n          smartTransaction.type === TransactionType.swapApproval) &&\n        allowedSwapsSmartTransactionStatusesForActivityList.includes(\n          smartTransaction.status,\n        )\n      );\n    })\n    .map((stx) => ({\n      ...stx,\n      isSmartTransaction: true,\n      status: stx.status?.startsWith('cancelled')\n        ? SmartTransactionStatus.cancelled\n        : stx.status,\n    }));\n};\n\nexport const selectedAddressTxListSelector = createSelector(\n  getSelectedInternalAccount,\n  getCurrentNetworkTransactions,\n  smartTransactionsListSelector,\n  (selectedInternalAccount, transactions = [], smTransactions = []) => {\n    return transactions\n      .filter(\n        ({ txParams }) => txParams.from === selectedInternalAccount.address,\n      )\n      .filter(({ type }) => type !== TransactionType.incoming)\n      .concat(smTransactions);\n  },\n);\n\nexport const unapprovedMessagesSelector = createSelector(\n  unapprovedPersonalMsgsSelector,\n  unapprovedDecryptMsgsSelector,\n  unapprovedEncryptionPublicKeyMsgsSelector,\n  unapprovedTypedMessagesSelector,\n  getCurrentChainId,\n  (\n    unapprovedPersonalMsgs = {},\n    unapprovedDecryptMsgs = {},\n    unapprovedEncryptionPublicKeyMsgs = {},\n    unapprovedTypedMessages = {},\n    chainId,\n  ) =>\n    txHelper(\n      {},\n      unapprovedPersonalMsgs,\n      unapprovedDecryptMsgs,\n      unapprovedEncryptionPublicKeyMsgs,\n      unapprovedTypedMessages,\n      chainId,\n    ) || [],\n);\n\nexport const transactionSubSelector = createSelector(\n  unapprovedMessagesSelector,\n  incomingTxListSelector,\n  (unapprovedMessages = [], incomingTxList = []) => {\n    return unapprovedMessages.concat(incomingTxList);\n  },\n);\n\nexport const transactionsSelector = createSelector(\n  transactionSubSelector,\n  selectedAddressTxListSelector,\n  (subSelectorTxList = [], selectedAddressTxList = []) => {\n    const txsToRender = selectedAddressTxList.concat(subSelectorTxList);\n\n    return [...txsToRender].sort((a, b) => b.time - a.time);\n  },\n);\n\n/**\n * @name insertOrderedNonce\n * @private\n * @description Inserts (mutates) a nonce into an array of ordered nonces, sorted in ascending\n * order.\n * @param {string[]} nonces - Array of nonce strings in hex\n * @param {string} nonceToInsert - Nonce string in hex to be inserted into the array of nonces.\n */\nconst insertOrderedNonce = (nonces, nonceToInsert) => {\n  let insertIndex = nonces.length;\n\n  for (let i = 0; i < nonces.length; i++) {\n    const nonce = nonces[i];\n\n    if (Number(hexToDecimal(nonce)) > Number(hexToDecimal(nonceToInsert))) {\n      insertIndex = i;\n      break;\n    }\n  }\n\n  nonces.splice(insertIndex, 0, nonceToInsert);\n};\n\n/**\n * @name insertTransactionByTime\n * @private\n * @description Inserts (mutates) a transaction object into an array of ordered transactions, sorted\n * in ascending order by time.\n * @param {object[]} transactions - Array of transaction objects.\n * @param {object} transaction - Transaction object to be inserted into the array of transactions.\n */\nconst insertTransactionByTime = (transactions, transaction) => {\n  const { time } = transaction;\n\n  let insertIndex = transactions.length;\n\n  for (let i = 0; i < transactions.length; i++) {\n    const tx = transactions[i];\n\n    if (tx.time > time) {\n      insertIndex = i;\n      break;\n    }\n  }\n\n  transactions.splice(insertIndex, 0, transaction);\n};\n\n/**\n * Contains transactions and properties associated with those transactions of the same nonce.\n *\n * @typedef {object} transactionGroup\n * @property {string} nonce - The nonce that the transactions within this transactionGroup share.\n * @property {object[]} transactions - An array of transaction (txMeta) objects.\n * @property {object} initialTransaction - The transaction (txMeta) with the lowest \"time\".\n * @property {object} primaryTransaction - Either the latest transaction or the confirmed\n * transaction.\n * @property {boolean} hasRetried - True if a transaction in the group was a retry transaction.\n * @property {boolean} hasCancelled - True if a transaction in the group was a cancel transaction.\n */\n\n/**\n * @name insertTransactionGroupByTime\n * @private\n * @description Inserts (mutates) a transactionGroup object into an array of ordered\n * transactionGroups, sorted in ascending order by nonce.\n * @param {transactionGroup[]} transactionGroups - Array of transactionGroup objects.\n * @param {transactionGroup} transactionGroup - transactionGroup object to be inserted into the\n * array of transactionGroups.\n */\nconst insertTransactionGroupByTime = (transactionGroups, transactionGroup) => {\n  const { primaryTransaction: { time: groupToInsertTime } = {} } =\n    transactionGroup;\n\n  let insertIndex = transactionGroups.length;\n\n  for (let i = 0; i < transactionGroups.length; i++) {\n    const txGroup = transactionGroups[i];\n    const { primaryTransaction: { time } = {} } = txGroup;\n\n    if (time > groupToInsertTime) {\n      insertIndex = i;\n      break;\n    }\n  }\n\n  transactionGroups.splice(insertIndex, 0, transactionGroup);\n};\n\n/**\n * @name mergeNonNonceTransactionGroups\n * @private\n * @description Inserts (mutates) transactionGroups that are not to be ordered by nonce into an array\n * of nonce-ordered transactionGroups by time.\n * @param {transactionGroup[]} orderedTransactionGroups - Array of transactionGroups ordered by\n * nonce.\n * @param {transactionGroup[]} nonNonceTransactionGroups - Array of transactionGroups not intended to be ordered by nonce,\n * but intended to be ordered by timestamp\n */\nconst mergeNonNonceTransactionGroups = (\n  orderedTransactionGroups,\n  nonNonceTransactionGroups,\n) => {\n  nonNonceTransactionGroups.forEach((transactionGroup) => {\n    insertTransactionGroupByTime(orderedTransactionGroups, transactionGroup);\n  });\n};\n\n/**\n * @name nonceSortedTransactionsSelector\n * @description Returns an array of transactionGroups sorted by nonce in ascending order.\n * @returns {transactionGroup[]}\n */\nexport const nonceSortedTransactionsSelector = createSelector(\n  transactionsSelector,\n  (transactions = []) => {\n    const unapprovedTransactionGroups = [];\n    const incomingTransactionGroups = [];\n    const orderedNonces = [];\n    const nonceToTransactionsMap = {};\n\n    transactions.forEach((transaction) => {\n      const {\n        txParams: { nonce } = {},\n        status,\n        type,\n        time: txTime,\n        txReceipt,\n      } = transaction;\n\n      // Don't group transactions by nonce if:\n      // 1. Tx nonce is undefined\n      // 2. Tx is incoming (deposit)\n      // 3. Tx is custodial (mmi specific)\n      let shouldNotBeGrouped =\n        typeof nonce === 'undefined' || type === TransactionType.incoming;\n\n\n      if (shouldNotBeGrouped) {\n        const transactionGroup = {\n          transactions: [transaction],\n          initialTransaction: transaction,\n          primaryTransaction: transaction,\n          hasRetried: false,\n          hasCancelled: false,\n          nonce,\n        };\n\n        if (type === TransactionType.incoming) {\n          incomingTransactionGroups.push(transactionGroup);\n        } else {\n          insertTransactionGroupByTime(\n            unapprovedTransactionGroups,\n            transactionGroup,\n          );\n        }\n      } else if (nonce in nonceToTransactionsMap) {\n        const nonceProps = nonceToTransactionsMap[nonce];\n        insertTransactionByTime(nonceProps.transactions, transaction);\n\n        const {\n          primaryTransaction: { time: primaryTxTime = 0 } = {},\n          initialTransaction: { time: initialTxTime = 0 } = {},\n        } = nonceProps;\n\n        // Current Transaction Logic Cases\n        // --------------------------------------------------------------------\n        // Current transaction: The transaction we are examining in this loop.\n        // Each iteration should be in time order, but that is not guaranteed.\n        // --------------------------------------------------------------------\n        const currentTransaction = {\n          // A on chain failure means the current transaction was submitted and\n          // considered for inclusion in a block but something prevented it\n          // from being included, such as slippage on gas prices and conversion\n          // when doing a swap. These transactions will have a '0x0' value in\n          // the txReceipt.status field.\n          isOnChainFailure: txReceipt?.status === '0x0',\n          // Another type of failure is a \"off chain\" or \"network\" failure,\n          // where the error occurs on the JSON RPC call to the network client\n          // (Like Infura). These transactions are never broadcast for\n          // inclusion and the nonce associated with them is not consumed. When\n          // this occurs  the next transaction will have the same nonce as the\n          // current, failed transaction. A failed on chain transaction will\n          // not have the FAILED status although it should (future TODO: add a\n          // new FAILED_ON_CHAIN) status. I use the word \"Ephemeral\" here\n          // because a failed transaction that does not get broadcast is not\n          // known outside of the user's local MetaMask and the nonce\n          // associated will be applied to the next.\n          isEphemeral:\n            status === TransactionStatus.failed && txReceipt?.status !== '0x0',\n          // We never want to use a speed up (retry) or cancel as the initial\n          // transaction in a group, regardless of time order. This is because\n          // useTransactionDisplayData cannot parse a retry or cancel because\n          // it lacks information on whether its a simple send, token transfer,\n          // etc.\n          isRetryOrCancel: INVALID_INITIAL_TRANSACTION_TYPES.includes(type),\n          // Primary transactions usually are the latest transaction by time,\n          // but not always. This value shows whether this transaction occurred\n          // after the current primary.\n          occurredAfterPrimary: txTime > primaryTxTime,\n          // Priority Statuses are those that are ones either already confirmed\n          // on chain, submitted to the network, or waiting for user approval.\n          // These statuses typically indicate a transaction that needs to have\n          // its status reflected in the UI.\n          hasPriorityStatus: status in PRIORITY_STATUS_HASH,\n          // A confirmed transaction is the most valid transaction status to\n          // display because no other transaction of the same nonce can have a\n          // more valid status.\n          isConfirmed: status === TransactionStatus.confirmed,\n          // Initial transactions usually are the earliest transaction by time,\n          // but not always. THis value shows whether this transaction occurred\n          // before the current initial.\n          occurredBeforeInitial: txTime < initialTxTime,\n          // We only allow users to retry the transaction in certain scenarios\n          // to help shield from expensive operations and other unwanted side\n          // effects. This value is used to determine if the entire transaction\n          // group should be marked as having had a retry.\n          isValidRetry:\n            type === TransactionType.retry &&\n            (status in PRIORITY_STATUS_HASH ||\n              status === TransactionStatus.dropped),\n          // We only allow users to cancel the transaction in certain scenarios\n          // to help shield from expensive operations and other unwanted side\n          // effects. This value is used to determine if the entire transaction\n          // group should be marked as having had a cancel.\n          isValidCancel:\n            type === TransactionType.cancel &&\n            (status in PRIORITY_STATUS_HASH ||\n              status === TransactionStatus.dropped),\n        };\n\n        // We should never assign a retry or cancel transaction as the initial,\n        // likewise an ephemeral transaction should not be initial.\n        currentTransaction.eligibleForInitial =\n          !currentTransaction.isRetryOrCancel &&\n          !currentTransaction.isEphemeral;\n\n        // If a transaction failed on chain or was confirmed then it should\n        // always be the primary because no other transaction is more valid.\n        currentTransaction.shouldBePrimary =\n          currentTransaction.isConfirmed || currentTransaction.isOnChainFailure;\n\n        // Primary Transaction Logic Cases\n        // --------------------------------------------------------------------\n        // Primary transaction: The transaction for any given nonce which has\n        // the most valid status on the network.\n        // Example:\n        // 1. Submit transaction A\n        // 2. Speed up Transaction A.\n        // 3. This creates a new Transaction (B) with higher gas params.\n        // 4. Transaction A and Transaction B are both submitted.\n        // 5. We expect Transaction B to be the most valid transaction to use\n        //    for the status of the transaction group because it has higher\n        //    gas params and should be included first.\n        // The following logic variables are used for edge cases that protect\n        // against UI bugs when this breaks down.\n        const previousPrimaryTransaction = {\n          // As we loop through the transactions in state we may temporarily\n          // assign a primaryTransaction that is an \"Ephemeral\" transaction,\n          // which is one that failed before being broadcast for inclusion in a\n          // block. When this happens, and we have another transaction to\n          // consider in a nonce group, we should use the new transaction.\n          isEphemeral:\n            nonceProps.primaryTransaction.status === TransactionStatus.failed &&\n            nonceProps.primaryTransaction?.txReceipt?.status !== '0x0',\n        };\n\n        // Initial Transaction Logic Cases\n        // --------------------------------------------------------------------\n        // Initial Transaction: The transaction that most likely represents the\n        // user's intent when creating/approving the transaction. In most cases\n        // this is the first transaction of a nonce group, by time, but this\n        // breaks down in the case of users with the advanced setting enabled\n        // to set their own nonces manually. In that case a user may submit two\n        // completely different transactions of the same nonce and they will be\n        // bundled together by this selector as the same activity entry.\n        const previousInitialTransaction = {\n          // As we loop through the transactions in state we may temporarily\n          // assign a initialTransaction that is an \"Ephemeral\" transaction,\n          // which is one that failed before being broadcast for inclusion in a\n          // block. When this happens, and we have another transaction to\n          // consider in a nonce group, we should use the new transaction.\n          isEphemeral:\n            nonceProps.initialTransaction.status === TransactionStatus.failed &&\n            nonceProps.initialTransaction.txReceipt?.status !== '0x0',\n        };\n\n        // Check the above logic cases and assign a new primaryTransaction if\n        // appropriate\n        if (\n          currentTransaction.shouldBePrimary ||\n          previousPrimaryTransaction.isEphemeral ||\n          (currentTransaction.occurredAfterPrimary &&\n            currentTransaction.hasPriorityStatus)\n        ) {\n          nonceProps.primaryTransaction = transaction;\n        }\n\n        // Check the above logic cases and assign a new initialTransaction if\n        // appropriate\n        if (\n          (currentTransaction.occurredBeforeInitial &&\n            currentTransaction.eligibleForInitial) ||\n          (previousInitialTransaction.isEphemeral &&\n            currentTransaction.eligibleForInitial)\n        ) {\n          nonceProps.initialTransaction = transaction;\n        }\n\n        if (currentTransaction.isValidRetry) {\n          nonceProps.hasRetried = true;\n        }\n\n        if (currentTransaction.isValidCancel) {\n          nonceProps.hasCancelled = true;\n        }\n      } else {\n        nonceToTransactionsMap[nonce] = {\n          nonce,\n          transactions: [transaction],\n          initialTransaction: transaction,\n          primaryTransaction: transaction,\n          hasRetried:\n            transaction.type === TransactionType.retry &&\n            (transaction.status in PRIORITY_STATUS_HASH ||\n              transaction.status === TransactionStatus.dropped),\n          hasCancelled:\n            transaction.type === TransactionType.cancel &&\n            (transaction.status in PRIORITY_STATUS_HASH ||\n              transaction.status === TransactionStatus.dropped),\n        };\n\n        insertOrderedNonce(orderedNonces, nonce);\n      }\n    });\n\n    const orderedTransactionGroups = orderedNonces.map(\n      (nonce) => nonceToTransactionsMap[nonce],\n    );\n    mergeNonNonceTransactionGroups(\n      orderedTransactionGroups,\n      incomingTransactionGroups,\n    );\n    return unapprovedTransactionGroups\n      .concat(orderedTransactionGroups)\n      .map((txGroup) => {\n        // In the case that we have a cancel or retry as initial transaction\n        // and there is a valid transaction in the group, we should reassign\n        // the other valid transaction as initial. In this case validity of the\n        // transaction is expanded to include off-chain failures because it is\n        // valid to retry those with higher gas prices.\n        if (\n          INVALID_INITIAL_TRANSACTION_TYPES.includes(\n            txGroup.initialTransaction?.type,\n          )\n        ) {\n          const nonRetryOrCancel = txGroup.transactions.find(\n            (tx) => !INVALID_INITIAL_TRANSACTION_TYPES.includes(tx.type),\n          );\n          if (nonRetryOrCancel) {\n            return {\n              ...txGroup,\n              initialTransaction: nonRetryOrCancel,\n            };\n          }\n        }\n        return txGroup;\n      });\n  },\n);\n\n/**\n * @name nonceSortedPendingTransactionsSelector\n * @description Returns an array of transactionGroups where transactions are still pending sorted by\n * nonce in descending order.\n * @returns {transactionGroup[]}\n */\nexport const nonceSortedPendingTransactionsSelector = createSelector(\n  nonceSortedTransactionsSelector,\n  (transactions = []) =>\n    transactions.filter(\n      ({ primaryTransaction }) =>\n        primaryTransaction.status in PENDING_STATUS_HASH,\n    ),\n);\n\n/**\n * @name nonceSortedCompletedTransactionsSelector\n * @description Returns an array of transactionGroups where transactions are confirmed sorted by\n * nonce in descending order.\n * @returns {transactionGroup[]}\n */\nexport const nonceSortedCompletedTransactionsSelector = createSelector(\n  nonceSortedTransactionsSelector,\n  (transactions = []) =>\n    transactions\n      .filter(\n        ({ primaryTransaction }) =>\n          !(primaryTransaction.status in PENDING_STATUS_HASH),\n      )\n      .reverse(),\n);\n\nexport const submittedPendingTransactionsSelector = createSelector(\n  transactionsSelector,\n  (transactions = []) =>\n    transactions.filter(\n      (transaction) => transaction.status === TransactionStatus.submitted,\n    ),\n);\n\nconst TRANSACTION_APPROVAL_TYPES = [\n  ApprovalType.EthDecrypt,\n  ApprovalType.EthGetEncryptionPublicKey,\n  ApprovalType.EthSignTypedData,\n  ApprovalType.PersonalSign,\n];\n\nexport function hasTransactionPendingApprovals(state) {\n  const unapprovedTxRequests = getApprovalRequestsByType(\n    state,\n    ApprovalType.Transaction,\n  );\n  return (\n    unapprovedTxRequests.length > 0 ||\n    hasPendingApprovals(state, TRANSACTION_APPROVAL_TYPES)\n  );\n}\n\nexport function selectTransactionMetadata(state, transactionId) {\n  return state.metamask.transactions.find(\n    (transaction) => transaction.id === transactionId,\n  );\n}\n\nexport const selectTransactionSender = createSelector(\n  (state, transactionId) => selectTransactionMetadata(state, transactionId),\n  (transaction) => transaction?.txParams?.from,\n);\n","import { TransactionStatus } from '@metamask/transaction-controller';\nimport { isEqual } from 'lodash';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\n\nexport const createDeepEqualSelector = createSelectorCreator(\n  defaultMemoize,\n  isEqual,\n);\n\nexport const filterAndShapeUnapprovedTransactions = (transactions) => {\n  return transactions\n    .filter(({ status }) => status === TransactionStatus.unapproved)\n    .reduce((result, transaction) => {\n      result[transaction.id] = transaction;\n      return result;\n    }, {});\n};\n","export const GO_HOME = 'GO_HOME';\n// modal state\nexport const MODAL_OPEN = 'UI_MODAL_OPEN';\nexport const MODAL_CLOSE = 'UI_MODAL_CLOSE';\nexport const SET_CONFIRMATION_EXCHANGE_RATES =\n  'SET_CONFIRMATION_EXCHANGE_RATES';\n// alert state\nexport const ALERT_OPEN = 'UI_ALERT_OPEN';\nexport const ALERT_CLOSE = 'UI_ALERT_CLOSE';\nexport const QR_CODE_DETECTED = 'UI_QR_CODE_DETECTED';\n// network dropdown open\nexport const NETWORK_DROPDOWN_OPEN = 'UI_NETWORK_DROPDOWN_OPEN';\nexport const NETWORK_DROPDOWN_CLOSE = 'UI_NETWORK_DROPDOWN_CLOSE';\nexport const IMPORT_NFTS_MODAL_OPEN = 'UI_IMPORT_NFTS_MODAL_OPEN';\nexport const IMPORT_NFTS_MODAL_CLOSE = 'UI_IMPORT_NFTS_MODAL_CLOSE';\nexport const SHOW_IPFS_MODAL_OPEN = 'UI_IPFS_MODAL_OPEN';\nexport const SHOW_IPFS_MODAL_CLOSE = 'UI_IPFS_MODAL_CLOSE';\nexport const IMPORT_TOKENS_POPOVER_OPEN = 'UI_IMPORT_TOKENS_POPOVER_OPEN';\nexport const IMPORT_TOKENS_POPOVER_CLOSE = 'UI_IMPORT_TOKENS_POPOVER_CLOSE';\nexport const SHOW_BASIC_FUNCTIONALITY_MODAL_OPEN =\n  'SHOW_BASIC_FUNCTIONALITY_MODAL_OPEN';\nexport const SHOW_BASIC_FUNCTIONALITY_MODAL_CLOSE =\n  'SHOW_BASIC_FUNCTIONALITY_MODAL_CLOSE';\nexport const ONBOARDING_TOGGLE_BASIC_FUNCTIONALITY_ON =\n  'ONBOARDING_TOGGLE_BASIC_FUNCTIONALITY_ON';\nexport const ONBOARDING_TOGGLE_BASIC_FUNCTIONALITY_OFF =\n  'ONBOARDING_TOGGLE_BASIC_FUNCTIONALITY_OFF';\n\n// remote state\nexport const UPDATE_METAMASK_STATE = 'UPDATE_METAMASK_STATE';\nexport const SELECTED_ADDRESS_CHANGED = 'SELECTED_ADDRESS_CHANGED';\nexport const SELECTED_ACCOUNT_CHANGED = 'SELECTED_ACCOUNT_CHANGED';\nexport const ACCOUNT_CHANGED = 'ACCOUNT_CHANGED';\nexport const CHAIN_CHANGED = 'CHAIN_CHANGED';\nexport const ADDRESS_BOOK_UPDATED = 'ADDRESS_BOOK_UPDATED';\nexport const GAS_FEE_ESTIMATES_UPDATED = 'GAS_FEE_ESTIMATES_UPDATED';\nexport const CLOSE_WELCOME_SCREEN = 'CLOSE_WELCOME_SCREEN';\n// send state\nexport const CLEAR_SWAP_AND_SEND_STATE = 'CLEAR_SWAP_AND_SEND_STATE';\n// unlock screen\nexport const UNLOCK_IN_PROGRESS = 'UNLOCK_IN_PROGRESS';\nexport const UNLOCK_FAILED = 'UNLOCK_FAILED';\nexport const UNLOCK_SUCCEEDED = 'UNLOCK_SUCCEEDED';\nexport const LOCK_METAMASK = 'LOCK_METAMASK';\n// error handling\nexport const DISPLAY_WARNING = 'DISPLAY_WARNING';\nexport const HIDE_WARNING = 'HIDE_WARNING';\nexport const CAPTURE_SINGLE_EXCEPTION = 'CAPTURE_SINGLE_EXCEPTION';\n// accounts screen\nexport const SHOW_ACCOUNTS_PAGE = 'SHOW_ACCOUNTS_PAGE';\nexport const SHOW_CONF_TX_PAGE = 'SHOW_CONF_TX_PAGE';\n// account detail screen\nexport const SHOW_SEND_TOKEN_PAGE = 'SHOW_SEND_TOKEN_PAGE';\nexport const SHOW_PRIVATE_KEY = 'SHOW_PRIVATE_KEY';\nexport const SET_ACCOUNT_LABEL = 'SET_ACCOUNT_LABEL';\nexport const CLEAR_ACCOUNT_DETAILS = 'CLEAR_ACCOUNT_DETAILS';\nexport const SET_ACCOUNT_DETAILS_ADDRESS = 'SET_ACCOUNT_DETAILS_ADDRESS';\n// tx conf screen\nexport const COMPLETED_TX = 'COMPLETED_TX';\nexport const TRANSACTION_ERROR = 'TRANSACTION_ERROR';\nexport const UPDATE_TRANSACTION_PARAMS = 'UPDATE_TRANSACTION_PARAMS';\nexport const SET_NEXT_NONCE = 'SET_NEXT_NONCE';\n// config screen\nexport const SET_HARDWARE_WALLET_DEFAULT_HD_PATH =\n  'SET_HARDWARE_WALLET_DEFAULT_HD_PATH';\n// loading overlay\nexport const SHOW_LOADING = 'SHOW_LOADING_INDICATION';\nexport const HIDE_LOADING = 'HIDE_LOADING_INDICATION';\n\n// Nft still fetching indication spinners\nexport const SHOW_NFT_STILL_FETCHING_INDICATION =\n  'SHOW_NFT_STILL_FETCHING_INDICATION';\nexport const HIDE_NFT_STILL_FETCHING_INDICATION =\n  'HIDE_NFT_STILL_FETCHING_INDICATION';\n\nexport const SHOW_NFT_DETECTION_ENABLEMENT_TOAST =\n  'SHOW_NFT_DETECTION_ENABLEMENT_TOAST';\n\nexport const TOGGLE_ACCOUNT_MENU = 'TOGGLE_ACCOUNT_MENU';\nexport const TOGGLE_NETWORK_MENU = 'TOGGLE_NETWORK_MENU';\n\n// deprecated network modal\nexport const DEPRECATED_NETWORK_POPOVER_OPEN =\n  'DEPRECATED_NETWORK_POPOVER_OPEN';\nexport const DEPRECATED_NETWORK_POPOVER_CLOSE =\n  'DEPRECATED_NETWORK_POPOVER_CLOSE';\n\n// preferences\nexport const UPDATE_CUSTOM_NONCE = 'UPDATE_CUSTOM_NONCE';\n\nexport const SET_PARTICIPATE_IN_METAMETRICS = 'SET_PARTICIPATE_IN_METAMETRICS';\nexport const SET_DATA_COLLECTION_FOR_MARKETING =\n  'SET_DATA_COLLECTION_FOR_MARKETING';\n\n// locale\nexport const SET_CURRENT_LOCALE = 'SET_CURRENT_LOCALE';\n\n// Onboarding\n\nexport const COMPLETE_ONBOARDING = 'COMPLETE_ONBOARDING';\nexport const RESET_ONBOARDING = 'RESET_ONBOARDING';\nexport const ONBOARDED_IN_THIS_UI_SESSION = 'ONBOARDED_IN_THIS_UI_SESSION';\n\n// Ledger\n\nexport const SET_WEBHID_CONNECTED_STATUS = 'SET_WEBHID_CONNECTED_STATUS';\nexport const SET_LEDGER_TRANSPORT_STATUS = 'SET_LEDGER_TRANSPORT_STATUS';\n\n// Network\nexport const SET_PENDING_TOKENS = 'SET_PENDING_TOKENS';\nexport const CLEAR_PENDING_TOKENS = 'CLEAR_PENDING_TOKENS';\n\nexport const SET_FIRST_TIME_FLOW_TYPE = 'SET_FIRST_TIME_FLOW_TYPE';\n\nexport const SET_SELECTED_NETWORK_CONFIGURATION_ID =\n  'SET_SELECTED_NETWORK_CONFIGURATION_ID';\nexport const SET_NEW_NETWORK_ADDED = 'SET_NEW_NETWORK_ADDED';\nexport const SET_EDIT_NETWORK = 'SET_EDIT_NETWORK';\n\nexport const SET_NEW_NFT_ADDED_MESSAGE = 'SET_NEW_NFT_ADDED_MESSAGE';\nexport const SET_REMOVE_NFT_MESSAGE = 'SET_REMOVE_NFT_MESSAGE';\n\nexport const LOADING_METHOD_DATA_STARTED = 'LOADING_METHOD_DATA_STARTED';\nexport const LOADING_METHOD_DATA_FINISHED = 'LOADING_METHOD_DATA_FINISHED';\n\nexport const SET_REQUEST_ACCOUNT_TABS = 'SET_REQUEST_ACCOUNT_TABS';\nexport const SET_OPEN_METAMASK_TAB_IDS = 'SET_OPEN_METAMASK_TAB_IDS';\n\n// Home Screen\nexport const HIDE_WHATS_NEW_POPUP = 'HIDE_WHATS_NEW_POPUP';\nexport const TOGGLE_GAS_LOADING_ANIMATION = 'TOGGLE_GAS_LOADING_ANIMATION';\n\n// Smart Transactions\nexport const SET_SMART_TRANSACTIONS_ERROR = 'SET_SMART_TRANSACTIONS_ERROR';\nexport const DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE =\n  'DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE';\n\nexport const TOGGLE_CURRENCY_INPUT_SWITCH = 'TOGGLE_CURRENCY_INPUT_SWITCH';\n\n// Token detection v2\nexport const SET_NEW_TOKENS_IMPORTED = 'SET_NEW_TOKENS_IMPORTED';\n\nexport const SET_NEW_TOKENS_IMPORTED_ERROR = 'SET_NEW_TOKENS_IMPORTED_ERROR';\n\n// Token allowance\nexport const SET_CUSTOM_TOKEN_AMOUNT = 'SET_CUSTOM_TOKEN_AMOUNT';\n\n// Connections Modal\nexport const CONNECT_ACCOUNTS_MODAL_OPEN = 'UI_CONNECT_ACCOUNTS_MODAL_OPEN';\nexport const CONNECT_ACCOUNTS_MODAL_CLOSE = 'UI_CONNECT_ACCOUNTS_MODAL_CLOSE';\n\n///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\nexport const SHOW_KEYRING_SNAP_REMOVAL_RESULT =\n  'SHOW_KEYRING_SNAP_REMOVAL_RESULT';\nexport const HIDE_KEYRING_SNAP_REMOVAL_RESULT =\n  'HIDE_KEYRING_SNAP_REMOVAL_RESULT';\n///: END:ONLY_INCLUDE_IF\n\nexport const SET_SHOW_NFT_AUTO_DETECT_MODAL_UPGRADE =\n  'SET_SHOW_NFT_AUTO_DETECT_MODAL_UPGRADE';\n","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck `redux-thunk` and `@reduxjs/toolkit` are not compatible with\n// TypeScript 5.3.3. We can't update them because we rely on an old version of\n// @reduxjs/toolkit to be patched by our patch files. The patch is 6000+ lines.\n// I don't want to try to figure that one out.\nimport { ReactFragment } from 'react';\nimport log from 'loglevel';\nimport { captureException } from '@sentry/browser';\nimport { capitalize, isEqual } from 'lodash';\nimport { ThunkAction } from 'redux-thunk';\nimport { Action, AnyAction } from 'redux';\nimport { ethErrors, serializeError } from 'eth-rpc-errors';\nimport type { Hex, Json } from '@metamask/utils';\nimport {\n  AssetsContractController,\n  BalanceMap,\n  Nft,\n  Token,\n} from '@metamask/assets-controllers';\nimport { PayloadAction } from '@reduxjs/toolkit';\nimport { GasFeeController } from '@metamask/gas-fee-controller';\nimport { PermissionsRequest } from '@metamask/permission-controller';\nimport { NonEmptyArray } from '@metamask/controller-utils';\nimport {\n  SetNameRequest,\n  UpdateProposedNamesRequest,\n  UpdateProposedNamesResult,\n} from '@metamask/name-controller';\nimport {\n  TransactionMeta,\n  TransactionParams,\n  TransactionType,\n} from '@metamask/transaction-controller';\nimport {\n  AddNetworkFields,\n  NetworkClientId,\n  NetworkConfiguration,\n} from '@metamask/network-controller';\nimport { InterfaceState } from '@metamask/snaps-sdk';\nimport { KeyringTypes } from '@metamask/keyring-controller';\nimport type { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { Patch } from 'immer';\nimport switchDirection from '../../shared/lib/switch-direction';\nimport {\n  ENVIRONMENT_TYPE_NOTIFICATION,\n  ORIGIN_METAMASK,\n  POLLING_TOKEN_ENVIRONMENT_TYPES,\n} from '../../shared/constants/app';\nimport { getEnvironmentType, addHexPrefix } from '../../app/scripts/lib/util';\nimport {\n  getMetaMaskAccounts,\n  getPermittedAccountsForCurrentTab,\n  hasTransactionPendingApprovals,\n  getApprovalFlows,\n  getCurrentNetworkTransactions,\n  getIsSigningQRHardwareTransaction,\n  getNotifications,\n  ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n  getPermissionSubjects,\n  getFirstSnapInstallOrUpdateRequest,\n  ///: END:ONLY_INCLUDE_IF\n  getInternalAccountByAddress,\n  getSelectedInternalAccount,\n  getInternalAccounts,\n  getSelectedNetworkClientId,\n} from '../selectors';\nimport {\n  computeEstimatedGasLimit,\n  initializeSendState,\n  resetSendState,\n  // NOTE: Until the send duck is typescript that this is importing a typedef\n  // that does not have an explicit export statement. lets see if it breaks the\n  // compiler\n  DraftTransaction,\n  SEND_STAGES,\n} from '../ducks/send';\nimport { switchedToUnconnectedAccount } from '../ducks/alerts/unconnected-account';\nimport {\n  getProviderConfig,\n  getUnconnectedAccountAlertEnabledness,\n} from '../ducks/metamask/metamask';\nimport { toChecksumHexAddress } from '../../shared/modules/hexstring-utils';\nimport {\n  HardwareDeviceNames,\n  LedgerTransportTypes,\n  LEDGER_USB_VENDOR_ID,\n} from '../../shared/constants/hardware-wallets';\nimport {\n  MetaMetricsEventFragment,\n  MetaMetricsEventOptions,\n  MetaMetricsEventPayload,\n  MetaMetricsPageObject,\n  MetaMetricsPageOptions,\n  MetaMetricsPagePayload,\n  MetaMetricsReferrerObject,\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../shared/constants/metametrics';\nimport { parseSmartTransactionsError } from '../pages/swaps/swaps.util';\nimport { isEqualCaseInsensitive } from '../../shared/modules/string-utils';\nimport { getSmartTransactionsOptInStatus } from '../../shared/modules/selectors';\nimport { NOTIFICATIONS_EXPIRATION_DELAY } from '../helpers/constants/notifications';\nimport {\n  fetchLocale,\n  loadRelativeTimeFormatLocaleData,\n} from '../../shared/modules/i18n';\nimport { decimalToHex } from '../../shared/modules/conversion.utils';\nimport { TxGasFees, PriorityLevels } from '../../shared/constants/gas';\nimport {\n  isErrorWithMessage,\n  logErrorWithMessage,\n} from '../../shared/modules/error';\nimport { ThemeType } from '../../shared/constants/preferences';\nimport { FirstTimeFlowType } from '../../shared/constants/onboarding';\nimport { getMethodDataAsync } from '../../shared/lib/four-byte';\nimport { DecodedTransactionDataResponse } from '../../shared/types/transaction-decode';\nimport { LastInteractedConfirmationInfo } from '../pages/confirmations/types/confirm';\nimport { EndTraceRequest } from '../../shared/lib/trace';\nimport * as actionConstants from './actionConstants';\nimport {\n  generateActionId,\n  callBackgroundMethod,\n  submitRequestToBackground,\n} from './background-connection';\nimport {\n  MetaMaskReduxDispatch,\n  MetaMaskReduxState,\n  TemporaryMessageDataType,\n} from './store';\n\ntype CustomGasSettings = {\n  gas?: string;\n  gasPrice?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n};\n\nexport function goHome() {\n  return {\n    type: actionConstants.GO_HOME,\n  };\n}\n// async actions\n\nexport function tryUnlockMetamask(\n  password: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    dispatch(unlockInProgress());\n    log.debug(`background.submitPassword`);\n\n    return new Promise<void>((resolve, reject) => {\n      callBackgroundMethod('submitPassword', [password], (error) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve();\n      });\n    })\n      .then(() => {\n        dispatch(unlockSucceeded());\n        return forceUpdateMetamaskState(dispatch);\n      })\n      .then(() => {\n        dispatch(hideLoadingIndication());\n      })\n      .catch((err) => {\n        dispatch(unlockFailed(err.message));\n        dispatch(hideLoadingIndication());\n        return Promise.reject(err);\n      });\n  };\n}\n\n/**\n * Adds a new account where all data is encrypted using the given password and\n * where all addresses are generated from a given seed phrase.\n *\n * @param password - The password.\n * @param seedPhrase - The seed phrase.\n * @returns The updated state of the keyring controller.\n */\nexport function createNewVaultAndRestore(\n  password: string,\n  seedPhrase: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.createNewVaultAndRestore`);\n\n    // Encode the secret recovery phrase as an array of integers so that it is\n    // serialized as JSON properly.\n    const encodedSeedPhrase = Array.from(\n      Buffer.from(seedPhrase, 'utf8').values(),\n    );\n\n    return new Promise<void>((resolve, reject) => {\n      callBackgroundMethod(\n        'createNewVaultAndRestore',\n        [password, encodedSeedPhrase],\n        (err) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve();\n        },\n      );\n    })\n      .then(() => dispatch(unMarkPasswordForgotten()))\n      .then(() => {\n        dispatch(showAccountsPage());\n        dispatch(hideLoadingIndication());\n      })\n      .catch((err) => {\n        dispatch(displayWarning(err.message));\n        dispatch(hideLoadingIndication());\n        return Promise.reject(err);\n      });\n  };\n}\n\nexport function createNewVaultAndGetSeedPhrase(\n  password: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n\n    try {\n      await createNewVault(password);\n      const seedPhrase = await getSeedPhrase(password);\n      return seedPhrase;\n    } catch (error) {\n      dispatch(displayWarning(error));\n      if (isErrorWithMessage(error)) {\n        throw new Error(error.message);\n      } else {\n        throw error;\n      }\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function unlockAndGetSeedPhrase(\n  password: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n\n    try {\n      await submitPassword(password);\n      const seedPhrase = await getSeedPhrase(password);\n      await forceUpdateMetamaskState(dispatch);\n      return seedPhrase;\n    } catch (error) {\n      dispatch(displayWarning(error));\n      if (isErrorWithMessage(error)) {\n        throw new Error(error.message);\n      } else {\n        throw error;\n      }\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function submitPassword(password: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    callBackgroundMethod('submitPassword', [password], (error) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      resolve();\n    });\n  });\n}\n\nexport function createNewVault(password: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    callBackgroundMethod('createNewVaultAndKeychain', [password], (error) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      resolve(true);\n    });\n  });\n}\n\nexport function verifyPassword(password: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    callBackgroundMethod('verifyPassword', [password], (error) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      resolve(true);\n    });\n  });\n}\n\nexport async function getSeedPhrase(password: string) {\n  const encodedSeedPhrase = await submitRequestToBackground<string>(\n    'getSeedPhrase',\n    [password],\n  );\n  return Buffer.from(encodedSeedPhrase).toString('utf8');\n}\n\nexport function requestRevealSeedWords(\n  password: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.verifyPassword`);\n\n    try {\n      await verifyPassword(password);\n      const seedPhrase = await getSeedPhrase(password);\n      return seedPhrase;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function tryReverseResolveAddress(\n  address: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return () => {\n    return new Promise<void>((resolve) => {\n      callBackgroundMethod('tryReverseResolveAddress', [address], (err) => {\n        if (err) {\n          logErrorWithMessage(err);\n        }\n        resolve();\n      });\n    });\n  };\n}\n\nexport function resetAccount(): ThunkAction<\n  Promise<string>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n\n    return new Promise<string>((resolve, reject) => {\n      callBackgroundMethod<string>('resetAccount', [], (err, account) => {\n        dispatch(hideLoadingIndication());\n        if (err) {\n          if (isErrorWithMessage(err)) {\n            dispatch(displayWarning(err.message));\n          }\n          reject(err);\n          return;\n        }\n\n        log.info(`Transaction history reset for ${account}`);\n        dispatch(showAccountsPage());\n        resolve(account as string);\n      });\n    });\n  };\n}\n\nexport function removeAccount(\n  address: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n\n    try {\n      await new Promise((resolve, reject) => {\n        callBackgroundMethod('removeAccount', [address], (error, account) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve(account);\n        });\n      });\n      await forceUpdateMetamaskState(dispatch);\n    } catch (error) {\n      dispatch(displayWarning(error));\n      throw error;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n\n    log.info(`Account removed: ${address}`);\n    dispatch(showAccountsPage());\n  };\n}\n\nexport function importNewAccount(\n  strategy: string,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[],\n  loadingMessage: ReactFragment,\n): ThunkAction<\n  Promise<MetaMaskReduxState['metamask']>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication(loadingMessage));\n\n    try {\n      log.debug(`background.importAccountWithStrategy`);\n      await submitRequestToBackground('importAccountWithStrategy', [\n        strategy,\n        args,\n      ]);\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n\n    return await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function addNewAccount(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  log.debug(`background.addNewAccount`);\n  return async (dispatch, getState) => {\n    const oldAccounts = getInternalAccounts(getState()).filter(\n      (internalAccount) =>\n        internalAccount.metadata.keyring.type === KeyringTypes.hd,\n    );\n    dispatch(showLoadingIndication());\n\n    let addedAccountAddress;\n    try {\n      addedAccountAddress = await submitRequestToBackground('addNewAccount', [\n        Object.keys(oldAccounts).length,\n      ]);\n    } catch (error) {\n      dispatch(displayWarning(error));\n      throw error;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n\n    await forceUpdateMetamaskState(dispatch);\n    return addedAccountAddress;\n  };\n}\n\nexport function checkHardwareStatus(\n  deviceName: HardwareDeviceNames,\n  hdPath: string,\n): ThunkAction<Promise<boolean>, MetaMaskReduxState, unknown, AnyAction> {\n  log.debug(`background.checkHardwareStatus`, deviceName, hdPath);\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n\n    let unlocked = false;\n    try {\n      unlocked = await submitRequestToBackground<boolean>(\n        'checkHardwareStatus',\n        [deviceName, hdPath],\n      );\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning(error));\n      throw error;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n\n    await forceUpdateMetamaskState(dispatch);\n    return unlocked;\n  };\n}\n\nexport function forgetDevice(\n  deviceName: HardwareDeviceNames,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  log.debug(`background.forgetDevice`, deviceName);\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    try {\n      await submitRequestToBackground('forgetDevice', [deviceName]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning(error));\n      throw error;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\n// TODO: Define an Account Type for the return type of this method and anywhere\n// else dealing with accounts.\nexport function connectHardware(\n  deviceName: HardwareDeviceNames,\n  page: string,\n  hdPath: string,\n  t: (key: string) => string,\n): ThunkAction<\n  Promise<{ address: string }[]>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  log.debug(`background.connectHardware`, deviceName, page, hdPath);\n  return async (dispatch, getState) => {\n    const { ledgerTransportType } = getState().metamask;\n\n    dispatch(\n      showLoadingIndication(`Looking for your ${capitalize(deviceName)}...`),\n    );\n\n    let accounts: { address: string }[];\n    try {\n      if (\n        deviceName === HardwareDeviceNames.ledger &&\n        ledgerTransportType === LedgerTransportTypes.webhid\n      ) {\n        const connectedDevices = await window.navigator.hid.requestDevice({\n          // The types for web hid were provided by @types/w3c-web-hid and may\n          // not be fully formed or correct, because LEDGER_USB_VENDOR_ID is a\n          // string and this integration with Navigator.hid works before\n          // TypeScript. As a note, on the next declaration we convert the\n          // LEDGER_USB_VENDOR_ID to a number for a different API so....\n          // TODO: Get David Walsh's opinion here\n          filters: [{ vendorId: LEDGER_USB_VENDOR_ID as unknown as number }],\n        });\n        const userApprovedWebHidConnection = connectedDevices.some(\n          (device) => device.vendorId === Number(LEDGER_USB_VENDOR_ID),\n        );\n        if (!userApprovedWebHidConnection) {\n          throw new Error(t('ledgerWebHIDNotConnectedErrorMessage'));\n        }\n      }\n\n      accounts = await submitRequestToBackground<{ address: string }[]>(\n        'connectHardware',\n        [deviceName, page, hdPath],\n      );\n    } catch (error) {\n      logErrorWithMessage(error);\n      if (\n        deviceName === HardwareDeviceNames.ledger &&\n        ledgerTransportType === LedgerTransportTypes.webhid &&\n        isErrorWithMessage(error) &&\n        error.message.match('Failed to open the device')\n      ) {\n        dispatch(displayWarning(t('ledgerDeviceOpenFailureMessage')));\n        throw new Error(t('ledgerDeviceOpenFailureMessage'));\n      } else {\n        if (deviceName !== HardwareDeviceNames.qr) {\n          dispatch(displayWarning(error));\n        }\n        throw error;\n      }\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n\n    await forceUpdateMetamaskState(dispatch);\n    return accounts;\n  };\n}\n\nexport function unlockHardwareWalletAccounts(\n  indexes: string[],\n  deviceName: HardwareDeviceNames,\n  hdPath: string,\n  hdPathDescription: string,\n): ThunkAction<Promise<undefined>, MetaMaskReduxState, unknown, AnyAction> {\n  log.debug(\n    `background.unlockHardwareWalletAccount`,\n    indexes,\n    deviceName,\n    hdPath,\n    hdPathDescription,\n  );\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n\n    for (const index of indexes) {\n      try {\n        await submitRequestToBackground('unlockHardwareWalletAccount', [\n          index,\n          deviceName,\n          hdPath,\n          hdPathDescription,\n        ]);\n      } catch (err) {\n        logErrorWithMessage(err);\n        dispatch(displayWarning(err));\n        dispatch(hideLoadingIndication());\n        throw err;\n      }\n    }\n\n    dispatch(hideLoadingIndication());\n    return undefined;\n  };\n}\n\nexport function showQrScanner(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(\n      showModal({\n        name: 'QR_SCANNER',\n      }),\n    );\n  };\n}\n\nexport function setCurrentCurrency(\n  currencyCode: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setCurrentCurrency`);\n    try {\n      await submitRequestToBackground('setCurrentCurrency', [currencyCode]);\n      await forceUpdateMetamaskState(dispatch);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning(error));\n      return;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function decryptMsgInline(\n  decryptedMsgData: TemporaryMessageDataType['msgParams'],\n): ThunkAction<\n  Promise<TemporaryMessageDataType>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  log.debug('action - decryptMsgInline');\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    log.debug(`actions calling background.decryptMessageInline`);\n\n    try {\n      await submitRequestToBackground('decryptMessageInline', [\n        decryptedMsgData,\n      ]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning(error));\n      throw error;\n    }\n\n    const newState = await forceUpdateMetamaskState(dispatch);\n    return newState.unapprovedDecryptMsgs[decryptedMsgData.metamaskId];\n  };\n}\n\nexport function decryptMsg(\n  decryptedMsgData: TemporaryMessageDataType['msgParams'],\n): ThunkAction<\n  Promise<TemporaryMessageDataType['msgParams']>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  log.debug('action - decryptMsg');\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`actions calling background.decryptMessage`);\n\n    try {\n      await submitRequestToBackground('decryptMessage', [decryptedMsgData]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning(error));\n      throw error;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n\n    await forceUpdateMetamaskState(dispatch);\n    dispatch(completedTx(decryptedMsgData.metamaskId));\n    dispatch(closeCurrentNotificationWindow());\n    return decryptedMsgData;\n  };\n}\n\nexport function encryptionPublicKeyMsg(\n  msgData: TemporaryMessageDataType['msgParams'],\n): ThunkAction<\n  Promise<TemporaryMessageDataType['msgParams']>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  log.debug('action - encryptionPublicKeyMsg');\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`actions calling background.encryptionPublicKey`);\n\n    try {\n      await submitRequestToBackground<MetaMaskReduxState['metamask']>(\n        'encryptionPublicKey',\n        [msgData],\n      );\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning(error));\n      throw error;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n\n    await forceUpdateMetamaskState(dispatch);\n    dispatch(completedTx(msgData.metamaskId));\n    dispatch(closeCurrentNotificationWindow());\n    return msgData;\n  };\n}\n\nexport function updateCustomNonce(value: string) {\n  return {\n    type: actionConstants.UPDATE_CUSTOM_NONCE,\n    value,\n  };\n}\n\n/**\n * TODO: update previousGasParams to use typed gas params object\n * TODO: Not a thunk, but rather a wrapper around a background call\n *\n * @param txId - MetaMask internal transaction id\n * @param previousGasParams - Object of gas params to set as previous\n */\nexport function updatePreviousGasParams(\n  txId: string,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  previousGasParams: Record<string, any>,\n): ThunkAction<\n  Promise<TransactionMeta>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async () => {\n    let updatedTransaction: TransactionMeta;\n    try {\n      updatedTransaction = await submitRequestToBackground(\n        'updatePreviousGasParams',\n        [txId, previousGasParams],\n      );\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n\n    return updatedTransaction;\n  };\n}\n\nexport function updateEditableParams(\n  txId: string,\n  editableParams: Partial<TransactionParams>,\n): ThunkAction<\n  Promise<TransactionMeta>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    let updatedTransaction: TransactionMeta;\n    try {\n      updatedTransaction = await submitRequestToBackground(\n        'updateEditableParams',\n        [txId, editableParams],\n      );\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n    await forceUpdateMetamaskState(dispatch);\n    return updatedTransaction;\n  };\n}\n\n/**\n * Appends new send flow history to a transaction\n * TODO: Not a thunk, but rather a wrapper around a background call\n *\n * @param txId - the id of the transaction to update\n * @param currentSendFlowHistoryLength - sendFlowHistory entries currently\n * @param sendFlowHistory - the new send flow history to append to the\n * transaction\n * @returns\n */\nexport function updateTransactionSendFlowHistory(\n  txId: string,\n  currentSendFlowHistoryLength: number,\n  sendFlowHistory: DraftTransaction['history'],\n): ThunkAction<\n  Promise<TransactionMeta>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async () => {\n    let updatedTransaction: TransactionMeta;\n    try {\n      updatedTransaction = await submitRequestToBackground(\n        'updateTransactionSendFlowHistory',\n        [txId, currentSendFlowHistoryLength, sendFlowHistory],\n      );\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n\n    return updatedTransaction;\n  };\n}\n\nexport async function backupUserData(): Promise<{\n  filename: string;\n  data: string;\n}> {\n  let backedupData;\n  try {\n    backedupData = await submitRequestToBackground<{\n      filename: string;\n      data: string;\n    }>('backupUserData');\n  } catch (error) {\n    logErrorWithMessage(error);\n    throw error;\n  }\n\n  return backedupData;\n}\n\nexport async function restoreUserData(jsonString: Json): Promise<true> {\n  try {\n    await submitRequestToBackground('restoreUserData', [jsonString]);\n  } catch (error) {\n    logErrorWithMessage(error);\n    throw error;\n  }\n\n  return true;\n}\n\n// TODO: Not a thunk, but rather a wrapper around a background call\nexport function updateTransactionGasFees(\n  txId: string,\n  txGasFees: Partial<TxGasFees>,\n): ThunkAction<\n  Promise<TransactionMeta>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async () => {\n    let updatedTransaction: TransactionMeta;\n    try {\n      updatedTransaction = await submitRequestToBackground(\n        'updateTransactionGasFees',\n        [txId, txGasFees],\n      );\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n\n    return updatedTransaction;\n  };\n}\n\nexport function updateTransaction(\n  txMeta: TransactionMeta,\n  dontShowLoadingIndicator: boolean,\n): ThunkAction<\n  Promise<TransactionMeta>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    !dontShowLoadingIndicator && dispatch(showLoadingIndication());\n\n    try {\n      await submitRequestToBackground('updateTransaction', [txMeta]);\n    } catch (error) {\n      dispatch(updateTransactionParams(txMeta.id, txMeta.txParams));\n      dispatch(hideLoadingIndication());\n      dispatch(goHome());\n      logErrorWithMessage(error);\n      throw error;\n    }\n\n    try {\n      dispatch(updateTransactionParams(txMeta.id, txMeta.txParams));\n      await forceUpdateMetamaskState(dispatch);\n      dispatch(showConfTxPage({ id: txMeta.id }));\n      return txMeta;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\n/**\n * Action to create a new transaction in the controller and route to the\n * confirmation page. Returns the newly created txMeta in case additional logic\n * should be applied to the transaction after creation.\n *\n * @param txParams - The transaction parameters\n * @param options\n * @param options.sendFlowHistory - The history of the send flow at time of creation.\n * @param options.type - The type of the transaction being added.\n * @returns\n */\nexport function addTransactionAndRouteToConfirmationPage(\n  txParams: TransactionParams,\n  options?: {\n    sendFlowHistory?: DraftTransaction['history'];\n    type?: TransactionType;\n  },\n): ThunkAction<\n  Promise<TransactionMeta | null>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    const actionId = generateActionId();\n\n    try {\n      log.debug('background.addTransaction');\n\n      const transactionMeta = await submitRequestToBackground<TransactionMeta>(\n        'addTransaction',\n        [txParams, { ...options, actionId, origin: ORIGIN_METAMASK }],\n      );\n\n      dispatch(showConfTxPage());\n      return transactionMeta;\n    } catch (error) {\n      dispatch(hideLoadingIndication());\n      dispatch(displayWarning(error));\n      throw error;\n    }\n  };\n}\n\n/**\n * Wrapper around the promisifedBackground to create a new unapproved\n * transaction in the background and return the newly created txMeta.\n * This method does not show errors or route to a confirmation page and is\n * used primarily for swaps functionality.\n *\n * @param txParams - the transaction parameters\n * @param options - Additional options for the transaction.\n * @param options.method\n * @param options.requireApproval - Whether the transaction requires approval.\n * @param options.swaps - Options specific to swaps transactions.\n * @param options.swaps.hasApproveTx - Whether the swap required an approval transaction.\n * @param options.swaps.meta - Additional transaction metadata required by swaps.\n * @param options.type\n * @returns\n */\nexport async function addTransactionAndWaitForPublish(\n  txParams: TransactionParams,\n  options: {\n    method?: string;\n    requireApproval?: boolean;\n    swaps?: { hasApproveTx?: boolean; meta?: Record<string, unknown> };\n    type?: TransactionType;\n  },\n): Promise<TransactionMeta> {\n  log.debug('background.addTransactionAndWaitForPublish');\n\n  const actionId = generateActionId();\n\n  return await submitRequestToBackground<TransactionMeta>(\n    'addTransactionAndWaitForPublish',\n    [\n      txParams,\n      {\n        ...options,\n        origin: ORIGIN_METAMASK,\n        actionId,\n      },\n    ],\n  );\n}\n\nexport function updateAndApproveTx(\n  txMeta: TransactionMeta,\n  dontShowLoadingIndicator: boolean,\n  loadingIndicatorMessage: string,\n): ThunkAction<\n  Promise<TransactionMeta | null>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (dispatch: MetaMaskReduxDispatch, getState) => {\n    !dontShowLoadingIndicator &&\n      dispatch(showLoadingIndication(loadingIndicatorMessage));\n\n    const getIsSendActive = () =>\n      Boolean(getState().send.stage !== SEND_STAGES.INACTIVE);\n\n    return new Promise((resolve, reject) => {\n      const actionId = generateActionId();\n\n      callBackgroundMethod(\n        'resolvePendingApproval',\n        [String(txMeta.id), { txMeta, actionId }, { waitForResult: true }],\n        (err) => {\n          dispatch(updateTransactionParams(txMeta.id, txMeta.txParams));\n\n          if (!getIsSendActive()) {\n            dispatch(resetSendState());\n          }\n\n          if (err) {\n            dispatch(goHome());\n            logErrorWithMessage(err);\n            reject(err);\n            return;\n          }\n\n          resolve(txMeta);\n        },\n      );\n    })\n      .then(() => forceUpdateMetamaskState(dispatch))\n      .then(() => {\n        if (!getIsSendActive()) {\n          dispatch(resetSendState());\n        }\n        dispatch(completedTx(txMeta.id));\n        dispatch(hideLoadingIndication());\n        dispatch(updateCustomNonce(''));\n        ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n        dispatch(closeCurrentNotificationWindow());\n        ///: END:ONLY_INCLUDE_IF\n        return txMeta;\n      })\n      .catch((err) => {\n        dispatch(hideLoadingIndication());\n        return Promise.reject(err);\n      });\n  };\n}\n\nexport async function getTransactions(\n  filters: {\n    filterToCurrentNetwork?: boolean;\n    searchCriteria?: Partial<TransactionMeta> & Partial<TransactionParams>;\n  } = {},\n): Promise<TransactionMeta[]> {\n  return await submitRequestToBackground<TransactionMeta[]>('getTransactions', [\n    filters,\n  ]);\n}\n\nexport function completedTx(\n  txId: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch({\n      type: actionConstants.COMPLETED_TX,\n      value: {\n        id: txId,\n      },\n    });\n  };\n}\n\nexport function updateTransactionParams(\n  txId: string,\n  txParams: TransactionParams,\n) {\n  return {\n    type: actionConstants.UPDATE_TRANSACTION_PARAMS,\n    id: txId,\n    value: txParams,\n  };\n}\n\nexport function disableSnap(\n  snapId: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('disableSnap', [snapId]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function enableSnap(\n  snapId: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('enableSnap', [snapId]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function updateSnap(\n  origin: string,\n  snap: { [snapId: string]: { version: string } },\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch, getState) => {\n    await submitRequestToBackground('updateSnap', [origin, snap]);\n    await forceUpdateMetamaskState(dispatch);\n\n    const state = getState();\n\n    const approval = getFirstSnapInstallOrUpdateRequest(state);\n\n    return approval?.metadata.id;\n  };\n}\n\nexport async function getPhishingResult(website: string) {\n  return await submitRequestToBackground('getPhishingResult', [website]);\n}\n\n// TODO: Clean this up.\nexport function removeSnap(\n  snapId: string,\n): ThunkAction<Promise<void>, MetaMaskReduxState, unknown, AnyAction> {\n  return async (\n    dispatch: MetaMaskReduxDispatch,\n    ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n    getState,\n    ///: END:ONLY_INCLUDE_IF\n  ) => {\n    dispatch(showLoadingIndication());\n    ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n    const subjects = getPermissionSubjects(getState()) as {\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [k: string]: { permissions: Record<string, any> };\n    };\n\n    const isAccountsSnap =\n      subjects[snapId]?.permissions?.snap_manageAccounts !== undefined;\n    ///: END:ONLY_INCLUDE_IF\n\n    try {\n      ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n      if (isAccountsSnap) {\n        const addresses: string[] = await submitRequestToBackground(\n          'getAccountsBySnapId',\n          [snapId],\n        );\n        for (const address of addresses) {\n          await submitRequestToBackground('removeAccount', [address]);\n        }\n      }\n      ///: END:ONLY_INCLUDE_IF\n\n      await submitRequestToBackground('removeSnap', [snapId]);\n      await forceUpdateMetamaskState(dispatch);\n    } catch (error) {\n      dispatch(displayWarning(error));\n      throw error;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport async function handleSnapRequest<\n  Params extends JsonRpcParams = JsonRpcParams,\n>(args: {\n  snapId: string;\n  origin: string;\n  handler: string;\n  request: JsonRpcRequest<Params>;\n}): Promise<unknown> {\n  return submitRequestToBackground('handleSnapRequest', [args]);\n}\n\nexport function dismissNotifications(\n  ids: string[],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('dismissNotifications', [ids]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function deleteExpiredNotifications(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch, getState) => {\n    const state = getState();\n    const notifications = getNotifications(state);\n\n    const notificationIdsToDelete = notifications\n      .filter((notification) => {\n        const expirationTime = new Date(\n          Date.now() - NOTIFICATIONS_EXPIRATION_DELAY,\n        );\n\n        return Boolean(\n          notification.readDate &&\n            new Date(notification.readDate) < expirationTime,\n        );\n      })\n      .map(({ id }) => id);\n    if (notificationIdsToDelete.length) {\n      await submitRequestToBackground('dismissNotifications', [\n        notificationIdsToDelete,\n      ]);\n      await forceUpdateMetamaskState(dispatch);\n    }\n  };\n}\n\nexport function markNotificationsAsRead(\n  ids: string[],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('markNotificationsAsRead', [ids]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function revokeDynamicSnapPermissions(\n  snapId: string,\n  permissionNames: string[],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('revokeDynamicSnapPermissions', [\n      snapId,\n      permissionNames,\n    ]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\n/**\n * Disconnects a given origin from a snap.\n *\n * This revokes the permission granted to the origin\n * that provides the capability to communicate with a snap.\n *\n * @param origin - The origin.\n * @param snapId - The snap ID.\n */\nexport function disconnectOriginFromSnap(\n  origin: string,\n  snapId: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('disconnectOriginFromSnap', [\n      origin,\n      snapId,\n    ]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function cancelDecryptMsg(\n  msgData: TemporaryMessageDataType,\n): ThunkAction<\n  Promise<TemporaryMessageDataType>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n\n    try {\n      await submitRequestToBackground<MetaMaskReduxState['metamask']>(\n        'cancelDecryptMessage',\n        [msgData.id],\n      );\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n\n    await forceUpdateMetamaskState(dispatch);\n    dispatch(completedTx(msgData.id));\n    dispatch(closeCurrentNotificationWindow());\n    return msgData;\n  };\n}\n\nexport function cancelEncryptionPublicKeyMsg(\n  msgData: TemporaryMessageDataType,\n): ThunkAction<\n  Promise<TemporaryMessageDataType>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n\n    try {\n      await submitRequestToBackground<MetaMaskReduxState['metamask']>(\n        'cancelEncryptionPublicKey',\n        [msgData.id],\n      );\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n\n    await forceUpdateMetamaskState(dispatch);\n    dispatch(completedTx(msgData.id));\n    dispatch(closeCurrentNotificationWindow());\n    return msgData;\n  };\n}\n\nexport function cancelTx(\n  txMeta: TransactionMeta,\n  _showLoadingIndication = true,\n): ThunkAction<\n  Promise<TransactionMeta>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    _showLoadingIndication && dispatch(showLoadingIndication());\n    return new Promise<void>((resolve, reject) => {\n      callBackgroundMethod(\n        'rejectPendingApproval',\n        [\n          String(txMeta.id),\n          ethErrors.provider.userRejectedRequest().serialize(),\n        ],\n        (error) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n\n          resolve();\n        },\n      );\n    })\n      .then(() => forceUpdateMetamaskState(dispatch))\n      .then(() => {\n        dispatch(resetSendState());\n        dispatch(completedTx(txMeta.id));\n        dispatch(hideLoadingIndication());\n        dispatch(closeCurrentNotificationWindow());\n\n        return txMeta;\n      })\n      .catch((error) => {\n        dispatch(hideLoadingIndication());\n        throw error;\n      });\n  };\n}\n\n/**\n * Cancels all of the given transactions\n *\n * @param txMetaList\n * @returns\n */\nexport function cancelTxs(\n  txMetaList: TransactionMeta[],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n\n    try {\n      const txIds = txMetaList.map(({ id }) => id);\n      const cancellations = txIds.map(\n        (id) =>\n          new Promise<void>((resolve, reject) => {\n            callBackgroundMethod(\n              'rejectPendingApproval',\n              [\n                String(id),\n                ethErrors.provider.userRejectedRequest().serialize(),\n              ],\n              (err) => {\n                if (err) {\n                  reject(err);\n                  return;\n                }\n\n                resolve();\n              },\n            );\n          }),\n      );\n\n      await Promise.all(cancellations);\n\n      await forceUpdateMetamaskState(dispatch);\n      dispatch(resetSendState());\n\n      txIds.forEach((id) => {\n        dispatch(completedTx(id));\n      });\n    } finally {\n      if (getEnvironmentType() === ENVIRONMENT_TYPE_NOTIFICATION) {\n        closeNotificationPopup();\n      } else {\n        dispatch(hideLoadingIndication());\n      }\n    }\n  };\n}\n\nexport function markPasswordForgotten(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    try {\n      await new Promise<void>((resolve, reject) => {\n        callBackgroundMethod('markPasswordForgotten', [], (error) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve();\n        });\n      });\n    } finally {\n      // TODO: handle errors\n      dispatch(hideLoadingIndication());\n      await forceUpdateMetamaskState(dispatch);\n    }\n  };\n}\n\nexport function unMarkPasswordForgotten(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    return new Promise<void>((resolve) => {\n      callBackgroundMethod('unMarkPasswordForgotten', [], () => {\n        resolve();\n      });\n    }).then(() => forceUpdateMetamaskState(dispatch));\n  };\n}\n\nexport function closeWelcomeScreen() {\n  return {\n    type: actionConstants.CLOSE_WELCOME_SCREEN,\n  };\n}\n\n//\n// unlock screen\n//\n\nexport function unlockInProgress() {\n  return {\n    type: actionConstants.UNLOCK_IN_PROGRESS,\n  };\n}\n\nexport function unlockFailed(message?: string) {\n  return {\n    type: actionConstants.UNLOCK_FAILED,\n    value: message,\n  };\n}\n\nexport function unlockSucceeded(message?: string) {\n  return {\n    type: actionConstants.UNLOCK_SUCCEEDED,\n    value: message,\n  };\n}\n\nexport function updateMetamaskState(\n  patches: Patch[],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch, getState) => {\n    const state = getState();\n    const providerConfig = getProviderConfig(state);\n    const { metamask: currentState } = state;\n\n    if (!patches?.length) {\n      return currentState;\n    }\n\n    const newState = applyPatches(currentState, patches);\n    const { currentLocale } = currentState;\n    const currentInternalAccount = getSelectedInternalAccount(state);\n    const selectedAddress = currentInternalAccount?.address;\n    const { currentLocale: newLocale } = newState;\n    const newProviderConfig = getProviderConfig({ metamask: newState });\n    const newInternalAccount = getSelectedInternalAccount({\n      metamask: newState,\n    });\n    const newSelectedAddress = newInternalAccount?.address;\n\n    if (currentLocale && newLocale && currentLocale !== newLocale) {\n      dispatch(updateCurrentLocale(newLocale));\n    }\n\n    if (selectedAddress !== newSelectedAddress) {\n      dispatch({ type: actionConstants.SELECTED_ADDRESS_CHANGED });\n    }\n\n    const newAddressBook =\n      newState.addressBook?.[newProviderConfig?.chainId] ?? {};\n    const oldAddressBook =\n      currentState.addressBook?.[providerConfig?.chainId] ?? {};\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const newAccounts: { [address: string]: Record<string, any> } =\n      getMetaMaskAccounts({ metamask: newState });\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const oldAccounts: { [address: string]: Record<string, any> } =\n      getMetaMaskAccounts({ metamask: currentState });\n    const newSelectedAccount = newAccounts[newSelectedAddress];\n    const oldSelectedAccount = newAccounts[selectedAddress];\n    // dispatch an ACCOUNT_CHANGED for any account whose balance or other\n    // properties changed in this update\n    Object.entries(oldAccounts).forEach(([address, oldAccount]) => {\n      if (!isEqual(oldAccount, newAccounts[address])) {\n        dispatch({\n          type: actionConstants.ACCOUNT_CHANGED,\n          payload: { account: newAccounts[address] },\n        });\n      }\n    });\n\n    // Also emit an event for the selected account changing, either due to a\n    // property update or if the entire account changes.\n    if (isEqual(oldSelectedAccount, newSelectedAccount) === false) {\n      dispatch({\n        type: actionConstants.SELECTED_ACCOUNT_CHANGED,\n        payload: { account: newSelectedAccount },\n      });\n    }\n    // We need to keep track of changing address book entries\n    if (isEqual(oldAddressBook, newAddressBook) === false) {\n      dispatch({\n        type: actionConstants.ADDRESS_BOOK_UPDATED,\n        payload: { addressBook: newAddressBook },\n      });\n    }\n\n    // track when gasFeeEstimates change\n    if (\n      isEqual(currentState.gasFeeEstimates, newState.gasFeeEstimates) === false\n    ) {\n      dispatch({\n        type: actionConstants.GAS_FEE_ESTIMATES_UPDATED,\n        payload: {\n          gasFeeEstimates: newState.gasFeeEstimates,\n          gasEstimateType: newState.gasEstimateType,\n        },\n      });\n    }\n    dispatch({\n      type: actionConstants.UPDATE_METAMASK_STATE,\n      value: newState,\n    });\n    if (providerConfig.chainId !== newProviderConfig.chainId) {\n      dispatch({\n        type: actionConstants.CHAIN_CHANGED,\n        payload: newProviderConfig.chainId,\n      });\n      // We dispatch this action to ensure that the send state stays up to date\n      // after the chain changes. This async thunk will fail gracefully in the\n      // event that we are not yet on the send flow with a draftTransaction in\n      // progress.\n\n      dispatch(initializeSendState({ chainHasChanged: true }));\n    }\n\n\n    return newState;\n  };\n}\n\nconst backgroundSetLocked = (): Promise<void> => {\n  return new Promise<void>((resolve, reject) => {\n    callBackgroundMethod('setLocked', [], (error) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n      resolve();\n    });\n  });\n};\n\nexport function lockMetamask(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  log.debug(`background.setLocked`);\n\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n\n    return backgroundSetLocked()\n      .then(() => forceUpdateMetamaskState(dispatch))\n      .catch((error) => {\n        dispatch(displayWarning(error.message));\n        return Promise.reject(error);\n      })\n      .then(() => {\n        dispatch(hideLoadingIndication());\n        dispatch({ type: actionConstants.LOCK_METAMASK });\n      })\n      .catch(() => {\n        dispatch(hideLoadingIndication());\n        dispatch({ type: actionConstants.LOCK_METAMASK });\n      });\n  };\n}\n\nasync function _setSelectedInternalAccount(accountId: string): Promise<void> {\n  log.debug(`background.setSelectedInternalAccount`);\n  await submitRequestToBackground('setSelectedInternalAccount', [accountId]);\n}\n\n/**\n * Sets the selected internal account.\n *\n * @param accountId - The ID of the account to set as selected.\n * @returns A thunk action that dispatches loading and warning indications.\n */\nexport function setSelectedInternalAccount(\n  accountId: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setSelectedInternalAccount`);\n    try {\n      await _setSelectedInternalAccount(accountId);\n    } catch (error) {\n      dispatch(displayWarning(error));\n      return;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function setSelectedAccount(\n  address: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch, getState) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setSelectedAccount`);\n\n    const state = getState();\n    const unconnectedAccountAccountAlertIsEnabled =\n      getUnconnectedAccountAlertEnabledness(state);\n    const activeTabOrigin = state.activeTab.origin;\n    const internalAccount = getInternalAccountByAddress(state, address);\n    const permittedAccountsForCurrentTab =\n      getPermittedAccountsForCurrentTab(state);\n    const currentTabIsConnectedToPreviousAddress =\n      Boolean(activeTabOrigin) &&\n      permittedAccountsForCurrentTab.includes(internalAccount.address);\n    const currentTabIsConnectedToNextAddress =\n      Boolean(activeTabOrigin) &&\n      permittedAccountsForCurrentTab.includes(address);\n    const switchingToUnconnectedAddress =\n      currentTabIsConnectedToPreviousAddress &&\n      !currentTabIsConnectedToNextAddress;\n\n    try {\n      await _setSelectedInternalAccount(internalAccount.id);\n      await forceUpdateMetamaskState(dispatch);\n    } catch (error) {\n      dispatch(displayWarning(error));\n      return;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n\n    if (\n      unconnectedAccountAccountAlertIsEnabled &&\n      switchingToUnconnectedAddress\n    ) {\n      dispatch(switchedToUnconnectedAccount());\n      await setUnconnectedAccountAlertShown(activeTabOrigin);\n    }\n  };\n}\n\nexport function addPermittedAccount(\n  origin: string,\n  address: [],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await new Promise<void>((resolve, reject) => {\n      callBackgroundMethod(\n        'addPermittedAccount',\n        [origin, address],\n        (error) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve();\n        },\n      );\n    });\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\nexport function addMorePermittedAccounts(\n  origin: string,\n  address: string[],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await new Promise<void>((resolve, reject) => {\n      callBackgroundMethod(\n        'addMorePermittedAccounts',\n        [origin, address],\n        (error) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve();\n        },\n      );\n    });\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function removePermittedAccount(\n  origin: string,\n  address: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await new Promise<void>((resolve, reject) => {\n      callBackgroundMethod(\n        'removePermittedAccount',\n        [origin, address],\n        (error) => {\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve();\n        },\n      );\n    });\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function showAccountsPage() {\n  return {\n    type: actionConstants.SHOW_ACCOUNTS_PAGE,\n  };\n}\n\nexport function showConfTxPage({ id }: Partial<TransactionMeta> = {}) {\n  return {\n    type: actionConstants.SHOW_CONF_TX_PAGE,\n    id,\n  };\n}\n\nexport function addToken(\n  {\n    address,\n    symbol,\n    decimals,\n    image,\n    networkClientId,\n  }: {\n    address?: string;\n    symbol?: string;\n    decimals?: number;\n    image?: string;\n    networkClientId?: NetworkClientId;\n  },\n  dontShowLoadingIndicator?: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    if (!address) {\n      throw new Error('MetaMask - Cannot add token without address');\n    }\n    if (!dontShowLoadingIndicator) {\n      dispatch(showLoadingIndication());\n    }\n    try {\n      await submitRequestToBackground('addToken', [\n        {\n          address,\n          symbol,\n          decimals,\n          image,\n          networkClientId,\n        },\n      ]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning(error));\n    } finally {\n      await forceUpdateMetamaskState(dispatch);\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\n/**\n * To add the tokens user selected to state\n *\n * @param tokensToImport\n * @param networkClientId\n */\nexport function addImportedTokens(\n  tokensToImport: Token[],\n  networkClientId?: NetworkClientId,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    try {\n      await submitRequestToBackground('addImportedTokens', [\n        tokensToImport,\n        networkClientId,\n      ]);\n    } catch (error) {\n      logErrorWithMessage(error);\n    } finally {\n      await forceUpdateMetamaskState(dispatch);\n    }\n  };\n}\n\n/**\n * To add ignored token addresses to state\n *\n * @param options\n * @param options.tokensToIgnore\n * @param options.dontShowLoadingIndicator\n */\nexport function ignoreTokens({\n  tokensToIgnore,\n  dontShowLoadingIndicator = false,\n}: {\n  tokensToIgnore: string[];\n  dontShowLoadingIndicator: boolean;\n}): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  const _tokensToIgnore = Array.isArray(tokensToIgnore)\n    ? tokensToIgnore\n    : [tokensToIgnore];\n\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    if (!dontShowLoadingIndicator) {\n      dispatch(showLoadingIndication());\n    }\n    try {\n      await submitRequestToBackground('ignoreTokens', [_tokensToIgnore]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning(error));\n    } finally {\n      await forceUpdateMetamaskState(dispatch);\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\n/**\n * To fetch the ERC20 tokens with non-zero balance in a single call\n *\n * @param selectedAddress - the targeted account\n * @param tokensToDetect - the targeted list of tokens\n * @param networkClientId - unique identifier for the network client\n */\nexport async function getBalancesInSingleCall(\n  selectedAddress: string,\n  tokensToDetect: string[],\n  networkClientId: string,\n): Promise<BalanceMap> {\n  return await submitRequestToBackground('getBalancesInSingleCall', [\n    selectedAddress,\n    tokensToDetect,\n    networkClientId,\n  ]);\n}\n\nexport function addNft(\n  address: string,\n  tokenID: string,\n  dontShowLoadingIndicator: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    if (!address) {\n      throw new Error('MetaMask - Cannot add NFT without address');\n    }\n    if (!tokenID) {\n      throw new Error('MetaMask - Cannot add NFT without tokenID');\n    }\n    if (!dontShowLoadingIndicator) {\n      dispatch(showLoadingIndication());\n    }\n    try {\n      await submitRequestToBackground('addNft', [address, tokenID]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning(error));\n    } finally {\n      await forceUpdateMetamaskState(dispatch);\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function addNftVerifyOwnership(\n  address: string,\n  tokenID: string,\n  dontShowLoadingIndicator: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    if (!address) {\n      throw new Error('MetaMask - Cannot add NFT without address');\n    }\n    if (!tokenID) {\n      throw new Error('MetaMask - Cannot add NFT without tokenID');\n    }\n    if (!dontShowLoadingIndicator) {\n      dispatch(showLoadingIndication());\n    }\n    try {\n      await submitRequestToBackground('addNftVerifyOwnership', [\n        address,\n        tokenID,\n      ]);\n    } catch (error) {\n      if (\n        isErrorWithMessage(error) &&\n        (error.message.includes('This NFT is not owned by the user') ||\n          error.message.includes('Unable to verify ownership'))\n      ) {\n        throw error;\n      } else {\n        logErrorWithMessage(error);\n        dispatch(displayWarning(error));\n      }\n    } finally {\n      await forceUpdateMetamaskState(dispatch);\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function removeAndIgnoreNft(\n  address: string,\n  tokenID: string,\n  shouldShowLoadingIndicator?: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    if (!address) {\n      throw new Error('MetaMask - Cannot ignore NFT without address');\n    }\n    if (!tokenID) {\n      throw new Error('MetaMask - Cannot ignore NFT without tokenID');\n    }\n    if (!shouldShowLoadingIndicator) {\n      dispatch(showLoadingIndication());\n    }\n    try {\n      await submitRequestToBackground('removeAndIgnoreNft', [address, tokenID]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning(error));\n      throw error;\n    } finally {\n      await forceUpdateMetamaskState(dispatch);\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function removeNft(\n  address: string,\n  tokenID: string,\n  dontShowLoadingIndicator: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    if (!address) {\n      throw new Error('MetaMask - Cannot remove NFT without address');\n    }\n    if (!tokenID) {\n      throw new Error('MetaMask - Cannot remove NFT without tokenID');\n    }\n    if (!dontShowLoadingIndicator) {\n      dispatch(showLoadingIndication());\n    }\n    try {\n      await submitRequestToBackground('removeNft', [address, tokenID]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning(error));\n    } finally {\n      await forceUpdateMetamaskState(dispatch);\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport async function checkAndUpdateAllNftsOwnershipStatus() {\n  await submitRequestToBackground('checkAndUpdateAllNftsOwnershipStatus');\n}\n\nexport async function isNftOwner(\n  ownerAddress: string,\n  nftAddress: string,\n  nftId: string,\n): Promise<boolean> {\n  return await submitRequestToBackground('isNftOwner', [\n    ownerAddress,\n    nftAddress,\n    nftId,\n  ]);\n}\n\nexport async function checkAndUpdateSingleNftOwnershipStatus(nft: Nft) {\n  await submitRequestToBackground('checkAndUpdateSingleNftOwnershipStatus', [\n    nft,\n    false,\n  ]);\n}\n// When we upgrade to TypeScript 4.5 this is part of the language. It will get\n// the underlying type of a Promise generic type. So Awaited<Promise<void>> is\n// void.\ntype Awaited<T> = T extends PromiseLike<infer U> ? U : T;\n\nexport async function getTokenStandardAndDetails(\n  address: string,\n  userAddress?: string,\n  tokenId?: string,\n): Promise<\n  Awaited<\n    ReturnType<AssetsContractController['getTokenStandardAndDetails']>\n  > & { balance?: string }\n> {\n  return await submitRequestToBackground('getTokenStandardAndDetails', [\n    address,\n    userAddress,\n    tokenId,\n  ]);\n}\n\nexport async function getTokenSymbol(address: string): Promise<string | null> {\n  return await submitRequestToBackground('getTokenSymbol', [address]);\n}\n\nexport function clearPendingTokens(): Action {\n  return {\n    type: actionConstants.CLEAR_PENDING_TOKENS,\n  };\n}\n\n/**\n * Action to switch globally selected network and set switched network details\n * for the purpose of displaying the user a toast about the network change\n *\n * @param networkClientIdForThisDomain - Thet network client ID last used by the origin\n * @param selectedTabOrigin - Origin of the current tab\n */\nexport function automaticallySwitchNetwork(\n  networkClientIdForThisDomain: string,\n  selectedTabOrigin: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await setActiveNetworkConfigurationId(networkClientIdForThisDomain);\n    await dispatch(\n      setSwitchedNetworkDetails({\n        networkClientId: networkClientIdForThisDomain,\n        origin: selectedTabOrigin,\n      }),\n    );\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\n/**\n * Action to store details about the switched-to network in the background state\n *\n * @param switchedNetworkDetails - Object containing networkClientId and origin\n * @param switchedNetworkDetails.networkClientId\n * @param switchedNetworkDetails.selectedTabOrigin\n */\nexport function setSwitchedNetworkDetails(switchedNetworkDetails: {\n  networkClientId: string;\n  selectedTabOrigin: string;\n}): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setSwitchedNetworkDetails', [\n      switchedNetworkDetails,\n    ]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\n/**\n * Action to clear details about the switched-to network in the background state\n */\nexport function clearSwitchedNetworkDetails(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('clearSwitchedNetworkDetails', []);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\n/**\n * Update the currentPopupid generated when the user opened the popup\n *\n * @param id - The Snap interface ID.\n * @returns Promise Resolved on successfully submitted background request.\n */\nexport function setCurrentExtensionPopupId(\n  id: number,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground<void>('setCurrentExtensionPopupId', [id]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function abortTransactionSigning(\n  transactionId: string,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): ThunkAction<Promise<void>, MetaMaskReduxState, any, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    try {\n      await submitRequestToBackground('abortTransactionSigning', [\n        transactionId,\n      ]);\n    } catch (error) {\n      dispatch(displayWarning(error));\n    }\n  };\n}\n\nexport function getLayer1GasFee({\n  chainId,\n  networkClientId,\n  transactionParams,\n}: {\n  chainId?: Hex;\n  networkClientId?: NetworkClientId;\n  transactionParams: TransactionParams;\n}): // TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nThunkAction<Promise<void>, MetaMaskReduxState, any, AnyAction> {\n  return async () =>\n    await submitRequestToBackground('getLayer1GasFee', [\n      { chainId, networkClientId, transactionParams },\n    ]);\n}\n\nexport function createCancelTransaction(\n  txId: string,\n  customGasSettings: CustomGasSettings,\n  options: { estimatedBaseFee?: string } = {},\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  log.debug('background.createCancelTransaction');\n  let newTxId: string;\n\n  return (dispatch: MetaMaskReduxDispatch) => {\n    const actionId = generateActionId();\n    return new Promise<MetaMaskReduxState['metamask']>((resolve, reject) => {\n      callBackgroundMethod<MetaMaskReduxState['metamask']>(\n        'createCancelTransaction',\n        [txId, customGasSettings, { ...options, actionId }],\n        (err, newState) => {\n          if (err) {\n            if (\n              err?.message?.includes(\n                'Previous transaction is already confirmed',\n              )\n            ) {\n              dispatch(\n                showModal({\n                  name: 'TRANSACTION_ALREADY_CONFIRMED',\n                  originalTransactionId: txId,\n                }),\n              );\n            }\n            dispatch(displayWarning(err));\n            reject(err);\n            return;\n          }\n          if (newState) {\n            const currentNetworkTxList = getCurrentNetworkTransactions({\n              metamask: newState,\n            });\n            const { id } =\n              currentNetworkTxList[currentNetworkTxList.length - 1];\n            newTxId = id;\n            resolve();\n          }\n        },\n      );\n    })\n      .then(() => forceUpdateMetamaskState(dispatch))\n      .then(() => newTxId);\n  };\n}\n\nexport function createSpeedUpTransaction(\n  txId: string,\n  customGasSettings: CustomGasSettings,\n  options: { estimatedBaseFee?: string } = {},\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  log.debug('background.createSpeedUpTransaction');\n  let newTx: TransactionMeta;\n\n  return (dispatch: MetaMaskReduxDispatch) => {\n    const actionId = generateActionId();\n    return new Promise<MetaMaskReduxState['metamask']>((resolve, reject) => {\n      callBackgroundMethod<MetaMaskReduxState['metamask']>(\n        'createSpeedUpTransaction',\n        [txId, customGasSettings, { ...options, actionId }],\n        (err, newState) => {\n          if (err) {\n            dispatch(displayWarning(err));\n            reject(err);\n            return;\n          }\n\n          if (newState) {\n            const currentNetworkTxList =\n              getCurrentNetworkTransactions(newState);\n            newTx = currentNetworkTxList[currentNetworkTxList.length - 1];\n            resolve();\n          }\n        },\n      );\n    })\n      .then(() => forceUpdateMetamaskState(dispatch))\n      .then(() => newTx);\n  };\n}\n\nexport function createRetryTransaction(\n  txId: string,\n  customGasSettings: CustomGasSettings,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  let newTx: TransactionMeta;\n\n  return (dispatch: MetaMaskReduxDispatch) => {\n    return new Promise<MetaMaskReduxState['metamask']>((resolve, reject) => {\n      const actionId = generateActionId();\n      callBackgroundMethod<MetaMaskReduxState['metamask']>(\n        'createSpeedUpTransaction',\n        [txId, customGasSettings, { actionId }],\n        (err, newState) => {\n          if (err) {\n            dispatch(displayWarning(err));\n            reject(err);\n            return;\n          }\n          if (newState) {\n            const currentNetworkTxList =\n              getCurrentNetworkTransactions(newState);\n            newTx = currentNetworkTxList[currentNetworkTxList.length - 1];\n            resolve();\n          }\n        },\n      );\n    })\n      .then(() => forceUpdateMetamaskState(dispatch))\n      .then(() => newTx);\n  };\n}\n\nexport function addNetwork(\n  networkConfiguration: AddNetworkFields | UpdateNetworkFields,\n): ThunkAction<Promise<void>, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    log.debug(`background.addNetwork`, networkConfiguration);\n    try {\n      return await submitRequestToBackground('addNetwork', [\n        networkConfiguration,\n      ]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning('Had a problem adding networks!'));\n    }\n    return undefined;\n  };\n}\n\nexport function updateNetwork(\n  networkConfiguration: AddNetworkFields | UpdateNetworkFields,\n  options: { replacementSelectedRpcEndpointIndex?: number } = {},\n): ThunkAction<Promise<void>, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    log.debug(`background.updateNetwork`, networkConfiguration);\n    try {\n      return await submitRequestToBackground('updateNetwork', [\n        networkConfiguration.chainId,\n        networkConfiguration,\n        options,\n      ]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning('Had a problem updading networks!'));\n    }\n    return undefined;\n  };\n}\n\nexport function setActiveNetwork(\n  networkConfigurationId: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch) => {\n    log.debug(`background.setActiveNetwork: ${networkConfigurationId}`);\n    try {\n      await submitRequestToBackground('setActiveNetwork', [\n        networkConfigurationId,\n      ]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning('Had a problem changing networks!'));\n    }\n  };\n}\n\nexport async function setActiveNetworkConfigurationId(\n  networkConfigurationId: string,\n): Promise<undefined> {\n  log.debug(\n    `background.setActiveNetworkConfigurationId: ${networkConfigurationId}`,\n  );\n  await submitRequestToBackground('setActiveNetworkConfigurationId', [\n    networkConfigurationId,\n  ]);\n}\n\nexport function rollbackToPreviousProvider(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    try {\n      await submitRequestToBackground('rollbackToPreviousProvider');\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning('Had a problem changing networks!'));\n    }\n  };\n}\n\nexport function removeNetwork(\n  chainId: Hex,\n): ThunkAction<Promise<void>, MetaMaskReduxState, unknown, AnyAction> {\n  return async () => {\n    try {\n      await submitRequestToBackground('removeNetwork', [chainId]);\n    } catch (error) {\n      logErrorWithMessage(error);\n    }\n  };\n}\n\n// Calls the addressBookController to add a new address.\nexport function addToAddressBook(\n  recipient: string,\n  nickname = '',\n  memo = '',\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  log.debug(`background.addToAddressBook`);\n\n  return async (dispatch, getState) => {\n    const { chainId } = getProviderConfig(getState());\n\n    let set;\n    try {\n      set = await submitRequestToBackground('setAddressBook', [\n        toChecksumHexAddress(recipient),\n        nickname,\n        chainId,\n        memo,\n      ]);\n      await forceUpdateMetamaskState(dispatch);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning('Address book failed to update'));\n      throw error;\n    }\n    if (!set) {\n      dispatch(displayWarning('Address book failed to update'));\n    }\n  };\n}\n\n/**\n * @description Calls the addressBookController to remove an existing address.\n * @param chainId\n * @param addressToRemove - Address of the entry to remove from the address book\n */\nexport function removeFromAddressBook(\n  chainId: string,\n  addressToRemove: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  log.debug(`background.removeFromAddressBook`);\n\n  return async (dispatch) => {\n    await submitRequestToBackground('removeFromAddressBook', [\n      chainId,\n      toChecksumHexAddress(addressToRemove),\n    ]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function showNetworkDropdown(): Action {\n  return {\n    type: actionConstants.NETWORK_DROPDOWN_OPEN,\n  };\n}\n\nexport function hideNetworkDropdown() {\n  return {\n    type: actionConstants.NETWORK_DROPDOWN_CLOSE,\n  };\n}\n\nexport function showImportTokensModal(): Action {\n  return {\n    type: actionConstants.IMPORT_TOKENS_POPOVER_OPEN,\n  };\n}\n\nexport function hideImportTokensModal(): Action {\n  return {\n    type: actionConstants.IMPORT_TOKENS_POPOVER_CLOSE,\n  };\n}\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype ModalPayload = { name: string } & Record<string, any>;\n\nexport function showModal(payload: ModalPayload): PayloadAction<ModalPayload> {\n  return {\n    type: actionConstants.MODAL_OPEN,\n    payload,\n  };\n}\n\nexport function hideModal(): Action {\n  return {\n    type: actionConstants.MODAL_CLOSE,\n  };\n}\n\nexport function showImportNftsModal(payload: {\n  tokenAddress?: string;\n  tokenId?: string;\n  ignoreErc20Token?: boolean;\n}) {\n  return {\n    type: actionConstants.IMPORT_NFTS_MODAL_OPEN,\n    payload,\n  };\n}\n\nexport function hideImportNftsModal(): Action {\n  return {\n    type: actionConstants.IMPORT_NFTS_MODAL_CLOSE,\n  };\n}\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setConfirmationExchangeRates(value: Record<string, any>) {\n  return {\n    type: actionConstants.SET_CONFIRMATION_EXCHANGE_RATES,\n    value,\n  };\n}\n\nexport function showIpfsModal(): Action {\n  return {\n    type: actionConstants.SHOW_IPFS_MODAL_OPEN,\n  };\n}\n\nexport function hideIpfsModal(): Action {\n  return {\n    type: actionConstants.SHOW_IPFS_MODAL_CLOSE,\n  };\n}\n\nexport function closeCurrentNotificationWindow(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (_, getState) => {\n    const state = getState();\n    const approvalFlows = getApprovalFlows(state);\n    if (\n      getEnvironmentType() === ENVIRONMENT_TYPE_NOTIFICATION &&\n      !hasTransactionPendingApprovals(state) &&\n      !getIsSigningQRHardwareTransaction(state) &&\n      approvalFlows.length === 0\n    ) {\n      closeNotificationPopup();\n    }\n  };\n}\n\nexport function showAlert(msg: string): PayloadAction<string> {\n  return {\n    type: actionConstants.ALERT_OPEN,\n    payload: msg,\n  };\n}\n\nexport function hideAlert(): Action {\n  return {\n    type: actionConstants.ALERT_CLOSE,\n  };\n}\n\nexport function showDeprecatedNetworkModal(): Action {\n  return {\n    type: actionConstants.DEPRECATED_NETWORK_POPOVER_OPEN,\n  };\n}\n\nexport function hideDeprecatedNetworkModal(): Action {\n  return {\n    type: actionConstants.DEPRECATED_NETWORK_POPOVER_CLOSE,\n  };\n}\n\n/**\n * TODO: this should be moved somewhere else when it makese sense to do so\n */\ntype NftDropDownState = {\n  [address: string]: {\n    [chainId: string]: {\n      [nftAddress: string]: boolean;\n    };\n  };\n};\n\nexport function updateNftDropDownState(\n  value: NftDropDownState,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('updateNftDropDownState', [value]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\ntype QrCodeData = {\n  // Address when a Ethereum Address has been detected\n  type?: 'address' | string;\n  // contains an address key when Ethereum Address detected\n  values?: { address?: string } & Json;\n};\n\n/**\n * This action will receive two types of values via qrCodeData\n * an object with the following structure {type, values}\n * or null (used to clear the previous value)\n *\n * @param qrCodeData\n */\nexport function qrCodeDetected(\n  qrCodeData: QrCodeData,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await dispatch({\n      type: actionConstants.QR_CODE_DETECTED,\n      value: qrCodeData,\n    });\n\n    // If on the send page, the send slice will listen for the QR_CODE_DETECTED\n    // action and update its state. Address changes need to recompute gasLimit\n    // so we fire this method so that the send page gasLimit can be recomputed\n    dispatch(computeEstimatedGasLimit());\n  };\n}\n\nexport function showLoadingIndication(\n  message?: string | ReactFragment,\n): PayloadAction<string | ReactFragment | undefined> {\n  return {\n    type: actionConstants.SHOW_LOADING,\n    payload: message,\n  };\n}\n\nexport function showNftStillFetchingIndication(): Action {\n  return {\n    type: actionConstants.SHOW_NFT_STILL_FETCHING_INDICATION,\n  };\n}\n\nexport function setShowNftDetectionEnablementToast(\n  value: boolean,\n): PayloadAction<string | ReactFragment | undefined> {\n  return {\n    type: actionConstants.SHOW_NFT_DETECTION_ENABLEMENT_TOAST,\n    payload: value,\n  };\n}\n\nexport function setHardwareWalletDefaultHdPath({\n  device,\n  path,\n}: {\n  device: HardwareDeviceNames;\n  path: string;\n}): PayloadAction<{ device: HardwareDeviceNames; path: string }> {\n  return {\n    type: actionConstants.SET_HARDWARE_WALLET_DEFAULT_HD_PATH,\n    payload: { device, path },\n  };\n}\n\nexport function hideLoadingIndication(): Action {\n  return {\n    type: actionConstants.HIDE_LOADING,\n  };\n}\n\nexport function hideNftStillFetchingIndication(): Action {\n  return {\n    type: actionConstants.HIDE_NFT_STILL_FETCHING_INDICATION,\n  };\n}\n\n/**\n * An action creator for display a warning to the user in various places in the\n * UI. It will not be cleared until a new warning replaces it or `hideWarning`\n * is called.\n *\n * @deprecated This way of displaying a warning is confusing for users and\n * should no longer be used.\n * @param payload - The warning to show.\n * @returns The action to display the warning.\n */\nexport function displayWarning(payload: unknown): PayloadAction<string> {\n  if (isErrorWithMessage(payload)) {\n    return {\n      type: actionConstants.DISPLAY_WARNING,\n      payload: payload.message,\n    };\n  } else if (typeof payload === 'string') {\n    return {\n      type: actionConstants.DISPLAY_WARNING,\n      payload,\n    };\n  }\n  return {\n    type: actionConstants.DISPLAY_WARNING,\n    payload: `${payload}`,\n  };\n}\n\nexport function hideWarning() {\n  return {\n    type: actionConstants.HIDE_WARNING,\n  };\n}\n\nexport function exportAccount(\n  password: string,\n  address: string,\n  setPrivateKey: (key: string) => void,\n  setShowHoldToReveal: (show: boolean) => void,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return function (dispatch) {\n    dispatch(showLoadingIndication());\n\n    log.debug(`background.verifyPassword`);\n    return new Promise<string>((resolve, reject) => {\n      callBackgroundMethod('verifyPassword', [password], function (err) {\n        if (err) {\n          log.error('Error in verifying password.');\n          dispatch(hideLoadingIndication());\n          dispatch(displayWarning('Incorrect Password.'));\n          reject(err);\n          return;\n        }\n        log.debug(`background.exportAccount`);\n        callBackgroundMethod<string>(\n          'exportAccount',\n          [address, password],\n          function (err2, result) {\n            dispatch(hideLoadingIndication());\n\n            if (err2) {\n              logErrorWithMessage(err2);\n              dispatch(displayWarning('Had a problem exporting the account.'));\n              reject(err2);\n              return;\n            }\n\n            setPrivateKey(result as string);\n            setShowHoldToReveal(true);\n            resolve(result as string);\n          },\n        );\n      });\n    });\n  };\n}\n\nexport function exportAccounts(\n  password: string,\n  addresses: string[],\n): ThunkAction<Promise<string[]>, MetaMaskReduxState, unknown, AnyAction> {\n  return function (dispatch) {\n    log.debug(`background.verifyPassword`);\n    return new Promise<string[]>((resolve, reject) => {\n      callBackgroundMethod('verifyPassword', [password], function (err) {\n        if (err) {\n          log.error('Error in submitting password.');\n          reject(err);\n          return;\n        }\n        log.debug(`background.exportAccounts`);\n        const accountPromises = addresses.map(\n          (address) =>\n            new Promise<string>((resolve2, reject2) =>\n              callBackgroundMethod<string>(\n                'exportAccount',\n                [address, password],\n                function (err2, result) {\n                  if (err2) {\n                    logErrorWithMessage(err2);\n                    dispatch(\n                      displayWarning('Had a problem exporting the account.'),\n                    );\n                    reject2(err2);\n                    return;\n                  }\n                  resolve2(result as string);\n                },\n              ),\n            ),\n        );\n        resolve(Promise.all(accountPromises));\n      });\n    });\n  };\n}\n\nexport function showPrivateKey(key: string): PayloadAction<string> {\n  return {\n    type: actionConstants.SHOW_PRIVATE_KEY,\n    payload: key,\n  };\n}\n\nexport function setAccountLabel(\n  account: string,\n  label: string,\n): ThunkAction<Promise<string>, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setAccountLabel`);\n\n    return new Promise((resolve, reject) => {\n      callBackgroundMethod('setAccountLabel', [account, label], (err) => {\n        dispatch(hideLoadingIndication());\n\n        if (err) {\n          dispatch(displayWarning(err));\n          reject(err);\n          return;\n        }\n\n        dispatch({\n          type: actionConstants.SET_ACCOUNT_LABEL,\n          value: { account, label },\n        });\n        resolve(account);\n      });\n    });\n  };\n}\n\nexport function clearAccountDetails(): Action {\n  return {\n    type: actionConstants.CLEAR_ACCOUNT_DETAILS,\n  };\n}\n\nexport function showSendTokenPage(): Action {\n  return {\n    type: actionConstants.SHOW_SEND_TOKEN_PAGE,\n  };\n}\n\n// TODO: Lift to shared folder when it makes sense\ntype TemporaryFeatureFlagDef = {\n  [feature: string]: boolean;\n};\ntype TemporaryPreferenceFlagDef = {\n  [preference: string]: boolean | object;\n};\n\nexport function setFeatureFlag(\n  feature: string,\n  activated: boolean,\n  notificationType: string,\n): ThunkAction<\n  Promise<TemporaryFeatureFlagDef>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    return new Promise((resolve, reject) => {\n      callBackgroundMethod<TemporaryFeatureFlagDef>(\n        'setFeatureFlag',\n        [feature, activated],\n        (err, updatedFeatureFlags) => {\n          dispatch(hideLoadingIndication());\n          if (err) {\n            dispatch(displayWarning(err));\n            reject(err);\n            return;\n          }\n          notificationType && dispatch(showModal({ name: notificationType }));\n          resolve(updatedFeatureFlags as TemporaryFeatureFlagDef);\n        },\n      );\n    });\n  };\n}\n\nexport function setPreference(\n  preference: string,\n  value: boolean | string | object,\n): ThunkAction<\n  Promise<TemporaryPreferenceFlagDef>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    return new Promise<TemporaryPreferenceFlagDef>((resolve, reject) => {\n      callBackgroundMethod<TemporaryPreferenceFlagDef>(\n        'setPreference',\n        [preference, value],\n        (err, updatedPreferences) => {\n          dispatch(hideLoadingIndication());\n          if (err) {\n            dispatch(displayWarning(err));\n            reject(err);\n            return;\n          }\n          resolve(updatedPreferences as TemporaryPreferenceFlagDef);\n        },\n      );\n    });\n  };\n}\n\nexport function setDefaultHomeActiveTabName(\n  value: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setDefaultHomeActiveTabName', [value]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function setUseNativeCurrencyAsPrimaryCurrencyPreference(\n  value: boolean,\n) {\n  return setPreference('useNativeCurrencyAsPrimaryCurrency', value);\n}\n\nexport function setHideZeroBalanceTokens(value: boolean) {\n  return setPreference('hideZeroBalanceTokens', value);\n}\n\nexport function setShowFiatConversionOnTestnetsPreference(value: boolean) {\n  return setPreference('showFiatInTestnets', value);\n}\n\nexport function setShowTestNetworks(value: boolean) {\n  return setPreference('showTestNetworks', value);\n}\n\nexport function setPetnamesEnabled(value: boolean) {\n  return setPreference('petnamesEnabled', value);\n}\n\nexport function setRedesignedConfirmationsEnabled(value: boolean) {\n  return setPreference('redesignedConfirmationsEnabled', value);\n}\n\nexport function setRedesignedTransactionsEnabled(value: boolean) {\n  return setPreference('redesignedTransactionsEnabled', value);\n}\n\nexport function setFeatureNotificationsEnabled(value: boolean) {\n  return setPreference('featureNotificationsEnabled', value);\n}\n\nexport function setShowExtensionInFullSizeView(value: boolean) {\n  return setPreference('showExtensionInFullSizeView', value);\n}\n\nexport function setRedesignedConfirmationsDeveloperEnabled(value: boolean) {\n  return setPreference('isRedesignedConfirmationsDeveloperEnabled', value);\n}\n\nexport function setSmartTransactionsOptInStatus(\n  value: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch, getState) => {\n    const smartTransactionsOptInStatus = getSmartTransactionsOptInStatus(\n      getState(),\n    );\n    trackMetaMetricsEvent({\n      category: MetaMetricsEventCategory.Settings,\n      event: MetaMetricsEventName.SettingsUpdated,\n      properties: {\n        stx_opt_in: value,\n        prev_stx_opt_in: smartTransactionsOptInStatus,\n      },\n    });\n    await dispatch(setPreference('smartTransactionsOptInStatus', value));\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function setShowMultiRpcModal(value: boolean) {\n  return setPreference('showMultiRpcModal', value);\n}\n\nexport function setAutoLockTimeLimit(value: number | null) {\n  return setPreference('autoLockTimeLimit', value);\n}\n\nexport function setIncomingTransactionsPreferences(\n  chainId: string,\n  value: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setIncomingTransactionsPreferences`);\n    await submitRequestToBackground('setIncomingTransactionsPreferences', [\n      chainId,\n      value,\n    ]);\n    dispatch(hideLoadingIndication());\n  };\n}\n\nexport function setCompletedOnboarding(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n\n    try {\n      await submitRequestToBackground('completeOnboarding');\n      dispatch(completeOnboarding());\n    } catch (err) {\n      dispatch(displayWarning(err));\n      throw err;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function completeOnboarding() {\n  return {\n    type: actionConstants.COMPLETE_ONBOARDING,\n  };\n}\n\nexport function resetOnboarding(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch) => {\n    try {\n      await dispatch(setSeedPhraseBackedUp(false));\n      dispatch(resetOnboardingAction());\n    } catch (err) {\n      console.error(err);\n    }\n  };\n}\n\nexport function resetOnboardingAction() {\n  return {\n    type: actionConstants.RESET_ONBOARDING,\n  };\n}\n\nexport function setServiceWorkerKeepAlivePreference(\n  value: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setServiceWorkerKeepAlivePreference`);\n    try {\n      await submitRequestToBackground('setServiceWorkerKeepAlivePreference', [\n        value,\n      ]);\n    } catch (error) {\n      dispatch(displayWarning(error));\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport async function forceUpdateMetamaskState(\n  dispatch: MetaMaskReduxDispatch,\n) {\n  let pendingPatches: Patch[] | undefined;\n\n  try {\n    pendingPatches = await submitRequestToBackground<Patch[]>(\n      'getStatePatches',\n    );\n  } catch (error) {\n    dispatch(displayWarning(error));\n    throw error;\n  }\n\n  return dispatch(updateMetamaskState(pendingPatches));\n}\n\nexport function toggleAccountMenu() {\n  return {\n    type: actionConstants.TOGGLE_ACCOUNT_MENU,\n  };\n}\n\nexport function toggleNetworkMenu(payload?: {\n  isAddingNewNetwork: boolean;\n  isMultiRpcOnboarding: boolean;\n}) {\n  return {\n    type: actionConstants.TOGGLE_NETWORK_MENU,\n    payload,\n  };\n}\n\nexport function setAccountDetailsAddress(address: string) {\n  return {\n    type: actionConstants.SET_ACCOUNT_DETAILS_ADDRESS,\n    payload: address,\n  };\n}\n\nexport function setParticipateInMetaMetrics(\n  participationPreference: boolean,\n): ThunkAction<\n  Promise<[boolean, string]>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    log.debug(`background.setParticipateInMetaMetrics`);\n    return new Promise((resolve, reject) => {\n      callBackgroundMethod<string>(\n        'setParticipateInMetaMetrics',\n        [participationPreference],\n        (err, metaMetricsId) => {\n          log.debug(err);\n          if (err) {\n            dispatch(displayWarning(err));\n            reject(err);\n            return;\n          }\n\n          dispatch({\n            type: actionConstants.SET_PARTICIPATE_IN_METAMETRICS,\n            value: participationPreference,\n          });\n\n          resolve([participationPreference, metaMetricsId as string]);\n        },\n      );\n    });\n  };\n}\n\nexport function setDataCollectionForMarketing(\n  dataCollectionPreference: boolean,\n): ThunkAction<\n  Promise<[boolean, string]>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    log.debug(`background.setDataCollectionForMarketing`);\n    await submitRequestToBackground('setDataCollectionForMarketing', [\n      dataCollectionPreference,\n    ]);\n    dispatch({\n      type: actionConstants.SET_DATA_COLLECTION_FOR_MARKETING,\n      value: dataCollectionPreference,\n    });\n  };\n}\n\nexport function setUseBlockie(\n  val: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setUseBlockie`);\n    callBackgroundMethod('setUseBlockie', [val], (err) => {\n      dispatch(hideLoadingIndication());\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\nexport function setUseNonceField(\n  val: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setUseNonceField`);\n    try {\n      await submitRequestToBackground('setUseNonceField', [val]);\n    } catch (error) {\n      dispatch(displayWarning(error));\n    }\n    dispatch(hideLoadingIndication());\n  };\n}\n\nexport function setUsePhishDetect(\n  val: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setUsePhishDetect`);\n    callBackgroundMethod('setUsePhishDetect', [val], (err) => {\n      dispatch(hideLoadingIndication());\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\nexport function setUseMultiAccountBalanceChecker(\n  val: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setUseMultiAccountBalanceChecker`);\n    callBackgroundMethod('setUseMultiAccountBalanceChecker', [val], (err) => {\n      dispatch(hideLoadingIndication());\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\nexport function setUseSafeChainsListValidation(\n  val: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setUseSafeChainsListValidation`);\n    callBackgroundMethod('setUseSafeChainsListValidation', [val], (err) => {\n      dispatch(hideLoadingIndication());\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\nexport function setUseTokenDetection(\n  val: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setUseTokenDetection`);\n    callBackgroundMethod('setUseTokenDetection', [val], (err) => {\n      dispatch(hideLoadingIndication());\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\nexport function setOpenSeaEnabled(\n  val: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setOpenSeaEnabled`);\n    try {\n      await submitRequestToBackground('setOpenSeaEnabled', [val]);\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function setUseNftDetection(\n  val: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setUseNftDetection`);\n    try {\n      await submitRequestToBackground('setUseNftDetection', [val]);\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function setUse4ByteResolution(\n  val: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setUse4ByteResolution`);\n    try {\n      await submitRequestToBackground('setUse4ByteResolution', [val]);\n    } catch (error) {\n      dispatch(displayWarning(error));\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function setUseCurrencyRateCheck(\n  val: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setUseCurrencyRateCheck`);\n    callBackgroundMethod('setUseCurrencyRateCheck', [val], (err) => {\n      dispatch(hideLoadingIndication());\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\n// TokenDetectionController\nexport function detectTokens(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.detectTokens`);\n    await submitRequestToBackground('detectTokens');\n    dispatch(hideLoadingIndication());\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function detectNfts(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showNftStillFetchingIndication());\n    log.debug(`background.detectNfts`);\n    try {\n      await submitRequestToBackground('detectNfts');\n    } finally {\n      dispatch(hideNftStillFetchingIndication());\n    }\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function setAdvancedGasFee(\n  val: { chainId: Hex; maxBaseFee?: string; priorityFee?: string } | null,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setAdvancedGasFee`);\n    callBackgroundMethod('setAdvancedGasFee', [val], (err) => {\n      dispatch(hideLoadingIndication());\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\nexport function setTheme(\n  val: ThemeType,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    log.debug(`background.setTheme`);\n    try {\n      await submitRequestToBackground('setTheme', [val]);\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function setIpfsGateway(\n  val: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    log.debug(`background.setIpfsGateway`);\n    callBackgroundMethod('setIpfsGateway', [val], (err) => {\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\nexport function toggleExternalServices(\n  val: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    log.debug(`background.toggleExternalServices`);\n    callBackgroundMethod('toggleExternalServices', [val], (err) => {\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\nexport function setIsIpfsGatewayEnabled(\n  val: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    log.debug(`background.setIsIpfsGatewayEnabled`);\n    callBackgroundMethod('setIsIpfsGatewayEnabled', [val], (err) => {\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\nexport function setUseAddressBarEnsResolution(\n  val: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    log.debug(`background.setUseAddressBarEnsResolution`);\n    callBackgroundMethod('setUseAddressBarEnsResolution', [val], (err) => {\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\nexport function updateCurrentLocale(\n  key: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n\n    try {\n      await loadRelativeTimeFormatLocaleData(key);\n      const localeMessages = await fetchLocale(key);\n      const textDirection = await submitRequestToBackground<\n        'rtl' | 'ltr' | 'auto'\n      >('setCurrentLocale', [key]);\n      switchDirection(textDirection);\n      dispatch(setCurrentLocale(key, localeMessages));\n    } catch (error) {\n      dispatch(displayWarning(error));\n      return;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function setCurrentLocale(\n  locale: string,\n  messages: {\n    [translationKey: string]: { message: string; description?: string };\n  },\n): PayloadAction<{\n  locale: string;\n  messages: {\n    [translationKey: string]: { message: string; description?: string };\n  };\n}> {\n  return {\n    type: actionConstants.SET_CURRENT_LOCALE,\n    payload: {\n      locale,\n      messages,\n    },\n  };\n}\n\nexport function setPendingTokens(pendingTokens: {\n  customToken?: Token;\n  selectedTokens?: {\n    [address: string]: Token & { isCustom?: boolean; unlisted?: boolean };\n  };\n  tokenAddressList: string[];\n}) {\n  const {\n    customToken,\n    selectedTokens = {},\n    tokenAddressList = [],\n  } = pendingTokens;\n  const tokens =\n    customToken?.address &&\n    customToken?.symbol &&\n    Boolean(customToken?.decimals >= 0 && customToken?.decimals <= 36)\n      ? {\n          ...selectedTokens,\n          [customToken.address]: {\n            ...customToken,\n            isCustom: true,\n          },\n        }\n      : selectedTokens;\n\n  Object.keys(tokens).forEach((tokenAddress) => {\n    const found = tokenAddressList.find((addr) =>\n      isEqualCaseInsensitive(addr, tokenAddress),\n    );\n\n    tokens[tokenAddress] = {\n      ...tokens[tokenAddress],\n      unlisted: !found,\n    };\n  });\n\n  return {\n    type: actionConstants.SET_PENDING_TOKENS,\n    payload: tokens,\n  };\n}\n\n// Swaps\n\nexport function setSwapsLiveness(\n  swapsLiveness: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setSwapsLiveness', [swapsLiveness]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function setSwapsFeatureFlags(\n  featureFlags: TemporaryFeatureFlagDef,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setSwapsFeatureFlags', [featureFlags]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\ntype Quotes = [\n  { destinationAmount: string; decimals: number; aggregator: string },\n  string,\n];\n\nexport function fetchAndSetQuotes(\n  fetchParams: {\n    slippage: string;\n    sourceToken: string;\n    destinationToken: string;\n    value: string;\n    fromAddress: string;\n    balanceError: string;\n    sourceDecimals: number;\n  },\n  fetchParamsMetaData: {\n    sourceTokenInfo: Token;\n    destinationTokenInfo: Token;\n    accountBalance: string;\n    chainId: string;\n  },\n): ThunkAction<Promise<Quotes>, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    const [quotes, selectedAggId] = await submitRequestToBackground<Quotes>(\n      'fetchAndSetQuotes',\n      [fetchParams, fetchParamsMetaData],\n    );\n    await forceUpdateMetamaskState(dispatch);\n    return [quotes, selectedAggId];\n  };\n}\n\nexport function setSelectedQuoteAggId(\n  aggId: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setSelectedQuoteAggId', [aggId]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function setSwapsTokens(\n  tokens: Token[],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setSwapsTokens', [tokens]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function clearSwapsQuotes(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('clearSwapsQuotes');\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function resetBackgroundSwapsState(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('resetSwapsState');\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function setCustomApproveTxData(\n  data: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setCustomApproveTxData', [data]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function setSwapsTxGasPrice(\n  gasPrice: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setSwapsTxGasPrice', [gasPrice]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function setSwapsTxGasLimit(\n  gasLimit: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setSwapsTxGasLimit', [gasLimit, true]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function updateCustomSwapsEIP1559GasParams({\n  gasLimit,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n}: {\n  gasLimit: string;\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n}): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await Promise.all([\n      submitRequestToBackground('setSwapsTxGasLimit', [gasLimit]),\n      submitRequestToBackground('setSwapsTxMaxFeePerGas', [maxFeePerGas]),\n      submitRequestToBackground('setSwapsTxMaxFeePriorityPerGas', [\n        maxPriorityFeePerGas,\n      ]),\n    ]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\n// Note that the type widening happening below will resolve when we switch gas\n// constants to TypeScript, at which point we'll get better type safety.\n// TODO: Remove this comment when gas constants is typescript\nexport function updateSwapsUserFeeLevel(\n  swapsCustomUserFeeLevel: PriorityLevels,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setSwapsUserFeeLevel', [\n      swapsCustomUserFeeLevel,\n    ]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function setSwapsQuotesPollingLimitEnabled(\n  quotesPollingLimitEnabled: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setSwapsQuotesPollingLimitEnabled', [\n      quotesPollingLimitEnabled,\n    ]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function safeRefetchQuotes(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('safeRefetchQuotes');\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function stopPollingForQuotes(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('stopPollingForQuotes');\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function setBackgroundSwapRouteState(\n  routeState: '' | 'loading' | 'awaiting' | 'smartTransactionStatus',\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setBackgroundSwapRouteState', [\n      routeState,\n    ]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function resetSwapsPostFetchState(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('resetPostFetchState');\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function setSwapsErrorKey(\n  errorKey: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setSwapsErrorKey', [errorKey]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\nexport function setInitialGasEstimate(\n  initialAggId: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('setInitialGasEstimate', [initialAggId]);\n    await forceUpdateMetamaskState(dispatch);\n  };\n}\n\n// Permissions\n\nexport function requestAccountsPermissionWithId(\n  origin: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    const id = await submitRequestToBackground(\n      'requestAccountsPermissionWithId',\n      [origin],\n    );\n    await forceUpdateMetamaskState(dispatch);\n    return id;\n  };\n}\n\n/**\n * Approves the permissions request.\n *\n * @param request - The permissions request to approve.\n */\nexport function approvePermissionsRequest(\n  request: PermissionsRequest,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    callBackgroundMethod('approvePermissionsRequest', [request], (err) => {\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n      forceUpdateMetamaskState(dispatch);\n    });\n  };\n}\n\n/**\n * Rejects the permissions request with the given ID.\n *\n * @param requestId - The id of the request to be rejected\n */\nexport function rejectPermissionsRequest(\n  requestId: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    return new Promise((resolve, reject) => {\n      callBackgroundMethod('rejectPermissionsRequest', [requestId], (err) => {\n        if (err) {\n          dispatch(displayWarning(err));\n          reject(err);\n          return;\n        }\n        forceUpdateMetamaskState(dispatch).then(resolve).catch(reject);\n      });\n    });\n  };\n}\n\n/**\n * Clears the given permissions for the given origin.\n *\n * @param subjects\n */\nexport function removePermissionsFor(\n  subjects: Record<string, NonEmptyArray<string>>,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    callBackgroundMethod('removePermissionsFor', [subjects], (err) => {\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\n/**\n * Updates the order of networks after drag and drop\n *\n * @param chainIds - An array of hexadecimal chain IDs\n */\nexport function updateNetworksList(\n  chainIds: Hex[],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async () => {\n    await submitRequestToBackground('updateNetworksList', [chainIds]);\n  };\n}\n\n/**\n * Updates the pinned accounts list\n *\n * @param pinnedAccountList\n */\nexport function updateAccountsList(\n  pinnedAccountList: [],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async () => {\n    await submitRequestToBackground('updateAccountsList', [pinnedAccountList]);\n  };\n}\n\n/**\n * Hides account in the accounts list\n *\n * @param hiddenAccountList\n */\nexport function updateHiddenAccountsList(\n  hiddenAccountList: [],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async () => {\n    await submitRequestToBackground('updateHiddenAccountsList', [\n      hiddenAccountList,\n    ]);\n  };\n}\n\n// Pending Approvals\n\n/**\n * Resolves a pending approval and closes the current notification window if no\n * further approvals are pending after the background state updates.\n *\n * @param id - The pending approval id\n * @param [value] - The value required to confirm a pending approval\n */\nexport function resolvePendingApproval(\n  id: string,\n  value: unknown,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (_dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('resolvePendingApproval', [id, value]);\n    // Before closing the current window, check if any additional confirmations\n    // are added as a result of this confirmation being accepted\n\n    ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n    const { pendingApprovals } = await forceUpdateMetamaskState(_dispatch);\n    if (Object.values(pendingApprovals).length === 0) {\n      _dispatch(closeCurrentNotificationWindow());\n    }\n    ///: END:ONLY_INCLUDE_IF\n  };\n}\n\n/**\n * Rejects a pending approval and closes the current notification window if no\n * further approvals are pending after the background state updates.\n *\n * @param id - The pending approval id\n * @param [error] - The error to throw when rejecting the approval\n */\nexport function rejectPendingApproval(\n  id: string,\n  error: unknown,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground('rejectPendingApproval', [id, error]);\n    // Before closing the current window, check if any additional confirmations\n    // are added as a result of this confirmation being rejected\n    const { pendingApprovals } = await forceUpdateMetamaskState(dispatch);\n    if (Object.values(pendingApprovals).length === 0) {\n      dispatch(closeCurrentNotificationWindow());\n    }\n  };\n}\n\n/**\n * Rejects all approvals for the given messages\n *\n * @param messageList - The list of messages to reject\n */\nexport function rejectAllMessages(\n  messageList: [],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    const userRejectionError = serializeError(\n      ethErrors.provider.userRejectedRequest(),\n    );\n    await Promise.all(\n      messageList.map(\n        async ({ id }) =>\n          await submitRequestToBackground('rejectPendingApproval', [\n            id,\n            userRejectionError,\n          ]),\n      ),\n    );\n    const { pendingApprovals } = await forceUpdateMetamaskState(dispatch);\n    if (Object.values(pendingApprovals).length === 0) {\n      dispatch(closeCurrentNotificationWindow());\n    }\n  };\n}\n\nexport function setFirstTimeFlowType(\n  type: FirstTimeFlowType,\n): ThunkAction<Promise<void>, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    try {\n      log.debug(`background.setFirstTimeFlowType`);\n      await submitRequestToBackground('setFirstTimeFlowType', [type]);\n      dispatch({\n        type: actionConstants.SET_FIRST_TIME_FLOW_TYPE,\n        value: type,\n      });\n    } catch (err) {\n      dispatch(displayWarning(err));\n    }\n  };\n}\n\nexport function setSelectedNetworkConfigurationId(\n  networkConfigurationId: string,\n): PayloadAction<string> {\n  return {\n    type: actionConstants.SET_SELECTED_NETWORK_CONFIGURATION_ID,\n    payload: networkConfigurationId,\n  };\n}\n\nexport function setNewNetworkAdded({\n  networkConfigurationId,\n  nickname,\n}: {\n  networkConfigurationId: string;\n  nickname: string;\n}): PayloadAction<object> {\n  return {\n    type: actionConstants.SET_NEW_NETWORK_ADDED,\n    payload: { networkConfigurationId, nickname },\n  };\n}\n\nexport function setEditedNetwork(\n  payload:\n    | {\n        chainId: string;\n        nickname?: string;\n        editCompleted?: boolean;\n        newNetwork?: boolean;\n      }\n    | undefined = undefined,\n): PayloadAction<object> {\n  return { type: actionConstants.SET_EDIT_NETWORK, payload };\n}\n\nexport function setNewNftAddedMessage(\n  newNftAddedMessage: string,\n): PayloadAction<string> {\n  return {\n    type: actionConstants.SET_NEW_NFT_ADDED_MESSAGE,\n    payload: newNftAddedMessage,\n  };\n}\n\nexport function setRemoveNftMessage(\n  removeNftMessage: string,\n): PayloadAction<string> {\n  return {\n    type: actionConstants.SET_REMOVE_NFT_MESSAGE,\n    payload: removeNftMessage,\n  };\n}\n\nexport function setNewTokensImported(\n  newTokensImported: string,\n): PayloadAction<string> {\n  return {\n    type: actionConstants.SET_NEW_TOKENS_IMPORTED,\n    payload: newTokensImported,\n  };\n}\n\nexport function setNewTokensImportedError(\n  newTokensImportedError: string,\n): PayloadAction<string> {\n  return {\n    type: actionConstants.SET_NEW_TOKENS_IMPORTED_ERROR,\n    payload: newTokensImportedError,\n  };\n}\n\nexport function setLastActiveTime(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    callBackgroundMethod('setLastActiveTime', [], (err) => {\n      if (err) {\n        dispatch(displayWarning(err));\n      }\n    });\n  };\n}\n\nexport function setDismissSeedBackUpReminder(\n  value: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    await submitRequestToBackground('setDismissSeedBackUpReminder', [value]);\n    dispatch(hideLoadingIndication());\n  };\n}\n\nexport function getRpcMethodPreferences(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(showLoadingIndication());\n    await submitRequestToBackground('getRpcMethodPreferences', []);\n    dispatch(hideLoadingIndication());\n  };\n}\n\nexport function setConnectedStatusPopoverHasBeenShown(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return () => {\n    callBackgroundMethod('setConnectedStatusPopoverHasBeenShown', [], (err) => {\n      if (isErrorWithMessage(err)) {\n        throw new Error(err.message);\n      }\n    });\n  };\n}\n\nexport function setRecoveryPhraseReminderHasBeenShown() {\n  return () => {\n    callBackgroundMethod('setRecoveryPhraseReminderHasBeenShown', [], (err) => {\n      if (isErrorWithMessage(err)) {\n        throw new Error(err.message);\n      }\n    });\n  };\n}\n\nexport function setRecoveryPhraseReminderLastShown(\n  lastShown: number,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return () => {\n    callBackgroundMethod(\n      'setRecoveryPhraseReminderLastShown',\n      [lastShown],\n      (err) => {\n        if (isErrorWithMessage(err)) {\n          throw new Error(err.message);\n        }\n      },\n    );\n  };\n}\n\nexport function setTermsOfUseLastAgreed(lastAgreed: number) {\n  return async () => {\n    await submitRequestToBackground('setTermsOfUseLastAgreed', [lastAgreed]);\n  };\n}\n\nexport function setSurveyLinkLastClickedOrClosed(time: number) {\n  return async () => {\n    await submitRequestToBackground('setSurveyLinkLastClickedOrClosed', [time]);\n  };\n}\n\nexport function setNewPrivacyPolicyToastClickedOrClosed() {\n  return async () => {\n    await submitRequestToBackground('setNewPrivacyPolicyToastClickedOrClosed');\n  };\n}\n\nexport function setOnboardingDate() {\n  return async () => {\n    await submitRequestToBackground('setOnboardingDate');\n  };\n}\n\nexport function setNewPrivacyPolicyToastShownDate(time: number) {\n  return async () => {\n    await submitRequestToBackground('setNewPrivacyPolicyToastShownDate', [\n      time,\n    ]);\n  };\n}\n\nexport function setOutdatedBrowserWarningLastShown(lastShown: number) {\n  return async () => {\n    await submitRequestToBackground('setOutdatedBrowserWarningLastShown', [\n      lastShown,\n    ]);\n  };\n}\n\nexport function getContractMethodData(\n  data = '',\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch, getState) => {\n    const prefixedData = addHexPrefix(data);\n    const fourBytePrefix = prefixedData.slice(0, 10);\n    if (fourBytePrefix.length < 10) {\n      return {};\n    }\n    const { knownMethodData, use4ByteResolution } = getState().metamask;\n    if (\n      knownMethodData?.[fourBytePrefix] &&\n      Object.keys(knownMethodData[fourBytePrefix]).length !== 0\n    ) {\n      return knownMethodData[fourBytePrefix];\n    }\n\n    log.debug(`loadingMethodData`);\n\n    const { name, params } = (await getMethodDataAsync(\n      fourBytePrefix,\n      use4ByteResolution,\n    )) as {\n      name: string;\n      params: unknown;\n    };\n\n    callBackgroundMethod(\n      'addKnownMethodData',\n      [fourBytePrefix, { name, params }],\n      (err) => {\n        if (err) {\n          dispatch(displayWarning(err));\n        }\n      },\n    );\n    return { name, params };\n  };\n}\n\nexport function setSeedPhraseBackedUp(\n  seedPhraseBackupState: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    log.debug(`background.setSeedPhraseBackedUp`);\n    return new Promise((resolve, reject) => {\n      callBackgroundMethod(\n        'setSeedPhraseBackedUp',\n        [seedPhraseBackupState],\n        (err) => {\n          if (err) {\n            dispatch(displayWarning(err));\n            reject(err);\n            return;\n          }\n          forceUpdateMetamaskState(dispatch).then(resolve).catch(reject);\n        },\n      );\n    });\n  };\n}\n\nexport function setNextNonce(nextNonce: string): PayloadAction<string> {\n  return {\n    type: actionConstants.SET_NEXT_NONCE,\n    payload: nextNonce,\n  };\n}\n\n/**\n * This function initiates the nonceLock in the background for the given\n * address, and returns the next nonce to use. It then calls setNextNonce which\n * sets the nonce in state on the nextNonce key. NOTE: The nextNonce key is\n * actually ephemeral application state. It does not appear to be part of the\n * background state.\n *\n * TODO: move this to a different slice, MetaMask slice will eventually be\n * deprecated because it should not contain any ephemeral/app state but just\n * background state. In addition we should key nextNonce by address to prevent\n * accidental usage of a stale nonce as the call to getNextNonce only works for\n * the currently selected address.\n *\n * @returns\n */\nexport function getNextNonce(): ThunkAction<\n  Promise<string>,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch, getState) => {\n    const { address } = getSelectedInternalAccount(getState());\n    const networkClientId = getSelectedNetworkClientId(getState());\n    let nextNonce;\n    try {\n      nextNonce = await submitRequestToBackground<string>('getNextNonce', [\n        address,\n        networkClientId,\n      ]);\n    } catch (error) {\n      dispatch(displayWarning(error));\n      throw error;\n    }\n    dispatch(setNextNonce(nextNonce));\n    return nextNonce;\n  };\n}\n\nexport function setRequestAccountTabIds(requestAccountTabIds: {\n  [origin: string]: string;\n}): PayloadAction<{\n  [origin: string]: string;\n}> {\n  return {\n    type: actionConstants.SET_REQUEST_ACCOUNT_TABS,\n    payload: requestAccountTabIds,\n  };\n}\n\nexport function getRequestAccountTabIds(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    const requestAccountTabIds = await submitRequestToBackground<{\n      [origin: string]: string;\n    }>('getRequestAccountTabIds');\n    dispatch(setRequestAccountTabIds(requestAccountTabIds));\n  };\n}\n\nexport function setOpenMetamaskTabsIDs(openMetaMaskTabIDs: {\n  [tabId: string]: boolean;\n}): PayloadAction<{ [tabId: string]: boolean }> {\n  return {\n    type: actionConstants.SET_OPEN_METAMASK_TAB_IDS,\n    payload: openMetaMaskTabIDs,\n  };\n}\n\nexport function getOpenMetamaskTabsIds(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    const openMetaMaskTabIDs = await submitRequestToBackground<{\n      [tabId: string]: boolean;\n    }>('getOpenMetamaskTabsIds');\n    dispatch(setOpenMetamaskTabsIDs(openMetaMaskTabIDs));\n  };\n}\n\nexport async function attemptLedgerTransportCreation() {\n  return await submitRequestToBackground('attemptLedgerTransportCreation');\n}\n\n/**\n * This method deduplicates error reports to sentry by maintaining a state\n * object 'singleExceptions' in the app slice. The only place this state object\n * is accessed from is within this method, to check if it has already seen and\n * therefore tracked this error. This is to avoid overloading sentry with lots\n * of duplicate errors.\n *\n * @param error\n * @returns\n */\nexport function captureSingleException(\n  error: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch, getState) => {\n    const { singleExceptions } = getState().appState;\n    if (!(error in singleExceptions)) {\n      dispatch({\n        type: actionConstants.CAPTURE_SINGLE_EXCEPTION,\n        value: error,\n      });\n      captureException(Error(error));\n    }\n  };\n}\n\n// Wrappers around promisifedBackground\n/**\n * The \"actions\" below are not actions nor action creators. They cannot use\n * dispatch nor should they be dispatched when used. Instead they can be\n * called directly. These wrappers will be moved into their location at some\n * point in the future.\n */\n\nexport function estimateGas(params: TransactionParams): Promise<Hex> {\n  return submitRequestToBackground('estimateGas', [params]);\n}\n\nexport async function updateTokenType(\n  tokenAddress: string,\n): Promise<Token | undefined> {\n  try {\n    return await submitRequestToBackground('updateTokenType', [tokenAddress]);\n  } catch (error) {\n    logErrorWithMessage(error);\n  }\n  return undefined;\n}\n\nexport async function addPollingTokenToAppState(pollingToken: string) {\n  return submitRequestToBackground('addPollingTokenToAppState', [\n    pollingToken,\n    POLLING_TOKEN_ENVIRONMENT_TYPES[getEnvironmentType()],\n  ]);\n}\n\nexport async function removePollingTokenFromAppState(pollingToken: string) {\n  return submitRequestToBackground('removePollingTokenFromAppState', [\n    pollingToken,\n    POLLING_TOKEN_ENVIRONMENT_TYPES[getEnvironmentType()],\n  ]);\n}\n\n/**\n * Informs the CurrencyRateController that the UI requires currency rate polling\n *\n * @param networkClientId - unique identifier for the network client\n * @returns polling token that can be used to stop polling\n */\nexport async function currencyRateStartPollingByNetworkClientId(\n  networkClientId: string,\n): Promise<string> {\n  const pollingToken = await submitRequestToBackground(\n    'currencyRateStartPollingByNetworkClientId',\n    [networkClientId],\n  );\n  await addPollingTokenToAppState(pollingToken);\n  return pollingToken;\n}\n\n/**\n * Informs the CurrencyRateController that the UI no longer requires currency rate polling\n * for the given network client.\n * If all network clients unsubscribe, the controller stops polling.\n *\n * @param pollingToken - Poll token received from calling startPollingByNetworkClientId\n */\nexport async function currencyRateStopPollingByPollingToken(\n  pollingToken: string,\n) {\n  await submitRequestToBackground('currencyRateStopPollingByPollingToken', [\n    pollingToken,\n  ]);\n  await removePollingTokenFromAppState(pollingToken);\n}\n\n/**\n * Informs the GasFeeController that the UI requires gas fee polling\n *\n * @param networkClientId - unique identifier for the network client\n * @returns polling token that can be used to stop polling\n */\nexport async function gasFeeStartPollingByNetworkClientId(\n  networkClientId: string,\n) {\n  const pollingToken = await submitRequestToBackground(\n    'gasFeeStartPollingByNetworkClientId',\n    [networkClientId],\n  );\n  await addPollingTokenToAppState(pollingToken);\n  return pollingToken;\n}\n\n/**\n * Informs the GasFeeController that the UI no longer requires gas fee polling\n * for the given network client.\n * If all network clients unsubscribe, the controller stops polling.\n *\n * @param pollingToken - Poll token received from calling startPollingByNetworkClientId\n */\nexport async function gasFeeStopPollingByPollingToken(pollingToken: string) {\n  await submitRequestToBackground('gasFeeStopPollingByPollingToken', [\n    pollingToken,\n  ]);\n  await removePollingTokenFromAppState(pollingToken);\n}\n\nexport function getGasFeeTimeEstimate(\n  maxPriorityFeePerGas: string,\n  maxFeePerGas: string,\n): Promise<ReturnType<GasFeeController['getTimeEstimate']>> {\n  return submitRequestToBackground('getGasFeeTimeEstimate', [\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n  ]);\n}\n\nexport async function closeNotificationPopup() {\n  await submitRequestToBackground('markNotificationPopupAsAutomaticallyClosed');\n  global.platform.closeCurrentWindow();\n}\n\n/**\n * @param payload - details of the event to track\n * @param options - options for routing/handling of event\n * @returns\n */\nexport function trackMetaMetricsEvent(\n  payload: MetaMetricsEventPayload,\n  options?: MetaMetricsEventOptions,\n) {\n  return submitRequestToBackground('trackMetaMetricsEvent', [\n    { ...payload, actionId: generateActionId() },\n    options,\n  ]);\n}\n\nexport function createEventFragment(\n  options: MetaMetricsEventFragment,\n): Promise<string> {\n  const actionId = generateActionId();\n  return submitRequestToBackground('createEventFragment', [\n    { ...options, actionId },\n  ]);\n}\n\nexport function createTransactionEventFragment(\n  transactionId: string,\n): Promise<string> {\n  const actionId = generateActionId();\n  return submitRequestToBackground('createTransactionEventFragment', [\n    {\n      transactionId,\n      actionId,\n    },\n  ]);\n}\n\nexport function updateEventFragment(\n  id: string,\n  payload: Partial<MetaMetricsEventFragment>,\n) {\n  return submitRequestToBackground('updateEventFragment', [id, payload]);\n}\n\nexport function finalizeEventFragment(\n  id: string,\n  options?: {\n    abandoned?: boolean;\n    page?: MetaMetricsPageObject;\n    referrer?: MetaMetricsReferrerObject;\n  },\n) {\n  return submitRequestToBackground('finalizeEventFragment', [id, options]);\n}\n\n/**\n * @param payload - details of the page viewed\n * @param options - options for handling the page view\n */\nexport function trackMetaMetricsPage(\n  payload: MetaMetricsPagePayload,\n  options: MetaMetricsPageOptions,\n) {\n  return submitRequestToBackground('trackMetaMetricsPage', [\n    { ...payload, actionId: generateActionId() },\n    options,\n  ]);\n}\n\nexport function resetViewedNotifications() {\n  return submitRequestToBackground('resetViewedNotifications');\n}\n\nexport function updateViewedNotifications(notificationIdViewedStatusMap: {\n  [notificationId: string]: boolean;\n}) {\n  return submitRequestToBackground('updateViewedNotifications', [\n    notificationIdViewedStatusMap,\n  ]);\n}\n\nexport async function setAlertEnabledness(\n  alertId: string,\n  enabledness: boolean,\n) {\n  await submitRequestToBackground('setAlertEnabledness', [\n    alertId,\n    enabledness,\n  ]);\n}\n\nexport async function setUnconnectedAccountAlertShown(origin: string) {\n  await submitRequestToBackground('setUnconnectedAccountAlertShown', [origin]);\n}\n\nexport async function setWeb3ShimUsageAlertDismissed(origin: string) {\n  await submitRequestToBackground('setWeb3ShimUsageAlertDismissed', [origin]);\n}\n\n// Smart Transactions Controller\nexport function clearSmartTransactionFees() {\n  submitRequestToBackground('clearSmartTransactionFees');\n}\n\nexport function fetchSmartTransactionFees(\n  unsignedTransaction: Partial<TransactionParams> & { chainId: string },\n  approveTxParams: TransactionParams,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    if (approveTxParams) {\n      approveTxParams.value = '0x0';\n    }\n    try {\n      const smartTransactionFees = await await submitRequestToBackground(\n        'fetchSmartTransactionFees',\n        [unsignedTransaction, approveTxParams],\n      );\n      dispatch({\n        type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,\n        payload: null,\n      });\n      return smartTransactionFees;\n    } catch (err) {\n      logErrorWithMessage(err);\n      if (isErrorWithMessage(err) && err.message.startsWith('Fetch error:')) {\n        const errorObj = parseSmartTransactionsError(err.message);\n        dispatch({\n          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,\n          payload: errorObj,\n        });\n      }\n      throw err;\n    }\n  };\n}\n\ntype TemporarySmartTransactionGasFees = {\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n  gas: string;\n  value: string;\n};\n\nconst createSignedTransactions = async (\n  unsignedTransaction: Partial<TransactionParams> & { chainId: string },\n  fees: TemporarySmartTransactionGasFees[],\n  areCancelTransactions?: boolean,\n): Promise<TransactionParams[]> => {\n  const unsignedTransactionsWithFees = fees.map((fee) => {\n    const unsignedTransactionWithFees = {\n      ...unsignedTransaction,\n      maxFeePerGas: decimalToHex(fee.maxFeePerGas),\n      maxPriorityFeePerGas: decimalToHex(fee.maxPriorityFeePerGas),\n      gas: areCancelTransactions\n        ? decimalToHex(21000) // It has to be 21000 for cancel transactions, otherwise the API would reject it.\n        : unsignedTransaction.gas,\n      value: unsignedTransaction.value,\n    };\n    if (areCancelTransactions) {\n      unsignedTransactionWithFees.to = unsignedTransactionWithFees.from;\n      unsignedTransactionWithFees.data = '0x';\n    }\n    return unsignedTransactionWithFees;\n  });\n  const signedTransactions = await submitRequestToBackground<\n    TransactionParams[]\n  >('approveTransactionsWithSameNonce', [unsignedTransactionsWithFees]);\n  return signedTransactions;\n};\n\nexport function signAndSendSmartTransaction({\n  unsignedTransaction,\n  smartTransactionFees,\n}: {\n  unsignedTransaction: Partial<TransactionParams> & { chainId: string };\n  smartTransactionFees: {\n    fees: TemporarySmartTransactionGasFees[];\n    cancelFees: TemporarySmartTransactionGasFees[];\n  };\n}): ThunkAction<Promise<string>, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    const signedTransactions = await createSignedTransactions(\n      unsignedTransaction,\n      smartTransactionFees.fees,\n    );\n    const signedCanceledTransactions = await createSignedTransactions(\n      unsignedTransaction,\n      smartTransactionFees.cancelFees,\n      true,\n    );\n    try {\n      const response = await submitRequestToBackground<{ uuid: string }>(\n        'submitSignedTransactions',\n        [\n          {\n            signedTransactions,\n            signedCanceledTransactions,\n            txParams: unsignedTransaction,\n          },\n        ],\n      ); // Returns e.g.: { uuid: 'dP23W7c2kt4FK9TmXOkz1UM2F20' }\n      return response.uuid;\n    } catch (err) {\n      logErrorWithMessage(err);\n      if (isErrorWithMessage(err) && err.message.startsWith('Fetch error:')) {\n        const errorObj = parseSmartTransactionsError(err.message);\n        dispatch({\n          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,\n          payload: errorObj,\n        });\n      }\n      throw err;\n    }\n  };\n}\n\nexport function updateSmartTransaction(\n  uuid: string,\n  txMeta: TransactionMeta,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    try {\n      await submitRequestToBackground('updateSmartTransaction', [\n        {\n          uuid,\n          ...txMeta,\n        },\n      ]);\n    } catch (err) {\n      logErrorWithMessage(err);\n      if (isErrorWithMessage(err) && err.message.startsWith('Fetch error:')) {\n        const errorObj = parseSmartTransactionsError(err.message);\n        dispatch({\n          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,\n          payload: errorObj,\n        });\n      }\n      throw err;\n    }\n  };\n}\n\nexport function setSmartTransactionsRefreshInterval(\n  refreshInterval: number,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async () => {\n    try {\n      await submitRequestToBackground('setStatusRefreshInterval', [\n        refreshInterval,\n      ]);\n    } catch (err) {\n      logErrorWithMessage(err);\n    }\n  };\n}\n\nexport function cancelSmartTransaction(\n  uuid: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    try {\n      await submitRequestToBackground('cancelSmartTransaction', [uuid]);\n    } catch (err) {\n      logErrorWithMessage(err);\n      if (isErrorWithMessage(err) && err.message.startsWith('Fetch error:')) {\n        const errorObj = parseSmartTransactionsError(err.message);\n        dispatch({\n          type: actionConstants.SET_SMART_TRANSACTIONS_ERROR,\n          payload: errorObj,\n        });\n      }\n      throw err;\n    }\n  };\n}\n\n// TODO: Not a thunk but rather a wrapper around a background call\nexport function fetchSmartTransactionsLiveness() {\n  return async () => {\n    try {\n      await submitRequestToBackground('fetchSmartTransactionsLiveness');\n    } catch (err) {\n      logErrorWithMessage(err);\n    }\n  };\n}\n\nexport function dismissSmartTransactionsErrorMessage(): Action {\n  return {\n    type: actionConstants.DISMISS_SMART_TRANSACTIONS_ERROR_MESSAGE,\n  };\n}\n\n// App state\nexport function hideTestNetMessage() {\n  return submitRequestToBackground('setShowTestnetMessageInDropdown', [false]);\n}\n\nexport function hideBetaHeader() {\n  return submitRequestToBackground('setShowBetaHeader', [false]);\n}\n\nexport function hidePermissionsTour() {\n  return submitRequestToBackground('setShowPermissionsTour', [false]);\n}\n\nexport function hideAccountBanner() {\n  return submitRequestToBackground('setShowAccountBanner', [false]);\n}\n\nexport function hideNetworkBanner() {\n  return submitRequestToBackground('setShowNetworkBanner', [false]);\n}\n\nexport function neverShowSwitchedNetworkMessage() {\n  return submitRequestToBackground('setSwitchedNetworkNeverShowMessage', [\n    true,\n  ]);\n}\n\n/**\n * Sends the background state the networkClientId and domain upon network switch\n *\n * @param selectedTabOrigin - The origin to set the new networkClientId for\n * @param networkClientId - The new networkClientId\n */\nexport function setNetworkClientIdForDomain(\n  selectedTabOrigin: string,\n  networkClientId: string,\n): Promise<void> {\n  return submitRequestToBackground('setNetworkClientIdForDomain', [\n    selectedTabOrigin,\n    networkClientId,\n  ]);\n}\n\nexport function setSecurityAlertsEnabled(val: boolean): void {\n  try {\n    submitRequestToBackground('setSecurityAlertsEnabled', [val]);\n  } catch (error) {\n    logErrorWithMessage(error);\n  }\n}\n\nexport async function setWatchEthereumAccountEnabled(value: boolean) {\n  try {\n    await submitRequestToBackground('setWatchEthereumAccountEnabled', [value]);\n  } catch (error) {\n    logErrorWithMessage(error);\n  }\n}\n\nexport async function setBitcoinSupportEnabled(value: boolean) {\n  try {\n    await submitRequestToBackground('setBitcoinSupportEnabled', [value]);\n  } catch (error) {\n    logErrorWithMessage(error);\n  }\n}\n\nexport async function setBitcoinTestnetSupportEnabled(value: boolean) {\n  try {\n    await submitRequestToBackground('setBitcoinTestnetSupportEnabled', [value]);\n  } catch (error) {\n    logErrorWithMessage(error);\n  }\n}\n\n///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\nexport async function setAddSnapAccountEnabled(value: boolean): Promise<void> {\n  try {\n    await submitRequestToBackground('setAddSnapAccountEnabled', [value]);\n  } catch (error) {\n    logErrorWithMessage(error);\n  }\n}\n\nexport function showKeyringSnapRemovalModal(payload: {\n  snapName: string;\n  result: 'success' | 'failed';\n}) {\n  return {\n    type: actionConstants.SHOW_KEYRING_SNAP_REMOVAL_RESULT,\n    payload,\n  };\n}\n\nexport function hideKeyringRemovalResultModal() {\n  return {\n    type: actionConstants.HIDE_KEYRING_SNAP_REMOVAL_RESULT,\n  };\n}\n\nexport async function getSnapAccountsById(snapId: string): Promise<string[]> {\n  const addresses: string[] = await submitRequestToBackground(\n    'getAccountsBySnapId',\n    [snapId],\n  );\n\n  return addresses;\n}\n///: END:ONLY_INCLUDE_IF\n\nexport function setUseRequestQueue(val: boolean): void {\n  try {\n    submitRequestToBackground('setUseRequestQueue', [val]);\n  } catch (error) {\n    logErrorWithMessage(error);\n  }\n}\n\nexport function setUseExternalNameSources(val: boolean): void {\n  try {\n    submitRequestToBackground('setUseExternalNameSources', [val]);\n  } catch (error) {\n    logErrorWithMessage(error);\n  }\n}\n\nexport function setUseTransactionSimulations(val: boolean): void {\n  try {\n    submitRequestToBackground('setUseTransactionSimulations', [val]);\n  } catch (error) {\n    logErrorWithMessage(error);\n  }\n}\n\nexport function setFirstTimeUsedNetwork(chainId: string) {\n  return submitRequestToBackground('setFirstTimeUsedNetwork', [chainId]);\n}\n\n// QR Hardware Wallets\nexport async function submitQRHardwareCryptoHDKey(cbor: Hex) {\n  await submitRequestToBackground('submitQRHardwareCryptoHDKey', [cbor]);\n}\n\nexport async function submitQRHardwareCryptoAccount(cbor: Hex) {\n  await submitRequestToBackground('submitQRHardwareCryptoAccount', [cbor]);\n}\n\nexport function cancelSyncQRHardware(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(hideLoadingIndication());\n    await submitRequestToBackground('cancelSyncQRHardware');\n  };\n}\n\nexport async function submitQRHardwareSignature(requestId: string, cbor: Hex) {\n  await submitRequestToBackground('submitQRHardwareSignature', [\n    requestId,\n    cbor,\n  ]);\n}\n\nexport function cancelQRHardwareSignRequest(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(hideLoadingIndication());\n    await submitRequestToBackground('cancelQRHardwareSignRequest');\n  };\n}\n\nexport function requestUserApproval({\n  origin,\n  type,\n  requestData,\n}: {\n  origin: string;\n  type: string;\n  requestData: object;\n}): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    try {\n      await submitRequestToBackground('requestUserApproval', [\n        {\n          origin,\n          type,\n          requestData,\n        },\n      ]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      dispatch(displayWarning('Had trouble requesting user approval'));\n    }\n  };\n}\n\nexport async function getCurrentNetworkEIP1559Compatibility(): Promise<\n  boolean | undefined\n> {\n  let networkEIP1559Compatibility;\n  try {\n    networkEIP1559Compatibility = await submitRequestToBackground<boolean>(\n      'getCurrentNetworkEIP1559Compatibility',\n    );\n  } catch (error) {\n    console.error(error);\n  }\n  return networkEIP1559Compatibility;\n}\n\nexport async function getNetworkConfigurationByNetworkClientId(\n  networkClientId: NetworkClientId,\n): Promise<NetworkConfiguration | undefined> {\n  let networkConfiguration;\n  try {\n    networkConfiguration =\n      await submitRequestToBackground<NetworkConfiguration>(\n        'getNetworkConfigurationByNetworkClientId',\n        [networkClientId],\n      );\n  } catch (error) {\n    console.error(error);\n  }\n  return networkConfiguration;\n}\n\nexport function updateProposedNames(\n  request: UpdateProposedNamesRequest,\n): ThunkAction<\n  UpdateProposedNamesResult,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (async () => {\n    const data = await submitRequestToBackground<UpdateProposedNamesResult>(\n      'updateProposedNames',\n      [request],\n    );\n\n    return data;\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) as any;\n}\n\nexport function setName(\n  request: SetNameRequest,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (async () => {\n    await submitRequestToBackground<void>('setName', [request]);\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) as any;\n}\n\n/**\n * To create a data deletion regulation for MetaMetrics data deletion\n */\nexport async function createMetaMetricsDataDeletionTask() {\n  return await submitRequestToBackground('createMetaMetricsDataDeletionTask');\n}\n\n/**\n * To check the status of the current delete regulation.\n */\nexport async function updateDataDeletionTaskStatus() {\n  return await submitRequestToBackground('updateDataDeletionTaskStatus');\n}\n\n/**\n * Throw an error in the background for testing purposes.\n *\n * @param message - The error message.\n * @deprecated This is only meant to facilitiate E2E testing. We should not use\n * this for handling errors.\n */\nexport async function throwTestBackgroundError(message: string): Promise<void> {\n  await submitRequestToBackground('throwTestError', [message]);\n}\n\n/**\n * Set status of popover warning for the first snap installation.\n *\n * @param shown - True if popover has been shown.\n * @returns Promise Resolved on successfully submitted background request.\n */\nexport function setSnapsInstallPrivacyWarningShownStatus(shown: boolean) {\n  return async () => {\n    await submitRequestToBackground(\n      'setSnapsInstallPrivacyWarningShownStatus',\n      [shown],\n    );\n  };\n}\n\n/**\n * Update the state of a given Snap interface.\n *\n * @param id - The Snap interface ID.\n * @param state - The interface state.\n * @returns Promise Resolved on successfully submitted background request.\n */\nexport function updateInterfaceState(\n  id: string,\n  state: InterfaceState,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground<void>('updateInterfaceState', [id, state]);\n    await forceUpdateMetamaskState(dispatch);\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) as any;\n}\n\n/**\n * Delete the Snap interface from state.\n *\n * @param id - The Snap interface ID.\n * @returns Promise Resolved on successfully submitted background request.\n */\nexport function deleteInterface(\n  id: string,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return (async (dispatch: MetaMaskReduxDispatch) => {\n    await submitRequestToBackground<void>('deleteInterface', [id]);\n    await forceUpdateMetamaskState(dispatch);\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) as any;\n}\n\nexport function trackInsightSnapUsage(snapId: string) {\n  return async () => {\n    await submitRequestToBackground('trackInsightSnapView', [snapId]);\n  };\n}\n\n///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\nexport async function setSnapsAddSnapAccountModalDismissed() {\n  await submitRequestToBackground('setSnapsAddSnapAccountModalDismissed', [\n    true,\n  ]);\n}\n///: END:ONLY_INCLUDE_IF\n\n/**\n * Initiates the sign-in process.\n *\n * This function dispatches a request to the background script to perform the sign-in operation.\n * Upon success, it dispatches an action with type `PERFORM_SIGN_IN` to update the Redux state.\n * If the operation fails, it logs the error message and rethrows the error.\n *\n * @returns A thunk action that performs the sign-in operation.\n */\nexport function performSignIn(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async () => {\n    try {\n      await submitRequestToBackground('performSignIn');\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'Unknown error occurred during sign-in.';\n      logErrorWithMessage(errorMessage);\n      throw error;\n    }\n  };\n}\n\n/**\n * Initiates the sign-out process.\n *\n * This function dispatches a request to the background script to perform the sign-out operation.\n * Upon success, it dispatches an action with type `PERFORM_SIGN_OUT` to update the Redux state.\n * If the operation fails, it logs the error message and rethrows the error.\n *\n * @returns A thunk action that performs the sign-out operation.\n */\nexport function performSignOut(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async () => {\n    try {\n      await submitRequestToBackground('performSignOut');\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n  };\n}\n\n/**\n * Enables profile syncing.\n *\n * This function sends a request to the background script to enable profile syncing across devices.\n * Upon success, it dispatches an action with type `SET_PROFILE_SYNCING_ENABLED` to update the Redux state.\n * If the operation encounters an error, it logs the error message and rethrows the error to be handled by the caller.\n *\n * @returns A thunk action that, when dispatched, attempts to enable profile syncing.\n */\nexport function enableProfileSyncing(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async () => {\n    try {\n      await submitRequestToBackground('enableProfileSyncing');\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n  };\n}\n\n/**\n * Disables profile syncing.\n *\n * This function sends a request to the background script to disable profile syncing across devices.\n * Upon success, it dispatches an action with type `SET_PROFILE_SYNCING_DISABLED` to update the Redux state.\n * If the operation fails, it logs the error message and rethrows the error to ensure it is handled appropriately.\n *\n * @returns A thunk action that, when dispatched, attempts to disable profile syncing.\n */\nexport function disableProfileSyncing(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async () => {\n    try {\n      await submitRequestToBackground('disableProfileSyncing');\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n  };\n}\n\n/**\n * Initiates the creation of on-chain triggers.\n *\n * This function dispatches a request to the background script to create on-chain triggers.\n * Upon success, it dispatches an action with type `CREATE_ON_CHAIN_TRIGGERS` to update the Redux state.\n * If the operation fails, it logs the error message and rethrows the error to ensure it is handled appropriately.\n *\n * @returns A thunk action that, when dispatched, attempts to create on-chain triggers.\n */\nexport function createOnChainTriggers(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async () => {\n    try {\n      await submitRequestToBackground('createOnChainTriggers');\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n  };\n}\n\n/**\n * Deletes on-chain triggers associated with specified accounts.\n *\n * This function sends a request to the background script to delete on-chain triggers for the provided accounts.\n * Upon success, it dispatches an action with type `DELETE_ON_CHAIN_TRIGGERS_BY_ACCOUNT` to update the Redux state.\n * If the operation encounters an error, it logs the error message and rethrows the error to ensure it is handled appropriately.\n *\n * @param accounts - An array of account identifiers for which on-chain triggers should be deleted.\n * @returns A thunk action that, when dispatched, attempts to delete on-chain triggers for the specified accounts.\n */\nexport function deleteOnChainTriggersByAccount(\n  accounts: string[],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async () => {\n    try {\n      await submitRequestToBackground('deleteOnChainTriggersByAccount', [\n        accounts,\n      ]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n  };\n}\n\n/**\n * Updates on-chain triggers for specified accounts.\n *\n * This function dispatches a request to the background script to update on-chain triggers associated with the given accounts.\n * Upon success, it dispatches an action with type `UPDATE_ON_CHAIN_TRIGGERS_BY_ACCOUNT` to update the Redux state.\n * If the operation fails, it logs the error message and rethrows the error to ensure proper error handling.\n *\n * @param accounts - An array of account identifiers for which on-chain triggers should be updated.\n * @returns A thunk action that, when dispatched, attempts to update on-chain triggers for the specified accounts.\n */\nexport function updateOnChainTriggersByAccount(\n  accounts: string[],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async () => {\n    try {\n      await submitRequestToBackground('updateOnChainTriggersByAccount', [\n        accounts,\n      ]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n  };\n}\n\n/**\n * Fetches and updates MetaMask notifications.\n *\n * This function sends a request to the background script to fetch the latest notifications and update the state accordingly.\n * Upon success, it dispatches an action with type `FETCH_AND_UPDATE_METAMASK_NOTIFICATIONS` to update the Redux state.\n * If the operation encounters an error, it logs the error message and rethrows the error to ensure it is handled appropriately.\n *\n * @returns A thunk action that, when dispatched, attempts to fetch and update MetaMask notifications.\n */\nexport function fetchAndUpdateMetamaskNotifications(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async () => {\n    try {\n      const response = await submitRequestToBackground(\n        'fetchAndUpdateMetamaskNotifications',\n      );\n      return response;\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n  };\n}\n\n/**\n * Synchronizes accounts data with user storage between devices.\n *\n * This function sends a request to the background script to sync accounts data and update the state accordingly.\n * If the operation encounters an error, it logs the error message and rethrows the error to ensure it is handled appropriately.\n *\n * @returns A thunk action that, when dispatched, attempts to synchronize accounts data with user storage between devices.\n */\nexport function syncInternalAccountsWithUserStorage(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return async () => {\n    try {\n      const response = await submitRequestToBackground(\n        'syncInternalAccountsWithUserStorage',\n      );\n      return response;\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n  };\n}\n\n/**\n * Marks MetaMask notifications as read.\n *\n * This function sends a request to the background script to mark the specified notifications as read.\n * Upon success, it dispatches an action with type `MARK_METAMASK_NOTIFICATIONS_AS_READ` to update the Redux state.\n * If the operation encounters an error, it logs the error message and rethrows the error to ensure it is handled appropriately.\n *\n * @param notifications - An array of notification identifiers to be marked as read.\n * @returns A thunk action that, when dispatched, attempts to mark MetaMask notifications as read.\n */\nexport function markMetamaskNotificationsAsRead(\n  notifications: NotificationServicesController.Types.MarkAsReadNotificationsParam,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async () => {\n    try {\n      await submitRequestToBackground('markMetamaskNotificationsAsRead', [\n        notifications,\n      ]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n  };\n}\n\n/**\n * Enables or disables feature announcements.\n *\n * This function sends a request to the background script to toggle the enabled state of feature announcements.\n * Upon success, it dispatches an action with type `SET_FEATURE_ANNOUNCEMENTS_ENABLED` to update the Redux state.\n * If the operation encounters an error, it logs the error message and rethrows the error to ensure it is handled appropriately.\n *\n * @param state - A boolean indicating whether to enable (true) or disable (false) feature announcements.\n * @returns A thunk action that, when dispatched, attempts to set the enabled state of feature announcements.\n */\nexport function setFeatureAnnouncementsEnabled(\n  state: boolean,\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async () => {\n    try {\n      await submitRequestToBackground('setFeatureAnnouncementsEnabled', [\n        state,\n      ]);\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n  };\n}\n\n/**\n * Checks the presence of accounts in user storage.\n *\n * This function sends a request to the background script to check the presence of specified accounts in user storage.\n * Upon success, it dispatches an action with type `CHECK_ACCOUNTS_PRESENCE` to update the Redux state.\n * If the operation encounters an error, it logs the error message and rethrows the error to ensure it is handled appropriately.\n *\n * @param accounts - An array of account addresses to be checked.\n * @returns A thunk action that, when dispatched, attempts to check the presence of accounts in user storage.\n */\nexport function checkAccountsPresence(\n  accounts: string[],\n): ThunkAction<void, MetaMaskReduxState, unknown, AnyAction> {\n  return async () => {\n    try {\n      const response = await submitRequestToBackground(\n        'checkAccountsPresence',\n        [accounts],\n      );\n      return response;\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    }\n  };\n}\n\n/**\n * Triggers a modal to confirm the action of turning off profile syncing.\n * This function dispatches an action to show a modal dialog asking the user to confirm if they want to turn off profile syncing.\n *\n * @returns A thunk action that, when dispatched, shows the confirmation modal.\n */\nexport function showConfirmTurnOffProfileSyncing(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(\n      showModal({\n        name: 'CONFIRM_TURN_OFF_PROFILE_SYNCING',\n      }),\n    );\n  };\n}\n\n/**\n * Triggers a modal to confirm the action of turning on MetaMask notifications.\n * This function dispatches an action to show a modal dialog asking the user to confirm if they want to turn on MetaMask notifications.\n *\n * @returns A thunk action that, when dispatched, shows the confirmation modal.\n */\nexport function showConfirmTurnOnMetamaskNotifications(): ThunkAction<\n  void,\n  MetaMaskReduxState,\n  unknown,\n  AnyAction\n> {\n  return (dispatch: MetaMaskReduxDispatch) => {\n    dispatch(\n      showModal({\n        name: 'TURN_ON_METAMASK_NOTIFICATIONS',\n      }),\n    );\n  };\n}\n\n/**\n * Enables MetaMask notifications.\n * This function dispatches a request to the background script to enable MetaMask notifications.\n * If the operation fails, it logs the error message and rethrows the error to ensure it is handled appropriately.\n *\n * @returns A thunk action that, when dispatched, attempts to enable MetaMask notifications.\n */\nexport function enableMetamaskNotifications(): ThunkAction<\n  void,\n  unknown,\n  AnyAction\n> {\n  return async () => {\n    try {\n      await submitRequestToBackground('enableMetamaskNotifications');\n    } catch (error) {\n      log.error(error);\n      throw error;\n    }\n  };\n}\n\n/**\n * Disables MetaMask notifications.\n * This function dispatches a request to the background script to disable MetaMask notifications.\n * If the operation fails, it logs the error message and rethrows the error to ensure it is handled appropriately.\n *\n * @returns A thunk action that, when dispatched, attempts to disable MetaMask notifications.\n */\nexport function disableMetamaskNotifications(): ThunkAction<\n  void,\n  unknown,\n  AnyAction\n> {\n  return async () => {\n    try {\n      await submitRequestToBackground('disableMetamaskNotifications');\n    } catch (error) {\n      log.error(error);\n      throw error;\n    }\n  };\n}\n\nexport function setIsProfileSyncingEnabled(\n  isProfileSyncingEnabled: boolean,\n): ThunkAction<void, unknown, unknown, AnyAction> {\n  return async (dispatch: MetaMaskReduxDispatch) => {\n    try {\n      dispatch(showLoadingIndication());\n      await submitRequestToBackground('setIsProfileSyncingEnabled', [\n        isProfileSyncingEnabled,\n      ]);\n      dispatch(hideLoadingIndication());\n    } catch (error) {\n      logErrorWithMessage(error);\n      throw error;\n    } finally {\n      dispatch(hideLoadingIndication());\n    }\n  };\n}\n\nexport function setConfirmationAdvancedDetailsOpen(value: boolean) {\n  return setPreference('showConfirmationAdvancedDetails', value);\n}\n\nexport async function getNextAvailableAccountName(\n  keyring?: KeyringTypes,\n): Promise<string> {\n  return await submitRequestToBackground<string>(\n    'getNextAvailableAccountName',\n    [keyring],\n  );\n}\n\nexport async function decodeTransactionData({\n  transactionData,\n  contractAddress,\n  chainId,\n}: {\n  transactionData: Hex;\n  contractAddress: Hex;\n  chainId: Hex;\n}): Promise<DecodedTransactionDataResponse | undefined> {\n  return await submitRequestToBackground<string>('decodeTransactionData', [\n    {\n      transactionData,\n      contractAddress,\n      chainId,\n    },\n  ]);\n}\n\nexport async function multichainUpdateBalance(\n  accountId: string,\n): Promise<void> {\n  return await submitRequestToBackground<void>('multichainUpdateBalance', [\n    accountId,\n  ]);\n}\n\nexport async function multichainUpdateBalances(): Promise<void> {\n  return await submitRequestToBackground<void>('multichainUpdateBalances', []);\n}\n\nexport async function getLastInteractedConfirmationInfo(): Promise<\n  LastInteractedConfirmationInfo | undefined\n> {\n  return await submitRequestToBackground<void>(\n    'getLastInteractedConfirmationInfo',\n  );\n}\n\nexport async function setLastInteractedConfirmationInfo(\n  info: LastInteractedConfirmationInfo,\n): Promise<void> {\n  return await submitRequestToBackground<void>(\n    'setLastInteractedConfirmationInfo',\n    [info],\n  );\n}\n\nexport async function endBackgroundTrace(request: EndTraceRequest) {\n  // We want to record the timestamp immediately, not after the request reaches the background.\n  // Sentry uses the Performance interface for more accuracy, so we also must use it to align with\n  // other timings.\n  const timestamp =\n    request.timestamp || performance.timeOrigin + performance.now();\n\n  await submitRequestToBackground<void>('endTrace', [\n    { ...request, timestamp },\n  ]);\n}\n\n/**\n * Apply the state patches from the background.\n * Intentionally not using immer as a temporary measure to avoid\n * freezing the resulting state and requiring further fixes\n * to remove direct state mutations.\n *\n * @param oldState - The current state.\n * @param patches - The patches to apply.\n * Only supports 'replace' operations with a single path element.\n * @returns The new state.\n */\nfunction applyPatches(\n  oldState: Record<string, unknown>,\n  patches: Patch[],\n): Record<string, unknown> {\n  const newState = { ...oldState };\n\n  for (const patch of patches) {\n    const { op, path, value } = patch;\n\n    if (op === 'replace') {\n      newState[path[0]] = value;\n    } else {\n      throw new Error(`Unsupported patch operation: ${op}`);\n    }\n  }\n\n  return newState;\n}\n","import pify from 'pify';\n\nlet background:\n  | ({\n      connectionStream: { readable: boolean };\n      DisconnectError: typeof Error;\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } & Record<string, (...args: any[]) => any>)\n  | null = null;\nlet promisifiedBackground: Record<\n  string,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (...args: any[]) => Promise<any>\n> | null = null;\n\nexport const generateActionId = () => Date.now() + Math.random();\n\n/**\n * Promise-style call to background method invokes promisifiedBackground method directly.\n *\n * @param method - name of the background method\n * @param [args] - arguments to that method, if any\n * @returns\n */\nexport function submitRequestToBackground<R>(\n  method: string,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args?: any[],\n): Promise<R> {\n  return promisifiedBackground?.[method](\n    ...(args ?? []),\n  ) as unknown as Promise<R>;\n}\n\ntype CallbackMethod<R = unknown> = (error?: unknown, result?: R) => void;\n\n/**\n * [Deprecated] Callback-style call to background method\n * invokes promisifiedBackground method directly.\n *\n * @deprecated Use async `submitRequestToBackground` function instead.\n * @param method - name of the background method\n * @param [args] - arguments to that method, if any\n * @param callback - Node style (error, result) callback for finishing the operation\n */\nexport const callBackgroundMethod = <R>(\n  method: string,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  args: any[],\n  callback: CallbackMethod<R>,\n) => {\n  background?.[method](...args, callback);\n};\n\n/**\n * Sets/replaces the background connection reference\n * Under MV3 it also triggers queue processing if the new background is connected\n *\n * @param backgroundConnection\n */\nexport async function setBackgroundConnection(\n  backgroundConnection: typeof background,\n) {\n  background = backgroundConnection;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  promisifiedBackground = pify(background as Record<string, any>);\n}\n","import { AllProperties } from '../../../shared/modules/object.utils';\n\nexport const MMI_SENTRY_BACKGROUND_STATE = {\n  MMIController: {\n    opts: true,\n  },\n  CustodyController: {\n    store: true,\n  },\n  MmiConfigurationController: {\n    store: true,\n    configurationClient: true,\n  },\n};\n\n// This describes the subset of background controller state attached to errors\n// sent to Sentry These properties have some potential to be useful for\n// debugging, and they do not contain any identifiable information.\nexport const SENTRY_BACKGROUND_STATE = {\n  AccountsController: {\n    internalAccounts: {\n      accounts: false,\n      selectedAccount: false,\n    },\n  },\n  AccountTracker: {\n    accounts: false,\n    accountsByChainId: false,\n    currentBlockGasLimit: true,\n    currentBlockGasLimitByChainId: true,\n  },\n  AddressBookController: {\n    addressBook: false,\n  },\n  AlertController: {\n    alertEnabledness: true,\n    unconnectedAccountAlertShownOrigins: false,\n    web3ShimUsageOrigins: false,\n  },\n  AnnouncementController: {\n    announcements: false,\n  },\n  AuthenticationController: {\n    isSignedIn: false,\n  },\n  NetworkOrderController: {\n    orderedNetworkList: [],\n  },\n  AccountOrderController: {\n    pinnedAccountList: [],\n    hiddenAccountList: [],\n  },\n  AppMetadataController: {\n    currentAppVersion: true,\n    currentMigrationVersion: true,\n    previousAppVersion: true,\n    previousMigrationVersion: true,\n  },\n  ApprovalController: {\n    approvalFlows: false,\n    pendingApprovals: false,\n    pendingApprovalCount: false,\n  },\n  AppStateController: {\n    browserEnvironment: true,\n    connectedStatusPopoverHasBeenShown: true,\n    currentPopupId: false,\n    onboardingDate: false,\n    currentExtensionPopupId: false,\n    defaultHomeActiveTabName: true,\n    fullScreenGasPollTokens: true,\n    hadAdvancedGasFeesSetPriorToMigration92_3: true,\n    nftsDetectionNoticeDismissed: true,\n    nftsDropdownState: true,\n    notificationGasPollTokens: true,\n    outdatedBrowserWarningLastShown: true,\n    popupGasPollTokens: true,\n    qrHardware: true,\n    recoveryPhraseReminderHasBeenShown: true,\n    recoveryPhraseReminderLastShown: true,\n    showBetaHeader: true,\n    showPermissionsTour: true,\n    showNetworkBanner: true,\n    showAccountBanner: true,\n    switchedNetworkDetails: false,\n    switchedNetworkNeverShowMessage: false,\n    showTestnetMessageInDropdown: true,\n    surveyLinkLastClickedOrClosed: true,\n    snapsInstallPrivacyWarningShown: true,\n    termsOfUseLastAgreed: true,\n    timeoutMinutes: true,\n    trezorModel: true,\n    usedNetworks: true,\n  },\n  MultichainBalancesController: {\n    balances: false,\n  },\n  BridgeController: {\n    bridgeState: {\n      bridgeFeatureFlags: {\n        extensionSupport: false,\n        destNetworkAllowlist: [],\n        srcNetworkAllowlist: [],\n      },\n    },\n  },\n  CronjobController: {\n    jobs: false,\n  },\n  CurrencyController: {\n    currentCurrency: true,\n    currencyRates: true,\n  },\n  DecryptMessageController: {\n    unapprovedDecryptMsgs: false,\n    unapprovedDecryptMsgCount: true,\n  },\n  EncryptionPublicKeyController: {\n    unapprovedEncryptionPublicKeyMsgs: false,\n    unapprovedEncryptionPublicKeyMsgCount: true,\n  },\n  EnsController: {\n    ensResolutionsByAddress: false,\n    ensEntries: false,\n  },\n  GasFeeController: {\n    estimatedGasFeeTimeBounds: true,\n    gasEstimateType: true,\n    gasFeeEstimates: true,\n    gasFeeEstimatesByChainId: true,\n    nonRPCGasFeeApisDisabled: false,\n  },\n  KeyringController: {\n    isUnlocked: true,\n    keyrings: false,\n  },\n  LoggingController: {\n    logs: false,\n  },\n  NotificationServicesController: {\n    subscriptionAccountsSeen: false,\n    isMetamaskNotificationsFeatureSeen: false,\n    isNotificationServicesEnabled: false,\n    isFeatureAnnouncementsEnabled: false,\n    metamaskNotificationsList: false,\n    metamaskNotificationsReadList: false,\n    isCheckingAccountsPresence: false,\n    isFetchingMetamaskNotifications: false,\n    isUpdatingMetamaskNotifications: false,\n    isUpdatingMetamaskNotificationsAccount: false,\n  },\n  MetaMetricsController: {\n    eventsBeforeMetricsOptIn: false,\n    fragments: false,\n    metaMetricsId: true,\n    participateInMetaMetrics: true,\n    previousUserTraits: false,\n    segmentApiCalls: false,\n    traits: false,\n    dataCollectionForMarketing: false,\n    marketingCampaignCookieId: true,\n    latestNonAnonymousEventTimestamp: true,\n  },\n  MetaMetricsDataDeletionController: {\n    metaMetricsDataDeletionId: true,\n    metaMetricsDataDeletionTimestamp: true,\n  },\n  NameController: {\n    names: false,\n    nameSources: false,\n    useExternalNameSources: false,\n  },\n  NetworkController: {\n    networkConfigurations: false,\n    networksMetadata: true,\n    selectedNetworkClientId: false,\n  },\n  NftController: {\n    allNftContracts: false,\n    allNfts: false,\n    ignoredNfts: false,\n  },\n  NotificationController: {\n    notifications: false,\n  },\n  OnboardingController: {\n    completedOnboarding: true,\n    firstTimeFlowType: true,\n    onboardingTabs: false,\n    seedPhraseBackedUp: true,\n  },\n  PPOMController: {\n    securityAlertsEnabled: false,\n    storageMetadata: [],\n    versionInfo: [],\n  },\n  PermissionController: {\n    subjects: false,\n  },\n  PermissionLogController: {\n    permissionActivityLog: false,\n    permissionHistory: false,\n  },\n  PhishingController: {},\n  PreferencesController: {\n    advancedGasFee: true,\n    currentLocale: true,\n    dismissSeedBackUpReminder: true,\n    featureFlags: true,\n    forgottenPassword: true,\n    identities: false,\n    incomingTransactionsPreferences: true,\n    isIpfsGatewayEnabled: false,\n    ipfsGateway: false,\n    knownMethodData: false,\n    ledgerTransportType: true,\n    lostIdentities: false,\n    openSeaEnabled: true,\n    preferences: {\n      autoLockTimeLimit: true,\n      hideZeroBalanceTokens: true,\n      redesignedConfirmationsEnabled: true,\n      redesignedTransactionsEnabled: false,\n      isRedesignedConfirmationsDeveloperEnabled: false,\n      showExtensionInFullSizeView: true,\n      showFiatInTestnets: true,\n      showTestNetworks: true,\n      smartTransactionsOptInStatus: true,\n      useNativeCurrencyAsPrimaryCurrency: true,\n      petnamesEnabled: true,\n      showConfirmationAdvancedDetails: true,\n    },\n    useExternalServices: false,\n    selectedAddress: false,\n    snapRegistryList: false,\n    theme: true,\n    signatureSecurityAlertResponses: false,\n    use4ByteResolution: true,\n    useAddressBarEnsResolution: true,\n    useBlockie: true,\n    useCurrencyRateCheck: true,\n    useMultiAccountBalanceChecker: true,\n    useNftDetection: true,\n    useNonceField: true,\n    usePhishDetect: true,\n    useTokenDetection: true,\n    useRequestQueue: true,\n    useTransactionSimulations: true,\n    enableMV3TimestampSave: true,\n  },\n  NotificationServicesPushController: {\n    fcmToken: false,\n  },\n  MultichainRatesController: {\n    fiatCurrency: true,\n    rates: true,\n    cryptocurrencies: true,\n  },\n  QueuedRequestController: {\n    queuedRequestCount: true,\n  },\n  SelectedNetworkController: { domains: false },\n  SignatureController: {\n    unapprovedPersonalMsgCount: true,\n    unapprovedPersonalMsgs: false,\n    unapprovedTypedMessages: false,\n    unapprovedTypedMessagesCount: true,\n  },\n  SmartTransactionsController: {\n    smartTransactionsState: {\n      fees: {\n        approvalTxFees: true,\n        tradeTxFees: true,\n      },\n      liveness: true,\n      smartTransactions: false,\n      userOptIn: true,\n      userOptInV2: true,\n    },\n  },\n  SnapController: {\n    snaps: false,\n  },\n  SnapInterfaceController: {\n    interfaces: false,\n  },\n  SnapInsightsController: {\n    insights: false,\n  },\n  SnapsRegistry: {\n    database: false,\n    lastUpdated: false,\n    databaseUnavailable: false,\n  },\n  SubjectMetadataController: {\n    subjectMetadata: false,\n  },\n  SwapsController: {\n    swapsState: {\n      approveTxId: false,\n      customApproveTxData: false,\n      customGasPrice: true,\n      customMaxFeePerGas: true,\n      customMaxGas: true,\n      customMaxPriorityFeePerGas: true,\n      errorKey: true,\n      fetchParams: true,\n      quotes: false,\n      quotesLastFetched: true,\n      quotesPollingLimitEnabled: true,\n      routeState: true,\n      saveFetchedQuotes: true,\n      selectedAggId: true,\n      swapsFeatureFlags: true,\n      swapsFeatureIsLive: true,\n      swapsQuotePrefetchingRefreshTime: true,\n      swapsQuoteRefreshTime: true,\n      swapsStxBatchStatusRefreshTime: true,\n      swapsStxStatusDeadline: true,\n      swapsStxGetTransactionsRefreshTime: true,\n      swapsStxMaxFeeMultiplier: true,\n      swapsUserFeeLevel: true,\n      tokens: false,\n      topAggId: false,\n      tradeTxId: false,\n    },\n  },\n  TokenDetectionController: {\n    [AllProperties]: false,\n  },\n  TokenListController: {\n    preventPollingOnNetworkRestart: true,\n    tokenList: false,\n    tokensChainsCache: {\n      [AllProperties]: false,\n    },\n  },\n  TokenRatesController: {\n    marketData: false,\n  },\n  TokensController: {\n    allDetectedTokens: {\n      [AllProperties]: false,\n    },\n    allIgnoredTokens: {\n      [AllProperties]: false,\n    },\n    allTokens: {\n      [AllProperties]: false,\n    },\n    detectedTokens: false,\n    ignoredTokens: false,\n    tokens: false,\n  },\n  TransactionController: {\n    transactions: false,\n    lastFetchedBlockNumbers: false,\n    methodData: false,\n  },\n  TxController: {\n    transactions: false,\n  },\n  UserOperationController: {\n    userOperations: false,\n  },\n  UserStorageController: {\n    isProfileSyncingEnabled: true,\n    isProfileSyncingUpdateLoading: false,\n  },\n};\n\nconst flattenedBackgroundStateMask = Object.values(\n  SENTRY_BACKGROUND_STATE,\n).reduce((partialBackgroundState, controllerState: object) => {\n  return {\n    ...partialBackgroundState,\n    ...controllerState,\n  };\n}, {});\n\n// This describes the subset of Redux state attached to errors sent to Sentry\n// These properties have some potential to be useful for debugging, and they do\n// not contain any identifiable information.\nexport const SENTRY_UI_STATE = {\n  gas: true,\n  history: true,\n  metamask: {\n    ...flattenedBackgroundStateMask,\n    // This property comes from the background but isn't in controller state\n    isInitialized: true,\n    // These properties are in the `metamask` slice but not in the background state\n    customNonceValue: true,\n    isAccountMenuOpen: true,\n    isNetworkMenuOpen: true,\n    nextNonce: true,\n    pendingTokens: false,\n    welcomeScreenSeen: true,\n    confirmationExchangeRates: true,\n    useSafeChainsListValidation: true,\n    watchEthereumAccountEnabled: false,\n    bitcoinSupportEnabled: false,\n    bitcoinTestnetSupportEnabled: false,\n    ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n    addSnapAccountEnabled: false,\n    snapsAddSnapAccountModalDismissed: false,\n    ///: END:ONLY_INCLUDE_IF\n    switchedNetworkDetails: false,\n    switchedNetworkNeverShowMessage: false,\n    newPrivacyPolicyToastClickedOrClosed: false,\n    newPrivacyPolicyToastShownDate: false,\n  },\n  unconnectedAccount: true,\n};\n","const ethJsRpcSlug = 'Error: [ethjs-rpc] rpc error with payload ';\nconst errorLabelPrefix = 'Error: ';\n\n/**\n * Extracts the important part of an ethjs-rpc error message. If the passed error is not an isEthjsRpcError, the error\n * is returned unchanged.\n *\n * @param {string} errorMessage - The error message to parse\n * @returns {string} Returns an error message, either the same as was passed, or the ending message portion of an isEthjsRpcError\n * @example\n * // returns 'Transaction Failed: replacement transaction underpriced'\n * extractEthjsErrorMessage(`Error: [ethjs-rpc] rpc error with payload {\"id\":3947817945380,\"jsonrpc\":\"2.0\",\"params\":[\"0xf8eb8208708477359400830398539406012c8cf97bead5deae237070f9587f8e7a266d80b8843d7d3f5a0000000000000000000000000000000000000000000000000000000000081d1a000000000000000000000000000000000000000000000000001ff973cafa800000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000003f48025a04c32a9b630e0d9e7ff361562d850c86b7a884908135956a7e4a336fa0300d19ca06830776423f25218e8d19b267161db526e66895567147015b1f3fc47aef9a3c7\"],\"method\":\"eth_sendRawTransaction\"} Error: replacement transaction underpriced`)\n */\nexport default function extractEthjsErrorMessage(errorMessage) {\n  const isEthjsRpcError = errorMessage.includes(ethJsRpcSlug);\n  if (isEthjsRpcError) {\n    const payloadAndError = errorMessage.slice(ethJsRpcSlug.length);\n    const originalError = payloadAndError.slice(\n      payloadAndError.indexOf(errorLabelPrefix) + errorLabelPrefix.length,\n    );\n    return originalError;\n  }\n  return errorMessage;\n}\n","import browser from 'webextension-polyfill';\nimport allLocales from '../../_locales/index.json';\n\n// ensure that we default users with browser language code 'zh' to the supported 'zh_CN' language code\nconst existingLocaleCodes = { zh: 'zh_CN' };\n\n// mapping some browsers return hyphen instead underscore in locale codes (e.g. zh_TW -> zh-tw)\nallLocales.forEach((locale) => {\n  if (locale && locale.code) {\n    existingLocaleCodes[locale.code.toLowerCase().replace('_', '-')] =\n      locale.code;\n  }\n});\n\n/**\n * Returns a preferred language code, based on settings within the user's browser. If we have no translations for the\n * users preferred locales, 'en' is returned.\n *\n * @returns {Promise<string>} Promises a locale code, either one from the user's preferred list that we have a translation for, or 'en'\n */\nexport default async function getFirstPreferredLangCode() {\n  let userPreferredLocaleCodes;\n\n  try {\n    userPreferredLocaleCodes = await browser.i18n.getAcceptLanguages();\n  } catch (e) {\n    // Brave currently throws when calling getAcceptLanguages, so this handles that.\n    userPreferredLocaleCodes = [];\n  }\n\n  // safeguard for Brave Browser until they implement chrome.i18n.getAcceptLanguages\n  // https://github.com/MetaMask/metamask-extension/issues/4270\n  if (!userPreferredLocaleCodes) {\n    userPreferredLocaleCodes = [];\n  }\n\n  let firstPreferredLangCode = userPreferredLocaleCodes\n    .map((code) => code.toLowerCase().replace('_', '-'))\n    .find(\n      (code) =>\n        existingLocaleCodes[code] !== undefined ||\n        existingLocaleCodes[code.split('-')[0]] !== undefined,\n    );\n\n  // if we have matched against a code with a '-' present, meaning its a regional\n  // code for which we have a non-regioned locale, we need to set firstPreferredLangCode\n  // to the correct non-regional code.\n  if (\n    firstPreferredLangCode !== undefined &&\n    existingLocaleCodes[firstPreferredLangCode] === undefined\n  ) {\n    firstPreferredLangCode = firstPreferredLangCode.split('-')[0];\n  }\n\n  return existingLocaleCodes[firstPreferredLangCode] || 'en';\n}\n","import browser from 'webextension-polyfill';\nimport log from 'loglevel';\nimport { captureException } from '@sentry/browser';\nimport { checkForLastError } from '../../../shared/modules/browser-runtime.utils';\n\n/**\n * A wrapper around the extension's storage local API\n */\nexport default class ExtensionStore {\n  constructor() {\n    this.isSupported = Boolean(browser.storage.local);\n    if (!this.isSupported) {\n      log.error('Storage local API not available.');\n    }\n    // we use this flag to avoid flooding sentry with a ton of errors:\n    // once data persistence fails once and it flips true we don't send further\n    // data persistence errors to sentry\n    this.dataPersistenceFailing = false;\n    this.mostRecentRetrievedState = null;\n    this.isExtensionInitialized = false;\n  }\n\n  setMetadata(initMetaData) {\n    this.metadata = initMetaData;\n  }\n\n  async set(state) {\n    if (!this.isSupported) {\n      throw new Error(\n        'Metamask- cannot persist state to local store as this browser does not support this action',\n      );\n    }\n    if (!state) {\n      throw new Error('MetaMask - updated state is missing');\n    }\n    if (!this.metadata) {\n      throw new Error(\n        'MetaMask - metadata must be set on instance of ExtensionStore before calling \"set\"',\n      );\n    }\n    try {\n      // we format the data for storage as an object with the \"data\" key for the controller state object\n      // and the \"meta\" key for a metadata object containing a version number that tracks how the data shape\n      // has changed using migrations to adapt to backwards incompatible changes\n      await this._set({ data: state, meta: this.metadata });\n      if (this.dataPersistenceFailing) {\n        this.dataPersistenceFailing = false;\n      }\n    } catch (err) {\n      if (!this.dataPersistenceFailing) {\n        this.dataPersistenceFailing = true;\n        captureException(err);\n      }\n      log.error('error setting state in local store:', err);\n    } finally {\n      this.isExtensionInitialized = true;\n    }\n  }\n\n  /**\n   * Returns all of the keys currently saved\n   *\n   * @returns {Promise<*>}\n   */\n  async get() {\n    if (!this.isSupported) {\n      return undefined;\n    }\n\n    const result = await this._get();\n    // extension.storage.local always returns an obj\n    // if the object is empty, treat it as undefined\n    if (isEmpty(result)) {\n      this.mostRecentRetrievedState = null;\n      return undefined;\n    }\n    if (!this.isExtensionInitialized) {\n      this.mostRecentRetrievedState = result;\n    }\n    return result;\n  }\n\n  /**\n   * Returns all of the keys currently saved\n   *\n   * @private\n   * @returns {object} the key-value map from local storage\n   */\n  _get() {\n    const { local } = browser.storage;\n    return new Promise((resolve, reject) => {\n      local.get(null).then((/** @type {any} */ result) => {\n        const err = checkForLastError();\n        if (err) {\n          reject(err);\n        } else {\n          resolve(result);\n        }\n      });\n    });\n  }\n\n  /**\n   * Sets the key in local state\n   *\n   * @param {object} obj - The key to set\n   * @returns {Promise<void>}\n   * @private\n   */\n  _set(obj) {\n    const { local } = browser.storage;\n    return new Promise((resolve, reject) => {\n      local.set(obj).then(() => {\n        const err = checkForLastError();\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  cleanUpMostRecentRetrievedState() {\n    if (this.mostRecentRetrievedState) {\n      this.mostRecentRetrievedState = null;\n    }\n  }\n}\n\n/**\n * Returns whether or not the given object contains no keys\n *\n * @param {object} obj - The object to check\n * @returns {boolean}\n */\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n","import browser from 'webextension-polyfill';\n\nexport type ManifestFlags = {\n  circleci?: {\n    enabled: boolean;\n    branch?: string;\n    buildNum?: number;\n    job?: string;\n    nodeIndex?: number;\n    prNumber?: number;\n  };\n  doNotForceSentryForThisTest?: boolean;\n};\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- you can't extend a type, we want this to be an interface\ninterface WebExtensionManifestWithFlags\n  extends browser.Manifest.WebExtensionManifest {\n  _flags?: ManifestFlags;\n}\n\n/**\n * Get the runtime flags that were placed in manifest.json by manifest-flag-mocha-hooks.ts\n *\n * @returns flags if they exist, otherwise an empty object\n */\nexport function getManifestFlags(): ManifestFlags {\n  return (\n    (browser.runtime.getManifest() as WebExtensionManifestWithFlags)._flags ||\n    {}\n  );\n}\n","import { Hex, isValidHexAddress } from '@metamask/utils';\nimport { normalize as normalizeEthAddress } from '@metamask/eth-sig-util';\nimport { toChecksumHexAddress } from '../../../../shared/modules/hexstring-utils';\n\n/**\n * Checks if an address is an ethereum one.\n *\n * @param address - An address.\n * @returns True if the address is an ethereum one, false otherwise.\n */\nexport function isEthAddress(address: string): boolean {\n  return isValidHexAddress(address as Hex);\n}\n\n/**\n * Normalize an address. The address might be returned as-is, if there's no normalizer available.\n *\n * @param address - An address to normalize.\n * @returns The normalized address.\n */\nexport function normalizeAddress(address: string): string {\n  // NOTE: We assume that the overhead over checking the address format\n  // at runtime is small\n  return isEthAddress(address)\n    ? (normalizeEthAddress(address) as string)\n    : address;\n}\n\n/**\n * Normalize an address to a \"safer\" representation. The address might be returned as-is, if\n * there's no normalizer available.\n *\n * @param address - An address to normalize.\n * @returns The \"safer\" normalized address.\n */\nexport function normalizeSafeAddress(address: string): string {\n  // NOTE: We assume that the overhead over checking the address format\n  // at runtime is small\n  return isEthAddress(address) ? toChecksumHexAddress(address) : address;\n}\n","import log from 'loglevel';\nimport getFetchWithTimeout from '../../../shared/modules/fetch-with-timeout';\n\nconst fetchWithTimeout = getFetchWithTimeout();\n\nconst FIXTURE_SERVER_HOST = 'localhost';\nconst FIXTURE_SERVER_PORT = 12345;\nconst FIXTURE_SERVER_URL = `http://${FIXTURE_SERVER_HOST}:${FIXTURE_SERVER_PORT}/state.json`;\n\n/**\n * A read-only network-based storage wrapper\n */\nexport default class ReadOnlyNetworkStore {\n  constructor() {\n    this._initialized = false;\n    this._initializing = this._init();\n    this._state = undefined;\n    this.mostRecentRetrievedState = null;\n  }\n\n  /**\n   * Declares this store as compatible with the current browser\n   */\n  isSupported = true;\n\n  /**\n   * Initializes by loading state from the network\n   */\n  async _init() {\n    try {\n      const response = await fetchWithTimeout(FIXTURE_SERVER_URL);\n      if (response.ok) {\n        this._state = await response.json();\n      }\n    } catch (error) {\n      log.debug(`Error loading network state: '${error.message}'`);\n    } finally {\n      this._initialized = true;\n    }\n  }\n\n  /**\n   * Returns state\n   *\n   * @returns {Promise<object>}\n   */\n  async get() {\n    if (!this._initialized) {\n      await this._initializing;\n    }\n    // Delay setting this until after the first read, to match the\n    // behavior of the local store.\n    if (!this.mostRecentRetrievedState) {\n      this.mostRecentRetrievedState = this._state;\n    }\n    return this._state;\n  }\n\n  /**\n   * Set metadata/version state\n   *\n   * @param {object} metadata - The metadata/version data to set\n   */\n  setMetadata(metadata) {\n    this.metadata = metadata;\n  }\n\n  /**\n   * Set state\n   *\n   * @param {object} state - The state to set\n   */\n  async set(state) {\n    if (!this.isSupported) {\n      throw new Error(\n        'Metamask- cannot persist state to local store as this browser does not support this action',\n      );\n    }\n    if (!state) {\n      throw new Error('MetaMask - updated state is missing');\n    }\n    if (!this.metadata) {\n      throw new Error(\n        'MetaMask - metadata must be set on instance of ExtensionStore before calling \"set\"',\n      );\n    }\n    if (!this._initialized) {\n      await this._initializing;\n    }\n    this._state = { data: state, meta: this._metadata };\n  }\n\n  cleanUpMostRecentRetrievedState() {\n    if (this.mostRecentRetrievedState) {\n      this.mostRecentRetrievedState = null;\n    }\n  }\n}\n"]}