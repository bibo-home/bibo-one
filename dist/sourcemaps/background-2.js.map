{"version":3,"sources":["node_modules/@metamask/smart-transactions-controller/dist/utils.js","node_modules/@metamask/smart-transactions-controller/node_modules/@babel/runtime/helpers/asyncToGenerator.js","node_modules/@metamask/smart-transactions-controller/node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@metamask/smart-transactions-controller/node_modules/@babel/runtime/helpers/regeneratorRuntime.js","node_modules/@metamask/smart-transactions-controller/node_modules/@babel/runtime/helpers/typeof.js","app/scripts/migrations/076.js","node_modules/@metamask/smart-transactions-controller/node_modules/@babel/runtime/regenerator/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/baseTransaction.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/capabilities/eip1559.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/capabilities/eip2718.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/capabilities/eip2930.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/capabilities/eip7702.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/capabilities/legacy.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/constants.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/eip1559Transaction.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/eip2930Transaction.js","app/scripts/migrations/077-supplements/077-supplement-for-082.ts","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/eip4844Transaction.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/eip7702Transaction.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/fromRpc.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/legacyTransaction.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/transactionFactory.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/types.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/dist/cjs/util.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/cjs/chains.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/cjs/common.js","app/scripts/migrations/077-supplements/077-supplement-for-084.ts","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/cjs/crc.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/cjs/eips.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/cjs/enums.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/cjs/hardforks.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/cjs/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/cjs/interfaces.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/cjs/types.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/cjs/utils.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/rlp/dist/cjs/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/account.js","app/scripts/migrations/077-supplements/077-supplement-for-086.ts","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/address.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/asyncEventEmitter.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/blobs.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/bytes.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/constants.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/db.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/genesis.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/helpers.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/internal.js","app/scripts/controllers/onboarding.ts","app/scripts/migrations/077-supplements/077-supplement-for-088.ts","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/kzg.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/lock.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/mapDB.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/provider.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/requests.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/signature.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/types.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/units.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/verkle.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/dist/cjs/withdrawal.js","app/scripts/migrations/077.js","node_modules/@metamask/smart-transactions-controller/node_modules/@ethereumjs/util/node_modules/@ethereumjs/rlp/dist/cjs/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/base-controller/dist/chunk-FTHCJ6HY.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/base-controller/dist/chunk-G42723LG.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/base-controller/dist/chunk-IURK6TKD.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/base-controller/dist/chunk-UJFCPTF3.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/base-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/base-controller/dist/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/ethjs-contract/lib/contract.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/ethjs-contract/lib/has-tx-object.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/ethjs-contract/lib/index.js","app/scripts/migrations/078.ts","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/ethjs-filter/lib/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/ethjs-format/lib/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/ethjs-query/lib/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/ethjs-rpc/lib/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/ethjs-util/lib/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-2EU6346V.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-2XKEAKQG.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-6OLJWLKK.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-74W7X6BE.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-76FONEDA.js","app/scripts/migrations/079.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-7LXE4KHV.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-7NMV2NPM.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-ARZHJFVG.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-AYTU4HU5.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-C3WC4OJ3.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-HMOSP33F.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-KT6UAKBB.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-NYKRCWBG.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-OZ6UB42C.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-PRUNMTRD.js","app/scripts/migrations/080.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-QH2H4W3N.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-QP75SWIQ.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-QTKXIDGE.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-RHDPOIS4.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-RXIUMVA5.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-S6VGOPUY.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-S7Q622IS.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-SD6CWFDF.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-TJMQEH57.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-UGN7PBON.js","app/scripts/migrations/081.ts","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-ULD4JC3Q.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-V72C4MCR.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-WR5F34OW.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-XVYXRCRL.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-YVCX6Z75.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/dist/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/tx/dist/baseTransaction.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/tx/dist/eip1559Transaction.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/tx/dist/eip2930Transaction.js","app/scripts/migrations/082.ts","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/tx/dist/fromRpc.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/tx/dist/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/tx/dist/legacyTransaction.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/tx/dist/transactionFactory.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/tx/dist/types.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/tx/dist/util.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/account.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/address.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/asyncEventEmitter.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/bytes.js","app/scripts/migrations/083.ts","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/constants.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/encoding.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/helpers.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/internal.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/lock.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/provider.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/signature.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/types.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/units.js","app/scripts/migrations/084.ts","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@ethereumjs/util/dist/withdrawal.js","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/assert.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/base64.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/bytes.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/caip-types.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/checksum.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/coercers.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/collections.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/encryption-types.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/errors.cjs","app/scripts/migrations/085.ts","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/hex.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/index.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/json.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/keyring.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/logging.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/misc.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/number.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/opaque.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/promise.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/time.cjs","app/scripts/migrations/086.ts","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/transaction-types.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/@metamask/transaction-controller/node_modules/@metamask/utils/dist/versions.cjs","node_modules/@metamask/smart-transactions-controller/node_modules/bignumber.js/bignumber.js","node_modules/@metamask/smart-transactions-controller/node_modules/eth-method-registry/dist/abi.json","node_modules/@metamask/smart-transactions-controller/node_modules/eth-method-registry/dist/index.js","node_modules/@metamask/smart-transactions-controller/node_modules/eth-method-registry/dist/registry-map.json","node_modules/@metamask/smart-transactions-controller/package.json","node_modules/@metamask/snaps-controllers/dist/cronjob/CronjobController.cjs","node_modules/@metamask/snaps-controllers/dist/cronjob/index.cjs","node_modules/@metamask/snaps-controllers/dist/fsm.cjs","app/scripts/migrations/087.ts","node_modules/@metamask/snaps-controllers/dist/index.cjs","node_modules/@metamask/snaps-controllers/dist/insights/SnapInsightsController.cjs","node_modules/@metamask/snaps-controllers/dist/insights/index.cjs","node_modules/@metamask/snaps-controllers/dist/interface/SnapInterfaceController.cjs","node_modules/@metamask/snaps-controllers/dist/interface/index.cjs","node_modules/@metamask/snaps-controllers/dist/interface/utils.cjs","node_modules/@metamask/snaps-controllers/dist/logging.cjs","node_modules/@metamask/snaps-controllers/dist/services/AbstractExecutionService.cjs","node_modules/@metamask/snaps-controllers/dist/services/ExecutionService.cjs","node_modules/@metamask/snaps-controllers/dist/services/ProxyPostMessageStream.cjs","app/scripts/migrations/088.ts","node_modules/@metamask/snaps-controllers/dist/services/iframe/IframeExecutionService.cjs","node_modules/@metamask/snaps-controllers/dist/services/iframe/index.cjs","node_modules/@metamask/snaps-controllers/dist/services/index.cjs","node_modules/@metamask/snaps-controllers/dist/services/offscreen/OffscreenExecutionService.cjs","node_modules/@metamask/snaps-controllers/dist/services/offscreen/index.cjs","node_modules/@metamask/snaps-controllers/dist/services/proxy/ProxyExecutionService.cjs","node_modules/@metamask/snaps-controllers/dist/services/webworker/WebWorkerExecutionService.cjs","node_modules/@metamask/snaps-controllers/dist/services/webworker/index.cjs","node_modules/@metamask/snaps-controllers/dist/snaps/RequestQueue.cjs","node_modules/@metamask/snaps-controllers/dist/snaps/SnapController.cjs","app/scripts/migrations/089.ts","node_modules/@metamask/snaps-controllers/dist/snaps/Timer.cjs","node_modules/@metamask/snaps-controllers/dist/snaps/constants.cjs","node_modules/@metamask/snaps-controllers/dist/snaps/index.cjs","node_modules/@metamask/snaps-controllers/dist/snaps/location/http.cjs","node_modules/@metamask/snaps-controllers/dist/snaps/location/index.cjs","node_modules/@metamask/snaps-controllers/dist/snaps/location/local.cjs","node_modules/@metamask/snaps-controllers/dist/snaps/location/location.cjs","node_modules/@metamask/snaps-controllers/dist/snaps/location/npm.cjs","node_modules/@metamask/snaps-controllers/dist/snaps/registry/index.cjs","node_modules/@metamask/snaps-controllers/dist/snaps/registry/json.cjs","app/scripts/migrations/090.ts","node_modules/@metamask/snaps-controllers/dist/snaps/registry/registry.cjs","node_modules/@metamask/snaps-controllers/dist/snaps/selectors.cjs","node_modules/@metamask/snaps-controllers/dist/utils.cjs","node_modules/@metamask/snaps-controllers/node_modules/@metamask/base-controller/dist/chunk-FTHCJ6HY.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/base-controller/dist/chunk-G42723LG.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/base-controller/dist/chunk-IURK6TKD.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/base-controller/dist/chunk-UJFCPTF3.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/base-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/base-controller/dist/index.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/chunk-3YOPLPVY.js","app/scripts/migrations/091.ts","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/chunk-6PXDVUYM.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/chunk-7A3VYLCK.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/chunk-B6PDRQ7N.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/chunk-F5TBMVWC.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/chunk-FYADAA2G.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/chunk-VBIZGGQL.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/chunk-VQPP5PWS.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/chunk-VSDHL2GQ.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/chunk-X4ZAW4QR.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/chunk-Z2XKIXLS.js","app/scripts/migrations/092.1.ts","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/chunk-ZH4MLSXX.js","node_modules/@metamask/snaps-controllers/node_modules/@metamask/permission-controller/dist/index.js","node_modules/@metamask/snaps-controllers/node_modules/concat-stream/index.js","node_modules/@metamask/snaps-controllers/node_modules/nanoid/index.browser.cjs","node_modules/@metamask/snaps-controllers/node_modules/nanoid/url-alphabet/index.cjs","node_modules/@metamask/snaps-registry/dist/index.js","app/scripts/migrations/092.2.ts","node_modules/@metamask/snaps-registry/dist/verify.js","app/scripts/migrations/092.3.ts","app/scripts/migrations/092.ts","app/scripts/migrations/093.ts","app/scripts/migrations/094.ts","app/scripts/migrations/095.ts","app/scripts/migrations/096.ts","app/scripts/migrations/097.ts","app/scripts/migrations/098.ts","app/scripts/migrations/099.ts","app/scripts/migrations/100.ts","app/scripts/migrations/101.ts","app/scripts/migrations/102.ts","app/scripts/migrations/103.ts","app/scripts/migrations/104.ts","app/scripts/migrations/105.ts","app/scripts/migrations/106.js","app/scripts/migrations/107.ts"],"names":["__importDefault","this","mod","__esModule","default","Object","defineProperty","exports","value","getSmartTransactionMetricsSensitiveProperties","getSmartTransactionMetricsProperties","getTxHash","incrementNonceInHex","isSmartTransactionCancellable","handleFetch","mapKeysToCamel","getStxProcessingTime","snapshotFromTxMeta","replayHistory","generateHistoryEntry","calculateStatus","getAPIRequestURL","isSmartTransactionStatusResolved","isSmartTransactionPending","tx_1","require","util_1","bytes_1","bignumber_js_1","fast_json_patch_1","lodash_1","constants_1","types_1","package_json_1","smartTransaction","status","SmartTransactionStatuses","PENDING","stxStatus","apiType","chainId","chainIdDec","parseInt","APIType","GET_FEES","API_BASE_URL","ESTIMATE_GAS","SUBMIT_TRANSACTIONS","version","CANCEL","BATCH_STATUS","LIVENESS","Error","RESOLVED","cancellations","SmartTransactionCancellationReason","WOULD_REVERT","TOO_CHEAP","DEADLINE_MISSED","INVALID_NONCE","USER_CANCELLED","PREVIOUS_TX_CANCELLED","minedTx","SmartTransactionMinedTx","NOT_MINED","cancellationReason","NOT_CANCELLED","isCancellation","findIndex","cancellation","isSettled","cancellationReasonToStatusMap","SUCCESS","CANCELLED","REVERTED","UNKNOWN","previousState","newState","note","entry","compare","timestamp","Date","now","_shortHistory","cloneDeep","reduce","val","applyPatch","newDocument","txMeta","shallow","assign","history","smartTransactionSubmittedtime","Math","round","undefined","obj","isObject","mappedValues","mapValues","isArray","map","mapKeys","key","camelCase","async","request","options","response","fetch","json","ok","console","log","JSON","stringify","nonceInHex","nonceInDec","BigNumber","toString","hexlify","Number","signedTxHex","txHashBytes","TransactionFactory","fromSerializedData","Buffer","from","slice","hash","bytesToHex","smartTransactionStatusMetadata","statusMetadata","stx_status","type","processing_time","time","is_smart_transaction","stx_enabled","current_stx_enabled","stx_user_opt_in","stx_duplicated","duplicated","stx_timed_out","timedOut","stx_proxied","proxied","token_from_symbol","sourceTokenSymbol","token_to_symbol","destinationTokenSymbol","account_hardware_type","accountHardwareType","account_type","accountType","device_model","deviceModel","asyncGeneratorStep","n","t","e","r","o","a","c","i","u","done","Promise","resolve","then","module","arguments","apply","_next","_throw","_typeof","_regeneratorRuntime","prototype","hasOwnProperty","Symbol","iterator","asyncIterator","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","__await","callInvokeWithMethodAndArg","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","keys","reverse","pop","prev","charAt","stop","rval","handle","complete","finish","catch","delegateYield","_lodash","migrate","originalVersionedData","versionedData","meta","state","_state$PreferencesCon","CollectiblesController","allCollectibleContracts","allCollectibles","ignoredCollectibles","remainingState","NftController","allNftContracts","allNfts","ignoredNfts","PreferencesController","useCollectibleDetection","useNftDetection","transformState","data","runtime","regeneratorRuntime","accidentalStrictMode","globalThis","Function","BaseTransaction","common_1","types_js_1","util_js_1","txData","opts","cache","dataFee","senderPubKey","activeCapabilities","DEFAULT_CHAIN","Chain","Mainnet","nonce","gasLimit","to","_type","bytesToBigInt","toBytes","txOptions","toB","vB","rB","sB","Address","_validateCannotExceedMaxInteger","createContract","allowUnlimitedInitCodeSize","common","_getCommon","isActivatedEIP","checkMaxInitCodeSize","supports","capability","includes","getValidationErrors","errors","isSigned","verifySignature","getBaseFee","isValid","txFee","param","fee","getDataFee","gteHardfork","toCreationAddress","txCreationFee","txDataZero","txDataNonZero","cost","BIGINT_0","dataLength","BigInt","ceil","bytes","publicKey","getSenderPublicKey","unpadBytes","getSenderAddress","publicToAddress","sign","privateKey","msg","_errorMsg","hackApplied","TransactionType","Legacy","Capability","EIP155ReplayProtection","msgHash","getHashedMessageToSign","ecSignFunction","customCrypto","ecsign","tx","addSignature","index","indexOf","splice","toJSON","bigIntToHex","chainIdBigInt","copy","Common","isSupportedChainId","chain","custom","networkId","baseChain","bits","cannotEqual","entries","MAX_UINT64","MAX_INTEGER","_validateNotArray","txDataKeys","Array","_getSharedErrorPostfix","hf","hardfork","postfix","getEffectivePriorityFee","getUpfrontCost","baseFee","prio","maxPriorityFeePerGas","maxBase","maxFeePerGas","gasPrice","remainingFee","validateYParity","serialize","rlp_1","keccak_js_1","legacy_js_1","keccak256","getMessageToSign","base","concatBytes","txTypeBytes","RLP","encode","raw","BIGINT_1","errorMsg","AccessLists","getDataFeeEIP2930","accessList","eip2930Cost","eip7702Cost","authorizationList","validateHighS","baseTransaction_js_1","errorStr","SECP256K1_ORDER_DIV_2","extraCost","bind","isFrozen","keccakFunction","getMessageToVerifySignature","sender","ecrecover","bigIntToUnpaddedBytes","BYTES_PER_FIELD_ELEMENT","FIELD_ELEMENTS_PER_BLOB","MAX_TX_WRAP_KZG_COMMITMENTS","LIMIT_BLOBS_PER_TX","MAX_VERSIONED_HASHES_LIST_SIZE","MAX_ACCESS_LIST_SIZE","MAX_CALLDATA_SIZE","FeeMarketEIP1559Transaction","EIP1559","EIP2718","EIP2930","super","FeeMarketEIP1559","concat","accessListData","getAccessListData","AccessListJSON","verifyAccessList","freeze","fromTxData","fromSerializedTx","serialized","equalsBytes","subarray","decode","fromValuesArray","validateNoLeadingZeroes","Uint8Array","convertV","BIGINT_27","accessListJSON","getAccessListJSON","AccessListEIP2930Transaction","AccessListEIP2930","_utils","hasProperty","NetworkController","frequentRpcListDetail","BlobEIP4844Transaction","constants_js_1","BlobEIP4844","maxFeePerBlobGas","blobVersionedHashes","vh","blobs","blob","kzgCommitments","commitment","kzgProofs","proof","kzg","blobsData","getBlobs","acc","cur","blobsToCommitments","commitmentsToVersionedHashes","blobsToProofs","minimalFromNetworkWrapper","fromSerializedBlobTxNetworkWrapper","networkTxValues","txValues","decodedTx","commitments","verifyBlobKzgProofBatch","error","x","computedVersionedHash","computeVersionedHash","validateBlobTransactionNetworkWrapper","serializeNetworkWrapper","networkWrapperToJson","numBlobs","EOACodeEIP7702Transaction","EIP7702","EOACodeEIP7702","authorizationListData","AuthorizationLists","getAuthorizationListData","AuthorizationListJSON","verifyAuthorizationList","authorityList","normalizeTxParams","_txParams","txParams","toType","gas","TypeOutput","input","setLengthLeft","__createBinding","m","k","k2","desc","getOwnPropertyDescriptor","get","__exportStar","LegacyTransaction","eip1559Transaction_js_1","eip2930Transaction_js_1","eip4844Transaction_js_1","eip7702Transaction_js_1","legacyTransaction_js_1","transactionFactory_js_1","meetsEIP155","_v","chainIdDoubled","_validateTxV","message","BIGINT_2","BIGINT_8","numSub","fromRpc_js_1","isLegacyTxData","isAccessListEIP2930TxData","isFeeMarketEIP1559TxData","isBlobEIP4844TxData","isEOACodeEIP7702TxData","fromBlockBodyData","fromJsonRpcProvider","provider","txHash","prov","getProvider","fetchFromProvider","params","fromRPC","isEOACodeEIP7702Tx","isBlobEIP4844Tx","isFeeMarketEIP1559Tx","isAccessListEIP2930Tx","isLegacyTx","isAuthorizationList","isAuthorizationListBytes","isAccessList","isAccessListBytes","firstItem","maxInitCodeSize","bufferAccessList","newAccessList","item","addressBytes","hexToBytes","address","storageItems","storageKeys","jsonItem","accessListItem","storageSlots","storageSlot","JSONItem","slot","accessListStorageKeyCost","accessListAddressCost","slots","bufferAuthorizationList","newAuthorizationList","jsonItems","nonceList","j","yParity","nonces","authorizationListItem","getDataFeeEIP7702","perAuthBaseCost","txType","padStart","chains","mainnet","defaultHardfork","consensus","algorithm","ethash","comment","url","genesis","difficulty","extraData","depositContractAddress","hardforks","block","forkHash","ttd","bootstrapNodes","ip","port","id","location","dnsNetworks","goerli","clique","period","epoch","sepolia","holesky","baseFeePerGas","kaustinen6","events_1","chains_js_1","crc_js_1","eips_js_1","enums_js_1","hardforks_js_1","utils_js_1","_eips","_paramsCache","_activatedEIPsCache","events","EventEmitter","_customChains","customChains","_chainParams","setChain","DEFAULT_HARDFORK","Hardfork","Shanghai","HARDFORK_CHANGES","customHardforks","_hardfork","setHardfork","eips","setEIPs","_buildParamsCache","_buildActivatedEIPsCache","chainParamsOrName","standardChainParams","_getChainParams","CustomChain","PolygonMainnet","PolygonMumbai","ArbitrumOne","xDaiChain","OptimisticKovan","OptimisticEthereum","Berlin","fromGethGenesis","genesisJson","genesisHash","mergeForkIdPostMerge","genesisParams","parseGethGenesis","setForkHashes","initializedChains","getInitializedChains","Boolean","required","existing","hfChanges","emit","getHardforkBy","blockNumber","td","hfs","filter","mergeIndex","hfIndex","hfStartIndex","max","min","setHardforkBy","_getHardfork","eip","EIPs","minHF","requiredEIPs","elem","_mergeWithParamsCache","hfEIPs","topic","paramByHardfork","valueEIP","paramByEIP","eipParams","paramByBlock","hardforkIsActiveOnBlock","hfBlock","hardforkBlock","activeOnBlock","hardforkGteHardfork","hardfork1","hardfork2","posHf1","posHf2","hardforkTimestamp","eipBlock","eipTimestamp","hardforkTTD","nextHardforkBlockOrTimestamp","Paris","currHfTimeOrBlock","nextHf","find","hfTimeOrBlock","nextHfBlock","_calcForkHash","hfBytes","prevBlockOrTime","blockOrTime","hfBlockBytes","inputBytes","intToBytes","crc32","hardforkForForkHash","resArray","chainName","consensusType","consensusAlgorithm","consensusConfig","config","names","toLowerCase","network","TABLE","Int32Array","current","previous","crc","Status","Review","minimumHardfork","Chainstart","gasPrices","tstore","tload","Final","gasConfig","baseFeeMaxChangeDenominator","elasticityMultiplier","initialBaseFee","Byzantium","modexpGquaddivisor","Bls12381G1AddGas","Bls12381G1MulGas","Bls12381G2AddGas","Bls12381G2MulGas","Bls12381PairingBaseGas","Bls12381PairingPerPairGas","Bls12381MapG1Gas","Bls12381MapG2Gas","vm","pow","coldsload","coldaccountaccess","warmstorageread","sstoreCleanGasEIP2200","sstoreNoopGasEIP2200","sstoreDirtyGasEIP2200","sstoreInitRefundEIP2200","sstoreCleanRefundEIP2200","callcode","delegatecall","staticcall","balance","extcodesize","extcodecopy","extcodehash","sload","sstore","Istanbul","Draft","historyStorageAddress","historyServeWindow","London","auth","authcall","authcallValueTransfer","basefee","maxRefundQuotient","selfdestructRefund","sstoreClearRefundEIP2200","MuirGlacier","difficultyBombDelay","push0","SpuriousDragon","initCodeWordCost","prevrandao","Cancun","historicalRootsLength","blobGasPerBlob","targetBlobGasPerBlock","maxblobGasPerBlock","blobGasPriceUpdateFraction","simpleGasPerBlob","minBlobGasPrice","kzgPointEvaluationGasPrecompilePrice","blobhash","sharding","blobCommitmentVersionKzg","fieldElementsPerBlob","GrayGlacier","mcopy","withdrawalRequestType","excessWithdrawalsRequestStorageSlot","withdrawalsRequestCountStorage","withdrawalsRequestQueueHeadStorageSlot","withdrawalsRequestTailHeadStorageSlot","withdrawalsRequestQueueStorageOffset","maxWithdrawalRequestsPerBlock","targetWithdrawalRequestsPerBlock","minWithdrawalRequestFee","withdrawalRequestFeeUpdateFraction","systemAddress","withdrawalRequestPredeployAddress","consolidationRequestType","consolidationRequestPredeployAddress","blobbasefee","ConsensusAlgorithm","ConsensusType","ChainGenesis","stateRoot","Goerli","Sepolia","Holesky","Kaustinen6","chainstart","minGasLimit","gasLimitBoundDivisor","exp","expByte","keccak256Word","sstoreSet","sstoreReset","sstoreRefund","jumpdest","logData","logTopic","callStipend","callValueTransfer","callNewAccount","memory","quadCoeffDiv","createData","txCreation","ecRecover","sha256","sha256Word","ripemd160","ripemd160Word","identity","identityWord","add","mul","sub","div","sdiv","smod","addmod","mulmod","signextend","lt","gt","slt","sgt","eq","iszero","and","or","xor","not","byte","origin","caller","callvalue","calldataload","calldatasize","calldatacopy","codesize","codecopy","gasprice","blockhash","coinbase","number","gaslimit","mload","mstore","mstore8","jump","jumpi","pc","msize","dup","swap","return","invalid","selfdestruct","stackLimit","callCreateDepth","maxExtraDataSize","minimumDifficulty","difficultyBoundDivisor","durationLimit","epochDuration","timebombPeriod","minerReward","homestead","dao","tangerineWhistle","spuriousDragon","maxCodeSize","byzantium","ecAdd","ecMul","ecPairing","ecPairingWord","revert","returndatasize","returndatacopy","constantinople","netSstoreNoopGas","netSstoreInitGas","netSstoreCleanGas","netSstoreDirtyGas","netSstoreClearRefund","netSstoreResetRefund","netSstoreResetClearRefund","shl","shr","sar","create2","petersburg","istanbul","blake2Round","sstoreSentryGasEIP2200","sstoreInitGasEIP2200","chainid","selfbalance","muirGlacier","berlin","london","arrowGlacier","grayGlacier","paris","casper","mergeForkIdTransition","shanghai","cancun","prague","osaka","parseGethParams","mixHash","excessBlobGas","unparsedExtraData","unparsedNonce","unparsedTimestamp","genesisTimestamp","isHexString","intToHex","stripHexPrefix","formatNonce","eip155Block","eip158Block","blockperiodseconds","epochlength","forkMap","Homestead","Dao","TangerineWhistle","Constantinople","Petersburg","MergeForkIdTransition","postMerge","isTimestamp","Prague","Osaka","forkMapRev","configHardforkNames","nameBlock","fork","sort","b","Infinity","terminalTotalDifficulty","mergeConfig","postMergeIndex","latestHardfork","unshift","some","field","missingField","finalJson","output","outputLength","encoded","encodeLength","inputBuf","safeSlice","start","end","decodeLength","parseHexByte","len","offset","hexLength","numberToHex","firstByte","stream","decoded","_decode","remainder","llength","innerRemainder","totalLength","utils","cachedHexes","uint8a","hex","hexByte","array","arrays","arr","result","pad","set","utf8ToBytes","utf","TextEncoder","integer","isHexPrefixed","str","accountBodyToRLP","accountBodyToSlim","accountBodyFromSlim","isZeroAddress","zeroAddress","importPublic","privateToAddress","privateToPublic","pubToAddress","isValidPublic","isValidPrivate","generateAddress2","generateAddress","isValidChecksumAddress","toChecksumAddress","isValidAddress","Account","secp256k1_js_1","bytes_js_1","helpers_js_1","internal_js_1","storageRoot","KECCAK256_RLP","codeHash","KECCAK256_NULL","codeSize","_nonce","_balance","_storageRoot","_codeHash","_codeSize","_version","isContract","_validate","fromAccountData","accountData","fromPartialAccountData","partialAccountData","bytesToInt","fromRlpSerializedAccount","fromRlpSerializedPartialAccount","isNotNullIndicator","serializeWithPartialInfo","partialData","zeroEncoded","intToUnpaddedBytes","oneEncoded","isEmpty","hexAddress","assertIsString","test","eip1191ChainId","assertIsHexString","prefix","ret","toUpperCase","assertIsBytes","salt","initCode","secp256k1","isValidPrivateKey","sanitize","ProjectivePoint","fromHex","pubKey","toRawBytes","fromPrivateKey","addr","zeros","body","emptyUint8Arr","couldBeSlim","accountBody","account_js_1","zero","fromString","fromPublicKey","generate","bigIntToBytes","generate2","equals","isZero","isPrecompileOrSystemAddress","rangeMin","rangeMax","AsyncEventEmitter","event","args","callback","self","listeners","_events","fn","context","tasks","task","reject","runInSeries","listenerCount","once","listener","removeListener","on","first","before","target","beforeOrAfter","after","addListener","prependListener","prependOnceListener","removeAllListeners","eventNames","getMaxListeners","setMaxListeners","maxListeners","sha256_js_1","USEFUL_BYTES_PER_BLOB","get_blob","chunk","byteLength","blobs_len","pdata","fill","get_padded","blobToKzgCommitment","ctx","computeBlobKzgProof","blobCommitmentVersion","hashes","hexToBigInt","bytesToUtf8","bigInt64ToBytes","int32ToBytes","bytesToBigInt64","bytesToInt32","randomBytes","compareBytes","bigIntToAddressBytes","bigIntMin","bigIntMax","short","addHexPrefix","toUnsigned","fromSigned","unpadHex","unpadArray","setLengthRight","unprefixedHexToBytes","bytesToUnprefixedHex","random_js_1","hexToBytesMapFirstKey","hexToBytesMapSecondKey","vSecondKey","vFirstKey","_unprefixedHexToBytes","byteLen","inp","padToEven","hexByByte","BIGINT_CACHE","littleEndian","res","isSafeInteger","unprefixedHex","num","setLength","right","stripZeros","assertIsArray","asIntN","asUintN","maxLength","byteStr","strict","value1","value2","bigIntValue1","bigIntValue2","getRandomBytesSync","DataView","buffer","byteOffset","getUint32","getBigUint64","ArrayBuffer","setUint32","setBigUint64","utils_js_2","BIGINT_2EXP256","BIGINT_2EXP224","BIGINT_2EXP160","BIGINT_2EXP96","BIGINT_224","BIGINT_160","BIGINT_100","BIGINT_96","BIGINT_256","BIGINT_255","BIGINT_128","BIGINT_64","BIGINT_32","BIGINT_31","BIGINT_28","BIGINT_7","BIGINT_3","BIGINT_NEG1","RIPEMD160_ADDRESS_STRING","MAX_WITHDRAWALS_PER_PAYLOAD","RLP_EMPTY_STRING","KECCAK256_RLP_S","KECCAK256_RLP_ARRAY","KECCAK256_RLP_ARRAY_S","KECCAK256_NULL_S","TWO_POW256","SECP256K1_ORDER","MAX_INTEGER_BIGINT","CURVE","ValueEncoding","KeyEncoding","parseGethGenesisState","alloc","code","storage","prefixedAddress","toAscii","getKeys","getBinarySize","fromUtf8","fromAscii","arrayContainsArray","match","superset","subset","substring","substr","String","fromCharCode","stringValue","replace","charCodeAt","allowEmpty","_baseController","_loglevel","_defineProperty","hint","prim","toPrimitive","_toPrimitive","_toPropertyKey","getDefaultOnboardingControllerState","seedPhraseBackedUp","firstTimeFlowType","completedOnboarding","defaultTransientState","onboardingTabs","controllerMetadata","persist","anonymous","OnboardingController","BaseController","messenger","_state","metadata","tabId","debug","update","setSeedPhraseBackedUp","newSeedPhraseBackUpState","completeOnboarding","setFirstTimeFlowType","nftControllerState","every","nftContractsByChainId","anyKeysAreHex","isStrictHexString","nftsByChainId","TokenListController","tokenListControllerState","tokensChainsCache","TokensController","tokensControllerState","allTokens","allIgnoredTokens","allDetectedTokens","initKZG","_trustedSetupPath","loadTrustedSetup","Lock","permits","promiseResolverQueue","acquire","resolver","release","warn","nextResolver","shift","MapDB","database","_database","Map","dbKey","put","del","delete","batch","opStack","op","shallowCopy","open","jsonrpc","headers","text","_getConnection","CLRequestFactory","ConsolidationRequest","WithdrawalRequest","DepositRequest","CLRequest","CLRequestType","utils_1","pubkey","withdrawalCredentials","amount","signature","Deposit","fromRequestData","depositData","fromJSON","jsonData","indexBytes","amountBytes","deserialize","sourceAddress","validatorPubkey","Withdrawal","withdrawalData","sourcePubkey","targetPubkey","Consolidation","consolidationData","fromSerializedRequest","hashPersonalMessage","isValidSignature","fromRpcSig","toCompactSig","toRpcSig","calculateSigRecovery","isValidSigRecovery","recovery","sig","buf","toCompactRawBytes","Signature","fromCompact","addRecoveryBit","recoverPublicKey","ss","homesteadOrLater","rBigInt","sBigInt","isNestedUint8Array","outputType","bigInt","MAX_SAFE_INTEGER","PrefixedHexString","formatBigDecimal","GWEI_TO_WEI","numerator","denominator","maxDecimalFactor","full","fraction","zerosPostDecimal","repeat","getVerkleTreeKeyForStorageSlot","chunkifyCode","getVerkleTreeKeyForCodeChunk","getVerkleTreeIndicesForCodeChunk","getVerkleTreeIndexesForStorageSlot","getVerkleKey","VERKLE_MAIN_STORAGE_OFFSET","VERKLE_NODE_WIDTH","VERKLE_CODE_OFFSET","VERKLE_HEADER_STORAGE_OFFSET","VERKLE_CODE_SIZE_LEAF_KEY","VERKLE_CODE_HASH_LEAF_KEY","VERKLE_NONCE_LEAF_KEY","VERKLE_BALANCE_LEAF_KEY","VERKLE_VERSION_LEAF_KEY","VerkleLeafType","verifyVerkleProof","getVerkleStem","ffi","treeIndex","address32","treeIndexBytes","getTreeKey","prestateRoot","executionWitness","verifyExecutionWitnessPreState","Version","Balance","Nonce","CodeHash","CodeSize","storageKey","position","subIndex","chunkId","floor","stem","leaf","verkleCrypto","paddingLength","address_js_1","validatorIndex","fromWithdrawalData","indexData","validatorIndexData","addressData","amountData","withdrawalArray","toBytesArray","withdrawal","toValue","_interopRequireDefault","_supplementFor","_supplementFor2","_supplementFor3","_supplementFor4","_global$sentry","_global$sentry$captur","global","sentry","captureException","dataCache","dataObject","_Object$keys$","_dataCache$Object$key","token","tokenAddress","BaseControllerV1","defaultConfig","defaultState","disabled","internalConfig","internalState","internalListeners","initialState","initialConfig","initialize","configure","overwrite","fullUpdate","notify","subscribe","unsubscribe","cb","BaseControllerV1_default","_actions","_initialEventPayloadGetters","_eventPayloadCache","_chunkUJFCPTF3js","_chunkZ4BLTVTBjs","WeakMap","ControllerMessenger","__privateAdd","registerActionHandler","actionType","handler","__privateGet","has","unregisterActionHandler","clearActions","clear","registerInitialEventPayload","eventType","getPayload","publish","payload","subscribers","selector","previousValue","newValue","setTimeout","initialValue","clearEventSubscriptions","clearSubscriptions","getRestricted","allowedActions","allowedEvents","RestrictedControllerMessenger","controllerMessenger","_internalState","_immer","enablePatches","deriveStateFromMetadata","metadataProperty","derivedState","stateMetadata","propertyMetadata","stateProperty","messagingSystem","__privateSet","_","nextState","patches","inversePatches","produceWithPatches","applyPatches","destroy","getAnonymizedState","getPersistentState","_controllerMessenger","_controllerName","_allowedActions","_allowedEvents","_isAllowedEvent","isAllowedEvent_fn","_isAllowedAction","isAllowedAction_fn","_isInCurrentNamespace","isInCurrentNamespace_fn","WeakSet","__privateMethod","startsWith","action","__accessCheck","member","getter","setter","_chunkFTHCJ6HYjs","_chunkIURK6TKDjs","_chunkG42723LGjs","_regenerator","_asyncToGenerator2","abi","EthFilter","keccak_256","promiseToCallback","hasTransactionObject","createContractFunction","methodObject","methodCallback","methodArgs","promise","_x","_performCall","performCall","_callee","_ref","queryMethod","providedTxObject","methodTxObject","queryResult","decodedMethodResult","_context","defaultTxObject","encodeMethod","constant","query","decodeMethod","t0","contractABI","bytecode","contractBytecode","contractDefaultTxObject","filters","filterInputTypes","inputs","filterTopcis","join","argsObject","defaultFilterObject","topics","filterOpts","decoder","decodeEvent","Filter","createContractEvent","txObjectProperties","lastArg","Contract","newMethodCallback","newMethodArgs","constructorMethod","getConstructorFromABI","assembleTxObject","constructorBytecode","encodeParams","sendTransaction","PhishingController","phishing","lastFetched","constructFilter","filterName","filterId","delay","watchers","interval","setInterval","getFilterChanges","changeError","changeResult","decodedChangeResults","decodingError","logIndex","decodingErrorMesage","watcher","at","watch","watchCallbackInput","random","stopWatching","uninstall","clearInterval","prom","uninstallFilter","uninstallError","uninstallResilt","err","filterInputs","setupError","BlockFilter","PendingTransactionFilter","numberToBN","schema","_require","formatQuantity","numberValue","numPadding","isNeg","formatQuantityOrTag","tags","formatData","outputByteLength","formatObject","formatter","objects","EthSyncing","Transaction","__required","valueKey","format","formatArray","lengthRequirement","valueIndex","formatObjectKey","formatInputs","methods","formatOutputs","outputs","EthRPC","Eth","optionsObject","logger","jsonSpace","rpc","setProvider","generateFnFor","rpcMethodName","protoMethodName","_this","formattingError","sendAsync","methodOutputs","cprovider","idCounter","currentProvider","parsedPayload","responseObject","payloadErrorMessage","payloadError","intToBuffer","toUtf8","_findNetworkClientIdByChainId","_gasFeeFlows","_getGasFeeControllerEstimates","_getProvider","_getTransactions","_layer1GasFeeFlows","_timeout","_running","_start","start_fn","_stop","stop_fn","_onTimeout","onTimeout_fn","_updateUnapprovedTransactions","updateUnapprovedTransactions_fn","_updateUnapprovedTransaction","updateUnapprovedTransaction_fn","_updateTransactionGasFeeEstimates","updateTransactionGasFeeEstimates_fn","_updateTransactionLayer1GasFee","updateTransactionLayer1GasFee_fn","_getUnapprovedTransactions","getUnapprovedTransactions_fn","_getGasFeeControllerData","getGasFeeControllerData_fn","_chunk2XKEAKQGjs","_chunk76FONEDAjs","_chunkS6VGOPUYjs","_ethquery2","_events2","createModuleLogger","projectLogger","clearTimeout","unapprovedTransactions","gasFeeControllerDataByChainId","all","flatMap","gasFeeControllerData","transactionMeta","gasFeeEstimatesResponse","layer1GasFee","hub","transactionId","gasFeeEstimates","gasFeeEstimatesLoaded","networkClientId","ethQuery","gasFeeFlow","getGasFeeFlow","getGasFees","estimates","transaction","getTransactionLayer1GasFee","layer1GasFeeFlows","transactions","networkClientIdsByChainId","transactionNetworkClientId","entryPromises","GasFeePoller","findNetworkClientIdByChainId","gasFeeFlows","getGasFeeControllerEstimates","getTransactions","onStateChange","layer1GasFeeFlow","matchesTransaction","getLayer1GasFeeFlow","layer1Fee","getLayer1Fee","updateTransactionLayer1GasFee","_isMultichainEnabled","_provider","_nonceTracker","_incomingTransactionOptions","_getNetworkClientById","_getNetworkClientRegistry","_removeIncomingTransactionHelperListeners","_removePendingTransactionTrackerListeners","_createNonceTracker","_createIncomingTransactionHelper","_createPendingTransactionTracker","_nonceMutexesByChainId","_trackingMap","_etherscanRemoteTransactionSourcesMap","_refreshTrackingMap","_stopTrackingByNetworkClientId","stopTrackingByNetworkClientId_fn","_startTrackingByNetworkClientId","startTrackingByNetworkClientId_fn","_refreshEtherscanRemoteTransactionSources","_getNetworkClient","getNetworkClient_fn","_chunk7NMV2NPMjs","_ethquery","_asyncmutex","trackers","pendingTransactionTracker","incomingTransactionHelper","blockTracker","configuration","etherscanRemoteTransactionSource","EtherscanRemoteTransactionSource","includeTokenTransfers","nonceTracker","networkClient","incomingTransactionsLogger","networkClientIdForChainId","MultichainTrackingHelper","isMultichainEnabled","incomingTransactionOptions","getNetworkClientById","getNetworkClientRegistry","removeIncomingTransactionHelperListeners","removePendingTransactionTrackerListeners","createNonceTracker","createIncomingTransactionHelper","createPendingTransactionTracker","onNetworkStateChange","checkForPendingTransactionAndStartPolling","startIfPendingTransactions","networkClients","networkClientIds","existingNetworkClientIds","chainIdsInRegistry","Set","path","getEthQuery","acquireNonceLockForChainIdKey","nonceMutexesForChainId","nonceMutexForKey","Mutex","getNonceLock","releaseLockForChainIdKey","nonceLock","releaseLock","startIncomingTransactionPolling","stopIncomingTransactionPolling","stopAllIncomingTransactionPolling","updateIncomingTransactions","allSettled","reason","stopAllTracking","_chunkKT6UAKBBjs","_chunkHMOSP33Fjs","_chunkUGN7PBONjs","_abi","_controllerutils","_metamaskethabis","SupportedToken","SupportedToken2","SUPPORTED_EVENTS","SUPPORTED_TOKEN_ABIS","erc20","abiERC20","standard","erc721","abiERC721","erc1155","abiERC1155","erc20Wrapped","ABI_SIMULATION_ERC20_WRAPPED","erc721Legacy","ABI_SIMULATION_ERC721_LEGACY","REVERTED_ERRORS","getEvents","logs","extractLogs","callTrace","interfaces","supportedTokens","tokenType","Interface","getContractInterfaces","currentLog","eventLog","contractInterface","parseLog","abiInputs","parseEventArgValue","parseEventArgs","contractAddress","tokenStandard","toHexString","skipPriorBalanceCheck","getEventTokenIds","tokenId","ids","getValueFromBalanceTransaction","normalizedReturn","toHex","hexToBN","getBalanceTransactionData","encodeFunctionData","calls","nestedCall","flat","getSimulationBalanceChange","previousBalance","newBalance","differenceBN","isDecrease","difference","abs","getSimulationData","simulateTransactions","withCallTrace","withLogs","transactionError","SimulationError","nativeBalanceChange","userAddress","transactionResponse","stateDiff","pre","post","getNativeBalanceChange","tokenBalanceChanges","balanceTxs","tokenKeys","userEvents","tokenIds","simulationToken","tokenKey","getTokenBalanceTransactions","SimulationInvalidResponseError","prevBalanceTxIndex","balanceChange","size","change","getTokenBalanceChanges","simulationError","revertErrorMessage","SimulationRevertedError","_chunkAYTU4HU5js","getLegacyEstimate","transactionGasFeeEstimate","level","weiHexToGweiDec","mergeGasFeeEstimates","gasFeeControllerEstimates","transactionGasFeeEstimates","transactionEstimateType","GasFeeEstimateLevel","gasFeeControllerEstimate","suggestedMaxFeePerGas","suggestedMaxPriorityFeePerGas","_state$AppStateContro","_state$metamask","AppStateController","collectiblesDetectionNoticeDismissed","metamask","collectiblesDropdownState","_rpcerrors","validateConfirmedExternalTransaction","confirmedTxs","pendingTxs","rpcErrors","invalidParams","externalTxNonce","_includeTokenTransfers","_isTokenRequestPending","_mutex","_releaseLockAfterInterval","releaseLockAfterInterval_fn","_fetchNormalTransactions","_fetchTokenTransactions","_getResponseTransactions","getResponseTransactions_fn","_normalizeTransaction","normalizeTransaction_fn","_normalizeTokenTransaction","normalizeTokenTransaction_fn","_normalizeTransactionBase","normalizeTransactionBase_fn","_chunkXVYXRCRLjs","_bnjs","_bnjs2","_uuid","acquireTime","elapsedTime","remainingTime","currentChainId","isError","isTransfer","transferInformation","decimals","tokenDecimal","symbol","tokenSymbol","timeStamp","v1","msecs","BNToHex","gasUsed","verifiedOnBlockchain","etherscanRequest","etherscanTransactions","fetchEtherscanTransactions","fetchEtherscanTokenTransactions","isSupportedNetwork","ETHERSCAN_SUPPORTED_NETWORKS","getLastBlockVariations","fetchTransactions","acquiredTime","_getLineaGasFees","getLineaGasFees_fn","_getLineaResponse","getLineaResponse_fn","_getValuesFromMultipliers","getValuesFromMultipliers_fn","_getMaxFees","getMaxFees_fn","_feesToString","feesToString_fn","_chunkQTKXIDGEjs","LINEA_CHAIN_IDS","ChainId","BASE_FEE_MULTIPLIERS","low","medium","high","PRIORITY_FEE_MULTIPLIERS","lineaResponse","baseFees","priorityFees","priorityFeePerGas","maxFees","multipliers","muln","fees","LineaGasFeeFlow","DefaultGasFeeFlow","TransactionStatus","TransactionStatus2","WalletDevice","WalletDevice2","TransactionType2","TransactionEnvelopeType","TransactionEnvelopeType2","UserFeeLevel","UserFeeLevel2","GasFeeEstimateLevel2","GasFeeEstimateType","GasFeeEstimateType2","SimulationTokenStandard","SimulationTokenStandard2","SimulationErrorCode","SimulationErrorCode2","_chunkQH2H4W3Njs","gweiDecimalToWeiHex","gweiDecToWEIBN","updateGasFees","initialParams","savedGasFees","SWAP_TRANSACTION_TYPES","getSavedGasFees","suggestedGasFees","eip1559","getGasFeeEstimates","gasFeeEstimateType","gasPriceDecimal","add0x","getSuggestedGasFees","getGasFeeRequest","maxBaseFee","getMaxFeePerGas","priorityFee","getMaxPriorityFeePerGas","getGasPrice","userFeeLevel","ORIGIN_METAMASK","getUserFeeLevel","defaultGasEstimates","estimateType","updateDefaultGasEstimates","SimulationChainNotSupportedError","BASE_URL","ENDPOINT_NETWORKS","requestIdCounter","getUrl","subdomain","networkData","getNetworkData","chainIdDecimal","convertHexToDecimal","confirmations","getSimulationUrl","requestId","responseJson","_chunkYVCX6Z75js","OPTIMISM_STACK_CHAIN_IDS","CHAIN_IDS","OPTIMISM","OPTIMISM_TESTNET","BASE","BASE_TESTNET","OPBNB","OPBNB_TESTNET","ZORA","OptimismLayer1GasFeeFlow","OracleLayer1GasFeeFlow","NORMALIZERS","padHexToEvenLength","estimatedBaseFee","getIncreasedPriceHex","rate","isJsonCompatible","parse","ESTIMATE_GAS_ERROR","normalizeTransactionParams","normalizedTxParams","getKnownPropertyNames","isEIP1559Transaction","hasOwnProp","validateGasValues","gasValues","isFeeMarketEIP1559Values","isGasPriceValue","getIncreasedPriceFromExisting","validateMinimumIncrease","proposed","proposedDecimal","minDecimal","validateIfTransactionUnapproved","fnName","normalizeTxError","stack","normalizeGasFeeValues","gasFeeValues","normalize","getNextNonce","customNonceValue","existingNonce","customNonce","nextNonce","nonceDetails","getAndFormatTransactionsForNonceTracker","fromAddress","transactionStatus","isUserOperation","showPortfolioTooltip","_chunkOZ6UB42Cjs","UPDATE_POST_TX_BALANCE_TIMEOUT","DEFAULT_TOKEN_ADDRESS","ETH_SWAPS_TOKEN_OBJECT","BNB_SWAPS_TOKEN_OBJECT","MATIC_SWAPS_TOKEN_OBJECT","AVAX_SWAPS_TOKEN_OBJECT","TEST_ETH_SWAPS_TOKEN_OBJECT","GOERLI_SWAPS_TOKEN_OBJECT","ARBITRUM_SWAPS_TOKEN_OBJECT","OPTIMISM_SWAPS_TOKEN_OBJECT","ZKSYNC_ERA_SWAPS_TOKEN_OBJECT","SWAPS_CHAINID_DEFAULT_TOKEN_MAP","MAINNET","BSC","POLYGON","GOERLI","AVALANCHE","ARBITRUM","ZKSYNC_ERA","isSwapsDefaultTokenAddress","sleep","ms","UPDATE_POST_TX_BALANCE_ATTEMPTS","updateSwapsTransaction","transactionType","swaps","isSwapsDisabled","cancelTransaction","hasApproveTx","simulationFails","swapsMeta","updatedTransactionMeta","swapApprovalTransaction","pickBy","merge","updateSwapApprovalTransaction","approvalTxId","destinationTokenAddress","destinationTokenAmount","destinationTokenDecimals","sourceTokenAddress","sourceTokenAmount","sourceTokenDecimals","swapAndSendRecipient","swapMetaData","swapTokenValue","swapTransaction","updateSwapAndSendTransaction","updateSwapTransaction","updatePostTransactionBalance","getTransaction","updateTransaction","latestTransactionMeta","approvalTransactionMeta","attempt","postTransactionBalance","postTxBalance","isDefaultTokenAddress","preTxBalance","_fastjsonpatch","_fastjsonpatch2","snapshotFromTransactionMeta","snapshot","addInitialHistorySnapshot","updateTransactionHistory","currentState","transactionHistory","historyEntry","historyOperationsEntry","_getFeeMarkEstimates","getFeeMarkEstimates_fn","_getLegacyEstimates","getLegacyEstimates_fn","_getGasPriceEstimates","getGasPriceEstimates_fn","_getFeeMarketLevel","getFeeMarketLevel_fn","_getLegacyLevel","getLegacyLevel_fn","_chunkC3WC4OJ3js","_gasfeecontroller","_transactionMeta","gasEstimateType","GAS_ESTIMATE_TYPES","FEE_MARKET","LEGACY","ETH_GASPRICE","_blockTracker","_getCurrentAccount","_getLastFetchedBlockNumbers","_getLocalTransactions","_getChainId","_isEnabled","_isRunning","_onLatestBlock","_queryEntireHistory","_remoteTransactionSource","_transactionLimit","_updateTransactions","_sortTransactionsByTime","sortTransactionsByTime_fn","_getNewTransactions","getNewTransactions_fn","_getUpdatedTransactions","getUpdatedTransactions_fn","_isTransactionOutdated","isTransactionOutdated_fn","_getLastFetchedBlockNumberDec","getLastFetchedBlockNumberDec_fn","_getFromBlock","getFromBlock_fn","_updateLastFetchedBlockNumber","updateLastFetchedBlockNumber_fn","_getBlockNumberKey","getBlockNumberKey_fn","_canStart","canStart_fn","UPDATE_CHECKS","remoteTxs","localTxs","remoteTx","localTx","getValue","additionalLastFetchedKeys","lastFetchedKey","latestBlockNumber","lastFetchedBlockNumber","additionalKeys","currentBlockNumberValue","lastFetchedBlockNumbers","currentAccount","isEnabled","IncomingTransactionHelper","getCurrentAccount","getLastFetchedBlockNumbers","getLocalTransactions","getChainId","queryEntireHistory","remoteTransactionSource","transactionLimit","updateTransactions","blockNumberHex","latestBlockNumberHex","getLatestBlock","fromBlock","account","remoteTransactions","limit","localTransactions","newTransactions","updatedTransactions","new","updated","added","ensureProperTransactionEnvelopeTypeProvided","ensureMutuallyExclusiveFieldsNotProvided","fieldBeingValidated","mutuallyExclusiveField","ensureFieldIsString","validateTransactionOrigin","permittedAddresses","selectedAddress","providerErrors","unauthorized","internal","validateTxParams","isEIP1559Compatible","validateEIP1559Compatibility","isValidHexAddress","validateParamFrom","validateParamRecipient","intValue","isFinite","validateParamValue","ERC20Interface","parseTransaction","validateParamData","validateParamChainId","validateGasFeeParams","createProjectLogger","_internalEvents","_pendingTransactionOptions","_transactionHistoryLimit","_isSimulationEnabled","_testGasFeeFlows","_multichainTrackingHelper","createNonceTracker_fn","createIncomingTransactionHelper_fn","createPendingTransactionTracker_fn","_checkForPendingTransactionAndStartPolling","_stopAllTracking","stopAllTracking_fn","removeIncomingTransactionHelperListeners_fn","_addIncomingTransactionHelperListeners","addIncomingTransactionHelperListeners_fn","removePendingTransactionTrackerListeners_fn","_addPendingTransactionTrackerListeners","addPendingTransactionTrackerListeners_fn","_getNonceTrackerPendingTransactions","getNonceTrackerPendingTransactions_fn","_getGasFeeFlows","getGasFeeFlows_fn","_getLayer1GasFeeFlows","getLayer1GasFeeFlows_fn","_updateTransactionInternal","updateTransactionInternal_fn","_checkIfTransactionParamsUpdated","checkIfTransactionParamsUpdated_fn","_onTransactionParamsUpdated","onTransactionParamsUpdated_fn","_updateSimulationData","updateSimulationData_fn","_onGasFeePollerTransactionUpdate","onGasFeePollerTransactionUpdate_fn","_getNetworkClientId","getNetworkClientId_fn","_getGlobalNetworkClientId","getGlobalNetworkClientId_fn","_getGlobalChainId","getGlobalChainId_fn","_isCustomNetwork","isCustomNetwork_fn","_getSelectedAccount","getSelectedAccount_fn","_chunkPRUNMTRDjs","_chunk74W7X6BEjs","_chunkSD6CWFDFjs","_chunkRXIUMVA5js","_chunkULD4JC3Qjs","_chunk7LXE4KHVjs","_chunkV72C4MCRjs","_chunkQP75SWIQjs","_chunkNYKRCWBGjs","_chunkWR5F34OWjs","_chunkTJMQEH57js","_chunk2EU6346Vjs","_chunkRHDPOIS4js","_chunk6OLJWLKKjs","_chunkARZHJFVGjs","_common","_tx","_util","_basecontroller","_networkcontroller","_noncetracker","_ethmethodregistry","methodData","HARDFORK","CANCEL_RATE","SPEED_UP_RATE","controllerName","ApprovalState","ApprovalState2","TransactionController","disableHistory","disableSendFlowHistory","disableSwaps","getCurrentAccountEIP1559Compatibility","getCurrentNetworkEIP1559Compatibility","getExternalPendingTransactions","getNetworkState","getPermittedAccounts","incomingTransactions","isSimulationEnabled","pendingTransactions","securityProviderRequest","testGasFeeFlows","transactionHistoryLimit","hooks","approvingTransactionIds","mutex","signAbortCallbacks","isSendFlowHistoryDisabled","isHistoryDisabled","registry","MethodRegistry","_chainId","afterSign","beforeApproveOnInit","beforeCheckPendingTransaction","beforePublish","getAdditionalSignArguments","transactionHash","onBootCleanup","failTransaction","actionId","newTransactionMeta","onTransactionStatusChange","registryLookup","fourBytePrefix","registryMethod","lookup","parsedRegistryMethod","handleMethodData","knownFourBytePrefix","addTransaction","deviceConfirmedOn","requireApproval","securityAlertResponse","sendFlowHistory","requestNetworkClientId","getEIP1559Compatibility","dappSuggestedGasFees","generateDappSuggestedGasFees","determineTransactionType","existingTransactionMeta","getTransactionWithActionId","addedTransactionMeta","userEditedGasLimit","updateGasProperties","securityProviderResponse","addMetadata","processApproval","isExisting","stopTransaction","minGasPrice","gasPriceFromValues","newGasPrice","existingMaxFeePerGas","minMaxFeePerGas","maxFeePerGasValues","newMaxFeePerGas","existingMaxPriorityFeePerGas","minMaxPriorityFeePerGas","maxPriorityFeePerGasValues","newMaxPriorityFeePerGas","newTxParams","unsignedEthTx","prepareUnsignedEthTx","signedTx","rawTx","bufferToHex","newFee","oldFee","publishTransactionForRetry","cancelTransactionMeta","originalGasEstimate","speedUpTransaction","transactionMetaWithRsv","updateTransactionMetaRSV","baseTransactionMeta","originalType","estimateGas","estimatedGas","estimateGasBuffered","multiplier","blockGasLimit","addGasBuffer","updateSecurityAlertResponse","wipeTransactions","ignoreNetwork","trimTransactionsForState","confirmExternalTransaction","transactionReceipt","addExternalTransaction","txReceipt","markNonceDuplicatesDropped","updatePostBalance","updateTransactionSendFlowHistory","transactionID","currentSendFlowHistoryLength","sendFlowHistoryToAdd","updateTransactionGasFees","estimateUsed","estimateSuggested","transactionGasFees","updatedMeta","updatePreviousGasParams","transactionPreviousGas","previousGas","updateEditableParams","txId","editableParams","updatedTransaction","approveTransactionsWithSameNonce","listOfTxParams","hasNonce","initialTx","getCommonConfiguration","initialTxAsEthTx","initialTxAsSerializedHex","rawTransactions","signExternalTransaction","updateCustodialTransaction","errorMessage","custodyId","submittedTime","getTime","initApprovals","unapprovedTxs","shouldShowRequest","errorCodes","userRejectedRequest","searchCriteria","initialList","filterToCurrentNetwork","predicateMethods","predicate","transactionsToFilter","filteredTransactions","sortBy","txs","estimateGasFee","transactionParams","getLayer1GasFee","normalizedTransactionParams","updatedTransactionParams","unsignedTransaction","signedTransaction","clearUnapprovedTransactions","abortTransactionSigning","abortCallback","isCustomNetwork","updateGas","submitApprovedTransactions","approvedTransactions","approveTransaction","resultCallbacks","isCompleted","isTransactionCompleted","finishedPromise","waitForTransactionFinished","acceptResult","requestApproval","approvalValue","isTxCompleted","success","finalMeta","internalError","cleanupTasks","getTransactionOrThrow","releaseNonce","draftTxMeta","signTransaction","shouldUpdatePreTxBalance","publishTransaction","rawTransaction","nonceNetworkSet","txsToKeep","toDateString","isFinalState","isLocalFinalState","getApprovalId","ApprovalType","requestData","expectsResult","errorMessagePrefix","globalChainId","globalNetworkClientId","customChainParams","onIncomingTransactions","currentTransactions","originalTransaction","onUpdatedLastFetchedBlockNumbers","sameFromAndNetworkTransactions","sameNonceTransactions","sameNonceTransactionIds","replacedBy","replacedById","setTransactionStatusDropped","currentNetworkIsEIP1559Compatible","currentAccountIsEIP1559Compatible","transactionMetaFromHook","transactionMetaWithRawTx","getNonceTrackerTransactions","onConfirmedTransaction","isTransactionAlreadyConfirmedError","forceCheckTransaction","NonceTracker","getPendingTransactions","getConfirmedTransactions","PendingTransactionTracker","isResubmitEnabled","getGlobalLock","TestGasFeeFlow","ScrollLayer1GasFeeFlow","skipHistory","transactionMeta2","newParams","originalParams","isEqual","updatedProperties","updatedParams","simulationData","selectedNetworkClientId","NetworkClientType","Custom","isInfuraNetworkType","ERC721Interface","ERC1155Interface","USDCInterface","abiFiatTokenV2","getCodeResponse","contractCode","isContractAddress","readAddressAsContract","hasValue","contractInteractionResult","parseStandardTokenTransactionData","tokenMethodName","methodName","_counter","_getValueForTotalFee","getValueForTotalFee_fn","INCREMENT","totalFee","feeDecimal","gasHex","gasDecimal","mediumMaxTarget","mediumPriorityTarget","lowMaxTarget","lowPriorityTarget","highMaxTarget","highPriorityTarget","BSC_TESTNET","OPTIMISM_SEPOLIA","POLYGON_TESTNET","AVALANCHE_TESTNET","FANTOM","FANTOM_TESTNET","SEPOLIA","LINEA_GOERLI","LINEA_SEPOLIA","LINEA_MAINNET","MOONBEAM","MOONBEAM_TESTNET","MOONRIVER","GNOSIS","SCROLL","SCROLL_SEPOLIA","DEFAULT_ETHERSCAN_DOMAIN","DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX","domain","GAS_BUFFER_CHAIN_OVERRIDES","indexed","PermissionController","subjects","snapPrefix","subjectName","subject","permissions","date","updatedPermissions","permissionName","permission","wallet_snap","caveats","invoker","parentCapability","snapId","caveat","_approveTransaction","_droppedBlockCountByHash","_getEthQuery","_isResubmitEnabled","_listener","_getGlobalLock","_publishTransaction","_beforeCheckPendingTransaction","_beforePublish","onLatestBlock_fn","_checkTransactions","checkTransactions_fn","_resubmitTransactions","resubmitTransactions_fn","_isKnownTransactionError","isKnownTransactionError_fn","_resubmitTransaction","resubmitTransaction_fn","_isResubmitDue","isResubmitDue_fn","_checkTransaction","checkTransaction_fn","_onTransactionConfirmed","onTransactionConfirmed_fn","_isTransactionDropped","isTransactionDropped_fn","_isNonceTaken","isNonceTaken_fn","_getPendingTransactions","getPendingTransactions_fn","_warnTransaction","warnTransaction_fn","_failTransaction","failTransaction_fn","_dropTransaction","dropTransaction_fn","_updateTransaction","updateTransaction_fn","_getTransactionReceipt","getTransactionReceipt_fn","_getBlockByHash","getBlockByHash_fn","_getNetworkTransactionCount","getNetworkTransactionCount_fn","_getCurrentChainTransactions","getCurrentChainTransactions_fn","KNOWN_TRANSACTION_ERRORS","count","knownError","retryCount","txMetaWithFirstRetryBlockNumber","firstRetryBlockNumber","blocksSinceFirstRetry","receipt","isSuccess","blockHash","blockTimestamp","updatedTxMeta","networkNextNonceHex","networkNextNonceNumber","droppedBlockCount","warning","includeTransactionDetails","FIXED_GAS","DEFAULT_GAS_MULTIPLIER","gasLimitHex","gasLimitBN","fractionBN","errorKey","fallback","estimatedGasBN","maxGasBN","paddedGasBN","estimatedGasHex","paddedHex","maxHex","getCode","requiresFixedGas","bufferMultiplier","getGas","SCROLL_CHAIN_IDS","etherscanTxUrl","urlParams","apiUrl","getEtherscanApiHost","paramKey","getEtherscanApiUrl","startBlock","networkInfo","_oracleAddress","_signTransaction","_getOracleLayer1GasFee","getOracleLayer1GasFee_fn","_buildUnserializedTransaction","buildUnserializedTransaction_fn","_buildTransactionParams","buildTransactionParams_fn","_buildTransactionCommon","buildTransactionCommon_fn","_contracts","_providers","GAS_PRICE_ORACLE_ABI","internalType","stateMutability","contract","Web3Provider","serializedTransaction","getL1Fee","unserializedTransaction","keyBuffer","omit","oracleAddress","_chunkS7Q622ISjs","util_2","Merge","bufferToBigInt","toBuffer","validate","stringError","_validateYParity","_validateHighS","unpadBuffer","_processSignature","keccak_1","baseTransaction_1","TRANSACTION_TYPE_BUFFER","arrToBufArr","bigIntToUnpaddedBuffer","bufArrToArr","hashMessage","_global$sentry2","_global$sentry2$captu","_global$sentry3","_global$sentry3$captu","networkConfigurations","_global$sentry4","_global$sentry4$captu","erroneousElement","element","networkConfigurationsAcc","rpcUrl","ticker","nickname","rpcPrefs","v4","eip1559Transaction_1","eip2930Transaction_1","legacyTransaction_1","transactionFactory_1","_getMessageToSign","fromRpc_1","isBuffer","fromEthersProvider","fromRPCTx","isAccessListBuffer","addressBuffer","secp256k1_1","helpers_1","internal_1","_0n","assertIsBuffer","account_1","bigIntToBuffer","intToUnpaddedBuffer","baToJSON","bufferToInt","unpadHexString","allocUnsafe","toArray","bufferStr","ba","newNetworkConfigurations","networkConfigurationId","networkConfiguration","buffer_1","compactBytesToNibbles","bytesToNibbles","nibblesToCompactBytes","nibblesToBytes","hasTerminator","nibbles","bi","ni","terminator","compact","chop","micro_ftch_1","connection","networkStatus","address_1","toBufferArray","indexBuffer","validatorIndexBuffer","assertExhaustive","assertStruct","assert","AssertionError","superstruct_1","errors_1","getError","ErrorWrapper","struct","errorPrefix","getErrorMessage","getErrorMessageWithoutTrailingPeriod","_object","base64","assert_1","paddingRequired","characterSet","letters","re","RegExp","pattern","createDataView","valueToBytes","base64ToBytes","stringToBytes","numberToBytes","signedBigIntToBytes","bytesToBase64","bytesToString","bytesToNumber","bytesToSignedBigInt","isBytes","base_1","hex_1","HEX_MINIMUM_NUMBER_CHARACTER","HEX_MAXIMUM_NUMBER_CHARACTER","HEX_CHARACTER_OFFSET","getPrecomputedHexValues","lookupTable","getPrecomputedHexValuesBuilder","hexadecimal","strippedValue","remove0x","normalizedValue","c1","c2","n1","n2","bigint","TextDecoder","mask","bigIntFits","normalizedValues","toCaipChainId","parseCaipAccountId","parseCaipChainId","isCaipAccountAddress","isCaipAccountId","isCaipReference","isCaipNamespace","isCaipChainId","KnownCaipNamespace","CaipAccountAddressStruct","CaipAccountIdStruct","CaipReferenceStruct","CaipNamespaceStruct","CaipChainIdStruct","CAIP_ACCOUNT_ADDRESS_REGEX","CAIP_ACCOUNT_ID_REGEX","CAIP_REFERENCE_REGEX","CAIP_NAMESPACE_REGEX","CAIP_CHAIN_ID_REGEX","is","string","caipChainId","exec","groups","namespace","reference","caipAccountId","accountAddress","ChecksumStruct","base64_1","createHex","createBytes","createBigInt","createNumber","NumberLikeStruct","union","StrictHexStruct","NumberCoercer","coerce","BigIntCoercer","BytesCoercer","instance","HexCoercer","StructError","_FrozenMap_map","_FrozenSet_set","__classPrivateFieldGet","receiver","kind","__classPrivateFieldSet","FrozenSet","FrozenMap","callbackfn","thisArg","_map","_set","wrapError","isErrorWithStack","isErrorWithMessage","isErrorWithCode","pony_cause_1","misc_1","isNullOrUndefined","originalError","cause","ErrorWithCause","previousProviderStore","getChecksumAddress","assertIsStrictHexString","HexChecksumAddressStruct","HexAddressStruct","HexStruct","sha3_1","unPrefixed","unPrefixedHash","split","character","nibbleIndex","hashCharacter","possibleChecksum","possibleAddress","getJsonRpcIdValidator","assertIsJsonRpcError","isJsonRpcError","assertIsJsonRpcFailure","isJsonRpcFailure","assertIsJsonRpcSuccess","isJsonRpcSuccess","assertIsJsonRpcResponse","isJsonRpcResponse","assertIsPendingJsonRpcResponse","isPendingJsonRpcResponse","JsonRpcResponseStruct","JsonRpcFailureStruct","JsonRpcSuccessStruct","PendingJsonRpcResponseStruct","assertIsJsonRpcRequest","isJsonRpcRequest","assertIsJsonRpcNotification","isJsonRpcNotification","JsonRpcNotificationStruct","JsonRpcRequestStruct","JsonRpcParamsStruct","JsonRpcErrorStruct","JsonRpcIdStruct","JsonRpcVersionStruct","jsonrpc2","getJsonSize","getSafeJson","isValidJson","JsonStruct","UnsafeJsonStruct","exactOptional","object","hasOptional","branch","Struct","validator","refiner","literal","boolean","lazy","record","any","propKey","propValue","nullable","optional","unknown","permitEmptyString","permitFractions","permitNull","isInteger","globalLogger","projectName","extend","moduleName","calculateNumberSize","calculateStringSize","isASCII","isPlainObject","ESCAPE_CHARACTERS_REGEXP","JsonSize","isNonEmptyArray","objectToCheck","getOwnPropertyNames","proto","total","hexToNumber","createDeferredPromise","suppressUnhandledRejection","innerResolve","innerReject","_error","timeSince","inMilliseconds","Duration","assertIsNonNegativeInteger","isNonNegativeInteger","duration","networkControllerState","providerConfig","satisfiesVersionRange","gtRange","gtVersion","assertIsSemVerRange","assertIsSemVerVersion","isValidSemVerRange","isValidSemVerVersion","VersionRangeStruct","VersionStruct","semver_1","refine","valid","validRange","versionRange","range","version1","version2","gtr","satisfies","includePrerelease","globalObject","isNumeric","mathceil","mathfloor","bignumberError","tooManyDigits","LOG_BASE","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","z","xc","yc","intCheck","isOdd","toExponential","toFixedPoint","zs","clone","configObject","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","alphabet","caseChanged","isNum","_isBigNumber","search","DEBUG","rm","c0","ne","maxOrMin","normalise","sd","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","crypto","getRandomValues","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","minimum","dp","rand","Uint32Array","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","callerIsToString","multiply","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","p1","p2","absoluteValue","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","times","integerValue","isEqualTo","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","minus","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","g1","g2","intPart","fractionPart","intDigits","toFraction","md","d0","d1","d2","n0","toNumber","toPrecision","amd","window","payable","ethjs_query_1","ethjs_contract_1","registry_map_json_1","abi_json_1","eth","rawName","parsedName","matches","description","repository","license","main","types","files","scripts","build","lint","prepack","dependencies","lodash","devDependencies","eslint","jest","nock","prettier","sinon","typescript","packageManager","engines","node","publishConfig","access","lavamoat","allowScripts","_CronjobController_messenger","_CronjobController_dailyTimer","_CronjobController_timers","_CronjobController_snapIds","CronjobController","DAILY_TIMEOUT","base_controller_1","snaps_rpc_methods_1","snaps_utils_1","__1","Timer_1","Hour","jobs","_handleSnapRegisterEvent","_handleSnapUnregisterEvent","_handleEventSnapUpdated","dailyCheckIn","logError","getAllJobs","snaps","getRunnableSnaps","snap","getSnapJobs","job","SnapEndowments","Cronjob","definitions","getCronjobCaveatJobs","definition","idx","register","schedule","parseCronExpression","expression","timer","Timer","executeCronjob","lastRun","updateJobLastRunState","HandlerType","OnCronjob","unregister","jobSnapId","cancel","jobId","parsed","hasPrev","forceStrict","validateMachine","fsm_1","machine","typed","allActions","addActions","actions","states","exit","transition","_options","interpreter","onInitialCalled","changed","ogSend","send","InterpreterStatus","Running","suggestedAssets","_SnapInsightsController_instances","_SnapInsightsController_hasInsight","_SnapInsightsController_getSnapsWithPermission","_SnapInsightsController_handleTransaction","_SnapInsightsController_handleSignatureStateChange","_SnapInsightsController_handleSignature","_SnapInsightsController_handleTransactionStatusUpdate","_SnapInsightsController_handleInsightCleanup","_SnapInsightsController_handleSnapRequest","_SnapInsightsController_handleSnapResponse","SnapInsightsController","snaps_1","insights","allSnaps","accumulator","TransactionInsight","transactionOrigin","getTransactionOriginCaveat","_a","loading","OnTransaction","unapprovedTypedMessages","unapprovedPersonalMsgs","unapprovedPersonalMsgCount","unapprovedTypedMessagesCount","SignatureInsight","personalSignature","typedMessage","msgParams","signatureMethod","hasSignatureOriginCaveat","getSignatureOriginCaveat","signatureOrigin","OnSignature","insight","interfaceId","severity","_SnapInterfaceController_instances","_SnapInterfaceController_registerMessageHandlers","_SnapInterfaceController_validateArgs","_SnapInterfaceController_validateApproval","_SnapInterfaceController_triggerPhishingListUpdate","_SnapInterfaceController_checkPhishingList","_SnapInterfaceController_hasApprovalRequest","_SnapInterfaceController_acceptApprovalRequest","_SnapInterfaceController_validateContent","SnapInterfaceController","immer_1","nanoid_1","utils_2","MAX_UI_CONTENT_SIZE","createInterface","content","getJsxInterface","validateInterfaceContext","nanoid","componentState","constructState","draftState","castDraft","getInterface","updateInterface","oldState","deleteInterface","updateInterfaceState","resolveInterface","existingInterface","getJsonSizeUnsafe","validateJsxLinks","assertNameIsUnique","snaps_sdk_1","jsx_1","constructInputState","form","oldStateUnwrapped","oldInputState","props","checked","getComponentStateValue","children","getJsxChildren","constructComponentSpecificDefaultState","component","isJSXElementUnsafe","getJsxElementFromComponent","rootComponent","formStack","walkJsx","depth","currentForm","formState","MAX_CONTEXT_SIZE","snapsLogger","_AbstractExecutionService_instances","_AbstractExecutionService_snapRpcHooks","_AbstractExecutionService_snapToJobMap","_AbstractExecutionService_jobToSnapMap","_AbstractExecutionService_messenger","_AbstractExecutionService_initTimeout","_AbstractExecutionService_pingTimeout","_AbstractExecutionService_terminationTimeout","_AbstractExecutionService_usePing","_AbstractExecutionService_removeSnapHooks","_AbstractExecutionService_createSnapHooks","_AbstractExecutionService_mapSnapAndJob","_AbstractExecutionService_removeSnapAndJobMapping","setupMultiplex","AbstractExecutionService","json_rpc_engine_1","json_rpc_middleware_stream_1","object_multiplex_1","rpc_errors_1","readable_stream_1","logging_1","connectionStream","streamName","mux","pipeline","setupSnapProvider","initTimeout","Second","pingTimeout","terminationTimeout","usePing","registerMessageHandlers","handleRpcRequest","executeSnap","terminateSnap","terminateAllSnaps","terminate","jobWrapper","withTimeout","command","hasTimedOut","streams","destroyed","terminateJob","initJob","worker","initStreams","rpcEngine","JsonRpcEngine","jsonRpcConnection","createStreamMiddleware","middleware","envMetadata","initEnvStream","envStream","commandStream","createStream","SNAP_STREAM_NAMES","COMMAND","notificationHandler","rpcStream","JSON_RPC","_connection","getRpcRequestHandler","sourceCode","endowments","remaining","JsonRpcError","rpcRequestHandler","workerId","_ProxyPostMessageStream_instances","_ProxyPostMessageStream_stream","_ProxyPostMessageStream_jobId","_ProxyPostMessageStream_onData","ProxyPostMessageStream","post_message_stream_1","BasePostMessageStream","_postMessage","write","_global$sentry5","_global$sentry5$captu","_global$sentry6","_global$sentry6$captu","_global$sentry7","_global$sentry7$captu","_global$sentry8","_global$sentry8$captu","migrateData","_ethereumjsUtil","BN","isBN","IframeExecutionService","AbstractExecutionService_1","iframeUrl","document","getElementById","remove","iframeWindow","createWindow","WindowPostMessageStream","targetWindow","targetOrigin","WebWorkerExecutionService","webworker_1","_OffscreenExecutionService_offscreenPromise","OffscreenExecutionService","ProxyExecutionService_1","ProxyExecutionService","offscreenPromise","BrowserRuntimePostMessageStream","_ProxyExecutionService_stream","ProxyPostMessageStream_1","_WebWorkerExecutionService_documentUrl","_WebWorkerExecutionService_runtimeStream","WORKER_POOL_ID","documentUrl","createDocument","href","RequestQueue","maxQueueSize","queueSizes","increment","currentCount","decrement","_SnapController_instances","_SnapController_closeAllConnections","_SnapController_dynamicPermissions","_SnapController_environmentEndowmentPermissions","_SnapController_excludedPermissions","_SnapController_featureFlags","_SnapController_fetchFunction","_SnapController_idleTimeCheckInterval","_SnapController_maxIdleTime","_SnapController_encryptor","_SnapController_getMnemonic","_SnapController_getFeatureFlags","_SnapController_detectSnapLocation","_SnapController_snapsRuntimeData","_SnapController_rollbackSnapshots","_SnapController_timeoutForLastRequestStatus","_SnapController_statusMachine","_SnapController_preinstalledSnaps","_SnapController_initializeStateMachine","_SnapController_registerMessageHandlers","_SnapController_handlePreinstalledSnaps","_SnapController_pollForLastRequestStatus","_SnapController_blockSnap","_SnapController_unblockSnap","_SnapController_assertIsInstallAllowed","_SnapController_assertCanInstallSnaps","_SnapController_assertCanUsePlatform","_SnapController_stopSnapsLastRequestPastMax","_SnapController_transition","_SnapController_terminateSnap","_SnapController_getSnapEncryptionKey","_SnapController_decryptSnapState","_SnapController_encryptSnapState","_SnapController_handleInitialConnections","_SnapController_addSnapToSubject","_SnapController_removeSnapFromSubjects","_SnapController_revokeAllSnapPermissions","_SnapController_createApproval","_SnapController_updateApproval","_SnapController_resolveAllowlistVersion","_SnapController_add","_SnapController_startSnap","_SnapController_getEndowments","_SnapController_set","_SnapController_validateSnapPermissions","_SnapController_getExecutionTimeout","_SnapController_getRpcRequestHandler","_SnapController_createInterface","_SnapController_assertInterfaceExists","_SnapController_transformSnapRpcRequestResult","_SnapController_assertSnapRpcRequestResult","_SnapController_recordSnapRpcRequestStart","_SnapController_recordSnapRpcRequestFinish","_SnapController_getRollbackSnapshot","_SnapController_createRollbackSnapshot","_SnapController_rollbackSnap","_SnapController_rollbackSnaps","_SnapController_getRuntime","_SnapController_getRuntimeExpect","_SnapController_setupRuntime","_SnapController_calculatePermissionsChange","_SnapController_isSubjectConnectedToSnap","_SnapController_calculateConnectionsChange","_SnapController_updatePermissions","_SnapController_isValidUpdate","_SnapController_callLifecycleHook","SnapController","SNAP_APPROVAL_RESULT","SNAP_APPROVAL_UPDATE","SNAP_APPROVAL_INSTALL","permission_controller_1","fsm_2","location_1","registry_1","RequestQueue_1","TRUNCATED_SNAP_PROPERTIES","snapStates","unencryptedSnapStates","truncateSnap","closeAllConnections","dynamicPermissions","environmentEndowmentPermissions","excludedPermissions","idleTimeCheckInterval","maxIdleTime","maxRequestTime","fetchFunction","featureFlags","detectSnapLocation","detectSnapLocationFunction","preinstalledSnaps","encryptor","getMnemonic","getFeatureFlags","SnapStatus","Installing","Stopped","memo","_onUnhandledSnapError","_onOutboundRequest","_onOutboundResponse","OnInstall","_oldVersion","OnUpdate","updateBlockedSnaps","blockedSnaps","blockListArg","checksum","manifest","source","shasum","SnapsRegistryStatus","Blocked","stopSnap","SnapStatusEvents","Crash","stopSnapError","pendingInboundRequests","pendingRequest","pause","pendingOutboundRequests","resume","startSnap","enabled","enableSnap","getExpect","blocked","getTruncatedExpect","disableSnap","isRunning","Stop","statusEvent","stopping","lastRequest","stopAllSnaps","promises","getTruncated","updateSnapState","newSnapState","encrypted","encryptedState","clearSnapState","getSnapState","parseJson","getSnapFile","encoding","AuxiliaryFileEncoding","Base64","normalizedPath","normalizeRelative","auxiliaryFiles","file","encodeAuxiliaryFile","MAX_FILE_SIZE","clearState","snapIds","removeSnap","removeSnaps","removable","truncated","removeSnapFromSubject","subjectPermissions","snapIdsCaveat","WALLET_SNAP_PERMISSION_KEY","SnapCaveatType","SnapIds","newCaveatValue","revokeDynamicSnapPermissions","permissionNames","incrementActiveReferences","activeReferences","decrementActiveReferences","getAllSnaps","getPermittedSnaps","permittedSnaps","truncatedSnap","installSnaps","requestedSnaps","pendingUpdates","pendingInstalls","rawVersion","assertIsValidSnapId","resolveVersionRange","allowLocal","allowLocalSnaps","resolveVersion","requireAllowlist","isUpdate","shouldAlwaysReload","existingSnap","oldVersion","rollbackSnapshot","newVersion","processRequestedSnap","installed","snapshottedSnaps","snapsToRollback","updateSnap","pendingApproval","authorize","errorString","newVersionRange","DEFAULT_REQUESTED_SNAP_VERSION","emitEvent","oldManifest","newSnap","fetchSnap","sourceCodeFile","manifestFile","initialPermissions","processedPermissions","processSnapPermissions","newPermissions","unusedPermissions","approvedPermissions","newConnections","unusedConnections","approvedConnections","initialConnections","approvedNewPermissions","Update","revoked","granted","getRegistryMetadata","connections","installPromise","handleRequest","handlerType","rawRequest","handlerEndowments","handlerPermissions","Rpc","Keyring","origins","getRpcCaveatOrigins","getKeyringCaveatOrigins","isOriginAllowed","subjectType","SubjectType","Website","timeout","disableGuard","statusConfig","initial","Start","cond","Updating","Crashed","createMachine","hidden","hideSnapBranding","isAlreadyInstalled","preinstalled","VirtualFile","NpmSnapFileNames","Manifest","virtualFiles","filePath","iconPath","npm","svgIcon","localizationFiles","locales","validatedLocalizationFiles","getValidatedLocalizationFiles","filesObject","blockedSnapInfo","blockInformation","snapInfo","explanation","isAllowlistingRequired","ALLOWED_PERMISSIONS","Verified","Unavailable","disableSnapInstallation","flags","disableSnaps","_snapId","passedSalt","useCache","keyMetadata","encryptionKey","encryptionSalt","importKey","generateSalt","mnemonicPhrase","entropy","getEncryptionEntropy","keyFromPassword","exportedKey","exportKey","isVaultUpdated","LEGACY_ENCRYPTION_KEY_DERIVATION_OPTIONS","decryptedState","decryptWithKey","encryptWithKey","previousInitialConnections","revokedInitialConnections","setDiff","existingCaveat","dappOrigin","requestState","fetchedSnap","snapData","allEndowments","dedupedEndowments","DEFAULT_ENDOWMENTS","rawAuxiliaryFiles","assertIsSnapManifest","versionHistory","localizedFiles","statePatches","proposedName","getLocalizedSnapManifest","Snap","permissionKeys","excludedPermissionErrors","getMaxRequestTimeCaveat","existingHandler","rpcHandler","requestQueue","startPromises","localStartPromise","handleRpcRequestPromise","transformedResult","jsonRpcError","handled","unwrapError","OnHomePage","castResult","rest","OnTransactionResponseStruct","OnSignatureResponseStruct","OnHomePageResponseStruct","OnNameLookup","OnNameLookupResponseStruct","newRollbackSnapshot","interpret","desiredPermissionsSet","oldPermissions","permissionsDiff","oldConnectionsSet","desiredConnectionsSet","filteredOldConnections","unusedPermissionsKeys","newProviderConfigId","onFinish","POSITIVE_INFINITY","shouldCall","HomePage","LifecycleHooks","EthereumProvider","iterations","HttpLocation","HttpSnapIdStruct","fetchFn","fetchOptions","validatedManifest","canonicalPath","URL","contents","vfile","createSnapManifest","relativePath","cached","arrayBuffer","toCanonical","root","_LocalLocation_http","LocalLocation","http_1","convertCanonical","LocalSnapIdStruct","SnapIdPrefixes","local","local_1","npm_1","allowHttp","protocol","NpmLocation","_BaseNpmLocation_instances","_BaseNpmLocation_validatedManifest","_BaseNpmLocation_files","_BaseNpmLocation_lazyInit","getNpmCanonicalBasePath","fetchNpmMetadata","TARBALL_SIZE_SAFETY_LIMIT","BaseNpmLocation","DEFAULT_NPM_REGISTRY","browserify_zlib_1","concat_stream_1","get_npm_tarball_url_1","readable_web_to_node_stream_1","tar_stream_1","allowCustomRegistries","requestedRange","NpmSnapIdStruct","host","username","password","pathname","packageName","resolvedVersion","tarballURL","targetVersion","registryUrl","isNPM","packageMetadata","versions","getTargetVersion","dist","tarball","resolveNpmVersion","isValidUrl","endsWith","newTarballUrl","hostname","fetchNpmTarball","packageResponse","accept","canonicalBase","tarballUrl","tarballResponse","tarballSizeString","tarballSize","tarballStream","extractStream","extract","totalSize","header","entryStream","headerName","headerType","NPM_TARBALL_PATH_PREFIX","pipe","createTarballStream","decompressionStream","DecompressionStream","decompressedStream","pipeThrough","getNodeStream","createGunzip","getReader","ReadableWebToNodeStream","_JsonSnapsRegistry_instances","_JsonSnapsRegistry_url","_JsonSnapsRegistry_publicKey","_JsonSnapsRegistry_fetchFunction","_JsonSnapsRegistry_recentFetchThreshold","_JsonSnapsRegistry_refetchOnAllowlistMiss","_JsonSnapsRegistry_currentUpdate","_JsonSnapsRegistry_wasRecentlyFetched","_JsonSnapsRegistry_triggerUpdate","_JsonSnapsRegistry_update","_JsonSnapsRegistry_getDatabase","_JsonSnapsRegistry_getSingle","_JsonSnapsRegistry_get","_JsonSnapsRegistry_resolveVersion","_JsonSnapsRegistry_getMetadata","_JsonSnapsRegistry_verifySignature","_JsonSnapsRegistry_safeFetch","JsonSnapsRegistry","snaps_registry_1","lastUpdated","databaseUnavailable","recentFetchThreshold","Minute","refetchOnAllowlistMiss","refetch","blockedEntry","verified","verifiedSnaps","Unverified","previousPromise","verify","listState","getSnapFiles","delayWithTimer","fast_deep_equal_1","rejectFunc","objectA","objectB","permissionsA","permissionsB","isIncluded","timerOrMs","delayPromise","race","validateAuxiliaryFiles","encodeBase64","validateFetchedSnap","_chunkFYADAA2Gjs","isRestrictedMethodCaveatSpecification","specification","decorateWithCaveats","methodImplementation","caveatSpecifications","decorated","UnrecognizedCaveatTypeError","CaveatSpecificationMismatchError","decorator","_chunkVBIZGGQLjs","_chunk7A3VYLCKjs","_chunkX4ZAW4QRjs","rpc_methods_exports","__export","handlers","requestPermissionsHandler","getPermissionsHandler","revokePermissionsHandler","methodNames","implementation","req","requestPermissionsForOrigin","requestedPermissions","grantedPermissions","hookNames","_chunk3YOPLPVYjs","_chunkZH4MLSXXjs","_chunkF5TBMVWCjs","_chunkVQPP5PWSjs","_chunkZ2XKIXLSjs","_deepfreezestrict","_deepfreezestrict2","_nanoid","_expectGetCaveatMerger","expectGetCaveatMerger_fn","_applyGrantedPermissions","applyGrantedPermissions_fn","_mergeIncrementalPermissions","mergeIncrementalPermissions_fn","_mergePermission","mergePermission_fn","_mergeCaveat","mergeCaveat_fn","_handleApprovedPermissions","handleApprovedPermissions_fn","CaveatMutatorOperation","CaveatMutatorOperation2","permissionSpecifications","unrestrictedMethods","_unrestrictedMethods","_caveatSpecifications","validatePermissionSpecifications","_permissionSpecifications","createPermissionMiddleware","getPermissionMiddlewareFactory","executeRestrictedMethod","_executeRestrictedMethod","getRestrictedMethod","isUnrestrictedMethod","getPermissionSpecification","targetName","getCaveatSpecification","caveatType","permissionType","innerTargetName","allowedCaveats","PermissionType","isRestrictedMethodCaveat","getEndowments","getSubjectNames","getPermissions","hasPermission","hasPermissions","grantPermissions","grantPermissionsIncremental","requestPermissions","requestPermissionsIncremental","revokeAllPermissions","revokePermissionForAllSubjects","revokePermissions","caveatValue","updateCaveat","_draftState","getTypedPermissionSpecification","requestingOrigin","failureError","methodNotFound","EndowmentPermissionDoesNotExistError","targetExists","hasSpecificationType","getPermission","UnrecognizedSubjectError","revokePermission","subjectsAndPermissions","PermissionDoesNotExistError","deletePermission","hasCaveat","getCaveat","findCaveat","addCaveat","CaveatAlreadyExistsError","setCaveat","CaveatDoesNotExistError","validateCaveat","caveatIndex","validateModifiedPermission","updatePermissionsByCaveat","targetCaveatType","mutator","targetCaveat","mutatorResult","operation","deleteCaveat","removeCaveat","validatePermission","preserveExistingPermissions","mergePermissions","invokePermissionValidator","performCaveatValidation","subjectTypes","InvalidCaveatsPropertyError","seenCaveatTypes","ForbiddenCaveatError","DuplicateCaveatError","setValidatedPermissions","constructCaveats","requestedCaveats","caveatArray","requestedCaveat","InvalidCaveatError","InvalidCaveatFieldsError","InvalidCaveatTypeError","CaveatMissingValueError","CaveatInvalidJsonError","validateRequestedPermissions","permissionsRequest","approvedRequest","requestUserApproval","currentPermissions","permissionDiffMap","InvalidMergedPermissionsError","diff","validateApprovedPermissions","getSideEffects","sideEffectList","sideEffect","permittedHandlers","onPermitted","onFailure","failureHandlers","executeSideEffects","sideEffects","promiseResults","permittedHandler","rejectedHandlers","failureHandlersList","failureHandler","reasons","originalMetadata","newId","newOrigin","originalId","mutatedId","originalOrigin","mutatedOrigin","acceptPermissionsRequest","hasApprovalRequest","PermissionsRequestNotFoundError","_rejectPermissionsRequest","rejectPermissionsRequest","endowmentGetter","merger","CaveatMergerDoesNotExistError","InvalidSubjectIdentifierError","requestedTarget","approvedPermission","InvalidApprovedPermissionError","permissionOptions","factory","constructPermission","existingPermissions","incrementalRequestedPermissions","produce","draftExistingPermissions","leftPermissions","rightPermission","leftPermission","newPermission","caveatsDiff","caveatPairs","leftUniqueCaveats","rightUniqueCaveats","collectUniqueAndPairedCaveats","mergedCaveats","caveatDiffMap","diffMap","leftCaveat","rightCaveat","newCaveat","allCaveats","CaveatMergeTypeMismatchError","approvedMetadata","sideEffectsData","_jsonrpcengine","createAsyncMiddleware","caveatsProperty","receivedCaveat","leftCaveatType","rightCaveatType","caveatSpec","_req","getPermissionsForOrigin","MethodNames","MethodNames2","leftCaveats","rightCaveats","rightCaveatIndex","SubjectType2","subjectMetadata","SubjectMetadataController","_SubjectMetadataController","subjectCacheLimit","getTrimmedState","subjectHasPermissions","subjectsWithoutPermissionsEncounteredSinceStartup","getSubjectMetadata","addSubjectMetadata","newMetadata","extensionId","iconUrl","originToForget","cachedOrigin","trimMetadataState","newSubjectMetadata","revokePermissionsForOrigin","__defProp","PermissionType2","expectedType","_chunk6PXDVUYMjs","_chunkB6PDRQ7Njs","_chunkVSDHL2GQjs","permissionRpcMethods","Writable","inherits","bufferFrom","U8","ConcatStream","shouldInferEncoding","objectMode","getBody","_write","enc","inferEncoding","buff","firstBuffer","parts","arrayConcat","strings","isBufferish","stringConcat","bufs","bufferConcat","u8","part","u8Concat","urlAlphabet","customRandom","defaultSize","getRandom","LN2","step","customAlphabet","SnapsRegistryDatabaseStruct","BlockedSnapStruct","BlockReasonStruct","VerifiedSnapStruct","ImagePathStruct","AdditionalSourceCodeStruct","SupportStruct","AuditStruct","AuthorStruct","NpmIdStruct","VerifiedSnapVersionStruct","website","auditor","report","knowledgeBase","faq","contact","keyRecovery","enums","author","onboard","summary","audits","category","support","privateCode","privacyPolicy","termsOfUse","additionalSourceCode","screenshots","originalVersionedState","updatedVersionedState","originalState","CURRENT_NETWORK_CONTROLLER_STATE_PROPS","_browser","updatedNetworkController","pick","filterOutObsoleteNetworkControllerStateProperties","SignatureStruct","sha256_1","curve","publicKeyBytes","possibleOriginalValue","advancedGasFee","hadFeesSet","hasFeePreferenceKeys","hadAdvancedGasFeesSetPriorToMigration92_3","changeShapeAndRemoveOldAdvancedGasFeePreference","stalelistLastFetched","hotlistLastFetched","_controllerUtils","NetworkType","networksMetadata","EIPS","_networkController","NetworkStatus","Unknown","networkDetails","_state$IncomingTransa","_state$TransactionCon","IncomingTransactionsController","moveIncomingTransactions","_state$IncomingTransa2","txBlockNumber","highestBlockNumber","generateLastFetchedBlockNumbers","removeIncomingTransactionsControllerState","showIncomingTransactions","addedNetwork","mainNetworks","_network","testNetworks","allSavedNetworks","incomingTransactionsPreferences","fromPairs","transactionControllerState","newTxs","oldTransactionId","newTransactionID","_state$AddressBookCon","_state$NameController","addressBook","AddressBookController","NameController","ethereumAddress","chainAddressBook","_nameChainEntry$name","_addressBookEntry$nam","addressBookEntry","normalizedAddress","nameEntry","sourceId","isEns","proposedNames","navigator","userAgent","preferencesControllerState","ledgerTransportType","_hardwareWallets","LedgerTransportTypes","webhid","transactionsObject","transactionsArray","AccountsController","internalAccounts","accounts","selectedAccount","createDefaultAccountsController","identities","expectedId","sha256FromString","lastSelected","importTime","keyring","_ethMethods","ETH_EOA_METHODS","_keyringApi","EthAccountType","Eoa","createInternalAccountsForAccountsController","_state$PreferencesCon3","_state$PreferencesCon2","firstAddress","getFirstAddress","findInternalAccountByAddress","createSelectedAccountForAccountsController","securityAlertsEnabled","transactionSecurityCheckEnabled","CachedBalancesController","cachedBalances","AccountTracker","accountsByChainId","accountTrackerControllerState"],"mappings":"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","file":"../metamask/background-2.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSmartTransactionMetricsSensitiveProperties = exports.getSmartTransactionMetricsProperties = exports.getTxHash = exports.incrementNonceInHex = exports.isSmartTransactionCancellable = exports.handleFetch = exports.mapKeysToCamel = exports.getStxProcessingTime = exports.snapshotFromTxMeta = exports.replayHistory = exports.generateHistoryEntry = exports.calculateStatus = exports.getAPIRequestURL = exports.isSmartTransactionStatusResolved = exports.isSmartTransactionPending = void 0;\nconst tx_1 = require(\"@ethereumjs/tx\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst bytes_1 = require(\"@ethersproject/bytes\");\nconst bignumber_js_1 = require(\"bignumber.js\");\nconst fast_json_patch_1 = __importDefault(require(\"fast-json-patch\"));\nconst lodash_1 = __importDefault(require(\"lodash\"));\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\nconst constants_1 = require(\"./constants\");\nconst types_1 = require(\"./types\");\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst package_json_1 = __importDefault(require(\"../package.json\"));\nfunction isSmartTransactionPending(smartTransaction) {\n    return smartTransaction.status === types_1.SmartTransactionStatuses.PENDING;\n}\nexports.isSmartTransactionPending = isSmartTransactionPending;\nconst isSmartTransactionStatusResolved = (stxStatus) => stxStatus === 'uuid_not_found';\nexports.isSmartTransactionStatusResolved = isSmartTransactionStatusResolved;\n// TODO use actual url once API is defined\nfunction getAPIRequestURL(apiType, chainId) {\n    const chainIdDec = parseInt(chainId, 16);\n    switch (apiType) {\n        case types_1.APIType.GET_FEES: {\n            return `${constants_1.API_BASE_URL}/networks/${chainIdDec}/getFees`;\n        }\n        case types_1.APIType.ESTIMATE_GAS: {\n            return `${constants_1.API_BASE_URL}/networks/${chainIdDec}/estimateGas`;\n        }\n        case types_1.APIType.SUBMIT_TRANSACTIONS: {\n            return `${constants_1.API_BASE_URL}/networks/${chainIdDec}/submitTransactions?stxControllerVersion=${package_json_1.default.version}`;\n        }\n        case types_1.APIType.CANCEL: {\n            return `${constants_1.API_BASE_URL}/networks/${chainIdDec}/cancel`;\n        }\n        case types_1.APIType.BATCH_STATUS: {\n            return `${constants_1.API_BASE_URL}/networks/${chainIdDec}/batchStatus`;\n        }\n        case types_1.APIType.LIVENESS: {\n            return `${constants_1.API_BASE_URL}/networks/${chainIdDec}/health`;\n        }\n        default: {\n            throw new Error(`Invalid APIType`); // It can never get here thanks to TypeScript.\n        }\n    }\n}\nexports.getAPIRequestURL = getAPIRequestURL;\nconst calculateStatus = (stxStatus) => {\n    if ((0, exports.isSmartTransactionStatusResolved)(stxStatus)) {\n        return types_1.SmartTransactionStatuses.RESOLVED;\n    }\n    const cancellations = [\n        types_1.SmartTransactionCancellationReason.WOULD_REVERT,\n        types_1.SmartTransactionCancellationReason.TOO_CHEAP,\n        types_1.SmartTransactionCancellationReason.DEADLINE_MISSED,\n        types_1.SmartTransactionCancellationReason.INVALID_NONCE,\n        types_1.SmartTransactionCancellationReason.USER_CANCELLED,\n        types_1.SmartTransactionCancellationReason.PREVIOUS_TX_CANCELLED,\n    ];\n    if ((stxStatus === null || stxStatus === void 0 ? void 0 : stxStatus.minedTx) === types_1.SmartTransactionMinedTx.NOT_MINED) {\n        if (stxStatus.cancellationReason ===\n            types_1.SmartTransactionCancellationReason.NOT_CANCELLED) {\n            return types_1.SmartTransactionStatuses.PENDING;\n        }\n        const isCancellation = cancellations.findIndex((cancellation) => cancellation === stxStatus.cancellationReason) > -1;\n        if (stxStatus.cancellationReason && isCancellation) {\n            if (!stxStatus.isSettled) {\n                return types_1.SmartTransactionStatuses.PENDING;\n            }\n            return types_1.cancellationReasonToStatusMap[stxStatus.cancellationReason];\n        }\n    }\n    else if ((stxStatus === null || stxStatus === void 0 ? void 0 : stxStatus.minedTx) === types_1.SmartTransactionMinedTx.SUCCESS) {\n        return types_1.SmartTransactionStatuses.SUCCESS;\n    }\n    else if ((stxStatus === null || stxStatus === void 0 ? void 0 : stxStatus.minedTx) === types_1.SmartTransactionMinedTx.CANCELLED) {\n        return types_1.SmartTransactionStatuses.CANCELLED;\n    }\n    else if ((stxStatus === null || stxStatus === void 0 ? void 0 : stxStatus.minedTx) === types_1.SmartTransactionMinedTx.REVERTED) {\n        return types_1.SmartTransactionStatuses.REVERTED;\n    }\n    else if ((stxStatus === null || stxStatus === void 0 ? void 0 : stxStatus.minedTx) === types_1.SmartTransactionMinedTx.UNKNOWN) {\n        return types_1.SmartTransactionStatuses.UNKNOWN;\n    }\n    return types_1.SmartTransactionStatuses.UNKNOWN;\n};\nexports.calculateStatus = calculateStatus;\n/**\n  Generates an array of history objects sense the previous state.\n  The object has the keys\n    op (the operation performed),\n    path (the key and if a nested object then each key will be separated with a `/`)\n    value\n  with the first entry having the note and a timestamp when the change took place\n  @param previousState - the previous state of the object\n  @param newState - the update object\n  @param [note] - a optional note for the state change\n  @returns\n*/\nfunction generateHistoryEntry(previousState, newState, note) {\n    const entry = fast_json_patch_1.default.compare(previousState, newState);\n    // Add a note to the first op, since it breaks if we append it to the entry\n    if (entry[0]) {\n        if (note) {\n            entry[0].note = note;\n        }\n        entry[0].timestamp = Date.now();\n    }\n    return entry;\n}\nexports.generateHistoryEntry = generateHistoryEntry;\n/**\n  Recovers previous txMeta state obj\n  @returns\n*/\nfunction replayHistory(_shortHistory) {\n    const shortHistory = lodash_1.default.cloneDeep(_shortHistory);\n    return shortHistory.reduce((val, entry) => fast_json_patch_1.default.applyPatch(val, entry).newDocument);\n}\nexports.replayHistory = replayHistory;\n/**\n * Snapshot {@code txMeta}\n * @param txMeta - the tx metadata object\n * @returns a deep clone without history\n */\nfunction snapshotFromTxMeta(txMeta) {\n    const shallow = Object.assign({}, txMeta);\n    delete shallow.history;\n    return lodash_1.default.cloneDeep(shallow);\n}\nexports.snapshotFromTxMeta = snapshotFromTxMeta;\n/**\n * Returns processing time for an STX in seconds.\n * @param smartTransactionSubmittedtime\n * @returns Processing time in seconds.\n */\nconst getStxProcessingTime = (smartTransactionSubmittedtime) => {\n    if (!smartTransactionSubmittedtime) {\n        return undefined;\n    }\n    return Math.round((Date.now() - smartTransactionSubmittedtime) / 1000);\n};\nexports.getStxProcessingTime = getStxProcessingTime;\nconst mapKeysToCamel = (obj) => {\n    if (!lodash_1.default.isObject(obj)) {\n        return obj;\n    }\n    const mappedValues = lodash_1.default.mapValues(obj, (val) => {\n        if (lodash_1.default.isArray(val)) {\n            return val.map(exports.mapKeysToCamel);\n        }\n        else if (lodash_1.default.isObject(val)) {\n            return (0, exports.mapKeysToCamel)(val);\n        }\n        return val;\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    return lodash_1.default.mapKeys(mappedValues, (value, key) => lodash_1.default.camelCase(key));\n};\nexports.mapKeysToCamel = mapKeysToCamel;\nasync function handleFetch(request, options) {\n    const response = await fetch(request, options);\n    const json = await response.json();\n    if (!response.ok) {\n        console.log(`response`, response);\n        throw new Error(`Fetch error:${JSON.stringify(Object.assign({ status: response.status }, (0, exports.mapKeysToCamel)(json)))}`);\n    }\n    return json;\n}\nexports.handleFetch = handleFetch;\nconst isSmartTransactionCancellable = (stxStatus) => {\n    return (stxStatus.minedTx === types_1.SmartTransactionMinedTx.NOT_MINED &&\n        (!stxStatus.cancellationReason ||\n            stxStatus.cancellationReason ===\n                types_1.SmartTransactionCancellationReason.NOT_CANCELLED));\n};\nexports.isSmartTransactionCancellable = isSmartTransactionCancellable;\nconst incrementNonceInHex = (nonceInHex) => {\n    const nonceInDec = new bignumber_js_1.BigNumber(nonceInHex, 16).toString(10);\n    return (0, bytes_1.hexlify)(Number(nonceInDec) + 1);\n};\nexports.incrementNonceInHex = incrementNonceInHex;\nconst getTxHash = (signedTxHex) => {\n    if (!signedTxHex) {\n        return '';\n    }\n    const txHashBytes = tx_1.TransactionFactory.fromSerializedData(\n    // eslint-disable-next-line no-restricted-globals\n    Buffer.from(signedTxHex.slice(2), 'hex')).hash();\n    return (0, util_1.bytesToHex)(txHashBytes);\n};\nexports.getTxHash = getTxHash;\nconst getSmartTransactionMetricsProperties = (smartTransaction) => {\n    if (!smartTransaction) {\n        return {};\n    }\n    const smartTransactionStatusMetadata = smartTransaction.statusMetadata;\n    return {\n        stx_status: smartTransaction.status,\n        type: smartTransaction.type,\n        processing_time: (0, exports.getStxProcessingTime)(smartTransaction.time),\n        is_smart_transaction: true,\n        stx_enabled: true,\n        current_stx_enabled: true,\n        stx_user_opt_in: true,\n        stx_duplicated: smartTransactionStatusMetadata === null || smartTransactionStatusMetadata === void 0 ? void 0 : smartTransactionStatusMetadata.duplicated,\n        stx_timed_out: smartTransactionStatusMetadata === null || smartTransactionStatusMetadata === void 0 ? void 0 : smartTransactionStatusMetadata.timedOut,\n        stx_proxied: smartTransactionStatusMetadata === null || smartTransactionStatusMetadata === void 0 ? void 0 : smartTransactionStatusMetadata.proxied,\n    };\n};\nexports.getSmartTransactionMetricsProperties = getSmartTransactionMetricsProperties;\nconst getSmartTransactionMetricsSensitiveProperties = (smartTransaction) => {\n    if (!smartTransaction) {\n        return {};\n    }\n    return {\n        token_from_symbol: smartTransaction.sourceTokenSymbol,\n        token_to_symbol: smartTransaction.destinationTokenSymbol,\n        account_hardware_type: smartTransaction.accountHardwareType,\n        account_type: smartTransaction.accountType,\n        device_model: smartTransaction.deviceModel,\n    };\n};\nexports.getSmartTransactionMetricsSensitiveProperties = getSmartTransactionMetricsSensitiveProperties;\n//# sourceMappingURL=utils.js.map","function asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(e) {\n  return e && e.__esModule ? e : {\n    \"default\": e\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { cloneDeep } from 'lodash';\n\nconst version = 76;\n\n/**\n * Update to `@metamask/controllers@33.0.0` (rename \"Collectible\" to \"NFT\").\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state.CollectiblesController) {\n    const {\n      allCollectibleContracts,\n      allCollectibles,\n      ignoredCollectibles,\n      ...remainingState\n    } = state.CollectiblesController;\n    state.NftController = {\n      ...(allCollectibleContracts\n        ? { allNftContracts: allCollectibleContracts }\n        : {}),\n      ...(allCollectibles ? { allNfts: allCollectibles } : {}),\n      ...(ignoredCollectibles ? { ignoredNfts: ignoredCollectibles } : {}),\n      ...remainingState,\n    };\n    delete state.CollectiblesController;\n  }\n\n  if (state.PreferencesController?.useCollectibleDetection) {\n    state.PreferencesController.useNftDetection =\n      state.PreferencesController.useCollectibleDetection;\n    delete state.PreferencesController.useCollectibleDetection;\n  }\n\n  return state;\n}\n","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTransaction = void 0;\nconst common_1 = require(\"@ethereumjs/common\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst types_js_1 = require(\"./types.js\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nclass BaseTransaction {\n    constructor(txData, opts) {\n        this.cache = {\n            hash: undefined,\n            dataFee: undefined,\n            senderPubKey: undefined,\n        };\n        /**\n         * List of tx type defining EIPs,\n         * e.g. 1559 (fee market) and 2930 (access lists)\n         * for FeeMarketEIP1559Transaction objects\n         */\n        this.activeCapabilities = [];\n        /**\n         * The default chain the tx falls back to if no Common\n         * is provided and if the chain can't be derived from\n         * a passed in chainId (only EIP-2718 typed txs) or\n         * EIP-155 signature (legacy txs).\n         *\n         * @hidden\n         */\n        this.DEFAULT_CHAIN = common_1.Chain.Mainnet;\n        const { nonce, gasLimit, to, value, data, v, r, s, type } = txData;\n        this._type = Number((0, util_1.bytesToBigInt)((0, util_1.toBytes)(type)));\n        this.txOptions = opts;\n        const toB = (0, util_1.toBytes)(to === '' ? '0x' : to);\n        const vB = (0, util_1.toBytes)(v);\n        const rB = (0, util_1.toBytes)(r);\n        const sB = (0, util_1.toBytes)(s);\n        this.nonce = (0, util_1.bytesToBigInt)((0, util_1.toBytes)(nonce));\n        this.gasLimit = (0, util_1.bytesToBigInt)((0, util_1.toBytes)(gasLimit));\n        this.to = toB.length > 0 ? new util_1.Address(toB) : undefined;\n        this.value = (0, util_1.bytesToBigInt)((0, util_1.toBytes)(value));\n        this.data = (0, util_1.toBytes)(data === '' ? '0x' : data);\n        this.v = vB.length > 0 ? (0, util_1.bytesToBigInt)(vB) : undefined;\n        this.r = rB.length > 0 ? (0, util_1.bytesToBigInt)(rB) : undefined;\n        this.s = sB.length > 0 ? (0, util_1.bytesToBigInt)(sB) : undefined;\n        this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });\n        // geth limits gasLimit to 2^64-1\n        this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);\n        // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n        this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);\n        const createContract = this.to === undefined || this.to === null;\n        const allowUnlimitedInitCodeSize = opts.allowUnlimitedInitCodeSize ?? false;\n        const common = opts.common ?? this._getCommon();\n        if (createContract && common.isActivatedEIP(3860) && allowUnlimitedInitCodeSize === false) {\n            (0, util_js_1.checkMaxInitCodeSize)(common, this.data.length);\n        }\n    }\n    /**\n     * Returns the transaction type.\n     *\n     * Note: legacy txs will return tx type `0`.\n     */\n    get type() {\n        return this._type;\n    }\n    /**\n     * Checks if a tx type defining capability is active\n     * on a tx, for example the EIP-1559 fee market mechanism\n     * or the EIP-2930 access list feature.\n     *\n     * Note that this is different from the tx type itself,\n     * so EIP-2930 access lists can very well be active\n     * on an EIP-1559 tx for example.\n     *\n     * This method can be useful for feature checks if the\n     * tx type is unknown (e.g. when instantiated with\n     * the tx factory).\n     *\n     * See `Capabilities` in the `types` module for a reference\n     * on all supported capabilities.\n     */\n    supports(capability) {\n        return this.activeCapabilities.includes(capability);\n    }\n    /**\n     * Validates the transaction signature and minimum gas requirements.\n     * @returns {string[]} an array of error strings\n     */\n    getValidationErrors() {\n        const errors = [];\n        if (this.isSigned() && !this.verifySignature()) {\n            errors.push('Invalid Signature');\n        }\n        if (this.getBaseFee() > this.gasLimit) {\n            errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);\n        }\n        return errors;\n    }\n    /**\n     * Validates the transaction signature and minimum gas requirements.\n     * @returns {boolean} true if the transaction is valid, false otherwise\n     */\n    isValid() {\n        const errors = this.getValidationErrors();\n        return errors.length === 0;\n    }\n    /**\n     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */\n    getBaseFee() {\n        const txFee = this.common.param('gasPrices', 'tx');\n        let fee = this.getDataFee();\n        if (txFee)\n            fee += txFee;\n        if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n            const txCreationFee = this.common.param('gasPrices', 'txCreation');\n            if (txCreationFee)\n                fee += txCreationFee;\n        }\n        return fee;\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        const txDataZero = this.common.param('gasPrices', 'txDataZero');\n        const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n        let cost = util_1.BIGINT_0;\n        for (let i = 0; i < this.data.length; i++) {\n            this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n        }\n        if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n            const dataLength = BigInt(Math.ceil(this.data.length / 32));\n            const initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;\n            cost += initCodeCost;\n        }\n        return cost;\n    }\n    /**\n     * If the tx's `to` is to the creation address\n     */\n    toCreationAddress() {\n        return this.to === undefined || this.to.bytes.length === 0;\n    }\n    isSigned() {\n        const { v, r, s } = this;\n        if (v === undefined || r === undefined || s === undefined) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * Determines if the signature is valid\n     */\n    verifySignature() {\n        try {\n            // Main signature verification is done in `getSenderPublicKey()`\n            const publicKey = this.getSenderPublicKey();\n            return (0, util_1.unpadBytes)(publicKey).length !== 0;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    /**\n     * Returns the sender's address\n     */\n    getSenderAddress() {\n        return new util_1.Address((0, util_1.publicToAddress)(this.getSenderPublicKey()));\n    }\n    /**\n     * Signs a transaction.\n     *\n     * Note that the signed tx is returned as a new object,\n     * use as follows:\n     * ```javascript\n     * const signedTx = tx.sign(privateKey)\n     * ```\n     */\n    sign(privateKey) {\n        if (privateKey.length !== 32) {\n            const msg = this._errorMsg('Private key must be 32 bytes in length.');\n            throw new Error(msg);\n        }\n        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n        // and want to recreate a signature (where EIP155 should be applied)\n        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n        // 2021-06-23\n        let hackApplied = false;\n        if (this.type === types_js_1.TransactionType.Legacy &&\n            this.common.gteHardfork('spuriousDragon') &&\n            !this.supports(types_js_1.Capability.EIP155ReplayProtection)) {\n            this.activeCapabilities.push(types_js_1.Capability.EIP155ReplayProtection);\n            hackApplied = true;\n        }\n        const msgHash = this.getHashedMessageToSign();\n        const ecSignFunction = this.common.customCrypto?.ecsign ?? util_1.ecsign;\n        const { v, r, s } = ecSignFunction(msgHash, privateKey);\n        const tx = this.addSignature(v, r, s, true);\n        // Hack part 2\n        if (hackApplied) {\n            const index = this.activeCapabilities.indexOf(types_js_1.Capability.EIP155ReplayProtection);\n            if (index > -1) {\n                this.activeCapabilities.splice(index, 1);\n            }\n        }\n        return tx;\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    toJSON() {\n        return {\n            type: (0, util_1.bigIntToHex)(BigInt(this.type)),\n            nonce: (0, util_1.bigIntToHex)(this.nonce),\n            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, util_1.bigIntToHex)(this.value),\n            data: (0, util_1.bytesToHex)(this.data),\n            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,\n        };\n    }\n    /**\n     * Does chain ID checks on common and returns a common\n     * to be used on instantiation\n     * @hidden\n     *\n     * @param common - {@link Common} instance from tx options\n     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n     */\n    _getCommon(common, chainId) {\n        // Chain ID provided\n        if (chainId !== undefined) {\n            const chainIdBigInt = (0, util_1.bytesToBigInt)((0, util_1.toBytes)(chainId));\n            if (common) {\n                if (common.chainId() !== chainIdBigInt) {\n                    const msg = this._errorMsg(`The chain ID does not match the chain ID of Common. Got: ${chainIdBigInt}, expected: ${common.chainId()}`);\n                    throw new Error(msg);\n                }\n                // Common provided, chain ID does match\n                // -> Return provided Common\n                return common.copy();\n            }\n            else {\n                if (common_1.Common.isSupportedChainId(chainIdBigInt)) {\n                    // No Common, chain ID supported by Common\n                    // -> Instantiate Common with chain ID\n                    return new common_1.Common({ chain: chainIdBigInt });\n                }\n                else {\n                    // No Common, chain ID not supported by Common\n                    // -> Instantiate custom Common derived from DEFAULT_CHAIN\n                    return common_1.Common.custom({\n                        name: 'custom-chain',\n                        networkId: chainIdBigInt,\n                        chainId: chainIdBigInt,\n                    }, { baseChain: this.DEFAULT_CHAIN });\n                }\n            }\n        }\n        else {\n            // No chain ID provided\n            // -> return Common provided or create new default Common\n            return common?.copy() ?? new common_1.Common({ chain: this.DEFAULT_CHAIN });\n        }\n    }\n    /**\n     * Validates that an object with BigInt values cannot exceed the specified bit limit.\n     * @param values Object containing string keys and BigInt values\n     * @param bits Number of bits to check (64 or 256)\n     * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n     */\n    _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {\n        for (const [key, value] of Object.entries(values)) {\n            switch (bits) {\n                case 64:\n                    if (cannotEqual) {\n                        if (value !== undefined && value >= util_1.MAX_UINT64) {\n                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    else {\n                        if (value !== undefined && value > util_1.MAX_UINT64) {\n                            const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    break;\n                case 256:\n                    if (cannotEqual) {\n                        if (value !== undefined && value >= util_1.MAX_INTEGER) {\n                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    else {\n                        if (value !== undefined && value > util_1.MAX_INTEGER) {\n                            const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    break;\n                default: {\n                    const msg = this._errorMsg('unimplemented bits value');\n                    throw new Error(msg);\n                }\n            }\n        }\n    }\n    static _validateNotArray(values) {\n        const txDataKeys = [\n            'nonce',\n            'gasPrice',\n            'gasLimit',\n            'to',\n            'value',\n            'data',\n            'v',\n            'r',\n            's',\n            'type',\n            'baseFee',\n            'maxFeePerGas',\n            'chainId',\n        ];\n        for (const [key, value] of Object.entries(values)) {\n            if (txDataKeys.includes(key)) {\n                if (Array.isArray(value)) {\n                    throw new Error(`${key} cannot be an array`);\n                }\n            }\n        }\n    }\n    /**\n     * Returns the shared error postfix part for _error() method\n     * tx type implementations.\n     */\n    _getSharedErrorPostfix() {\n        let hash = '';\n        try {\n            hash = this.isSigned() ? (0, util_1.bytesToHex)(this.hash()) : 'not available (unsigned)';\n        }\n        catch (e) {\n            hash = 'error';\n        }\n        let isSigned = '';\n        try {\n            isSigned = this.isSigned().toString();\n        }\n        catch (e) {\n            hash = 'error';\n        }\n        let hf = '';\n        try {\n            hf = this.common.hardfork();\n        }\n        catch (e) {\n            hf = 'error';\n        }\n        let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n        postfix += `signed=${isSigned} hf=${hf}`;\n        return postfix;\n    }\n}\nexports.BaseTransaction = BaseTransaction;\n//# sourceMappingURL=baseTransaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEffectivePriorityFee = exports.getUpfrontCost = void 0;\nfunction getUpfrontCost(tx, baseFee) {\n    const prio = tx.maxPriorityFeePerGas;\n    const maxBase = tx.maxFeePerGas - baseFee;\n    const inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n    const gasPrice = inclusionFeePerGas + baseFee;\n    return tx.gasLimit * gasPrice + tx.value;\n}\nexports.getUpfrontCost = getUpfrontCost;\nfunction getEffectivePriorityFee(tx, baseFee) {\n    if (baseFee === undefined || baseFee > tx.maxFeePerGas) {\n        throw new Error('Tx cannot pay baseFee');\n    }\n    // The remaining fee for the coinbase, which can take up to this value, capped at `maxPriorityFeePerGas`\n    const remainingFee = tx.maxFeePerGas - baseFee;\n    return tx.maxPriorityFeePerGas < remainingFee ? tx.maxPriorityFeePerGas : remainingFee;\n}\nexports.getEffectivePriorityFee = getEffectivePriorityFee;\n//# sourceMappingURL=eip1559.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateYParity = exports.serialize = exports.getHashedMessageToSign = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\nconst util_js_1 = require(\"../util.js\");\nconst legacy_js_1 = require(\"./legacy.js\");\nfunction getHashedMessageToSign(tx) {\n    const keccakFunction = tx.common.customCrypto.keccak256 ?? keccak_js_1.keccak256;\n    return keccakFunction(tx.getMessageToSign());\n}\nexports.getHashedMessageToSign = getHashedMessageToSign;\nfunction serialize(tx, base) {\n    return (0, util_1.concatBytes)((0, util_js_1.txTypeBytes)(tx.type), rlp_1.RLP.encode(base ?? tx.raw()));\n}\nexports.serialize = serialize;\nfunction validateYParity(tx) {\n    const { v } = tx;\n    if (v !== undefined && v !== util_1.BIGINT_0 && v !== util_1.BIGINT_1) {\n        const msg = (0, legacy_js_1.errorMsg)(tx, 'The y-parity of the transaction should either be 0 or 1');\n        throw new Error(msg);\n    }\n}\nexports.validateYParity = validateYParity;\n//# sourceMappingURL=eip2718.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDataFee = void 0;\nconst util_js_1 = require(\"../util.js\");\nconst Legacy = require(\"./legacy.js\");\n/**\n * The amount of gas paid for the data in this tx\n */\nfunction getDataFee(tx) {\n    return Legacy.getDataFee(tx, BigInt(util_js_1.AccessLists.getDataFeeEIP2930(tx.accessList, tx.common)));\n}\nexports.getDataFee = getDataFee;\n//# sourceMappingURL=eip2930.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDataFee = void 0;\nconst util_js_1 = require(\"../util.js\");\nconst Legacy = require(\"./legacy.js\");\n/**\n * The amount of gas paid for the data in this tx\n */\nfunction getDataFee(tx) {\n    const eip2930Cost = BigInt(util_js_1.AccessLists.getDataFeeEIP2930(tx.accessList, tx.common));\n    const eip7702Cost = BigInt(tx.authorizationList.length * Number(tx.common.param('gasPrices', 'perAuthBaseCost')));\n    return Legacy.getDataFee(tx, eip2930Cost + eip7702Cost);\n}\nexports.getDataFee = getDataFee;\n//# sourceMappingURL=eip7702.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEffectivePriorityFee = exports.getSenderPublicKey = exports.validateHighS = exports.hash = exports.getDataFee = exports.isSigned = exports.errorMsg = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\nconst baseTransaction_js_1 = require(\"../baseTransaction.js\");\nconst types_js_1 = require(\"../types.js\");\nfunction errorMsg(tx, msg) {\n    return `${msg} (${tx.errorStr()})`;\n}\nexports.errorMsg = errorMsg;\nfunction isSigned(tx) {\n    const { v, r, s } = tx;\n    if (v === undefined || r === undefined || s === undefined) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nexports.isSigned = isSigned;\n/**\n * The amount of gas paid for the data in this tx\n */\nfunction getDataFee(tx, extraCost) {\n    if (tx.cache.dataFee && tx.cache.dataFee.hardfork === tx.common.hardfork()) {\n        return tx.cache.dataFee.value;\n    }\n    const cost = baseTransaction_js_1.BaseTransaction.prototype.getDataFee.bind(tx)() + (extraCost ?? 0n);\n    if (Object.isFrozen(tx)) {\n        tx.cache.dataFee = {\n            value: cost,\n            hardfork: tx.common.hardfork(),\n        };\n    }\n    return cost;\n}\nexports.getDataFee = getDataFee;\nfunction hash(tx) {\n    if (!tx.isSigned()) {\n        const msg = errorMsg(tx, 'Cannot call hash method if transaction is not signed');\n        throw new Error(msg);\n    }\n    const keccakFunction = tx.common.customCrypto.keccak256 ?? keccak_js_1.keccak256;\n    if (Object.isFrozen(tx)) {\n        if (!tx.cache.hash) {\n            tx.cache.hash = keccakFunction(tx.serialize());\n        }\n        return tx.cache.hash;\n    }\n    return keccakFunction(tx.serialize());\n}\nexports.hash = hash;\n/**\n * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n * Reasoning: https://ethereum.stackexchange.com/a/55728\n */\nfunction validateHighS(tx) {\n    const { s } = tx;\n    if (tx.common.gteHardfork('homestead') && s !== undefined && s > util_1.SECP256K1_ORDER_DIV_2) {\n        const msg = errorMsg(tx, 'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n        throw new Error(msg);\n    }\n}\nexports.validateHighS = validateHighS;\nfunction getSenderPublicKey(tx) {\n    if (tx.cache.senderPubKey !== undefined) {\n        return tx.cache.senderPubKey;\n    }\n    const msgHash = tx.getMessageToVerifySignature();\n    const { v, r, s } = tx;\n    validateHighS(tx);\n    try {\n        const ecrecoverFunction = tx.common.customCrypto.ecrecover ?? util_1.ecrecover;\n        const sender = ecrecoverFunction(msgHash, v, (0, util_1.bigIntToUnpaddedBytes)(r), (0, util_1.bigIntToUnpaddedBytes)(s), tx.supports(types_js_1.Capability.EIP155ReplayProtection) ? tx.common.chainId() : undefined);\n        if (Object.isFrozen(tx)) {\n            tx.cache.senderPubKey = sender;\n        }\n        return sender;\n    }\n    catch (e) {\n        const msg = errorMsg(tx, 'Invalid Signature');\n        throw new Error(msg);\n    }\n}\nexports.getSenderPublicKey = getSenderPublicKey;\nfunction getEffectivePriorityFee(gasPrice, baseFee) {\n    if (baseFee !== undefined && baseFee > gasPrice) {\n        throw new Error('Tx cannot pay baseFee');\n    }\n    if (baseFee === undefined) {\n        return gasPrice;\n    }\n    return gasPrice - baseFee;\n}\nexports.getEffectivePriorityFee = getEffectivePriorityFee;\n//# sourceMappingURL=legacy.js.map","\"use strict\";\n/** EIP4844 constants */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BYTES_PER_FIELD_ELEMENT = exports.FIELD_ELEMENTS_PER_BLOB = exports.MAX_TX_WRAP_KZG_COMMITMENTS = exports.LIMIT_BLOBS_PER_TX = exports.MAX_VERSIONED_HASHES_LIST_SIZE = exports.MAX_ACCESS_LIST_SIZE = exports.MAX_CALLDATA_SIZE = void 0;\nexports.MAX_CALLDATA_SIZE = 16777216; // 2 ** 24\nexports.MAX_ACCESS_LIST_SIZE = 16777216; // 2 ** 24\nexports.MAX_VERSIONED_HASHES_LIST_SIZE = 16777216; // 2 ** 24\nexports.LIMIT_BLOBS_PER_TX = 6; // 786432 / 2^17 (`MAX_BLOB_GAS_PER_BLOCK` / `GAS_PER_BLOB`)\nexports.MAX_TX_WRAP_KZG_COMMITMENTS = 16777216; // 2 ** 24\nexports.FIELD_ELEMENTS_PER_BLOB = 4096; // This is also in the Common 4844 parameters but needed here since types can't access Common params\nexports.BYTES_PER_FIELD_ELEMENT = 32;\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FeeMarketEIP1559Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst baseTransaction_js_1 = require(\"./baseTransaction.js\");\nconst EIP1559 = require(\"./capabilities/eip1559.js\");\nconst EIP2718 = require(\"./capabilities/eip2718.js\");\nconst EIP2930 = require(\"./capabilities/eip2930.js\");\nconst Legacy = require(\"./capabilities/legacy.js\");\nconst types_js_1 = require(\"./types.js\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nclass FeeMarketEIP1559Transaction extends baseTransaction_js_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: types_js_1.TransactionType.FeeMarketEIP1559 }, opts);\n        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        if (!this.common.isActivatedEIP(1559)) {\n            throw new Error('EIP-1559 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);\n        // Populate the access list fields\n        const accessListData = util_js_1.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_js_1.AccessLists.verifyAccessList(this.accessList);\n        this.maxFeePerGas = (0, util_1.bytesToBigInt)((0, util_1.toBytes)(maxFeePerGas));\n        this.maxPriorityFeePerGas = (0, util_1.bytesToBigInt)((0, util_1.toBytes)(maxPriorityFeePerGas));\n        this._validateCannotExceedMaxInteger({\n            maxFeePerGas: this.maxFeePerGas,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        });\n        baseTransaction_js_1.BaseTransaction._validateNotArray(txData);\n        if (this.gasLimit * this.maxFeePerGas > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n            throw new Error(msg);\n        }\n        EIP2718.validateYParity(this);\n        Legacy.validateHighS(this);\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new FeeMarketEIP1559Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        if ((0, util_1.equalsBytes)(serialized.subarray(0, 1), (0, util_js_1.txTypeBytes)(types_js_1.TransactionType.FeeMarketEIP1559)) ===\n            false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${types_js_1.TransactionType.FeeMarketEIP1559}, received: ${(0, util_1.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        const values = rlp_1.RLP.decode(serialized.subarray(1));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        if (values.length !== 9 && values.length !== 12) {\n            throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n        }\n        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s,] = values;\n        this._validateNotArray({ chainId, v });\n        (0, util_1.validateNoLeadingZeroes)({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s });\n        return new FeeMarketEIP1559Transaction({\n            chainId: (0, util_1.bytesToBigInt)(chainId),\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? [],\n            v: v !== undefined ? (0, util_1.bytesToBigInt)(v) : undefined,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        return EIP2930.getDataFee(this);\n    }\n    /**\n     * Returns the minimum of calculated priority fee (from maxFeePerGas and baseFee) and maxPriorityFeePerGas\n     * @param baseFee Base fee retrieved from block\n     */\n    getEffectivePriorityFee(baseFee) {\n        return EIP1559.getEffectivePriorityFee(this, baseFee);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n    getUpfrontCost(baseFee = util_1.BIGINT_0) {\n        return EIP1559.getUpfrontCost(this, baseFee);\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytes of the EIP-1559 transaction, in order.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     *\n     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Bytes values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBytes)(this.chainId),\n            (0, util_1.bigIntToUnpaddedBytes)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBytes)(this.maxPriorityFeePerGas),\n            (0, util_1.bigIntToUnpaddedBytes)(this.maxFeePerGas),\n            (0, util_1.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0, util_1.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-1559 transaction.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    serialize() {\n        return EIP2718.serialize(this);\n    }\n    /**\n     * Returns the raw serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input\n     * ```\n     */\n    getMessageToSign() {\n        return EIP2718.serialize(this, this.raw().slice(0, 9));\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     */\n    getHashedMessageToSign() {\n        return EIP2718.getHashedMessageToSign(this);\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        return Legacy.hash(this);\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        return Legacy.getSenderPublicKey(this);\n    }\n    addSignature(v, r, s, convertV = false) {\n        r = (0, util_1.toBytes)(r);\n        s = (0, util_1.toBytes)(s);\n        const opts = { ...this.txOptions, common: this.common };\n        return FeeMarketEIP1559Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: convertV ? v - util_1.BIGINT_27 : v,\n            r: (0, util_1.bytesToBigInt)(r),\n            s: (0, util_1.bytesToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    toJSON() {\n        const accessListJSON = util_js_1.AccessLists.getAccessListJSON(this.accessList);\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            chainId: (0, util_1.bigIntToHex)(this.chainId),\n            maxPriorityFeePerGas: (0, util_1.bigIntToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0, util_1.bigIntToHex)(this.maxFeePerGas),\n            accessList: accessListJSON,\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return Legacy.errorMsg(this, msg);\n    }\n}\nexports.FeeMarketEIP1559Transaction = FeeMarketEIP1559Transaction;\n//# sourceMappingURL=eip1559Transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessListEIP2930Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst baseTransaction_js_1 = require(\"./baseTransaction.js\");\nconst EIP2718 = require(\"./capabilities/eip2718.js\");\nconst EIP2930 = require(\"./capabilities/eip2930.js\");\nconst Legacy = require(\"./capabilities/legacy.js\");\nconst types_js_1 = require(\"./types.js\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nclass AccessListEIP2930Transaction extends baseTransaction_js_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: types_js_1.TransactionType.AccessListEIP2930 }, opts);\n        const { chainId, accessList, gasPrice } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        // EIP-2718 check is done in Common\n        if (!this.common.isActivatedEIP(2930)) {\n            throw new Error('EIP-2930 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);\n        // Populate the access list fields\n        const accessListData = util_js_1.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_js_1.AccessLists.verifyAccessList(this.accessList);\n        this.gasPrice = (0, util_1.bytesToBigInt)((0, util_1.toBytes)(gasPrice));\n        this._validateCannotExceedMaxInteger({\n            gasPrice: this.gasPrice,\n        });\n        baseTransaction_js_1.BaseTransaction._validateNotArray(txData);\n        if (this.gasPrice * this.gasLimit > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n            throw new Error(msg);\n        }\n        EIP2718.validateYParity(this);\n        Legacy.validateHighS(this);\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new AccessListEIP2930Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        if ((0, util_1.equalsBytes)(serialized.subarray(0, 1), (0, util_js_1.txTypeBytes)(types_js_1.TransactionType.AccessListEIP2930)) ===\n            false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${types_js_1.TransactionType.AccessListEIP2930}, received: ${(0, util_1.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        const values = rlp_1.RLP.decode(Uint8Array.from(serialized.subarray(1)));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        if (values.length !== 8 && values.length !== 11) {\n            throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n        }\n        const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n        this._validateNotArray({ chainId, v });\n        (0, util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });\n        const emptyAccessList = [];\n        return new AccessListEIP2930Transaction({\n            chainId: (0, util_1.bytesToBigInt)(chainId),\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? emptyAccessList,\n            v: v !== undefined ? (0, util_1.bytesToBigInt)(v) : undefined,\n            r,\n            s,\n        }, opts);\n    }\n    getEffectivePriorityFee(baseFee) {\n        return Legacy.getEffectivePriorityFee(this.gasPrice, baseFee);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        return EIP2930.getDataFee(this);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytes of the EIP-2930 transaction, in order.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     *\n     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Bytes values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBytes)(this.chainId),\n            (0, util_1.bigIntToUnpaddedBytes)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBytes)(this.gasPrice),\n            (0, util_1.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0, util_1.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-2930 transaction.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    serialize() {\n        return EIP2718.serialize(this);\n    }\n    /**\n     * Returns the raw serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input\n     * ```\n     */\n    getMessageToSign() {\n        return EIP2718.serialize(this, this.raw().slice(0, 8));\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     */\n    getHashedMessageToSign() {\n        return EIP2718.getHashedMessageToSign(this);\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        return Legacy.hash(this);\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        return Legacy.getSenderPublicKey(this);\n    }\n    addSignature(v, r, s, convertV = false) {\n        r = (0, util_1.toBytes)(r);\n        s = (0, util_1.toBytes)(s);\n        const opts = { ...this.txOptions, common: this.common };\n        return AccessListEIP2930Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: convertV ? v - util_1.BIGINT_27 : v,\n            r: (0, util_1.bytesToBigInt)(r),\n            s: (0, util_1.bytesToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    toJSON() {\n        const accessListJSON = util_js_1.AccessLists.getAccessListJSON(this.accessList);\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            chainId: (0, util_1.bigIntToHex)(this.chainId),\n            gasPrice: (0, util_1.bigIntToHex)(this.gasPrice),\n            accessList: accessListJSON,\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n        errorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return Legacy.errorMsg(this, msg);\n    }\n}\nexports.AccessListEIP2930Transaction = AccessListEIP2930Transaction;\n//# sourceMappingURL=eip2930Transaction.js.map","import { hasProperty, isObject } from '@metamask/utils';\n\n/**\n * Deletes frequentRpcListDetail if networkConfigurations exists, on the NetworkController state.\n * Further explanation in ./077-supplements.md\n *\n * @param state - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\n\nexport default function transformState077For082(\n  state: Record<string, unknown>,\n) {\n  if (\n    hasProperty(state, 'PreferencesController') &&\n    isObject(state.PreferencesController) &&\n    hasProperty(state.PreferencesController, 'frequentRpcListDetail') &&\n    isObject(state.NetworkController) &&\n    hasProperty(state.NetworkController, 'networkConfigurations')\n  ) {\n    delete state.PreferencesController.frequentRpcListDetail;\n  }\n\n  return { ...state };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlobEIP4844Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst baseTransaction_js_1 = require(\"./baseTransaction.js\");\nconst EIP1559 = require(\"./capabilities/eip1559.js\");\nconst EIP2718 = require(\"./capabilities/eip2718.js\");\nconst EIP2930 = require(\"./capabilities/eip2930.js\");\nconst Legacy = require(\"./capabilities/legacy.js\");\nconst constants_js_1 = require(\"./constants.js\");\nconst types_js_1 = require(\"./types.js\");\nconst util_js_1 = require(\"./util.js\");\nconst validateBlobTransactionNetworkWrapper = (blobVersionedHashes, blobs, commitments, kzgProofs, version, kzg) => {\n    if (!(blobVersionedHashes.length === blobs.length && blobs.length === commitments.length)) {\n        throw new Error('Number of blobVersionedHashes, blobs, and commitments not all equal');\n    }\n    if (blobVersionedHashes.length === 0) {\n        throw new Error('Invalid transaction with empty blobs');\n    }\n    let isValid;\n    try {\n        isValid = kzg.verifyBlobKzgProofBatch(blobs, commitments, kzgProofs);\n    }\n    catch (error) {\n        throw new Error(`KZG verification of blobs fail with error=${error}`);\n    }\n    if (!isValid) {\n        throw new Error('KZG proof cannot be verified from blobs/commitments');\n    }\n    for (let x = 0; x < blobVersionedHashes.length; x++) {\n        const computedVersionedHash = (0, util_1.computeVersionedHash)(commitments[x], version);\n        if (!(0, util_1.equalsBytes)(computedVersionedHash, blobVersionedHashes[x])) {\n            throw new Error(`commitment for blob at index ${x} does not match versionedHash`);\n        }\n    }\n};\n/**\n * Typed transaction with a new gas fee market mechanism for transactions that include \"blobs\" of data\n *\n * - TransactionType: 3\n * - EIP: [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844)\n */\nclass BlobEIP4844Transaction extends baseTransaction_js_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static constructors or factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: types_js_1.TransactionType.BlobEIP4844 }, opts);\n        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas, maxFeePerBlobGas } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        if (!this.common.isActivatedEIP(1559)) {\n            throw new Error('EIP-1559 not enabled on Common');\n        }\n        if (!this.common.isActivatedEIP(4844)) {\n            throw new Error('EIP-4844 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);\n        // Populate the access list fields\n        const accessListData = util_js_1.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_js_1.AccessLists.verifyAccessList(this.accessList);\n        this.maxFeePerGas = (0, util_1.bytesToBigInt)((0, util_1.toBytes)(maxFeePerGas));\n        this.maxPriorityFeePerGas = (0, util_1.bytesToBigInt)((0, util_1.toBytes)(maxPriorityFeePerGas));\n        this._validateCannotExceedMaxInteger({\n            maxFeePerGas: this.maxFeePerGas,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        });\n        baseTransaction_js_1.BaseTransaction._validateNotArray(txData);\n        if (this.gasLimit * this.maxFeePerGas > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n            throw new Error(msg);\n        }\n        this.maxFeePerBlobGas = (0, util_1.bytesToBigInt)((0, util_1.toBytes)((maxFeePerBlobGas ?? '') === '' ? '0x' : maxFeePerBlobGas));\n        this.blobVersionedHashes = (txData.blobVersionedHashes ?? []).map((vh) => (0, util_1.toBytes)(vh));\n        EIP2718.validateYParity(this);\n        Legacy.validateHighS(this);\n        for (const hash of this.blobVersionedHashes) {\n            if (hash.length !== 32) {\n                const msg = this._errorMsg('versioned hash is invalid length');\n                throw new Error(msg);\n            }\n            if (BigInt(hash[0]) !== this.common.param('sharding', 'blobCommitmentVersionKzg')) {\n                const msg = this._errorMsg('versioned hash does not start with KZG commitment version');\n                throw new Error(msg);\n            }\n        }\n        if (this.blobVersionedHashes.length > constants_js_1.LIMIT_BLOBS_PER_TX) {\n            const msg = this._errorMsg(`tx can contain at most ${constants_js_1.LIMIT_BLOBS_PER_TX} blobs`);\n            throw new Error(msg);\n        }\n        else if (this.blobVersionedHashes.length === 0) {\n            const msg = this._errorMsg(`tx should contain at least one blob`);\n            throw new Error(msg);\n        }\n        if (this.to === undefined) {\n            const msg = this._errorMsg(`tx should have a \"to\" field and cannot be used to create contracts`);\n            throw new Error(msg);\n        }\n        this.blobs = txData.blobs?.map((blob) => (0, util_1.toBytes)(blob));\n        this.kzgCommitments = txData.kzgCommitments?.map((commitment) => (0, util_1.toBytes)(commitment));\n        this.kzgProofs = txData.kzgProofs?.map((proof) => (0, util_1.toBytes)(proof));\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    static fromTxData(txData, opts) {\n        if (opts?.common?.customCrypto?.kzg === undefined) {\n            throw new Error('A common object with customCrypto.kzg initialized required to instantiate a 4844 blob tx');\n        }\n        const kzg = opts.common.customCrypto.kzg;\n        if (txData.blobsData !== undefined) {\n            if (txData.blobs !== undefined) {\n                throw new Error('cannot have both raw blobs data and encoded blobs in constructor');\n            }\n            if (txData.kzgCommitments !== undefined) {\n                throw new Error('cannot have both raw blobs data and KZG commitments in constructor');\n            }\n            if (txData.blobVersionedHashes !== undefined) {\n                throw new Error('cannot have both raw blobs data and versioned hashes in constructor');\n            }\n            if (txData.kzgProofs !== undefined) {\n                throw new Error('cannot have both raw blobs data and KZG proofs in constructor');\n            }\n            txData.blobs = (0, util_1.getBlobs)(txData.blobsData.reduce((acc, cur) => acc + cur));\n            txData.kzgCommitments = (0, util_1.blobsToCommitments)(kzg, txData.blobs);\n            txData.blobVersionedHashes = (0, util_1.commitmentsToVersionedHashes)(txData.kzgCommitments);\n            txData.kzgProofs = (0, util_1.blobsToProofs)(kzg, txData.blobs, txData.kzgCommitments);\n        }\n        return new BlobEIP4844Transaction(txData, opts);\n    }\n    /**\n     * Returns the minimum of calculated priority fee (from maxFeePerGas and baseFee) and maxPriorityFeePerGas\n     * @param baseFee Base fee retrieved from block\n     */\n    getEffectivePriorityFee(baseFee) {\n        return EIP1559.getEffectivePriorityFee(this, baseFee);\n    }\n    /**\n     * Creates the minimal representation of a blob transaction from the network wrapper version.\n     * The minimal representation is used when adding transactions to an execution payload/block\n     * @param txData a {@link BlobEIP4844Transaction} containing optional blobs/kzg commitments\n     * @param opts - dictionary of {@link TxOptions}\n     * @returns the \"minimal\" representation of a BlobEIP4844Transaction (i.e. transaction object minus blobs and kzg commitments)\n     */\n    static minimalFromNetworkWrapper(txData, opts) {\n        if (opts?.common?.customCrypto?.kzg === undefined) {\n            throw new Error('A common object with customCrypto.kzg initialized required to instantiate a 4844 blob tx');\n        }\n        const tx = BlobEIP4844Transaction.fromTxData({\n            ...txData,\n            ...{ blobs: undefined, kzgCommitments: undefined, kzgProofs: undefined },\n        }, opts);\n        return tx;\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x03 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data,\n     * access_list, max_fee_per_data_gas, blob_versioned_hashes, y_parity, r, s])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        if (opts.common?.customCrypto?.kzg === undefined) {\n            throw new Error('A common object with customCrypto.kzg initialized required to instantiate a 4844 blob tx');\n        }\n        if ((0, util_1.equalsBytes)(serialized.subarray(0, 1), (0, util_js_1.txTypeBytes)(types_js_1.TransactionType.BlobEIP4844)) === false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-4844 transaction (wrong tx type, expected: ${types_js_1.TransactionType.BlobEIP4844}, received: ${(0, util_1.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        const values = rlp_1.RLP.decode(serialized.subarray(1));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return BlobEIP4844Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        if (opts.common?.customCrypto?.kzg === undefined) {\n            throw new Error('A common object with customCrypto.kzg initialized required to instantiate a 4844 blob tx');\n        }\n        if (values.length !== 11 && values.length !== 14) {\n            throw new Error('Invalid EIP-4844 transaction. Only expecting 11 values (for unsigned tx) or 14 values (for signed tx).');\n        }\n        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, maxFeePerBlobGas, blobVersionedHashes, v, r, s,] = values;\n        this._validateNotArray({ chainId, v });\n        (0, util_1.validateNoLeadingZeroes)({\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            value,\n            maxFeePerBlobGas,\n            v,\n            r,\n            s,\n        });\n        return new BlobEIP4844Transaction({\n            chainId: (0, util_1.bytesToBigInt)(chainId),\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? [],\n            maxFeePerBlobGas,\n            blobVersionedHashes,\n            v: v !== undefined ? (0, util_1.bytesToBigInt)(v) : undefined,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * Creates a transaction from the network encoding of a blob transaction (with blobs/commitments/proof)\n     * @param serialized a buffer representing a serialized BlobTransactionNetworkWrapper\n     * @param opts any TxOptions defined\n     * @returns a BlobEIP4844Transaction\n     */\n    static fromSerializedBlobTxNetworkWrapper(serialized, opts) {\n        if (!opts || !opts.common) {\n            throw new Error('common instance required to validate versioned hashes');\n        }\n        if (opts.common?.customCrypto?.kzg === undefined) {\n            throw new Error('A common object with customCrypto.kzg initialized required to instantiate a 4844 blob tx');\n        }\n        if ((0, util_1.equalsBytes)(serialized.subarray(0, 1), (0, util_js_1.txTypeBytes)(types_js_1.TransactionType.BlobEIP4844)) === false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-4844 transaction (wrong tx type, expected: ${types_js_1.TransactionType.BlobEIP4844}, received: ${(0, util_1.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        // Validate network wrapper\n        const networkTxValues = rlp_1.RLP.decode(serialized.subarray(1));\n        if (networkTxValues.length !== 4) {\n            throw Error(`Expected 4 values in the deserialized network transaction`);\n        }\n        const [txValues, blobs, kzgCommitments, kzgProofs] = networkTxValues;\n        // Construct the tx but don't freeze yet, we will assign blobs etc once validated\n        const decodedTx = BlobEIP4844Transaction.fromValuesArray(txValues, { ...opts, freeze: false });\n        if (decodedTx.to === undefined) {\n            throw Error('BlobEIP4844Transaction can not be send without a valid `to`');\n        }\n        const version = Number(opts.common.param('sharding', 'blobCommitmentVersionKzg'));\n        validateBlobTransactionNetworkWrapper(decodedTx.blobVersionedHashes, blobs, kzgCommitments, kzgProofs, version, opts.common.customCrypto.kzg);\n        // set the network blob data on the tx\n        decodedTx.blobs = blobs;\n        decodedTx.kzgCommitments = kzgCommitments;\n        decodedTx.kzgProofs = kzgProofs;\n        // freeze the tx\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(decodedTx);\n        }\n        return decodedTx;\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        return EIP2930.getDataFee(this);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n    getUpfrontCost(baseFee = util_1.BIGINT_0) {\n        return EIP1559.getUpfrontCost(this, baseFee);\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytes of the EIP-4844 transaction, in order.\n     *\n     * Format: [chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data,\n     * access_list, max_fee_per_data_gas, blob_versioned_hashes, y_parity, r, s]`.\n     *\n     * Use {@link BlobEIP4844Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Bytes values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link BlobEIP4844Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBytes)(this.chainId),\n            (0, util_1.bigIntToUnpaddedBytes)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBytes)(this.maxPriorityFeePerGas),\n            (0, util_1.bigIntToUnpaddedBytes)(this.maxFeePerGas),\n            (0, util_1.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0, util_1.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.accessList,\n            (0, util_1.bigIntToUnpaddedBytes)(this.maxFeePerBlobGas),\n            this.blobVersionedHashes,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-4844 transaction.\n     *\n     * Format: `0x03 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * access_list, max_fee_per_data_gas, blob_versioned_hashes, y_parity, r, s])`.\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    serialize() {\n        return EIP2718.serialize(this);\n    }\n    /**\n     * @returns the serialized form of a blob transaction in the network wrapper format (used for gossipping mempool transactions over devp2p)\n     */\n    serializeNetworkWrapper() {\n        if (this.blobs === undefined ||\n            this.kzgCommitments === undefined ||\n            this.kzgProofs === undefined) {\n            throw new Error('cannot serialize network wrapper without blobs, KZG commitments and KZG proofs provided');\n        }\n        return EIP2718.serialize(this, [this.raw(), this.blobs, this.kzgCommitments, this.kzgProofs]);\n    }\n    /**\n     * Returns the raw serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input\n     * ```\n     */\n    getMessageToSign() {\n        return EIP2718.serialize(this, this.raw().slice(0, 11));\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     */\n    getHashedMessageToSign() {\n        return EIP2718.getHashedMessageToSign(this);\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link BlobEIP4844Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        return Legacy.hash(this);\n    }\n    getMessageToVerifySignature() {\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        return Legacy.getSenderPublicKey(this);\n    }\n    /**\n     * Returns the EIP 4844 transaction network wrapper in JSON format similar to toJSON, including\n     * blobs, commitments, and proofs fields\n     * @param serialized a buffer representing a serialized BlobTransactionNetworkWrapper\n     * @param opts any TxOptions defined\n     * @returns JsonBlobTxNetworkWrapper with blobs, KZG commitments, and KZG proofs fields\n     */\n    static networkWrapperToJson(serialized, opts) {\n        const tx = this.fromSerializedBlobTxNetworkWrapper(serialized, opts);\n        const accessListJSON = util_js_1.AccessLists.getAccessListJSON(tx.accessList);\n        const baseJson = tx.toJSON();\n        return {\n            ...baseJson,\n            chainId: (0, util_1.bigIntToHex)(tx.chainId),\n            maxPriorityFeePerGas: (0, util_1.bigIntToHex)(tx.maxPriorityFeePerGas),\n            maxFeePerGas: (0, util_1.bigIntToHex)(tx.maxFeePerGas),\n            accessList: accessListJSON,\n            maxFeePerBlobGas: (0, util_1.bigIntToHex)(tx.maxFeePerBlobGas),\n            blobVersionedHashes: tx.blobVersionedHashes.map((hash) => (0, util_1.bytesToHex)(hash)),\n            blobs: tx.blobs.map((bytes) => (0, util_1.bytesToHex)(bytes)),\n            kzgCommitments: tx.kzgCommitments.map((bytes) => (0, util_1.bytesToHex)(bytes)),\n            kzgProofs: tx.kzgProofs.map((bytes) => (0, util_1.bytesToHex)(bytes)),\n        };\n    }\n    toJSON() {\n        const accessListJSON = util_js_1.AccessLists.getAccessListJSON(this.accessList);\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            chainId: (0, util_1.bigIntToHex)(this.chainId),\n            maxPriorityFeePerGas: (0, util_1.bigIntToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0, util_1.bigIntToHex)(this.maxFeePerGas),\n            accessList: accessListJSON,\n            maxFeePerBlobGas: (0, util_1.bigIntToHex)(this.maxFeePerBlobGas),\n            blobVersionedHashes: this.blobVersionedHashes.map((hash) => (0, util_1.bytesToHex)(hash)),\n        };\n    }\n    addSignature(v, r, s, convertV = false) {\n        r = (0, util_1.toBytes)(r);\n        s = (0, util_1.toBytes)(s);\n        const opts = { ...this.txOptions, common: this.common };\n        return BlobEIP4844Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: convertV ? v - util_1.BIGINT_27 : v,\n            r: (0, util_1.bytesToBigInt)(r),\n            s: (0, util_1.bytesToBigInt)(s),\n            maxFeePerBlobGas: this.maxFeePerBlobGas,\n            blobVersionedHashes: this.blobVersionedHashes,\n            blobs: this.blobs,\n            kzgCommitments: this.kzgCommitments,\n            kzgProofs: this.kzgProofs,\n        }, opts);\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return Legacy.errorMsg(this, msg);\n    }\n    /**\n     * @returns the number of blobs included with this transaction\n     */\n    numBlobs() {\n        return this.blobVersionedHashes.length;\n    }\n}\nexports.BlobEIP4844Transaction = BlobEIP4844Transaction;\n//# sourceMappingURL=eip4844Transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EOACodeEIP7702Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst baseTransaction_js_1 = require(\"./baseTransaction.js\");\nconst EIP1559 = require(\"./capabilities/eip1559.js\");\nconst EIP2718 = require(\"./capabilities/eip2718.js\");\nconst EIP7702 = require(\"./capabilities/eip7702.js\");\nconst Legacy = require(\"./capabilities/legacy.js\");\nconst types_js_1 = require(\"./types.js\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * Typed transaction with the ability to set codes on EOA accounts\n *\n * - TransactionType: 4\n * - EIP: [EIP-7702](https://github.com/ethereum/EIPs/blob/62419ca3f45375db00b04a368ea37c0bfb05386a/EIPS/eip-7702.md)\n */\nclass EOACodeEIP7702Transaction extends baseTransaction_js_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: types_js_1.TransactionType.EOACodeEIP7702 }, opts);\n        const { chainId, accessList, authorizationList, maxFeePerGas, maxPriorityFeePerGas } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        if (!this.common.isActivatedEIP(7702)) {\n            throw new Error('EIP-7702 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930, 7702]);\n        // Populate the access list fields\n        const accessListData = util_js_1.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_js_1.AccessLists.verifyAccessList(this.accessList);\n        // Populate the authority list fields\n        const authorizationListData = util_js_1.AuthorizationLists.getAuthorizationListData(authorizationList ?? []);\n        this.authorizationList = authorizationListData.authorizationList;\n        this.AuthorizationListJSON = authorizationListData.AuthorizationListJSON;\n        // Verify the authority list format.\n        util_js_1.AuthorizationLists.verifyAuthorizationList(this.authorizationList);\n        this.maxFeePerGas = (0, util_1.bytesToBigInt)((0, util_1.toBytes)(maxFeePerGas));\n        this.maxPriorityFeePerGas = (0, util_1.bytesToBigInt)((0, util_1.toBytes)(maxPriorityFeePerGas));\n        this._validateCannotExceedMaxInteger({\n            maxFeePerGas: this.maxFeePerGas,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        });\n        baseTransaction_js_1.BaseTransaction._validateNotArray(txData);\n        if (this.gasLimit * this.maxFeePerGas > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n            throw new Error(msg);\n        }\n        EIP2718.validateYParity(this);\n        Legacy.validateHighS(this);\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new EOACodeEIP7702Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x04 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        if ((0, util_1.equalsBytes)(serialized.subarray(0, 1), (0, util_js_1.txTypeBytes)(types_js_1.TransactionType.EOACodeEIP7702)) === false) {\n            throw new Error(`Invalid serialized tx input: not an EIP-7702 transaction (wrong tx type, expected: ${types_js_1.TransactionType.EOACodeEIP7702}, received: ${(0, util_1.bytesToHex)(serialized.subarray(0, 1))}`);\n        }\n        const values = rlp_1.RLP.decode(serialized.subarray(1));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return EOACodeEIP7702Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        if (values.length !== 10 && values.length !== 13) {\n            throw new Error('Invalid EIP-7702 transaction. Only expecting 10 values (for unsigned tx) or 13 values (for signed tx).');\n        }\n        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, authorityList, v, r, s,] = values;\n        this._validateNotArray({ chainId, v });\n        (0, util_1.validateNoLeadingZeroes)({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s });\n        return new EOACodeEIP7702Transaction({\n            chainId: (0, util_1.bytesToBigInt)(chainId),\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? [],\n            authorizationList: authorityList ?? [],\n            v: v !== undefined ? (0, util_1.bytesToBigInt)(v) : undefined,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        return EIP7702.getDataFee(this);\n    }\n    /**\n     * Returns the minimum of calculated priority fee (from maxFeePerGas and baseFee) and maxPriorityFeePerGas\n     * @param baseFee Base fee retrieved from block\n     */\n    getEffectivePriorityFee(baseFee) {\n        return EIP1559.getEffectivePriorityFee(this, baseFee);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n    getUpfrontCost(baseFee = util_1.BIGINT_0) {\n        return EIP1559.getUpfrontCost(this, baseFee);\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytes of the EIP-7702 transaction, in order.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, authorizationList, signatureYParity, signatureR, signatureS]`\n     *\n     * Use {@link EOACodeEIP7702Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Bytes values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link EOACodeEIP7702Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBytes)(this.chainId),\n            (0, util_1.bigIntToUnpaddedBytes)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBytes)(this.maxPriorityFeePerGas),\n            (0, util_1.bigIntToUnpaddedBytes)(this.maxFeePerGas),\n            (0, util_1.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0, util_1.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.accessList,\n            this.authorizationList,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-7702 transaction.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, authorizationList, signatureYParity, signatureR, signatureS])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    serialize() {\n        return EIP2718.serialize(this);\n    }\n    /**\n     * Returns the raw serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input\n     * ```\n     */\n    getMessageToSign() {\n        return EIP2718.serialize(this, this.raw().slice(0, 10));\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     */\n    getHashedMessageToSign() {\n        return EIP2718.getHashedMessageToSign(this);\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link EOACodeEIP7702Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        return Legacy.hash(this);\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        return Legacy.getSenderPublicKey(this);\n    }\n    addSignature(v, r, s, convertV = false) {\n        r = (0, util_1.toBytes)(r);\n        s = (0, util_1.toBytes)(s);\n        const opts = { ...this.txOptions, common: this.common };\n        return EOACodeEIP7702Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            authorizationList: this.authorizationList,\n            v: convertV ? v - util_1.BIGINT_27 : v,\n            r: (0, util_1.bytesToBigInt)(r),\n            s: (0, util_1.bytesToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    toJSON() {\n        const accessListJSON = util_js_1.AccessLists.getAccessListJSON(this.accessList);\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            chainId: (0, util_1.bigIntToHex)(this.chainId),\n            maxPriorityFeePerGas: (0, util_1.bigIntToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0, util_1.bigIntToHex)(this.maxFeePerGas),\n            accessList: accessListJSON,\n            authorizationList: this.AuthorizationListJSON,\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return Legacy.errorMsg(this, msg);\n    }\n}\nexports.EOACodeEIP7702Transaction = EOACodeEIP7702Transaction;\n//# sourceMappingURL=eip7702Transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeTxParams = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst normalizeTxParams = (_txParams) => {\n    const txParams = Object.assign({}, _txParams);\n    txParams.gasLimit = (0, util_1.toType)(txParams.gasLimit ?? txParams.gas, util_1.TypeOutput.BigInt);\n    txParams.data = txParams.data === undefined ? txParams.input : txParams.data;\n    // check and convert gasPrice and value params\n    txParams.gasPrice = txParams.gasPrice !== undefined ? BigInt(txParams.gasPrice) : undefined;\n    txParams.value = txParams.value !== undefined ? BigInt(txParams.value) : undefined;\n    // strict byte length checking\n    txParams.to =\n        txParams.to !== null && txParams.to !== undefined\n            ? (0, util_1.setLengthLeft)((0, util_1.toBytes)(txParams.to), 20)\n            : null;\n    // Normalize the v/r/s values. If RPC returns '0x0', ensure v/r/s are set to `undefined` in the tx.\n    // If this is not done, then the transaction creation will throw, because `v` is `0`.\n    // Note: this still means that `isSigned` will return `false`.\n    // v/r/s values are `0x0` on networks like Optimism, where the tx is a system tx.\n    // For instance: https://optimistic.etherscan.io/tx/0xf4304cb09b3f58a8e5d20fec5f393c96ccffe0269aaf632cb2be7a8a0f0c91cc\n    txParams.v = txParams.v === '0x0' ? '0x' : txParams.v;\n    txParams.r = txParams.r === '0x0' ? '0x' : txParams.r;\n    txParams.s = txParams.s === '0x0' ? '0x' : txParams.s;\n    if (txParams.v !== '0x' || txParams.r !== '0x' || txParams.s !== '0x') {\n        txParams.v = (0, util_1.toType)(txParams.v, util_1.TypeOutput.BigInt);\n    }\n    return txParams;\n};\nexports.normalizeTxParams = normalizeTxParams;\n//# sourceMappingURL=fromRpc.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionFactory = exports.LegacyTransaction = exports.EOACodeEIP7702Transaction = exports.BlobEIP4844Transaction = exports.AccessListEIP2930Transaction = exports.FeeMarketEIP1559Transaction = void 0;\nvar eip1559Transaction_js_1 = require(\"./eip1559Transaction.js\");\nObject.defineProperty(exports, \"FeeMarketEIP1559Transaction\", { enumerable: true, get: function () { return eip1559Transaction_js_1.FeeMarketEIP1559Transaction; } });\nvar eip2930Transaction_js_1 = require(\"./eip2930Transaction.js\");\nObject.defineProperty(exports, \"AccessListEIP2930Transaction\", { enumerable: true, get: function () { return eip2930Transaction_js_1.AccessListEIP2930Transaction; } });\nvar eip4844Transaction_js_1 = require(\"./eip4844Transaction.js\");\nObject.defineProperty(exports, \"BlobEIP4844Transaction\", { enumerable: true, get: function () { return eip4844Transaction_js_1.BlobEIP4844Transaction; } });\nvar eip7702Transaction_js_1 = require(\"./eip7702Transaction.js\");\nObject.defineProperty(exports, \"EOACodeEIP7702Transaction\", { enumerable: true, get: function () { return eip7702Transaction_js_1.EOACodeEIP7702Transaction; } });\nvar legacyTransaction_js_1 = require(\"./legacyTransaction.js\");\nObject.defineProperty(exports, \"LegacyTransaction\", { enumerable: true, get: function () { return legacyTransaction_js_1.LegacyTransaction; } });\nvar transactionFactory_js_1 = require(\"./transactionFactory.js\");\nObject.defineProperty(exports, \"TransactionFactory\", { enumerable: true, get: function () { return transactionFactory_js_1.TransactionFactory; } });\n__exportStar(require(\"./types.js\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LegacyTransaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\nconst baseTransaction_js_1 = require(\"./baseTransaction.js\");\nconst Legacy = require(\"./capabilities/legacy.js\");\nconst types_js_1 = require(\"./types.js\");\nfunction meetsEIP155(_v, chainId) {\n    const v = Number(_v);\n    const chainIdDoubled = Number(chainId) * 2;\n    return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nclass LegacyTransaction extends baseTransaction_js_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: types_js_1.TransactionType.Legacy }, opts);\n        this.common = this._validateTxV(this.v, opts.common);\n        this.keccakFunction = this.common.customCrypto.keccak256 ?? keccak_js_1.keccak256;\n        this.gasPrice = (0, util_1.bytesToBigInt)((0, util_1.toBytes)(txData.gasPrice));\n        if (this.gasPrice * this.gasLimit > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });\n        baseTransaction_js_1.BaseTransaction._validateNotArray(txData);\n        if (this.common.gteHardfork('spuriousDragon')) {\n            if (!this.isSigned()) {\n                this.activeCapabilities.push(types_js_1.Capability.EIP155ReplayProtection);\n            }\n            else {\n                // EIP155 spec:\n                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n                // then when computing the hash of a transaction for purposes of signing or recovering\n                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n                // v and chain ID meet EIP-155 conditions\n                if (meetsEIP155(this.v, this.common.chainId())) {\n                    this.activeCapabilities.push(types_js_1.Capability.EIP155ReplayProtection);\n                }\n            }\n        }\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n     *\n     * Notes:\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new LegacyTransaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        const values = rlp_1.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input. Must be array');\n        }\n        return this.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        // If length is not 6, it has length 9. If v/r/s are empty Uint8Arrays, it is still an unsigned transaction\n        // This happens if you get the RLP data from `raw()`\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n        }\n        const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n        (0, util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });\n        return new LegacyTransaction({\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            v,\n            r,\n            s,\n        }, opts);\n    }\n    getEffectivePriorityFee(baseFee) {\n        return Legacy.getEffectivePriorityFee(this.gasPrice, baseFee);\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Bytes of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For legacy txs this is also the correct format to add transactions\n     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n     * for typed txs).\n     *\n     * For an unsigned tx this method returns the empty Bytes values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBytes)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBytes)(this.gasPrice),\n            (0, util_1.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0, util_1.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned tx this method uses the empty Uint8Array values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link Transaction.getMessageToSign}.\n     */\n    serialize() {\n        return rlp_1.RLP.encode(this.raw());\n    }\n    /**\n     * Returns the raw unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: the raw message message format for the legacy tx is not RLP encoded\n     * and you might need to do yourself with:\n     *\n     * ```javascript\n     * import { RLP } from '@ethereumjs/rlp'\n     * const message = tx.getMessageToSign()\n     * const serializedMessage = RLP.encode(message)) // use this for the HW wallet input\n     * ```\n     */\n    getMessageToSign() {\n        const message = [\n            (0, util_1.bigIntToUnpaddedBytes)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBytes)(this.gasPrice),\n            (0, util_1.bigIntToUnpaddedBytes)(this.gasLimit),\n            this.to !== undefined ? this.to.bytes : new Uint8Array(0),\n            (0, util_1.bigIntToUnpaddedBytes)(this.value),\n            this.data,\n        ];\n        if (this.supports(types_js_1.Capability.EIP155ReplayProtection)) {\n            message.push((0, util_1.bigIntToUnpaddedBytes)(this.common.chainId()));\n            message.push((0, util_1.unpadBytes)((0, util_1.toBytes)(0)));\n            message.push((0, util_1.unpadBytes)((0, util_1.toBytes)(0)));\n        }\n        return message;\n    }\n    /**\n     * Returns the hashed serialized unsigned tx, which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     */\n    getHashedMessageToSign() {\n        const message = this.getMessageToSign();\n        return this.keccakFunction(rlp_1.RLP.encode(message));\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        return Legacy.getDataFee(this);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        return Legacy.hash(this);\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('This transaction is not signed');\n            throw new Error(msg);\n        }\n        return this.getHashedMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        return Legacy.getSenderPublicKey(this);\n    }\n    addSignature(v, r, s, convertV = false) {\n        r = (0, util_1.toBytes)(r);\n        s = (0, util_1.toBytes)(s);\n        if (convertV && this.supports(types_js_1.Capability.EIP155ReplayProtection)) {\n            v += this.common.chainId() * util_1.BIGINT_2 + util_1.BIGINT_8;\n        }\n        const opts = { ...this.txOptions, common: this.common };\n        return LegacyTransaction.fromTxData({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v,\n            r: (0, util_1.bytesToBigInt)(r),\n            s: (0, util_1.bytesToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */\n    toJSON() {\n        const baseJson = super.toJSON();\n        return {\n            ...baseJson,\n            gasPrice: (0, util_1.bigIntToHex)(this.gasPrice),\n        };\n    }\n    /**\n     * Validates tx's `v` value\n     */\n    _validateTxV(_v, common) {\n        let chainIdBigInt;\n        const v = _v !== undefined ? Number(_v) : undefined;\n        // Check for valid v values in the scope of a signed legacy tx\n        if (v !== undefined) {\n            // v is 1. not matching the EIP-155 chainId included case and...\n            // v is 2. not matching the classic v=27 or v=28 case\n            if (v < 37 && v !== 27 && v !== 28) {\n                throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n            }\n        }\n        // No unsigned tx and EIP-155 activated and chain ID included\n        if (v !== undefined &&\n            v !== 0 &&\n            (!common || common.gteHardfork('spuriousDragon')) &&\n            v !== 27 &&\n            v !== 28) {\n            if (common) {\n                if (!meetsEIP155(BigInt(v), common.chainId())) {\n                    throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n                }\n            }\n            else {\n                // Derive the original chain ID\n                let numSub;\n                if ((v - 35) % 2 === 0) {\n                    numSub = 35;\n                }\n                else {\n                    numSub = 36;\n                }\n                // Use derived chain ID to create a proper Common\n                chainIdBigInt = BigInt(v - numSub) / util_1.BIGINT_2;\n            }\n        }\n        return this._getCommon(common, chainIdBigInt);\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` gasPrice=${this.gasPrice}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return Legacy.errorMsg(this, msg);\n    }\n}\nexports.LegacyTransaction = LegacyTransaction;\n//# sourceMappingURL=legacyTransaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionFactory = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst eip1559Transaction_js_1 = require(\"./eip1559Transaction.js\");\nconst eip2930Transaction_js_1 = require(\"./eip2930Transaction.js\");\nconst eip4844Transaction_js_1 = require(\"./eip4844Transaction.js\");\nconst eip7702Transaction_js_1 = require(\"./eip7702Transaction.js\");\nconst fromRpc_js_1 = require(\"./fromRpc.js\");\nconst legacyTransaction_js_1 = require(\"./legacyTransaction.js\");\nconst types_js_1 = require(\"./types.js\");\nclass TransactionFactory {\n    // It is not possible to instantiate a TransactionFactory object.\n    constructor() { }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param txOptions - Options to pass on to the constructor of the transaction\n     */\n    static fromTxData(txData, txOptions = {}) {\n        if (!('type' in txData) || txData.type === undefined) {\n            // Assume legacy transaction\n            return legacyTransaction_js_1.LegacyTransaction.fromTxData(txData, txOptions);\n        }\n        else {\n            if ((0, types_js_1.isLegacyTxData)(txData)) {\n                return legacyTransaction_js_1.LegacyTransaction.fromTxData(txData, txOptions);\n            }\n            else if ((0, types_js_1.isAccessListEIP2930TxData)(txData)) {\n                return eip2930Transaction_js_1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n            }\n            else if ((0, types_js_1.isFeeMarketEIP1559TxData)(txData)) {\n                return eip1559Transaction_js_1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n            }\n            else if ((0, types_js_1.isBlobEIP4844TxData)(txData)) {\n                return eip4844Transaction_js_1.BlobEIP4844Transaction.fromTxData(txData, txOptions);\n            }\n            else if ((0, types_js_1.isEOACodeEIP7702TxData)(txData)) {\n                return eip7702Transaction_js_1.EOACodeEIP7702Transaction.fromTxData(txData, txOptions);\n            }\n            else {\n                throw new Error(`Tx instantiation with type ${txData?.type} not supported`);\n            }\n        }\n    }\n    /**\n     * This method tries to decode serialized data.\n     *\n     * @param data - The data Uint8Array\n     * @param txOptions - The transaction options\n     */\n    static fromSerializedData(data, txOptions = {}) {\n        if (data[0] <= 0x7f) {\n            // Determine the type.\n            switch (data[0]) {\n                case types_js_1.TransactionType.AccessListEIP2930:\n                    return eip2930Transaction_js_1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n                case types_js_1.TransactionType.FeeMarketEIP1559:\n                    return eip1559Transaction_js_1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n                case types_js_1.TransactionType.BlobEIP4844:\n                    return eip4844Transaction_js_1.BlobEIP4844Transaction.fromSerializedTx(data, txOptions);\n                case types_js_1.TransactionType.EOACodeEIP7702:\n                    return eip7702Transaction_js_1.EOACodeEIP7702Transaction.fromSerializedTx(data, txOptions);\n                default:\n                    throw new Error(`TypedTransaction with ID ${data[0]} unknown`);\n            }\n        }\n        else {\n            return legacyTransaction_js_1.LegacyTransaction.fromSerializedTx(data, txOptions);\n        }\n    }\n    /**\n     * When decoding a BlockBody, in the transactions field, a field is either:\n     * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n     * A Uint8Array[] (Legacy Transaction)\n     * This method returns the right transaction.\n     *\n     * @param data - A Uint8Array or Uint8Array[]\n     * @param txOptions - The transaction options\n     */\n    static fromBlockBodyData(data, txOptions = {}) {\n        if (data instanceof Uint8Array) {\n            return this.fromSerializedData(data, txOptions);\n        }\n        else if (Array.isArray(data)) {\n            // It is a legacy transaction\n            return legacyTransaction_js_1.LegacyTransaction.fromValuesArray(data, txOptions);\n        }\n        else {\n            throw new Error('Cannot decode transaction: unknown type input');\n        }\n    }\n    /**\n     *  Method to retrieve a transaction from the provider\n     * @param provider - a url string for a JSON-RPC provider or an Ethers JsonRPCProvider object\n     * @param txHash - Transaction hash\n     * @param txOptions - The transaction options\n     * @returns the transaction specified by `txHash`\n     */\n    static async fromJsonRpcProvider(provider, txHash, txOptions) {\n        const prov = (0, util_1.getProvider)(provider);\n        const txData = await (0, util_1.fetchFromProvider)(prov, {\n            method: 'eth_getTransactionByHash',\n            params: [txHash],\n        });\n        if (txData === null) {\n            throw new Error('No data returned from provider');\n        }\n        return TransactionFactory.fromRPC(txData, txOptions);\n    }\n    /**\n     * Method to decode data retrieved from RPC, such as `eth_getTransactionByHash`\n     * Note that this normalizes some of the parameters\n     * @param txData The RPC-encoded data\n     * @param txOptions The transaction options\n     * @returns\n     */\n    static async fromRPC(txData, txOptions = {}) {\n        return TransactionFactory.fromTxData((0, fromRpc_js_1.normalizeTxParams)(txData), txOptions);\n    }\n}\nexports.TransactionFactory = TransactionFactory;\n//# sourceMappingURL=transactionFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isEOACodeEIP7702TxData = exports.isBlobEIP4844TxData = exports.isFeeMarketEIP1559TxData = exports.isAccessListEIP2930TxData = exports.isLegacyTxData = exports.isEOACodeEIP7702Tx = exports.isBlobEIP4844Tx = exports.isFeeMarketEIP1559Tx = exports.isAccessListEIP2930Tx = exports.isLegacyTx = exports.TransactionType = exports.isAuthorizationList = exports.isAuthorizationListBytes = exports.isAccessList = exports.isAccessListBytes = exports.Capability = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\n/**\n * Can be used in conjunction with {@link Transaction[TransactionType].supports}\n * to query on tx capabilities\n */\nvar Capability;\n(function (Capability) {\n    /**\n     * Tx supports EIP-155 replay protection\n     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n     */\n    Capability[Capability[\"EIP155ReplayProtection\"] = 155] = \"EIP155ReplayProtection\";\n    /**\n     * Tx supports EIP-1559 gas fee market mechanism\n     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n     */\n    Capability[Capability[\"EIP1559FeeMarket\"] = 1559] = \"EIP1559FeeMarket\";\n    /**\n     * Tx is a typed transaction as defined in EIP-2718\n     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n     */\n    Capability[Capability[\"EIP2718TypedTransaction\"] = 2718] = \"EIP2718TypedTransaction\";\n    /**\n     * Tx supports access list generation as defined in EIP-2930\n     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n     */\n    Capability[Capability[\"EIP2930AccessLists\"] = 2930] = \"EIP2930AccessLists\";\n    /**\n     * Tx supports setting EOA code\n     * See [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702)\n     */\n    Capability[Capability[\"EIP7702EOACode\"] = 7702] = \"EIP7702EOACode\";\n})(Capability = exports.Capability || (exports.Capability = {}));\nfunction isAccessListBytes(input) {\n    if (input.length === 0) {\n        return true;\n    }\n    const firstItem = input[0];\n    if (Array.isArray(firstItem)) {\n        return true;\n    }\n    return false;\n}\nexports.isAccessListBytes = isAccessListBytes;\nfunction isAccessList(input) {\n    return !isAccessListBytes(input); // This is exactly the same method, except the output is negated.\n}\nexports.isAccessList = isAccessList;\nfunction isAuthorizationListBytes(input) {\n    if (input.length === 0) {\n        return true;\n    }\n    const firstItem = input[0];\n    if (Array.isArray(firstItem)) {\n        return true;\n    }\n    return false;\n}\nexports.isAuthorizationListBytes = isAuthorizationListBytes;\nfunction isAuthorizationList(input) {\n    return !isAuthorizationListBytes(input); // This is exactly the same method, except the output is negated.\n}\nexports.isAuthorizationList = isAuthorizationList;\n/**\n * Encompassing type for all transaction types.\n */\nvar TransactionType;\n(function (TransactionType) {\n    TransactionType[TransactionType[\"Legacy\"] = 0] = \"Legacy\";\n    TransactionType[TransactionType[\"AccessListEIP2930\"] = 1] = \"AccessListEIP2930\";\n    TransactionType[TransactionType[\"FeeMarketEIP1559\"] = 2] = \"FeeMarketEIP1559\";\n    TransactionType[TransactionType[\"BlobEIP4844\"] = 3] = \"BlobEIP4844\";\n    TransactionType[TransactionType[\"EOACodeEIP7702\"] = 4] = \"EOACodeEIP7702\";\n})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));\nfunction isLegacyTx(tx) {\n    return tx.type === TransactionType.Legacy;\n}\nexports.isLegacyTx = isLegacyTx;\nfunction isAccessListEIP2930Tx(tx) {\n    return tx.type === TransactionType.AccessListEIP2930;\n}\nexports.isAccessListEIP2930Tx = isAccessListEIP2930Tx;\nfunction isFeeMarketEIP1559Tx(tx) {\n    return tx.type === TransactionType.FeeMarketEIP1559;\n}\nexports.isFeeMarketEIP1559Tx = isFeeMarketEIP1559Tx;\nfunction isBlobEIP4844Tx(tx) {\n    return tx.type === TransactionType.BlobEIP4844;\n}\nexports.isBlobEIP4844Tx = isBlobEIP4844Tx;\nfunction isEOACodeEIP7702Tx(tx) {\n    return tx.type === TransactionType.EOACodeEIP7702;\n}\nexports.isEOACodeEIP7702Tx = isEOACodeEIP7702Tx;\nfunction isLegacyTxData(txData) {\n    const txType = Number((0, util_1.bytesToBigInt)((0, util_1.toBytes)(txData.type)));\n    return txType === TransactionType.Legacy;\n}\nexports.isLegacyTxData = isLegacyTxData;\nfunction isAccessListEIP2930TxData(txData) {\n    const txType = Number((0, util_1.bytesToBigInt)((0, util_1.toBytes)(txData.type)));\n    return txType === TransactionType.AccessListEIP2930;\n}\nexports.isAccessListEIP2930TxData = isAccessListEIP2930TxData;\nfunction isFeeMarketEIP1559TxData(txData) {\n    const txType = Number((0, util_1.bytesToBigInt)((0, util_1.toBytes)(txData.type)));\n    return txType === TransactionType.FeeMarketEIP1559;\n}\nexports.isFeeMarketEIP1559TxData = isFeeMarketEIP1559TxData;\nfunction isBlobEIP4844TxData(txData) {\n    const txType = Number((0, util_1.bytesToBigInt)((0, util_1.toBytes)(txData.type)));\n    return txType === TransactionType.BlobEIP4844;\n}\nexports.isBlobEIP4844TxData = isBlobEIP4844TxData;\nfunction isEOACodeEIP7702TxData(txData) {\n    const txType = Number((0, util_1.bytesToBigInt)((0, util_1.toBytes)(txData.type)));\n    return txType === TransactionType.EOACodeEIP7702;\n}\nexports.isEOACodeEIP7702TxData = isEOACodeEIP7702TxData;\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.txTypeBytes = exports.AuthorizationLists = exports.AccessLists = exports.checkMaxInitCodeSize = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst types_js_1 = require(\"./types.js\");\nfunction checkMaxInitCodeSize(common, length) {\n    const maxInitCodeSize = common.param('vm', 'maxInitCodeSize');\n    if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n        throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param('vm', 'maxInitCodeSize')}`);\n    }\n}\nexports.checkMaxInitCodeSize = checkMaxInitCodeSize;\nclass AccessLists {\n    static getAccessListData(accessList) {\n        let AccessListJSON;\n        let bufferAccessList;\n        if ((0, types_js_1.isAccessList)(accessList)) {\n            AccessListJSON = accessList;\n            const newAccessList = [];\n            for (let i = 0; i < accessList.length; i++) {\n                const item = accessList[i];\n                const addressBytes = (0, util_1.hexToBytes)(item.address);\n                const storageItems = [];\n                for (let index = 0; index < item.storageKeys.length; index++) {\n                    storageItems.push((0, util_1.hexToBytes)(item.storageKeys[index]));\n                }\n                newAccessList.push([addressBytes, storageItems]);\n            }\n            bufferAccessList = newAccessList;\n        }\n        else {\n            bufferAccessList = accessList ?? [];\n            // build the JSON\n            const json = [];\n            for (let i = 0; i < bufferAccessList.length; i++) {\n                const data = bufferAccessList[i];\n                const address = (0, util_1.bytesToHex)(data[0]);\n                const storageKeys = [];\n                for (let item = 0; item < data[1].length; item++) {\n                    storageKeys.push((0, util_1.bytesToHex)(data[1][item]));\n                }\n                const jsonItem = {\n                    address,\n                    storageKeys,\n                };\n                json.push(jsonItem);\n            }\n            AccessListJSON = json;\n        }\n        return {\n            AccessListJSON,\n            accessList: bufferAccessList,\n        };\n    }\n    static verifyAccessList(accessList) {\n        for (let key = 0; key < accessList.length; key++) {\n            const accessListItem = accessList[key];\n            const address = accessListItem[0];\n            const storageSlots = accessListItem[1];\n            if (accessListItem[2] !== undefined) {\n                throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n            }\n            if (address.length !== 20) {\n                throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n            }\n            for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n                if (storageSlots[storageSlot].length !== 32) {\n                    throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n                }\n            }\n        }\n    }\n    static getAccessListJSON(accessList) {\n        const accessListJSON = [];\n        for (let index = 0; index < accessList.length; index++) {\n            const item = accessList[index];\n            const JSONItem = {\n                address: (0, util_1.bytesToHex)((0, util_1.setLengthLeft)(item[0], 20)),\n                storageKeys: [],\n            };\n            const storageSlots = item[1];\n            for (let slot = 0; slot < storageSlots.length; slot++) {\n                const storageSlot = storageSlots[slot];\n                JSONItem.storageKeys.push((0, util_1.bytesToHex)((0, util_1.setLengthLeft)(storageSlot, 32)));\n            }\n            accessListJSON.push(JSONItem);\n        }\n        return accessListJSON;\n    }\n    static getDataFeeEIP2930(accessList, common) {\n        const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n        const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n        let slots = 0;\n        for (let index = 0; index < accessList.length; index++) {\n            const item = accessList[index];\n            const storageSlots = item[1];\n            slots += storageSlots.length;\n        }\n        const addresses = accessList.length;\n        return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);\n    }\n}\nexports.AccessLists = AccessLists;\nclass AuthorizationLists {\n    static getAuthorizationListData(authorizationList) {\n        let AuthorizationListJSON;\n        let bufferAuthorizationList;\n        if ((0, types_js_1.isAuthorizationList)(authorizationList)) {\n            AuthorizationListJSON = authorizationList;\n            const newAuthorizationList = [];\n            const jsonItems = ['chainId', 'address', 'nonce', 'yParity', 'r', 's'];\n            for (let i = 0; i < authorizationList.length; i++) {\n                const item = authorizationList[i];\n                for (const key of jsonItems) {\n                    // @ts-ignore TODO why does TsScript fail here?\n                    if (item[key] === undefined) {\n                        throw new Error(`EIP-7702 authorization list invalid: ${key} is not defined`);\n                    }\n                }\n                const chainId = (0, util_1.hexToBytes)(item.chainId);\n                const addressBytes = (0, util_1.hexToBytes)(item.address);\n                const nonceList = [];\n                for (let j = 0; j < item.nonce.length; j++) {\n                    nonceList.push((0, util_1.hexToBytes)(item.nonce[j]));\n                }\n                const yParity = (0, util_1.hexToBytes)(item.yParity);\n                const r = (0, util_1.hexToBytes)(item.r);\n                const s = (0, util_1.hexToBytes)(item.s);\n                newAuthorizationList.push([chainId, addressBytes, nonceList, yParity, r, s]);\n            }\n            bufferAuthorizationList = newAuthorizationList;\n        }\n        else {\n            bufferAuthorizationList = authorizationList ?? [];\n            // build the JSON\n            const json = [];\n            for (let i = 0; i < bufferAuthorizationList.length; i++) {\n                const data = bufferAuthorizationList[i];\n                const chainId = (0, util_1.bytesToHex)(data[0]);\n                const address = (0, util_1.bytesToHex)(data[1]);\n                const nonces = data[2];\n                const nonceList = [];\n                for (let j = 0; j < nonces.length; j++) {\n                    nonceList.push((0, util_1.bytesToHex)(nonces[j]));\n                }\n                const yParity = (0, util_1.bytesToHex)(data[3]);\n                const r = (0, util_1.bytesToHex)(data[4]);\n                const s = (0, util_1.bytesToHex)(data[5]);\n                const jsonItem = {\n                    chainId,\n                    address,\n                    nonce: nonceList,\n                    yParity,\n                    r,\n                    s,\n                };\n                json.push(jsonItem);\n            }\n            AuthorizationListJSON = json;\n        }\n        return {\n            AuthorizationListJSON,\n            authorizationList: bufferAuthorizationList,\n        };\n    }\n    static verifyAuthorizationList(authorizationList) {\n        for (let key = 0; key < authorizationList.length; key++) {\n            const authorizationListItem = authorizationList[key];\n            const address = authorizationListItem[1];\n            const nonceList = authorizationListItem[2];\n            const yParity = authorizationListItem[3];\n            const r = authorizationListItem[4];\n            const s = authorizationListItem[5];\n            (0, util_1.validateNoLeadingZeroes)({ yParity, r, s });\n            if (address.length !== 20) {\n                throw new Error('Invalid EIP-7702 transaction: address length should be 20 bytes');\n            }\n            if (nonceList.length > 1) {\n                throw new Error('Invalid EIP-7702 transaction: nonce list should consist of at most 1 item');\n            }\n            else if (nonceList.length === 1) {\n                (0, util_1.validateNoLeadingZeroes)({ nonce: nonceList[0] });\n            }\n        }\n    }\n    static getDataFeeEIP7702(authorityList, common) {\n        const perAuthBaseCost = common.param('gasPrices', 'perAuthBaseCost');\n        return authorityList.length * Number(perAuthBaseCost);\n    }\n}\nexports.AuthorizationLists = AuthorizationLists;\nfunction txTypeBytes(txType) {\n    return (0, util_1.hexToBytes)(`0x${txType.toString(16).padStart(2, '0')}`);\n}\nexports.txTypeBytes = txTypeBytes;\n//# sourceMappingURL=util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.chains = void 0;\nexports.chains = {\n    mainnet: {\n        name: 'mainnet',\n        chainId: 1,\n        networkId: 1,\n        defaultHardfork: 'shanghai',\n        consensus: {\n            type: 'pow',\n            algorithm: 'ethash',\n            ethash: {},\n        },\n        comment: 'The Ethereum main chain',\n        url: 'https://ethstats.net/',\n        genesis: {\n            gasLimit: 5000,\n            difficulty: 17179869184,\n            nonce: '0x0000000000000042',\n            extraData: '0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa',\n        },\n        depositContractAddress: '0x00000000219ab540356cBB839Cbe05303d7705Fa',\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n                forkHash: '0xfc64ec04',\n            },\n            {\n                name: 'homestead',\n                block: 1150000,\n                forkHash: '0x97c2c34c',\n            },\n            {\n                name: 'dao',\n                block: 1920000,\n                forkHash: '0x91d1f948',\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 2463000,\n                forkHash: '0x7a64da13',\n            },\n            {\n                name: 'spuriousDragon',\n                block: 2675000,\n                forkHash: '0x3edd5b10',\n            },\n            {\n                name: 'byzantium',\n                block: 4370000,\n                forkHash: '0xa00bc324',\n            },\n            {\n                name: 'constantinople',\n                block: 7280000,\n                forkHash: '0x668db0af',\n            },\n            {\n                name: 'petersburg',\n                block: 7280000,\n                forkHash: '0x668db0af',\n            },\n            {\n                name: 'istanbul',\n                block: 9069000,\n                forkHash: '0x879d6e30',\n            },\n            {\n                name: 'muirGlacier',\n                block: 9200000,\n                forkHash: '0xe029e991',\n            },\n            {\n                name: 'berlin',\n                block: 12244000,\n                forkHash: '0x0eb440f6',\n            },\n            {\n                name: 'london',\n                block: 12965000,\n                forkHash: '0xb715077d',\n            },\n            {\n                name: 'arrowGlacier',\n                block: 13773000,\n                forkHash: '0x20c327fc',\n            },\n            {\n                name: 'grayGlacier',\n                block: 15050000,\n                forkHash: '0xf0afd0e3',\n            },\n            {\n                // The forkHash will remain same as mergeForkIdTransition is post merge\n                // terminal block: https://etherscan.io/block/15537393\n                name: 'paris',\n                ttd: '58750000000000000000000',\n                block: 15537394,\n                forkHash: '0xf0afd0e3',\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: null,\n                forkHash: null,\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '1681338455',\n                forkHash: '0xdce96c2d',\n            },\n            {\n                name: 'cancun',\n                block: null,\n                timestamp: '1710338135',\n                forkHash: '0x9f3d2254',\n            },\n            {\n                name: 'prague',\n                block: null,\n            },\n        ],\n        bootstrapNodes: [\n            {\n                ip: '18.138.108.67',\n                port: 30303,\n                id: 'd860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666',\n                location: 'ap-southeast-1-001',\n                comment: 'bootnode-aws-ap-southeast-1-001',\n            },\n            {\n                ip: '3.209.45.79',\n                port: 30303,\n                id: '22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de',\n                location: 'us-east-1-001',\n                comment: 'bootnode-aws-us-east-1-001',\n            },\n            {\n                ip: '65.108.70.101',\n                port: 30303,\n                id: '2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc',\n                location: 'eu-west-1-001',\n                comment: 'bootnode-hetzner-hel',\n            },\n            {\n                ip: '157.90.35.166',\n                port: 30303,\n                id: '4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052',\n                location: 'eu-central-1-001',\n                comment: 'bootnode-hetzner-fsn',\n            },\n        ],\n        dnsNetworks: [\n            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net',\n        ],\n    },\n    goerli: {\n        name: 'goerli',\n        chainId: 5,\n        networkId: 5,\n        defaultHardfork: 'shanghai',\n        consensus: {\n            type: 'poa',\n            algorithm: 'clique',\n            clique: {\n                period: 15,\n                epoch: 30000,\n            },\n        },\n        comment: 'Cross-client PoA test network',\n        url: 'https://github.com/goerli/testnet',\n        genesis: {\n            timestamp: '0x5c51a607',\n            gasLimit: 10485760,\n            difficulty: 1,\n            nonce: '0x0000000000000000',\n            extraData: '0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n        },\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'homestead',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'spuriousDragon',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'byzantium',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'constantinople',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'petersburg',\n                block: 0,\n                forkHash: '0xa3f5ab08',\n            },\n            {\n                name: 'istanbul',\n                block: 1561651,\n                forkHash: '0xc25efa5c',\n            },\n            {\n                name: 'berlin',\n                block: 4460644,\n                forkHash: '0x757a1c47',\n            },\n            {\n                name: 'london',\n                block: 5062605,\n                forkHash: '0xb8c6299d',\n            },\n            {\n                // The forkHash will remain same as mergeForkIdTransition is post merge,\n                // terminal block: https://goerli.etherscan.io/block/7382818\n                name: 'paris',\n                ttd: '10790000',\n                block: 7382819,\n                forkHash: '0xb8c6299d',\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: null,\n                forkHash: null,\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '1678832736',\n                forkHash: '0xf9843abf',\n            },\n            {\n                name: 'cancun',\n                block: null,\n                timestamp: '1705473120',\n                forkHash: '0x70cc14e2',\n            },\n        ],\n        bootstrapNodes: [\n            {\n                ip: '51.141.78.53',\n                port: 30303,\n                id: '011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a',\n                location: '',\n                comment: 'Upstream bootnode 1',\n            },\n            {\n                ip: '13.93.54.137',\n                port: 30303,\n                id: '176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b',\n                location: '',\n                comment: 'Upstream bootnode 2',\n            },\n            {\n                ip: '94.237.54.114',\n                port: 30313,\n                id: '46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291',\n                location: '',\n                comment: 'Upstream bootnode 3',\n            },\n            {\n                ip: '18.218.250.66',\n                port: 30313,\n                id: 'b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949',\n                location: '',\n                comment: 'Upstream bootnode 4',\n            },\n            {\n                ip: '3.11.147.67',\n                port: 30303,\n                id: 'a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91',\n                location: '',\n                comment: 'Ethereum Foundation bootnode',\n            },\n            {\n                ip: '51.15.116.226',\n                port: 30303,\n                id: 'a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd',\n                location: '',\n                comment: 'Goerli Initiative bootnode',\n            },\n            {\n                ip: '51.15.119.157',\n                port: 30303,\n                id: '807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33',\n                location: '',\n                comment: 'Goerli Initiative bootnode',\n            },\n            {\n                ip: '51.15.119.157',\n                port: 40303,\n                id: 'a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd',\n                location: '',\n                comment: 'Goerli Initiative bootnode',\n            },\n        ],\n        dnsNetworks: [\n            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net',\n        ],\n    },\n    sepolia: {\n        name: 'sepolia',\n        chainId: 11155111,\n        networkId: 11155111,\n        defaultHardfork: 'shanghai',\n        consensus: {\n            type: 'pow',\n            algorithm: 'ethash',\n            ethash: {},\n        },\n        comment: 'PoW test network to replace Ropsten',\n        url: 'https://github.com/ethereum/go-ethereum/pull/23730',\n        genesis: {\n            timestamp: '0x6159af19',\n            gasLimit: 30000000,\n            difficulty: 131072,\n            nonce: '0x0000000000000000',\n            extraData: '0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521',\n        },\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'homestead',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'spuriousDragon',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'byzantium',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'constantinople',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'petersburg',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'istanbul',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'muirGlacier',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'berlin',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'london',\n                block: 0,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                // The forkHash will remain same as mergeForkIdTransition is post merge,\n                // terminal block: https://sepolia.etherscan.io/block/1450408\n                name: 'paris',\n                ttd: '17000000000000000',\n                block: 1450409,\n                forkHash: '0xfe3366e7',\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: 1735371,\n                forkHash: '0xb96cbd13',\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '1677557088',\n                forkHash: '0xf7f9bc08',\n            },\n            {\n                name: 'cancun',\n                block: null,\n                timestamp: '1706655072',\n                forkHash: '0x88cf81d9',\n            },\n        ],\n        bootstrapNodes: [\n            {\n                ip: '18.168.182.86',\n                port: 30303,\n                id: '9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066',\n                location: '',\n                comment: 'geth',\n            },\n            {\n                ip: '52.14.151.177',\n                port: 30303,\n                id: 'ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7',\n                location: '',\n                comment: 'besu',\n            },\n            {\n                ip: '165.22.196.173',\n                port: 30303,\n                id: 'ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6',\n                location: '',\n                comment: 'EF',\n            },\n            {\n                ip: '65.108.95.67',\n                port: 30303,\n                id: '075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6',\n                location: '',\n                comment: 'lodestar',\n            },\n        ],\n        dnsNetworks: [\n            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net',\n        ],\n    },\n    holesky: {\n        name: 'holesky',\n        chainId: 17000,\n        networkId: 17000,\n        defaultHardfork: 'paris',\n        consensus: {\n            type: 'pos',\n            algorithm: 'casper',\n        },\n        comment: 'PoS test network to replace Goerli',\n        url: 'https://github.com/eth-clients/holesky/',\n        genesis: {\n            baseFeePerGas: '0x3B9ACA00',\n            difficulty: '0x01',\n            extraData: '0x',\n            gasLimit: '0x17D7840',\n            nonce: '0x0000000000001234',\n            timestamp: '0x65156994',\n        },\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'homestead',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'spuriousDragon',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'byzantium',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'constantinople',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'petersburg',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'istanbul',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'muirGlacier',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'berlin',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'london',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'paris',\n                ttd: '0',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: 0,\n                forkHash: '0xc61a6098',\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '1696000704',\n                forkHash: '0xfd4f016b',\n            },\n            {\n                name: 'cancun',\n                block: null,\n                timestamp: '1707305664',\n                forkHash: '0x9b192ad0',\n            },\n        ],\n        bootstrapNodes: [\n            {\n                ip: '146.190.13.128',\n                port: 30303,\n                id: 'ac906289e4b7f12df423d654c5a962b6ebe5b3a74cc9e06292a85221f9a64a6f1cfdd6b714ed6dacef51578f92b34c60ee91e9ede9c7f8fadc4d347326d95e2b',\n                location: '',\n                comment: 'bootnode 1',\n            },\n            {\n                ip: '178.128.136.233',\n                port: 30303,\n                id: 'a3435a0155a3e837c02f5e7f5662a2f1fbc25b48e4dc232016e1c51b544cb5b4510ef633ea3278c0e970fa8ad8141e2d4d0f9f95456c537ff05fdf9b31c15072',\n                location: '',\n                comment: 'bootnode 2',\n            },\n        ],\n        dnsNetworks: [\n            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.holesky.ethdisco.net',\n        ],\n    },\n    kaustinen6: {\n        name: 'kaustinen6',\n        chainId: 69420,\n        networkId: 69420,\n        defaultHardfork: 'osaka',\n        consensus: {\n            type: 'pos',\n            algorithm: 'casper',\n        },\n        comment: 'Verkle kaustinen testnet 6 (likely temporary, do not hard-wire into production code)',\n        url: 'https://github.com/eth-clients/kaustinen/',\n        genesis: {\n            difficulty: '0x01',\n            extraData: '0x',\n            gasLimit: '0x17D7840',\n            nonce: '0x0000000000001234',\n            timestamp: '0x66190fbc',\n        },\n        hardforks: [\n            {\n                name: 'chainstart',\n                block: 0,\n            },\n            {\n                name: 'homestead',\n                block: 0,\n            },\n            {\n                name: 'tangerineWhistle',\n                block: 0,\n            },\n            {\n                name: 'spuriousDragon',\n                block: 0,\n            },\n            {\n                name: 'byzantium',\n                block: 0,\n            },\n            {\n                name: 'constantinople',\n                block: 0,\n            },\n            {\n                name: 'petersburg',\n                block: 0,\n            },\n            {\n                name: 'istanbul',\n                block: 0,\n            },\n            {\n                name: 'berlin',\n                block: 0,\n            },\n            {\n                name: 'london',\n                block: 0,\n            },\n            {\n                name: 'paris',\n                ttd: '0',\n                block: 0,\n            },\n            {\n                name: 'mergeForkIdTransition',\n                block: 0,\n            },\n            {\n                name: 'shanghai',\n                block: null,\n                timestamp: '0',\n            },\n            {\n                name: 'osaka',\n                block: null,\n                timestamp: '1712848500',\n            },\n        ],\n        bootstrapNodes: [],\n        dnsNetworks: [],\n    },\n};\n//# sourceMappingURL=chains.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Common = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst events_1 = require(\"events\");\nconst chains_js_1 = require(\"./chains.js\");\nconst crc_js_1 = require(\"./crc.js\");\nconst eips_js_1 = require(\"./eips.js\");\nconst enums_js_1 = require(\"./enums.js\");\nconst hardforks_js_1 = require(\"./hardforks.js\");\nconst utils_js_1 = require(\"./utils.js\");\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nclass Common {\n    constructor(opts) {\n        this._eips = [];\n        this._paramsCache = {};\n        this._activatedEIPsCache = [];\n        this.events = new events_1.EventEmitter();\n        this._customChains = opts.customChains ?? [];\n        this._chainParams = this.setChain(opts.chain);\n        this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? enums_js_1.Hardfork.Shanghai;\n        // Assign hardfork changes in the sequence of the applied hardforks\n        this.HARDFORK_CHANGES = this.hardforks().map((hf) => [\n            hf.name,\n            hardforks_js_1.hardforks[hf.name] ??\n                (this._chainParams.customHardforks && this._chainParams.customHardforks[hf.name]),\n        ]);\n        this._hardfork = this.DEFAULT_HARDFORK;\n        if (opts.hardfork !== undefined) {\n            this.setHardfork(opts.hardfork);\n        }\n        if (opts.eips) {\n            this.setEIPs(opts.eips);\n        }\n        this.customCrypto = opts.customCrypto ?? {};\n        if (Object.keys(this._paramsCache).length === 0) {\n            this._buildParamsCache();\n            this._buildActivatedEIPsCache();\n        }\n    }\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one.\n     *\n     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n     * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n     *\n     * ```javascript\n     * Common.custom({chainId: 123})\n     * ```\n     *\n     * There are also selected supported custom chains which can be initialized by using one of the\n     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n     *\n     * ```javascript\n     * Common.custom(CustomChains.MaticMumbai)\n     * ```\n     *\n     * Note that these supported custom chains only provide some base parameters (usually the chain and\n     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n     * the `@ethereumjs/tx` library to a Layer-2 chain).\n     *\n     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n     */\n    static custom(chainParamsOrName, opts = {}) {\n        const baseChain = opts.baseChain ?? 'mainnet';\n        const standardChainParams = { ...Common._getChainParams(baseChain) };\n        standardChainParams['name'] = 'custom-chain';\n        if (typeof chainParamsOrName !== 'string') {\n            return new Common({\n                chain: {\n                    ...standardChainParams,\n                    ...chainParamsOrName,\n                },\n                ...opts,\n            });\n        }\n        else {\n            if (chainParamsOrName === enums_js_1.CustomChain.PolygonMainnet) {\n                return Common.custom({\n                    name: enums_js_1.CustomChain.PolygonMainnet,\n                    chainId: 137,\n                    networkId: 137,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_js_1.CustomChain.PolygonMumbai) {\n                return Common.custom({\n                    name: enums_js_1.CustomChain.PolygonMumbai,\n                    chainId: 80001,\n                    networkId: 80001,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_js_1.CustomChain.ArbitrumOne) {\n                return Common.custom({\n                    name: enums_js_1.CustomChain.ArbitrumOne,\n                    chainId: 42161,\n                    networkId: 42161,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_js_1.CustomChain.xDaiChain) {\n                return Common.custom({\n                    name: enums_js_1.CustomChain.xDaiChain,\n                    chainId: 100,\n                    networkId: 100,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_js_1.CustomChain.OptimisticKovan) {\n                return Common.custom({\n                    name: enums_js_1.CustomChain.OptimisticKovan,\n                    chainId: 69,\n                    networkId: 69,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_js_1.CustomChain.OptimisticEthereum) {\n                return Common.custom({\n                    name: enums_js_1.CustomChain.OptimisticEthereum,\n                    chainId: 10,\n                    networkId: 10,\n                }, \n                // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n                { hardfork: enums_js_1.Hardfork.Berlin, ...opts });\n            }\n            throw new Error(`Custom chain ${chainParamsOrName} not supported`);\n        }\n    }\n    /**\n     * Static method to load and set common from a geth genesis json\n     * @param genesisJson json of geth configuration\n     * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n     * @returns Common\n     */\n    static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge, customCrypto }) {\n        const genesisParams = (0, utils_js_1.parseGethGenesis)(genesisJson, chain, mergeForkIdPostMerge);\n        const common = new Common({\n            chain: genesisParams.name ?? 'custom',\n            customChains: [genesisParams],\n            eips,\n            hardfork: hardfork ?? genesisParams.hardfork,\n            customCrypto,\n        });\n        if (genesisHash !== undefined) {\n            common.setForkHashes(genesisHash);\n        }\n        return common;\n    }\n    /**\n     * Static method to determine if a {@link chainId} is supported as a standard chain\n     * @param chainId bigint id (`1`) of a standard chain\n     * @returns boolean\n     */\n    static isSupportedChainId(chainId) {\n        const initializedChains = this.getInitializedChains();\n        return Boolean(initializedChains['names'][chainId.toString()]);\n    }\n    static _getChainParams(chain, customChains) {\n        const initializedChains = this.getInitializedChains(customChains);\n        if (typeof chain === 'number' || typeof chain === 'bigint') {\n            chain = chain.toString();\n            if (initializedChains['names'][chain]) {\n                const name = initializedChains['names'][chain];\n                return initializedChains[name];\n            }\n            throw new Error(`Chain with ID ${chain} not supported`);\n        }\n        if (initializedChains[chain] !== undefined) {\n            return initializedChains[chain];\n        }\n        throw new Error(`Chain with name ${chain} not supported`);\n    }\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain representation.\n     *              Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    setChain(chain) {\n        if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n            this._chainParams = Common._getChainParams(chain, this._customChains);\n        }\n        else if (typeof chain === 'object') {\n            if (this._customChains.length > 0) {\n                throw new Error('Chain must be a string, number, or bigint when initialized with customChains passed in');\n            }\n            const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n            for (const param of required) {\n                if (!(param in chain)) {\n                    throw new Error(`Missing required chain parameter: ${param}`);\n                }\n            }\n            this._chainParams = chain;\n        }\n        else {\n            throw new Error('Wrong input format');\n        }\n        for (const hf of this.hardforks()) {\n            if (hf.block === undefined) {\n                throw new Error(`Hardfork cannot have undefined block number`);\n            }\n        }\n        return this._chainParams;\n    }\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n     */\n    setHardfork(hardfork) {\n        let existing = false;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if (hfChanges[0] === hardfork) {\n                if (this._hardfork !== hardfork) {\n                    this._hardfork = hardfork;\n                    this._buildParamsCache();\n                    this._buildActivatedEIPsCache();\n                    this.events.emit('hardforkChanged', hardfork);\n                }\n                existing = true;\n            }\n        }\n        if (!existing) {\n            throw new Error(`Hardfork with name ${hardfork} not supported`);\n        }\n    }\n    /**\n     * Returns the hardfork either based on block numer (older HFs) or\n     * timestamp (Shanghai upwards).\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param Opts Block number, timestamp or TD (all optional)\n     * @returns The name of the HF\n     */\n    getHardforkBy(opts) {\n        const blockNumber = (0, util_1.toType)(opts.blockNumber, util_1.TypeOutput.BigInt);\n        const td = (0, util_1.toType)(opts.td, util_1.TypeOutput.BigInt);\n        const timestamp = (0, util_1.toType)(opts.timestamp, util_1.TypeOutput.BigInt);\n        // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n        const hfs = this.hardforks().filter((hf) => hf.block !== null || (hf.ttd !== null && hf.ttd !== undefined) || hf.timestamp !== undefined);\n        const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);\n        const doubleTTDHF = hfs\n            .slice(mergeIndex + 1)\n            .findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);\n        if (doubleTTDHF >= 0) {\n            throw Error(`More than one merge hardforks found with ttd specified`);\n        }\n        // Find the first hardfork that has a block number greater than `blockNumber`\n        // (skips the merge hardfork since it cannot have a block number specified).\n        // If timestamp is not provided, it also skips timestamps hardforks to continue\n        // discovering/checking number hardforks.\n        let hfIndex = hfs.findIndex((hf) => (blockNumber !== undefined && hf.block !== null && BigInt(hf.block) > blockNumber) ||\n            (timestamp !== undefined && hf.timestamp !== undefined && BigInt(hf.timestamp) > timestamp));\n        if (hfIndex === -1) {\n            // all hardforks apply, set hfIndex to the last one as that's the candidate\n            hfIndex = hfs.length;\n        }\n        else if (hfIndex === 0) {\n            // cannot have a case where a block number is before all applied hardforks\n            // since the chain has to start with a hardfork\n            throw Error('Must have at least one hardfork at block 0');\n        }\n        // If timestamp is not provided, we need to rollback to the last hf with block or ttd\n        if (timestamp === undefined) {\n            const stepBack = hfs\n                .slice(0, hfIndex)\n                .reverse()\n                .findIndex((hf) => hf.block !== null || hf.ttd !== undefined);\n            hfIndex = hfIndex - stepBack;\n        }\n        // Move hfIndex one back to arrive at candidate hardfork\n        hfIndex = hfIndex - 1;\n        // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n        // hardforks. so it will now be needed to rollback\n        if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n            // We're on the merge hardfork.  Let's check the TTD\n            if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {\n                // Merge ttd greater than current td so we're on hardfork before merge\n                hfIndex -= 1;\n            }\n        }\n        else {\n            if (mergeIndex >= 0 && td !== undefined && td !== null) {\n                if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {\n                    throw Error('Maximum HF determined by total difficulty is lower than the block number HF');\n                }\n                else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) < td) {\n                    throw Error('HF determined by block number is lower than the minimum total difficulty HF');\n                }\n            }\n        }\n        const hfStartIndex = hfIndex;\n        // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n        // This won't anyway be the case with Merge hfs\n        for (; hfIndex < hfs.length - 1; hfIndex++) {\n            // break out if hfIndex + 1 is not scheduled at hfIndex\n            if (hfs[hfIndex].block !== hfs[hfIndex + 1].block ||\n                hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {\n                break;\n            }\n        }\n        if (timestamp !== undefined) {\n            const minTimeStamp = hfs\n                .slice(0, hfStartIndex)\n                .reduce((acc, hf) => Math.max(Number(hf.timestamp ?? '0'), acc), 0);\n            if (minTimeStamp > timestamp) {\n                throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);\n            }\n            const maxTimeStamp = hfs\n                .slice(hfIndex + 1)\n                .reduce((acc, hf) => Math.min(Number(hf.timestamp ?? timestamp), acc), Number(timestamp));\n            if (maxTimeStamp < timestamp) {\n                throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n            }\n        }\n        const hardfork = hfs[hfIndex];\n        return hardfork.name;\n    }\n    /**\n     * Sets a new hardfork either based on block numer (older HFs) or\n     * timestamp (Shanghai upwards).\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param Opts Block number, timestamp or TD (all optional)\n     * @returns The name of the HF set\n     */\n    setHardforkBy(opts) {\n        const hardfork = this.getHardforkBy(opts);\n        this.setHardfork(hardfork);\n        return hardfork;\n    }\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params or null if hardfork not on chain\n     */\n    _getHardfork(hardfork) {\n        const hfs = this.hardforks();\n        for (const hf of hfs) {\n            if (hf['name'] === hardfork)\n                return hf;\n        }\n        return null;\n    }\n    /**\n     * Sets the active EIPs\n     * @param eips\n     */\n    setEIPs(eips = []) {\n        for (const eip of eips) {\n            if (!(eip in eips_js_1.EIPs)) {\n                throw new Error(`${eip} not supported`);\n            }\n            const minHF = this.gteHardfork(eips_js_1.EIPs[eip]['minimumHardfork']);\n            if (!minHF) {\n                throw new Error(`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);\n            }\n        }\n        this._eips = eips;\n        this._buildParamsCache();\n        this._buildActivatedEIPsCache();\n        for (const eip of eips) {\n            if (eips_js_1.EIPs[eip].requiredEIPs !== undefined) {\n                for (const elem of eips_js_1.EIPs[eip].requiredEIPs) {\n                    if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n                        throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`);\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Internal helper for _buildParamsCache()\n     */\n    _mergeWithParamsCache(params) {\n        this._paramsCache['gasConfig'] = {\n            ...this._paramsCache['gasConfig'],\n            ...params['gasConfig'],\n        };\n        this._paramsCache['gasPrices'] = {\n            ...this._paramsCache['gasPrices'],\n            ...params['gasPrices'],\n        };\n        this._paramsCache['pow'] = {\n            ...this._paramsCache['pow'],\n            ...params['pow'],\n        };\n        this._paramsCache['sharding'] = {\n            ...this._paramsCache['sharding'],\n            ...params['sharding'],\n        };\n        this._paramsCache['vm'] = {\n            ...this._paramsCache['vm'],\n            ...params['vm'],\n        };\n    }\n    /**\n     * Build up a cache for all parameter values for the current HF and all activated EIPs\n     */\n    _buildParamsCache() {\n        this._paramsCache = {};\n        // Iterate through all hardforks up to hardfork set\n        const hardfork = this.hardfork();\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            // EIP-referencing HF config (e.g. for berlin)\n            if ('eips' in hfChanges[1]) {\n                const hfEIPs = hfChanges[1]['eips'];\n                for (const eip of hfEIPs) {\n                    if (!(eip in eips_js_1.EIPs)) {\n                        throw new Error(`${eip} not supported`);\n                    }\n                    this._mergeWithParamsCache(eips_js_1.EIPs[eip]);\n                }\n                // Parameter-inlining HF config (e.g. for istanbul)\n            }\n            else {\n                this._mergeWithParamsCache(hfChanges[1]);\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        // Iterate through all additionally activated EIPs\n        for (const eip of this._eips) {\n            if (!(eip in eips_js_1.EIPs)) {\n                throw new Error(`${eip} not supported`);\n            }\n            this._mergeWithParamsCache(eips_js_1.EIPs[eip]);\n        }\n    }\n    _buildActivatedEIPsCache() {\n        this._activatedEIPsCache = [];\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            const hf = hfChanges[1];\n            if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n                this._activatedEIPsCache = this._activatedEIPsCache.concat(hf['eips']);\n            }\n        }\n        this._activatedEIPsCache = this._activatedEIPsCache.concat(this._eips);\n    }\n    /**\n     * Returns a parameter for the current chain setup\n     *\n     * If the parameter is present in an EIP, the EIP always takes precedence.\n     * Otherwise the parameter is taken from the latest applied HF with\n     * a change on the respective parameter.\n     *\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @returns The value requested or `BigInt(0)` if not found\n     */\n    param(topic, name) {\n        // TODO: consider the case that different active EIPs\n        // can change the same parameter\n        let value = null;\n        if (this._paramsCache[topic] !== undefined &&\n            this._paramsCache[topic][name] !== undefined) {\n            value = this._paramsCache[topic][name].v;\n        }\n        return BigInt(value ?? 0);\n    }\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name\n     * @returns The value requested or `BigInt(0)` if not found\n     */\n    paramByHardfork(topic, name, hardfork) {\n        let value = null;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            // EIP-referencing HF config (e.g. for berlin)\n            if ('eips' in hfChanges[1]) {\n                const hfEIPs = hfChanges[1]['eips'];\n                for (const eip of hfEIPs) {\n                    const valueEIP = this.paramByEIP(topic, name, eip);\n                    value = typeof valueEIP === 'bigint' ? valueEIP : value;\n                }\n                // Parameter-inlining HF config (e.g. for istanbul)\n            }\n            else {\n                if (hfChanges[1][topic] !== undefined &&\n                    hfChanges[1][topic][name] !== undefined) {\n                    value = hfChanges[1][topic][name].v;\n                }\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return BigInt(value ?? 0);\n    }\n    /**\n     * Returns a parameter corresponding to an EIP\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param eip Number of the EIP\n     * @returns The value requested or `undefined` if not found\n     */\n    paramByEIP(topic, name, eip) {\n        if (!(eip in eips_js_1.EIPs)) {\n            throw new Error(`${eip} not supported`);\n        }\n        const eipParams = eips_js_1.EIPs[eip];\n        if (!(topic in eipParams)) {\n            return undefined;\n        }\n        if (eipParams[topic][name] === undefined) {\n            return undefined;\n        }\n        const value = eipParams[topic][name].v;\n        return BigInt(value);\n    }\n    /**\n     * Returns a parameter for the hardfork active on block number or\n     * optional provided total difficulty (Merge HF)\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     * @param td Total difficulty\n     *    * @returns The value requested or `BigInt(0)` if not found\n     */\n    paramByBlock(topic, name, blockNumber, td, timestamp) {\n        const hardfork = this.getHardforkBy({ blockNumber, td, timestamp });\n        return this.paramByHardfork(topic, name, hardfork);\n    }\n    /**\n     * Checks if an EIP is activated by either being included in the EIPs\n     * manually passed in with the {@link CommonOpts.eips} or in a\n     * hardfork currently being active\n     *\n     * Note: this method only works for EIPs being supported\n     * by the {@link CommonOpts.eips} constructor option\n     * @param eip\n     */\n    isActivatedEIP(eip) {\n        if (this._activatedEIPsCache.includes(eip)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */\n    hardforkIsActiveOnBlock(hardfork, blockNumber) {\n        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);\n        hardfork = hardfork ?? this._hardfork;\n        const hfBlock = this.hardforkBlock(hardfork);\n        if (typeof hfBlock === 'bigint' && hfBlock !== util_1.BIGINT_0 && blockNumber >= hfBlock) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */\n    activeOnBlock(blockNumber) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber);\n    }\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n    hardforkGteHardfork(hardfork1, hardfork2) {\n        hardfork1 = hardfork1 ?? this._hardfork;\n        const hardforks = this.hardforks();\n        let posHf1 = -1, posHf2 = -1;\n        let index = 0;\n        for (const hf of hardforks) {\n            if (hf['name'] === hardfork1)\n                posHf1 = index;\n            if (hf['name'] === hardfork2)\n                posHf2 = index;\n            index += 1;\n        }\n        return posHf1 >= posHf2 && posHf2 !== -1;\n    }\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n    gteHardfork(hardfork) {\n        return this.hardforkGteHardfork(null, hardfork);\n    }\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if unscheduled\n     */\n    hardforkBlock(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const block = this._getHardfork(hardfork)?.['block'];\n        if (block === undefined || block === null) {\n            return null;\n        }\n        return BigInt(block);\n    }\n    hardforkTimestamp(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const timestamp = this._getHardfork(hardfork)?.['timestamp'];\n        if (timestamp === undefined || timestamp === null) {\n            return null;\n        }\n        return BigInt(timestamp);\n    }\n    /**\n     * Returns the hardfork change block for eip\n     * @param eip EIP number\n     * @returns Block number or null if unscheduled\n     */\n    eipBlock(eip) {\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            const hf = hfChanges[1];\n            if ('eips' in hf) {\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                if (hf['eips'].includes(eip)) {\n                    return this.hardforkBlock(hfChanges[0]);\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the scheduled timestamp of the EIP (if scheduled and scheduled by timestamp)\n     * @param eip EIP number\n     * @returns Scheduled timestamp. If this EIP is unscheduled, or the EIP is scheduled by block number or ttd, then it returns `null`.\n     */\n    eipTimestamp(eip) {\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            const hf = hfChanges[1];\n            if ('eips' in hf) {\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                if (hf['eips'].includes(eip)) {\n                    return this.hardforkTimestamp(hfChanges[0]);\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Total difficulty or null if no set\n     */\n    hardforkTTD(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const ttd = this._getHardfork(hardfork)?.['ttd'];\n        if (ttd === undefined || ttd === null) {\n            return null;\n        }\n        return BigInt(ttd);\n    }\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block timestamp, number or null if not available\n     */\n    nextHardforkBlockOrTimestamp(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const hfs = this.hardforks();\n        let hfIndex = hfs.findIndex((hf) => hf.name === hardfork);\n        // If the current hardfork is merge, go one behind as merge hf is not part of these\n        // calcs even if the merge hf block is set\n        if (hardfork === enums_js_1.Hardfork.Paris) {\n            hfIndex -= 1;\n        }\n        // Hardfork not found\n        if (hfIndex < 0) {\n            return null;\n        }\n        let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;\n        currHfTimeOrBlock =\n            currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined\n                ? Number(currHfTimeOrBlock)\n                : null;\n        const nextHf = hfs.slice(hfIndex + 1).find((hf) => {\n            let hfTimeOrBlock = hf.timestamp ?? hf.block;\n            hfTimeOrBlock =\n                hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null;\n            return (hf.name !== enums_js_1.Hardfork.Paris &&\n                hfTimeOrBlock !== null &&\n                hfTimeOrBlock !== undefined &&\n                hfTimeOrBlock !== currHfTimeOrBlock);\n        });\n        // If no next hf found with valid block or timestamp return null\n        if (nextHf === undefined) {\n            return null;\n        }\n        const nextHfBlock = nextHf.timestamp ?? nextHf.block;\n        if (nextHfBlock === null || nextHfBlock === undefined) {\n            return null;\n        }\n        return BigInt(nextHfBlock);\n    }\n    /**\n     * Internal helper function to calculate a fork hash\n     * @param hardfork Hardfork name\n     * @param genesisHash Genesis block hash of the chain\n     * @returns Fork hash as hex string\n     */\n    _calcForkHash(hardfork, genesisHash) {\n        let hfBytes = new Uint8Array(0);\n        let prevBlockOrTime = 0;\n        for (const hf of this.hardforks()) {\n            const { block, timestamp, name } = hf;\n            // Timestamp to be used for timestamp based hfs even if we may bundle\n            // block number with them retrospectively\n            let blockOrTime = timestamp ?? block;\n            blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n            // Skip for chainstart (0), not applied HFs (null) and\n            // when already applied on same blockOrTime HFs\n            // and on the merge since forkhash doesn't change on merge hf\n            if (typeof blockOrTime === 'number' &&\n                blockOrTime !== 0 &&\n                blockOrTime !== prevBlockOrTime &&\n                name !== enums_js_1.Hardfork.Paris) {\n                const hfBlockBytes = (0, util_1.hexToBytes)(`0x${blockOrTime.toString(16).padStart(16, '0')}`);\n                hfBytes = (0, util_1.concatBytes)(hfBytes, hfBlockBytes);\n                prevBlockOrTime = blockOrTime;\n            }\n            if (hf.name === hardfork)\n                break;\n        }\n        const inputBytes = (0, util_1.concatBytes)(genesisHash, hfBytes);\n        // CRC32 delivers result as signed (negative) 32-bit integer,\n        // convert to hex string\n        const forkhash = (0, util_1.bytesToHex)((0, util_1.intToBytes)((0, crc_js_1.crc32)(inputBytes) >>> 0));\n        return forkhash;\n    }\n    /**\n     * Returns an eth/64 compliant fork hash (EIP-2124)\n     * @param hardfork Hardfork name, optional if HF set\n     * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n     */\n    forkHash(hardfork, genesisHash) {\n        hardfork = hardfork ?? this._hardfork;\n        const data = this._getHardfork(hardfork);\n        if (data === null ||\n            (data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)) {\n            const msg = 'No fork hash calculation possible for future hardfork';\n            throw new Error(msg);\n        }\n        if (data?.forkHash !== null && data?.forkHash !== undefined) {\n            return data.forkHash;\n        }\n        if (!genesisHash)\n            throw new Error('genesisHash required for forkHash calculation');\n        return this._calcForkHash(hardfork, genesisHash);\n    }\n    /**\n     *\n     * @param forkHash Fork hash as a hex string\n     * @returns Array with hardfork data (name, block, forkHash)\n     */\n    hardforkForForkHash(forkHash) {\n        const resArray = this.hardforks().filter((hf) => {\n            return hf.forkHash === forkHash;\n        });\n        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n    }\n    /**\n     * Sets any missing forkHashes on the passed-in {@link Common} instance\n     * @param common The {@link Common} to set the forkHashes for\n     * @param genesisHash The genesis block hash\n     */\n    setForkHashes(genesisHash) {\n        for (const hf of this.hardforks()) {\n            const blockOrTime = hf.timestamp ?? hf.block;\n            if ((hf.forkHash === null || hf.forkHash === undefined) &&\n                ((blockOrTime !== null && blockOrTime !== undefined) || typeof hf.ttd !== 'undefined')) {\n                hf.forkHash = this.forkHash(hf.name, genesisHash);\n            }\n        }\n    }\n    /**\n     * Returns the Genesis parameters of the current chain\n     * @returns Genesis dictionary\n     */\n    genesis() {\n        return this._chainParams.genesis;\n    }\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n    hardforks() {\n        const hfs = this._chainParams.hardforks;\n        if (this._chainParams.customHardforks !== undefined) {\n            this._chainParams.customHardforks;\n        }\n        return hfs;\n    }\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n    bootstrapNodes() {\n        return this._chainParams.bootstrapNodes;\n    }\n    /**\n     * Returns DNS networks for the current chain\n     * @returns {String[]} Array of DNS ENR urls\n     */\n    dnsNetworks() {\n        return this._chainParams.dnsNetworks;\n    }\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n    hardfork() {\n        return this._hardfork;\n    }\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n    chainId() {\n        return BigInt(this._chainParams.chainId);\n    }\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n    chainName() {\n        return this._chainParams.name;\n    }\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n    networkId() {\n        return BigInt(this._chainParams.networkId);\n    }\n    /**\n     * Returns the additionally activated EIPs\n     * (by using the `eips` constructor option)\n     * @returns List of EIPs\n     */\n    eips() {\n        return this._eips;\n    }\n    /**\n     * Returns the consensus type of the network\n     * Possible values: \"pow\"|\"poa\"|\"pos\"\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusType() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                value = hfChanges[1]['consensus']['type'];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return value ?? this._chainParams['consensus']['type'];\n    }\n    /**\n     * Returns the concrete consensus implementation\n     * algorithm or protocol for the network\n     * e.g. \"ethash\" for \"pow\" consensus type,\n     * \"clique\" for \"poa\" consensus type or\n     * \"casper\" for \"pos\" consensus type.\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusAlgorithm() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                value = hfChanges[1]['consensus']['algorithm'];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return value ?? this._chainParams['consensus']['algorithm'];\n    }\n    /**\n     * Returns a dictionary with consensus configuration\n     * parameters based on the consensus algorithm\n     *\n     * Expected returns (parameters must be present in\n     * the respective chain json files):\n     *\n     * ethash: empty object\n     * clique: period, epoch\n     * casper: empty object\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusConfig() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                // The config parameter is named after the respective consensus algorithm\n                const config = hfChanges[1];\n                const algorithm = config['consensus']['algorithm'];\n                value = config['consensus'][algorithm];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return (value ?? this._chainParams['consensus'][this.consensusAlgorithm()] ?? {});\n    }\n    /**\n     * Returns a deep copy of this {@link Common} instance.\n     */\n    copy() {\n        const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n        copy.events = new events_1.EventEmitter();\n        return copy;\n    }\n    static getInitializedChains(customChains) {\n        const names = {};\n        for (const [name, id] of Object.entries(enums_js_1.Chain)) {\n            names[id] = name.toLowerCase();\n        }\n        const chains = { ...chains_js_1.chains };\n        if (customChains) {\n            for (const chain of customChains) {\n                const { name } = chain;\n                names[chain.chainId.toString()] = name;\n                chains[name] = chain;\n            }\n        }\n        chains.names = names;\n        return chains;\n    }\n}\nexports.Common = Common;\n//# sourceMappingURL=common.js.map","import { hasProperty, isObject } from '@metamask/utils';\n\n/**\n * Deletes network if networkId exists, on the NetworkController state.\n * Further explanation in ./077-supplements.md\n *\n * @param state - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\n\nexport default function transformState077For084(\n  state: Record<string, unknown>,\n) {\n  if (\n    hasProperty(state, 'NetworkController') &&\n    isObject(state.NetworkController) &&\n    hasProperty(state.NetworkController, 'network') &&\n    hasProperty(state.NetworkController, 'networkId')\n  ) {\n    delete state.NetworkController.network;\n  }\n\n  return { ...state };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crc32 = void 0;\n/**\n * This code was duplicated from https://github.com/alexgorbatchev/crc/ under MIT license.\n * The code below is copied largely unmodified from the below file\n * https://github.com/alexgorbatchev/crc/blob/31fc3853e417b5fb5ec83335428805842575f699/src/calculators/crc32.ts\n */\nlet TABLE = [\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\n    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\n    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\n    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\n    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\n    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\n    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\n    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc = (current, previous) => {\n    let crc = previous === 0 ? 0 : ~~previous ^ -1;\n    for (let index = 0; index < current.length; index++) {\n        crc = TABLE[(crc ^ current[index]) & 0xff] ^ (crc >>> 8);\n    }\n    return crc ^ -1;\n};\nconst crc32 = (current, previous) => {\n    return crc(current, previous) >>> 0;\n};\nexports.crc32 = crc32;\n//# sourceMappingURL=crc.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIPs = void 0;\nconst enums_js_1 = require(\"./enums.js\");\nvar Status;\n(function (Status) {\n    Status[\"Stagnant\"] = \"stagnant\";\n    Status[\"Draft\"] = \"draft\";\n    Status[\"Review\"] = \"review\";\n    Status[\"Final\"] = \"final\";\n})(Status || (Status = {}));\nexports.EIPs = {\n    1153: {\n        comment: 'Transient storage opcodes',\n        url: 'https://eips.ethereum.org/EIPS/eip-1153',\n        status: Status.Review,\n        minimumHardfork: enums_js_1.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasPrices: {\n            tstore: {\n                v: 100,\n                d: 'Base fee of the TSTORE opcode',\n            },\n            tload: {\n                v: 100,\n                d: 'Base fee of the TLOAD opcode',\n            },\n        },\n    },\n    1559: {\n        comment: 'Fee market change for ETH 1.0 chain',\n        url: 'https://eips.ethereum.org/EIPS/eip-1559',\n        status: Status.Final,\n        minimumHardfork: enums_js_1.Hardfork.Berlin,\n        requiredEIPs: [2930],\n        gasConfig: {\n            baseFeeMaxChangeDenominator: {\n                v: 8,\n                d: 'Maximum base fee change denominator',\n            },\n            elasticityMultiplier: {\n                v: 2,\n                d: 'Maximum block gas target elasticity',\n            },\n            initialBaseFee: {\n                v: 1000000000,\n                d: 'Initial base fee on first EIP1559 block',\n            },\n        },\n    },\n    2565: {\n        comment: 'ModExp gas cost',\n        url: 'https://eips.ethereum.org/EIPS/eip-2565',\n        status: Status.Final,\n        minimumHardfork: enums_js_1.Hardfork.Byzantium,\n        requiredEIPs: [],\n        gasPrices: {\n            modexpGquaddivisor: {\n                v: 3,\n                d: 'Gquaddivisor from modexp precompile for gas calculation',\n            },\n        },\n    },\n    2537: {\n        comment: 'BLS12-381 precompiles',\n        url: 'https://eips.ethereum.org/EIPS/eip-2537',\n        status: 'Draft',\n        minimumHardfork: enums_js_1.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasConfig: {},\n        gasPrices: {\n            Bls12381G1AddGas: {\n                v: 500,\n                d: 'Gas cost of a single BLS12-381 G1 addition precompile-call',\n            },\n            Bls12381G1MulGas: {\n                v: 12000,\n                d: 'Gas cost of a single BLS12-381 G1 multiplication precompile-call',\n            },\n            Bls12381G2AddGas: {\n                v: 800,\n                d: 'Gas cost of a single BLS12-381 G2 addition precompile-call',\n            },\n            Bls12381G2MulGas: {\n                v: 45000,\n                d: 'Gas cost of a single BLS12-381 G2 multiplication precompile-call',\n            },\n            Bls12381PairingBaseGas: {\n                v: 65000,\n                d: 'Base gas cost of BLS12-381 pairing check',\n            },\n            Bls12381PairingPerPairGas: {\n                v: 43000,\n                d: 'Per-pair gas cost of BLS12-381 pairing check',\n            },\n            Bls12381MapG1Gas: {\n                v: 5500,\n                d: 'Gas cost of BLS12-381 map field element to G1',\n            },\n            Bls12381MapG2Gas: {\n                v: 75000,\n                d: 'Gas cost of BLS12-381 map field element to G2',\n            },\n        },\n        vm: {},\n        pow: {},\n    },\n    2718: {\n        comment: 'Typed Transaction Envelope',\n        url: 'https://eips.ethereum.org/EIPS/eip-2718',\n        status: Status.Final,\n        minimumHardfork: enums_js_1.Hardfork.Chainstart,\n        requiredEIPs: [],\n    },\n    2929: {\n        comment: 'Gas cost increases for state access opcodes',\n        url: 'https://eips.ethereum.org/EIPS/eip-2929',\n        status: Status.Final,\n        minimumHardfork: enums_js_1.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasPrices: {\n            coldsload: {\n                v: 2100,\n                d: 'Gas cost of the first read of storage from a given location (per transaction)',\n            },\n            coldaccountaccess: {\n                v: 2600,\n                d: 'Gas cost of the first read of a given address (per transaction)',\n            },\n            warmstorageread: {\n                v: 100,\n                d: \"Gas cost of reading storage locations which have already loaded 'cold'\",\n            },\n            sstoreCleanGasEIP2200: {\n                v: 2900,\n                d: 'Once per SSTORE operation from clean non-zero to something else',\n            },\n            sstoreNoopGasEIP2200: {\n                v: 100,\n                d: \"Once per SSTORE operation if the value doesn't change\",\n            },\n            sstoreDirtyGasEIP2200: {\n                v: 100,\n                d: 'Once per SSTORE operation if a dirty value is changed',\n            },\n            sstoreInitRefundEIP2200: {\n                v: 19900,\n                d: 'Once per SSTORE operation for resetting to the original zero value',\n            },\n            sstoreCleanRefundEIP2200: {\n                v: 4900,\n                d: 'Once per SSTORE operation for resetting to the original non-zero value',\n            },\n            call: {\n                v: 0,\n                d: 'Base fee of the CALL opcode',\n            },\n            callcode: {\n                v: 0,\n                d: 'Base fee of the CALLCODE opcode',\n            },\n            delegatecall: {\n                v: 0,\n                d: 'Base fee of the DELEGATECALL opcode',\n            },\n            staticcall: {\n                v: 0,\n                d: 'Base fee of the STATICCALL opcode',\n            },\n            balance: {\n                v: 0,\n                d: 'Base fee of the BALANCE opcode',\n            },\n            extcodesize: {\n                v: 0,\n                d: 'Base fee of the EXTCODESIZE opcode',\n            },\n            extcodecopy: {\n                v: 0,\n                d: 'Base fee of the EXTCODECOPY opcode',\n            },\n            extcodehash: {\n                v: 0,\n                d: 'Base fee of the EXTCODEHASH opcode',\n            },\n            sload: {\n                v: 0,\n                d: 'Base fee of the SLOAD opcode',\n            },\n            sstore: {\n                v: 0,\n                d: 'Base fee of the SSTORE opcode',\n            },\n        },\n    },\n    2930: {\n        comment: 'Optional access lists',\n        url: 'https://eips.ethereum.org/EIPS/eip-2930',\n        status: Status.Final,\n        minimumHardfork: enums_js_1.Hardfork.Istanbul,\n        requiredEIPs: [2718, 2929],\n        gasPrices: {\n            accessListStorageKeyCost: {\n                v: 1900,\n                d: 'Gas cost per storage key in an Access List transaction',\n            },\n            accessListAddressCost: {\n                v: 2400,\n                d: 'Gas cost per storage key in an Access List transaction',\n            },\n        },\n    },\n    2935: {\n        comment: 'Save historical block hashes in state (Verkle related usage, UNSTABLE)',\n        url: 'https://github.com/gballet/EIPs/pull/3/commits/2e9ac09a142b0d9fb4db0b8d4609f92e5d9990c5',\n        status: Status.Draft,\n        minimumHardfork: enums_js_1.Hardfork.Chainstart,\n        requiredEIPs: [],\n        vm: {\n            historyStorageAddress: {\n                v: BigInt('0x0aae40965e6800cd9b1f4b05ff21581047e3f91e'),\n                d: 'The address where the historical blockhashes are stored',\n            },\n            historyServeWindow: {\n                v: BigInt(8192),\n                d: 'The amount of blocks to be served by the historical blockhash contract',\n            },\n        },\n    },\n    3074: {\n        comment: 'AUTH and AUTHCALL opcodes',\n        url: 'https://github.com/ethereum/EIPs/commit/eca4416ff3c025fcb6ec8cd4eac481e74e108481',\n        status: Status.Review,\n        minimumHardfork: enums_js_1.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            auth: {\n                v: 3100,\n                d: 'Gas cost of the AUTH opcode',\n            },\n            authcall: {\n                v: 0,\n                d: 'Gas cost of the AUTHCALL opcode',\n            },\n            authcallValueTransfer: {\n                v: 6700,\n                d: 'Paid for CALL when the value transfer is non-zero',\n            },\n        },\n    },\n    3198: {\n        comment: 'BASEFEE opcode',\n        url: 'https://eips.ethereum.org/EIPS/eip-3198',\n        status: Status.Final,\n        minimumHardfork: enums_js_1.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            basefee: {\n                v: 2,\n                d: 'Gas cost of the BASEFEE opcode',\n            },\n        },\n    },\n    3529: {\n        comment: 'Reduction in refunds',\n        url: 'https://eips.ethereum.org/EIPS/eip-3529',\n        status: Status.Final,\n        minimumHardfork: enums_js_1.Hardfork.Berlin,\n        requiredEIPs: [2929],\n        gasConfig: {\n            maxRefundQuotient: {\n                v: 5,\n                d: 'Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)',\n            },\n        },\n        gasPrices: {\n            selfdestructRefund: {\n                v: 0,\n                d: 'Refunded following a selfdestruct operation',\n            },\n            sstoreClearRefundEIP2200: {\n                v: 4800,\n                d: 'Once per SSTORE operation for clearing an originally existing storage slot',\n            },\n        },\n    },\n    3540: {\n        comment: 'EVM Object Format (EOF) v1',\n        url: 'https://eips.ethereum.org/EIPS/eip-3540',\n        status: Status.Review,\n        minimumHardfork: enums_js_1.Hardfork.London,\n        requiredEIPs: [3541],\n    },\n    3541: {\n        comment: 'Reject new contracts starting with the 0xEF byte',\n        url: 'https://eips.ethereum.org/EIPS/eip-3541',\n        status: Status.Final,\n        minimumHardfork: enums_js_1.Hardfork.Berlin,\n        requiredEIPs: [],\n    },\n    3554: {\n        comment: 'Difficulty Bomb Delay to December 1st 2021',\n        url: 'https://eips.ethereum.org/EIPS/eip-3554',\n        status: Status.Final,\n        minimumHardfork: enums_js_1.Hardfork.MuirGlacier,\n        requiredEIPs: [],\n        pow: {\n            difficultyBombDelay: {\n                v: 9500000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    3607: {\n        comment: 'Reject transactions from senders with deployed code',\n        url: 'https://eips.ethereum.org/EIPS/eip-3607',\n        status: Status.Final,\n        minimumHardfork: enums_js_1.Hardfork.Chainstart,\n        requiredEIPs: [],\n    },\n    3651: {\n        comment: 'Warm COINBASE',\n        url: 'https://eips.ethereum.org/EIPS/eip-3651',\n        status: Status.Review,\n        minimumHardfork: enums_js_1.Hardfork.London,\n        requiredEIPs: [2929],\n    },\n    3670: {\n        comment: 'EOF - Code Validation',\n        url: 'https://eips.ethereum.org/EIPS/eip-3670',\n        status: 'Review',\n        minimumHardfork: enums_js_1.Hardfork.London,\n        requiredEIPs: [3540],\n        gasConfig: {},\n        gasPrices: {},\n        vm: {},\n        pow: {},\n    },\n    3675: {\n        comment: 'Upgrade consensus to Proof-of-Stake',\n        url: 'https://eips.ethereum.org/EIPS/eip-3675',\n        status: Status.Final,\n        minimumHardfork: enums_js_1.Hardfork.London,\n        requiredEIPs: [],\n    },\n    3855: {\n        comment: 'PUSH0 instruction',\n        url: 'https://eips.ethereum.org/EIPS/eip-3855',\n        status: Status.Review,\n        minimumHardfork: enums_js_1.Hardfork.Chainstart,\n        requiredEIPs: [],\n        gasPrices: {\n            push0: {\n                v: 2,\n                d: 'Base fee of the PUSH0 opcode',\n            },\n        },\n    },\n    3860: {\n        comment: 'Limit and meter initcode',\n        url: 'https://eips.ethereum.org/EIPS/eip-3860',\n        status: Status.Review,\n        minimumHardfork: enums_js_1.Hardfork.SpuriousDragon,\n        requiredEIPs: [],\n        gasPrices: {\n            initCodeWordCost: {\n                v: 2,\n                d: 'Gas to pay for each word (32 bytes) of initcode when creating a contract',\n            },\n        },\n        vm: {\n            maxInitCodeSize: {\n                v: 49152,\n                d: 'Maximum length of initialization code when creating a contract',\n            },\n        },\n    },\n    4345: {\n        comment: 'Difficulty Bomb Delay to June 2022',\n        url: 'https://eips.ethereum.org/EIPS/eip-4345',\n        status: Status.Final,\n        minimumHardfork: enums_js_1.Hardfork.London,\n        requiredEIPs: [],\n        pow: {\n            difficultyBombDelay: {\n                v: 10700000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    4399: {\n        comment: 'Supplant DIFFICULTY opcode with PREVRANDAO',\n        url: 'https://eips.ethereum.org/EIPS/eip-4399',\n        status: Status.Review,\n        minimumHardfork: enums_js_1.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            prevrandao: {\n                v: 2,\n                d: 'Base fee of the PREVRANDAO opcode (previously DIFFICULTY)',\n            },\n        },\n    },\n    4788: {\n        comment: 'Beacon block root in the EVM',\n        url: 'https://eips.ethereum.org/EIPS/eip-4788',\n        status: Status.Draft,\n        minimumHardfork: enums_js_1.Hardfork.Cancun,\n        requiredEIPs: [],\n        gasPrices: {},\n        vm: {\n            historicalRootsLength: {\n                v: 8191,\n                d: 'The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile',\n            },\n        },\n    },\n    4844: {\n        comment: 'Shard Blob Transactions',\n        url: 'https://eips.ethereum.org/EIPS/eip-4844',\n        status: Status.Draft,\n        minimumHardfork: enums_js_1.Hardfork.Paris,\n        requiredEIPs: [1559, 2718, 2930, 4895],\n        gasConfig: {\n            blobGasPerBlob: {\n                v: 131072,\n                d: 'The base fee for blob gas per blob',\n            },\n            targetBlobGasPerBlock: {\n                v: 393216,\n                d: 'The target blob gas consumed per block',\n            },\n            maxblobGasPerBlock: {\n                v: 786432,\n                d: 'The max blob gas allowable per block',\n            },\n            blobGasPriceUpdateFraction: {\n                v: 3338477,\n                d: 'The denominator used in the exponential when calculating a blob gas price',\n            },\n        },\n        gasPrices: {\n            simpleGasPerBlob: {\n                v: 12000,\n                d: 'The basic gas fee for each blob',\n            },\n            minBlobGasPrice: {\n                v: 1,\n                d: 'The minimum fee per blob gas',\n            },\n            kzgPointEvaluationGasPrecompilePrice: {\n                v: 50000,\n                d: 'The fee associated with the point evaluation precompile',\n            },\n            blobhash: {\n                v: 3,\n                d: 'Base fee of the BLOBHASH opcode',\n            },\n        },\n        sharding: {\n            blobCommitmentVersionKzg: {\n                v: 1,\n                d: 'The number indicated a versioned hash is a KZG commitment',\n            },\n            fieldElementsPerBlob: {\n                v: 4096,\n                d: 'The number of field elements allowed per blob',\n            },\n        },\n    },\n    4895: {\n        comment: 'Beacon chain push withdrawals as operations',\n        url: 'https://eips.ethereum.org/EIPS/eip-4895',\n        status: Status.Review,\n        minimumHardfork: enums_js_1.Hardfork.Paris,\n        requiredEIPs: [],\n    },\n    5133: {\n        comment: 'Delaying Difficulty Bomb to mid-September 2022',\n        url: 'https://eips.ethereum.org/EIPS/eip-5133',\n        status: Status.Draft,\n        minimumHardfork: enums_js_1.Hardfork.GrayGlacier,\n        requiredEIPs: [],\n        pow: {\n            difficultyBombDelay: {\n                v: 11400000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    5656: {\n        comment: 'MCOPY - Memory copying instruction',\n        url: 'https://eips.ethereum.org/EIPS/eip-5656',\n        status: Status.Draft,\n        minimumHardfork: enums_js_1.Hardfork.Shanghai,\n        requiredEIPs: [],\n        gasPrices: {\n            mcopy: {\n                v: 3,\n                d: 'Base fee of the MCOPY opcode',\n            },\n        },\n    },\n    6110: {\n        comment: 'Supply validator deposits on chain',\n        url: 'https://eips.ethereum.org/EIPS/eip-6110',\n        status: Status.Draft,\n        minimumHardfork: enums_js_1.Hardfork.Cancun,\n        requiredEIPs: [7685],\n    },\n    6780: {\n        comment: 'SELFDESTRUCT only in same transaction',\n        url: 'https://eips.ethereum.org/EIPS/eip-6780',\n        status: Status.Draft,\n        minimumHardfork: enums_js_1.Hardfork.London,\n        requiredEIPs: [],\n    },\n    6800: {\n        comment: 'Ethereum state using a unified verkle tree (experimental)',\n        url: 'https://github.com/ethereum/EIPs/pull/6800',\n        status: Status.Draft,\n        minimumHardfork: enums_js_1.Hardfork.London,\n        requiredEIPs: [],\n        gasPrices: {\n            create: {\n                v: 1000,\n                d: 'Base fee of the CREATE opcode',\n            },\n            coldsload: {\n                v: 0,\n                d: 'Gas cost of the first read of storage from a given location (per transaction)',\n            },\n        },\n        vm: {\n            // kaustinen 6 current uses this address, however this will be updated to correct address\n            // in next iteration\n            historyStorageAddress: {\n                v: BigInt('0xfffffffffffffffffffffffffffffffffffffffe'),\n                d: 'The address where the historical blockhashes are stored',\n            },\n        },\n    },\n    7002: {\n        comment: 'Execution layer triggerable withdrawals (experimental)',\n        url: 'https://github.com/ethereum/EIPs/blob/3b5fcad6b35782f8aaeba7d4ac26004e8fbd720f/EIPS/eip-7002.md',\n        status: Status.Draft,\n        minimumHardfork: enums_js_1.Hardfork.Paris,\n        requiredEIPs: [7685],\n        vm: {\n            withdrawalRequestType: {\n                v: BigInt(0x01),\n                d: 'The withdrawal request type for EIP-7685',\n            },\n            excessWithdrawalsRequestStorageSlot: {\n                v: BigInt(0),\n                d: 'The storage slot of the excess withdrawals',\n            },\n            withdrawalsRequestCountStorage: {\n                v: BigInt(1),\n                d: 'The storage slot of the withdrawal request count',\n            },\n            withdrawalsRequestQueueHeadStorageSlot: {\n                v: BigInt(2),\n                d: 'The storage slot of the withdrawal request head of the queue',\n            },\n            withdrawalsRequestTailHeadStorageSlot: {\n                v: BigInt(3),\n                d: 'The storage slot of the withdrawal request tail of the queue',\n            },\n            withdrawalsRequestQueueStorageOffset: {\n                v: BigInt(4),\n                d: 'The storage slot of the withdrawal request queue offset',\n            },\n            maxWithdrawalRequestsPerBlock: {\n                v: BigInt(16),\n                d: 'The max withdrawal requests per block',\n            },\n            targetWithdrawalRequestsPerBlock: {\n                v: BigInt(2),\n                d: 'The target withdrawal requests per block',\n            },\n            minWithdrawalRequestFee: {\n                v: BigInt(1),\n                d: 'The minimum withdrawal request fee (in wei)',\n            },\n            withdrawalRequestFeeUpdateFraction: {\n                v: BigInt(17),\n                d: 'The withdrawal request fee update fraction (used in the fake exponential)',\n            },\n            systemAddress: {\n                v: BigInt('0xfffffffffffffffffffffffffffffffffffffffe'),\n                d: 'The system address to perform operations on the withdrawal requests predeploy address',\n            },\n            withdrawalRequestPredeployAddress: {\n                v: BigInt('0x00A3ca265EBcb825B45F985A16CEFB49958cE017'),\n                d: 'Address of the validator excess address',\n            },\n        },\n    },\n    7251: {\n        comment: 'Execution layer triggered consolidations (experimental)',\n        url: 'https://eips.ethereum.org/EIPS/eip-7251',\n        status: Status.Draft,\n        minimumHardfork: enums_js_1.Hardfork.Paris,\n        requiredEIPs: [7685],\n        vm: {\n            consolidationRequestType: {\n                v: BigInt(0x02),\n                d: 'The withdrawal request type for EIP-7685',\n            },\n            systemAddress: {\n                v: BigInt('0xfffffffffffffffffffffffffffffffffffffffe'),\n                d: 'The system address to perform operations on the consolidation requests predeploy address',\n            },\n            consolidationRequestPredeployAddress: {\n                v: BigInt('0x00b42dbF2194e931E80326D950320f7d9Dbeac02'),\n                d: 'Address of the consolidations contract',\n            },\n        },\n    },\n    7516: {\n        comment: 'BLOBBASEFEE opcode',\n        url: 'https://eips.ethereum.org/EIPS/eip-7516',\n        status: Status.Draft,\n        minimumHardfork: enums_js_1.Hardfork.Paris,\n        requiredEIPs: [4844],\n        gasPrices: {\n            blobbasefee: {\n                v: 2,\n                d: 'Gas cost of the BLOBBASEFEE opcode',\n            },\n        },\n    },\n    7685: {\n        comment: 'General purpose execution layer requests',\n        url: 'https://eips.ethereum.org/EIPS/eip-7685',\n        status: Status.Draft,\n        // TODO: Set correct minimum hardfork\n        minimumHardfork: enums_js_1.Hardfork.Cancun,\n        requiredEIPs: [3675],\n        gasPrices: {},\n    },\n    7702: {\n        comment: 'Set EOA account code for one transaction',\n        url: 'https://github.com/ethereum/EIPs/blob/62419ca3f45375db00b04a368ea37c0bfb05386a/EIPS/eip-7702.md',\n        status: Status.Review,\n        // TODO: Set correct minimum hardfork\n        minimumHardfork: enums_js_1.Hardfork.Cancun,\n        requiredEIPs: [2718, 2929, 2930],\n        gasPrices: {\n            perAuthBaseCost: {\n                v: 2500,\n                d: 'Gas cost of each authority item',\n            },\n        },\n    },\n    7709: {\n        comment: 'Use historical block hashes saved in state for BLOCKHASH',\n        url: 'https://eips.ethereum.org/EIPS/eip-7709',\n        status: Status.Draft,\n        minimumHardfork: enums_js_1.Hardfork.Chainstart,\n        requiredEIPs: [2935],\n    },\n};\n//# sourceMappingURL=eips.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CustomChain = exports.ConsensusAlgorithm = exports.ConsensusType = exports.Hardfork = exports.ChainGenesis = exports.Chain = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nvar Chain;\n(function (Chain) {\n    Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n    Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n    Chain[Chain[\"Sepolia\"] = 11155111] = \"Sepolia\";\n    Chain[Chain[\"Holesky\"] = 17000] = \"Holesky\";\n    Chain[Chain[\"Kaustinen6\"] = 69420] = \"Kaustinen6\";\n})(Chain = exports.Chain || (exports.Chain = {}));\n// Having this info as record will force typescript to make sure no chain is missed\n/**\n * GenesisState info about well known ethereum chains\n */\nexports.ChainGenesis = {\n    [Chain.Mainnet]: {\n        name: 'mainnet',\n        blockNumber: util_1.BIGINT_0,\n        stateRoot: (0, util_1.hexToBytes)('0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544'),\n    },\n    [Chain.Goerli]: {\n        name: 'goerli',\n        blockNumber: util_1.BIGINT_0,\n        stateRoot: (0, util_1.hexToBytes)('0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008'),\n    },\n    [Chain.Sepolia]: {\n        name: 'sepolia',\n        blockNumber: util_1.BIGINT_0,\n        stateRoot: (0, util_1.hexToBytes)('0x5eb6e371a698b8d68f665192350ffcecbbbf322916f4b51bd79bb6887da3f494'),\n    },\n    [Chain.Holesky]: {\n        name: 'holesky',\n        blockNumber: util_1.BIGINT_0,\n        stateRoot: (0, util_1.hexToBytes)('0x69d8c9d72f6fa4ad42d4702b433707212f90db395eb54dc20bc85de253788783'),\n    },\n    [Chain.Kaustinen6]: {\n        name: 'kaustinen6',\n        blockNumber: util_1.BIGINT_0,\n        stateRoot: (0, util_1.hexToBytes)('0x1fbf85345a3cbba9a6d44f991b721e55620a22397c2a93ee8d5011136ac300ee'),\n    },\n};\nvar Hardfork;\n(function (Hardfork) {\n    Hardfork[\"Chainstart\"] = \"chainstart\";\n    Hardfork[\"Homestead\"] = \"homestead\";\n    Hardfork[\"Dao\"] = \"dao\";\n    Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n    Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n    Hardfork[\"Byzantium\"] = \"byzantium\";\n    Hardfork[\"Constantinople\"] = \"constantinople\";\n    Hardfork[\"Petersburg\"] = \"petersburg\";\n    Hardfork[\"Istanbul\"] = \"istanbul\";\n    Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n    Hardfork[\"Berlin\"] = \"berlin\";\n    Hardfork[\"London\"] = \"london\";\n    Hardfork[\"ArrowGlacier\"] = \"arrowGlacier\";\n    Hardfork[\"GrayGlacier\"] = \"grayGlacier\";\n    Hardfork[\"MergeForkIdTransition\"] = \"mergeForkIdTransition\";\n    Hardfork[\"Paris\"] = \"paris\";\n    Hardfork[\"Shanghai\"] = \"shanghai\";\n    Hardfork[\"Cancun\"] = \"cancun\";\n    Hardfork[\"Prague\"] = \"prague\";\n    Hardfork[\"Osaka\"] = \"osaka\";\n})(Hardfork = exports.Hardfork || (exports.Hardfork = {}));\nvar ConsensusType;\n(function (ConsensusType) {\n    ConsensusType[\"ProofOfStake\"] = \"pos\";\n    ConsensusType[\"ProofOfWork\"] = \"pow\";\n    ConsensusType[\"ProofOfAuthority\"] = \"poa\";\n})(ConsensusType = exports.ConsensusType || (exports.ConsensusType = {}));\nvar ConsensusAlgorithm;\n(function (ConsensusAlgorithm) {\n    ConsensusAlgorithm[\"Ethash\"] = \"ethash\";\n    ConsensusAlgorithm[\"Clique\"] = \"clique\";\n    ConsensusAlgorithm[\"Casper\"] = \"casper\";\n})(ConsensusAlgorithm = exports.ConsensusAlgorithm || (exports.ConsensusAlgorithm = {}));\nvar CustomChain;\n(function (CustomChain) {\n    /**\n     * Polygon (Matic) Mainnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n    /**\n     * Polygon (Matic) Mumbai Testnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n    /**\n     * Arbitrum One - mainnet for Arbitrum roll-up\n     *\n     * - [Documentation](https://developer.offchainlabs.com/public-chains)\n     */\n    CustomChain[\"ArbitrumOne\"] = \"arbitrum-one\";\n    /**\n     * xDai EVM sidechain with a native stable token\n     *\n     * - [Documentation](https://www.xdaichain.com/)\n     */\n    CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n    /**\n     * Optimistic Kovan - testnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticKovan\"] = \"optimistic-kovan\";\n    /**\n     * Optimistic Ethereum - mainnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticEthereum\"] = \"optimistic-ethereum\";\n})(CustomChain = exports.CustomChain || (exports.CustomChain = {}));\n//# sourceMappingURL=enums.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hardforks = exports.Status = void 0;\nvar Status;\n(function (Status) {\n    Status[\"Draft\"] = \"draft\";\n    Status[\"Review\"] = \"review\";\n    Status[\"Final\"] = \"final\";\n})(Status = exports.Status || (exports.Status = {}));\nexports.hardforks = {\n    chainstart: {\n        name: 'chainstart',\n        comment: 'Start of the Ethereum main chain',\n        url: '',\n        status: Status.Final,\n        gasConfig: {\n            minGasLimit: {\n                v: 5000,\n                d: 'Minimum the gas limit may ever be',\n            },\n            gasLimitBoundDivisor: {\n                v: 1024,\n                d: 'The bound divisor of the gas limit, used in update calculations',\n            },\n            maxRefundQuotient: {\n                v: 2,\n                d: 'Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)',\n            },\n        },\n        gasPrices: {\n            base: {\n                v: 2,\n                d: 'Gas base cost, used e.g. for ChainID opcode (Istanbul)',\n            },\n            exp: {\n                v: 10,\n                d: 'Base fee of the EXP opcode',\n            },\n            expByte: {\n                v: 10,\n                d: 'Times ceil(log256(exponent)) for the EXP instruction',\n            },\n            keccak256: {\n                v: 30,\n                d: 'Base fee of the SHA3 opcode',\n            },\n            keccak256Word: {\n                v: 6,\n                d: \"Once per word of the SHA3 operation's data\",\n            },\n            sload: {\n                v: 50,\n                d: 'Base fee of the SLOAD opcode',\n            },\n            sstoreSet: {\n                v: 20000,\n                d: 'Once per SSTORE operation if the zeroness changes from zero',\n            },\n            sstoreReset: {\n                v: 5000,\n                d: 'Once per SSTORE operation if the zeroness does not change from zero',\n            },\n            sstoreRefund: {\n                v: 15000,\n                d: 'Once per SSTORE operation if the zeroness changes to zero',\n            },\n            jumpdest: {\n                v: 1,\n                d: 'Base fee of the JUMPDEST opcode',\n            },\n            log: {\n                v: 375,\n                d: 'Base fee of the LOG opcode',\n            },\n            logData: {\n                v: 8,\n                d: \"Per byte in a LOG* operation's data\",\n            },\n            logTopic: {\n                v: 375,\n                d: 'Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas',\n            },\n            create: {\n                v: 32000,\n                d: 'Base fee of the CREATE opcode',\n            },\n            call: {\n                v: 40,\n                d: 'Base fee of the CALL opcode',\n            },\n            callStipend: {\n                v: 2300,\n                d: 'Free gas given at beginning of call',\n            },\n            callValueTransfer: {\n                v: 9000,\n                d: 'Paid for CALL when the value transfor is non-zero',\n            },\n            callNewAccount: {\n                v: 25000,\n                d: \"Paid for CALL when the destination address didn't exist prior\",\n            },\n            selfdestructRefund: {\n                v: 24000,\n                d: 'Refunded following a selfdestruct operation',\n            },\n            memory: {\n                v: 3,\n                d: 'Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL',\n            },\n            quadCoeffDiv: {\n                v: 512,\n                d: 'Divisor for the quadratic particle of the memory cost equation',\n            },\n            createData: {\n                v: 200,\n                d: '',\n            },\n            tx: {\n                v: 21000,\n                d: 'Per transaction. NOTE: Not payable on data of calls between transactions',\n            },\n            txCreation: {\n                v: 32000,\n                d: 'The cost of creating a contract via tx',\n            },\n            txDataZero: {\n                v: 4,\n                d: 'Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions',\n            },\n            txDataNonZero: {\n                v: 68,\n                d: 'Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions',\n            },\n            copy: {\n                v: 3,\n                d: 'Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added',\n            },\n            ecRecover: {\n                v: 3000,\n                d: '',\n            },\n            sha256: {\n                v: 60,\n                d: '',\n            },\n            sha256Word: {\n                v: 12,\n                d: '',\n            },\n            ripemd160: {\n                v: 600,\n                d: '',\n            },\n            ripemd160Word: {\n                v: 120,\n                d: '',\n            },\n            identity: {\n                v: 15,\n                d: '',\n            },\n            identityWord: {\n                v: 3,\n                d: '',\n            },\n            stop: {\n                v: 0,\n                d: 'Base fee of the STOP opcode',\n            },\n            add: {\n                v: 3,\n                d: 'Base fee of the ADD opcode',\n            },\n            mul: {\n                v: 5,\n                d: 'Base fee of the MUL opcode',\n            },\n            sub: {\n                v: 3,\n                d: 'Base fee of the SUB opcode',\n            },\n            div: {\n                v: 5,\n                d: 'Base fee of the DIV opcode',\n            },\n            sdiv: {\n                v: 5,\n                d: 'Base fee of the SDIV opcode',\n            },\n            mod: {\n                v: 5,\n                d: 'Base fee of the MOD opcode',\n            },\n            smod: {\n                v: 5,\n                d: 'Base fee of the SMOD opcode',\n            },\n            addmod: {\n                v: 8,\n                d: 'Base fee of the ADDMOD opcode',\n            },\n            mulmod: {\n                v: 8,\n                d: 'Base fee of the MULMOD opcode',\n            },\n            signextend: {\n                v: 5,\n                d: 'Base fee of the SIGNEXTEND opcode',\n            },\n            lt: {\n                v: 3,\n                d: 'Base fee of the LT opcode',\n            },\n            gt: {\n                v: 3,\n                d: 'Base fee of the GT opcode',\n            },\n            slt: {\n                v: 3,\n                d: 'Base fee of the SLT opcode',\n            },\n            sgt: {\n                v: 3,\n                d: 'Base fee of the SGT opcode',\n            },\n            eq: {\n                v: 3,\n                d: 'Base fee of the EQ opcode',\n            },\n            iszero: {\n                v: 3,\n                d: 'Base fee of the ISZERO opcode',\n            },\n            and: {\n                v: 3,\n                d: 'Base fee of the AND opcode',\n            },\n            or: {\n                v: 3,\n                d: 'Base fee of the OR opcode',\n            },\n            xor: {\n                v: 3,\n                d: 'Base fee of the XOR opcode',\n            },\n            not: {\n                v: 3,\n                d: 'Base fee of the NOT opcode',\n            },\n            byte: {\n                v: 3,\n                d: 'Base fee of the BYTE opcode',\n            },\n            address: {\n                v: 2,\n                d: 'Base fee of the ADDRESS opcode',\n            },\n            balance: {\n                v: 20,\n                d: 'Base fee of the BALANCE opcode',\n            },\n            origin: {\n                v: 2,\n                d: 'Base fee of the ORIGIN opcode',\n            },\n            caller: {\n                v: 2,\n                d: 'Base fee of the CALLER opcode',\n            },\n            callvalue: {\n                v: 2,\n                d: 'Base fee of the CALLVALUE opcode',\n            },\n            calldataload: {\n                v: 3,\n                d: 'Base fee of the CALLDATALOAD opcode',\n            },\n            calldatasize: {\n                v: 2,\n                d: 'Base fee of the CALLDATASIZE opcode',\n            },\n            calldatacopy: {\n                v: 3,\n                d: 'Base fee of the CALLDATACOPY opcode',\n            },\n            codesize: {\n                v: 2,\n                d: 'Base fee of the CODESIZE opcode',\n            },\n            codecopy: {\n                v: 3,\n                d: 'Base fee of the CODECOPY opcode',\n            },\n            gasprice: {\n                v: 2,\n                d: 'Base fee of the GASPRICE opcode',\n            },\n            extcodesize: {\n                v: 20,\n                d: 'Base fee of the EXTCODESIZE opcode',\n            },\n            extcodecopy: {\n                v: 20,\n                d: 'Base fee of the EXTCODECOPY opcode',\n            },\n            blockhash: {\n                v: 20,\n                d: 'Base fee of the BLOCKHASH opcode',\n            },\n            coinbase: {\n                v: 2,\n                d: 'Base fee of the COINBASE opcode',\n            },\n            timestamp: {\n                v: 2,\n                d: 'Base fee of the TIMESTAMP opcode',\n            },\n            number: {\n                v: 2,\n                d: 'Base fee of the NUMBER opcode',\n            },\n            difficulty: {\n                v: 2,\n                d: 'Base fee of the DIFFICULTY opcode',\n            },\n            gaslimit: {\n                v: 2,\n                d: 'Base fee of the GASLIMIT opcode',\n            },\n            pop: {\n                v: 2,\n                d: 'Base fee of the POP opcode',\n            },\n            mload: {\n                v: 3,\n                d: 'Base fee of the MLOAD opcode',\n            },\n            mstore: {\n                v: 3,\n                d: 'Base fee of the MSTORE opcode',\n            },\n            mstore8: {\n                v: 3,\n                d: 'Base fee of the MSTORE8 opcode',\n            },\n            sstore: {\n                v: 0,\n                d: 'Base fee of the SSTORE opcode',\n            },\n            jump: {\n                v: 8,\n                d: 'Base fee of the JUMP opcode',\n            },\n            jumpi: {\n                v: 10,\n                d: 'Base fee of the JUMPI opcode',\n            },\n            pc: {\n                v: 2,\n                d: 'Base fee of the PC opcode',\n            },\n            msize: {\n                v: 2,\n                d: 'Base fee of the MSIZE opcode',\n            },\n            gas: {\n                v: 2,\n                d: 'Base fee of the GAS opcode',\n            },\n            push: {\n                v: 3,\n                d: 'Base fee of the PUSH opcode',\n            },\n            dup: {\n                v: 3,\n                d: 'Base fee of the DUP opcode',\n            },\n            swap: {\n                v: 3,\n                d: 'Base fee of the SWAP opcode',\n            },\n            callcode: {\n                v: 40,\n                d: 'Base fee of the CALLCODE opcode',\n            },\n            return: {\n                v: 0,\n                d: 'Base fee of the RETURN opcode',\n            },\n            invalid: {\n                v: 0,\n                d: 'Base fee of the INVALID opcode',\n            },\n            selfdestruct: {\n                v: 0,\n                d: 'Base fee of the SELFDESTRUCT opcode',\n            },\n        },\n        vm: {\n            stackLimit: {\n                v: 1024,\n                d: 'Maximum size of VM stack allowed',\n            },\n            callCreateDepth: {\n                v: 1024,\n                d: 'Maximum depth of call/create stack',\n            },\n            maxExtraDataSize: {\n                v: 32,\n                d: 'Maximum size extra data may be after Genesis',\n            },\n        },\n        pow: {\n            minimumDifficulty: {\n                v: 131072,\n                d: 'The minimum that the difficulty may ever be',\n            },\n            difficultyBoundDivisor: {\n                v: 2048,\n                d: 'The bound divisor of the difficulty, used in the update calculations',\n            },\n            durationLimit: {\n                v: 13,\n                d: 'The decision boundary on the blocktime duration used to determine whether difficulty should go up or not',\n            },\n            epochDuration: {\n                v: 30000,\n                d: 'Duration between proof-of-work epochs',\n            },\n            timebombPeriod: {\n                v: 100000,\n                d: 'Exponential difficulty timebomb period',\n            },\n            minerReward: {\n                v: BigInt('5000000000000000000'),\n                d: 'the amount a miner get rewarded for mining a block',\n            },\n            difficultyBombDelay: {\n                v: 0,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    homestead: {\n        name: 'homestead',\n        comment: 'Homestead hardfork with protocol and network changes',\n        url: 'https://eips.ethereum.org/EIPS/eip-606',\n        status: Status.Final,\n        gasPrices: {\n            delegatecall: {\n                v: 40,\n                d: 'Base fee of the DELEGATECALL opcode',\n            },\n        },\n    },\n    dao: {\n        name: 'dao',\n        comment: 'DAO rescue hardfork',\n        url: 'https://eips.ethereum.org/EIPS/eip-779',\n        status: Status.Final,\n    },\n    tangerineWhistle: {\n        name: 'tangerineWhistle',\n        comment: 'Hardfork with gas cost changes for IO-heavy operations',\n        url: 'https://eips.ethereum.org/EIPS/eip-608',\n        status: Status.Final,\n        gasPrices: {\n            sload: {\n                v: 200,\n                d: 'Once per SLOAD operation',\n            },\n            call: {\n                v: 700,\n                d: 'Once per CALL operation & message call transaction',\n            },\n            extcodesize: {\n                v: 700,\n                d: 'Base fee of the EXTCODESIZE opcode',\n            },\n            extcodecopy: {\n                v: 700,\n                d: 'Base fee of the EXTCODECOPY opcode',\n            },\n            balance: {\n                v: 400,\n                d: 'Base fee of the BALANCE opcode',\n            },\n            delegatecall: {\n                v: 700,\n                d: 'Base fee of the DELEGATECALL opcode',\n            },\n            callcode: {\n                v: 700,\n                d: 'Base fee of the CALLCODE opcode',\n            },\n            selfdestruct: {\n                v: 5000,\n                d: 'Base fee of the SELFDESTRUCT opcode',\n            },\n        },\n    },\n    spuriousDragon: {\n        name: 'spuriousDragon',\n        comment: 'HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit',\n        url: 'https://eips.ethereum.org/EIPS/eip-607',\n        status: Status.Final,\n        gasPrices: {\n            expByte: {\n                v: 50,\n                d: 'Times ceil(log256(exponent)) for the EXP instruction',\n            },\n        },\n        vm: {\n            maxCodeSize: {\n                v: 24576,\n                d: 'Maximum length of contract code',\n            },\n        },\n    },\n    byzantium: {\n        name: 'byzantium',\n        comment: 'Hardfork with new precompiles, instructions and other protocol changes',\n        url: 'https://eips.ethereum.org/EIPS/eip-609',\n        status: Status.Final,\n        gasPrices: {\n            modexpGquaddivisor: {\n                v: 20,\n                d: 'Gquaddivisor from modexp precompile for gas calculation',\n            },\n            ecAdd: {\n                v: 500,\n                d: 'Gas costs for curve addition precompile',\n            },\n            ecMul: {\n                v: 40000,\n                d: 'Gas costs for curve multiplication precompile',\n            },\n            ecPairing: {\n                v: 100000,\n                d: 'Base gas costs for curve pairing precompile',\n            },\n            ecPairingWord: {\n                v: 80000,\n                d: 'Gas costs regarding curve pairing precompile input length',\n            },\n            revert: {\n                v: 0,\n                d: 'Base fee of the REVERT opcode',\n            },\n            staticcall: {\n                v: 700,\n                d: 'Base fee of the STATICCALL opcode',\n            },\n            returndatasize: {\n                v: 2,\n                d: 'Base fee of the RETURNDATASIZE opcode',\n            },\n            returndatacopy: {\n                v: 3,\n                d: 'Base fee of the RETURNDATACOPY opcode',\n            },\n        },\n        pow: {\n            minerReward: {\n                v: BigInt('3000000000000000000'),\n                d: 'the amount a miner get rewarded for mining a block',\n            },\n            difficultyBombDelay: {\n                v: 3000000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    constantinople: {\n        name: 'constantinople',\n        comment: 'Postponed hardfork including EIP-1283 (SSTORE gas metering changes)',\n        url: 'https://eips.ethereum.org/EIPS/eip-1013',\n        status: Status.Final,\n        gasPrices: {\n            netSstoreNoopGas: {\n                v: 200,\n                d: \"Once per SSTORE operation if the value doesn't change\",\n            },\n            netSstoreInitGas: {\n                v: 20000,\n                d: 'Once per SSTORE operation from clean zero',\n            },\n            netSstoreCleanGas: {\n                v: 5000,\n                d: 'Once per SSTORE operation from clean non-zero',\n            },\n            netSstoreDirtyGas: {\n                v: 200,\n                d: 'Once per SSTORE operation from dirty',\n            },\n            netSstoreClearRefund: {\n                v: 15000,\n                d: 'Once per SSTORE operation for clearing an originally existing storage slot',\n            },\n            netSstoreResetRefund: {\n                v: 4800,\n                d: 'Once per SSTORE operation for resetting to the original non-zero value',\n            },\n            netSstoreResetClearRefund: {\n                v: 19800,\n                d: 'Once per SSTORE operation for resetting to the original zero value',\n            },\n            shl: {\n                v: 3,\n                d: 'Base fee of the SHL opcode',\n            },\n            shr: {\n                v: 3,\n                d: 'Base fee of the SHR opcode',\n            },\n            sar: {\n                v: 3,\n                d: 'Base fee of the SAR opcode',\n            },\n            extcodehash: {\n                v: 400,\n                d: 'Base fee of the EXTCODEHASH opcode',\n            },\n            create2: {\n                v: 32000,\n                d: 'Base fee of the CREATE2 opcode',\n            },\n        },\n        pow: {\n            minerReward: {\n                v: BigInt('2000000000000000000'),\n                d: 'The amount a miner gets rewarded for mining a block',\n            },\n            difficultyBombDelay: {\n                v: 5000000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    petersburg: {\n        name: 'petersburg',\n        comment: 'Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople',\n        url: 'https://eips.ethereum.org/EIPS/eip-1716',\n        status: Status.Final,\n        gasPrices: {\n            netSstoreNoopGas: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreInitGas: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreCleanGas: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreDirtyGas: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreClearRefund: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreResetRefund: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n            netSstoreResetClearRefund: {\n                v: null,\n                d: 'Removed along EIP-1283',\n            },\n        },\n    },\n    istanbul: {\n        name: 'istanbul',\n        comment: 'HF targeted for December 2019 following the Constantinople/Petersburg HF',\n        url: 'https://eips.ethereum.org/EIPS/eip-1679',\n        status: Status.Final,\n        gasConfig: {},\n        gasPrices: {\n            blake2Round: {\n                v: 1,\n                d: 'Gas cost per round for the Blake2 F precompile',\n            },\n            ecAdd: {\n                v: 150,\n                d: 'Gas costs for curve addition precompile',\n            },\n            ecMul: {\n                v: 6000,\n                d: 'Gas costs for curve multiplication precompile',\n            },\n            ecPairing: {\n                v: 45000,\n                d: 'Base gas costs for curve pairing precompile',\n            },\n            ecPairingWord: {\n                v: 34000,\n                d: 'Gas costs regarding curve pairing precompile input length',\n            },\n            txDataNonZero: {\n                v: 16,\n                d: 'Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions',\n            },\n            sstoreSentryGasEIP2200: {\n                v: 2300,\n                d: 'Minimum gas required to be present for an SSTORE call, not consumed',\n            },\n            sstoreNoopGasEIP2200: {\n                v: 800,\n                d: \"Once per SSTORE operation if the value doesn't change\",\n            },\n            sstoreDirtyGasEIP2200: {\n                v: 800,\n                d: 'Once per SSTORE operation if a dirty value is changed',\n            },\n            sstoreInitGasEIP2200: {\n                v: 20000,\n                d: 'Once per SSTORE operation from clean zero to non-zero',\n            },\n            sstoreInitRefundEIP2200: {\n                v: 19200,\n                d: 'Once per SSTORE operation for resetting to the original zero value',\n            },\n            sstoreCleanGasEIP2200: {\n                v: 5000,\n                d: 'Once per SSTORE operation from clean non-zero to something else',\n            },\n            sstoreCleanRefundEIP2200: {\n                v: 4200,\n                d: 'Once per SSTORE operation for resetting to the original non-zero value',\n            },\n            sstoreClearRefundEIP2200: {\n                v: 15000,\n                d: 'Once per SSTORE operation for clearing an originally existing storage slot',\n            },\n            balance: {\n                v: 700,\n                d: 'Base fee of the BALANCE opcode',\n            },\n            extcodehash: {\n                v: 700,\n                d: 'Base fee of the EXTCODEHASH opcode',\n            },\n            chainid: {\n                v: 2,\n                d: 'Base fee of the CHAINID opcode',\n            },\n            selfbalance: {\n                v: 5,\n                d: 'Base fee of the SELFBALANCE opcode',\n            },\n            sload: {\n                v: 800,\n                d: 'Base fee of the SLOAD opcode',\n            },\n        },\n    },\n    muirGlacier: {\n        name: 'muirGlacier',\n        comment: 'HF to delay the difficulty bomb',\n        url: 'https://eips.ethereum.org/EIPS/eip-2384',\n        status: Status.Final,\n        pow: {\n            difficultyBombDelay: {\n                v: 9000000,\n                d: 'the amount of blocks to delay the difficulty bomb with',\n            },\n        },\n    },\n    berlin: {\n        name: 'berlin',\n        comment: 'HF targeted for July 2020 following the Muir Glacier HF',\n        url: 'https://eips.ethereum.org/EIPS/eip-2070',\n        status: Status.Final,\n        eips: [2565, 2929, 2718, 2930],\n    },\n    london: {\n        name: 'london',\n        comment: 'HF targeted for July 2021 following the Berlin fork',\n        url: 'https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md',\n        status: Status.Final,\n        eips: [1559, 3198, 3529, 3541],\n    },\n    arrowGlacier: {\n        name: 'arrowGlacier',\n        comment: 'HF to delay the difficulty bomb',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md',\n        status: Status.Final,\n        eips: [4345],\n    },\n    grayGlacier: {\n        name: 'grayGlacier',\n        comment: 'Delaying the difficulty bomb to Mid September 2022',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md',\n        status: Status.Final,\n        eips: [5133],\n    },\n    paris: {\n        name: 'paris',\n        comment: 'Hardfork to upgrade the consensus mechanism to Proof-of-Stake',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md',\n        status: Status.Final,\n        consensus: {\n            type: 'pos',\n            algorithm: 'casper',\n            casper: {},\n        },\n        eips: [3675, 4399],\n    },\n    mergeForkIdTransition: {\n        name: 'mergeForkIdTransition',\n        comment: 'Pre-merge hardfork to fork off non-upgraded clients',\n        url: 'https://eips.ethereum.org/EIPS/eip-3675',\n        status: Status.Final,\n        eips: [],\n    },\n    shanghai: {\n        name: 'shanghai',\n        comment: 'Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md',\n        status: Status.Final,\n        eips: [3651, 3855, 3860, 4895],\n    },\n    cancun: {\n        name: 'cancun',\n        comment: 'Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md',\n        status: Status.Final,\n        eips: [1153, 4844, 4788, 5656, 6780, 7516],\n    },\n    prague: {\n        name: 'prague',\n        comment: 'Next feature hardfork after cancun, internally used for pectra testing/implementation (incomplete/experimental)',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/prague.md',\n        status: Status.Draft,\n        eips: [2537, 2935, 3074, 6110, 7002, 7251, 7685],\n    },\n    osaka: {\n        name: 'osaka',\n        comment: 'Next feature hardfork after prague, internally used for verkle testing/implementation (incomplete/experimental)',\n        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/osaka.md',\n        status: Status.Draft,\n        eips: [2935, 6800],\n    },\n};\n//# sourceMappingURL=hardforks.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./common.js\"), exports);\n__exportStar(require(\"./enums.js\"), exports);\n__exportStar(require(\"./interfaces.js\"), exports);\n__exportStar(require(\"./types.js\"), exports);\n__exportStar(require(\"./utils.js\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n/**\n * External Interfaces for other EthereumJS libraries\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=interfaces.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseGethGenesis = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst enums_js_1 = require(\"./enums.js\");\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce) {\n    if (!nonce || nonce === '0x0') {\n        return '0x0000000000000000';\n    }\n    if ((0, util_1.isHexString)(nonce)) {\n        return `0x${(0, util_1.stripHexPrefix)(nonce).padStart(16, '0')}`;\n    }\n    return `0x${nonce.padStart(16, '0')}`;\n}\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json, mergeForkIdPostMerge = true) {\n    const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas, excessBlobGas, extraData: unparsedExtraData, nonce: unparsedNonce, timestamp: unparsedTimestamp, } = json;\n    const genesisTimestamp = Number(unparsedTimestamp);\n    const { chainId, depositContractAddress, } = config;\n    // geth is not strictly putting empty fields with a 0x prefix\n    const extraData = unparsedExtraData === '' ? '0x' : unparsedExtraData;\n    // geth may use number for timestamp\n    const timestamp = (0, util_1.isHexString)(unparsedTimestamp)\n        ? unparsedTimestamp\n        : (0, util_1.intToHex)(parseInt(unparsedTimestamp));\n    // geth may not give us a nonce strictly formatted to an 8 byte 0x-prefixed hex string\n    const nonce = unparsedNonce.length !== 18 ? formatNonce(unparsedNonce) : unparsedNonce;\n    // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n    // but have different configuration parameters in geth genesis parameters\n    if (config.eip155Block !== config.eip158Block) {\n        throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');\n    }\n    const params = {\n        name,\n        chainId,\n        networkId: chainId,\n        depositContractAddress,\n        genesis: {\n            timestamp,\n            gasLimit,\n            difficulty,\n            nonce,\n            extraData,\n            mixHash,\n            coinbase,\n            baseFeePerGas,\n            excessBlobGas,\n        },\n        hardfork: undefined,\n        hardforks: [],\n        bootstrapNodes: [],\n        consensus: config.clique !== undefined\n            ? {\n                type: 'poa',\n                algorithm: 'clique',\n                clique: {\n                    // The recent geth genesis seems to be using blockperiodseconds\n                    // and epochlength for clique specification\n                    // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n                    period: config.clique.period ?? config.clique.blockperiodseconds,\n                    epoch: config.clique.epoch ?? config.clique.epochlength,\n                },\n            }\n            : {\n                type: 'pow',\n                algorithm: 'ethash',\n                ethash: {},\n            },\n    };\n    const forkMap = {\n        [enums_js_1.Hardfork.Homestead]: { name: 'homesteadBlock' },\n        [enums_js_1.Hardfork.Dao]: { name: 'daoForkBlock' },\n        [enums_js_1.Hardfork.TangerineWhistle]: { name: 'eip150Block' },\n        [enums_js_1.Hardfork.SpuriousDragon]: { name: 'eip155Block' },\n        [enums_js_1.Hardfork.Byzantium]: { name: 'byzantiumBlock' },\n        [enums_js_1.Hardfork.Constantinople]: { name: 'constantinopleBlock' },\n        [enums_js_1.Hardfork.Petersburg]: { name: 'petersburgBlock' },\n        [enums_js_1.Hardfork.Istanbul]: { name: 'istanbulBlock' },\n        [enums_js_1.Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\n        [enums_js_1.Hardfork.Berlin]: { name: 'berlinBlock' },\n        [enums_js_1.Hardfork.London]: { name: 'londonBlock' },\n        [enums_js_1.Hardfork.MergeForkIdTransition]: { name: 'mergeForkBlock', postMerge: mergeForkIdPostMerge },\n        [enums_js_1.Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\n        [enums_js_1.Hardfork.Cancun]: { name: 'cancunTime', postMerge: true, isTimestamp: true },\n        [enums_js_1.Hardfork.Prague]: { name: 'pragueTime', postMerge: true, isTimestamp: true },\n        [enums_js_1.Hardfork.Osaka]: { name: 'osakaTime', postMerge: true, isTimestamp: true },\n    };\n    // forkMapRev is the map from config field name to Hardfork\n    const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n        acc[forkMap[elem].name] = elem;\n        return acc;\n    }, {});\n    const configHardforkNames = Object.keys(config).filter((key) => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);\n    params.hardforks = configHardforkNames\n        .map((nameBlock) => ({\n        name: forkMapRev[nameBlock],\n        block: forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== 'number'\n            ? null\n            : config[nameBlock],\n        timestamp: forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === 'number'\n            ? config[nameBlock]\n            : undefined,\n    }))\n        .filter((fork) => fork.block !== null || fork.timestamp !== undefined);\n    params.hardforks.sort(function (a, b) {\n        return (a.block ?? Infinity) - (b.block ?? Infinity);\n    });\n    params.hardforks.sort(function (a, b) {\n        // non timestamp forks come before any timestamp forks\n        return (a.timestamp ?? 0) - (b.timestamp ?? 0);\n    });\n    // only set the genesis timestamp forks to zero post the above sort has happended\n    // to get the correct sorting\n    for (const hf of params.hardforks) {\n        if (hf.timestamp === genesisTimestamp) {\n            hf.timestamp = 0;\n        }\n    }\n    if (config.terminalTotalDifficulty !== undefined) {\n        // Following points need to be considered for placement of merge hf\n        // - Merge hardfork can't be placed at genesis\n        // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n        // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n        //   necessary for e.g. withdrawals\n        const mergeConfig = {\n            name: enums_js_1.Hardfork.Paris,\n            ttd: config.terminalTotalDifficulty,\n            block: null,\n        };\n        // Merge hardfork has to be placed before first hardfork that is dependent on merge\n        const postMergeIndex = params.hardforks.findIndex((hf) => forkMap[hf.name]?.postMerge === true);\n        if (postMergeIndex !== -1) {\n            params.hardforks.splice(postMergeIndex, 0, mergeConfig);\n        }\n        else {\n            params.hardforks.push(mergeConfig);\n        }\n    }\n    const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n    params.hardfork = latestHardfork?.name;\n    params.hardforks.unshift({ name: enums_js_1.Hardfork.Chainstart, block: 0 });\n    return params;\n}\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nfunction parseGethGenesis(json, name, mergeForkIdPostMerge) {\n    try {\n        const required = ['config', 'difficulty', 'gasLimit', 'nonce', 'alloc'];\n        if (required.some((field) => !(field in json))) {\n            const missingField = required.filter((field) => !(field in json));\n            throw new Error(`Invalid format, expected geth genesis field \"${missingField}\" missing`);\n        }\n        // We copy the JSON object here because it's frozen in browser and properties can't be modified\n        const finalJson = { ...json };\n        if (name !== undefined) {\n            finalJson.name = name;\n        }\n        return parseGethParams(finalJson, mergeForkIdPostMerge);\n    }\n    catch (e) {\n        throw new Error(`Error parsing parameters file: ${e.message}`);\n    }\n}\nexports.parseGethGenesis = parseGethGenesis;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RLP = exports.utils = exports.decode = exports.encode = void 0;\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        let outputLength = 0;\n        for (let i = 0; i < input.length; i++) {\n            const encoded = encode(input[i]);\n            output.push(encoded);\n            outputLength += encoded.length;\n        }\n        return concatBytes(encodeLength(outputLength, 192), ...output);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\nexports.encode = encode;\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([len + offset]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (typeof input === 'undefined' || input === null || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return {\n            data: decoded.data,\n            remainder: decoded.remainder.slice(),\n        };\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid RLP: remainder must be zero');\n    }\n    return decoded.data;\n}\nexports.decode = decode;\n/** Decode an input with RLP */\nfunction _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.subarray(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        }\n        else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n        }\n        return {\n            data,\n            remainder: input.subarray(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data,\n            remainder: input.subarray(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.subarray(length),\n        };\n    }\n    else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error('invalid RLP: encoded list too short');\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid RLP: total length is larger than the data');\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.subarray(totalLength),\n        };\n    }\n}\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === 'string') {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === 'number' || typeof v === 'bigint') {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nexports.utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes,\n};\nexports.RLP = { encode, decode };\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.accountBodyToRLP = exports.accountBodyToSlim = exports.accountBodyFromSlim = exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\nconst secp256k1_js_1 = require(\"ethereum-cryptography/secp256k1.js\");\nconst bytes_js_1 = require(\"./bytes.js\");\nconst constants_js_1 = require(\"./constants.js\");\nconst helpers_js_1 = require(\"./helpers.js\");\nconst internal_js_1 = require(\"./internal.js\");\n/**\n * Account class to load and maintain the  basic account objects.\n * Supports partial loading and access required for verkle with null\n * as the placeholder.\n *\n * Note: passing undefined in constructor is different from null\n * While undefined leads to default assignment, null is retained\n * to track the information not available/loaded because of partial\n * witness access\n */\nclass Account {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     * undefined get assigned with the defaults present, but null args are retained as is\n     */\n    constructor(nonce = constants_js_1.BIGINT_0, balance = constants_js_1.BIGINT_0, storageRoot = constants_js_1.KECCAK256_RLP, codeHash = constants_js_1.KECCAK256_NULL, codeSize = null, version = 0) {\n        this._nonce = null;\n        this._balance = null;\n        this._storageRoot = null;\n        this._codeHash = null;\n        // codeSize and version is separately stored in VKT\n        this._codeSize = null;\n        this._version = null;\n        this._nonce = nonce;\n        this._balance = balance;\n        this._storageRoot = storageRoot;\n        this._codeHash = codeHash;\n        if (codeSize === null && codeHash !== null && !this.isContract()) {\n            codeSize = 0;\n        }\n        this._codeSize = codeSize;\n        this._version = version;\n        this._validate();\n    }\n    get version() {\n        if (this._version !== null) {\n            return this._version;\n        }\n        else {\n            throw Error(`version=${this._version} not loaded`);\n        }\n    }\n    set version(_version) {\n        this._version = _version;\n    }\n    get nonce() {\n        if (this._nonce !== null) {\n            return this._nonce;\n        }\n        else {\n            throw Error(`nonce=${this._nonce} not loaded`);\n        }\n    }\n    set nonce(_nonce) {\n        this._nonce = _nonce;\n    }\n    get balance() {\n        if (this._balance !== null) {\n            return this._balance;\n        }\n        else {\n            throw Error(`balance=${this._balance} not loaded`);\n        }\n    }\n    set balance(_balance) {\n        this._balance = _balance;\n    }\n    get storageRoot() {\n        if (this._storageRoot !== null) {\n            return this._storageRoot;\n        }\n        else {\n            throw Error(`storageRoot=${this._storageRoot} not loaded`);\n        }\n    }\n    set storageRoot(_storageRoot) {\n        this._storageRoot = _storageRoot;\n    }\n    get codeHash() {\n        if (this._codeHash !== null) {\n            return this._codeHash;\n        }\n        else {\n            throw Error(`codeHash=${this._codeHash} not loaded`);\n        }\n    }\n    set codeHash(_codeHash) {\n        this._codeHash = _codeHash;\n    }\n    get codeSize() {\n        if (this._codeSize !== null) {\n            return this._codeSize;\n        }\n        else {\n            throw Error(`codeHash=${this._codeSize} not loaded`);\n        }\n    }\n    set codeSize(_codeSize) {\n        this._codeSize = _codeSize;\n    }\n    static fromAccountData(accountData) {\n        const { nonce, balance, storageRoot, codeHash } = accountData;\n        if (nonce === null || balance === null || storageRoot === null || codeHash === null) {\n            throw Error(`Partial fields not supported in fromAccountData`);\n        }\n        return new Account(nonce !== undefined ? (0, bytes_js_1.bytesToBigInt)((0, bytes_js_1.toBytes)(nonce)) : undefined, balance !== undefined ? (0, bytes_js_1.bytesToBigInt)((0, bytes_js_1.toBytes)(balance)) : undefined, storageRoot !== undefined ? (0, bytes_js_1.toBytes)(storageRoot) : undefined, codeHash !== undefined ? (0, bytes_js_1.toBytes)(codeHash) : undefined);\n    }\n    static fromPartialAccountData(partialAccountData) {\n        const { nonce, balance, storageRoot, codeHash, codeSize, version } = partialAccountData;\n        if (nonce === null &&\n            balance === null &&\n            storageRoot === null &&\n            codeHash === null &&\n            codeSize === null &&\n            version === null) {\n            throw Error(`All partial fields null`);\n        }\n        return new Account(nonce !== undefined && nonce !== null ? (0, bytes_js_1.bytesToBigInt)((0, bytes_js_1.toBytes)(nonce)) : nonce, balance !== undefined && balance !== null ? (0, bytes_js_1.bytesToBigInt)((0, bytes_js_1.toBytes)(balance)) : balance, storageRoot !== undefined && storageRoot !== null ? (0, bytes_js_1.toBytes)(storageRoot) : storageRoot, codeHash !== undefined && codeHash !== null ? (0, bytes_js_1.toBytes)(codeHash) : codeHash, codeSize !== undefined && codeSize !== null ? (0, bytes_js_1.bytesToInt)((0, bytes_js_1.toBytes)(codeSize)) : codeSize, version !== undefined && version !== null ? (0, bytes_js_1.bytesToInt)((0, bytes_js_1.toBytes)(version)) : version);\n    }\n    static fromRlpSerializedAccount(serialized) {\n        const values = rlp_1.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        return this.fromValuesArray(values);\n    }\n    static fromRlpSerializedPartialAccount(serialized) {\n        const values = rlp_1.RLP.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        let nonce = null;\n        if (!Array.isArray(values[0])) {\n            throw new Error('Invalid partial nonce encoding. Must be array');\n        }\n        else {\n            const isNotNullIndicator = (0, bytes_js_1.bytesToInt)(values[0][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for nonce`);\n            }\n            if (isNotNullIndicator === 1) {\n                nonce = (0, bytes_js_1.bytesToBigInt)(values[0][1]);\n            }\n        }\n        let balance = null;\n        if (!Array.isArray(values[1])) {\n            throw new Error('Invalid partial balance encoding. Must be array');\n        }\n        else {\n            const isNotNullIndicator = (0, bytes_js_1.bytesToInt)(values[1][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for balance`);\n            }\n            if (isNotNullIndicator === 1) {\n                balance = (0, bytes_js_1.bytesToBigInt)(values[1][1]);\n            }\n        }\n        let storageRoot = null;\n        if (!Array.isArray(values[2])) {\n            throw new Error('Invalid partial storageRoot encoding. Must be array');\n        }\n        else {\n            const isNotNullIndicator = (0, bytes_js_1.bytesToInt)(values[2][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for storageRoot`);\n            }\n            if (isNotNullIndicator === 1) {\n                storageRoot = values[2][1];\n            }\n        }\n        let codeHash = null;\n        if (!Array.isArray(values[3])) {\n            throw new Error('Invalid partial codeHash encoding. Must be array');\n        }\n        else {\n            const isNotNullIndicator = (0, bytes_js_1.bytesToInt)(values[3][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for codeHash`);\n            }\n            if (isNotNullIndicator === 1) {\n                codeHash = values[3][1];\n            }\n        }\n        let codeSize = null;\n        if (!Array.isArray(values[4])) {\n            throw new Error('Invalid partial codeSize encoding. Must be array');\n        }\n        else {\n            const isNotNullIndicator = (0, bytes_js_1.bytesToInt)(values[4][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for codeSize`);\n            }\n            if (isNotNullIndicator === 1) {\n                codeSize = (0, bytes_js_1.bytesToInt)(values[4][1]);\n            }\n        }\n        let version = null;\n        if (!Array.isArray(values[5])) {\n            throw new Error('Invalid partial version encoding. Must be array');\n        }\n        else {\n            const isNotNullIndicator = (0, bytes_js_1.bytesToInt)(values[5][0]);\n            if (isNotNullIndicator !== 0 && isNotNullIndicator !== 1) {\n                throw new Error(`Invalid isNullIndicator=${isNotNullIndicator} for version`);\n            }\n            if (isNotNullIndicator === 1) {\n                version = (0, bytes_js_1.bytesToInt)(values[5][1]);\n            }\n        }\n        return this.fromPartialAccountData({ balance, nonce, storageRoot, codeHash, codeSize, version });\n    }\n    static fromValuesArray(values) {\n        const [nonce, balance, storageRoot, codeHash] = values;\n        return new Account((0, bytes_js_1.bytesToBigInt)(nonce), (0, bytes_js_1.bytesToBigInt)(balance), storageRoot, codeHash);\n    }\n    _validate() {\n        if (this._nonce !== null && this._nonce < constants_js_1.BIGINT_0) {\n            throw new Error('nonce must be greater than zero');\n        }\n        if (this._balance !== null && this._balance < constants_js_1.BIGINT_0) {\n            throw new Error('balance must be greater than zero');\n        }\n        if (this._storageRoot !== null && this._storageRoot.length !== 32) {\n            throw new Error('storageRoot must have a length of 32');\n        }\n        if (this._codeHash !== null && this._codeHash.length !== 32) {\n            throw new Error('codeHash must have a length of 32');\n        }\n        if (this._codeSize !== null && this._codeSize < constants_js_1.BIGINT_0) {\n            throw new Error('codeSize must be greater than zero');\n        }\n    }\n    /**\n     * Returns an array of Uint8Arrays of the raw bytes for the account, in order.\n     */\n    raw() {\n        return [\n            (0, bytes_js_1.bigIntToUnpaddedBytes)(this.nonce),\n            (0, bytes_js_1.bigIntToUnpaddedBytes)(this.balance),\n            this.storageRoot,\n            this.codeHash,\n        ];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Uint8Array`.\n     */\n    serialize() {\n        return rlp_1.RLP.encode(this.raw());\n    }\n    serializeWithPartialInfo() {\n        const partialData = [];\n        const zeroEncoded = (0, bytes_js_1.intToUnpaddedBytes)(0);\n        const oneEncoded = (0, bytes_js_1.intToUnpaddedBytes)(1);\n        if (this._nonce !== null) {\n            partialData.push([oneEncoded, (0, bytes_js_1.bigIntToUnpaddedBytes)(this._nonce)]);\n        }\n        else {\n            partialData.push([zeroEncoded]);\n        }\n        if (this._balance !== null) {\n            partialData.push([oneEncoded, (0, bytes_js_1.bigIntToUnpaddedBytes)(this._balance)]);\n        }\n        else {\n            partialData.push([zeroEncoded]);\n        }\n        if (this._storageRoot !== null) {\n            partialData.push([oneEncoded, this._storageRoot]);\n        }\n        else {\n            partialData.push([zeroEncoded]);\n        }\n        if (this._codeHash !== null) {\n            partialData.push([oneEncoded, this._codeHash]);\n        }\n        else {\n            partialData.push([zeroEncoded]);\n        }\n        if (this._codeSize !== null) {\n            partialData.push([oneEncoded, (0, bytes_js_1.intToUnpaddedBytes)(this._codeSize)]);\n        }\n        else {\n            partialData.push([zeroEncoded]);\n        }\n        if (this._version !== null) {\n            partialData.push([oneEncoded, (0, bytes_js_1.intToUnpaddedBytes)(this._version)]);\n        }\n        else {\n            partialData.push([zeroEncoded]);\n        }\n        return rlp_1.RLP.encode(partialData);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n    isContract() {\n        if (this._codeHash === null && this._codeSize === null) {\n            throw Error(`Insufficient data as codeHash=null and codeSize=null`);\n        }\n        return ((this._codeHash !== null && !(0, bytes_js_1.equalsBytes)(this._codeHash, constants_js_1.KECCAK256_NULL)) ||\n            (this._codeSize !== null && this._codeSize !== 0));\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n    isEmpty() {\n        // helpful for determination in partial accounts\n        if ((this._balance !== null && this.balance !== constants_js_1.BIGINT_0) ||\n            (this._nonce === null && this.nonce !== constants_js_1.BIGINT_0) ||\n            (this._codeHash !== null && !(0, bytes_js_1.equalsBytes)(this.codeHash, constants_js_1.KECCAK256_NULL))) {\n            return false;\n        }\n        return (this.balance === constants_js_1.BIGINT_0 &&\n            this.nonce === constants_js_1.BIGINT_0 &&\n            (0, bytes_js_1.equalsBytes)(this.codeHash, constants_js_1.KECCAK256_NULL));\n    }\n}\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nconst isValidAddress = function (hexAddress) {\n    try {\n        (0, helpers_js_1.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\nexports.isValidAddress = isValidAddress;\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nconst toChecksumAddress = function (hexAddress, eip1191ChainId) {\n    (0, helpers_js_1.assertIsHexString)(hexAddress);\n    const address = (0, internal_js_1.stripHexPrefix)(hexAddress).toLowerCase();\n    let prefix = '';\n    if (eip1191ChainId !== undefined) {\n        const chainId = (0, bytes_js_1.bytesToBigInt)((0, bytes_js_1.toBytes)(eip1191ChainId));\n        prefix = chainId.toString() + '0x';\n    }\n    const bytes = (0, bytes_js_1.utf8ToBytes)(prefix + address);\n    const hash = (0, bytes_js_1.bytesToHex)((0, keccak_js_1.keccak256)(bytes)).slice(2);\n    let ret = '';\n    for (let i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return `0x${ret}`;\n};\nexports.toChecksumAddress = toChecksumAddress;\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nconst isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n    return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;\n};\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nconst generateAddress = function (from, nonce) {\n    (0, helpers_js_1.assertIsBytes)(from);\n    (0, helpers_js_1.assertIsBytes)(nonce);\n    if ((0, bytes_js_1.bytesToBigInt)(nonce) === constants_js_1.BIGINT_0) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return (0, keccak_js_1.keccak256)(rlp_1.RLP.encode([from, Uint8Array.from([])])).subarray(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return (0, keccak_js_1.keccak256)(rlp_1.RLP.encode([from, nonce])).subarray(-20);\n};\nexports.generateAddress = generateAddress;\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nconst generateAddress2 = function (from, salt, initCode) {\n    (0, helpers_js_1.assertIsBytes)(from);\n    (0, helpers_js_1.assertIsBytes)(salt);\n    (0, helpers_js_1.assertIsBytes)(initCode);\n    if (from.length !== 20) {\n        throw new Error('Expected from to be of length 20');\n    }\n    if (salt.length !== 32) {\n        throw new Error('Expected salt to be of length 32');\n    }\n    const address = (0, keccak_js_1.keccak256)((0, bytes_js_1.concatBytes)((0, bytes_js_1.hexToBytes)('0xff'), from, salt, (0, keccak_js_1.keccak256)(initCode)));\n    return address.subarray(-20);\n};\nexports.generateAddress2 = generateAddress2;\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nconst isValidPrivate = function (privateKey) {\n    return secp256k1_js_1.secp256k1.utils.isValidPrivateKey(privateKey);\n};\nexports.isValidPrivate = isValidPrivate;\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst isValidPublic = function (publicKey, sanitize = false) {\n    (0, helpers_js_1.assertIsBytes)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        // Automatically checks whether point is on curve\n        try {\n            secp256k1_js_1.secp256k1.ProjectivePoint.fromHex((0, bytes_js_1.concatBytes)(Uint8Array.from([4]), publicKey));\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    if (!sanitize) {\n        return false;\n    }\n    try {\n        secp256k1_js_1.secp256k1.ProjectivePoint.fromHex(publicKey);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\nexports.isValidPublic = isValidPublic;\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst pubToAddress = function (pubKey, sanitize = false) {\n    (0, helpers_js_1.assertIsBytes)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = secp256k1_js_1.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n    }\n    if (pubKey.length !== 64) {\n        throw new Error('Expected pubKey to be of length 64');\n    }\n    // Only take the lower 160bits of the hash\n    return (0, keccak_js_1.keccak256)(pubKey).subarray(-20);\n};\nexports.pubToAddress = pubToAddress;\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToPublic = function (privateKey) {\n    (0, helpers_js_1.assertIsBytes)(privateKey);\n    // skip the type flag and use the X, Y points\n    return secp256k1_js_1.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1);\n};\nexports.privateToPublic = privateToPublic;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToAddress = function (privateKey) {\n    return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));\n};\nexports.privateToAddress = privateToAddress;\n/**\n * Converts a public key to the Ethereum format.\n */\nconst importPublic = function (publicKey) {\n    (0, helpers_js_1.assertIsBytes)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = secp256k1_js_1.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1);\n    }\n    return publicKey;\n};\nexports.importPublic = importPublic;\n/**\n * Returns the zero address.\n */\nconst zeroAddress = function () {\n    const addressLength = 20;\n    const addr = (0, bytes_js_1.zeros)(addressLength);\n    return (0, bytes_js_1.bytesToHex)(addr);\n};\nexports.zeroAddress = zeroAddress;\n/**\n * Checks if a given address is the zero address.\n */\nconst isZeroAddress = function (hexAddress) {\n    try {\n        (0, helpers_js_1.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    const zeroAddr = (0, exports.zeroAddress)();\n    return zeroAddr === hexAddress;\n};\nexports.isZeroAddress = isZeroAddress;\nfunction accountBodyFromSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        storageRoot.length === 0 ? constants_js_1.KECCAK256_RLP : storageRoot,\n        codeHash.length === 0 ? constants_js_1.KECCAK256_NULL : codeHash,\n    ];\n}\nexports.accountBodyFromSlim = accountBodyFromSlim;\nconst emptyUint8Arr = new Uint8Array(0);\nfunction accountBodyToSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0, bytes_js_1.equalsBytes)(storageRoot, constants_js_1.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,\n        (0, bytes_js_1.equalsBytes)(codeHash, constants_js_1.KECCAK256_NULL) ? emptyUint8Arr : codeHash,\n    ];\n}\nexports.accountBodyToSlim = accountBodyToSlim;\n/**\n * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account\n * @param body Array of 4 Uint8Array-like items to represent the account\n * @returns RLP encoded version of the account\n */\nfunction accountBodyToRLP(body, couldBeSlim = true) {\n    const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;\n    return rlp_1.RLP.encode(accountBody);\n}\nexports.accountBodyToRLP = accountBodyToRLP;\n//# sourceMappingURL=account.js.map","import { hasProperty, isObject } from '@metamask/utils';\n\n/**\n * Prior to token detection v2 the data property in tokensChainsCache was an array,\n * in v2 we changes that to an object. In this migration we are converting the data as array to object.\n *\n * @param state - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport default function transformState077For086(\n  state: Record<string, unknown>,\n) {\n  if (\n    hasProperty(state, 'NetworkController') &&\n    isObject(state.NetworkController) &&\n    hasProperty(state.NetworkController, 'provider') &&\n    hasProperty(state.NetworkController, 'providerConfig')\n  ) {\n    delete state.NetworkController.provider;\n  }\n\n  return { ...state };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Address = void 0;\nconst account_js_1 = require(\"./account.js\");\nconst bytes_js_1 = require(\"./bytes.js\");\nconst constants_js_1 = require(\"./constants.js\");\n/**\n * Handling and generating Ethereum addresses\n */\nclass Address {\n    constructor(bytes) {\n        if (bytes.length !== 20) {\n            throw new Error('Invalid address length');\n        }\n        this.bytes = bytes;\n    }\n    /**\n     * Returns the zero address.\n     */\n    static zero() {\n        return new Address((0, bytes_js_1.zeros)(20));\n    }\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */\n    static fromString(str) {\n        if (!(0, account_js_1.isValidAddress)(str)) {\n            throw new Error(`Invalid address input=${str}`);\n        }\n        return new Address((0, bytes_js_1.hexToBytes)(str));\n    }\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */\n    static fromPublicKey(pubKey) {\n        if (!(pubKey instanceof Uint8Array)) {\n            throw new Error('Public key should be Uint8Array');\n        }\n        const bytes = (0, account_js_1.pubToAddress)(pubKey);\n        return new Address(bytes);\n    }\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */\n    static fromPrivateKey(privateKey) {\n        if (!(privateKey instanceof Uint8Array)) {\n            throw new Error('Private key should be Uint8Array');\n        }\n        const bytes = (0, account_js_1.privateToAddress)(privateKey);\n        return new Address(bytes);\n    }\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */\n    static generate(from, nonce) {\n        if (typeof nonce !== 'bigint') {\n            throw new Error('Expected nonce to be a bigint');\n        }\n        return new Address((0, account_js_1.generateAddress)(from.bytes, (0, bytes_js_1.bigIntToBytes)(nonce)));\n    }\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */\n    static generate2(from, salt, initCode) {\n        if (!(salt instanceof Uint8Array)) {\n            throw new Error('Expected salt to be a Uint8Array');\n        }\n        if (!(initCode instanceof Uint8Array)) {\n            throw new Error('Expected initCode to be a Uint8Array');\n        }\n        return new Address((0, account_js_1.generateAddress2)(from.bytes, salt, initCode));\n    }\n    /**\n     * Is address equal to another.\n     */\n    equals(address) {\n        return (0, bytes_js_1.equalsBytes)(this.bytes, address.bytes);\n    }\n    /**\n     * Is address zero.\n     */\n    isZero() {\n        return this.equals(Address.zero());\n    }\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */\n    isPrecompileOrSystemAddress() {\n        const address = (0, bytes_js_1.bytesToBigInt)(this.bytes);\n        const rangeMin = constants_js_1.BIGINT_0;\n        const rangeMax = BigInt('0xffff');\n        return address >= rangeMin && address <= rangeMax;\n    }\n    /**\n     * Returns hex encoding of address.\n     */\n    toString() {\n        return (0, bytes_js_1.bytesToHex)(this.bytes);\n    }\n    /**\n     * Returns a new Uint8Array representation of address.\n     */\n    toBytes() {\n        return new Uint8Array(this.bytes);\n    }\n}\nexports.Address = Address;\n//# sourceMappingURL=address.js.map","\"use strict\";\n/**\n * Ported to Typescript from original implementation below:\n * https://github.com/ahultgren/async-eventemitter -- MIT licensed\n *\n * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed\n * that was contributed to Definitely Typed below:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AsyncEventEmitter = void 0;\nconst events_1 = require(\"events\");\nasync function runInSeries(context, tasks, data) {\n    let error;\n    for await (const task of tasks) {\n        try {\n            if (task.length < 2) {\n                //sync\n                task.call(context, data);\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    task.call(context, data, (error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            resolve();\n                        }\n                    });\n                });\n            }\n        }\n        catch (e) {\n            error = e;\n        }\n    }\n    if (error) {\n        throw error;\n    }\n}\nclass AsyncEventEmitter extends events_1.EventEmitter {\n    emit(event, ...args) {\n        let [data, callback] = args;\n        const self = this;\n        let listeners = self._events[event] ?? [];\n        // Optional data argument\n        if (callback === undefined && typeof data === 'function') {\n            callback = data;\n            data = undefined;\n        }\n        // Special treatment of internal newListener and removeListener events\n        if (event === 'newListener' || event === 'removeListener') {\n            data = {\n                event: data,\n                fn: callback,\n            };\n            callback = undefined;\n        }\n        // A single listener is just a function not an array...\n        listeners = Array.isArray(listeners) ? listeners : [listeners];\n        runInSeries(self, listeners.slice(), data).then(callback).catch(callback);\n        return self.listenerCount(event) > 0;\n    }\n    once(event, listener) {\n        const self = this;\n        let g;\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        // Hack to support set arity\n        if (listener.length >= 2) {\n            g = function (e, next) {\n                self.removeListener(event, g);\n                void listener(e, next);\n            };\n        }\n        else {\n            g = function (e) {\n                self.removeListener(event, g);\n                void listener(e, g);\n            };\n        }\n        self.on(event, g);\n        return self;\n    }\n    first(event, listener) {\n        let listeners = this._events[event] ?? [];\n        // Contract\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [listeners];\n        }\n        listeners.unshift(listener);\n        return this;\n    }\n    before(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener);\n    }\n    after(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener, 'after');\n    }\n    beforeOrAfter(event, target, listener, beforeOrAfter) {\n        let listeners = this._events[event] ?? [];\n        let i;\n        let index;\n        const add = beforeOrAfter === 'after' ? 1 : 0;\n        // Contract\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        if (typeof target !== 'function') {\n            throw new TypeError('target must be a function');\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [listeners];\n        }\n        index = listeners.length;\n        for (i = listeners.length; i--;) {\n            if (listeners[i] === target) {\n                index = i + add;\n                break;\n            }\n        }\n        listeners.splice(index, 0, listener);\n        return this;\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    addListener(event, listener) {\n        return super.addListener(event, listener);\n    }\n    prependListener(event, listener) {\n        return super.prependListener(event, listener);\n    }\n    prependOnceListener(event, listener) {\n        return super.prependOnceListener(event, listener);\n    }\n    removeAllListeners(event) {\n        return super.removeAllListeners(event);\n    }\n    removeListener(event, listener) {\n        return super.removeListener(event, listener);\n    }\n    eventNames() {\n        return super.eventNames();\n    }\n    listeners(event) {\n        return super.listeners(event);\n    }\n    listenerCount(event) {\n        return super.listenerCount(event);\n    }\n    getMaxListeners() {\n        return super.getMaxListeners();\n    }\n    setMaxListeners(maxListeners) {\n        return super.setMaxListeners(maxListeners);\n    }\n}\nexports.AsyncEventEmitter = AsyncEventEmitter;\n//# sourceMappingURL=asyncEventEmitter.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.commitmentsToVersionedHashes = exports.computeVersionedHash = exports.blobsToProofs = exports.blobsToCommitments = exports.getBlobs = void 0;\nconst sha256_js_1 = require(\"ethereum-cryptography/sha256.js\");\nconst bytes_js_1 = require(\"./bytes.js\");\n/**\n * These utilities for constructing blobs are borrowed from https://github.com/Inphi/eip4844-interop.git\n */\nconst BYTES_PER_FIELD_ELEMENT = 32;\nconst FIELD_ELEMENTS_PER_BLOB = 4096;\nconst USEFUL_BYTES_PER_BLOB = 32 * FIELD_ELEMENTS_PER_BLOB;\nconst MAX_BLOBS_PER_TX = 2;\nconst MAX_USEFUL_BYTES_PER_TX = USEFUL_BYTES_PER_BLOB * MAX_BLOBS_PER_TX - 1;\nconst BLOB_SIZE = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB;\nfunction get_padded(data, blobs_len) {\n    const pdata = new Uint8Array(blobs_len * USEFUL_BYTES_PER_BLOB).fill(0);\n    pdata.set(data);\n    pdata[data.byteLength] = 0x80;\n    return pdata;\n}\nfunction get_blob(data) {\n    const blob = new Uint8Array(BLOB_SIZE);\n    for (let i = 0; i < FIELD_ELEMENTS_PER_BLOB; i++) {\n        const chunk = new Uint8Array(32);\n        chunk.set(data.subarray(i * 31, (i + 1) * 31), 0);\n        blob.set(chunk, i * 32);\n    }\n    return blob;\n}\nconst getBlobs = (input) => {\n    const data = (0, bytes_js_1.utf8ToBytes)(input);\n    const len = data.byteLength;\n    if (len === 0) {\n        throw Error('invalid blob data');\n    }\n    if (len > MAX_USEFUL_BYTES_PER_TX) {\n        throw Error('blob data is too large');\n    }\n    const blobs_len = Math.ceil(len / USEFUL_BYTES_PER_BLOB);\n    const pdata = get_padded(data, blobs_len);\n    const blobs = [];\n    for (let i = 0; i < blobs_len; i++) {\n        const chunk = pdata.subarray(i * USEFUL_BYTES_PER_BLOB, (i + 1) * USEFUL_BYTES_PER_BLOB);\n        const blob = get_blob(chunk);\n        blobs.push(blob);\n    }\n    return blobs;\n};\nexports.getBlobs = getBlobs;\nconst blobsToCommitments = (kzg, blobs) => {\n    const commitments = [];\n    for (const blob of blobs) {\n        commitments.push(kzg.blobToKzgCommitment(blob));\n    }\n    return commitments;\n};\nexports.blobsToCommitments = blobsToCommitments;\nconst blobsToProofs = (kzg, blobs, commitments) => {\n    const proofs = blobs.map((blob, ctx) => kzg.computeBlobKzgProof(blob, commitments[ctx]));\n    return proofs;\n};\nexports.blobsToProofs = blobsToProofs;\n/**\n * Converts a vector commitment for a given data blob to its versioned hash.  For 4844, this version\n * number will be 0x01 for KZG vector commitments but could be different if future vector commitment\n * types are introduced\n * @param commitment a vector commitment to a blob\n * @param blobCommitmentVersion the version number corresponding to the type of vector commitment\n * @returns a versioned hash corresponding to a given blob vector commitment\n */\nconst computeVersionedHash = (commitment, blobCommitmentVersion) => {\n    const computedVersionedHash = new Uint8Array(32);\n    computedVersionedHash.set([blobCommitmentVersion], 0);\n    computedVersionedHash.set((0, sha256_js_1.sha256)(commitment).subarray(1), 1);\n    return computedVersionedHash;\n};\nexports.computeVersionedHash = computeVersionedHash;\n/**\n * Generate an array of versioned hashes from corresponding kzg commitments\n * @param commitments array of kzg commitments\n * @returns array of versioned hashes\n * Note: assumes KZG commitments (version 1 version hashes)\n */\nconst commitmentsToVersionedHashes = (commitments) => {\n    const hashes = [];\n    for (const commitment of commitments) {\n        hashes.push((0, exports.computeVersionedHash)(commitment, 0x01));\n    }\n    return hashes;\n};\nexports.commitmentsToVersionedHashes = commitmentsToVersionedHashes;\n//# sourceMappingURL=blobs.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexToBigInt = exports.utf8ToBytes = exports.equalsBytes = exports.bytesToUtf8 = exports.bigInt64ToBytes = exports.int32ToBytes = exports.bytesToBigInt64 = exports.bytesToInt32 = exports.concatBytes = exports.randomBytes = exports.compareBytes = exports.intToUnpaddedBytes = exports.bigIntToAddressBytes = exports.bigIntToUnpaddedBytes = exports.bigIntMin = exports.bigIntMax = exports.bigIntToHex = exports.validateNoLeadingZeroes = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.toBytes = exports.unpadHex = exports.unpadArray = exports.unpadBytes = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.bigIntToBytes = exports.intToBytes = exports.intToHex = exports.hexToBytes = exports.bytesToInt = exports.bytesToBigInt = exports.bytesToHex = exports.unprefixedHexToBytes = exports.bytesToUnprefixedHex = void 0;\nconst random_js_1 = require(\"ethereum-cryptography/random.js\");\n// eslint-disable-next-line no-restricted-imports\nconst utils_js_1 = require(\"ethereum-cryptography/utils.js\");\nconst helpers_js_1 = require(\"./helpers.js\");\nconst internal_js_1 = require(\"./internal.js\");\nconst BIGINT_0 = BigInt(0);\n/**\n * @deprecated\n */\nexports.bytesToUnprefixedHex = utils_js_1.bytesToHex;\n// hexToBytes cache\nconst hexToBytesMapFirstKey = {};\nconst hexToBytesMapSecondKey = {};\nfor (let i = 0; i < 16; i++) {\n    const vSecondKey = i;\n    const vFirstKey = i * 16;\n    const key = i.toString(16).toLowerCase();\n    hexToBytesMapSecondKey[key] = vSecondKey;\n    hexToBytesMapSecondKey[key.toUpperCase()] = vSecondKey;\n    hexToBytesMapFirstKey[key] = vFirstKey;\n    hexToBytesMapFirstKey[key.toUpperCase()] = vFirstKey;\n}\n/**\n * NOTE: only use this function if the string is even, and only consists of hex characters\n * If this is not the case, this function could return weird results\n * @deprecated\n */\nfunction _unprefixedHexToBytes(hex) {\n    const byteLen = hex.length;\n    const bytes = new Uint8Array(byteLen / 2);\n    for (let i = 0; i < byteLen; i += 2) {\n        bytes[i / 2] = hexToBytesMapFirstKey[hex[i]] + hexToBytesMapSecondKey[hex[i + 1]];\n    }\n    return bytes;\n}\n/**\n * @deprecated\n */\nconst unprefixedHexToBytes = (inp) => {\n    if (inp.slice(0, 2) === '0x') {\n        throw new Error('hex string is prefixed with 0x, should be unprefixed');\n    }\n    else {\n        return _unprefixedHexToBytes((0, internal_js_1.padToEven)(inp));\n    }\n};\nexports.unprefixedHexToBytes = unprefixedHexToBytes;\n/****************  Borrowed from @chainsafe/ssz */\n// Caching this info costs about ~1000 bytes and speeds up toHexString() by x6\nconst hexByByte = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nconst bytesToHex = (bytes) => {\n    let hex = `0x`;\n    if (bytes === undefined || bytes.length === 0)\n        return hex;\n    for (const byte of bytes) {\n        hex = `${hex}${hexByByte[byte]}`;\n    }\n    return hex;\n};\nexports.bytesToHex = bytesToHex;\n// BigInt cache for the numbers 0 - 256*256-1 (two-byte bytes)\nconst BIGINT_CACHE = [];\nfor (let i = 0; i <= 256 * 256 - 1; i++) {\n    BIGINT_CACHE[i] = BigInt(i);\n}\n/**\n * Converts a {@link Uint8Array} to a {@link bigint}\n * @param {Uint8Array} bytes the bytes to convert\n * @returns {bigint}\n */\nconst bytesToBigInt = (bytes, littleEndian = false) => {\n    if (littleEndian) {\n        bytes.reverse();\n    }\n    const hex = (0, exports.bytesToHex)(bytes);\n    if (hex === '0x') {\n        return BIGINT_0;\n    }\n    if (hex.length === 4) {\n        // If the byte length is 1 (this is faster than checking `bytes.length === 1`)\n        return BIGINT_CACHE[bytes[0]];\n    }\n    if (hex.length === 6) {\n        return BIGINT_CACHE[bytes[0] * 256 + bytes[1]];\n    }\n    return BigInt(hex);\n};\nexports.bytesToBigInt = bytesToBigInt;\n/**\n * Converts a {@link Uint8Array} to a {@link number}.\n * @param {Uint8Array} bytes the bytes to convert\n * @return  {number}\n * @throws If the input number exceeds 53 bits.\n */\nconst bytesToInt = (bytes) => {\n    const res = Number((0, exports.bytesToBigInt)(bytes));\n    if (!Number.isSafeInteger(res))\n        throw new Error('Number exceeds 53 bits');\n    return res;\n};\nexports.bytesToInt = bytesToInt;\n// TODO: Restrict the input type to only PrefixedHexString\n/**\n * Converts a {@link PrefixedHexString} to a {@link Uint8Array}\n * @param {PrefixedHexString | string} hex The 0x-prefixed hex string to convert\n * @returns {Uint8Array} The converted bytes\n * @throws If the input is not a valid 0x-prefixed hex string\n */\nconst hexToBytes = (hex) => {\n    if (typeof hex !== 'string') {\n        throw new Error(`hex argument type ${typeof hex} must be of type string`);\n    }\n    if (!/^0x[0-9a-fA-F]*$/.test(hex)) {\n        throw new Error(`Input must be a 0x-prefixed hexadecimal string, got ${hex}`);\n    }\n    const unprefixedHex = hex.slice(2);\n    return _unprefixedHexToBytes(unprefixedHex.length % 2 === 0 ? unprefixedHex : (0, internal_js_1.padToEven)(unprefixedHex));\n};\nexports.hexToBytes = hexToBytes;\n/******************************************/\n/**\n * Converts a {@link number} into a {@link PrefixedHexString}\n * @param {number} i\n * @return {PrefixedHexString}\n */\nconst intToHex = (i) => {\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\nexports.intToHex = intToHex;\n/**\n * Converts an {@link number} to a {@link Uint8Array}\n * @param {Number} i\n * @return {Uint8Array}\n */\nconst intToBytes = (i) => {\n    const hex = (0, exports.intToHex)(i);\n    return (0, exports.hexToBytes)(hex);\n};\nexports.intToBytes = intToBytes;\n/**\n * Converts a {@link bigint} to a {@link Uint8Array}\n *  * @param {bigint} num the bigint to convert\n * @returns {Uint8Array}\n */\nconst bigIntToBytes = (num, littleEndian = false) => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    const bytes = (0, exports.toBytes)(`0x${(0, internal_js_1.padToEven)(num.toString(16))}`);\n    return littleEndian ? bytes.reverse() : bytes;\n};\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * Returns a Uint8Array filled with 0s.\n * @param {number} bytes the number of bytes of the Uint8Array\n * @return {Uint8Array}\n */\nconst zeros = (bytes) => {\n    return new Uint8Array(bytes);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Uint8Array` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @param {boolean} right whether to start padding form the left or right\n * @return {Uint8Array}\n */\nconst setLength = (msg, length, right) => {\n    if (right) {\n        if (msg.length < length) {\n            return new Uint8Array([...msg, ...(0, exports.zeros)(length - msg.length)]);\n        }\n        return msg.subarray(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            return new Uint8Array([...(0, exports.zeros)(length - msg.length), ...msg]);\n        }\n        return msg.subarray(-length);\n    }\n};\n/**\n * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */\nconst setLengthLeft = (msg, length) => {\n    (0, helpers_js_1.assertIsBytes)(msg);\n    return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Uint8Array` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param {Uint8Array} msg the value to pad\n * @param {number} length the number of bytes the output should be\n * @return {Uint8Array}\n */\nconst setLengthRight = (msg, length) => {\n    (0, helpers_js_1.assertIsBytes)(msg);\n    return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Uint8Array`, `number[]` or `string`.\n * @param {Uint8Array|number[]|string} a\n * @return {Uint8Array|number[]|string}\n */\nconst stripZeros = (a) => {\n    let first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Uint8Array`.\n * @param {Uint8Array} a\n * @return {Uint8Array}\n */\nconst unpadBytes = (a) => {\n    (0, helpers_js_1.assertIsBytes)(a);\n    return stripZeros(a);\n};\nexports.unpadBytes = unpadBytes;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param  {number[]} a\n * @return {number[]}\n */\nconst unpadArray = (a) => {\n    (0, helpers_js_1.assertIsArray)(a);\n    return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n// TODO: Restrict the input type to only PrefixedHexString\n/**\n * Trims leading zeros from a `PrefixedHexString`.\n * @param {PrefixedHexString | string} a\n * @return {PrefixedHexString}\n */\nconst unpadHex = (a) => {\n    (0, helpers_js_1.assertIsHexString)(a);\n    return `0x${stripZeros((0, internal_js_1.stripHexPrefix)(a))}`;\n};\nexports.unpadHex = unpadHex;\n/**\n * Attempts to turn a value into a `Uint8Array`.\n * Inputs supported: `Buffer`, `Uint8Array`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBytes()` method.\n * @param {ToBytesInputTypes} v the value\n * @return {Uint8Array}\n */\nconst toBytes = (v) => {\n    if (v === null || v === undefined) {\n        return new Uint8Array();\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Uint8Array.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!(0, internal_js_1.isHexString)(v)) {\n            throw new Error(`Cannot convert string to Uint8Array. toBytes only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return (0, exports.hexToBytes)(v);\n    }\n    if (typeof v === 'number') {\n        return (0, exports.intToBytes)(v);\n    }\n    if (typeof v === 'bigint') {\n        if (v < BIGINT_0) {\n            throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2)\n            n = '0' + n;\n        return (0, exports.unprefixedHexToBytes)(n);\n    }\n    if (v.toBytes !== undefined) {\n        // converts a `TransformableToBytes` object to a Uint8Array\n        return v.toBytes();\n    }\n    throw new Error('invalid type');\n};\nexports.toBytes = toBytes;\n/**\n * Interprets a `Uint8Array` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param {Uint8Array} num Signed integer value\n * @returns {bigint}\n */\nconst fromSigned = (num) => {\n    return BigInt.asIntN(256, (0, exports.bytesToBigInt)(num));\n};\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Uint8Array`. Assumes 256-bit numbers.\n * @param {bigint} num\n * @returns {Uint8Array}\n */\nconst toUnsigned = (num) => {\n    return (0, exports.bigIntToBytes)(BigInt.asUintN(256, num));\n};\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `string` if it does not already start with \"0x\".\n * @param {string} str\n * @return {PrefixedHexString}\n */\nconst addHexPrefix = (str) => {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return (0, internal_js_1.isHexString)(str) ? str : `0x${str}`;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\n * Shortens a string  or Uint8Array's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n * @param {Uint8Array | string} bytes\n * @param {number} maxLength\n * @return {string}\n */\nconst short = (bytes, maxLength = 50) => {\n    const byteStr = bytes instanceof Uint8Array ? (0, exports.bytesToHex)(bytes) : bytes;\n    const len = byteStr.slice(0, 2) === '0x' ? maxLength + 2 : maxLength;\n    if (byteStr.length <= len) {\n        return byteStr;\n    }\n    return byteStr.slice(0, len) + '…';\n};\nexports.short = short;\n/**\n * Checks provided Uint8Array for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Uint8Array values\n * @throws if any provided value is found to have leading zero bytes\n */\nconst validateNoLeadingZeroes = (values) => {\n    for (const [k, v] of Object.entries(values)) {\n        if (v !== undefined && v.length > 0 && v[0] === 0) {\n            throw new Error(`${k} cannot have leading zeroes, received: ${(0, exports.bytesToHex)(v)}`);\n        }\n    }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n * @param {bigint} num the bigint to convert\n * @returns {PrefixedHexString}\n */\nconst bigIntToHex = (num) => {\n    return `0x${num.toString(16)}`;\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Calculates max bigint from an array of bigints\n * @param args array of bigints\n */\nconst bigIntMax = (...args) => args.reduce((m, e) => (e > m ? e : m));\nexports.bigIntMax = bigIntMax;\n/**\n * Calculates min BigInt from an array of BigInts\n * @param args array of bigints\n */\nconst bigIntMin = (...args) => args.reduce((m, e) => (e < m ? e : m));\nexports.bigIntMin = bigIntMin;\n/**\n * Convert value from bigint to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {bigint} value the bigint to convert\n * @returns {Uint8Array}\n */\nconst bigIntToUnpaddedBytes = (value) => {\n    return (0, exports.unpadBytes)((0, exports.bigIntToBytes)(value));\n};\nexports.bigIntToUnpaddedBytes = bigIntToUnpaddedBytes;\nconst bigIntToAddressBytes = (value, strict = true) => {\n    const addressBytes = (0, exports.bigIntToBytes)(value);\n    if (strict && addressBytes.length > 20) {\n        throw Error(`Invalid address bytes length=${addressBytes.length} strict=${strict}`);\n    }\n    // setLength already slices if more than requisite length\n    return (0, exports.setLengthLeft)(addressBytes, 20);\n};\nexports.bigIntToAddressBytes = bigIntToAddressBytes;\n/**\n * Convert value from number to an unpadded Uint8Array\n * (useful for RLP transport)\n * @param {number} value the bigint to convert\n * @returns {Uint8Array}\n */\nconst intToUnpaddedBytes = (value) => {\n    return (0, exports.unpadBytes)((0, exports.intToBytes)(value));\n};\nexports.intToUnpaddedBytes = intToUnpaddedBytes;\n/**\n * Compares two Uint8Arrays and returns a number indicating their order in a sorted array.\n *\n * @param {Uint8Array} value1 - The first Uint8Array to compare.\n * @param {Uint8Array} value2 - The second Uint8Array to compare.\n * @returns {number} A positive number if value1 is larger than value2,\n *                   A negative number if value1 is smaller than value2,\n *                   or 0 if value1 and value2 are equal.\n */\nconst compareBytes = (value1, value2) => {\n    const bigIntValue1 = (0, exports.bytesToBigInt)(value1);\n    const bigIntValue2 = (0, exports.bytesToBigInt)(value2);\n    return bigIntValue1 > bigIntValue2 ? 1 : bigIntValue1 < bigIntValue2 ? -1 : 0;\n};\nexports.compareBytes = compareBytes;\n/**\n * Generates a Uint8Array of random bytes of specified length.\n *\n * @param {number} length - The length of the Uint8Array.\n * @returns {Uint8Array} A Uint8Array of random bytes of specified length.\n */\nconst randomBytes = (length) => {\n    return (0, random_js_1.getRandomBytesSync)(length);\n};\nexports.randomBytes = randomBytes;\n/**\n * This mirrors the functionality of the `ethereum-cryptography` export except\n * it skips the check to validate that every element of `arrays` is indead a `uint8Array`\n * Can give small performance gains on large arrays\n * @param {Uint8Array[]} arrays an array of Uint8Arrays\n * @returns {Uint8Array} one Uint8Array with all the elements of the original set\n * works like `Buffer.concat`\n */\nconst concatBytes = (...arrays) => {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n};\nexports.concatBytes = concatBytes;\n/**\n * @notice Convert a Uint8Array to a 32-bit integer\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 32-bit integer.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {number} The 32-bit integer read from the input Uint8Array.\n */\nfunction bytesToInt32(bytes, littleEndian = false) {\n    if (bytes.length < 4) {\n        bytes = setLength(bytes, 4, littleEndian);\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getUint32(0, littleEndian);\n}\nexports.bytesToInt32 = bytesToInt32;\n/**\n * @notice Convert a Uint8Array to a 64-bit bigint\n * @param {Uint8Array} bytes The input Uint8Array from which to read the 64-bit bigint.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {bigint} The 64-bit bigint read from the input Uint8Array.\n */\nfunction bytesToBigInt64(bytes, littleEndian = false) {\n    if (bytes.length < 8) {\n        bytes = setLength(bytes, 8, littleEndian);\n    }\n    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    return dataView.getBigUint64(0, littleEndian);\n}\nexports.bytesToBigInt64 = bytesToBigInt64;\n/**\n * @notice Convert a 32-bit integer to a Uint8Array.\n * @param {number} value The 32-bit integer to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 4 containing the integer.\n */\nfunction int32ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(4);\n    const dataView = new DataView(buffer);\n    dataView.setUint32(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\nexports.int32ToBytes = int32ToBytes;\n/**\n * @notice Convert a 64-bit bigint to a Uint8Array.\n * @param {bigint} value The 64-bit bigint to convert.\n * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.\n * @return {Uint8Array} A Uint8Array of length 8 containing the bigint.\n */\nfunction bigInt64ToBytes(value, littleEndian = false) {\n    const buffer = new ArrayBuffer(8);\n    const dataView = new DataView(buffer);\n    dataView.setBigUint64(0, value, littleEndian);\n    return new Uint8Array(buffer);\n}\nexports.bigInt64ToBytes = bigInt64ToBytes;\n// eslint-disable-next-line no-restricted-imports\nvar utils_js_2 = require(\"ethereum-cryptography/utils.js\");\nObject.defineProperty(exports, \"bytesToUtf8\", { enumerable: true, get: function () { return utils_js_2.bytesToUtf8; } });\nObject.defineProperty(exports, \"equalsBytes\", { enumerable: true, get: function () { return utils_js_2.equalsBytes; } });\nObject.defineProperty(exports, \"utf8ToBytes\", { enumerable: true, get: function () { return utils_js_2.utf8ToBytes; } });\n// TODO: Restrict the input type to only PrefixedHexString\nfunction hexToBigInt(input) {\n    return (0, exports.bytesToBigInt)((0, exports.hexToBytes)((0, internal_js_1.isHexString)(input) ? input : `0x${input}`));\n}\nexports.hexToBigInt = hexToBigInt;\n//# sourceMappingURL=bytes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BIGINT_2EXP256 = exports.BIGINT_2EXP224 = exports.BIGINT_2EXP160 = exports.BIGINT_2EXP96 = exports.BIGINT_224 = exports.BIGINT_160 = exports.BIGINT_100 = exports.BIGINT_96 = exports.BIGINT_256 = exports.BIGINT_255 = exports.BIGINT_128 = exports.BIGINT_64 = exports.BIGINT_32 = exports.BIGINT_31 = exports.BIGINT_28 = exports.BIGINT_27 = exports.BIGINT_8 = exports.BIGINT_7 = exports.BIGINT_3 = exports.BIGINT_2 = exports.BIGINT_1 = exports.BIGINT_0 = exports.BIGINT_NEG1 = exports.RIPEMD160_ADDRESS_STRING = exports.MAX_WITHDRAWALS_PER_PAYLOAD = exports.RLP_EMPTY_STRING = exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.SECP256K1_ORDER_DIV_2 = exports.SECP256K1_ORDER = exports.MAX_INTEGER_BIGINT = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;\nconst secp256k1_js_1 = require(\"ethereum-cryptography/secp256k1.js\");\nconst bytes_js_1 = require(\"./bytes.js\");\n/**\n * 2^64-1\n */\nexports.MAX_UINT64 = BigInt('0xffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nexports.MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */\nexports.MAX_INTEGER_BIGINT = BigInt('115792089237316195423570985008687907853269984665640564039457584007913129639935');\nexports.SECP256K1_ORDER = secp256k1_js_1.secp256k1.CURVE.n;\nexports.SECP256K1_ORDER_DIV_2 = secp256k1_js_1.secp256k1.CURVE.n / BigInt(2);\n/**\n * 2^256\n */\nexports.TWO_POW256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL = (0, bytes_js_1.hexToBytes)(exports.KECCAK256_NULL_S);\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY_S = '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY = (0, bytes_js_1.hexToBytes)(exports.KECCAK256_RLP_ARRAY_S);\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP_S = '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP = (0, bytes_js_1.hexToBytes)(exports.KECCAK256_RLP_S);\n/**\n *  RLP encoded empty string\n */\nexports.RLP_EMPTY_STRING = Uint8Array.from([0x80]);\nexports.MAX_WITHDRAWALS_PER_PAYLOAD = 16;\nexports.RIPEMD160_ADDRESS_STRING = '0000000000000000000000000000000000000003';\n/**\n * BigInt constants\n */\nexports.BIGINT_NEG1 = BigInt(-1);\nexports.BIGINT_0 = BigInt(0);\nexports.BIGINT_1 = BigInt(1);\nexports.BIGINT_2 = BigInt(2);\nexports.BIGINT_3 = BigInt(3);\nexports.BIGINT_7 = BigInt(7);\nexports.BIGINT_8 = BigInt(8);\nexports.BIGINT_27 = BigInt(27);\nexports.BIGINT_28 = BigInt(28);\nexports.BIGINT_31 = BigInt(31);\nexports.BIGINT_32 = BigInt(32);\nexports.BIGINT_64 = BigInt(64);\nexports.BIGINT_128 = BigInt(128);\nexports.BIGINT_255 = BigInt(255);\nexports.BIGINT_256 = BigInt(256);\nexports.BIGINT_96 = BigInt(96);\nexports.BIGINT_100 = BigInt(100);\nexports.BIGINT_160 = BigInt(160);\nexports.BIGINT_224 = BigInt(224);\nexports.BIGINT_2EXP96 = BigInt(79228162514264337593543950336);\nexports.BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976);\nexports.BIGINT_2EXP224 = BigInt(26959946667150639794667015087019630673637144422540572481103610249216);\nexports.BIGINT_2EXP256 = exports.BIGINT_2 ** exports.BIGINT_256;\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueEncoding = exports.KeyEncoding = void 0;\nvar KeyEncoding;\n(function (KeyEncoding) {\n    KeyEncoding[\"String\"] = \"string\";\n    KeyEncoding[\"Bytes\"] = \"view\";\n    KeyEncoding[\"Number\"] = \"number\";\n})(KeyEncoding = exports.KeyEncoding || (exports.KeyEncoding = {}));\nvar ValueEncoding;\n(function (ValueEncoding) {\n    ValueEncoding[\"String\"] = \"string\";\n    ValueEncoding[\"Bytes\"] = \"view\";\n    ValueEncoding[\"JSON\"] = \"json\";\n})(ValueEncoding = exports.ValueEncoding || (exports.ValueEncoding = {}));\n//# sourceMappingURL=db.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseGethGenesisState = void 0;\nconst bytes_js_1 = require(\"./bytes.js\");\nconst internal_js_1 = require(\"./internal.js\");\n/**\n * Parses the geth genesis state into Blockchain {@link GenesisState}\n * @param json representing the `alloc` key in a Geth genesis file\n */\nfunction parseGethGenesisState(json) {\n    const state = {};\n    for (const address of Object.keys(json.alloc)) {\n        let { balance, code, storage, nonce } = json.alloc[address];\n        // create a map with lowercase for easy lookups\n        const prefixedAddress = (0, bytes_js_1.addHexPrefix)(address.toLowerCase());\n        balance = (0, internal_js_1.isHexString)(balance) ? balance : (0, bytes_js_1.bigIntToHex)(BigInt(balance));\n        code = code !== undefined ? (0, bytes_js_1.addHexPrefix)(code) : undefined;\n        storage = storage !== undefined ? Object.entries(storage) : undefined;\n        nonce = nonce !== undefined ? (0, bytes_js_1.addHexPrefix)(nonce) : undefined;\n        state[prefixedAddress] = [balance, code, storage, nonce];\n    }\n    return state;\n}\nexports.parseGethGenesisState = parseGethGenesisState;\n//# sourceMappingURL=genesis.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertIsString = exports.assertIsArray = exports.assertIsBytes = exports.assertIsHexString = void 0;\nconst internal_js_1 = require(\"./internal.js\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nconst assertIsHexString = function (input) {\n    if (!(0, internal_js_1.isHexString)(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nconst assertIsBytes = function (input) {\n    if (!(input instanceof Uint8Array)) {\n        const msg = `This method only supports Uint8Array but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsBytes = assertIsBytes;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nconst assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nconst assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsString = assertIsString;\n//# sourceMappingURL=helpers.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toAscii = exports.stripHexPrefix = exports.padToEven = exports.isHexString = exports.getKeys = exports.getBinarySize = exports.fromUtf8 = exports.fromAscii = exports.arrayContainsArray = void 0;\n/**\n * Constants\n */\n__exportStar(require(\"./constants.js\"), exports);\n/**\n * Units helpers\n */\n__exportStar(require(\"./units.js\"), exports);\n/**\n * Account class and helper functions\n */\n__exportStar(require(\"./account.js\"), exports);\n/**\n * Address type\n */\n__exportStar(require(\"./address.js\"), exports);\n/**\n * DB type\n */\n__exportStar(require(\"./db.js\"), exports);\n/**\n * Withdrawal type\n */\n__exportStar(require(\"./withdrawal.js\"), exports);\n/**\n * ECDSA signature\n */\n__exportStar(require(\"./signature.js\"), exports);\n/**\n * Utilities for manipulating bytes, Uint8Arrays, etc.\n */\n__exportStar(require(\"./bytes.js\"), exports);\n/**\n * Helpful TypeScript types\n */\n__exportStar(require(\"./types.js\"), exports);\n/**\n * Export ethjs-util methods\n */\n__exportStar(require(\"./asyncEventEmitter.js\"), exports);\n__exportStar(require(\"./blobs.js\"), exports);\n__exportStar(require(\"./genesis.js\"), exports);\nvar internal_js_1 = require(\"./internal.js\");\nObject.defineProperty(exports, \"arrayContainsArray\", { enumerable: true, get: function () { return internal_js_1.arrayContainsArray; } });\nObject.defineProperty(exports, \"fromAscii\", { enumerable: true, get: function () { return internal_js_1.fromAscii; } });\nObject.defineProperty(exports, \"fromUtf8\", { enumerable: true, get: function () { return internal_js_1.fromUtf8; } });\nObject.defineProperty(exports, \"getBinarySize\", { enumerable: true, get: function () { return internal_js_1.getBinarySize; } });\nObject.defineProperty(exports, \"getKeys\", { enumerable: true, get: function () { return internal_js_1.getKeys; } });\nObject.defineProperty(exports, \"isHexString\", { enumerable: true, get: function () { return internal_js_1.isHexString; } });\nObject.defineProperty(exports, \"padToEven\", { enumerable: true, get: function () { return internal_js_1.padToEven; } });\nObject.defineProperty(exports, \"stripHexPrefix\", { enumerable: true, get: function () { return internal_js_1.stripHexPrefix; } });\nObject.defineProperty(exports, \"toAscii\", { enumerable: true, get: function () { return internal_js_1.toAscii; } });\n__exportStar(require(\"./kzg.js\"), exports);\n__exportStar(require(\"./lock.js\"), exports);\n__exportStar(require(\"./mapDB.js\"), exports);\n__exportStar(require(\"./provider.js\"), exports);\n__exportStar(require(\"./requests.js\"), exports);\n__exportStar(require(\"./verkle.js\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexString = void 0;\nconst bytes_js_1 = require(\"./bytes.js\");\n/**\n * Returns a boolean on whether or not the the input starts with '0x' and matches the optional length\n * @param {string} value the string input value\n * @param {number|undefined} length the optional length of the hex string in bytes\n * @returns {boolean} Whether or not the string is a valid PrefixedHexString matching the optional length\n */\nfunction isHexString(value, length) {\n    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))\n        return false;\n    if (typeof length !== 'undefined' && length > 0 && value.length !== 2 + 2 * length)\n        return false;\n    return true;\n}\nexports.isHexString = isHexString;\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nconst stripHexPrefix = (str) => {\n    if (typeof str !== 'string')\n        throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n    return isHexString(str) ? str.slice(2) : str;\n};\nexports.stripHexPrefix = stripHexPrefix;\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nfunction padToEven(value) {\n    let a = value;\n    if (typeof a !== 'string') {\n        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n    }\n    if (a.length % 2)\n        a = `0${a}`;\n    return a;\n}\nexports.padToEven = padToEven;\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */\nfunction getBinarySize(str) {\n    if (typeof str !== 'string') {\n        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);\n    }\n    return (0, bytes_js_1.utf8ToBytes)(str).byteLength;\n}\nexports.getBinarySize = getBinarySize;\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */\nfunction arrayContainsArray(superset, subset, some) {\n    if (Array.isArray(superset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);\n    }\n    if (Array.isArray(subset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);\n    }\n    return subset[some === true ? 'some' : 'every']((value) => superset.indexOf(value) >= 0);\n}\nexports.arrayContainsArray = arrayContainsArray;\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */\nfunction toAscii(hex) {\n    let str = '';\n    let i = 0;\n    const l = hex.length;\n    if (hex.substring(0, 2) === '0x')\n        i = 2;\n    for (; i < l; i += 2) {\n        const code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n    return str;\n}\nexports.toAscii = toAscii;\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string.\n * Strips leading and trailing 0's.\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n    const str = (0, bytes_js_1.utf8ToBytes)(stringValue);\n    return `0x${padToEven((0, bytes_js_1.bytesToUnprefixedHex)(str)).replace(/^0+|0+$/g, '')}`;\n}\nexports.fromUtf8 = fromUtf8;\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */\nfunction fromAscii(stringValue) {\n    let hex = '';\n    for (let i = 0; i < stringValue.length; i++) {\n        const code = stringValue.charCodeAt(i);\n        const n = code.toString(16);\n        hex += n.length < 2 ? `0${n}` : n;\n    }\n    return `0x${hex}`;\n}\nexports.fromAscii = fromAscii;\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n    if (!Array.isArray(params)) {\n        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);\n    }\n    if (typeof key !== 'string') {\n        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);\n    }\n    const result = [];\n    for (let i = 0; i < params.length; i++) {\n        let value = params[i][key];\n        if (allowEmpty === true && !value) {\n            value = '';\n        }\n        else if (typeof value !== 'string') {\n            throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);\n        }\n        result.push(value);\n    }\n    return result;\n}\nexports.getKeys = getKeys;\n//# sourceMappingURL=internal.js.map","import {\n  BaseController,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport log from 'loglevel';\nimport { FirstTimeFlowType } from '../../../shared/constants/onboarding';\n\n// Unique name for the controller\nconst controllerName = 'OnboardingController';\n\n/**\n * The state of the {@link OnboardingController}\n */\nexport type OnboardingControllerState = {\n  seedPhraseBackedUp: boolean | null;\n  firstTimeFlowType: FirstTimeFlowType | null;\n  completedOnboarding: boolean;\n  onboardingTabs?: Record<string, string>;\n};\n\n/**\n * Function to get default state of the {@link OnboardingController}.\n */\nexport const getDefaultOnboardingControllerState = () => ({\n  seedPhraseBackedUp: null,\n  firstTimeFlowType: null,\n  completedOnboarding: false,\n});\n\nconst defaultTransientState = {\n  onboardingTabs: {},\n} satisfies Pick<OnboardingControllerState, 'onboardingTabs'>;\n\n/**\n * {@link OnboardingController}'s metadata.\n *\n * This allows us to choose if fields of the state should be persisted or not\n * using the `persist` flag; and if they can be sent to Sentry or not, using\n * the `anonymous` flag.\n */\nconst controllerMetadata = {\n  seedPhraseBackedUp: {\n    persist: true,\n    anonymous: true,\n  },\n  firstTimeFlowType: {\n    persist: true,\n    anonymous: true,\n  },\n  completedOnboarding: {\n    persist: true,\n    anonymous: true,\n  },\n  onboardingTabs: {\n    persist: false,\n    anonymous: false,\n  },\n};\n\n/**\n * Returns the state of the {@link OnboardingController}.\n */\nexport type OnboardingControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  OnboardingControllerState\n>;\n\n/**\n * Actions exposed by the {@link OnboardingController}.\n */\nexport type OnboardingControllerActions = OnboardingControllerGetStateAction;\n\n/**\n * Event emitted when the state of the {@link OnboardingController} changes.\n */\nexport type OnboardingControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof controllerName,\n  OnboardingControllerState\n>;\n\n/**\n * Events emitted by {@link OnboardingController}.\n */\nexport type OnboardingControllerControllerEvents =\n  OnboardingControllerStateChangeEvent;\n\n/**\n * Actions that this controller is allowed to call.\n */\nexport type AllowedActions = never;\n\n/**\n * Events that this controller is allowed to subscribe.\n */\nexport type AllowedEvents = never;\n\n/**\n * Messenger type for the {@link OnboardingController}.\n */\nexport type OnboardingControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  OnboardingControllerActions | AllowedActions,\n  OnboardingControllerControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Controller responsible for maintaining\n * state related to onboarding\n */\nexport default class OnboardingController extends BaseController<\n  typeof controllerName,\n  OnboardingControllerState,\n  OnboardingControllerMessenger\n> {\n  /**\n   * Constructs a Onboarding  controller.\n   *\n   * @param options - the controller options\n   * @param options.messenger - Messenger used to communicate with BaseV2 controller.\n   * @param options.state - Initial controller state.\n   */\n  constructor({\n    messenger,\n    state,\n  }: {\n    messenger: OnboardingControllerMessenger;\n    state: Partial<Omit<OnboardingControllerState, 'onboardingTabs'>>;\n  }) {\n    super({\n      messenger,\n      metadata: controllerMetadata,\n      name: controllerName,\n      state: {\n        ...getDefaultOnboardingControllerState(),\n        ...state,\n        ...defaultTransientState,\n      },\n    });\n  }\n\n  /**\n   * Setter for the `seedPhraseBackedUp` property\n   *\n   * @param newSeedPhraseBackUpState - Indicates if the seedphrase is backup by the user or not\n   */\n  setSeedPhraseBackedUp(newSeedPhraseBackUpState: boolean): void {\n    this.update((state) => {\n      state.seedPhraseBackedUp = newSeedPhraseBackUpState;\n    });\n  }\n\n  /**\n   * Sets the completedOnboarding state to true, indicating that the user has completed the\n   * onboarding process.\n   */\n  completeOnboarding(): boolean {\n    this.update((state) => {\n      state.completedOnboarding = true;\n    });\n    return true;\n  }\n\n  /**\n   * Setter for the `firstTimeFlowType` property\n   *\n   * @param type - Indicates the type of first time flow - create or import - the user wishes to follow\n   */\n  setFirstTimeFlowType(type: FirstTimeFlowType): void {\n    this.update((state) => {\n      state.firstTimeFlowType = type;\n    });\n  }\n\n  /**\n   * Registering a site as having initiated onboarding\n   *\n   * @param location - The location of the site registering\n   * @param tabId - The id of the tab registering\n   */\n  registerOnboarding = async (\n    location: string,\n    tabId: string,\n  ): Promise<void> => {\n    if (this.state.completedOnboarding) {\n      log.debug('Ignoring registerOnboarding; user already onboarded');\n      return;\n    }\n    const { onboardingTabs } = { ...(this.state ?? {}) };\n\n    if (!onboardingTabs) {\n      return;\n    }\n\n    if (!onboardingTabs[location] || onboardingTabs[location] !== tabId) {\n      log.debug(\n        `Registering onboarding tab at location '${location}' with tabId '${tabId}'`,\n      );\n      this.update((state) => {\n        state.onboardingTabs = {\n          ...onboardingTabs,\n          [location]: tabId,\n        };\n      });\n    }\n  };\n}\n","import { hasProperty, isObject, isStrictHexString } from '@metamask/utils';\n\n/**\n * Deletes properties of `NftController.allNftContracts`, `NftController.allNfts`,\n * `TokenListController.tokensChainsCache`, `TokensController.allTokens`,\n * `TokensController.allIgnoredTokens` and `TokensController.allDetectedTokens` if\n * their keyed by decimal number chainId and another hexadecimal chainId property\n * exists within the same object.\n * Further explanation in ./077-supplements.md\n *\n * @param state - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport default function transformState077For086(\n  state: Record<string, unknown>,\n): Record<string, unknown> {\n  if (hasProperty(state, 'NftController') && isObject(state.NftController)) {\n    const nftControllerState = state.NftController;\n\n    // Migrate NftController.allNftContracts\n    if (\n      hasProperty(nftControllerState, 'allNftContracts') &&\n      isObject(nftControllerState.allNftContracts)\n    ) {\n      const { allNftContracts } = nftControllerState;\n\n      if (\n        Object.keys(allNftContracts).every((address) =>\n          isObject(allNftContracts[address]),\n        )\n      ) {\n        Object.keys(allNftContracts).forEach((address) => {\n          const nftContractsByChainId = allNftContracts[address];\n          if (\n            isObject(nftContractsByChainId) &&\n            anyKeysAreHex(nftContractsByChainId)\n          ) {\n            for (const chainId of Object.keys(nftContractsByChainId)) {\n              if (!isStrictHexString(chainId)) {\n                delete nftContractsByChainId[chainId];\n              }\n            }\n          }\n        });\n      }\n    }\n\n    // Migrate NftController.allNfts\n    if (\n      hasProperty(nftControllerState, 'allNfts') &&\n      isObject(nftControllerState.allNfts)\n    ) {\n      const { allNfts } = nftControllerState;\n\n      if (Object.keys(allNfts).every((address) => isObject(allNfts[address]))) {\n        Object.keys(allNfts).forEach((address) => {\n          const nftsByChainId = allNfts[address];\n          if (isObject(nftsByChainId) && anyKeysAreHex(nftsByChainId)) {\n            for (const chainId of Object.keys(nftsByChainId)) {\n              if (!isStrictHexString(chainId)) {\n                delete nftsByChainId[chainId];\n              }\n            }\n          }\n        });\n      }\n    }\n\n    state.NftController = nftControllerState;\n  }\n\n  if (\n    hasProperty(state, 'TokenListController') &&\n    isObject(state.TokenListController)\n  ) {\n    const tokenListControllerState = state.TokenListController;\n\n    // Migrate TokenListController.tokensChainsCache\n    if (\n      hasProperty(tokenListControllerState, 'tokensChainsCache') &&\n      isObject(tokenListControllerState.tokensChainsCache) &&\n      anyKeysAreHex(tokenListControllerState.tokensChainsCache)\n    ) {\n      for (const chainId of Object.keys(\n        tokenListControllerState.tokensChainsCache,\n      )) {\n        if (!isStrictHexString(chainId)) {\n          delete tokenListControllerState.tokensChainsCache[chainId];\n        }\n      }\n    }\n  }\n\n  if (\n    hasProperty(state, 'TokensController') &&\n    isObject(state.TokensController)\n  ) {\n    const tokensControllerState = state.TokensController;\n\n    // Migrate TokensController.allTokens\n    if (\n      hasProperty(tokensControllerState, 'allTokens') &&\n      isObject(tokensControllerState.allTokens) &&\n      anyKeysAreHex(tokensControllerState.allTokens)\n    ) {\n      const { allTokens } = tokensControllerState;\n\n      for (const chainId of Object.keys(allTokens)) {\n        if (!isStrictHexString(chainId)) {\n          delete tokensControllerState.allTokens[chainId];\n        }\n      }\n    }\n\n    // Migrate TokensController.allIgnoredTokens\n    if (\n      hasProperty(tokensControllerState, 'allIgnoredTokens') &&\n      isObject(tokensControllerState.allIgnoredTokens) &&\n      anyKeysAreHex(tokensControllerState.allIgnoredTokens)\n    ) {\n      const { allIgnoredTokens } = tokensControllerState;\n\n      for (const chainId of Object.keys(allIgnoredTokens)) {\n        if (!isStrictHexString(chainId)) {\n          delete tokensControllerState.allIgnoredTokens[chainId];\n        }\n      }\n    }\n\n    // Migrate TokensController.allDetectedTokens\n    if (\n      hasProperty(tokensControllerState, 'allDetectedTokens') &&\n      isObject(tokensControllerState.allDetectedTokens) &&\n      anyKeysAreHex(tokensControllerState.allDetectedTokens)\n    ) {\n      const { allDetectedTokens } = tokensControllerState;\n\n      for (const chainId of Object.keys(allDetectedTokens)) {\n        if (!isStrictHexString(chainId)) {\n          delete tokensControllerState.allDetectedTokens[chainId];\n        }\n      }\n    }\n\n    state.TokensController = tokensControllerState;\n  }\n  return state;\n}\n\nfunction anyKeysAreHex(obj: Record<string, unknown>) {\n  return Object.keys(obj).some((chainId) => isStrictHexString(chainId));\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initKZG = void 0;\n/**\n * @deprecated This initialization method is deprecated since trusted setup loading is done directly in the reference KZG library\n * initialization or should othewise be assured independently before KZG libary usage.\n *\n * @param kzgLib a KZG implementation (defaults to c-kzg)\n * @param a dictionary of trusted setup options\n */\nfunction initKZG(kzg, _trustedSetupPath) {\n    kzg.loadTrustedSetup();\n}\nexports.initKZG = initKZG;\n//# sourceMappingURL=kzg.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Lock = void 0;\n// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts\nclass Lock {\n    constructor() {\n        this.permits = 1;\n        this.promiseResolverQueue = [];\n    }\n    /**\n     * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n     * @returns  A promise that gets resolved when execution is allowed to proceed.\n     */\n    async acquire() {\n        if (this.permits > 0) {\n            this.permits -= 1;\n            return Promise.resolve(true);\n        }\n        // If there is no permit available, we return a promise that resolves once the semaphore gets\n        // signaled enough times that permits is equal to one.\n        return new Promise((resolver) => this.promiseResolverQueue.push(resolver));\n    }\n    /**\n     * Increases the number of permits by one. If there are other functions waiting, one of them will\n     * continue to execute in a future iteration of the event loop.\n     */\n    release() {\n        this.permits += 1;\n        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n            // eslint-disable-next-line no-console\n            console.warn('Lock.permits should never be > 0 when there is someone waiting.');\n        }\n        else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n            // If there is someone else waiting, immediately consume the permit that was released\n            // at the beginning of this function and let the waiting function resume.\n            this.permits -= 1;\n            const nextResolver = this.promiseResolverQueue.shift();\n            if (nextResolver) {\n                nextResolver(true);\n            }\n        }\n    }\n}\nexports.Lock = Lock;\n//# sourceMappingURL=lock.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MapDB = void 0;\nconst bytes_js_1 = require(\"./bytes.js\");\nclass MapDB {\n    constructor(database) {\n        this._database = database ?? new Map();\n    }\n    async get(key) {\n        const dbKey = key instanceof Uint8Array ? (0, bytes_js_1.bytesToUnprefixedHex)(key) : key.toString();\n        return this._database.get(dbKey);\n    }\n    async put(key, val) {\n        const dbKey = key instanceof Uint8Array ? (0, bytes_js_1.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.set(dbKey, val);\n    }\n    async del(key) {\n        const dbKey = key instanceof Uint8Array ? (0, bytes_js_1.bytesToUnprefixedHex)(key) : key.toString();\n        this._database.delete(dbKey);\n    }\n    async batch(opStack) {\n        for (const op of opStack) {\n            if (op.type === 'del') {\n                await this.del(op.key);\n            }\n            if (op.type === 'put') {\n                await this.put(op.key, op.value);\n            }\n        }\n    }\n    /**\n     * Note that the returned shallow copy will share the underlying database with the original\n     *\n     * @returns DB\n     */\n    shallowCopy() {\n        return new MapDB(this._database);\n    }\n    open() {\n        return Promise.resolve();\n    }\n}\nexports.MapDB = MapDB;\n//# sourceMappingURL=mapDB.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getProvider = exports.fetchFromProvider = void 0;\n/**\n * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.\n * No parameter or response validation is done.\n *\n * @param url the URL for the JSON RPC provider\n * @param params the parameters for the JSON-RPC method - refer to\n * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods\n * @returns the `result` field from the JSON-RPC response\n * @example\n * ```ts\n * const provider = 'https://mainnet.infura.io/v3/...'\n * const params = {\n *   method: 'eth_getBlockByNumber',\n *   params: ['latest', false],\n * }\n * const block = await fetchFromProvider(provider, params)\n * ```\n */\nconst fetchFromProvider = async (url, params) => {\n    const data = JSON.stringify({\n        method: params.method,\n        params: params.params,\n        jsonrpc: '2.0',\n        id: 1,\n    });\n    const res = await fetch(url, {\n        headers: {\n            'content-type': 'application/json',\n        },\n        method: 'POST',\n        body: data,\n    });\n    if (!res.ok) {\n        throw new Error(`JSONRpcError: ${JSON.stringify({\n            method: params.method,\n            status: res.status,\n            message: await res.text().catch(() => {\n                return 'Could not parse error message likely because of a network error';\n            }),\n        }, null, 2)}`);\n    }\n    const json = await res.json();\n    // TODO we should check json.error here\n    return json.result;\n};\nexports.fetchFromProvider = fetchFromProvider;\n/**\n *\n * @param provider a URL string or {@link EthersProvider}\n * @returns the extracted URL string for the JSON-RPC Provider\n */\nconst getProvider = (provider) => {\n    if (typeof provider === 'string') {\n        return provider;\n    }\n    else if (typeof provider === 'object' && provider._getConnection !== undefined) {\n        return provider._getConnection().url;\n    }\n    else {\n        throw new Error('Must provide valid provider URL or Web3Provider');\n    }\n};\nexports.getProvider = getProvider;\n//# sourceMappingURL=provider.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CLRequestFactory = exports.ConsolidationRequest = exports.WithdrawalRequest = exports.DepositRequest = exports.CLRequest = exports.CLRequestType = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst utils_1 = require(\"ethereum-cryptography/utils\");\nconst bytes_js_1 = require(\"./bytes.js\");\nconst constants_js_1 = require(\"./constants.js\");\nvar CLRequestType;\n(function (CLRequestType) {\n    CLRequestType[CLRequestType[\"Deposit\"] = 0] = \"Deposit\";\n    CLRequestType[CLRequestType[\"Withdrawal\"] = 1] = \"Withdrawal\";\n    CLRequestType[CLRequestType[\"Consolidation\"] = 2] = \"Consolidation\";\n})(CLRequestType = exports.CLRequestType || (exports.CLRequestType = {}));\nclass CLRequest {\n    constructor(type) {\n        this.type = type;\n    }\n}\nexports.CLRequest = CLRequest;\nclass DepositRequest extends CLRequest {\n    constructor(pubkey, withdrawalCredentials, amount, signature, index) {\n        super(CLRequestType.Deposit);\n        this.pubkey = pubkey;\n        this.withdrawalCredentials = withdrawalCredentials;\n        this.amount = amount;\n        this.signature = signature;\n        this.index = index;\n    }\n    static fromRequestData(depositData) {\n        const { pubkey, withdrawalCredentials, amount, signature, index } = depositData;\n        return new DepositRequest(pubkey, withdrawalCredentials, amount, signature, index);\n    }\n    static fromJSON(jsonData) {\n        const { pubkey, withdrawalCredentials, amount, signature, index } = jsonData;\n        return this.fromRequestData({\n            pubkey: (0, bytes_js_1.hexToBytes)(pubkey),\n            withdrawalCredentials: (0, bytes_js_1.hexToBytes)(withdrawalCredentials),\n            amount: (0, bytes_js_1.hexToBigInt)(amount),\n            signature: (0, bytes_js_1.hexToBytes)(signature),\n            index: (0, bytes_js_1.hexToBigInt)(index),\n        });\n    }\n    serialize() {\n        const indexBytes = this.index === constants_js_1.BIGINT_0 ? new Uint8Array() : (0, bytes_js_1.bigIntToBytes)(this.index);\n        const amountBytes = this.amount === constants_js_1.BIGINT_0 ? new Uint8Array() : (0, bytes_js_1.bigIntToBytes)(this.amount);\n        return (0, utils_1.concatBytes)(Uint8Array.from([this.type]), rlp_1.RLP.encode([this.pubkey, this.withdrawalCredentials, amountBytes, this.signature, indexBytes]));\n    }\n    toJSON() {\n        return {\n            pubkey: (0, bytes_js_1.bytesToHex)(this.pubkey),\n            withdrawalCredentials: (0, bytes_js_1.bytesToHex)(this.withdrawalCredentials),\n            amount: (0, bytes_js_1.bigIntToHex)(this.amount),\n            signature: (0, bytes_js_1.bytesToHex)(this.signature),\n            index: (0, bytes_js_1.bigIntToHex)(this.index),\n        };\n    }\n    static deserialize(bytes) {\n        const [pubkey, withdrawalCredentials, amount, signature, index] = rlp_1.RLP.decode(bytes.slice(1));\n        return this.fromRequestData({\n            pubkey,\n            withdrawalCredentials,\n            amount: (0, bytes_js_1.bytesToBigInt)(amount),\n            signature,\n            index: (0, bytes_js_1.bytesToBigInt)(index),\n        });\n    }\n}\nexports.DepositRequest = DepositRequest;\nclass WithdrawalRequest extends CLRequest {\n    constructor(sourceAddress, validatorPubkey, amount) {\n        super(CLRequestType.Withdrawal);\n        this.sourceAddress = sourceAddress;\n        this.validatorPubkey = validatorPubkey;\n        this.amount = amount;\n    }\n    static fromRequestData(withdrawalData) {\n        const { sourceAddress, validatorPubkey, amount } = withdrawalData;\n        return new WithdrawalRequest(sourceAddress, validatorPubkey, amount);\n    }\n    static fromJSON(jsonData) {\n        const { sourceAddress, validatorPubkey, amount } = jsonData;\n        return this.fromRequestData({\n            sourceAddress: (0, bytes_js_1.hexToBytes)(sourceAddress),\n            validatorPubkey: (0, bytes_js_1.hexToBytes)(validatorPubkey),\n            amount: (0, bytes_js_1.hexToBigInt)(amount),\n        });\n    }\n    serialize() {\n        const amountBytes = this.amount === constants_js_1.BIGINT_0 ? new Uint8Array() : (0, bytes_js_1.bigIntToBytes)(this.amount);\n        return (0, utils_1.concatBytes)(Uint8Array.from([this.type]), rlp_1.RLP.encode([this.sourceAddress, this.validatorPubkey, amountBytes]));\n    }\n    toJSON() {\n        return {\n            sourceAddress: (0, bytes_js_1.bytesToHex)(this.sourceAddress),\n            validatorPubkey: (0, bytes_js_1.bytesToHex)(this.validatorPubkey),\n            amount: (0, bytes_js_1.bigIntToHex)(this.amount),\n        };\n    }\n    static deserialize(bytes) {\n        const [sourceAddress, validatorPubkey, amount] = rlp_1.RLP.decode(bytes.slice(1));\n        return this.fromRequestData({\n            sourceAddress,\n            validatorPubkey,\n            amount: (0, bytes_js_1.bytesToBigInt)(amount),\n        });\n    }\n}\nexports.WithdrawalRequest = WithdrawalRequest;\nclass ConsolidationRequest extends CLRequest {\n    constructor(sourceAddress, sourcePubkey, targetPubkey) {\n        super(CLRequestType.Consolidation);\n        this.sourceAddress = sourceAddress;\n        this.sourcePubkey = sourcePubkey;\n        this.targetPubkey = targetPubkey;\n    }\n    static fromRequestData(consolidationData) {\n        const { sourceAddress, sourcePubkey, targetPubkey } = consolidationData;\n        return new ConsolidationRequest(sourceAddress, sourcePubkey, targetPubkey);\n    }\n    static fromJSON(jsonData) {\n        const { sourceAddress, sourcePubkey, targetPubkey } = jsonData;\n        return this.fromRequestData({\n            sourceAddress: (0, bytes_js_1.hexToBytes)(sourceAddress),\n            sourcePubkey: (0, bytes_js_1.hexToBytes)(sourcePubkey),\n            targetPubkey: (0, bytes_js_1.hexToBytes)(targetPubkey),\n        });\n    }\n    serialize() {\n        return (0, utils_1.concatBytes)(Uint8Array.from([this.type]), rlp_1.RLP.encode([this.sourceAddress, this.sourcePubkey, this.targetPubkey]));\n    }\n    toJSON() {\n        return {\n            sourceAddress: (0, bytes_js_1.bytesToHex)(this.sourceAddress),\n            sourcePubkey: (0, bytes_js_1.bytesToHex)(this.sourcePubkey),\n            targetPubkey: (0, bytes_js_1.bytesToHex)(this.targetPubkey),\n        };\n    }\n    static deserialize(bytes) {\n        const [sourceAddress, sourcePubkey, targetPubkey] = rlp_1.RLP.decode(bytes.slice(1));\n        return this.fromRequestData({\n            sourceAddress,\n            sourcePubkey,\n            targetPubkey,\n        });\n    }\n}\nexports.ConsolidationRequest = ConsolidationRequest;\nclass CLRequestFactory {\n    static fromSerializedRequest(bytes) {\n        switch (bytes[0]) {\n            case CLRequestType.Deposit:\n                return DepositRequest.deserialize(bytes);\n            case CLRequestType.Withdrawal:\n                return WithdrawalRequest.deserialize(bytes);\n            case CLRequestType.Consolidation:\n                return ConsolidationRequest.deserialize(bytes);\n            default:\n                throw Error(`Invalid request type=${bytes[0]}`);\n        }\n    }\n}\nexports.CLRequestFactory = CLRequestFactory;\n//# sourceMappingURL=requests.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.calculateSigRecovery = exports.ecsign = void 0;\nconst keccak_js_1 = require(\"ethereum-cryptography/keccak.js\");\nconst secp256k1_js_1 = require(\"ethereum-cryptography/secp256k1.js\");\nconst bytes_js_1 = require(\"./bytes.js\");\nconst constants_js_1 = require(\"./constants.js\");\nconst helpers_js_1 = require(\"./helpers.js\");\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nfunction ecsign(msgHash, privateKey, chainId) {\n    const sig = secp256k1_js_1.secp256k1.sign(msgHash, privateKey);\n    const buf = sig.toCompactRawBytes();\n    const r = buf.slice(0, 32);\n    const s = buf.slice(32, 64);\n    const v = chainId === undefined\n        ? BigInt(sig.recovery + 27)\n        : BigInt(sig.recovery + 35) + BigInt(chainId) * constants_js_1.BIGINT_2;\n    return { r, s, v };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n    if (v === constants_js_1.BIGINT_0 || v === constants_js_1.BIGINT_1)\n        return v;\n    if (chainId === undefined) {\n        return v - constants_js_1.BIGINT_27;\n    }\n    return v - (chainId * constants_js_1.BIGINT_2 + BigInt(35));\n}\nexports.calculateSigRecovery = calculateSigRecovery;\nfunction isValidSigRecovery(recovery) {\n    return recovery === constants_js_1.BIGINT_0 || recovery === constants_js_1.BIGINT_1;\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n    const signature = (0, bytes_js_1.concatBytes)((0, bytes_js_1.setLengthLeft)(r, 32), (0, bytes_js_1.setLengthLeft)(s, 32));\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const sig = secp256k1_js_1.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n    const senderPubKey = sig.recoverPublicKey(msgHash);\n    return senderPubKey.toRawBytes(false).slice(1);\n};\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toRpcSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0, bytes_js_1.bytesToHex)((0, bytes_js_1.concatBytes)((0, bytes_js_1.setLengthLeft)(r, 32), (0, bytes_js_1.setLengthLeft)(s, 32), (0, bytes_js_1.toBytes)(v)));\n};\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toCompactSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const ss = Uint8Array.from([...s]);\n    if ((v > BigInt(28) && v % constants_js_1.BIGINT_2 === constants_js_1.BIGINT_1) || v === constants_js_1.BIGINT_1 || v === BigInt(28)) {\n        ss[0] |= 0x80;\n    }\n    return (0, bytes_js_1.bytesToHex)((0, bytes_js_1.concatBytes)((0, bytes_js_1.setLengthLeft)(r, 32), (0, bytes_js_1.setLengthLeft)(ss, 32)));\n};\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nconst fromRpcSig = function (sig) {\n    const bytes = (0, bytes_js_1.toBytes)(sig);\n    let r;\n    let s;\n    let v;\n    if (bytes.length >= 65) {\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = (0, bytes_js_1.bytesToBigInt)(bytes.subarray(64));\n    }\n    else if (bytes.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = bytes.subarray(0, 32);\n        s = bytes.subarray(32, 64);\n        v = BigInt((0, bytes_js_1.bytesToInt)(bytes.subarray(32, 33)) >> 7);\n        s[0] &= 0x7f;\n    }\n    else {\n        throw new Error('Invalid signature length');\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v = v + constants_js_1.BIGINT_27;\n    }\n    return {\n        v,\n        r,\n        s,\n    };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nconst isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBigInt = (0, bytes_js_1.bytesToBigInt)(r);\n    const sBigInt = (0, bytes_js_1.bytesToBigInt)(s);\n    if (rBigInt === constants_js_1.BIGINT_0 ||\n        rBigInt >= constants_js_1.SECP256K1_ORDER ||\n        sBigInt === constants_js_1.BIGINT_0 ||\n        sBigInt >= constants_js_1.SECP256K1_ORDER) {\n        return false;\n    }\n    if (homesteadOrLater && sBigInt >= constants_js_1.SECP256K1_ORDER_DIV_2) {\n        return false;\n    }\n    return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nconst hashPersonalMessage = function (message) {\n    (0, helpers_js_1.assertIsBytes)(message);\n    const prefix = (0, bytes_js_1.utf8ToBytes)(`\\u0019Ethereum Signed Message:\\n${message.length}`);\n    return (0, keccak_js_1.keccak256)((0, bytes_js_1.concatBytes)(prefix, message));\n};\nexports.hashPersonalMessage = hashPersonalMessage;\n//# sourceMappingURL=signature.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toType = exports.TypeOutput = exports.isNestedUint8Array = void 0;\nconst bytes_js_1 = require(\"./bytes.js\");\nconst internal_js_1 = require(\"./internal.js\");\nfunction isNestedUint8Array(value) {\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    for (const item of value) {\n        if (Array.isArray(item)) {\n            if (!isNestedUint8Array(item)) {\n                return false;\n            }\n        }\n        else if (!(item instanceof Uint8Array)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isNestedUint8Array = isNestedUint8Array;\n/**\n * Type output options\n */\nvar TypeOutput;\n(function (TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n    TypeOutput[TypeOutput[\"Uint8Array\"] = 2] = \"Uint8Array\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\nfunction toType(input, outputType) {\n    if (input === null) {\n        return null;\n    }\n    if (input === undefined) {\n        return undefined;\n    }\n    if (typeof input === 'string' && !(0, internal_js_1.isHexString)(input)) {\n        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n    }\n    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n    const output = (0, bytes_js_1.toBytes)(input);\n    switch (outputType) {\n        case TypeOutput.Uint8Array:\n            return output;\n        case TypeOutput.BigInt:\n            return (0, bytes_js_1.bytesToBigInt)(output);\n        case TypeOutput.Number: {\n            const bigInt = (0, bytes_js_1.bytesToBigInt)(output);\n            if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n                throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n            }\n            return Number(bigInt);\n        }\n        case TypeOutput.PrefixedHexString:\n            return (0, bytes_js_1.bytesToHex)(output);\n        default:\n            throw new Error('unknown outputType');\n    }\n}\nexports.toType = toType;\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatBigDecimal = exports.GWEI_TO_WEI = void 0;\nconst constants_js_1 = require(\"./constants.js\");\n/** Easy conversion from Gwei to wei */\nexports.GWEI_TO_WEI = BigInt(1000000000);\nfunction formatBigDecimal(numerator, denominator, maxDecimalFactor) {\n    if (denominator === constants_js_1.BIGINT_0) {\n        denominator = constants_js_1.BIGINT_1;\n    }\n    const full = numerator / denominator;\n    const fraction = ((numerator - full * denominator) * maxDecimalFactor) / denominator;\n    // zeros to be added post decimal are number of zeros in maxDecimalFactor - number of digits in fraction\n    const zerosPostDecimal = String(maxDecimalFactor).length - 1 - String(fraction).length;\n    return `${full}.${'0'.repeat(zerosPostDecimal)}${fraction}`;\n}\nexports.formatBigDecimal = formatBigDecimal;\n//# sourceMappingURL=units.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getVerkleTreeKeyForStorageSlot = exports.chunkifyCode = exports.getVerkleTreeKeyForCodeChunk = exports.getVerkleTreeIndicesForCodeChunk = exports.getVerkleTreeIndexesForStorageSlot = exports.getVerkleKey = exports.VERKLE_MAIN_STORAGE_OFFSET = exports.VERKLE_NODE_WIDTH = exports.VERKLE_CODE_OFFSET = exports.VERKLE_HEADER_STORAGE_OFFSET = exports.VERKLE_CODE_SIZE_LEAF_KEY = exports.VERKLE_CODE_HASH_LEAF_KEY = exports.VERKLE_NONCE_LEAF_KEY = exports.VERKLE_BALANCE_LEAF_KEY = exports.VERKLE_VERSION_LEAF_KEY = exports.VerkleLeafType = exports.verifyVerkleProof = exports.getVerkleStem = void 0;\nconst bytes_js_1 = require(\"./bytes.js\");\n/**\n * @dev Returns the 31-bytes verkle tree stem for a given address and tree index.\n * @dev Assumes that the verkle node width = 256\n * @param ffi The verkle ffi object from verkle-crypotography-wasm.\n * @param address The address to generate the tree key for.\n * @param treeIndex The index of the tree to generate the key for. Defaults to 0.\n * @return The 31-bytes verkle tree stem as a Uint8Array.\n */\nfunction getVerkleStem(ffi, address, treeIndex = 0) {\n    const address32 = (0, bytes_js_1.setLengthLeft)(address.toBytes(), 32);\n    let treeIndexBytes;\n    if (typeof treeIndex === 'number') {\n        treeIndexBytes = (0, bytes_js_1.setLengthRight)((0, bytes_js_1.int32ToBytes)(Number(treeIndex), true), 32);\n    }\n    else {\n        treeIndexBytes = (0, bytes_js_1.setLengthRight)((0, bytes_js_1.bigIntToBytes)(BigInt(treeIndex), true).slice(0, 32), 32);\n    }\n    const treeStem = ffi.getTreeKey(address32, treeIndexBytes, 0).slice(0, 31);\n    return treeStem;\n}\nexports.getVerkleStem = getVerkleStem;\n/**\n * Verifies that the executionWitness is valid for the given prestateRoot.\n * @param ffi The verkle ffi object from verkle-crypotography-wasm.\n * @param prestateRoot The prestateRoot matching the executionWitness.\n * @param executionWitness The verkle execution witness.\n * @returns {boolean} Whether or not the executionWitness belongs to the prestateRoot.\n */\nfunction verifyVerkleProof(ffi, prestateRoot, executionWitness) {\n    return ffi.verifyExecutionWitnessPreState((0, bytes_js_1.bytesToHex)(prestateRoot), JSON.stringify(executionWitness));\n}\nexports.verifyVerkleProof = verifyVerkleProof;\nvar VerkleLeafType;\n(function (VerkleLeafType) {\n    VerkleLeafType[VerkleLeafType[\"Version\"] = 0] = \"Version\";\n    VerkleLeafType[VerkleLeafType[\"Balance\"] = 1] = \"Balance\";\n    VerkleLeafType[VerkleLeafType[\"Nonce\"] = 2] = \"Nonce\";\n    VerkleLeafType[VerkleLeafType[\"CodeHash\"] = 3] = \"CodeHash\";\n    VerkleLeafType[VerkleLeafType[\"CodeSize\"] = 4] = \"CodeSize\";\n})(VerkleLeafType = exports.VerkleLeafType || (exports.VerkleLeafType = {}));\nexports.VERKLE_VERSION_LEAF_KEY = (0, bytes_js_1.intToBytes)(VerkleLeafType.Version);\nexports.VERKLE_BALANCE_LEAF_KEY = (0, bytes_js_1.intToBytes)(VerkleLeafType.Balance);\nexports.VERKLE_NONCE_LEAF_KEY = (0, bytes_js_1.intToBytes)(VerkleLeafType.Nonce);\nexports.VERKLE_CODE_HASH_LEAF_KEY = (0, bytes_js_1.intToBytes)(VerkleLeafType.CodeHash);\nexports.VERKLE_CODE_SIZE_LEAF_KEY = (0, bytes_js_1.intToBytes)(VerkleLeafType.CodeSize);\nexports.VERKLE_HEADER_STORAGE_OFFSET = 64;\nexports.VERKLE_CODE_OFFSET = 128;\nexports.VERKLE_NODE_WIDTH = 256;\nexports.VERKLE_MAIN_STORAGE_OFFSET = BigInt(256) ** BigInt(31);\n/**\n * @dev Returns the tree key for a given verkle tree stem, and sub index.\n * @dev Assumes that the verkle node width = 256\n * @param stem The 31-bytes verkle tree stem as a Uint8Array.\n * @param subIndex The sub index of the tree to generate the key for as a Uint8Array.\n * @return The tree key as a Uint8Array.\n */\nconst getVerkleKey = (stem, leaf) => {\n    switch (leaf) {\n        case VerkleLeafType.Version:\n            return (0, bytes_js_1.concatBytes)(stem, exports.VERKLE_VERSION_LEAF_KEY);\n        case VerkleLeafType.Balance:\n            return (0, bytes_js_1.concatBytes)(stem, exports.VERKLE_BALANCE_LEAF_KEY);\n        case VerkleLeafType.Nonce:\n            return (0, bytes_js_1.concatBytes)(stem, exports.VERKLE_NONCE_LEAF_KEY);\n        case VerkleLeafType.CodeHash:\n            return (0, bytes_js_1.concatBytes)(stem, exports.VERKLE_CODE_HASH_LEAF_KEY);\n        case VerkleLeafType.CodeSize:\n            return (0, bytes_js_1.concatBytes)(stem, exports.VERKLE_CODE_SIZE_LEAF_KEY);\n        default:\n            return (0, bytes_js_1.concatBytes)(stem, leaf);\n    }\n};\nexports.getVerkleKey = getVerkleKey;\nfunction getVerkleTreeIndexesForStorageSlot(storageKey) {\n    let position;\n    if (storageKey < exports.VERKLE_CODE_OFFSET - exports.VERKLE_HEADER_STORAGE_OFFSET) {\n        position = BigInt(exports.VERKLE_HEADER_STORAGE_OFFSET) + storageKey;\n    }\n    else {\n        position = exports.VERKLE_MAIN_STORAGE_OFFSET + storageKey;\n    }\n    const treeIndex = position / BigInt(exports.VERKLE_NODE_WIDTH);\n    const subIndex = Number(position % BigInt(exports.VERKLE_NODE_WIDTH));\n    return { treeIndex, subIndex };\n}\nexports.getVerkleTreeIndexesForStorageSlot = getVerkleTreeIndexesForStorageSlot;\nfunction getVerkleTreeIndicesForCodeChunk(chunkId) {\n    const treeIndex = Math.floor((exports.VERKLE_CODE_OFFSET + chunkId) / exports.VERKLE_NODE_WIDTH);\n    const subIndex = (exports.VERKLE_CODE_OFFSET + chunkId) % exports.VERKLE_NODE_WIDTH;\n    return { treeIndex, subIndex };\n}\nexports.getVerkleTreeIndicesForCodeChunk = getVerkleTreeIndicesForCodeChunk;\nconst getVerkleTreeKeyForCodeChunk = async (address, chunkId, verkleCrypto) => {\n    const { treeIndex, subIndex } = getVerkleTreeIndicesForCodeChunk(chunkId);\n    return (0, bytes_js_1.concatBytes)(getVerkleStem(verkleCrypto, address, treeIndex), (0, bytes_js_1.toBytes)(subIndex));\n};\nexports.getVerkleTreeKeyForCodeChunk = getVerkleTreeKeyForCodeChunk;\nconst chunkifyCode = (code) => {\n    // Pad code to multiple of 31 bytes\n    if (code.length % 31 !== 0) {\n        const paddingLength = 31 - (code.length % 31);\n        code = (0, bytes_js_1.setLengthRight)(code, code.length + paddingLength);\n    }\n    throw new Error('Not implemented');\n};\nexports.chunkifyCode = chunkifyCode;\nconst getVerkleTreeKeyForStorageSlot = async (address, storageKey, verkleCrypto) => {\n    const { treeIndex, subIndex } = getVerkleTreeIndexesForStorageSlot(storageKey);\n    return (0, bytes_js_1.concatBytes)(getVerkleStem(verkleCrypto, address, treeIndex), (0, bytes_js_1.toBytes)(subIndex));\n};\nexports.getVerkleTreeKeyForStorageSlot = getVerkleTreeKeyForStorageSlot;\n//# sourceMappingURL=verkle.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Withdrawal = void 0;\nconst address_js_1 = require(\"./address.js\");\nconst bytes_js_1 = require(\"./bytes.js\");\nconst constants_js_1 = require(\"./constants.js\");\nconst types_js_1 = require(\"./types.js\");\n/**\n * Representation of EIP-4895 withdrawal data\n */\nclass Withdrawal {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n     */\n    constructor(index, validatorIndex, address, \n    /**\n     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n     */\n    amount) {\n        this.index = index;\n        this.validatorIndex = validatorIndex;\n        this.address = address;\n        this.amount = amount;\n    }\n    static fromWithdrawalData(withdrawalData) {\n        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData, } = withdrawalData;\n        const index = (0, types_js_1.toType)(indexData, types_js_1.TypeOutput.BigInt);\n        const validatorIndex = (0, types_js_1.toType)(validatorIndexData, types_js_1.TypeOutput.BigInt);\n        const address = addressData instanceof address_js_1.Address ? addressData : new address_js_1.Address((0, bytes_js_1.toBytes)(addressData));\n        const amount = (0, types_js_1.toType)(amountData, types_js_1.TypeOutput.BigInt);\n        return new Withdrawal(index, validatorIndex, address, amount);\n    }\n    static fromValuesArray(withdrawalArray) {\n        if (withdrawalArray.length !== 4) {\n            throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);\n        }\n        const [index, validatorIndex, address, amount] = withdrawalArray;\n        return Withdrawal.fromWithdrawalData({ index, validatorIndex, address, amount });\n    }\n    /**\n     * Convert a withdrawal to a buffer array\n     * @param withdrawal the withdrawal to convert\n     * @returns buffer array of the withdrawal\n     */\n    static toBytesArray(withdrawal) {\n        const { index, validatorIndex, address, amount } = withdrawal;\n        const indexBytes = (0, types_js_1.toType)(index, types_js_1.TypeOutput.BigInt) === constants_js_1.BIGINT_0\n            ? new Uint8Array()\n            : (0, types_js_1.toType)(index, types_js_1.TypeOutput.Uint8Array);\n        const validatorIndexBytes = (0, types_js_1.toType)(validatorIndex, types_js_1.TypeOutput.BigInt) === constants_js_1.BIGINT_0\n            ? new Uint8Array()\n            : (0, types_js_1.toType)(validatorIndex, types_js_1.TypeOutput.Uint8Array);\n        const addressBytes = address instanceof address_js_1.Address ? address.bytes : (0, types_js_1.toType)(address, types_js_1.TypeOutput.Uint8Array);\n        const amountBytes = (0, types_js_1.toType)(amount, types_js_1.TypeOutput.BigInt) === constants_js_1.BIGINT_0\n            ? new Uint8Array()\n            : (0, types_js_1.toType)(amount, types_js_1.TypeOutput.Uint8Array);\n        return [indexBytes, validatorIndexBytes, addressBytes, amountBytes];\n    }\n    raw() {\n        return Withdrawal.toBytesArray(this);\n    }\n    toValue() {\n        return {\n            index: this.index,\n            validatorIndex: this.validatorIndex,\n            address: this.address.bytes,\n            amount: this.amount,\n        };\n    }\n    toJSON() {\n        return {\n            index: (0, bytes_js_1.bigIntToHex)(this.index),\n            validatorIndex: (0, bytes_js_1.bigIntToHex)(this.validatorIndex),\n            address: (0, bytes_js_1.bytesToHex)(this.address.bytes),\n            amount: (0, bytes_js_1.bigIntToHex)(this.amount),\n        };\n    }\n}\nexports.Withdrawal = Withdrawal;\n//# sourceMappingURL=withdrawal.js.map","import { cloneDeep } from 'lodash';\nimport log from 'loglevel';\nimport { hasProperty, isObject } from '@metamask/utils';\nimport transformState077For082 from './077-supplements/077-supplement-for-082';\nimport transformState077For084 from './077-supplements/077-supplement-for-084';\nimport transformState077For086 from './077-supplements/077-supplement-for-086';\nimport transformState077For088 from './077-supplements/077-supplement-for-088';\n\nconst version = 77;\n\n/**\n * Prior to token detection v2 the data property in tokensChainsCache was an array,\n * in v2 we changes that to an object. In this migration we are converting the data as array to object.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    let newState = transformState(state);\n\n    newState = transformState077For082(newState);\n    newState = transformState077For084(newState);\n    newState = transformState077For086(newState);\n    newState = transformState077For088(newState);\n\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (!hasProperty(state, 'TokenListController')) {\n    log.warn('Skipping migration, TokenListController state is missing');\n    return state;\n  } else if (!isObject(state.TokenListController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.TokenListController is ${typeof state.TokenListController}`,\n      ),\n    );\n    return state;\n  } else if (!hasProperty(state.TokenListController, 'tokensChainsCache')) {\n    log.warn(\n      'Skipping migration, TokenListController.tokensChainsCache state is missing',\n    );\n    return state;\n  }\n  const { TokenListController } = state;\n  const { tokensChainsCache } = TokenListController;\n\n  let dataCache;\n  let dataObject;\n  // eslint-disable-next-line\n  for (const chainId in tokensChainsCache) {\n    dataCache = tokensChainsCache[chainId].data || {};\n    dataObject = {};\n    // if the data is array conver that to object\n    if (Array.isArray(dataCache)) {\n      for (const token of dataCache) {\n        dataObject[token.address] = token;\n      }\n    } else if (\n      Object.keys(dataCache)[0]?.toLowerCase() !==\n      dataCache[Object.keys(dataCache)[0]]?.address?.toLowerCase()\n    ) {\n      // for the users who already updated to the recent version\n      // and the dataCache is already an object keyed with 0,1,2,3 etc\n      // eslint-disable-next-line\n      for (const tokenAddress in dataCache) {\n        dataObject[dataCache[tokenAddress].address] = dataCache[tokenAddress];\n      }\n    }\n    tokensChainsCache[chainId].data =\n      Object.keys(dataObject).length > 0 ? dataObject : dataCache;\n  }\n  TokenListController.tokensChainsCache = tokensChainsCache;\n\n  return {\n    ...state,\n    TokenListController: {\n      ...TokenListController,\n    },\n  };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RLP = exports.utils = exports.decode = exports.encode = void 0;\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        let outputLength = 0;\n        for (let i = 0; i < input.length; i++) {\n            const encoded = encode(input[i]);\n            output.push(encoded);\n            outputLength += encoded.length;\n        }\n        return concatBytes(encodeLength(outputLength, 192), ...output);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\nexports.encode = encode;\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([len + offset]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (typeof input === 'undefined' || input === null || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return {\n            data: decoded.data,\n            remainder: decoded.remainder.slice(),\n        };\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid RLP: remainder must be zero');\n    }\n    return decoded.data;\n}\nexports.decode = decode;\n/** Decode an input with RLP */\nfunction _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.subarray(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        }\n        else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n        }\n        return {\n            data,\n            remainder: input.subarray(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data,\n            remainder: input.subarray(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.subarray(length),\n        };\n    }\n    else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error('invalid RLP: encoded list too short');\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid RLP: total length is larger than the data');\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.subarray(totalLength),\n        };\n    }\n}\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === 'string') {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === 'number' || typeof v === 'bigint') {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nexports.utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes,\n};\nexports.RLP = { encode, decode };\n//# sourceMappingURL=index.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/BaseControllerV1.ts\nvar BaseControllerV1 = class {\n  /**\n   * Creates a BaseControllerV1 instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config = {}, state = {}) {\n    /**\n     * Default options used to configure this controller\n     */\n    this.defaultConfig = {};\n    /**\n     * Default state set on this controller\n     */\n    this.defaultState = {};\n    /**\n     * Determines if listeners are notified of state changes\n     */\n    this.disabled = false;\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"BaseController\";\n    this.internalConfig = this.defaultConfig;\n    this.internalState = this.defaultState;\n    this.internalListeners = [];\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns This controller instance.\n   */\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n  /**\n   * Retrieves current controller configuration options.\n   *\n   * @returns The current configuration.\n   */\n  get config() {\n    return this.internalConfig;\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return this.internalState;\n  }\n  /**\n   * Updates controller configuration.\n   *\n   * @param config - New configuration options.\n   * @param overwrite - Overwrite config instead of merging.\n   * @param fullUpdate - Boolean that defines if the update is partial or not.\n   */\n  configure(config, overwrite = false, fullUpdate = true) {\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key of Object.keys(this.internalConfig)) {\n        const value = this.internalConfig[key];\n        if (value !== void 0) {\n          this[key] = value;\n        }\n      }\n    } else {\n      for (const key of Object.keys(config)) {\n        if (this.internalConfig[key] !== void 0) {\n          const value = config[key];\n          this.internalConfig[key] = value;\n          this[key] = value;\n        }\n      }\n    }\n  }\n  /**\n   * Notifies all subscribed listeners of current state.\n   */\n  notify() {\n    if (this.disabled) {\n      return;\n    }\n    this.internalListeners.forEach((listener) => {\n      listener(this.internalState);\n    });\n  }\n  /**\n   * Adds new listener to be notified of state changes.\n   *\n   * @param listener - The callback triggered when state changes.\n   */\n  subscribe(listener) {\n    this.internalListeners.push(listener);\n  }\n  /**\n   * Removes existing listener from receiving state changes.\n   *\n   * @param listener - The callback to remove.\n   * @returns `true` if a listener is found and unsubscribed.\n   */\n  unsubscribe(listener) {\n    const index = this.internalListeners.findIndex((cb) => listener === cb);\n    index > -1 && this.internalListeners.splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Updates controller state.\n   *\n   * @param state - The new state.\n   * @param overwrite - Overwrite state instead of merging.\n   */\n  update(state, overwrite = false) {\n    this.internalState = overwrite ? Object.assign({}, state) : Object.assign({}, this.internalState, state);\n    this.notify();\n  }\n};\nvar BaseControllerV1_default = BaseControllerV1;\n\n\n\n\nexports.BaseControllerV1 = BaseControllerV1; exports.BaseControllerV1_default = BaseControllerV1_default;\n//# sourceMappingURL=chunk-FTHCJ6HY.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/ControllerMessenger.ts\nvar _actions, _events, _initialEventPayloadGetters, _eventPayloadCache;\nvar ControllerMessenger = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _actions, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _events, /* @__PURE__ */ new Map());\n    /**\n     * A map of functions for getting the initial event payload.\n     *\n     * Used only for events that represent state changes.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _initialEventPayloadGetters, /* @__PURE__ */ new Map());\n    /**\n     * A cache of selector return values for their respective handlers.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _eventPayloadCache, /* @__PURE__ */ new Map());\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw when a handler has been registered for this action type already.\n   * @template ActionType - A type union of Action type strings.\n   */\n  registerActionHandler(actionType, handler) {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).has(actionType)) {\n      throw new Error(\n        `A handler for ${actionType} has already been registered`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).set(actionType, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @template ActionType - A type union of Action type strings.\n   */\n  unregisterActionHandler(actionType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).delete(actionType);\n  }\n  /**\n   * Unregister all action handlers.\n   *\n   * This prevents all actions from being called.\n   */\n  clearActions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).clear();\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    const handler = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).get(actionType);\n    if (!handler) {\n      throw new Error(`A handler for ${actionType} has not been registered`);\n    }\n    return handler(...params);\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).set(eventType, getPayload);\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * Note that this method should never throw directly. Any errors from\n   * subscribers are captured and re-thrown in a timeout handler.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @template EventType - A type union of Event type strings.\n   */\n  publish(eventType, ...payload) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (subscribers) {\n      for (const [handler, selector] of subscribers.entries()) {\n        try {\n          if (selector) {\n            const previousValue = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).get(handler);\n            const newValue = selector(...payload);\n            if (newValue !== previousValue) {\n              _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, newValue);\n              handler(newValue, previousValue);\n            }\n          } else {\n            handler(...payload);\n          }\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          });\n        }\n      }\n    }\n  }\n  subscribe(eventType, handler, selector) {\n    let subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers) {\n      subscribers = /* @__PURE__ */ new Map();\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).set(eventType, subscribers);\n    }\n    subscribers.set(handler, selector);\n    if (selector) {\n      const getPayload = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).get(eventType);\n      if (getPayload) {\n        const initialValue = selector(...getPayload());\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, initialValue);\n      }\n    }\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw when the given event handler is not registered for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  unsubscribe(eventType, handler) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers || !subscribers.has(handler)) {\n      throw new Error(`Subscription not found for event: ${eventType}`);\n    }\n    const selector = subscribers.get(handler);\n    if (selector) {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).delete(handler);\n    }\n    subscribers.delete(handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  clearEventSubscriptions(eventType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).delete(eventType);\n  }\n  /**\n   * Clear all subscriptions.\n   *\n   * This will remove all subscribed handlers for all events.\n   */\n  clearSubscriptions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).clear();\n  }\n  /**\n   * Get a restricted controller messenger\n   *\n   * Returns a wrapper around the controller messenger instance that restricts access to actions\n   * and events. The provided allowlists grant the ability to call the listed actions and subscribe\n   * to the listed events. The \"name\" provided grants ownership of any actions and events under\n   * that namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - Controller messenger options.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   * @template Namespace - The namespace for this messenger. Typically this is the name of the controller or\n   * module that this messenger has been created for. The authority to publish events and register\n   * actions under this namespace is granted to this restricted messenger instance.\n   * @template AllowedAction - A type union of the 'type' string for any allowed actions.\n   * This must not include internal actions that are in the messenger's namespace.\n   * @template AllowedEvent - A type union of the 'type' string for any allowed events.\n   * This must not include internal events that are in the messenger's namespace.\n   * @returns The restricted controller messenger.\n   */\n  getRestricted({\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    return new (0, _chunkUJFCPTF3js.RestrictedControllerMessenger)({\n      controllerMessenger: this,\n      name,\n      allowedActions,\n      allowedEvents\n    });\n  }\n};\n_actions = new WeakMap();\n_events = new WeakMap();\n_initialEventPayloadGetters = new WeakMap();\n_eventPayloadCache = new WeakMap();\n\n\n\nexports.ControllerMessenger = ControllerMessenger;\n//# sourceMappingURL=chunk-G42723LG.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/BaseControllerV2.ts\nvar _immer = require('immer');\n_immer.enablePatches.call(void 0, );\nvar _internalState;\nvar BaseController = class {\n  /**\n   * Creates a BaseController instance.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - Controller messaging system.\n   * @param options.metadata - ControllerState metadata, describing how to \"anonymize\" the state, and which\n   * parts should be persisted.\n   * @param options.name - The name of the controller, used as a namespace for events and actions.\n   * @param options.state - Initial controller state.\n   */\n  constructor({\n    messenger,\n    metadata,\n    name,\n    state\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _internalState, void 0);\n    this.messagingSystem = messenger;\n    this.name = name;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, _immer.freeze.call(void 0, state, true));\n    this.metadata = metadata;\n    this.messagingSystem.registerActionHandler(\n      `${name}:getState`,\n      () => this.state\n    );\n    this.messagingSystem.registerInitialEventPayload({\n      eventType: `${name}:stateChange`,\n      getPayload: () => [this.state, []]\n    });\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState);\n  }\n  set state(_) {\n    throw new Error(\n      `Controller state cannot be directly mutated; use 'update' method instead.`\n    );\n  }\n  /**\n   * Updates controller state. Accepts a callback that is passed a draft copy\n   * of the controller state. If a value is returned, it is set as the new\n   * state. Otherwise, any changes made within that callback to the draft are\n   * applied to the controller state.\n   *\n   * @param callback - Callback for updating state, passed a draft state\n   * object. Return a new state object or mutate the draft to update state.\n   * @returns An object that has the next state, patches applied in the update and inverse patches to\n   * rollback the update.\n   */\n  update(callback) {\n    const [nextState, patches, inversePatches] = _immer.produceWithPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), callback);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n    return { nextState, patches, inversePatches };\n  }\n  /**\n   * Applies immer patches to the current state. The patches come from the\n   * update function itself and can either be normal or inverse patches.\n   *\n   * @param patches - An array of immer patches that are to be applied to make\n   * or undo changes.\n   */\n  applyPatches(patches) {\n    const nextState = _immer.applyPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), patches);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n  }\n  /**\n   * Prepares the controller for garbage collection. This should be extended\n   * by any subclasses to clean up any additional connections or events.\n   *\n   * The only cleanup performed here is to remove listeners. While technically\n   * this is not required to ensure this instance is garbage collected, it at\n   * least ensures this instance won't be responsible for preventing the\n   * listeners from being garbage collected.\n   */\n  destroy() {\n    this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`);\n  }\n};\n_internalState = new WeakMap();\nfunction getAnonymizedState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"anonymous\");\n}\nfunction getPersistentState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"persist\");\n}\nfunction deriveStateFromMetadata(state, metadata, metadataProperty) {\n  return Object.keys(state).reduce((derivedState, key) => {\n    try {\n      const stateMetadata = metadata[key];\n      if (!stateMetadata) {\n        throw new Error(`No metadata found for '${String(key)}'`);\n      }\n      const propertyMetadata = stateMetadata[metadataProperty];\n      const stateProperty = state[key];\n      if (typeof propertyMetadata === \"function\") {\n        derivedState[key] = propertyMetadata(stateProperty);\n      } else if (propertyMetadata) {\n        derivedState[key] = stateProperty;\n      }\n      return derivedState;\n    } catch (error) {\n      setTimeout(() => {\n        throw error;\n      });\n      return derivedState;\n    }\n  }, {});\n}\n\n\n\n\n\nexports.BaseController = BaseController; exports.getAnonymizedState = getAnonymizedState; exports.getPersistentState = getPersistentState;\n//# sourceMappingURL=chunk-IURK6TKD.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/RestrictedControllerMessenger.ts\nvar _controllerMessenger, _controllerName, _allowedActions, _allowedEvents, _isAllowedEvent, isAllowedEvent_fn, _isAllowedAction, isAllowedAction_fn, _isInCurrentNamespace, isInCurrentNamespace_fn;\nvar RestrictedControllerMessenger = class {\n  /**\n   * Constructs a restricted controller messenger\n   *\n   * The provided allowlists grant the ability to call the listed actions and subscribe to the\n   * listed events. The \"name\" provided grants ownership of any actions and events under that\n   * namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - The controller options.\n   * @param options.controllerMessenger - The controller messenger instance that is being wrapped.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   */\n  constructor({\n    controllerMessenger,\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    /**\n     * Determine whether the given event type is allowed. Event types are\n     * allowed if they are in the current namespace or on the list of\n     * allowed events.\n     *\n     * @param eventType - The event type to check.\n     * @returns Whether the event type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedEvent);\n    /**\n     * Determine whether the given action type is allowed. Action types\n     * are allowed if they are in the current namespace or on the list of\n     * allowed actions.\n     *\n     * @param actionType - The action type to check.\n     * @returns Whether the action type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedAction);\n    /**\n     * Determine whether the given name is within the current namespace.\n     *\n     * @param name - The name to check\n     * @returns Whether the name is within the current namespace\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isInCurrentNamespace);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerMessenger, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerName, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedActions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedEvents, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerMessenger, controllerMessenger);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerName, name);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedActions, allowedActions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedEvents, allowedEvents);\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * The action type this handler is registered under *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw if an action handler that is not in the current namespace is being registered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  registerActionHandler(action, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed registering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerActionHandler(action, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * The action type being unregistered *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unique identifier for this action.\n   * @throws Will throw if an action handler that is not in the current namespace is being unregistered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  unregisterActionHandler(action) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed unregistering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unregisterActionHandler(action);\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * The action type being called must be on the action allowlist.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of allowed Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedAction, isAllowedAction_fn).call(this, actionType)) {\n      throw new Error(`Action missing from allow list: ${actionType}`);\n    }\n    const response = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).call(\n      actionType,\n      ...params\n    );\n    return response;\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * The event type *must* be in the current namespace\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerInitialEventPayload({\n      eventType,\n      getPayload\n    });\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * The event type being published *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @throws Will throw if an event that is not in the current namespace is being published.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  publish(event, ...payload) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).publish(event, ...payload);\n  }\n  subscribe(event, handler, selector) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    if (selector) {\n      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler, selector);\n    }\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler);\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * The event type being unsubscribed to must be on the event allowlist.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw if the given event is not an allowed event for this controller messenger.\n   * @template EventType - A type union of allowed Event type strings.\n   */\n  unsubscribe(event, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unsubscribe(event, handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * The event type being cleared *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @throws Will throw if a subscription for an event that is not in the current namespace is being cleared.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  clearEventSubscriptions(event) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed clearing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).clearEventSubscriptions(event);\n  }\n};\n_controllerMessenger = new WeakMap();\n_controllerName = new WeakMap();\n_allowedActions = new WeakMap();\n_allowedEvents = new WeakMap();\n_isAllowedEvent = new WeakSet();\nisAllowedEvent_fn = function(eventType) {\n  const allowedEvents = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedEvents);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType) || allowedEvents !== null && allowedEvents.includes(eventType);\n};\n_isAllowedAction = new WeakSet();\nisAllowedAction_fn = function(actionType) {\n  const allowedActions = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedActions);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, actionType) || allowedActions !== null && allowedActions.includes(actionType);\n};\n_isInCurrentNamespace = new WeakSet();\nisInCurrentNamespace_fn = function(name) {\n  return name.startsWith(`${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:`);\n};\n\n\n\nexports.RestrictedControllerMessenger = RestrictedControllerMessenger;\n//# sourceMappingURL=chunk-UJFCPTF3.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkFTHCJ6HYjs = require('./chunk-FTHCJ6HY.js');\n\n\n\n\nvar _chunkIURK6TKDjs = require('./chunk-IURK6TKD.js');\n\n\nvar _chunkG42723LGjs = require('./chunk-G42723LG.js');\n\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\n\n\nexports.BaseController = _chunkIURK6TKDjs.BaseController; exports.BaseControllerV1 = _chunkFTHCJ6HYjs.BaseControllerV1; exports.ControllerMessenger = _chunkG42723LGjs.ControllerMessenger; exports.RestrictedControllerMessenger = _chunkUJFCPTF3js.RestrictedControllerMessenger; exports.getAnonymizedState = _chunkIURK6TKDjs.getAnonymizedState; exports.getPersistentState = _chunkIURK6TKDjs.getPersistentState;\n//# sourceMappingURL=index.js.map","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar abi = require('ethjs-abi'); // eslint-disable-line\nvar EthFilter = require('@metamask/ethjs-filter'); // eslint-disable-line\nvar getKeys = require('@metamask/ethjs-util').getKeys; // eslint-disable-line\nvar keccak256 = require('js-sha3').keccak_256; // eslint-disable-line\nvar promiseToCallback = require('promise-to-callback');\nvar hasTransactionObject = require('./has-tx-object');\nmodule.exports = Contract;\nfunction Contract() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var self = this;\n  self.abi = opts.contractABI || [];\n  self.query = opts.query;\n  self.address = opts.address || '0x';\n  self.bytecode = opts.contractBytecode || '0x';\n  self.defaultTxObject = opts.contractDefaultTxObject || {};\n  self.filters = new EthFilter(self.query);\n  getCallableMethodsFromABI(self.abi).forEach(function (methodObject) {\n    if (methodObject.type === 'function') {\n      self[methodObject.name] = createContractFunction(methodObject);\n    } else if (methodObject.type === 'event') {\n      self[methodObject.name] = createContractEvent(methodObject);\n    }\n  });\n  function createContractEvent(methodObject) {\n    return function contractEvent() {\n      var methodArgs = [].slice.call(arguments); // eslint-disable-line\n\n      var filterInputTypes = getKeys(methodObject.inputs, 'type', false);\n      var filterTopic = \"0x\" + keccak256(methodObject.name + \"(\" + filterInputTypes.join(',') + \")\");\n      var filterTopcis = [filterTopic];\n      var argsObject = Object.assign({}, methodArgs[0]) || {};\n      var defaultFilterObject = Object.assign({}, methodArgs[0] || {}, {\n        to: self.address,\n        topics: filterTopcis\n      });\n      var filterOpts = Object.assign({}, argsObject, {\n        decoder: function decoder(logData) {\n          return abi.decodeEvent(methodObject, logData, filterTopcis);\n        },\n        defaultFilterObject: defaultFilterObject\n      });\n      return new self.filters.Filter(filterOpts);\n    };\n  }\n  function createContractFunction(methodObject) {\n    return function contractFunction() {\n      var methodCallback; // eslint-disable-line\n      var methodArgs = [].slice.call(arguments); // eslint-disable-line\n      if (typeof methodArgs[methodArgs.length - 1] === 'function') {\n        methodCallback = methodArgs.pop();\n      }\n      var promise = performCall({\n        methodObject: methodObject,\n        methodArgs: methodArgs\n      });\n      if (methodCallback) {\n        return promiseToCallback(promise)(methodCallback);\n      }\n      return promise;\n    };\n  }\n  function performCall(_x) {\n    return _performCall.apply(this, arguments);\n  }\n  function _performCall() {\n    _performCall = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(_ref) {\n      var methodObject, methodArgs, queryMethod, providedTxObject, methodTxObject, queryResult, decodedMethodResult, decodingError;\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            methodObject = _ref.methodObject, methodArgs = _ref.methodArgs;\n            queryMethod = 'call'; // eslint-disable-line\n            providedTxObject = {}; // eslint-disable-line\n            if (hasTransactionObject(methodArgs)) providedTxObject = methodArgs.pop();\n            methodTxObject = Object.assign({}, self.defaultTxObject, providedTxObject, {\n              to: self.address\n            });\n            methodTxObject.data = abi.encodeMethod(methodObject, methodArgs);\n            if (methodObject.constant === false) {\n              queryMethod = 'sendTransaction';\n            }\n            _context.next = 9;\n            return self.query[queryMethod](methodTxObject);\n          case 9:\n            queryResult = _context.sent;\n            if (!(queryMethod === 'call')) {\n              _context.next = 20;\n              break;\n            }\n            _context.prev = 11;\n            decodedMethodResult = abi.decodeMethod(methodObject, queryResult);\n            return _context.abrupt(\"return\", decodedMethodResult);\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](11);\n            decodingError = new Error(\"[ethjs-contract] while formatting incoming raw call data \" + JSON.stringify(queryResult) + \" \" + _context.t0);\n            throw decodingError;\n          case 20:\n            return _context.abrupt(\"return\", queryResult);\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[11, 16]]);\n    }));\n    return _performCall.apply(this, arguments);\n  }\n}\nfunction getCallableMethodsFromABI(contractABI) {\n  return contractABI.filter(function (json) {\n    return (json.type === 'function' || json.type === 'event') && json.name.length > 0;\n  });\n}","\"use strict\";\n\nvar txObjectProperties = ['from', 'to', 'data', 'value', 'gasPrice', 'gas'];\nmodule.exports = hasTransactionObject;\nfunction hasTransactionObject(args) {\n  // bad/empty args: bad\n  if (!Array.isArray(args) || args.length === 0) {\n    return false;\n  }\n  var lastArg = args[args.length - 1];\n  // missing or non-object: bad\n  if (!lastArg) return false;\n  if (typeof lastArg !== 'object') {\n    return false;\n  }\n  // empty object: good\n  if (Object.keys(lastArg).length === 0) {\n    return true;\n  }\n  // txParams object: good\n  var keys = Object.keys(lastArg);\n  var hasMatchingKeys = txObjectProperties.some(function (value) {\n    return keys.includes(value);\n  });\n  if (hasMatchingKeys) {\n    return true;\n  }\n  // no match\n  return false;\n}","\"use strict\";\n\nvar abi = require('ethjs-abi'); // eslint-disable-line\nvar keccak256 = require('js-sha3').keccak_256; // eslint-disable-line\nvar EthFilter = require('@metamask/ethjs-filter'); // eslint-disable-line\nvar getKeys = require('@metamask/ethjs-util').getKeys; // eslint-disable-line\nvar Contract = require('./contract');\nvar hasTransactionObject = require('./has-tx-object');\nmodule.exports = EthContract;\nfunction EthContract(query) {\n  return function contractFactory(contractABI, contractBytecode, contractDefaultTxObject) {\n    // validate params\n    if (!Array.isArray(contractABI)) {\n      throw new Error(\"[ethjs-contract] Contract ABI must be type Array, got type \" + typeof contractABI);\n    }\n    if (typeof contractBytecode !== 'undefined' && typeof contractBytecode !== 'string') {\n      throw new Error(\"[ethjs-contract] Contract bytecode must be type String, got type \" + typeof contractBytecode);\n    }\n    if (typeof contractDefaultTxObject !== 'undefined' && typeof contractDefaultTxObject !== 'object') {\n      throw new Error(\"[ethjs-contract] Contract default tx object must be type Object, got type \" + typeof contractABI);\n    }\n\n    // build contract object\n    var output = {};\n    output.at = function contractAtAddress(address) {\n      return new Contract({\n        address: address,\n        query: query,\n        contractBytecode: contractBytecode,\n        contractDefaultTxObject: contractDefaultTxObject,\n        contractABI: contractABI\n      });\n    };\n    output[\"new\"] = function newContract() {\n      var providedTxObject = {}; // eslint-disable-line\n      var newMethodCallback = null; // eslint-disable-line\n      var newMethodArgs = [].slice.call(arguments); // eslint-disable-line\n      if (typeof newMethodArgs[newMethodArgs.length - 1] === 'function') newMethodCallback = newMethodArgs.pop();\n      if (hasTransactionObject(newMethodArgs)) providedTxObject = newMethodArgs.pop();\n      var constructorMethod = getConstructorFromABI(contractABI);\n      var assembleTxObject = Object.assign({}, contractDefaultTxObject, providedTxObject);\n\n      // set contract deploy bytecode\n      if (contractBytecode) {\n        assembleTxObject.data = contractBytecode;\n      }\n\n      // append encoded constructor arguments\n      if (constructorMethod) {\n        var constructorBytecode = abi.encodeParams(getKeys(constructorMethod.inputs, 'type'), newMethodArgs).substring(2); // eslint-disable-line\n        assembleTxObject.data = \"\" + assembleTxObject.data + constructorBytecode;\n      }\n      return newMethodCallback ? query.sendTransaction(assembleTxObject, newMethodCallback) : query.sendTransaction(assembleTxObject);\n    };\n    return output;\n  };\n}\nfunction getConstructorFromABI(contractABI) {\n  return contractABI.filter(function (json) {\n    return json.type === 'constructor';\n  })[0];\n}","import { cloneDeep } from 'lodash';\nimport { hasProperty, isObject } from '@metamask/utils';\n\nexport const version = 78;\n\n/**\n * The`@metamask/phishing-controller` state was updated in v2.0.0.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    !hasProperty(state, 'PhishingController') ||\n    !isObject(state.PhishingController)\n  ) {\n    return state;\n  }\n  const { PhishingController } = state;\n\n  delete PhishingController.phishing;\n  delete PhishingController.lastFetched;\n\n  return state;\n}\n","\"use strict\";\n\nfunction constructFilter(filterName, query) {\n  function Filter(options) {\n    var self = this;\n    self.filterId = null;\n    self.options = Object.assign({\n      delay: 300,\n      decoder: function decodeData(data) {\n        return data;\n      },\n      defaultFilterObject: {}\n    }, options || {});\n    self.watchers = {};\n    self.interval = setInterval(function () {\n      if (self.filterId !== null && Object.keys(self.watchers).length > 0) {\n        query.getFilterChanges(self.filterId, function (changeError, changeResult) {\n          var decodedChangeResults = [];\n          var decodingError = null; // eslint-disable-line\n\n          if (!changeError) {\n            try {\n              changeResult.forEach(function (log, logIndex) {\n                decodedChangeResults[logIndex] = changeResult[logIndex];\n                if (typeof changeResult[logIndex] === 'object') {\n                  decodedChangeResults[logIndex].data = self.options.decoder(decodedChangeResults[logIndex].data);\n                }\n              });\n            } catch (decodingErrorMesage) {\n              decodingError = new Error(\"[ethjs-filter] while decoding filter change event data from RPC '\" + JSON.stringify(decodedChangeResults) + \"': \" + decodingErrorMesage);\n            }\n          }\n          Object.keys(self.watchers).forEach(function (id) {\n            var watcher = self.watchers[id];\n            if (watcher.stop === true) {\n              delete self.watchers[id];\n              return;\n            }\n            if (decodingError) {\n              watcher.callback(decodingError, null);\n            } else if (changeError) {\n              watcher.callback(changeError, null);\n            } else if (Array.isArray(decodedChangeResults) && changeResult.length > 0) {\n              watcher.callback(changeError, decodedChangeResults);\n            }\n          });\n        });\n      }\n    }, self.options.delay);\n  }\n  Filter.prototype.at = function atFilter(filterId) {\n    var self = this;\n    self.filterId = filterId;\n  };\n  Filter.prototype.watch = function watchFilter(watchCallbackInput) {\n    var callback = watchCallbackInput || function () {}; // eslint-disable-line\n    var self = this;\n    var id = Math.random().toString(36).substring(7);\n    self.watchers[id] = {\n      callback: callback,\n      stop: false,\n      stopWatching: function stopWatching() {\n        self.watchers[id].stop = true;\n      }\n    };\n    return self.watchers[id];\n  };\n  Filter.prototype.uninstall = function uninstallFilter(cb) {\n    var self = this;\n    var callback = cb || null;\n    self.watchers = Object.assign({});\n    clearInterval(self.interval);\n    var prom = new Promise(function (resolve, reject) {\n      query.uninstallFilter(self.filterId, function (uninstallError, uninstallResilt) {\n        if (uninstallError) {\n          reject(uninstallError);\n        } else {\n          resolve(uninstallResilt);\n        }\n      });\n    });\n    if (callback) {\n      prom.then(function (res) {\n        return callback(null, res);\n      })[\"catch\"](function (err) {\n        return callback(err, null);\n      });\n    }\n    return callback ? null : prom;\n  };\n  Filter.prototype[\"new\"] = function newFilter() {\n    var callback = null; // eslint-disable-line\n    var self = this;\n    var filterInputs = [];\n    var args = [].slice.call(arguments); // eslint-disable-line\n    // pop callback if provided\n    if (typeof args[args.length - 1] === 'function') {\n      callback = args.pop();\n    }\n\n    // if a param object was presented, push that into the inputs\n    if (filterName === 'Filter') {\n      filterInputs.push(Object.assign(self.options.defaultFilterObject, args[args.length - 1] || {}));\n    }\n    var prom = new Promise(function (resolve, reject) {\n      // add complex callback\n      filterInputs.push(function (setupError, filterId) {\n        if (!setupError) {\n          self.filterId = filterId;\n          resolve(filterId);\n        } else {\n          reject(setupError);\n        }\n      });\n\n      // apply filter, call new.. filter method\n      // eslint-disable-next-line prefer-spread\n      query[\"new\" + filterName].apply(query, filterInputs);\n    });\n    if (callback) {\n      prom.then(function (res) {\n        return callback(null, res);\n      })[\"catch\"](function (err) {\n        return callback(err, null);\n      });\n    }\n    return callback ? null : prom;\n  };\n  return Filter;\n}\n\n/**\n * EthFilter constructor, intakes a query, helps manage filter event polling\n *\n * @method EthFilter\n * @param {Object} query the `ethjs-query` or `eth-query` object\n * @returns {Object} output an EthFilter instance\n * @throws error if new is not used\n */\n\nfunction EthFilter(query) {\n  var self = this;\n  if (!(self instanceof EthFilter)) {\n    throw new Error('the EthFilter object must be instantiated with `new` flag.. (e.g. `const filters = new EthFilter(query);`)');\n  }\n  if (typeof query !== 'object') {\n    throw new Error('the EthFilter object must be instantiated with an EthQuery instance (e.g. `const filters = new EthFilter(new EthQuery(provider));`). See github.com/ethjs/ethjs-query for more details..');\n  }\n  self.Filter = constructFilter('Filter', query);\n  self.BlockFilter = constructFilter('BlockFilter', query);\n  self.PendingTransactionFilter = constructFilter('PendingTransactionFilter', query);\n}\n\n// export EthFilter\nmodule.exports = EthFilter;","\"use strict\";\n\nvar numberToBN = require('@metamask/number-to-bn');\nvar schema = require('ethjs-schema');\nvar _require = require('@metamask/ethjs-util'),\n  arrayContainsArray = _require.arrayContainsArray,\n  getBinarySize = _require.getBinarySize,\n  padToEven = _require.padToEven;\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Format quantity values, either encode to hex or decode to BigNumber\n * should intake null, stringNumber, number, BN\n *\n * @method formatQuantity\n * @param {String|BigNumber|Number} value quantity or tag to convert\n * @param {Boolean} encode to hex or decode to BigNumber\n * @returns {Optional} output to BigNumber or string\n * @throws error if value is a float\n */\nfunction formatQuantity(value, encode, pad) {\n  if (['string', 'number', 'object'].indexOf(typeof value) === -1 || value === null) {\n    return value;\n  }\n  var numberValue = numberToBN(value);\n  var numPadding = pad && numberValue.toString(16).length % 2 ? '0' : '';\n  if (numberToBN(value).isNeg()) {\n    throw new Error(\"[ethjs-format] while formatting quantity '\" + numberValue.toString(10) + \"', invalid negative number. Number must be positive or zero.\");\n  }\n  return encode ? \"0x\" + numPadding + numberValue.toString(16) : numberValue;\n}\n\n/**\n * Format quantity or tag, if tag bypass return, else format quantity\n * should intake null, stringNumber, number, BN, string tag\n *\n * @method formatQuantityOrTag\n * @param {String|BigNumber|Number} value quantity or tag to convert\n * @param {Boolean} encode encode the number to hex or decode to BigNumber\n * @returns {Object|String} output to BigNumber or string\n * @throws error if value is a float\n */\nfunction formatQuantityOrTag(value, encode) {\n  var output = value; // eslint-disable-line\n\n  // if the value is a tag, bypass\n  if (schema.tags.indexOf(value) === -1) {\n    output = formatQuantity(value, encode);\n  }\n  return output;\n}\n\n/**\n * FormatData under strict conditions hex prefix\n *\n * @method formatData\n * @param {String} value the bytes data to be formatted\n * @param {Number} byteLength the required byte length (usually 20 or 32)\n * @returns {String} output output formatted data\n * @throws error if minimum length isnt met\n */\nfunction formatData(value, byteLength) {\n  var output = value; // eslint-disable-line\n  var outputByteLength = 0; // eslint-disable-line\n\n  // prefix only under strict conditions, else bypass\n  if (typeof value === 'string') {\n    output = \"0x\" + padToEven(stripHexPrefix(value));\n    outputByteLength = getBinarySize(output);\n  }\n\n  // format double padded zeros.\n  if (output === '0x00') {\n    output = '0x0';\n  }\n\n  // throw if bytelength is not correct\n  if (typeof byteLength === 'number' && value !== null && output !== '0x' && output !== '0x0' // support empty values\n  && (!/^[0-9A-Fa-f]+$/.test(stripHexPrefix(output)) || outputByteLength !== 2 + byteLength * 2)) {\n    throw new Error(\"[ethjs-format] hex string '\" + output + \"' must be an alphanumeric \" + (2 + byteLength * 2) + \" utf8 byte hex (chars: a-fA-F) string, is \" + outputByteLength + \" bytes\");\n  }\n  return output;\n}\n\n/**\n * Format object, even with random RPC caviets\n *\n * @method formatObject\n * @param {String|Array} formatter the unit to convert to, default ether\n * @param {Object} value the object value\n * @param {Boolean} encode encode to hex or decode to BigNumber\n * @returns {Object} output object\n * @throws error if value is a float\n */\nfunction formatObject(formatter, value, encode) {\n  var output = Object.assign({}, value); // eslint-disable-line\n  var formatObject = null; // eslint-disable-line\n\n  // if the object is a string flag, then retreive the object\n  if (typeof formatter === 'string') {\n    if (formatter === 'Boolean|EthSyncing') {\n      formatObject = Object.assign({}, schema.objects.EthSyncing);\n    } else if (formatter === 'DATA|Transaction') {\n      formatObject = Object.assign({}, schema.objects.Transaction);\n    } else {\n      formatObject = Object.assign({}, schema.objects[formatter]);\n    }\n  }\n\n  // check if all required data keys are fulfilled\n  if (!arrayContainsArray(Object.keys(value), formatObject.__required)) {\n    // eslint-disable-line\n    throw new Error(\"[ethjs-format] object \" + JSON.stringify(value) + \" must contain properties: \" + formatObject.__required.join(', ')); // eslint-disable-line\n  }\n\n  // assume formatObject is an object, go through keys and format each\n  Object.keys(formatObject).forEach(function (valueKey) {\n    if (valueKey !== '__required' && typeof value[valueKey] !== 'undefined') {\n      output[valueKey] = format(formatObject[valueKey], value[valueKey], encode);\n    }\n  });\n  return output;\n}\n\n/**\n * Format array\n *\n * @method formatArray\n * @param {String|Array} formatter the unit to convert to, default ether\n * @param {Object} value the value in question\n * @param {Boolean} encode encode to hex or decode to BigNumber\n * @param {Number} lengthRequirement the required minimum array length\n * @returns {Object} output object\n * @throws error if minimum length isnt met\n */\nfunction formatArray(formatter, value, encode, lengthRequirement) {\n  var output = value.slice(); // eslint-disable-line\n  var formatObject = formatter; // eslint-disable-line\n\n  // if the formatter is an array or data, then make format object an array data\n  if (formatter === 'Array|DATA') {\n    formatObject = ['D'];\n  }\n\n  // if formatter is a FilterChange and acts like a BlockFilter\n  // or PendingTx change format object to tx hash array\n  if (formatter === 'FilterChange' && typeof value[0] === 'string') {\n    formatObject = ['D32'];\n  }\n\n  // enforce minimum value length requirements\n  if (encode === true && typeof lengthRequirement === 'number' && value.length < lengthRequirement) {\n    throw new Error(\"array \" + JSON.stringify(value) + \" must contain at least \" + lengthRequirement + \" params, but only contains \" + value.length + \".\"); // eslint-disable-line\n  }\n\n  // make new array, avoid mutation\n  formatObject = formatObject.slice();\n\n  // assume formatObject is an object, go through keys and format each\n  value.forEach(function (valueKey, valueIndex) {\n    // use key zero as formatter for all values, unless otherwise specified\n    var formatObjectKey = 0; // eslint-disable-line\n\n    // if format array is exact, check each argument against formatter argument\n    if (formatObject.length > 1) {\n      formatObjectKey = valueIndex;\n    }\n    output[valueIndex] = format(formatObject[formatObjectKey], valueKey, encode);\n  });\n  return output;\n}\n\n/**\n * Format various kinds of data to RPC spec or into digestable JS objects\n *\n * @method format\n * @param {String|Array} formatter the data formatter\n * @param {String|Array|Object|Null|Number} value the data value input\n * @param {Boolean} encode encode to hex or decode to BigNumbers, Strings, Booleans, Null\n * @param {Number} lengthRequirement the minimum data length requirement\n * @throws error if minimum length isnt met\n */\nfunction format(formatter, value, encode, lengthRequirement) {\n  var output = value; // eslint-disable-line\n\n  // if formatter is quantity or quantity or tag\n  if (formatter === 'Q') {\n    output = formatQuantity(value, encode);\n  } else if (formatter === 'QP') {\n    output = formatQuantity(value, encode, true);\n  } else if (formatter === 'Q|T') {\n    output = formatQuantityOrTag(value, encode);\n  } else if (formatter === 'D') {\n    output = formatData(value); // dont format data flagged objects like compiler output\n  } else if (formatter === 'D20') {\n    output = formatData(value, 20); // dont format data flagged objects like compiler output\n  } else if (formatter === 'D32') {\n    output = formatData(value, 32); // dont format data flagged objects like compiler output\n  } else if (typeof value === 'object'\n  // if value is an object or array\n  && value !== null && Array.isArray(value) === false) {\n    output = formatObject(formatter, value, encode);\n  } else if (Array.isArray(value)) {\n    output = formatArray(formatter, value, encode, lengthRequirement);\n  }\n  return output;\n}\n\n/**\n * Format RPC inputs generally to the node or TestRPC\n *\n * @method formatInputs\n * @param {Object} method the data formatter\n * @param {Array} inputs the data inputs\n * @returns {Array} output the formatted inputs array\n * @throws error if minimum length isnt met\n */\nfunction formatInputs(method, inputs) {\n  return format(schema.methods[method][0], inputs, true, schema.methods[method][2]);\n}\n\n/**\n * Format RPC outputs generally from the node or TestRPC\n *\n * @method formatOutputs\n * @param {Object} method the data formatter\n * @param {Array|String|Null|Boolean|Object} outputs the data inputs\n * @returns {Array|String|Null|Boolean|Object} output the formatted data\n */\nfunction formatOutputs(method, outputs) {\n  return format(schema.methods[method][1], outputs, false);\n}\n\n// export formatters\nmodule.exports = {\n  schema: schema,\n  formatQuantity: formatQuantity,\n  formatQuantityOrTag: formatQuantityOrTag,\n  formatObject: formatObject,\n  formatArray: formatArray,\n  format: format,\n  formatInputs: formatInputs,\n  formatOutputs: formatOutputs\n};","\"use strict\";\n\nvar format = require('@metamask/ethjs-format');\nvar EthRPC = require('@metamask/ethjs-rpc');\nvar promiseToCallback = require('promise-to-callback');\nmodule.exports = Eth;\nfunction Eth(provider, options) {\n  var self = this;\n  var optionsObject = options || {};\n  if (!(this instanceof Eth)) {\n    throw new Error('[ethjs-query] the Eth object requires the \"new\" flag in order to function normally (i.e. `const eth = new Eth(provider);`).');\n  }\n  if (typeof provider !== 'object') {\n    throw new Error(\"[ethjs-query] the Eth object requires that the first input 'provider' must be an object, got '\" + typeof provider + \"' (i.e. 'const eth = new Eth(provider);')\");\n  }\n  self.options = Object.assign({\n    debug: optionsObject.debug || false,\n    logger: optionsObject.logger || console,\n    jsonSpace: optionsObject.jsonSpace || 0\n  });\n  self.rpc = new EthRPC(provider);\n  self.setProvider = self.rpc.setProvider;\n}\nEth.prototype.log = function log(message) {\n  var self = this;\n  if (self.options.debug) self.options.logger.log(\"[ethjs-query log] \" + message);\n};\nObject.keys(format.schema.methods).forEach(function (rpcMethodName) {\n  Object.defineProperty(Eth.prototype, rpcMethodName.replace('eth_', ''), {\n    enumerable: true,\n    value: generateFnFor(rpcMethodName, format.schema.methods[rpcMethodName])\n  });\n});\nfunction generateFnFor(rpcMethodName, methodObject) {\n  return function outputMethod() {\n    var callback = null; // eslint-disable-line\n    var inputs = null; // eslint-disable-line\n    var inputError = null; // eslint-disable-line\n    var self = this;\n    var args = [].slice.call(arguments); // eslint-disable-line\n    var protoMethodName = rpcMethodName.replace('eth_', ''); // eslint-disable-line\n\n    if (args.length > 0 && typeof args[args.length - 1] === 'function') {\n      callback = args.pop();\n    }\n    var promise = performCall.call(this);\n\n    // if callback provided, convert promise to callback\n    if (callback) {\n      return promiseToCallback(promise)(callback);\n    }\n\n    // only return promise if no callback provided\n    return promise;\n    function performCall() {\n      var _this = this;\n      return new Promise(function (resolve, reject) {\n        // validate arg length\n        if (args.length < methodObject[2]) {\n          reject(new Error(\"[ethjs-query] method '\" + protoMethodName + \"' requires at least \" + methodObject[2] + \" input (format type \" + methodObject[0][0] + \"), \" + args.length + \" provided. For more information visit: https://github.com/ethereum/wiki/wiki/JSON-RPC#\" + rpcMethodName.toLowerCase()));\n          return;\n        }\n        if (args.length > methodObject[0].length) {\n          reject(new Error(\"[ethjs-query] method '\" + protoMethodName + \"' requires at most \" + methodObject[0].length + \" params, \" + args.length + \" provided '\" + JSON.stringify(args, null, self.options.jsonSpace) + \"'. For more information visit: https://github.com/ethereum/wiki/wiki/JSON-RPC#\" + rpcMethodName.toLowerCase()));\n          return;\n        }\n\n        // set default block\n        if (methodObject[3] && args.length < methodObject[3]) {\n          args.push('latest');\n        }\n\n        // format inputs\n        _this.log(\"attempting method formatting for '\" + protoMethodName + \"' with inputs \" + JSON.stringify(args, null, _this.options.jsonSpace));\n        try {\n          inputs = format.formatInputs(rpcMethodName, args);\n          _this.log(\"method formatting success for '\" + protoMethodName + \"' with formatted result: \" + JSON.stringify(inputs, null, _this.options.jsonSpace));\n        } catch (formattingError) {\n          reject(new Error(\"[ethjs-query] while formatting inputs '\" + JSON.stringify(args, null, _this.options.jsonSpace) + \"' for method '\" + protoMethodName + \"' error: \" + formattingError));\n          return;\n        }\n\n        // perform rpc call\n        _this.rpc.sendAsync({\n          method: rpcMethodName,\n          params: inputs\n        }).then(function (result) {\n          // format result\n          _this.log(\"attempting method formatting for '\" + protoMethodName + \"' with raw outputs: \" + JSON.stringify(result, null, _this.options.jsonSpace));\n          var methodOutputs = format.formatOutputs(rpcMethodName, result);\n          _this.log(\"method formatting success for '\" + protoMethodName + \"' formatted result: \" + JSON.stringify(methodOutputs, null, _this.options.jsonSpace));\n          resolve(methodOutputs);\n        })[\"catch\"](function (error) {\n          reject(error);\n        });\n      });\n    }\n  };\n}","\"use strict\";\n\nvar promiseToCallback = require('promise-to-callback');\nmodule.exports = EthRPC;\n\n/**\n * Constructs the EthRPC instance\n *\n * @method EthRPC\n * @param {Object} cprovider the eth rpc provider web3 standard..\n * @param {Object} options the options, if any\n * @returns {Object} ethrpc instance\n */\nfunction EthRPC(cprovider, options) {\n  var self = this;\n  var optionsObject = options || {};\n  if (!(this instanceof EthRPC)) {\n    throw new Error('[ethjs-rpc] the EthRPC object requires the \"new\" flag in order to function normally (i.e. `const eth = new EthRPC(provider);`).');\n  }\n  self.options = Object.assign({\n    jsonSpace: optionsObject.jsonSpace || 0,\n    max: optionsObject.max || 9999999999999\n  });\n  self.idCounter = Math.floor(Math.random() * self.options.max);\n  self.setProvider = function (provider) {\n    if (typeof provider !== 'object') {\n      throw new Error(\"[ethjs-rpc] the EthRPC object requires that the first input 'provider' must be an object, got '\" + typeof provider + \"' (i.e. 'const eth = new EthRPC(provider);')\");\n    }\n    self.currentProvider = provider;\n  };\n  self.setProvider(cprovider);\n}\n\n/**\n * The main send async method\n *\n * @method sendAsync\n * @param {Object} payload the rpc payload object\n * @param {Function} cb the async standard callback\n * @callback {Object|Array|Boolean|String} vary result instance output\n */\nEthRPC.prototype.sendAsync = function sendAsync(payload, callback) {\n  var self = this;\n  self.idCounter = self.idCounter % self.options.max;\n  var parsedPayload = createPayload(payload, self.idCounter++);\n  var promise = new Promise(function (resolve, reject) {\n    self.currentProvider.sendAsync(parsedPayload, function (err, response) {\n      var responseObject = response || {};\n      if (err || responseObject.error) {\n        var payloadErrorMessage = \"[ethjs-rpc] \" + (responseObject.error && 'rpc' || '') + \" error with payload \" + JSON.stringify(parsedPayload, null, self.options.jsonSpace) + \" \" + (err ? String(err) : JSON.stringify(responseObject.error, null, self.options.jsonSpace));\n        var payloadError = new Error(payloadErrorMessage);\n        payloadError.value = err || responseObject.error;\n        reject(payloadError);\n        return;\n      }\n      resolve(responseObject.result);\n    });\n  });\n  if (callback) {\n    // connect promise resolve handlers to callback\n    return promiseToCallback(promise)(callback);\n  }\n\n  // only return promise if no callback specified\n  return promise;\n};\n\n/**\n * A simple create payload method\n *\n * @method createPayload\n * @param {Object} data the rpc payload data\n * @param {String} id the rpc data payload ID\n * @returns {Object} payload the completed payload object\n */\nfunction createPayload(data, id) {\n  return Object.assign({}, {\n    id: id,\n    jsonrpc: '2.0',\n    params: []\n  }, data);\n}","\"use strict\";\n\nvar isHexPrefixed = require('is-hex-prefixed');\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Pads a `String` to have an even length\n * @param {String} value\n * @return {String} output\n */\nfunction padToEven(value) {\n  var a = value; // eslint-disable-line\n\n  if (typeof a !== 'string') {\n    throw new Error(\"[ethjs-util] while padding to even, value must be string, is currently \" + typeof a + \", while padToEven.\");\n  }\n  if (a.length % 2) {\n    a = \"0\" + a;\n  }\n  return a;\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nfunction intToHex(i) {\n  var hex = i.toString(16); // eslint-disable-line\n\n  return \"0x\" + hex;\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n  return Buffer.from(padToEven(hex.slice(2)), 'hex');\n}\n\n/**\n * Get the binary size of a string\n * @param {String} str\n * @return {Number}\n */\nfunction getBinarySize(str) {\n  if (typeof str !== 'string') {\n    throw new Error(\"[ethjs-util] while getting binary size, method getBinarySize requires input 'str' to be type String, got '\" + typeof str + \"'.\");\n  }\n  return Buffer.byteLength(str, 'utf8');\n}\n\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param {array} superset\n * @param {array} subset\n *\n * @returns {boolean}\n */\nfunction arrayContainsArray(superset, subset, some) {\n  if (Array.isArray(superset) !== true) {\n    throw new Error(\"[ethjs-util] method arrayContainsArray requires input 'superset' to be an array got type '\" + typeof superset + \"'\");\n  }\n  if (Array.isArray(subset) !== true) {\n    throw new Error(\"[ethjs-util] method arrayContainsArray requires input 'subset' to be an array got type '\" + typeof subset + \"'\");\n  }\n  return subset[Boolean(some) && 'some' || 'every'](function (value) {\n    return superset.indexOf(value) >= 0;\n  });\n}\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toUtf8(hex) {\n  var bufferValue = Buffer.from(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');\n  return bufferValue.toString('utf8');\n}\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toAscii(hex) {\n  var str = ''; // eslint-disable-line\n  var i = 0,\n    l = hex.length; // eslint-disable-line\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n  return str;\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n  var str = Buffer.from(stringValue, 'utf8');\n  return \"0x\" + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromAscii(stringValue) {\n  var hex = ''; // eslint-disable-line\n  for (var i = 0; i < stringValue.length; i++) {\n    // eslint-disable-line\n    var code = stringValue.charCodeAt(i);\n    var n = code.toString(16);\n    hex += n.length < 2 ? \"0\" + n : n;\n  }\n  return \"0x\" + hex;\n}\n\n/**\n * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]\n *\n * @method getKeys get specific key from inner object array of objects\n * @param {String} params\n * @param {String} key\n * @param {Boolean} allowEmpty\n * @returns {Array} output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n  if (!Array.isArray(params)) {\n    throw new Error(\"[ethjs-util] method getKeys expecting type Array as 'params' input, got '\" + typeof params + \"'\");\n  }\n  if (typeof key !== 'string') {\n    throw new Error(\"[ethjs-util] method getKeys expecting type String for input 'key' got '\" + typeof key + \"'.\");\n  }\n  var result = []; // eslint-disable-line\n\n  for (var i = 0; i < params.length; i++) {\n    // eslint-disable-line\n    var value = params[i][key]; // eslint-disable-line\n    if (allowEmpty && !value) {\n      value = '';\n    } else if (typeof value !== 'string') {\n      throw new Error('invalid abi');\n    }\n    result.push(value);\n  }\n  return result;\n}\n\n/**\n * Is the string a hex string.\n *\n * @method check if string is hex string of specific length\n * @param {String} value\n * @param {Number} length\n * @returns {Boolean} output the string is a hex string\n */\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\nmodule.exports = {\n  arrayContainsArray: arrayContainsArray,\n  intToBuffer: intToBuffer,\n  getBinarySize: getBinarySize,\n  isHexPrefixed: isHexPrefixed,\n  stripHexPrefix: stripHexPrefix,\n  padToEven: padToEven,\n  intToHex: intToHex,\n  fromAscii: fromAscii,\n  fromUtf8: fromUtf8,\n  toAscii: toAscii,\n  toUtf8: toUtf8,\n  getKeys: getKeys,\n  isHexString: isHexString\n};","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _chunk2XKEAKQGjs = require('./chunk-2XKEAKQG.js');\n\n\nvar _chunk76FONEDAjs = require('./chunk-76FONEDA.js');\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/helpers/GasFeePoller.ts\nvar _ethquery = require('@metamask/eth-query'); var _ethquery2 = _interopRequireDefault(_ethquery);\nvar _utils = require('@metamask/utils');\nvar _events = require('events'); var _events2 = _interopRequireDefault(_events);\nvar log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, \"gas-fee-poller\");\nvar INTERVAL_MILLISECONDS = 1e4;\nvar _findNetworkClientIdByChainId, _gasFeeFlows, _getGasFeeControllerEstimates, _getProvider, _getTransactions, _layer1GasFeeFlows, _timeout, _running, _start, start_fn, _stop, stop_fn, _onTimeout, onTimeout_fn, _updateUnapprovedTransactions, updateUnapprovedTransactions_fn, _updateUnapprovedTransaction, updateUnapprovedTransaction_fn, _updateTransactionGasFeeEstimates, updateTransactionGasFeeEstimates_fn, _updateTransactionLayer1GasFee, updateTransactionLayer1GasFee_fn, _getUnapprovedTransactions, getUnapprovedTransactions_fn, _getGasFeeControllerData, getGasFeeControllerData_fn;\nvar GasFeePoller = class {\n  /**\n   * Constructs a new instance of the GasFeePoller.\n   * @param options - The options for this instance.\n   * @param options.findNetworkClientIdByChainId - Callback to find the network client ID by chain ID.\n   * @param options.gasFeeFlows - The gas fee flows to use to obtain suitable gas fees.\n   * @param options.getGasFeeControllerEstimates - Callback to obtain the default fee estimates.\n   * @param options.getProvider - Callback to obtain a provider instance.\n   * @param options.getTransactions - Callback to obtain the transaction data.\n   * @param options.layer1GasFeeFlows - The layer 1 gas fee flows to use to obtain suitable layer 1 gas fees.\n   * @param options.onStateChange - Callback to register a listener for controller state changes.\n   */\n  constructor({\n    findNetworkClientIdByChainId,\n    gasFeeFlows,\n    getGasFeeControllerEstimates,\n    getProvider,\n    getTransactions,\n    layer1GasFeeFlows,\n    onStateChange\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _start);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _stop);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onTimeout);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateUnapprovedTransactions);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateUnapprovedTransaction);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateTransactionGasFeeEstimates);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateTransactionLayer1GasFee);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getUnapprovedTransactions);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGasFeeControllerData);\n    this.hub = new (0, _events2.default)();\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _findNetworkClientIdByChainId, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _gasFeeFlows, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGasFeeControllerEstimates, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getProvider, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getTransactions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _layer1GasFeeFlows, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _timeout, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _running, false);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _findNetworkClientIdByChainId, findNetworkClientIdByChainId);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _gasFeeFlows, gasFeeFlows);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _layer1GasFeeFlows, layer1GasFeeFlows);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getGasFeeControllerEstimates, getGasFeeControllerEstimates);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getProvider, getProvider);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getTransactions, getTransactions);\n    onStateChange(() => {\n      const unapprovedTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getUnapprovedTransactions, getUnapprovedTransactions_fn).call(this);\n      if (unapprovedTransactions.length) {\n        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _start, start_fn).call(this);\n      } else {\n        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _stop, stop_fn).call(this);\n      }\n    });\n  }\n};\n_findNetworkClientIdByChainId = new WeakMap();\n_gasFeeFlows = new WeakMap();\n_getGasFeeControllerEstimates = new WeakMap();\n_getProvider = new WeakMap();\n_getTransactions = new WeakMap();\n_layer1GasFeeFlows = new WeakMap();\n_timeout = new WeakMap();\n_running = new WeakMap();\n_start = new WeakSet();\nstart_fn = function() {\n  if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _running)) {\n    return;\n  }\n  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onTimeout, onTimeout_fn).call(this);\n  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _running, true);\n  log(\"Started polling\");\n};\n_stop = new WeakSet();\nstop_fn = function() {\n  if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _running)) {\n    return;\n  }\n  clearTimeout(_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _timeout));\n  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _timeout, void 0);\n  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _running, false);\n  log(\"Stopped polling\");\n};\n_onTimeout = new WeakSet();\nonTimeout_fn = async function() {\n  await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateUnapprovedTransactions, updateUnapprovedTransactions_fn).call(this);\n  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _timeout, setTimeout(() => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onTimeout, onTimeout_fn).call(this), INTERVAL_MILLISECONDS));\n};\n_updateUnapprovedTransactions = new WeakSet();\nupdateUnapprovedTransactions_fn = async function() {\n  const unapprovedTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getUnapprovedTransactions, getUnapprovedTransactions_fn).call(this);\n  if (!unapprovedTransactions.length) {\n    return;\n  }\n  log(\"Found unapproved transactions\", unapprovedTransactions.length);\n  const gasFeeControllerDataByChainId = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGasFeeControllerData, getGasFeeControllerData_fn).call(this, unapprovedTransactions);\n  log(\"Retrieved gas fee controller data\", gasFeeControllerDataByChainId);\n  await Promise.all(\n    unapprovedTransactions.flatMap((tx) => {\n      const { chainId } = tx;\n      const gasFeeControllerData = gasFeeControllerDataByChainId.get(\n        chainId\n      );\n      return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateUnapprovedTransaction, updateUnapprovedTransaction_fn).call(this, tx, gasFeeControllerData);\n    })\n  );\n};\n_updateUnapprovedTransaction = new WeakSet();\nupdateUnapprovedTransaction_fn = async function(transactionMeta, gasFeeControllerData) {\n  const { id } = transactionMeta;\n  const [gasFeeEstimatesResponse, layer1GasFee] = await Promise.all([\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionGasFeeEstimates, updateTransactionGasFeeEstimates_fn).call(this, transactionMeta, gasFeeControllerData),\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionLayer1GasFee, updateTransactionLayer1GasFee_fn).call(this, transactionMeta)\n  ]);\n  if (!gasFeeEstimatesResponse && !layer1GasFee) {\n    return;\n  }\n  this.hub.emit(\"transaction-updated\", {\n    transactionId: id,\n    gasFeeEstimates: gasFeeEstimatesResponse?.gasFeeEstimates,\n    gasFeeEstimatesLoaded: gasFeeEstimatesResponse?.gasFeeEstimatesLoaded,\n    layer1GasFee\n  });\n};\n_updateTransactionGasFeeEstimates = new WeakSet();\nupdateTransactionGasFeeEstimates_fn = async function(transactionMeta, gasFeeControllerData) {\n  const { chainId, networkClientId } = transactionMeta;\n  const ethQuery = new (0, _ethquery2.default)(_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getProvider).call(this, chainId, networkClientId));\n  const gasFeeFlow = _chunk76FONEDAjs.getGasFeeFlow.call(void 0, transactionMeta, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _gasFeeFlows));\n  if (gasFeeFlow) {\n    log(\n      \"Found gas fee flow\",\n      gasFeeFlow.constructor.name,\n      transactionMeta.id\n    );\n  }\n  const request = {\n    ethQuery,\n    gasFeeControllerData,\n    transactionMeta\n  };\n  let gasFeeEstimates;\n  if (gasFeeFlow) {\n    try {\n      const response = await gasFeeFlow.getGasFees(request);\n      gasFeeEstimates = response.estimates;\n    } catch (error) {\n      log(\"Failed to get suggested gas fees\", transactionMeta.id, error);\n    }\n  }\n  if (!gasFeeEstimates && transactionMeta.gasFeeEstimatesLoaded) {\n    return void 0;\n  }\n  log(\"Updated gas fee estimates\", {\n    gasFeeEstimates,\n    transaction: transactionMeta.id\n  });\n  return { gasFeeEstimates, gasFeeEstimatesLoaded: true };\n};\n_updateTransactionLayer1GasFee = new WeakSet();\nupdateTransactionLayer1GasFee_fn = async function(transactionMeta) {\n  const { chainId, networkClientId } = transactionMeta;\n  const provider = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getProvider).call(this, chainId, networkClientId);\n  const layer1GasFee = await _chunk2XKEAKQGjs.getTransactionLayer1GasFee.call(void 0, {\n    layer1GasFeeFlows: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _layer1GasFeeFlows),\n    provider,\n    transactionMeta\n  });\n  if (layer1GasFee) {\n    log(\"Updated layer 1 gas fee\", layer1GasFee, transactionMeta.id);\n  }\n  return layer1GasFee;\n};\n_getUnapprovedTransactions = new WeakSet();\ngetUnapprovedTransactions_fn = function() {\n  return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getTransactions).call(this).filter(\n    (tx) => tx.status === \"unapproved\" /* unapproved */\n  );\n};\n_getGasFeeControllerData = new WeakSet();\ngetGasFeeControllerData_fn = async function(transactions) {\n  const networkClientIdsByChainId = /* @__PURE__ */ new Map();\n  for (const transaction of transactions) {\n    const { chainId, networkClientId: transactionNetworkClientId } = transaction;\n    if (networkClientIdsByChainId.has(chainId)) {\n      continue;\n    }\n    const networkClientId = transactionNetworkClientId ?? _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _findNetworkClientIdByChainId).call(this, chainId);\n    networkClientIdsByChainId.set(chainId, networkClientId);\n  }\n  log(\"Extracted network client IDs by chain ID\", networkClientIdsByChainId);\n  const entryPromises = Array.from(networkClientIdsByChainId.entries()).map(\n    async ([chainId, networkClientId]) => {\n      return [\n        chainId,\n        await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getGasFeeControllerEstimates).call(this, { networkClientId })\n      ];\n    }\n  );\n  return new Map(await Promise.all(entryPromises));\n};\n\n\n\nexports.GasFeePoller = GasFeePoller;\n//# sourceMappingURL=chunk-2EU6346V.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n// src/utils/layer1-gas-fee-flow.ts\nvar _utils = require('@metamask/utils');\nvar log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, \"layer-1-gas-fee-flow\");\nasync function updateTransactionLayer1GasFee(request) {\n  const layer1GasFee = await getTransactionLayer1GasFee(request);\n  if (!layer1GasFee) {\n    return;\n  }\n  const { transactionMeta } = request;\n  transactionMeta.layer1GasFee = layer1GasFee;\n  log(\"Updated layer 1 gas fee\", layer1GasFee, transactionMeta.id);\n}\nfunction getLayer1GasFeeFlow(transactionMeta, layer1GasFeeFlows) {\n  return layer1GasFeeFlows.find(\n    (layer1GasFeeFlow) => layer1GasFeeFlow.matchesTransaction(transactionMeta)\n  );\n}\nasync function getTransactionLayer1GasFee({\n  layer1GasFeeFlows,\n  provider,\n  transactionMeta\n}) {\n  const layer1GasFeeFlow = getLayer1GasFeeFlow(\n    transactionMeta,\n    layer1GasFeeFlows\n  );\n  if (!layer1GasFeeFlow) {\n    return void 0;\n  }\n  log(\n    \"Found layer 1 gas fee flow\",\n    layer1GasFeeFlow.constructor.name,\n    transactionMeta.id\n  );\n  try {\n    const { layer1Fee } = await layer1GasFeeFlow.getLayer1Fee({\n      provider,\n      transactionMeta\n    });\n    return layer1Fee;\n  } catch (error) {\n    log(\"Failed to get layer 1 gas fee\", transactionMeta.id, error);\n    return void 0;\n  }\n}\n\n\n\n\nexports.updateTransactionLayer1GasFee = updateTransactionLayer1GasFee; exports.getTransactionLayer1GasFee = getTransactionLayer1GasFee;\n//# sourceMappingURL=chunk-2XKEAKQG.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _chunk7NMV2NPMjs = require('./chunk-7NMV2NPM.js');\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/helpers/MultichainTrackingHelper.ts\nvar _ethquery = require('@metamask/eth-query'); var _ethquery2 = _interopRequireDefault(_ethquery);\nvar _asyncmutex = require('async-mutex');\nvar _isMultichainEnabled, _provider, _nonceTracker, _incomingTransactionOptions, _findNetworkClientIdByChainId, _getNetworkClientById, _getNetworkClientRegistry, _removeIncomingTransactionHelperListeners, _removePendingTransactionTrackerListeners, _createNonceTracker, _createIncomingTransactionHelper, _createPendingTransactionTracker, _nonceMutexesByChainId, _trackingMap, _etherscanRemoteTransactionSourcesMap, _refreshTrackingMap, _stopTrackingByNetworkClientId, stopTrackingByNetworkClientId_fn, _startTrackingByNetworkClientId, startTrackingByNetworkClientId_fn, _refreshEtherscanRemoteTransactionSources, _getNetworkClient, getNetworkClient_fn;\nvar MultichainTrackingHelper = class {\n  constructor({\n    isMultichainEnabled,\n    provider,\n    nonceTracker,\n    incomingTransactionOptions,\n    findNetworkClientIdByChainId,\n    getNetworkClientById,\n    getNetworkClientRegistry,\n    removeIncomingTransactionHelperListeners,\n    removePendingTransactionTrackerListeners,\n    createNonceTracker,\n    createIncomingTransactionHelper,\n    createPendingTransactionTracker,\n    onNetworkStateChange\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _stopTrackingByNetworkClientId);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _startTrackingByNetworkClientId);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNetworkClient);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isMultichainEnabled, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _provider, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _nonceTracker, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _incomingTransactionOptions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _findNetworkClientIdByChainId, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNetworkClientById, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNetworkClientRegistry, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _removeIncomingTransactionHelperListeners, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _removePendingTransactionTrackerListeners, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _createNonceTracker, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _createIncomingTransactionHelper, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _createPendingTransactionTracker, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _nonceMutexesByChainId, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _trackingMap, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _etherscanRemoteTransactionSourcesMap, /* @__PURE__ */ new Map());\n    this.checkForPendingTransactionAndStartPolling = () => {\n      for (const [, trackers] of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap)) {\n        trackers.pendingTransactionTracker.startIfPendingTransactions();\n      }\n    };\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _refreshTrackingMap, (networkClients) => {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _refreshEtherscanRemoteTransactionSources).call(this, networkClients);\n      const networkClientIds = Object.keys(networkClients);\n      const existingNetworkClientIds = Array.from(_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).keys());\n      const networkClientIdsToRemove = existingNetworkClientIds.filter(\n        (id) => !networkClientIds.includes(id)\n      );\n      networkClientIdsToRemove.forEach((id) => {\n        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _stopTrackingByNetworkClientId, stopTrackingByNetworkClientId_fn).call(this, id);\n      });\n      const networkClientIdsToAdd = networkClientIds.filter(\n        (id) => !existingNetworkClientIds.includes(id)\n      );\n      networkClientIdsToAdd.forEach((id) => {\n        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _startTrackingByNetworkClientId, startTrackingByNetworkClientId_fn).call(this, id);\n      });\n    });\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _refreshEtherscanRemoteTransactionSources, (networkClients) => {\n      const chainIdsInRegistry = /* @__PURE__ */ new Set();\n      Object.values(networkClients).forEach(\n        (networkClient) => chainIdsInRegistry.add(networkClient.configuration.chainId)\n      );\n      const existingChainIds = Array.from(\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _etherscanRemoteTransactionSourcesMap).keys()\n      );\n      const chainIdsToRemove = existingChainIds.filter(\n        (chainId) => !chainIdsInRegistry.has(chainId)\n      );\n      chainIdsToRemove.forEach((chainId) => {\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _etherscanRemoteTransactionSourcesMap).delete(chainId);\n      });\n    });\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isMultichainEnabled, isMultichainEnabled);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _provider, provider);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _nonceTracker, nonceTracker);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _incomingTransactionOptions, incomingTransactionOptions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _findNetworkClientIdByChainId, findNetworkClientIdByChainId);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getNetworkClientById, getNetworkClientById);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getNetworkClientRegistry, getNetworkClientRegistry);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _removeIncomingTransactionHelperListeners, removeIncomingTransactionHelperListeners);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _removePendingTransactionTrackerListeners, removePendingTransactionTrackerListeners);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _createNonceTracker, createNonceTracker);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _createIncomingTransactionHelper, createIncomingTransactionHelper);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _createPendingTransactionTracker, createPendingTransactionTracker);\n    onNetworkStateChange((_, patches) => {\n      if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isMultichainEnabled)) {\n        const networkClients = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getNetworkClientRegistry).call(this);\n        patches.forEach(({ op, path }) => {\n          if (op === \"remove\" && path[0] === \"networkConfigurations\") {\n            const networkClientId = path[1];\n            delete networkClients[networkClientId];\n          }\n        });\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _refreshTrackingMap).call(this, networkClients);\n      }\n    });\n  }\n  initialize() {\n    if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isMultichainEnabled)) {\n      return;\n    }\n    const networkClients = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getNetworkClientRegistry).call(this);\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _refreshTrackingMap).call(this, networkClients);\n  }\n  has(networkClientId) {\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).has(networkClientId);\n  }\n  getEthQuery({\n    networkClientId,\n    chainId\n  } = {}) {\n    if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isMultichainEnabled)) {\n      return new (0, _ethquery2.default)(this.getProvider());\n    }\n    return new (0, _ethquery2.default)(this.getProvider({ networkClientId, chainId }));\n  }\n  getProvider({\n    networkClientId,\n    chainId\n  } = {}) {\n    if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isMultichainEnabled)) {\n      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _provider);\n    }\n    const networkClient = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNetworkClient, getNetworkClient_fn).call(this, {\n      networkClientId,\n      chainId\n    });\n    return networkClient?.provider || _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _provider);\n  }\n  /**\n   * Gets the mutex intended to guard the nonceTracker for a particular chainId and key .\n   *\n   * @param opts - The options object.\n   * @param opts.chainId - The hex chainId.\n   * @param opts.key - The hex address (or constant) pertaining to the chainId\n   * @returns Mutex instance for the given chainId and key pair\n   */\n  async acquireNonceLockForChainIdKey({\n    chainId,\n    key = \"global\"\n  }) {\n    let nonceMutexesForChainId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _nonceMutexesByChainId).get(chainId);\n    if (!nonceMutexesForChainId) {\n      nonceMutexesForChainId = /* @__PURE__ */ new Map();\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _nonceMutexesByChainId).set(chainId, nonceMutexesForChainId);\n    }\n    let nonceMutexForKey = nonceMutexesForChainId.get(key);\n    if (!nonceMutexForKey) {\n      nonceMutexForKey = new (0, _asyncmutex.Mutex)();\n      nonceMutexesForChainId.set(key, nonceMutexForKey);\n    }\n    return await nonceMutexForKey.acquire();\n  }\n  /**\n   * Gets the next nonce according to the nonce-tracker.\n   * Ensure `releaseLock` is called once processing of the `nonce` value is complete.\n   *\n   * @param address - The hex string address for the transaction.\n   * @param networkClientId - The network client ID for the transaction, used to fetch the correct nonce tracker.\n   * @returns object with the `nextNonce` `nonceDetails`, and the releaseLock.\n   */\n  async getNonceLock(address, networkClientId) {\n    let releaseLockForChainIdKey;\n    let nonceTracker = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _nonceTracker);\n    if (networkClientId && _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isMultichainEnabled)) {\n      const networkClient = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getNetworkClientById).call(this, networkClientId);\n      releaseLockForChainIdKey = await this.acquireNonceLockForChainIdKey({\n        chainId: networkClient.configuration.chainId,\n        key: address\n      });\n      const trackers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).get(networkClientId);\n      if (!trackers) {\n        throw new Error(\"missing nonceTracker for networkClientId\");\n      }\n      nonceTracker = trackers.nonceTracker;\n    }\n    try {\n      const nonceLock = await nonceTracker.getNonceLock(address);\n      return {\n        ...nonceLock,\n        releaseLock: () => {\n          nonceLock.releaseLock();\n          releaseLockForChainIdKey?.();\n        }\n      };\n    } catch (err) {\n      releaseLockForChainIdKey?.();\n      throw err;\n    }\n  }\n  startIncomingTransactionPolling(networkClientIds = []) {\n    networkClientIds.forEach((networkClientId) => {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).get(networkClientId)?.incomingTransactionHelper.start();\n    });\n  }\n  stopIncomingTransactionPolling(networkClientIds = []) {\n    networkClientIds.forEach((networkClientId) => {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).get(networkClientId)?.incomingTransactionHelper.stop();\n    });\n  }\n  stopAllIncomingTransactionPolling() {\n    for (const [, trackers] of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap)) {\n      trackers.incomingTransactionHelper.stop();\n    }\n  }\n  async updateIncomingTransactions(networkClientIds = []) {\n    const promises = await Promise.allSettled(\n      networkClientIds.map(async (networkClientId) => {\n        return await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).get(networkClientId)?.incomingTransactionHelper.update();\n      })\n    );\n    promises.filter((result) => result.status === \"rejected\").forEach((result) => {\n      _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, \n        \"failed to update incoming transactions\",\n        result.reason\n      );\n    });\n  }\n  stopAllTracking() {\n    for (const [networkClientId] of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap)) {\n      _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _stopTrackingByNetworkClientId, stopTrackingByNetworkClientId_fn).call(this, networkClientId);\n    }\n  }\n};\n_isMultichainEnabled = new WeakMap();\n_provider = new WeakMap();\n_nonceTracker = new WeakMap();\n_incomingTransactionOptions = new WeakMap();\n_findNetworkClientIdByChainId = new WeakMap();\n_getNetworkClientById = new WeakMap();\n_getNetworkClientRegistry = new WeakMap();\n_removeIncomingTransactionHelperListeners = new WeakMap();\n_removePendingTransactionTrackerListeners = new WeakMap();\n_createNonceTracker = new WeakMap();\n_createIncomingTransactionHelper = new WeakMap();\n_createPendingTransactionTracker = new WeakMap();\n_nonceMutexesByChainId = new WeakMap();\n_trackingMap = new WeakMap();\n_etherscanRemoteTransactionSourcesMap = new WeakMap();\n_refreshTrackingMap = new WeakMap();\n_stopTrackingByNetworkClientId = new WeakSet();\nstopTrackingByNetworkClientId_fn = function(networkClientId) {\n  const trackers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).get(networkClientId);\n  if (trackers) {\n    trackers.pendingTransactionTracker.stop();\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _removePendingTransactionTrackerListeners).call(this, trackers.pendingTransactionTracker);\n    trackers.incomingTransactionHelper.stop();\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _removeIncomingTransactionHelperListeners).call(this, trackers.incomingTransactionHelper);\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).delete(networkClientId);\n  }\n};\n_startTrackingByNetworkClientId = new WeakSet();\nstartTrackingByNetworkClientId_fn = function(networkClientId) {\n  const trackers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).get(networkClientId);\n  if (trackers) {\n    return;\n  }\n  const {\n    provider,\n    blockTracker,\n    configuration: { chainId }\n  } = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getNetworkClientById).call(this, networkClientId);\n  let etherscanRemoteTransactionSource = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _etherscanRemoteTransactionSourcesMap).get(chainId);\n  if (!etherscanRemoteTransactionSource) {\n    etherscanRemoteTransactionSource = new (0, _chunk7NMV2NPMjs.EtherscanRemoteTransactionSource)({\n      includeTokenTransfers: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _incomingTransactionOptions).includeTokenTransfers\n    });\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _etherscanRemoteTransactionSourcesMap).set(\n      chainId,\n      etherscanRemoteTransactionSource\n    );\n  }\n  const nonceTracker = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _createNonceTracker).call(this, {\n    provider,\n    blockTracker,\n    chainId\n  });\n  const incomingTransactionHelper = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _createIncomingTransactionHelper).call(this, {\n    blockTracker,\n    etherscanRemoteTransactionSource,\n    chainId\n  });\n  const pendingTransactionTracker = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _createPendingTransactionTracker).call(this, {\n    provider,\n    blockTracker,\n    chainId\n  });\n  _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _trackingMap).set(networkClientId, {\n    nonceTracker,\n    incomingTransactionHelper,\n    pendingTransactionTracker\n  });\n};\n_refreshEtherscanRemoteTransactionSources = new WeakMap();\n_getNetworkClient = new WeakSet();\ngetNetworkClient_fn = function({\n  networkClientId,\n  chainId\n} = {}) {\n  let networkClient;\n  if (networkClientId) {\n    try {\n      networkClient = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getNetworkClientById).call(this, networkClientId);\n    } catch (err) {\n      _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, \"failed to get network client by networkClientId\");\n    }\n  }\n  if (!networkClient && chainId) {\n    try {\n      const networkClientIdForChainId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _findNetworkClientIdByChainId).call(this, chainId);\n      networkClient = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getNetworkClientById).call(this, networkClientIdForChainId);\n    } catch (err) {\n      _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, \"failed to get network client by chainId\");\n    }\n  }\n  return networkClient;\n};\n\n\n\nexports.MultichainTrackingHelper = MultichainTrackingHelper;\n//# sourceMappingURL=chunk-6OLJWLKK.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkKT6UAKBBjs = require('./chunk-KT6UAKBB.js');\n\n\n\n\nvar _chunkHMOSP33Fjs = require('./chunk-HMOSP33F.js');\n\n\n\nvar _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n// src/utils/simulation.ts\nvar _abi = require('@ethersproject/abi');\nvar _controllerutils = require('@metamask/controller-utils');\nvar _metamaskethabis = require('@metamask/metamask-eth-abis');\nvar _utils = require('@metamask/utils');\nvar SupportedToken = /* @__PURE__ */ ((SupportedToken2) => {\n  SupportedToken2[\"ERC20\"] = \"erc20\";\n  SupportedToken2[\"ERC721\"] = \"erc721\";\n  SupportedToken2[\"ERC1155\"] = \"erc1155\";\n  SupportedToken2[\"ERC20_WRAPPED\"] = \"erc20Wrapped\";\n  SupportedToken2[\"ERC721_LEGACY\"] = \"erc721Legacy\";\n  return SupportedToken2;\n})(SupportedToken || {});\nvar log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, \"simulation\");\nvar SUPPORTED_EVENTS = [\n  \"Transfer\",\n  \"TransferSingle\",\n  \"TransferBatch\",\n  \"Deposit\",\n  \"Withdrawal\"\n];\nvar SUPPORTED_TOKEN_ABIS = {\n  [\"erc20\" /* ERC20 */]: {\n    abi: _metamaskethabis.abiERC20,\n    standard: \"erc20\" /* erc20 */\n  },\n  [\"erc721\" /* ERC721 */]: {\n    abi: _metamaskethabis.abiERC721,\n    standard: \"erc721\" /* erc721 */\n  },\n  [\"erc1155\" /* ERC1155 */]: {\n    abi: _metamaskethabis.abiERC1155,\n    standard: \"erc1155\" /* erc1155 */\n  },\n  [\"erc20Wrapped\" /* ERC20_WRAPPED */]: {\n    abi: _chunkUGN7PBONjs.ABI_SIMULATION_ERC20_WRAPPED,\n    standard: \"erc20\" /* erc20 */\n  },\n  [\"erc721Legacy\" /* ERC721_LEGACY */]: {\n    abi: _chunkUGN7PBONjs.ABI_SIMULATION_ERC721_LEGACY,\n    standard: \"erc721\" /* erc721 */\n  }\n};\nvar REVERTED_ERRORS = [\"execution reverted\", \"insufficient funds for gas\"];\nasync function getSimulationData(request) {\n  const { chainId, from, to, value, data } = request;\n  log(\"Getting simulation data\", request);\n  try {\n    const response = await _chunkKT6UAKBBjs.simulateTransactions.call(void 0, chainId, {\n      transactions: [\n        {\n          data,\n          from,\n          maxFeePerGas: \"0x0\",\n          maxPriorityFeePerGas: \"0x0\",\n          to,\n          value\n        }\n      ],\n      withCallTrace: true,\n      withLogs: true\n    });\n    const transactionError = response.transactions?.[0]?.error;\n    if (transactionError) {\n      throw new (0, _chunkHMOSP33Fjs.SimulationError)(transactionError);\n    }\n    const nativeBalanceChange = getNativeBalanceChange(request.from, response);\n    const events = getEvents(response);\n    log(\"Parsed events\", events);\n    const tokenBalanceChanges = await getTokenBalanceChanges(request, events);\n    return {\n      nativeBalanceChange,\n      tokenBalanceChanges\n    };\n  } catch (error) {\n    log(\"Failed to get simulation data\", error, request);\n    let simulationError = error;\n    if (REVERTED_ERRORS.some(\n      (revertErrorMessage) => simulationError.message?.includes(revertErrorMessage)\n    )) {\n      simulationError = new (0, _chunkHMOSP33Fjs.SimulationRevertedError)();\n    }\n    const { code, message } = simulationError;\n    return {\n      tokenBalanceChanges: [],\n      error: {\n        code,\n        message\n      }\n    };\n  }\n}\nfunction getNativeBalanceChange(userAddress, response) {\n  const transactionResponse = response.transactions[0];\n  if (!transactionResponse) {\n    return void 0;\n  }\n  const { stateDiff } = transactionResponse;\n  const previousBalance = stateDiff?.pre?.[userAddress]?.balance;\n  const newBalance = stateDiff?.post?.[userAddress]?.balance;\n  if (!previousBalance || !newBalance) {\n    return void 0;\n  }\n  return getSimulationBalanceChange(previousBalance, newBalance);\n}\nfunction getEvents(response) {\n  const logs = extractLogs(\n    response.transactions[0]?.callTrace ?? {}\n  );\n  log(\"Extracted logs\", logs);\n  const interfaces = getContractInterfaces();\n  return logs.map((currentLog) => {\n    const event = parseLog(currentLog, interfaces);\n    if (!event) {\n      log(\"Failed to parse log\", currentLog);\n      return void 0;\n    }\n    const inputs = event.abi.find((e) => e.name === event.name)?.inputs;\n    if (!inputs) {\n      log(\"Failed to find inputs for event\", event);\n      return void 0;\n    }\n    const args = parseEventArgs(event.args, inputs);\n    return {\n      contractAddress: currentLog.address,\n      tokenStandard: event.standard,\n      name: event.name,\n      args,\n      abi: event.abi\n    };\n  }).filter((e) => e !== void 0);\n}\nfunction parseEventArgs(args, abiInputs) {\n  return args.reduce((result, arg, index) => {\n    const name = abiInputs[index].name.replace(\"_\", \"\");\n    const value = parseEventArgValue(arg);\n    result[name] = value;\n    return result;\n  }, {});\n}\nfunction parseEventArgValue(value) {\n  if (Array.isArray(value)) {\n    return value.map(parseEventArgValue);\n  }\n  return (value.toHexString?.() ?? value).toLowerCase();\n}\nasync function getTokenBalanceChanges(request, events) {\n  const balanceTxs = getTokenBalanceTransactions(request, events);\n  log(\"Generated balance transactions\", [...balanceTxs.after.values()]);\n  const transactions = [\n    ...balanceTxs.before.values(),\n    request,\n    ...balanceTxs.after.values()\n  ];\n  if (transactions.length === 1) {\n    return [];\n  }\n  const response = await _chunkKT6UAKBBjs.simulateTransactions.call(void 0, request.chainId, {\n    transactions\n  });\n  log(\"Balance simulation response\", response);\n  if (response.transactions.length !== transactions.length) {\n    throw new (0, _chunkHMOSP33Fjs.SimulationInvalidResponseError)();\n  }\n  let prevBalanceTxIndex = 0;\n  return [...balanceTxs.after.keys()].map((token, index) => {\n    const previousBalanceCheckSkipped = !balanceTxs.before.get(token);\n    const previousBalance = previousBalanceCheckSkipped ? \"0x0\" : getValueFromBalanceTransaction(\n      request.from,\n      token,\n      // eslint-disable-next-line no-plusplus\n      response.transactions[prevBalanceTxIndex++]\n    );\n    const newBalance = getValueFromBalanceTransaction(\n      request.from,\n      token,\n      response.transactions[index + balanceTxs.before.size + 1]\n    );\n    const balanceChange = getSimulationBalanceChange(\n      previousBalance,\n      newBalance\n    );\n    if (!balanceChange) {\n      return void 0;\n    }\n    return {\n      ...token,\n      ...balanceChange\n    };\n  }).filter((change) => change !== void 0);\n}\nfunction getTokenBalanceTransactions(request, events) {\n  const tokenKeys = /* @__PURE__ */ new Set();\n  const before = /* @__PURE__ */ new Map();\n  const after = /* @__PURE__ */ new Map();\n  const userEvents = events.filter(\n    (event) => SUPPORTED_EVENTS.includes(event.name) && [event.args.from, event.args.to].includes(request.from)\n  );\n  log(\"Filtered user events\", userEvents);\n  for (const event of userEvents) {\n    const tokenIds = getEventTokenIds(event);\n    log(\"Extracted token ids\", tokenIds);\n    for (const tokenId of tokenIds) {\n      const simulationToken = {\n        address: event.contractAddress,\n        standard: event.tokenStandard,\n        id: tokenId\n      };\n      const tokenKey = JSON.stringify(simulationToken);\n      if (tokenKeys.has(tokenKey)) {\n        log(\n          \"Ignoring additional event with same contract and token ID\",\n          simulationToken\n        );\n        continue;\n      }\n      tokenKeys.add(tokenKey);\n      const data = getBalanceTransactionData(\n        event.tokenStandard,\n        request.from,\n        tokenId\n      );\n      const transaction = {\n        from: request.from,\n        to: event.contractAddress,\n        data\n      };\n      if (skipPriorBalanceCheck(event)) {\n        after.set(simulationToken, transaction);\n      } else {\n        before.set(simulationToken, transaction);\n        after.set(simulationToken, transaction);\n      }\n    }\n  }\n  return { before, after };\n}\nfunction skipPriorBalanceCheck(event) {\n  return event.name === \"Transfer\" && event.tokenStandard === \"erc721\" /* erc721 */ && parseInt(event.args.from, 16) === 0;\n}\nfunction getEventTokenIds(event) {\n  if (event.tokenStandard === \"erc721\" /* erc721 */) {\n    return [event.args.tokenId];\n  }\n  if (event.tokenStandard === \"erc1155\" /* erc1155 */ && event.name === \"TransferSingle\") {\n    return [event.args.id];\n  }\n  if (event.tokenStandard === \"erc1155\" /* erc1155 */ && event.name === \"TransferBatch\") {\n    return event.args.ids;\n  }\n  return [void 0];\n}\nfunction getValueFromBalanceTransaction(from, token, response) {\n  const normalizedReturn = normalizeReturnValue(response.return);\n  if (token.standard === \"erc721\" /* erc721 */) {\n    return normalizedReturn === from ? \"0x1\" : \"0x0\";\n  }\n  return normalizedReturn;\n}\nfunction getBalanceTransactionData(tokenStandard, from, tokenId) {\n  switch (tokenStandard) {\n    case \"erc721\" /* erc721 */:\n      return new (0, _abi.Interface)(_metamaskethabis.abiERC721).encodeFunctionData(\"ownerOf\", [\n        tokenId\n      ]);\n    case \"erc1155\" /* erc1155 */:\n      return new (0, _abi.Interface)(_metamaskethabis.abiERC1155).encodeFunctionData(\"balanceOf\", [\n        from,\n        tokenId\n      ]);\n    default:\n      return new (0, _abi.Interface)(_metamaskethabis.abiERC20).encodeFunctionData(\"balanceOf\", [\n        from\n      ]);\n  }\n}\nfunction parseLog(eventLog, interfaces) {\n  const supportedTokens = Object.values(SupportedToken);\n  for (const token of supportedTokens) {\n    try {\n      const contractInterface = interfaces.get(token);\n      const { abi, standard } = SUPPORTED_TOKEN_ABIS[token];\n      return {\n        ...contractInterface.parseLog(eventLog),\n        abi,\n        standard\n      };\n    } catch (e) {\n      continue;\n    }\n  }\n  return void 0;\n}\nfunction extractLogs(call) {\n  const logs = call.logs ?? [];\n  const nestedCalls = call.calls ?? [];\n  return [\n    ...logs,\n    ...nestedCalls.map((nestedCall) => extractLogs(nestedCall)).flat()\n  ];\n}\nfunction getSimulationBalanceChange(previousBalance, newBalance) {\n  const differenceBN = _controllerutils.hexToBN.call(void 0, newBalance).sub(_controllerutils.hexToBN.call(void 0, previousBalance));\n  const isDecrease = differenceBN.isNeg();\n  const difference = _controllerutils.toHex.call(void 0, differenceBN.abs());\n  if (differenceBN.isZero()) {\n    log(\"Balance change is zero\");\n    return void 0;\n  }\n  return {\n    previousBalance,\n    newBalance,\n    difference,\n    isDecrease\n  };\n}\nfunction normalizeReturnValue(value) {\n  return _controllerutils.toHex.call(void 0, _controllerutils.hexToBN.call(void 0, value));\n}\nfunction getContractInterfaces() {\n  const supportedTokens = Object.values(SupportedToken);\n  return new Map(\n    supportedTokens.map((tokenType) => {\n      const { abi } = SUPPORTED_TOKEN_ABIS[tokenType];\n      const contractInterface = new (0, _abi.Interface)(abi);\n      return [tokenType, contractInterface];\n    })\n  );\n}\n\n\n\n\n\nexports.SupportedToken = SupportedToken; exports.getSimulationData = getSimulationData; exports.getEvents = getEvents;\n//# sourceMappingURL=chunk-74W7X6BE.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkAYTU4HU5js = require('./chunk-AYTU4HU5.js');\n\n// src/utils/gas-flow.ts\nvar _controllerutils = require('@metamask/controller-utils');\nfunction getGasFeeFlow(transactionMeta, gasFeeFlows) {\n  return gasFeeFlows.find(\n    (gasFeeFlow) => gasFeeFlow.matchesTransaction(transactionMeta)\n  );\n}\nfunction mergeGasFeeEstimates({\n  gasFeeControllerEstimates,\n  transactionGasFeeEstimates\n}) {\n  const transactionEstimateType = transactionGasFeeEstimates.type;\n  if (transactionEstimateType === \"fee-market\" /* FeeMarket */) {\n    return Object.values(_chunkAYTU4HU5js.GasFeeEstimateLevel).reduce(\n      (result, level) => ({\n        ...result,\n        [level]: mergeFeeMarketEstimate(\n          gasFeeControllerEstimates?.[level],\n          transactionGasFeeEstimates[level]\n        )\n      }),\n      { ...gasFeeControllerEstimates }\n    );\n  }\n  if (transactionEstimateType === \"legacy\" /* Legacy */) {\n    return Object.values(_chunkAYTU4HU5js.GasFeeEstimateLevel).reduce(\n      (result, level) => ({\n        ...result,\n        [level]: getLegacyEstimate(transactionGasFeeEstimates, level)\n      }),\n      {}\n    );\n  }\n  if (transactionEstimateType === \"eth_gasPrice\" /* GasPrice */) {\n    return {\n      gasPrice: getGasPriceEstimate(transactionGasFeeEstimates)\n    };\n  }\n  return gasFeeControllerEstimates;\n}\nfunction mergeFeeMarketEstimate(gasFeeControllerEstimate, transactionGasFeeEstimate) {\n  return {\n    ...gasFeeControllerEstimate,\n    suggestedMaxFeePerGas: _controllerutils.weiHexToGweiDec.call(void 0, \n      transactionGasFeeEstimate.maxFeePerGas\n    ),\n    suggestedMaxPriorityFeePerGas: _controllerutils.weiHexToGweiDec.call(void 0, \n      transactionGasFeeEstimate.maxPriorityFeePerGas\n    )\n  };\n}\nfunction getLegacyEstimate(transactionGasFeeEstimate, level) {\n  return _controllerutils.weiHexToGweiDec.call(void 0, transactionGasFeeEstimate[level]);\n}\nfunction getGasPriceEstimate(transactionGasFeeEstimate) {\n  return _controllerutils.weiHexToGweiDec.call(void 0, transactionGasFeeEstimate.gasPrice);\n}\n\n\n\n\nexports.getGasFeeFlow = getGasFeeFlow; exports.mergeGasFeeEstimates = mergeGasFeeEstimates;\n//# sourceMappingURL=chunk-76FONEDA.js.map","import { cloneDeep } from 'lodash';\n\nconst version = 79;\n\n/**\n * Remove collectiblesDropdownState and collectiblesDetectionNoticeDismissed:.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (\n    state?.AppStateController?.collectiblesDetectionNoticeDismissed !==\n    undefined\n  ) {\n    delete state.AppStateController.collectiblesDetectionNoticeDismissed;\n  }\n  if (state?.metamask?.collectiblesDropdownState !== undefined) {\n    delete state.metamask.collectiblesDropdownState;\n  }\n  return state;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/utils/external-transactions.ts\nvar _rpcerrors = require('@metamask/rpc-errors');\nfunction validateConfirmedExternalTransaction(transactionMeta, confirmedTxs, pendingTxs) {\n  if (!transactionMeta || !transactionMeta.txParams) {\n    throw _rpcerrors.rpcErrors.invalidParams(\n      '\"transactionMeta\" or \"transactionMeta.txParams\" is missing'\n    );\n  }\n  if (transactionMeta.status !== \"confirmed\" /* confirmed */) {\n    throw _rpcerrors.rpcErrors.invalidParams(\n      'External transaction status should be \"confirmed\"'\n    );\n  }\n  const externalTxNonce = transactionMeta.txParams.nonce;\n  if (pendingTxs && pendingTxs.length > 0) {\n    const foundPendingTxByNonce = pendingTxs.find(\n      (tx) => tx.txParams?.nonce === externalTxNonce\n    );\n    if (foundPendingTxByNonce) {\n      throw _rpcerrors.rpcErrors.invalidParams(\n        \"External transaction nonce should not be in pending txs\"\n      );\n    }\n  }\n  if (confirmedTxs && confirmedTxs.length > 0) {\n    const foundConfirmedTxByNonce = confirmedTxs.find(\n      (tx) => tx.txParams?.nonce === externalTxNonce\n    );\n    if (foundConfirmedTxByNonce) {\n      throw _rpcerrors.rpcErrors.invalidParams(\n        \"External transaction nonce should not be in confirmed txs\"\n      );\n    }\n  }\n}\n\n\n\nexports.validateConfirmedExternalTransaction = validateConfirmedExternalTransaction;\n//# sourceMappingURL=chunk-7LXE4KHV.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\nvar _chunkXVYXRCRLjs = require('./chunk-XVYXRCRL.js');\n\n\nvar _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/helpers/EtherscanRemoteTransactionSource.ts\nvar _controllerutils = require('@metamask/controller-utils');\nvar _asyncmutex = require('async-mutex');\nvar _bnjs = require('bn.js'); var _bnjs2 = _interopRequireDefault(_bnjs);\nvar _uuid = require('uuid');\nvar ETHERSCAN_RATE_LIMIT_INTERVAL = 5e3;\nvar _includeTokenTransfers, _isTokenRequestPending, _mutex, _releaseLockAfterInterval, releaseLockAfterInterval_fn, _fetchNormalTransactions, _fetchTokenTransactions, _getResponseTransactions, getResponseTransactions_fn, _normalizeTransaction, normalizeTransaction_fn, _normalizeTokenTransaction, normalizeTokenTransaction_fn, _normalizeTransactionBase, normalizeTransactionBase_fn;\nvar EtherscanRemoteTransactionSource = class {\n  constructor({\n    includeTokenTransfers\n  } = {}) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _releaseLockAfterInterval);\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getResponseTransactions);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _normalizeTransaction);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _normalizeTokenTransaction);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _normalizeTransactionBase);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _includeTokenTransfers, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isTokenRequestPending, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _mutex, new (0, _asyncmutex.Mutex)());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _fetchNormalTransactions, async (request, etherscanRequest) => {\n      const { currentChainId } = request;\n      const etherscanTransactions = await _chunkXVYXRCRLjs.fetchEtherscanTransactions.call(void 0, \n        etherscanRequest\n      );\n      return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getResponseTransactions, getResponseTransactions_fn).call(this, etherscanTransactions).map(\n        (tx) => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _normalizeTransaction, normalizeTransaction_fn).call(this, tx, currentChainId)\n      );\n    });\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _fetchTokenTransactions, async (request, etherscanRequest) => {\n      const { currentChainId } = request;\n      const etherscanTransactions = await _chunkXVYXRCRLjs.fetchEtherscanTokenTransactions.call(void 0, \n        etherscanRequest\n      );\n      return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getResponseTransactions, getResponseTransactions_fn).call(this, etherscanTransactions).map(\n        (tx) => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _normalizeTokenTransaction, normalizeTokenTransaction_fn).call(this, tx, currentChainId)\n      );\n    });\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _includeTokenTransfers, includeTokenTransfers ?? true);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isTokenRequestPending, false);\n  }\n  isSupportedNetwork(chainId) {\n    return Object.keys(_chunkUGN7PBONjs.ETHERSCAN_SUPPORTED_NETWORKS).includes(chainId);\n  }\n  getLastBlockVariations() {\n    return [_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isTokenRequestPending) ? \"token\" : \"normal\"];\n  }\n  async fetchTransactions(request) {\n    const releaseLock = await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _mutex).acquire();\n    const acquiredTime = Date.now();\n    const etherscanRequest = {\n      ...request,\n      chainId: request.currentChainId\n    };\n    try {\n      const transactions = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isTokenRequestPending) ? await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _fetchTokenTransactions).call(this, request, etherscanRequest) : await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _fetchNormalTransactions).call(this, request, etherscanRequest);\n      if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _includeTokenTransfers)) {\n        _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isTokenRequestPending, !_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isTokenRequestPending));\n      }\n      return transactions;\n    } finally {\n      _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _releaseLockAfterInterval, releaseLockAfterInterval_fn).call(this, acquiredTime, releaseLock);\n    }\n  }\n};\n_includeTokenTransfers = new WeakMap();\n_isTokenRequestPending = new WeakMap();\n_mutex = new WeakMap();\n_releaseLockAfterInterval = new WeakSet();\nreleaseLockAfterInterval_fn = function(acquireTime, releaseLock) {\n  const elapsedTime = Date.now() - acquireTime;\n  const remainingTime = Math.max(\n    0,\n    ETHERSCAN_RATE_LIMIT_INTERVAL - elapsedTime\n  );\n  if (remainingTime > 0) {\n    setTimeout(releaseLock, remainingTime);\n  } else {\n    releaseLock();\n  }\n};\n_fetchNormalTransactions = new WeakMap();\n_fetchTokenTransactions = new WeakMap();\n_getResponseTransactions = new WeakSet();\ngetResponseTransactions_fn = function(response) {\n  let result = response.result;\n  if (response.status === \"0\") {\n    result = [];\n    if (response.result.length) {\n      _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, \"Ignored Etherscan request error\", {\n        message: response.result,\n        type: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isTokenRequestPending) ? \"token\" : \"normal\"\n      });\n    }\n  }\n  return result;\n};\n_normalizeTransaction = new WeakSet();\nnormalizeTransaction_fn = function(txMeta, currentChainId) {\n  const base = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _normalizeTransactionBase, normalizeTransactionBase_fn).call(this, txMeta, currentChainId);\n  return {\n    ...base,\n    txParams: {\n      ...base.txParams,\n      data: txMeta.input\n    },\n    ...txMeta.isError === \"0\" ? { status: \"confirmed\" /* confirmed */ } : {\n      error: new Error(\"Transaction failed\"),\n      status: \"failed\" /* failed */\n    }\n  };\n};\n_normalizeTokenTransaction = new WeakSet();\nnormalizeTokenTransaction_fn = function(txMeta, currentChainId) {\n  const base = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _normalizeTransactionBase, normalizeTransactionBase_fn).call(this, txMeta, currentChainId);\n  return {\n    ...base,\n    isTransfer: true,\n    transferInformation: {\n      contractAddress: txMeta.contractAddress,\n      decimals: Number(txMeta.tokenDecimal),\n      symbol: txMeta.tokenSymbol\n    }\n  };\n};\n_normalizeTransactionBase = new WeakSet();\nnormalizeTransactionBase_fn = function(txMeta, currentChainId) {\n  const time = parseInt(txMeta.timeStamp, 10) * 1e3;\n  return {\n    blockNumber: txMeta.blockNumber,\n    chainId: currentChainId,\n    hash: txMeta.hash,\n    id: _uuid.v1.call(void 0, { msecs: time }),\n    status: \"confirmed\" /* confirmed */,\n    time,\n    txParams: {\n      chainId: currentChainId,\n      from: txMeta.from,\n      gas: _controllerutils.BNToHex.call(void 0, new (0, _bnjs2.default)(txMeta.gas)),\n      gasPrice: _controllerutils.BNToHex.call(void 0, new (0, _bnjs2.default)(txMeta.gasPrice)),\n      gasUsed: _controllerutils.BNToHex.call(void 0, new (0, _bnjs2.default)(txMeta.gasUsed)),\n      nonce: _controllerutils.BNToHex.call(void 0, new (0, _bnjs2.default)(txMeta.nonce)),\n      to: txMeta.to,\n      value: _controllerutils.BNToHex.call(void 0, new (0, _bnjs2.default)(txMeta.value))\n    },\n    type: \"incoming\" /* incoming */,\n    verifiedOnBlockchain: false\n  };\n};\n\n\n\nexports.EtherscanRemoteTransactionSource = EtherscanRemoteTransactionSource;\n//# sourceMappingURL=chunk-7NMV2NPM.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkQTKXIDGEjs = require('./chunk-QTKXIDGE.js');\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n\nvar _chunkAYTU4HU5js = require('./chunk-AYTU4HU5.js');\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/gas-flows/LineaGasFeeFlow.ts\nvar _controllerutils = require('@metamask/controller-utils');\nvar _utils = require('@metamask/utils');\nvar log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, \"linea-gas-fee-flow\");\nvar LINEA_CHAIN_IDS = [\n  _controllerutils.ChainId[\"linea-mainnet\"],\n  _controllerutils.ChainId[\"linea-goerli\"],\n  _controllerutils.ChainId[\"linea-sepolia\"]\n];\nvar BASE_FEE_MULTIPLIERS = {\n  low: 1,\n  medium: 1.35,\n  high: 1.7\n};\nvar PRIORITY_FEE_MULTIPLIERS = {\n  low: 1,\n  medium: 1.05,\n  high: 1.1\n};\nvar _getLineaGasFees, getLineaGasFees_fn, _getLineaResponse, getLineaResponse_fn, _getValuesFromMultipliers, getValuesFromMultipliers_fn, _getMaxFees, getMaxFees_fn, _feesToString, feesToString_fn;\nvar LineaGasFeeFlow = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLineaGasFees);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLineaResponse);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getValuesFromMultipliers);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getMaxFees);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _feesToString);\n  }\n  matchesTransaction(transactionMeta) {\n    return LINEA_CHAIN_IDS.includes(transactionMeta.chainId);\n  }\n  async getGasFees(request) {\n    try {\n      return await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getLineaGasFees, getLineaGasFees_fn).call(this, request);\n    } catch (error) {\n      log(\"Using default flow as fallback due to error\", error);\n      return new (0, _chunkQTKXIDGEjs.DefaultGasFeeFlow)().getGasFees(request);\n    }\n  }\n};\n_getLineaGasFees = new WeakSet();\ngetLineaGasFees_fn = async function(request) {\n  const { ethQuery, transactionMeta } = request;\n  const lineaResponse = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getLineaResponse, getLineaResponse_fn).call(this, transactionMeta, ethQuery);\n  log(\"Received Linea response\", lineaResponse);\n  const baseFees = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValuesFromMultipliers, getValuesFromMultipliers_fn).call(this, lineaResponse.baseFeePerGas, BASE_FEE_MULTIPLIERS);\n  log(\"Generated base fees\", _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _feesToString, feesToString_fn).call(this, baseFees));\n  const priorityFees = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValuesFromMultipliers, getValuesFromMultipliers_fn).call(this, lineaResponse.priorityFeePerGas, PRIORITY_FEE_MULTIPLIERS);\n  log(\"Generated priority fees\", _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _feesToString, feesToString_fn).call(this, priorityFees));\n  const maxFees = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getMaxFees, getMaxFees_fn).call(this, baseFees, priorityFees);\n  log(\"Generated max fees\", _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _feesToString, feesToString_fn).call(this, maxFees));\n  const estimates = Object.values(_chunkAYTU4HU5js.GasFeeEstimateLevel).reduce(\n    (result, level) => ({\n      ...result,\n      [level]: {\n        maxFeePerGas: _controllerutils.toHex.call(void 0, maxFees[level]),\n        maxPriorityFeePerGas: _controllerutils.toHex.call(void 0, priorityFees[level])\n      }\n    }),\n    { type: \"fee-market\" /* FeeMarket */ }\n  );\n  return { estimates };\n};\n_getLineaResponse = new WeakSet();\ngetLineaResponse_fn = function(transactionMeta, ethQuery) {\n  return _controllerutils.query.call(void 0, ethQuery, \"linea_estimateGas\", [\n    {\n      from: transactionMeta.txParams.from,\n      to: transactionMeta.txParams.to,\n      value: transactionMeta.txParams.value,\n      input: transactionMeta.txParams.data,\n      // Required in request but no impact on response.\n      gasPrice: \"0x100000000\"\n    }\n  ]);\n};\n_getValuesFromMultipliers = new WeakSet();\ngetValuesFromMultipliers_fn = function(value, multipliers) {\n  const base = _controllerutils.hexToBN.call(void 0, value);\n  const low = base.muln(multipliers.low);\n  const medium = base.muln(multipliers.medium);\n  const high = base.muln(multipliers.high);\n  return {\n    low,\n    medium,\n    high\n  };\n};\n_getMaxFees = new WeakSet();\ngetMaxFees_fn = function(baseFees, priorityFees) {\n  return {\n    low: baseFees.low.add(priorityFees.low),\n    medium: baseFees.medium.add(priorityFees.medium),\n    high: baseFees.high.add(priorityFees.high)\n  };\n};\n_feesToString = new WeakSet();\nfeesToString_fn = function(fees) {\n  return Object.values(_chunkAYTU4HU5js.GasFeeEstimateLevel).map(\n    (level) => fees[level].toString(10)\n  );\n};\n\n\n\nexports.LineaGasFeeFlow = LineaGasFeeFlow;\n//# sourceMappingURL=chunk-ARZHJFVG.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/types.ts\nvar TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {\n  TransactionStatus2[\"unapproved\"] = \"unapproved\";\n  TransactionStatus2[\"approved\"] = \"approved\";\n  TransactionStatus2[\"signed\"] = \"signed\";\n  TransactionStatus2[\"submitted\"] = \"submitted\";\n  TransactionStatus2[\"confirmed\"] = \"confirmed\";\n  TransactionStatus2[\"failed\"] = \"failed\";\n  TransactionStatus2[\"dropped\"] = \"dropped\";\n  TransactionStatus2[\"rejected\"] = \"rejected\";\n  TransactionStatus2[\"cancelled\"] = \"cancelled\";\n  return TransactionStatus2;\n})(TransactionStatus || {});\nvar WalletDevice = /* @__PURE__ */ ((WalletDevice2) => {\n  WalletDevice2[\"MM_MOBILE\"] = \"metamask_mobile\";\n  WalletDevice2[\"MM_EXTENSION\"] = \"metamask_extension\";\n  WalletDevice2[\"OTHER\"] = \"other_device\";\n  return WalletDevice2;\n})(WalletDevice || {});\nvar TransactionType = /* @__PURE__ */ ((TransactionType2) => {\n  TransactionType2[\"cancel\"] = \"cancel\";\n  TransactionType2[\"contractInteraction\"] = \"contractInteraction\";\n  TransactionType2[\"deployContract\"] = \"contractDeployment\";\n  TransactionType2[\"ethDecrypt\"] = \"eth_decrypt\";\n  TransactionType2[\"ethGetEncryptionPublicKey\"] = \"eth_getEncryptionPublicKey\";\n  TransactionType2[\"incoming\"] = \"incoming\";\n  TransactionType2[\"personalSign\"] = \"personal_sign\";\n  TransactionType2[\"retry\"] = \"retry\";\n  TransactionType2[\"simpleSend\"] = \"simpleSend\";\n  TransactionType2[\"signTypedData\"] = \"eth_signTypedData\";\n  TransactionType2[\"smart\"] = \"smart\";\n  TransactionType2[\"swap\"] = \"swap\";\n  TransactionType2[\"swapAndSend\"] = \"swapAndSend\";\n  TransactionType2[\"swapApproval\"] = \"swapApproval\";\n  TransactionType2[\"tokenMethodApprove\"] = \"approve\";\n  TransactionType2[\"tokenMethodSafeTransferFrom\"] = \"safetransferfrom\";\n  TransactionType2[\"tokenMethodTransfer\"] = \"transfer\";\n  TransactionType2[\"tokenMethodTransferFrom\"] = \"transferfrom\";\n  TransactionType2[\"tokenMethodSetApprovalForAll\"] = \"setapprovalforall\";\n  TransactionType2[\"tokenMethodIncreaseAllowance\"] = \"increaseAllowance\";\n  return TransactionType2;\n})(TransactionType || {});\nvar TransactionEnvelopeType = /* @__PURE__ */ ((TransactionEnvelopeType2) => {\n  TransactionEnvelopeType2[\"legacy\"] = \"0x0\";\n  TransactionEnvelopeType2[\"accessList\"] = \"0x1\";\n  TransactionEnvelopeType2[\"feeMarket\"] = \"0x2\";\n  return TransactionEnvelopeType2;\n})(TransactionEnvelopeType || {});\nvar UserFeeLevel = /* @__PURE__ */ ((UserFeeLevel2) => {\n  UserFeeLevel2[\"CUSTOM\"] = \"custom\";\n  UserFeeLevel2[\"DAPP_SUGGESTED\"] = \"dappSuggested\";\n  UserFeeLevel2[\"MEDIUM\"] = \"medium\";\n  return UserFeeLevel2;\n})(UserFeeLevel || {});\nvar GasFeeEstimateLevel = /* @__PURE__ */ ((GasFeeEstimateLevel2) => {\n  GasFeeEstimateLevel2[\"Low\"] = \"low\";\n  GasFeeEstimateLevel2[\"Medium\"] = \"medium\";\n  GasFeeEstimateLevel2[\"High\"] = \"high\";\n  return GasFeeEstimateLevel2;\n})(GasFeeEstimateLevel || {});\nvar GasFeeEstimateType = /* @__PURE__ */ ((GasFeeEstimateType2) => {\n  GasFeeEstimateType2[\"FeeMarket\"] = \"fee-market\";\n  GasFeeEstimateType2[\"Legacy\"] = \"legacy\";\n  GasFeeEstimateType2[\"GasPrice\"] = \"eth_gasPrice\";\n  return GasFeeEstimateType2;\n})(GasFeeEstimateType || {});\nvar SimulationTokenStandard = /* @__PURE__ */ ((SimulationTokenStandard2) => {\n  SimulationTokenStandard2[\"erc20\"] = \"erc20\";\n  SimulationTokenStandard2[\"erc721\"] = \"erc721\";\n  SimulationTokenStandard2[\"erc1155\"] = \"erc1155\";\n  return SimulationTokenStandard2;\n})(SimulationTokenStandard || {});\nvar SimulationErrorCode = /* @__PURE__ */ ((SimulationErrorCode2) => {\n  SimulationErrorCode2[\"ChainNotSupported\"] = \"chain-not-supported\";\n  SimulationErrorCode2[\"Disabled\"] = \"disabled\";\n  SimulationErrorCode2[\"InvalidResponse\"] = \"invalid-response\";\n  SimulationErrorCode2[\"Reverted\"] = \"reverted\";\n  return SimulationErrorCode2;\n})(SimulationErrorCode || {});\n\n\n\n\n\n\n\n\n\n\n\nexports.TransactionStatus = TransactionStatus; exports.WalletDevice = WalletDevice; exports.TransactionType = TransactionType; exports.TransactionEnvelopeType = TransactionEnvelopeType; exports.UserFeeLevel = UserFeeLevel; exports.GasFeeEstimateLevel = GasFeeEstimateLevel; exports.GasFeeEstimateType = GasFeeEstimateType; exports.SimulationTokenStandard = SimulationTokenStandard; exports.SimulationErrorCode = SimulationErrorCode;\n//# sourceMappingURL=chunk-AYTU4HU5.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkQH2H4W3Njs = require('./chunk-QH2H4W3N.js');\n\n\nvar _chunk76FONEDAjs = require('./chunk-76FONEDA.js');\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n// src/utils/gas-fees.ts\n\n\n\n\n\nvar _controllerutils = require('@metamask/controller-utils');\nvar _utils = require('@metamask/utils');\nvar log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, \"gas-fees\");\nasync function updateGasFees(request) {\n  const { txMeta } = request;\n  const initialParams = { ...txMeta.txParams };\n  const isSwap = _chunkQH2H4W3Njs.SWAP_TRANSACTION_TYPES.includes(\n    txMeta.type\n  );\n  const savedGasFees = isSwap ? void 0 : request.getSavedGasFees(txMeta.chainId);\n  const suggestedGasFees = await getSuggestedGasFees(request);\n  log(\"Suggested gas fees\", suggestedGasFees);\n  const getGasFeeRequest = {\n    ...request,\n    initialParams,\n    savedGasFees,\n    suggestedGasFees\n  };\n  txMeta.txParams.maxFeePerGas = getMaxFeePerGas(getGasFeeRequest);\n  txMeta.txParams.maxPriorityFeePerGas = getMaxPriorityFeePerGas(getGasFeeRequest);\n  txMeta.txParams.gasPrice = getGasPrice(getGasFeeRequest);\n  txMeta.userFeeLevel = getUserFeeLevel(getGasFeeRequest);\n  log(\"Updated gas fee properties\", {\n    maxFeePerGas: txMeta.txParams.maxFeePerGas,\n    maxPriorityFeePerGas: txMeta.txParams.maxPriorityFeePerGas,\n    gasPrice: txMeta.txParams.gasPrice\n  });\n  if (txMeta.txParams.maxFeePerGas || txMeta.txParams.maxPriorityFeePerGas) {\n    delete txMeta.txParams.gasPrice;\n  }\n  if (txMeta.txParams.gasPrice) {\n    delete txMeta.txParams.maxFeePerGas;\n    delete txMeta.txParams.maxPriorityFeePerGas;\n  }\n  updateDefaultGasEstimates(txMeta);\n}\nfunction gweiDecimalToWeiHex(value) {\n  return _controllerutils.toHex.call(void 0, _controllerutils.gweiDecToWEIBN.call(void 0, value));\n}\nfunction getMaxFeePerGas(request) {\n  const { savedGasFees, eip1559, initialParams, suggestedGasFees } = request;\n  if (!eip1559) {\n    return void 0;\n  }\n  if (savedGasFees) {\n    const maxFeePerGas = gweiDecimalToWeiHex(savedGasFees.maxBaseFee);\n    log(\"Using maxFeePerGas from savedGasFees\", maxFeePerGas);\n    return maxFeePerGas;\n  }\n  if (initialParams.maxFeePerGas) {\n    log(\"Using maxFeePerGas from request\", initialParams.maxFeePerGas);\n    return initialParams.maxFeePerGas;\n  }\n  if (initialParams.gasPrice && !initialParams.maxPriorityFeePerGas) {\n    log(\n      \"Setting maxFeePerGas to gasPrice from request\",\n      initialParams.gasPrice\n    );\n    return initialParams.gasPrice;\n  }\n  if (suggestedGasFees.maxFeePerGas) {\n    log(\"Using suggested maxFeePerGas\", suggestedGasFees.maxFeePerGas);\n    return suggestedGasFees.maxFeePerGas;\n  }\n  if (suggestedGasFees.gasPrice) {\n    log(\n      \"Setting maxFeePerGas to suggested gasPrice\",\n      suggestedGasFees.gasPrice\n    );\n    return suggestedGasFees.gasPrice;\n  }\n  log(\"maxFeePerGas not set\");\n  return void 0;\n}\nfunction getMaxPriorityFeePerGas(request) {\n  const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } = request;\n  if (!eip1559) {\n    return void 0;\n  }\n  if (savedGasFees) {\n    const maxPriorityFeePerGas = gweiDecimalToWeiHex(savedGasFees.priorityFee);\n    log(\n      \"Using maxPriorityFeePerGas from savedGasFees.priorityFee\",\n      maxPriorityFeePerGas\n    );\n    return maxPriorityFeePerGas;\n  }\n  if (initialParams.maxPriorityFeePerGas) {\n    log(\n      \"Using maxPriorityFeePerGas from request\",\n      initialParams.maxPriorityFeePerGas\n    );\n    return initialParams.maxPriorityFeePerGas;\n  }\n  if (initialParams.gasPrice && !initialParams.maxFeePerGas) {\n    log(\n      \"Setting maxPriorityFeePerGas to gasPrice from request\",\n      initialParams.gasPrice\n    );\n    return initialParams.gasPrice;\n  }\n  if (suggestedGasFees.maxPriorityFeePerGas) {\n    log(\n      \"Using suggested maxPriorityFeePerGas\",\n      suggestedGasFees.maxPriorityFeePerGas\n    );\n    return suggestedGasFees.maxPriorityFeePerGas;\n  }\n  if (txMeta.txParams.maxFeePerGas) {\n    log(\n      \"Setting maxPriorityFeePerGas to maxFeePerGas\",\n      txMeta.txParams.maxFeePerGas\n    );\n    return txMeta.txParams.maxFeePerGas;\n  }\n  log(\"maxPriorityFeePerGas not set\");\n  return void 0;\n}\nfunction getGasPrice(request) {\n  const { eip1559, initialParams, suggestedGasFees } = request;\n  if (eip1559) {\n    return void 0;\n  }\n  if (initialParams.gasPrice) {\n    log(\"Using gasPrice from request\", initialParams.gasPrice);\n    return initialParams.gasPrice;\n  }\n  if (suggestedGasFees.maxFeePerGas) {\n    log(\"Using suggested maxFeePerGas\", suggestedGasFees.maxFeePerGas);\n    return suggestedGasFees.maxFeePerGas;\n  }\n  if (suggestedGasFees.gasPrice) {\n    log(\"Using suggested gasPrice\", suggestedGasFees.gasPrice);\n    return suggestedGasFees.gasPrice;\n  }\n  log(\"gasPrice not set\");\n  return void 0;\n}\nfunction getUserFeeLevel(request) {\n  const { eip1559, initialParams, savedGasFees, suggestedGasFees, txMeta } = request;\n  if (!eip1559) {\n    return void 0;\n  }\n  if (savedGasFees) {\n    return \"custom\" /* CUSTOM */;\n  }\n  if (!initialParams.maxFeePerGas && !initialParams.maxPriorityFeePerGas && initialParams.gasPrice) {\n    return txMeta.origin === _controllerutils.ORIGIN_METAMASK ? \"custom\" /* CUSTOM */ : \"dappSuggested\" /* DAPP_SUGGESTED */;\n  }\n  if (!initialParams.maxFeePerGas && !initialParams.maxPriorityFeePerGas && suggestedGasFees.maxFeePerGas && suggestedGasFees.maxPriorityFeePerGas) {\n    return \"medium\" /* MEDIUM */;\n  }\n  if (txMeta.origin === _controllerutils.ORIGIN_METAMASK) {\n    return \"medium\" /* MEDIUM */;\n  }\n  return \"dappSuggested\" /* DAPP_SUGGESTED */;\n}\nfunction updateDefaultGasEstimates(txMeta) {\n  if (!txMeta.defaultGasEstimates) {\n    txMeta.defaultGasEstimates = {};\n  }\n  txMeta.defaultGasEstimates.maxFeePerGas = txMeta.txParams.maxFeePerGas;\n  txMeta.defaultGasEstimates.maxPriorityFeePerGas = txMeta.txParams.maxPriorityFeePerGas;\n  txMeta.defaultGasEstimates.gasPrice = txMeta.txParams.gasPrice;\n  txMeta.defaultGasEstimates.estimateType = txMeta.userFeeLevel;\n}\nasync function getSuggestedGasFees(request) {\n  const { eip1559, ethQuery, gasFeeFlows, getGasFeeEstimates, txMeta } = request;\n  const { networkClientId } = txMeta;\n  if (!eip1559 && txMeta.txParams.gasPrice || eip1559 && txMeta.txParams.maxFeePerGas && txMeta.txParams.maxPriorityFeePerGas) {\n    return {};\n  }\n  const gasFeeFlow = _chunk76FONEDAjs.getGasFeeFlow.call(void 0, txMeta, gasFeeFlows);\n  try {\n    const gasFeeControllerData = await getGasFeeEstimates({ networkClientId });\n    const response = await gasFeeFlow.getGasFees({\n      ethQuery,\n      gasFeeControllerData,\n      transactionMeta: txMeta\n    });\n    const gasFeeEstimateType = response.estimates?.type;\n    switch (gasFeeEstimateType) {\n      case \"fee-market\" /* FeeMarket */:\n        return response.estimates.medium;\n      case \"legacy\" /* Legacy */:\n        return {\n          gasPrice: response.estimates.medium\n        };\n      case \"eth_gasPrice\" /* GasPrice */:\n        return { gasPrice: response.estimates.gasPrice };\n      default:\n        throw new Error(\n          // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n          `Unsupported gas fee estimate type returned from flow: ${gasFeeEstimateType}`\n        );\n    }\n  } catch (error) {\n    log(\"Failed to get suggested gas fees\", error);\n  }\n  const gasPriceDecimal = await _controllerutils.query.call(void 0, ethQuery, \"gasPrice\");\n  const gasPrice = gasPriceDecimal ? _utils.add0x.call(void 0, gasPriceDecimal.toString(16)) : void 0;\n  return { gasPrice };\n}\n\n\n\n\nexports.updateGasFees = updateGasFees; exports.gweiDecimalToWeiHex = gweiDecimalToWeiHex;\n//# sourceMappingURL=chunk-C3WC4OJ3.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/errors.ts\nvar SimulationError = class extends Error {\n  constructor(message, code) {\n    super(message ?? \"Simulation failed\");\n    this.code = code;\n  }\n};\nvar SimulationChainNotSupportedError = class extends SimulationError {\n  constructor(chainId) {\n    super(\n      `Chain is not supported: ${chainId}`,\n      \"chain-not-supported\" /* ChainNotSupported */\n    );\n  }\n};\nvar SimulationInvalidResponseError = class extends SimulationError {\n  constructor() {\n    super(\n      \"Invalid response from simulation API\",\n      \"invalid-response\" /* InvalidResponse */\n    );\n  }\n};\nvar SimulationRevertedError = class extends SimulationError {\n  constructor() {\n    super(\"Transaction was reverted\", \"reverted\" /* Reverted */);\n  }\n};\n\n\n\n\n\n\nexports.SimulationError = SimulationError; exports.SimulationChainNotSupportedError = SimulationChainNotSupportedError; exports.SimulationInvalidResponseError = SimulationInvalidResponseError; exports.SimulationRevertedError = SimulationRevertedError;\n//# sourceMappingURL=chunk-HMOSP33F.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\nvar _chunkHMOSP33Fjs = require('./chunk-HMOSP33F.js');\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n// src/utils/simulation-api.ts\nvar _controllerutils = require('@metamask/controller-utils');\nvar _utils = require('@metamask/utils');\nvar log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, \"simulation-api\");\nvar RPC_METHOD = \"infura_simulateTransactions\";\nvar BASE_URL = \"https://tx-sentinel-{0}.api.cx.metamask.io/\";\nvar ENDPOINT_NETWORKS = \"networks\";\nvar requestIdCounter = 0;\nasync function simulateTransactions(chainId, request) {\n  const url = await getSimulationUrl(chainId);\n  log(\"Sending request\", url, request);\n  const requestId = requestIdCounter;\n  requestIdCounter += 1;\n  const response = await fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify({\n      id: String(requestId),\n      jsonrpc: \"2.0\",\n      method: RPC_METHOD,\n      params: [request]\n    })\n  });\n  const responseJson = await response.json();\n  log(\"Received response\", responseJson);\n  if (responseJson.error) {\n    const { code, message } = responseJson.error;\n    throw new (0, _chunkHMOSP33Fjs.SimulationError)(message, code);\n  }\n  return responseJson?.result;\n}\nasync function getSimulationUrl(chainId) {\n  const networkData = await getNetworkData();\n  const chainIdDecimal = _controllerutils.convertHexToDecimal.call(void 0, chainId);\n  const network = networkData[chainIdDecimal];\n  if (!network?.confirmations) {\n    log(\"Chain is not supported\", chainId);\n    throw new (0, _chunkHMOSP33Fjs.SimulationChainNotSupportedError)(chainId);\n  }\n  return getUrl(network.network);\n}\nasync function getNetworkData() {\n  const url = `${getUrl(\"ethereum-mainnet\")}${ENDPOINT_NETWORKS}`;\n  const response = await fetch(url);\n  return response.json();\n}\nfunction getUrl(subdomain) {\n  return BASE_URL.replace(\"{0}\", subdomain);\n}\n\n\n\nexports.simulateTransactions = simulateTransactions;\n//# sourceMappingURL=chunk-KT6UAKBB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkYVCX6Z75js = require('./chunk-YVCX6Z75.js');\n\n\nvar _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');\n\n// src/gas-flows/OptimismLayer1GasFeeFlow.ts\nvar OPTIMISM_STACK_CHAIN_IDS = [\n  _chunkUGN7PBONjs.CHAIN_IDS.OPTIMISM,\n  _chunkUGN7PBONjs.CHAIN_IDS.OPTIMISM_TESTNET,\n  _chunkUGN7PBONjs.CHAIN_IDS.BASE,\n  _chunkUGN7PBONjs.CHAIN_IDS.BASE_TESTNET,\n  _chunkUGN7PBONjs.CHAIN_IDS.OPBNB,\n  _chunkUGN7PBONjs.CHAIN_IDS.OPBNB_TESTNET,\n  _chunkUGN7PBONjs.CHAIN_IDS.ZORA\n];\nvar OPTIMISM_GAS_PRICE_ORACLE_ADDRESS = \"0x420000000000000000000000000000000000000F\";\nvar OptimismLayer1GasFeeFlow = class extends _chunkYVCX6Z75js.OracleLayer1GasFeeFlow {\n  constructor() {\n    super(OPTIMISM_GAS_PRICE_ORACLE_ADDRESS);\n  }\n  matchesTransaction(transactionMeta) {\n    return OPTIMISM_STACK_CHAIN_IDS.includes(transactionMeta.chainId);\n  }\n};\n\n\n\nexports.OptimismLayer1GasFeeFlow = OptimismLayer1GasFeeFlow;\n//# sourceMappingURL=chunk-NYKRCWBG.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/utils/utils.ts\nvar _controllerutils = require('@metamask/controller-utils');\n\n\n\n\nvar _utils = require('@metamask/utils');\nvar ESTIMATE_GAS_ERROR = \"eth_estimateGas rpc method error\";\nvar NORMALIZERS = {\n  data: (data) => _utils.add0x.call(void 0, padHexToEvenLength(data)),\n  from: (from) => _utils.add0x.call(void 0, from).toLowerCase(),\n  gas: (gas) => _utils.add0x.call(void 0, gas),\n  gasLimit: (gas) => _utils.add0x.call(void 0, gas),\n  gasPrice: (gasPrice) => _utils.add0x.call(void 0, gasPrice),\n  nonce: (nonce) => _utils.add0x.call(void 0, nonce),\n  to: (to) => _utils.add0x.call(void 0, to).toLowerCase(),\n  value: (value) => _utils.add0x.call(void 0, value),\n  maxFeePerGas: (maxFeePerGas) => _utils.add0x.call(void 0, maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas) => _utils.add0x.call(void 0, maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas) => _utils.add0x.call(void 0, maxPriorityFeePerGas),\n  type: (type) => _utils.add0x.call(void 0, type)\n};\nfunction normalizeTransactionParams(txParams) {\n  const normalizedTxParams = { from: \"\" };\n  for (const key of _utils.getKnownPropertyNames.call(void 0, NORMALIZERS)) {\n    if (txParams[key]) {\n      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]);\n    }\n  }\n  if (!normalizedTxParams.value) {\n    normalizedTxParams.value = \"0x0\";\n  }\n  return normalizedTxParams;\n}\nfunction isEIP1559Transaction(txParams) {\n  const hasOwnProp = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);\n  return hasOwnProp(txParams, \"maxFeePerGas\") && hasOwnProp(txParams, \"maxPriorityFeePerGas\");\n}\nvar validateGasValues = (gasValues) => {\n  Object.keys(gasValues).forEach((key) => {\n    const value = gasValues[key];\n    if (typeof value !== \"string\" || !_utils.isStrictHexString.call(void 0, value)) {\n      throw new TypeError(\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        `expected hex string for ${key} but received: ${value}`\n      );\n    }\n  });\n};\nvar isFeeMarketEIP1559Values = (gasValues) => gasValues?.maxFeePerGas !== void 0 || gasValues?.maxPriorityFeePerGas !== void 0;\nvar isGasPriceValue = (gasValues) => gasValues?.gasPrice !== void 0;\nvar getIncreasedPriceHex = (value, rate) => _utils.add0x.call(void 0, `${parseInt(`${value * rate}`, 10).toString(16)}`);\nvar getIncreasedPriceFromExisting = (value, rate) => {\n  return getIncreasedPriceHex(_controllerutils.convertHexToDecimal.call(void 0, value), rate);\n};\nfunction validateMinimumIncrease(proposed, min) {\n  const proposedDecimal = _controllerutils.convertHexToDecimal.call(void 0, proposed);\n  const minDecimal = _controllerutils.convertHexToDecimal.call(void 0, min);\n  if (proposedDecimal >= minDecimal) {\n    return proposed;\n  }\n  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;\n  throw new Error(errorMsg);\n}\nfunction validateIfTransactionUnapproved(transactionMeta, fnName) {\n  if (transactionMeta?.status !== \"unapproved\" /* unapproved */) {\n    throw new Error(\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `TransactionsController: Can only call ${fnName} on an unapproved transaction.\n      Current tx status: ${transactionMeta?.status}`\n    );\n  }\n}\nfunction normalizeTxError(error) {\n  return {\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    code: error.code,\n    rpc: isJsonCompatible(error.value) ? error.value : void 0\n  };\n}\nfunction normalizeGasFeeValues(gasFeeValues) {\n  const normalize = (value) => typeof value === \"string\" ? _utils.add0x.call(void 0, value) : value;\n  if (\"gasPrice\" in gasFeeValues) {\n    return {\n      gasPrice: normalize(gasFeeValues.gasPrice)\n    };\n  }\n  return {\n    maxFeePerGas: normalize(gasFeeValues.maxFeePerGas),\n    maxPriorityFeePerGas: normalize(gasFeeValues.maxPriorityFeePerGas)\n  };\n}\nfunction isJsonCompatible(value) {\n  try {\n    JSON.parse(JSON.stringify(value));\n    return true;\n  } catch {\n    return false;\n  }\n}\nfunction padHexToEvenLength(hex) {\n  const prefix = hex.toLowerCase().startsWith(\"0x\") ? hex.slice(0, 2) : \"\";\n  const data = prefix ? hex.slice(2) : hex;\n  const evenData = data.length % 2 === 0 ? data : `0${data}`;\n  return prefix + evenData;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexports.ESTIMATE_GAS_ERROR = ESTIMATE_GAS_ERROR; exports.normalizeTransactionParams = normalizeTransactionParams; exports.isEIP1559Transaction = isEIP1559Transaction; exports.validateGasValues = validateGasValues; exports.isFeeMarketEIP1559Values = isFeeMarketEIP1559Values; exports.isGasPriceValue = isGasPriceValue; exports.getIncreasedPriceHex = getIncreasedPriceHex; exports.getIncreasedPriceFromExisting = getIncreasedPriceFromExisting; exports.validateMinimumIncrease = validateMinimumIncrease; exports.validateIfTransactionUnapproved = validateIfTransactionUnapproved; exports.normalizeTxError = normalizeTxError; exports.normalizeGasFeeValues = normalizeGasFeeValues; exports.padHexToEvenLength = padHexToEvenLength;\n//# sourceMappingURL=chunk-OZ6UB42C.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n// src/utils/nonce.ts\nvar _controllerutils = require('@metamask/controller-utils');\nvar log = _chunkS6VGOPUYjs.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, \"nonce\");\nasync function getNextNonce(txMeta, getNonceLock) {\n  const {\n    customNonceValue,\n    txParams: { from, nonce: existingNonce }\n  } = txMeta;\n  const customNonce = customNonceValue ? _controllerutils.toHex.call(void 0, customNonceValue) : void 0;\n  if (customNonce) {\n    log(\"Using custom nonce\", customNonce);\n    return [customNonce, void 0];\n  }\n  if (existingNonce) {\n    log(\"Using existing nonce\", existingNonce);\n    return [existingNonce, void 0];\n  }\n  const nonceLock = await getNonceLock(from);\n  const nonce = _controllerutils.toHex.call(void 0, nonceLock.nextNonce);\n  const releaseLock = nonceLock.releaseLock.bind(nonceLock);\n  log(\"Using nonce from nonce tracker\", nonce, nonceLock.nonceDetails);\n  return [nonce, releaseLock];\n}\nfunction getAndFormatTransactionsForNonceTracker(currentChainId, fromAddress, transactionStatus, transactions) {\n  return transactions.filter(\n    ({ chainId, isTransfer, isUserOperation, status, txParams: { from } }) => !isTransfer && !isUserOperation && chainId === currentChainId && status === transactionStatus && from.toLowerCase() === fromAddress.toLowerCase()\n  ).map(({ status, txParams: { from, gas, value, nonce } }) => {\n    return {\n      status,\n      history: [{}],\n      txParams: {\n        from: from ?? \"\",\n        gas: gas ?? \"\",\n        value: value ?? \"\",\n        nonce: nonce ?? \"\"\n      }\n    };\n  });\n}\n\n\n\n\nexports.getNextNonce = getNextNonce; exports.getAndFormatTransactionsForNonceTracker = getAndFormatTransactionsForNonceTracker;\n//# sourceMappingURL=chunk-PRUNMTRD.js.map","import { cloneDeep } from 'lodash';\n\nconst version = 80;\n\n/**\n * The portfolio tooltip has been moved to a button on the home screen so\n * this property is no longer needed in state\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state?.metamask?.showPortfolioTooltip !== undefined) {\n    delete state.metamask.showPortfolioTooltip;\n  }\n\n  return state;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkOZ6UB42Cjs = require('./chunk-OZ6UB42C.js');\n\n\nvar _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');\n\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n// src/utils/swaps.ts\nvar _controllerutils = require('@metamask/controller-utils');\nvar _lodash = require('lodash');\nvar log = _chunkS6VGOPUYjs.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, \"swaps\");\nvar UPDATE_POST_TX_BALANCE_TIMEOUT = 5e3;\nvar UPDATE_POST_TX_BALANCE_ATTEMPTS = 6;\nvar SWAPS_TESTNET_CHAIN_ID = \"0x539\";\nvar DEFAULT_TOKEN_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nvar ETH_SWAPS_TOKEN_OBJECT = {\n  name: \"Ether\",\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18\n};\nvar BNB_SWAPS_TOKEN_OBJECT = {\n  name: \"Binance Coin\",\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18\n};\nvar MATIC_SWAPS_TOKEN_OBJECT = {\n  name: \"Matic\",\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18\n};\nvar AVAX_SWAPS_TOKEN_OBJECT = {\n  name: \"Avalanche\",\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18\n};\nvar TEST_ETH_SWAPS_TOKEN_OBJECT = {\n  name: \"Test Ether\",\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18\n};\nvar GOERLI_SWAPS_TOKEN_OBJECT = {\n  name: \"Ether\",\n  address: DEFAULT_TOKEN_ADDRESS,\n  decimals: 18\n};\nvar ARBITRUM_SWAPS_TOKEN_OBJECT = {\n  ...ETH_SWAPS_TOKEN_OBJECT\n};\nvar OPTIMISM_SWAPS_TOKEN_OBJECT = {\n  ...ETH_SWAPS_TOKEN_OBJECT\n};\nvar ZKSYNC_ERA_SWAPS_TOKEN_OBJECT = {\n  ...ETH_SWAPS_TOKEN_OBJECT\n};\nvar SWAPS_CHAINID_DEFAULT_TOKEN_MAP = {\n  [_chunkUGN7PBONjs.CHAIN_IDS.MAINNET]: ETH_SWAPS_TOKEN_OBJECT,\n  [SWAPS_TESTNET_CHAIN_ID]: TEST_ETH_SWAPS_TOKEN_OBJECT,\n  [_chunkUGN7PBONjs.CHAIN_IDS.BSC]: BNB_SWAPS_TOKEN_OBJECT,\n  [_chunkUGN7PBONjs.CHAIN_IDS.POLYGON]: MATIC_SWAPS_TOKEN_OBJECT,\n  [_chunkUGN7PBONjs.CHAIN_IDS.GOERLI]: GOERLI_SWAPS_TOKEN_OBJECT,\n  [_chunkUGN7PBONjs.CHAIN_IDS.AVALANCHE]: AVAX_SWAPS_TOKEN_OBJECT,\n  [_chunkUGN7PBONjs.CHAIN_IDS.OPTIMISM]: OPTIMISM_SWAPS_TOKEN_OBJECT,\n  [_chunkUGN7PBONjs.CHAIN_IDS.ARBITRUM]: ARBITRUM_SWAPS_TOKEN_OBJECT,\n  [_chunkUGN7PBONjs.CHAIN_IDS.ZKSYNC_ERA]: ZKSYNC_ERA_SWAPS_TOKEN_OBJECT\n};\nvar SWAP_TRANSACTION_TYPES = [\n  \"swap\" /* swap */,\n  \"swapAndSend\" /* swapAndSend */,\n  \"swapApproval\" /* swapApproval */\n];\nfunction updateSwapsTransaction(transactionMeta, transactionType, swaps, {\n  isSwapsDisabled,\n  cancelTransaction,\n  messenger\n}) {\n  if (isSwapsDisabled || !SWAP_TRANSACTION_TYPES.includes(transactionType)) {\n    return transactionMeta;\n  }\n  if (transactionType === \"swap\" /* swap */ && swaps?.hasApproveTx === false && transactionMeta.simulationFails) {\n    cancelTransaction(transactionMeta.id);\n    throw new Error(\"Simulation failed\");\n  }\n  const swapsMeta = swaps?.meta;\n  if (!swapsMeta) {\n    return transactionMeta;\n  }\n  let updatedTransactionMeta = transactionMeta;\n  if (transactionType === \"swapApproval\" /* swapApproval */) {\n    updatedTransactionMeta = updateSwapApprovalTransaction(\n      transactionMeta,\n      swapsMeta\n    );\n    messenger.publish(\"TransactionController:transactionNewSwapApproval\", {\n      transactionMeta: updatedTransactionMeta\n    });\n  }\n  if (transactionType === \"swapAndSend\" /* swapAndSend */) {\n    updatedTransactionMeta = updateSwapAndSendTransaction(\n      transactionMeta,\n      swapsMeta\n    );\n    messenger.publish(\"TransactionController:transactionNewSwapAndSend\", {\n      transactionMeta: updatedTransactionMeta\n    });\n  }\n  if (transactionType === \"swap\" /* swap */) {\n    updatedTransactionMeta = updateSwapTransaction(transactionMeta, swapsMeta);\n    messenger.publish(\"TransactionController:transactionNewSwap\", {\n      transactionMeta: updatedTransactionMeta\n    });\n  }\n  return updatedTransactionMeta;\n}\nasync function updatePostTransactionBalance(transactionMeta, {\n  ethQuery,\n  getTransaction,\n  updateTransaction\n}) {\n  log(\"Updating post transaction balance\", transactionMeta.id);\n  const transactionId = transactionMeta.id;\n  let latestTransactionMeta;\n  let approvalTransactionMeta;\n  for (let i = 0; i < UPDATE_POST_TX_BALANCE_ATTEMPTS; i++) {\n    log(\"Querying balance\", { attempt: i });\n    const postTransactionBalance = await _controllerutils.query.call(void 0, ethQuery, \"getBalance\", [\n      transactionMeta.txParams.from\n    ]);\n    latestTransactionMeta = {\n      ...getTransaction(transactionId) ?? {}\n    };\n    approvalTransactionMeta = latestTransactionMeta.approvalTxId ? getTransaction(latestTransactionMeta.approvalTxId) : void 0;\n    latestTransactionMeta.postTxBalance = postTransactionBalance.toString(16);\n    const isDefaultTokenAddress = isSwapsDefaultTokenAddress(\n      transactionMeta.destinationTokenAddress,\n      transactionMeta.chainId\n    );\n    if (!isDefaultTokenAddress || transactionMeta.preTxBalance !== latestTransactionMeta.postTxBalance) {\n      log(\"Finishing post balance update\", {\n        isDefaultTokenAddress,\n        preTxBalance: transactionMeta.preTxBalance,\n        postTxBalance: latestTransactionMeta.postTxBalance\n      });\n      break;\n    }\n    log(\"Waiting for balance to update\", {\n      delay: UPDATE_POST_TX_BALANCE_TIMEOUT\n    });\n    await sleep(UPDATE_POST_TX_BALANCE_TIMEOUT);\n  }\n  updateTransaction(\n    latestTransactionMeta,\n    \"TransactionController#updatePostTransactionBalance - Add post transaction balance\"\n  );\n  log(\"Completed post balance update\", latestTransactionMeta?.postTxBalance);\n  return {\n    updatedTransactionMeta: latestTransactionMeta,\n    approvalTransactionMeta\n  };\n}\nfunction updateSwapTransaction(transactionMeta, {\n  sourceTokenSymbol,\n  destinationTokenSymbol,\n  type,\n  destinationTokenDecimals,\n  destinationTokenAddress,\n  swapMetaData,\n  swapTokenValue,\n  estimatedBaseFee,\n  approvalTxId\n}) {\n  _chunkOZ6UB42Cjs.validateIfTransactionUnapproved.call(void 0, transactionMeta, \"updateSwapTransaction\");\n  let swapTransaction = {\n    sourceTokenSymbol,\n    destinationTokenSymbol,\n    type,\n    destinationTokenDecimals,\n    destinationTokenAddress,\n    swapMetaData,\n    swapTokenValue,\n    estimatedBaseFee,\n    approvalTxId\n  };\n  swapTransaction = _lodash.pickBy.call(void 0, swapTransaction);\n  return _lodash.merge.call(void 0, {}, transactionMeta, swapTransaction);\n}\nfunction updateSwapAndSendTransaction(transactionMeta, {\n  approvalTxId,\n  destinationTokenAddress,\n  destinationTokenAmount,\n  destinationTokenDecimals,\n  destinationTokenSymbol,\n  estimatedBaseFee,\n  sourceTokenAddress,\n  sourceTokenAmount,\n  sourceTokenDecimals,\n  sourceTokenSymbol,\n  swapAndSendRecipient,\n  swapMetaData,\n  swapTokenValue,\n  type\n}) {\n  _chunkOZ6UB42Cjs.validateIfTransactionUnapproved.call(void 0, transactionMeta, \"updateSwapTransaction\");\n  let swapTransaction = {\n    approvalTxId,\n    destinationTokenAddress,\n    destinationTokenAmount,\n    destinationTokenDecimals,\n    destinationTokenSymbol,\n    estimatedBaseFee,\n    sourceTokenAddress,\n    sourceTokenAmount,\n    sourceTokenDecimals,\n    sourceTokenSymbol,\n    swapAndSendRecipient,\n    swapMetaData,\n    swapTokenValue,\n    type\n  };\n  swapTransaction = _lodash.pickBy.call(void 0, swapTransaction);\n  return _lodash.merge.call(void 0, {}, transactionMeta, swapTransaction);\n}\nfunction updateSwapApprovalTransaction(transactionMeta, { type, sourceTokenSymbol }) {\n  _chunkOZ6UB42Cjs.validateIfTransactionUnapproved.call(void 0, \n    transactionMeta,\n    \"updateSwapApprovalTransaction\"\n  );\n  let swapApprovalTransaction = { type, sourceTokenSymbol };\n  swapApprovalTransaction = _lodash.pickBy.call(void 0, {\n    type,\n    sourceTokenSymbol\n  });\n  return _lodash.merge.call(void 0, {}, transactionMeta, swapApprovalTransaction);\n}\nfunction isSwapsDefaultTokenAddress(address, chainId) {\n  if (!address || !chainId) {\n    return false;\n  }\n  return address === SWAPS_CHAINID_DEFAULT_TOKEN_MAP[chainId]?.address;\n}\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n\n\n\n\n\n\n\n\nexports.UPDATE_POST_TX_BALANCE_TIMEOUT = UPDATE_POST_TX_BALANCE_TIMEOUT; exports.UPDATE_POST_TX_BALANCE_ATTEMPTS = UPDATE_POST_TX_BALANCE_ATTEMPTS; exports.DEFAULT_TOKEN_ADDRESS = DEFAULT_TOKEN_ADDRESS; exports.SWAPS_CHAINID_DEFAULT_TOKEN_MAP = SWAPS_CHAINID_DEFAULT_TOKEN_MAP; exports.SWAP_TRANSACTION_TYPES = SWAP_TRANSACTION_TYPES; exports.updateSwapsTransaction = updateSwapsTransaction; exports.updatePostTransactionBalance = updatePostTransactionBalance;\n//# sourceMappingURL=chunk-QH2H4W3N.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/utils/history.ts\nvar _fastjsonpatch = require('fast-json-patch'); var _fastjsonpatch2 = _interopRequireDefault(_fastjsonpatch);\nvar _lodash = require('lodash');\nfunction addInitialHistorySnapshot(transactionMeta) {\n  const snapshot = snapshotFromTransactionMeta(transactionMeta);\n  return _lodash.merge.call(void 0, {}, transactionMeta, { history: [snapshot] });\n}\nfunction updateTransactionHistory(transactionMeta, note) {\n  if (!transactionMeta.history) {\n    return transactionMeta;\n  }\n  const currentState = snapshotFromTransactionMeta(transactionMeta);\n  const previousState = replayHistory(transactionMeta.history);\n  const historyEntry = generateHistoryEntry(previousState, currentState, note);\n  if (historyEntry.length > 0) {\n    return _lodash.merge.call(void 0, {}, transactionMeta, {\n      history: [...transactionMeta.history, historyEntry]\n    });\n  }\n  return transactionMeta;\n}\nfunction generateHistoryEntry(previousState, currentState, note) {\n  const historyOperationsEntry = _fastjsonpatch2.default.compare(\n    previousState,\n    currentState\n  );\n  if (historyOperationsEntry[0]) {\n    if (note) {\n      historyOperationsEntry[0].note = note;\n    }\n    historyOperationsEntry[0].timestamp = Date.now();\n  }\n  return historyOperationsEntry;\n}\nfunction replayHistory(transactionHistory) {\n  const shortHistory = _lodash.cloneDeep.call(void 0, transactionHistory);\n  return shortHistory.reduce(\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (val, entry) => _fastjsonpatch2.default.applyPatch(val, entry).newDocument\n  );\n}\nfunction snapshotFromTransactionMeta(transactionMeta) {\n  const snapshot = { ...transactionMeta };\n  delete snapshot.history;\n  return _lodash.cloneDeep.call(void 0, snapshot);\n}\n\n\n\n\nexports.addInitialHistorySnapshot = addInitialHistorySnapshot; exports.updateTransactionHistory = updateTransactionHistory;\n//# sourceMappingURL=chunk-QP75SWIQ.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkC3WC4OJ3js = require('./chunk-C3WC4OJ3.js');\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n\nvar _chunkAYTU4HU5js = require('./chunk-AYTU4HU5.js');\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/gas-flows/DefaultGasFeeFlow.ts\nvar _gasfeecontroller = require('@metamask/gas-fee-controller');\nvar _utils = require('@metamask/utils');\nvar log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, \"default-gas-fee-flow\");\nvar _getFeeMarkEstimates, getFeeMarkEstimates_fn, _getLegacyEstimates, getLegacyEstimates_fn, _getGasPriceEstimates, getGasPriceEstimates_fn, _getFeeMarketLevel, getFeeMarketLevel_fn, _getLegacyLevel, getLegacyLevel_fn;\nvar DefaultGasFeeFlow = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getFeeMarkEstimates);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLegacyEstimates);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGasPriceEstimates);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getFeeMarketLevel);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLegacyLevel);\n  }\n  matchesTransaction(_transactionMeta) {\n    return true;\n  }\n  async getGasFees(request) {\n    const { gasFeeControllerData } = request;\n    const { gasEstimateType, gasFeeEstimates } = gasFeeControllerData;\n    let response;\n    switch (gasEstimateType) {\n      case _gasfeecontroller.GAS_ESTIMATE_TYPES.FEE_MARKET:\n        log(\"Using fee market estimates\", gasFeeEstimates);\n        response = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getFeeMarkEstimates, getFeeMarkEstimates_fn).call(this, gasFeeEstimates);\n        break;\n      case _gasfeecontroller.GAS_ESTIMATE_TYPES.LEGACY:\n        log(\"Using legacy estimates\", gasFeeEstimates);\n        response = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getLegacyEstimates, getLegacyEstimates_fn).call(this, gasFeeEstimates);\n        break;\n      case _gasfeecontroller.GAS_ESTIMATE_TYPES.ETH_GASPRICE:\n        log(\"Using eth_gasPrice estimates\", gasFeeEstimates);\n        response = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGasPriceEstimates, getGasPriceEstimates_fn).call(this, gasFeeEstimates);\n        break;\n      default:\n        throw new Error(`Unsupported gas estimate type: ${gasEstimateType}`);\n    }\n    return {\n      estimates: response\n    };\n  }\n};\n_getFeeMarkEstimates = new WeakSet();\ngetFeeMarkEstimates_fn = function(gasFeeEstimates) {\n  const levels = Object.values(_chunkAYTU4HU5js.GasFeeEstimateLevel).reduce(\n    (result, level) => ({\n      ...result,\n      [level]: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getFeeMarketLevel, getFeeMarketLevel_fn).call(this, gasFeeEstimates, level)\n    }),\n    {}\n  );\n  return {\n    type: \"fee-market\" /* FeeMarket */,\n    ...levels\n  };\n};\n_getLegacyEstimates = new WeakSet();\ngetLegacyEstimates_fn = function(gasFeeEstimates) {\n  const levels = Object.values(_chunkAYTU4HU5js.GasFeeEstimateLevel).reduce(\n    (result, level) => ({\n      ...result,\n      [level]: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getLegacyLevel, getLegacyLevel_fn).call(this, gasFeeEstimates, level)\n    }),\n    {}\n  );\n  return {\n    type: \"legacy\" /* Legacy */,\n    ...levels\n  };\n};\n_getGasPriceEstimates = new WeakSet();\ngetGasPriceEstimates_fn = function(gasFeeEstimates) {\n  return {\n    type: \"eth_gasPrice\" /* GasPrice */,\n    gasPrice: _chunkC3WC4OJ3js.gweiDecimalToWeiHex.call(void 0, gasFeeEstimates.gasPrice)\n  };\n};\n_getFeeMarketLevel = new WeakSet();\ngetFeeMarketLevel_fn = function(gasFeeEstimates, level) {\n  const maxFeePerGas = _chunkC3WC4OJ3js.gweiDecimalToWeiHex.call(void 0, \n    gasFeeEstimates[level].suggestedMaxFeePerGas\n  );\n  const maxPriorityFeePerGas = _chunkC3WC4OJ3js.gweiDecimalToWeiHex.call(void 0, \n    gasFeeEstimates[level].suggestedMaxPriorityFeePerGas\n  );\n  return {\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  };\n};\n_getLegacyLevel = new WeakSet();\ngetLegacyLevel_fn = function(gasFeeEstimates, level) {\n  return _chunkC3WC4OJ3js.gweiDecimalToWeiHex.call(void 0, gasFeeEstimates[level]);\n};\n\n\n\nexports.DefaultGasFeeFlow = DefaultGasFeeFlow;\n//# sourceMappingURL=chunk-QTKXIDGE.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/helpers/IncomingTransactionHelper.ts\nvar _asyncmutex = require('async-mutex');\nvar _events = require('events'); var _events2 = _interopRequireDefault(_events);\nvar RECENT_HISTORY_BLOCK_RANGE = 10;\nvar UPDATE_CHECKS = [\n  (txMeta) => txMeta.status,\n  (txMeta) => txMeta.txParams.gasUsed\n];\nvar _blockTracker, _getCurrentAccount, _getLastFetchedBlockNumbers, _getLocalTransactions, _getChainId, _isEnabled, _isRunning, _mutex, _onLatestBlock, _queryEntireHistory, _remoteTransactionSource, _transactionLimit, _updateTransactions, _sortTransactionsByTime, sortTransactionsByTime_fn, _getNewTransactions, getNewTransactions_fn, _getUpdatedTransactions, getUpdatedTransactions_fn, _isTransactionOutdated, isTransactionOutdated_fn, _getLastFetchedBlockNumberDec, getLastFetchedBlockNumberDec_fn, _getFromBlock, getFromBlock_fn, _updateLastFetchedBlockNumber, updateLastFetchedBlockNumber_fn, _getBlockNumberKey, getBlockNumberKey_fn, _canStart, canStart_fn;\nvar IncomingTransactionHelper = class {\n  constructor({\n    blockTracker,\n    getCurrentAccount,\n    getLastFetchedBlockNumbers,\n    getLocalTransactions,\n    getChainId,\n    isEnabled,\n    queryEntireHistory,\n    remoteTransactionSource,\n    transactionLimit,\n    updateTransactions\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _sortTransactionsByTime);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNewTransactions);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getUpdatedTransactions);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isTransactionOutdated);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLastFetchedBlockNumberDec);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getFromBlock);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateLastFetchedBlockNumber);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getBlockNumberKey);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _canStart);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _blockTracker, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getCurrentAccount, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLastFetchedBlockNumbers, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLocalTransactions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getChainId, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isEnabled, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isRunning, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _mutex, new (0, _asyncmutex.Mutex)());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onLatestBlock, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _queryEntireHistory, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _remoteTransactionSource, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _transactionLimit, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateTransactions, void 0);\n    this.hub = new (0, _events2.default)();\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _blockTracker, blockTracker);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getCurrentAccount, getCurrentAccount);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getLastFetchedBlockNumbers, getLastFetchedBlockNumbers);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getLocalTransactions, getLocalTransactions || (() => []));\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getChainId, getChainId);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isEnabled, isEnabled ?? (() => true));\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isRunning, false);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _queryEntireHistory, queryEntireHistory ?? true);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _remoteTransactionSource, remoteTransactionSource);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _transactionLimit, transactionLimit);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _updateTransactions, updateTransactions ?? false);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _onLatestBlock, async (blockNumberHex) => {\n      try {\n        await this.update(blockNumberHex);\n      } catch (error) {\n        console.error(\"Error while checking incoming transactions\", error);\n      }\n    });\n  }\n  start() {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isRunning)) {\n      return;\n    }\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _canStart, canStart_fn).call(this)) {\n      return;\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _blockTracker).addListener(\"latest\", _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _onLatestBlock));\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isRunning, true);\n  }\n  stop() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _blockTracker).removeListener(\"latest\", _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _onLatestBlock));\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isRunning, false);\n  }\n  async update(latestBlockNumberHex) {\n    const releaseLock = await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _mutex).acquire();\n    _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, \"Checking for incoming transactions\");\n    try {\n      if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _canStart, canStart_fn).call(this)) {\n        return;\n      }\n      const latestBlockNumber = parseInt(\n        latestBlockNumberHex || await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _blockTracker).getLatestBlock(),\n        16\n      );\n      const additionalLastFetchedKeys = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _remoteTransactionSource).getLastBlockVariations?.() ?? [];\n      const fromBlock = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getFromBlock, getFromBlock_fn).call(this, latestBlockNumber);\n      const account = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getCurrentAccount).call(this);\n      const currentChainId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getChainId).call(this);\n      let remoteTransactions = [];\n      try {\n        remoteTransactions = await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _remoteTransactionSource).fetchTransactions({\n          address: account.address,\n          currentChainId,\n          fromBlock,\n          limit: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _transactionLimit)\n        });\n      } catch (error) {\n        _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, \"Error while fetching remote transactions\", error);\n        return;\n      }\n      if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _updateTransactions)) {\n        const address = account.address.toLowerCase();\n        remoteTransactions = remoteTransactions.filter(\n          (tx) => tx.txParams.to?.toLowerCase() === address\n        );\n      }\n      const localTransactions = !_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _updateTransactions) ? [] : _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getLocalTransactions).call(this);\n      const newTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNewTransactions, getNewTransactions_fn).call(this, remoteTransactions, localTransactions);\n      const updatedTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getUpdatedTransactions, getUpdatedTransactions_fn).call(this, remoteTransactions, localTransactions);\n      if (newTransactions.length > 0 || updatedTransactions.length > 0) {\n        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _sortTransactionsByTime, sortTransactionsByTime_fn).call(this, newTransactions);\n        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _sortTransactionsByTime, sortTransactionsByTime_fn).call(this, updatedTransactions);\n        _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, \"Found incoming transactions\", {\n          new: newTransactions,\n          updated: updatedTransactions\n        });\n        this.hub.emit(\"transactions\", {\n          added: newTransactions,\n          updated: updatedTransactions\n        });\n      }\n      _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateLastFetchedBlockNumber, updateLastFetchedBlockNumber_fn).call(this, remoteTransactions, additionalLastFetchedKeys);\n    } finally {\n      releaseLock();\n    }\n  }\n};\n_blockTracker = new WeakMap();\n_getCurrentAccount = new WeakMap();\n_getLastFetchedBlockNumbers = new WeakMap();\n_getLocalTransactions = new WeakMap();\n_getChainId = new WeakMap();\n_isEnabled = new WeakMap();\n_isRunning = new WeakMap();\n_mutex = new WeakMap();\n_onLatestBlock = new WeakMap();\n_queryEntireHistory = new WeakMap();\n_remoteTransactionSource = new WeakMap();\n_transactionLimit = new WeakMap();\n_updateTransactions = new WeakMap();\n_sortTransactionsByTime = new WeakSet();\nsortTransactionsByTime_fn = function(transactions) {\n  transactions.sort((a, b) => a.time < b.time ? -1 : 1);\n};\n_getNewTransactions = new WeakSet();\ngetNewTransactions_fn = function(remoteTxs, localTxs) {\n  return remoteTxs.filter(\n    (tx) => !localTxs.some(({ hash }) => hash === tx.hash)\n  );\n};\n_getUpdatedTransactions = new WeakSet();\ngetUpdatedTransactions_fn = function(remoteTxs, localTxs) {\n  return remoteTxs.filter(\n    (remoteTx) => localTxs.some(\n      (localTx) => remoteTx.hash === localTx.hash && _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isTransactionOutdated, isTransactionOutdated_fn).call(this, remoteTx, localTx)\n    )\n  );\n};\n_isTransactionOutdated = new WeakSet();\nisTransactionOutdated_fn = function(remoteTx, localTx) {\n  return UPDATE_CHECKS.some(\n    (getValue) => getValue(remoteTx) !== getValue(localTx)\n  );\n};\n_getLastFetchedBlockNumberDec = new WeakSet();\ngetLastFetchedBlockNumberDec_fn = function() {\n  const additionalLastFetchedKeys = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _remoteTransactionSource).getLastBlockVariations?.() ?? [];\n  const lastFetchedKey = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getBlockNumberKey, getBlockNumberKey_fn).call(this, additionalLastFetchedKeys);\n  const lastFetchedBlockNumbers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getLastFetchedBlockNumbers).call(this);\n  return lastFetchedBlockNumbers[lastFetchedKey];\n};\n_getFromBlock = new WeakSet();\ngetFromBlock_fn = function(latestBlockNumber) {\n  const lastFetchedBlockNumber = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getLastFetchedBlockNumberDec, getLastFetchedBlockNumberDec_fn).call(this);\n  if (lastFetchedBlockNumber) {\n    return lastFetchedBlockNumber + 1;\n  }\n  return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _queryEntireHistory) ? void 0 : latestBlockNumber - RECENT_HISTORY_BLOCK_RANGE;\n};\n_updateLastFetchedBlockNumber = new WeakSet();\nupdateLastFetchedBlockNumber_fn = function(remoteTxs, additionalKeys) {\n  let lastFetchedBlockNumber = -1;\n  for (const tx of remoteTxs) {\n    const currentBlockNumberValue = tx.blockNumber ? parseInt(tx.blockNumber, 10) : -1;\n    lastFetchedBlockNumber = Math.max(\n      lastFetchedBlockNumber,\n      currentBlockNumberValue\n    );\n  }\n  if (lastFetchedBlockNumber === -1) {\n    return;\n  }\n  const lastFetchedKey = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getBlockNumberKey, getBlockNumberKey_fn).call(this, additionalKeys);\n  const lastFetchedBlockNumbers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getLastFetchedBlockNumbers).call(this);\n  const previousValue = lastFetchedBlockNumbers[lastFetchedKey];\n  if (previousValue >= lastFetchedBlockNumber) {\n    return;\n  }\n  this.hub.emit(\"updatedLastFetchedBlockNumbers\", {\n    lastFetchedBlockNumbers: {\n      ...lastFetchedBlockNumbers,\n      [lastFetchedKey]: lastFetchedBlockNumber\n    },\n    blockNumber: lastFetchedBlockNumber\n  });\n};\n_getBlockNumberKey = new WeakSet();\ngetBlockNumberKey_fn = function(additionalKeys) {\n  const currentChainId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getChainId).call(this);\n  const currentAccount = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getCurrentAccount).call(this)?.address.toLowerCase();\n  return [currentChainId, currentAccount, ...additionalKeys].join(\"#\");\n};\n_canStart = new WeakSet();\ncanStart_fn = function() {\n  const isEnabled = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isEnabled).call(this);\n  const currentChainId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getChainId).call(this);\n  const isSupportedNetwork = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _remoteTransactionSource).isSupportedNetwork(currentChainId);\n  return isEnabled && isSupportedNetwork;\n};\n\n\n\nexports.IncomingTransactionHelper = IncomingTransactionHelper;\n//# sourceMappingURL=chunk-RHDPOIS4.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkOZ6UB42Cjs = require('./chunk-OZ6UB42C.js');\n\n// src/utils/validation.ts\nvar _abi = require('@ethersproject/abi');\nvar _controllerutils = require('@metamask/controller-utils');\nvar _metamaskethabis = require('@metamask/metamask-eth-abis');\nvar _rpcerrors = require('@metamask/rpc-errors');\nasync function validateTransactionOrigin(permittedAddresses, selectedAddress, from, origin) {\n  if (origin === _controllerutils.ORIGIN_METAMASK) {\n    if (from !== selectedAddress) {\n      throw _rpcerrors.rpcErrors.internal({\n        message: `Internally initiated transaction is using invalid account.`,\n        data: {\n          origin,\n          fromAddress: from,\n          selectedAddress\n        }\n      });\n    }\n    return;\n  }\n  if (!permittedAddresses.includes(from)) {\n    throw _rpcerrors.providerErrors.unauthorized({ data: { origin } });\n  }\n}\nfunction validateTxParams(txParams, isEIP1559Compatible = true) {\n  validateEIP1559Compatibility(txParams, isEIP1559Compatible);\n  validateParamFrom(txParams.from);\n  validateParamRecipient(txParams);\n  validateParamValue(txParams.value);\n  validateParamData(txParams.data);\n  validateParamChainId(txParams.chainId);\n  validateGasFeeParams(txParams);\n}\nfunction validateEIP1559Compatibility(txParams, isEIP1559Compatible) {\n  if (_chunkOZ6UB42Cjs.isEIP1559Transaction.call(void 0, txParams) && !isEIP1559Compatible) {\n    throw _rpcerrors.rpcErrors.invalidParams(\n      \"Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559\"\n    );\n  }\n}\nfunction validateParamValue(value) {\n  if (value !== void 0) {\n    if (value.includes(\"-\")) {\n      throw _rpcerrors.rpcErrors.invalidParams(\n        `Invalid transaction value \"${value}\": not a positive number.`\n      );\n    }\n    if (value.includes(\".\")) {\n      throw _rpcerrors.rpcErrors.invalidParams(\n        `Invalid transaction value \"${value}\": number must be in wei.`\n      );\n    }\n    const intValue = parseInt(value, 10);\n    const isValid = Number.isFinite(intValue) && !Number.isNaN(intValue) && !isNaN(Number(value)) && Number.isSafeInteger(intValue);\n    if (!isValid) {\n      throw _rpcerrors.rpcErrors.invalidParams(\n        `Invalid transaction value ${value}: number must be a valid number.`\n      );\n    }\n  }\n}\nfunction validateParamRecipient(txParams) {\n  if (txParams.to === \"0x\" || txParams.to === void 0) {\n    if (txParams.data) {\n      delete txParams.to;\n    } else {\n      throw _rpcerrors.rpcErrors.invalidParams(`Invalid \"to\" address.`);\n    }\n  } else if (txParams.to !== void 0 && !_controllerutils.isValidHexAddress.call(void 0, txParams.to)) {\n    throw _rpcerrors.rpcErrors.invalidParams(`Invalid \"to\" address.`);\n  }\n}\nfunction validateParamFrom(from) {\n  if (!from || typeof from !== \"string\") {\n    throw _rpcerrors.rpcErrors.invalidParams(\n      `Invalid \"from\" address ${from}: not a string.`\n    );\n  }\n  if (!_controllerutils.isValidHexAddress.call(void 0, from)) {\n    throw _rpcerrors.rpcErrors.invalidParams('Invalid \"from\" address.');\n  }\n}\nfunction validateParamData(value) {\n  if (value) {\n    const ERC20Interface = new (0, _abi.Interface)(_metamaskethabis.abiERC20);\n    try {\n      ERC20Interface.parseTransaction({ data: value });\n    } catch (error) {\n      if (error.message.match(/BUFFER_OVERRUN/u)) {\n        throw _rpcerrors.rpcErrors.invalidParams(\n          \"Invalid transaction params: data out-of-bounds, BUFFER_OVERRUN.\"\n        );\n      }\n    }\n  }\n}\nfunction validateParamChainId(chainId) {\n  if (chainId !== void 0 && typeof chainId !== \"number\" && typeof chainId !== \"string\") {\n    throw _rpcerrors.rpcErrors.invalidParams(\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `Invalid transaction params: chainId is not a Number or hex string. got: (${chainId})`\n    );\n  }\n}\nfunction validateGasFeeParams(txParams) {\n  if (txParams.gasPrice) {\n    ensureProperTransactionEnvelopeTypeProvided(txParams, \"gasPrice\");\n    ensureMutuallyExclusiveFieldsNotProvided(\n      txParams,\n      \"gasPrice\",\n      \"maxFeePerGas\"\n    );\n    ensureMutuallyExclusiveFieldsNotProvided(\n      txParams,\n      \"gasPrice\",\n      \"maxPriorityFeePerGas\"\n    );\n    ensureFieldIsString(txParams, \"gasPrice\");\n  }\n  if (txParams.maxFeePerGas) {\n    ensureProperTransactionEnvelopeTypeProvided(txParams, \"maxFeePerGas\");\n    ensureMutuallyExclusiveFieldsNotProvided(\n      txParams,\n      \"maxFeePerGas\",\n      \"gasPrice\"\n    );\n    ensureFieldIsString(txParams, \"maxFeePerGas\");\n  }\n  if (txParams.maxPriorityFeePerGas) {\n    ensureProperTransactionEnvelopeTypeProvided(\n      txParams,\n      \"maxPriorityFeePerGas\"\n    );\n    ensureMutuallyExclusiveFieldsNotProvided(\n      txParams,\n      \"maxPriorityFeePerGas\",\n      \"gasPrice\"\n    );\n    ensureFieldIsString(txParams, \"maxPriorityFeePerGas\");\n  }\n}\nfunction ensureProperTransactionEnvelopeTypeProvided(txParams, field) {\n  switch (field) {\n    case \"maxFeePerGas\":\n    case \"maxPriorityFeePerGas\":\n      if (txParams.type && txParams.type !== \"0x2\" /* feeMarket */) {\n        throw _rpcerrors.rpcErrors.invalidParams(\n          `Invalid transaction envelope type: specified type \"${txParams.type}\" but including maxFeePerGas and maxPriorityFeePerGas requires type: \"${\"0x2\" /* feeMarket */}\"`\n        );\n      }\n      break;\n    case \"gasPrice\":\n    default:\n      if (txParams.type && txParams.type === \"0x2\" /* feeMarket */) {\n        throw _rpcerrors.rpcErrors.invalidParams(\n          `Invalid transaction envelope type: specified type \"${txParams.type}\" but included a gasPrice instead of maxFeePerGas and maxPriorityFeePerGas`\n        );\n      }\n  }\n}\nfunction ensureMutuallyExclusiveFieldsNotProvided(txParams, fieldBeingValidated, mutuallyExclusiveField) {\n  if (typeof txParams[mutuallyExclusiveField] !== \"undefined\") {\n    throw _rpcerrors.rpcErrors.invalidParams(\n      `Invalid transaction params: specified ${fieldBeingValidated} but also included ${mutuallyExclusiveField}, these cannot be mixed`\n    );\n  }\n}\nfunction ensureFieldIsString(txParams, field) {\n  if (typeof txParams[field] !== \"string\") {\n    throw _rpcerrors.rpcErrors.invalidParams(\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `Invalid transaction params: ${field} is not a string. got: (${txParams[field]})`\n    );\n  }\n}\n\n\n\n\nexports.validateTransactionOrigin = validateTransactionOrigin; exports.validateTxParams = validateTxParams;\n//# sourceMappingURL=chunk-RXIUMVA5.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/logger.ts\nvar _utils = require('@metamask/utils');\nvar projectLogger = _utils.createProjectLogger.call(void 0, \"transaction-controller\");\nvar incomingTransactionsLogger = _utils.createModuleLogger.call(void 0, \n  projectLogger,\n  \"incoming-transactions\"\n);\n\n\n\n\n\nexports.createModuleLogger = _utils.createModuleLogger; exports.projectLogger = projectLogger; exports.incomingTransactionsLogger = incomingTransactionsLogger;\n//# sourceMappingURL=chunk-S6VGOPUY.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\nvar _chunkPRUNMTRDjs = require('./chunk-PRUNMTRD.js');\n\n\nvar _chunk74W7X6BEjs = require('./chunk-74W7X6BE.js');\n\n\nvar _chunkSD6CWFDFjs = require('./chunk-SD6CWFDF.js');\n\n\n\nvar _chunkRXIUMVA5js = require('./chunk-RXIUMVA5.js');\n\n\nvar _chunkULD4JC3Qjs = require('./chunk-ULD4JC3Q.js');\n\n\nvar _chunk7LXE4KHVjs = require('./chunk-7LXE4KHV.js');\n\n\n\n\nvar _chunkV72C4MCRjs = require('./chunk-V72C4MCR.js');\n\n\n\nvar _chunkQP75SWIQjs = require('./chunk-QP75SWIQ.js');\n\n\nvar _chunkNYKRCWBGjs = require('./chunk-NYKRCWBG.js');\n\n\nvar _chunkWR5F34OWjs = require('./chunk-WR5F34OW.js');\n\n\nvar _chunkTJMQEH57js = require('./chunk-TJMQEH57.js');\n\n\nvar _chunk2EU6346Vjs = require('./chunk-2EU6346V.js');\n\n\n\nvar _chunk2XKEAKQGjs = require('./chunk-2XKEAKQG.js');\n\n\nvar _chunkRHDPOIS4js = require('./chunk-RHDPOIS4.js');\n\n\nvar _chunk6OLJWLKKjs = require('./chunk-6OLJWLKK.js');\n\n\nvar _chunk7NMV2NPMjs = require('./chunk-7NMV2NPM.js');\n\n\nvar _chunkARZHJFVGjs = require('./chunk-ARZHJFVG.js');\n\n\nvar _chunkQTKXIDGEjs = require('./chunk-QTKXIDGE.js');\n\n\nvar _chunkC3WC4OJ3js = require('./chunk-C3WC4OJ3.js');\n\n\n\nvar _chunkQH2H4W3Njs = require('./chunk-QH2H4W3N.js');\n\n\n\n\n\n\n\n\n\n\n\nvar _chunkOZ6UB42Cjs = require('./chunk-OZ6UB42C.js');\n\n\nvar _chunk76FONEDAjs = require('./chunk-76FONEDA.js');\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/TransactionController.ts\nvar _common = require('@ethereumjs/common');\nvar _tx = require('@ethereumjs/tx');\nvar _util = require('@ethereumjs/util');\nvar _basecontroller = require('@metamask/base-controller');\n\n\n\n\n\n\nvar _controllerutils = require('@metamask/controller-utils');\nvar _ethquery = require('@metamask/eth-query'); var _ethquery2 = _interopRequireDefault(_ethquery);\nvar _networkcontroller = require('@metamask/network-controller');\nvar _noncetracker = require('@metamask/nonce-tracker');\nvar _rpcerrors = require('@metamask/rpc-errors');\nvar _utils = require('@metamask/utils');\nvar _asyncmutex = require('async-mutex');\nvar _ethmethodregistry = require('eth-method-registry');\nvar _events = require('events');\nvar _lodash = require('lodash');\nvar _uuid = require('uuid');\nvar metadata = {\n  transactions: {\n    persist: true,\n    anonymous: false\n  },\n  methodData: {\n    persist: true,\n    anonymous: false\n  },\n  lastFetchedBlockNumbers: {\n    persist: true,\n    anonymous: false\n  }\n};\nvar HARDFORK = _common.Hardfork.London;\nvar CANCEL_RATE = 1.1;\nvar SPEED_UP_RATE = 1.1;\nvar controllerName = \"TransactionController\";\nvar ApprovalState = /* @__PURE__ */ ((ApprovalState2) => {\n  ApprovalState2[\"Approved\"] = \"approved\";\n  ApprovalState2[\"NotApproved\"] = \"not-approved\";\n  ApprovalState2[\"SkippedViaBeforePublishHook\"] = \"skipped-via-before-publish-hook\";\n  return ApprovalState2;\n})(ApprovalState || {});\nfunction getDefaultTransactionControllerState() {\n  return {\n    methodData: {},\n    transactions: [],\n    lastFetchedBlockNumbers: {}\n  };\n}\nvar _internalEvents, _incomingTransactionOptions, _pendingTransactionOptions, _transactionHistoryLimit, _isSimulationEnabled, _testGasFeeFlows, _multichainTrackingHelper, _createNonceTracker, createNonceTracker_fn, _createIncomingTransactionHelper, createIncomingTransactionHelper_fn, _createPendingTransactionTracker, createPendingTransactionTracker_fn, _checkForPendingTransactionAndStartPolling, _stopAllTracking, stopAllTracking_fn, _removeIncomingTransactionHelperListeners, removeIncomingTransactionHelperListeners_fn, _addIncomingTransactionHelperListeners, addIncomingTransactionHelperListeners_fn, _removePendingTransactionTrackerListeners, removePendingTransactionTrackerListeners_fn, _addPendingTransactionTrackerListeners, addPendingTransactionTrackerListeners_fn, _getNonceTrackerPendingTransactions, getNonceTrackerPendingTransactions_fn, _getGasFeeFlows, getGasFeeFlows_fn, _getLayer1GasFeeFlows, getLayer1GasFeeFlows_fn, _updateTransactionInternal, updateTransactionInternal_fn, _checkIfTransactionParamsUpdated, checkIfTransactionParamsUpdated_fn, _onTransactionParamsUpdated, onTransactionParamsUpdated_fn, _updateSimulationData, updateSimulationData_fn, _onGasFeePollerTransactionUpdate, onGasFeePollerTransactionUpdate_fn, _getNetworkClientId, getNetworkClientId_fn, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn, _getGlobalChainId, getGlobalChainId_fn, _isCustomNetwork, isCustomNetwork_fn, _getSelectedAccount, getSelectedAccount_fn;\nvar TransactionController = class extends _basecontroller.BaseController {\n  /**\n   * Constructs a TransactionController.\n   *\n   * @param options - The controller options.\n   * @param options.blockTracker - The block tracker used to poll for new blocks data.\n   * @param options.disableHistory - Whether to disable storing history in transaction metadata.\n   * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.\n   * @param options.disableSwaps - Whether to disable additional processing on swaps transactions.\n   * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n   * @param options.getExternalPendingTransactions - Callback to retrieve pending transactions from external sources.\n   * @param options.getGasFeeEstimates - Callback to retrieve gas fee estimates.\n   * @param options.getNetworkClientRegistry - Gets the network client registry.\n   * @param options.getNetworkState - Gets the state of the network controller.\n   * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.\n   * @param options.getSavedGasFees - Gets the saved gas fee config.\n   * @param options.incomingTransactions - Configuration options for incoming transaction support.\n   * @param options.isMultichainEnabled - Enable multichain support.\n   * @param options.isSimulationEnabled - Whether new transactions will be automatically simulated.\n   * @param options.messenger - The controller messenger.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.pendingTransactions - Configuration options for pending transaction support.\n   * @param options.provider - The provider used to create the underlying EthQuery instance.\n   * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.\n   * @param options.sign - Function used to sign transactions.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.testGasFeeFlows - Whether to use the test gas fee flow.\n   * @param options.transactionHistoryLimit - Transaction history limit.\n   * @param options.hooks - The controller hooks.\n   */\n  constructor({\n    blockTracker,\n    disableHistory,\n    disableSendFlowHistory,\n    disableSwaps,\n    getCurrentAccountEIP1559Compatibility,\n    getCurrentNetworkEIP1559Compatibility,\n    getExternalPendingTransactions,\n    getGasFeeEstimates,\n    getNetworkClientRegistry,\n    getNetworkState,\n    getPermittedAccounts,\n    getSavedGasFees,\n    incomingTransactions = {},\n    isMultichainEnabled = false,\n    isSimulationEnabled,\n    messenger,\n    onNetworkStateChange,\n    pendingTransactions = {},\n    provider,\n    securityProviderRequest,\n    sign,\n    state,\n    testGasFeeFlows,\n    transactionHistoryLimit = 40,\n    hooks\n  }) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTransactionControllerState(),\n        ...state\n      }\n    });\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _createNonceTracker);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _createIncomingTransactionHelper);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _createPendingTransactionTracker);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _stopAllTracking);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _removeIncomingTransactionHelperListeners);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _addIncomingTransactionHelperListeners);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _removePendingTransactionTrackerListeners);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _addPendingTransactionTrackerListeners);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNonceTrackerPendingTransactions);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGasFeeFlows);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getLayer1GasFeeFlows);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateTransactionInternal);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _checkIfTransactionParamsUpdated);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onTransactionParamsUpdated);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateSimulationData);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onGasFeePollerTransactionUpdate);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNetworkClientId);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGlobalNetworkClientId);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGlobalChainId);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isCustomNetwork);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getSelectedAccount);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _internalEvents, new (0, _events.EventEmitter)());\n    this.approvingTransactionIds = /* @__PURE__ */ new Set();\n    this.mutex = new (0, _asyncmutex.Mutex)();\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _incomingTransactionOptions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _pendingTransactionOptions, void 0);\n    this.signAbortCallbacks = /* @__PURE__ */ new Map();\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _transactionHistoryLimit, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isSimulationEnabled, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _testGasFeeFlows, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _multichainTrackingHelper, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _checkForPendingTransactionAndStartPolling, () => {\n      this.pendingTransactionTracker.startIfPendingTransactions();\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).checkForPendingTransactionAndStartPolling();\n    });\n    this.messagingSystem = messenger;\n    this.getNetworkState = getNetworkState;\n    this.isSendFlowHistoryDisabled = disableSendFlowHistory ?? false;\n    this.isHistoryDisabled = disableHistory ?? false;\n    this.isSwapsDisabled = disableSwaps ?? false;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isSimulationEnabled, isSimulationEnabled ?? (() => true));\n    this.registry = new (0, _ethmethodregistry.MethodRegistry)({ provider });\n    this.getSavedGasFees = getSavedGasFees ?? ((_chainId) => void 0);\n    this.getCurrentAccountEIP1559Compatibility = getCurrentAccountEIP1559Compatibility ?? (() => Promise.resolve(true));\n    this.getCurrentNetworkEIP1559Compatibility = getCurrentNetworkEIP1559Compatibility;\n    this.getGasFeeEstimates = getGasFeeEstimates || (() => Promise.resolve({}));\n    this.getPermittedAccounts = getPermittedAccounts;\n    this.getExternalPendingTransactions = getExternalPendingTransactions ?? (() => []);\n    this.securityProviderRequest = securityProviderRequest;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _incomingTransactionOptions, incomingTransactions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _pendingTransactionOptions, pendingTransactions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _transactionHistoryLimit, transactionHistoryLimit);\n    this.sign = sign;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _testGasFeeFlows, testGasFeeFlows === true);\n    this.afterSign = hooks?.afterSign ?? (() => true);\n    this.beforeApproveOnInit = hooks?.beforeApproveOnInit ?? (() => true);\n    this.beforeCheckPendingTransaction = hooks?.beforeCheckPendingTransaction ?? /* istanbul ignore next */\n    (() => true);\n    this.beforePublish = hooks?.beforePublish ?? (() => true);\n    this.getAdditionalSignArguments = hooks?.getAdditionalSignArguments ?? (() => []);\n    this.publish = hooks?.publish ?? (() => Promise.resolve({ transactionHash: void 0 }));\n    this.nonceTracker = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _createNonceTracker, createNonceTracker_fn).call(this, {\n      provider,\n      blockTracker\n    });\n    const findNetworkClientIdByChainId = (chainId) => {\n      return this.messagingSystem.call(\n        `NetworkController:findNetworkClientIdByChainId`,\n        chainId\n      );\n    };\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _multichainTrackingHelper, new (0, _chunk6OLJWLKKjs.MultichainTrackingHelper)({\n      isMultichainEnabled,\n      provider,\n      nonceTracker: this.nonceTracker,\n      incomingTransactionOptions: incomingTransactions,\n      findNetworkClientIdByChainId,\n      getNetworkClientById: (networkClientId) => {\n        return this.messagingSystem.call(\n          `NetworkController:getNetworkClientById`,\n          networkClientId\n        );\n      },\n      getNetworkClientRegistry,\n      removeIncomingTransactionHelperListeners: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _removeIncomingTransactionHelperListeners, removeIncomingTransactionHelperListeners_fn).bind(this),\n      removePendingTransactionTrackerListeners: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _removePendingTransactionTrackerListeners, removePendingTransactionTrackerListeners_fn).bind(this),\n      createNonceTracker: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _createNonceTracker, createNonceTracker_fn).bind(this),\n      createIncomingTransactionHelper: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _createIncomingTransactionHelper, createIncomingTransactionHelper_fn).bind(this),\n      createPendingTransactionTracker: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _createPendingTransactionTracker, createPendingTransactionTracker_fn).bind(this),\n      onNetworkStateChange: (listener) => {\n        this.messagingSystem.subscribe(\n          \"NetworkController:stateChange\",\n          listener\n        );\n      }\n    }));\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).initialize();\n    const etherscanRemoteTransactionSource = new (0, _chunk7NMV2NPMjs.EtherscanRemoteTransactionSource)({\n      includeTokenTransfers: incomingTransactions.includeTokenTransfers\n    });\n    this.incomingTransactionHelper = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _createIncomingTransactionHelper, createIncomingTransactionHelper_fn).call(this, {\n      blockTracker,\n      etherscanRemoteTransactionSource\n    });\n    this.pendingTransactionTracker = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _createPendingTransactionTracker, createPendingTransactionTracker_fn).call(this, {\n      provider,\n      blockTracker\n    });\n    this.gasFeeFlows = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGasFeeFlows, getGasFeeFlows_fn).call(this);\n    this.layer1GasFeeFlows = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getLayer1GasFeeFlows, getLayer1GasFeeFlows_fn).call(this);\n    const gasFeePoller = new (0, _chunk2EU6346Vjs.GasFeePoller)({\n      findNetworkClientIdByChainId,\n      gasFeeFlows: this.gasFeeFlows,\n      getGasFeeControllerEstimates: this.getGasFeeEstimates,\n      getProvider: (chainId, networkClientId) => _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getProvider({\n        networkClientId,\n        chainId\n      }),\n      getTransactions: () => this.state.transactions,\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      onStateChange: (listener) => {\n        this.messagingSystem.subscribe(\n          \"TransactionController:stateChange\",\n          listener\n        );\n      }\n    });\n    gasFeePoller.hub.on(\n      \"transaction-updated\",\n      _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onGasFeePollerTransactionUpdate, onGasFeePollerTransactionUpdate_fn).bind(this)\n    );\n    this.messagingSystem.subscribe(\n      \"TransactionController:stateChange\",\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _checkForPendingTransactionAndStartPolling)\n    );\n    onNetworkStateChange(() => {\n      _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Detected network change\", this.getChainId());\n      this.pendingTransactionTracker.startIfPendingTransactions();\n      this.onBootCleanup();\n    });\n    this.onBootCleanup();\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _checkForPendingTransactionAndStartPolling).call(this);\n  }\n  failTransaction(transactionMeta, error, actionId) {\n    const newTransactionMeta = _lodash.merge.call(void 0, {}, transactionMeta, {\n      error: _chunkOZ6UB42Cjs.normalizeTxError.call(void 0, error),\n      status: \"failed\" /* failed */\n    });\n    this.messagingSystem.publish(`${controllerName}:transactionFailed`, {\n      actionId,\n      error: error.message,\n      transactionMeta: newTransactionMeta\n    });\n    this.updateTransaction(\n      newTransactionMeta,\n      \"TransactionController#failTransaction - Add error message and set status to failed\"\n    );\n    this.onTransactionStatusChange(newTransactionMeta);\n    this.messagingSystem.publish(\n      `${controllerName}:transactionFinished`,\n      newTransactionMeta\n    );\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalEvents).emit(\n      `${transactionMeta.id}:finished`,\n      newTransactionMeta\n    );\n  }\n  async registryLookup(fourBytePrefix) {\n    const registryMethod = await this.registry.lookup(fourBytePrefix);\n    if (!registryMethod) {\n      return {\n        registryMethod: \"\",\n        parsedRegistryMethod: { name: void 0, args: void 0 }\n      };\n    }\n    const parsedRegistryMethod = this.registry.parse(registryMethod);\n    return { registryMethod, parsedRegistryMethod };\n  }\n  /**\n   * Stops polling and removes listeners to prepare the controller for garbage collection.\n   */\n  destroy() {\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _stopAllTracking, stopAllTracking_fn).call(this);\n  }\n  /**\n   * Handle new method data request.\n   *\n   * @param fourBytePrefix - The method prefix.\n   * @returns The method data object corresponding to the given signature prefix.\n   */\n  async handleMethodData(fourBytePrefix) {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const { methodData } = this.state;\n      const knownMethod = Object.keys(methodData).find(\n        (knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix\n      );\n      if (knownMethod) {\n        return methodData[fourBytePrefix];\n      }\n      const registry = await this.registryLookup(fourBytePrefix);\n      this.update((state) => {\n        state.methodData[fourBytePrefix] = registry;\n      });\n      return registry;\n    } finally {\n      releaseLock();\n    }\n  }\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param txParams - Standard parameters for an Ethereum transaction.\n   * @param opts - Additional options to control how the transaction is added.\n   * @param opts.actionId - Unique ID to prevent duplicate requests.\n   * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.\n   * @param opts.method - RPC method that requested the transaction.\n   * @param opts.origin - The origin of the transaction request, such as a dApp hostname.\n   * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.\n   * @param opts.securityAlertResponse - Response from security validator.\n   * @param opts.sendFlowHistory - The sendFlowHistory entries to add.\n   * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.\n   * @param opts.swaps - Options for swaps transactions.\n   * @param opts.swaps.hasApproveTx - Whether the transaction has an approval transaction.\n   * @param opts.swaps.meta - Metadata for swap transaction.\n   * @param opts.networkClientId - The id of the network client for this transaction.\n   * @returns Object containing a promise resolving to the transaction hash if approved.\n   */\n  async addTransaction(txParams, {\n    actionId,\n    deviceConfirmedOn,\n    method,\n    origin,\n    requireApproval,\n    securityAlertResponse,\n    sendFlowHistory,\n    swaps = {},\n    type,\n    networkClientId: requestNetworkClientId\n  } = {}) {\n    _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Adding transaction\", txParams);\n    txParams = _chunkOZ6UB42Cjs.normalizeTransactionParams.call(void 0, txParams);\n    if (requestNetworkClientId && !_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).has(requestNetworkClientId)) {\n      throw new Error(\n        \"The networkClientId for this transaction could not be found\"\n      );\n    }\n    const networkClientId = requestNetworkClientId ?? _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn).call(this);\n    const isEIP1559Compatible = await this.getEIP1559Compatibility(\n      networkClientId\n    );\n    _chunkRXIUMVA5js.validateTxParams.call(void 0, txParams, isEIP1559Compatible);\n    if (origin) {\n      await _chunkRXIUMVA5js.validateTransactionOrigin.call(void 0, \n        await this.getPermittedAccounts(origin),\n        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getSelectedAccount, getSelectedAccount_fn).call(this).address,\n        txParams.from,\n        origin\n      );\n    }\n    const dappSuggestedGasFees = this.generateDappSuggestedGasFees(\n      txParams,\n      origin\n    );\n    const chainId = this.getChainId(networkClientId);\n    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({\n      networkClientId,\n      chainId\n    });\n    const transactionType = type ?? (await _chunkSD6CWFDFjs.determineTransactionType.call(void 0, txParams, ethQuery)).type;\n    const existingTransactionMeta = this.getTransactionWithActionId(actionId);\n    let addedTransactionMeta = existingTransactionMeta ? _lodash.cloneDeep.call(void 0, existingTransactionMeta) : {\n      // Add actionId to txMeta to check if same actionId is seen again\n      actionId,\n      chainId,\n      dappSuggestedGasFees,\n      deviceConfirmedOn,\n      id: _uuid.v1.call(void 0, ),\n      origin,\n      securityAlertResponse,\n      status: \"unapproved\" /* unapproved */,\n      time: Date.now(),\n      txParams,\n      userEditedGasLimit: false,\n      verifiedOnBlockchain: false,\n      type: transactionType,\n      networkClientId\n    };\n    await this.updateGasProperties(addedTransactionMeta);\n    if (!existingTransactionMeta) {\n      if (method && this.securityProviderRequest) {\n        const securityProviderResponse = await this.securityProviderRequest(\n          addedTransactionMeta,\n          method\n        );\n        addedTransactionMeta.securityProviderResponse = securityProviderResponse;\n      }\n      if (!this.isSendFlowHistoryDisabled) {\n        addedTransactionMeta.sendFlowHistory = sendFlowHistory ?? [];\n      }\n      if (!this.isHistoryDisabled) {\n        addedTransactionMeta = _chunkQP75SWIQjs.addInitialHistorySnapshot.call(void 0, addedTransactionMeta);\n      }\n      addedTransactionMeta = _chunkQH2H4W3Njs.updateSwapsTransaction.call(void 0, \n        addedTransactionMeta,\n        transactionType,\n        swaps,\n        {\n          isSwapsDisabled: this.isSwapsDisabled,\n          cancelTransaction: this.cancelTransaction.bind(this),\n          messenger: this.messagingSystem\n        }\n      );\n      this.addMetadata(addedTransactionMeta);\n      if (requireApproval !== false) {\n        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateSimulationData, updateSimulationData_fn).call(this, addedTransactionMeta);\n      } else {\n        _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Skipping simulation as approval not required\");\n      }\n      this.messagingSystem.publish(\n        `${controllerName}:unapprovedTransactionAdded`,\n        addedTransactionMeta\n      );\n    }\n    return {\n      result: this.processApproval(addedTransactionMeta, {\n        isExisting: Boolean(existingTransactionMeta),\n        requireApproval,\n        actionId\n      }),\n      transactionMeta: addedTransactionMeta\n    };\n  }\n  startIncomingTransactionPolling(networkClientIds = []) {\n    if (networkClientIds.length === 0) {\n      this.incomingTransactionHelper.start();\n      return;\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).startIncomingTransactionPolling(\n      networkClientIds\n    );\n  }\n  stopIncomingTransactionPolling(networkClientIds = []) {\n    if (networkClientIds.length === 0) {\n      this.incomingTransactionHelper.stop();\n      return;\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).stopIncomingTransactionPolling(\n      networkClientIds\n    );\n  }\n  stopAllIncomingTransactionPolling() {\n    this.incomingTransactionHelper.stop();\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).stopAllIncomingTransactionPolling();\n  }\n  async updateIncomingTransactions(networkClientIds = []) {\n    if (networkClientIds.length === 0) {\n      await this.incomingTransactionHelper.update();\n      return;\n    }\n    await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).updateIncomingTransactions(\n      networkClientIds\n    );\n  }\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param gasValues - The gas values to use for the cancellation transaction.\n   * @param options - The options for the cancellation transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests.\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async stopTransaction(transactionId, gasValues, {\n    estimatedBaseFee,\n    actionId\n  } = {}) {\n    if (this.getTransactionWithActionId(actionId)) {\n      return;\n    }\n    if (gasValues) {\n      gasValues = _chunkOZ6UB42Cjs.normalizeGasFeeValues.call(void 0, gasValues);\n      _chunkOZ6UB42Cjs.validateGasValues.call(void 0, gasValues);\n    }\n    _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Creating cancel transaction\", transactionId, gasValues);\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      return;\n    }\n    if (!this.sign) {\n      throw new Error(\"No sign method defined.\");\n    }\n    const minGasPrice = _chunkOZ6UB42Cjs.getIncreasedPriceFromExisting.call(void 0, \n      transactionMeta.txParams.gasPrice,\n      CANCEL_RATE\n    );\n    const gasPriceFromValues = _chunkOZ6UB42Cjs.isGasPriceValue.call(void 0, gasValues) && gasValues.gasPrice;\n    const newGasPrice = gasPriceFromValues && _chunkOZ6UB42Cjs.validateMinimumIncrease.call(void 0, gasPriceFromValues, minGasPrice) || minGasPrice;\n    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;\n    const minMaxFeePerGas = _chunkOZ6UB42Cjs.getIncreasedPriceFromExisting.call(void 0, \n      existingMaxFeePerGas,\n      CANCEL_RATE\n    );\n    const maxFeePerGasValues = _chunkOZ6UB42Cjs.isFeeMarketEIP1559Values.call(void 0, gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas = maxFeePerGasValues && _chunkOZ6UB42Cjs.validateMinimumIncrease.call(void 0, maxFeePerGasValues, minMaxFeePerGas) || existingMaxFeePerGas && minMaxFeePerGas;\n    const existingMaxPriorityFeePerGas = transactionMeta.txParams?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = _chunkOZ6UB42Cjs.getIncreasedPriceFromExisting.call(void 0, \n      existingMaxPriorityFeePerGas,\n      CANCEL_RATE\n    );\n    const maxPriorityFeePerGasValues = _chunkOZ6UB42Cjs.isFeeMarketEIP1559Values.call(void 0, gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas = maxPriorityFeePerGasValues && _chunkOZ6UB42Cjs.validateMinimumIncrease.call(void 0, \n      maxPriorityFeePerGasValues,\n      minMaxPriorityFeePerGas\n    ) || existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas;\n    const newTxParams = newMaxFeePerGas && newMaxPriorityFeePerGas ? {\n      from: transactionMeta.txParams.from,\n      gasLimit: transactionMeta.txParams.gas,\n      maxFeePerGas: newMaxFeePerGas,\n      maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n      type: \"0x2\" /* feeMarket */,\n      nonce: transactionMeta.txParams.nonce,\n      to: transactionMeta.txParams.from,\n      value: \"0x0\"\n    } : {\n      from: transactionMeta.txParams.from,\n      gasLimit: transactionMeta.txParams.gas,\n      gasPrice: newGasPrice,\n      nonce: transactionMeta.txParams.nonce,\n      to: transactionMeta.txParams.from,\n      value: \"0x0\"\n    };\n    const unsignedEthTx = this.prepareUnsignedEthTx(\n      transactionMeta.chainId,\n      newTxParams\n    );\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from\n    );\n    const rawTx = _util.bufferToHex.call(void 0, signedTx.serialize());\n    const newFee = newTxParams.maxFeePerGas ?? newTxParams.gasPrice;\n    const oldFee = newTxParams.maxFeePerGas ? transactionMeta.txParams.maxFeePerGas : transactionMeta.txParams.gasPrice;\n    _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Submitting cancel transaction\", {\n      oldFee,\n      newFee,\n      txParams: newTxParams\n    });\n    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({\n      networkClientId: transactionMeta.networkClientId,\n      chainId: transactionMeta.chainId\n    });\n    const hash = await this.publishTransactionForRetry(\n      ethQuery,\n      rawTx,\n      transactionMeta\n    );\n    const cancelTransactionMeta = {\n      actionId,\n      chainId: transactionMeta.chainId,\n      networkClientId: transactionMeta.networkClientId,\n      estimatedBaseFee,\n      hash,\n      id: _uuid.v1.call(void 0, ),\n      originalGasEstimate: transactionMeta.txParams.gas,\n      status: \"submitted\" /* submitted */,\n      time: Date.now(),\n      type: \"cancel\" /* cancel */,\n      txParams: newTxParams\n    };\n    this.addMetadata(cancelTransactionMeta);\n    this.messagingSystem.publish(`${controllerName}:transactionApproved`, {\n      transactionMeta: cancelTransactionMeta,\n      actionId\n    });\n    this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {\n      transactionMeta: cancelTransactionMeta,\n      actionId\n    });\n    this.messagingSystem.publish(\n      `${controllerName}:transactionFinished`,\n      cancelTransactionMeta\n    );\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalEvents).emit(\n      `${transactionMeta.id}:finished`,\n      cancelTransactionMeta\n    );\n  }\n  /**\n   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.\n   *\n   * @param transactionId - The ID of the transaction to speed up.\n   * @param gasValues - The gas values to use for the speed up transaction.\n   * @param options - The options for the speed up transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async speedUpTransaction(transactionId, gasValues, {\n    actionId,\n    estimatedBaseFee\n  } = {}) {\n    if (this.getTransactionWithActionId(actionId)) {\n      return;\n    }\n    if (gasValues) {\n      gasValues = _chunkOZ6UB42Cjs.normalizeGasFeeValues.call(void 0, gasValues);\n      _chunkOZ6UB42Cjs.validateGasValues.call(void 0, gasValues);\n    }\n    _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Creating speed up transaction\", transactionId, gasValues);\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      return;\n    }\n    if (!this.sign) {\n      throw new Error(\"No sign method defined.\");\n    }\n    const minGasPrice = _chunkOZ6UB42Cjs.getIncreasedPriceFromExisting.call(void 0, \n      transactionMeta.txParams.gasPrice,\n      SPEED_UP_RATE\n    );\n    const gasPriceFromValues = _chunkOZ6UB42Cjs.isGasPriceValue.call(void 0, gasValues) && gasValues.gasPrice;\n    const newGasPrice = gasPriceFromValues && _chunkOZ6UB42Cjs.validateMinimumIncrease.call(void 0, gasPriceFromValues, minGasPrice) || minGasPrice;\n    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;\n    const minMaxFeePerGas = _chunkOZ6UB42Cjs.getIncreasedPriceFromExisting.call(void 0, \n      existingMaxFeePerGas,\n      SPEED_UP_RATE\n    );\n    const maxFeePerGasValues = _chunkOZ6UB42Cjs.isFeeMarketEIP1559Values.call(void 0, gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas = maxFeePerGasValues && _chunkOZ6UB42Cjs.validateMinimumIncrease.call(void 0, maxFeePerGasValues, minMaxFeePerGas) || existingMaxFeePerGas && minMaxFeePerGas;\n    const existingMaxPriorityFeePerGas = transactionMeta.txParams?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = _chunkOZ6UB42Cjs.getIncreasedPriceFromExisting.call(void 0, \n      existingMaxPriorityFeePerGas,\n      SPEED_UP_RATE\n    );\n    const maxPriorityFeePerGasValues = _chunkOZ6UB42Cjs.isFeeMarketEIP1559Values.call(void 0, gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas = maxPriorityFeePerGasValues && _chunkOZ6UB42Cjs.validateMinimumIncrease.call(void 0, \n      maxPriorityFeePerGasValues,\n      minMaxPriorityFeePerGas\n    ) || existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas;\n    const txParams = newMaxFeePerGas && newMaxPriorityFeePerGas ? {\n      ...transactionMeta.txParams,\n      gasLimit: transactionMeta.txParams.gas,\n      maxFeePerGas: newMaxFeePerGas,\n      maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n      type: \"0x2\" /* feeMarket */\n    } : {\n      ...transactionMeta.txParams,\n      gasLimit: transactionMeta.txParams.gas,\n      gasPrice: newGasPrice\n    };\n    const unsignedEthTx = this.prepareUnsignedEthTx(\n      transactionMeta.chainId,\n      txParams\n    );\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from\n    );\n    const transactionMetaWithRsv = this.updateTransactionMetaRSV(\n      transactionMeta,\n      signedTx\n    );\n    const rawTx = _util.bufferToHex.call(void 0, signedTx.serialize());\n    const newFee = txParams.maxFeePerGas ?? txParams.gasPrice;\n    const oldFee = txParams.maxFeePerGas ? transactionMetaWithRsv.txParams.maxFeePerGas : transactionMetaWithRsv.txParams.gasPrice;\n    _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Submitting speed up transaction\", { oldFee, newFee, txParams });\n    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({\n      networkClientId: transactionMeta.networkClientId,\n      chainId: transactionMeta.chainId\n    });\n    const hash = await this.publishTransactionForRetry(\n      ethQuery,\n      rawTx,\n      transactionMeta\n    );\n    const baseTransactionMeta = {\n      ...transactionMetaWithRsv,\n      estimatedBaseFee,\n      id: _uuid.v1.call(void 0, ),\n      time: Date.now(),\n      hash,\n      actionId,\n      originalGasEstimate: transactionMeta.txParams.gas,\n      type: \"retry\" /* retry */,\n      originalType: transactionMeta.type\n    };\n    const newTransactionMeta = newMaxFeePerGas && newMaxPriorityFeePerGas ? {\n      ...baseTransactionMeta,\n      txParams: {\n        ...transactionMeta.txParams,\n        maxFeePerGas: newMaxFeePerGas,\n        maxPriorityFeePerGas: newMaxPriorityFeePerGas\n      }\n    } : {\n      ...baseTransactionMeta,\n      txParams: {\n        ...transactionMeta.txParams,\n        gasPrice: newGasPrice\n      }\n    };\n    this.addMetadata(newTransactionMeta);\n    this.messagingSystem.publish(`${controllerName}:transactionApproved`, {\n      transactionMeta: newTransactionMeta,\n      actionId\n    });\n    this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {\n      transactionMeta: newTransactionMeta,\n      actionId\n    });\n    this.messagingSystem.publish(\n      `${controllerName}:speedupTransactionAdded`,\n      newTransactionMeta\n    );\n  }\n  /**\n   * Estimates required gas for a given transaction.\n   *\n   * @param transaction - The transaction to estimate gas for.\n   * @param networkClientId - The network client id to use for the estimate.\n   * @returns The gas and gas price.\n   */\n  async estimateGas(transaction, networkClientId) {\n    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({\n      networkClientId\n    });\n    const { estimatedGas, simulationFails } = await _chunkV72C4MCRjs.estimateGas.call(void 0, \n      transaction,\n      ethQuery\n    );\n    return { gas: estimatedGas, simulationFails };\n  }\n  /**\n   * Estimates required gas for a given transaction and add additional gas buffer with the given multiplier.\n   *\n   * @param transaction - The transaction params to estimate gas for.\n   * @param multiplier - The multiplier to use for the gas buffer.\n   * @param networkClientId - The network client id to use for the estimate.\n   */\n  async estimateGasBuffered(transaction, multiplier, networkClientId) {\n    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({\n      networkClientId\n    });\n    const { blockGasLimit, estimatedGas, simulationFails } = await _chunkV72C4MCRjs.estimateGas.call(void 0, \n      transaction,\n      ethQuery\n    );\n    const gas = _chunkV72C4MCRjs.addGasBuffer.call(void 0, estimatedGas, blockGasLimit, multiplier);\n    return {\n      gas,\n      simulationFails\n    };\n  }\n  /**\n   * Updates an existing transaction in state.\n   *\n   * @param transactionMeta - The new transaction to store in state.\n   * @param note - A note or update reason to include in the transaction history.\n   */\n  updateTransaction(transactionMeta, note) {\n    const { id: transactionId } = transactionMeta;\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, { transactionId, note }, () => ({\n      ...transactionMeta\n    }));\n  }\n  /**\n   * Update the security alert response for a transaction.\n   *\n   * @param transactionId - ID of the transaction.\n   * @param securityAlertResponse - The new security alert response for the transaction.\n   */\n  updateSecurityAlertResponse(transactionId, securityAlertResponse) {\n    if (!securityAlertResponse) {\n      throw new Error(\n        \"updateSecurityAlertResponse: securityAlertResponse should not be null\"\n      );\n    }\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update security alert response as no transaction metadata found`\n      );\n    }\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      securityAlertResponse\n    };\n    this.updateTransaction(\n      updatedTransactionMeta,\n      `${controllerName}:updatesecurityAlertResponse - securityAlertResponse updated`\n    );\n  }\n  /**\n   * Removes all transactions from state, optionally based on the current network.\n   *\n   * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the\n   * current network. If `true`, all transactions are wiped.\n   * @param address - If specified, only transactions originating from this address will be\n   * wiped on current network.\n   */\n  wipeTransactions(ignoreNetwork, address) {\n    if (ignoreNetwork && !address) {\n      this.update((state) => {\n        state.transactions = [];\n      });\n      return;\n    }\n    const currentChainId = this.getChainId();\n    const newTransactions = this.state.transactions.filter(\n      ({ chainId, txParams }) => {\n        const isMatchingNetwork = ignoreNetwork || chainId === currentChainId;\n        if (!isMatchingNetwork) {\n          return true;\n        }\n        const isMatchingAddress = !address || txParams.from?.toLowerCase() === address.toLowerCase();\n        return !isMatchingAddress;\n      }\n    );\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState(newTransactions);\n    });\n  }\n  /**\n   * Adds external provided transaction to state as confirmed transaction.\n   *\n   * @param transactionMeta - TransactionMeta to add transactions.\n   * @param transactionReceipt - TransactionReceipt of the external transaction.\n   * @param baseFeePerGas - Base fee per gas of the external transaction.\n   */\n  async confirmExternalTransaction(transactionMeta, transactionReceipt, baseFeePerGas) {\n    const newTransactionMeta = this.addExternalTransaction(transactionMeta);\n    try {\n      const transactionId = newTransactionMeta.id;\n      const updatedTransactionMeta = {\n        ...newTransactionMeta,\n        status: \"confirmed\" /* confirmed */,\n        txReceipt: transactionReceipt\n      };\n      if (baseFeePerGas) {\n        updatedTransactionMeta.baseFeePerGas = baseFeePerGas;\n      }\n      this.markNonceDuplicatesDropped(transactionId);\n      this.updateTransaction(\n        updatedTransactionMeta,\n        `${controllerName}:confirmExternalTransaction - Add external transaction`\n      );\n      this.onTransactionStatusChange(updatedTransactionMeta);\n      this.updatePostBalance(updatedTransactionMeta);\n      this.messagingSystem.publish(\n        `${controllerName}:transactionConfirmed`,\n        updatedTransactionMeta\n      );\n    } catch (error) {\n      console.error(\"Failed to confirm external transaction\", error);\n    }\n  }\n  /**\n   * Append new send flow history to a transaction.\n   *\n   * @param transactionID - The ID of the transaction to update.\n   * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.\n   * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionSendFlowHistory(transactionID, currentSendFlowHistoryLength, sendFlowHistoryToAdd) {\n    if (this.isSendFlowHistoryDisabled) {\n      throw new Error(\n        \"Send flow history is disabled for the current transaction controller\"\n      );\n    }\n    const transactionMeta = this.getTransaction(transactionID);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update send flow history as no transaction metadata found`\n      );\n    }\n    _chunkOZ6UB42Cjs.validateIfTransactionUnapproved.call(void 0, \n      transactionMeta,\n      \"updateTransactionSendFlowHistory\"\n    );\n    const sendFlowHistory = transactionMeta.sendFlowHistory ?? [];\n    if (currentSendFlowHistoryLength === sendFlowHistory.length) {\n      const updatedTransactionMeta = {\n        ...transactionMeta,\n        sendFlowHistory: [...sendFlowHistory, ...sendFlowHistoryToAdd]\n      };\n      this.updateTransaction(\n        updatedTransactionMeta,\n        `${controllerName}:updateTransactionSendFlowHistory - sendFlowHistory updated`\n      );\n    }\n    return this.getTransaction(transactionID);\n  }\n  /**\n   * Update the gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param gasValues - Gas values to update.\n   * @param gasValues.gas - Same as transaction.gasLimit.\n   * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param gasValues.gasPrice - Price per gas for legacy transactions.\n   * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param gasValues.estimateUsed - Which estimate level was used.\n   * @param gasValues.estimateSuggested - Which estimate level that the API suggested.\n   * @param gasValues.defaultGasEstimates - The default estimate for gas.\n   * @param gasValues.originalGasEstimate - Original estimate for gas.\n   * @param gasValues.userEditedGasLimit - The gas limit supplied by user.\n   * @param gasValues.userFeeLevel - Estimate level user selected.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionGasFees(transactionId, {\n    defaultGasEstimates,\n    estimateUsed,\n    estimateSuggested,\n    gas,\n    gasLimit,\n    gasPrice,\n    maxPriorityFeePerGas,\n    maxFeePerGas,\n    originalGasEstimate,\n    userEditedGasLimit,\n    userFeeLevel\n  }) {\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`\n      );\n    }\n    _chunkOZ6UB42Cjs.validateIfTransactionUnapproved.call(void 0, \n      transactionMeta,\n      \"updateTransactionGasFees\"\n    );\n    let transactionGasFees = {\n      txParams: {\n        gas,\n        gasLimit,\n        gasPrice,\n        maxPriorityFeePerGas,\n        maxFeePerGas\n      },\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    };\n    transactionGasFees.txParams = _lodash.pickBy.call(void 0, transactionGasFees.txParams);\n    transactionGasFees = _lodash.pickBy.call(void 0, transactionGasFees);\n    const updatedMeta = _lodash.merge.call(void 0, {}, transactionMeta, transactionGasFees);\n    this.updateTransaction(\n      updatedMeta,\n      `${controllerName}:updateTransactionGasFees - gas values updated`\n    );\n    return this.getTransaction(transactionId);\n  }\n  /**\n   * Update the previous gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param previousGas - Previous gas values to update.\n   * @param previousGas.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param previousGas.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param previousGas.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @returns The updated transactionMeta.\n   */\n  updatePreviousGasParams(transactionId, {\n    gasLimit,\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  }) {\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`\n      );\n    }\n    _chunkOZ6UB42Cjs.validateIfTransactionUnapproved.call(void 0, transactionMeta, \"updatePreviousGasParams\");\n    const transactionPreviousGas = {\n      previousGas: {\n        gasLimit,\n        maxFeePerGas,\n        maxPriorityFeePerGas\n      }\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    };\n    transactionPreviousGas.previousGas = _lodash.pickBy.call(void 0, \n      transactionPreviousGas.previousGas\n    );\n    const updatedMeta = _lodash.merge.call(void 0, {}, transactionMeta, transactionPreviousGas);\n    this.updateTransaction(\n      updatedMeta,\n      `${controllerName}:updatePreviousGasParams - Previous gas values updated`\n    );\n    return this.getTransaction(transactionId);\n  }\n  async getNonceLock(address, networkClientId) {\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getNonceLock(\n      address,\n      networkClientId\n    );\n  }\n  /**\n   * Updates the editable parameters of a transaction.\n   *\n   * @param txId - The ID of the transaction to update.\n   * @param params - The editable parameters to update.\n   * @param params.data - Data to pass with the transaction.\n   * @param params.gas - Maximum number of units of gas to use for the transaction.\n   * @param params.gasPrice - Price per gas for legacy transactions.\n   * @param params.from - Address to send the transaction from.\n   * @param params.to - Address to send the transaction to.\n   * @param params.value - Value associated with the transaction.\n   * @returns The updated transaction metadata.\n   */\n  async updateEditableParams(txId, {\n    data,\n    gas,\n    gasPrice,\n    from,\n    to,\n    value\n  }) {\n    const transactionMeta = this.getTransaction(txId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update editable params as no transaction metadata found`\n      );\n    }\n    _chunkOZ6UB42Cjs.validateIfTransactionUnapproved.call(void 0, transactionMeta, \"updateEditableParams\");\n    const editableParams = {\n      txParams: {\n        data,\n        from,\n        to,\n        value,\n        gas,\n        gasPrice\n      }\n    };\n    editableParams.txParams = _lodash.pickBy.call(void 0, \n      editableParams.txParams\n    );\n    const updatedTransaction = _lodash.merge.call(void 0, {}, transactionMeta, editableParams);\n    const provider = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getProvider({\n      chainId: transactionMeta.chainId,\n      networkClientId: transactionMeta.networkClientId\n    });\n    const ethQuery = new (0, _ethquery2.default)(provider);\n    const { type } = await _chunkSD6CWFDFjs.determineTransactionType.call(void 0, \n      updatedTransaction.txParams,\n      ethQuery\n    );\n    updatedTransaction.type = type;\n    await _chunk2XKEAKQGjs.updateTransactionLayer1GasFee.call(void 0, {\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      provider,\n      transactionMeta: updatedTransaction\n    });\n    this.updateTransaction(\n      updatedTransaction,\n      `Update Editable Params for ${txId}`\n    );\n    return this.getTransaction(txId);\n  }\n  /**\n   * Signs and returns the raw transaction data for provided transaction params list.\n   *\n   * @param listOfTxParams - The list of transaction params to approve.\n   * @param opts - Options bag.\n   * @param opts.hasNonce - Whether the transactions already have a nonce.\n   * @returns The raw transactions.\n   */\n  async approveTransactionsWithSameNonce(listOfTxParams = [], { hasNonce } = {}) {\n    _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Approving transactions with same nonce\", {\n      transactions: listOfTxParams\n    });\n    if (listOfTxParams.length === 0) {\n      return \"\";\n    }\n    const initialTx = listOfTxParams[0];\n    const common = this.getCommonConfiguration(initialTx.chainId);\n    let networkClientId;\n    try {\n      networkClientId = this.messagingSystem.call(\n        `NetworkController:findNetworkClientIdByChainId`,\n        initialTx.chainId\n      );\n    } catch (err) {\n      _chunkS6VGOPUYjs.projectLogger.call(void 0, \"failed to find networkClientId from chainId\", err);\n    }\n    const initialTxAsEthTx = _tx.TransactionFactory.fromTxData(initialTx, {\n      common\n    });\n    const initialTxAsSerializedHex = _util.bufferToHex.call(void 0, initialTxAsEthTx.serialize());\n    if (this.approvingTransactionIds.has(initialTxAsSerializedHex)) {\n      return \"\";\n    }\n    this.approvingTransactionIds.add(initialTxAsSerializedHex);\n    let rawTransactions, nonceLock;\n    try {\n      const fromAddress = initialTx.from;\n      const requiresNonce = hasNonce !== true;\n      nonceLock = requiresNonce ? await this.getNonceLock(fromAddress, networkClientId) : void 0;\n      const nonce = nonceLock ? _utils.add0x.call(void 0, nonceLock.nextNonce.toString(16)) : initialTx.nonce;\n      if (nonceLock) {\n        _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Using nonce from nonce tracker\", nonce, nonceLock.nonceDetails);\n      }\n      rawTransactions = await Promise.all(\n        listOfTxParams.map((txParams) => {\n          txParams.nonce = nonce;\n          return this.signExternalTransaction(txParams.chainId, txParams);\n        })\n      );\n    } catch (err) {\n      _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Error while signing transactions with same nonce\", err);\n      throw err;\n    } finally {\n      nonceLock?.releaseLock();\n      this.approvingTransactionIds.delete(initialTxAsSerializedHex);\n    }\n    return rawTransactions;\n  }\n  /**\n   * Update a custodial transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param options - The custodial transaction options to update.\n   * @param options.errorMessage - The error message to be assigned in case transaction status update to failed.\n   * @param options.hash - The new hash value to be assigned.\n   * @param options.status - The new status value to be assigned.\n   */\n  updateCustodialTransaction(transactionId, {\n    errorMessage,\n    hash,\n    status\n  }) {\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update custodial transaction as no transaction metadata found`\n      );\n    }\n    if (!transactionMeta.custodyId) {\n      throw new Error(\"Transaction must be a custodian transaction\");\n    }\n    if (status && ![\n      \"submitted\" /* submitted */,\n      \"signed\" /* signed */,\n      \"failed\" /* failed */\n    ].includes(status)) {\n      throw new Error(\n        `Cannot update custodial transaction with status: ${status}`\n      );\n    }\n    const updatedTransactionMeta = _lodash.merge.call(void 0, \n      {},\n      transactionMeta,\n      _lodash.pickBy.call(void 0, { hash, status })\n    );\n    if (updatedTransactionMeta.status === \"submitted\" /* submitted */) {\n      updatedTransactionMeta.submittedTime = (/* @__PURE__ */ new Date()).getTime();\n    }\n    if (updatedTransactionMeta.status === \"failed\" /* failed */) {\n      updatedTransactionMeta.error = _chunkOZ6UB42Cjs.normalizeTxError.call(void 0, new Error(errorMessage));\n    }\n    this.updateTransaction(\n      updatedTransactionMeta,\n      `${controllerName}:updateCustodialTransaction - Custodial transaction updated`\n    );\n    if ([\"submitted\" /* submitted */, \"failed\" /* failed */].includes(\n      status\n    )) {\n      this.messagingSystem.publish(\n        `${controllerName}:transactionFinished`,\n        updatedTransactionMeta\n      );\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalEvents).emit(\n        `${updatedTransactionMeta.id}:finished`,\n        updatedTransactionMeta\n      );\n    }\n  }\n  /**\n   * Creates approvals for all unapproved transactions persisted.\n   */\n  initApprovals() {\n    const chainId = this.getChainId();\n    const unapprovedTxs = this.state.transactions.filter(\n      (transaction) => transaction.status === \"unapproved\" /* unapproved */ && transaction.chainId === chainId && !transaction.isUserOperation\n    );\n    for (const txMeta of unapprovedTxs) {\n      this.processApproval(txMeta, {\n        shouldShowRequest: false\n      }).catch((error) => {\n        if (error?.code === _rpcerrors.errorCodes.provider.userRejectedRequest) {\n          return;\n        }\n        console.error(\"Error during persisted transaction approval\", error);\n      });\n    }\n  }\n  /**\n   * Search transaction metadata for matching entries.\n   *\n   * @param opts - Options bag.\n   * @param opts.searchCriteria - An object containing values or functions for transaction properties to filter transactions with.\n   * @param opts.initialList - The transactions to search. Defaults to the current state.\n   * @param opts.filterToCurrentNetwork - Whether to filter the results to the current network. Defaults to true.\n   * @param opts.limit - The maximum number of transactions to return. No limit by default.\n   * @returns An array of transactions matching the provided options.\n   */\n  getTransactions({\n    searchCriteria = {},\n    initialList,\n    filterToCurrentNetwork = true,\n    limit\n  } = {}) {\n    const chainId = this.getChainId();\n    const predicateMethods = _lodash.mapValues.call(void 0, searchCriteria, (predicate) => {\n      return typeof predicate === \"function\" ? predicate : (\n        // TODO: Replace `any` with type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (v) => v === predicate\n      );\n    });\n    const transactionsToFilter = initialList ?? this.state.transactions;\n    const filteredTransactions = _lodash.sortBy.call(void 0, \n      _lodash.pickBy.call(void 0, transactionsToFilter, (transaction) => {\n        if (filterToCurrentNetwork && transaction.chainId !== chainId) {\n          return false;\n        }\n        for (const [key, predicate] of Object.entries(predicateMethods)) {\n          if (key in transaction.txParams) {\n            if (predicate(transaction.txParams[key]) === false) {\n              return false;\n            }\n          } else if (predicate(transaction[key]) === false) {\n            return false;\n          }\n        }\n        return true;\n      }),\n      \"time\"\n    );\n    if (limit !== void 0) {\n      const nonces = /* @__PURE__ */ new Set();\n      const txs = [];\n      for (let i = filteredTransactions.length - 1; i > -1; i--) {\n        const txMeta = filteredTransactions[i];\n        const { nonce } = txMeta.txParams;\n        if (!nonces.has(nonce)) {\n          if (nonces.size < limit) {\n            nonces.add(nonce);\n          } else {\n            continue;\n          }\n        }\n        txs.unshift(txMeta);\n      }\n      return txs;\n    }\n    return filteredTransactions;\n  }\n  async estimateGasFee({\n    transactionParams,\n    chainId,\n    networkClientId: requestNetworkClientId\n  }) {\n    const networkClientId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNetworkClientId, getNetworkClientId_fn).call(this, {\n      networkClientId: requestNetworkClientId,\n      chainId\n    });\n    const transactionMeta = {\n      txParams: transactionParams,\n      chainId,\n      networkClientId\n    };\n    const gasFeeFlow = _chunk76FONEDAjs.getGasFeeFlow.call(void 0, \n      transactionMeta,\n      this.gasFeeFlows\n    );\n    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({\n      networkClientId,\n      chainId\n    });\n    const gasFeeControllerData = await this.getGasFeeEstimates({\n      networkClientId\n    });\n    return gasFeeFlow.getGasFees({\n      ethQuery,\n      gasFeeControllerData,\n      transactionMeta\n    });\n  }\n  /**\n   * Determine the layer 1 gas fee for the given transaction parameters.\n   *\n   * @param request - The request object.\n   * @param request.transactionParams - The transaction parameters to estimate the layer 1 gas fee for.\n   * @param request.chainId - The ID of the chain where the transaction will be executed.\n   * @param request.networkClientId - The ID of a specific network client to process the transaction.\n   */\n  async getLayer1GasFee({\n    transactionParams,\n    chainId,\n    networkClientId\n  }) {\n    const provider = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getProvider({\n      networkClientId,\n      chainId\n    });\n    return await _chunk2XKEAKQGjs.getTransactionLayer1GasFee.call(void 0, {\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      provider,\n      transactionMeta: {\n        txParams: transactionParams,\n        chainId\n      }\n    });\n  }\n  async signExternalTransaction(chainId, transactionParams) {\n    if (!this.sign) {\n      throw new Error(\"No sign method defined.\");\n    }\n    const normalizedTransactionParams = _chunkOZ6UB42Cjs.normalizeTransactionParams.call(void 0, transactionParams);\n    const type = _chunkOZ6UB42Cjs.isEIP1559Transaction.call(void 0, normalizedTransactionParams) ? \"0x2\" /* feeMarket */ : \"0x0\" /* legacy */;\n    const updatedTransactionParams = {\n      ...normalizedTransactionParams,\n      type,\n      gasLimit: normalizedTransactionParams.gas,\n      chainId\n    };\n    const { from } = updatedTransactionParams;\n    const common = this.getCommonConfiguration(chainId);\n    const unsignedTransaction = _tx.TransactionFactory.fromTxData(\n      updatedTransactionParams,\n      { common }\n    );\n    const signedTransaction = await this.sign(unsignedTransaction, from);\n    const rawTransaction = _util.bufferToHex.call(void 0, signedTransaction.serialize());\n    return rawTransaction;\n  }\n  /**\n   * Removes unapproved transactions from state.\n   */\n  clearUnapprovedTransactions() {\n    const transactions = this.state.transactions.filter(\n      ({ status }) => status !== \"unapproved\" /* unapproved */\n    );\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState(transactions);\n    });\n  }\n  /**\n   * Stop the signing process for a specific transaction.\n   * Throws an error causing the transaction status to be set to failed.\n   * @param transactionId - The ID of the transaction to stop signing.\n   */\n  abortTransactionSigning(transactionId) {\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      throw new Error(`Cannot abort signing as no transaction metadata found`);\n    }\n    const abortCallback = this.signAbortCallbacks.get(transactionId);\n    if (!abortCallback) {\n      throw new Error(\n        `Cannot abort signing as transaction is not waiting for signing`\n      );\n    }\n    abortCallback();\n    this.signAbortCallbacks.delete(transactionId);\n  }\n  addMetadata(transactionMeta) {\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState([\n        ...state.transactions,\n        transactionMeta\n      ]);\n    });\n  }\n  async updateGasProperties(transactionMeta) {\n    const isEIP1559Compatible = await this.getEIP1559Compatibility(transactionMeta.networkClientId) && transactionMeta.txParams.type !== \"0x0\" /* legacy */;\n    const { networkClientId, chainId } = transactionMeta;\n    const isCustomNetwork = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isCustomNetwork, isCustomNetwork_fn).call(this, networkClientId);\n    const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({\n      networkClientId,\n      chainId\n    });\n    const provider = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getProvider({\n      networkClientId,\n      chainId\n    });\n    await _chunkV72C4MCRjs.updateGas.call(void 0, {\n      ethQuery,\n      chainId,\n      isCustomNetwork,\n      txMeta: transactionMeta\n    });\n    await _chunkC3WC4OJ3js.updateGasFees.call(void 0, {\n      eip1559: isEIP1559Compatible,\n      ethQuery,\n      gasFeeFlows: this.gasFeeFlows,\n      getGasFeeEstimates: this.getGasFeeEstimates,\n      getSavedGasFees: this.getSavedGasFees.bind(this),\n      txMeta: transactionMeta\n    });\n    await _chunk2XKEAKQGjs.updateTransactionLayer1GasFee.call(void 0, {\n      layer1GasFeeFlows: this.layer1GasFeeFlows,\n      provider,\n      transactionMeta\n    });\n  }\n  onBootCleanup() {\n    this.submitApprovedTransactions();\n  }\n  /**\n   * Force submit approved transactions for all chains.\n   */\n  submitApprovedTransactions() {\n    const approvedTransactions = this.state.transactions.filter(\n      (transaction) => transaction.status === \"approved\" /* approved */\n    );\n    for (const transactionMeta of approvedTransactions) {\n      if (this.beforeApproveOnInit(transactionMeta)) {\n        this.approveTransaction(transactionMeta.id).catch((error) => {\n          console.error(\"Error while submitting persisted transaction\", error);\n        });\n      }\n    }\n  }\n  async processApproval(transactionMeta, {\n    isExisting = false,\n    requireApproval,\n    shouldShowRequest = true,\n    actionId\n  }) {\n    const transactionId = transactionMeta.id;\n    let resultCallbacks;\n    const { meta, isCompleted } = this.isTransactionCompleted(transactionId);\n    const finishedPromise = isCompleted ? Promise.resolve(meta) : this.waitForTransactionFinished(transactionId);\n    if (meta && !isExisting && !isCompleted) {\n      try {\n        if (requireApproval !== false) {\n          const acceptResult = await this.requestApproval(transactionMeta, {\n            shouldShowRequest\n          });\n          resultCallbacks = acceptResult.resultCallbacks;\n          const approvalValue = acceptResult.value;\n          const updatedTransaction = approvalValue?.txMeta;\n          if (updatedTransaction) {\n            _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Updating transaction with approval data\", {\n              customNonce: updatedTransaction.customNonceValue,\n              params: updatedTransaction.txParams\n            });\n            this.updateTransaction(\n              updatedTransaction,\n              \"TransactionController#processApproval - Updated with approval data\"\n            );\n          }\n        }\n        const { isCompleted: isTxCompleted } = this.isTransactionCompleted(transactionId);\n        if (!isTxCompleted) {\n          const approvalResult = await this.approveTransaction(transactionId);\n          if (approvalResult === \"skipped-via-before-publish-hook\" /* SkippedViaBeforePublishHook */ && resultCallbacks) {\n            resultCallbacks.success();\n          }\n          const updatedTransactionMeta = this.getTransaction(\n            transactionId\n          );\n          this.messagingSystem.publish(\n            `${controllerName}:transactionApproved`,\n            {\n              transactionMeta: updatedTransactionMeta,\n              actionId\n            }\n          );\n        }\n      } catch (error) {\n        const { isCompleted: isTxCompleted } = this.isTransactionCompleted(transactionId);\n        if (!isTxCompleted) {\n          if (error?.code === _rpcerrors.errorCodes.provider.userRejectedRequest) {\n            this.cancelTransaction(transactionId, actionId);\n            throw _rpcerrors.providerErrors.userRejectedRequest(\n              \"MetaMask Tx Signature: User denied transaction signature.\"\n            );\n          } else {\n            this.failTransaction(meta, error, actionId);\n          }\n        }\n      }\n    }\n    const finalMeta = await finishedPromise;\n    switch (finalMeta?.status) {\n      case \"failed\" /* failed */:\n        resultCallbacks?.error(finalMeta.error);\n        throw _rpcerrors.rpcErrors.internal(finalMeta.error.message);\n      case \"submitted\" /* submitted */:\n        resultCallbacks?.success();\n        return finalMeta.hash;\n      default:\n        const internalError = _rpcerrors.rpcErrors.internal(\n          `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n            finalMeta || transactionId\n          )}`\n        );\n        resultCallbacks?.error(internalError);\n        throw internalError;\n    }\n  }\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionId - The ID of the transaction to approve.\n   */\n  async approveTransaction(transactionId) {\n    const cleanupTasks = new Array();\n    cleanupTasks.push(await this.mutex.acquire());\n    let transactionMeta = this.getTransactionOrThrow(transactionId);\n    try {\n      if (!this.sign) {\n        this.failTransaction(\n          transactionMeta,\n          new Error(\"No sign method defined.\")\n        );\n        return \"not-approved\" /* NotApproved */;\n      } else if (!transactionMeta.chainId) {\n        this.failTransaction(transactionMeta, new Error(\"No chainId defined.\"));\n        return \"not-approved\" /* NotApproved */;\n      }\n      if (this.approvingTransactionIds.has(transactionId)) {\n        _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Skipping approval as signing in progress\", transactionId);\n        return \"not-approved\" /* NotApproved */;\n      }\n      this.approvingTransactionIds.add(transactionId);\n      cleanupTasks.push(\n        () => this.approvingTransactionIds.delete(transactionId)\n      );\n      const [nonce, releaseNonce] = await _chunkPRUNMTRDjs.getNextNonce.call(void 0, \n        transactionMeta,\n        (address) => _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getNonceLock(\n          address,\n          transactionMeta.networkClientId\n        )\n      );\n      releaseNonce && cleanupTasks.push(releaseNonce);\n      transactionMeta = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, {\n        transactionId,\n        note: \"TransactionController#approveTransaction - Transaction approved\"\n      }, (draftTxMeta) => {\n        const { txParams, chainId } = draftTxMeta;\n        draftTxMeta.status = \"approved\" /* approved */;\n        draftTxMeta.txParams = {\n          ...txParams,\n          nonce,\n          chainId,\n          gasLimit: txParams.gas,\n          ..._chunkOZ6UB42Cjs.isEIP1559Transaction.call(void 0, txParams) && {\n            type: \"0x2\" /* feeMarket */\n          }\n        };\n      });\n      this.onTransactionStatusChange(transactionMeta);\n      const rawTx = await this.signTransaction(\n        transactionMeta,\n        transactionMeta.txParams\n      );\n      if (!this.beforePublish(transactionMeta)) {\n        _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Skipping publishing transaction based on hook\");\n        this.messagingSystem.publish(\n          `${controllerName}:transactionPublishingSkipped`,\n          transactionMeta\n        );\n        return \"skipped-via-before-publish-hook\" /* SkippedViaBeforePublishHook */;\n      }\n      if (!rawTx) {\n        return \"not-approved\" /* NotApproved */;\n      }\n      const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({\n        networkClientId: transactionMeta.networkClientId,\n        chainId: transactionMeta.chainId\n      });\n      let preTxBalance;\n      const shouldUpdatePreTxBalance = transactionMeta.type === \"swap\" /* swap */;\n      if (shouldUpdatePreTxBalance) {\n        _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Determining pre-transaction balance\");\n        preTxBalance = await _controllerutils.query.call(void 0, ethQuery, \"getBalance\", [\n          transactionMeta.txParams.from\n        ]);\n      }\n      _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Publishing transaction\", transactionMeta.txParams);\n      let { transactionHash: hash } = await this.publish(\n        transactionMeta,\n        rawTx\n      );\n      if (hash === void 0) {\n        hash = await this.publishTransaction(ethQuery, rawTx);\n      }\n      _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Publish successful\", hash);\n      transactionMeta = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, {\n        transactionId,\n        note: \"TransactionController#approveTransaction - Transaction submitted\"\n      }, (draftTxMeta) => {\n        draftTxMeta.hash = hash;\n        draftTxMeta.status = \"submitted\" /* submitted */;\n        draftTxMeta.submittedTime = (/* @__PURE__ */ new Date()).getTime();\n        if (shouldUpdatePreTxBalance) {\n          draftTxMeta.preTxBalance = preTxBalance;\n          _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Updated pre-transaction balance\", preTxBalance);\n        }\n      });\n      this.messagingSystem.publish(`${controllerName}:transactionSubmitted`, {\n        transactionMeta\n      });\n      this.messagingSystem.publish(\n        `${controllerName}:transactionFinished`,\n        transactionMeta\n      );\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalEvents).emit(`${transactionId}:finished`, transactionMeta);\n      this.onTransactionStatusChange(transactionMeta);\n      return \"approved\" /* Approved */;\n    } catch (error) {\n      this.failTransaction(transactionMeta, error);\n      return \"not-approved\" /* NotApproved */;\n    } finally {\n      cleanupTasks.forEach((task) => task());\n    }\n  }\n  async publishTransaction(ethQuery, rawTransaction) {\n    return await _controllerutils.query.call(void 0, ethQuery, \"sendRawTransaction\", [rawTransaction]);\n  }\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param actionId - The actionId passed from UI\n   */\n  cancelTransaction(transactionId, actionId) {\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId\n    );\n    if (!transactionMeta) {\n      return;\n    }\n    this.update((state) => {\n      const transactions = state.transactions.filter(\n        ({ id }) => id !== transactionId\n      );\n      state.transactions = this.trimTransactionsForState(transactions);\n    });\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      status: \"rejected\" /* rejected */\n    };\n    this.messagingSystem.publish(\n      `${controllerName}:transactionFinished`,\n      updatedTransactionMeta\n    );\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalEvents).emit(\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `${transactionMeta.id}:finished`,\n      updatedTransactionMeta\n    );\n    this.messagingSystem.publish(`${controllerName}:transactionRejected`, {\n      transactionMeta: updatedTransactionMeta,\n      actionId\n    });\n    this.onTransactionStatusChange(updatedTransactionMeta);\n  }\n  /**\n   * Trim the amount of transactions that are set on the state. Checks\n   * if the length of the tx history is longer then desired persistence\n   * limit and then if it is removes the oldest confirmed or rejected tx.\n   * Pending or unapproved transactions will not be removed by this\n   * operation. For safety of presenting a fully functional transaction UI\n   * representation, this function will not break apart transactions with the\n   * same nonce, created on the same day, per network. Not accounting for\n   * transactions of the same nonce, same day and network combo can result in\n   * confusing or broken experiences in the UI.\n   *\n   * @param transactions - The transactions to be applied to the state.\n   * @returns The trimmed list of transactions.\n   */\n  trimTransactionsForState(transactions) {\n    const nonceNetworkSet = /* @__PURE__ */ new Set();\n    const txsToKeep = [...transactions].sort((a, b) => a.time > b.time ? -1 : 1).filter((tx) => {\n      const { chainId, status, txParams, time } = tx;\n      if (txParams) {\n        const key = `${String(txParams.nonce)}-${_controllerutils.convertHexToDecimal.call(void 0, \n          chainId\n        )}-${new Date(time).toDateString()}`;\n        if (nonceNetworkSet.has(key)) {\n          return true;\n        } else if (nonceNetworkSet.size < _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _transactionHistoryLimit) || !this.isFinalState(status)) {\n          nonceNetworkSet.add(key);\n          return true;\n        }\n      }\n      return false;\n    });\n    txsToKeep.reverse();\n    return txsToKeep;\n  }\n  /**\n   * Determines if the transaction is in a final state.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  isFinalState(status) {\n    return status === \"rejected\" /* rejected */ || status === \"confirmed\" /* confirmed */ || status === \"failed\" /* failed */;\n  }\n  /**\n   * Whether the transaction has at least completed all local processing.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  isLocalFinalState(status) {\n    return [\n      \"confirmed\" /* confirmed */,\n      \"failed\" /* failed */,\n      \"rejected\" /* rejected */,\n      \"submitted\" /* submitted */\n    ].includes(status);\n  }\n  async requestApproval(txMeta, { shouldShowRequest }) {\n    const id = this.getApprovalId(txMeta);\n    const { origin } = txMeta;\n    const type = _controllerutils.ApprovalType.Transaction;\n    const requestData = { txId: txMeta.id };\n    return await this.messagingSystem.call(\n      \"ApprovalController:addRequest\",\n      {\n        id,\n        origin: origin || _controllerutils.ORIGIN_METAMASK,\n        type,\n        requestData,\n        expectsResult: true\n      },\n      shouldShowRequest\n    );\n  }\n  getTransaction(transactionId) {\n    const { transactions } = this.state;\n    return transactions.find(({ id }) => id === transactionId);\n  }\n  getTransactionOrThrow(transactionId, errorMessagePrefix = \"TransactionController\") {\n    const txMeta = this.getTransaction(transactionId);\n    if (!txMeta) {\n      throw new Error(\n        `${errorMessagePrefix}: No transaction found with id ${transactionId}`\n      );\n    }\n    return txMeta;\n  }\n  getApprovalId(txMeta) {\n    return String(txMeta.id);\n  }\n  isTransactionCompleted(transactionId) {\n    const transaction = this.getTransaction(transactionId);\n    if (!transaction) {\n      return { meta: void 0, isCompleted: false };\n    }\n    const isCompleted = this.isLocalFinalState(transaction.status);\n    return { meta: transaction, isCompleted };\n  }\n  getChainId(networkClientId) {\n    const globalChainId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGlobalChainId, getGlobalChainId_fn).call(this);\n    const globalNetworkClientId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn).call(this);\n    if (!networkClientId || networkClientId === globalNetworkClientId) {\n      return globalChainId;\n    }\n    return this.messagingSystem.call(\n      `NetworkController:getNetworkClientById`,\n      networkClientId\n    ).configuration.chainId;\n  }\n  prepareUnsignedEthTx(chainId, txParams) {\n    return _tx.TransactionFactory.fromTxData(txParams, {\n      freeze: false,\n      common: this.getCommonConfiguration(chainId)\n    });\n  }\n  /**\n   * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for\n   * specifying which chain, network, hardfork and EIPs to support for\n   * a transaction. By referencing this configuration, and analyzing the fields\n   * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718\n   * transaction type to use.\n   *\n   * @param chainId - The chainId to use for the configuration.\n   * @returns common configuration object\n   */\n  getCommonConfiguration(chainId) {\n    const customChainParams = {\n      chainId: parseInt(chainId, 16),\n      defaultHardfork: HARDFORK\n    };\n    return _common.Common.custom(customChainParams);\n  }\n  onIncomingTransactions({\n    added,\n    updated\n  }) {\n    this.update((state) => {\n      const { transactions: currentTransactions } = state;\n      const updatedTransactions = [\n        ...added,\n        ...currentTransactions.map((originalTransaction) => {\n          const updatedTransaction = updated.find(\n            ({ hash }) => hash === originalTransaction.hash\n          );\n          return updatedTransaction ?? originalTransaction;\n        })\n      ];\n      state.transactions = this.trimTransactionsForState(updatedTransactions);\n    });\n  }\n  onUpdatedLastFetchedBlockNumbers({\n    lastFetchedBlockNumbers,\n    blockNumber\n  }) {\n    this.update((state) => {\n      state.lastFetchedBlockNumbers = lastFetchedBlockNumbers;\n    });\n    this.messagingSystem.publish(\n      `${controllerName}:incomingTransactionBlockReceived`,\n      blockNumber\n    );\n  }\n  generateDappSuggestedGasFees(txParams, origin) {\n    if (!origin || origin === _controllerutils.ORIGIN_METAMASK) {\n      return void 0;\n    }\n    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas } = txParams;\n    if (gasPrice === void 0 && maxFeePerGas === void 0 && maxPriorityFeePerGas === void 0 && gas === void 0) {\n      return void 0;\n    }\n    const dappSuggestedGasFees = {};\n    if (gasPrice !== void 0) {\n      dappSuggestedGasFees.gasPrice = gasPrice;\n    } else if (maxFeePerGas !== void 0 || maxPriorityFeePerGas !== void 0) {\n      dappSuggestedGasFees.maxFeePerGas = maxFeePerGas;\n      dappSuggestedGasFees.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    }\n    if (gas !== void 0) {\n      dappSuggestedGasFees.gas = gas;\n    }\n    return dappSuggestedGasFees;\n  }\n  /**\n   * Validates and adds external provided transaction to state.\n   *\n   * @param transactionMeta - Nominated external transaction to be added to state.\n   * @returns The new transaction.\n   */\n  addExternalTransaction(transactionMeta) {\n    const { chainId } = transactionMeta;\n    const { transactions } = this.state;\n    const fromAddress = transactionMeta?.txParams?.from;\n    const sameFromAndNetworkTransactions = transactions.filter(\n      (transaction) => transaction.txParams.from === fromAddress && transaction.chainId === chainId\n    );\n    const confirmedTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === \"confirmed\" /* confirmed */\n    );\n    const pendingTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === \"submitted\" /* submitted */\n    );\n    _chunk7LXE4KHVjs.validateConfirmedExternalTransaction.call(void 0, \n      transactionMeta,\n      confirmedTxs,\n      pendingTxs\n    );\n    const newTransactionMeta = (transactionMeta.history ?? []).length === 0 && !this.isHistoryDisabled ? _chunkQP75SWIQjs.addInitialHistorySnapshot.call(void 0, transactionMeta) : transactionMeta;\n    this.update((state) => {\n      state.transactions = this.trimTransactionsForState([\n        ...state.transactions,\n        newTransactionMeta\n      ]);\n    });\n    return newTransactionMeta;\n  }\n  /**\n   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions\n   * in the transactions have the same nonce.\n   *\n   * @param transactionId - Used to identify original transaction.\n   */\n  markNonceDuplicatesDropped(transactionId) {\n    const transactionMeta = this.getTransaction(transactionId);\n    if (!transactionMeta) {\n      return;\n    }\n    const nonce = transactionMeta.txParams?.nonce;\n    const from = transactionMeta.txParams?.from;\n    const { chainId } = transactionMeta;\n    const sameNonceTransactions = this.state.transactions.filter(\n      (transaction) => transaction.id !== transactionId && transaction.txParams.from === from && transaction.txParams.nonce === nonce && transaction.chainId === chainId && transaction.type !== \"incoming\" /* incoming */\n    );\n    const sameNonceTransactionIds = sameNonceTransactions.map(\n      (transaction) => transaction.id\n    );\n    if (sameNonceTransactions.length === 0) {\n      return;\n    }\n    this.update((state) => {\n      for (const transaction of state.transactions) {\n        if (sameNonceTransactionIds.includes(transaction.id)) {\n          transaction.replacedBy = transactionMeta?.hash;\n          transaction.replacedById = transactionMeta?.id;\n        }\n      }\n    });\n    for (const transaction of this.state.transactions) {\n      if (sameNonceTransactionIds.includes(transaction.id) && transaction.status !== \"failed\" /* failed */) {\n        this.setTransactionStatusDropped(transaction);\n      }\n    }\n  }\n  /**\n   * Method to set transaction status to dropped.\n   *\n   * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.\n   */\n  setTransactionStatusDropped(transactionMeta) {\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      status: \"dropped\" /* dropped */\n    };\n    this.messagingSystem.publish(`${controllerName}:transactionDropped`, {\n      transactionMeta: updatedTransactionMeta\n    });\n    this.updateTransaction(\n      updatedTransactionMeta,\n      \"TransactionController#setTransactionStatusDropped - Transaction dropped\"\n    );\n    this.onTransactionStatusChange(updatedTransactionMeta);\n  }\n  /**\n   * Get transaction with provided actionId.\n   *\n   * @param actionId - Unique ID to prevent duplicate requests\n   * @returns the filtered transaction\n   */\n  getTransactionWithActionId(actionId) {\n    return this.state.transactions.find(\n      (transaction) => actionId && transaction.actionId === actionId\n    );\n  }\n  async waitForTransactionFinished(transactionId) {\n    return new Promise((resolve) => {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalEvents).once(`${transactionId}:finished`, (txMeta) => {\n        resolve(txMeta);\n      });\n    });\n  }\n  /**\n   * Updates the r, s, and v properties of a TransactionMeta object\n   * with values from a signed transaction.\n   *\n   * @param transactionMeta - The TransactionMeta object to update.\n   * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.\n   * @returns The updated TransactionMeta object.\n   */\n  updateTransactionMetaRSV(transactionMeta, signedTx) {\n    const transactionMetaWithRsv = _lodash.cloneDeep.call(void 0, transactionMeta);\n    for (const key of [\"r\", \"s\", \"v\"]) {\n      const value = signedTx[key];\n      if (value === void 0 || value === null) {\n        continue;\n      }\n      transactionMetaWithRsv[key] = _utils.add0x.call(void 0, value.toString(16));\n    }\n    return transactionMetaWithRsv;\n  }\n  async getEIP1559Compatibility(networkClientId) {\n    const currentNetworkIsEIP1559Compatible = await this.getCurrentNetworkEIP1559Compatibility(networkClientId);\n    const currentAccountIsEIP1559Compatible = await this.getCurrentAccountEIP1559Compatibility();\n    return currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible;\n  }\n  async signTransaction(transactionMeta, txParams) {\n    _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Signing transaction\", txParams);\n    const unsignedEthTx = this.prepareUnsignedEthTx(\n      transactionMeta.chainId,\n      txParams\n    );\n    this.approvingTransactionIds.add(transactionMeta.id);\n    const signedTx = await new Promise((resolve, reject) => {\n      this.sign?.(\n        unsignedEthTx,\n        txParams.from,\n        ...this.getAdditionalSignArguments(transactionMeta)\n      ).then(resolve, reject);\n      this.signAbortCallbacks.set(\n        transactionMeta.id,\n        () => reject(new Error(\"Signing aborted by user\"))\n      );\n    });\n    this.signAbortCallbacks.delete(transactionMeta.id);\n    if (!signedTx) {\n      _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Skipping signed status as no signed transaction\");\n      return void 0;\n    }\n    const transactionMetaFromHook = _lodash.cloneDeep.call(void 0, transactionMeta);\n    if (!this.afterSign(transactionMetaFromHook, signedTx)) {\n      this.updateTransaction(\n        transactionMetaFromHook,\n        \"TransactionController#signTransaction - Update after sign\"\n      );\n      _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Skipping signed status based on hook\");\n      return void 0;\n    }\n    const transactionMetaWithRsv = {\n      ...this.updateTransactionMetaRSV(transactionMetaFromHook, signedTx),\n      status: \"signed\" /* signed */\n    };\n    this.updateTransaction(\n      transactionMetaWithRsv,\n      \"TransactionController#approveTransaction - Transaction signed\"\n    );\n    this.onTransactionStatusChange(transactionMetaWithRsv);\n    const rawTx = _util.bufferToHex.call(void 0, signedTx.serialize());\n    const transactionMetaWithRawTx = _lodash.merge.call(void 0, {}, transactionMetaWithRsv, {\n      rawTx\n    });\n    this.updateTransaction(\n      transactionMetaWithRawTx,\n      \"TransactionController#approveTransaction - RawTransaction added\"\n    );\n    return rawTx;\n  }\n  onTransactionStatusChange(transactionMeta) {\n    this.messagingSystem.publish(`${controllerName}:transactionStatusUpdated`, {\n      transactionMeta\n    });\n  }\n  getNonceTrackerTransactions(status, address, chainId = this.getChainId()) {\n    return _chunkPRUNMTRDjs.getAndFormatTransactionsForNonceTracker.call(void 0, \n      chainId,\n      address,\n      status,\n      this.state.transactions\n    );\n  }\n  onConfirmedTransaction(transactionMeta) {\n    _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Processing confirmed transaction\", transactionMeta.id);\n    this.markNonceDuplicatesDropped(transactionMeta.id);\n    this.messagingSystem.publish(\n      `${controllerName}:transactionConfirmed`,\n      transactionMeta\n    );\n    this.onTransactionStatusChange(transactionMeta);\n    this.updatePostBalance(transactionMeta);\n  }\n  async updatePostBalance(transactionMeta) {\n    try {\n      if (transactionMeta.type !== \"swap\" /* swap */) {\n        return;\n      }\n      const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).getEthQuery({\n        networkClientId: transactionMeta.networkClientId,\n        chainId: transactionMeta.chainId\n      });\n      const { updatedTransactionMeta, approvalTransactionMeta } = await _chunkQH2H4W3Njs.updatePostTransactionBalance.call(void 0, transactionMeta, {\n        ethQuery,\n        getTransaction: this.getTransaction.bind(this),\n        updateTransaction: this.updateTransaction.bind(this)\n      });\n      this.messagingSystem.publish(\n        `${controllerName}:postTransactionBalanceUpdated`,\n        {\n          transactionMeta: updatedTransactionMeta,\n          approvalTransactionMeta\n        }\n      );\n    } catch (error) {\n      _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Error while updating post transaction balance\", error);\n    }\n  }\n  async publishTransactionForRetry(ethQuery, rawTx, transactionMeta) {\n    try {\n      const hash = await this.publishTransaction(ethQuery, rawTx);\n      return hash;\n    } catch (error) {\n      if (this.isTransactionAlreadyConfirmedError(error)) {\n        await this.pendingTransactionTracker.forceCheckTransaction(\n          transactionMeta\n        );\n        throw new Error(\"Previous transaction is already confirmed\");\n      }\n      throw error;\n    }\n  }\n  /**\n   * Ensures that error is a nonce issue\n   *\n   * @param error - The error to check\n   * @returns Whether or not the error is a nonce issue\n   */\n  // TODO: Replace `any` with type\n  // Some networks are returning original error in the data field\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  isTransactionAlreadyConfirmedError(error) {\n    return error?.message?.includes(\"nonce too low\") || error?.data?.message?.includes(\"nonce too low\");\n  }\n};\n_internalEvents = new WeakMap();\n_incomingTransactionOptions = new WeakMap();\n_pendingTransactionOptions = new WeakMap();\n_transactionHistoryLimit = new WeakMap();\n_isSimulationEnabled = new WeakMap();\n_testGasFeeFlows = new WeakMap();\n_multichainTrackingHelper = new WeakMap();\n_createNonceTracker = new WeakSet();\ncreateNonceTracker_fn = function({\n  provider,\n  blockTracker,\n  chainId\n}) {\n  return new (0, _noncetracker.NonceTracker)({\n    // TODO: Fix types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    provider,\n    // @ts-expect-error TODO: Fix types\n    blockTracker,\n    getPendingTransactions: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNonceTrackerPendingTransactions, getNonceTrackerPendingTransactions_fn).bind(\n      this,\n      chainId\n    ),\n    getConfirmedTransactions: this.getNonceTrackerTransactions.bind(\n      this,\n      \"confirmed\" /* confirmed */\n    )\n  });\n};\n_createIncomingTransactionHelper = new WeakSet();\ncreateIncomingTransactionHelper_fn = function({\n  blockTracker,\n  etherscanRemoteTransactionSource,\n  chainId\n}) {\n  const incomingTransactionHelper = new (0, _chunkRHDPOIS4js.IncomingTransactionHelper)({\n    blockTracker,\n    getCurrentAccount: () => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getSelectedAccount, getSelectedAccount_fn).call(this),\n    getLastFetchedBlockNumbers: () => this.state.lastFetchedBlockNumbers,\n    getChainId: chainId ? () => chainId : this.getChainId.bind(this),\n    isEnabled: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _incomingTransactionOptions).isEnabled,\n    queryEntireHistory: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _incomingTransactionOptions).queryEntireHistory,\n    remoteTransactionSource: etherscanRemoteTransactionSource,\n    transactionLimit: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _transactionHistoryLimit),\n    updateTransactions: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _incomingTransactionOptions).updateTransactions\n  });\n  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _addIncomingTransactionHelperListeners, addIncomingTransactionHelperListeners_fn).call(this, incomingTransactionHelper);\n  return incomingTransactionHelper;\n};\n_createPendingTransactionTracker = new WeakSet();\ncreatePendingTransactionTracker_fn = function({\n  provider,\n  blockTracker,\n  chainId\n}) {\n  const ethQuery = new (0, _ethquery2.default)(provider);\n  const getChainId = chainId ? () => chainId : this.getChainId.bind(this);\n  const pendingTransactionTracker = new (0, _chunkULD4JC3Qjs.PendingTransactionTracker)({\n    approveTransaction: async (transactionId) => {\n      await this.approveTransaction(transactionId);\n    },\n    blockTracker,\n    getChainId,\n    getEthQuery: () => ethQuery,\n    getTransactions: () => this.state.transactions,\n    isResubmitEnabled: _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _pendingTransactionOptions).isResubmitEnabled,\n    getGlobalLock: () => _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).acquireNonceLockForChainIdKey({\n      chainId: getChainId()\n    }),\n    publishTransaction: this.publishTransaction.bind(this),\n    hooks: {\n      beforeCheckPendingTransaction: this.beforeCheckPendingTransaction.bind(this),\n      beforePublish: this.beforePublish.bind(this)\n    }\n  });\n  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _addPendingTransactionTrackerListeners, addPendingTransactionTrackerListeners_fn).call(this, pendingTransactionTracker);\n  return pendingTransactionTracker;\n};\n_checkForPendingTransactionAndStartPolling = new WeakMap();\n_stopAllTracking = new WeakSet();\nstopAllTracking_fn = function() {\n  this.pendingTransactionTracker.stop();\n  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _removePendingTransactionTrackerListeners, removePendingTransactionTrackerListeners_fn).call(this, this.pendingTransactionTracker);\n  this.incomingTransactionHelper.stop();\n  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _removeIncomingTransactionHelperListeners, removeIncomingTransactionHelperListeners_fn).call(this, this.incomingTransactionHelper);\n  _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _multichainTrackingHelper).stopAllTracking();\n};\n_removeIncomingTransactionHelperListeners = new WeakSet();\nremoveIncomingTransactionHelperListeners_fn = function(incomingTransactionHelper) {\n  incomingTransactionHelper.hub.removeAllListeners(\"transactions\");\n  incomingTransactionHelper.hub.removeAllListeners(\n    \"updatedLastFetchedBlockNumbers\"\n  );\n};\n_addIncomingTransactionHelperListeners = new WeakSet();\naddIncomingTransactionHelperListeners_fn = function(incomingTransactionHelper) {\n  incomingTransactionHelper.hub.on(\n    \"transactions\",\n    this.onIncomingTransactions.bind(this)\n  );\n  incomingTransactionHelper.hub.on(\n    \"updatedLastFetchedBlockNumbers\",\n    this.onUpdatedLastFetchedBlockNumbers.bind(this)\n  );\n};\n_removePendingTransactionTrackerListeners = new WeakSet();\nremovePendingTransactionTrackerListeners_fn = function(pendingTransactionTracker) {\n  pendingTransactionTracker.hub.removeAllListeners(\"transaction-confirmed\");\n  pendingTransactionTracker.hub.removeAllListeners(\"transaction-dropped\");\n  pendingTransactionTracker.hub.removeAllListeners(\"transaction-failed\");\n  pendingTransactionTracker.hub.removeAllListeners(\"transaction-updated\");\n};\n_addPendingTransactionTrackerListeners = new WeakSet();\naddPendingTransactionTrackerListeners_fn = function(pendingTransactionTracker) {\n  pendingTransactionTracker.hub.on(\n    \"transaction-confirmed\",\n    this.onConfirmedTransaction.bind(this)\n  );\n  pendingTransactionTracker.hub.on(\n    \"transaction-dropped\",\n    this.setTransactionStatusDropped.bind(this)\n  );\n  pendingTransactionTracker.hub.on(\n    \"transaction-failed\",\n    this.failTransaction.bind(this)\n  );\n  pendingTransactionTracker.hub.on(\n    \"transaction-updated\",\n    this.updateTransaction.bind(this)\n  );\n};\n_getNonceTrackerPendingTransactions = new WeakSet();\ngetNonceTrackerPendingTransactions_fn = function(chainId, address) {\n  const standardPendingTransactions = this.getNonceTrackerTransactions(\n    \"submitted\" /* submitted */,\n    address,\n    chainId\n  );\n  const externalPendingTransactions = this.getExternalPendingTransactions(\n    address,\n    chainId\n  );\n  return [...standardPendingTransactions, ...externalPendingTransactions];\n};\n_getGasFeeFlows = new WeakSet();\ngetGasFeeFlows_fn = function() {\n  if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _testGasFeeFlows)) {\n    return [new (0, _chunkTJMQEH57js.TestGasFeeFlow)()];\n  }\n  return [new (0, _chunkARZHJFVGjs.LineaGasFeeFlow)(), new (0, _chunkQTKXIDGEjs.DefaultGasFeeFlow)()];\n};\n_getLayer1GasFeeFlows = new WeakSet();\ngetLayer1GasFeeFlows_fn = function() {\n  return [new (0, _chunkNYKRCWBGjs.OptimismLayer1GasFeeFlow)(), new (0, _chunkWR5F34OWjs.ScrollLayer1GasFeeFlow)()];\n};\n_updateTransactionInternal = new WeakSet();\nupdateTransactionInternal_fn = function({\n  transactionId,\n  note,\n  skipHistory\n}, callback) {\n  let updatedTransactionParams = [];\n  this.update((state) => {\n    const index = state.transactions.findIndex(\n      ({ id }) => id === transactionId\n    );\n    let transactionMeta2 = state.transactions[index];\n    transactionMeta2 = callback(transactionMeta2) ?? transactionMeta2;\n    transactionMeta2.txParams = _chunkOZ6UB42Cjs.normalizeTransactionParams.call(void 0, \n      transactionMeta2.txParams\n    );\n    _chunkRXIUMVA5js.validateTxParams.call(void 0, transactionMeta2.txParams);\n    updatedTransactionParams = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _checkIfTransactionParamsUpdated, checkIfTransactionParamsUpdated_fn).call(this, transactionMeta2);\n    const shouldSkipHistory = this.isHistoryDisabled || skipHistory;\n    if (!shouldSkipHistory) {\n      transactionMeta2 = _chunkQP75SWIQjs.updateTransactionHistory.call(void 0, \n        transactionMeta2,\n        note ?? \"Transaction updated\"\n      );\n    }\n    state.transactions[index] = transactionMeta2;\n  });\n  const transactionMeta = this.getTransaction(\n    transactionId\n  );\n  if (updatedTransactionParams.length > 0) {\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onTransactionParamsUpdated, onTransactionParamsUpdated_fn).call(this, transactionMeta, updatedTransactionParams);\n  }\n  return transactionMeta;\n};\n_checkIfTransactionParamsUpdated = new WeakSet();\ncheckIfTransactionParamsUpdated_fn = function(newTransactionMeta) {\n  const { id: transactionId, txParams: newParams } = newTransactionMeta;\n  const originalParams = this.getTransaction(transactionId)?.txParams;\n  if (!originalParams || _lodash.isEqual.call(void 0, originalParams, newParams)) {\n    return [];\n  }\n  const params = Object.keys(newParams);\n  const updatedProperties = params.filter(\n    (param) => newParams[param] !== originalParams[param]\n  );\n  _chunkS6VGOPUYjs.projectLogger.call(void 0, \n    \"Transaction parameters have been updated\",\n    transactionId,\n    updatedProperties,\n    originalParams,\n    newParams\n  );\n  return updatedProperties;\n};\n_onTransactionParamsUpdated = new WeakSet();\nonTransactionParamsUpdated_fn = function(transactionMeta, updatedParams) {\n  if ([\"to\", \"value\", \"data\"].some(\n    (param) => updatedParams.includes(param)\n  )) {\n    _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Updating simulation data due to transaction parameter update\");\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateSimulationData, updateSimulationData_fn).call(this, transactionMeta);\n  }\n};\n_updateSimulationData = new WeakSet();\nupdateSimulationData_fn = async function(transactionMeta) {\n  const { id: transactionId, chainId, txParams } = transactionMeta;\n  const { from, to, value, data } = txParams;\n  let simulationData = {\n    error: {\n      code: \"disabled\" /* Disabled */,\n      message: \"Simulation disabled\"\n    },\n    tokenBalanceChanges: []\n  };\n  if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isSimulationEnabled).call(this)) {\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, { transactionId, skipHistory: true }, (txMeta) => {\n      txMeta.simulationData = void 0;\n    });\n    simulationData = await _chunk74W7X6BEjs.getSimulationData.call(void 0, {\n      chainId,\n      from,\n      to,\n      value,\n      data\n    });\n  }\n  const finalTransactionMeta = this.getTransaction(transactionId);\n  if (!finalTransactionMeta) {\n    _chunkS6VGOPUYjs.projectLogger.call(void 0, \n      \"Cannot update simulation data as transaction not found\",\n      transactionId,\n      simulationData\n    );\n    return;\n  }\n  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, {\n    transactionId,\n    note: \"TransactionController#updateSimulationData - Update simulation data\"\n  }, (txMeta) => {\n    txMeta.simulationData = simulationData;\n  });\n  _chunkS6VGOPUYjs.projectLogger.call(void 0, \"Updated simulation data\", transactionId, simulationData);\n};\n_onGasFeePollerTransactionUpdate = new WeakSet();\nonGasFeePollerTransactionUpdate_fn = function({\n  transactionId,\n  gasFeeEstimates,\n  gasFeeEstimatesLoaded,\n  layer1GasFee\n}) {\n  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransactionInternal, updateTransactionInternal_fn).call(this, { transactionId, skipHistory: true }, (txMeta) => {\n    if (gasFeeEstimates) {\n      txMeta.gasFeeEstimates = gasFeeEstimates;\n    }\n    if (gasFeeEstimatesLoaded !== void 0) {\n      txMeta.gasFeeEstimatesLoaded = gasFeeEstimatesLoaded;\n    }\n    if (layer1GasFee) {\n      txMeta.layer1GasFee = layer1GasFee;\n    }\n  });\n};\n_getNetworkClientId = new WeakSet();\ngetNetworkClientId_fn = function({\n  networkClientId: requestNetworkClientId,\n  chainId\n}) {\n  const globalChainId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGlobalChainId, getGlobalChainId_fn).call(this);\n  const globalNetworkClientId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn).call(this);\n  if (requestNetworkClientId) {\n    return requestNetworkClientId;\n  }\n  if (!chainId || chainId === globalChainId) {\n    return globalNetworkClientId;\n  }\n  return this.messagingSystem.call(\n    `NetworkController:findNetworkClientIdByChainId`,\n    chainId\n  );\n};\n_getGlobalNetworkClientId = new WeakSet();\ngetGlobalNetworkClientId_fn = function() {\n  return this.getNetworkState().selectedNetworkClientId;\n};\n_getGlobalChainId = new WeakSet();\ngetGlobalChainId_fn = function() {\n  return this.messagingSystem.call(\n    `NetworkController:getNetworkClientById`,\n    this.getNetworkState().selectedNetworkClientId\n  ).configuration.chainId;\n};\n_isCustomNetwork = new WeakSet();\nisCustomNetwork_fn = function(networkClientId) {\n  const globalNetworkClientId = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getGlobalNetworkClientId, getGlobalNetworkClientId_fn).call(this);\n  if (!networkClientId || networkClientId === globalNetworkClientId) {\n    return !_controllerutils.isInfuraNetworkType.call(void 0, \n      this.getNetworkState().selectedNetworkClientId\n    );\n  }\n  return this.messagingSystem.call(\n    `NetworkController:getNetworkClientById`,\n    networkClientId\n  ).configuration.type === _networkcontroller.NetworkClientType.Custom;\n};\n_getSelectedAccount = new WeakSet();\ngetSelectedAccount_fn = function() {\n  return this.messagingSystem.call(\"AccountsController:getSelectedAccount\");\n};\n\n\n\n\n\n\n\nexports.HARDFORK = HARDFORK; exports.CANCEL_RATE = CANCEL_RATE; exports.SPEED_UP_RATE = SPEED_UP_RATE; exports.ApprovalState = ApprovalState; exports.TransactionController = TransactionController;\n//# sourceMappingURL=chunk-S7Q622IS.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/utils/transaction-type.ts\nvar _abi = require('@ethersproject/abi');\nvar _controllerutils = require('@metamask/controller-utils');\n\n\n\n\n\nvar _metamaskethabis = require('@metamask/metamask-eth-abis');\nvar ESTIMATE_GAS_ERROR = \"eth_estimateGas rpc method error\";\nvar ERC20Interface = new (0, _abi.Interface)(_metamaskethabis.abiERC20);\nvar ERC721Interface = new (0, _abi.Interface)(_metamaskethabis.abiERC721);\nvar ERC1155Interface = new (0, _abi.Interface)(_metamaskethabis.abiERC1155);\nvar USDCInterface = new (0, _abi.Interface)(_metamaskethabis.abiFiatTokenV2);\nasync function determineTransactionType(txParams, ethQuery) {\n  const { data, to } = txParams;\n  if (data && !to) {\n    return { type: \"contractDeployment\" /* deployContract */, getCodeResponse: void 0 };\n  }\n  const { contractCode: getCodeResponse, isContractAddress } = await readAddressAsContract(ethQuery, to);\n  if (!isContractAddress) {\n    return { type: \"simpleSend\" /* simpleSend */, getCodeResponse };\n  }\n  const hasValue = Number(txParams.value ?? \"0\") !== 0;\n  const contractInteractionResult = {\n    type: \"contractInteraction\" /* contractInteraction */,\n    getCodeResponse\n  };\n  if (!data || hasValue) {\n    return contractInteractionResult;\n  }\n  const name = parseStandardTokenTransactionData(data)?.name;\n  if (!name) {\n    return contractInteractionResult;\n  }\n  const tokenMethodName = [\n    \"approve\" /* tokenMethodApprove */,\n    \"setapprovalforall\" /* tokenMethodSetApprovalForAll */,\n    \"transfer\" /* tokenMethodTransfer */,\n    \"transferfrom\" /* tokenMethodTransferFrom */,\n    \"safetransferfrom\" /* tokenMethodSafeTransferFrom */,\n    \"increaseAllowance\" /* tokenMethodIncreaseAllowance */\n  ].find(\n    (methodName) => methodName.toLowerCase() === name.toLowerCase()\n  );\n  if (tokenMethodName) {\n    return { type: tokenMethodName, getCodeResponse };\n  }\n  return contractInteractionResult;\n}\nfunction parseStandardTokenTransactionData(data) {\n  if (!data) {\n    return void 0;\n  }\n  try {\n    return ERC20Interface.parseTransaction({ data });\n  } catch {\n  }\n  try {\n    return ERC721Interface.parseTransaction({ data });\n  } catch {\n  }\n  try {\n    return ERC1155Interface.parseTransaction({ data });\n  } catch {\n  }\n  try {\n    return USDCInterface.parseTransaction({ data });\n  } catch {\n  }\n  return void 0;\n}\nasync function readAddressAsContract(ethQuery, address) {\n  let contractCode;\n  try {\n    contractCode = await _controllerutils.query.call(void 0, ethQuery, \"getCode\", [address]);\n  } catch (e) {\n    contractCode = null;\n  }\n  const isContractAddress = contractCode ? contractCode !== \"0x\" && contractCode !== \"0x0\" : false;\n  return { contractCode, isContractAddress };\n}\n\n\n\n\nexports.ESTIMATE_GAS_ERROR = ESTIMATE_GAS_ERROR; exports.determineTransactionType = determineTransactionType;\n//# sourceMappingURL=chunk-SD6CWFDF.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/gas-flows/TestGasFeeFlow.ts\nvar _controllerutils = require('@metamask/controller-utils');\nvar INCREMENT = 1e15;\nvar LEVEL_DIFFERENCE = 0.5;\nvar _counter, _getValueForTotalFee, getValueForTotalFee_fn;\nvar TestGasFeeFlow = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getValueForTotalFee);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _counter, 1);\n  }\n  matchesTransaction(_transactionMeta) {\n    return true;\n  }\n  async getGasFees(request) {\n    const { transactionMeta } = request;\n    const { txParams } = transactionMeta;\n    const { gas: gasHex } = txParams;\n    if (!gasHex) {\n      throw new Error(\"Cannot estimate fee without gas value\");\n    }\n    const gasDecimal = parseInt(gasHex, 16);\n    const difference = INCREMENT * LEVEL_DIFFERENCE;\n    const mediumMaxTarget = (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _counter) + 1) * INCREMENT;\n    const mediumPriorityTarget = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _counter) * INCREMENT;\n    const lowMaxTarget = mediumMaxTarget - difference;\n    const lowPriorityTarget = mediumPriorityTarget - difference;\n    const highMaxTarget = mediumMaxTarget + difference;\n    const highPriorityTarget = mediumPriorityTarget + difference;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _counter, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _counter) + 1);\n    return {\n      estimates: {\n        type: \"fee-market\" /* FeeMarket */,\n        low: {\n          maxFeePerGas: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, lowMaxTarget, gasDecimal),\n          maxPriorityFeePerGas: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, lowPriorityTarget, gasDecimal)\n        },\n        medium: {\n          maxFeePerGas: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, mediumMaxTarget, gasDecimal),\n          maxPriorityFeePerGas: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, mediumPriorityTarget, gasDecimal)\n        },\n        high: {\n          maxFeePerGas: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, highMaxTarget, gasDecimal),\n          maxPriorityFeePerGas: _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getValueForTotalFee, getValueForTotalFee_fn).call(this, highPriorityTarget, gasDecimal)\n        }\n      }\n    };\n  }\n};\n_counter = new WeakMap();\n_getValueForTotalFee = new WeakSet();\ngetValueForTotalFee_fn = function(totalFee, gas) {\n  const feeDecimal = Math.ceil(totalFee / gas);\n  return _controllerutils.toHex.call(void 0, feeDecimal);\n};\n\n\n\nexports.TestGasFeeFlow = TestGasFeeFlow;\n//# sourceMappingURL=chunk-TJMQEH57.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/constants.ts\nvar CHAIN_IDS = {\n  MAINNET: \"0x1\",\n  GOERLI: \"0x5\",\n  BASE: \"0x2105\",\n  BASE_TESTNET: \"0x14a33\",\n  BSC: \"0x38\",\n  BSC_TESTNET: \"0x61\",\n  OPTIMISM: \"0xa\",\n  OPTIMISM_TESTNET: \"0x1a4\",\n  OPBNB: \"0xcc\",\n  OPBNB_TESTNET: \"0x15eb\",\n  OPTIMISM_SEPOLIA: \"0xaa37dc\",\n  POLYGON: \"0x89\",\n  POLYGON_TESTNET: \"0x13881\",\n  AVALANCHE: \"0xa86a\",\n  AVALANCHE_TESTNET: \"0xa869\",\n  FANTOM: \"0xfa\",\n  FANTOM_TESTNET: \"0xfa2\",\n  SEPOLIA: \"0xaa36a7\",\n  LINEA_GOERLI: \"0xe704\",\n  LINEA_SEPOLIA: \"0xe705\",\n  LINEA_MAINNET: \"0xe708\",\n  MOONBEAM: \"0x504\",\n  MOONBEAM_TESTNET: \"0x507\",\n  MOONRIVER: \"0x505\",\n  GNOSIS: \"0x64\",\n  ARBITRUM: \"0xa4b1\",\n  ZKSYNC_ERA: \"0x144\",\n  ZORA: \"0x76adf1\",\n  SCROLL: \"0x82750\",\n  SCROLL_SEPOLIA: \"0x8274f\"\n};\nvar DEFAULT_ETHERSCAN_DOMAIN = \"etherscan.io\";\nvar DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = \"api\";\nvar ETHERSCAN_SUPPORTED_NETWORKS = {\n  [CHAIN_IDS.GOERLI]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli`\n  },\n  [CHAIN_IDS.MAINNET]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX\n  },\n  [CHAIN_IDS.SEPOLIA]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia`\n  },\n  [CHAIN_IDS.LINEA_GOERLI]: {\n    domain: \"lineascan.build\",\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli`\n  },\n  [CHAIN_IDS.LINEA_SEPOLIA]: {\n    domain: \"lineascan.build\",\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia`\n  },\n  [CHAIN_IDS.LINEA_MAINNET]: {\n    domain: \"lineascan.build\",\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX\n  },\n  [CHAIN_IDS.BSC]: {\n    domain: \"bscscan.com\",\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX\n  },\n  [CHAIN_IDS.BSC_TESTNET]: {\n    domain: \"bscscan.com\",\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`\n  },\n  [CHAIN_IDS.OPTIMISM]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-optimistic`\n  },\n  [CHAIN_IDS.OPTIMISM_SEPOLIA]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia-optimistic`\n  },\n  [CHAIN_IDS.POLYGON]: {\n    domain: \"polygonscan.com\",\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX\n  },\n  [CHAIN_IDS.POLYGON_TESTNET]: {\n    domain: \"polygonscan.com\",\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-mumbai`\n  },\n  [CHAIN_IDS.AVALANCHE]: {\n    domain: \"snowtrace.io\",\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX\n  },\n  [CHAIN_IDS.AVALANCHE_TESTNET]: {\n    domain: \"snowtrace.io\",\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`\n  },\n  [CHAIN_IDS.FANTOM]: {\n    domain: \"ftmscan.com\",\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX\n  },\n  [CHAIN_IDS.FANTOM_TESTNET]: {\n    domain: \"ftmscan.com\",\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`\n  },\n  [CHAIN_IDS.MOONBEAM]: {\n    domain: \"moonscan.io\",\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbeam`\n  },\n  [CHAIN_IDS.MOONBEAM_TESTNET]: {\n    domain: \"moonscan.io\",\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbase`\n  },\n  [CHAIN_IDS.MOONRIVER]: {\n    domain: \"moonscan.io\",\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonriver`\n  },\n  [CHAIN_IDS.GNOSIS]: {\n    domain: \"gnosisscan.io\",\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-gnosis`\n  }\n};\nvar GAS_BUFFER_CHAIN_OVERRIDES = {\n  [CHAIN_IDS.OPTIMISM]: 1,\n  [CHAIN_IDS.OPTIMISM_SEPOLIA]: 1\n};\nvar ABI_SIMULATION_ERC20_WRAPPED = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"to\", type: \"address\" },\n      { indexed: false, name: \"wad\", type: \"uint256\" }\n    ],\n    name: \"Deposit\",\n    type: \"event\"\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: \"from\", type: \"address\" },\n      { indexed: false, name: \"wad\", type: \"uint256\" }\n    ],\n    name: \"Withdrawal\",\n    type: \"event\"\n  }\n];\nvar ABI_SIMULATION_ERC721_LEGACY = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        name: \"_from\",\n        type: \"address\"\n      },\n      {\n        indexed: false,\n        name: \"_to\",\n        type: \"address\"\n      },\n      {\n        indexed: false,\n        name: \"_tokenId\",\n        type: \"uint256\"\n      }\n    ],\n    name: \"Transfer\",\n    type: \"event\"\n  }\n];\n\n\n\n\n\n\n\n\n\nexports.CHAIN_IDS = CHAIN_IDS; exports.DEFAULT_ETHERSCAN_DOMAIN = DEFAULT_ETHERSCAN_DOMAIN; exports.DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX; exports.ETHERSCAN_SUPPORTED_NETWORKS = ETHERSCAN_SUPPORTED_NETWORKS; exports.GAS_BUFFER_CHAIN_OVERRIDES = GAS_BUFFER_CHAIN_OVERRIDES; exports.ABI_SIMULATION_ERC20_WRAPPED = ABI_SIMULATION_ERC20_WRAPPED; exports.ABI_SIMULATION_ERC721_LEGACY = ABI_SIMULATION_ERC721_LEGACY;\n//# sourceMappingURL=chunk-UGN7PBON.js.map","import { cloneDeep, isArray } from 'lodash';\nimport { hasProperty, isObject } from '@metamask/utils';\n\nexport const version = 81;\n\n/**\n * Prior to this migration, snap <> dapp permissions were wildcards i.e. `wallet_snap_*`.\n * Now the permission has been changed to `wallet_snap` and the current snap permissions\n * that are under wildcards will be added as caveats to a parent `wallet_snap` permission.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  const state = versionedData.data;\n  const newState = transformState(state);\n  versionedData.data = newState;\n  return versionedData;\n}\n\n// We return state AS IS if there is any corruption\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    !hasProperty(state, 'SnapController') ||\n    !hasProperty(state, 'PermissionController') ||\n    !isObject(state.PermissionController)\n  ) {\n    return state;\n  }\n  const { PermissionController } = state;\n\n  const { subjects } = PermissionController;\n\n  if (!isObject(subjects)) {\n    return state;\n  }\n\n  const snapPrefix = 'wallet_snap_';\n\n  for (const [subjectName, subject] of Object.entries(subjects)) {\n    if (!isObject(subject) || !isObject(subject.permissions)) {\n      return state;\n    }\n    // We keep track of the latest permission's date and associated id\n    // to assign to the wallet_snap permission after iterating through all permissions\n    let date = 1;\n    let id;\n    const { permissions } = subject;\n    // New permissions object that we use to tack on the `wallet_snap` permission\n    const updatedPermissions = { ...permissions };\n    for (const [permissionName, permission] of Object.entries(permissions)) {\n      // check if the permission is namespaced\n      if (permissionName.startsWith(snapPrefix)) {\n        if (\n          !isObject(permission) ||\n          !hasProperty(permission, 'id') ||\n          !hasProperty(permission, 'date')\n        ) {\n          return state;\n        }\n        // We create a wallet_snap key if we already don't have one\n        if (!hasProperty(updatedPermissions, 'wallet_snap')) {\n          updatedPermissions.wallet_snap = {\n            caveats: [{ type: 'snapIds', value: {} }],\n            invoker: subjectName,\n            parentCapability: 'wallet_snap',\n          };\n        }\n\n        // Check if the existing permission is valid\n        if (!isObject(updatedPermissions.wallet_snap)) {\n          return state;\n        }\n\n        if (\n          !isArray(\n            (updatedPermissions.wallet_snap as Record<string, unknown>).caveats,\n          )\n        ) {\n          return state;\n        }\n\n        // Adding the snap name to the wallet_snap permission's caveat value\n        const snapId = permissionName.slice(snapPrefix.length);\n        const caveat = (\n          (updatedPermissions.wallet_snap as Record<string, unknown>)\n            .caveats as unknown[]\n        )[0];\n\n        if (!isObject(caveat)) {\n          return state;\n        }\n\n        if (\n          !hasProperty(caveat, 'type') ||\n          caveat.type !== 'snapIds' ||\n          !hasProperty(caveat, 'value') ||\n          !isObject(caveat.value)\n        ) {\n          return state;\n        }\n        caveat.value[snapId] = {};\n\n        if (\n          typeof permission.date !== 'number' ||\n          typeof permission.id !== 'string'\n        ) {\n          return state;\n        }\n\n        // updating the date & id as we iterate through all permissions\n        if (permission.date > date) {\n          date = permission.date;\n          id = permission.id;\n        }\n\n        // finally deleting the stale permission\n        delete updatedPermissions[permissionName];\n      }\n    }\n\n    // we reassign the date and id here after iterating through all permissions\n    // and update the subject with the updated permissions\n    if (updatedPermissions.wallet_snap) {\n      (updatedPermissions.wallet_snap as Record<string, unknown>).date = date;\n      (updatedPermissions.wallet_snap as Record<string, unknown>).id = id;\n      subject.permissions = updatedPermissions;\n    }\n  }\n\n  return state;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/helpers/PendingTransactionTracker.ts\nvar _controllerutils = require('@metamask/controller-utils');\nvar _events = require('events'); var _events2 = _interopRequireDefault(_events);\nvar _lodash = require('lodash');\nvar DROPPED_BLOCK_COUNT = 3;\nvar RECEIPT_STATUS_SUCCESS = \"0x1\";\nvar RECEIPT_STATUS_FAILURE = \"0x0\";\nvar MAX_RETRY_BLOCK_DISTANCE = 50;\nvar KNOWN_TRANSACTION_ERRORS = [\n  \"replacement transaction underpriced\",\n  \"known transaction\",\n  \"gas price too low to replace\",\n  \"transaction with the same hash was already imported\",\n  \"gateway timeout\",\n  \"nonce too low\"\n];\nvar log = _chunkS6VGOPUYjs.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, \"pending-transactions\");\nvar _approveTransaction, _blockTracker, _droppedBlockCountByHash, _getChainId, _getEthQuery, _getTransactions, _isResubmitEnabled, _listener, _getGlobalLock, _publishTransaction, _running, _beforeCheckPendingTransaction, _beforePublish, _start, start_fn, _onLatestBlock, onLatestBlock_fn, _checkTransactions, checkTransactions_fn, _resubmitTransactions, resubmitTransactions_fn, _isKnownTransactionError, isKnownTransactionError_fn, _resubmitTransaction, resubmitTransaction_fn, _isResubmitDue, isResubmitDue_fn, _checkTransaction, checkTransaction_fn, _onTransactionConfirmed, onTransactionConfirmed_fn, _isTransactionDropped, isTransactionDropped_fn, _isNonceTaken, isNonceTaken_fn, _getPendingTransactions, getPendingTransactions_fn, _warnTransaction, warnTransaction_fn, _failTransaction, failTransaction_fn, _dropTransaction, dropTransaction_fn, _updateTransaction, updateTransaction_fn, _getTransactionReceipt, getTransactionReceipt_fn, _getBlockByHash, getBlockByHash_fn, _getNetworkTransactionCount, getNetworkTransactionCount_fn, _getCurrentChainTransactions, getCurrentChainTransactions_fn;\nvar PendingTransactionTracker = class {\n  constructor({\n    approveTransaction,\n    blockTracker,\n    getChainId,\n    getEthQuery,\n    getTransactions,\n    isResubmitEnabled,\n    getGlobalLock,\n    publishTransaction,\n    hooks\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _start);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onLatestBlock);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _checkTransactions);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _resubmitTransactions);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isKnownTransactionError);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _resubmitTransaction);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isResubmitDue);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _checkTransaction);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _onTransactionConfirmed);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isTransactionDropped);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isNonceTaken);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getPendingTransactions);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _warnTransaction);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _failTransaction);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _dropTransaction);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateTransaction);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getTransactionReceipt);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getBlockByHash);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getNetworkTransactionCount);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getCurrentChainTransactions);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _approveTransaction, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _blockTracker, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _droppedBlockCountByHash, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getChainId, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getEthQuery, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getTransactions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isResubmitEnabled, void 0);\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _listener, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getGlobalLock, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _publishTransaction, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _running, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _beforeCheckPendingTransaction, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _beforePublish, void 0);\n    this.startIfPendingTransactions = () => {\n      const pendingTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getPendingTransactions, getPendingTransactions_fn).call(this);\n      if (pendingTransactions.length) {\n        _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _start, start_fn).call(this);\n      } else {\n        this.stop();\n      }\n    };\n    this.hub = new (0, _events2.default)();\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _approveTransaction, approveTransaction);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _blockTracker, blockTracker);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _droppedBlockCountByHash, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getChainId, getChainId);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getEthQuery, getEthQuery);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getTransactions, getTransactions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isResubmitEnabled, isResubmitEnabled ?? (() => true));\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _listener, _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onLatestBlock, onLatestBlock_fn).bind(this));\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _getGlobalLock, getGlobalLock);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _publishTransaction, publishTransaction);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _running, false);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _beforePublish, hooks?.beforePublish ?? (() => true));\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _beforeCheckPendingTransaction, hooks?.beforeCheckPendingTransaction ?? (() => true));\n  }\n  /**\n   * Force checks the network if the given transaction is confirmed and updates it's status.\n   *\n   * @param txMeta - The transaction to check\n   */\n  async forceCheckTransaction(txMeta) {\n    const releaseLock = await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getGlobalLock).call(this);\n    try {\n      await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _checkTransaction, checkTransaction_fn).call(this, txMeta);\n    } catch (error) {\n      log(\"Failed to check transaction\", error);\n    } finally {\n      releaseLock();\n    }\n  }\n  stop() {\n    if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _running)) {\n      return;\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _blockTracker).removeListener(\"latest\", _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _listener));\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _running, false);\n    log(\"Stopped polling\");\n  }\n};\n_approveTransaction = new WeakMap();\n_blockTracker = new WeakMap();\n_droppedBlockCountByHash = new WeakMap();\n_getChainId = new WeakMap();\n_getEthQuery = new WeakMap();\n_getTransactions = new WeakMap();\n_isResubmitEnabled = new WeakMap();\n_listener = new WeakMap();\n_getGlobalLock = new WeakMap();\n_publishTransaction = new WeakMap();\n_running = new WeakMap();\n_beforeCheckPendingTransaction = new WeakMap();\n_beforePublish = new WeakMap();\n_start = new WeakSet();\nstart_fn = function() {\n  if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _running)) {\n    return;\n  }\n  _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _blockTracker).on(\"latest\", _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _listener));\n  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _running, true);\n  log(\"Started polling\");\n};\n_onLatestBlock = new WeakSet();\nonLatestBlock_fn = async function(latestBlockNumber) {\n  const releaseLock = await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getGlobalLock).call(this);\n  try {\n    await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _checkTransactions, checkTransactions_fn).call(this);\n  } catch (error) {\n    log(\"Failed to check transactions\", error);\n  } finally {\n    releaseLock();\n  }\n  try {\n    await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _resubmitTransactions, resubmitTransactions_fn).call(this, latestBlockNumber);\n  } catch (error) {\n    log(\"Failed to resubmit transactions\", error);\n  }\n};\n_checkTransactions = new WeakSet();\ncheckTransactions_fn = async function() {\n  log(\"Checking transactions\");\n  const pendingTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getPendingTransactions, getPendingTransactions_fn).call(this);\n  if (!pendingTransactions.length) {\n    log(\"No pending transactions to check\");\n    return;\n  }\n  log(\"Found pending transactions to check\", {\n    count: pendingTransactions.length,\n    ids: pendingTransactions.map((tx) => tx.id)\n  });\n  await Promise.all(\n    pendingTransactions.map((tx) => _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _checkTransaction, checkTransaction_fn).call(this, tx))\n  );\n};\n_resubmitTransactions = new WeakSet();\nresubmitTransactions_fn = async function(latestBlockNumber) {\n  if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isResubmitEnabled).call(this) || !_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _running)) {\n    return;\n  }\n  log(\"Resubmitting transactions\");\n  const pendingTransactions = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getPendingTransactions, getPendingTransactions_fn).call(this);\n  if (!pendingTransactions.length) {\n    log(\"No pending transactions to resubmit\");\n    return;\n  }\n  log(\"Found pending transactions to resubmit\", {\n    count: pendingTransactions.length,\n    ids: pendingTransactions.map((tx) => tx.id)\n  });\n  for (const txMeta of pendingTransactions) {\n    try {\n      await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _resubmitTransaction, resubmitTransaction_fn).call(this, txMeta, latestBlockNumber);\n    } catch (error) {\n      const errorMessage = error.value?.message?.toLowerCase() || error.message.toLowerCase();\n      if (_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isKnownTransactionError, isKnownTransactionError_fn).call(this, errorMessage)) {\n        log(\"Ignoring known transaction error\", errorMessage);\n        return;\n      }\n      _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _warnTransaction, warnTransaction_fn).call(this, txMeta, error.message, \"There was an error when resubmitting this transaction.\");\n    }\n  }\n};\n_isKnownTransactionError = new WeakSet();\nisKnownTransactionError_fn = function(errorMessage) {\n  return KNOWN_TRANSACTION_ERRORS.some(\n    (knownError) => errorMessage.includes(knownError)\n  );\n};\n_resubmitTransaction = new WeakSet();\nresubmitTransaction_fn = async function(txMeta, latestBlockNumber) {\n  if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isResubmitDue, isResubmitDue_fn).call(this, txMeta, latestBlockNumber)) {\n    return;\n  }\n  const { rawTx } = txMeta;\n  if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _beforePublish).call(this, txMeta)) {\n    return;\n  }\n  if (!rawTx?.length) {\n    log(\"Approving transaction as no raw value\");\n    await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _approveTransaction).call(this, txMeta.id);\n    return;\n  }\n  const ethQuery = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getEthQuery).call(this, txMeta.networkClientId);\n  await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _publishTransaction).call(this, ethQuery, rawTx);\n  const retryCount = (txMeta.retryCount ?? 0) + 1;\n  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransaction, updateTransaction_fn).call(this, _lodash.merge.call(void 0, {}, txMeta, { retryCount }), \"PendingTransactionTracker:transaction-retry - Retry count increased\");\n};\n_isResubmitDue = new WeakSet();\nisResubmitDue_fn = function(txMeta, latestBlockNumber) {\n  const txMetaWithFirstRetryBlockNumber = _lodash.cloneDeep.call(void 0, txMeta);\n  if (!txMetaWithFirstRetryBlockNumber.firstRetryBlockNumber) {\n    txMetaWithFirstRetryBlockNumber.firstRetryBlockNumber = latestBlockNumber;\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransaction, updateTransaction_fn).call(this, txMetaWithFirstRetryBlockNumber, \"PendingTransactionTracker:#isResubmitDue - First retry block number set\");\n  }\n  const { firstRetryBlockNumber } = txMetaWithFirstRetryBlockNumber;\n  const blocksSinceFirstRetry = Number.parseInt(latestBlockNumber, 16) - Number.parseInt(firstRetryBlockNumber, 16);\n  const retryCount = txMeta.retryCount || 0;\n  const requiredBlocksSinceFirstRetry = Math.min(\n    MAX_RETRY_BLOCK_DISTANCE,\n    Math.pow(2, retryCount)\n  );\n  return blocksSinceFirstRetry >= requiredBlocksSinceFirstRetry;\n};\n_checkTransaction = new WeakSet();\ncheckTransaction_fn = async function(txMeta) {\n  const { hash, id } = txMeta;\n  if (!hash && _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _beforeCheckPendingTransaction).call(this, txMeta)) {\n    const error = new Error(\n      \"We had an error while submitting this transaction, please try again.\"\n    );\n    error.name = \"NoTxHashError\";\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _failTransaction, failTransaction_fn).call(this, txMeta, error);\n    return;\n  }\n  if (_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isNonceTaken, isNonceTaken_fn).call(this, txMeta)) {\n    log(\"Nonce already taken\", id);\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _dropTransaction, dropTransaction_fn).call(this, txMeta);\n    return;\n  }\n  try {\n    const receipt = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getTransactionReceipt, getTransactionReceipt_fn).call(this, hash);\n    const isSuccess = receipt?.status === RECEIPT_STATUS_SUCCESS;\n    const isFailure = receipt?.status === RECEIPT_STATUS_FAILURE;\n    if (isFailure) {\n      log(\"Transaction receipt has failed status\");\n      _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _failTransaction, failTransaction_fn).call(this, txMeta, new Error(\"Transaction dropped or replaced\"));\n      return;\n    }\n    const { blockNumber, blockHash } = receipt || {};\n    if (isSuccess && blockNumber && blockHash) {\n      await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _onTransactionConfirmed, onTransactionConfirmed_fn).call(this, txMeta, {\n        ...receipt,\n        blockNumber,\n        blockHash\n      });\n      return;\n    }\n  } catch (error) {\n    log(\"Failed to check transaction\", id, error);\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _warnTransaction, warnTransaction_fn).call(this, txMeta, error.message, \"There was a problem loading this transaction.\");\n    return;\n  }\n  if (await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isTransactionDropped, isTransactionDropped_fn).call(this, txMeta)) {\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _dropTransaction, dropTransaction_fn).call(this, txMeta);\n  }\n};\n_onTransactionConfirmed = new WeakSet();\nonTransactionConfirmed_fn = async function(txMeta, receipt) {\n  const { id } = txMeta;\n  const { blockHash } = receipt;\n  log(\"Transaction confirmed\", id);\n  const { baseFeePerGas, timestamp: blockTimestamp } = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getBlockByHash, getBlockByHash_fn).call(this, blockHash, false);\n  const updatedTxMeta = _lodash.cloneDeep.call(void 0, txMeta);\n  updatedTxMeta.baseFeePerGas = baseFeePerGas;\n  updatedTxMeta.blockTimestamp = blockTimestamp;\n  updatedTxMeta.status = \"confirmed\" /* confirmed */;\n  updatedTxMeta.txParams = {\n    ...updatedTxMeta.txParams,\n    gasUsed: receipt.gasUsed\n  };\n  updatedTxMeta.txReceipt = receipt;\n  updatedTxMeta.verifiedOnBlockchain = true;\n  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransaction, updateTransaction_fn).call(this, updatedTxMeta, \"PendingTransactionTracker:#onTransactionConfirmed - Transaction confirmed\");\n  this.hub.emit(\"transaction-confirmed\", updatedTxMeta);\n};\n_isTransactionDropped = new WeakSet();\nisTransactionDropped_fn = async function(txMeta) {\n  const {\n    hash,\n    id,\n    txParams: { nonce, from }\n  } = txMeta;\n  if (!nonce || !hash) {\n    return false;\n  }\n  const networkNextNonceHex = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getNetworkTransactionCount, getNetworkTransactionCount_fn).call(this, from);\n  const networkNextNonceNumber = parseInt(networkNextNonceHex, 16);\n  const nonceNumber = parseInt(nonce, 16);\n  if (nonceNumber >= networkNextNonceNumber) {\n    return false;\n  }\n  let droppedBlockCount = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _droppedBlockCountByHash).get(hash);\n  if (droppedBlockCount === void 0) {\n    droppedBlockCount = 0;\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _droppedBlockCountByHash).set(hash, droppedBlockCount);\n  }\n  if (droppedBlockCount < DROPPED_BLOCK_COUNT) {\n    log(\"Incrementing dropped block count\", { id, droppedBlockCount });\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _droppedBlockCountByHash).set(hash, droppedBlockCount + 1);\n    return false;\n  }\n  log(\"Hit dropped block count\", id);\n  _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _droppedBlockCountByHash).delete(hash);\n  return true;\n};\n_isNonceTaken = new WeakSet();\nisNonceTaken_fn = function(txMeta) {\n  const { id, txParams } = txMeta;\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getCurrentChainTransactions, getCurrentChainTransactions_fn).call(this).some(\n    (tx) => tx.id !== id && tx.txParams.from === txParams.from && tx.status === \"confirmed\" /* confirmed */ && tx.txParams.nonce === txParams.nonce && tx.type !== \"incoming\" /* incoming */\n  );\n};\n_getPendingTransactions = new WeakSet();\ngetPendingTransactions_fn = function() {\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getCurrentChainTransactions, getCurrentChainTransactions_fn).call(this).filter(\n    (tx) => tx.status === \"submitted\" /* submitted */ && !tx.verifiedOnBlockchain && !tx.isUserOperation\n  );\n};\n_warnTransaction = new WeakSet();\nwarnTransaction_fn = function(txMeta, error, message) {\n  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateTransaction, updateTransaction_fn).call(this, {\n    ...txMeta,\n    warning: { error, message }\n  }, \"PendingTransactionTracker:#warnTransaction - Warning added\");\n};\n_failTransaction = new WeakSet();\nfailTransaction_fn = function(txMeta, error) {\n  log(\"Transaction failed\", txMeta.id, error);\n  this.hub.emit(\"transaction-failed\", txMeta, error);\n};\n_dropTransaction = new WeakSet();\ndropTransaction_fn = function(txMeta) {\n  log(\"Transaction dropped\", txMeta.id);\n  this.hub.emit(\"transaction-dropped\", txMeta);\n};\n_updateTransaction = new WeakSet();\nupdateTransaction_fn = function(txMeta, note) {\n  this.hub.emit(\"transaction-updated\", txMeta, note);\n};\n_getTransactionReceipt = new WeakSet();\ngetTransactionReceipt_fn = async function(txHash) {\n  return await _controllerutils.query.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getEthQuery).call(this), \"getTransactionReceipt\", [txHash]);\n};\n_getBlockByHash = new WeakSet();\ngetBlockByHash_fn = async function(blockHash, includeTransactionDetails) {\n  return await _controllerutils.query.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getEthQuery).call(this), \"getBlockByHash\", [\n    blockHash,\n    includeTransactionDetails\n  ]);\n};\n_getNetworkTransactionCount = new WeakSet();\ngetNetworkTransactionCount_fn = async function(address) {\n  return await _controllerutils.query.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getEthQuery).call(this), \"getTransactionCount\", [address]);\n};\n_getCurrentChainTransactions = new WeakSet();\ngetCurrentChainTransactions_fn = function() {\n  const currentChainId = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getChainId).call(this);\n  return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _getTransactions).call(this).filter(\n    (tx) => tx.chainId === currentChainId\n  );\n};\n\n\n\nexports.PendingTransactionTracker = PendingTransactionTracker;\n//# sourceMappingURL=chunk-ULD4JC3Q.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n// src/utils/gas.ts\n\n\n\n\n\nvar _controllerutils = require('@metamask/controller-utils');\nvar _utils = require('@metamask/utils');\nvar log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, \"gas\");\nvar FIXED_GAS = \"0x5208\";\nvar DEFAULT_GAS_MULTIPLIER = 1.5;\nasync function updateGas(request) {\n  const { txMeta } = request;\n  const initialParams = { ...txMeta.txParams };\n  const [gas, simulationFails] = await getGas(request);\n  txMeta.txParams.gas = gas;\n  txMeta.simulationFails = simulationFails;\n  if (!initialParams.gas) {\n    txMeta.originalGasEstimate = txMeta.txParams.gas;\n  }\n  if (!txMeta.defaultGasEstimates) {\n    txMeta.defaultGasEstimates = {};\n  }\n  txMeta.defaultGasEstimates.gas = txMeta.txParams.gas;\n}\nasync function estimateGas(txParams, ethQuery) {\n  const request = { ...txParams };\n  const { data, value } = request;\n  const { gasLimit: gasLimitHex, number: blockNumber } = await getLatestBlock(\n    ethQuery\n  );\n  const gasLimitBN = _controllerutils.hexToBN.call(void 0, gasLimitHex);\n  request.data = data ? _utils.add0x.call(void 0, data) : data;\n  request.gas = _controllerutils.BNToHex.call(void 0, _controllerutils.fractionBN.call(void 0, gasLimitBN, 19, 20));\n  request.value = value || \"0x0\";\n  let estimatedGas = request.gas;\n  let simulationFails;\n  try {\n    estimatedGas = await _controllerutils.query.call(void 0, ethQuery, \"estimateGas\", [request]);\n  } catch (error) {\n    simulationFails = {\n      reason: error.message,\n      errorKey: error.errorKey,\n      debug: {\n        blockNumber,\n        blockGasLimit: gasLimitHex\n      }\n    };\n    log(\"Estimation failed\", { ...simulationFails, fallback: estimateGas });\n  }\n  return {\n    blockGasLimit: gasLimitHex,\n    estimatedGas,\n    simulationFails\n  };\n}\nfunction addGasBuffer(estimatedGas, blockGasLimit, multiplier) {\n  const estimatedGasBN = _controllerutils.hexToBN.call(void 0, estimatedGas);\n  const maxGasBN = _controllerutils.hexToBN.call(void 0, blockGasLimit).muln(0.9);\n  const paddedGasBN = estimatedGasBN.muln(multiplier);\n  if (estimatedGasBN.gt(maxGasBN)) {\n    const estimatedGasHex = _utils.add0x.call(void 0, estimatedGas);\n    log(\"Using estimated value\", estimatedGasHex);\n    return estimatedGasHex;\n  }\n  if (paddedGasBN.lt(maxGasBN)) {\n    const paddedHex = _utils.add0x.call(void 0, _controllerutils.BNToHex.call(void 0, paddedGasBN));\n    log(\"Using padded estimate\", paddedHex, multiplier);\n    return paddedHex;\n  }\n  const maxHex = _utils.add0x.call(void 0, _controllerutils.BNToHex.call(void 0, maxGasBN));\n  log(\"Using 90% of block gas limit\", maxHex);\n  return maxHex;\n}\nasync function getGas(request) {\n  const { isCustomNetwork, chainId, txMeta } = request;\n  if (txMeta.txParams.gas) {\n    log(\"Using value from request\", txMeta.txParams.gas);\n    return [txMeta.txParams.gas];\n  }\n  if (await requiresFixedGas(request)) {\n    log(\"Using fixed value\", FIXED_GAS);\n    return [FIXED_GAS];\n  }\n  const { blockGasLimit, estimatedGas, simulationFails } = await estimateGas(\n    txMeta.txParams,\n    request.ethQuery\n  );\n  if (isCustomNetwork) {\n    log(\"Using original estimate as custom network\");\n    return [estimatedGas, simulationFails];\n  }\n  const bufferMultiplier = _chunkUGN7PBONjs.GAS_BUFFER_CHAIN_OVERRIDES[chainId] ?? DEFAULT_GAS_MULTIPLIER;\n  const bufferedGas = addGasBuffer(\n    estimatedGas,\n    blockGasLimit,\n    bufferMultiplier\n  );\n  return [bufferedGas, simulationFails];\n}\nasync function requiresFixedGas({\n  ethQuery,\n  txMeta,\n  isCustomNetwork\n}) {\n  const {\n    txParams: { to, data }\n  } = txMeta;\n  if (isCustomNetwork || !to || data) {\n    return false;\n  }\n  const code = await getCode(ethQuery, to);\n  return !code || code === \"0x\";\n}\nasync function getCode(ethQuery, address) {\n  return await _controllerutils.query.call(void 0, ethQuery, \"getCode\", [address]);\n}\nasync function getLatestBlock(ethQuery) {\n  return await _controllerutils.query.call(void 0, ethQuery, \"getBlockByNumber\", [\"latest\", false]);\n}\n\n\n\n\n\n\n\n\nexports.log = log; exports.FIXED_GAS = FIXED_GAS; exports.DEFAULT_GAS_MULTIPLIER = DEFAULT_GAS_MULTIPLIER; exports.updateGas = updateGas; exports.estimateGas = estimateGas; exports.addGasBuffer = addGasBuffer;\n//# sourceMappingURL=chunk-V72C4MCR.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkYVCX6Z75js = require('./chunk-YVCX6Z75.js');\n\n\nvar _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');\n\n// src/gas-flows/ScrollLayer1GasFeeFlow.ts\nvar SCROLL_CHAIN_IDS = [_chunkUGN7PBONjs.CHAIN_IDS.SCROLL, _chunkUGN7PBONjs.CHAIN_IDS.SCROLL_SEPOLIA];\nvar SCROLL_GAS_PRICE_ORACLE_ADDRESS = \"0x5300000000000000000000000000000000000002\";\nvar ScrollLayer1GasFeeFlow = class extends _chunkYVCX6Z75js.OracleLayer1GasFeeFlow {\n  constructor() {\n    super(SCROLL_GAS_PRICE_ORACLE_ADDRESS, true);\n  }\n  matchesTransaction(transactionMeta) {\n    return SCROLL_CHAIN_IDS.includes(transactionMeta.chainId);\n  }\n};\n\n\n\nexports.ScrollLayer1GasFeeFlow = ScrollLayer1GasFeeFlow;\n//# sourceMappingURL=chunk-WR5F34OW.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkUGN7PBONjs = require('./chunk-UGN7PBON.js');\n\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n// src/utils/etherscan.ts\nvar _controllerutils = require('@metamask/controller-utils');\nasync function fetchEtherscanTransactions({\n  address,\n  chainId,\n  fromBlock,\n  limit\n}) {\n  return await fetchTransactions(\"txlist\", {\n    address,\n    chainId,\n    fromBlock,\n    limit\n  });\n}\nasync function fetchEtherscanTokenTransactions({\n  address,\n  chainId,\n  fromBlock,\n  limit\n}) {\n  return await fetchTransactions(\"tokentx\", {\n    address,\n    chainId,\n    fromBlock,\n    limit\n  });\n}\nasync function fetchTransactions(action, {\n  address,\n  chainId,\n  fromBlock,\n  limit\n}) {\n  const urlParams = {\n    module: \"account\",\n    address,\n    startBlock: fromBlock?.toString(),\n    offset: limit?.toString(),\n    sort: \"desc\"\n  };\n  const etherscanTxUrl = getEtherscanApiUrl(chainId, {\n    ...urlParams,\n    action\n  });\n  _chunkS6VGOPUYjs.incomingTransactionsLogger.call(void 0, \"Sending Etherscan request\", etherscanTxUrl);\n  const response = await _controllerutils.handleFetch.call(void 0, \n    etherscanTxUrl\n  );\n  return response;\n}\nfunction getEtherscanApiUrl(chainId, urlParams) {\n  const apiUrl = getEtherscanApiHost(chainId);\n  let url = `${apiUrl}/api?`;\n  for (const paramKey of Object.keys(urlParams)) {\n    const value = urlParams[paramKey];\n    if (!value) {\n      continue;\n    }\n    url += `${paramKey}=${value}&`;\n  }\n  url += \"tag=latest&page=1\";\n  return url;\n}\nfunction getEtherscanApiHost(chainId) {\n  const networkInfo = _chunkUGN7PBONjs.ETHERSCAN_SUPPORTED_NETWORKS[chainId];\n  if (!networkInfo) {\n    throw new Error(`Etherscan does not support chain with ID: ${chainId}`);\n  }\n  return `https://${networkInfo.subdomain}.${networkInfo.domain}`;\n}\n\n\n\n\n\nexports.fetchEtherscanTransactions = fetchEtherscanTransactions; exports.fetchEtherscanTokenTransactions = fetchEtherscanTokenTransactions; exports.getEtherscanApiHost = getEtherscanApiHost;\n//# sourceMappingURL=chunk-XVYXRCRL.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkS6VGOPUYjs = require('./chunk-S6VGOPUY.js');\n\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/gas-flows/OracleLayer1GasFeeFlow.ts\nvar _common = require('@ethereumjs/common');\nvar _tx = require('@ethereumjs/tx');\nvar _contracts = require('@ethersproject/contracts');\nvar _providers = require('@ethersproject/providers');\nvar _utils = require('@metamask/utils');\nvar _lodash = require('lodash');\nvar log = _utils.createModuleLogger.call(void 0, _chunkS6VGOPUYjs.projectLogger, \"oracle-layer1-gas-fee-flow\");\nvar DUMMY_KEY = \"abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789\";\nvar GAS_PRICE_ORACLE_ABI = [\n  {\n    inputs: [{ internalType: \"bytes\", name: \"_data\", type: \"bytes\" }],\n    name: \"getL1Fee\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }\n];\nvar _oracleAddress, _signTransaction, _getOracleLayer1GasFee, getOracleLayer1GasFee_fn, _buildUnserializedTransaction, buildUnserializedTransaction_fn, _buildTransactionParams, buildTransactionParams_fn, _buildTransactionCommon, buildTransactionCommon_fn;\nvar OracleLayer1GasFeeFlow = class {\n  constructor(oracleAddress, signTransaction) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _getOracleLayer1GasFee);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _buildUnserializedTransaction);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _buildTransactionParams);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _buildTransactionCommon);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _oracleAddress, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _signTransaction, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _oracleAddress, oracleAddress);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _signTransaction, signTransaction ?? false);\n  }\n  async getLayer1Fee(request) {\n    try {\n      return await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _getOracleLayer1GasFee, getOracleLayer1GasFee_fn).call(this, request);\n    } catch (error) {\n      log(\"Failed to get oracle layer 1 gas fee\", error);\n      throw new Error(`Failed to get oracle layer 1 gas fee`);\n    }\n  }\n};\n_oracleAddress = new WeakMap();\n_signTransaction = new WeakMap();\n_getOracleLayer1GasFee = new WeakSet();\ngetOracleLayer1GasFee_fn = async function(request) {\n  const { provider, transactionMeta } = request;\n  const contract = new (0, _contracts.Contract)(\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _oracleAddress),\n    GAS_PRICE_ORACLE_ABI,\n    // Network controller provider type is incompatible with ethers provider\n    new (0, _providers.Web3Provider)(provider)\n  );\n  const serializedTransaction = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _buildUnserializedTransaction, buildUnserializedTransaction_fn).call(this, transactionMeta, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _signTransaction)).serialize();\n  const result = await contract.getL1Fee(serializedTransaction);\n  if (result === void 0) {\n    throw new Error(\"No value returned from oracle contract\");\n  }\n  return {\n    layer1Fee: result.toHexString()\n  };\n};\n_buildUnserializedTransaction = new WeakSet();\nbuildUnserializedTransaction_fn = function(transactionMeta, sign) {\n  const txParams = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _buildTransactionParams, buildTransactionParams_fn).call(this, transactionMeta);\n  const common = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _buildTransactionCommon, buildTransactionCommon_fn).call(this, transactionMeta);\n  let unserializedTransaction = _tx.TransactionFactory.fromTxData(txParams, {\n    common\n  });\n  if (sign) {\n    const keyBuffer = Buffer.from(DUMMY_KEY, \"hex\");\n    unserializedTransaction = unserializedTransaction.sign(keyBuffer);\n  }\n  return unserializedTransaction;\n};\n_buildTransactionParams = new WeakSet();\nbuildTransactionParams_fn = function(transactionMeta) {\n  return {\n    ..._lodash.omit.call(void 0, transactionMeta.txParams, \"gas\"),\n    gasLimit: transactionMeta.txParams.gas\n  };\n};\n_buildTransactionCommon = new WeakSet();\nbuildTransactionCommon_fn = function(transactionMeta) {\n  const chainId = Number(transactionMeta.chainId);\n  return _common.Common.custom({\n    chainId,\n    defaultHardfork: _common.Hardfork.London\n  });\n};\n\n\n\nexports.OracleLayer1GasFeeFlow = OracleLayer1GasFeeFlow;\n//# sourceMappingURL=chunk-YVCX6Z75.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _chunkS7Q622ISjs = require('./chunk-S7Q622IS.js');\nrequire('./chunk-PRUNMTRD.js');\nrequire('./chunk-74W7X6BE.js');\nrequire('./chunk-KT6UAKBB.js');\n\n\nvar _chunkSD6CWFDFjs = require('./chunk-SD6CWFDF.js');\nrequire('./chunk-RXIUMVA5.js');\nrequire('./chunk-ULD4JC3Q.js');\nrequire('./chunk-7LXE4KHV.js');\nrequire('./chunk-V72C4MCR.js');\nrequire('./chunk-QP75SWIQ.js');\nrequire('./chunk-NYKRCWBG.js');\nrequire('./chunk-WR5F34OW.js');\nrequire('./chunk-YVCX6Z75.js');\nrequire('./chunk-TJMQEH57.js');\nrequire('./chunk-2EU6346V.js');\nrequire('./chunk-2XKEAKQG.js');\nrequire('./chunk-RHDPOIS4.js');\nrequire('./chunk-6OLJWLKK.js');\nrequire('./chunk-7NMV2NPM.js');\nrequire('./chunk-XVYXRCRL.js');\nrequire('./chunk-HMOSP33F.js');\nrequire('./chunk-ARZHJFVG.js');\nrequire('./chunk-QTKXIDGE.js');\nrequire('./chunk-C3WC4OJ3.js');\nrequire('./chunk-QH2H4W3N.js');\n\n\n\nvar _chunkOZ6UB42Cjs = require('./chunk-OZ6UB42C.js');\n\n\nvar _chunk76FONEDAjs = require('./chunk-76FONEDA.js');\nrequire('./chunk-UGN7PBON.js');\nrequire('./chunk-S6VGOPUY.js');\n\n\n\n\n\n\n\n\n\n\nvar _chunkAYTU4HU5js = require('./chunk-AYTU4HU5.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexports.CANCEL_RATE = _chunkS7Q622ISjs.CANCEL_RATE; exports.GasFeeEstimateLevel = _chunkAYTU4HU5js.GasFeeEstimateLevel; exports.GasFeeEstimateType = _chunkAYTU4HU5js.GasFeeEstimateType; exports.HARDFORK = _chunkS7Q622ISjs.HARDFORK; exports.SimulationErrorCode = _chunkAYTU4HU5js.SimulationErrorCode; exports.SimulationTokenStandard = _chunkAYTU4HU5js.SimulationTokenStandard; exports.TransactionController = _chunkS7Q622ISjs.TransactionController; exports.TransactionEnvelopeType = _chunkAYTU4HU5js.TransactionEnvelopeType; exports.TransactionStatus = _chunkAYTU4HU5js.TransactionStatus; exports.TransactionType = _chunkAYTU4HU5js.TransactionType; exports.UserFeeLevel = _chunkAYTU4HU5js.UserFeeLevel; exports.WalletDevice = _chunkAYTU4HU5js.WalletDevice; exports.determineTransactionType = _chunkSD6CWFDFjs.determineTransactionType; exports.isEIP1559Transaction = _chunkOZ6UB42Cjs.isEIP1559Transaction; exports.mergeGasFeeEstimates = _chunk76FONEDAjs.mergeGasFeeEstimates; exports.normalizeTransactionParams = _chunkOZ6UB42Cjs.normalizeTransactionParams;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTransaction = void 0;\nconst common_1 = require(\"@ethereumjs/common\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst types_1 = require(\"./types\");\nconst util_2 = require(\"./util\");\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nclass BaseTransaction {\n    constructor(txData, opts) {\n        this.cache = {\n            hash: undefined,\n            dataFee: undefined,\n        };\n        /**\n         * List of tx type defining EIPs,\n         * e.g. 1559 (fee market) and 2930 (access lists)\n         * for FeeMarketEIP1559Transaction objects\n         */\n        this.activeCapabilities = [];\n        /**\n         * The default chain the tx falls back to if no Common\n         * is provided and if the chain can't be derived from\n         * a passed in chainId (only EIP-2718 typed txs) or\n         * EIP-155 signature (legacy txs).\n         *\n         * @hidden\n         */\n        this.DEFAULT_CHAIN = common_1.Chain.Mainnet;\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        this.DEFAULT_HARDFORK = common_1.Hardfork.Merge;\n        const { nonce, gasLimit, to, value, data, v, r, s, type } = txData;\n        this._type = Number((0, util_1.bufferToBigInt)((0, util_1.toBuffer)(type)));\n        this.txOptions = opts;\n        const toB = (0, util_1.toBuffer)(to === '' ? '0x' : to);\n        const vB = (0, util_1.toBuffer)(v === '' ? '0x' : v);\n        const rB = (0, util_1.toBuffer)(r === '' ? '0x' : r);\n        const sB = (0, util_1.toBuffer)(s === '' ? '0x' : s);\n        this.nonce = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(nonce === '' ? '0x' : nonce));\n        this.gasLimit = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(gasLimit === '' ? '0x' : gasLimit));\n        this.to = toB.length > 0 ? new util_1.Address(toB) : undefined;\n        this.value = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(value === '' ? '0x' : value));\n        this.data = (0, util_1.toBuffer)(data === '' ? '0x' : data);\n        this.v = vB.length > 0 ? (0, util_1.bufferToBigInt)(vB) : undefined;\n        this.r = rB.length > 0 ? (0, util_1.bufferToBigInt)(rB) : undefined;\n        this.s = sB.length > 0 ? (0, util_1.bufferToBigInt)(sB) : undefined;\n        this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });\n        // geth limits gasLimit to 2^64-1\n        this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);\n        // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n        this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);\n        const createContract = this.to === undefined || this.to === null;\n        const allowUnlimitedInitCodeSize = opts.allowUnlimitedInitCodeSize ?? false;\n        const common = opts.common ?? this._getCommon();\n        if (createContract && common.isActivatedEIP(3860) && allowUnlimitedInitCodeSize === false) {\n            (0, util_2.checkMaxInitCodeSize)(common, this.data.length);\n        }\n    }\n    /**\n     * Returns the transaction type.\n     *\n     * Note: legacy txs will return tx type `0`.\n     */\n    get type() {\n        return this._type;\n    }\n    /**\n     * Checks if a tx type defining capability is active\n     * on a tx, for example the EIP-1559 fee market mechanism\n     * or the EIP-2930 access list feature.\n     *\n     * Note that this is different from the tx type itself,\n     * so EIP-2930 access lists can very well be active\n     * on an EIP-1559 tx for example.\n     *\n     * This method can be useful for feature checks if the\n     * tx type is unknown (e.g. when instantiated with\n     * the tx factory).\n     *\n     * See `Capabilites` in the `types` module for a reference\n     * on all supported capabilities.\n     */\n    supports(capability) {\n        return this.activeCapabilities.includes(capability);\n    }\n    validate(stringError = false) {\n        const errors = [];\n        if (this.getBaseFee() > this.gasLimit) {\n            errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);\n        }\n        if (this.isSigned() && !this.verifySignature()) {\n            errors.push('Invalid Signature');\n        }\n        return stringError ? errors : errors.length === 0;\n    }\n    _validateYParity() {\n        const { v } = this;\n        if (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {\n            const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n            throw new Error(msg);\n        }\n    }\n    /**\n     * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n     * Reasoning: https://ethereum.stackexchange.com/a/55728\n     */\n    _validateHighS() {\n        const { s } = this;\n        if (this.common.gteHardfork('homestead') && s !== undefined && s > util_1.SECP256K1_ORDER_DIV_2) {\n            const msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n    }\n    /**\n     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */\n    getBaseFee() {\n        const txFee = this.common.param('gasPrices', 'tx');\n        let fee = this.getDataFee();\n        if (txFee)\n            fee += txFee;\n        if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n            const txCreationFee = this.common.param('gasPrices', 'txCreation');\n            if (txCreationFee)\n                fee += txCreationFee;\n        }\n        return fee;\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        const txDataZero = this.common.param('gasPrices', 'txDataZero');\n        const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n        let cost = BigInt(0);\n        for (let i = 0; i < this.data.length; i++) {\n            this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n        }\n        if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n            const dataLength = BigInt(Math.ceil(this.data.length / 32));\n            const initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;\n            cost += initCodeCost;\n        }\n        return cost;\n    }\n    /**\n     * If the tx's `to` is to the creation address\n     */\n    toCreationAddress() {\n        return this.to === undefined || this.to.buf.length === 0;\n    }\n    isSigned() {\n        const { v, r, s } = this;\n        if (v === undefined || r === undefined || s === undefined) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * Determines if the signature is valid\n     */\n    verifySignature() {\n        try {\n            // Main signature verification is done in `getSenderPublicKey()`\n            const publicKey = this.getSenderPublicKey();\n            return (0, util_1.unpadBuffer)(publicKey).length !== 0;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    /**\n     * Returns the sender's address\n     */\n    getSenderAddress() {\n        return new util_1.Address((0, util_1.publicToAddress)(this.getSenderPublicKey()));\n    }\n    /**\n     * Signs a transaction.\n     *\n     * Note that the signed tx is returned as a new object,\n     * use as follows:\n     * ```javascript\n     * const signedTx = tx.sign(privateKey)\n     * ```\n     */\n    sign(privateKey) {\n        if (privateKey.length !== 32) {\n            const msg = this._errorMsg('Private key must be 32 bytes in length.');\n            throw new Error(msg);\n        }\n        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n        // and want to recreate a signature (where EIP155 should be applied)\n        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n        // 2021-06-23\n        let hackApplied = false;\n        if (this.type === 0 &&\n            this.common.gteHardfork('spuriousDragon') &&\n            !this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            hackApplied = true;\n        }\n        const msgHash = this.getMessageToSign(true);\n        const { v, r, s } = (0, util_1.ecsign)(msgHash, privateKey);\n        const tx = this._processSignature(v, r, s);\n        // Hack part 2\n        if (hackApplied) {\n            const index = this.activeCapabilities.indexOf(types_1.Capability.EIP155ReplayProtection);\n            if (index > -1) {\n                this.activeCapabilities.splice(index, 1);\n            }\n        }\n        return tx;\n    }\n    /**\n     * Does chain ID checks on common and returns a common\n     * to be used on instantiation\n     * @hidden\n     *\n     * @param common - {@link Common} instance from tx options\n     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n     */\n    _getCommon(common, chainId) {\n        // Chain ID provided\n        if (chainId !== undefined) {\n            const chainIdBigInt = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(chainId));\n            if (common) {\n                if (common.chainId() !== chainIdBigInt) {\n                    const msg = this._errorMsg('The chain ID does not match the chain ID of Common');\n                    throw new Error(msg);\n                }\n                // Common provided, chain ID does match\n                // -> Return provided Common\n                return common.copy();\n            }\n            else {\n                if (common_1.Common.isSupportedChainId(chainIdBigInt)) {\n                    // No Common, chain ID supported by Common\n                    // -> Instantiate Common with chain ID\n                    return new common_1.Common({ chain: chainIdBigInt, hardfork: this.DEFAULT_HARDFORK });\n                }\n                else {\n                    // No Common, chain ID not supported by Common\n                    // -> Instantiate custom Common derived from DEFAULT_CHAIN\n                    return common_1.Common.custom({\n                        name: 'custom-chain',\n                        networkId: chainIdBigInt,\n                        chainId: chainIdBigInt,\n                    }, { baseChain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK });\n                }\n            }\n        }\n        else {\n            // No chain ID provided\n            // -> return Common provided or create new default Common\n            return (common?.copy() ?? new common_1.Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK }));\n        }\n    }\n    /**\n     * Validates that an object with BigInt values cannot exceed the specified bit limit.\n     * @param values Object containing string keys and BigInt values\n     * @param bits Number of bits to check (64 or 256)\n     * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n     */\n    _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {\n        for (const [key, value] of Object.entries(values)) {\n            switch (bits) {\n                case 64:\n                    if (cannotEqual) {\n                        if (value !== undefined && value >= util_1.MAX_UINT64) {\n                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    else {\n                        if (value !== undefined && value > util_1.MAX_UINT64) {\n                            const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    break;\n                case 256:\n                    if (cannotEqual) {\n                        if (value !== undefined && value >= util_1.MAX_INTEGER) {\n                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    else {\n                        if (value !== undefined && value > util_1.MAX_INTEGER) {\n                            const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    break;\n                default: {\n                    const msg = this._errorMsg('unimplemented bits value');\n                    throw new Error(msg);\n                }\n            }\n        }\n    }\n    static _validateNotArray(values) {\n        const txDataKeys = [\n            'nonce',\n            'gasPrice',\n            'gasLimit',\n            'to',\n            'value',\n            'data',\n            'v',\n            'r',\n            's',\n            'type',\n            'baseFee',\n            'maxFeePerGas',\n            'chainId',\n        ];\n        for (const [key, value] of Object.entries(values)) {\n            if (txDataKeys.includes(key)) {\n                if (Array.isArray(value)) {\n                    throw new Error(`${key} cannot be an array`);\n                }\n            }\n        }\n    }\n    /**\n     * Returns the shared error postfix part for _error() method\n     * tx type implementations.\n     */\n    _getSharedErrorPostfix() {\n        let hash = '';\n        try {\n            hash = this.isSigned() ? (0, util_1.bufferToHex)(this.hash()) : 'not available (unsigned)';\n        }\n        catch (e) {\n            hash = 'error';\n        }\n        let isSigned = '';\n        try {\n            isSigned = this.isSigned().toString();\n        }\n        catch (e) {\n            hash = 'error';\n        }\n        let hf = '';\n        try {\n            hf = this.common.hardfork();\n        }\n        catch (e) {\n            hf = 'error';\n        }\n        let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n        postfix += `signed=${isSigned} hf=${hf}`;\n        return postfix;\n    }\n}\nexports.BaseTransaction = BaseTransaction;\n//# sourceMappingURL=baseTransaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FeeMarketEIP1559Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst baseTransaction_1 = require(\"./baseTransaction\");\nconst util_2 = require(\"./util\");\nconst TRANSACTION_TYPE = 2;\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nclass FeeMarketEIP1559Transaction extends baseTransaction_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: TRANSACTION_TYPE }, opts);\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        this.DEFAULT_HARDFORK = 'london';\n        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        if (this.common.isActivatedEIP(1559) === false) {\n            throw new Error('EIP-1559 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);\n        // Populate the access list fields\n        const accessListData = util_2.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_2.AccessLists.verifyAccessList(this.accessList);\n        this.maxFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n        this.maxPriorityFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n        this._validateCannotExceedMaxInteger({\n            maxFeePerGas: this.maxFeePerGas,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        });\n        baseTransaction_1.BaseTransaction._validateNotArray(txData);\n        if (this.gasLimit * this.maxFeePerGas > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n            throw new Error(msg);\n        }\n        this._validateYParity();\n        this._validateHighS();\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new FeeMarketEIP1559Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n            throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n                .slice(0, 1)\n                .toString('hex')}`);\n        }\n        const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(serialized.slice(1)));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        if (values.length !== 9 && values.length !== 12) {\n            throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n        }\n        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s,] = values;\n        this._validateNotArray({ chainId, v });\n        (0, util_1.validateNoLeadingZeroes)({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s });\n        return new FeeMarketEIP1559Transaction({\n            chainId: (0, util_1.bufferToBigInt)(chainId),\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? [],\n            v: v !== undefined ? (0, util_1.bufferToBigInt)(v) : undefined,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        let cost = super.getDataFee();\n        cost += BigInt(util_2.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: cost,\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return cost;\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n    getUpfrontCost(baseFee = BigInt(0)) {\n        const prio = this.maxPriorityFeePerGas;\n        const maxBase = this.maxFeePerGas - baseFee;\n        const inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n        const gasPrice = inclusionFeePerGas + baseFee;\n        return this.gasLimit * gasPrice + this.value;\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     *\n     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBuffer)(this.chainId),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.maxPriorityFeePerGas),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.maxFeePerGas),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-1559 transaction.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    serialize() {\n        const base = this.raw();\n        return Buffer.concat([\n            TRANSACTION_TYPE_BUFFER,\n            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),\n        ]);\n    }\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */\n    getMessageToSign(hashMessage = true) {\n        const base = this.raw().slice(0, 9);\n        const message = Buffer.concat([\n            TRANSACTION_TYPE_BUFFER,\n            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),\n        ]);\n        if (hashMessage) {\n            return Buffer.from((0, keccak_1.keccak256)(message));\n        }\n        else {\n            return message;\n        }\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n            }\n            return this.cache.hash;\n        }\n        return Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        return this.getMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n            throw new Error(msg);\n        }\n        const msgHash = this.getMessageToVerifySignature();\n        const { v, r, s } = this;\n        this._validateHighS();\n        try {\n            return (0, util_1.ecrecover)(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign\n            (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s));\n        }\n        catch (e) {\n            const msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    }\n    _processSignature(v, r, s) {\n        const opts = { ...this.txOptions, common: this.common };\n        return FeeMarketEIP1559Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - BigInt(27),\n            r: (0, util_1.bufferToBigInt)(r),\n            s: (0, util_1.bufferToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    toJSON() {\n        const accessListJSON = util_2.AccessLists.getAccessListJSON(this.accessList);\n        return {\n            chainId: (0, util_1.bigIntToHex)(this.chainId),\n            nonce: (0, util_1.bigIntToHex)(this.nonce),\n            maxPriorityFeePerGas: (0, util_1.bigIntToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0, util_1.bigIntToHex)(this.maxFeePerGas),\n            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, util_1.bigIntToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return `${msg} (${this.errorStr()})`;\n    }\n}\nexports.FeeMarketEIP1559Transaction = FeeMarketEIP1559Transaction;\n//# sourceMappingURL=eip1559Transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessListEIP2930Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst baseTransaction_1 = require(\"./baseTransaction\");\nconst util_2 = require(\"./util\");\nconst TRANSACTION_TYPE = 1;\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nclass AccessListEIP2930Transaction extends baseTransaction_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: TRANSACTION_TYPE }, opts);\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        this.DEFAULT_HARDFORK = 'berlin';\n        const { chainId, accessList, gasPrice } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        // EIP-2718 check is done in Common\n        if (!this.common.isActivatedEIP(2930)) {\n            throw new Error('EIP-2930 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);\n        // Populate the access list fields\n        const accessListData = util_2.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_2.AccessLists.verifyAccessList(this.accessList);\n        this.gasPrice = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(gasPrice === '' ? '0x' : gasPrice));\n        this._validateCannotExceedMaxInteger({\n            gasPrice: this.gasPrice,\n        });\n        baseTransaction_1.BaseTransaction._validateNotArray(txData);\n        if (this.gasPrice * this.gasLimit > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n            throw new Error(msg);\n        }\n        this._validateYParity();\n        this._validateHighS();\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new AccessListEIP2930Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n            throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n                .slice(0, 1)\n                .toString('hex')}`);\n        }\n        const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized.slice(1))));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        if (values.length !== 8 && values.length !== 11) {\n            throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n        }\n        const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n        this._validateNotArray({ chainId, v });\n        (0, util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });\n        const emptyAccessList = [];\n        return new AccessListEIP2930Transaction({\n            chainId: (0, util_1.bufferToBigInt)(chainId),\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? emptyAccessList,\n            v: v !== undefined ? (0, util_1.bufferToBigInt)(v) : undefined,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        let cost = super.getDataFee();\n        cost += BigInt(util_2.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: cost,\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return cost;\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     *\n     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBuffer)(this.chainId),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-2930 transaction.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    serialize() {\n        const base = this.raw();\n        return Buffer.concat([\n            TRANSACTION_TYPE_BUFFER,\n            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),\n        ]);\n    }\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */\n    getMessageToSign(hashMessage = true) {\n        const base = this.raw().slice(0, 8);\n        const message = Buffer.concat([\n            TRANSACTION_TYPE_BUFFER,\n            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),\n        ]);\n        if (hashMessage) {\n            return Buffer.from((0, keccak_1.keccak256)(message));\n        }\n        else {\n            return message;\n        }\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n            }\n            return this.cache.hash;\n        }\n        return Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        return this.getMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n            throw new Error(msg);\n        }\n        const msgHash = this.getMessageToVerifySignature();\n        const { v, r, s } = this;\n        this._validateHighS();\n        try {\n            return (0, util_1.ecrecover)(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign\n            (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s));\n        }\n        catch (e) {\n            const msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    }\n    _processSignature(v, r, s) {\n        const opts = { ...this.txOptions, common: this.common };\n        return AccessListEIP2930Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - BigInt(27),\n            r: (0, util_1.bufferToBigInt)(r),\n            s: (0, util_1.bufferToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    toJSON() {\n        const accessListJSON = util_2.AccessLists.getAccessListJSON(this.accessList);\n        return {\n            chainId: (0, util_1.bigIntToHex)(this.chainId),\n            nonce: (0, util_1.bigIntToHex)(this.nonce),\n            gasPrice: (0, util_1.bigIntToHex)(this.gasPrice),\n            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, util_1.bigIntToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n        errorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return `${msg} (${this.errorStr()})`;\n    }\n}\nexports.AccessListEIP2930Transaction = AccessListEIP2930Transaction;\n//# sourceMappingURL=eip2930Transaction.js.map","import { cloneDeep } from 'lodash';\nimport { hasProperty, isObject } from '@metamask/utils';\nimport { v4 } from 'uuid';\nimport log from 'loglevel';\n\nexport const version = 82;\n\n/**\n * Migrate the frequentRpcListDetail from the PreferencesController to the NetworkController, convert it from an array to an object\n * keyed by random uuids.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (!hasProperty(state, 'PreferencesController')) {\n    log.warn(`state.PreferencesController is undefined`);\n    return state;\n  }\n  if (!isObject(state.PreferencesController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.PreferencesController is ${typeof state.PreferencesController}`,\n      ),\n    );\n    return state;\n  }\n  if (\n    !hasProperty(state, 'NetworkController') ||\n    !isObject(state.NetworkController)\n  ) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController is ${typeof state.NetworkController}`,\n      ),\n    );\n    return state;\n  }\n  if (\n    !hasProperty(state.PreferencesController, 'frequentRpcListDetail') ||\n    !Array.isArray(state.PreferencesController.frequentRpcListDetail)\n  ) {\n    const inPost077SupplementFor082State =\n      state.NetworkController.networkConfigurations &&\n      state.PreferencesController.frequentRpcListDetail === undefined;\n    if (!inPost077SupplementFor082State) {\n      global.sentry?.captureException?.(\n        new Error(\n          `typeof state.PreferencesController.frequentRpcListDetail is ${typeof state\n            .PreferencesController.frequentRpcListDetail}`,\n        ),\n      );\n    }\n    return state;\n  }\n  if (!state.PreferencesController.frequentRpcListDetail.every(isObject)) {\n    const erroneousElement =\n      state.PreferencesController.frequentRpcListDetail.find(\n        (element) => !isObject(element),\n      );\n    global.sentry?.captureException?.(\n      new Error(\n        `state.PreferencesController.frequentRpcListDetail contains an element of type ${typeof erroneousElement}`,\n      ),\n    );\n    return state;\n  }\n  const { PreferencesController, NetworkController } = state;\n  const { frequentRpcListDetail } = PreferencesController;\n  if (!Array.isArray(frequentRpcListDetail)) {\n    return state;\n  }\n\n  const networkConfigurations = frequentRpcListDetail.reduce(\n    (\n      networkConfigurationsAcc,\n      { rpcUrl, chainId, ticker, nickname, rpcPrefs },\n    ) => {\n      const networkConfigurationId = v4();\n      return {\n        ...networkConfigurationsAcc,\n        [networkConfigurationId]: {\n          rpcUrl,\n          chainId,\n          ticker,\n          rpcPrefs,\n          nickname,\n        },\n      };\n    },\n    {},\n  );\n\n  delete PreferencesController.frequentRpcListDetail;\n\n  return {\n    ...state,\n    NetworkController: {\n      ...NetworkController,\n      networkConfigurations,\n    },\n    PreferencesController: {\n      ...PreferencesController,\n    },\n  };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeTxParams = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst normalizeTxParams = (_txParams) => {\n    const txParams = Object.assign({}, _txParams);\n    txParams.gasLimit = (0, util_1.toType)(txParams.gasLimit ?? txParams.gas, util_1.TypeOutput.BigInt);\n    txParams.data = txParams.data === undefined ? txParams.input : txParams.data;\n    // check and convert gasPrice and value params\n    txParams.gasPrice = txParams.gasPrice !== undefined ? BigInt(txParams.gasPrice) : undefined;\n    txParams.value = txParams.value !== undefined ? BigInt(txParams.value) : undefined;\n    // strict byte length checking\n    txParams.to =\n        txParams.to !== null && txParams.to !== undefined\n            ? (0, util_1.setLengthLeft)((0, util_1.toBuffer)(txParams.to), 20)\n            : null;\n    // Normalize the v/r/s values. If RPC returns '0x0', ensure v/r/s are set to `undefined` in the tx.\n    // If this is not done, then the transaction creation will throw, because `v` is `0`.\n    // Note: this still means that `isSigned` will return `false`.\n    // v/r/s values are `0x0` on networks like Optimism, where the tx is a system tx.\n    // For instance: https://optimistic.etherscan.io/tx/0xf4304cb09b3f58a8e5d20fec5f393c96ccffe0269aaf632cb2be7a8a0f0c91cc\n    txParams.v = txParams.v === '0x0' ? '0x' : txParams.v;\n    txParams.r = txParams.r === '0x0' ? '0x' : txParams.r;\n    txParams.s = txParams.s === '0x0' ? '0x' : txParams.s;\n    if (txParams.v !== '0x') {\n        txParams.v = (0, util_1.toType)(txParams.v, util_1.TypeOutput.BigInt);\n    }\n    return txParams;\n};\nexports.normalizeTxParams = normalizeTxParams;\n//# sourceMappingURL=fromRpc.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionFactory = exports.Transaction = exports.AccessListEIP2930Transaction = exports.FeeMarketEIP1559Transaction = void 0;\nvar eip1559Transaction_1 = require(\"./eip1559Transaction\");\nObject.defineProperty(exports, \"FeeMarketEIP1559Transaction\", { enumerable: true, get: function () { return eip1559Transaction_1.FeeMarketEIP1559Transaction; } });\nvar eip2930Transaction_1 = require(\"./eip2930Transaction\");\nObject.defineProperty(exports, \"AccessListEIP2930Transaction\", { enumerable: true, get: function () { return eip2930Transaction_1.AccessListEIP2930Transaction; } });\nvar legacyTransaction_1 = require(\"./legacyTransaction\");\nObject.defineProperty(exports, \"Transaction\", { enumerable: true, get: function () { return legacyTransaction_1.Transaction; } });\nvar transactionFactory_1 = require(\"./transactionFactory\");\nObject.defineProperty(exports, \"TransactionFactory\", { enumerable: true, get: function () { return transactionFactory_1.TransactionFactory; } });\n__exportStar(require(\"./types\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst baseTransaction_1 = require(\"./baseTransaction\");\nconst types_1 = require(\"./types\");\nconst TRANSACTION_TYPE = 0;\nfunction meetsEIP155(_v, chainId) {\n    const v = Number(_v);\n    const chainIdDoubled = Number(chainId) * 2;\n    return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nclass Transaction extends baseTransaction_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: TRANSACTION_TYPE }, opts);\n        this.common = this._validateTxV(this.v, opts.common);\n        this.gasPrice = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n        if (this.gasPrice * this.gasLimit > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });\n        baseTransaction_1.BaseTransaction._validateNotArray(txData);\n        if (this.common.gteHardfork('spuriousDragon')) {\n            if (!this.isSigned()) {\n                this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            }\n            else {\n                // EIP155 spec:\n                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n                // then when computing the hash of a transaction for purposes of signing or recovering\n                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n                // v and chain ID meet EIP-155 conditions\n                if (meetsEIP155(this.v, this.common.chainId())) {\n                    this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n                }\n            }\n        }\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n     *\n     * Notes:\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized)));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input. Must be array');\n        }\n        return this.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n        // This happens if you get the RLP data from `raw()`\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n        }\n        const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n        (0, util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });\n        return new Transaction({\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            v,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For legacy txs this is also the correct format to add transactions\n     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n     * for typed txs).\n     *\n     * For an unsigned tx this method returns the empty Buffer values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.value),\n            this.data,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link Transaction.getMessageToSign}.\n     */\n    serialize() {\n        return Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw())));\n    }\n    _getMessageToSign() {\n        const values = [\n            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.value),\n            this.data,\n        ];\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            values.push((0, util_1.bigIntToUnpaddedBuffer)(this.common.chainId()));\n            values.push((0, util_1.unpadBuffer)((0, util_1.toBuffer)(0)));\n            values.push((0, util_1.unpadBuffer)((0, util_1.toBuffer)(0)));\n        }\n        return values;\n    }\n    getMessageToSign(hashMessage = true) {\n        const message = this._getMessageToSign();\n        if (hashMessage) {\n            return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(message))));\n        }\n        else {\n            return message;\n        }\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: super.getDataFee(),\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return super.getDataFee();\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw()))));\n            }\n            return this.cache.hash;\n        }\n        return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw()))));\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('This transaction is not signed');\n            throw new Error(msg);\n        }\n        const message = this._getMessageToSign();\n        return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(message))));\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        const msgHash = this.getMessageToVerifySignature();\n        const { v, r, s } = this;\n        this._validateHighS();\n        try {\n            return (0, util_1.ecrecover)(msgHash, v, (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined);\n        }\n        catch (e) {\n            const msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    }\n    /**\n     * Process the v, r, s values from the `sign` method of the base transaction.\n     */\n    _processSignature(v, r, s) {\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            v += this.common.chainId() * BigInt(2) + BigInt(8);\n        }\n        const opts = { ...this.txOptions, common: this.common };\n        return Transaction.fromTxData({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v,\n            r: (0, util_1.bufferToBigInt)(r),\n            s: (0, util_1.bufferToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */\n    toJSON() {\n        return {\n            nonce: (0, util_1.bigIntToHex)(this.nonce),\n            gasPrice: (0, util_1.bigIntToHex)(this.gasPrice),\n            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, util_1.bigIntToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,\n        };\n    }\n    /**\n     * Validates tx's `v` value\n     */\n    _validateTxV(_v, common) {\n        let chainIdBigInt;\n        const v = _v !== undefined ? Number(_v) : undefined;\n        // Check for valid v values in the scope of a signed legacy tx\n        if (v !== undefined) {\n            // v is 1. not matching the EIP-155 chainId included case and...\n            // v is 2. not matching the classic v=27 or v=28 case\n            if (v < 37 && v !== 27 && v !== 28) {\n                throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n            }\n        }\n        // No unsigned tx and EIP-155 activated and chain ID included\n        if (v !== undefined &&\n            v !== 0 &&\n            (!common || common.gteHardfork('spuriousDragon')) &&\n            v !== 27 &&\n            v !== 28) {\n            if (common) {\n                if (!meetsEIP155(BigInt(v), common.chainId())) {\n                    throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n                }\n            }\n            else {\n                // Derive the original chain ID\n                let numSub;\n                if ((v - 35) % 2 === 0) {\n                    numSub = 35;\n                }\n                else {\n                    numSub = 36;\n                }\n                // Use derived chain ID to create a proper Common\n                chainIdBigInt = BigInt(v - numSub) / BigInt(2);\n            }\n        }\n        return this._getCommon(common, chainIdBigInt);\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` gasPrice=${this.gasPrice}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return `${msg} (${this.errorStr()})`;\n    }\n}\nexports.Transaction = Transaction;\n//# sourceMappingURL=legacyTransaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionFactory = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst eip1559Transaction_1 = require(\"./eip1559Transaction\");\nconst eip2930Transaction_1 = require(\"./eip2930Transaction\");\nconst fromRpc_1 = require(\"./fromRpc\");\nconst legacyTransaction_1 = require(\"./legacyTransaction\");\nclass TransactionFactory {\n    // It is not possible to instantiate a TransactionFactory object.\n    constructor() { }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param txOptions - Options to pass on to the constructor of the transaction\n     */\n    static fromTxData(txData, txOptions = {}) {\n        if (!('type' in txData) || txData.type === undefined) {\n            // Assume legacy transaction\n            return legacyTransaction_1.Transaction.fromTxData(txData, txOptions);\n        }\n        else {\n            const txType = Number((0, util_1.bufferToBigInt)((0, util_1.toBuffer)(txData.type)));\n            if (txType === 0) {\n                return legacyTransaction_1.Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 1) {\n                return eip2930Transaction_1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 2) {\n                return eip1559Transaction_1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n            }\n            else {\n                throw new Error(`Tx instantiation with type ${txType} not supported`);\n            }\n        }\n    }\n    /**\n     * This method tries to decode serialized data.\n     *\n     * @param data - The data Buffer\n     * @param txOptions - The transaction options\n     */\n    static fromSerializedData(data, txOptions = {}) {\n        if (data[0] <= 0x7f) {\n            // Determine the type.\n            switch (data[0]) {\n                case 1:\n                    return eip2930Transaction_1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n                case 2:\n                    return eip1559Transaction_1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n                default:\n                    throw new Error(`TypedTransaction with ID ${data[0]} unknown`);\n            }\n        }\n        else {\n            return legacyTransaction_1.Transaction.fromSerializedTx(data, txOptions);\n        }\n    }\n    /**\n     * When decoding a BlockBody, in the transactions field, a field is either:\n     * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n     * A Buffer[] (Legacy Transaction)\n     * This method returns the right transaction.\n     *\n     * @param data - A Buffer or Buffer[]\n     * @param txOptions - The transaction options\n     */\n    static fromBlockBodyData(data, txOptions = {}) {\n        if (Buffer.isBuffer(data)) {\n            return this.fromSerializedData(data, txOptions);\n        }\n        else if (Array.isArray(data)) {\n            // It is a legacy transaction\n            return legacyTransaction_1.Transaction.fromValuesArray(data, txOptions);\n        }\n        else {\n            throw new Error('Cannot decode transaction: unknown type input');\n        }\n    }\n    /**\n     *  Method to retrieve a transaction from the provider\n     * @param provider - An Ethers JsonRPCProvider\n     * @param txHash - Transaction hash\n     * @param txOptions - The transaction options\n     * @returns the transaction specified by `txHash`\n     */\n    static async fromEthersProvider(provider, txHash, txOptions) {\n        const prov = (0, util_1.getProvider)(provider);\n        const txData = await (0, util_1.fetchFromProvider)(prov, {\n            method: 'eth_getTransactionByHash',\n            params: [txHash],\n        });\n        if (txData === null) {\n            throw new Error('No data returned from provider');\n        }\n        return TransactionFactory.fromRPCTx(txData, txOptions);\n    }\n    /**\n     * Method to decode data retrieved from RPC, such as `eth_getTransactionByHash`\n     * Note that this normalizes some of the parameters\n     * @param txData The RPC-encoded data\n     * @param txOptions The transaction options\n     * @returns\n     */\n    static async fromRPCTx(txData, txOptions = {}) {\n        return TransactionFactory.fromTxData((0, fromRpc_1.normalizeTxParams)(txData), txOptions);\n    }\n}\nexports.TransactionFactory = TransactionFactory;\n//# sourceMappingURL=transactionFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isAccessList = exports.isAccessListBuffer = exports.Capability = void 0;\n/**\n * Can be used in conjunction with {@link Transaction.supports}\n * to query on tx capabilities\n */\nvar Capability;\n(function (Capability) {\n    /**\n     * Tx supports EIP-155 replay protection\n     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n     */\n    Capability[Capability[\"EIP155ReplayProtection\"] = 155] = \"EIP155ReplayProtection\";\n    /**\n     * Tx supports EIP-1559 gas fee market mechanism\n     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n     */\n    Capability[Capability[\"EIP1559FeeMarket\"] = 1559] = \"EIP1559FeeMarket\";\n    /**\n     * Tx is a typed transaction as defined in EIP-2718\n     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n     */\n    Capability[Capability[\"EIP2718TypedTransaction\"] = 2718] = \"EIP2718TypedTransaction\";\n    /**\n     * Tx supports access list generation as defined in EIP-2930\n     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n     */\n    Capability[Capability[\"EIP2930AccessLists\"] = 2930] = \"EIP2930AccessLists\";\n})(Capability = exports.Capability || (exports.Capability = {}));\nfunction isAccessListBuffer(input) {\n    if (input.length === 0) {\n        return true;\n    }\n    const firstItem = input[0];\n    if (Array.isArray(firstItem)) {\n        return true;\n    }\n    return false;\n}\nexports.isAccessListBuffer = isAccessListBuffer;\nfunction isAccessList(input) {\n    return !isAccessListBuffer(input); // This is exactly the same method, except the output is negated.\n}\nexports.isAccessList = isAccessList;\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessLists = exports.checkMaxInitCodeSize = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst types_1 = require(\"./types\");\nfunction checkMaxInitCodeSize(common, length) {\n    const maxInitCodeSize = common.param('vm', 'maxInitCodeSize');\n    if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n        throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param('vm', 'maxInitCodeSize')}`);\n    }\n}\nexports.checkMaxInitCodeSize = checkMaxInitCodeSize;\nclass AccessLists {\n    static getAccessListData(accessList) {\n        let AccessListJSON;\n        let bufferAccessList;\n        if ((0, types_1.isAccessList)(accessList)) {\n            AccessListJSON = accessList;\n            const newAccessList = [];\n            for (let i = 0; i < accessList.length; i++) {\n                const item = accessList[i];\n                const addressBuffer = (0, util_1.toBuffer)(item.address);\n                const storageItems = [];\n                for (let index = 0; index < item.storageKeys.length; index++) {\n                    storageItems.push((0, util_1.toBuffer)(item.storageKeys[index]));\n                }\n                newAccessList.push([addressBuffer, storageItems]);\n            }\n            bufferAccessList = newAccessList;\n        }\n        else {\n            bufferAccessList = accessList ?? [];\n            // build the JSON\n            const json = [];\n            for (let i = 0; i < bufferAccessList.length; i++) {\n                const data = bufferAccessList[i];\n                const address = (0, util_1.bufferToHex)(data[0]);\n                const storageKeys = [];\n                for (let item = 0; item < data[1].length; item++) {\n                    storageKeys.push((0, util_1.bufferToHex)(data[1][item]));\n                }\n                const jsonItem = {\n                    address,\n                    storageKeys,\n                };\n                json.push(jsonItem);\n            }\n            AccessListJSON = json;\n        }\n        return {\n            AccessListJSON,\n            accessList: bufferAccessList,\n        };\n    }\n    static verifyAccessList(accessList) {\n        for (let key = 0; key < accessList.length; key++) {\n            const accessListItem = accessList[key];\n            const address = accessListItem[0];\n            const storageSlots = accessListItem[1];\n            if (accessListItem[2] !== undefined) {\n                throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n            }\n            if (address.length !== 20) {\n                throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n            }\n            for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n                if (storageSlots[storageSlot].length !== 32) {\n                    throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n                }\n            }\n        }\n    }\n    static getAccessListJSON(accessList) {\n        const accessListJSON = [];\n        for (let index = 0; index < accessList.length; index++) {\n            const item = accessList[index];\n            const JSONItem = {\n                address: '0x' + (0, util_1.setLengthLeft)(item[0], 20).toString('hex'),\n                storageKeys: [],\n            };\n            const storageSlots = item[1];\n            for (let slot = 0; slot < storageSlots.length; slot++) {\n                const storageSlot = storageSlots[slot];\n                JSONItem.storageKeys.push('0x' + (0, util_1.setLengthLeft)(storageSlot, 32).toString('hex'));\n            }\n            accessListJSON.push(JSONItem);\n        }\n        return accessListJSON;\n    }\n    static getDataFeeEIP2930(accessList, common) {\n        const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n        const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n        let slots = 0;\n        for (let index = 0; index < accessList.length; index++) {\n            const item = accessList[index];\n            const storageSlots = item[1];\n            slots += storageSlots.length;\n        }\n        const addresses = accessList.length;\n        return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);\n    }\n}\nexports.AccessLists = AccessLists;\n//# sourceMappingURL=util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.accountBodyToRLP = exports.accountBodyToSlim = exports.accountBodyFromSlim = exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nconst utils_1 = require(\"ethereum-cryptography/utils\");\nconst bytes_1 = require(\"./bytes\");\nconst constants_1 = require(\"./constants\");\nconst helpers_1 = require(\"./helpers\");\nconst internal_1 = require(\"./internal\");\nconst _0n = BigInt(0);\nclass Account {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */\n    constructor(nonce = _0n, balance = _0n, storageRoot = constants_1.KECCAK256_RLP, codeHash = constants_1.KECCAK256_NULL) {\n        this.nonce = nonce;\n        this.balance = balance;\n        this.storageRoot = storageRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    static fromAccountData(accountData) {\n        const { nonce, balance, storageRoot, codeHash } = accountData;\n        return new Account(nonce !== undefined ? (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(nonce)) : undefined, balance !== undefined ? (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(balance)) : undefined, storageRoot !== undefined ? (0, bytes_1.toBuffer)(storageRoot) : undefined, codeHash !== undefined ? (0, bytes_1.toBuffer)(codeHash) : undefined);\n    }\n    static fromRlpSerializedAccount(serialized) {\n        const values = (0, bytes_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized)));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        return this.fromValuesArray(values);\n    }\n    static fromValuesArray(values) {\n        const [nonce, balance, storageRoot, codeHash] = values;\n        return new Account((0, bytes_1.bufferToBigInt)(nonce), (0, bytes_1.bufferToBigInt)(balance), storageRoot, codeHash);\n    }\n    _validate() {\n        if (this.nonce < _0n) {\n            throw new Error('nonce must be greater than zero');\n        }\n        if (this.balance < _0n) {\n            throw new Error('balance must be greater than zero');\n        }\n        if (this.storageRoot.length !== 32) {\n            throw new Error('storageRoot must have a length of 32');\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error('codeHash must have a length of 32');\n        }\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers for the account, in order.\n     */\n    raw() {\n        return [\n            (0, bytes_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, bytes_1.bigIntToUnpaddedBuffer)(this.balance),\n            this.storageRoot,\n            this.codeHash,\n        ];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Buffer`.\n     */\n    serialize() {\n        return Buffer.from(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)(this.raw())));\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n    isContract() {\n        return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */\n    isEmpty() {\n        return this.balance === _0n && this.nonce === _0n && this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n}\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nconst isValidAddress = function (hexAddress) {\n    try {\n        (0, helpers_1.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\nexports.isValidAddress = isValidAddress;\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nconst toChecksumAddress = function (hexAddress, eip1191ChainId) {\n    (0, helpers_1.assertIsHexString)(hexAddress);\n    const address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();\n    let prefix = '';\n    if (eip1191ChainId !== undefined) {\n        const chainId = (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(eip1191ChainId));\n        prefix = chainId.toString() + '0x';\n    }\n    const buf = Buffer.from(prefix + address, 'utf8');\n    const hash = (0, utils_1.bytesToHex)((0, keccak_1.keccak256)(buf));\n    let ret = '0x';\n    for (let i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\nexports.toChecksumAddress = toChecksumAddress;\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nconst isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n    return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;\n};\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nconst generateAddress = function (from, nonce) {\n    (0, helpers_1.assertIsBuffer)(from);\n    (0, helpers_1.assertIsBuffer)(nonce);\n    if ((0, bytes_1.bufferToBigInt)(nonce) === BigInt(0)) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)([from, null])))).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)([from, nonce])))).slice(-20);\n};\nexports.generateAddress = generateAddress;\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nconst generateAddress2 = function (from, salt, initCode) {\n    (0, helpers_1.assertIsBuffer)(from);\n    (0, helpers_1.assertIsBuffer)(salt);\n    (0, helpers_1.assertIsBuffer)(initCode);\n    if (from.length !== 20) {\n        throw new Error('Expected from to be of length 20');\n    }\n    if (salt.length !== 32) {\n        throw new Error('Expected salt to be of length 32');\n    }\n    const address = (0, keccak_1.keccak256)(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, (0, keccak_1.keccak256)(initCode)]));\n    return (0, bytes_1.toBuffer)(address).slice(-20);\n};\nexports.generateAddress2 = generateAddress2;\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nconst isValidPrivate = function (privateKey) {\n    return secp256k1_1.secp256k1.utils.isValidPrivateKey(privateKey);\n};\nexports.isValidPrivate = isValidPrivate;\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst isValidPublic = function (publicKey, sanitize = false) {\n    (0, helpers_1.assertIsBuffer)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        // Automatically checks whether point is on curve\n        try {\n            secp256k1_1.secp256k1.ProjectivePoint.fromHex(Buffer.concat([Buffer.from([4]), publicKey]));\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    if (!sanitize) {\n        return false;\n    }\n    try {\n        secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKey);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\nexports.isValidPublic = isValidPublic;\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst pubToAddress = function (pubKey, sanitize = false) {\n    (0, helpers_1.assertIsBuffer)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1));\n    }\n    if (pubKey.length !== 64) {\n        throw new Error('Expected pubKey to be of length 64');\n    }\n    // Only take the lower 160bits of the hash\n    return Buffer.from((0, keccak_1.keccak256)(pubKey)).slice(-20);\n};\nexports.pubToAddress = pubToAddress;\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToPublic = function (privateKey) {\n    (0, helpers_1.assertIsBuffer)(privateKey);\n    // skip the type flag and use the X, Y points\n    return Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1));\n};\nexports.privateToPublic = privateToPublic;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToAddress = function (privateKey) {\n    return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));\n};\nexports.privateToAddress = privateToAddress;\n/**\n * Converts a public key to the Ethereum format.\n */\nconst importPublic = function (publicKey) {\n    (0, helpers_1.assertIsBuffer)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1));\n    }\n    return publicKey;\n};\nexports.importPublic = importPublic;\n/**\n * Returns the zero address.\n */\nconst zeroAddress = function () {\n    const addressLength = 20;\n    const addr = (0, bytes_1.zeros)(addressLength);\n    return (0, bytes_1.bufferToHex)(addr);\n};\nexports.zeroAddress = zeroAddress;\n/**\n * Checks if a given address is the zero address.\n */\nconst isZeroAddress = function (hexAddress) {\n    try {\n        (0, helpers_1.assertIsString)(hexAddress);\n    }\n    catch (e) {\n        return false;\n    }\n    const zeroAddr = (0, exports.zeroAddress)();\n    return zeroAddr === hexAddress;\n};\nexports.isZeroAddress = isZeroAddress;\nfunction accountBodyFromSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0, bytes_1.arrToBufArr)(storageRoot).length === 0 ? constants_1.KECCAK256_RLP : storageRoot,\n        (0, bytes_1.arrToBufArr)(codeHash).length === 0 ? constants_1.KECCAK256_NULL : codeHash,\n    ];\n}\nexports.accountBodyFromSlim = accountBodyFromSlim;\nconst emptyUint8Arr = new Uint8Array(0);\nfunction accountBodyToSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0, bytes_1.arrToBufArr)(storageRoot).equals(constants_1.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,\n        (0, bytes_1.arrToBufArr)(codeHash).equals(constants_1.KECCAK256_NULL) ? emptyUint8Arr : codeHash,\n    ];\n}\nexports.accountBodyToSlim = accountBodyToSlim;\n/**\n * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account\n * @param body Array of 4 Buffer-like items to represent the account\n * @returns RLP encoded version of the account\n */\nfunction accountBodyToRLP(body, couldBeSlim = true) {\n    const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;\n    return (0, bytes_1.arrToBufArr)(rlp_1.RLP.encode(accountBody));\n}\nexports.accountBodyToRLP = accountBodyToRLP;\n//# sourceMappingURL=account.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Address = void 0;\nconst account_1 = require(\"./account\");\nconst bytes_1 = require(\"./bytes\");\n/**\n * Handling and generating Ethereum addresses\n */\nclass Address {\n    constructor(buf) {\n        if (buf.length !== 20) {\n            throw new Error('Invalid address length');\n        }\n        this.buf = buf;\n    }\n    /**\n     * Returns the zero address.\n     */\n    static zero() {\n        return new Address((0, bytes_1.zeros)(20));\n    }\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */\n    static fromString(str) {\n        if (!(0, account_1.isValidAddress)(str)) {\n            throw new Error('Invalid address');\n        }\n        return new Address((0, bytes_1.toBuffer)(str));\n    }\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */\n    static fromPublicKey(pubKey) {\n        if (!Buffer.isBuffer(pubKey)) {\n            throw new Error('Public key should be Buffer');\n        }\n        const buf = (0, account_1.pubToAddress)(pubKey);\n        return new Address(buf);\n    }\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */\n    static fromPrivateKey(privateKey) {\n        if (!Buffer.isBuffer(privateKey)) {\n            throw new Error('Private key should be Buffer');\n        }\n        const buf = (0, account_1.privateToAddress)(privateKey);\n        return new Address(buf);\n    }\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */\n    static generate(from, nonce) {\n        if (typeof nonce !== 'bigint') {\n            throw new Error('Expected nonce to be a bigint');\n        }\n        return new Address((0, account_1.generateAddress)(from.buf, (0, bytes_1.bigIntToBuffer)(nonce)));\n    }\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */\n    static generate2(from, salt, initCode) {\n        if (!Buffer.isBuffer(salt)) {\n            throw new Error('Expected salt to be a Buffer');\n        }\n        if (!Buffer.isBuffer(initCode)) {\n            throw new Error('Expected initCode to be a Buffer');\n        }\n        return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));\n    }\n    /**\n     * Is address equal to another.\n     */\n    equals(address) {\n        return this.buf.equals(address.buf);\n    }\n    /**\n     * Is address zero.\n     */\n    isZero() {\n        return this.equals(Address.zero());\n    }\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */\n    isPrecompileOrSystemAddress() {\n        const address = (0, bytes_1.bufferToBigInt)(this.buf);\n        const rangeMin = BigInt(0);\n        const rangeMax = BigInt('0xffff');\n        return address >= rangeMin && address <= rangeMax;\n    }\n    /**\n     * Returns hex encoding of address.\n     */\n    toString() {\n        return '0x' + this.buf.toString('hex');\n    }\n    /**\n     * Returns Buffer representation of address.\n     */\n    toBuffer() {\n        return Buffer.from(this.buf);\n    }\n}\nexports.Address = Address;\n//# sourceMappingURL=address.js.map","\"use strict\";\n/**\n * Ported to Typescript from original implementation below:\n * https://github.com/ahultgren/async-eventemitter -- MIT licensed\n *\n * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed\n * that was contributed to Definitely Typed below:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AsyncEventEmitter = void 0;\nconst events_1 = require(\"events\");\nasync function runInSeries(context, tasks, data) {\n    let error;\n    for await (const task of tasks) {\n        try {\n            if (task.length < 2) {\n                //sync\n                task.call(context, data);\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    task.call(context, data, (error) => {\n                        if (error) {\n                            reject(error);\n                        }\n                        else {\n                            resolve();\n                        }\n                    });\n                });\n            }\n        }\n        catch (e) {\n            error = e;\n        }\n    }\n    if (error) {\n        throw error;\n    }\n}\nclass AsyncEventEmitter extends events_1.EventEmitter {\n    emit(event, ...args) {\n        let [data, callback] = args;\n        const self = this;\n        let listeners = self._events[event] ?? [];\n        // Optional data argument\n        if (callback === undefined && typeof data === 'function') {\n            callback = data;\n            data = undefined;\n        }\n        // Special treatment of internal newListener and removeListener events\n        if (event === 'newListener' || event === 'removeListener') {\n            data = {\n                event: data,\n                fn: callback,\n            };\n            callback = undefined;\n        }\n        // A single listener is just a function not an array...\n        listeners = Array.isArray(listeners) ? listeners : [listeners];\n        runInSeries(self, listeners.slice(), data).then(callback).catch(callback);\n        return self.listenerCount(event) > 0;\n    }\n    once(event, listener) {\n        const self = this;\n        let g;\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        // Hack to support set arity\n        if (listener.length >= 2) {\n            g = function (e, next) {\n                self.removeListener(event, g);\n                void listener(e, next);\n            };\n        }\n        else {\n            g = function (e) {\n                self.removeListener(event, g);\n                void listener(e, g);\n            };\n        }\n        self.on(event, g);\n        return self;\n    }\n    first(event, listener) {\n        let listeners = this._events[event] ?? [];\n        // Contract\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [listeners];\n        }\n        listeners.unshift(listener);\n        return this;\n    }\n    before(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener);\n    }\n    after(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener, 'after');\n    }\n    beforeOrAfter(event, target, listener, beforeOrAfter) {\n        let listeners = this._events[event] ?? [];\n        let i;\n        let index;\n        const add = beforeOrAfter === 'after' ? 1 : 0;\n        // Contract\n        if (typeof listener !== 'function') {\n            throw new TypeError('listener must be a function');\n        }\n        if (typeof target !== 'function') {\n            throw new TypeError('target must be a function');\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [listeners];\n        }\n        index = listeners.length;\n        for (i = listeners.length; i--;) {\n            if (listeners[i] === target) {\n                index = i + add;\n                break;\n            }\n        }\n        listeners.splice(index, 0, listener);\n        return this;\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    addListener(event, listener) {\n        return super.addListener(event, listener);\n    }\n    prependListener(event, listener) {\n        return super.prependListener(event, listener);\n    }\n    prependOnceListener(event, listener) {\n        return super.prependOnceListener(event, listener);\n    }\n    removeAllListeners(event) {\n        return super.removeAllListeners(event);\n    }\n    removeListener(event, listener) {\n        return super.removeListener(event, listener);\n    }\n    eventNames() {\n        return super.eventNames();\n    }\n    listeners(event) {\n        return super.listeners(event);\n    }\n    listenerCount(event) {\n        return super.listenerCount(event);\n    }\n    getMaxListeners() {\n        return super.getMaxListeners();\n    }\n    setMaxListeners(maxListeners) {\n        return super.setMaxListeners(maxListeners);\n    }\n}\nexports.AsyncEventEmitter = AsyncEventEmitter;\n//# sourceMappingURL=asyncEventEmitter.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.intToUnpaddedBuffer = exports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst internal_1 = require(\"./internal\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function (i) {\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nconst intToBuffer = function (i) {\n    const hex = (0, exports.intToHex)(i);\n    return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nconst zeros = function (bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg, length, right) {\n    const buf = (0, exports.zeros)(length);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthLeft = function (msg, length) {\n    (0, helpers_1.assertIsBuffer)(msg);\n    return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthRight = function (msg, length) {\n    (0, helpers_1.assertIsBuffer)(msg);\n    return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a) {\n    let first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nconst unpadBuffer = function (a) {\n    (0, helpers_1.assertIsBuffer)(a);\n    return stripZeros(a);\n};\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nconst unpadArray = function (a) {\n    (0, helpers_1.assertIsArray)(a);\n    return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nconst unpadHexString = function (a) {\n    (0, helpers_1.assertIsHexString)(a);\n    a = (0, internal_1.stripHexPrefix)(a);\n    return ('0x' + stripZeros(a));\n};\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nconst toBuffer = function (v) {\n    if (v === null || v === undefined) {\n        return Buffer.allocUnsafe(0);\n    }\n    if (Buffer.isBuffer(v)) {\n        return Buffer.from(v);\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Buffer.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!(0, internal_1.isHexString)(v)) {\n            throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n    }\n    if (typeof v === 'number') {\n        return (0, exports.intToBuffer)(v);\n    }\n    if (typeof v === 'bigint') {\n        if (v < BigInt(0)) {\n            throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2)\n            n = '0' + n;\n        return Buffer.from(n, 'hex');\n    }\n    if (v.toArray) {\n        // converts a BN to a Buffer\n        return Buffer.from(v.toArray());\n    }\n    if (v.toBuffer) {\n        return Buffer.from(v.toBuffer());\n    }\n    throw new Error('invalid type');\n};\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nconst bufferToHex = function (buf) {\n    buf = (0, exports.toBuffer)(buf);\n    return '0x' + buf.toString('hex');\n};\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\nfunction bufferToBigInt(buf) {\n    const hex = (0, exports.bufferToHex)(buf);\n    if (hex === '0x') {\n        return BigInt(0);\n    }\n    return BigInt(hex);\n}\nexports.bufferToBigInt = bufferToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\nfunction bigIntToBuffer(num) {\n    return (0, exports.toBuffer)('0x' + num.toString(16));\n}\nexports.bigIntToBuffer = bigIntToBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nconst bufferToInt = function (buf) {\n    const res = Number(bufferToBigInt(buf));\n    if (!Number.isSafeInteger(res))\n        throw new Error('Number exceeds 53 bits');\n    return res;\n};\nexports.bufferToInt = bufferToInt;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nconst fromSigned = function (num) {\n    return BigInt.asIntN(256, bufferToBigInt(num));\n};\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nconst toUnsigned = function (num) {\n    return bigIntToBuffer(BigInt.asUintN(256, num));\n};\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nconst addHexPrefix = function (str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\nfunction short(buffer, maxLength = 50) {\n    const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer;\n    if (bufferStr.length <= maxLength) {\n        return bufferStr;\n    }\n    return bufferStr.slice(0, maxLength) + '…';\n}\nexports.short = short;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nconst toUtf8 = function (hex) {\n    const zerosRegexp = /^(00)+|(00)+$/g;\n    hex = (0, internal_1.stripHexPrefix)(hex);\n    if (hex.length % 2 !== 0) {\n        throw new Error('Invalid non-even hex string input for toUtf8() provided');\n    }\n    const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n    return bufferVal.toString('utf8');\n};\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nconst baToJSON = function (ba) {\n    if (Buffer.isBuffer(ba)) {\n        return `0x${ba.toString('hex')}`;\n    }\n    else if (ba instanceof Array) {\n        const array = [];\n        for (let i = 0; i < ba.length; i++) {\n            array.push((0, exports.baToJSON)(ba[i]));\n        }\n        return array;\n    }\n};\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nconst validateNoLeadingZeroes = function (values) {\n    for (const [k, v] of Object.entries(values)) {\n        if (v !== undefined && v.length > 0 && v[0] === 0) {\n            throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`);\n        }\n    }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\nfunction arrToBufArr(arr) {\n    if (!Array.isArray(arr)) {\n        return Buffer.from(arr);\n    }\n    return arr.map((a) => arrToBufArr(a));\n}\nexports.arrToBufArr = arrToBufArr;\nfunction bufArrToArr(arr) {\n    if (!Array.isArray(arr)) {\n        return Uint8Array.from(arr ?? []);\n    }\n    return arr.map((a) => bufArrToArr(a));\n}\nexports.bufArrToArr = bufArrToArr;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nconst bigIntToHex = (num) => {\n    return '0x' + num.toString(16);\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nfunction bigIntToUnpaddedBuffer(value) {\n    return (0, exports.unpadBuffer)(bigIntToBuffer(value));\n}\nexports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;\nfunction intToUnpaddedBuffer(value) {\n    return (0, exports.unpadBuffer)((0, exports.intToBuffer)(value));\n}\nexports.intToUnpaddedBuffer = intToUnpaddedBuffer;\n//# sourceMappingURL=bytes.js.map","import { cloneDeep } from 'lodash';\nimport { isObject } from '@metamask/utils';\n\nexport const version = 83;\n\n/**\n * Ensure that each networkConfigurations object in state.NetworkController.networkConfigurations has an\n * `id` property which matches the key pointing that object\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (!isObject(state.NetworkController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController is ${typeof state.NetworkController}`,\n      ),\n    );\n    return state;\n  }\n  const { NetworkController } = state;\n\n  if (!isObject(NetworkController.networkConfigurations)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof NetworkController.networkConfigurations is ${typeof NetworkController.networkConfigurations}`,\n      ),\n    );\n    return state;\n  }\n\n  const { networkConfigurations } = NetworkController;\n\n  const newNetworkConfigurations: Record<string, Record<string, unknown>> = {};\n\n  for (const networkConfigurationId of Object.keys(networkConfigurations)) {\n    const networkConfiguration = networkConfigurations[networkConfigurationId];\n    if (!isObject(networkConfiguration)) {\n      return state;\n    }\n    newNetworkConfigurations[networkConfigurationId] = {\n      ...networkConfiguration,\n      id: networkConfigurationId,\n    };\n  }\n\n  return {\n    ...state,\n    NetworkController: {\n      ...NetworkController,\n      networkConfigurations: newNetworkConfigurations,\n    },\n  };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MAX_WITHDRAWALS_PER_PAYLOAD = exports.RLP_EMPTY_STRING = exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.SECP256K1_ORDER_DIV_2 = exports.SECP256K1_ORDER = exports.MAX_INTEGER_BIGINT = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;\nconst buffer_1 = require(\"buffer\");\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\n/**\n * 2^64-1\n */\nexports.MAX_UINT64 = BigInt('0xffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nexports.MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */\nexports.MAX_INTEGER_BIGINT = BigInt('115792089237316195423570985008687907853269984665640564039457584007913129639935');\nexports.SECP256K1_ORDER = secp256k1_1.secp256k1.CURVE.n;\nexports.SECP256K1_ORDER_DIV_2 = secp256k1_1.secp256k1.CURVE.n / BigInt(2);\n/**\n * 2^256\n */\nexports.TWO_POW256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, 'hex');\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, 'hex');\n/**\n *  RLP encoded empty string\n */\nexports.RLP_EMPTY_STRING = buffer_1.Buffer.from([0x80]);\nexports.MAX_WITHDRAWALS_PER_PAYLOAD = 16;\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compactBytesToNibbles = exports.bytesToNibbles = exports.nibblesToCompactBytes = exports.nibblesToBytes = exports.hasTerminator = void 0;\n// Reference: https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/\n/**\n *\n * @param s byte sequence\n * @returns boolean indicating if input hex nibble sequence has terminator indicating leaf-node\n *          terminator is represented with 16 because a nibble ranges from 0 - 15(f)\n */\nconst hasTerminator = (nibbles) => {\n    return nibbles.length > 0 && nibbles[nibbles.length - 1] === 16;\n};\nexports.hasTerminator = hasTerminator;\nconst nibblesToBytes = (nibbles, bytes) => {\n    for (let bi = 0, ni = 0; ni < nibbles.length; bi += 1, ni += 2) {\n        bytes[bi] = (nibbles[ni] << 4) | nibbles[ni + 1];\n    }\n};\nexports.nibblesToBytes = nibblesToBytes;\nconst nibblesToCompactBytes = (nibbles) => {\n    let terminator = 0;\n    if ((0, exports.hasTerminator)(nibbles)) {\n        terminator = 1;\n        // Remove the terminator from the sequence\n        nibbles = nibbles.subarray(0, nibbles.length - 1);\n    }\n    const buf = new Uint8Array(nibbles.length / 2 + 1);\n    // Shift the terminator info into the first nibble of buf[0]\n    buf[0] = terminator << 5;\n    // If odd length, then add that flag into the first nibble and put the odd nibble to\n    // second part of buf[0] which otherwise will be left padded with a 0\n    if ((nibbles.length & 1) === 1) {\n        buf[0] |= 1 << 4;\n        buf[0] |= nibbles[0];\n        nibbles = nibbles.subarray(1);\n    }\n    // create bytes out of the rest even nibbles\n    (0, exports.nibblesToBytes)(nibbles, buf.subarray(1));\n    return buf;\n};\nexports.nibblesToCompactBytes = nibblesToCompactBytes;\nconst bytesToNibbles = (str) => {\n    const l = str.length * 2 + 1;\n    const nibbles = new Uint8Array(l);\n    for (let i = 0; i < str.length; i++) {\n        const b = str[i];\n        nibbles[i * 2] = b / 16;\n        nibbles[i * 2 + 1] = b % 16;\n    }\n    // This will get removed from calling function if the first nibble\n    // indicates that terminator is not present\n    nibbles[l - 1] = 16;\n    return nibbles;\n};\nexports.bytesToNibbles = bytesToNibbles;\nconst compactBytesToNibbles = (compact) => {\n    if (compact.length === 0) {\n        return compact;\n    }\n    let base = (0, exports.bytesToNibbles)(compact);\n    // delete terminator flag if terminator flag was not in first nibble\n    if (base[0] < 2) {\n        base = base.subarray(0, base.length - 1);\n    }\n    // chop the terminator nibble and the even padding (if there is one)\n    // i.e.  chop 2 left nibbles when even else 1 when odd\n    const chop = 2 - (base[0] & 1);\n    return base.subarray(chop);\n};\nexports.compactBytesToNibbles = compactBytesToNibbles;\n/**\n * A test helper to generates compact path for a subset of key bytes\n *\n * TODO: Commenting the code for now as this seems to be helper function\n * (from geth codebase )\n *\n */\n//\n//\n// export const getPathTo = (tillBytes: number, key: Buffer) => {\n//   const hexNibbles = bytesToNibbles(key).subarray(0, tillBytes)\n//   // Remove the terminator if its there, although it would be there only if tillBytes >= key.length\n//   // This seems to be a test helper to generate paths so correctness of this isn't necessary\n//   hexNibbles[hexNibbles.length - 1] = 0\n//   const compactBytes = nibblesToCompactBytes(hexNibbles)\n//   return [Buffer.from(compactBytes)]\n// }\n//# sourceMappingURL=encoding.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nconst internal_1 = require(\"./internal\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nconst assertIsHexString = function (input) {\n    if (!(0, internal_1.isHexString)(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nconst assertIsBuffer = function (input) {\n    if (!Buffer.isBuffer(input)) {\n        const msg = `This method only supports Buffer but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nconst assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nconst assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsString = assertIsString;\n//# sourceMappingURL=helpers.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toAscii = exports.stripHexPrefix = exports.padToEven = exports.isHexString = exports.isHexPrefixed = exports.getKeys = exports.getBinarySize = exports.fromUtf8 = exports.fromAscii = exports.arrayContainsArray = void 0;\n/**\n * Constants\n */\n__exportStar(require(\"./constants\"), exports);\n/**\n * Units helpers\n */\n__exportStar(require(\"./units\"), exports);\n/**\n * Account class and helper functions\n */\n__exportStar(require(\"./account\"), exports);\n/**\n * Address type\n */\n__exportStar(require(\"./address\"), exports);\n/**\n * Withdrawal type\n */\n__exportStar(require(\"./withdrawal\"), exports);\n/**\n * ECDSA signature\n */\n__exportStar(require(\"./signature\"), exports);\n/**\n * Utilities for manipulating Buffers, byte arrays, etc.\n */\n__exportStar(require(\"./bytes\"), exports);\n/**\n * Helpful TypeScript types\n */\n__exportStar(require(\"./types\"), exports);\n/**\n * Helper function for working with compact encoding\n */\n__exportStar(require(\"./encoding\"), exports);\n/**\n * Export ethjs-util methods\n */\n__exportStar(require(\"./asyncEventEmitter\"), exports);\nvar internal_1 = require(\"./internal\");\nObject.defineProperty(exports, \"arrayContainsArray\", { enumerable: true, get: function () { return internal_1.arrayContainsArray; } });\nObject.defineProperty(exports, \"fromAscii\", { enumerable: true, get: function () { return internal_1.fromAscii; } });\nObject.defineProperty(exports, \"fromUtf8\", { enumerable: true, get: function () { return internal_1.fromUtf8; } });\nObject.defineProperty(exports, \"getBinarySize\", { enumerable: true, get: function () { return internal_1.getBinarySize; } });\nObject.defineProperty(exports, \"getKeys\", { enumerable: true, get: function () { return internal_1.getKeys; } });\nObject.defineProperty(exports, \"isHexPrefixed\", { enumerable: true, get: function () { return internal_1.isHexPrefixed; } });\nObject.defineProperty(exports, \"isHexString\", { enumerable: true, get: function () { return internal_1.isHexString; } });\nObject.defineProperty(exports, \"padToEven\", { enumerable: true, get: function () { return internal_1.padToEven; } });\nObject.defineProperty(exports, \"stripHexPrefix\", { enumerable: true, get: function () { return internal_1.stripHexPrefix; } });\nObject.defineProperty(exports, \"toAscii\", { enumerable: true, get: function () { return internal_1.toAscii; } });\n__exportStar(require(\"./lock\"), exports);\n__exportStar(require(\"./provider\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nfunction isHexPrefixed(str) {\n    if (typeof str !== 'string') {\n        throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);\n    }\n    return str[0] === '0' && str[1] === 'x';\n}\nexports.isHexPrefixed = isHexPrefixed;\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nconst stripHexPrefix = (str) => {\n    if (typeof str !== 'string')\n        throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n    return isHexPrefixed(str) ? str.slice(2) : str;\n};\nexports.stripHexPrefix = stripHexPrefix;\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nfunction padToEven(value) {\n    let a = value;\n    if (typeof a !== 'string') {\n        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n    }\n    if (a.length % 2)\n        a = `0${a}`;\n    return a;\n}\nexports.padToEven = padToEven;\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */\nfunction getBinarySize(str) {\n    if (typeof str !== 'string') {\n        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);\n    }\n    return Buffer.byteLength(str, 'utf8');\n}\nexports.getBinarySize = getBinarySize;\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */\nfunction arrayContainsArray(superset, subset, some) {\n    if (Array.isArray(superset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);\n    }\n    if (Array.isArray(subset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);\n    }\n    return subset[some === true ? 'some' : 'every']((value) => superset.indexOf(value) >= 0);\n}\nexports.arrayContainsArray = arrayContainsArray;\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */\nfunction toAscii(hex) {\n    let str = '';\n    let i = 0;\n    const l = hex.length;\n    if (hex.substring(0, 2) === '0x')\n        i = 2;\n    for (; i < l; i += 2) {\n        const code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n    return str;\n}\nexports.toAscii = toAscii;\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n    const str = Buffer.from(stringValue, 'utf8');\n    return `0x${padToEven(str.toString('hex')).replace(/^0+|0+$/g, '')}`;\n}\nexports.fromUtf8 = fromUtf8;\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */\nfunction fromAscii(stringValue) {\n    let hex = '';\n    for (let i = 0; i < stringValue.length; i++) {\n        const code = stringValue.charCodeAt(i);\n        const n = code.toString(16);\n        hex += n.length < 2 ? `0${n}` : n;\n    }\n    return `0x${hex}`;\n}\nexports.fromAscii = fromAscii;\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n    if (!Array.isArray(params)) {\n        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);\n    }\n    if (typeof key !== 'string') {\n        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);\n    }\n    const result = [];\n    for (let i = 0; i < params.length; i++) {\n        let value = params[i][key];\n        if (allowEmpty === true && !value) {\n            value = '';\n        }\n        else if (typeof value !== 'string') {\n            throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);\n        }\n        result.push(value);\n    }\n    return result;\n}\nexports.getKeys = getKeys;\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */\nfunction isHexString(value, length) {\n    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))\n        return false;\n    if (typeof length !== 'undefined' && length > 0 && value.length !== 2 + 2 * length)\n        return false;\n    return true;\n}\nexports.isHexString = isHexString;\n//# sourceMappingURL=internal.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Lock = void 0;\n// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts\nclass Lock {\n    constructor() {\n        this.permits = 1;\n        this.promiseResolverQueue = [];\n    }\n    /**\n     * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n     * @returns  A promise that gets resolved when execution is allowed to proceed.\n     */\n    async acquire() {\n        if (this.permits > 0) {\n            this.permits -= 1;\n            return Promise.resolve(true);\n        }\n        // If there is no permit available, we return a promise that resolves once the semaphore gets\n        // signaled enough times that permits is equal to one.\n        return new Promise((resolver) => this.promiseResolverQueue.push(resolver));\n    }\n    /**\n     * Increases the number of permits by one. If there are other functions waiting, one of them will\n     * continue to execute in a future iteration of the event loop.\n     */\n    release() {\n        this.permits += 1;\n        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n            // eslint-disable-next-line no-console\n            console.warn('Lock.permits should never be > 0 when there is someone waiting.');\n        }\n        else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n            // If there is someone else waiting, immediately consume the permit that was released\n            // at the beginning of this function and let the waiting function resume.\n            this.permits -= 1;\n            const nextResolver = this.promiseResolverQueue.shift();\n            if (nextResolver) {\n                nextResolver(true);\n            }\n        }\n    }\n}\nexports.Lock = Lock;\n//# sourceMappingURL=lock.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getProvider = exports.fetchFromProvider = void 0;\nconst micro_ftch_1 = require(\"micro-ftch\");\nconst fetchFromProvider = async (url, params) => {\n    const res = await (0, micro_ftch_1.default)(url, {\n        headers: {\n            'content-type': 'application/json',\n        },\n        type: 'json',\n        data: {\n            method: params.method,\n            params: params.params,\n            jsonrpc: '2.0',\n            id: 1,\n        },\n    });\n    return res.result;\n};\nexports.fetchFromProvider = fetchFromProvider;\nconst getProvider = (provider) => {\n    if (typeof provider === 'string') {\n        return provider;\n    }\n    else if (provider?.connection?.url !== undefined) {\n        return provider.connection.url;\n    }\n    else {\n        throw new Error('Must provide valid provider URL or Web3Provider');\n    }\n};\nexports.getProvider = getProvider;\n//# sourceMappingURL=provider.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nconst bytes_1 = require(\"./bytes\");\nconst constants_1 = require(\"./constants\");\nconst helpers_1 = require(\"./helpers\");\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nfunction ecsign(msgHash, privateKey, chainId) {\n    const sig = secp256k1_1.secp256k1.sign(msgHash, privateKey);\n    const buf = sig.toCompactRawBytes();\n    const r = Buffer.from(buf.slice(0, 32));\n    const s = Buffer.from(buf.slice(32, 64));\n    const v = chainId === undefined\n        ? BigInt(sig.recovery + 27)\n        : BigInt(sig.recovery + 35) + BigInt(chainId) * BigInt(2);\n    return { r, s, v };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n    if (v === BigInt(0) || v === BigInt(1))\n        return v;\n    if (chainId === undefined) {\n        return v - BigInt(27);\n    }\n    return v - (chainId * BigInt(2) + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n    const signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    const sig = secp256k1_1.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n    const senderPubKey = sig.recoverPublicKey(msgHash);\n    return Buffer.from(senderPubKey.toRawBytes(false).slice(1));\n};\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toRpcSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toCompactSig = function (v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    let ss = s;\n    if ((v > BigInt(28) && v % BigInt(2) === BigInt(1)) || v === BigInt(1) || v === BigInt(28)) {\n        ss = Buffer.from(s);\n        ss[0] |= 0x80;\n    }\n    return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nconst fromRpcSig = function (sig) {\n    const buf = (0, bytes_1.toBuffer)(sig);\n    let r;\n    let s;\n    let v;\n    if (buf.length >= 65) {\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = (0, bytes_1.bufferToBigInt)(buf.slice(64));\n    }\n    else if (buf.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = BigInt((0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7);\n        s[0] &= 0x7f;\n    }\n    else {\n        throw new Error('Invalid signature length');\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v = v + BigInt(27);\n    }\n    return {\n        v,\n        r,\n        s,\n    };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nconst isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBigInt = (0, bytes_1.bufferToBigInt)(r);\n    const sBigInt = (0, bytes_1.bufferToBigInt)(s);\n    if (rBigInt === BigInt(0) ||\n        rBigInt >= constants_1.SECP256K1_ORDER ||\n        sBigInt === BigInt(0) ||\n        sBigInt >= constants_1.SECP256K1_ORDER) {\n        return false;\n    }\n    if (homesteadOrLater && sBigInt >= constants_1.SECP256K1_ORDER_DIV_2) {\n        return false;\n    }\n    return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nconst hashPersonalMessage = function (message) {\n    (0, helpers_1.assertIsBuffer)(message);\n    const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length}`, 'utf-8');\n    return Buffer.from((0, keccak_1.keccak256)(Buffer.concat([prefix, message])));\n};\nexports.hashPersonalMessage = hashPersonalMessage;\n//# sourceMappingURL=signature.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toType = exports.TypeOutput = void 0;\nconst bytes_1 = require(\"./bytes\");\nconst internal_1 = require(\"./internal\");\n/**\n * Type output options\n */\nvar TypeOutput;\n(function (TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n    TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\nfunction toType(input, outputType) {\n    if (input === null) {\n        return null;\n    }\n    if (input === undefined) {\n        return undefined;\n    }\n    if (typeof input === 'string' && !(0, internal_1.isHexString)(input)) {\n        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n    }\n    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');\n    }\n    const output = (0, bytes_1.toBuffer)(input);\n    switch (outputType) {\n        case TypeOutput.Buffer:\n            return output;\n        case TypeOutput.BigInt:\n            return (0, bytes_1.bufferToBigInt)(output);\n        case TypeOutput.Number: {\n            const bigInt = (0, bytes_1.bufferToBigInt)(output);\n            if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n                throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');\n            }\n            return Number(bigInt);\n        }\n        case TypeOutput.PrefixedHexString:\n            return (0, bytes_1.bufferToHex)(output);\n        default:\n            throw new Error('unknown outputType');\n    }\n}\nexports.toType = toType;\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GWEI_TO_WEI = void 0;\n/** Easy conversion from Gwei to wei */\nexports.GWEI_TO_WEI = BigInt(1000000000);\n//# sourceMappingURL=units.js.map","import { cloneDeep } from 'lodash';\nimport { hasProperty, isObject } from '@metamask/utils';\n\nexport const version = 84;\n\n/**\n * The `network` property in state was replaced with `networkId` and `networkStatus`.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    !hasProperty(state, 'NetworkController') ||\n    !isObject(state.NetworkController)\n  ) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController is ${typeof state.NetworkController}`,\n      ),\n    );\n    return state;\n  }\n  if (!hasProperty(state.NetworkController, 'network')) {\n    const thePost077SupplementFor084HasNotModifiedState =\n      state.NetworkController.networkId === undefined;\n    if (thePost077SupplementFor084HasNotModifiedState) {\n      global.sentry?.captureException?.(\n        new Error(\n          `typeof state.NetworkController.network is ${typeof state\n            .NetworkController.network}`,\n        ),\n      );\n    }\n    return state;\n  }\n\n  const NetworkController = { ...state.NetworkController };\n\n  if (NetworkController.network === 'loading') {\n    NetworkController.networkId = null;\n    NetworkController.networkStatus = 'unknown';\n  } else {\n    NetworkController.networkId = NetworkController.network;\n    NetworkController.networkStatus = 'available';\n  }\n\n  delete NetworkController.network;\n\n  return { ...state, NetworkController };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Withdrawal = void 0;\nconst address_1 = require(\"./address\");\nconst bytes_1 = require(\"./bytes\");\nconst types_1 = require(\"./types\");\n/**\n * Representation of EIP-4895 withdrawal data\n */\nclass Withdrawal {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n     */\n    constructor(index, validatorIndex, address, \n    /**\n     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n     */\n    amount) {\n        this.index = index;\n        this.validatorIndex = validatorIndex;\n        this.address = address;\n        this.amount = amount;\n    }\n    static fromWithdrawalData(withdrawalData) {\n        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData, } = withdrawalData;\n        const index = (0, types_1.toType)(indexData, types_1.TypeOutput.BigInt);\n        const validatorIndex = (0, types_1.toType)(validatorIndexData, types_1.TypeOutput.BigInt);\n        const address = new address_1.Address((0, types_1.toType)(addressData, types_1.TypeOutput.Buffer));\n        const amount = (0, types_1.toType)(amountData, types_1.TypeOutput.BigInt);\n        return new Withdrawal(index, validatorIndex, address, amount);\n    }\n    static fromValuesArray(withdrawalArray) {\n        if (withdrawalArray.length !== 4) {\n            throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);\n        }\n        const [index, validatorIndex, address, amount] = withdrawalArray;\n        return Withdrawal.fromWithdrawalData({ index, validatorIndex, address, amount });\n    }\n    /**\n     * Convert a withdrawal to a buffer array\n     * @param withdrawal the withdrawal to convert\n     * @returns buffer array of the withdrawal\n     */\n    static toBufferArray(withdrawal) {\n        const { index, validatorIndex, address, amount } = withdrawal;\n        const indexBuffer = (0, types_1.toType)(index, types_1.TypeOutput.BigInt) === BigInt(0)\n            ? Buffer.alloc(0)\n            : (0, types_1.toType)(index, types_1.TypeOutput.Buffer);\n        const validatorIndexBuffer = (0, types_1.toType)(validatorIndex, types_1.TypeOutput.BigInt) === BigInt(0)\n            ? Buffer.alloc(0)\n            : (0, types_1.toType)(validatorIndex, types_1.TypeOutput.Buffer);\n        let addressBuffer;\n        if (address instanceof address_1.Address) {\n            addressBuffer = address.buf;\n        }\n        else {\n            addressBuffer = (0, types_1.toType)(address, types_1.TypeOutput.Buffer);\n        }\n        const amountBuffer = (0, types_1.toType)(amount, types_1.TypeOutput.BigInt) === BigInt(0)\n            ? Buffer.alloc(0)\n            : (0, types_1.toType)(amount, types_1.TypeOutput.Buffer);\n        return [indexBuffer, validatorIndexBuffer, addressBuffer, amountBuffer];\n    }\n    raw() {\n        return Withdrawal.toBufferArray(this);\n    }\n    toValue() {\n        return {\n            index: this.index,\n            validatorIndex: this.validatorIndex,\n            address: this.address.buf,\n            amount: this.amount,\n        };\n    }\n    toJSON() {\n        return {\n            index: (0, bytes_1.bigIntToHex)(this.index),\n            validatorIndex: (0, bytes_1.bigIntToHex)(this.validatorIndex),\n            address: '0x' + this.address.buf.toString('hex'),\n            amount: (0, bytes_1.bigIntToHex)(this.amount),\n        };\n    }\n}\nexports.Withdrawal = Withdrawal;\n//# sourceMappingURL=withdrawal.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst errors_1 = require(\"./errors.cjs\");\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(fn) {\n    /* istanbul ignore next */\n    return Boolean(typeof fn?.prototype?.constructor?.name === 'string');\n}\n/**\n * Attempts to obtain the message from a possible error object. If it is\n * possible to do so, any trailing period will be removed from the message;\n * otherwise an empty string is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The message without any trailing period if `error` is an object\n * with a `message` property; the string version of `error` without any trailing\n * period if it is not `undefined` or `null`; otherwise an empty string.\n */\nfunction getErrorMessageWithoutTrailingPeriod(error) {\n    // We'll add our own period.\n    return (0, errors_1.getErrorMessage)(error).replace(/\\.$/u, '');\n}\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper, message) {\n    if (isConstructable(ErrorWrapper)) {\n        return new ErrorWrapper({\n            message,\n        });\n    }\n    return ErrorWrapper({\n        message,\n    });\n}\n/**\n * The default error class that is thrown if an assertion fails.\n */\nclass AssertionError extends Error {\n    constructor(options) {\n        super(options.message);\n        this.code = 'ERR_ASSERTION';\n    }\n}\nexports.AssertionError = AssertionError;\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nfunction assert(value, message = 'Assertion failed.', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    if (!value) {\n        if (message instanceof Error) {\n            throw message;\n        }\n        throw getError(ErrorWrapper, message);\n    }\n}\nexports.assert = assert;\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nfunction assertStruct(value, struct, errorPrefix = 'Assertion failed', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    try {\n        (0, superstruct_1.assert)(value, struct);\n    }\n    catch (error) {\n        throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessageWithoutTrailingPeriod(error)}.`);\n    }\n}\nexports.assertStruct = assertStruct;\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nfunction assertExhaustive(_object) {\n    throw new Error('Invalid branch reached. Should be detected during compilation.');\n}\nexports.assertExhaustive = assertExhaustive;\n//# sourceMappingURL=assert.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base64 = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nconst base64 = (struct, options = {}) => {\n    const paddingRequired = options.paddingRequired ?? false;\n    const characterSet = options.characterSet ?? 'base64';\n    let letters;\n    if (characterSet === 'base64') {\n        letters = String.raw `[A-Za-z0-9+\\/]`;\n    }\n    else {\n        (0, assert_1.assert)(characterSet === 'base64url');\n        letters = String.raw `[-_A-Za-z0-9]`;\n    }\n    let re;\n    if (paddingRequired) {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    else {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64;\n//# sourceMappingURL=base64.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDataView = exports.concatBytes = exports.valueToBytes = exports.base64ToBytes = exports.stringToBytes = exports.numberToBytes = exports.signedBigIntToBytes = exports.bigIntToBytes = exports.hexToBytes = exports.bytesToBase64 = exports.bytesToString = exports.bytesToNumber = exports.bytesToSignedBigInt = exports.bytesToBigInt = exports.bytesToHex = exports.assertIsBytes = exports.isBytes = void 0;\nconst base_1 = require(\"@scure/base\");\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n// '0'.charCodeAt(0) === 48\nconst HEX_MINIMUM_NUMBER_CHARACTER = 48;\n// '9'.charCodeAt(0) === 57\nconst HEX_MAXIMUM_NUMBER_CHARACTER = 58;\nconst HEX_CHARACTER_OFFSET = 87;\n/**\n * Memoized function that returns an array to be used as a lookup table for\n * converting bytes to hexadecimal values.\n *\n * The array is created lazily and then cached for future use. The benefit of\n * this approach is that the performance of converting bytes to hex is much\n * better than if we were to call `toString(16)` on each byte.\n *\n * The downside is that the array is created once and then never garbage\n * collected. This is not a problem in practice because the array is only 256\n * elements long.\n *\n * @returns A function that returns the lookup table.\n */\nfunction getPrecomputedHexValuesBuilder() {\n    // To avoid issues with tree shaking, we need to use a function to return the\n    // array. This is because the array is only used in the `bytesToHex` function\n    // and if we were to use a global variable, the array might be removed by the\n    // tree shaker.\n    const lookupTable = [];\n    return () => {\n        if (lookupTable.length === 0) {\n            for (let i = 0; i < 256; i++) {\n                lookupTable.push(i.toString(16).padStart(2, '0'));\n            }\n        }\n        return lookupTable;\n    };\n}\n/**\n * Function implementation of the {@link getPrecomputedHexValuesBuilder}\n * function.\n */\nconst getPrecomputedHexValues = getPrecomputedHexValuesBuilder();\n/**\n * Check if a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @returns Whether the value is a `Uint8Array`.\n */\nfunction isBytes(value) {\n    return value instanceof Uint8Array;\n}\nexports.isBytes = isBytes;\n/**\n * Assert that a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @throws If the value is not a `Uint8Array`.\n */\nfunction assertIsBytes(value) {\n    (0, assert_1.assert)(isBytes(value), 'Value must be a Uint8Array.');\n}\nexports.assertIsBytes = assertIsBytes;\n/**\n * Convert a `Uint8Array` to a hexadecimal string.\n *\n * @param bytes - The bytes to convert to a hexadecimal string.\n * @returns The hexadecimal string.\n */\nfunction bytesToHex(bytes) {\n    assertIsBytes(bytes);\n    if (bytes.length === 0) {\n        return '0x';\n    }\n    const lookupTable = getPrecomputedHexValues();\n    const hexadecimal = new Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        hexadecimal[i] = lookupTable[bytes[i]];\n    }\n    return (0, hex_1.add0x)(hexadecimal.join(''));\n}\nexports.bytesToHex = bytesToHex;\n/**\n * Convert a `Uint8Array` to a `bigint`.\n *\n * To convert a `Uint8Array` to a `number` instead, use {@link bytesToNumber}.\n * To convert a two's complement encoded `Uint8Array` to a `bigint`, use\n * {@link bytesToSignedBigInt}.\n *\n * @param bytes - The bytes to convert to a `bigint`.\n * @returns The `bigint`.\n */\nfunction bytesToBigInt(bytes) {\n    assertIsBytes(bytes);\n    const hexadecimal = bytesToHex(bytes);\n    return BigInt(hexadecimal);\n}\nexports.bytesToBigInt = bytesToBigInt;\n/**\n * Convert a `Uint8Array` to a signed `bigint`. This assumes that the bytes are\n * encoded in two's complement.\n *\n * To convert a `Uint8Array` to an unsigned `bigint` instead, use\n * {@link bytesToBigInt}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param bytes - The bytes to convert to a signed `bigint`.\n * @returns The signed `bigint`.\n */\nfunction bytesToSignedBigInt(bytes) {\n    assertIsBytes(bytes);\n    let value = BigInt(0);\n    for (const byte of bytes) {\n        // eslint-disable-next-line no-bitwise\n        value = (value << BigInt(8)) + BigInt(byte);\n    }\n    return BigInt.asIntN(bytes.length * 8, value);\n}\nexports.bytesToSignedBigInt = bytesToSignedBigInt;\n/**\n * Convert a `Uint8Array` to a `number`.\n *\n * To convert a `Uint8Array` to a `bigint` instead, use {@link bytesToBigInt}.\n *\n * @param bytes - The bytes to convert to a number.\n * @returns The number.\n * @throws If the resulting number is not a safe integer.\n */\nfunction bytesToNumber(bytes) {\n    assertIsBytes(bytes);\n    const bigint = bytesToBigInt(bytes);\n    (0, assert_1.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), 'Number is not a safe integer. Use `bytesToBigInt` instead.');\n    return Number(bigint);\n}\nexports.bytesToNumber = bytesToNumber;\n/**\n * Convert a UTF-8 encoded `Uint8Array` to a `string`.\n *\n * @param bytes - The bytes to convert to a string.\n * @returns The string.\n */\nfunction bytesToString(bytes) {\n    assertIsBytes(bytes);\n    return new TextDecoder().decode(bytes);\n}\nexports.bytesToString = bytesToString;\n/**\n * Convert a `Uint8Array` to a base64 encoded string.\n *\n * @param bytes - The bytes to convert to a base64 encoded string.\n * @returns The base64 encoded string.\n */\nfunction bytesToBase64(bytes) {\n    assertIsBytes(bytes);\n    return base_1.base64.encode(bytes);\n}\nexports.bytesToBase64 = bytesToBase64;\n/**\n * Convert a hexadecimal string to a `Uint8Array`. The string can optionally be\n * prefixed with `0x`. It accepts even and odd length strings.\n *\n * If the value is \"0x\", an empty `Uint8Array` is returned.\n *\n * @param value - The hexadecimal string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction hexToBytes(value) {\n    // \"0x\" is often used as empty byte array.\n    if (value?.toLowerCase?.() === '0x') {\n        return new Uint8Array();\n    }\n    (0, hex_1.assertIsHexString)(value);\n    // Remove the `0x` prefix if it exists, and pad the string to have an even\n    // number of characters.\n    const strippedValue = (0, hex_1.remove0x)(value).toLowerCase();\n    const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;\n    const bytes = new Uint8Array(normalizedValue.length / 2);\n    for (let i = 0; i < bytes.length; i++) {\n        // While this is not the prettiest way to convert a hexadecimal string to a\n        // `Uint8Array`, it is a lot faster than using `parseInt` to convert each\n        // character.\n        const c1 = normalizedValue.charCodeAt(i * 2);\n        const c2 = normalizedValue.charCodeAt(i * 2 + 1);\n        const n1 = c1 -\n            (c1 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        const n2 = c2 -\n            (c2 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        bytes[i] = n1 * 16 + n2;\n    }\n    return bytes;\n}\nexports.hexToBytes = hexToBytes;\n/**\n * Convert a `bigint` to a `Uint8Array`.\n *\n * This assumes that the `bigint` is an unsigned integer. To convert a signed\n * `bigint` instead, use {@link signedBigIntToBytes}.\n *\n * @param value - The bigint to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction bigIntToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= BigInt(0), 'Value must be a non-negative bigint.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * Check if a `bigint` fits in a certain number of bytes.\n *\n * @param value - The `bigint` to check.\n * @param bytes - The number of bytes.\n * @returns Whether the `bigint` fits in the number of bytes.\n */\nfunction bigIntFits(value, bytes) {\n    (0, assert_1.assert)(bytes > 0);\n    /* eslint-disable no-bitwise */\n    const mask = value >> BigInt(31);\n    return !(((~value & mask) + (value & ~mask)) >> BigInt(bytes * 8 + ~0));\n    /* eslint-enable no-bitwise */\n}\n/**\n * Convert a signed `bigint` to a `Uint8Array`. This uses two's complement\n * encoding to represent negative numbers.\n *\n * To convert an unsigned `bigint` to a `Uint8Array` instead, use\n * {@link bigIntToBytes}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param value - The number to convert to bytes.\n * @param byteLength - The length of the resulting `Uint8Array`. If the number\n * is larger than the maximum value that can be represented by the given length,\n * an error is thrown.\n * @returns The bytes as `Uint8Array`.\n */\nfunction signedBigIntToBytes(value, byteLength) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(typeof byteLength === 'number', 'Byte length must be a number.');\n    (0, assert_1.assert)(byteLength > 0, 'Byte length must be greater than 0.');\n    (0, assert_1.assert)(bigIntFits(value, byteLength), 'Byte length is too small to represent the given value.');\n    // ESLint doesn't like mutating function parameters, so to avoid having to\n    // disable the rule, we create a new variable.\n    let numberValue = value;\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0; i < bytes.length; i++) {\n        bytes[i] = Number(BigInt.asUintN(8, numberValue));\n        // eslint-disable-next-line no-bitwise\n        numberValue >>= BigInt(8);\n    }\n    return bytes.reverse();\n}\nexports.signedBigIntToBytes = signedBigIntToBytes;\n/**\n * Convert a `number` to a `Uint8Array`.\n *\n * @param value - The number to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n * @throws If the number is not a safe integer.\n */\nfunction numberToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToBytes` instead.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.numberToBytes = numberToBytes;\n/**\n * Convert a `string` to a UTF-8 encoded `Uint8Array`.\n *\n * @param value - The string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction stringToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return new TextEncoder().encode(value);\n}\nexports.stringToBytes = stringToBytes;\n/**\n * Convert a base64 encoded string to a `Uint8Array`.\n *\n * @param value - The base64 encoded string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction base64ToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return base_1.base64.decode(value);\n}\nexports.base64ToBytes = base64ToBytes;\n/**\n * Convert a byte-like value to a `Uint8Array`. The value can be a `Uint8Array`,\n * a `bigint`, a `number`, or a `string`.\n *\n * This will attempt to guess the type of the value based on its type and\n * contents. For more control over the conversion, use the more specific\n * conversion functions, such as {@link hexToBytes} or {@link stringToBytes}.\n *\n * If the value is a `string`, and it is prefixed with `0x`, it will be\n * interpreted as a hexadecimal string. Otherwise, it will be interpreted as a\n * UTF-8 string. To convert a hexadecimal string to bytes without interpreting\n * it as a UTF-8 string, use {@link hexToBytes} instead.\n *\n * If the value is a `bigint`, it is assumed to be unsigned. To convert a signed\n * `bigint` to bytes, use {@link signedBigIntToBytes} instead.\n *\n * If the value is a `Uint8Array`, it will be returned as-is.\n *\n * @param value - The value to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction valueToBytes(value) {\n    if (typeof value === 'bigint') {\n        return bigIntToBytes(value);\n    }\n    if (typeof value === 'number') {\n        return numberToBytes(value);\n    }\n    if (typeof value === 'string') {\n        if (value.startsWith('0x')) {\n            return hexToBytes(value);\n        }\n        return stringToBytes(value);\n    }\n    if (isBytes(value)) {\n        return value;\n    }\n    throw new TypeError(`Unsupported value type: \"${typeof value}\".`);\n}\nexports.valueToBytes = valueToBytes;\n/**\n * Concatenate multiple byte-like values into a single `Uint8Array`. The values\n * can be `Uint8Array`, `bigint`, `number`, or `string`. This uses\n * {@link valueToBytes} under the hood to convert each value to bytes. Refer to\n * the documentation of that function for more information.\n *\n * @param values - The values to concatenate.\n * @returns The concatenated bytes as `Uint8Array`.\n */\nfunction concatBytes(values) {\n    const normalizedValues = new Array(values.length);\n    let byteLength = 0;\n    for (let i = 0; i < values.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const value = valueToBytes(values[i]);\n        normalizedValues[i] = value;\n        byteLength += value.length;\n    }\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0, offset = 0; i < normalizedValues.length; i++) {\n        // While we could simply spread the values into an array and use\n        // `Uint8Array.from`, that is a lot slower than using `Uint8Array.set`.\n        bytes.set(normalizedValues[i], offset);\n        offset += normalizedValues[i].length;\n    }\n    return bytes;\n}\nexports.concatBytes = concatBytes;\n/**\n * Create a {@link DataView} from a {@link Uint8Array}. This is a convenience\n * function that avoids having to create a {@link DataView} manually, which\n * requires passing the `byteOffset` and `byteLength` parameters every time.\n *\n * Not passing the `byteOffset` and `byteLength` parameters can result in\n * unexpected behavior when the {@link Uint8Array} is a view of a larger\n * {@link ArrayBuffer}, e.g., when using {@link Uint8Array.subarray}.\n *\n * This function also supports Node.js {@link Buffer}s.\n *\n * @example\n * ```typescript\n * const bytes = new Uint8Array([1, 2, 3]);\n *\n * // This is equivalent to:\n * // const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n * const dataView = createDataView(bytes);\n * ```\n * @param bytes - The bytes to create the {@link DataView} from.\n * @returns The {@link DataView}.\n */\nfunction createDataView(bytes) {\n    // To maintain compatibility with Node.js, we need to check if the bytes are\n    // a Buffer. If so, we need to slice the buffer to get the underlying\n    // ArrayBuffer.\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof Buffer !== 'undefined' && bytes instanceof Buffer) {\n        const buffer = bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n        return new DataView(buffer);\n    }\n    return new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n}\nexports.createDataView = createDataView;\n//# sourceMappingURL=bytes.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCaipChainId = exports.parseCaipAccountId = exports.parseCaipChainId = exports.isCaipAccountAddress = exports.isCaipAccountId = exports.isCaipReference = exports.isCaipNamespace = exports.isCaipChainId = exports.KnownCaipNamespace = exports.CaipAccountAddressStruct = exports.CaipAccountIdStruct = exports.CaipReferenceStruct = exports.CaipNamespaceStruct = exports.CaipChainIdStruct = exports.CAIP_ACCOUNT_ADDRESS_REGEX = exports.CAIP_ACCOUNT_ID_REGEX = exports.CAIP_REFERENCE_REGEX = exports.CAIP_NAMESPACE_REGEX = exports.CAIP_CHAIN_ID_REGEX = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nexports.CAIP_CHAIN_ID_REGEX = /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u;\nexports.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u;\nexports.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u;\nexports.CAIP_ACCOUNT_ID_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u;\nexports.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u;\n/**\n * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.\n */\nexports.CaipChainIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_CHAIN_ID_REGEX);\n/**\n * A CAIP-2 namespace, i.e., the first part of a CAIP chain ID.\n */\nexports.CaipNamespaceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_NAMESPACE_REGEX);\n/**\n * A CAIP-2 reference, i.e., the second part of a CAIP chain ID.\n */\nexports.CaipReferenceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_REFERENCE_REGEX);\n/**\n * A CAIP-10 account ID, i.e., a human-readable namespace, reference, and account address.\n */\nexports.CaipAccountIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ID_REGEX);\n/**\n * A CAIP-10 account address, i.e., the third part of the CAIP account ID.\n */\nexports.CaipAccountAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ADDRESS_REGEX);\n/** Known CAIP namespaces. */\nvar KnownCaipNamespace;\n(function (KnownCaipNamespace) {\n    /** EIP-155 compatible chains. */\n    KnownCaipNamespace[\"Eip155\"] = \"eip155\";\n})(KnownCaipNamespace = exports.KnownCaipNamespace || (exports.KnownCaipNamespace = {}));\n/**\n * Check if the given value is a {@link CaipChainId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipChainId}.\n */\nfunction isCaipChainId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipChainIdStruct);\n}\nexports.isCaipChainId = isCaipChainId;\n/**\n * Check if the given value is a {@link CaipNamespace}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipNamespace}.\n */\nfunction isCaipNamespace(value) {\n    return (0, superstruct_1.is)(value, exports.CaipNamespaceStruct);\n}\nexports.isCaipNamespace = isCaipNamespace;\n/**\n * Check if the given value is a {@link CaipReference}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipReference}.\n */\nfunction isCaipReference(value) {\n    return (0, superstruct_1.is)(value, exports.CaipReferenceStruct);\n}\nexports.isCaipReference = isCaipReference;\n/**\n * Check if the given value is a {@link CaipAccountId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipAccountId}.\n */\nfunction isCaipAccountId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountIdStruct);\n}\nexports.isCaipAccountId = isCaipAccountId;\n/**\n * Check if a value is a {@link CaipAccountAddress}.\n *\n * @param value - The value to validate.\n * @returns True if the value is a valid {@link CaipAccountAddress}.\n */\nfunction isCaipAccountAddress(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountAddressStruct);\n}\nexports.isCaipAccountAddress = isCaipAccountAddress;\n/**\n * Parse a CAIP-2 chain ID to an object containing the namespace and reference.\n * This validates the CAIP-2 chain ID before parsing it.\n *\n * @param caipChainId - The CAIP-2 chain ID to validate and parse.\n * @returns The parsed CAIP-2 chain ID.\n */\nfunction parseCaipChainId(caipChainId) {\n    const match = exports.CAIP_CHAIN_ID_REGEX.exec(caipChainId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP chain ID.');\n    }\n    return {\n        namespace: match.groups.namespace,\n        reference: match.groups.reference,\n    };\n}\nexports.parseCaipChainId = parseCaipChainId;\n/**\n * Parse an CAIP-10 account ID to an object containing the chain ID, parsed chain ID, and account address.\n * This validates the CAIP-10 account ID before parsing it.\n *\n * @param caipAccountId - The CAIP-10 account ID to validate and parse.\n * @returns The parsed CAIP-10 account ID.\n */\nfunction parseCaipAccountId(caipAccountId) {\n    const match = exports.CAIP_ACCOUNT_ID_REGEX.exec(caipAccountId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP account ID.');\n    }\n    return {\n        address: match.groups.accountAddress,\n        chainId: match.groups.chainId,\n        chain: {\n            namespace: match.groups.namespace,\n            reference: match.groups.reference,\n        },\n    };\n}\nexports.parseCaipAccountId = parseCaipAccountId;\n/**\n * Chain ID as defined per the CAIP-2\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md}.\n *\n * It defines a way to uniquely identify any blockchain in a human-readable\n * way.\n *\n * @param namespace - The standard (ecosystem) of similar blockchains.\n * @param reference - Identify of a blockchain within a given namespace.\n * @throws {@link Error}\n * This exception is thrown if the inputs does not comply with the CAIP-2\n * syntax specification\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md#syntax}.\n * @returns A CAIP chain ID.\n */\nfunction toCaipChainId(namespace, reference) {\n    if (!isCaipNamespace(namespace)) {\n        throw new Error(`Invalid \"namespace\", must match: ${exports.CAIP_NAMESPACE_REGEX.toString()}`);\n    }\n    if (!isCaipReference(reference)) {\n        throw new Error(`Invalid \"reference\", must match: ${exports.CAIP_REFERENCE_REGEX.toString()}`);\n    }\n    return `${namespace}:${reference}`;\n}\nexports.toCaipChainId = toCaipChainId;\n//# sourceMappingURL=caip-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChecksumStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst base64_1 = require(\"./base64.cjs\");\nexports.ChecksumStruct = (0, superstruct_1.size)((0, base64_1.base64)((0, superstruct_1.string)(), { paddingRequired: true }), 44, 44);\n//# sourceMappingURL=checksum.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\nconst NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1.StrictHexStruct]);\nconst NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);\nconst BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);\nconst BytesLikeStruct = (0, superstruct_1.union)([hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);\nconst BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1.StrictHexStruct]), bytes_1.hexToBytes);\nconst HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nfunction createNumber(value) {\n    try {\n        const result = (0, superstruct_1.create)(value, NumberCoercer);\n        (0, assert_1.assert)(Number.isFinite(result), `Expected a number-like value, got \"${value}\".`);\n        return result;\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${value}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createNumber = createNumber;\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nfunction createBigInt(value) {\n    try {\n        // The `BigInt` constructor throws if the value is not a number-like value.\n        // There is no need to validate the value manually.\n        return (0, superstruct_1.create)(value, BigIntCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBigInt = createBigInt;\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nfunction createBytes(value) {\n    if (typeof value === 'string' && value.toLowerCase() === '0x') {\n        return new Uint8Array();\n    }\n    try {\n        return (0, superstruct_1.create)(value, BytesCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBytes = createBytes;\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nfunction createHex(value) {\n    if ((value instanceof Uint8Array && value.length === 0) ||\n        (typeof value === 'string' && value.toLowerCase() === '0x')) {\n        return '0x';\n    }\n    try {\n        return (0, superstruct_1.create)(value, HexCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createHex = createHex;\n//# sourceMappingURL=coercers.cjs.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _FrozenMap_map, _FrozenSet_set;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FrozenSet = exports.FrozenMap = void 0;\n/**\n * A {@link ReadonlyMap} that cannot be modified after instantiation.\n * The implementation uses an inner map hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this map.\n */\nclass FrozenMap {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").size;\n    }\n    [(_FrozenMap_map = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\")[Symbol.iterator]();\n    }\n    constructor(entries) {\n        _FrozenMap_map.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner map.\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").forEach((value, key, _map) => callbackfn.call(thisArg, value, key, this));\n    }\n    get(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").get(key);\n    }\n    has(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").has(key);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").values();\n    }\n    toString() {\n        return `FrozenMap(${this.size}) {${this.size > 0\n            ? ` ${[...this.entries()]\n                .map(([key, value]) => `${String(key)} => ${String(value)}`)\n                .join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenMap = FrozenMap;\n/**\n * A {@link ReadonlySet} that cannot be modified after instantiation.\n * The implementation uses an inner set hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this set.\n */\nclass FrozenSet {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").size;\n    }\n    [(_FrozenSet_set = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\")[Symbol.iterator]();\n    }\n    constructor(values) {\n        _FrozenSet_set.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner set.\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));\n    }\n    has(value) {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").has(value);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").values();\n    }\n    toString() {\n        return `FrozenSet(${this.size}) {${this.size > 0\n            ? ` ${[...this.values()].map((member) => String(member)).join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenSet = FrozenSet;\nObject.freeze(FrozenMap);\nObject.freeze(FrozenMap.prototype);\nObject.freeze(FrozenSet);\nObject.freeze(FrozenSet.prototype);\n//# sourceMappingURL=collections.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=encryption-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapError = exports.getErrorMessage = exports.isErrorWithStack = exports.isErrorWithMessage = exports.isErrorWithCode = void 0;\nconst pony_cause_1 = require(\"pony-cause\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * Type guard for determining whether the given value is an instance of Error.\n * For errors generated via `fs.promises`, `error instanceof Error` won't work,\n * so we have to come up with another way of testing.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isError(error) {\n    return (error instanceof Error ||\n        ((0, misc_1.isObject)(error) && error.constructor.name === 'Error'));\n}\n/**\n * Type guard for determining whether the given value is an error object with a\n * `code` property such as the type of error that Node throws for filesystem\n * operations, etc.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithCode(error) {\n    return typeof error === 'object' && error !== null && 'code' in error;\n}\nexports.isErrorWithCode = isErrorWithCode;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithMessage(error) {\n    return typeof error === 'object' && error !== null && 'message' in error;\n}\nexports.isErrorWithMessage = isErrorWithMessage;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `stack` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithStack(error) {\n    return typeof error === 'object' && error !== null && 'stack' in error;\n}\nexports.isErrorWithStack = isErrorWithStack;\n/**\n * Attempts to obtain the message from a possible error object, defaulting to an\n * empty string if it is impossible to do so.\n *\n * @param error - The possible error to get the message from.\n * @returns The message if `error` is an object with a `message` property;\n * the string version of `error` if it is not `undefined` or `null`; otherwise\n * an empty string.\n */\nfunction getErrorMessage(error) {\n    if (isErrorWithMessage(error) && typeof error.message === 'string') {\n        return error.message;\n    }\n    if ((0, misc_1.isNullOrUndefined)(error)) {\n        return '';\n    }\n    return String(error);\n}\nexports.getErrorMessage = getErrorMessage;\n/**\n * Builds a new error object, linking it to the original error via the `cause`\n * property if it is an Error.\n *\n * This function is useful to reframe error messages in general, but is\n * _critical_ when interacting with any of Node's filesystem functions as\n * provided via `fs.promises`, because these do not produce stack traces in the\n * case of an I/O error (see <https://github.com/nodejs/node/issues/30944>).\n *\n * @param originalError - The error to be wrapped (something throwable).\n * @param message - The desired message of the new error.\n * @returns A new error object.\n */\nfunction wrapError(originalError, message) {\n    if (isError(originalError)) {\n        let error;\n        if (Error.length === 2) {\n            // for some reason `tsserver` is not complaining that the\n            // Error constructor doesn't support a second argument in the editor,\n            // but `tsc` does. Error causes are not supported by our current tsc target (ES2020, we need ES2022 to make this work)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new Error(message, { cause: originalError });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new pony_cause_1.ErrorWithCause(message, { cause: originalError });\n        }\n        if (isErrorWithCode(originalError)) {\n            error.code = originalError.code;\n        }\n        return error;\n    }\n    if (message.length > 0) {\n        return new Error(`${String(originalError)}: ${message}`);\n    }\n    return new Error(String(originalError));\n}\nexports.wrapError = wrapError;\n//# sourceMappingURL=errors.cjs.map","import { cloneDeep } from 'lodash';\nimport { isObject } from '@metamask/utils';\n\nexport const version = 85;\n\n/**\n * Remove the now-obsolete network controller `previousProviderStore` state.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (!isObject(state.NetworkController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController is ${typeof state.NetworkController}`,\n      ),\n    );\n    return state;\n  }\n\n  delete state.NetworkController.previousProviderStore;\n\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.remove0x = exports.add0x = exports.isValidChecksumAddress = exports.getChecksumAddress = exports.isValidHexAddress = exports.assertIsStrictHexString = exports.assertIsHexString = exports.isStrictHexString = exports.isHexString = exports.HexChecksumAddressStruct = exports.HexAddressStruct = exports.StrictHexStruct = exports.HexStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nexports.HexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^(?:0x)?[0-9a-f]+$/iu);\nexports.StrictHexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]+$/iu);\nexports.HexAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]{40}$/u);\nexports.HexChecksumAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-fA-F]{40}$/u);\n/**\n * Check if a string is a valid hex string.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isHexString(value) {\n    return (0, superstruct_1.is)(value, exports.HexStruct);\n}\nexports.isHexString = isHexString;\n/**\n * Strictly check if a string is a valid hex string. A valid hex string must\n * start with the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isStrictHexString(value) {\n    return (0, superstruct_1.is)(value, exports.StrictHexStruct);\n}\nexports.isStrictHexString = isStrictHexString;\n/**\n * Assert that a value is a valid hex string.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsHexString(value) {\n    (0, assert_1.assert)(isHexString(value), 'Value must be a hexadecimal string.');\n}\nexports.assertIsHexString = assertIsHexString;\n/**\n * Assert that a value is a valid hex string. A valid hex string must start with\n * the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsStrictHexString(value) {\n    (0, assert_1.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with \"0x\".');\n}\nexports.assertIsStrictHexString = assertIsStrictHexString;\n/**\n * Validate that the passed prefixed hex string is an all-lowercase\n * hex address, or a valid mixed-case checksum address.\n *\n * @param possibleAddress - Input parameter to check against.\n * @returns Whether or not the input is a valid hex address.\n */\nfunction isValidHexAddress(possibleAddress) {\n    return ((0, superstruct_1.is)(possibleAddress, exports.HexAddressStruct) ||\n        isValidChecksumAddress(possibleAddress));\n}\nexports.isValidHexAddress = isValidHexAddress;\n/**\n * Encode a passed hex string as an ERC-55 mixed-case checksum address.\n *\n * @param address - The hex address to encode.\n * @returns The address encoded according to ERC-55.\n * @see https://eips.ethereum.org/EIPS/eip-55\n */\nfunction getChecksumAddress(address) {\n    (0, assert_1.assert)((0, superstruct_1.is)(address, exports.HexChecksumAddressStruct), 'Invalid hex address.');\n    const unPrefixed = remove0x(address.toLowerCase());\n    const unPrefixedHash = remove0x((0, bytes_1.bytesToHex)((0, sha3_1.keccak_256)(unPrefixed)));\n    return `0x${unPrefixed\n        .split('')\n        .map((character, nibbleIndex) => {\n        const hashCharacter = unPrefixedHash[nibbleIndex];\n        (0, assert_1.assert)((0, superstruct_1.is)(hashCharacter, (0, superstruct_1.string)()), 'Hash shorter than address.');\n        return parseInt(hashCharacter, 16) > 7\n            ? character.toUpperCase()\n            : character;\n    })\n        .join('')}`;\n}\nexports.getChecksumAddress = getChecksumAddress;\n/**\n * Validate that the passed hex string is a valid ERC-55 mixed-case\n * checksum address.\n *\n * @param possibleChecksum - The hex address to check.\n * @returns True if the address is a checksum address.\n */\nfunction isValidChecksumAddress(possibleChecksum) {\n    if (!(0, superstruct_1.is)(possibleChecksum, exports.HexChecksumAddressStruct)) {\n        return false;\n    }\n    return getChecksumAddress(possibleChecksum) === possibleChecksum;\n}\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Add the `0x`-prefix to a hexadecimal string. If the string already has the\n * prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to add the prefix to.\n * @returns The prefixed hexadecimal string.\n */\nfunction add0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x')) {\n        return hexadecimal;\n    }\n    if (hexadecimal.startsWith('0X')) {\n        return `0x${hexadecimal.substring(2)}`;\n    }\n    return `0x${hexadecimal}`;\n}\nexports.add0x = add0x;\n/**\n * Remove the `0x`-prefix from a hexadecimal string. If the string doesn't have\n * the prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to remove the prefix from.\n * @returns The un-prefixed hexadecimal string.\n */\nfunction remove0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x') || hexadecimal.startsWith('0X')) {\n        return hexadecimal.substring(2);\n    }\n    return hexadecimal;\n}\nexports.remove0x = remove0x;\n//# sourceMappingURL=hex.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./assert.cjs\"), exports);\n__exportStar(require(\"./base64.cjs\"), exports);\n__exportStar(require(\"./bytes.cjs\"), exports);\n__exportStar(require(\"./caip-types.cjs\"), exports);\n__exportStar(require(\"./checksum.cjs\"), exports);\n__exportStar(require(\"./coercers.cjs\"), exports);\n__exportStar(require(\"./collections.cjs\"), exports);\n__exportStar(require(\"./encryption-types.cjs\"), exports);\n__exportStar(require(\"./errors.cjs\"), exports);\n__exportStar(require(\"./hex.cjs\"), exports);\n__exportStar(require(\"./json.cjs\"), exports);\n__exportStar(require(\"./keyring.cjs\"), exports);\n__exportStar(require(\"./logging.cjs\"), exports);\n__exportStar(require(\"./misc.cjs\"), exports);\n__exportStar(require(\"./number.cjs\"), exports);\n__exportStar(require(\"./opaque.cjs\"), exports);\n__exportStar(require(\"./promise.cjs\"), exports);\n__exportStar(require(\"./time.cjs\"), exports);\n__exportStar(require(\"./transaction-types.cjs\"), exports);\n__exportStar(require(\"./versions.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.getJsonSize = exports.getSafeJson = exports.isValidJson = exports.JsonStruct = exports.UnsafeJsonStruct = exports.exactOptional = exports.object = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * A struct to check if the given value is a valid object, with support for\n * {@link exactOptional} types.\n *\n * @param schema - The schema of the object.\n * @returns A struct to check if the given value is an object.\n */\nconst object = (schema) => \n// The type is slightly different from a regular object struct, because we\n// want to make properties with `undefined` in their type optional, but not\n// `undefined` itself. This means that we need a type cast.\n(0, superstruct_1.object)(schema);\nexports.object = object;\n/**\n * Check the last field of a path is present.\n *\n * @param context - The context to check.\n * @param context.path - The path to check.\n * @param context.branch - The branch to check.\n * @returns Whether the last field of a path is present.\n */\nfunction hasOptional({ path, branch }) {\n    const field = path[path.length - 1];\n    return (0, misc_1.hasProperty)(branch[branch.length - 2], field);\n}\n/**\n * A struct which allows the property of an object to be absent, or to be present\n * as long as it's valid and not set to `undefined`.\n *\n * This struct should be used in conjunction with the {@link object} from this\n * library, to get proper type inference.\n *\n * @param struct - The struct to check the value against, if present.\n * @returns A struct to check if the given value is valid, or not present.\n * @example\n * ```ts\n * const struct = object({\n *   foo: exactOptional(string()),\n *   bar: exactOptional(number()),\n *   baz: optional(boolean()),\n *   qux: unknown(),\n * });\n *\n * type Type = Infer<typeof struct>;\n * // Type is equivalent to:\n * // {\n * //   foo?: string;\n * //   bar?: number;\n * //   baz?: boolean | undefined;\n * //   qux: unknown;\n * // }\n * ```\n */\nfunction exactOptional(struct) {\n    return new superstruct_1.Struct({\n        ...struct,\n        type: `optional ${struct.type}`,\n        validator: (value, context) => !hasOptional(context) || struct.validator(value, context),\n        refiner: (value, context) => !hasOptional(context) || struct.refiner(value, context),\n    });\n}\nexports.exactOptional = exactOptional;\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () => (0, superstruct_1.define)('finite number', (value) => {\n    return (0, superstruct_1.is)(value, (0, superstruct_1.number)()) && Number.isFinite(value);\n});\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexports.UnsafeJsonStruct = (0, superstruct_1.union)([\n    (0, superstruct_1.literal)(null),\n    (0, superstruct_1.boolean)(),\n    finiteNumber(),\n    (0, superstruct_1.string)(),\n    (0, superstruct_1.array)((0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n    (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n]);\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexports.JsonStruct = (0, superstruct_1.coerce)(exports.UnsafeJsonStruct, (0, superstruct_1.any)(), (value) => {\n    (0, assert_1.assertStruct)(value, exports.UnsafeJsonStruct);\n    return JSON.parse(JSON.stringify(value, (propKey, propValue) => {\n        // Strip __proto__ and constructor properties to prevent prototype pollution.\n        if (propKey === '__proto__' || propKey === 'constructor') {\n            return undefined;\n        }\n        return propValue;\n    }));\n});\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nfunction isValidJson(value) {\n    try {\n        getSafeJson(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexports.isValidJson = isValidJson;\n/**\n * Validate and return sanitized JSON.\n *\n * Note:\n * This function uses sanitized JsonStruct for validation\n * that applies stringify and then parse of a value provided\n * to ensure that there are no getters which can have side effects\n * that can cause security issues.\n *\n * @param value - JSON structure to be processed.\n * @returns Sanitized JSON structure.\n */\nfunction getSafeJson(value) {\n    return (0, superstruct_1.create)(value, exports.JsonStruct);\n}\nexports.getSafeJson = getSafeJson;\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nfunction getJsonSize(value) {\n    (0, assert_1.assertStruct)(value, exports.JsonStruct, 'Invalid JSON value');\n    const json = JSON.stringify(value);\n    return new TextEncoder().encode(json).byteLength;\n}\nexports.getJsonSize = getJsonSize;\n/**\n * The string '2.0'.\n */\nexports.jsonrpc2 = '2.0';\nexports.JsonRpcVersionStruct = (0, superstruct_1.literal)(exports.jsonrpc2);\nexports.JsonRpcIdStruct = (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.string)()]));\nexports.JsonRpcErrorStruct = (0, exports.object)({\n    code: (0, superstruct_1.integer)(),\n    message: (0, superstruct_1.string)(),\n    data: exactOptional(exports.JsonStruct),\n    stack: exactOptional((0, superstruct_1.string)()),\n});\nexports.JsonRpcParamsStruct = (0, superstruct_1.union)([(0, superstruct_1.record)((0, superstruct_1.string)(), exports.JsonStruct), (0, superstruct_1.array)(exports.JsonStruct)]);\nexports.JsonRpcRequestStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\nexports.JsonRpcNotificationStruct = (0, exports.object)({\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nfunction isJsonRpcNotification(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcNotificationStruct);\n}\nexports.isJsonRpcNotification = isJsonRpcNotification;\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nfunction assertIsJsonRpcNotification(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcNotificationStruct, 'Invalid JSON-RPC notification', ErrorWrapper);\n}\nexports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nfunction isJsonRpcRequest(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcRequestStruct);\n}\nexports.isJsonRpcRequest = isJsonRpcRequest;\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nfunction assertIsJsonRpcRequest(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcRequestStruct, 'Invalid JSON-RPC request', ErrorWrapper);\n}\nexports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;\nexports.PendingJsonRpcResponseStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: (0, superstruct_1.optional)((0, superstruct_1.unknown)()),\n    error: (0, superstruct_1.optional)(exports.JsonRpcErrorStruct),\n});\nexports.JsonRpcSuccessStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: exports.JsonStruct,\n});\nexports.JsonRpcFailureStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    error: exports.JsonRpcErrorStruct,\n});\nexports.JsonRpcResponseStruct = (0, superstruct_1.union)([\n    exports.JsonRpcSuccessStruct,\n    exports.JsonRpcFailureStruct,\n]);\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nfunction isPendingJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.PendingJsonRpcResponseStruct);\n}\nexports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nfunction assertIsPendingJsonRpcResponse(response, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(response, exports.PendingJsonRpcResponseStruct, 'Invalid pending JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nfunction isJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.JsonRpcResponseStruct);\n}\nexports.isJsonRpcResponse = isJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nfunction assertIsJsonRpcResponse(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcResponseStruct, 'Invalid JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nfunction isJsonRpcSuccess(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcSuccessStruct);\n}\nexports.isJsonRpcSuccess = isJsonRpcSuccess;\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nfunction assertIsJsonRpcSuccess(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcSuccessStruct, 'Invalid JSON-RPC success response', ErrorWrapper);\n}\nexports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nfunction isJsonRpcFailure(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcFailureStruct);\n}\nexports.isJsonRpcFailure = isJsonRpcFailure;\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nfunction assertIsJsonRpcFailure(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcFailureStruct, 'Invalid JSON-RPC failure response', ErrorWrapper);\n}\nexports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nfunction isJsonRpcError(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcErrorStruct);\n}\nexports.isJsonRpcError = isJsonRpcError;\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nfunction assertIsJsonRpcError(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcErrorStruct, 'Invalid JSON-RPC error', ErrorWrapper);\n}\nexports.assertIsJsonRpcError = assertIsJsonRpcError;\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nfunction getJsonRpcIdValidator(options) {\n    const { permitEmptyString, permitFractions, permitNull } = {\n        permitEmptyString: true,\n        permitFractions: false,\n        permitNull: true,\n        ...options,\n    };\n    /**\n     * Type guard for {@link JsonRpcId}.\n     *\n     * @param id - The JSON-RPC ID value to check.\n     * @returns Whether the given ID is valid per the options given to the\n     * factory.\n     */\n    const isValidJsonRpcId = (id) => {\n        return Boolean((typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n            (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n            (permitNull && id === null));\n    };\n    return isValidJsonRpcId;\n}\nexports.getJsonRpcIdValidator = getJsonRpcIdValidator;\n//# sourceMappingURL=json.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=keyring.cjs.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createModuleLogger = exports.createProjectLogger = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst globalLogger = (0, debug_1.default)('metamask');\n/**\n * Creates a logger via the `debug` library whose log messages will be tagged\n * using the name of your project. By default, such messages will be\n * suppressed, but you can reveal them by setting the `DEBUG` environment\n * variable to `metamask:<projectName>`. You can also set this variable to\n * `metamask:*` if you want to see log messages from all MetaMask projects that\n * are also using this function to create their loggers.\n *\n * @param projectName - The name of your project. This should be the name of\n * your NPM package if you're developing one.\n * @returns An instance of `debug`.\n */\nfunction createProjectLogger(projectName) {\n    return globalLogger.extend(projectName);\n}\nexports.createProjectLogger = createProjectLogger;\n/**\n * Creates a logger via the `debug` library which is derived from the logger for\n * the whole project whose log messages will be tagged using the name of your\n * module. By default, such messages will be suppressed, but you can reveal them\n * by setting the `DEBUG` environment variable to\n * `metamask:<projectName>:<moduleName>`. You can also set this variable to\n * `metamask:<projectName>:*` if you want to see log messages from the project,\n * or `metamask:*` if you want to see log messages from all MetaMask projects.\n *\n * @param projectLogger - The logger created via {@link createProjectLogger}.\n * @param moduleName - The name of your module. You could use the name of the\n * file where you're using this logger or some other name.\n * @returns An instance of `debug`.\n */\nfunction createModuleLogger(projectLogger, moduleName) {\n    return projectLogger.extend(moduleName);\n}\nexports.createModuleLogger = createModuleLogger;\n//# sourceMappingURL=logging.cjs.map","\"use strict\";\n//\n// Types\n//\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.getKnownPropertyNames = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;\n//\n// Type Guards\n//\n/**\n * A {@link NonEmptyArray} type guard.\n *\n * @template Element - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Type guard for \"nullishness\".\n *\n * @param value - Any value.\n * @returns `true` if the value is null or undefined, `false` otherwise.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nfunction isObject(value) {\n    return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\nexports.isObject = isObject;\n//\n// Other utility functions\n//\n/**\n * A type guard for ensuring an object has a property.\n *\n * @param objectToCheck - The object to check.\n * @param name - The property name to check for.\n * @returns Whether the specified object has an own property with the specified\n * name, regardless of whether it is enumerable or not.\n */\nconst hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);\nexports.hasProperty = hasProperty;\n/**\n * `Object.getOwnPropertyNames()` is intentionally generic: it returns the\n * immediate property names of an object, but it cannot make guarantees about\n * the contents of that object, so the type of the property names is merely\n * `string[]`. While this is technically accurate, it is also unnecessary if we\n * have an object with a type that we own (such as an enum).\n *\n * @param object - The plain object.\n * @returns The own property names of the object which are assigned a type\n * derived from the object itself.\n */\nfunction getKnownPropertyNames(object) {\n    return Object.getOwnPropertyNames(object);\n}\nexports.getKnownPropertyNames = getKnownPropertyNames;\n/**\n * Predefined sizes (in Bytes) of specific parts of JSON structure.\n */\nvar JsonSize;\n(function (JsonSize) {\n    JsonSize[JsonSize[\"Null\"] = 4] = \"Null\";\n    JsonSize[JsonSize[\"Comma\"] = 1] = \"Comma\";\n    JsonSize[JsonSize[\"Wrapper\"] = 1] = \"Wrapper\";\n    JsonSize[JsonSize[\"True\"] = 4] = \"True\";\n    JsonSize[JsonSize[\"False\"] = 5] = \"False\";\n    JsonSize[JsonSize[\"Quote\"] = 1] = \"Quote\";\n    JsonSize[JsonSize[\"Colon\"] = 1] = \"Colon\";\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    JsonSize[JsonSize[\"Date\"] = 24] = \"Date\";\n})(JsonSize = exports.JsonSize || (exports.JsonSize = {}));\n/**\n * Regular expression with pattern matching for (special) escaped characters.\n */\nexports.ESCAPE_CHARACTERS_REGEXP = /\"|\\\\|\\n|\\r|\\t/gu;\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nfunction isPlainObject(value) {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n    try {\n        let proto = value;\n        while (Object.getPrototypeOf(proto) !== null) {\n            proto = Object.getPrototypeOf(proto);\n        }\n        return Object.getPrototypeOf(value) === proto;\n    }\n    catch (_) {\n        return false;\n    }\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Check if character is ASCII.\n *\n * @param character - Character.\n * @returns True if a character code is ASCII, false if not.\n */\nfunction isASCII(character) {\n    return character.charCodeAt(0) <= 127;\n}\nexports.isASCII = isASCII;\n/**\n * Calculate string size.\n *\n * @param value - String value to calculate size.\n * @returns Number of bytes used to store whole string value.\n */\nfunction calculateStringSize(value) {\n    const size = value.split('').reduce((total, character) => {\n        if (isASCII(character)) {\n            return total + 1;\n        }\n        return total + 2;\n    }, 0);\n    // Also detect characters that need backslash escape\n    return size + (value.match(exports.ESCAPE_CHARACTERS_REGEXP) ?? []).length;\n}\nexports.calculateStringSize = calculateStringSize;\n/**\n * Calculate size of a number ofter JSON serialization.\n *\n * @param value - Number value to calculate size.\n * @returns Number of bytes used to store whole number in JSON.\n */\nfunction calculateNumberSize(value) {\n    return value.toString().length;\n}\nexports.calculateNumberSize = calculateNumberSize;\n//# sourceMappingURL=misc.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexToBigInt = exports.hexToNumber = exports.bigIntToHex = exports.numberToHex = void 0;\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n/**\n * Convert a number to a hexadecimal string. This verifies that the number is a\n * non-negative safe integer.\n *\n * To convert a `bigint` to a hexadecimal string instead, use\n * {@link bigIntToHex}.\n *\n * @example\n * ```typescript\n * numberToHex(0); // '0x0'\n * numberToHex(1); // '0x1'\n * numberToHex(16); // '0x10'\n * ```\n * @param value - The number to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the number is not a non-negative safe integer.\n */\nconst numberToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToHex` instead.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.numberToHex = numberToHex;\n/**\n * Convert a `bigint` to a hexadecimal string. This verifies that the `bigint`\n * is a non-negative integer.\n *\n * To convert a number to a hexadecimal string instead, use {@link numberToHex}.\n *\n * @example\n * ```typescript\n * bigIntToHex(0n); // '0x0'\n * bigIntToHex(1n); // '0x1'\n * bigIntToHex(16n); // '0x10'\n * ```\n * @param value - The `bigint` to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the `bigint` is not a non-negative integer.\n */\nconst bigIntToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative bigint.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert a hexadecimal string to a number. This verifies that the string is a\n * valid hex string, and that the resulting number is a safe integer. Both\n * \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a `bigint` instead, use\n * {@link hexToBigInt}.\n *\n * @example\n * ```typescript\n * hexToNumber('0x0'); // 0\n * hexToNumber('0x1'); // 1\n * hexToNumber('0x10'); // 16\n * ```\n * @param value - The hexadecimal string to convert to a number.\n * @returns The number.\n * @throws If the value is not a valid hexadecimal string, or if the resulting\n * number is not a safe integer.\n */\nconst hexToNumber = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // `parseInt` accepts values without the \"0x\"-prefix, whereas `Number` does\n    // not. Using this is slightly faster than `Number(add0x(value))`.\n    const numberValue = parseInt(value, 16);\n    (0, assert_1.assert)(Number.isSafeInteger(numberValue), 'Value is not a safe integer. Use `hexToBigInt` instead.');\n    return numberValue;\n};\nexports.hexToNumber = hexToNumber;\n/**\n * Convert a hexadecimal string to a `bigint`. This verifies that the string is\n * a valid hex string. Both \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a number instead, use {@link hexToNumber}.\n *\n * @example\n * ```typescript\n * hexToBigInt('0x0'); // 0n\n * hexToBigInt('0x1'); // 1n\n * hexToBigInt('0x10'); // 16n\n * ```\n * @param value - The hexadecimal string to convert to a `bigint`.\n * @returns The `bigint`.\n * @throws If the value is not a valid hexadecimal string.\n */\nconst hexToBigInt = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // The `BigInt` constructor requires the \"0x\"-prefix to parse a hex string.\n    return BigInt((0, hex_1.add0x)(value));\n};\nexports.hexToBigInt = hexToBigInt;\n//# sourceMappingURL=number.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=opaque.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDeferredPromise = void 0;\n/**\n * Create a defered Promise.\n *\n * If the Promise is rejected prior to a handler being added, this can result in an\n * `UnhandledPromiseRejection` error. Optionally this can be suppressed with the\n * `suppressUnhandledRejection` flag, as it's common to belatedly handle deferred Promises, or to\n * ignore them if they're no longer relevant (e.g. related to a cancelled request).\n *\n * However, be very careful that you have handled the Promise if you do this. Suppressing these\n * errors is dangerous, they exist for good reason. An unhandled rejection can hide errors, making\n * debugging extremely difficult. They should only be suppressed if you're confident that the\n * Promise is always handled correctly, in both the success and failure cases.\n *\n * @param args - The arguments.\n * @param args.suppressUnhandledRejection - This option adds an empty error handler\n * to the Promise to suppress the UnhandledPromiseRejection error. This can be\n * useful if the deferred Promise is sometimes intentionally not used.\n * @returns A deferred Promise.\n * @template Result - The result type of the Promise.\n */\nfunction createDeferredPromise({ suppressUnhandledRejection = false, } = {}) {\n    let resolve;\n    let reject;\n    const promise = new Promise((innerResolve, innerReject) => {\n        resolve = innerResolve;\n        reject = innerReject;\n    });\n    if (suppressUnhandledRejection) {\n        promise.catch((_error) => {\n            // This handler is used to suppress the UnhandledPromiseRejection error\n        });\n    }\n    // @ts-expect-error We know that these are assigned, but TypeScript doesn't\n    return { promise, resolve, reject };\n}\nexports.createDeferredPromise = createDeferredPromise;\n//# sourceMappingURL=promise.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */\nvar Duration;\n(function (Duration) {\n    /**\n     * A millisecond.\n     */\n    Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n    /**\n     * A second, in milliseconds.\n     */\n    Duration[Duration[\"Second\"] = 1000] = \"Second\";\n    /**\n     * A minute, in milliseconds.\n     */\n    Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n    /**\n     * An hour, in milliseconds.\n     */\n    Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n    /**\n     * A day, in milliseconds.\n     */\n    Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n    /**\n     * A week, in milliseconds.\n     */\n    Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n    /**\n     * A year, in milliseconds.\n     */\n    Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = (number) => Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name) => {\n    if (!isNonNegativeInteger(number)) {\n        throw new Error(`\"${name}\" must be a non-negative integer. Received: \"${number}\".`);\n    }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nfunction inMilliseconds(count, duration) {\n    assertIsNonNegativeInteger(count, 'count');\n    return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n    assertIsNonNegativeInteger(timestamp, 'timestamp');\n    return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;\n//# sourceMappingURL=time.cjs.map","import { hasProperty, isObject } from '@metamask/utils';\nimport { cloneDeep } from 'lodash';\n\nexport const version = 86;\n\n/**\n * Rename network controller `provider` state to `providerConfig`.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    hasProperty(state, 'NetworkController') &&\n    isObject(state.NetworkController) &&\n    hasProperty(state.NetworkController, 'provider')\n  ) {\n    const networkControllerState = state.NetworkController;\n    networkControllerState.providerConfig = networkControllerState.provider;\n    delete networkControllerState.provider;\n\n    return {\n      ...state,\n      NetworkController: networkControllerState,\n    };\n  }\n  if (!isObject(state.NetworkController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController is ${typeof state.NetworkController}`,\n      ),\n    );\n  } else if (!hasProperty(state.NetworkController, 'provider')) {\n    const thePost077SupplementFor086HasNotModifiedState =\n      state.NetworkController.providerConfig === undefined;\n    if (thePost077SupplementFor086HasNotModifiedState) {\n      global.sentry?.captureException?.(\n        new Error(\n          `typeof state.NetworkController.provider is ${typeof state\n            .NetworkController.provider}`,\n        ),\n      );\n    }\n  }\n\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=transaction-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst semver_1 = require(\"semver\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * A struct for validating a version string.\n */\nexports.VersionStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version', (value) => {\n    if ((0, semver_1.valid)(value) === null) {\n        return `Expected SemVer version, got \"${value}\"`;\n    }\n    return true;\n});\nexports.VersionRangeStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version range', (value) => {\n    if ((0, semver_1.validRange)(value) === null) {\n        return `Expected SemVer range, got \"${value}\"`;\n    }\n    return true;\n});\n/**\n * Checks whether a SemVer version is valid.\n *\n * @param version - A potential version.\n * @returns `true` if the version is valid, and `false` otherwise.\n */\nfunction isValidSemVerVersion(version) {\n    return (0, superstruct_1.is)(version, exports.VersionStruct);\n}\nexports.isValidSemVerVersion = isValidSemVerVersion;\n/**\n * Checks whether a SemVer version range is valid.\n *\n * @param versionRange - A potential version range.\n * @returns `true` if the version range is valid, and `false` otherwise.\n */\nfunction isValidSemVerRange(versionRange) {\n    return (0, superstruct_1.is)(versionRange, exports.VersionRangeStruct);\n}\nexports.isValidSemVerRange = isValidSemVerRange;\n/**\n * Asserts that a value is a valid concrete SemVer version.\n *\n * @param version - A potential SemVer concrete version.\n */\nfunction assertIsSemVerVersion(version) {\n    (0, assert_1.assertStruct)(version, exports.VersionStruct);\n}\nexports.assertIsSemVerVersion = assertIsSemVerVersion;\n/**\n * Asserts that a value is a valid SemVer range.\n *\n * @param range - A potential SemVer range.\n */\nfunction assertIsSemVerRange(range) {\n    (0, assert_1.assertStruct)(range, exports.VersionRangeStruct);\n}\nexports.assertIsSemVerRange = assertIsSemVerRange;\n/**\n * Checks whether a SemVer version is greater than another.\n *\n * @param version1 - The left-hand version.\n * @param version2 - The right-hand version.\n * @returns `version1 > version2`.\n */\nfunction gtVersion(version1, version2) {\n    return (0, semver_1.gt)(version1, version2);\n}\nexports.gtVersion = gtVersion;\n/**\n * Checks whether a SemVer version is greater than all possibilities in a range.\n *\n * @param version - A SemvVer version.\n * @param range - The range to check against.\n * @returns `version > range`.\n */\nfunction gtRange(version, range) {\n    return (0, semver_1.gtr)(version, range);\n}\nexports.gtRange = gtRange;\n/**\n * Returns whether a SemVer version satisfies a SemVer range.\n *\n * @param version - The SemVer version to check.\n * @param versionRange - The SemVer version range to check against.\n * @returns Whether the version satisfied the version range.\n */\nfunction satisfiesVersionRange(version, versionRange) {\n    return (0, semver_1.satisfies)(version, versionRange, {\n        includePrerelease: true,\n    });\n}\nexports.satisfiesVersionRange = satisfiesVersionRange;\n//# sourceMappingURL=versions.cjs.map",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, -1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    // If any number is NaN, return NaN.\r\n    function maxOrMin(args, n) {\r\n      var k, y,\r\n        i = 1,\r\n        x = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        y = new BigNumber(args[i]);\r\n        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n          x = y;\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) -- > 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","module.exports=[{ \"constant\": false, \"inputs\": [{ \"name\": \"_new\", \"type\": \"address\" }], \"name\": \"setOwner\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"totalSignatures\", \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }], \"payable\": false, \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"owner\", \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [], \"name\": \"drain\", \"outputs\": [], \"payable\": false, \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"name\": \"\", \"type\": \"bytes4\" }], \"name\": \"entries\", \"outputs\": [{ \"name\": \"\", \"type\": \"string\" }], \"payable\": false, \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"_method\", \"type\": \"string\" }], \"name\": \"register\", \"outputs\": [{ \"name\": \"\", \"type\": \"bool\" }], \"payable\": false, \"type\": \"function\" }, { \"inputs\": [], \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"name\": \"creator\", \"type\": \"address\" }, { \"indexed\": true, \"name\": \"signature\", \"type\": \"bytes4\" }, { \"indexed\": false, \"name\": \"method\", \"type\": \"string\" }], \"name\": \"Registered\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"name\": \"old\", \"type\": \"address\" }, { \"indexed\": true, \"name\": \"current\", \"type\": \"address\" }], \"name\": \"NewOwner\", \"type\": \"event\" }]\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MethodRegistry = void 0;\nconst ethjs_query_1 = __importDefault(require(\"@metamask/ethjs-query\"));\nconst ethjs_contract_1 = __importDefault(require(\"@metamask/ethjs-contract\"));\nconst registry_map_json_1 = __importDefault(require(\"./registry-map.json\"));\nconst abi_json_1 = __importDefault(require(\"./abi.json\"));\nclass MethodRegistry {\n    constructor(opts) {\n        if (!opts.provider) {\n            throw new Error(\"Missing required 'provider' option\");\n        }\n        const address = registry_map_json_1.default[opts.network || '1'];\n        if (!address) {\n            throw new Error('No method registry found on the requested network.');\n        }\n        const eth = new ethjs_query_1.default(opts.provider);\n        const contract = (0, ethjs_contract_1.default)(eth);\n        this.registry = contract(abi_json_1.default).at(address);\n    }\n    /**\n   * @param bytes - The `0x`-prefixed hexadecimal string representing the four-byte signature of the contract method to lookup.\n   */\n    async lookup(bytes) {\n        const result = await this.registry.entries(bytes);\n        if (result) {\n            return result[0];\n        }\n        return undefined;\n    }\n    parse(signature) {\n        const rawName = signature.match(/^([^)(]*)\\((.*)\\)([^)(]*)$/u);\n        let parsedName;\n        if (rawName) {\n            parsedName = rawName[1].charAt(0).toUpperCase() + rawName[1].slice(1).split(/(?=[A-Z])/u).join(' ');\n        }\n        else {\n            parsedName = '';\n        }\n        if (rawName) {\n            const match = signature.match(new RegExp(`${rawName[1]}\\\\(+([a-z1-9,()\\\\[\\\\]]+)\\\\)`, 'u'));\n            let matches;\n            let args = [];\n            if (match) {\n                matches = match[1].match(/[A-z1-9]+/gu);\n                if (matches) {\n                    args = matches.map((arg) => {\n                        return { type: arg };\n                    });\n                }\n            }\n            return {\n                name: parsedName,\n                args,\n            };\n        }\n        return {};\n    }\n}\nexports.MethodRegistry = MethodRegistry;\n//# sourceMappingURL=index.js.map","module.exports={\n    \"1\": \"0x44691B39d1a75dC4E0A0346CBB15E310e6ED1E86\"\n}\n","module.exports={\n  \"name\": \"@metamask/smart-transactions-controller\",\n  \"version\": \"13.0.0\",\n  \"description\": \"Improves success rates for swaps by trialing transactions privately and finding minimum fees\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/MetaMask/smart-transactions-controller.git\"\n  },\n  \"license\": \"SEE LICENSE IN LICENSE\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"files\": [\n    \"dist/\"\n  ],\n  \"scripts\": {\n    \"build\": \"tsc --project .\",\n    \"build:clean\": \"rm -rf dist && yarn build\",\n    \"build:link\": \"yarn build && cd dist && yarn link && rm -rf node_modules && cd ..\",\n    \"lint\": \"yarn lint:eslint && yarn lint:misc --check\",\n    \"lint:eslint\": \"eslint . --cache --ext js,ts\",\n    \"lint:fix\": \"yarn lint:eslint --fix && yarn lint:misc --write\",\n    \"lint:misc\": \"prettier '**/*.json' '**/*.md' '!CHANGELOG.md' '**/*.yml' '!.yarnrc.yml' --ignore-path .gitignore\",\n    \"prepack\": \"./scripts/prepack.sh\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watchAll\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.24.1\",\n    \"@ethereumjs/tx\": \"^5.2.1\",\n    \"@ethereumjs/util\": \"^9.0.2\",\n    \"@ethersproject/bytes\": \"^5.7.0\",\n    \"@metamask/base-controller\": \"^6.0.0\",\n    \"@metamask/controller-utils\": \"^11.0.0\",\n    \"@metamask/eth-json-rpc-provider\": \"^4.1.0\",\n    \"@metamask/eth-query\": \"^4.0.0\",\n    \"@metamask/network-controller\": \"^20.0.0\",\n    \"@metamask/polling-controller\": \"^8.0.0\",\n    \"@metamask/transaction-controller\": \"^34.0.0\",\n    \"bignumber.js\": \"^9.0.1\",\n    \"events\": \"^3.3.0\",\n    \"fast-json-patch\": \"^3.1.0\",\n    \"lodash\": \"^4.17.21\"\n  },\n  \"devDependencies\": {\n    \"@lavamoat/allow-scripts\": \"^2.3.1\",\n    \"@metamask/auto-changelog\": \"^3.1.0\",\n    \"@metamask/eslint-config\": \"^12.2.0\",\n    \"@metamask/eslint-config-jest\": \"^12.1.0\",\n    \"@metamask/eslint-config-nodejs\": \"^12.1.0\",\n    \"@metamask/eslint-config-typescript\": \"^12.1.0\",\n    \"@metamask/json-rpc-engine\": \"^9.0.0\",\n    \"@types/jest\": \"^26.0.24\",\n    \"@types/lodash\": \"^4.14.194\",\n    \"@types/node\": \"^18.19.17\",\n    \"@types/sinon\": \"^9.0.10\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.33.0\",\n    \"@typescript-eslint/parser\": \"^5.33.0\",\n    \"eslint\": \"^8.48.0\",\n    \"eslint-config-prettier\": \"^8.8.0\",\n    \"eslint-plugin-import\": \"^2.27.5\",\n    \"eslint-plugin-jest\": \"^27.1.5\",\n    \"eslint-plugin-jsdoc\": \"^39.2.9\",\n    \"eslint-plugin-n\": \"^15.7.0\",\n    \"eslint-plugin-prettier\": \"^4.2.1\",\n    \"eslint-plugin-promise\": \"^6.1.1\",\n    \"isomorphic-fetch\": \"^3.0.0\",\n    \"jest\": \"^29.7.0\",\n    \"nock\": \"^14.0.0-beta.7\",\n    \"prettier\": \"^2.8.8\",\n    \"prettier-plugin-packagejson\": \"^2.4.3\",\n    \"sinon\": \"^9.2.4\",\n    \"ts-jest\": \"^29.1.4\",\n    \"typescript\": \"~4.8.4\"\n  },\n  \"packageManager\": \"yarn@3.2.1\",\n  \"engines\": {\n    \"node\": \"^18.18 || >=20\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\",\n    \"registry\": \"https://registry.npmjs.org/\"\n  },\n  \"lavamoat\": {\n    \"allowScripts\": {\n      \"@lavamoat/preinstall-always-fail\": false,\n      \"@metamask/controller-utils>ethereumjs-util>ethereum-cryptography>keccak\": false,\n      \"@metamask/controller-utils>ethereumjs-util>ethereum-cryptography>secp256k1\": false,\n      \"@metamask/controller-utils>babel-runtime>core-js\": false,\n      \"@metamask/transaction-controller>@metamask/accounts-controller>@metamask/keyring-controller>ethereumjs-wallet>ethereum-cryptography>keccak\": false,\n      \"@metamask/transaction-controller>@metamask/accounts-controller>@metamask/keyring-controller>ethereumjs-wallet>ethereum-cryptography>secp256k1\": false\n    }\n  }\n}","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CronjobController_messenger, _CronjobController_dailyTimer, _CronjobController_timers, _CronjobController_snapIds;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CronjobController = exports.DAILY_TIMEOUT = void 0;\nconst base_controller_1 = require(\"@metamask/base-controller\");\nconst snaps_rpc_methods_1 = require(\"@metamask/snaps-rpc-methods\");\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst utils_1 = require(\"@metamask/utils\");\nconst __1 = require(\"../index.cjs\");\nconst Timer_1 = require(\"../snaps/Timer.cjs\");\nexports.DAILY_TIMEOUT = (0, utils_1.inMilliseconds)(24, utils_1.Duration.Hour);\nconst controllerName = 'CronjobController';\n/**\n * Use this controller to register and schedule periodically executed jobs\n * using RPC method hooks.\n */\nclass CronjobController extends base_controller_1.BaseController {\n    constructor({ messenger, state }) {\n        super({\n            messenger,\n            metadata: {\n                jobs: { persist: true, anonymous: false },\n            },\n            name: controllerName,\n            state: {\n                jobs: {},\n                ...state,\n            },\n        });\n        _CronjobController_messenger.set(this, void 0);\n        _CronjobController_dailyTimer.set(this, void 0);\n        _CronjobController_timers.set(this, void 0);\n        // Mapping from jobId to snapId\n        _CronjobController_snapIds.set(this, void 0);\n        __classPrivateFieldSet(this, _CronjobController_timers, new Map(), \"f\");\n        __classPrivateFieldSet(this, _CronjobController_snapIds, new Map(), \"f\");\n        __classPrivateFieldSet(this, _CronjobController_messenger, messenger, \"f\");\n        this._handleSnapRegisterEvent = this._handleSnapRegisterEvent.bind(this);\n        this._handleSnapUnregisterEvent =\n            this._handleSnapUnregisterEvent.bind(this);\n        this._handleEventSnapUpdated = this._handleEventSnapUpdated.bind(this);\n        // Subscribe to Snap events\n        /* eslint-disable @typescript-eslint/unbound-method */\n        this.messagingSystem.subscribe('SnapController:snapInstalled', this._handleSnapRegisterEvent);\n        this.messagingSystem.subscribe('SnapController:snapUninstalled', this._handleSnapUnregisterEvent);\n        this.messagingSystem.subscribe('SnapController:snapEnabled', this._handleSnapRegisterEvent);\n        this.messagingSystem.subscribe('SnapController:snapDisabled', this._handleSnapUnregisterEvent);\n        this.messagingSystem.subscribe('SnapController:snapUpdated', this._handleEventSnapUpdated);\n        /* eslint-enable @typescript-eslint/unbound-method */\n        this.dailyCheckIn().catch((error) => {\n            (0, snaps_utils_1.logError)(error);\n        });\n    }\n    /**\n     * Retrieve all cronjob specifications for all runnable snaps.\n     *\n     * @returns Array of Cronjob specifications.\n     */\n    getAllJobs() {\n        const snaps = this.messagingSystem.call('SnapController:getAll');\n        const filteredSnaps = (0, __1.getRunnableSnaps)(snaps);\n        const jobs = filteredSnaps.map((snap) => this.getSnapJobs(snap.id));\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        return jobs.flat().filter((job) => job !== undefined);\n    }\n    /**\n     * Retrieve all Cronjob specifications for a Snap.\n     *\n     * @param snapId - ID of a Snap.\n     * @returns Array of Cronjob specifications.\n     */\n    getSnapJobs(snapId) {\n        const permissions = __classPrivateFieldGet(this, _CronjobController_messenger, \"f\").call('PermissionController:getPermissions', snapId);\n        const permission = permissions?.[snaps_rpc_methods_1.SnapEndowments.Cronjob];\n        const definitions = (0, snaps_rpc_methods_1.getCronjobCaveatJobs)(permission);\n        return definitions?.map((definition, idx) => {\n            return { ...definition, id: `${snapId}-${idx}`, snapId };\n        });\n    }\n    /**\n     * Register cron jobs for a given snap by getting specification from a permission caveats.\n     * Once registered, each job will be scheduled.\n     *\n     * @param snapId - ID of a snap.\n     */\n    register(snapId) {\n        const jobs = this.getSnapJobs(snapId);\n        jobs?.forEach((job) => this.schedule(job));\n    }\n    /**\n     * Schedule a new job.\n     * This will interpret the cron expression and tell the timer to execute the job\n     * at the next suitable point in time.\n     * Job last run state will be initialized afterwards.\n     *\n     * Note: Schedule will be skipped if the job's execution time is too far in the future and\n     * will be revisited on a daily check.\n     *\n     * @param job - Cronjob specification.\n     */\n    schedule(job) {\n        if (__classPrivateFieldGet(this, _CronjobController_timers, \"f\").has(job.id)) {\n            return;\n        }\n        const parsed = (0, snaps_utils_1.parseCronExpression)(job.expression);\n        const next = parsed.next();\n        const now = new Date();\n        const ms = next.getTime() - now.getTime();\n        // Don't schedule this job yet as it is too far in the future\n        if (ms > exports.DAILY_TIMEOUT) {\n            return;\n        }\n        const timer = new Timer_1.Timer(ms);\n        timer.start(() => {\n            this.executeCronjob(job).catch((error) => {\n                // TODO: Decide how to handle errors.\n                (0, snaps_utils_1.logError)(error);\n            });\n            __classPrivateFieldGet(this, _CronjobController_timers, \"f\").delete(job.id);\n            this.schedule(job);\n        });\n        if (!this.state.jobs[job.id]?.lastRun) {\n            this.updateJobLastRunState(job.id, 0); // 0 for init, never ran actually\n        }\n        __classPrivateFieldGet(this, _CronjobController_timers, \"f\").set(job.id, timer);\n        __classPrivateFieldGet(this, _CronjobController_snapIds, \"f\").set(job.id, job.snapId);\n    }\n    /**\n     * Execute job.\n     *\n     * @param job - Cronjob specification.\n     */\n    async executeCronjob(job) {\n        this.updateJobLastRunState(job.id, Date.now());\n        await __classPrivateFieldGet(this, _CronjobController_messenger, \"f\").call('SnapController:handleRequest', {\n            snapId: job.snapId,\n            origin: '',\n            handler: snaps_utils_1.HandlerType.OnCronjob,\n            request: job.request,\n        });\n    }\n    /**\n     * Unregister all jobs related to the given snapId.\n     *\n     * @param snapId - ID of a snap.\n     */\n    unregister(snapId) {\n        const jobs = [...__classPrivateFieldGet(this, _CronjobController_snapIds, \"f\").entries()].filter(([_, jobSnapId]) => jobSnapId === snapId);\n        if (jobs.length) {\n            jobs.forEach(([id]) => {\n                const timer = __classPrivateFieldGet(this, _CronjobController_timers, \"f\").get(id);\n                if (timer) {\n                    timer.cancel();\n                    __classPrivateFieldGet(this, _CronjobController_timers, \"f\").delete(id);\n                    __classPrivateFieldGet(this, _CronjobController_snapIds, \"f\").delete(id);\n                }\n            });\n        }\n    }\n    /**\n     * Update time of a last run for the Cronjob specified by ID.\n     *\n     * @param jobId - ID of a cron job.\n     * @param lastRun - Unix timestamp when the job was last ran.\n     */\n    updateJobLastRunState(jobId, lastRun) {\n        this.update((state) => {\n            state.jobs[jobId] = {\n                lastRun,\n            };\n        });\n    }\n    /**\n     * Runs every 24 hours to check if new jobs need to be scheduled.\n     *\n     * This is necessary for longer running jobs that execute with more than 24 hours between them.\n     */\n    async dailyCheckIn() {\n        const jobs = this.getAllJobs();\n        for (const job of jobs) {\n            const parsed = (0, snaps_utils_1.parseCronExpression)(job.expression);\n            const lastRun = this.state.jobs[job.id]?.lastRun;\n            // If a job was supposed to run while we were shut down but wasn't we run it now\n            if (lastRun !== undefined &&\n                parsed.hasPrev() &&\n                parsed.prev().getTime() > lastRun) {\n                await this.executeCronjob(job);\n            }\n            // Try scheduling, will fail if an existing scheduled job is found\n            this.schedule(job);\n        }\n        __classPrivateFieldSet(this, _CronjobController_dailyTimer, new Timer_1.Timer(exports.DAILY_TIMEOUT), \"f\");\n        __classPrivateFieldGet(this, _CronjobController_dailyTimer, \"f\").start(() => {\n            this.dailyCheckIn().catch((error) => {\n                // TODO: Decide how to handle errors.\n                (0, snaps_utils_1.logError)(error);\n            });\n        });\n    }\n    /**\n     * Run controller teardown process and unsubscribe from Snap events.\n     */\n    destroy() {\n        super.destroy();\n        /* eslint-disable @typescript-eslint/unbound-method */\n        this.messagingSystem.unsubscribe('SnapController:snapInstalled', this._handleSnapRegisterEvent);\n        this.messagingSystem.unsubscribe('SnapController:snapUninstalled', this._handleSnapUnregisterEvent);\n        this.messagingSystem.unsubscribe('SnapController:snapEnabled', this._handleSnapRegisterEvent);\n        this.messagingSystem.unsubscribe('SnapController:snapDisabled', this._handleSnapUnregisterEvent);\n        this.messagingSystem.unsubscribe('SnapController:snapUpdated', this._handleEventSnapUpdated);\n        /* eslint-enable @typescript-eslint/unbound-method */\n        __classPrivateFieldGet(this, _CronjobController_snapIds, \"f\").forEach((snapId) => {\n            this.unregister(snapId);\n        });\n    }\n    /**\n     * Handle events that should cause cronjobs to be registered.\n     *\n     * @param snap - Basic Snap information.\n     */\n    _handleSnapRegisterEvent(snap) {\n        this.register(snap.id);\n    }\n    /**\n     * Handle events that should cause cronjobs to be unregistered.\n     *\n     * @param snap - Basic Snap information.\n     */\n    _handleSnapUnregisterEvent(snap) {\n        this.unregister(snap.id);\n    }\n    /**\n     * Handle cron jobs on 'snapUpdated' event.\n     *\n     * @param snap - Basic Snap information.\n     */\n    _handleEventSnapUpdated(snap) {\n        this.unregister(snap.id);\n        this.register(snap.id);\n    }\n}\nexports.CronjobController = CronjobController;\n_CronjobController_messenger = new WeakMap(), _CronjobController_dailyTimer = new WeakMap(), _CronjobController_timers = new WeakMap(), _CronjobController_snapIds = new WeakMap();\n//# sourceMappingURL=CronjobController.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./CronjobController.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.forceStrict = exports.validateMachine = void 0;\nconst utils_1 = require(\"@metamask/utils\");\nconst fsm_1 = require(\"@xstate/fsm\");\n/**\n * Validates the set-up of a @xstate/fsm machine.\n *\n * 1. Ensures that all named actions in the config have a provided implementation.\n *\n * @param machine - The machine to validate.\n * @throws {@link AssertionError}. If the validation fails.\n */\nfunction validateMachine(machine) {\n    (0, utils_1.assert)('_options' in machine, 'The machine is not an @xstate/fsm machine');\n    const typed = machine;\n    // 1.\n    const toArray = (obj) => {\n        if (Array.isArray(obj)) {\n            return obj;\n        }\n        else if (obj === undefined || obj === null) {\n            return [];\n        }\n        return [obj];\n    };\n    const allActions = new Set();\n    const addActions = (actions) => toArray(actions)\n        .flatMap((action) => {\n        if (typeof action === 'string') {\n            return [action];\n        }\n        (0, utils_1.assert)(typeof action === 'function');\n        return [];\n    })\n        .forEach(allActions.add.bind(allActions));\n    for (const state of Object.values(typed.config.states)) {\n        addActions(state.entry);\n        addActions(state.exit);\n        for (const transition of Object.values(state.on ?? {})) {\n            addActions(transition.actions);\n        }\n    }\n    allActions.forEach((action) => (0, utils_1.assert)(typed._options.actions !== undefined && action in typed._options.actions, `Action \"${action}\" doesn't have an implementation`));\n}\nexports.validateMachine = validateMachine;\n/**\n * Ensure that the interpreter is strict.\n * Strict means that the transition must occur.\n * The event must exist in .on {} state config and it's guard must succeed.\n *\n * The error will be thrown when an invalid `interpreter.send()` is called\n * and will be bubbled there.\n *\n * TODO(ritave): Doesn't support self transitions.\n *\n * @param interpreter - The interpreter that will be force into strict mode.\n * @throws {@link Error} Thrown when the transition is invalid.\n */\nfunction forceStrict(interpreter) {\n    // As soon as a listener subscribes, it is called. It might be called in\n    // an initial state which doesn't have the .changed property\n    let onInitialCalled = false;\n    interpreter.subscribe((state) => {\n        (0, utils_1.assert)(!onInitialCalled || state.changed, 'Invalid state transition');\n        onInitialCalled = true;\n    });\n    const ogSend = interpreter.send.bind(interpreter);\n    interpreter.send = (...args) => {\n        (0, utils_1.assert)(interpreter.status === fsm_1.InterpreterStatus.Running, 'Interpreter is stopped');\n        return ogSend(...args);\n    };\n}\nexports.forceStrict = forceStrict;\n//# sourceMappingURL=fsm.cjs.map","import { isObject } from '@metamask/utils';\nimport { cloneDeep } from 'lodash';\n\nexport const version = 87;\n\n/**\n * Remove the now-obsolete tokens controller `suggestedAssets` state.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (!isObject(state.TokensController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.TokensController is ${typeof state.TokensController}`,\n      ),\n    );\n    return state;\n  }\n\n  delete state.TokensController.suggestedAssets;\n\n  return state;\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./services/index.cjs\"), exports);\n__exportStar(require(\"./snaps/index.cjs\"), exports);\n__exportStar(require(\"./utils.cjs\"), exports);\n__exportStar(require(\"./cronjob/index.cjs\"), exports);\n__exportStar(require(\"./interface/index.cjs\"), exports);\n__exportStar(require(\"./insights/index.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SnapInsightsController_instances, _SnapInsightsController_hasInsight, _SnapInsightsController_getSnapsWithPermission, _SnapInsightsController_handleTransaction, _SnapInsightsController_handleSignatureStateChange, _SnapInsightsController_handleSignature, _SnapInsightsController_handleTransactionStatusUpdate, _SnapInsightsController_handleInsightCleanup, _SnapInsightsController_handleSnapRequest, _SnapInsightsController_handleSnapResponse;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SnapInsightsController = void 0;\nconst base_controller_1 = require(\"@metamask/base-controller\");\nconst snaps_rpc_methods_1 = require(\"@metamask/snaps-rpc-methods\");\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst utils_1 = require(\"@metamask/utils\");\nconst snaps_1 = require(\"../snaps/index.cjs\");\nconst controllerName = 'SnapInsightsController';\n/**\n * Controller for monitoring for new transactions and signatures to provide insight for.\n */\nclass SnapInsightsController extends base_controller_1.BaseController {\n    constructor({ messenger, state }) {\n        super({\n            messenger,\n            metadata: {\n                insights: { persist: false, anonymous: false },\n            },\n            name: controllerName,\n            state: { insights: {}, ...state },\n        });\n        _SnapInsightsController_instances.add(this);\n        this.messagingSystem.subscribe('TransactionController:unapprovedTransactionAdded', __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleTransaction).bind(this));\n        this.messagingSystem.subscribe('TransactionController:transactionStatusUpdated', __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleTransactionStatusUpdate).bind(this));\n        this.messagingSystem.subscribe('SignatureController:stateChange', __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleSignatureStateChange).bind(this));\n    }\n}\nexports.SnapInsightsController = SnapInsightsController;\n_SnapInsightsController_instances = new WeakSet(), _SnapInsightsController_hasInsight = function _SnapInsightsController_hasInsight(id) {\n    return (0, utils_1.hasProperty)(this.state.insights, id);\n}, _SnapInsightsController_getSnapsWithPermission = function _SnapInsightsController_getSnapsWithPermission(permissionName) {\n    const allSnaps = this.messagingSystem.call('SnapController:getAll');\n    const filteredSnaps = (0, snaps_1.getRunnableSnaps)(allSnaps);\n    return filteredSnaps.reduce((accumulator, snap) => {\n        const permissions = this.messagingSystem.call('PermissionController:getPermissions', snap.id);\n        if (permissions && (0, utils_1.hasProperty)(permissions, permissionName)) {\n            accumulator.push({\n                snapId: snap.id,\n                permission: permissions[permissionName],\n            });\n        }\n        return accumulator;\n    }, []);\n}, _SnapInsightsController_handleTransaction = function _SnapInsightsController_handleTransaction(transaction) {\n    const { id, txParams, chainId, origin } = transaction;\n    // This assumes that the transactions are EVM-compatible for now.\n    const caipChainId = `eip155:${parseInt(chainId, 16)}`;\n    const snaps = __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_getSnapsWithPermission).call(this, snaps_rpc_methods_1.SnapEndowments.TransactionInsight);\n    snaps.forEach(({ snapId, permission }) => {\n        const hasTransactionOriginCaveat = (0, snaps_rpc_methods_1.getTransactionOriginCaveat)(permission);\n        const transactionOrigin = hasTransactionOriginCaveat && origin ? origin : null;\n        this.update((state) => {\n            var _a;\n            (_a = state.insights)[id] ?? (_a[id] = {});\n            state.insights[id][snapId] = { snapId, loading: true };\n        });\n        __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleSnapRequest).call(this, {\n            snapId,\n            handler: snaps_utils_1.HandlerType.OnTransaction,\n            params: {\n                transaction: txParams,\n                chainId: caipChainId,\n                transactionOrigin,\n            },\n        })\n            .then((response) => __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleSnapResponse).call(this, {\n            id,\n            snapId,\n            response: response,\n        }))\n            .catch((error) => __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleSnapResponse).call(this, { id, snapId, error }));\n    });\n}, _SnapInsightsController_handleSignatureStateChange = function _SnapInsightsController_handleSignatureStateChange(state) {\n    // If any IDs have disappeared since the last state update, the insight may be cleaned up.\n    for (const id of Object.keys(this.state.insights)) {\n        if (!(0, utils_1.hasProperty)(state.unapprovedTypedMessages, id) &&\n            !(0, utils_1.hasProperty)(state.unapprovedPersonalMsgs, id)) {\n            __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleInsightCleanup).call(this, id);\n        }\n    }\n    if (state.unapprovedPersonalMsgCount > 0 ||\n        state.unapprovedTypedMessagesCount > 0) {\n        const snaps = __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_getSnapsWithPermission).call(this, snaps_rpc_methods_1.SnapEndowments.SignatureInsight);\n        // This isn't very efficient, but SignatureController doesn't expose a better event for us to use yet.\n        for (const personalSignature of Object.values(state.unapprovedPersonalMsgs)) {\n            __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleSignature).call(this, snaps, personalSignature);\n        }\n        for (const typedMessage of Object.values(state.unapprovedTypedMessages)) {\n            __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleSignature).call(this, snaps, typedMessage);\n        }\n    }\n}, _SnapInsightsController_handleSignature = function _SnapInsightsController_handleSignature(snaps, signature) {\n    const { id, msgParams } = signature;\n    if (__classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_hasInsight).call(this, id)) {\n        return;\n    }\n    const { from, data, signatureMethod, origin } = msgParams;\n    /**\n     * Both eth_signTypedData_v3 and eth_signTypedData_v4 methods\n     * need to be parsed because their data is stringified. All other\n     * signature methods do not, so they are ignored.\n     */\n    const shouldParse = signatureMethod === 'eth_signTypedData_v3' ||\n        signatureMethod === 'eth_signTypedData_v4';\n    const payload = {\n        from,\n        data: shouldParse ? JSON.parse(data) : data,\n        signatureMethod,\n    };\n    snaps.forEach(({ snapId, permission }) => {\n        const hasSignatureOriginCaveat = (0, snaps_rpc_methods_1.getSignatureOriginCaveat)(permission);\n        const signatureOrigin = origin && hasSignatureOriginCaveat ? origin : null;\n        this.update((state) => {\n            var _a;\n            (_a = state.insights)[id] ?? (_a[id] = {});\n            state.insights[id][snapId] = { snapId, loading: true };\n        });\n        __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleSnapRequest).call(this, {\n            snapId,\n            handler: snaps_utils_1.HandlerType.OnSignature,\n            params: { signature: payload, signatureOrigin },\n        })\n            .then((response) => __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleSnapResponse).call(this, {\n            id,\n            snapId,\n            response: response,\n        }))\n            .catch((error) => __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleSnapResponse).call(this, { id, snapId, error }));\n    });\n}, _SnapInsightsController_handleTransactionStatusUpdate = function _SnapInsightsController_handleTransactionStatusUpdate({ transactionMeta, }) {\n    if (transactionMeta.status !== 'unapproved') {\n        __classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_handleInsightCleanup).call(this, transactionMeta.id);\n    }\n}, _SnapInsightsController_handleInsightCleanup = function _SnapInsightsController_handleInsightCleanup(id) {\n    if (!__classPrivateFieldGet(this, _SnapInsightsController_instances, \"m\", _SnapInsightsController_hasInsight).call(this, id)) {\n        return;\n    }\n    // Delete interfaces from interface controller.\n    Object.values(this.state.insights[id])\n        .filter((insight) => insight.interfaceId)\n        .forEach((insight) => {\n        this.messagingSystem.call('SnapInterfaceController:deleteInterface', insight.interfaceId);\n    });\n    this.update((state) => {\n        delete state.insights[id];\n    });\n}, _SnapInsightsController_handleSnapRequest = \n/**\n * Handle sending a request to a given Snap with a given payload.\n *\n * @param args - An options bag.\n * @param args.snapId - The Snap ID.\n * @param args.handler - The handler to invoke.\n * @param args.params - The JSON-RPC params to send.\n * @returns The response from the Snap.\n */\nasync function _SnapInsightsController_handleSnapRequest({ snapId, handler, params, }) {\n    return this.messagingSystem.call('SnapController:handleRequest', {\n        snapId,\n        origin: '',\n        handler,\n        request: {\n            method: '',\n            params,\n        },\n    });\n}, _SnapInsightsController_handleSnapResponse = function _SnapInsightsController_handleSnapResponse({ id, snapId, response, error, }) {\n    this.update((state) => {\n        state.insights[id][snapId].loading = false;\n        state.insights[id][snapId].interfaceId = response?.id;\n        state.insights[id][snapId].severity = response?.severity;\n        state.insights[id][snapId].error = error?.message;\n    });\n};\n//# sourceMappingURL=SnapInsightsController.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./SnapInsightsController.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SnapInterfaceController_instances, _SnapInterfaceController_registerMessageHandlers, _SnapInterfaceController_validateArgs, _SnapInterfaceController_validateApproval, _SnapInterfaceController_triggerPhishingListUpdate, _SnapInterfaceController_checkPhishingList, _SnapInterfaceController_hasApprovalRequest, _SnapInterfaceController_acceptApprovalRequest, _SnapInterfaceController_validateContent;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SnapInterfaceController = void 0;\nconst base_controller_1 = require(\"@metamask/base-controller\");\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst utils_1 = require(\"@metamask/utils\");\nconst immer_1 = require(\"immer\");\nconst nanoid_1 = require(\"nanoid\");\nconst utils_2 = require(\"./utils.cjs\");\nconst MAX_UI_CONTENT_SIZE = 10000000; // 10 mb\nconst controllerName = 'SnapInterfaceController';\n/**\n * Use this controller to manage snaps UI interfaces using RPC method hooks.\n */\nclass SnapInterfaceController extends base_controller_1.BaseController {\n    constructor({ messenger, state }) {\n        super({\n            messenger,\n            metadata: {\n                interfaces: { persist: false, anonymous: false },\n            },\n            name: controllerName,\n            state: { interfaces: {}, ...state },\n        });\n        _SnapInterfaceController_instances.add(this);\n        __classPrivateFieldGet(this, _SnapInterfaceController_instances, \"m\", _SnapInterfaceController_registerMessageHandlers).call(this);\n    }\n    /**\n     * Create an interface in the controller state with the associated data.\n     *\n     * @param snapId - The snap id that created the interface.\n     * @param content - The interface content.\n     * @param context - An optional interface context object.\n     * @returns The newly interface id.\n     */\n    async createInterface(snapId, content, context) {\n        const element = (0, utils_2.getJsxInterface)(content);\n        await __classPrivateFieldGet(this, _SnapInterfaceController_instances, \"m\", _SnapInterfaceController_validateContent).call(this, element);\n        (0, utils_2.validateInterfaceContext)(context);\n        const id = (0, nanoid_1.nanoid)();\n        const componentState = (0, utils_2.constructState)({}, element);\n        this.update((draftState) => {\n            // @ts-expect-error - TS2589: Type instantiation is excessively deep and\n            // possibly infinite.\n            draftState.interfaces[id] = {\n                snapId,\n                content: (0, immer_1.castDraft)(element),\n                state: componentState,\n                context: context ?? null,\n            };\n        });\n        return id;\n    }\n    /**\n     * Get the data of a given interface id.\n     *\n     * @param snapId - The snap id requesting the interface data.\n     * @param id - The interface id.\n     * @returns The interface state.\n     */\n    getInterface(snapId, id) {\n        __classPrivateFieldGet(this, _SnapInterfaceController_instances, \"m\", _SnapInterfaceController_validateArgs).call(this, snapId, id);\n        return this.state.interfaces[id];\n    }\n    /**\n     * Update the interface with the given content.\n     *\n     * @param snapId - The snap id requesting the update.\n     * @param id - The interface id.\n     * @param content - The new content.\n     */\n    async updateInterface(snapId, id, content) {\n        __classPrivateFieldGet(this, _SnapInterfaceController_instances, \"m\", _SnapInterfaceController_validateArgs).call(this, snapId, id);\n        const element = (0, utils_2.getJsxInterface)(content);\n        await __classPrivateFieldGet(this, _SnapInterfaceController_instances, \"m\", _SnapInterfaceController_validateContent).call(this, element);\n        const oldState = this.state.interfaces[id].state;\n        const newState = (0, utils_2.constructState)(oldState, element);\n        this.update((draftState) => {\n            draftState.interfaces[id].state = newState;\n            draftState.interfaces[id].content = (0, immer_1.castDraft)(element);\n        });\n    }\n    /**\n     * Delete an interface from state.\n     *\n     * @param id - The interface id.\n     */\n    deleteInterface(id) {\n        this.update((draftState) => {\n            delete draftState.interfaces[id];\n        });\n    }\n    /**\n     * Update the interface state.\n     *\n     * @param id - The interface id.\n     * @param state - The new state.\n     */\n    updateInterfaceState(id, state) {\n        this.update((draftState) => {\n            draftState.interfaces[id].state = state;\n        });\n    }\n    /**\n     * Resolve the promise of a given interface approval request.\n     * The approval needs to have the same ID as the interface.\n     *\n     * @param snapId - The snap id.\n     * @param id - The interface id.\n     * @param value - The value to resolve the promise with.\n     */\n    async resolveInterface(snapId, id, value) {\n        __classPrivateFieldGet(this, _SnapInterfaceController_instances, \"m\", _SnapInterfaceController_validateArgs).call(this, snapId, id);\n        __classPrivateFieldGet(this, _SnapInterfaceController_instances, \"m\", _SnapInterfaceController_validateApproval).call(this, id);\n        await __classPrivateFieldGet(this, _SnapInterfaceController_instances, \"m\", _SnapInterfaceController_acceptApprovalRequest).call(this, id, value);\n        this.deleteInterface(id);\n    }\n}\nexports.SnapInterfaceController = SnapInterfaceController;\n_SnapInterfaceController_instances = new WeakSet(), _SnapInterfaceController_registerMessageHandlers = function _SnapInterfaceController_registerMessageHandlers() {\n    this.messagingSystem.registerActionHandler(`${controllerName}:createInterface`, this.createInterface.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:getInterface`, this.getInterface.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:updateInterface`, this.updateInterface.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:deleteInterface`, this.deleteInterface.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:updateInterfaceState`, this.updateInterfaceState.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:resolveInterface`, this.resolveInterface.bind(this));\n}, _SnapInterfaceController_validateArgs = function _SnapInterfaceController_validateArgs(snapId, id) {\n    const existingInterface = this.state.interfaces[id];\n    (0, utils_1.assert)(existingInterface !== undefined, `Interface with id '${id}' not found.`);\n    (0, utils_1.assert)(existingInterface.snapId === snapId, `Interface not created by ${snapId}.`);\n}, _SnapInterfaceController_validateApproval = function _SnapInterfaceController_validateApproval(id) {\n    (0, utils_1.assert)(__classPrivateFieldGet(this, _SnapInterfaceController_instances, \"m\", _SnapInterfaceController_hasApprovalRequest).call(this, id), `Approval request with id '${id}' not found.`);\n}, _SnapInterfaceController_triggerPhishingListUpdate = \n/**\n * Trigger a Phishing list update if needed.\n */\nasync function _SnapInterfaceController_triggerPhishingListUpdate() {\n    await this.messagingSystem.call('PhishingController:maybeUpdateState');\n}, _SnapInterfaceController_checkPhishingList = function _SnapInterfaceController_checkPhishingList(origin) {\n    return this.messagingSystem.call('PhishingController:testOrigin', origin)\n        .result;\n}, _SnapInterfaceController_hasApprovalRequest = function _SnapInterfaceController_hasApprovalRequest(id) {\n    return this.messagingSystem.call('ApprovalController:hasRequest', {\n        id,\n    });\n}, _SnapInterfaceController_acceptApprovalRequest = \n/**\n * Accept an approval request for a given interface.\n *\n * @param id - The interface id.\n * @param value - The value to resolve the promise with.\n */\nasync function _SnapInterfaceController_acceptApprovalRequest(id, value) {\n    await this.messagingSystem.call('ApprovalController:acceptRequest', id, value);\n}, _SnapInterfaceController_validateContent = \n/**\n * Utility function to validate the components of an interface.\n * Throws if something is invalid.\n *\n * @param element - The JSX element to verify.\n */\nasync function _SnapInterfaceController_validateContent(element) {\n    // We assume the validity of this JSON to be validated by the caller.\n    // E.g., in the RPC method implementation.\n    const size = (0, snaps_utils_1.getJsonSizeUnsafe)(element);\n    (0, utils_1.assert)(size <= MAX_UI_CONTENT_SIZE, `A Snap UI may not be larger than ${MAX_UI_CONTENT_SIZE / 1000000} MB.`);\n    await __classPrivateFieldGet(this, _SnapInterfaceController_instances, \"m\", _SnapInterfaceController_triggerPhishingListUpdate).call(this);\n    (0, snaps_utils_1.validateJsxLinks)(element, __classPrivateFieldGet(this, _SnapInterfaceController_instances, \"m\", _SnapInterfaceController_checkPhishingList).bind(this));\n};\n//# sourceMappingURL=SnapInterfaceController.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./SnapInterfaceController.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateInterfaceContext = exports.constructState = exports.assertNameIsUnique = exports.getJsxInterface = void 0;\nconst snaps_sdk_1 = require(\"@metamask/snaps-sdk\");\nconst jsx_1 = require(\"@metamask/snaps-sdk/jsx\");\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\n/**\n * Get a JSX element from a component or JSX element. If the component is a\n * JSX element, it is returned as is. Otherwise, the component is converted to\n * a JSX element.\n *\n * @param component - The component to convert.\n * @returns The JSX element.\n */\nfunction getJsxInterface(component) {\n    if ((0, jsx_1.isJSXElementUnsafe)(component)) {\n        return component;\n    }\n    return (0, snaps_utils_1.getJsxElementFromComponent)(component);\n}\nexports.getJsxInterface = getJsxInterface;\n/**\n * Assert that the component name is unique in state.\n *\n * @param state - The interface state to verify against.\n * @param name - The component name to verify.\n */\nfunction assertNameIsUnique(state, name) {\n    (0, snaps_sdk_1.assert)(state[name] === undefined, `Duplicate component names are not allowed, found multiple instances of: \"${name}\".`);\n}\nexports.assertNameIsUnique = assertNameIsUnique;\n/**\n * Construct default state for a component.\n *\n * This function is meant to be used inside constructInputState to account\n * for component specific defaults and will not override the component value or existing form state.\n *\n * @param element - The input element.\n * @returns The default state for the specific component, if any.\n */\nfunction constructComponentSpecificDefaultState(element) {\n    switch (element.type) {\n        case 'Dropdown': {\n            const children = (0, snaps_utils_1.getJsxChildren)(element);\n            return children[0]?.props.value;\n        }\n        case 'RadioGroup': {\n            const children = (0, snaps_utils_1.getJsxChildren)(element);\n            return children[0]?.props.value;\n        }\n        case 'Selector': {\n            const children = (0, snaps_utils_1.getJsxChildren)(element);\n            return children[0]?.props.value;\n        }\n        case 'Checkbox':\n            return false;\n        default:\n            return null;\n    }\n}\n/**\n * Get the state value for a stateful component.\n *\n * Most components store the state value as a `value` prop.\n * This function exists to account for components where that isn't the case.\n *\n * @param element - The input element.\n * @returns The state value for a given component.\n */\nfunction getComponentStateValue(element) {\n    switch (element.type) {\n        case 'Checkbox':\n            return element.props.checked;\n        default:\n            return element.props.value;\n    }\n}\n/**\n * Construct the state for an input field.\n *\n * @param oldState - The previous state.\n * @param element - The input element.\n * @param form - An optional form that the input is enclosed in.\n * @returns The input state.\n */\nfunction constructInputState(oldState, element, form) {\n    const oldStateUnwrapped = form ? oldState[form] : oldState;\n    const oldInputState = oldStateUnwrapped?.[element.props.name];\n    if (element.type === 'FileInput') {\n        return oldInputState ?? null;\n    }\n    return (getComponentStateValue(element) ??\n        oldInputState ??\n        constructComponentSpecificDefaultState(element) ??\n        null);\n}\n/**\n * Construct the interface state for a given component tree.\n *\n * @param oldState - The previous state.\n * @param rootComponent - The UI component to construct state from.\n * @returns The interface state of the passed component.\n */\nfunction constructState(oldState, rootComponent) {\n    const newState = {};\n    // Stack containing the forms we have visited and at which depth\n    const formStack = [];\n    (0, snaps_utils_1.walkJsx)(rootComponent, (component, depth) => {\n        let currentForm = formStack[formStack.length - 1];\n        // Pop the current form of the stack once we leave its depth.\n        if (currentForm && depth <= currentForm.depth) {\n            formStack.pop();\n            currentForm = formStack[formStack.length - 1];\n        }\n        if (component.type === 'Form') {\n            assertNameIsUnique(newState, component.props.name);\n            formStack.push({ name: component.props.name, depth });\n            newState[component.props.name] = {};\n            return;\n        }\n        // Stateful components inside a form\n        if (currentForm &&\n            (component.type === 'Input' ||\n                component.type === 'Dropdown' ||\n                component.type === 'RadioGroup' ||\n                component.type === 'FileInput' ||\n                component.type === 'Checkbox' ||\n                component.type === 'Selector')) {\n            const formState = newState[currentForm.name];\n            assertNameIsUnique(formState, component.props.name);\n            formState[component.props.name] = constructInputState(oldState, component, currentForm.name);\n            return;\n        }\n        // Stateful components outside a form\n        if (component.type === 'Input' ||\n            component.type === 'Dropdown' ||\n            component.type === 'RadioGroup' ||\n            component.type === 'FileInput' ||\n            component.type === 'Checkbox' ||\n            component.type === 'Selector') {\n            assertNameIsUnique(newState, component.props.name);\n            newState[component.props.name] = constructInputState(oldState, component);\n        }\n    });\n    return newState;\n}\nexports.constructState = constructState;\nconst MAX_CONTEXT_SIZE = 1000000; // 1 mb\n/**\n * Validate a JSON blob to be used as the interface context.\n *\n * @param context - The JSON blob.\n * @throws If the JSON blob is too large.\n */\nfunction validateInterfaceContext(context) {\n    if (!context) {\n        return;\n    }\n    // We assume the validity of this JSON to be validated by the caller.\n    // E.g., in the RPC method implementation.\n    const size = (0, snaps_utils_1.getJsonSizeUnsafe)(context);\n    (0, snaps_sdk_1.assert)(size <= MAX_CONTEXT_SIZE, `A Snap interface context may not be larger than ${MAX_CONTEXT_SIZE / 1000000} MB.`);\n}\nexports.validateInterfaceContext = validateInterfaceContext;\n//# sourceMappingURL=utils.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.log = void 0;\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst utils_1 = require(\"@metamask/utils\");\n/**\n * A logging function specific to this package. The log messages don't show up\n * by default, but they can be enabled by setting the environment variable:\n * - `DEBUG=metamask:snaps:snaps-controllers`, or\n * - `DEBUG=metamask:snaps:*` to enable all logs from `@metamask/snaps-*`.\n */\nexports.log = (0, utils_1.createModuleLogger)(snaps_utils_1.snapsLogger, 'snaps-controllers');\n//# sourceMappingURL=logging.cjs.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _AbstractExecutionService_instances, _AbstractExecutionService_snapRpcHooks, _AbstractExecutionService_snapToJobMap, _AbstractExecutionService_jobToSnapMap, _AbstractExecutionService_messenger, _AbstractExecutionService_initTimeout, _AbstractExecutionService_pingTimeout, _AbstractExecutionService_terminationTimeout, _AbstractExecutionService_usePing, _AbstractExecutionService_removeSnapHooks, _AbstractExecutionService_createSnapHooks, _AbstractExecutionService_mapSnapAndJob, _AbstractExecutionService_removeSnapAndJobMapping;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupMultiplex = exports.AbstractExecutionService = void 0;\nconst json_rpc_engine_1 = require(\"@metamask/json-rpc-engine\");\nconst json_rpc_middleware_stream_1 = require(\"@metamask/json-rpc-middleware-stream\");\nconst object_multiplex_1 = __importDefault(require(\"@metamask/object-multiplex\"));\nconst rpc_errors_1 = require(\"@metamask/rpc-errors\");\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst utils_1 = require(\"@metamask/utils\");\nconst nanoid_1 = require(\"nanoid\");\nconst readable_stream_1 = require(\"readable-stream\");\nconst logging_1 = require(\"../logging.cjs\");\nconst Timer_1 = require(\"../snaps/Timer.cjs\");\nconst utils_2 = require(\"../utils.cjs\");\nconst controllerName = 'ExecutionService';\nclass AbstractExecutionService {\n    constructor({ setupSnapProvider, messenger, initTimeout = (0, utils_1.inMilliseconds)(60, utils_1.Duration.Second), pingTimeout = (0, utils_1.inMilliseconds)(2, utils_1.Duration.Second), terminationTimeout = (0, utils_1.inMilliseconds)(1, utils_1.Duration.Second), usePing = true, }) {\n        _AbstractExecutionService_instances.add(this);\n        _AbstractExecutionService_snapRpcHooks.set(this, void 0);\n        _AbstractExecutionService_snapToJobMap.set(this, void 0);\n        _AbstractExecutionService_jobToSnapMap.set(this, void 0);\n        _AbstractExecutionService_messenger.set(this, void 0);\n        _AbstractExecutionService_initTimeout.set(this, void 0);\n        _AbstractExecutionService_pingTimeout.set(this, void 0);\n        _AbstractExecutionService_terminationTimeout.set(this, void 0);\n        _AbstractExecutionService_usePing.set(this, void 0);\n        __classPrivateFieldSet(this, _AbstractExecutionService_snapRpcHooks, new Map(), \"f\");\n        this.jobs = new Map();\n        this.setupSnapProvider = setupSnapProvider;\n        __classPrivateFieldSet(this, _AbstractExecutionService_snapToJobMap, new Map(), \"f\");\n        __classPrivateFieldSet(this, _AbstractExecutionService_jobToSnapMap, new Map(), \"f\");\n        __classPrivateFieldSet(this, _AbstractExecutionService_messenger, messenger, \"f\");\n        __classPrivateFieldSet(this, _AbstractExecutionService_initTimeout, initTimeout, \"f\");\n        __classPrivateFieldSet(this, _AbstractExecutionService_pingTimeout, pingTimeout, \"f\");\n        __classPrivateFieldSet(this, _AbstractExecutionService_terminationTimeout, terminationTimeout, \"f\");\n        __classPrivateFieldSet(this, _AbstractExecutionService_usePing, usePing, \"f\");\n        this.registerMessageHandlers();\n    }\n    /**\n     * Constructor helper for registering the controller's messaging system\n     * actions.\n     */\n    registerMessageHandlers() {\n        __classPrivateFieldGet(this, _AbstractExecutionService_messenger, \"f\").registerActionHandler(`${controllerName}:handleRpcRequest`, async (snapId, options) => this.handleRpcRequest(snapId, options));\n        __classPrivateFieldGet(this, _AbstractExecutionService_messenger, \"f\").registerActionHandler(`${controllerName}:executeSnap`, async (data) => this.executeSnap(data));\n        __classPrivateFieldGet(this, _AbstractExecutionService_messenger, \"f\").registerActionHandler(`${controllerName}:terminateSnap`, async (snapId) => this.terminateSnap(snapId));\n        __classPrivateFieldGet(this, _AbstractExecutionService_messenger, \"f\").registerActionHandler(`${controllerName}:terminateAllSnaps`, async () => this.terminateAllSnaps());\n    }\n    /**\n     * Terminates the job with the specified ID and deletes all its associated\n     * data. Any subsequent messages targeting the job will fail with an error.\n     * Throws an error if the specified job does not exist, or if termination\n     * fails unexpectedly.\n     *\n     * @param jobId - The id of the job to be terminated.\n     */\n    async terminate(jobId) {\n        const jobWrapper = this.jobs.get(jobId);\n        if (!jobWrapper) {\n            throw new Error(`Job with id \"${jobId}\" not found.`);\n        }\n        try {\n            // Ping worker and tell it to run teardown, continue with termination if it takes too long\n            const result = await (0, utils_2.withTimeout)(this.command(jobId, {\n                jsonrpc: '2.0',\n                method: 'terminate',\n                params: [],\n                id: (0, nanoid_1.nanoid)(),\n            }), __classPrivateFieldGet(this, _AbstractExecutionService_terminationTimeout, \"f\"));\n            if (result === utils_2.hasTimedOut || result !== 'OK') {\n                // We tried to shutdown gracefully but failed. This probably means the Snap is in infinite loop and\n                // hogging down the whole JS process.\n                // TODO(ritave): It might be doing weird things such as posting a lot of setTimeouts. Add a test to ensure that this behaviour\n                //               doesn't leak into other workers. Especially important in IframeExecutionEnvironment since they all share the same\n                //               JS process.\n                (0, snaps_utils_1.logError)(`Job \"${jobId}\" failed to terminate gracefully.`, result);\n            }\n        }\n        catch {\n            // Ignore\n        }\n        Object.values(jobWrapper.streams).forEach((stream) => {\n            try {\n                !stream.destroyed && stream.destroy();\n                stream.removeAllListeners();\n            }\n            catch (error) {\n                (0, snaps_utils_1.logError)('Error while destroying stream', error);\n            }\n        });\n        this.terminateJob(jobWrapper);\n        this.jobs.delete(jobId);\n        __classPrivateFieldGet(this, _AbstractExecutionService_instances, \"m\", _AbstractExecutionService_removeSnapAndJobMapping).call(this, jobId);\n        (0, logging_1.log)(`Job \"${jobId}\" terminated.`);\n    }\n    /**\n     * Initiates a job for a snap.\n     *\n     * @param jobId - The ID of the job to initiate.\n     * @param timer - The timer to use for timeouts.\n     * @returns Information regarding the created job.\n     * @throws If the execution service returns an error or execution times out.\n     */\n    async initJob(jobId, timer) {\n        const { streams, worker } = await this.initStreams(jobId, timer);\n        const rpcEngine = new json_rpc_engine_1.JsonRpcEngine();\n        const jsonRpcConnection = (0, json_rpc_middleware_stream_1.createStreamMiddleware)();\n        (0, readable_stream_1.pipeline)(jsonRpcConnection.stream, streams.command, jsonRpcConnection.stream, (error) => {\n            if (error) {\n                (0, snaps_utils_1.logError)(`Command stream failure.`, error);\n            }\n        });\n        rpcEngine.push(jsonRpcConnection.middleware);\n        const envMetadata = {\n            id: jobId,\n            streams,\n            rpcEngine,\n            worker,\n        };\n        this.jobs.set(jobId, envMetadata);\n        return envMetadata;\n    }\n    /**\n     * Sets up the streams for an initiated job.\n     *\n     * @param jobId - The id of the job.\n     * @param timer - The timer to use for timeouts.\n     * @returns The streams to communicate with the worker and the worker itself.\n     * @throws If the execution service returns an error or execution times out.\n     */\n    async initStreams(jobId, timer) {\n        const result = await (0, utils_2.withTimeout)(this.initEnvStream(jobId), timer);\n        if (result === utils_2.hasTimedOut) {\n            // For certain environments, such as the iframe we may have already created the worker and wish to terminate it.\n            this.terminateJob({ id: jobId });\n            throw new Error('The Snaps execution environment failed to start.');\n        }\n        const { worker, stream: envStream } = result;\n        const mux = setupMultiplex(envStream, `Job: \"${jobId}\"`);\n        const commandStream = mux.createStream(snaps_utils_1.SNAP_STREAM_NAMES.COMMAND);\n        // Handle out-of-band errors, i.e. errors thrown from the snap outside of the req/res cycle.\n        // Also keep track of outbound request/responses\n        const notificationHandler = (message) => {\n            if (!(0, utils_1.isJsonRpcNotification)(message)) {\n                return;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const snapId = __classPrivateFieldGet(this, _AbstractExecutionService_jobToSnapMap, \"f\").get(jobId);\n            if (message.method === 'OutboundRequest') {\n                __classPrivateFieldGet(this, _AbstractExecutionService_messenger, \"f\").publish('ExecutionService:outboundRequest', snapId);\n            }\n            else if (message.method === 'OutboundResponse') {\n                __classPrivateFieldGet(this, _AbstractExecutionService_messenger, \"f\").publish('ExecutionService:outboundResponse', snapId);\n            }\n            else if (message.method === 'UnhandledError') {\n                if ((0, utils_1.isObject)(message.params) && message.params.error) {\n                    __classPrivateFieldGet(this, _AbstractExecutionService_messenger, \"f\").publish('ExecutionService:unhandledError', snapId, message.params.error);\n                    commandStream.removeListener('data', notificationHandler);\n                }\n                else {\n                    (0, snaps_utils_1.logError)(new Error(`Received malformed \"${message.method}\" command stream notification.`));\n                }\n            }\n            else {\n                (0, snaps_utils_1.logError)(new Error(`Received unexpected command stream notification \"${message.method}\".`));\n            }\n        };\n        commandStream.on('data', notificationHandler);\n        const rpcStream = mux.createStream(snaps_utils_1.SNAP_STREAM_NAMES.JSON_RPC);\n        // Typecast: stream type mismatch\n        return {\n            streams: {\n                command: commandStream,\n                rpc: rpcStream,\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                _connection: envStream,\n            },\n            worker,\n        };\n    }\n    /**\n     * Terminates the Snap with the specified ID. May throw an error if\n     * termination unexpectedly fails, but will not fail if no job for the snap\n     * with the specified ID is found.\n     *\n     * @param snapId - The ID of the snap to terminate.\n     */\n    async terminateSnap(snapId) {\n        const jobId = __classPrivateFieldGet(this, _AbstractExecutionService_snapToJobMap, \"f\").get(snapId);\n        if (jobId) {\n            await this.terminate(jobId);\n        }\n    }\n    async terminateAllSnaps() {\n        await Promise.all([...this.jobs.keys()].map(async (jobId) => this.terminate(jobId)));\n        __classPrivateFieldGet(this, _AbstractExecutionService_snapRpcHooks, \"f\").clear();\n    }\n    /**\n     * Gets the RPC request handler for the given snap.\n     *\n     * @param snapId - The id of the Snap whose message handler to get.\n     * @returns The RPC request handler for the snap.\n     */\n    getRpcRequestHandler(snapId) {\n        return __classPrivateFieldGet(this, _AbstractExecutionService_snapRpcHooks, \"f\").get(snapId);\n    }\n    /**\n     * Initializes and executes a snap, setting up the communication channels to the snap etc.\n     *\n     * @param snapData - Data needed for Snap execution.\n     * @param snapData.snapId - The ID of the Snap to execute.\n     * @param snapData.sourceCode - The source code of the Snap to execute.\n     * @param snapData.endowments - The endowments available to the executing Snap.\n     * @returns A string `OK` if execution succeeded.\n     * @throws If the execution service returns an error or execution times out.\n     */\n    async executeSnap({ snapId, sourceCode, endowments, }) {\n        if (__classPrivateFieldGet(this, _AbstractExecutionService_snapToJobMap, \"f\").has(snapId)) {\n            throw new Error(`Snap \"${snapId}\" is already being executed.`);\n        }\n        const jobId = (0, nanoid_1.nanoid)();\n        const timer = new Timer_1.Timer(__classPrivateFieldGet(this, _AbstractExecutionService_initTimeout, \"f\"));\n        // This may resolve even if the environment has failed to start up fully\n        const job = await this.initJob(jobId, timer);\n        __classPrivateFieldGet(this, _AbstractExecutionService_instances, \"m\", _AbstractExecutionService_mapSnapAndJob).call(this, snapId, job.id);\n        // Certain environments use ping as part of their initialization and thus can skip it here\n        if (__classPrivateFieldGet(this, _AbstractExecutionService_usePing, \"f\")) {\n            // Ping the worker to ensure that it started up\n            const pingResult = await (0, utils_2.withTimeout)(this.command(job.id, {\n                jsonrpc: '2.0',\n                method: 'ping',\n                id: (0, nanoid_1.nanoid)(),\n            }), __classPrivateFieldGet(this, _AbstractExecutionService_pingTimeout, \"f\"));\n            if (pingResult === utils_2.hasTimedOut) {\n                throw new Error('The Snaps execution environment failed to start.');\n            }\n        }\n        const rpcStream = job.streams.rpc;\n        this.setupSnapProvider(snapId, rpcStream);\n        const remainingTime = timer.remaining;\n        const result = await (0, utils_2.withTimeout)(this.command(job.id, {\n            jsonrpc: '2.0',\n            method: 'executeSnap',\n            params: { snapId, sourceCode, endowments },\n            id: (0, nanoid_1.nanoid)(),\n        }), remainingTime);\n        if (result === utils_2.hasTimedOut) {\n            throw new Error(`${snapId} failed to start.`);\n        }\n        __classPrivateFieldGet(this, _AbstractExecutionService_instances, \"m\", _AbstractExecutionService_createSnapHooks).call(this, snapId, job.id);\n        return result;\n    }\n    // Cannot be hash private yet because of tests.\n    async command(jobId, message) {\n        (0, utils_1.assertIsJsonRpcRequest)(message);\n        const job = this.jobs.get(jobId);\n        if (!job) {\n            throw new Error(`Job with id \"${jobId}\" not found.`);\n        }\n        (0, logging_1.log)('Parent: Sending Command', message);\n        // eslint is blocking `await` usage even though `handle` overload returns a promise.\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        const response = await job.rpcEngine.handle(message);\n        if ((0, utils_1.isJsonRpcFailure)(response)) {\n            throw new rpc_errors_1.JsonRpcError(response.error.code, response.error.message, response.error.data);\n        }\n        return response.result;\n    }\n    /**\n     * Handle RPC request.\n     *\n     * @param snapId - The ID of the recipient snap.\n     * @param options - Bag of options to pass to the RPC handler.\n     * @returns Promise that can handle the request.\n     */\n    async handleRpcRequest(snapId, options) {\n        const rpcRequestHandler = this.getRpcRequestHandler(snapId);\n        if (!rpcRequestHandler) {\n            throw new Error(`Snap execution service returned no RPC handler for running snap \"${snapId}\".`);\n        }\n        return rpcRequestHandler(options);\n    }\n}\nexports.AbstractExecutionService = AbstractExecutionService;\n_AbstractExecutionService_snapRpcHooks = new WeakMap(), _AbstractExecutionService_snapToJobMap = new WeakMap(), _AbstractExecutionService_jobToSnapMap = new WeakMap(), _AbstractExecutionService_messenger = new WeakMap(), _AbstractExecutionService_initTimeout = new WeakMap(), _AbstractExecutionService_pingTimeout = new WeakMap(), _AbstractExecutionService_terminationTimeout = new WeakMap(), _AbstractExecutionService_usePing = new WeakMap(), _AbstractExecutionService_instances = new WeakSet(), _AbstractExecutionService_removeSnapHooks = function _AbstractExecutionService_removeSnapHooks(snapId) {\n    __classPrivateFieldGet(this, _AbstractExecutionService_snapRpcHooks, \"f\").delete(snapId);\n}, _AbstractExecutionService_createSnapHooks = function _AbstractExecutionService_createSnapHooks(snapId, workerId) {\n    const rpcHook = async ({ origin, handler, request }) => {\n        return await this.command(workerId, {\n            id: (0, nanoid_1.nanoid)(),\n            jsonrpc: '2.0',\n            method: 'snapRpc',\n            params: {\n                origin,\n                handler,\n                request: request,\n                target: snapId,\n            },\n        });\n    };\n    __classPrivateFieldGet(this, _AbstractExecutionService_snapRpcHooks, \"f\").set(snapId, rpcHook);\n}, _AbstractExecutionService_mapSnapAndJob = function _AbstractExecutionService_mapSnapAndJob(snapId, jobId) {\n    __classPrivateFieldGet(this, _AbstractExecutionService_snapToJobMap, \"f\").set(snapId, jobId);\n    __classPrivateFieldGet(this, _AbstractExecutionService_jobToSnapMap, \"f\").set(jobId, snapId);\n}, _AbstractExecutionService_removeSnapAndJobMapping = function _AbstractExecutionService_removeSnapAndJobMapping(jobId) {\n    const snapId = __classPrivateFieldGet(this, _AbstractExecutionService_jobToSnapMap, \"f\").get(jobId);\n    if (!snapId) {\n        throw new Error(`job: \"${jobId}\" has no mapped snap.`);\n    }\n    __classPrivateFieldGet(this, _AbstractExecutionService_jobToSnapMap, \"f\").delete(jobId);\n    __classPrivateFieldGet(this, _AbstractExecutionService_snapToJobMap, \"f\").delete(snapId);\n    __classPrivateFieldGet(this, _AbstractExecutionService_instances, \"m\", _AbstractExecutionService_removeSnapHooks).call(this, snapId);\n};\n/**\n * Sets up stream multiplexing for the given stream.\n *\n * @param connectionStream - The stream to mux.\n * @param streamName - The name of the stream, for identification in errors.\n * @returns The multiplexed stream.\n */\nfunction setupMultiplex(connectionStream, streamName) {\n    const mux = new object_multiplex_1.default();\n    (0, readable_stream_1.pipeline)(connectionStream, mux, connectionStream, (error) => {\n        if (error) {\n            streamName\n                ? (0, snaps_utils_1.logError)(`\"${streamName}\" stream failure.`, error)\n                : (0, snaps_utils_1.logError)(error);\n        }\n    });\n    return mux;\n}\nexports.setupMultiplex = setupMultiplex;\n//# sourceMappingURL=AbstractExecutionService.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst controllerName = 'ExecutionService';\n//# sourceMappingURL=ExecutionService.cjs.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ProxyPostMessageStream_instances, _ProxyPostMessageStream_stream, _ProxyPostMessageStream_jobId, _ProxyPostMessageStream_onData;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProxyPostMessageStream = void 0;\nconst post_message_stream_1 = require(\"@metamask/post-message-stream\");\n/**\n * A post message stream that wraps messages in a job ID, before sending them\n * over the underlying stream.\n */\nclass ProxyPostMessageStream extends post_message_stream_1.BasePostMessageStream {\n    /**\n     * Initializes a new `ProxyPostMessageStream` instance.\n     *\n     * @param args - The constructor arguments.\n     * @param args.stream - The underlying stream to use for communication.\n     * @param args.jobId - The ID of the job this stream is associated with.\n     */\n    constructor({ stream, jobId }) {\n        super();\n        _ProxyPostMessageStream_instances.add(this);\n        _ProxyPostMessageStream_stream.set(this, void 0);\n        _ProxyPostMessageStream_jobId.set(this, void 0);\n        __classPrivateFieldSet(this, _ProxyPostMessageStream_stream, stream, \"f\");\n        __classPrivateFieldSet(this, _ProxyPostMessageStream_jobId, jobId, \"f\");\n        __classPrivateFieldGet(this, _ProxyPostMessageStream_stream, \"f\").on('data', __classPrivateFieldGet(this, _ProxyPostMessageStream_instances, \"m\", _ProxyPostMessageStream_onData).bind(this));\n    }\n    /**\n     * Write data to the underlying stream. This wraps the data in an object with\n     * the job ID.\n     *\n     * @param data - The data to write.\n     */\n    _postMessage(data) {\n        __classPrivateFieldGet(this, _ProxyPostMessageStream_stream, \"f\").write({\n            jobId: __classPrivateFieldGet(this, _ProxyPostMessageStream_jobId, \"f\"),\n            data,\n        });\n    }\n}\nexports.ProxyPostMessageStream = ProxyPostMessageStream;\n_ProxyPostMessageStream_stream = new WeakMap(), _ProxyPostMessageStream_jobId = new WeakMap(), _ProxyPostMessageStream_instances = new WeakSet(), _ProxyPostMessageStream_onData = function _ProxyPostMessageStream_onData(data) {\n    if (data.jobId !== __classPrivateFieldGet(this, _ProxyPostMessageStream_jobId, \"f\")) {\n        return;\n    }\n    this.push(data.data);\n};\n//# sourceMappingURL=ProxyPostMessageStream.cjs.map","import { hasProperty, Hex, isObject, isStrictHexString } from '@metamask/utils';\nimport { BN } from 'ethereumjs-util';\nimport { cloneDeep, mapKeys } from 'lodash';\nimport log from 'loglevel';\n\ntype VersionedData = {\n  meta: { version: number };\n  data: Record<string, unknown>;\n};\n\nexport const version = 88;\n\n/**\n * This migration does a few things:\n *\n * - Rebuilds `allNftContracts` and `allNfts` in NftController state to be keyed\n * by a hex chain ID rather than a decimal chain ID.\n * - Rebuilds `tokensChainsCache` in TokenListController to be keyed by a hex\n * chain ID rather than a decimal chain ID.\n * - Rebuilds `allTokens`, `allDetectedTokens`, and `allIgnoredTokens` in\n * TokensController to be keyed by a hex chain ID rather than a decimal chain ID.\n * - removes any entries in `allNftContracts`, `allNfts`, `tokensChainsCache`,\n * `allTokens`, `allIgnoredTokens` or `allDetectedTokens` that are keyed by the\n * string 'undefined'\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(\n  originalVersionedData: VersionedData,\n): Promise<VersionedData> {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  migrateData(versionedData.data);\n  return versionedData;\n}\n\nfunction migrateData(state: Record<string, unknown>): void {\n  if (hasProperty(state, 'NftController') && isObject(state.NftController)) {\n    const nftControllerState = state.NftController;\n\n    // Migrate NftController.allNftContracts\n    if (\n      hasProperty(nftControllerState, 'allNftContracts') &&\n      isObject(nftControllerState.allNftContracts)\n    ) {\n      const { allNftContracts } = nftControllerState;\n\n      if (\n        Object.keys(allNftContracts).every((address) =>\n          isObject(allNftContracts[address]),\n        )\n      ) {\n        Object.keys(allNftContracts).forEach((address) => {\n          const nftContractsByChainId = allNftContracts[address];\n\n          if (isObject(nftContractsByChainId)) {\n            for (const chainId of Object.keys(nftContractsByChainId)) {\n              if (\n                chainId === 'undefined' ||\n                chainId === undefined ||\n                chainId === 'null'\n              ) {\n                delete nftContractsByChainId[chainId];\n              }\n            }\n\n            allNftContracts[address] = mapKeys(\n              nftContractsByChainId,\n              (_, chainId: string) => toHex(chainId),\n            );\n          }\n        });\n      }\n    } else if (hasProperty(nftControllerState, 'allNftContracts')) {\n      global.sentry?.captureException?.(\n        new Error(\n          `typeof state.NftController.allNftContracts is ${typeof nftControllerState.allNftContracts}`,\n        ),\n      );\n    } else {\n      log.warn(\n        `typeof state.NftController.allNftContracts is ${typeof nftControllerState.allNftContracts}`,\n      );\n    }\n\n    // Migrate NftController.allNfts\n    if (\n      hasProperty(nftControllerState, 'allNfts') &&\n      isObject(nftControllerState.allNfts)\n    ) {\n      const { allNfts } = nftControllerState;\n\n      if (Object.keys(allNfts).every((address) => isObject(allNfts[address]))) {\n        Object.keys(allNfts).forEach((address) => {\n          const nftsByChainId = allNfts[address];\n\n          if (isObject(nftsByChainId)) {\n            for (const chainId of Object.keys(nftsByChainId)) {\n              if (\n                chainId === 'undefined' ||\n                chainId === undefined ||\n                chainId === 'null'\n              ) {\n                delete nftsByChainId[chainId];\n              }\n            }\n\n            allNfts[address] = mapKeys(nftsByChainId, (_, chainId: string) =>\n              toHex(chainId),\n            );\n          }\n        });\n      }\n    } else if (hasProperty(nftControllerState, 'allNfts')) {\n      global.sentry?.captureException?.(\n        new Error(\n          `typeof state.NftController.allNfts is ${typeof nftControllerState.allNfts}`,\n        ),\n      );\n    } else {\n      log.warn(\n        `typeof state.NftController.allNfts is ${typeof nftControllerState.allNfts}`,\n      );\n    }\n\n    state.NftController = nftControllerState;\n  } else if (hasProperty(state, 'NftController')) {\n    global.sentry?.captureException?.(\n      new Error(`typeof state.NftController is ${typeof state.NftController}`),\n    );\n  } else {\n    log.warn(`typeof state.NftController is undefined`);\n  }\n\n  if (\n    hasProperty(state, 'TokenListController') &&\n    isObject(state.TokenListController)\n  ) {\n    const tokenListControllerState = state.TokenListController;\n\n    // Migrate TokenListController.tokensChainsCache\n    if (\n      hasProperty(tokenListControllerState, 'tokensChainsCache') &&\n      isObject(tokenListControllerState.tokensChainsCache)\n    ) {\n      for (const chainId of Object.keys(\n        tokenListControllerState.tokensChainsCache,\n      )) {\n        if (\n          chainId === 'undefined' ||\n          chainId === undefined ||\n          chainId === 'null'\n        ) {\n          delete tokenListControllerState.tokensChainsCache[chainId];\n        }\n      }\n\n      tokenListControllerState.tokensChainsCache = mapKeys(\n        tokenListControllerState.tokensChainsCache,\n        (_, chainId: string) => toHex(chainId),\n      );\n    } else if (hasProperty(tokenListControllerState, 'tokensChainsCache')) {\n      global.sentry?.captureException?.(\n        new Error(\n          `typeof state.TokenListController.tokensChainsCache is ${typeof state\n            .TokenListController.tokensChainsCache}`,\n        ),\n      );\n    } else {\n      log.warn(\n        `typeof state.TokenListController.tokensChainsCache is undefined`,\n      );\n    }\n  } else {\n    log.warn(\n      `typeof state.TokenListController is ${typeof state.TokenListController}`,\n    );\n  }\n\n  if (\n    hasProperty(state, 'TokensController') &&\n    isObject(state.TokensController)\n  ) {\n    const tokensControllerState = state.TokensController;\n\n    // Migrate TokensController.allTokens\n    if (\n      hasProperty(tokensControllerState, 'allTokens') &&\n      isObject(tokensControllerState.allTokens)\n    ) {\n      const { allTokens } = tokensControllerState;\n\n      for (const chainId of Object.keys(allTokens)) {\n        if (\n          chainId === 'undefined' ||\n          chainId === undefined ||\n          chainId === 'null'\n        ) {\n          delete allTokens[chainId];\n        }\n      }\n\n      tokensControllerState.allTokens = mapKeys(\n        allTokens,\n        (_, chainId: string) => toHex(chainId),\n      );\n    } else if (hasProperty(tokensControllerState, 'allTokens')) {\n      global.sentry?.captureException?.(\n        new Error(\n          `typeof state.TokensController.allTokens is ${typeof tokensControllerState.allTokens}`,\n        ),\n      );\n    } else {\n      log.warn(\n        `typeof state.TokensController.allTokens is ${typeof tokensControllerState.allTokens}`,\n      );\n    }\n\n    // Migrate TokensController.allIgnoredTokens\n    if (\n      hasProperty(tokensControllerState, 'allIgnoredTokens') &&\n      isObject(tokensControllerState.allIgnoredTokens)\n    ) {\n      const { allIgnoredTokens } = tokensControllerState;\n\n      for (const chainId of Object.keys(allIgnoredTokens)) {\n        if (\n          chainId === 'undefined' ||\n          chainId === undefined ||\n          chainId === 'null'\n        ) {\n          delete allIgnoredTokens[chainId];\n        }\n      }\n\n      tokensControllerState.allIgnoredTokens = mapKeys(\n        allIgnoredTokens,\n        (_, chainId: string) => toHex(chainId),\n      );\n    } else if (hasProperty(tokensControllerState, 'allIgnoredTokens')) {\n      global.sentry?.captureException?.(\n        new Error(\n          `typeof state.TokensController.allIgnoredTokens is ${typeof tokensControllerState.allIgnoredTokens}`,\n        ),\n      );\n    } else {\n      log.warn(\n        `typeof state.TokensController.allIgnoredTokens is ${typeof tokensControllerState.allIgnoredTokens}`,\n      );\n    }\n\n    // Migrate TokensController.allDetectedTokens\n    if (\n      hasProperty(tokensControllerState, 'allDetectedTokens') &&\n      isObject(tokensControllerState.allDetectedTokens)\n    ) {\n      const { allDetectedTokens } = tokensControllerState;\n\n      for (const chainId of Object.keys(allDetectedTokens)) {\n        if (\n          chainId === 'undefined' ||\n          chainId === undefined ||\n          chainId === 'null'\n        ) {\n          delete allDetectedTokens[chainId];\n        }\n      }\n\n      tokensControllerState.allDetectedTokens = mapKeys(\n        allDetectedTokens,\n        (_, chainId: string) => toHex(chainId),\n      );\n    } else if (hasProperty(tokensControllerState, 'allDetectedTokens')) {\n      global.sentry?.captureException?.(\n        new Error(\n          `typeof state.TokensController.allDetectedTokens is ${typeof tokensControllerState.allDetectedTokens}`,\n        ),\n      );\n    } else {\n      log.warn(\n        `typeof state.TokensController.allDetectedTokens is ${typeof tokensControllerState.allDetectedTokens}`,\n      );\n    }\n\n    state.TokensController = tokensControllerState;\n  } else {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.TokensController is ${typeof state.TokensController}`,\n      ),\n    );\n  }\n}\n\nfunction toHex(value: number | string | BN): Hex {\n  if (typeof value === 'string' && isStrictHexString(value)) {\n    return value;\n  }\n  const hexString = BN.isBN(value)\n    ? value.toString(16)\n    : new BN(value.toString(), 10).toString(16);\n  return `0x${hexString}`;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IframeExecutionService = void 0;\nconst post_message_stream_1 = require(\"@metamask/post-message-stream\");\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst AbstractExecutionService_1 = require(\"../AbstractExecutionService.cjs\");\nclass IframeExecutionService extends AbstractExecutionService_1.AbstractExecutionService {\n    constructor({ iframeUrl, messenger, setupSnapProvider, }) {\n        super({\n            messenger,\n            setupSnapProvider,\n        });\n        this.iframeUrl = iframeUrl;\n    }\n    terminateJob(jobWrapper) {\n        document.getElementById(jobWrapper.id)?.remove();\n    }\n    async initEnvStream(jobId) {\n        const iframeWindow = await (0, snaps_utils_1.createWindow)(this.iframeUrl.toString(), jobId);\n        const stream = new post_message_stream_1.WindowPostMessageStream({\n            name: 'parent',\n            target: 'child',\n            targetWindow: iframeWindow,\n            targetOrigin: '*',\n        });\n        return { worker: iframeWindow, stream };\n    }\n}\nexports.IframeExecutionService = IframeExecutionService;\n//# sourceMappingURL=IframeExecutionService.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./IframeExecutionService.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebWorkerExecutionService = void 0;\n__exportStar(require(\"./AbstractExecutionService.cjs\"), exports);\n__exportStar(require(\"./ExecutionService.cjs\"), exports);\n__exportStar(require(\"./ProxyPostMessageStream.cjs\"), exports);\n__exportStar(require(\"./iframe/index.cjs\"), exports);\n__exportStar(require(\"./offscreen/index.cjs\"), exports);\nvar webworker_1 = require(\"./webworker/index.cjs\");\nObject.defineProperty(exports, \"WebWorkerExecutionService\", { enumerable: true, get: function () { return webworker_1.WebWorkerExecutionService; } });\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _OffscreenExecutionService_offscreenPromise;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OffscreenExecutionService = void 0;\nconst post_message_stream_1 = require(\"@metamask/post-message-stream\");\nconst ProxyExecutionService_1 = require(\"../proxy/ProxyExecutionService.cjs\");\nclass OffscreenExecutionService extends ProxyExecutionService_1.ProxyExecutionService {\n    /**\n     * Create a new offscreen execution service.\n     *\n     * @param args - The constructor arguments.\n     * @param args.messenger - The messenger to use for communication with the\n     * `SnapController`.\n     * @param args.setupSnapProvider - The function to use to set up the snap\n     * provider.\n     * @param args.offscreenPromise - A promise that resolves when the offscreen\n     * environment is ready.\n     */\n    constructor({ messenger, setupSnapProvider, offscreenPromise, }) {\n        super({\n            messenger,\n            setupSnapProvider,\n            stream: new post_message_stream_1.BrowserRuntimePostMessageStream({\n                name: 'parent',\n                target: 'child',\n            }),\n        });\n        _OffscreenExecutionService_offscreenPromise.set(this, void 0);\n        __classPrivateFieldSet(this, _OffscreenExecutionService_offscreenPromise, offscreenPromise, \"f\");\n    }\n    /**\n     * Create a new stream for the given job ID. This will wait for the offscreen\n     * environment to be ready before creating the stream.\n     *\n     * @param jobId - The job ID to create a stream for.\n     * @returns The stream for the given job ID.\n     */\n    async initEnvStream(jobId) {\n        await __classPrivateFieldGet(this, _OffscreenExecutionService_offscreenPromise, \"f\");\n        return await super.initEnvStream(jobId);\n    }\n}\nexports.OffscreenExecutionService = OffscreenExecutionService;\n_OffscreenExecutionService_offscreenPromise = new WeakMap();\n//# sourceMappingURL=OffscreenExecutionService.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./OffscreenExecutionService.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ProxyExecutionService_stream;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProxyExecutionService = void 0;\nconst nanoid_1 = require(\"nanoid\");\nconst AbstractExecutionService_1 = require(\"../AbstractExecutionService.cjs\");\nconst ProxyPostMessageStream_1 = require(\"../ProxyPostMessageStream.cjs\");\nclass ProxyExecutionService extends AbstractExecutionService_1.AbstractExecutionService {\n    /**\n     * Create a new proxy execution service.\n     *\n     * @param args - The constructor arguments.\n     * @param args.messenger - The messenger to use for communication with the\n     * `SnapController`.\n     * @param args.setupSnapProvider - The function to use to set up the snap\n     * provider.\n     * @param args.stream - The stream to use for communicating with the proxy\n     * executor.\n     */\n    constructor({ stream, messenger, setupSnapProvider, }) {\n        super({\n            messenger,\n            setupSnapProvider,\n            usePing: false,\n        });\n        _ProxyExecutionService_stream.set(this, void 0);\n        __classPrivateFieldSet(this, _ProxyExecutionService_stream, stream, \"f\");\n    }\n    /**\n     * Send a termination command to the proxy stream.\n     *\n     * @param job - The job to terminate.\n     */\n    async terminateJob(job) {\n        // The `AbstractExecutionService` will have already closed the job stream,\n        // so we write to the runtime stream directly.\n        __classPrivateFieldGet(this, _ProxyExecutionService_stream, \"f\").write({\n            jobId: job.id,\n            data: {\n                jsonrpc: '2.0',\n                method: 'terminateJob',\n                id: (0, nanoid_1.nanoid)(),\n            },\n        });\n    }\n    /**\n     * Create a new stream for the specified job. This wraps the root stream\n     * in a stream specific to the job.\n     *\n     * @param jobId - The job ID.\n     * @returns An object with the worker ID and stream.\n     */\n    async initEnvStream(jobId) {\n        const stream = new ProxyPostMessageStream_1.ProxyPostMessageStream({\n            stream: __classPrivateFieldGet(this, _ProxyExecutionService_stream, \"f\"),\n            jobId,\n        });\n        // Send a request and await any response before continuing\n        // This simulates the behaviour of non-proxy environments by effectively awaiting\n        // the load of the environment inside the proxy environment\n        // This assumes the proxy environment is already loaded before this function is called\n        await new Promise((resolve) => {\n            stream.once('data', resolve);\n            stream.write({\n                name: 'command',\n                data: { jsonrpc: '2.0', method: 'ping', id: (0, nanoid_1.nanoid)() },\n            });\n        });\n        return { worker: jobId, stream };\n    }\n}\nexports.ProxyExecutionService = ProxyExecutionService;\n_ProxyExecutionService_stream = new WeakMap();\n//# sourceMappingURL=ProxyExecutionService.cjs.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _WebWorkerExecutionService_documentUrl, _WebWorkerExecutionService_runtimeStream;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebWorkerExecutionService = exports.WORKER_POOL_ID = void 0;\nconst post_message_stream_1 = require(\"@metamask/post-message-stream\");\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst utils_1 = require(\"@metamask/utils\");\nconst nanoid_1 = require(\"nanoid\");\nconst AbstractExecutionService_1 = require(\"../AbstractExecutionService.cjs\");\nconst ProxyPostMessageStream_1 = require(\"../ProxyPostMessageStream.cjs\");\nexports.WORKER_POOL_ID = 'snaps-worker-pool';\nclass WebWorkerExecutionService extends AbstractExecutionService_1.AbstractExecutionService {\n    /**\n     * Create a new webworker execution service.\n     *\n     * @param args - The constructor arguments.\n     * @param args.documentUrl - The URL of the worker pool document to use as the\n     * execution environment.\n     * @param args.messenger - The messenger to use for communication with the\n     * `SnapController`.\n     * @param args.setupSnapProvider - The function to use to set up the snap\n     * provider.\n     */\n    constructor({ documentUrl, messenger, setupSnapProvider, }) {\n        super({\n            messenger,\n            setupSnapProvider,\n        });\n        _WebWorkerExecutionService_documentUrl.set(this, void 0);\n        _WebWorkerExecutionService_runtimeStream.set(this, void 0);\n        __classPrivateFieldSet(this, _WebWorkerExecutionService_documentUrl, documentUrl, \"f\");\n    }\n    /**\n     * Send a termination command to the worker pool document.\n     *\n     * @param job - The job to terminate.\n     */\n    async terminateJob(job) {\n        // The `AbstractExecutionService` will have already closed the job stream,\n        // so we write to the runtime stream directly.\n        (0, utils_1.assert)(__classPrivateFieldGet(this, _WebWorkerExecutionService_runtimeStream, \"f\"), 'Runtime stream not initialized.');\n        __classPrivateFieldGet(this, _WebWorkerExecutionService_runtimeStream, \"f\").write({\n            jobId: job.id,\n            data: {\n                jsonrpc: '2.0',\n                method: 'terminateJob',\n                id: (0, nanoid_1.nanoid)(),\n            },\n        });\n    }\n    /**\n     * Create a new stream for the specified job. This wraps the runtime stream\n     * in a stream specific to the job.\n     *\n     * @param jobId - The job ID.\n     * @returns An object with the worker ID and stream.\n     */\n    async initEnvStream(jobId) {\n        // Lazily create the worker pool document.\n        await this.createDocument();\n        // `createDocument` should have initialized the runtime stream.\n        (0, utils_1.assert)(__classPrivateFieldGet(this, _WebWorkerExecutionService_runtimeStream, \"f\"), 'Runtime stream not initialized.');\n        const stream = new ProxyPostMessageStream_1.ProxyPostMessageStream({\n            stream: __classPrivateFieldGet(this, _WebWorkerExecutionService_runtimeStream, \"f\"),\n            jobId,\n        });\n        return { worker: jobId, stream };\n    }\n    /**\n     * Creates the worker pool document to be used as the execution environment.\n     *\n     * If the document already exists, this does nothing.\n     */\n    async createDocument() {\n        // We only want to create a single pool.\n        if (document.getElementById(exports.WORKER_POOL_ID)) {\n            return;\n        }\n        const window = await (0, snaps_utils_1.createWindow)(__classPrivateFieldGet(this, _WebWorkerExecutionService_documentUrl, \"f\").href, exports.WORKER_POOL_ID, false);\n        __classPrivateFieldSet(this, _WebWorkerExecutionService_runtimeStream, new post_message_stream_1.WindowPostMessageStream({\n            name: 'parent',\n            target: 'child',\n            targetWindow: window,\n            targetOrigin: '*',\n        }), \"f\");\n    }\n}\nexports.WebWorkerExecutionService = WebWorkerExecutionService;\n_WebWorkerExecutionService_documentUrl = new WeakMap(), _WebWorkerExecutionService_runtimeStream = new WeakMap();\n//# sourceMappingURL=WebWorkerExecutionService.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./WebWorkerExecutionService.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestQueue = void 0;\nclass RequestQueue {\n    constructor(maxQueueSize) {\n        this.maxQueueSize = maxQueueSize;\n        this.queueSizes = new Map();\n    }\n    /**\n     * Increments the queue count for a particular origin.\n     *\n     * @param origin - A string identifying the origin.\n     */\n    increment(origin) {\n        const currentCount = this.queueSizes.get(origin) ?? 0;\n        if (currentCount >= this.maxQueueSize) {\n            throw new Error('Maximum number of requests reached. Try again later.');\n        }\n        this.queueSizes.set(origin, currentCount + 1);\n    }\n    /**\n     * Decrements the queue count for a particular origin.\n     *\n     * @param origin - A string identifying the origin.\n     */\n    decrement(origin) {\n        const currentCount = this.queueSizes.get(origin) ?? 0;\n        if (currentCount === 0) {\n            throw new Error(`Cannot decrement, ${origin} does not have any outstanding requests.`);\n        }\n        this.queueSizes.set(origin, currentCount - 1);\n    }\n    /**\n     * Gets the queue count for a particular origin.\n     *\n     * @param origin - A string identifying the origin.\n     * @returns The queue count for the origin.\n     */\n    get(origin) {\n        return this.queueSizes.get(origin) ?? 0;\n    }\n}\nexports.RequestQueue = RequestQueue;\n//# sourceMappingURL=RequestQueue.cjs.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SnapController_instances, _SnapController_closeAllConnections, _SnapController_dynamicPermissions, _SnapController_environmentEndowmentPermissions, _SnapController_excludedPermissions, _SnapController_featureFlags, _SnapController_fetchFunction, _SnapController_idleTimeCheckInterval, _SnapController_maxIdleTime, _SnapController_encryptor, _SnapController_getMnemonic, _SnapController_getFeatureFlags, _SnapController_detectSnapLocation, _SnapController_snapsRuntimeData, _SnapController_rollbackSnapshots, _SnapController_timeoutForLastRequestStatus, _SnapController_statusMachine, _SnapController_preinstalledSnaps, _SnapController_initializeStateMachine, _SnapController_registerMessageHandlers, _SnapController_handlePreinstalledSnaps, _SnapController_pollForLastRequestStatus, _SnapController_blockSnap, _SnapController_unblockSnap, _SnapController_assertIsInstallAllowed, _SnapController_assertCanInstallSnaps, _SnapController_assertCanUsePlatform, _SnapController_stopSnapsLastRequestPastMax, _SnapController_transition, _SnapController_terminateSnap, _SnapController_getSnapEncryptionKey, _SnapController_decryptSnapState, _SnapController_encryptSnapState, _SnapController_handleInitialConnections, _SnapController_addSnapToSubject, _SnapController_removeSnapFromSubjects, _SnapController_revokeAllSnapPermissions, _SnapController_createApproval, _SnapController_updateApproval, _SnapController_resolveAllowlistVersion, _SnapController_add, _SnapController_startSnap, _SnapController_getEndowments, _SnapController_set, _SnapController_validateSnapPermissions, _SnapController_getExecutionTimeout, _SnapController_getRpcRequestHandler, _SnapController_createInterface, _SnapController_assertInterfaceExists, _SnapController_transformSnapRpcRequestResult, _SnapController_assertSnapRpcRequestResult, _SnapController_recordSnapRpcRequestStart, _SnapController_recordSnapRpcRequestFinish, _SnapController_getRollbackSnapshot, _SnapController_createRollbackSnapshot, _SnapController_rollbackSnap, _SnapController_rollbackSnaps, _SnapController_getRuntime, _SnapController_getRuntimeExpect, _SnapController_setupRuntime, _SnapController_calculatePermissionsChange, _SnapController_isSubjectConnectedToSnap, _SnapController_calculateConnectionsChange, _SnapController_updatePermissions, _SnapController_isValidUpdate, _SnapController_callLifecycleHook;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SnapController = exports.SNAP_APPROVAL_RESULT = exports.SNAP_APPROVAL_UPDATE = exports.SNAP_APPROVAL_INSTALL = exports.controllerName = void 0;\nconst base_controller_1 = require(\"@metamask/base-controller\");\nconst permission_controller_1 = require(\"@metamask/permission-controller\");\nconst rpc_errors_1 = require(\"@metamask/rpc-errors\");\nconst snaps_rpc_methods_1 = require(\"@metamask/snaps-rpc-methods\");\nconst snaps_sdk_1 = require(\"@metamask/snaps-sdk\");\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst utils_1 = require(\"@metamask/utils\");\nconst fsm_1 = require(\"@xstate/fsm\");\nconst nanoid_1 = require(\"nanoid\");\nconst fsm_2 = require(\"../fsm.cjs\");\nconst logging_1 = require(\"../logging.cjs\");\nconst utils_2 = require(\"../utils.cjs\");\nconst constants_1 = require(\"./constants.cjs\");\nconst location_1 = require(\"./location/index.cjs\");\nconst registry_1 = require(\"./registry/index.cjs\");\nconst RequestQueue_1 = require(\"./RequestQueue.cjs\");\nconst Timer_1 = require(\"./Timer.cjs\");\nexports.controllerName = 'SnapController';\n// TODO: Figure out how to name these\nexports.SNAP_APPROVAL_INSTALL = 'wallet_installSnap';\nexports.SNAP_APPROVAL_UPDATE = 'wallet_updateSnap';\nexports.SNAP_APPROVAL_RESULT = 'wallet_installSnapResult';\nconst TRUNCATED_SNAP_PROPERTIES = new Set([\n    'initialPermissions',\n    'id',\n    'version',\n    'enabled',\n    'blocked',\n]);\nconst defaultState = {\n    snaps: {},\n    snapStates: {},\n    unencryptedSnapStates: {},\n};\n/**\n * Truncates the properties of a snap to only ones that are easily serializable.\n *\n * @param snap - The snap to truncate.\n * @returns Object with serializable snap properties.\n */\nfunction truncateSnap(snap) {\n    const truncatedSnap = Object.keys(snap).reduce((serialized, key) => {\n        if (TRUNCATED_SNAP_PROPERTIES.has(key)) {\n            serialized[key] = snap[key];\n        }\n        return serialized;\n    }, {});\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    return truncatedSnap;\n}\nconst name = 'SnapController';\n/*\n * A snap is initialized in three phases:\n * - Add: Loads the snap from a remote source and parses it.\n * - Authorize: Requests the snap's required permissions from the user.\n * - Start: Initializes the snap in its SES realm with the authorized permissions.\n */\nclass SnapController extends base_controller_1.BaseController {\n    constructor({ closeAllConnections, messenger, state, dynamicPermissions = ['eth_accounts'], environmentEndowmentPermissions = [], excludedPermissions = {}, idleTimeCheckInterval = (0, utils_1.inMilliseconds)(5, utils_1.Duration.Second), maxIdleTime = (0, utils_1.inMilliseconds)(30, utils_1.Duration.Second), maxRequestTime = (0, utils_1.inMilliseconds)(60, utils_1.Duration.Second), fetchFunction = globalThis.fetch.bind(undefined), featureFlags = {}, detectSnapLocation: detectSnapLocationFunction = location_1.detectSnapLocation, preinstalledSnaps = null, encryptor, getMnemonic, getFeatureFlags = () => ({}), }) {\n        super({\n            messenger,\n            metadata: {\n                snapStates: {\n                    persist: true,\n                    anonymous: false,\n                },\n                unencryptedSnapStates: {\n                    persist: true,\n                    anonymous: false,\n                },\n                snaps: {\n                    persist: (snaps) => {\n                        return (Object.values(snaps)\n                            // We should not persist snaps that are in the installing state,\n                            // since they haven't completed installation and would be unusable\n                            .filter((snap) => snap.status !== snaps_utils_1.SnapStatus.Installing)\n                            .map((snap) => {\n                            return {\n                                ...snap,\n                                // At the time state is rehydrated, no snap will be running.\n                                status: snaps_utils_1.SnapStatus.Stopped,\n                            };\n                        })\n                            .reduce((memo, snap) => {\n                            memo[snap.id] = snap;\n                            return memo;\n                        }, {}));\n                    },\n                    anonymous: false,\n                },\n            },\n            name,\n            state: {\n                ...defaultState,\n                ...state,\n            },\n        });\n        _SnapController_instances.add(this);\n        _SnapController_closeAllConnections.set(this, void 0);\n        _SnapController_dynamicPermissions.set(this, void 0);\n        _SnapController_environmentEndowmentPermissions.set(this, void 0);\n        _SnapController_excludedPermissions.set(this, void 0);\n        _SnapController_featureFlags.set(this, void 0);\n        _SnapController_fetchFunction.set(this, void 0);\n        _SnapController_idleTimeCheckInterval.set(this, void 0);\n        _SnapController_maxIdleTime.set(this, void 0);\n        _SnapController_encryptor.set(this, void 0);\n        _SnapController_getMnemonic.set(this, void 0);\n        _SnapController_getFeatureFlags.set(this, void 0);\n        _SnapController_detectSnapLocation.set(this, void 0);\n        _SnapController_snapsRuntimeData.set(this, void 0);\n        _SnapController_rollbackSnapshots.set(this, void 0);\n        _SnapController_timeoutForLastRequestStatus.set(this, void 0);\n        _SnapController_statusMachine.set(this, void 0);\n        _SnapController_preinstalledSnaps.set(this, void 0);\n        __classPrivateFieldSet(this, _SnapController_closeAllConnections, closeAllConnections, \"f\");\n        __classPrivateFieldSet(this, _SnapController_dynamicPermissions, dynamicPermissions, \"f\");\n        __classPrivateFieldSet(this, _SnapController_environmentEndowmentPermissions, environmentEndowmentPermissions, \"f\");\n        __classPrivateFieldSet(this, _SnapController_excludedPermissions, excludedPermissions, \"f\");\n        __classPrivateFieldSet(this, _SnapController_featureFlags, featureFlags, \"f\");\n        __classPrivateFieldSet(this, _SnapController_fetchFunction, fetchFunction, \"f\");\n        __classPrivateFieldSet(this, _SnapController_idleTimeCheckInterval, idleTimeCheckInterval, \"f\");\n        __classPrivateFieldSet(this, _SnapController_maxIdleTime, maxIdleTime, \"f\");\n        this.maxRequestTime = maxRequestTime;\n        __classPrivateFieldSet(this, _SnapController_detectSnapLocation, detectSnapLocationFunction, \"f\");\n        __classPrivateFieldSet(this, _SnapController_encryptor, encryptor, \"f\");\n        __classPrivateFieldSet(this, _SnapController_getMnemonic, getMnemonic, \"f\");\n        __classPrivateFieldSet(this, _SnapController_getFeatureFlags, getFeatureFlags, \"f\");\n        __classPrivateFieldSet(this, _SnapController_preinstalledSnaps, preinstalledSnaps, \"f\");\n        this._onUnhandledSnapError = this._onUnhandledSnapError.bind(this);\n        this._onOutboundRequest = this._onOutboundRequest.bind(this);\n        this._onOutboundResponse = this._onOutboundResponse.bind(this);\n        __classPrivateFieldSet(this, _SnapController_rollbackSnapshots, new Map(), \"f\");\n        __classPrivateFieldSet(this, _SnapController_snapsRuntimeData, new Map(), \"f\");\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_pollForLastRequestStatus).call(this);\n        /* eslint-disable @typescript-eslint/unbound-method */\n        this.messagingSystem.subscribe('ExecutionService:unhandledError', this._onUnhandledSnapError);\n        this.messagingSystem.subscribe('ExecutionService:outboundRequest', this._onOutboundRequest);\n        this.messagingSystem.subscribe('ExecutionService:outboundResponse', this._onOutboundResponse);\n        /* eslint-enable @typescript-eslint/unbound-method */\n        this.messagingSystem.subscribe('SnapController:snapInstalled', ({ id }, origin) => {\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_callLifecycleHook).call(this, origin, id, snaps_utils_1.HandlerType.OnInstall).catch((error) => {\n                (0, snaps_utils_1.logError)(`Error when calling \\`onInstall\\` lifecycle hook for snap \"${id}\": ${(0, snaps_sdk_1.getErrorMessage)(error)}`);\n            });\n        });\n        this.messagingSystem.subscribe('SnapController:snapUpdated', ({ id }, _oldVersion, origin) => {\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_callLifecycleHook).call(this, origin, id, snaps_utils_1.HandlerType.OnUpdate).catch((error) => {\n                (0, snaps_utils_1.logError)(`Error when calling \\`onUpdate\\` lifecycle hook for snap \"${id}\": ${(0, snaps_sdk_1.getErrorMessage)(error)}`);\n            });\n        });\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_initializeStateMachine).call(this);\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_registerMessageHandlers).call(this);\n        if (__classPrivateFieldGet(this, _SnapController_preinstalledSnaps, \"f\")) {\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_handlePreinstalledSnaps).call(this, __classPrivateFieldGet(this, _SnapController_preinstalledSnaps, \"f\"));\n        }\n        Object.values(this.state?.snaps ?? {}).forEach((snap) => __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_setupRuntime).call(this, snap.id));\n    }\n    /**\n     * Checks all installed snaps against the block list and\n     * blocks/unblocks snaps as appropriate. See {@link SnapController.blockSnap}\n     * for more information.\n     */\n    async updateBlockedSnaps() {\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertCanUsePlatform).call(this);\n        await this.messagingSystem.call('SnapsRegistry:update');\n        const blockedSnaps = await this.messagingSystem.call('SnapsRegistry:get', Object.values(this.state.snaps).reduce((blockListArg, snap) => {\n            blockListArg[snap.id] = {\n                version: snap.version,\n                checksum: snap.manifest.source.shasum,\n            };\n            return blockListArg;\n        }, {}));\n        await Promise.all(Object.entries(blockedSnaps).map(async ([snapId, { status, reason }]) => {\n            if (status === registry_1.SnapsRegistryStatus.Blocked) {\n                return __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_blockSnap).call(this, snapId, reason);\n            }\n            return __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_unblockSnap).call(this, snapId);\n        }));\n    }\n    _onUnhandledSnapError(snapId, _error) {\n        this.stopSnap(snapId, snaps_utils_1.SnapStatusEvents.Crash).catch((stopSnapError) => {\n            // TODO: Decide how to handle errors.\n            (0, snaps_utils_1.logError)(stopSnapError);\n        });\n    }\n    _onOutboundRequest(snapId) {\n        const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n        // Ideally we would only pause the pending request that is making the outbound request\n        // but right now we don't have a way to know which request initiated the outbound request\n        runtime.pendingInboundRequests\n            .filter((pendingRequest) => pendingRequest.timer.status === 'running')\n            .forEach((pendingRequest) => pendingRequest.timer.pause());\n        runtime.pendingOutboundRequests += 1;\n    }\n    _onOutboundResponse(snapId) {\n        const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n        runtime.pendingOutboundRequests -= 1;\n        if (runtime.pendingOutboundRequests === 0) {\n            runtime.pendingInboundRequests\n                .filter((pendingRequest) => pendingRequest.timer.status === 'paused')\n                .forEach((pendingRequest) => pendingRequest.timer.resume());\n        }\n    }\n    /**\n     * Starts the given snap. Throws an error if no such snap exists\n     * or if it is already running.\n     *\n     * @param snapId - The id of the Snap to start.\n     */\n    async startSnap(snapId) {\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertCanUsePlatform).call(this);\n        const snap = this.state.snaps[snapId];\n        if (snap.enabled === false) {\n            throw new Error(`Snap \"${snapId}\" is disabled.`);\n        }\n        await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_startSnap).call(this, {\n            snapId,\n            sourceCode: snap.sourceCode,\n        });\n    }\n    /**\n     * Enables the given snap. A snap can only be started if it is enabled. A snap\n     * can only be enabled if it isn't blocked.\n     *\n     * @param snapId - The id of the Snap to enable.\n     */\n    enableSnap(snapId) {\n        this.getExpect(snapId);\n        if (this.state.snaps[snapId].blocked) {\n            throw new Error(`Snap \"${snapId}\" is blocked and cannot be enabled.`);\n        }\n        this.update((state) => {\n            state.snaps[snapId].enabled = true;\n        });\n        this.messagingSystem.publish('SnapController:snapEnabled', this.getTruncatedExpect(snapId));\n    }\n    /**\n     * Disables the given snap. A snap can only be started if it is enabled.\n     *\n     * @param snapId - The id of the Snap to disable.\n     * @returns A promise that resolves once the snap has been disabled.\n     */\n    async disableSnap(snapId) {\n        if (!this.has(snapId)) {\n            throw new Error(`Snap \"${snapId}\" not found.`);\n        }\n        this.update((state) => {\n            state.snaps[snapId].enabled = false;\n        });\n        if (this.isRunning(snapId)) {\n            await this.stopSnap(snapId, snaps_utils_1.SnapStatusEvents.Stop);\n        }\n        this.messagingSystem.publish('SnapController:snapDisabled', this.getTruncatedExpect(snapId));\n    }\n    /**\n     * Stops the given snap, removes all hooks, closes all connections, and\n     * terminates its worker.\n     *\n     * @param snapId - The id of the Snap to stop.\n     * @param statusEvent - The Snap status event that caused the snap to be\n     * stopped.\n     */\n    async stopSnap(snapId, statusEvent = snaps_utils_1.SnapStatusEvents.Stop) {\n        const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntime).call(this, snapId);\n        if (!runtime) {\n            throw new Error(`The snap \"${snapId}\" is not running.`);\n        }\n        // No-op if the Snap is already stopping.\n        if (runtime.stopping) {\n            return;\n        }\n        // Flag that the Snap is actively stopping, this prevents other calls to stopSnap\n        // while we are handling termination of the Snap\n        runtime.stopping = true;\n        try {\n            if (this.isRunning(snapId)) {\n                __classPrivateFieldGet(this, _SnapController_closeAllConnections, \"f\")?.call(this, snapId);\n                await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_terminateSnap).call(this, snapId);\n            }\n        }\n        finally {\n            // Reset request tracking\n            runtime.lastRequest = null;\n            runtime.pendingInboundRequests = [];\n            runtime.pendingOutboundRequests = 0;\n            runtime.stopping = false;\n            if (this.isRunning(snapId)) {\n                __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_transition).call(this, snapId, statusEvent);\n            }\n        }\n    }\n    /**\n     * Stops all running snaps, removes all hooks, closes all connections, and\n     * terminates their workers.\n     *\n     * @param statusEvent - The Snap status event that caused the snap to be\n     * stopped.\n     */\n    async stopAllSnaps(statusEvent = snaps_utils_1.SnapStatusEvents.Stop) {\n        const snaps = Object.values(this.state.snaps).filter((snap) => this.isRunning(snap.id));\n        const promises = snaps.map(async (snap) => this.stopSnap(snap.id, statusEvent));\n        await Promise.allSettled(promises);\n    }\n    /**\n     * Returns whether the given snap is running.\n     * Throws an error if the snap doesn't exist.\n     *\n     * @param snapId - The id of the Snap to check.\n     * @returns `true` if the snap is running, otherwise `false`.\n     */\n    isRunning(snapId) {\n        return this.getExpect(snapId).status === 'running';\n    }\n    /**\n     * Returns whether the given snap has been added to state.\n     *\n     * @param snapId - The id of the Snap to check for.\n     * @returns `true` if the snap exists in the controller state, otherwise `false`.\n     */\n    has(snapId) {\n        return Boolean(this.get(snapId));\n    }\n    /**\n     * Gets the snap with the given id if it exists, including all data.\n     * This should not be used if the snap is to be serializable, as e.g.\n     * the snap sourceCode may be quite large.\n     *\n     * @param snapId - The id of the Snap to get.\n     * @returns The entire snap object from the controller state.\n     */\n    get(snapId) {\n        return this.state.snaps[snapId];\n    }\n    /**\n     * Gets the snap with the given id, throws if doesn't.\n     * This should not be used if the snap is to be serializable, as e.g.\n     * the snap sourceCode may be quite large.\n     *\n     * @see {@link SnapController.get}\n     * @throws {@link Error}. If the snap doesn't exist\n     * @param snapId - The id of the snap to get.\n     * @returns The entire snap object.\n     */\n    getExpect(snapId) {\n        const snap = this.get(snapId);\n        (0, utils_1.assert)(snap !== undefined, new Error(`Snap \"${snapId}\" not found.`));\n        return snap;\n    }\n    /**\n     * Gets the snap with the given id if it exists, excluding any\n     * non-serializable or expensive-to-serialize data.\n     *\n     * @param snapId - The id of the Snap to get.\n     * @returns A truncated version of the snap state, that is less expensive to serialize.\n     */\n    // TODO(ritave): this.get returns undefined, this.getTruncated returns null\n    getTruncated(snapId) {\n        const snap = this.get(snapId);\n        return snap ? truncateSnap(snap) : null;\n    }\n    /**\n     * Gets the snap with the given id, throw if it doesn't exist.\n     *\n     * @throws {@link Error}. If snap doesn't exist\n     * @param snapId - The id of the snap to get.\n     * @returns A truncated version of the snap state, that is less expensive to serialize.\n     */\n    getTruncatedExpect(snapId) {\n        return truncateSnap(this.getExpect(snapId));\n    }\n    /**\n     * Updates the own state of the snap with the given id.\n     * This is distinct from the state MetaMask uses to manage snaps.\n     *\n     * @param snapId - The id of the Snap whose state should be updated.\n     * @param newSnapState - The new state of the snap.\n     * @param encrypted - A flag to indicate whether to use encrypted storage or not.\n     */\n    async updateSnapState(snapId, newSnapState, encrypted) {\n        if (encrypted) {\n            const encryptedState = await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_encryptSnapState).call(this, snapId, newSnapState);\n            this.update((state) => {\n                state.snapStates[snapId] = encryptedState;\n            });\n        }\n        else {\n            this.update((state) => {\n                state.unencryptedSnapStates[snapId] = JSON.stringify(newSnapState);\n            });\n        }\n    }\n    /**\n     * Clears the state of the snap with the given id.\n     * This is distinct from the state MetaMask uses to manage snaps.\n     *\n     * @param snapId - The id of the Snap whose state should be cleared.\n     * @param encrypted - A flag to indicate whether to use encrypted storage or not.\n     */\n    clearSnapState(snapId, encrypted) {\n        this.update((state) => {\n            if (encrypted) {\n                state.snapStates[snapId] = null;\n            }\n            else {\n                state.unencryptedSnapStates[snapId] = null;\n            }\n        });\n    }\n    /**\n     * Gets the own state of the snap with the given id.\n     * This is distinct from the state MetaMask uses to manage snaps.\n     *\n     * @param snapId - The id of the Snap whose state to get.\n     * @param encrypted - A flag to indicate whether to use encrypted storage or not.\n     * @returns The requested snap state or null if no state exists.\n     */\n    async getSnapState(snapId, encrypted) {\n        const state = encrypted\n            ? this.state.snapStates[snapId]\n            : this.state.unencryptedSnapStates[snapId];\n        if (state === null || state === undefined) {\n            return null;\n        }\n        if (!encrypted) {\n            return (0, snaps_utils_1.parseJson)(state);\n        }\n        const decrypted = await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_decryptSnapState).call(this, snapId, state);\n        return decrypted;\n    }\n    /**\n     * Gets a static auxiliary snap file in a chosen file encoding.\n     *\n     * @param snapId - The id of the Snap whose state to get.\n     * @param path - The path to the requested file.\n     * @param encoding - An optional requested file encoding.\n     * @returns The file requested in the chosen file encoding or null if the file is not found.\n     */\n    async getSnapFile(snapId, path, encoding = snaps_sdk_1.AuxiliaryFileEncoding.Base64) {\n        const snap = this.getExpect(snapId);\n        const normalizedPath = (0, snaps_utils_1.normalizeRelative)(path);\n        const value = snap.auxiliaryFiles?.find((file) => file.path === normalizedPath)?.value;\n        if (!value) {\n            return null;\n        }\n        const encoded = await (0, snaps_utils_1.encodeAuxiliaryFile)(value, encoding);\n        (0, utils_1.assert)(encoded.length < snaps_utils_1.MAX_FILE_SIZE, `Failed to encode static file to \"${encoding}\": Static files must be less than 64 MB when encoded.`);\n        return encoded;\n    }\n    /**\n     * Completely clear the controller's state: delete all associated data,\n     * handlers, event listeners, and permissions; tear down all snap providers.\n     */\n    async clearState() {\n        const snapIds = Object.keys(this.state.snaps);\n        if (__classPrivateFieldGet(this, _SnapController_closeAllConnections, \"f\")) {\n            snapIds.forEach((snapId) => {\n                __classPrivateFieldGet(this, _SnapController_closeAllConnections, \"f\")?.call(this, snapId);\n            });\n        }\n        await this.messagingSystem.call('ExecutionService:terminateAllSnaps');\n        snapIds.forEach((snapId) => __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_revokeAllSnapPermissions).call(this, snapId));\n        this.update((state) => {\n            state.snaps = {};\n            state.snapStates = {};\n        });\n        __classPrivateFieldGet(this, _SnapController_snapsRuntimeData, \"f\").clear();\n        // We want to remove all snaps & permissions, except for preinstalled snaps\n        if (__classPrivateFieldGet(this, _SnapController_preinstalledSnaps, \"f\")) {\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_handlePreinstalledSnaps).call(this, __classPrivateFieldGet(this, _SnapController_preinstalledSnaps, \"f\"));\n            Object.values(this.state?.snaps).forEach((snap) => __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_setupRuntime).call(this, snap.id));\n        }\n    }\n    /**\n     * Removes the given snap from state, and clears all associated handlers\n     * and listeners.\n     *\n     * @param snapId - The id of the Snap.\n     * @returns A promise that resolves once the snap has been removed.\n     */\n    async removeSnap(snapId) {\n        return this.removeSnaps([snapId]);\n    }\n    /**\n     * Stops the given snaps, removes them from state, and clears all associated\n     * permissions, handlers, and listeners.\n     *\n     * @param snapIds - The ids of the Snaps.\n     */\n    async removeSnaps(snapIds) {\n        if (!Array.isArray(snapIds)) {\n            throw new Error('Expected array of snap ids.');\n        }\n        snapIds.forEach((snapId) => {\n            const snap = this.getExpect(snapId);\n            (0, utils_1.assert)(snap.removable !== false, `${snapId} is not removable.`);\n        });\n        await Promise.all(snapIds.map(async (snapId) => {\n            const snap = this.getExpect(snapId);\n            const truncated = this.getTruncatedExpect(snapId);\n            // Disable the snap and revoke all of its permissions before deleting\n            // it. This ensures that the snap will not be restarted or otherwise\n            // affect the host environment while we are deleting it.\n            await this.disableSnap(snapId);\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_revokeAllSnapPermissions).call(this, snapId);\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_removeSnapFromSubjects).call(this, snapId);\n            __classPrivateFieldGet(this, _SnapController_snapsRuntimeData, \"f\").delete(snapId);\n            this.update((state) => {\n                delete state.snaps[snapId];\n                delete state.snapStates[snapId];\n                delete state.unencryptedSnapStates[snapId];\n            });\n            // If the snap has been fully installed before, also emit snapUninstalled.\n            if (snap.status !== snaps_utils_1.SnapStatus.Installing) {\n                this.messagingSystem.publish(`SnapController:snapUninstalled`, truncated);\n            }\n        }));\n    }\n    /**\n     * Removes a snap's permission (caveat) from the specified subject.\n     *\n     * @param origin - The origin from which to remove the snap.\n     * @param snapId - The id of the snap to remove.\n     */\n    removeSnapFromSubject(origin, snapId) {\n        const subjectPermissions = this.messagingSystem.call('PermissionController:getPermissions', origin);\n        const snapIdsCaveat = subjectPermissions?.[snaps_rpc_methods_1.WALLET_SNAP_PERMISSION_KEY]?.caveats?.find((caveat) => caveat.type === snaps_utils_1.SnapCaveatType.SnapIds);\n        if (!snapIdsCaveat) {\n            return;\n        }\n        const caveatHasSnap = Boolean(snapIdsCaveat.value?.[snapId]);\n        if (caveatHasSnap) {\n            const newCaveatValue = {\n                ...snapIdsCaveat.value,\n            };\n            delete newCaveatValue[snapId];\n            if (Object.keys(newCaveatValue).length > 0) {\n                this.messagingSystem.call('PermissionController:updateCaveat', origin, snaps_rpc_methods_1.WALLET_SNAP_PERMISSION_KEY, snaps_utils_1.SnapCaveatType.SnapIds, newCaveatValue);\n            }\n            else {\n                this.messagingSystem.call('PermissionController:revokePermissions', {\n                    [origin]: [snaps_rpc_methods_1.WALLET_SNAP_PERMISSION_KEY],\n                });\n            }\n        }\n    }\n    /**\n     * Checks if a list of permissions are dynamic and allowed to be revoked, if they are they will all be revoked.\n     *\n     * @param snapId - The snap ID.\n     * @param permissionNames - The names of the permissions.\n     * @throws If non-dynamic permissions are passed.\n     */\n    revokeDynamicSnapPermissions(snapId, permissionNames) {\n        (0, utils_1.assert)(permissionNames.every((permissionName) => __classPrivateFieldGet(this, _SnapController_dynamicPermissions, \"f\").includes(permissionName)), 'Non-dynamic permissions cannot be revoked');\n        this.messagingSystem.call('PermissionController:revokePermissions', {\n            [snapId]: permissionNames,\n        });\n    }\n    /**\n     * Handles incrementing the activeReferences counter.\n     *\n     * @param snapId - The snap id of the snap that was referenced.\n     */\n    incrementActiveReferences(snapId) {\n        const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n        runtime.activeReferences += 1;\n    }\n    /**\n     * Handles decrement the activeReferences counter.\n     *\n     * @param snapId - The snap id of the snap that was referenced..\n     */\n    decrementActiveReferences(snapId) {\n        const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n        (0, utils_1.assert)(runtime.activeReferences > 0, 'SnapController reference management is in an invalid state.');\n        runtime.activeReferences -= 1;\n    }\n    /**\n     * Gets all snaps in their truncated format.\n     *\n     * @returns All installed snaps in their truncated format.\n     */\n    getAllSnaps() {\n        return Object.values(this.state.snaps).map(truncateSnap);\n    }\n    /**\n     * Gets the serialized permitted snaps of the given origin, if any.\n     *\n     * @param origin - The origin whose permitted snaps to retrieve.\n     * @returns The serialized permitted snaps for the origin.\n     */\n    getPermittedSnaps(origin) {\n        const permissions = this.messagingSystem.call('PermissionController:getPermissions', origin) ?? {};\n        const snaps = permissions[snaps_rpc_methods_1.WALLET_SNAP_PERMISSION_KEY]?.caveats?.find((caveat) => caveat.type === snaps_utils_1.SnapCaveatType.SnapIds)?.value ?? {};\n        return Object.keys(snaps).reduce((permittedSnaps, snapId) => {\n            const snap = this.get(snapId);\n            const truncatedSnap = this.getTruncated(snapId);\n            if (truncatedSnap && snap?.status !== snaps_utils_1.SnapStatus.Installing) {\n                permittedSnaps[snapId] = truncatedSnap;\n            }\n            return permittedSnaps;\n        }, {});\n    }\n    /**\n     * Installs the snaps requested by the given origin, returning the snap\n     * object if the origin is permitted to install it, and an authorization error\n     * otherwise.\n     *\n     * @param origin - The origin that requested to install the snaps.\n     * @param requestedSnaps - The snaps to install.\n     * @returns An object of snap ids and snap objects, or errors if a\n     * snap couldn't be installed.\n     */\n    async installSnaps(origin, requestedSnaps) {\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertCanUsePlatform).call(this);\n        const result = {};\n        const snapIds = Object.keys(requestedSnaps);\n        const pendingUpdates = [];\n        const pendingInstalls = [];\n        try {\n            for (const [snapId, { version: rawVersion }] of Object.entries(requestedSnaps)) {\n                (0, snaps_utils_1.assertIsValidSnapId)(snapId);\n                const [error, version] = (0, snaps_utils_1.resolveVersionRange)(rawVersion);\n                if (error) {\n                    throw rpc_errors_1.rpcErrors.invalidParams(`The \"version\" field must be a valid SemVer version range if specified. Received: \"${rawVersion}\".`);\n                }\n                const location = __classPrivateFieldGet(this, _SnapController_detectSnapLocation, \"f\").call(this, snapId, {\n                    versionRange: version,\n                    fetch: __classPrivateFieldGet(this, _SnapController_fetchFunction, \"f\"),\n                    allowLocal: __classPrivateFieldGet(this, _SnapController_featureFlags, \"f\").allowLocalSnaps,\n                    resolveVersion: async (range) => __classPrivateFieldGet(this, _SnapController_featureFlags, \"f\").requireAllowlist\n                        ? await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_resolveAllowlistVersion).call(this, snapId, range)\n                        : range,\n                });\n                // Existing snaps may need to be updated, unless they should be re-installed (e.g. local snaps)\n                // Everything else is treated as an install\n                const isUpdate = this.has(snapId) && !location.shouldAlwaysReload;\n                if (isUpdate && __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_isValidUpdate).call(this, snapId, version)) {\n                    const existingSnap = this.getExpect(snapId);\n                    pendingUpdates.push({ snapId, oldVersion: existingSnap.version });\n                    let rollbackSnapshot = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRollbackSnapshot).call(this, snapId);\n                    if (rollbackSnapshot === undefined) {\n                        rollbackSnapshot = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_createRollbackSnapshot).call(this, snapId);\n                        rollbackSnapshot.newVersion = version;\n                    }\n                    else {\n                        throw new Error('This snap is already being updated.');\n                    }\n                }\n                else if (!isUpdate) {\n                    pendingInstalls.push(snapId);\n                }\n                result[snapId] = await this.processRequestedSnap(origin, snapId, location, version);\n            }\n            // Once we finish all installs / updates, emit events.\n            pendingInstalls.forEach((snapId) => this.messagingSystem.publish(`SnapController:snapInstalled`, this.getTruncatedExpect(snapId), origin));\n            pendingUpdates.forEach(({ snapId, oldVersion }) => this.messagingSystem.publish(`SnapController:snapUpdated`, this.getTruncatedExpect(snapId), oldVersion, origin));\n            snapIds.forEach((snapId) => __classPrivateFieldGet(this, _SnapController_rollbackSnapshots, \"f\").delete(snapId));\n        }\n        catch (error) {\n            const installed = pendingInstalls.filter((snapId) => this.has(snapId));\n            await this.removeSnaps(installed);\n            const snapshottedSnaps = [...__classPrivateFieldGet(this, _SnapController_rollbackSnapshots, \"f\").keys()];\n            const snapsToRollback = pendingUpdates\n                .map(({ snapId }) => snapId)\n                .filter((snapId) => snapshottedSnaps.includes(snapId));\n            await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_rollbackSnaps).call(this, snapsToRollback);\n            throw error;\n        }\n        return result;\n    }\n    /**\n     * Adds, authorizes, and runs the given snap with a snap provider.\n     * Results from this method should be efficiently serializable.\n     *\n     * @param origin - The origin requesting the snap.\n     * @param snapId - The id of the snap.\n     * @param location - The location implementation of the snap.\n     * @param versionRange - The semver range of the snap to install.\n     * @returns The resulting snap object, or an error if something went wrong.\n     */\n    async processRequestedSnap(origin, snapId, location, versionRange) {\n        const existingSnap = this.getTruncated(snapId);\n        // For devX we always re-install local snaps.\n        if (existingSnap && !location.shouldAlwaysReload) {\n            if ((0, utils_1.satisfiesVersionRange)(existingSnap.version, versionRange)) {\n                return existingSnap;\n            }\n            return await this.updateSnap(origin, snapId, location, versionRange, \n            // Since we are requesting an update from within processRequestedSnap,\n            // we disable the emitting of the snapUpdated event and rely on the caller\n            // to publish this event after the update is complete.\n            // This is necessary as installSnaps may be installing multiple snaps\n            // and we don't want to emit events prematurely.\n            false);\n        }\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertCanInstallSnaps).call(this);\n        let pendingApproval = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_createApproval).call(this, {\n            origin,\n            snapId,\n            type: exports.SNAP_APPROVAL_INSTALL,\n        });\n        this.messagingSystem.publish('SnapController:snapInstallStarted', snapId, origin, false);\n        // Existing snaps must be stopped before overwriting\n        if (existingSnap && this.isRunning(snapId)) {\n            await this.stopSnap(snapId, snaps_utils_1.SnapStatusEvents.Stop);\n        }\n        // Existing snaps that should be re-installed should not maintain their existing permissions\n        if (existingSnap && location.shouldAlwaysReload) {\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_revokeAllSnapPermissions).call(this, snapId);\n        }\n        try {\n            const { sourceCode } = await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_add).call(this, {\n                origin,\n                id: snapId,\n                location,\n                versionRange,\n            });\n            await this.authorize(snapId, pendingApproval);\n            pendingApproval = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_createApproval).call(this, {\n                origin,\n                snapId,\n                type: exports.SNAP_APPROVAL_RESULT,\n            });\n            await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_startSnap).call(this, {\n                snapId,\n                sourceCode,\n            });\n            const truncated = this.getTruncatedExpect(snapId);\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_updateApproval).call(this, pendingApproval.id, {\n                loading: false,\n                type: exports.SNAP_APPROVAL_INSTALL,\n            });\n            return truncated;\n        }\n        catch (error) {\n            (0, snaps_utils_1.logError)(`Error when adding ${snapId}.`, error);\n            const errorString = error instanceof Error ? error.message : error.toString();\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_updateApproval).call(this, pendingApproval.id, {\n                loading: false,\n                type: exports.SNAP_APPROVAL_INSTALL,\n                error: errorString,\n            });\n            this.messagingSystem.publish('SnapController:snapInstallFailed', snapId, origin, false, errorString);\n            throw error;\n        }\n    }\n    /**\n     * Updates an installed snap. The flow is similar to\n     * {@link SnapController.installSnaps}. The user will be asked if they want\n     * to update, then approve any permission changes, and finally the snap will\n     * be restarted.\n     *\n     * The update will fail if the user rejects any prompt or if the new version\n     * of the snap is blocked.\n     *\n     * If the original version of the snap was blocked and the update succeeded,\n     * the snap will be unblocked and enabled before it is restarted.\n     *\n     * @param origin - The origin requesting the snap update.\n     * @param snapId - The id of the Snap to be updated.\n     * @param location - The location implementation of the snap.\n     * @param newVersionRange - A semver version range in which the maximum version will be chosen.\n     * @param emitEvent - An optional boolean flag to indicate whether this update should emit an event.\n     * @returns The snap metadata if updated, `null` otherwise.\n     */\n    async updateSnap(origin, snapId, location, newVersionRange = snaps_utils_1.DEFAULT_REQUESTED_SNAP_VERSION, emitEvent = true) {\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertCanInstallSnaps).call(this);\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertCanUsePlatform).call(this);\n        if (!(0, utils_1.isValidSemVerRange)(newVersionRange)) {\n            throw new Error(`Received invalid snap version range: \"${newVersionRange}\".`);\n        }\n        let pendingApproval = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_createApproval).call(this, {\n            origin,\n            snapId,\n            type: exports.SNAP_APPROVAL_UPDATE,\n        });\n        try {\n            this.messagingSystem.publish('SnapController:snapInstallStarted', snapId, origin, true);\n            const snap = this.getExpect(snapId);\n            const oldManifest = snap.manifest;\n            const newSnap = await (0, utils_2.fetchSnap)(snapId, location);\n            const { sourceCode: sourceCodeFile, manifest: manifestFile } = newSnap;\n            const manifest = manifestFile.result;\n            const newVersion = manifest.version;\n            if (!(0, utils_1.gtVersion)(newVersion, snap.version)) {\n                throw rpc_errors_1.rpcErrors.invalidParams(`Snap \"${snapId}@${snap.version}\" is already installed. Couldn't update to a version inside requested \"${newVersionRange}\" range.`);\n            }\n            if (!(0, utils_1.satisfiesVersionRange)(newVersion, newVersionRange)) {\n                throw new Error(`Version mismatch. Manifest for \"${snapId}\" specifies version \"${newVersion}\" which doesn't satisfy requested version range \"${newVersionRange}\".`);\n            }\n            await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertIsInstallAllowed).call(this, snapId, {\n                version: newVersion,\n                checksum: manifest.source.shasum,\n                permissions: manifest.initialPermissions,\n            });\n            const processedPermissions = (0, snaps_rpc_methods_1.processSnapPermissions)(manifest.initialPermissions);\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_validateSnapPermissions).call(this, processedPermissions);\n            const { newPermissions, unusedPermissions, approvedPermissions } = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_calculatePermissionsChange).call(this, snapId, processedPermissions);\n            const { newConnections, unusedConnections, approvedConnections } = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_calculateConnectionsChange).call(this, snapId, oldManifest.initialConnections ?? {}, manifest.initialConnections ?? {});\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_updateApproval).call(this, pendingApproval.id, {\n                permissions: newPermissions,\n                newVersion: manifest.version,\n                newPermissions,\n                approvedPermissions,\n                unusedPermissions,\n                newConnections,\n                unusedConnections,\n                approvedConnections,\n                loading: false,\n            });\n            const { permissions: approvedNewPermissions, ...requestData } = (await pendingApproval.promise);\n            pendingApproval = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_createApproval).call(this, {\n                origin,\n                snapId,\n                type: exports.SNAP_APPROVAL_RESULT,\n            });\n            if (this.isRunning(snapId)) {\n                await this.stopSnap(snapId, snaps_utils_1.SnapStatusEvents.Stop);\n            }\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_transition).call(this, snapId, snaps_utils_1.SnapStatusEvents.Update);\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_set).call(this, {\n                origin,\n                id: snapId,\n                files: newSnap,\n                isUpdate: true,\n            });\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_updatePermissions).call(this, {\n                snapId,\n                unusedPermissions,\n                newPermissions: approvedNewPermissions,\n                requestData,\n            });\n            if (manifest.initialConnections) {\n                __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_handleInitialConnections).call(this, snapId, oldManifest.initialConnections ?? null, manifest.initialConnections);\n            }\n            const rollbackSnapshot = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRollbackSnapshot).call(this, snapId);\n            if (rollbackSnapshot !== undefined) {\n                rollbackSnapshot.permissions.revoked = unusedPermissions;\n                rollbackSnapshot.permissions.granted = approvedNewPermissions;\n                rollbackSnapshot.permissions.requestData = requestData;\n            }\n            const sourceCode = sourceCodeFile.toString();\n            (0, utils_1.assert)(typeof sourceCode === 'string' && sourceCode.length > 0, `Invalid source code for snap \"${snapId}\".`);\n            try {\n                await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_startSnap).call(this, { snapId, sourceCode });\n            }\n            catch {\n                throw new Error(`Snap ${snapId} crashed with updated source code.`);\n            }\n            const truncatedSnap = this.getTruncatedExpect(snapId);\n            if (emitEvent) {\n                this.messagingSystem.publish('SnapController:snapUpdated', truncatedSnap, snap.version, origin);\n            }\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_updateApproval).call(this, pendingApproval.id, {\n                loading: false,\n                type: exports.SNAP_APPROVAL_UPDATE,\n            });\n            return truncatedSnap;\n        }\n        catch (error) {\n            (0, snaps_utils_1.logError)(`Error when updating ${snapId},`, error);\n            const errorString = error instanceof Error ? error.message : error.toString();\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_updateApproval).call(this, pendingApproval.id, {\n                loading: false,\n                error: errorString,\n                type: exports.SNAP_APPROVAL_UPDATE,\n            });\n            this.messagingSystem.publish('SnapController:snapInstallFailed', snapId, origin, true, errorString);\n            throw error;\n        }\n    }\n    /**\n     * Get metadata for the given snap ID.\n     *\n     * @param snapId - The ID of the snap to get metadata for.\n     * @returns The metadata for the given snap ID, or `null` if the snap is not\n     * verified.\n     */\n    async getRegistryMetadata(snapId) {\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertCanUsePlatform).call(this);\n        return await this.messagingSystem.call('SnapsRegistry:getMetadata', snapId);\n    }\n    /**\n     * Initiates a request for the given snap's initial permissions.\n     * Must be called in order. See processRequestedSnap.\n     *\n     * This function is not hash private yet because of tests.\n     *\n     * @param snapId - The id of the Snap.\n     * @param pendingApproval - Pending approval to update.\n     * @returns The snap's approvedPermissions.\n     */\n    async authorize(snapId, pendingApproval) {\n        (0, logging_1.log)(`Authorizing snap: ${snapId}`);\n        const snapsState = this.state.snaps;\n        const snap = snapsState[snapId];\n        const { initialPermissions, initialConnections } = snap;\n        try {\n            const processedPermissions = (0, snaps_rpc_methods_1.processSnapPermissions)(initialPermissions);\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_validateSnapPermissions).call(this, processedPermissions);\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_updateApproval).call(this, pendingApproval.id, {\n                loading: false,\n                connections: initialConnections ?? {},\n                permissions: processedPermissions,\n            });\n            const { permissions: approvedPermissions, ...requestData } = (await pendingApproval.promise);\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_updatePermissions).call(this, {\n                snapId,\n                newPermissions: approvedPermissions,\n                requestData,\n            });\n            if (snap.manifest.initialConnections) {\n                __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_handleInitialConnections).call(this, snapId, null, snap.manifest.initialConnections);\n            }\n        }\n        finally {\n            const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n            runtime.installPromise = null;\n        }\n    }\n    destroy() {\n        super.destroy();\n        if (__classPrivateFieldGet(this, _SnapController_timeoutForLastRequestStatus, \"f\")) {\n            clearTimeout(__classPrivateFieldGet(this, _SnapController_timeoutForLastRequestStatus, \"f\"));\n        }\n        /* eslint-disable @typescript-eslint/unbound-method */\n        this.messagingSystem.unsubscribe('ExecutionService:unhandledError', this._onUnhandledSnapError);\n        this.messagingSystem.unsubscribe('ExecutionService:outboundRequest', this._onOutboundRequest);\n        this.messagingSystem.unsubscribe('ExecutionService:outboundResponse', this._onOutboundResponse);\n        this.messagingSystem.clearEventSubscriptions('SnapController:snapInstalled');\n        this.messagingSystem.clearEventSubscriptions('SnapController:snapUpdated');\n        /* eslint-enable @typescript-eslint/unbound-method */\n    }\n    /**\n     * Passes a JSON-RPC request object to the RPC handler function of a snap.\n     *\n     * @param options - A bag of options.\n     * @param options.snapId - The ID of the recipient snap.\n     * @param options.origin - The origin of the RPC request.\n     * @param options.handler - The handler to trigger on the snap for the request.\n     * @param options.request - The JSON-RPC request object.\n     * @returns The result of the JSON-RPC request.\n     */\n    async handleRequest({ snapId, origin, handler: handlerType, request: rawRequest, }) {\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertCanUsePlatform).call(this);\n        const request = {\n            jsonrpc: '2.0',\n            id: (0, nanoid_1.nanoid)(),\n            ...rawRequest,\n        };\n        (0, utils_1.assertIsJsonRpcRequest)(request);\n        const permissionName = snaps_rpc_methods_1.handlerEndowments[handlerType];\n        (0, utils_1.assert)(typeof permissionName === 'string' || permissionName === null, \"'permissionName' must be either a string or null.\");\n        const permissions = this.messagingSystem.call('PermissionController:getPermissions', snapId);\n        // If permissionName is null, the handler does not require a permission.\n        if (permissionName !== null &&\n            (!permissions || !(0, utils_1.hasProperty)(permissions, permissionName))) {\n            throw new Error(`Snap \"${snapId}\" is not permitted to use \"${permissionName}\".`);\n        }\n        const handlerPermissions = permissionName\n            ? permissions[permissionName]\n            : undefined;\n        if (permissionName === snaps_rpc_methods_1.SnapEndowments.Rpc ||\n            permissionName === snaps_rpc_methods_1.SnapEndowments.Keyring) {\n            (0, utils_1.assert)(handlerPermissions);\n            const subject = this.messagingSystem.call('SubjectMetadataController:getSubjectMetadata', origin);\n            const origins = permissionName === snaps_rpc_methods_1.SnapEndowments.Rpc\n                ? (0, snaps_rpc_methods_1.getRpcCaveatOrigins)(handlerPermissions)\n                : (0, snaps_rpc_methods_1.getKeyringCaveatOrigins)(handlerPermissions);\n            (0, utils_1.assert)(origins);\n            if (!(0, snaps_utils_1.isOriginAllowed)(origins, subject?.subjectType ?? permission_controller_1.SubjectType.Website, origin)) {\n                throw new Error(`Snap \"${snapId}\" is not permitted to handle requests from \"${origin}\".`);\n            }\n        }\n        const handler = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRpcRequestHandler).call(this, snapId);\n        if (!handler) {\n            throw new Error(`Snap RPC message handler not found for snap \"${snapId}\".`);\n        }\n        const timeout = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getExecutionTimeout).call(this, handlerPermissions);\n        return handler({ origin, handler: handlerType, request, timeout });\n    }\n}\nexports.SnapController = SnapController;\n_SnapController_closeAllConnections = new WeakMap(), _SnapController_dynamicPermissions = new WeakMap(), _SnapController_environmentEndowmentPermissions = new WeakMap(), _SnapController_excludedPermissions = new WeakMap(), _SnapController_featureFlags = new WeakMap(), _SnapController_fetchFunction = new WeakMap(), _SnapController_idleTimeCheckInterval = new WeakMap(), _SnapController_maxIdleTime = new WeakMap(), _SnapController_encryptor = new WeakMap(), _SnapController_getMnemonic = new WeakMap(), _SnapController_getFeatureFlags = new WeakMap(), _SnapController_detectSnapLocation = new WeakMap(), _SnapController_snapsRuntimeData = new WeakMap(), _SnapController_rollbackSnapshots = new WeakMap(), _SnapController_timeoutForLastRequestStatus = new WeakMap(), _SnapController_statusMachine = new WeakMap(), _SnapController_preinstalledSnaps = new WeakMap(), _SnapController_instances = new WeakSet(), _SnapController_initializeStateMachine = function _SnapController_initializeStateMachine() {\n    const disableGuard = ({ snapId }) => {\n        return this.getExpect(snapId).enabled;\n    };\n    const statusConfig = {\n        initial: snaps_utils_1.SnapStatus.Installing,\n        states: {\n            [snaps_utils_1.SnapStatus.Installing]: {\n                on: {\n                    [snaps_utils_1.SnapStatusEvents.Start]: {\n                        target: snaps_utils_1.SnapStatus.Running,\n                        cond: disableGuard,\n                    },\n                },\n            },\n            [snaps_utils_1.SnapStatus.Updating]: {\n                on: {\n                    [snaps_utils_1.SnapStatusEvents.Start]: {\n                        target: snaps_utils_1.SnapStatus.Running,\n                        cond: disableGuard,\n                    },\n                    [snaps_utils_1.SnapStatusEvents.Stop]: snaps_utils_1.SnapStatus.Stopped,\n                },\n            },\n            [snaps_utils_1.SnapStatus.Running]: {\n                on: {\n                    [snaps_utils_1.SnapStatusEvents.Stop]: snaps_utils_1.SnapStatus.Stopped,\n                    [snaps_utils_1.SnapStatusEvents.Crash]: snaps_utils_1.SnapStatus.Crashed,\n                },\n            },\n            [snaps_utils_1.SnapStatus.Stopped]: {\n                on: {\n                    [snaps_utils_1.SnapStatusEvents.Start]: {\n                        target: snaps_utils_1.SnapStatus.Running,\n                        cond: disableGuard,\n                    },\n                    [snaps_utils_1.SnapStatusEvents.Update]: snaps_utils_1.SnapStatus.Updating,\n                },\n            },\n            [snaps_utils_1.SnapStatus.Crashed]: {\n                on: {\n                    [snaps_utils_1.SnapStatusEvents.Start]: {\n                        target: snaps_utils_1.SnapStatus.Running,\n                        cond: disableGuard,\n                    },\n                    [snaps_utils_1.SnapStatusEvents.Update]: snaps_utils_1.SnapStatus.Updating,\n                },\n            },\n        },\n    };\n    __classPrivateFieldSet(this, _SnapController_statusMachine, (0, fsm_1.createMachine)(statusConfig), \"f\");\n    (0, fsm_2.validateMachine)(__classPrivateFieldGet(this, _SnapController_statusMachine, \"f\"));\n}, _SnapController_registerMessageHandlers = function _SnapController_registerMessageHandlers() {\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:clearSnapState`, (...args) => this.clearSnapState(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:get`, (...args) => this.get(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:getSnapState`, async (...args) => this.getSnapState(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:handleRequest`, async (...args) => this.handleRequest(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:has`, (...args) => this.has(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:updateBlockedSnaps`, async () => this.updateBlockedSnaps());\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:updateSnapState`, async (...args) => this.updateSnapState(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:enable`, (...args) => this.enableSnap(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:disable`, async (...args) => this.disableSnap(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:remove`, async (...args) => this.removeSnap(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:getPermitted`, (...args) => this.getPermittedSnaps(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:install`, async (...args) => this.installSnaps(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:getAll`, (...args) => this.getAllSnaps(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:incrementActiveReferences`, (...args) => this.incrementActiveReferences(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:decrementActiveReferences`, (...args) => this.decrementActiveReferences(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:getRegistryMetadata`, async (...args) => this.getRegistryMetadata(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:disconnectOrigin`, (...args) => this.removeSnapFromSubject(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:revokeDynamicPermissions`, (...args) => this.revokeDynamicSnapPermissions(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:getFile`, async (...args) => this.getSnapFile(...args));\n    this.messagingSystem.registerActionHandler(`${exports.controllerName}:stopAllSnaps`, async (...args) => this.stopAllSnaps(...args));\n}, _SnapController_handlePreinstalledSnaps = function _SnapController_handlePreinstalledSnaps(preinstalledSnaps) {\n    for (const { snapId, manifest, files, removable, hidden, hideSnapBranding, } of preinstalledSnaps) {\n        const existingSnap = this.get(snapId);\n        const isAlreadyInstalled = existingSnap !== undefined;\n        const isUpdate = isAlreadyInstalled && (0, utils_1.gtVersion)(manifest.version, existingSnap.version);\n        // Disallow downgrades and overwriting non preinstalled snaps\n        if (isAlreadyInstalled &&\n            (!isUpdate || existingSnap.preinstalled !== true)) {\n            continue;\n        }\n        const manifestFile = new snaps_utils_1.VirtualFile({\n            path: snaps_utils_1.NpmSnapFileNames.Manifest,\n            value: JSON.stringify(manifest),\n            result: manifest,\n        });\n        const virtualFiles = files.map(({ path, value }) => new snaps_utils_1.VirtualFile({ value, path }));\n        const { filePath, iconPath } = manifest.source.location.npm;\n        const sourceCode = virtualFiles.find((file) => file.path === filePath);\n        const svgIcon = iconPath\n            ? virtualFiles.find((file) => file.path === iconPath)\n            : undefined;\n        (0, utils_1.assert)(sourceCode, 'Source code not provided for preinstalled snap.');\n        (0, utils_1.assert)(!iconPath || (iconPath && svgIcon), 'Icon not provided for preinstalled snap.');\n        (0, utils_1.assert)(manifest.source.files === undefined, 'Auxiliary files are not currently supported for preinstalled snaps.');\n        const localizationFiles = manifest.source.locales?.map((path) => virtualFiles.find((file) => file.path === path)) ?? [];\n        const validatedLocalizationFiles = (0, snaps_utils_1.getValidatedLocalizationFiles)(localizationFiles.filter(Boolean));\n        (0, utils_1.assert)(localizationFiles.length === validatedLocalizationFiles.length, 'Missing localization files for preinstalled snap.');\n        const filesObject = {\n            manifest: manifestFile,\n            sourceCode,\n            svgIcon,\n            auxiliaryFiles: [],\n            localizationFiles: validatedLocalizationFiles,\n        };\n        // Add snap to the SnapController state\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_set).call(this, {\n            id: snapId,\n            origin: 'metamask',\n            files: filesObject,\n            removable,\n            hidden,\n            hideSnapBranding,\n            preinstalled: true,\n        });\n        // Setup permissions\n        const processedPermissions = (0, snaps_rpc_methods_1.processSnapPermissions)(manifest.initialPermissions);\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_validateSnapPermissions).call(this, processedPermissions);\n        const { newPermissions, unusedPermissions } = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_calculatePermissionsChange).call(this, snapId, processedPermissions);\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_updatePermissions).call(this, { snapId, newPermissions, unusedPermissions });\n        if (manifest.initialConnections) {\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_handleInitialConnections).call(this, snapId, existingSnap?.initialConnections ?? null, manifest.initialConnections);\n        }\n        // Set status\n        this.update((state) => {\n            state.snaps[snapId].status = snaps_utils_1.SnapStatus.Stopped;\n        });\n    }\n}, _SnapController_pollForLastRequestStatus = function _SnapController_pollForLastRequestStatus() {\n    __classPrivateFieldSet(this, _SnapController_timeoutForLastRequestStatus, setTimeout(() => {\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_stopSnapsLastRequestPastMax).call(this).catch((error) => {\n            // TODO: Decide how to handle errors.\n            (0, snaps_utils_1.logError)(error);\n        });\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_pollForLastRequestStatus).call(this);\n    }, __classPrivateFieldGet(this, _SnapController_idleTimeCheckInterval, \"f\")), \"f\");\n}, _SnapController_blockSnap = \n/**\n * Blocks an installed snap and prevents it from being started again. Emits\n * {@link SnapBlocked}. Does nothing if the snap is not installed.\n *\n * @param snapId - The snap to block.\n * @param blockedSnapInfo - Information detailing why the snap is blocked.\n */\nasync function _SnapController_blockSnap(snapId, blockedSnapInfo) {\n    if (!this.has(snapId)) {\n        return;\n    }\n    try {\n        this.update((state) => {\n            state.snaps[snapId].blocked = true;\n            state.snaps[snapId].blockInformation = blockedSnapInfo;\n        });\n        await this.disableSnap(snapId);\n    }\n    catch (error) {\n        (0, snaps_utils_1.logError)(`Encountered error when stopping blocked snap \"${snapId}\".`, error);\n    }\n    this.messagingSystem.publish(`${exports.controllerName}:snapBlocked`, snapId, blockedSnapInfo);\n}, _SnapController_unblockSnap = function _SnapController_unblockSnap(snapId) {\n    if (!this.has(snapId) || !this.state.snaps[snapId].blocked) {\n        return;\n    }\n    this.update((state) => {\n        state.snaps[snapId].blocked = false;\n        delete state.snaps[snapId].blockInformation;\n    });\n    this.messagingSystem.publish(`${exports.controllerName}:snapUnblocked`, snapId);\n}, _SnapController_assertIsInstallAllowed = async function _SnapController_assertIsInstallAllowed(snapId, snapInfo) {\n    const results = await this.messagingSystem.call('SnapsRegistry:get', {\n        [snapId]: snapInfo,\n    });\n    const result = results[snapId];\n    if (result.status === registry_1.SnapsRegistryStatus.Blocked) {\n        throw new Error(`Cannot install version \"${snapInfo.version}\" of snap \"${snapId}\": The version is blocked. ${result.reason?.explanation ?? ''}`);\n    }\n    const isAllowlistingRequired = Object.keys(snapInfo.permissions).some((permission) => !constants_1.ALLOWED_PERMISSIONS.includes(permission));\n    if (__classPrivateFieldGet(this, _SnapController_featureFlags, \"f\").requireAllowlist &&\n        isAllowlistingRequired &&\n        result.status !== registry_1.SnapsRegistryStatus.Verified) {\n        throw new Error(`Cannot install version \"${snapInfo.version}\" of snap \"${snapId}\": ${result.status === registry_1.SnapsRegistryStatus.Unavailable\n            ? 'The registry is temporarily unavailable.'\n            : 'The snap is not on the allowlist.'}`);\n    }\n}, _SnapController_assertCanInstallSnaps = function _SnapController_assertCanInstallSnaps() {\n    (0, utils_1.assert)(__classPrivateFieldGet(this, _SnapController_featureFlags, \"f\").disableSnapInstallation !== true, 'Installing Snaps is currently disabled in this version of MetaMask.');\n}, _SnapController_assertCanUsePlatform = function _SnapController_assertCanUsePlatform() {\n    const flags = __classPrivateFieldGet(this, _SnapController_getFeatureFlags, \"f\").call(this);\n    (0, utils_1.assert)(flags.disableSnaps !== true, 'The Snaps platform requires basic functionality to be used. Enable basic functionality in the settings to use the Snaps platform.');\n}, _SnapController_stopSnapsLastRequestPastMax = async function _SnapController_stopSnapsLastRequestPastMax() {\n    const entries = [...__classPrivateFieldGet(this, _SnapController_snapsRuntimeData, \"f\").entries()];\n    return Promise.all(entries\n        .filter(([_snapId, runtime]) => runtime.activeReferences === 0 &&\n        runtime.pendingInboundRequests.length === 0 &&\n        runtime.lastRequest &&\n        __classPrivateFieldGet(this, _SnapController_maxIdleTime, \"f\") &&\n        (0, utils_1.timeSince)(runtime.lastRequest) > __classPrivateFieldGet(this, _SnapController_maxIdleTime, \"f\"))\n        .map(async ([snapId]) => this.stopSnap(snapId, snaps_utils_1.SnapStatusEvents.Stop)));\n}, _SnapController_transition = function _SnapController_transition(snapId, event) {\n    const { interpreter } = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n    interpreter.send(event);\n    this.update((state) => {\n        state.snaps[snapId].status = interpreter.state.value;\n    });\n}, _SnapController_terminateSnap = \n/**\n * Terminates the specified snap and emits the `snapTerminated` event.\n *\n * @param snapId - The snap to terminate.\n */\nasync function _SnapController_terminateSnap(snapId) {\n    await this.messagingSystem.call('ExecutionService:terminateSnap', snapId);\n    // Hack to give up execution for a bit to let gracefully terminating Snaps return.\n    await new Promise((resolve) => setTimeout(resolve, 1));\n    const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n    // Unresponsive requests may still be timed, time them out.\n    runtime.pendingInboundRequests\n        .filter((pendingRequest) => pendingRequest.timer.status !== 'finished')\n        .forEach((pendingRequest) => pendingRequest.timer.finish());\n    // Hack to give up execution for a bit to let timed out requests return.\n    await new Promise((resolve) => setTimeout(resolve, 1));\n    this.messagingSystem.publish('SnapController:snapTerminated', this.getTruncatedExpect(snapId));\n}, _SnapController_getSnapEncryptionKey = \n/**\n * Generate an encryption key to be used for state encryption for a given Snap.\n *\n * @param options - An options bag.\n * @param options.snapId - The Snap ID.\n * @param options.salt - A salt to be used for the encryption key.\n * @param options.useCache - Whether to use caching or not.\n * @param options.keyMetadata - Optional metadata about how to derive the encryption key.\n * @returns An encryption key.\n */\nasync function _SnapController_getSnapEncryptionKey({ snapId, salt: passedSalt, useCache, keyMetadata, }) {\n    const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n    if (runtime.encryptionKey && runtime.encryptionSalt && useCache) {\n        return {\n            key: await __classPrivateFieldGet(this, _SnapController_encryptor, \"f\").importKey(runtime.encryptionKey),\n            salt: runtime.encryptionSalt,\n        };\n    }\n    const salt = passedSalt ?? __classPrivateFieldGet(this, _SnapController_encryptor, \"f\").generateSalt();\n    const mnemonicPhrase = await __classPrivateFieldGet(this, _SnapController_getMnemonic, \"f\").call(this);\n    const entropy = await (0, snaps_rpc_methods_1.getEncryptionEntropy)({ snapId, mnemonicPhrase });\n    const encryptionKey = await __classPrivateFieldGet(this, _SnapController_encryptor, \"f\").keyFromPassword(entropy, salt, true, keyMetadata);\n    const exportedKey = await __classPrivateFieldGet(this, _SnapController_encryptor, \"f\").exportKey(encryptionKey);\n    // Cache exported encryption key in runtime\n    if (useCache) {\n        runtime.encryptionKey = exportedKey;\n        runtime.encryptionSalt = salt;\n    }\n    return { key: encryptionKey, salt };\n}, _SnapController_decryptSnapState = \n/**\n * Decrypt the encrypted state for a given Snap.\n *\n * @param snapId - The Snap ID.\n * @param state - The encrypted state as a string.\n * @returns A valid JSON object derived from the encrypted state.\n * @throws If the decryption fails or the decrypted state is not valid JSON.\n */\nasync function _SnapController_decryptSnapState(snapId, state) {\n    try {\n        const parsed = (0, snaps_utils_1.parseJson)(state);\n        const { salt, keyMetadata } = parsed;\n        const useCache = __classPrivateFieldGet(this, _SnapController_encryptor, \"f\").isVaultUpdated(state);\n        const { key } = await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getSnapEncryptionKey).call(this, {\n            snapId,\n            salt,\n            useCache,\n            // When decrypting state we expect key metadata to be present.\n            // If it isn't present, we assume that the Snap state we are decrypting is old enough to use the legacy encryption params.\n            keyMetadata: keyMetadata ?? constants_1.LEGACY_ENCRYPTION_KEY_DERIVATION_OPTIONS,\n        });\n        const decryptedState = await __classPrivateFieldGet(this, _SnapController_encryptor, \"f\").decryptWithKey(key, parsed);\n        (0, utils_1.assert)((0, utils_1.isValidJson)(decryptedState));\n        return decryptedState;\n    }\n    catch {\n        throw rpc_errors_1.rpcErrors.internal({\n            message: 'Failed to decrypt snap state, the state must be corrupted.',\n        });\n    }\n}, _SnapController_encryptSnapState = \n/**\n * Encrypt a JSON state object for a given Snap.\n *\n * Note: This function does not assert the validity of the object,\n * please ensure only valid JSON is passed to it.\n *\n * @param snapId - The Snap ID.\n * @param state - The state object.\n * @returns A string containing the encrypted JSON object.\n */\nasync function _SnapController_encryptSnapState(snapId, state) {\n    const { key, salt } = await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getSnapEncryptionKey).call(this, {\n        snapId,\n        useCache: true,\n    });\n    const encryptedState = await __classPrivateFieldGet(this, _SnapController_encryptor, \"f\").encryptWithKey(key, state);\n    encryptedState.salt = salt;\n    return JSON.stringify(encryptedState);\n}, _SnapController_handleInitialConnections = function _SnapController_handleInitialConnections(snapId, previousInitialConnections, initialConnections) {\n    if (previousInitialConnections) {\n        const revokedInitialConnections = (0, utils_2.setDiff)(previousInitialConnections, initialConnections);\n        for (const origin of Object.keys(revokedInitialConnections)) {\n            this.removeSnapFromSubject(origin, snapId);\n        }\n    }\n    for (const origin of Object.keys(initialConnections)) {\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_addSnapToSubject).call(this, origin, snapId);\n    }\n}, _SnapController_addSnapToSubject = function _SnapController_addSnapToSubject(origin, snapId) {\n    const subjectPermissions = this.messagingSystem.call('PermissionController:getPermissions', origin);\n    const existingCaveat = subjectPermissions?.[snaps_rpc_methods_1.WALLET_SNAP_PERMISSION_KEY]?.caveats?.find((caveat) => caveat.type === snaps_utils_1.SnapCaveatType.SnapIds);\n    const subjectHasSnap = Boolean(existingCaveat?.value?.[snapId]);\n    // If the subject is already connected to the snap, this is a no-op.\n    if (subjectHasSnap) {\n        return;\n    }\n    // If an existing caveat exists, we add the snap to that.\n    if (existingCaveat) {\n        this.messagingSystem.call('PermissionController:updateCaveat', origin, snaps_rpc_methods_1.WALLET_SNAP_PERMISSION_KEY, snaps_utils_1.SnapCaveatType.SnapIds, { ...existingCaveat.value, [snapId]: {} });\n        return;\n    }\n    const approvedPermissions = {\n        [snaps_rpc_methods_1.WALLET_SNAP_PERMISSION_KEY]: {\n            caveats: [\n                {\n                    type: snaps_utils_1.SnapCaveatType.SnapIds,\n                    value: {\n                        [snapId]: {},\n                    },\n                },\n            ],\n        },\n    };\n    this.messagingSystem.call('PermissionController:grantPermissions', {\n        approvedPermissions,\n        subject: { origin },\n    });\n}, _SnapController_removeSnapFromSubjects = function _SnapController_removeSnapFromSubjects(snapId) {\n    const subjects = this.messagingSystem.call('PermissionController:getSubjectNames');\n    for (const subject of subjects) {\n        this.removeSnapFromSubject(subject, snapId);\n    }\n}, _SnapController_revokeAllSnapPermissions = function _SnapController_revokeAllSnapPermissions(snapId) {\n    if (this.messagingSystem.call('PermissionController:hasPermissions', snapId)) {\n        this.messagingSystem.call('PermissionController:revokeAllPermissions', snapId);\n    }\n}, _SnapController_createApproval = function _SnapController_createApproval({ origin, snapId, type, }) {\n    const id = (0, nanoid_1.nanoid)();\n    const promise = this.messagingSystem.call('ApprovalController:addRequest', {\n        origin,\n        id,\n        type,\n        requestData: {\n            // Mirror previous installation metadata\n            metadata: { id, origin: snapId, dappOrigin: origin },\n            snapId,\n        },\n        requestState: {\n            loading: true,\n        },\n    }, true);\n    return { id, promise };\n}, _SnapController_updateApproval = function _SnapController_updateApproval(id, requestState) {\n    try {\n        this.messagingSystem.call('ApprovalController:updateRequestState', {\n            id,\n            requestState,\n        });\n    }\n    catch {\n        // Do nothing\n    }\n}, _SnapController_resolveAllowlistVersion = async function _SnapController_resolveAllowlistVersion(snapId, versionRange) {\n    return await this.messagingSystem.call('SnapsRegistry:resolveVersion', snapId, versionRange);\n}, _SnapController_add = \n/**\n * Returns a promise representing the complete installation of the requested snap.\n * If the snap is already being installed, the previously pending promise will be returned.\n *\n * @param args - Object containing the snap id and either the URL of the snap's manifest,\n * or the snap's manifest and source code. The object may also optionally contain a target\n * version.\n * @returns The resulting snap object.\n */\nasync function _SnapController_add(args) {\n    const { id: snapId, location, versionRange } = args;\n    __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_setupRuntime).call(this, snapId);\n    const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n    if (!runtime.installPromise) {\n        (0, logging_1.log)(`Adding snap: ${snapId}`);\n        // If fetching and setting the snap succeeds, this property will be set\n        // to null in the authorize() method.\n        runtime.installPromise = (async () => {\n            const fetchedSnap = await (0, utils_2.fetchSnap)(snapId, location);\n            const manifest = fetchedSnap.manifest.result;\n            if (!(0, utils_1.satisfiesVersionRange)(manifest.version, versionRange)) {\n                throw new Error(`Version mismatch. Manifest for \"${snapId}\" specifies version \"${manifest.version}\" which doesn't satisfy requested version range \"${versionRange}\".`);\n            }\n            await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertIsInstallAllowed).call(this, snapId, {\n                version: manifest.version,\n                checksum: manifest.source.shasum,\n                permissions: manifest.initialPermissions,\n            });\n            return __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_set).call(this, {\n                ...args,\n                files: fetchedSnap,\n                id: snapId,\n            });\n        })();\n    }\n    try {\n        return await runtime.installPromise;\n    }\n    catch (error) {\n        // Reset promise so users can retry installation in case the problem is\n        // temporary.\n        runtime.installPromise = null;\n        throw error;\n    }\n}, _SnapController_startSnap = async function _SnapController_startSnap(snapData) {\n    const { snapId } = snapData;\n    if (this.isRunning(snapId)) {\n        throw new Error(`Snap \"${snapId}\" is already started.`);\n    }\n    try {\n        const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n        const result = await this.messagingSystem.call('ExecutionService:executeSnap', {\n            ...snapData,\n            endowments: await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getEndowments).call(this, snapId),\n        });\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_transition).call(this, snapId, snaps_utils_1.SnapStatusEvents.Start);\n        // We treat the initialization of the snap as the first request, for idle timing purposes.\n        runtime.lastRequest = Date.now();\n        return result;\n    }\n    catch (error) {\n        await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_terminateSnap).call(this, snapId);\n        throw error;\n    }\n}, _SnapController_getEndowments = \n/**\n * Gets the names of all endowments that will be added to the Snap's\n * Compartment when it executes. These should be the names of global\n * JavaScript APIs accessible in the root realm of the execution environment.\n *\n * Throws an error if the endowment getter for a permission returns a truthy\n * value that is not an array of strings.\n *\n * @param snapId - The id of the snap whose SES endowments to get.\n * @returns An array of the names of the endowments.\n */\nasync function _SnapController_getEndowments(snapId) {\n    let allEndowments = [];\n    for (const permissionName of __classPrivateFieldGet(this, _SnapController_environmentEndowmentPermissions, \"f\")) {\n        if (this.messagingSystem.call('PermissionController:hasPermission', snapId, permissionName)) {\n            const endowments = await this.messagingSystem.call('PermissionController:getEndowments', snapId, permissionName);\n            if (endowments) {\n                // We don't have any guarantees about the type of the endowments\n                // value, so we have to guard at runtime.\n                if (!Array.isArray(endowments) ||\n                    endowments.some((value) => typeof value !== 'string')) {\n                    throw new Error('Expected an array of string endowment names.');\n                }\n                allEndowments = allEndowments.concat(endowments);\n            }\n        }\n    }\n    const dedupedEndowments = [\n        ...new Set([...snaps_utils_1.DEFAULT_ENDOWMENTS, ...allEndowments]),\n    ];\n    if (dedupedEndowments.length <\n        // This is a bug in TypeScript: https://github.com/microsoft/TypeScript/issues/48313\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        snaps_utils_1.DEFAULT_ENDOWMENTS.length + allEndowments.length) {\n        (0, snaps_utils_1.logError)(`Duplicate endowments found for ${snapId}. Default endowments should not be requested.`, allEndowments);\n    }\n    return dedupedEndowments;\n}, _SnapController_set = function _SnapController_set(args) {\n    const { id: snapId, origin, files, isUpdate = false, removable, preinstalled, hidden, hideSnapBranding, } = args;\n    const { manifest, sourceCode: sourceCodeFile, svgIcon, auxiliaryFiles: rawAuxiliaryFiles, localizationFiles, } = files;\n    (0, snaps_utils_1.assertIsSnapManifest)(manifest.result);\n    const { version } = manifest.result;\n    const sourceCode = sourceCodeFile.toString();\n    (0, utils_1.assert)(typeof sourceCode === 'string' && sourceCode.length > 0, `Invalid source code for snap \"${snapId}\".`);\n    const auxiliaryFiles = rawAuxiliaryFiles.map((file) => {\n        (0, utils_1.assert)(typeof file.data.base64 === 'string');\n        return {\n            path: file.path,\n            value: file.data.base64,\n        };\n    });\n    const snapsState = this.state.snaps;\n    const existingSnap = snapsState[snapId];\n    const previousVersionHistory = existingSnap?.versionHistory ?? [];\n    const versionHistory = [\n        ...previousVersionHistory,\n        {\n            version,\n            date: Date.now(),\n            origin,\n        },\n    ];\n    const localizedFiles = localizationFiles.map((file) => file.result);\n    const snap = {\n        // Restore relevant snap state if it exists\n        ...existingSnap,\n        // Note that the snap will be unblocked and enabled, regardless of its\n        // previous state.\n        blocked: false,\n        enabled: true,\n        removable,\n        preinstalled,\n        hidden,\n        hideSnapBranding,\n        id: snapId,\n        initialConnections: manifest.result.initialConnections,\n        initialPermissions: manifest.result.initialPermissions,\n        manifest: manifest.result,\n        status: __classPrivateFieldGet(this, _SnapController_statusMachine, \"f\").config.initial,\n        sourceCode,\n        version,\n        versionHistory,\n        auxiliaryFiles,\n        localizationFiles: localizedFiles,\n    };\n    // If the snap was blocked, it isn't any longer\n    delete snap.blockInformation;\n    // store the snap back in state\n    const { inversePatches } = this.update((state) => {\n        state.snaps[snapId] = snap;\n    });\n    // checking for isUpdate here as this function is also used in\n    // the install flow, we do not care to create snapshots for installs\n    if (isUpdate) {\n        const rollbackSnapshot = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRollbackSnapshot).call(this, snapId);\n        if (rollbackSnapshot !== undefined) {\n            rollbackSnapshot.statePatches = inversePatches;\n        }\n    }\n    // In case the Snap uses a localized manifest, we need to get the\n    // proposed name from the localized manifest.\n    const { proposedName } = (0, snaps_utils_1.getLocalizedSnapManifest)(manifest.result, 'en', localizedFiles);\n    this.messagingSystem.call('SubjectMetadataController:addSubjectMetadata', {\n        subjectType: permission_controller_1.SubjectType.Snap,\n        name: proposedName,\n        origin: snap.id,\n        version,\n        svgIcon: svgIcon?.toString() ?? null,\n    });\n    return { ...snap, sourceCode };\n}, _SnapController_validateSnapPermissions = function _SnapController_validateSnapPermissions(processedPermissions) {\n    const permissionKeys = Object.keys(processedPermissions);\n    const handlerPermissions = Array.from(new Set(Object.values(snaps_rpc_methods_1.handlerEndowments)));\n    (0, utils_1.assert)(permissionKeys.some((key) => handlerPermissions.includes(key)), `A snap must request at least one of the following permissions: ${handlerPermissions\n        .filter((handler) => handler !== null)\n        .join(', ')}.`);\n    const excludedPermissionErrors = permissionKeys.reduce((errors, permission) => {\n        if ((0, utils_1.hasProperty)(__classPrivateFieldGet(this, _SnapController_excludedPermissions, \"f\"), permission)) {\n            errors.push(__classPrivateFieldGet(this, _SnapController_excludedPermissions, \"f\")[permission]);\n        }\n        return errors;\n    }, []);\n    (0, utils_1.assert)(excludedPermissionErrors.length === 0, `One or more permissions are not allowed:\\n${excludedPermissionErrors.join('\\n')}`);\n}, _SnapController_getExecutionTimeout = function _SnapController_getExecutionTimeout(permission) {\n    return (0, snaps_rpc_methods_1.getMaxRequestTimeCaveat)(permission) ?? this.maxRequestTime;\n}, _SnapController_getRpcRequestHandler = function _SnapController_getRpcRequestHandler(snapId) {\n    const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n    const existingHandler = runtime.rpcHandler;\n    if (existingHandler) {\n        return existingHandler;\n    }\n    const requestQueue = new RequestQueue_1.RequestQueue(5);\n    // We need to set up this promise map to map snapIds to their respective startPromises,\n    // because otherwise we would lose context on the correct startPromise.\n    const startPromises = new Map();\n    const rpcHandler = async ({ origin, handler: handlerType, request, timeout, }) => {\n        if (this.state.snaps[snapId].enabled === false) {\n            throw new Error(`Snap \"${snapId}\" is disabled.`);\n        }\n        if (this.state.snaps[snapId].status === snaps_utils_1.SnapStatus.Installing) {\n            throw new Error(`Snap \"${snapId}\" is currently being installed. Please try again later.`);\n        }\n        if (!this.isRunning(snapId)) {\n            let localStartPromise = startPromises.get(snapId);\n            if (!localStartPromise) {\n                localStartPromise = this.startSnap(snapId);\n                startPromises.set(snapId, localStartPromise);\n            }\n            else if (requestQueue.get(origin) >= requestQueue.maxQueueSize) {\n                throw new Error('Exceeds maximum number of requests waiting to be resolved, please try again.');\n            }\n            requestQueue.increment(origin);\n            try {\n                await localStartPromise;\n            }\n            finally {\n                requestQueue.decrement(origin);\n                // Only delete startPromise for a snap if its value hasn't changed\n                if (startPromises.get(snapId) === localStartPromise) {\n                    startPromises.delete(snapId);\n                }\n            }\n        }\n        const timer = new Timer_1.Timer(timeout);\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_recordSnapRpcRequestStart).call(this, snapId, request.id, timer);\n        const handleRpcRequestPromise = this.messagingSystem.call('ExecutionService:handleRpcRequest', snapId, { origin, handler: handlerType, request });\n        // This will either get the result or reject due to the timeout.\n        try {\n            const result = await (0, utils_2.withTimeout)(handleRpcRequestPromise, timer);\n            if (result === utils_2.hasTimedOut) {\n                throw new Error(`${snapId} failed to respond to the request in time.`);\n            }\n            await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertSnapRpcRequestResult).call(this, snapId, handlerType, result);\n            const transformedResult = await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_transformSnapRpcRequestResult).call(this, snapId, handlerType, result);\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_recordSnapRpcRequestFinish).call(this, snapId, request.id);\n            return transformedResult;\n        }\n        catch (error) {\n            // We flag the RPC request as finished early since termination may affect pending requests\n            __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_recordSnapRpcRequestFinish).call(this, snapId, request.id);\n            const [jsonRpcError, handled] = (0, snaps_utils_1.unwrapError)(error);\n            if (!handled) {\n                await this.stopSnap(snapId, snaps_utils_1.SnapStatusEvents.Crash);\n            }\n            throw jsonRpcError;\n        }\n    };\n    runtime.rpcHandler = rpcHandler;\n    return rpcHandler;\n}, _SnapController_createInterface = \n/**\n * Create a dynamic interface in the SnapInterfaceController.\n *\n * @param snapId - The snap ID.\n * @param content - The initial interface content.\n * @returns An identifier that can be used to identify the interface.\n */\nasync function _SnapController_createInterface(snapId, content) {\n    return this.messagingSystem.call('SnapInterfaceController:createInterface', snapId, content);\n}, _SnapController_assertInterfaceExists = function _SnapController_assertInterfaceExists(snapId, id) {\n    // This will throw if the interface isn't accessible, but we assert nevertheless.\n    (0, utils_1.assert)(this.messagingSystem.call('SnapInterfaceController:getInterface', snapId, id));\n}, _SnapController_transformSnapRpcRequestResult = \n/**\n * Transform a RPC request result if necessary.\n *\n * @param snapId - The snap ID of the snap that produced the result.\n * @param handlerType - The handler type that produced the result.\n * @param result - The result.\n * @returns The transformed result if applicable, otherwise the original result.\n */\nasync function _SnapController_transformSnapRpcRequestResult(snapId, handlerType, result) {\n    switch (handlerType) {\n        case snaps_utils_1.HandlerType.OnTransaction:\n        case snaps_utils_1.HandlerType.OnSignature:\n        case snaps_utils_1.HandlerType.OnHomePage: {\n            // Since this type has been asserted earlier we can cast\n            const castResult = result;\n            // If a handler returns static content, we turn it into a dynamic UI\n            if (castResult && (0, utils_1.hasProperty)(castResult, 'content')) {\n                const { content, ...rest } = castResult;\n                const id = await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_createInterface).call(this, snapId, content);\n                return { ...rest, id };\n            }\n            return result;\n        }\n        default:\n            return result;\n    }\n}, _SnapController_assertSnapRpcRequestResult = \n/**\n * Assert that the returned result of a Snap RPC call is the expected shape.\n *\n * @param snapId - The snap ID.\n * @param handlerType - The handler type of the RPC Request.\n * @param result - The result of the RPC request.\n */\nasync function _SnapController_assertSnapRpcRequestResult(snapId, handlerType, result) {\n    switch (handlerType) {\n        case snaps_utils_1.HandlerType.OnTransaction: {\n            (0, utils_1.assertStruct)(result, snaps_utils_1.OnTransactionResponseStruct);\n            if (result && (0, utils_1.hasProperty)(result, 'id')) {\n                __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertInterfaceExists).call(this, snapId, result.id);\n            }\n            break;\n        }\n        case snaps_utils_1.HandlerType.OnSignature: {\n            (0, utils_1.assertStruct)(result, snaps_utils_1.OnSignatureResponseStruct);\n            if (result && (0, utils_1.hasProperty)(result, 'id')) {\n                __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertInterfaceExists).call(this, snapId, result.id);\n            }\n            break;\n        }\n        case snaps_utils_1.HandlerType.OnHomePage: {\n            (0, utils_1.assertStruct)(result, snaps_utils_1.OnHomePageResponseStruct);\n            if (result && (0, utils_1.hasProperty)(result, 'id')) {\n                __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_assertInterfaceExists).call(this, snapId, result.id);\n            }\n            break;\n        }\n        case snaps_utils_1.HandlerType.OnNameLookup:\n            (0, utils_1.assertStruct)(result, snaps_utils_1.OnNameLookupResponseStruct);\n            break;\n        default:\n            break;\n    }\n}, _SnapController_recordSnapRpcRequestStart = function _SnapController_recordSnapRpcRequestStart(snapId, requestId, timer) {\n    const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n    runtime.pendingInboundRequests.push({ requestId, timer });\n    runtime.lastRequest = null;\n}, _SnapController_recordSnapRpcRequestFinish = function _SnapController_recordSnapRpcRequestFinish(snapId, requestId) {\n    const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntimeExpect).call(this, snapId);\n    runtime.pendingInboundRequests = runtime.pendingInboundRequests.filter((request) => request.requestId !== requestId);\n    if (runtime.pendingInboundRequests.length === 0) {\n        runtime.lastRequest = Date.now();\n    }\n}, _SnapController_getRollbackSnapshot = function _SnapController_getRollbackSnapshot(snapId) {\n    return __classPrivateFieldGet(this, _SnapController_rollbackSnapshots, \"f\").get(snapId);\n}, _SnapController_createRollbackSnapshot = function _SnapController_createRollbackSnapshot(snapId) {\n    (0, utils_1.assert)(__classPrivateFieldGet(this, _SnapController_rollbackSnapshots, \"f\").get(snapId) === undefined, new Error(`Snap \"${snapId}\" rollback snapshot already exists.`));\n    __classPrivateFieldGet(this, _SnapController_rollbackSnapshots, \"f\").set(snapId, {\n        statePatches: [],\n        permissions: {},\n        newVersion: '',\n    });\n    const newRollbackSnapshot = __classPrivateFieldGet(this, _SnapController_rollbackSnapshots, \"f\").get(snapId);\n    (0, utils_1.assert)(newRollbackSnapshot !== undefined, new Error(`Snapshot creation failed for ${snapId}.`));\n    return newRollbackSnapshot;\n}, _SnapController_rollbackSnap = \n/**\n * Rolls back a snap to its previous state, permissions\n * and source code based on the `RollbackSnapshot` that\n * is captured during the update process. After rolling back,\n * the function also emits an event indicating that the\n * snap has been rolled back and it clears the snapshot\n * for that snap.\n *\n * @param snapId - The snap id.\n * @throws {@link Error}. If a snapshot does not exist.\n */\nasync function _SnapController_rollbackSnap(snapId) {\n    const rollbackSnapshot = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRollbackSnapshot).call(this, snapId);\n    if (!rollbackSnapshot) {\n        throw new Error('A snapshot does not exist for this snap.');\n    }\n    await this.stopSnap(snapId, snaps_utils_1.SnapStatusEvents.Stop);\n    // Always set to stopped even if it wasn't running initially\n    if (this.get(snapId)?.status !== snaps_utils_1.SnapStatus.Stopped) {\n        __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_transition).call(this, snapId, snaps_utils_1.SnapStatusEvents.Stop);\n    }\n    const { statePatches, permissions } = rollbackSnapshot;\n    if (statePatches?.length) {\n        this.applyPatches(statePatches);\n    }\n    // Reset snap status, as we may have been in another state when we stored state patches\n    // But now we are 100% in a stopped state\n    if (this.get(snapId)?.status !== snaps_utils_1.SnapStatus.Stopped) {\n        this.update((state) => {\n            state.snaps[snapId].status = snaps_utils_1.SnapStatus.Stopped;\n        });\n    }\n    __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_updatePermissions).call(this, {\n        snapId,\n        unusedPermissions: permissions.granted,\n        newPermissions: permissions.revoked,\n        requestData: permissions.requestData,\n    });\n    const truncatedSnap = this.getTruncatedExpect(snapId);\n    this.messagingSystem.publish('SnapController:snapRolledback', truncatedSnap, rollbackSnapshot.newVersion);\n    __classPrivateFieldGet(this, _SnapController_rollbackSnapshots, \"f\").delete(snapId);\n}, _SnapController_rollbackSnaps = \n/**\n * Iterates through an array of snap ids\n * and calls `rollbackSnap` on them.\n *\n * @param snapIds - An array of snap ids.\n */\nasync function _SnapController_rollbackSnaps(snapIds) {\n    for (const snapId of snapIds) {\n        await __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_rollbackSnap).call(this, snapId);\n    }\n}, _SnapController_getRuntime = function _SnapController_getRuntime(snapId) {\n    return __classPrivateFieldGet(this, _SnapController_snapsRuntimeData, \"f\").get(snapId);\n}, _SnapController_getRuntimeExpect = function _SnapController_getRuntimeExpect(snapId) {\n    const runtime = __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_getRuntime).call(this, snapId);\n    (0, utils_1.assert)(runtime !== undefined, new Error(`Snap \"${snapId}\" runtime data not found`));\n    return runtime;\n}, _SnapController_setupRuntime = function _SnapController_setupRuntime(snapId) {\n    if (__classPrivateFieldGet(this, _SnapController_snapsRuntimeData, \"f\").has(snapId)) {\n        return;\n    }\n    const snap = this.get(snapId);\n    const interpreter = (0, fsm_1.interpret)(__classPrivateFieldGet(this, _SnapController_statusMachine, \"f\"));\n    interpreter.start({\n        context: { snapId },\n        value: snap?.status ??\n            __classPrivateFieldGet(this, _SnapController_statusMachine, \"f\").config.initial,\n    });\n    (0, fsm_2.forceStrict)(interpreter);\n    __classPrivateFieldGet(this, _SnapController_snapsRuntimeData, \"f\").set(snapId, {\n        lastRequest: null,\n        rpcHandler: null,\n        installPromise: null,\n        encryptionKey: null,\n        encryptionSalt: null,\n        activeReferences: 0,\n        pendingInboundRequests: [],\n        pendingOutboundRequests: 0,\n        interpreter,\n        stopping: false,\n    });\n}, _SnapController_calculatePermissionsChange = function _SnapController_calculatePermissionsChange(snapId, desiredPermissionsSet) {\n    const oldPermissions = this.messagingSystem.call('PermissionController:getPermissions', snapId) ?? {};\n    const newPermissions = (0, utils_2.permissionsDiff)(desiredPermissionsSet, oldPermissions);\n    // TODO(ritave): The assumption that these are unused only holds so long as we do not\n    //               permit dynamic permission requests.\n    const unusedPermissions = (0, utils_2.permissionsDiff)(oldPermissions, desiredPermissionsSet);\n    // It's a Set Intersection of oldPermissions and desiredPermissionsSet\n    // oldPermissions ∖ (oldPermissions ∖ desiredPermissionsSet) ⟺ oldPermissions ∩ desiredPermissionsSet\n    const approvedPermissions = (0, utils_2.permissionsDiff)(oldPermissions, unusedPermissions);\n    return { newPermissions, unusedPermissions, approvedPermissions };\n}, _SnapController_isSubjectConnectedToSnap = function _SnapController_isSubjectConnectedToSnap(snapId, origin) {\n    const subjectPermissions = this.messagingSystem.call('PermissionController:getPermissions', origin);\n    const existingCaveat = subjectPermissions?.[snaps_rpc_methods_1.WALLET_SNAP_PERMISSION_KEY]?.caveats?.find((caveat) => caveat.type === snaps_utils_1.SnapCaveatType.SnapIds);\n    return Boolean(existingCaveat?.value?.[snapId]);\n}, _SnapController_calculateConnectionsChange = function _SnapController_calculateConnectionsChange(snapId, oldConnectionsSet, desiredConnectionsSet) {\n    // Filter out any origins that have been revoked since last install/update.\n    // That way they will be represented as new.\n    const filteredOldConnections = Object.keys(oldConnectionsSet)\n        .filter((origin) => __classPrivateFieldGet(this, _SnapController_instances, \"m\", _SnapController_isSubjectConnectedToSnap).call(this, snapId, origin))\n        .reduce((accumulator, origin) => {\n        accumulator[origin] = oldConnectionsSet[origin];\n        return accumulator;\n    }, {});\n    const newConnections = (0, utils_2.setDiff)(desiredConnectionsSet, filteredOldConnections);\n    const unusedConnections = (0, utils_2.setDiff)(filteredOldConnections, desiredConnectionsSet);\n    // It's a Set Intersection of oldConnections and desiredConnectionsSet\n    // oldConnections ∖ (oldConnections ∖ desiredConnectionsSet) ⟺ oldConnections ∩ desiredConnectionsSet\n    const approvedConnections = (0, utils_2.setDiff)(filteredOldConnections, unusedConnections);\n    return { newConnections, unusedConnections, approvedConnections };\n}, _SnapController_updatePermissions = function _SnapController_updatePermissions({ snapId, unusedPermissions = {}, newPermissions = {}, requestData, }) {\n    const unusedPermissionsKeys = Object.keys(unusedPermissions);\n    if ((0, utils_1.isNonEmptyArray)(unusedPermissionsKeys)) {\n        this.messagingSystem.call('PermissionController:revokePermissions', {\n            [snapId]: unusedPermissionsKeys,\n        });\n    }\n    if ((0, utils_1.isNonEmptyArray)(Object.keys(newPermissions))) {\n        this.messagingSystem.call('PermissionController:grantPermissions', {\n            approvedPermissions: newPermissions,\n            subject: { origin: snapId },\n            requestData,\n        });\n    }\n}, _SnapController_isValidUpdate = function _SnapController_isValidUpdate(snapId, newVersionRange) {\n    const existingSnap = this.getExpect(snapId);\n    if ((0, utils_1.satisfiesVersionRange)(existingSnap.version, newVersionRange)) {\n        return false;\n    }\n    if ((0, utils_1.gtRange)(existingSnap.version, newVersionRange)) {\n        return false;\n    }\n    return true;\n}, _SnapController_callLifecycleHook = \n/**\n * Call a lifecycle hook on a snap, if the snap has the\n * `endowment:lifecycle-hooks` permission. If the snap does not have the\n * permission, nothing happens.\n *\n * @param origin - The origin.\n * @param snapId - The snap ID.\n * @param handler - The lifecycle hook to call. This should be one of the\n * supported lifecycle hooks.\n * @private\n */\nasync function _SnapController_callLifecycleHook(origin, snapId, handler) {\n    const permissionName = snaps_rpc_methods_1.handlerEndowments[handler];\n    (0, utils_1.assert)(permissionName, 'Lifecycle hook must have an endowment.');\n    const hasPermission = this.messagingSystem.call('PermissionController:hasPermission', snapId, permissionName);\n    if (!hasPermission) {\n        return;\n    }\n    await this.handleRequest({\n        snapId,\n        handler,\n        origin,\n        request: {\n            jsonrpc: '2.0',\n            method: handler,\n        },\n    });\n};\n//# sourceMappingURL=SnapController.cjs.map","import { hasProperty, isObject } from '@metamask/utils';\nimport { cloneDeep } from 'lodash';\n\nexport const version = 89;\n\n/**\n * Add an `id` to the `providerConfig` object.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    hasProperty(state, 'NetworkController') &&\n    isObject(state.NetworkController) &&\n    hasProperty(state.NetworkController, 'providerConfig') &&\n    isObject(state.NetworkController.providerConfig)\n  ) {\n    const { networkConfigurations, providerConfig } = state.NetworkController;\n\n    if (!isObject(networkConfigurations)) {\n      return state;\n    }\n\n    if (providerConfig.id) {\n      return state;\n    }\n\n    let newProviderConfigId;\n\n    for (const networkConfigurationId of Object.keys(networkConfigurations)) {\n      const networkConfiguration =\n        networkConfigurations[networkConfigurationId];\n      if (!isObject(networkConfiguration)) {\n        return state;\n      }\n      if (networkConfiguration.rpcUrl === providerConfig.rpcUrl) {\n        newProviderConfigId = networkConfiguration.id;\n        break;\n      }\n    }\n\n    if (!newProviderConfigId) {\n      return state;\n    }\n\n    state.NetworkController.providerConfig = {\n      ...providerConfig,\n      id: newProviderConfigId,\n    };\n\n    return {\n      ...state,\n      NetworkController: state.NetworkController,\n    };\n  } else if (!isObject(state.NetworkController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController is ${typeof state.NetworkController}`,\n      ),\n    );\n  } else if (!isObject(state.NetworkController.providerConfig)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController.providerConfig is ${typeof state\n          .NetworkController.providerConfig}`,\n      ),\n    );\n  }\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Timer = void 0;\nconst utils_1 = require(\"@metamask/utils\");\nclass Timer {\n    /**\n     * If `ms` is smaller or equal to zero (including -Infinity), the callback is added to the event loop and executed async immediately\n     * If `ms` is +Infinity the timer never finishes.\n     *\n     * @throws {@link TypeError}. If `ms` is NaN or negative.\n     * @param ms - The number of milliseconds before the callback is called after started.\n     */\n    constructor(ms) {\n        (0, utils_1.assert)(!Number.isNaN(ms), new TypeError(\"Can't start a timer with NaN time\"));\n        (0, utils_1.assert)(ms >= 0, new TypeError(\"Can't start a timer with negative time\"));\n        this.state = { value: 'stopped', remaining: ms };\n    }\n    get status() {\n        return this.state.value;\n    }\n    get remaining() {\n        return this.state.remaining;\n    }\n    /**\n     * Cancels the currently running timer and marks it finished.\n     *\n     * @throws {@link Error}. If it wasn't running or paused.\n     */\n    cancel() {\n        (0, utils_1.assert)(this.status === 'paused' || this.status === 'running', new Error('Tried to cancel a not running Timer'));\n        this.onFinish(false);\n    }\n    /**\n     * Marks the timer as finished prematurely and triggers the callback.\n     *\n     * @throws {@link Error}. If it wasn't running or paused.\n     */\n    finish() {\n        (0, utils_1.assert)(this.status !== 'finished', new Error('Tried to finish a finished Timer.'));\n        this.onFinish(true);\n    }\n    /**\n     * Pauses a currently running timer, allowing it to resume later.\n     *\n     * @throws {@link Error}. If it wasn't running.\n     */\n    pause() {\n        (0, utils_1.assert)(this.state.value === 'running', new Error('Tried to pause a not running Timer'));\n        const { callback, start, timeout, remaining } = this.state;\n        timeout !== undefined && clearTimeout(timeout);\n        this.state = {\n            value: 'paused',\n            callback,\n            remaining: remaining - (Date.now() - start),\n        };\n    }\n    /**\n     * Starts the timer.\n     *\n     * @param callback - The function that will be called after the timer finishes.\n     * @throws {@link Error}. If it was already started.\n     */\n    start(callback) {\n        (0, utils_1.assert)(this.state.value === 'stopped', new Error('Tried to start an already running Timer'));\n        const { remaining } = this.state;\n        this.state = { value: 'paused', remaining, callback };\n        this.resume();\n    }\n    /**\n     * Resumes a currently paused timer.\n     *\n     * @throws {@link Error}. If it wasn't paused.\n     */\n    resume() {\n        (0, utils_1.assert)(this.state.value === 'paused', new Error('Tried to resume not paused Timer'));\n        const { remaining, callback } = this.state;\n        const start = Date.now();\n        let timeout;\n        // setTimeout returns immediately on +Infinity which we use\n        if (remaining !== Number.POSITIVE_INFINITY) {\n            timeout = setTimeout(() => this.onFinish(true), remaining);\n        }\n        this.state = { value: 'running', callback, remaining, start, timeout };\n    }\n    onFinish(shouldCall) {\n        (0, utils_1.assert)(this.state.value === 'running' || this.state.value === 'paused');\n        if (this.state.value === 'running' && this.state.timeout !== undefined) {\n            clearTimeout(this.state.timeout);\n        }\n        const { callback, remaining } = this.state;\n        this.state = {\n            value: 'finished',\n            remaining: this.state.value === 'running'\n                ? remaining - (Date.now() - this.state.start)\n                : remaining,\n        };\n        if (shouldCall) {\n            callback();\n        }\n    }\n}\nexports.Timer = Timer;\n//# sourceMappingURL=Timer.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LEGACY_ENCRYPTION_KEY_DERIVATION_OPTIONS = exports.ALLOWED_PERMISSIONS = void 0;\nconst snaps_rpc_methods_1 = require(\"@metamask/snaps-rpc-methods\");\n// These permissions are allowed without being on the allowlist.\nexports.ALLOWED_PERMISSIONS = Object.freeze([\n    'snap_dialog',\n    'snap_manageState',\n    'snap_notify',\n    'snap_getLocale',\n    snaps_rpc_methods_1.SnapEndowments.Cronjob,\n    snaps_rpc_methods_1.SnapEndowments.HomePage,\n    snaps_rpc_methods_1.SnapEndowments.LifecycleHooks,\n    snaps_rpc_methods_1.SnapEndowments.EthereumProvider,\n    snaps_rpc_methods_1.SnapEndowments.TransactionInsight,\n    snaps_rpc_methods_1.SnapEndowments.SignatureInsight,\n]);\nexports.LEGACY_ENCRYPTION_KEY_DERIVATION_OPTIONS = {\n    algorithm: 'PBKDF2',\n    params: {\n        iterations: 10000,\n    },\n};\n//# sourceMappingURL=constants.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./location/index.cjs\"), exports);\n__exportStar(require(\"./SnapController.cjs\"), exports);\n__exportStar(require(\"./selectors.cjs\"), exports);\n__exportStar(require(\"./registry/index.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpLocation = void 0;\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst utils_1 = require(\"@metamask/utils\");\nclass HttpLocation {\n    constructor(url, opts = {}) {\n        // We keep contents separate because then we can use only one Blob in cache,\n        // which we convert to Uint8Array when actually returning the file.\n        //\n        // That avoids deepCloning file contents.\n        // I imagine ArrayBuffers are copy-on-write optimized, meaning\n        // in most often case we'll only have one file contents in common case.\n        this.cache = new Map();\n        (0, utils_1.assertStruct)(url.toString(), snaps_utils_1.HttpSnapIdStruct, 'Invalid Snap Id: ');\n        this.fetchFn = opts.fetch ?? globalThis.fetch.bind(undefined);\n        this.fetchOptions = opts.fetchOptions;\n        this.url = url;\n    }\n    async manifest() {\n        if (this.validatedManifest) {\n            return this.validatedManifest.clone();\n        }\n        // jest-fetch-mock doesn't handle new URL(), we need to convert .toString()\n        const canonicalPath = new URL(snaps_utils_1.NpmSnapFileNames.Manifest, this.url).toString();\n        const response = await this.fetchFn(canonicalPath, this.fetchOptions);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch \"${canonicalPath}\". Status code: ${response.status}.`);\n        }\n        const contents = await response.text();\n        const manifest = (0, snaps_utils_1.parseJson)(contents);\n        const vfile = new snaps_utils_1.VirtualFile({\n            value: contents,\n            result: (0, snaps_utils_1.createSnapManifest)(manifest),\n            path: snaps_utils_1.NpmSnapFileNames.Manifest,\n            data: { canonicalPath },\n        });\n        this.validatedManifest = vfile;\n        return this.manifest();\n    }\n    async fetch(path) {\n        const relativePath = (0, snaps_utils_1.normalizeRelative)(path);\n        const cached = this.cache.get(relativePath);\n        if (cached !== undefined) {\n            const { file, contents } = cached;\n            const value = new Uint8Array(await contents.arrayBuffer());\n            const vfile = file.clone();\n            vfile.value = value;\n            return vfile;\n        }\n        const canonicalPath = this.toCanonical(relativePath).toString();\n        const response = await this.fetchFn(canonicalPath, this.fetchOptions);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch \"${canonicalPath}\". Status code: ${response.status}.`);\n        }\n        const vfile = new snaps_utils_1.VirtualFile({\n            value: '',\n            path: relativePath,\n            data: { canonicalPath },\n        });\n        const blob = await response.blob();\n        (0, utils_1.assert)(!this.cache.has(relativePath), 'Corrupted cache, multiple files with same path.');\n        this.cache.set(relativePath, { file: vfile, contents: blob });\n        return this.fetch(relativePath);\n    }\n    get root() {\n        return new URL(this.url);\n    }\n    toCanonical(path) {\n        (0, utils_1.assert)(!path.startsWith('/'), 'Tried to parse absolute path.');\n        return new URL(path, this.url);\n    }\n}\nexports.HttpLocation = HttpLocation;\n//# sourceMappingURL=http.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./location.cjs\"), exports);\n__exportStar(require(\"./npm.cjs\"), exports);\n__exportStar(require(\"./local.cjs\"), exports);\n__exportStar(require(\"./http.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LocalLocation_http;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LocalLocation = void 0;\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst utils_1 = require(\"@metamask/utils\");\nconst http_1 = require(\"./http.cjs\");\nclass LocalLocation {\n    constructor(url, opts = {}) {\n        _LocalLocation_http.set(this, void 0);\n        (0, utils_1.assertStruct)(url.toString(), snaps_utils_1.LocalSnapIdStruct, 'Invalid Snap Id');\n        // TODO(ritave): Write deepMerge() which merges fetchOptions.\n        (0, utils_1.assert)(opts.fetchOptions === undefined, 'Currently adding fetch options to local: is unsupported.');\n        __classPrivateFieldSet(this, _LocalLocation_http, new http_1.HttpLocation(new URL(url.toString().slice(snaps_utils_1.SnapIdPrefixes.local.length)), { ...opts, fetchOptions: { cache: 'no-cache' } }), \"f\");\n    }\n    async manifest() {\n        const vfile = await __classPrivateFieldGet(this, _LocalLocation_http, \"f\").manifest();\n        return convertCanonical(vfile);\n    }\n    async fetch(path) {\n        return convertCanonical(await __classPrivateFieldGet(this, _LocalLocation_http, \"f\").fetch(path));\n    }\n    get shouldAlwaysReload() {\n        return true;\n    }\n}\nexports.LocalLocation = LocalLocation;\n_LocalLocation_http = new WeakMap();\n/**\n * Converts vfiles with canonical `http:` paths into `local:` paths.\n *\n * @param vfile - The {@link VirtualFile} to convert.\n * @returns The same object with updated `.data.canonicalPath`.\n */\nfunction convertCanonical(vfile) {\n    (0, utils_1.assert)(vfile.data.canonicalPath !== undefined);\n    vfile.data.canonicalPath = `local:${vfile.data.canonicalPath}`;\n    return vfile;\n}\n//# sourceMappingURL=local.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.detectSnapLocation = void 0;\nconst utils_1 = require(\"@metamask/utils\");\nconst http_1 = require(\"./http.cjs\");\nconst local_1 = require(\"./local.cjs\");\nconst npm_1 = require(\"./npm.cjs\");\n/**\n * Auto-magically detects which SnapLocation object to create based on the provided {@link location}.\n *\n * @param location - A {@link https://github.com/MetaMask/SIPs/blob/main/SIPS/sip-8.md SIP-8} uri.\n * @param opts - NPM options and feature flags.\n * @returns SnapLocation based on url.\n */\nfunction detectSnapLocation(location, opts) {\n    const allowHttp = opts?.allowHttp ?? false;\n    const allowLocal = opts?.allowLocal ?? false;\n    const root = new URL(location);\n    switch (root.protocol) {\n        case 'npm:':\n            return new npm_1.NpmLocation(root, opts);\n        case 'local:':\n            (0, utils_1.assert)(allowLocal, new TypeError('Fetching local snaps is disabled.'));\n            return new local_1.LocalLocation(root, opts);\n        case 'http:':\n        case 'https:':\n            (0, utils_1.assert)(allowHttp, new TypeError('Fetching snaps through http/https is disabled.'));\n            return new http_1.HttpLocation(root, opts);\n        default:\n            throw new TypeError(`Unrecognized \"${root.protocol}\" snap location protocol.`);\n    }\n}\nexports.detectSnapLocation = detectSnapLocation;\n//# sourceMappingURL=location.cjs.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _BaseNpmLocation_instances, _BaseNpmLocation_validatedManifest, _BaseNpmLocation_files, _BaseNpmLocation_lazyInit;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNpmCanonicalBasePath = exports.fetchNpmMetadata = exports.NpmLocation = exports.TARBALL_SIZE_SAFETY_LIMIT = exports.BaseNpmLocation = exports.DEFAULT_NPM_REGISTRY = void 0;\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst utils_1 = require(\"@metamask/utils\");\nconst browserify_zlib_1 = require(\"browserify-zlib\");\nconst concat_stream_1 = __importDefault(require(\"concat-stream\"));\nconst get_npm_tarball_url_1 = __importDefault(require(\"get-npm-tarball-url\"));\nconst readable_stream_1 = require(\"readable-stream\");\nconst readable_web_to_node_stream_1 = require(\"readable-web-to-node-stream\");\nconst tar_stream_1 = require(\"tar-stream\");\nexports.DEFAULT_NPM_REGISTRY = new URL('https://registry.npmjs.org');\n// Base class for NPM implementation, useful for extending with custom NPM fetching logic\nclass BaseNpmLocation {\n    constructor(url, opts = {}) {\n        _BaseNpmLocation_instances.add(this);\n        _BaseNpmLocation_validatedManifest.set(this, void 0);\n        _BaseNpmLocation_files.set(this, void 0);\n        const allowCustomRegistries = opts.allowCustomRegistries ?? false;\n        const fetchFunction = opts.fetch ?? globalThis.fetch.bind(undefined);\n        const requestedRange = opts.versionRange ?? snaps_utils_1.DEFAULT_REQUESTED_SNAP_VERSION;\n        const defaultResolve = async (range) => range;\n        const resolveVersion = opts.resolveVersion ?? defaultResolve;\n        (0, utils_1.assertStruct)(url.toString(), snaps_utils_1.NpmSnapIdStruct, 'Invalid Snap Id: ');\n        let registry;\n        if (url.host === '' &&\n            url.port === '' &&\n            url.username === '' &&\n            url.password === '') {\n            registry = exports.DEFAULT_NPM_REGISTRY;\n        }\n        else {\n            registry = 'https://';\n            if (url.username) {\n                registry += url.username;\n                if (url.password) {\n                    registry += `:${url.password}`;\n                }\n                registry += '@';\n            }\n            registry += url.host;\n            registry = new URL(registry);\n            (0, utils_1.assert)(allowCustomRegistries, new TypeError(`Custom NPM registries are disabled, tried to use \"${registry.toString()}\".`));\n        }\n        (0, utils_1.assert)(registry.pathname === '/' &&\n            registry.search === '' &&\n            registry.hash === '');\n        (0, utils_1.assert)(url.pathname !== '' && url.pathname !== '/', new TypeError('The package name in NPM location is empty.'));\n        let packageName = url.pathname;\n        if (packageName.startsWith('/')) {\n            packageName = packageName.slice(1);\n        }\n        this.meta = {\n            requestedRange,\n            registry,\n            packageName,\n            fetch: fetchFunction,\n            resolveVersion,\n        };\n    }\n    async manifest() {\n        if (__classPrivateFieldGet(this, _BaseNpmLocation_validatedManifest, \"f\")) {\n            return __classPrivateFieldGet(this, _BaseNpmLocation_validatedManifest, \"f\").clone();\n        }\n        const vfile = await this.fetch('snap.manifest.json');\n        const result = (0, snaps_utils_1.parseJson)(vfile.toString());\n        vfile.result = (0, snaps_utils_1.createSnapManifest)(result);\n        __classPrivateFieldSet(this, _BaseNpmLocation_validatedManifest, vfile, \"f\");\n        return this.manifest();\n    }\n    async fetch(path) {\n        const relativePath = (0, snaps_utils_1.normalizeRelative)(path);\n        if (!__classPrivateFieldGet(this, _BaseNpmLocation_files, \"f\")) {\n            await __classPrivateFieldGet(this, _BaseNpmLocation_instances, \"m\", _BaseNpmLocation_lazyInit).call(this);\n            (0, utils_1.assert)(__classPrivateFieldGet(this, _BaseNpmLocation_files, \"f\") !== undefined);\n        }\n        const vfile = __classPrivateFieldGet(this, _BaseNpmLocation_files, \"f\").get(relativePath);\n        (0, utils_1.assert)(vfile !== undefined, new TypeError(`File \"${path}\" not found in package.`));\n        return vfile.clone();\n    }\n    get packageName() {\n        return this.meta.packageName;\n    }\n    get version() {\n        (0, utils_1.assert)(this.meta.version !== undefined, 'Tried to access version without first fetching NPM package.');\n        return this.meta.version;\n    }\n    get registry() {\n        return this.meta.registry;\n    }\n    get versionRange() {\n        return this.meta.requestedRange;\n    }\n}\nexports.BaseNpmLocation = BaseNpmLocation;\n_BaseNpmLocation_validatedManifest = new WeakMap(), _BaseNpmLocation_files = new WeakMap(), _BaseNpmLocation_instances = new WeakSet(), _BaseNpmLocation_lazyInit = async function _BaseNpmLocation_lazyInit() {\n    (0, utils_1.assert)(__classPrivateFieldGet(this, _BaseNpmLocation_files, \"f\") === undefined);\n    const resolvedVersion = await this.meta.resolveVersion(this.meta.requestedRange);\n    const { tarballURL, targetVersion } = await resolveNpmVersion(this.meta.packageName, resolvedVersion, this.meta.registry, this.meta.fetch);\n    if (!(0, snaps_utils_1.isValidUrl)(tarballURL) || !tarballURL.toString().endsWith('.tgz')) {\n        throw new Error(`Failed to find valid tarball URL in NPM metadata for package \"${this.meta.packageName}\".`);\n    }\n    // Override the tarball hostname/protocol with registryUrl hostname/protocol\n    const newTarballUrl = new URL(tarballURL);\n    newTarballUrl.hostname = this.meta.registry.hostname;\n    newTarballUrl.protocol = this.meta.registry.protocol;\n    const files = await this.fetchNpmTarball(newTarballUrl);\n    __classPrivateFieldSet(this, _BaseNpmLocation_files, files, \"f\");\n    this.meta.version = targetVersion;\n};\n// Safety limit for tarballs, 250 MB in bytes\nexports.TARBALL_SIZE_SAFETY_LIMIT = 262144000;\n// Main NPM implementation, contains a browser tarball fetching implementation.\nclass NpmLocation extends BaseNpmLocation {\n    /**\n     * Fetches and unpacks the tarball (`.tgz` file) from the specified URL.\n     *\n     * @param tarballUrl - The tarball URL to fetch and unpack.\n     * @returns A the files for the package tarball.\n     * @throws If fetching the tarball fails.\n     */\n    async fetchNpmTarball(tarballUrl) {\n        // Perform a raw fetch because we want the Response object itself.\n        const tarballResponse = await this.meta.fetch(tarballUrl.toString());\n        if (!tarballResponse.ok || !tarballResponse.body) {\n            throw new Error(`Failed to fetch tarball for package \"${this.meta.packageName}\".`);\n        }\n        // We assume that NPM is a good actor and provides us with a valid `content-length` header.\n        const tarballSizeString = tarballResponse.headers.get('content-length');\n        (0, utils_1.assert)(tarballSizeString, 'Snap tarball has invalid content-length');\n        const tarballSize = parseInt(tarballSizeString, 10);\n        (0, utils_1.assert)(tarballSize <= exports.TARBALL_SIZE_SAFETY_LIMIT, 'Snap tarball exceeds size limit');\n        return new Promise((resolve, reject) => {\n            const files = new Map();\n            const tarballStream = createTarballStream(getNpmCanonicalBasePath(this.meta.registry, this.meta.packageName), files);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const body = tarballResponse.body;\n            // The \"gz\" in \"tgz\" stands for \"gzip\". The tarball needs to be decompressed\n            // before we can actually grab any files from it.\n            // To prevent recursion-based zip bombs, we should not allow recursion here.\n            // If native decompression stream is available we use that, otherwise fallback to zlib.\n            if ('pipeThrough' in body && 'DecompressionStream' in globalThis) {\n                const decompressionStream = new DecompressionStream('gzip');\n                const decompressedStream = body.pipeThrough(decompressionStream);\n                (0, readable_stream_1.pipeline)(getNodeStream(decompressedStream), tarballStream, (error) => {\n                    error ? reject(error) : resolve(files);\n                });\n                return;\n            }\n            (0, readable_stream_1.pipeline)(getNodeStream(body), (0, browserify_zlib_1.createGunzip)(), tarballStream, (error) => {\n                error ? reject(error) : resolve(files);\n            });\n        });\n    }\n}\nexports.NpmLocation = NpmLocation;\n/**\n * Fetches the NPM metadata of the specified package from\n * the public npm registry.\n *\n * @param packageName - The name of the package whose metadata to fetch.\n * @param registryUrl - The URL of the npm registry to fetch the metadata from.\n * @param fetchFunction - The fetch function to use. Defaults to the global\n * {@link fetch}. Useful for Node.js compatibility.\n * @returns The NPM metadata object.\n * @throws If fetching the metadata fails.\n */\nasync function fetchNpmMetadata(packageName, registryUrl, fetchFunction) {\n    const packageResponse = await fetchFunction(new URL(packageName, registryUrl).toString(), {\n        headers: {\n            // Corgi format is slightly smaller: https://github.com/npm/pacote/blob/main/lib/registry.js#L71\n            accept: isNPM(registryUrl)\n                ? 'application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*'\n                : 'application/json',\n        },\n    });\n    if (!packageResponse.ok) {\n        throw new Error(`Failed to fetch NPM registry entry. Status code: ${packageResponse.status}.`);\n    }\n    const packageMetadata = await packageResponse.json();\n    if (!(0, utils_1.isObject)(packageMetadata)) {\n        throw new Error(`Failed to fetch package \"${packageName}\" metadata from npm.`);\n    }\n    return packageMetadata;\n}\nexports.fetchNpmMetadata = fetchNpmMetadata;\n/**\n * Gets the canonical base path for an NPM snap.\n *\n * @param registryUrl - A registry URL.\n * @param packageName - A package name.\n * @returns The canonical base path.\n */\nfunction getNpmCanonicalBasePath(registryUrl, packageName) {\n    let canonicalBase = 'npm://';\n    if (registryUrl.username !== '') {\n        canonicalBase += registryUrl.username;\n        if (registryUrl.password !== '') {\n            canonicalBase += `:${registryUrl.password}`;\n        }\n        canonicalBase += '@';\n    }\n    return `${canonicalBase}${registryUrl.host}/${packageName}/`;\n}\nexports.getNpmCanonicalBasePath = getNpmCanonicalBasePath;\n/**\n * Determine if a registry URL is NPM.\n *\n * @param registryUrl - A registry url.\n * @returns True if the registry is the NPM registry, otherwise false.\n */\nfunction isNPM(registryUrl) {\n    return registryUrl.toString() === exports.DEFAULT_NPM_REGISTRY.toString();\n}\n/**\n * Resolves a version range to a version using the NPM registry.\n *\n * Unless the version range is already a version, then the NPM registry is skipped.\n *\n * @param packageName - The name of the package whose metadata to fetch.\n * @param versionRange - The version range of the package.\n * @param registryUrl - The URL of the npm registry to fetch the metadata from.\n * @param fetchFunction - The fetch function to use. Defaults to the global\n * {@link fetch}. Useful for Node.js compatibility.\n * @returns An object containing the resolved version and a URL for its tarball.\n * @throws If fetching the metadata fails.\n */\nasync function resolveNpmVersion(packageName, versionRange, registryUrl, fetchFunction) {\n    // If the version range is already a static version we don't need to look for the metadata.\n    if (isNPM(registryUrl) && (0, utils_1.isValidSemVerVersion)(versionRange)) {\n        return {\n            tarballURL: (0, get_npm_tarball_url_1.default)(packageName, versionRange),\n            targetVersion: versionRange,\n        };\n    }\n    const packageMetadata = await fetchNpmMetadata(packageName, registryUrl, fetchFunction);\n    const versions = Object.keys(packageMetadata?.versions ?? {}).map((version) => {\n        (0, utils_1.assertIsSemVerVersion)(version);\n        return version;\n    });\n    const targetVersion = (0, snaps_utils_1.getTargetVersion)(versions, versionRange);\n    if (targetVersion === null) {\n        throw new Error(`Failed to find a matching version in npm metadata for package \"${packageName}\" and requested semver range \"${versionRange}\".`);\n    }\n    const tarballURL = packageMetadata?.versions?.[targetVersion]?.dist?.tarball;\n    return { tarballURL, targetVersion };\n}\n/**\n * The paths of files within npm tarballs appear to always be prefixed with\n * \"package/\".\n */\nconst NPM_TARBALL_PATH_PREFIX = /^package\\//u;\n/**\n * Converts a {@link ReadableStream} to a Node.js {@link Readable}\n * stream. Returns the stream directly if it is already a Node.js stream.\n * We can't use the native Web {@link ReadableStream} directly because the\n * other stream libraries we use expect Node.js streams.\n *\n * @param stream - The stream to convert.\n * @returns The given stream as a Node.js Readable stream.\n */\nfunction getNodeStream(stream) {\n    if (typeof stream.getReader !== 'function') {\n        return stream;\n    }\n    return new readable_web_to_node_stream_1.ReadableWebToNodeStream(stream);\n}\n/**\n * Creates a `tar-stream` that will get the necessary files from an npm Snap\n * package tarball (`.tgz` file).\n *\n * @param canonicalBase - A base URI as specified in {@link https://github.com/MetaMask/SIPs/blob/main/SIPS/sip-8.md SIP-8}. Starting with 'npm:'. Will be used for canonicalPath vfile argument.\n * @param files - An object to write target file contents to.\n * @returns The {@link Writable} tarball extraction stream.\n */\nfunction createTarballStream(canonicalBase, files) {\n    (0, utils_1.assert)(canonicalBase.endsWith('/'), \"Base needs to end with '/' for relative paths to be added as children instead of siblings.\");\n    (0, utils_1.assert)(canonicalBase.startsWith('npm:'), 'Protocol mismatch, expected \"npm:\".');\n    // `tar-stream` is pretty old-school, so we create it first and then\n    // instrument it by adding event listeners.\n    const extractStream = (0, tar_stream_1.extract)();\n    let totalSize = 0;\n    // \"entry\" is fired for every discreet entity in the tarball. This includes\n    // files and folders.\n    extractStream.on('entry', (header, entryStream, next) => {\n        const { name: headerName, type: headerType } = header;\n        if (headerType === 'file') {\n            // The name is a path if the header type is \"file\".\n            const path = headerName.replace(NPM_TARBALL_PATH_PREFIX, '');\n            return entryStream.pipe((0, concat_stream_1.default)({ encoding: 'uint8array' }, (data) => {\n                try {\n                    totalSize += data.byteLength;\n                    // To prevent zip bombs, we set a safety limit for the total size of tarballs.\n                    (0, utils_1.assert)(totalSize < exports.TARBALL_SIZE_SAFETY_LIMIT, `Snap tarball exceeds limit of ${exports.TARBALL_SIZE_SAFETY_LIMIT} bytes.`);\n                    const vfile = new snaps_utils_1.VirtualFile({\n                        value: data,\n                        path,\n                        data: {\n                            canonicalPath: new URL(path, canonicalBase).toString(),\n                        },\n                    });\n                    // We disallow files having identical paths as it may confuse our checksum calculations.\n                    (0, utils_1.assert)(!files.has(path), 'Malformed tarball, multiple files with the same path.');\n                    files.set(path, vfile);\n                    return next();\n                }\n                catch (error) {\n                    return extractStream.destroy(error);\n                }\n            }));\n        }\n        // If we get here, the entry is not a file, and we want to ignore. The entry\n        // stream must be drained, or the extractStream will stop reading. This is\n        // effectively a no-op for the current entry.\n        entryStream.on('end', () => next());\n        return entryStream.resume();\n    });\n    return extractStream;\n}\n//# sourceMappingURL=npm.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./registry.cjs\"), exports);\n__exportStar(require(\"./json.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _JsonSnapsRegistry_instances, _JsonSnapsRegistry_url, _JsonSnapsRegistry_publicKey, _JsonSnapsRegistry_fetchFunction, _JsonSnapsRegistry_recentFetchThreshold, _JsonSnapsRegistry_refetchOnAllowlistMiss, _JsonSnapsRegistry_currentUpdate, _JsonSnapsRegistry_wasRecentlyFetched, _JsonSnapsRegistry_triggerUpdate, _JsonSnapsRegistry_update, _JsonSnapsRegistry_getDatabase, _JsonSnapsRegistry_getSingle, _JsonSnapsRegistry_get, _JsonSnapsRegistry_resolveVersion, _JsonSnapsRegistry_getMetadata, _JsonSnapsRegistry_verifySignature, _JsonSnapsRegistry_safeFetch;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonSnapsRegistry = void 0;\nconst base_controller_1 = require(\"@metamask/base-controller\");\nconst snaps_registry_1 = require(\"@metamask/snaps-registry\");\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst utils_1 = require(\"@metamask/utils\");\nconst registry_1 = require(\"./registry.cjs\");\nconst SNAP_REGISTRY_URL = 'https://acl.execution.metamask.io/latest/registry.json';\nconst SNAP_REGISTRY_SIGNATURE_URL = 'https://acl.execution.metamask.io/latest/signature.json';\nconst DEFAULT_PUBLIC_KEY = '0x025b65308f0f0fb8bc7f7ff87bfc296e0330eee5d3c1d1ee4a048b2fd6a86fa0a6';\nconst controllerName = 'SnapsRegistry';\nconst defaultState = {\n    database: null,\n    lastUpdated: null,\n    databaseUnavailable: false,\n};\nclass JsonSnapsRegistry extends base_controller_1.BaseController {\n    constructor({ messenger, state, url = {\n        registry: SNAP_REGISTRY_URL,\n        signature: SNAP_REGISTRY_SIGNATURE_URL,\n    }, publicKey = DEFAULT_PUBLIC_KEY, fetchFunction = globalThis.fetch.bind(undefined), recentFetchThreshold = (0, utils_1.inMilliseconds)(5, utils_1.Duration.Minute), refetchOnAllowlistMiss = true, }) {\n        super({\n            messenger,\n            metadata: {\n                database: { persist: true, anonymous: false },\n                lastUpdated: { persist: true, anonymous: false },\n                databaseUnavailable: { persist: true, anonymous: false },\n            },\n            name: controllerName,\n            state: {\n                ...defaultState,\n                ...state,\n            },\n        });\n        _JsonSnapsRegistry_instances.add(this);\n        _JsonSnapsRegistry_url.set(this, void 0);\n        _JsonSnapsRegistry_publicKey.set(this, void 0);\n        _JsonSnapsRegistry_fetchFunction.set(this, void 0);\n        _JsonSnapsRegistry_recentFetchThreshold.set(this, void 0);\n        _JsonSnapsRegistry_refetchOnAllowlistMiss.set(this, void 0);\n        _JsonSnapsRegistry_currentUpdate.set(this, void 0);\n        __classPrivateFieldSet(this, _JsonSnapsRegistry_url, url, \"f\");\n        __classPrivateFieldSet(this, _JsonSnapsRegistry_publicKey, publicKey, \"f\");\n        __classPrivateFieldSet(this, _JsonSnapsRegistry_fetchFunction, fetchFunction, \"f\");\n        __classPrivateFieldSet(this, _JsonSnapsRegistry_recentFetchThreshold, recentFetchThreshold, \"f\");\n        __classPrivateFieldSet(this, _JsonSnapsRegistry_refetchOnAllowlistMiss, refetchOnAllowlistMiss, \"f\");\n        __classPrivateFieldSet(this, _JsonSnapsRegistry_currentUpdate, null, \"f\");\n        this.messagingSystem.registerActionHandler('SnapsRegistry:get', async (...args) => __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_get).call(this, ...args));\n        this.messagingSystem.registerActionHandler('SnapsRegistry:getMetadata', async (...args) => __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_getMetadata).call(this, ...args));\n        this.messagingSystem.registerActionHandler('SnapsRegistry:resolveVersion', async (...args) => __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_resolveVersion).call(this, ...args));\n        this.messagingSystem.registerActionHandler('SnapsRegistry:update', async () => __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_triggerUpdate).call(this));\n    }\n}\nexports.JsonSnapsRegistry = JsonSnapsRegistry;\n_JsonSnapsRegistry_url = new WeakMap(), _JsonSnapsRegistry_publicKey = new WeakMap(), _JsonSnapsRegistry_fetchFunction = new WeakMap(), _JsonSnapsRegistry_recentFetchThreshold = new WeakMap(), _JsonSnapsRegistry_refetchOnAllowlistMiss = new WeakMap(), _JsonSnapsRegistry_currentUpdate = new WeakMap(), _JsonSnapsRegistry_instances = new WeakSet(), _JsonSnapsRegistry_wasRecentlyFetched = function _JsonSnapsRegistry_wasRecentlyFetched() {\n    return (this.state.lastUpdated &&\n        Date.now() - this.state.lastUpdated < __classPrivateFieldGet(this, _JsonSnapsRegistry_recentFetchThreshold, \"f\"));\n}, _JsonSnapsRegistry_triggerUpdate = \n/**\n * Triggers an update of the registry database.\n *\n * If an existing update is in progress this function will await that update.\n */\nasync function _JsonSnapsRegistry_triggerUpdate() {\n    // If an update is ongoing, wait for that.\n    if (__classPrivateFieldGet(this, _JsonSnapsRegistry_currentUpdate, \"f\")) {\n        await __classPrivateFieldGet(this, _JsonSnapsRegistry_currentUpdate, \"f\");\n        return;\n    }\n    // If no update exists, create promise and store globally.\n    if (__classPrivateFieldGet(this, _JsonSnapsRegistry_currentUpdate, \"f\") === null) {\n        __classPrivateFieldSet(this, _JsonSnapsRegistry_currentUpdate, __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_update).call(this), \"f\");\n    }\n    await __classPrivateFieldGet(this, _JsonSnapsRegistry_currentUpdate, \"f\");\n    __classPrivateFieldSet(this, _JsonSnapsRegistry_currentUpdate, null, \"f\");\n}, _JsonSnapsRegistry_update = \n/**\n * Updates the registry database if the registry hasn't been updated recently.\n *\n * NOTE: SHOULD NOT be called directly, instead `triggerUpdate` should be used.\n */\nasync function _JsonSnapsRegistry_update() {\n    // No-op if we recently fetched the registry.\n    if (__classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_wasRecentlyFetched).call(this)) {\n        return;\n    }\n    try {\n        const database = await __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_safeFetch).call(this, __classPrivateFieldGet(this, _JsonSnapsRegistry_url, \"f\").registry);\n        const signature = await __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_safeFetch).call(this, __classPrivateFieldGet(this, _JsonSnapsRegistry_url, \"f\").signature);\n        __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_verifySignature).call(this, database, signature);\n        this.update((state) => {\n            state.database = JSON.parse(database);\n            state.lastUpdated = Date.now();\n            state.databaseUnavailable = false;\n        });\n    }\n    catch {\n        // Ignore\n        this.update((state) => {\n            state.databaseUnavailable = true;\n        });\n    }\n}, _JsonSnapsRegistry_getDatabase = async function _JsonSnapsRegistry_getDatabase() {\n    if (this.state.database === null) {\n        await __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_triggerUpdate).call(this);\n    }\n    return this.state.database;\n}, _JsonSnapsRegistry_getSingle = async function _JsonSnapsRegistry_getSingle(snapId, snapInfo, refetch = false) {\n    const database = await __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_getDatabase).call(this);\n    const blockedEntry = database?.blockedSnaps.find((blocked) => {\n        if ('id' in blocked) {\n            return (blocked.id === snapId &&\n                (0, utils_1.satisfiesVersionRange)(snapInfo.version, blocked.versionRange));\n        }\n        return blocked.checksum === snapInfo.checksum;\n    });\n    if (blockedEntry) {\n        return {\n            status: registry_1.SnapsRegistryStatus.Blocked,\n            reason: blockedEntry.reason,\n        };\n    }\n    const verified = database?.verifiedSnaps[snapId];\n    const version = verified?.versions?.[snapInfo.version];\n    if (version && version.checksum === snapInfo.checksum) {\n        return { status: registry_1.SnapsRegistryStatus.Verified };\n    }\n    // For now, if we have an allowlist miss, we can refetch once and try again.\n    if (__classPrivateFieldGet(this, _JsonSnapsRegistry_refetchOnAllowlistMiss, \"f\") && !refetch) {\n        await __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_triggerUpdate).call(this);\n        return __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_getSingle).call(this, snapId, snapInfo, true);\n    }\n    return {\n        status: this.state.databaseUnavailable\n            ? registry_1.SnapsRegistryStatus.Unavailable\n            : registry_1.SnapsRegistryStatus.Unverified,\n    };\n}, _JsonSnapsRegistry_get = async function _JsonSnapsRegistry_get(snaps) {\n    return Object.entries(snaps).reduce(async (previousPromise, [snapId, snapInfo]) => {\n        const result = await __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_getSingle).call(this, snapId, snapInfo);\n        const acc = await previousPromise;\n        acc[snapId] = result;\n        return acc;\n    }, Promise.resolve({}));\n}, _JsonSnapsRegistry_resolveVersion = \n/**\n * Find an allowlisted version within a specified version range. Otherwise return the version range itself.\n *\n * @param snapId - The ID of the snap we are trying to resolve a version for.\n * @param versionRange - The version range.\n * @param refetch - An optional flag used to determine if we are refetching the registry.\n * @returns An allowlisted version within the specified version range if available otherwise returns the input version range.\n */\nasync function _JsonSnapsRegistry_resolveVersion(snapId, versionRange, refetch = false) {\n    const database = await __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_getDatabase).call(this);\n    const versions = database?.verifiedSnaps[snapId]?.versions ?? null;\n    if (!versions && __classPrivateFieldGet(this, _JsonSnapsRegistry_refetchOnAllowlistMiss, \"f\") && !refetch) {\n        await __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_triggerUpdate).call(this);\n        return __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_resolveVersion).call(this, snapId, versionRange, true);\n    }\n    // If we cannot narrow down the version range we return the unaltered version range.\n    if (!versions) {\n        return versionRange;\n    }\n    const targetVersion = (0, snaps_utils_1.getTargetVersion)(Object.keys(versions), versionRange);\n    if (!targetVersion && __classPrivateFieldGet(this, _JsonSnapsRegistry_refetchOnAllowlistMiss, \"f\") && !refetch) {\n        await __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_triggerUpdate).call(this);\n        return __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_resolveVersion).call(this, snapId, versionRange, true);\n    }\n    // If we cannot narrow down the version range we return the unaltered version range.\n    if (!targetVersion) {\n        return versionRange;\n    }\n    // A semver version is technically also a valid semver range.\n    (0, utils_1.assertIsSemVerRange)(targetVersion);\n    return targetVersion;\n}, _JsonSnapsRegistry_getMetadata = \n/**\n * Get metadata for the given snap ID.\n *\n * @param snapId - The ID of the snap to get metadata for.\n * @returns The metadata for the given snap ID, or `null` if the snap is not\n * verified.\n */\nasync function _JsonSnapsRegistry_getMetadata(snapId) {\n    const database = await __classPrivateFieldGet(this, _JsonSnapsRegistry_instances, \"m\", _JsonSnapsRegistry_getDatabase).call(this);\n    return database?.verifiedSnaps[snapId]?.metadata ?? null;\n}, _JsonSnapsRegistry_verifySignature = function _JsonSnapsRegistry_verifySignature(database, signature) {\n    (0, utils_1.assert)(__classPrivateFieldGet(this, _JsonSnapsRegistry_publicKey, \"f\"), 'No public key provided.');\n    const valid = (0, snaps_registry_1.verify)({\n        registry: database,\n        signature: JSON.parse(signature),\n        publicKey: __classPrivateFieldGet(this, _JsonSnapsRegistry_publicKey, \"f\"),\n    });\n    (0, utils_1.assert)(valid, 'Invalid registry signature.');\n}, _JsonSnapsRegistry_safeFetch = \n/**\n * Fetch the given URL, throwing if the response is not OK.\n *\n * @param url - The URL to fetch.\n * @returns The response body.\n * @private\n */\nasync function _JsonSnapsRegistry_safeFetch(url) {\n    const response = await __classPrivateFieldGet(this, _JsonSnapsRegistry_fetchFunction, \"f\").call(this, url);\n    if (!response.ok) {\n        throw new Error(`Failed to fetch ${url}.`);\n    }\n    return await response.text();\n};\n//# sourceMappingURL=json.cjs.map","import { cloneDeep } from 'lodash';\nimport { hasProperty, isObject } from '@metamask/utils';\nimport log from 'loglevel';\n\nexport const version = 90;\n\n/**\n * Explain the purpose of the migration here.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (!hasProperty(state, 'PhishingController')) {\n    log.warn(`typeof state.PhishingController is undefined`);\n    return state;\n  }\n  if (!isObject(state.PhishingController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.PhishingController is ${typeof state.PhishingController}`,\n      ),\n    );\n    return state;\n  }\n  if (!hasProperty(state.PhishingController, 'listState')) {\n    log.warn(\n      `typeof state.PhishingController.listState is ${typeof state.PhishingController}`,\n    );\n    return state;\n  }\n\n  delete state.PhishingController.listState;\n\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SnapsRegistryStatus = void 0;\nvar SnapsRegistryStatus;\n(function (SnapsRegistryStatus) {\n    SnapsRegistryStatus[SnapsRegistryStatus[\"Unverified\"] = 0] = \"Unverified\";\n    SnapsRegistryStatus[SnapsRegistryStatus[\"Blocked\"] = 1] = \"Blocked\";\n    SnapsRegistryStatus[SnapsRegistryStatus[\"Verified\"] = 2] = \"Verified\";\n    SnapsRegistryStatus[SnapsRegistryStatus[\"Unavailable\"] = 3] = \"Unavailable\";\n})(SnapsRegistryStatus || (exports.SnapsRegistryStatus = SnapsRegistryStatus = {}));\n//# sourceMappingURL=registry.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRunnableSnaps = void 0;\nconst getRunnableSnaps = (snaps) => snaps.filter((snap) => snap.enabled && !snap.blocked);\nexports.getRunnableSnaps = getRunnableSnaps;\n//# sourceMappingURL=selectors.cjs.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchSnap = exports.getSnapFiles = exports.withTimeout = exports.hasTimedOut = exports.delayWithTimer = exports.delay = exports.permissionsDiff = exports.setDiff = void 0;\nconst snaps_sdk_1 = require(\"@metamask/snaps-sdk\");\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\nconst Timer_1 = require(\"./snaps/Timer.cjs\");\n/**\n * Takes two objects and does a Set Difference of them.\n * Set Difference is generally defined as follows:\n * ```\n * 𝑥 ∈ A ∖ B ⟺ 𝑥 ∈ A ∧ 𝑥 ∉ B\n * ```\n * Meaning that the returned object contains all properties of A expect those that also\n * appear in B. Notice that properties that appear in B, but not in A, have no effect.\n *\n * @see [Set Difference]{@link https://proofwiki.org/wiki/Definition:Set_Difference}\n * @param objectA - The object on which the difference is being calculated.\n * @param objectB - The object whose properties will be removed from objectA.\n * @returns The objectA without properties from objectB.\n */\nfunction setDiff(objectA, objectB) {\n    return Object.entries(objectA).reduce((acc, [key, value]) => {\n        if (!(key in objectB)) {\n            acc[key] = value;\n        }\n        return acc;\n    }, {});\n}\nexports.setDiff = setDiff;\n/**\n * Calculate a difference between two permissions objects.\n *\n * Similar to `setDiff` except for one additional condition:\n * Permissions in B should be removed from A if they exist in both and have differing caveats.\n *\n * @param permissionsA - An object containing one or more partial permissions.\n * @param permissionsB - An object containing one or more partial permissions to be subtracted from A.\n * @returns The permissions set A without properties from B.\n */\nfunction permissionsDiff(permissionsA, permissionsB) {\n    return Object.entries(permissionsA).reduce((acc, [key, value]) => {\n        const isIncluded = key in permissionsB;\n        if (!isIncluded ||\n            (isIncluded &&\n                !(0, fast_deep_equal_1.default)(value.caveats ?? [], permissionsB[key].caveats ?? []))) {\n            acc[key] = value;\n        }\n        return acc;\n    }, {});\n}\nexports.permissionsDiff = permissionsDiff;\n/**\n * A Promise that delays its return for a given amount of milliseconds.\n *\n * @param ms - Milliseconds to delay the execution for.\n * @param result - The result to return from the Promise after delay.\n * @returns A promise that is void if no result provided, result otherwise.\n * @template Result - The `result`.\n */\nfunction delay(ms, result) {\n    return delayWithTimer(new Timer_1.Timer(ms), result);\n}\nexports.delay = delay;\n/**\n * A Promise that delays it's return by using a pausable Timer.\n *\n * @param timer - Timer used to control the delay.\n * @param result - The result to return from the Promise after delay.\n * @returns A promise that is void if no result provided, result otherwise.\n * @template Result - The `result`.\n */\nfunction delayWithTimer(timer, result) {\n    let rejectFunc;\n    const promise = new Promise((resolve, reject) => {\n        timer.start(() => {\n            result === undefined ? resolve() : resolve(result);\n        });\n        rejectFunc = reject;\n    });\n    promise.cancel = () => {\n        if (timer.status !== 'finished') {\n            timer.cancel();\n            rejectFunc(new Error('The delay has been canceled.'));\n        }\n    };\n    return promise;\n}\nexports.delayWithTimer = delayWithTimer;\n/*\n * We use a Symbol instead of rejecting the promise so that Errors thrown\n * by the main promise will propagate.\n */\nexports.hasTimedOut = Symbol('Used to check if the requested promise has timeout (see withTimeout)');\n/**\n * Executes the given Promise, if the Timer expires before the Promise settles, we return earlier.\n *\n * NOTE:** The given Promise is not cancelled or interrupted, and will continue to execute uninterrupted. We will just discard its result if it does not complete before the timeout.\n *\n * @param promise - The promise that you want to execute.\n * @param timerOrMs - The timer controlling the timeout or a ms value.\n * @returns The resolved `PromiseValue`, or the hasTimedOut symbol if\n * returning early.\n * @template PromiseValue - The value of the Promise.\n */\nasync function withTimeout(promise, timerOrMs) {\n    const timer = typeof timerOrMs === 'number' ? new Timer_1.Timer(timerOrMs) : timerOrMs;\n    const delayPromise = delayWithTimer(timer, exports.hasTimedOut);\n    try {\n        return await Promise.race([promise, delayPromise]);\n    }\n    finally {\n        delayPromise.cancel();\n    }\n}\nexports.withTimeout = withTimeout;\n/**\n * Get all files in a Snap from an array of file paths.\n *\n * @param location - The location of the Snap.\n * @param files - The array of file paths.\n * @returns The array of files as {@link VirtualFile}s.\n */\nasync function getSnapFiles(location, files) {\n    if (!files || files.length === 0) {\n        return [];\n    }\n    return await Promise.all(files.map(async (filePath) => location.fetch(filePath)));\n}\nexports.getSnapFiles = getSnapFiles;\n/**\n * Fetch the Snap manifest, source code, and any other files from the given\n * location.\n *\n * @param snapId - The ID of the Snap to fetch.\n * @param location - The location of the Snap.\n * @returns The Snap files and location.\n * @throws If the Snap files are invalid, or if the Snap could not be fetched.\n */\nasync function fetchSnap(snapId, location) {\n    try {\n        const manifest = await location.manifest();\n        const sourceCode = await location.fetch(manifest.result.source.location.npm.filePath);\n        (0, snaps_sdk_1.assert)(sourceCode.size < snaps_utils_1.MAX_FILE_SIZE, 'Snap source code must be smaller than 64 MB.');\n        const { iconPath } = manifest.result.source.location.npm;\n        const svgIcon = iconPath ? await location.fetch(iconPath) : undefined;\n        const auxiliaryFiles = await getSnapFiles(location, manifest.result.source.files);\n        (0, snaps_utils_1.validateAuxiliaryFiles)(auxiliaryFiles);\n        await Promise.all(auxiliaryFiles.map(async (file) => {\n            // This should still be safe\n            // eslint-disable-next-line require-atomic-updates\n            file.data.base64 = await (0, snaps_utils_1.encodeBase64)(file);\n        }));\n        const localizationFiles = await getSnapFiles(location, manifest.result.source.locales);\n        const validatedLocalizationFiles = (0, snaps_utils_1.getValidatedLocalizationFiles)(localizationFiles);\n        const files = {\n            manifest,\n            sourceCode,\n            svgIcon,\n            auxiliaryFiles,\n            localizationFiles: validatedLocalizationFiles,\n        };\n        await (0, snaps_utils_1.validateFetchedSnap)(files);\n        return files;\n    }\n    catch (error) {\n        throw new Error(`Failed to fetch snap \"${snapId}\": ${(0, snaps_sdk_1.getErrorMessage)(error)}.`);\n    }\n}\nexports.fetchSnap = fetchSnap;\n//# sourceMappingURL=utils.cjs.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/BaseControllerV1.ts\nvar BaseControllerV1 = class {\n  /**\n   * Creates a BaseControllerV1 instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config = {}, state = {}) {\n    /**\n     * Default options used to configure this controller\n     */\n    this.defaultConfig = {};\n    /**\n     * Default state set on this controller\n     */\n    this.defaultState = {};\n    /**\n     * Determines if listeners are notified of state changes\n     */\n    this.disabled = false;\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"BaseController\";\n    this.internalConfig = this.defaultConfig;\n    this.internalState = this.defaultState;\n    this.internalListeners = [];\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns This controller instance.\n   */\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n  /**\n   * Retrieves current controller configuration options.\n   *\n   * @returns The current configuration.\n   */\n  get config() {\n    return this.internalConfig;\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return this.internalState;\n  }\n  /**\n   * Updates controller configuration.\n   *\n   * @param config - New configuration options.\n   * @param overwrite - Overwrite config instead of merging.\n   * @param fullUpdate - Boolean that defines if the update is partial or not.\n   */\n  configure(config, overwrite = false, fullUpdate = true) {\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key of Object.keys(this.internalConfig)) {\n        const value = this.internalConfig[key];\n        if (value !== void 0) {\n          this[key] = value;\n        }\n      }\n    } else {\n      for (const key of Object.keys(config)) {\n        if (this.internalConfig[key] !== void 0) {\n          const value = config[key];\n          this.internalConfig[key] = value;\n          this[key] = value;\n        }\n      }\n    }\n  }\n  /**\n   * Notifies all subscribed listeners of current state.\n   */\n  notify() {\n    if (this.disabled) {\n      return;\n    }\n    this.internalListeners.forEach((listener) => {\n      listener(this.internalState);\n    });\n  }\n  /**\n   * Adds new listener to be notified of state changes.\n   *\n   * @param listener - The callback triggered when state changes.\n   */\n  subscribe(listener) {\n    this.internalListeners.push(listener);\n  }\n  /**\n   * Removes existing listener from receiving state changes.\n   *\n   * @param listener - The callback to remove.\n   * @returns `true` if a listener is found and unsubscribed.\n   */\n  unsubscribe(listener) {\n    const index = this.internalListeners.findIndex((cb) => listener === cb);\n    index > -1 && this.internalListeners.splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Updates controller state.\n   *\n   * @param state - The new state.\n   * @param overwrite - Overwrite state instead of merging.\n   */\n  update(state, overwrite = false) {\n    this.internalState = overwrite ? Object.assign({}, state) : Object.assign({}, this.internalState, state);\n    this.notify();\n  }\n};\nvar BaseControllerV1_default = BaseControllerV1;\n\n\n\n\nexports.BaseControllerV1 = BaseControllerV1; exports.BaseControllerV1_default = BaseControllerV1_default;\n//# sourceMappingURL=chunk-FTHCJ6HY.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/ControllerMessenger.ts\nvar _actions, _events, _initialEventPayloadGetters, _eventPayloadCache;\nvar ControllerMessenger = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _actions, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _events, /* @__PURE__ */ new Map());\n    /**\n     * A map of functions for getting the initial event payload.\n     *\n     * Used only for events that represent state changes.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _initialEventPayloadGetters, /* @__PURE__ */ new Map());\n    /**\n     * A cache of selector return values for their respective handlers.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _eventPayloadCache, /* @__PURE__ */ new Map());\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw when a handler has been registered for this action type already.\n   * @template ActionType - A type union of Action type strings.\n   */\n  registerActionHandler(actionType, handler) {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).has(actionType)) {\n      throw new Error(\n        `A handler for ${actionType} has already been registered`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).set(actionType, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @template ActionType - A type union of Action type strings.\n   */\n  unregisterActionHandler(actionType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).delete(actionType);\n  }\n  /**\n   * Unregister all action handlers.\n   *\n   * This prevents all actions from being called.\n   */\n  clearActions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).clear();\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    const handler = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).get(actionType);\n    if (!handler) {\n      throw new Error(`A handler for ${actionType} has not been registered`);\n    }\n    return handler(...params);\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).set(eventType, getPayload);\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * Note that this method should never throw directly. Any errors from\n   * subscribers are captured and re-thrown in a timeout handler.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @template EventType - A type union of Event type strings.\n   */\n  publish(eventType, ...payload) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (subscribers) {\n      for (const [handler, selector] of subscribers.entries()) {\n        try {\n          if (selector) {\n            const previousValue = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).get(handler);\n            const newValue = selector(...payload);\n            if (newValue !== previousValue) {\n              _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, newValue);\n              handler(newValue, previousValue);\n            }\n          } else {\n            handler(...payload);\n          }\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          });\n        }\n      }\n    }\n  }\n  subscribe(eventType, handler, selector) {\n    let subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers) {\n      subscribers = /* @__PURE__ */ new Map();\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).set(eventType, subscribers);\n    }\n    subscribers.set(handler, selector);\n    if (selector) {\n      const getPayload = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).get(eventType);\n      if (getPayload) {\n        const initialValue = selector(...getPayload());\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, initialValue);\n      }\n    }\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw when the given event handler is not registered for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  unsubscribe(eventType, handler) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers || !subscribers.has(handler)) {\n      throw new Error(`Subscription not found for event: ${eventType}`);\n    }\n    const selector = subscribers.get(handler);\n    if (selector) {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).delete(handler);\n    }\n    subscribers.delete(handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  clearEventSubscriptions(eventType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).delete(eventType);\n  }\n  /**\n   * Clear all subscriptions.\n   *\n   * This will remove all subscribed handlers for all events.\n   */\n  clearSubscriptions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).clear();\n  }\n  /**\n   * Get a restricted controller messenger\n   *\n   * Returns a wrapper around the controller messenger instance that restricts access to actions\n   * and events. The provided allowlists grant the ability to call the listed actions and subscribe\n   * to the listed events. The \"name\" provided grants ownership of any actions and events under\n   * that namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - Controller messenger options.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   * @template Namespace - The namespace for this messenger. Typically this is the name of the controller or\n   * module that this messenger has been created for. The authority to publish events and register\n   * actions under this namespace is granted to this restricted messenger instance.\n   * @template AllowedAction - A type union of the 'type' string for any allowed actions.\n   * This must not include internal actions that are in the messenger's namespace.\n   * @template AllowedEvent - A type union of the 'type' string for any allowed events.\n   * This must not include internal events that are in the messenger's namespace.\n   * @returns The restricted controller messenger.\n   */\n  getRestricted({\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    return new (0, _chunkUJFCPTF3js.RestrictedControllerMessenger)({\n      controllerMessenger: this,\n      name,\n      allowedActions,\n      allowedEvents\n    });\n  }\n};\n_actions = new WeakMap();\n_events = new WeakMap();\n_initialEventPayloadGetters = new WeakMap();\n_eventPayloadCache = new WeakMap();\n\n\n\nexports.ControllerMessenger = ControllerMessenger;\n//# sourceMappingURL=chunk-G42723LG.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/BaseControllerV2.ts\nvar _immer = require('immer');\n_immer.enablePatches.call(void 0, );\nvar _internalState;\nvar BaseController = class {\n  /**\n   * Creates a BaseController instance.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - Controller messaging system.\n   * @param options.metadata - ControllerState metadata, describing how to \"anonymize\" the state, and which\n   * parts should be persisted.\n   * @param options.name - The name of the controller, used as a namespace for events and actions.\n   * @param options.state - Initial controller state.\n   */\n  constructor({\n    messenger,\n    metadata,\n    name,\n    state\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _internalState, void 0);\n    this.messagingSystem = messenger;\n    this.name = name;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, _immer.freeze.call(void 0, state, true));\n    this.metadata = metadata;\n    this.messagingSystem.registerActionHandler(\n      `${name}:getState`,\n      () => this.state\n    );\n    this.messagingSystem.registerInitialEventPayload({\n      eventType: `${name}:stateChange`,\n      getPayload: () => [this.state, []]\n    });\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState);\n  }\n  set state(_) {\n    throw new Error(\n      `Controller state cannot be directly mutated; use 'update' method instead.`\n    );\n  }\n  /**\n   * Updates controller state. Accepts a callback that is passed a draft copy\n   * of the controller state. If a value is returned, it is set as the new\n   * state. Otherwise, any changes made within that callback to the draft are\n   * applied to the controller state.\n   *\n   * @param callback - Callback for updating state, passed a draft state\n   * object. Return a new state object or mutate the draft to update state.\n   * @returns An object that has the next state, patches applied in the update and inverse patches to\n   * rollback the update.\n   */\n  update(callback) {\n    const [nextState, patches, inversePatches] = _immer.produceWithPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), callback);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n    return { nextState, patches, inversePatches };\n  }\n  /**\n   * Applies immer patches to the current state. The patches come from the\n   * update function itself and can either be normal or inverse patches.\n   *\n   * @param patches - An array of immer patches that are to be applied to make\n   * or undo changes.\n   */\n  applyPatches(patches) {\n    const nextState = _immer.applyPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), patches);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n  }\n  /**\n   * Prepares the controller for garbage collection. This should be extended\n   * by any subclasses to clean up any additional connections or events.\n   *\n   * The only cleanup performed here is to remove listeners. While technically\n   * this is not required to ensure this instance is garbage collected, it at\n   * least ensures this instance won't be responsible for preventing the\n   * listeners from being garbage collected.\n   */\n  destroy() {\n    this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`);\n  }\n};\n_internalState = new WeakMap();\nfunction getAnonymizedState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"anonymous\");\n}\nfunction getPersistentState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"persist\");\n}\nfunction deriveStateFromMetadata(state, metadata, metadataProperty) {\n  return Object.keys(state).reduce((derivedState, key) => {\n    try {\n      const stateMetadata = metadata[key];\n      if (!stateMetadata) {\n        throw new Error(`No metadata found for '${String(key)}'`);\n      }\n      const propertyMetadata = stateMetadata[metadataProperty];\n      const stateProperty = state[key];\n      if (typeof propertyMetadata === \"function\") {\n        derivedState[key] = propertyMetadata(stateProperty);\n      } else if (propertyMetadata) {\n        derivedState[key] = stateProperty;\n      }\n      return derivedState;\n    } catch (error) {\n      setTimeout(() => {\n        throw error;\n      });\n      return derivedState;\n    }\n  }, {});\n}\n\n\n\n\n\nexports.BaseController = BaseController; exports.getAnonymizedState = getAnonymizedState; exports.getPersistentState = getPersistentState;\n//# sourceMappingURL=chunk-IURK6TKD.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/RestrictedControllerMessenger.ts\nvar _controllerMessenger, _controllerName, _allowedActions, _allowedEvents, _isAllowedEvent, isAllowedEvent_fn, _isAllowedAction, isAllowedAction_fn, _isInCurrentNamespace, isInCurrentNamespace_fn;\nvar RestrictedControllerMessenger = class {\n  /**\n   * Constructs a restricted controller messenger\n   *\n   * The provided allowlists grant the ability to call the listed actions and subscribe to the\n   * listed events. The \"name\" provided grants ownership of any actions and events under that\n   * namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - The controller options.\n   * @param options.controllerMessenger - The controller messenger instance that is being wrapped.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   */\n  constructor({\n    controllerMessenger,\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    /**\n     * Determine whether the given event type is allowed. Event types are\n     * allowed if they are in the current namespace or on the list of\n     * allowed events.\n     *\n     * @param eventType - The event type to check.\n     * @returns Whether the event type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedEvent);\n    /**\n     * Determine whether the given action type is allowed. Action types\n     * are allowed if they are in the current namespace or on the list of\n     * allowed actions.\n     *\n     * @param actionType - The action type to check.\n     * @returns Whether the action type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedAction);\n    /**\n     * Determine whether the given name is within the current namespace.\n     *\n     * @param name - The name to check\n     * @returns Whether the name is within the current namespace\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isInCurrentNamespace);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerMessenger, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerName, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedActions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedEvents, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerMessenger, controllerMessenger);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerName, name);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedActions, allowedActions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedEvents, allowedEvents);\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * The action type this handler is registered under *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw if an action handler that is not in the current namespace is being registered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  registerActionHandler(action, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed registering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerActionHandler(action, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * The action type being unregistered *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unique identifier for this action.\n   * @throws Will throw if an action handler that is not in the current namespace is being unregistered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  unregisterActionHandler(action) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed unregistering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unregisterActionHandler(action);\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * The action type being called must be on the action allowlist.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of allowed Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedAction, isAllowedAction_fn).call(this, actionType)) {\n      throw new Error(`Action missing from allow list: ${actionType}`);\n    }\n    const response = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).call(\n      actionType,\n      ...params\n    );\n    return response;\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * The event type *must* be in the current namespace\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerInitialEventPayload({\n      eventType,\n      getPayload\n    });\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * The event type being published *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @throws Will throw if an event that is not in the current namespace is being published.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  publish(event, ...payload) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).publish(event, ...payload);\n  }\n  subscribe(event, handler, selector) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    if (selector) {\n      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler, selector);\n    }\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler);\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * The event type being unsubscribed to must be on the event allowlist.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw if the given event is not an allowed event for this controller messenger.\n   * @template EventType - A type union of allowed Event type strings.\n   */\n  unsubscribe(event, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unsubscribe(event, handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * The event type being cleared *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @throws Will throw if a subscription for an event that is not in the current namespace is being cleared.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  clearEventSubscriptions(event) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed clearing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).clearEventSubscriptions(event);\n  }\n};\n_controllerMessenger = new WeakMap();\n_controllerName = new WeakMap();\n_allowedActions = new WeakMap();\n_allowedEvents = new WeakMap();\n_isAllowedEvent = new WeakSet();\nisAllowedEvent_fn = function(eventType) {\n  const allowedEvents = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedEvents);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType) || allowedEvents !== null && allowedEvents.includes(eventType);\n};\n_isAllowedAction = new WeakSet();\nisAllowedAction_fn = function(actionType) {\n  const allowedActions = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedActions);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, actionType) || allowedActions !== null && allowedActions.includes(actionType);\n};\n_isInCurrentNamespace = new WeakSet();\nisInCurrentNamespace_fn = function(name) {\n  return name.startsWith(`${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:`);\n};\n\n\n\nexports.RestrictedControllerMessenger = RestrictedControllerMessenger;\n//# sourceMappingURL=chunk-UJFCPTF3.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkFTHCJ6HYjs = require('./chunk-FTHCJ6HY.js');\n\n\n\n\nvar _chunkIURK6TKDjs = require('./chunk-IURK6TKD.js');\n\n\nvar _chunkG42723LGjs = require('./chunk-G42723LG.js');\n\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\n\n\nexports.BaseController = _chunkIURK6TKDjs.BaseController; exports.BaseControllerV1 = _chunkFTHCJ6HYjs.BaseControllerV1; exports.ControllerMessenger = _chunkG42723LGjs.ControllerMessenger; exports.RestrictedControllerMessenger = _chunkUJFCPTF3js.RestrictedControllerMessenger; exports.getAnonymizedState = _chunkIURK6TKDjs.getAnonymizedState; exports.getPersistentState = _chunkIURK6TKDjs.getPersistentState;\n//# sourceMappingURL=index.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\nvar _chunkFYADAA2Gjs = require('./chunk-FYADAA2G.js');\n\n// src/Caveat.ts\nvar _utils = require('@metamask/utils');\nfunction isRestrictedMethodCaveatSpecification(specification) {\n  return _utils.hasProperty.call(void 0, specification, \"decorator\");\n}\nfunction decorateWithCaveats(methodImplementation, permission, caveatSpecifications) {\n  const { caveats } = permission;\n  if (!caveats) {\n    return methodImplementation;\n  }\n  let decorated = async (args) => methodImplementation(args);\n  for (const caveat of caveats) {\n    const specification = caveatSpecifications[caveat.type];\n    if (!specification) {\n      throw new (0, _chunkFYADAA2Gjs.UnrecognizedCaveatTypeError)(caveat.type);\n    }\n    if (!isRestrictedMethodCaveatSpecification(specification)) {\n      throw new (0, _chunkFYADAA2Gjs.CaveatSpecificationMismatchError)(\n        specification,\n        \"RestrictedMethod\" /* RestrictedMethod */\n      );\n    }\n    decorated = specification.decorator(decorated, caveat);\n  }\n  return decorated;\n}\n\n\n\n\nexports.isRestrictedMethodCaveatSpecification = isRestrictedMethodCaveatSpecification; exports.decorateWithCaveats = decorateWithCaveats;\n//# sourceMappingURL=chunk-3YOPLPVY.js.map","import { hasProperty, isObject } from '@metamask/utils';\nimport { cloneDeep } from 'lodash';\n\nexport const version = 91;\n\n/**\n * Delete network configurations if they do not have a chain id\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    hasProperty(state, 'NetworkController') &&\n    isObject(state.NetworkController) &&\n    hasProperty(state.NetworkController, 'networkConfigurations') &&\n    isObject(state.NetworkController.networkConfigurations)\n  ) {\n    const { networkConfigurations } = state.NetworkController;\n\n    for (const [networkConfigurationId, networkConfiguration] of Object.entries(\n      networkConfigurations,\n    )) {\n      if (isObject(networkConfiguration)) {\n        if (!networkConfiguration.chainId) {\n          delete networkConfigurations[networkConfigurationId];\n        }\n      }\n    }\n\n    state.NetworkController = {\n      ...state.NetworkController,\n      networkConfigurations,\n    };\n\n    return {\n      ...state,\n      NetworkController: state.NetworkController,\n    };\n  } else if (!isObject(state.NetworkController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController is ${typeof state.NetworkController}`,\n      ),\n    );\n  } else if (!isObject(state.NetworkController.networkConfigurations)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController.networkConfigurations is ${typeof state\n          .NetworkController.networkConfigurations}`,\n      ),\n    );\n  }\n  return state;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkVBIZGGQLjs = require('./chunk-VBIZGGQL.js');\n\n\nvar _chunk7A3VYLCKjs = require('./chunk-7A3VYLCK.js');\n\n\nvar _chunkX4ZAW4QRjs = require('./chunk-X4ZAW4QR.js');\n\n\nvar _chunkZ2XKIXLSjs = require('./chunk-Z2XKIXLS.js');\n\n// src/rpc-methods/index.ts\nvar rpc_methods_exports = {};\n_chunkZ2XKIXLSjs.__export.call(void 0, rpc_methods_exports, {\n  handlers: () => handlers\n});\nvar handlers = [\n  _chunk7A3VYLCKjs.requestPermissionsHandler,\n  _chunkVBIZGGQLjs.getPermissionsHandler,\n  _chunkX4ZAW4QRjs.revokePermissionsHandler\n];\n\n\n\n\nexports.handlers = handlers; exports.rpc_methods_exports = rpc_methods_exports;\n//# sourceMappingURL=chunk-6PXDVUYM.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkFYADAA2Gjs = require('./chunk-FYADAA2G.js');\n\n// src/rpc-methods/requestPermissions.ts\nvar _controllerutils = require('@metamask/controller-utils');\nvar requestPermissionsHandler = {\n  methodNames: [\"wallet_requestPermissions\" /* RequestPermissions */],\n  implementation: requestPermissionsImplementation,\n  hookNames: {\n    requestPermissionsForOrigin: true\n  }\n};\nasync function requestPermissionsImplementation(req, res, _next, end, { requestPermissionsForOrigin }) {\n  const { params } = req;\n  if (!Array.isArray(params) || !_controllerutils.isPlainObject.call(void 0, params[0])) {\n    return end(_chunkFYADAA2Gjs.invalidParams.call(void 0, { data: { request: req } }));\n  }\n  const [requestedPermissions] = params;\n  const [grantedPermissions] = await requestPermissionsForOrigin(\n    requestedPermissions\n  );\n  res.result = Object.values(grantedPermissions);\n  return end();\n}\n\n\n\nexports.requestPermissionsHandler = requestPermissionsHandler;\n//# sourceMappingURL=chunk-7A3VYLCK.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n\nvar _chunk3YOPLPVYjs = require('./chunk-3YOPLPVY.js');\n\n\n\n\n\nvar _chunkZH4MLSXXjs = require('./chunk-ZH4MLSXX.js');\n\n\nvar _chunkF5TBMVWCjs = require('./chunk-F5TBMVWC.js');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _chunkFYADAA2Gjs = require('./chunk-FYADAA2G.js');\n\n\nvar _chunkVQPP5PWSjs = require('./chunk-VQPP5PWS.js');\n\n\n\nvar _chunkZ2XKIXLSjs = require('./chunk-Z2XKIXLS.js');\n\n// src/PermissionController.ts\nvar _basecontroller = require('@metamask/base-controller');\n\n\n\n\nvar _controllerutils = require('@metamask/controller-utils');\nvar _rpcerrors = require('@metamask/rpc-errors');\nvar _utils = require('@metamask/utils');\nvar _deepfreezestrict = require('deep-freeze-strict'); var _deepfreezestrict2 = _interopRequireDefault(_deepfreezestrict);\nvar _immer = require('immer');\nvar _nanoid = require('nanoid');\nvar controllerName = \"PermissionController\";\nfunction getStateMetadata() {\n  return { subjects: { anonymous: true, persist: true } };\n}\nfunction getDefaultState() {\n  return { subjects: {} };\n}\nvar CaveatMutatorOperation = /* @__PURE__ */ ((CaveatMutatorOperation2) => {\n  CaveatMutatorOperation2[CaveatMutatorOperation2[\"Noop\"] = 0] = \"Noop\";\n  CaveatMutatorOperation2[CaveatMutatorOperation2[\"UpdateValue\"] = 1] = \"UpdateValue\";\n  CaveatMutatorOperation2[CaveatMutatorOperation2[\"DeleteCaveat\"] = 2] = \"DeleteCaveat\";\n  CaveatMutatorOperation2[CaveatMutatorOperation2[\"RevokePermission\"] = 3] = \"RevokePermission\";\n  return CaveatMutatorOperation2;\n})(CaveatMutatorOperation || {});\nvar _expectGetCaveatMerger, expectGetCaveatMerger_fn, _applyGrantedPermissions, applyGrantedPermissions_fn, _mergeIncrementalPermissions, mergeIncrementalPermissions_fn, _mergePermission, mergePermission_fn, _mergeCaveat, mergeCaveat_fn, _handleApprovedPermissions, handleApprovedPermissions_fn;\nvar PermissionController = class extends _basecontroller.BaseController {\n  /**\n   * Constructs the PermissionController.\n   *\n   * @param options - Permission controller options.\n   * @param options.caveatSpecifications - The specifications of all caveats\n   * available to the controller. See {@link CaveatSpecificationMap} and the\n   * documentation for more details.\n   * @param options.permissionSpecifications - The specifications of all\n   * permissions available to the controller. See\n   * {@link PermissionSpecificationMap} and the README for more details.\n   * @param options.unrestrictedMethods - The callable names of all JSON-RPC\n   * methods ignored by the new controller.\n   * @param options.messenger - The controller messenger. See\n   * {@link BaseController} for more information.\n   * @param options.state - Existing state to hydrate the controller with at\n   * initialization.\n   */\n  constructor(options) {\n    const {\n      caveatSpecifications,\n      permissionSpecifications,\n      unrestrictedMethods,\n      messenger,\n      state = {}\n    } = options;\n    super({\n      name: controllerName,\n      metadata: getStateMetadata(),\n      messenger,\n      state: {\n        ...getDefaultState(),\n        ...state\n      }\n    });\n    /**\n     * Gets the merger function for the specified caveat. Throws if no\n     * merger exists.\n     *\n     * @param caveatType - The type of the caveat whose merger to get.\n     * @returns The caveat value merger function for the specified caveat type.\n     */\n    _chunkZ2XKIXLSjs.__privateAdd.call(void 0, this, _expectGetCaveatMerger);\n    _chunkZ2XKIXLSjs.__privateAdd.call(void 0, this, _applyGrantedPermissions);\n    /**\n     * Merges a set of incrementally requested permissions into the existing permissions of\n     * the requesting subject. The merge is a right-biased union, where the existing\n     * permissions are the left-hand side, and the incrementally requested permissions are\n     * the right-hand side.\n     *\n     * @param existingPermissions - The subject's existing permissions.\n     * @param incrementalRequestedPermissions - The requested permissions to merge.\n     * @returns The merged permissions and the resulting diff.\n     */\n    _chunkZ2XKIXLSjs.__privateAdd.call(void 0, this, _mergeIncrementalPermissions);\n    /**\n     * Performs a right-biased union between two permissions. The task of merging caveats\n     * of the same type between the two permissions is delegated to the corresponding\n     * caveat type's merger implementation.\n     *\n     * Throws if the left-hand and right-hand permissions both have a caveat whose\n     * specification does not provide a caveat value merger function.\n     *\n     * @param leftPermission - The left-hand permission to merge.\n     * @param rightPermission - The right-hand permission to merge.\n     * @returns The merged permission.\n     */\n    _chunkZ2XKIXLSjs.__privateAdd.call(void 0, this, _mergePermission);\n    /**\n     * Merges two caveats of the same type. The task of merging the values of the\n     * two caveats is delegated to the corresponding caveat type's merger implementation.\n     *\n     * @param leftCaveat - The left-hand caveat to merge.\n     * @param rightCaveat - The right-hand caveat to merge.\n     * @returns The merged caveat and the diff between the two caveats.\n     */\n    _chunkZ2XKIXLSjs.__privateAdd.call(void 0, this, _mergeCaveat);\n    /**\n     * Accepts a permissions request that has been approved by the user. This\n     * method should be called after the user has approved the request and the\n     * {@link ApprovalController} has resolved the user approval promise.\n     *\n     * @param options - Options bag.\n     * @param options.subject - The subject to grant permissions to.\n     * @param options.metadata - The metadata of the approved permissions request.\n     * @param options.preserveExistingPermissions - Whether to preserve the\n     * subject's existing permissions.\n     * @param options.approvedRequest - The approved permissions request to handle.\n     * @returns The granted permissions and request metadata.\n     */\n    _chunkZ2XKIXLSjs.__privateAdd.call(void 0, this, _handleApprovedPermissions);\n    this._unrestrictedMethods = new Set(unrestrictedMethods);\n    this._caveatSpecifications = _deepfreezestrict2.default.call(void 0, { ...caveatSpecifications });\n    this.validatePermissionSpecifications(\n      permissionSpecifications,\n      this._caveatSpecifications\n    );\n    this._permissionSpecifications = _deepfreezestrict2.default.call(void 0, {\n      ...permissionSpecifications\n    });\n    this.registerMessageHandlers();\n    this.createPermissionMiddleware = _chunkF5TBMVWCjs.getPermissionMiddlewareFactory.call(void 0, {\n      executeRestrictedMethod: this._executeRestrictedMethod.bind(this),\n      getRestrictedMethod: this.getRestrictedMethod.bind(this),\n      isUnrestrictedMethod: this.unrestrictedMethods.has.bind(\n        this.unrestrictedMethods\n      )\n    });\n  }\n  /**\n   * The names of all JSON-RPC methods that will be ignored by the controller.\n   *\n   * @returns The names of all unrestricted JSON-RPC methods\n   */\n  get unrestrictedMethods() {\n    return this._unrestrictedMethods;\n  }\n  /**\n   * Gets a permission specification.\n   *\n   * @param targetName - The name of the permission specification to get.\n   * @returns The permission specification with the specified target name.\n   */\n  getPermissionSpecification(targetName) {\n    return this._permissionSpecifications[targetName];\n  }\n  /**\n   * Gets a caveat specification.\n   *\n   * @param caveatType - The type of the caveat specification to get.\n   * @returns The caveat specification with the specified type.\n   */\n  getCaveatSpecification(caveatType) {\n    return this._caveatSpecifications[caveatType];\n  }\n  /**\n   * Constructor helper for validating permission specifications.\n   *\n   * Throws an error if validation fails.\n   *\n   * @param permissionSpecifications - The permission specifications passed to\n   * this controller's constructor.\n   * @param caveatSpecifications - The caveat specifications passed to this\n   * controller.\n   */\n  validatePermissionSpecifications(permissionSpecifications, caveatSpecifications) {\n    Object.entries(\n      permissionSpecifications\n    ).forEach(\n      ([\n        targetName,\n        { permissionType, targetName: innerTargetName, allowedCaveats }\n      ]) => {\n        if (!permissionType || !_utils.hasProperty.call(void 0, _chunkZH4MLSXXjs.PermissionType, permissionType)) {\n          throw new Error(`Invalid permission type: \"${permissionType}\"`);\n        }\n        if (!targetName) {\n          throw new Error(`Invalid permission target name: \"${targetName}\"`);\n        }\n        if (targetName !== innerTargetName) {\n          throw new Error(\n            `Invalid permission specification: target name \"${targetName}\" must match specification.targetName value \"${innerTargetName}\".`\n          );\n        }\n        if (allowedCaveats) {\n          allowedCaveats.forEach((caveatType) => {\n            if (!_utils.hasProperty.call(void 0, caveatSpecifications, caveatType)) {\n              throw new (0, _chunkFYADAA2Gjs.UnrecognizedCaveatTypeError)(caveatType);\n            }\n            const specification = caveatSpecifications[caveatType];\n            const isRestrictedMethodCaveat = _chunk3YOPLPVYjs.isRestrictedMethodCaveatSpecification.call(void 0, specification);\n            if (permissionType === \"RestrictedMethod\" /* RestrictedMethod */ && !isRestrictedMethodCaveat || permissionType === \"Endowment\" /* Endowment */ && isRestrictedMethodCaveat) {\n              throw new (0, _chunkFYADAA2Gjs.CaveatSpecificationMismatchError)(\n                specification,\n                permissionType\n              );\n            }\n          });\n        }\n      }\n    );\n  }\n  /**\n   * Constructor helper for registering the controller's messaging system\n   * actions.\n   */\n  registerMessageHandlers() {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:clearPermissions`,\n      () => this.clearState()\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getEndowments`,\n      (origin, targetName, requestData) => this.getEndowments(origin, targetName, requestData)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getSubjectNames`,\n      () => this.getSubjectNames()\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getPermissions`,\n      (origin) => this.getPermissions(origin)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:hasPermission`,\n      (origin, targetName) => this.hasPermission(origin, targetName)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:hasPermissions`,\n      (origin) => this.hasPermissions(origin)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:grantPermissions`,\n      this.grantPermissions.bind(this)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:grantPermissionsIncremental`,\n      this.grantPermissionsIncremental.bind(this)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:requestPermissions`,\n      (subject, permissions) => this.requestPermissions(subject, permissions)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:requestPermissionsIncremental`,\n      (subject, permissions) => this.requestPermissionsIncremental(subject, permissions)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:revokeAllPermissions`,\n      (origin) => this.revokeAllPermissions(origin)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:revokePermissionForAllSubjects`,\n      (target) => this.revokePermissionForAllSubjects(target)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:revokePermissions`,\n      this.revokePermissions.bind(this)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateCaveat`,\n      (origin, target, caveatType, caveatValue) => {\n        this.updateCaveat(\n          origin,\n          target,\n          caveatType,\n          caveatValue\n        );\n      }\n    );\n  }\n  /**\n   * Clears the state of the controller.\n   */\n  clearState() {\n    this.update((_draftState) => {\n      return {\n        ...getDefaultState()\n      };\n    });\n  }\n  /**\n   * Gets the permission specification corresponding to the given permission\n   * type and target name. Throws an error if the target name does not\n   * correspond to a permission, or if the specification is not of the\n   * given permission type.\n   *\n   * @template Type - The type of the permission specification to get.\n   * @param permissionType - The type of the permission specification to get.\n   * @param targetName - The name of the permission whose specification to get.\n   * @param requestingOrigin - The origin of the requesting subject, if any.\n   * Will be added to any thrown errors.\n   * @returns The specification object corresponding to the given type and\n   * target name.\n   */\n  getTypedPermissionSpecification(permissionType, targetName, requestingOrigin) {\n    const failureError = permissionType === \"RestrictedMethod\" /* RestrictedMethod */ ? _chunkFYADAA2Gjs.methodNotFound.call(void 0, \n      targetName,\n      requestingOrigin ? { origin: requestingOrigin } : void 0\n    ) : new (0, _chunkFYADAA2Gjs.EndowmentPermissionDoesNotExistError)(\n      targetName,\n      requestingOrigin\n    );\n    if (!this.targetExists(targetName)) {\n      throw failureError;\n    }\n    const specification = this.getPermissionSpecification(targetName);\n    if (!_chunkZH4MLSXXjs.hasSpecificationType.call(void 0, specification, permissionType)) {\n      throw failureError;\n    }\n    return specification;\n  }\n  /**\n   * Gets the implementation of the specified restricted method.\n   *\n   * A JSON-RPC error is thrown if the method does not exist.\n   *\n   * @see {@link PermissionController.executeRestrictedMethod} and\n   * {@link PermissionController.createPermissionMiddleware} for internal usage.\n   * @param method - The name of the restricted method.\n   * @param origin - The origin associated with the request for the restricted\n   * method, if any.\n   * @returns The restricted method implementation.\n   */\n  getRestrictedMethod(method, origin) {\n    return this.getTypedPermissionSpecification(\n      \"RestrictedMethod\" /* RestrictedMethod */,\n      method,\n      origin\n    ).methodImplementation;\n  }\n  /**\n   * Gets a list of all origins of subjects.\n   *\n   * @returns The origins (i.e. IDs) of all subjects.\n   */\n  getSubjectNames() {\n    return Object.keys(this.state.subjects);\n  }\n  /**\n   * Gets the permission for the specified target of the subject corresponding\n   * to the specified origin.\n   *\n   * @param origin - The origin of the subject.\n   * @param targetName - The method name as invoked by a third party (i.e., not\n   * a method key).\n   * @returns The permission if it exists, or undefined otherwise.\n   */\n  getPermission(origin, targetName) {\n    return this.state.subjects[origin]?.permissions[targetName];\n  }\n  /**\n   * Gets all permissions for the specified subject, if any.\n   *\n   * @param origin - The origin of the subject.\n   * @returns The permissions of the subject, if any.\n   */\n  getPermissions(origin) {\n    return this.state.subjects[origin]?.permissions;\n  }\n  /**\n   * Checks whether the subject with the specified origin has the specified\n   * permission.\n   *\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @returns Whether the subject has the permission.\n   */\n  hasPermission(origin, target) {\n    return Boolean(this.getPermission(origin, target));\n  }\n  /**\n   * Checks whether the subject with the specified origin has any permissions.\n   * Use this if you want to know if a subject \"exists\".\n   *\n   * @param origin - The origin of the subject to check.\n   * @returns Whether the subject has any permissions.\n   */\n  hasPermissions(origin) {\n    return Boolean(this.state.subjects[origin]);\n  }\n  /**\n   * Revokes all permissions from the specified origin.\n   *\n   * Throws an error of the origin has no permissions.\n   *\n   * @param origin - The origin whose permissions to revoke.\n   */\n  revokeAllPermissions(origin) {\n    this.update((draftState) => {\n      if (!draftState.subjects[origin]) {\n        throw new (0, _chunkFYADAA2Gjs.UnrecognizedSubjectError)(origin);\n      }\n      delete draftState.subjects[origin];\n    });\n  }\n  /**\n   * Revokes the specified permission from the subject with the specified\n   * origin.\n   *\n   * Throws an error if the subject or the permission does not exist.\n   *\n   * @param origin - The origin of the subject whose permission to revoke.\n   * @param target - The target name of the permission to revoke.\n   */\n  revokePermission(origin, target) {\n    this.revokePermissions({ [origin]: [target] });\n  }\n  /**\n   * Revokes the specified permissions from the specified subjects.\n   *\n   * Throws an error if any of the subjects or permissions do not exist.\n   *\n   * @param subjectsAndPermissions - An object mapping subject origins\n   * to arrays of permission target names to revoke.\n   */\n  revokePermissions(subjectsAndPermissions) {\n    this.update((draftState) => {\n      Object.keys(subjectsAndPermissions).forEach((origin) => {\n        if (!_utils.hasProperty.call(void 0, draftState.subjects, origin)) {\n          throw new (0, _chunkFYADAA2Gjs.UnrecognizedSubjectError)(origin);\n        }\n        subjectsAndPermissions[origin].forEach((target) => {\n          const { permissions } = draftState.subjects[origin];\n          if (!_utils.hasProperty.call(void 0, permissions, target)) {\n            throw new (0, _chunkFYADAA2Gjs.PermissionDoesNotExistError)(origin, target);\n          }\n          this.deletePermission(draftState.subjects, origin, target);\n        });\n      });\n    });\n  }\n  /**\n   * Revokes all permissions corresponding to the specified target for all subjects.\n   * Does nothing if no subjects or no such permission exists.\n   *\n   * @param target - The name of the target to revoke all permissions for.\n   */\n  revokePermissionForAllSubjects(target) {\n    if (this.getSubjectNames().length === 0) {\n      return;\n    }\n    this.update((draftState) => {\n      Object.entries(draftState.subjects).forEach(([origin, subject]) => {\n        const { permissions } = subject;\n        if (_utils.hasProperty.call(void 0, permissions, target)) {\n          this.deletePermission(draftState.subjects, origin, target);\n        }\n      });\n    });\n  }\n  /**\n   * Deletes the permission identified by the given origin and target. If the\n   * permission is the single remaining permission of its subject, the subject\n   * is also deleted.\n   *\n   * @param subjects - The draft permission controller subjects.\n   * @param origin - The origin of the subject associated with the permission\n   * to delete.\n   * @param target - The target name of the permission to delete.\n   */\n  deletePermission(subjects, origin, target) {\n    const { permissions } = subjects[origin];\n    if (Object.keys(permissions).length > 1) {\n      delete permissions[target];\n    } else {\n      delete subjects[origin];\n    }\n  }\n  /**\n   * Checks whether the permission of the subject corresponding to the given\n   * origin has a caveat of the specified type.\n   *\n   * Throws an error if the subject does not have a permission with the\n   * specified target name.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to check for.\n   * @returns Whether the permission has the specified caveat.\n   */\n  hasCaveat(origin, target, caveatType) {\n    return Boolean(this.getCaveat(origin, target, caveatType));\n  }\n  /**\n   * Gets the caveat of the specified type, if any, for the permission of\n   * the subject corresponding to the given origin.\n   *\n   * Throws an error if the subject does not have a permission with the\n   * specified target name.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to get.\n   * @returns The caveat, or `undefined` if no such caveat exists.\n   */\n  getCaveat(origin, target, caveatType) {\n    const permission = this.getPermission(origin, target);\n    if (!permission) {\n      throw new (0, _chunkFYADAA2Gjs.PermissionDoesNotExistError)(origin, target);\n    }\n    return _chunkZH4MLSXXjs.findCaveat.call(void 0, permission, caveatType);\n  }\n  /**\n   * Adds a caveat of the specified type, with the specified caveat value, to\n   * the permission corresponding to the given subject origin and permission\n   * target.\n   *\n   * For modifying existing caveats, use\n   * {@link PermissionController.updateCaveat}.\n   *\n   * Throws an error if no such permission exists, or if the caveat already\n   * exists.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to add.\n   * @param caveatValue - The value of the caveat to add.\n   */\n  addCaveat(origin, target, caveatType, caveatValue) {\n    if (this.hasCaveat(origin, target, caveatType)) {\n      throw new (0, _chunkFYADAA2Gjs.CaveatAlreadyExistsError)(origin, target, caveatType);\n    }\n    this.setCaveat(origin, target, caveatType, caveatValue);\n  }\n  /**\n   * Updates the value of the caveat of the specified type belonging to the\n   * permission corresponding to the given subject origin and permission\n   * target.\n   *\n   * For adding new caveats, use\n   * {@link PermissionController.addCaveat}.\n   *\n   * Throws an error if no such permission or caveat exists.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to update.\n   * @param caveatValue - The new value of the caveat.\n   */\n  updateCaveat(origin, target, caveatType, caveatValue) {\n    if (!this.hasCaveat(origin, target, caveatType)) {\n      throw new (0, _chunkFYADAA2Gjs.CaveatDoesNotExistError)(origin, target, caveatType);\n    }\n    this.setCaveat(origin, target, caveatType, caveatValue);\n  }\n  /**\n   * Sets the specified caveat on the specified permission. Overwrites existing\n   * caveats of the same type in-place (preserving array order), and adds the\n   * caveat to the end of the array otherwise.\n   *\n   * Throws an error if the permission does not exist or fails to validate after\n   * its caveats have been modified.\n   *\n   * @see {@link PermissionController.addCaveat}\n   * @see {@link PermissionController.updateCaveat}\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to set.\n   * @param caveatValue - The value of the caveat to set.\n   */\n  setCaveat(origin, target, caveatType, caveatValue) {\n    this.update((draftState) => {\n      const subject = draftState.subjects[origin];\n      if (!subject) {\n        throw new (0, _chunkFYADAA2Gjs.UnrecognizedSubjectError)(origin);\n      }\n      const permission = subject.permissions[target];\n      if (!permission) {\n        throw new (0, _chunkFYADAA2Gjs.PermissionDoesNotExistError)(origin, target);\n      }\n      const caveat = {\n        type: caveatType,\n        value: caveatValue\n      };\n      this.validateCaveat(caveat, origin, target);\n      if (permission.caveats) {\n        const caveatIndex = permission.caveats.findIndex(\n          (existingCaveat) => existingCaveat.type === caveat.type\n        );\n        if (caveatIndex === -1) {\n          permission.caveats.push(caveat);\n        } else {\n          permission.caveats.splice(caveatIndex, 1, caveat);\n        }\n      } else {\n        permission.caveats = [caveat];\n      }\n      this.validateModifiedPermission(permission, origin);\n    });\n  }\n  /**\n   * Updates all caveats with the specified type for all subjects and\n   * permissions by applying the specified mutator function to them.\n   *\n   * ATTN: Permissions can be revoked entirely by the action of this method,\n   * read on for details.\n   *\n   * Caveat mutators are functions that receive a caveat value and return a\n   * tuple consisting of a {@link CaveatMutatorOperation} and, optionally, a new\n   * value to update the existing caveat with.\n   *\n   * For each caveat, depending on the mutator result, this method will:\n   * - Do nothing ({@link CaveatMutatorOperation.Noop})\n   * - Update the value of the caveat ({@link CaveatMutatorOperation.UpdateValue}). The caveat specification validator, if any, will be called after updating the value.\n   * - Delete the caveat ({@link CaveatMutatorOperation.DeleteCaveat}). The permission specification validator, if any, will be called after deleting the caveat.\n   * - Revoke the parent permission ({@link CaveatMutatorOperation.RevokePermission})\n   *\n   * This method throws if the validation of any caveat or permission fails.\n   *\n   * @param targetCaveatType - The type of the caveats to update.\n   * @param mutator - The mutator function which will be applied to all caveat\n   * values.\n   */\n  updatePermissionsByCaveat(targetCaveatType, mutator) {\n    if (Object.keys(this.state.subjects).length === 0) {\n      return;\n    }\n    this.update((draftState) => {\n      Object.values(draftState.subjects).forEach((subject) => {\n        Object.values(subject.permissions).forEach((permission) => {\n          const { caveats } = permission;\n          const targetCaveat = caveats?.find(\n            ({ type }) => type === targetCaveatType\n          );\n          if (!targetCaveat) {\n            return;\n          }\n          const mutatorResult = mutator(targetCaveat.value);\n          const { operation } = mutatorResult;\n          switch (operation) {\n            case 0 /* Noop */:\n              break;\n            case 1 /* UpdateValue */:\n              targetCaveat.value = mutatorResult.value;\n              this.validateCaveat(\n                targetCaveat,\n                subject.origin,\n                permission.parentCapability\n              );\n              break;\n            case 2 /* DeleteCaveat */:\n              this.deleteCaveat(permission, targetCaveatType, subject.origin);\n              break;\n            case 3 /* RevokePermission */:\n              this.deletePermission(\n                draftState.subjects,\n                subject.origin,\n                permission.parentCapability\n              );\n              break;\n            default: {\n              throw new Error(`Unrecognized mutation result: \"${operation}\"`);\n            }\n          }\n        });\n      });\n    });\n  }\n  /**\n   * Removes the caveat of the specified type from the permission corresponding\n   * to the given subject origin and target name.\n   *\n   * Throws an error if no such permission or caveat exists.\n   *\n   * @template TargetName - The permission target name. Should be inferred.\n   * @template CaveatType - The valid caveat types for the permission. Should\n   * be inferred.\n   * @param origin - The origin of the subject.\n   * @param target - The target name of the permission.\n   * @param caveatType - The type of the caveat to remove.\n   */\n  removeCaveat(origin, target, caveatType) {\n    this.update((draftState) => {\n      const permission = draftState.subjects[origin]?.permissions[target];\n      if (!permission) {\n        throw new (0, _chunkFYADAA2Gjs.PermissionDoesNotExistError)(origin, target);\n      }\n      if (!permission.caveats) {\n        throw new (0, _chunkFYADAA2Gjs.CaveatDoesNotExistError)(origin, target, caveatType);\n      }\n      this.deleteCaveat(permission, caveatType, origin);\n    });\n  }\n  /**\n   * Deletes the specified caveat from the specified permission. If no caveats\n   * remain after deletion, the permission's caveat property is set to `null`.\n   * The permission is validated after being modified.\n   *\n   * Throws an error if the permission does not have a caveat with the specified\n   * type.\n   *\n   * @param permission - The permission whose caveat to delete.\n   * @param caveatType - The type of the caveat to delete.\n   * @param origin - The origin the permission subject.\n   */\n  deleteCaveat(permission, caveatType, origin) {\n    if (!permission.caveats) {\n      throw new (0, _chunkFYADAA2Gjs.CaveatDoesNotExistError)(\n        origin,\n        permission.parentCapability,\n        caveatType\n      );\n    }\n    const caveatIndex = permission.caveats.findIndex(\n      (existingCaveat) => existingCaveat.type === caveatType\n    );\n    if (caveatIndex === -1) {\n      throw new (0, _chunkFYADAA2Gjs.CaveatDoesNotExistError)(\n        origin,\n        permission.parentCapability,\n        caveatType\n      );\n    }\n    if (permission.caveats.length === 1) {\n      permission.caveats = null;\n    } else {\n      permission.caveats.splice(caveatIndex, 1);\n    }\n    this.validateModifiedPermission(permission, origin);\n  }\n  /**\n   * Validates the specified modified permission. Should **always** be invoked\n   * on a permission after its caveats have been modified.\n   *\n   * Just like {@link PermissionController.validatePermission}, except that the\n   * corresponding target name and specification are retrieved first, and an\n   * error is thrown if the target name does not exist.\n   *\n   * @param permission - The modified permission to validate.\n   * @param origin - The origin associated with the permission.\n   */\n  validateModifiedPermission(permission, origin) {\n    if (!this.targetExists(permission.parentCapability)) {\n      throw new Error(\n        `Fatal: Existing permission target \"${permission.parentCapability}\" has no specification.`\n      );\n    }\n    this.validatePermission(\n      this.getPermissionSpecification(permission.parentCapability),\n      permission,\n      origin\n    );\n  }\n  /**\n   * Verifies the existence the specified permission target, i.e. whether it has\n   * a specification.\n   *\n   * @param target - The requested permission target.\n   * @returns Whether the permission target exists.\n   */\n  targetExists(target) {\n    return _utils.hasProperty.call(void 0, this._permissionSpecifications, target);\n  }\n  /**\n   * Grants _approved_ permissions to the specified subject. Every permission and\n   * caveat is stringently validated—including by calling their specification\n   * validators—and an error is thrown if validation fails.\n   *\n   * ATTN: This method does **not** prompt the user for approval. User consent must\n   * first be obtained through some other means.\n   *\n   * @see {@link PermissionController.requestPermissions} For initiating a\n   * permissions request requiring user approval.\n   * @param options - Options bag.\n   * @param options.approvedPermissions - The requested permissions approved by\n   * the user.\n   * @param options.requestData - Permission request data. Passed to permission\n   * factory functions.\n   * @param options.preserveExistingPermissions - Whether to preserve the\n   * subject's existing permissions.\n   * @param options.subject - The subject to grant permissions to.\n   * @returns The subject's new permission state. It may or may not have changed.\n   */\n  grantPermissions({\n    approvedPermissions,\n    requestData,\n    preserveExistingPermissions = true,\n    subject\n  }) {\n    return _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _applyGrantedPermissions, applyGrantedPermissions_fn).call(this, {\n      approvedPermissions,\n      subject,\n      mergePermissions: false,\n      preserveExistingPermissions,\n      requestData\n    });\n  }\n  /**\n   * Incrementally grants _approved_ permissions to the specified subject. Every\n   * permission and caveat is stringently validated—including by calling their\n   * specification validators—and an error is thrown if validation fails.\n   *\n   * ATTN: This method does **not** prompt the user for approval. User consent must\n   * first be obtained through some other means.\n   *\n   * @see {@link PermissionController.requestPermissionsIncremental} For initiating\n   * an incremental permissions request requiring user approval.\n   * @param options - Options bag.\n   * @param options.approvedPermissions - The requested permissions approved by\n   * the user.\n   * @param options.requestData - Permission request data. Passed to permission\n   * factory functions.\n   * @param options.subject - The subject to grant permissions to.\n   * @returns The subject's new permission state. It may or may not have changed.\n   */\n  grantPermissionsIncremental({\n    approvedPermissions,\n    requestData,\n    subject\n  }) {\n    return _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _applyGrantedPermissions, applyGrantedPermissions_fn).call(this, {\n      approvedPermissions,\n      subject,\n      mergePermissions: true,\n      preserveExistingPermissions: true,\n      requestData\n    });\n  }\n  /**\n   * Validates the specified permission by:\n   * - Ensuring that if `subjectTypes` is specified, the subject requesting the permission is of a type in the list.\n   * - Ensuring that its `caveats` property is either `null` or a non-empty array.\n   * - Ensuring that it only includes caveats allowed by its specification.\n   * - Ensuring that it includes no duplicate caveats (by caveat type).\n   * - Validating each caveat object, if `performCaveatValidation` is `true`.\n   * - Calling the validator of its specification, if one exists and `invokePermissionValidator` is `true`.\n   *\n   * An error is thrown if validation fails.\n   *\n   * @param specification - The specification of the permission.\n   * @param permission - The permission to validate.\n   * @param origin - The origin associated with the permission.\n   * @param validationOptions - Validation options.\n   * @param validationOptions.invokePermissionValidator - Whether to invoke the\n   * permission's consumer-specified validator function, if any.\n   * @param validationOptions.performCaveatValidation - Whether to invoke\n   * {@link PermissionController.validateCaveat} on each of the permission's\n   * caveats.\n   */\n  validatePermission(specification, permission, origin, { invokePermissionValidator, performCaveatValidation } = {\n    invokePermissionValidator: true,\n    performCaveatValidation: true\n  }) {\n    const { allowedCaveats, validator, targetName } = specification;\n    if (specification.subjectTypes?.length && specification.subjectTypes.length > 0) {\n      const metadata = this.messagingSystem.call(\n        \"SubjectMetadataController:getSubjectMetadata\",\n        origin\n      );\n      if (!metadata || metadata.subjectType === null || !specification.subjectTypes.includes(metadata.subjectType)) {\n        throw specification.permissionType === \"RestrictedMethod\" /* RestrictedMethod */ ? _chunkFYADAA2Gjs.methodNotFound.call(void 0, targetName, { origin }) : new (0, _chunkFYADAA2Gjs.EndowmentPermissionDoesNotExistError)(targetName, origin);\n      }\n    }\n    if (_utils.hasProperty.call(void 0, permission, \"caveats\")) {\n      const { caveats } = permission;\n      if (caveats !== null && !(Array.isArray(caveats) && caveats.length > 0)) {\n        throw new (0, _chunkFYADAA2Gjs.InvalidCaveatsPropertyError)(origin, targetName, caveats);\n      }\n      const seenCaveatTypes = /* @__PURE__ */ new Set();\n      caveats?.forEach((caveat) => {\n        if (performCaveatValidation) {\n          this.validateCaveat(caveat, origin, targetName);\n        }\n        if (!allowedCaveats?.includes(caveat.type)) {\n          throw new (0, _chunkFYADAA2Gjs.ForbiddenCaveatError)(caveat.type, origin, targetName);\n        }\n        if (seenCaveatTypes.has(caveat.type)) {\n          throw new (0, _chunkFYADAA2Gjs.DuplicateCaveatError)(caveat.type, origin, targetName);\n        }\n        seenCaveatTypes.add(caveat.type);\n      });\n    }\n    if (invokePermissionValidator && validator) {\n      validator(permission, origin, targetName);\n    }\n  }\n  /**\n   * Assigns the specified permissions to the subject with the given origin.\n   * Overwrites all existing permissions, and creates a subject entry if it\n   * doesn't already exist.\n   *\n   * ATTN: Assumes that the new permissions have been validated.\n   *\n   * @param origin - The origin of the grantee subject.\n   * @param permissions - The new permissions for the grantee subject.\n   */\n  setValidatedPermissions(origin, permissions) {\n    this.update((draftState) => {\n      if (!draftState.subjects[origin]) {\n        draftState.subjects[origin] = { origin, permissions: {} };\n      }\n      draftState.subjects[origin].permissions = _immer.castDraft.call(void 0, permissions);\n    });\n  }\n  /**\n   * Validates the requested caveats for the permission of the specified\n   * subject origin and target name and returns the validated caveat array.\n   *\n   * Throws an error if validation fails.\n   *\n   * @param origin - The origin of the permission subject.\n   * @param target - The permission target name.\n   * @param requestedCaveats - The requested caveats to construct.\n   * @returns The constructed caveats.\n   */\n  constructCaveats(origin, target, requestedCaveats) {\n    const caveatArray = requestedCaveats?.map((requestedCaveat) => {\n      this.validateCaveat(requestedCaveat, origin, target);\n      const { type, value } = requestedCaveat;\n      return { type, value };\n    });\n    return caveatArray && _controllerutils.isNonEmptyArray.call(void 0, caveatArray) ? caveatArray : void 0;\n  }\n  /**\n   * This methods validates that the specified caveat is an object with the\n   * expected properties and types. It also ensures that a caveat specification\n   * exists for the requested caveat type, and calls the specification\n   * validator, if it exists, on the caveat object.\n   *\n   * Throws an error if validation fails.\n   *\n   * @param caveat - The caveat object to validate.\n   * @param origin - The origin associated with the subject of the parent\n   * permission.\n   * @param target - The target name associated with the parent permission.\n   */\n  validateCaveat(caveat, origin, target) {\n    if (!_controllerutils.isPlainObject.call(void 0, caveat)) {\n      throw new (0, _chunkFYADAA2Gjs.InvalidCaveatError)(caveat, origin, target);\n    }\n    if (Object.keys(caveat).length !== 2) {\n      throw new (0, _chunkFYADAA2Gjs.InvalidCaveatFieldsError)(caveat, origin, target);\n    }\n    if (typeof caveat.type !== \"string\") {\n      throw new (0, _chunkFYADAA2Gjs.InvalidCaveatTypeError)(caveat, origin, target);\n    }\n    const specification = this.getCaveatSpecification(caveat.type);\n    if (!specification) {\n      throw new (0, _chunkFYADAA2Gjs.UnrecognizedCaveatTypeError)(caveat.type, origin, target);\n    }\n    if (!_utils.hasProperty.call(void 0, caveat, \"value\") || caveat.value === void 0) {\n      throw new (0, _chunkFYADAA2Gjs.CaveatMissingValueError)(caveat, origin, target);\n    }\n    if (!_controllerutils.isValidJson.call(void 0, caveat.value)) {\n      throw new (0, _chunkFYADAA2Gjs.CaveatInvalidJsonError)(caveat, origin, target);\n    }\n    specification.validator?.(caveat, origin, target);\n  }\n  /**\n   * Initiates a permission request that requires user approval.\n   *\n   * Either this or {@link PermissionController.requestPermissionsIncremental}\n   * should always be used to grant additional permissions to a subject,\n   * unless user approval has been obtained through some other means.\n   *\n   * Permissions are validated at every step of the approval process, and this\n   * method will reject if validation fails.\n   *\n   * @see {@link ApprovalController} For the user approval logic.\n   * @see {@link PermissionController.acceptPermissionsRequest} For the method\n   * that _accepts_ the request and resolves the user approval promise.\n   * @see {@link PermissionController.rejectPermissionsRequest} For the method\n   * that _rejects_ the request and the user approval promise.\n   * @param subject - The grantee subject.\n   * @param requestedPermissions - The requested permissions.\n   * @param options - Additional options.\n   * @param options.id - The id of the permissions request. Defaults to a unique\n   * id.\n   * @param options.preserveExistingPermissions - Whether to preserve the\n   * subject's existing permissions. Defaults to `true`.\n   * @param options.metadata - Additional metadata about the permission request.\n   * @returns The granted permissions and request metadata.\n   */\n  async requestPermissions(subject, requestedPermissions, options = {}) {\n    const { origin } = subject;\n    const { id = _nanoid.nanoid.call(void 0, ), preserveExistingPermissions = true } = options;\n    this.validateRequestedPermissions(origin, requestedPermissions);\n    const metadata = {\n      ...options.metadata,\n      id,\n      origin\n    };\n    const permissionsRequest = {\n      metadata,\n      permissions: requestedPermissions\n    };\n    const approvedRequest = await this.requestUserApproval(permissionsRequest);\n    return await _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _handleApprovedPermissions, handleApprovedPermissions_fn).call(this, {\n      subject,\n      metadata,\n      preserveExistingPermissions,\n      approvedRequest\n    });\n  }\n  /**\n   * Initiates an incremental permission request that prompts for user approval.\n   * Incremental permission requests allow the caller to replace existing and/or\n   * add brand new permissions and caveats for the specified subject.\n   *\n   * Incremental permission request are merged with the subject's existing permissions\n   * through a right-biased union, where the incremental permission are the right-hand\n   * side of the merger. If both sides of the merger specify the same caveats for a\n   * given permission, the caveats are merged using their specification's caveat value\n   * merger property.\n   *\n   * Either this or {@link PermissionController.requestPermissions} should\n   * always be used to grant additional permissions to a subject, unless user\n   * approval has been obtained through some other means.\n   *\n   * Permissions are validated at every step of the approval process, and this\n   * method will reject if validation fails.\n   *\n   * @see {@link ApprovalController} For the user approval logic.\n   * @see {@link PermissionController.acceptPermissionsRequest} For the method\n   * that _accepts_ the request and resolves the user approval promise.\n   * @see {@link PermissionController.rejectPermissionsRequest} For the method\n   * that _rejects_ the request and the user approval promise.\n   * @param subject - The grantee subject.\n   * @param requestedPermissions - The requested permissions.\n   * @param options - Additional options.\n   * @param options.id - The id of the permissions request. Defaults to a unique\n   * id.\n   * @param options.metadata - Additional metadata about the permission request.\n   * @returns The granted permissions and request metadata.\n   */\n  async requestPermissionsIncremental(subject, requestedPermissions, options = {}) {\n    const { origin } = subject;\n    const { id = _nanoid.nanoid.call(void 0, ) } = options;\n    this.validateRequestedPermissions(origin, requestedPermissions);\n    const currentPermissions = this.getPermissions(origin) ?? {};\n    const [newPermissions, permissionDiffMap] = _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _mergeIncrementalPermissions, mergeIncrementalPermissions_fn).call(this, currentPermissions, requestedPermissions);\n    if (newPermissions === void 0 || permissionDiffMap === void 0) {\n      return [];\n    }\n    try {\n      this.validateRequestedPermissions(origin, newPermissions);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new (0, _chunkFYADAA2Gjs.InvalidMergedPermissionsError)(\n          origin,\n          error,\n          permissionDiffMap\n        );\n      }\n      throw _chunkFYADAA2Gjs.internalError.call(void 0, \"Unrecognized error type\", { error });\n    }\n    const metadata = {\n      ...options.metadata,\n      id,\n      origin\n    };\n    const permissionsRequest = {\n      metadata,\n      permissions: newPermissions,\n      diff: {\n        currentPermissions,\n        permissionDiffMap\n      }\n    };\n    const approvedRequest = await this.requestUserApproval(permissionsRequest);\n    return await _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _handleApprovedPermissions, handleApprovedPermissions_fn).call(this, {\n      subject,\n      metadata,\n      preserveExistingPermissions: false,\n      approvedRequest\n    });\n  }\n  /**\n   * Validates requested permissions. Throws if validation fails.\n   *\n   * This method ensures that the requested permissions are a properly\n   * formatted {@link RequestedPermissions} object, and performs the same\n   * validation as {@link PermissionController.grantPermissions}, except that\n   * consumer-specified permission validator functions are not called, since\n   * they are only called on fully constructed, approved permissions that are\n   * otherwise completely valid.\n   *\n   * Unrecognzied properties on requested permissions are ignored.\n   *\n   * @param origin - The origin of the grantee subject.\n   * @param requestedPermissions - The requested permissions.\n   */\n  validateRequestedPermissions(origin, requestedPermissions) {\n    if (!_controllerutils.isPlainObject.call(void 0, requestedPermissions)) {\n      throw _chunkFYADAA2Gjs.invalidParams.call(void 0, {\n        message: `Requested permissions for origin \"${origin}\" is not a plain object.`,\n        data: { origin, requestedPermissions }\n      });\n    }\n    if (Object.keys(requestedPermissions).length === 0) {\n      throw _chunkFYADAA2Gjs.invalidParams.call(void 0, {\n        message: `Permissions request for origin \"${origin}\" contains no permissions.`,\n        data: { requestedPermissions }\n      });\n    }\n    for (const targetName of Object.keys(requestedPermissions)) {\n      const permission = requestedPermissions[targetName];\n      if (!this.targetExists(targetName)) {\n        throw _chunkFYADAA2Gjs.methodNotFound.call(void 0, targetName, { origin, requestedPermissions });\n      }\n      if (!_controllerutils.isPlainObject.call(void 0, permission) || permission.parentCapability !== void 0 && targetName !== permission.parentCapability) {\n        throw _chunkFYADAA2Gjs.invalidParams.call(void 0, {\n          message: `Permissions request for origin \"${origin}\" contains invalid requested permission(s).`,\n          data: { origin, requestedPermissions }\n        });\n      }\n      this.validatePermission(\n        this.getPermissionSpecification(targetName),\n        // Typecast: The permission is still a \"PlainObject\" here.\n        permission,\n        origin,\n        { invokePermissionValidator: false, performCaveatValidation: true }\n      );\n    }\n  }\n  /**\n   * Adds a request to the {@link ApprovalController} using the\n   * {@link AddApprovalRequest} action. Also validates the resulting approved\n   * permissions request, and throws an error if validation fails.\n   *\n   * @param permissionsRequest - The permissions request object.\n   * @returns The approved permissions request object.\n   */\n  async requestUserApproval(permissionsRequest) {\n    const { origin, id } = permissionsRequest.metadata;\n    const approvedRequest = await this.messagingSystem.call(\n      \"ApprovalController:addRequest\",\n      {\n        id,\n        origin,\n        requestData: permissionsRequest,\n        type: \"wallet_requestPermissions\" /* RequestPermissions */\n      },\n      true\n    );\n    this.validateApprovedPermissions(approvedRequest, { id, origin });\n    return approvedRequest;\n  }\n  /**\n   * Reunites all the side-effects (onPermitted and onFailure) of the requested permissions inside a record of arrays.\n   *\n   * @param permissions - The approved permissions.\n   * @returns The {@link SideEffects} object containing the handlers arrays.\n   */\n  getSideEffects(permissions) {\n    return Object.keys(permissions).reduce(\n      (sideEffectList, targetName) => {\n        if (this.targetExists(targetName)) {\n          const specification = this.getPermissionSpecification(targetName);\n          if (specification.sideEffect) {\n            sideEffectList.permittedHandlers[targetName] = specification.sideEffect.onPermitted;\n            if (specification.sideEffect.onFailure) {\n              sideEffectList.failureHandlers[targetName] = specification.sideEffect.onFailure;\n            }\n          }\n        }\n        return sideEffectList;\n      },\n      { permittedHandlers: {}, failureHandlers: {} }\n    );\n  }\n  /**\n   * Executes the side-effects of the approved permissions while handling the errors if any.\n   * It will pass an instance of the {@link messagingSystem} and the request data associated with the permission request to the handlers through its params.\n   *\n   * @param sideEffects - the side-effect record created by {@link getSideEffects}\n   * @param requestData - the permissions requestData.\n   * @returns the value returned by all the `onPermitted` handlers in an array.\n   */\n  async executeSideEffects(sideEffects, requestData) {\n    const { permittedHandlers, failureHandlers } = sideEffects;\n    const params = {\n      requestData,\n      messagingSystem: this.messagingSystem\n    };\n    const promiseResults = await Promise.allSettled(\n      Object.values(permittedHandlers).map(\n        (permittedHandler) => permittedHandler(params)\n      )\n    );\n    const rejectedHandlers = promiseResults.filter(\n      (promise) => promise.status === \"rejected\"\n    );\n    if (rejectedHandlers.length > 0) {\n      const failureHandlersList = Object.values(failureHandlers);\n      if (failureHandlersList.length > 0) {\n        try {\n          await Promise.all(\n            failureHandlersList.map((failureHandler) => failureHandler(params))\n          );\n        } catch (error) {\n          throw _chunkFYADAA2Gjs.internalError.call(void 0, \"Unexpected error in side-effects\", { error });\n        }\n      }\n      const reasons = rejectedHandlers.map((handler) => handler.reason);\n      reasons.forEach((reason) => {\n        console.error(reason);\n      });\n      throw reasons.length > 1 ? _chunkFYADAA2Gjs.internalError.call(void 0, \n        \"Multiple errors occurred during side-effects execution\",\n        { errors: reasons }\n      ) : reasons[0];\n    }\n    return promiseResults.map(\n      ({ value }) => value\n    );\n  }\n  /**\n   * Validates an approved {@link PermissionsRequest} object. The approved\n   * request must have the required `metadata` and `permissions` properties,\n   * the `id` and `origin` of the `metadata` must match the original request\n   * metadata, and the requested permissions must be valid per\n   * {@link PermissionController.validateRequestedPermissions}. Any extra\n   * metadata properties are ignored.\n   *\n   * An error is thrown if validation fails.\n   *\n   * @param approvedRequest - The approved permissions request object.\n   * @param originalMetadata - The original request metadata.\n   */\n  validateApprovedPermissions(approvedRequest, originalMetadata) {\n    const { id, origin } = originalMetadata;\n    if (!_controllerutils.isPlainObject.call(void 0, approvedRequest) || !_controllerutils.isPlainObject.call(void 0, approvedRequest.metadata)) {\n      throw _chunkFYADAA2Gjs.internalError.call(void 0, \n        `Approved permissions request for subject \"${origin}\" is invalid.`,\n        { data: { approvedRequest } }\n      );\n    }\n    const {\n      metadata: { id: newId, origin: newOrigin },\n      permissions\n    } = approvedRequest;\n    if (newId !== id) {\n      throw _chunkFYADAA2Gjs.internalError.call(void 0, \n        `Approved permissions request for subject \"${origin}\" mutated its id.`,\n        { originalId: id, mutatedId: newId }\n      );\n    }\n    if (newOrigin !== origin) {\n      throw _chunkFYADAA2Gjs.internalError.call(void 0, \n        `Approved permissions request for subject \"${origin}\" mutated its origin.`,\n        { originalOrigin: origin, mutatedOrigin: newOrigin }\n      );\n    }\n    try {\n      this.validateRequestedPermissions(origin, permissions);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw _chunkFYADAA2Gjs.internalError.call(void 0, \n          `Invalid approved permissions request: ${error.message}`,\n          error instanceof _rpcerrors.JsonRpcError ? error.data : void 0\n        );\n      }\n      throw _chunkFYADAA2Gjs.internalError.call(void 0, \"Unrecognized error type\", { error });\n    }\n  }\n  /**\n   * Accepts a permissions request created by\n   * {@link PermissionController.requestPermissions}.\n   *\n   * @param request - The permissions request.\n   */\n  async acceptPermissionsRequest(request) {\n    const { id } = request.metadata;\n    if (!this.hasApprovalRequest({ id })) {\n      throw new (0, _chunkFYADAA2Gjs.PermissionsRequestNotFoundError)(id);\n    }\n    if (Object.keys(request.permissions).length === 0) {\n      this._rejectPermissionsRequest(\n        id,\n        _chunkFYADAA2Gjs.invalidParams.call(void 0, {\n          message: \"Must request at least one permission.\"\n        })\n      );\n      return;\n    }\n    try {\n      await this.messagingSystem.call(\n        \"ApprovalController:acceptRequest\",\n        id,\n        request\n      );\n    } catch (error) {\n      this._rejectPermissionsRequest(id, error);\n      throw error;\n    }\n  }\n  /**\n   * Rejects a permissions request created by\n   * {@link PermissionController.requestPermissions}.\n   *\n   * @param id - The id of the request to be rejected.\n   */\n  async rejectPermissionsRequest(id) {\n    if (!this.hasApprovalRequest({ id })) {\n      throw new (0, _chunkFYADAA2Gjs.PermissionsRequestNotFoundError)(id);\n    }\n    this._rejectPermissionsRequest(id, _chunkFYADAA2Gjs.userRejectedRequest.call(void 0, ));\n  }\n  /**\n   * Checks whether the {@link ApprovalController} has a particular permissions\n   * request.\n   *\n   * @see {@link PermissionController.acceptPermissionsRequest} and\n   * {@link PermissionController.rejectPermissionsRequest} for usage.\n   * @param options - The {@link HasApprovalRequest} options.\n   * @param options.id - The id of the approval request to check for.\n   * @returns Whether the specified request exists.\n   */\n  hasApprovalRequest(options) {\n    return this.messagingSystem.call(\"ApprovalController:hasRequest\", options);\n  }\n  /**\n   * Rejects the permissions request with the specified id, with the specified\n   * error as the reason. This method is effectively a wrapper around a\n   * messenger call for the `ApprovalController:rejectRequest` action.\n   *\n   * @see {@link PermissionController.acceptPermissionsRequest} and\n   * {@link PermissionController.rejectPermissionsRequest} for usage.\n   * @param id - The id of the request to reject.\n   * @param error - The error associated with the rejection.\n   * @returns Nothing\n   */\n  _rejectPermissionsRequest(id, error) {\n    return this.messagingSystem.call(\n      \"ApprovalController:rejectRequest\",\n      id,\n      error\n    );\n  }\n  /**\n   * Gets the subject's endowments per the specified endowment permission.\n   * Throws if the subject does not have the required permission or if the\n   * permission is not an endowment permission.\n   *\n   * @param origin - The origin of the subject whose endowments to retrieve.\n   * @param targetName - The name of the endowment permission. This must be a\n   * valid permission target name.\n   * @param requestData - Additional data associated with the request, if any.\n   * Forwarded to the endowment getter function for the permission.\n   * @returns The endowments, if any.\n   */\n  async getEndowments(origin, targetName, requestData) {\n    if (!this.hasPermission(origin, targetName)) {\n      throw _chunkFYADAA2Gjs.unauthorized.call(void 0, { data: { origin, targetName } });\n    }\n    return this.getTypedPermissionSpecification(\n      \"Endowment\" /* Endowment */,\n      targetName,\n      origin\n    ).endowmentGetter({ origin, requestData });\n  }\n  /**\n   * Executes a restricted method as the subject with the given origin.\n   * The specified params, if any, will be passed to the method implementation.\n   *\n   * ATTN: Great caution should be exercised in the use of this method.\n   * Methods that cause side effects or affect application state should\n   * be avoided.\n   *\n   * This method will first attempt to retrieve the requested restricted method\n   * implementation, throwing if it does not exist. The method will then be\n   * invoked as though the subject with the specified origin had invoked it with\n   * the specified parameters. This means that any existing caveats will be\n   * applied to the restricted method, and this method will throw if the\n   * restricted method or its caveat decorators throw.\n   *\n   * In addition, this method will throw if the subject does not have a\n   * permission for the specified restricted method.\n   *\n   * @param origin - The origin of the subject to execute the method on behalf\n   * of.\n   * @param targetName - The name of the method to execute. This must be a valid\n   * permission target name.\n   * @param params - The parameters to pass to the method implementation.\n   * @returns The result of the executed method.\n   */\n  async executeRestrictedMethod(origin, targetName, params) {\n    const methodImplementation = this.getRestrictedMethod(targetName, origin);\n    const result = await this._executeRestrictedMethod(\n      methodImplementation,\n      { origin },\n      targetName,\n      params\n    );\n    if (result === void 0) {\n      throw new Error(\n        `Internal request for method \"${targetName}\" as origin \"${origin}\" returned no result.`\n      );\n    }\n    return result;\n  }\n  /**\n   * An internal method used in the controller's `json-rpc-engine` middleware\n   * and {@link PermissionController.executeRestrictedMethod}. Calls the\n   * specified restricted method implementation after decorating it with the\n   * caveats of its permission. Throws if the subject does not have the\n   * requisite permission.\n   *\n   * ATTN: Parameter validation is the responsibility of the caller, or\n   * the restricted method implementation in the case of `params`.\n   *\n   * @see {@link PermissionController.executeRestrictedMethod} and\n   * {@link PermissionController.createPermissionMiddleware} for usage.\n   * @param methodImplementation - The implementation of the method to call.\n   * @param subject - Metadata about the subject that made the request.\n   * @param method - The method name\n   * @param params - Params needed for executing the restricted method\n   * @returns The result of the restricted method implementation\n   */\n  _executeRestrictedMethod(methodImplementation, subject, method, params = []) {\n    const { origin } = subject;\n    const permission = this.getPermission(origin, method);\n    if (!permission) {\n      throw _chunkFYADAA2Gjs.unauthorized.call(void 0, { data: { origin, method } });\n    }\n    return _chunk3YOPLPVYjs.decorateWithCaveats.call(void 0, \n      methodImplementation,\n      permission,\n      this._caveatSpecifications\n    )({ method, params, context: { origin } });\n  }\n};\n_expectGetCaveatMerger = new WeakSet();\nexpectGetCaveatMerger_fn = function(caveatType) {\n  const { merger } = this.getCaveatSpecification(caveatType);\n  if (merger === void 0) {\n    throw new (0, _chunkFYADAA2Gjs.CaveatMergerDoesNotExistError)(caveatType);\n  }\n  return merger;\n};\n_applyGrantedPermissions = new WeakSet();\napplyGrantedPermissions_fn = function({\n  approvedPermissions,\n  subject,\n  mergePermissions,\n  preserveExistingPermissions,\n  requestData\n}) {\n  const { origin } = subject;\n  if (!origin || typeof origin !== \"string\") {\n    throw new (0, _chunkFYADAA2Gjs.InvalidSubjectIdentifierError)(origin);\n  }\n  const permissions = preserveExistingPermissions ? {\n    ...this.getPermissions(origin)\n  } : {};\n  for (const [requestedTarget, approvedPermission] of Object.entries(\n    approvedPermissions\n  )) {\n    if (!this.targetExists(requestedTarget)) {\n      throw _chunkFYADAA2Gjs.methodNotFound.call(void 0, requestedTarget);\n    }\n    if (approvedPermission.parentCapability !== void 0 && requestedTarget !== approvedPermission.parentCapability) {\n      throw new (0, _chunkFYADAA2Gjs.InvalidApprovedPermissionError)(\n        origin,\n        requestedTarget,\n        approvedPermission\n      );\n    }\n    const targetName = requestedTarget;\n    const specification = this.getPermissionSpecification(targetName);\n    const caveats = this.constructCaveats(\n      origin,\n      targetName,\n      approvedPermission.caveats\n    );\n    const permissionOptions = {\n      caveats,\n      invoker: origin,\n      target: targetName\n    };\n    let permission;\n    let performCaveatValidation = true;\n    if (specification.factory) {\n      permission = specification.factory(permissionOptions, requestData);\n    } else {\n      permission = _chunkZH4MLSXXjs.constructPermission.call(void 0, permissionOptions);\n      performCaveatValidation = false;\n    }\n    if (mergePermissions) {\n      permission = _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _mergePermission, mergePermission_fn).call(this, permissions[targetName], permission)[0];\n    }\n    this.validatePermission(specification, permission, origin, {\n      invokePermissionValidator: true,\n      performCaveatValidation\n    });\n    permissions[targetName] = permission;\n  }\n  this.setValidatedPermissions(origin, permissions);\n  return permissions;\n};\n_mergeIncrementalPermissions = new WeakSet();\nmergeIncrementalPermissions_fn = function(existingPermissions, incrementalRequestedPermissions) {\n  const permissionDiffMap = {};\n  const newPermissions = _immer.produce.call(void 0, \n    existingPermissions,\n    (draftExistingPermissions) => {\n      const leftPermissions = draftExistingPermissions;\n      Object.entries(incrementalRequestedPermissions).forEach(\n        ([targetName, rightPermission]) => {\n          const leftPermission = leftPermissions[targetName];\n          const [newPermission, caveatsDiff] = _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _mergePermission, mergePermission_fn).call(this, leftPermission ?? {}, rightPermission);\n          if (leftPermission === void 0 || Object.keys(caveatsDiff).length > 0) {\n            leftPermissions[targetName] = newPermission;\n            permissionDiffMap[targetName] = caveatsDiff;\n          }\n        }\n      );\n    }\n  );\n  if (Object.keys(permissionDiffMap).length === 0) {\n    return [];\n  }\n  return [newPermissions, permissionDiffMap];\n};\n_mergePermission = new WeakSet();\nmergePermission_fn = function(leftPermission, rightPermission) {\n  const { caveatPairs, leftUniqueCaveats, rightUniqueCaveats } = _chunkVQPP5PWSjs.collectUniqueAndPairedCaveats.call(void 0, leftPermission, rightPermission);\n  const [mergedCaveats, caveatDiffMap] = caveatPairs.reduce(\n    ([caveats, diffMap], [leftCaveat, rightCaveat]) => {\n      const [newCaveat, diff] = _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _mergeCaveat, mergeCaveat_fn).call(this, leftCaveat, rightCaveat);\n      if (newCaveat !== void 0 && diff !== void 0) {\n        caveats.push(newCaveat);\n        diffMap[newCaveat.type] = diff;\n      } else {\n        caveats.push(leftCaveat);\n      }\n      return [caveats, diffMap];\n    },\n    [[], {}]\n  );\n  const mergedRightUniqueCaveats = rightUniqueCaveats.map((caveat) => {\n    const [newCaveat, diff] = _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _mergeCaveat, mergeCaveat_fn).call(this, void 0, caveat);\n    caveatDiffMap[newCaveat.type] = diff;\n    return newCaveat;\n  });\n  const allCaveats = [\n    ...mergedCaveats,\n    ...leftUniqueCaveats,\n    ...mergedRightUniqueCaveats\n  ];\n  const newPermission = {\n    ...leftPermission,\n    ...rightPermission,\n    ...allCaveats.length > 0 ? { caveats: allCaveats } : {}\n  };\n  return [newPermission, caveatDiffMap];\n};\n_mergeCaveat = new WeakSet();\nmergeCaveat_fn = function(leftCaveat, rightCaveat) {\n  if (leftCaveat !== void 0 && leftCaveat.type !== rightCaveat.type) {\n    throw new (0, _chunkFYADAA2Gjs.CaveatMergeTypeMismatchError)(leftCaveat.type, rightCaveat.type);\n  }\n  const merger = _chunkZ2XKIXLSjs.__privateMethod.call(void 0, this, _expectGetCaveatMerger, expectGetCaveatMerger_fn).call(this, rightCaveat.type);\n  if (leftCaveat === void 0) {\n    return [\n      {\n        ...rightCaveat\n      },\n      rightCaveat.value\n    ];\n  }\n  const [newValue, diff] = merger(leftCaveat.value, rightCaveat.value);\n  return newValue !== void 0 && diff !== void 0 ? [\n    {\n      type: rightCaveat.type,\n      value: newValue\n    },\n    diff\n  ] : [];\n};\n_handleApprovedPermissions = new WeakSet();\nhandleApprovedPermissions_fn = async function({\n  subject,\n  metadata,\n  preserveExistingPermissions,\n  approvedRequest\n}) {\n  const { permissions: approvedPermissions, ...requestData } = approvedRequest;\n  const approvedMetadata = { ...metadata };\n  const sideEffects = this.getSideEffects(approvedPermissions);\n  if (Object.values(sideEffects.permittedHandlers).length > 0) {\n    const sideEffectsData = await this.executeSideEffects(\n      sideEffects,\n      approvedRequest\n    );\n    approvedMetadata.data = Object.keys(sideEffects.permittedHandlers).reduce(\n      (acc, permission, i) => ({ [permission]: sideEffectsData[i], ...acc }),\n      {}\n    );\n  }\n  return [\n    this.grantPermissions({\n      subject,\n      approvedPermissions,\n      preserveExistingPermissions,\n      requestData\n    }),\n    approvedMetadata\n  ];\n};\n\n\n\n\nexports.CaveatMutatorOperation = CaveatMutatorOperation; exports.PermissionController = PermissionController;\n//# sourceMappingURL=chunk-B6PDRQ7N.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkFYADAA2Gjs = require('./chunk-FYADAA2G.js');\n\n// src/permission-middleware.ts\nvar _jsonrpcengine = require('@metamask/json-rpc-engine');\nfunction getPermissionMiddlewareFactory({\n  executeRestrictedMethod,\n  getRestrictedMethod,\n  isUnrestrictedMethod\n}) {\n  return function createPermissionMiddleware(subject) {\n    const { origin } = subject;\n    if (typeof origin !== \"string\" || !origin) {\n      throw new Error('The subject \"origin\" must be a non-empty string.');\n    }\n    const permissionsMiddleware = async (req, res, next) => {\n      const { method, params } = req;\n      if (isUnrestrictedMethod(method)) {\n        return next();\n      }\n      const methodImplementation = getRestrictedMethod(method, origin);\n      const result = await executeRestrictedMethod(\n        methodImplementation,\n        subject,\n        method,\n        params\n      );\n      if (result === void 0) {\n        res.error = _chunkFYADAA2Gjs.internalError.call(void 0, \n          `Request for method \"${req.method}\" returned undefined result.`,\n          { request: req }\n        );\n        return void 0;\n      }\n      res.result = result;\n      return void 0;\n    };\n    return _jsonrpcengine.createAsyncMiddleware.call(void 0, permissionsMiddleware);\n  };\n}\n\n\n\nexports.getPermissionMiddlewareFactory = getPermissionMiddlewareFactory;\n//# sourceMappingURL=chunk-F5TBMVWC.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/errors.ts\n\n\n\n\n\nvar _rpcerrors = require('@metamask/rpc-errors');\nfunction unauthorized(opts) {\n  return _rpcerrors.providerErrors.unauthorized({\n    message: \"Unauthorized to perform action. Try requesting the required permission(s) first. For more information, see: https://docs.metamask.io/guide/rpc-api.html#permissions\",\n    data: opts.data\n  });\n}\nfunction methodNotFound(method, data) {\n  const message = `The method \"${method}\" does not exist / is not available.`;\n  const opts = { message };\n  if (data !== void 0) {\n    opts.data = data;\n  }\n  return _rpcerrors.rpcErrors.methodNotFound(opts);\n}\nfunction invalidParams(opts) {\n  return _rpcerrors.rpcErrors.invalidParams({\n    data: opts.data,\n    message: opts.message\n  });\n}\nfunction userRejectedRequest(data) {\n  return _rpcerrors.providerErrors.userRejectedRequest({ data });\n}\nfunction internalError(message, data) {\n  return _rpcerrors.rpcErrors.internal({ message, data });\n}\nvar InvalidSubjectIdentifierError = class extends Error {\n  constructor(origin) {\n    super(\n      `Invalid subject identifier: \"${typeof origin === \"string\" ? origin : typeof origin}\"`\n    );\n  }\n};\nvar UnrecognizedSubjectError = class extends Error {\n  constructor(origin) {\n    super(`Unrecognized subject: \"${origin}\" has no permissions.`);\n  }\n};\nvar CaveatMergerDoesNotExistError = class extends Error {\n  constructor(caveatType) {\n    super(`Caveat value merger does not exist for type: \"${caveatType}\"`);\n  }\n};\nvar InvalidMergedPermissionsError = class extends Error {\n  constructor(origin, cause, diff) {\n    super(\n      `Invalid merged permissions for subject \"${origin}\":\n${cause.message}`\n    );\n    this.cause = cause;\n    this.data = { diff };\n  }\n};\nvar InvalidApprovedPermissionError = class extends Error {\n  constructor(origin, target, approvedPermission) {\n    super(\n      `Invalid approved permission for origin \"${origin}\" and target \"${target}\".`\n    );\n    this.data = { origin, target, approvedPermission };\n  }\n};\nvar PermissionDoesNotExistError = class extends Error {\n  constructor(origin, target) {\n    super(`Subject \"${origin}\" has no permission for \"${target}\".`);\n  }\n};\nvar EndowmentPermissionDoesNotExistError = class extends Error {\n  constructor(target, origin) {\n    super(\n      `${origin ? `Subject \"${origin}\"` : \"Unknown subject\"} has no permission for \"${target}\".`\n    );\n    if (origin) {\n      this.data = { origin };\n    }\n  }\n};\nvar UnrecognizedCaveatTypeError = class extends Error {\n  constructor(caveatType, origin, target) {\n    super(`Unrecognized caveat type: \"${caveatType}\"`);\n    this.data = { caveatType };\n    if (origin !== void 0) {\n      this.data.origin = origin;\n    }\n    if (target !== void 0) {\n      this.data.target = target;\n    }\n  }\n};\nvar InvalidCaveatsPropertyError = class extends Error {\n  constructor(origin, target, caveatsProperty) {\n    super(\n      `The \"caveats\" property of permission for \"${target}\" of subject \"${origin}\" is invalid. It must be a non-empty array if specified.`\n    );\n    this.data = { origin, target, caveatsProperty };\n  }\n};\nvar CaveatDoesNotExistError = class extends Error {\n  constructor(origin, target, caveatType) {\n    super(\n      `Permission for \"${target}\" of subject \"${origin}\" has no caveat of type \"${caveatType}\".`\n    );\n  }\n};\nvar CaveatAlreadyExistsError = class extends Error {\n  constructor(origin, target, caveatType) {\n    super(\n      `Permission for \"${target}\" of subject \"${origin}\" already has a caveat of type \"${caveatType}\".`\n    );\n  }\n};\nvar InvalidCaveatError = class extends _rpcerrors.JsonRpcError {\n  constructor(receivedCaveat, origin, target) {\n    super(\n      _rpcerrors.errorCodes.rpc.invalidParams,\n      `Invalid caveat. Caveats must be plain objects.`,\n      { receivedCaveat }\n    );\n    this.data = { origin, target };\n  }\n};\nvar InvalidCaveatTypeError = class extends Error {\n  constructor(caveat, origin, target) {\n    super(`Caveat types must be strings. Received: \"${typeof caveat.type}\"`);\n    this.data = { caveat, origin, target };\n  }\n};\nvar CaveatMissingValueError = class extends Error {\n  constructor(caveat, origin, target) {\n    super(`Caveat is missing \"value\" field.`);\n    this.data = { caveat, origin, target };\n  }\n};\nvar CaveatInvalidJsonError = class extends Error {\n  constructor(caveat, origin, target) {\n    super(`Caveat \"value\" is invalid JSON.`);\n    this.data = { caveat, origin, target };\n  }\n};\nvar InvalidCaveatFieldsError = class extends Error {\n  constructor(caveat, origin, target) {\n    super(\n      `Caveat has unexpected number of fields: \"${Object.keys(caveat).length}\"`\n    );\n    this.data = { caveat, origin, target };\n  }\n};\nvar ForbiddenCaveatError = class extends Error {\n  constructor(caveatType, origin, targetName) {\n    super(\n      `Permissions for target \"${targetName}\" may not have caveats of type \"${caveatType}\".`\n    );\n    this.data = { caveatType, origin, target: targetName };\n  }\n};\nvar DuplicateCaveatError = class extends Error {\n  constructor(caveatType, origin, targetName) {\n    super(\n      `Permissions for target \"${targetName}\" contains multiple caveats of type \"${caveatType}\".`\n    );\n    this.data = { caveatType, origin, target: targetName };\n  }\n};\nvar CaveatMergeTypeMismatchError = class extends Error {\n  constructor(leftCaveatType, rightCaveatType) {\n    super(\n      `Cannot merge caveats of different types: \"${leftCaveatType}\" and \"${rightCaveatType}\".`\n    );\n    this.data = { leftCaveatType, rightCaveatType };\n  }\n};\nvar CaveatSpecificationMismatchError = class extends Error {\n  constructor(caveatSpec, permissionType) {\n    super(\n      `Caveat specification uses a mismatched type. Expected caveats for ${permissionType}`\n    );\n    this.data = { caveatSpec, permissionType };\n  }\n};\nvar PermissionsRequestNotFoundError = class extends Error {\n  constructor(id) {\n    super(`Permissions request with id \"${id}\" not found.`);\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexports.unauthorized = unauthorized; exports.methodNotFound = methodNotFound; exports.invalidParams = invalidParams; exports.userRejectedRequest = userRejectedRequest; exports.internalError = internalError; exports.InvalidSubjectIdentifierError = InvalidSubjectIdentifierError; exports.UnrecognizedSubjectError = UnrecognizedSubjectError; exports.CaveatMergerDoesNotExistError = CaveatMergerDoesNotExistError; exports.InvalidMergedPermissionsError = InvalidMergedPermissionsError; exports.InvalidApprovedPermissionError = InvalidApprovedPermissionError; exports.PermissionDoesNotExistError = PermissionDoesNotExistError; exports.EndowmentPermissionDoesNotExistError = EndowmentPermissionDoesNotExistError; exports.UnrecognizedCaveatTypeError = UnrecognizedCaveatTypeError; exports.InvalidCaveatsPropertyError = InvalidCaveatsPropertyError; exports.CaveatDoesNotExistError = CaveatDoesNotExistError; exports.CaveatAlreadyExistsError = CaveatAlreadyExistsError; exports.InvalidCaveatError = InvalidCaveatError; exports.InvalidCaveatTypeError = InvalidCaveatTypeError; exports.CaveatMissingValueError = CaveatMissingValueError; exports.CaveatInvalidJsonError = CaveatInvalidJsonError; exports.InvalidCaveatFieldsError = InvalidCaveatFieldsError; exports.ForbiddenCaveatError = ForbiddenCaveatError; exports.DuplicateCaveatError = DuplicateCaveatError; exports.CaveatMergeTypeMismatchError = CaveatMergeTypeMismatchError; exports.CaveatSpecificationMismatchError = CaveatSpecificationMismatchError; exports.PermissionsRequestNotFoundError = PermissionsRequestNotFoundError;\n//# sourceMappingURL=chunk-FYADAA2G.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/rpc-methods/getPermissions.ts\nvar getPermissionsHandler = {\n  methodNames: [\"wallet_getPermissions\" /* GetPermissions */],\n  implementation: getPermissionsImplementation,\n  hookNames: {\n    getPermissionsForOrigin: true\n  }\n};\nasync function getPermissionsImplementation(_req, res, _next, end, { getPermissionsForOrigin }) {\n  res.result = Object.values(getPermissionsForOrigin() || {});\n  return end();\n}\n\n\n\nexports.getPermissionsHandler = getPermissionsHandler;\n//# sourceMappingURL=chunk-VBIZGGQL.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/utils.ts\nvar MethodNames = /* @__PURE__ */ ((MethodNames2) => {\n  MethodNames2[\"RequestPermissions\"] = \"wallet_requestPermissions\";\n  MethodNames2[\"GetPermissions\"] = \"wallet_getPermissions\";\n  MethodNames2[\"RevokePermissions\"] = \"wallet_revokePermissions\";\n  return MethodNames2;\n})(MethodNames || {});\nfunction collectUniqueAndPairedCaveats(leftPermission, rightPermission) {\n  const leftCaveats = leftPermission?.caveats?.slice() ?? [];\n  const rightCaveats = rightPermission.caveats?.slice() ?? [];\n  const leftUniqueCaveats = [];\n  const caveatPairs = [];\n  leftCaveats.forEach((leftCaveat) => {\n    const rightCaveatIndex = rightCaveats.findIndex(\n      (rightCaveat) => rightCaveat.type === leftCaveat.type\n    );\n    if (rightCaveatIndex === -1) {\n      leftUniqueCaveats.push(leftCaveat);\n    } else {\n      caveatPairs.push([leftCaveat, rightCaveats[rightCaveatIndex]]);\n      rightCaveats.splice(rightCaveatIndex, 1);\n    }\n  });\n  return {\n    caveatPairs,\n    leftUniqueCaveats,\n    rightUniqueCaveats: [...rightCaveats]\n  };\n}\n\n\n\n\nexports.MethodNames = MethodNames; exports.collectUniqueAndPairedCaveats = collectUniqueAndPairedCaveats;\n//# sourceMappingURL=chunk-VQPP5PWS.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/SubjectMetadataController.ts\nvar _basecontroller = require('@metamask/base-controller');\nvar controllerName = \"SubjectMetadataController\";\nvar SubjectType = /* @__PURE__ */ ((SubjectType2) => {\n  SubjectType2[\"Extension\"] = \"extension\";\n  SubjectType2[\"Internal\"] = \"internal\";\n  SubjectType2[\"Unknown\"] = \"unknown\";\n  SubjectType2[\"Website\"] = \"website\";\n  SubjectType2[\"Snap\"] = \"snap\";\n  return SubjectType2;\n})(SubjectType || {});\nvar stateMetadata = {\n  subjectMetadata: { persist: true, anonymous: false }\n};\nvar defaultState = {\n  subjectMetadata: {}\n};\nvar SubjectMetadataController = class _SubjectMetadataController extends _basecontroller.BaseController {\n  constructor({\n    messenger,\n    subjectCacheLimit,\n    state = {}\n  }) {\n    if (!Number.isInteger(subjectCacheLimit) || subjectCacheLimit < 1) {\n      throw new Error(\n        `subjectCacheLimit must be a positive integer. Received: \"${subjectCacheLimit}\"`\n      );\n    }\n    const hasPermissions = (origin) => {\n      return messenger.call(\"PermissionController:hasPermissions\", origin);\n    };\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: {\n        ..._SubjectMetadataController.getTrimmedState(state, hasPermissions)\n      }\n    });\n    this.subjectHasPermissions = hasPermissions;\n    this.subjectCacheLimit = subjectCacheLimit;\n    this.subjectsWithoutPermissionsEncounteredSinceStartup = /* @__PURE__ */ new Set();\n    this.messagingSystem.registerActionHandler(\n      // ESLint is confused by the string literal type.\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `${this.name}:getSubjectMetadata`,\n      this.getSubjectMetadata.bind(this)\n    );\n    this.messagingSystem.registerActionHandler(\n      // ESLint is confused by the string literal type.\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `${this.name}:addSubjectMetadata`,\n      this.addSubjectMetadata.bind(this)\n    );\n  }\n  /**\n   * Clears the state of this controller. Also resets the cache of subjects\n   * encountered since startup, so as to not prematurely reach the cache limit.\n   */\n  clearState() {\n    this.subjectsWithoutPermissionsEncounteredSinceStartup.clear();\n    this.update((_draftState) => {\n      return { ...defaultState };\n    });\n  }\n  /**\n   * Stores domain metadata for the given origin (subject). Deletes metadata for\n   * subjects without permissions in a FIFO manner once more than\n   * {@link SubjectMetadataController.subjectCacheLimit} distinct origins have\n   * been added since boot.\n   *\n   * In order to prevent a degraded user experience,\n   * metadata is never deleted for subjects with permissions, since metadata\n   * cannot yet be requested on demand.\n   *\n   * @param metadata - The subject metadata to store.\n   */\n  addSubjectMetadata(metadata) {\n    const { origin } = metadata;\n    const newMetadata = {\n      ...metadata,\n      extensionId: metadata.extensionId || null,\n      iconUrl: metadata.iconUrl || null,\n      name: metadata.name || null,\n      subjectType: metadata.subjectType || null\n    };\n    let originToForget = null;\n    if (this.subjectsWithoutPermissionsEncounteredSinceStartup.size >= this.subjectCacheLimit) {\n      const cachedOrigin = this.subjectsWithoutPermissionsEncounteredSinceStartup.values().next().value;\n      this.subjectsWithoutPermissionsEncounteredSinceStartup.delete(\n        cachedOrigin\n      );\n      if (!this.subjectHasPermissions(cachedOrigin)) {\n        originToForget = cachedOrigin;\n      }\n    }\n    this.subjectsWithoutPermissionsEncounteredSinceStartup.add(origin);\n    this.update((draftState) => {\n      draftState.subjectMetadata[origin] = newMetadata;\n      if (typeof originToForget === \"string\") {\n        delete draftState.subjectMetadata[originToForget];\n      }\n    });\n  }\n  /**\n   * Gets the subject metadata for the given origin, if any.\n   *\n   * @param origin - The origin for which to get the subject metadata.\n   * @returns The subject metadata, if any, or `undefined` otherwise.\n   */\n  getSubjectMetadata(origin) {\n    return this.state.subjectMetadata[origin];\n  }\n  /**\n   * Deletes all subjects without permissions from the controller's state.\n   */\n  trimMetadataState() {\n    this.update((draftState) => {\n      return _SubjectMetadataController.getTrimmedState(\n        draftState,\n        this.subjectHasPermissions\n      );\n    });\n  }\n  /**\n   * Returns a new state object that only includes subjects with permissions.\n   * This method is static because we want to call it in the constructor, before\n   * the controller's state is initialized.\n   *\n   * @param state - The state object to trim.\n   * @param hasPermissions - A function that returns a boolean indicating\n   * whether a particular subject (identified by its origin) has any\n   * permissions.\n   * @returns The new state object. If the specified `state` object has no\n   * subject metadata, the returned object will be equivalent to the default\n   * state of this controller.\n   */\n  static getTrimmedState(state, hasPermissions) {\n    const { subjectMetadata = {} } = state;\n    return {\n      subjectMetadata: Object.keys(subjectMetadata).reduce((newSubjectMetadata, origin) => {\n        if (hasPermissions(origin)) {\n          newSubjectMetadata[origin] = subjectMetadata[origin];\n        }\n        return newSubjectMetadata;\n      }, {})\n    };\n  }\n};\n\n\n\n\nexports.SubjectType = SubjectType; exports.SubjectMetadataController = SubjectMetadataController;\n//# sourceMappingURL=chunk-VSDHL2GQ.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkFYADAA2Gjs = require('./chunk-FYADAA2G.js');\n\n// src/rpc-methods/revokePermissions.ts\n\n\nvar _utils = require('@metamask/utils');\nvar revokePermissionsHandler = {\n  methodNames: [\"wallet_revokePermissions\" /* RevokePermissions */],\n  implementation: revokePermissionsImplementation,\n  hookNames: {\n    revokePermissionsForOrigin: true\n  }\n};\nasync function revokePermissionsImplementation(req, res, _next, end, { revokePermissionsForOrigin }) {\n  const { params } = req;\n  const param = params?.[0];\n  if (!param) {\n    return end(_chunkFYADAA2Gjs.invalidParams.call(void 0, { data: { request: req } }));\n  }\n  const permissionKeys = Object.keys(param);\n  if (!_utils.isNonEmptyArray.call(void 0, permissionKeys)) {\n    return end(_chunkFYADAA2Gjs.invalidParams.call(void 0, { data: { request: req } }));\n  }\n  revokePermissionsForOrigin(permissionKeys);\n  res.result = null;\n  return end();\n}\n\n\n\nexports.revokePermissionsHandler = revokePermissionsHandler;\n//# sourceMappingURL=chunk-X4ZAW4QR.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\nexports.__export = __export; exports.__privateAdd = __privateAdd; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z2XKIXLS.js.map","import { cloneDeep } from 'lodash';\nimport { hasProperty, isObject } from '@metamask/utils';\nimport log from 'loglevel';\n\nexport const version = 92.1;\n\n/**\n * Check whether the `TokenListController.tokensChainsCache` state is\n * `undefined`, and delete it if so.\n *\n * This property was accidentally set to `undefined` by an earlier revision of\n * migration #77 in some cases.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (!hasProperty(state, 'TokenListController')) {\n    log.warn('Skipping migration, TokenListController state is missing');\n    return state;\n  } else if (!isObject(state.TokenListController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.TokenListController is ${typeof state.TokenListController}`,\n      ),\n    );\n    return state;\n  } else if (!hasProperty(state.TokenListController, 'tokensChainsCache')) {\n    log.warn(\n      'Skipping migration, TokenListController.tokensChainsCache state is missing',\n    );\n    return state;\n  }\n\n  if (state.TokenListController.tokensChainsCache === undefined) {\n    delete state.TokenListController.tokensChainsCache;\n  }\n\n  return state;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/Permission.ts\nvar _nanoid = require('nanoid');\nfunction constructPermission(options) {\n  const { caveats = null, invoker, target } = options;\n  return {\n    id: _nanoid.nanoid.call(void 0, ),\n    parentCapability: target,\n    invoker,\n    caveats,\n    date: (/* @__PURE__ */ new Date()).getTime()\n  };\n}\nfunction findCaveat(permission, caveatType) {\n  return permission.caveats?.find((caveat) => caveat.type === caveatType);\n}\nvar PermissionType = /* @__PURE__ */ ((PermissionType2) => {\n  PermissionType2[\"RestrictedMethod\"] = \"RestrictedMethod\";\n  PermissionType2[\"Endowment\"] = \"Endowment\";\n  return PermissionType2;\n})(PermissionType || {});\nfunction hasSpecificationType(specification, expectedType) {\n  return specification.permissionType === expectedType;\n}\n\n\n\n\n\n\nexports.constructPermission = constructPermission; exports.findCaveat = findCaveat; exports.PermissionType = PermissionType; exports.hasSpecificationType = hasSpecificationType;\n//# sourceMappingURL=chunk-ZH4MLSXX.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunk6PXDVUYMjs = require('./chunk-6PXDVUYM.js');\nrequire('./chunk-VBIZGGQL.js');\nrequire('./chunk-7A3VYLCK.js');\nrequire('./chunk-X4ZAW4QR.js');\n\n\n\nvar _chunkB6PDRQ7Njs = require('./chunk-B6PDRQ7N.js');\n\n\n\nvar _chunk3YOPLPVYjs = require('./chunk-3YOPLPVY.js');\n\n\n\n\n\nvar _chunkZH4MLSXXjs = require('./chunk-ZH4MLSXX.js');\n\n\n\nvar _chunkVSDHL2GQjs = require('./chunk-VSDHL2GQ.js');\nrequire('./chunk-F5TBMVWC.js');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _chunkFYADAA2Gjs = require('./chunk-FYADAA2G.js');\n\n\nvar _chunkVQPP5PWSjs = require('./chunk-VQPP5PWS.js');\nrequire('./chunk-Z2XKIXLS.js');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexports.CaveatAlreadyExistsError = _chunkFYADAA2Gjs.CaveatAlreadyExistsError; exports.CaveatDoesNotExistError = _chunkFYADAA2Gjs.CaveatDoesNotExistError; exports.CaveatInvalidJsonError = _chunkFYADAA2Gjs.CaveatInvalidJsonError; exports.CaveatMergeTypeMismatchError = _chunkFYADAA2Gjs.CaveatMergeTypeMismatchError; exports.CaveatMergerDoesNotExistError = _chunkFYADAA2Gjs.CaveatMergerDoesNotExistError; exports.CaveatMissingValueError = _chunkFYADAA2Gjs.CaveatMissingValueError; exports.CaveatMutatorOperation = _chunkB6PDRQ7Njs.CaveatMutatorOperation; exports.CaveatSpecificationMismatchError = _chunkFYADAA2Gjs.CaveatSpecificationMismatchError; exports.DuplicateCaveatError = _chunkFYADAA2Gjs.DuplicateCaveatError; exports.EndowmentPermissionDoesNotExistError = _chunkFYADAA2Gjs.EndowmentPermissionDoesNotExistError; exports.ForbiddenCaveatError = _chunkFYADAA2Gjs.ForbiddenCaveatError; exports.InvalidApprovedPermissionError = _chunkFYADAA2Gjs.InvalidApprovedPermissionError; exports.InvalidCaveatError = _chunkFYADAA2Gjs.InvalidCaveatError; exports.InvalidCaveatFieldsError = _chunkFYADAA2Gjs.InvalidCaveatFieldsError; exports.InvalidCaveatTypeError = _chunkFYADAA2Gjs.InvalidCaveatTypeError; exports.InvalidCaveatsPropertyError = _chunkFYADAA2Gjs.InvalidCaveatsPropertyError; exports.InvalidMergedPermissionsError = _chunkFYADAA2Gjs.InvalidMergedPermissionsError; exports.InvalidSubjectIdentifierError = _chunkFYADAA2Gjs.InvalidSubjectIdentifierError; exports.MethodNames = _chunkVQPP5PWSjs.MethodNames; exports.PermissionController = _chunkB6PDRQ7Njs.PermissionController; exports.PermissionDoesNotExistError = _chunkFYADAA2Gjs.PermissionDoesNotExistError; exports.PermissionType = _chunkZH4MLSXXjs.PermissionType; exports.PermissionsRequestNotFoundError = _chunkFYADAA2Gjs.PermissionsRequestNotFoundError; exports.SubjectMetadataController = _chunkVSDHL2GQjs.SubjectMetadataController; exports.SubjectType = _chunkVSDHL2GQjs.SubjectType; exports.UnrecognizedCaveatTypeError = _chunkFYADAA2Gjs.UnrecognizedCaveatTypeError; exports.UnrecognizedSubjectError = _chunkFYADAA2Gjs.UnrecognizedSubjectError; exports.constructPermission = _chunkZH4MLSXXjs.constructPermission; exports.decorateWithCaveats = _chunk3YOPLPVYjs.decorateWithCaveats; exports.findCaveat = _chunkZH4MLSXXjs.findCaveat; exports.hasSpecificationType = _chunkZH4MLSXXjs.hasSpecificationType; exports.internalError = _chunkFYADAA2Gjs.internalError; exports.invalidParams = _chunkFYADAA2Gjs.invalidParams; exports.isRestrictedMethodCaveatSpecification = _chunk3YOPLPVYjs.isRestrictedMethodCaveatSpecification; exports.methodNotFound = _chunkFYADAA2Gjs.methodNotFound; exports.permissionRpcMethods = _chunk6PXDVUYMjs.rpc_methods_exports; exports.unauthorized = _chunkFYADAA2Gjs.unauthorized; exports.userRejectedRequest = _chunkFYADAA2Gjs.userRejectedRequest;\n//# sourceMappingURL=index.js.map","var Writable = require('readable-stream').Writable\nvar inherits = require('inherits')\nvar bufferFrom = require('buffer-from')\n\nif (typeof Uint8Array === 'undefined') {\n  var U8 = require('typedarray').Uint8Array\n} else {\n  var U8 = Uint8Array\n}\n\nfunction ConcatStream(opts, cb) {\n  if (!(this instanceof ConcatStream)) return new ConcatStream(opts, cb)\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n  if (!opts) opts = {}\n\n  var encoding = opts.encoding\n  var shouldInferEncoding = false\n\n  if (!encoding) {\n    shouldInferEncoding = true\n  } else {\n    encoding =  String(encoding).toLowerCase()\n    if (encoding === 'u8' || encoding === 'uint8') {\n      encoding = 'uint8array'\n    }\n  }\n\n  Writable.call(this, { objectMode: true })\n\n  this.encoding = encoding\n  this.shouldInferEncoding = shouldInferEncoding\n\n  if (cb) this.on('finish', function () { cb(this.getBody()) })\n  this.body = []\n}\n\nmodule.exports = ConcatStream\ninherits(ConcatStream, Writable)\n\nConcatStream.prototype._write = function(chunk, enc, next) {\n  this.body.push(chunk)\n  next()\n}\n\nConcatStream.prototype.inferEncoding = function (buff) {\n  var firstBuffer = buff === undefined ? this.body[0] : buff;\n  if (Buffer.isBuffer(firstBuffer)) return 'buffer'\n  if (typeof Uint8Array !== 'undefined' && firstBuffer instanceof Uint8Array) return 'uint8array'\n  if (Array.isArray(firstBuffer)) return 'array'\n  if (typeof firstBuffer === 'string') return 'string'\n  if (Object.prototype.toString.call(firstBuffer) === \"[object Object]\") return 'object'\n  return 'buffer'\n}\n\nConcatStream.prototype.getBody = function () {\n  if (!this.encoding && this.body.length === 0) return []\n  if (this.shouldInferEncoding) this.encoding = this.inferEncoding()\n  if (this.encoding === 'array') return arrayConcat(this.body)\n  if (this.encoding === 'string') return stringConcat(this.body)\n  if (this.encoding === 'buffer') return bufferConcat(this.body)\n  if (this.encoding === 'uint8array') return u8Concat(this.body)\n  return this.body\n}\n\nvar isArray = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]'\n}\n\nfunction isArrayish (arr) {\n  return /Array\\]$/.test(Object.prototype.toString.call(arr))\n}\n\nfunction isBufferish (p) {\n  return typeof p === 'string' || isArrayish(p) || (p && typeof p.subarray === 'function')\n}\n\nfunction stringConcat (parts) {\n  var strings = []\n  var needsToString = false\n  for (var i = 0; i < parts.length; i++) {\n    var p = parts[i]\n    if (typeof p === 'string') {\n      strings.push(p)\n    } else if (Buffer.isBuffer(p)) {\n      strings.push(p)\n    } else if (isBufferish(p)) {\n      strings.push(bufferFrom(p))\n    } else {\n      strings.push(bufferFrom(String(p)))\n    }\n  }\n  if (Buffer.isBuffer(parts[0])) {\n    strings = Buffer.concat(strings)\n    strings = strings.toString('utf8')\n  } else {\n    strings = strings.join('')\n  }\n  return strings\n}\n\nfunction bufferConcat (parts) {\n  var bufs = []\n  for (var i = 0; i < parts.length; i++) {\n    var p = parts[i]\n    if (Buffer.isBuffer(p)) {\n      bufs.push(p)\n    } else if (isBufferish(p)) {\n      bufs.push(bufferFrom(p))\n    } else {\n      bufs.push(bufferFrom(String(p)))\n    }\n  }\n  return Buffer.concat(bufs)\n}\n\nfunction arrayConcat (parts) {\n  var res = []\n  for (var i = 0; i < parts.length; i++) {\n    res.push.apply(res, parts[i])\n  }\n  return res\n}\n\nfunction u8Concat (parts) {\n  var len = 0\n  for (var i = 0; i < parts.length; i++) {\n    if (typeof parts[i] === 'string') {\n      parts[i] = bufferFrom(parts[i])\n    }\n    len += parts[i].length\n  }\n  var u8 = new U8(len)\n  for (var i = 0, offset = 0; i < parts.length; i++) {\n    var part = parts[i]\n    for (var j = 0; j < part.length; j++) {\n      u8[offset++] = part[j]\n    }\n  }\n  return u8\n}\n","let { urlAlphabet } = require('./url-alphabet/index.cjs')\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nmodule.exports = { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nmodule.exports = { urlAlphabet }\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SnapsRegistryDatabaseStruct = exports.BlockedSnapStruct = exports.BlockReasonStruct = exports.VerifiedSnapStruct = exports.ImagePathStruct = exports.AdditionalSourceCodeStruct = exports.SupportStruct = exports.AuditStruct = exports.AuthorStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst utils_1 = require(\"@metamask/utils\");\n// For now, validate that each snap is using an NPM id.\nconst NpmIdStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Npm ID', (value) => value.startsWith('npm:'));\nconst VerifiedSnapVersionStruct = (0, superstruct_1.object)({\n    checksum: utils_1.ChecksumStruct,\n});\nexports.AuthorStruct = (0, superstruct_1.object)({\n    name: (0, superstruct_1.string)(),\n    website: (0, superstruct_1.string)(),\n});\nexports.AuditStruct = (0, superstruct_1.object)({\n    auditor: (0, superstruct_1.string)(),\n    report: (0, superstruct_1.string)(),\n});\nexports.SupportStruct = (0, superstruct_1.object)({\n    knowledgeBase: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n    faq: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n    contact: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n    keyRecovery: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n});\nexports.AdditionalSourceCodeStruct = (0, superstruct_1.object)({\n    name: (0, superstruct_1.string)(),\n    url: (0, superstruct_1.string)(),\n});\nexports.ImagePathStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /\\.\\/images\\/.*\\/\\d+\\.(?:png|jpe?g)$/u);\nexports.VerifiedSnapStruct = (0, superstruct_1.object)({\n    id: NpmIdStruct,\n    metadata: (0, superstruct_1.object)({\n        name: (0, superstruct_1.string)(),\n        type: (0, superstruct_1.optional)((0, superstruct_1.enums)(['account'])),\n        author: (0, superstruct_1.optional)(exports.AuthorStruct),\n        website: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n        onboard: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),\n        summary: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n        description: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n        audits: (0, superstruct_1.optional)((0, superstruct_1.array)(exports.AuditStruct)),\n        category: (0, superstruct_1.optional)((0, superstruct_1.enums)([\n            'interoperability',\n            'notifications',\n            'transaction insights',\n            'account management',\n        ])),\n        tags: (0, superstruct_1.optional)((0, superstruct_1.array)((0, superstruct_1.string)())),\n        support: (0, superstruct_1.optional)(exports.SupportStruct),\n        sourceCode: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n        hidden: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),\n        privateCode: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),\n        privacyPolicy: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n        termsOfUse: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n        additionalSourceCode: (0, superstruct_1.optional)((0, superstruct_1.array)(exports.AdditionalSourceCodeStruct)),\n        screenshots: (0, superstruct_1.optional)((0, superstruct_1.size)((0, superstruct_1.array)(exports.ImagePathStruct), 3, 3)),\n    }),\n    versions: (0, superstruct_1.record)(utils_1.VersionStruct, VerifiedSnapVersionStruct),\n});\nexports.BlockReasonStruct = (0, superstruct_1.object)({\n    explanation: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n    url: (0, superstruct_1.optional)((0, superstruct_1.string)()),\n});\nexports.BlockedSnapStruct = (0, superstruct_1.union)([\n    (0, superstruct_1.object)({\n        id: NpmIdStruct,\n        versionRange: utils_1.VersionRangeStruct,\n        reason: (0, superstruct_1.optional)(exports.BlockReasonStruct),\n    }),\n    (0, superstruct_1.object)({ checksum: utils_1.ChecksumStruct, reason: (0, superstruct_1.optional)(exports.BlockReasonStruct) }),\n]);\nexports.SnapsRegistryDatabaseStruct = (0, superstruct_1.object)({\n    verifiedSnaps: (0, superstruct_1.record)(NpmIdStruct, exports.VerifiedSnapStruct),\n    blockedSnaps: (0, superstruct_1.array)(exports.BlockedSnapStruct),\n});\n__exportStar(require(\"./verify\"), exports);\n//# sourceMappingURL=index.js.map","import { hasProperty } from '@metamask/utils';\nimport { captureException } from '@sentry/browser';\nimport { cloneDeep, isObject, pick } from 'lodash';\n\ntype MetaMaskState = Record<string, unknown>;\ntype VersionedState = {\n  meta: { version: number };\n  data: MetaMaskState;\n};\n\nexport const version = 92.2;\n\n/**\n * This migration removes obsolete NetworkController state properties.\n *\n * @param originalVersionedState - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedState.meta - State metadata.\n * @param originalVersionedState.meta.version - The current state version.\n * @param originalVersionedState.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned of MetaMask extension state.\n */\nexport async function migrate(\n  originalVersionedState: VersionedState,\n): Promise<VersionedState> {\n  const updatedVersionedState = cloneDeep(originalVersionedState);\n\n  updatedVersionedState.meta.version = version;\n  updatedVersionedState.data = transformState(updatedVersionedState.data);\n\n  return updatedVersionedState;\n}\n\nfunction transformState(originalState: MetaMaskState): MetaMaskState {\n  const updatedState =\n    filterOutObsoleteNetworkControllerStateProperties(originalState);\n\n  return updatedState;\n}\n\nfunction filterOutObsoleteNetworkControllerStateProperties(\n  state: MetaMaskState,\n): MetaMaskState {\n  // https://github.com/MetaMask/core/blob/%40metamask/network-controller%4010.3.1/packages/network-controller/src/NetworkController.ts#L336-L342\n  const CURRENT_NETWORK_CONTROLLER_STATE_PROPS = [\n    'networkId',\n    'networkStatus',\n    'providerConfig',\n    'networkDetails',\n    'networkConfigurations',\n  ];\n\n  if (\n    !hasProperty(state, 'NetworkController') ||\n    !isObject(state.NetworkController)\n  ) {\n    captureException(\n      `Migration ${version}: Invalid NetworkController state: ${typeof state.NetworkController}`,\n    );\n\n    return state;\n  }\n\n  const networkControllerState = state.NetworkController;\n\n  // delete network state properties that are not currently in use\n  const updatedNetworkController = pick(\n    networkControllerState,\n    CURRENT_NETWORK_CONTROLLER_STATE_PROPS,\n  );\n\n  return {\n    ...state,\n    NetworkController: updatedNetworkController,\n  };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.verify = exports.SignatureStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst utils_1 = require(\"@metamask/utils\");\nconst secp256k1_1 = require(\"@noble/curves/secp256k1\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nexports.SignatureStruct = (0, superstruct_1.object)({\n    signature: utils_1.StrictHexStruct,\n    curve: (0, superstruct_1.literal)('secp256k1'),\n    format: (0, superstruct_1.literal)('DER'),\n});\n/**\n * Verifies that the Snap Registry is properly signed using a cryptographic key.\n *\n * @param options - Parameters for signing.\n * @param options.registry - Raw text of the registry.json file.\n * @param options.signature - Hex-encoded encoded signature.\n * @param options.publicKey - Hex-encoded or Uint8Array public key to compare\n * the signature to.\n * @returns Whether the signature is valid.\n */\nfunction verify({ registry, signature, publicKey, }) {\n    (0, utils_1.assertStruct)(signature, exports.SignatureStruct, 'Invalid signature object');\n    const publicKeyBytes = (0, utils_1.hexToBytes)(publicKey);\n    return secp256k1_1.secp256k1.verify((0, utils_1.remove0x)(signature.signature), (0, sha256_1.sha256)((0, utils_1.stringToBytes)(registry)), publicKeyBytes);\n}\nexports.verify = verify;\n//# sourceMappingURL=verify.js.map","import { hasProperty, isNullOrUndefined, isObject } from '@metamask/utils';\nimport { cloneDeep } from 'lodash';\nimport log from 'loglevel';\n\ntype VersionedData = {\n  meta: { version: number };\n  data: Record<string, unknown>;\n};\n\nexport const version = 92.3;\n\n/**\n * This migration does the following:\n *\n * - Deletes currently stored advancedGasFee in preferences controller,\n * replacing the default with an empty object\n * - Sets hadAdvancedGasFeesSetPriorToMigration92_3 flag on AppStateController\n * to indicate if the user had previously had advancedGasFee set in their\n * preferences. This will be used to display a whats new entry to inform users\n * that we wiped these settings and made them apply per network.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(\n  originalVersionedData: VersionedData,\n): Promise<VersionedData> {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  migrateData(versionedData.data);\n  return versionedData;\n}\n\nfunction migrateData(state: Record<string, unknown>): void {\n  changeShapeAndRemoveOldAdvancedGasFeePreference(state);\n}\n\nfunction changeShapeAndRemoveOldAdvancedGasFeePreference(\n  state: Record<string, unknown>,\n) {\n  if (isNullOrUndefined(state.PreferencesController)) {\n    log.warn(\n      `Migration #${version}: preferences controller null or undefined, skipping migration`,\n    );\n    return;\n  }\n\n  if (\n    hasProperty(state, 'AppStateController') &&\n    isObject(state.AppStateController) &&\n    hasProperty(state, 'PreferencesController') &&\n    isObject(state.PreferencesController)\n  ) {\n    const possibleOriginalValue = state.PreferencesController?.advancedGasFee;\n\n    // Will be false if the keys set on the object are anything other than the\n    // maxBaseFee or priorityFee. Essentially if the object is already keyed\n    // by chainId it won't show as hadFeesSet.\n    const hadFeesSet =\n      isObject(possibleOriginalValue) &&\n      hasFeePreferenceKeys(possibleOriginalValue);\n\n    state.AppStateController.hadAdvancedGasFeesSetPriorToMigration92_3 =\n      hadFeesSet;\n\n    if (\n      state.PreferencesController.advancedGasFee === null ||\n      (isObject(state.PreferencesController.advancedGasFee) &&\n        hasFeePreferenceKeys(state.PreferencesController.advancedGasFee))\n    ) {\n      state.PreferencesController.advancedGasFee = {};\n    }\n  } else if (isObject(state.AppStateController) === false) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.AppStateController is ${typeof state.AppStateController}`,\n      ),\n    );\n  } else if (isObject(state.PreferencesController) === false) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.PreferencesController is ${typeof state.PreferencesController}`,\n      ),\n    );\n  }\n}\n\nfunction hasFeePreferenceKeys(objectToCheck: Record<string, unknown>): boolean {\n  const keys = Object.keys(objectToCheck);\n\n  if (keys.includes('maxBaseFee') || keys.includes('priorityFee')) {\n    return true;\n  }\n  return false;\n}\n","import { cloneDeep } from 'lodash';\nimport { hasProperty, isObject } from '@metamask/utils';\nimport log from 'loglevel';\n\nexport const version = 92;\n\n/**\n * Delete `stalelistLastFetched` and `hotlistLastFetched` to force a phishing configuration refresh\n * because the format has changed.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    hasProperty(state, 'PhishingController') &&\n    isObject(state.PhishingController)\n  ) {\n    delete state.PhishingController.stalelistLastFetched;\n    delete state.PhishingController.hotlistLastFetched;\n  } else if (hasProperty(state, 'PhishingController')) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.PhishingController is ${typeof state.PhishingController}`,\n      ),\n    );\n  } else {\n    log.warn(`typeof state.PhishingController is undefined`);\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport { hasProperty, isObject } from '@metamask/utils';\n\nexport const version = 93;\n\n/**\n * Add ticker to the providerConfig object if missing\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    hasProperty(state, 'NetworkController') &&\n    isObject(state.NetworkController) &&\n    hasProperty(state.NetworkController, 'providerConfig') &&\n    isObject(state.NetworkController.providerConfig)\n  ) {\n    const { providerConfig } = state.NetworkController;\n\n    if (providerConfig.ticker) {\n      return state;\n    }\n\n    state.NetworkController.providerConfig = {\n      ticker: 'ETH',\n      ...providerConfig,\n    };\n\n    return {\n      ...state,\n      NetworkController: state.NetworkController,\n    };\n  } else if (!isObject(state.NetworkController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController is ${typeof state.NetworkController}`,\n      ),\n    );\n  } else if (\n    isObject(state.NetworkController) &&\n    !isObject(state.NetworkController.providerConfig)\n  ) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController.providerConfig is ${typeof state\n          .NetworkController.providerConfig}`,\n      ),\n    );\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport { hasProperty, isObject } from '@metamask/utils';\nimport { NetworkStatus } from '@metamask/network-controller';\nimport { NetworkType } from '@metamask/controller-utils';\n\nexport const version = 94;\n\n/**\n * Migrate NetworkDetails & NetworkStatus state on the NetworkConroller to NetworksMetadata and add selectedNetworkClientId\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    hasProperty(state, 'NetworkController') &&\n    isObject(state.NetworkController) &&\n    hasProperty(state.NetworkController, 'providerConfig') &&\n    isObject(state.NetworkController.providerConfig) &&\n    (hasProperty(state.NetworkController.providerConfig, 'id') ||\n      (hasProperty(state.NetworkController.providerConfig, 'type') &&\n        state.NetworkController.providerConfig.type !== NetworkType.rpc))\n  ) {\n    const selectedNetworkClientId =\n      state.NetworkController.providerConfig.id ||\n      state.NetworkController.providerConfig.type;\n\n    if (\n      !selectedNetworkClientId ||\n      typeof selectedNetworkClientId !== 'string'\n    ) {\n      return state;\n    }\n\n    const networksMetadata = {\n      [selectedNetworkClientId]: {\n        EIPS: {},\n        status: NetworkStatus.Unknown,\n      },\n    };\n\n    if (\n      hasProperty(state.NetworkController, 'networkDetails') &&\n      isObject(state.NetworkController.networkDetails)\n    ) {\n      const { networkDetails } = state.NetworkController;\n\n      if (networkDetails.EIPS && isObject(networkDetails.EIPS)) {\n        networksMetadata[selectedNetworkClientId].EIPS = {\n          ...networkDetails.EIPS,\n        };\n      }\n\n      delete state.NetworkController.networkDetails;\n    }\n\n    if (\n      hasProperty(state.NetworkController, 'networkStatus') &&\n      typeof state.NetworkController.networkStatus === 'string'\n    ) {\n      networksMetadata[selectedNetworkClientId].status = state.NetworkController\n        .networkStatus as NetworkStatus;\n      delete state.NetworkController.networkStatus;\n    }\n\n    return {\n      ...state,\n      NetworkController: {\n        ...state.NetworkController,\n        networksMetadata,\n        selectedNetworkClientId,\n      },\n    };\n  } else if (!isObject(state.NetworkController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController is ${typeof state.NetworkController}`,\n      ),\n    );\n  } else if (\n    isObject(state.NetworkController) &&\n    !isObject(state.NetworkController.providerConfig)\n  ) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController.providerConfig is ${typeof state\n          .NetworkController.providerConfig}`,\n      ),\n    );\n  } else if (\n    isObject(state.NetworkController) &&\n    isObject(state.NetworkController.providerConfig)\n  ) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController.providerConfig.id is ${typeof state\n          .NetworkController.providerConfig\n          .id} and state.NetworkController.providerConfig.type is ${\n          state.NetworkController.providerConfig.type\n        }`,\n      ),\n    );\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\ntype VersionedData = {\n  meta: { version: number };\n  data: Record<string, unknown>;\n};\n\nexport const version = 95;\n\n/**\n * This migration does the following:\n *\n * - Moves any incoming transactions from the IncomingTransactionsController to the TransactionController state.\n * - Generates the new lastFetchedBlockNumbers object in the TransactionController using any existing incoming transactions.\n * - Removes the IncomingTransactionsController state.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(\n  originalVersionedData: VersionedData,\n): Promise<VersionedData> {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  migrateData(versionedData.data);\n  return versionedData;\n}\n\nfunction migrateData(state: Record<string, unknown>): void {\n  moveIncomingTransactions(state);\n  generateLastFetchedBlockNumbers(state);\n  removeIncomingTransactionsControllerState(state);\n}\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction moveIncomingTransactions(state: Record<string, any>) {\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const incomingTransactions: Record<string, any> =\n    state.IncomingTransactionsController?.incomingTransactions || {};\n\n  if (Object.keys(incomingTransactions).length === 0) {\n    return;\n  }\n\n  const transactions = state.TransactionController?.transactions || {};\n\n  const updatedTransactions = Object.values(incomingTransactions).reduce(\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (result: Record<string, any>, tx: any) => {\n      result[tx.id] = tx;\n      return result;\n    },\n    transactions,\n  );\n\n  state.TransactionController = {\n    ...(state.TransactionController || {}),\n    transactions: updatedTransactions,\n  };\n}\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction generateLastFetchedBlockNumbers(state: Record<string, any>) {\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const incomingTransactions: Record<string, any> =\n    state.IncomingTransactionsController?.incomingTransactions || {};\n\n  if (Object.keys(incomingTransactions).length === 0) {\n    return;\n  }\n\n  const lastFetchedBlockNumbers: Record<string, number> = {};\n\n  for (const tx of Object.values(incomingTransactions)) {\n    if (!tx.blockNumber || !tx.chainId || !tx.txParams.to) {\n      continue;\n    }\n\n    const txBlockNumber = parseInt(tx.blockNumber, 10);\n    const key = `${tx.chainId}#${tx.txParams.to.toLowerCase()}`;\n    const highestBlockNumber = lastFetchedBlockNumbers[key] || -1;\n\n    lastFetchedBlockNumbers[key] = Math.max(highestBlockNumber, txBlockNumber);\n  }\n\n  state.TransactionController = {\n    ...state.TransactionController,\n    lastFetchedBlockNumbers,\n  };\n}\n\nfunction removeIncomingTransactionsControllerState(\n  state: Record<string, unknown>,\n) {\n  delete state.IncomingTransactionsController;\n}\n","import { cloneDeep, fromPairs, map } from 'lodash';\nimport { hasProperty, isObject } from '@metamask/utils';\nimport { CHAIN_IDS } from '../../../shared/constants/network';\n\ntype VersionedData = {\n  meta: { version: number };\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: Record<string, any>;\n};\n\nexport const version = 96;\n\n/**\n * This migration will operate the following:\n *\n * - Delete `showIncomingTransactions` from `featureFlags` in PreferencesController\n * - Create a new object under PreferencesController named as `incomingTransactionsPreferences`\n * 1. which will collect all added networks including localhost\n * 2. then append the test networks\n * 3. each of them would become a key coming with the value Ture/False from `showIncomingTransactions`\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(\n  originalVersionedData: VersionedData,\n): Promise<VersionedData> {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  transformState(versionedData.data);\n  return versionedData;\n}\n\ntype NetworkConfiguration = {\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  chainId: Record<string, any>;\n};\n\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    !hasProperty(state, 'PreferencesController') ||\n    !isObject(state.PreferencesController) ||\n    !isObject(state.NetworkController) ||\n    !hasProperty(state.PreferencesController, 'featureFlags') ||\n    !hasProperty(state.NetworkController, 'networkConfigurations')\n  ) {\n    return state;\n  }\n  const { PreferencesController, NetworkController } = state;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { featureFlags }: Record<string, any> = PreferencesController;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { showIncomingTransactions }: any = featureFlags;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { networkConfigurations }: Record<string, any> = NetworkController;\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const addedNetwork: Record<string, any>[] =\n    Object.values<NetworkConfiguration>(networkConfigurations).map(\n      (network) => network.chainId,\n    );\n\n  const mainNetworks = [CHAIN_IDS.MAINNET, CHAIN_IDS.LINEA_MAINNET];\n  const testNetworks = [\n    CHAIN_IDS.GOERLI,\n    CHAIN_IDS.SEPOLIA,\n    CHAIN_IDS.LINEA_GOERLI,\n  ];\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const allSavedNetworks: Record<string, any> = [\n    ...mainNetworks,\n    ...addedNetwork,\n    ...testNetworks,\n  ];\n\n  const incomingTransactionsPreferences = fromPairs(\n    map(allSavedNetworks, (element) => [element, showIncomingTransactions]),\n  );\n\n  if (featureFlags?.showIncomingTransactions !== undefined) {\n    delete featureFlags.showIncomingTransactions;\n  }\n\n  state.PreferencesController.incomingTransactionsPreferences =\n    incomingTransactionsPreferences;\n\n  return state;\n}\n","import { cloneDeep, isEmpty } from 'lodash';\n\ntype VersionedData = {\n  meta: { version: number };\n  data: Record<string, unknown>;\n};\n\nexport const version = 97;\n\n/**\n * Remove `nonceDetail` from transactions\n *\n * @param originalVersionedData\n */\nexport async function migrate(\n  originalVersionedData: VersionedData,\n): Promise<VersionedData> {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  transformState(versionedData.data);\n  return versionedData;\n}\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction transformState(state: Record<string, any>) {\n  const transactionControllerState = state?.TransactionController || {};\n  const transactions = transactionControllerState?.transactions || {};\n\n  if (isEmpty(transactions)) {\n    return;\n  }\n\n  const newTxs = Object.keys(transactions).reduce((txs, txId) => {\n    const transaction = transactions[txId];\n    if (transaction?.nonceDetails) {\n      delete transaction.nonceDetails;\n    }\n    return {\n      ...txs,\n      [txId]: transaction,\n    };\n  }, {});\n\n  state.TransactionController = {\n    ...transactionControllerState,\n    transactions: newTxs,\n  };\n}\n","import { cloneDeep, isEmpty } from 'lodash';\n\ntype VersionedData = {\n  meta: { version: number };\n  data: Record<string, unknown>;\n};\n\nexport const version = 98; // Increment the version number\n\n/**\n * Add `verifiedOnBlockchain` property to transactions based on the presence of `txReceipt`\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(\n  originalVersionedData: VersionedData,\n): Promise<VersionedData> {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  transformState(versionedData.data);\n  return versionedData;\n}\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction transformState(state: Record<string, any>) {\n  const transactionControllerState = state?.TransactionController || {};\n  const transactions = transactionControllerState?.transactions || {};\n\n  if (isEmpty(transactions)) {\n    return;\n  }\n\n  const newTxs = Object.keys(transactions).reduce((txs, txId) => {\n    const transaction = transactions[txId];\n\n    // Add the `verifiedOnBlockchain` property based on the presence of `txReceipt`\n    transaction.verifiedOnBlockchain = Boolean(transaction.txReceipt);\n\n    return {\n      ...txs,\n      [txId]: transaction,\n    };\n  }, {});\n\n  state.TransactionController = {\n    ...transactionControllerState,\n    transactions: newTxs,\n  };\n}\n","import { cloneDeep, isEmpty } from 'lodash';\nimport { v1 as uuid } from 'uuid';\n\ntype VersionedData = {\n  meta: { version: number };\n  data: Record<string, unknown>;\n};\n\nexport const version = 99;\n\n/**\n * The core TransactionController uses strings for transaction IDs, specifically UUIDs generated by the uuid package.\n * For the sake of standardisation and minimising code maintenance, the use of UUIDs is preferred.\n * This migration updates the transaction IDs to UUIDs.\n *\n * @param originalVersionedData\n */\nexport async function migrate(\n  originalVersionedData: VersionedData,\n): Promise<VersionedData> {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  transformState(versionedData.data);\n  return versionedData;\n}\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction transformState(state: Record<string, any>) {\n  const transactionControllerState = state?.TransactionController || {};\n  const transactions = transactionControllerState?.transactions || {};\n\n  if (isEmpty(transactions)) {\n    return;\n  }\n\n  const newTxs = Object.keys(transactions).reduce(\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (txs: { [key: string]: any }, oldTransactionId) => {\n      // Clone the transaction\n      const transaction = cloneDeep(transactions[oldTransactionId]);\n\n      // Assign a new id to the transaction\n      const newTransactionID = uuid();\n      transaction.id = newTransactionID;\n\n      return {\n        ...txs,\n        [newTransactionID]: transaction,\n      };\n    },\n    {},\n  );\n\n  state.TransactionController = {\n    ...transactionControllerState,\n    transactions: newTxs,\n  };\n}\n","import { cloneDeep, isEmpty } from 'lodash';\n\ntype VersionedData = {\n  meta: { version: number };\n  data: Record<string, unknown>;\n};\n\nexport const version = 100;\n\n/**\n * Copy all entries from AddressBookController to NameController.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(\n  originalVersionedData: VersionedData,\n): Promise<VersionedData> {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  transformState(versionedData.data);\n  return versionedData;\n}\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction transformState(state: Record<string, any>) {\n  const addressBook = state?.AddressBookController?.addressBook ?? {};\n  const names = state?.NameController?.names?.ethereumAddress ?? {};\n\n  if (isEmpty(Object.keys(addressBook))) {\n    return;\n  }\n\n  for (const chainId of Object.keys(addressBook)) {\n    const chainAddressBook = addressBook[chainId];\n\n    for (const address of Object.keys(chainAddressBook)) {\n      const addressBookEntry = chainAddressBook[address];\n      const normalizedAddress = address.toLowerCase();\n      const nameEntry = names[normalizedAddress] ?? {};\n      const nameChainEntry = nameEntry[chainId] ?? {};\n\n      // Ignore if petname already set, or if address book entry is missing name or address.\n      if (\n        nameChainEntry.name?.length ||\n        !addressBookEntry.name?.length ||\n        !normalizedAddress?.length\n      ) {\n        continue;\n      }\n\n      names[normalizedAddress] = nameEntry;\n\n      nameEntry[chainId] = {\n        name: addressBookEntry.name,\n        sourceId: addressBookEntry.isEns ? 'ens' : null,\n        proposedNames: {},\n      };\n    }\n  }\n\n  state.NameController = {\n    ...state.NameController,\n    names: {\n      ethereumAddress: names,\n    },\n  };\n}\n","import { hasProperty, isObject } from '@metamask/utils';\nimport { cloneDeep } from 'lodash';\n\ntype VersionedData = {\n  meta: { version: number };\n  data: Record<string, unknown>;\n};\n\nexport const version = 101;\n\n/**\n * Remove network controller `networkId` state.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(\n  originalVersionedData: VersionedData,\n): Promise<VersionedData> {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    hasProperty(state, 'NetworkController') &&\n    isObject(state.NetworkController) &&\n    hasProperty(state.NetworkController, 'networkId')\n  ) {\n    const networkControllerState = state.NetworkController;\n    delete networkControllerState.networkId;\n\n    return {\n      ...state,\n      NetworkController: networkControllerState,\n    };\n  }\n  if (!isObject(state.NetworkController)) {\n    global.sentry?.captureException?.(\n      new Error(\n        `typeof state.NetworkController is ${typeof state.NetworkController}`,\n      ),\n    );\n  }\n\n  return state;\n}\n","import { cloneDeep, isEmpty } from 'lodash';\n\ntype VersionedData = {\n  meta: { version: number };\n  data: Record<string, unknown>;\n};\n\nexport const version = 102;\n\n/**\n * The core TransactionController uses `error` to log transaction error information.\n * For the sake of standardization and minimizing code maintenance, `err` is renamed as part of the unification of the Transaction Controller effort.\n * This migration adds an `error` property by copying the old `err` and deleting it afterwards.\n *\n * @param originalVersionedData\n */\nexport async function migrate(\n  originalVersionedData: VersionedData,\n): Promise<VersionedData> {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  transformState(versionedData.data);\n  return versionedData;\n}\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction transformState(state: Record<string, any>) {\n  const transactionControllerState = state?.TransactionController || {};\n  const transactions = transactionControllerState?.transactions || {};\n\n  if (isEmpty(transactions)) {\n    return;\n  }\n\n  const newTxs = Object.keys(transactions).reduce(\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (txs: { [key: string]: any }, txId) => {\n      // Clone the transaction\n      const transaction = cloneDeep(transactions[txId]);\n\n      // Check if 'err' exists before assigning it to 'error'\n      if (transaction?.err) {\n        transaction.error = transaction.err;\n        delete transaction.err;\n      }\n\n      return {\n        ...txs,\n        [txId]: transaction,\n      };\n    },\n    {},\n  );\n\n  state.TransactionController = {\n    ...transactionControllerState,\n    transactions: newTxs,\n  };\n}\n","import { hasProperty, isObject } from '@metamask/utils';\nimport { cloneDeep } from 'lodash';\nimport { LedgerTransportTypes } from '../../../shared/constants/hardware-wallets';\n\nexport const version = 103;\n\n/**\n * Sets the default ledger transport method of Ledger U2F or Ledger Live on chrome to Webhid.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    hasProperty(state, 'PreferencesController') &&\n    isObject(state.PreferencesController) &&\n    window.navigator.userAgent.includes('Chrome')\n  ) {\n    const preferencesControllerState = state.PreferencesController;\n    preferencesControllerState.ledgerTransportType =\n      LedgerTransportTypes.webhid;\n    return {\n      ...state,\n      PreferencesController: preferencesControllerState,\n    };\n  }\n\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\ntype VersionedData = {\n  meta: { version: number };\n  data: Record<string, unknown>;\n};\n\nexport const version = 104;\n\n/**\n * This migration converts the transactions object used by the extension transaction controller\n * to an array of transactions used by the core transaction controller.\n *\n * @param originalVersionedData\n */\nexport async function migrate(\n  originalVersionedData: VersionedData,\n): Promise<VersionedData> {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  transformState(versionedData.data);\n  return versionedData;\n}\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction transformState(state: Record<string, any>) {\n  const transactionControllerState = state?.TransactionController;\n\n  if (!transactionControllerState) {\n    return;\n  }\n\n  const transactionsObject = transactionControllerState?.transactions || {};\n\n  const transactionsArray = Object.values(transactionsObject).sort(\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (a: any, b: any) => (a.time > b.time ? -1 : 1), // Descending\n  );\n\n  state.TransactionController = {\n    ...transactionControllerState,\n    transactions: transactionsArray,\n  };\n}\n","import { EthAccountType, InternalAccount } from '@metamask/keyring-api';\nimport { sha256FromString } from 'ethereumjs-util';\nimport { v4 as uuid } from 'uuid';\nimport { cloneDeep } from 'lodash';\nimport { ETH_EOA_METHODS } from '../../../shared/constants/eth-methods';\n\ntype VersionedData = {\n  meta: { version: number };\n  data: Record<string, unknown>;\n};\n\ntype Identity = {\n  name: string;\n  address: string;\n  lastSelected?: number;\n};\n\nexport const version = 105;\n\n/**\n * This migration does the following:\n *\n * - Creates a default state for AccountsController.\n * - Copies identities and selectedAddress from the PreferencesController to\n * the AccountsController state as internal accounts and selectedAccount.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(\n  originalVersionedData: VersionedData,\n): Promise<VersionedData> {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  migrateData(versionedData.data);\n  return versionedData;\n}\n\nfunction migrateData(state: Record<string, unknown>): void {\n  createDefaultAccountsController(state);\n  createInternalAccountsForAccountsController(state);\n  createSelectedAccountForAccountsController(state);\n}\n\nfunction findInternalAccountByAddress(\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  state: Record<string, any>,\n  address: string,\n): InternalAccount | undefined {\n  return Object.values<InternalAccount>(\n    state.AccountsController.internalAccounts.accounts,\n  ).find(\n    (account: InternalAccount) =>\n      account.address.toLowerCase() === address.toLowerCase(),\n  );\n}\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction createDefaultAccountsController(state: Record<string, any>) {\n  state.AccountsController = {\n    internalAccounts: {\n      accounts: {},\n      selectedAccount: '',\n    },\n  };\n}\n\nfunction createInternalAccountsForAccountsController(\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  state: Record<string, any>,\n) {\n  const identities: {\n    [key: string]: Identity;\n  } = state.PreferencesController?.identities || {};\n\n  if (Object.keys(identities).length === 0) {\n    return;\n  }\n\n  const accounts: Record<string, InternalAccount> = {};\n\n  Object.values(identities).forEach((identity) => {\n    const expectedId = uuid({\n      random: sha256FromString(identity.address).slice(0, 16),\n    });\n\n    accounts[expectedId] = {\n      address: identity.address,\n      id: expectedId,\n      options: {},\n      metadata: {\n        name: identity.name,\n        lastSelected: identity.lastSelected ?? undefined,\n        importTime: 0,\n        keyring: {\n          // This is default HD Key Tree type because the keyring is encrypted\n          // during migration, the type will get updated when the during the\n          // initial updateAccounts call.\n          type: 'HD Key Tree',\n        },\n      },\n      methods: ETH_EOA_METHODS,\n      type: EthAccountType.Eoa,\n    };\n  });\n\n  state.AccountsController.internalAccounts.accounts = accounts;\n}\n\nfunction getFirstAddress(\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  state: Record<string, any>,\n) {\n  const [firstAddress] = Object.keys(\n    state.PreferencesController?.identities || {},\n  );\n  return firstAddress;\n}\n\nfunction createSelectedAccountForAccountsController(\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  state: Record<string, any>,\n) {\n  let selectedAddress = state.PreferencesController?.selectedAddress;\n\n  if (typeof selectedAddress !== 'string') {\n    global.sentry?.captureException?.(\n      new Error(\n        `state.PreferencesController?.selectedAddress is ${selectedAddress}`,\n      ),\n    );\n\n    // Get the first account if selectedAddress is not a string\n    selectedAddress = getFirstAddress(state);\n  }\n\n  const selectedAccount = findInternalAccountByAddress(state, selectedAddress);\n  if (selectedAccount) {\n    // Required in case there was no address selected\n    state.PreferencesController.selectedAddress = selectedAccount.address;\n    state.AccountsController.internalAccounts = {\n      ...state.AccountsController.internalAccounts,\n      selectedAccount: selectedAccount.id,\n    };\n  }\n}\n","import { cloneDeep } from 'lodash';\n\nexport const version = 106;\n\n/**\n * This migration set preference securityAlertsEnabled to true.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n */\nexport async function migrate(originalVersionedData) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  const state = versionedData.data;\n  const newState = transformState(state);\n  versionedData.data = newState;\n  return versionedData;\n}\n\nfunction transformState(state) {\n  const PreferencesController = state?.PreferencesController || {};\n\n  return {\n    ...state,\n    PreferencesController: {\n      ...PreferencesController,\n      securityAlertsEnabled:\n        PreferencesController.transactionSecurityCheckEnabled !== true,\n    },\n  };\n}\n","import { cloneDeep } from 'lodash';\nimport { hasProperty, isObject } from '@metamask/utils';\n\nexport const version = 107;\n\ntype AccountBalance = {\n  address: string;\n  balance: string;\n};\n\ntype AccountTrackerControllerState = {\n  accountsByChainId: Record<string, Record<string, AccountBalance>>;\n  accounts: Record<string, AccountBalance>;\n  currentBlockGasLimit: string;\n  currentBlockGasLimitByChainId: Record<string, string>;\n};\n\n/**\n * Migrates state from the now removed CachedBalancesController to the AccountTrackerController and formats it accordingly.\n *\n * @param originalVersionedData - Versioned MetaMask extension state, exactly what we persist to dist.\n * @param originalVersionedData.meta - State metadata.\n * @param originalVersionedData.meta.version - The current state version.\n * @param originalVersionedData.data - The persisted MetaMask state, keyed by controller.\n * @returns Updated versioned MetaMask extension state.\n */\nexport async function migrate(originalVersionedData: {\n  meta: { version: number };\n  data: Record<string, unknown>;\n}) {\n  const versionedData = cloneDeep(originalVersionedData);\n  versionedData.meta.version = version;\n  versionedData.data = transformState(versionedData.data);\n  return versionedData;\n}\n\nfunction transformState(state: Record<string, unknown>) {\n  if (\n    !hasProperty(state, 'CachedBalancesController') ||\n    !isObject(state.CachedBalancesController) ||\n    !hasProperty(state.CachedBalancesController, 'cachedBalances') ||\n    !isObject(state.CachedBalancesController.cachedBalances) ||\n    !hasProperty(state, 'AccountTracker') ||\n    !isObject(state.AccountTracker)\n  ) {\n    return state;\n  }\n\n  if (!state.AccountTracker.accountsByChainId) {\n    state.AccountTracker.accountsByChainId = {};\n  }\n\n  const accountTrackerControllerState =\n    state.AccountTracker as unknown as AccountTrackerControllerState;\n\n  const cachedBalances = state.CachedBalancesController\n    .cachedBalances as Record<string, Record<string, string>>;\n\n  Object.keys(cachedBalances).forEach((chainId) => {\n    if (!accountTrackerControllerState.accountsByChainId[chainId]) {\n      accountTrackerControllerState.accountsByChainId[chainId] = {};\n    }\n\n    Object.keys(cachedBalances[chainId]).forEach((accountAddress) => {\n      // if the account is already in the accountsByChainId state, don't overwrite it\n      if (\n        accountTrackerControllerState.accountsByChainId[chainId][\n          accountAddress\n        ] === undefined\n      ) {\n        const balance = cachedBalances[chainId][accountAddress];\n        accountTrackerControllerState.accountsByChainId[chainId][\n          accountAddress\n        ] = {\n          address: accountAddress,\n          balance,\n        };\n      }\n    });\n  });\n\n  delete state.CachedBalancesController;\n\n  state.AccountTracker = accountTrackerControllerState;\n\n  return state;\n}\n"]}