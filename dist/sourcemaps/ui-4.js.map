{"version":3,"sources":["ui/components/app/terms-of-use-popup/terms-of-use-popup.js","ui/components/app/transaction-activity-log/index.js","ui/components/app/transaction-activity-log/transaction-activity-log-icon/index.js","ui/components/app/transaction-activity-log/transaction-activity-log-icon/transaction-activity-log-icon.component.js","ui/components/app/transaction-activity-log/transaction-activity-log.component.js","ui/components/app/transaction-activity-log/transaction-activity-log.constants.js","ui/components/app/transaction-activity-log/transaction-activity-log.container.js","ui/components/app/transaction-activity-log/transaction-activity-log.util.js","ui/components/app/transaction-breakdown/index.js","ui/components/app/transaction-breakdown/transaction-breakdown-row/index.js","ui/components/app/transaction-breakdown/transaction-breakdown-row/transaction-breakdown-row.component.js","ui/components/app/transaction-breakdown/transaction-breakdown.component.js","ui/components/app/transaction-breakdown/transaction-breakdown.container.js","ui/components/app/transaction-icon/index.js","ui/components/app/transaction-icon/transaction-icon.js","ui/components/app/transaction-list-item-details/index.js","ui/components/app/transaction-list-item-details/transaction-list-item-details.component.js","ui/components/app/transaction-list-item-details/transaction-list-item-details.container.js","ui/components/app/transaction-list-item/index.js","ui/components/app/transaction-list-item/smart-transaction-list-item.component.js","ui/components/app/transaction-list-item/transaction-list-item.component.js","ui/components/app/transaction-list/index.js","ui/components/app/transaction-list/transaction-list.component.js","ui/components/app/transaction-status-label/transaction-status-label.js","ui/components/app/user-preferenced-currency-display/index.js","ui/components/app/user-preferenced-currency-display/user-preferenced-currency-display.component.js","ui/components/app/wallet-overview/btc-overview.tsx","ui/components/app/wallet-overview/coin-buttons.tsx","ui/components/app/wallet-overview/coin-overview.tsx","ui/components/app/wallet-overview/eth-overview.js","ui/components/app/wallet-overview/index.js","ui/components/app/wallet-overview/wallet-overview.js","ui/components/app/whats-new-popup/index.js","ui/components/app/whats-new-popup/whats-new-popup.js","ui/components/component-library/form-text-field/deprecated/form-text-field.js","ui/components/component-library/form-text-field/deprecated/index.js","ui/components/component-library/modal-content/deprecated/index.ts","ui/components/component-library/modal-content/deprecated/modal-content.tsx","ui/components/component-library/modal-header/deprecated/index.ts","ui/components/component-library/modal-header/deprecated/modal-header.tsx","ui/components/component-library/text-field-search/deprecated/index.js","ui/components/component-library/text-field-search/deprecated/text-field-search.js","ui/components/component-library/textarea/index.ts","ui/components/component-library/textarea/textarea.tsx","ui/components/component-library/textarea/textarea.types.ts","ui/components/multichain/account-details/account-details-authenticate.js","ui/components/multichain/account-details/account-details-display.js","ui/components/multichain/account-details/account-details-key.js","ui/components/multichain/account-details/account-details.js","ui/components/multichain/account-details/index.js","ui/components/multichain/account-list-item-menu/account-list-item-menu.js","ui/components/multichain/account-list-item-menu/index.js","ui/components/multichain/account-list-item/account-list-item.js","ui/components/multichain/account-list-item/account-list-item.types.js","ui/components/multichain/account-list-item/index.js","ui/components/multichain/account-list-menu/account-list-menu.tsx","ui/components/multichain/account-list-menu/hidden-account-list.js","ui/components/multichain/account-list-menu/index.js","ui/components/multichain/account-overview/account-overview-btc.tsx","ui/components/multichain/account-overview/account-overview-eth.tsx","ui/components/multichain/account-overview/account-overview-layout.tsx","ui/components/multichain/account-overview/account-overview-tabs.tsx","ui/components/multichain/account-overview/account-overview-unknown.tsx","ui/components/multichain/account-overview/account-overview.tsx","ui/components/multichain/account-overview/index.js","ui/components/multichain/account-picker/account-picker.js","ui/components/multichain/account-picker/index.js","ui/components/multichain/activity-list-item/activity-list-item.js","ui/components/multichain/activity-list-item/index.js","ui/components/multichain/address-copy-button/address-copy-button.js","ui/components/multichain/address-copy-button/index.js","ui/components/multichain/address-list-item/address-list-item.tsx","ui/components/multichain/address-list-item/index.ts","ui/components/multichain/app-header/app-header-container.tsx","ui/components/multichain/app-header/app-header-locked-content.tsx","ui/components/multichain/app-header/app-header-unlocked-content.tsx","ui/components/multichain/app-header/app-header.js","ui/components/multichain/app-header/index.js","ui/components/multichain/app-header/multichain-meta-fox-logo.js","ui/components/multichain/asset-picker-amount/asset-balance/asset-balance-text.tsx","ui/components/multichain/asset-picker-amount/asset-balance/asset-balance.tsx","ui/components/multichain/asset-picker-amount/asset-picker-amount.tsx","ui/components/multichain/asset-picker-amount/asset-picker-modal/Asset.tsx","ui/components/multichain/asset-picker-amount/asset-picker-modal/AssetList.tsx","ui/components/multichain/asset-picker-amount/asset-picker-modal/asset-picker-modal-nft-tab.tsx","ui/components/multichain/asset-picker-amount/asset-picker-modal/asset-picker-modal-search.tsx","ui/components/multichain/asset-picker-amount/asset-picker-modal/asset-picker-modal-tabs.tsx","ui/components/multichain/asset-picker-amount/asset-picker-modal/asset-picker-modal.tsx","ui/components/multichain/asset-picker-amount/asset-picker/asset-picker.tsx","ui/components/multichain/asset-picker-amount/constants.tsx","ui/components/multichain/asset-picker-amount/index.ts","ui/components/multichain/asset-picker-amount/max-clear-button.tsx","ui/components/multichain/asset-picker-amount/nft-input/nft-input.tsx","ui/components/multichain/asset-picker-amount/swappable-currency-input/swap-icon.tsx","ui/components/multichain/asset-picker-amount/swappable-currency-input/swappable-currency-input.tsx","ui/components/multichain/asset-picker-amount/utils.ts","ui/components/multichain/avatar-group/avatar-group.tsx","ui/components/multichain/avatar-group/avatar-group.types.tsx","ui/components/multichain/avatar-group/index.ts","ui/components/multichain/badge-status/badge-status.tsx","ui/components/multichain/badge-status/index.ts","ui/components/multichain/connect-accounts-modal/connect-accounts-modal-list.tsx","ui/components/multichain/connect-accounts-modal/connect-accounts-modal.tsx","ui/components/multichain/connected-accounts-menu/connected-accounts-menu.tsx","ui/components/multichain/connected-accounts-menu/index.ts","ui/components/multichain/connected-site-menu/connected-site-menu.js","ui/components/multichain/connected-site-menu/index.js","ui/components/multichain/connected-status/connected-status.tsx","ui/components/multichain/connected-status/index.ts","ui/components/multichain/create-account/create-account.tsx","ui/components/multichain/create-account/index.js","ui/components/multichain/create-eth-account/create-eth-account.js","ui/components/multichain/create-eth-account/index.js","ui/components/multichain/create-named-snap-account/create-named-snap-account.tsx","ui/components/multichain/create-named-snap-account/index.js","ui/components/multichain/detected-token-banner/detected-token-banner.js","ui/components/multichain/detected-token-banner/index.js","ui/components/multichain/disconnect-all-modal/disconnect-all-modal.tsx","ui/components/multichain/dropdown-editor/dropdown-editor.tsx","ui/components/multichain/edit-accounts-modal/edit-accounts-modal.tsx","ui/components/multichain/edit-accounts-modal/index.ts","ui/components/multichain/edit-networks-modal/edit-networks-modal.js","ui/components/multichain/edit-networks-modal/index.js","ui/components/multichain/funding-method-modal/funding-method-item.tsx","ui/components/multichain/funding-method-modal/funding-method-modal.tsx","ui/components/multichain/global-menu/global-menu.js","ui/components/multichain/global-menu/index.js","ui/components/multichain/import-account/bottom-buttons.js","ui/components/multichain/import-account/import-account.js","ui/components/multichain/import-account/index.js","ui/components/multichain/import-account/json.js","ui/components/multichain/import-account/private-key.js","ui/components/multichain/import-nfts-modal/import-nfts-modal.js","ui/components/multichain/import-nfts-modal/index.js","ui/components/multichain/import-token-link/import-token-link.tsx","ui/components/multichain/import-token-link/index.ts","ui/components/multichain/import-tokens-modal/import-tokens-modal-confirm.js","ui/components/multichain/import-tokens-modal/import-tokens-modal.js","ui/components/multichain/import-tokens-modal/index.js","ui/components/multichain/index.js","ui/components/multichain/menu-items/account-details-menu-item.js","ui/components/multichain/menu-items/index.js","ui/components/multichain/menu-items/view-explorer-menu-item.tsx","ui/components/multichain/network-list-item-menu/index.js","ui/components/multichain/network-list-item-menu/network-list-item-menu.js"],"names":["_react","e","r","__esModule","default","t","_getRequireWildcardCache","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","_interopRequireWildcard","require","_propTypes","_interopRequireDefault","_lodash","_i18n","_popover","_designSystem","_componentLibrary","_metametrics","_metametrics2","obj","WeakMap","TermsOfUsePopup","onAccept","useContext","I18nContext","trackEvent","MetaMetricsContext","isTermsOfUseChecked","setIsTermsOfUseChecked","useState","shouldShowScrollButton","setShouldShowScrollButton","popoverRef","useRef","bottomRef","createRef","handleDebouncedScroll","debounce","target","scrollHeight","scrollTop","clientHeight","useEffect","category","MetaMetricsEventCategory","Onboarding","event","MetaMetricsEventName","TermsOfUseShown","properties","location","createElement","className","onScroll","showScrollDown","title","onScrollDownButtonClick","stopPropagation","current","scrollIntoView","behavior","footerProps","justifyContent","AlignItems","center","flexDirection","FlexDirection","Column","footer","Fragment","Button","variant","BUTTON_VARIANT","PRIMARY","onClick","disabled","Text","as","marginTop","color","TextColor","textAlternative","Box","marginBottom","marginLeft","marginRight","TextVariant","bodySm","ButtonLink","href","rel","Color","primaryDefault","bodyLgMedium","Row","alignItems","flexStart","gap","Checkbox","id","isChecked","onChange","label","ref","propTypes","func","isRequired","_transactionActivityLog","_transactionActivityLogIcon","_classnames","_defineProperty","key","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","String","Number","_toPrimitive","_toPropertyKey","enumerable","configurable","writable","ACTIVITY_ICONS","exports","TRANSACTION_CREATED_EVENT","IconName","Add","TRANSACTION_SUBMITTED_EVENT","ArrowUp","TRANSACTION_RESUBMITTED_EVENT","ProgrammingArrows","TRANSACTION_CONFIRMED_EVENT","Check","TRANSACTION_DROPPED_EVENT","Close","TRANSACTION_ERRORED_EVENT","Danger","TRANSACTION_CANCEL_ATTEMPTED_EVENT","TRANSACTION_CANCEL_SUCCESS_EVENT","TransactionActivityLogIcon","PureComponent","render","eventKey","this","props","icon","Icon","name","iconDefault","size","IconSize","Sm","string","oneOf","keys","_etherscanLink","_util","_conversion","TransactionActivityLog","constructor","args","super","activity","rpcPrefs","etherscanUrl","getBlockExplorerLink","context","Transactions","link_type","action","block_explorer_domain","getURLHostName","global","platform","openTab","url","renderInlineRetry","index","inlineRetryIndex","primaryTransaction","onRetry","isEarliestNonce","status","CONFIRMED_STATUS","renderInlineCancel","inlineCancelIndex","onCancel","renderActivity","conversionRate","nativeCurrency","timestamp","ethValue","getValueFromWeiHex","fromCurrency","toCurrency","numberOfDecimals","formattedTimestamp","formatDate","activityText","handleActivityClick","activities","length","map","array","number","object","bool","TRANSACTION_UPDATED_EVENT","SUBMITTED_STATUS","DROPPED_STATUS","_reactRedux","_selectors","_metamask","_transactionActivityLog2","_transactionActivityLog3","matchesEventKey","matchEventKey","connect","state","conversionRateSelector","getNativeCurrency","getRpcPrefsForCurrentProvider","stateProps","dispatchProps","ownProps","transactionGroup","transactions","restOwnProps","combineTransactionHistories","findLastIndex","forEach","transaction","transactionActivities","getActivities","push","filteredActivities","hasConfirmedActivity","Boolean","find","addedDroppedActivity","filterSortedActivities","sort","b","_transactionController","_confirmTx","STATUS_PATH","GAS_PRICE_PATH","GAS_LIMIT_PATH","ESTIMATE_BASE_FEE_PATH","BLOCKTIMESTAMP","REPLACE_OP","eventPathsHash","statusHash","isFirstTransaction","chainId","hash","history","txParams","gas","paramsGasLimit","gasPrice","paramsGasPrice","maxPriorityFeePerGas","paramsMaxPriorityFeePerGas","txReceipt","type","estimatedBaseFee","paramsEstimatedBaseFee","paramsEip1559Price","sumHexes","cachedGasLimit","cachedGasPrice","historyActivities","reduce","acc","base","Array","isArray","time","eip1559Price","concat","events","entry","op","path","entryTimestamp","gasFee","getHexGasTotal","gasLimit","TransactionType","retry","cancel","lastEvent","lastEventKey","_base$txParams","filteredAcc","ac","Date","parseInt","getTime","_transactionBreakdown","_transactionBreakdownRow","TransactionBreakdownRow","children","divider","node","_currencyDisplay","_userPreferencedCurrencyDisplay","_hexToDecimal","_common","_common2","TransactionBreakdown","maxFeePerGas","primaryCurrency","nonce","showFiat","totalInHex","gasUsed","isTokenApprove","baseFee","priorityFee","hexGasTotal","isEIP1559Transaction","l1HexGasTotal","sourceAmountFormatted","destinationAmountFormatted","currency","denomination","EtherDenomination","GWEI","hideLabel","ETH","SECONDARY","oneOfType","_transaction","_transactionsControllerUtils","effectiveGasPrice","l1Fee","baseFeePerGas","sourceTokenAmount","rawSourceTokenAmount","sourceTokenDecimals","sourceTokenSymbol","destinationTokenAddress","destinationTokenAmount","rawDestinationTokenAmountEstimate","destinationTokenDecimals","destinationTokenSymbol","calcTokenAmount","toFixed","swapAndSend","getSwapsTokensReceivedFromTxMeta","Error","error","subtractHexes","usedGasPrice","getShouldShowFiat","_transactionIcon","_actions","ICON_MAP","TransactionGroupCategory","approval","interaction","receive","Received","send","Arrow2UpRight","signatureRequest","SecurityTick","swap","SwapHorizontal","COLOR_MAP","TransactionGroupStatus","pending","IconColor","cancelled","errorDefault","TransactionStatus","approved","dropped","failed","rejected","submitted","unapproved","BACKGROUND_COLOR_MAP","BackgroundColor","primaryMuted","errorMuted","TransactionIcon","dispatch","useDispatch","backgroundColor","AvatarIcon","iconName","AvatarIconSize","Md","captureSingleException","backgroundAlternative","confirmed","_transactionListItemDetails","_copyToClipboard","_senderToRecipient","_senderToRecipient2","_disclosure","_button","_tooltip","_cancelButton","_box","_time","_routes","_copy","TransactionListItemDetails","justCopied","isCustomNetwork","onClose","blockExplorerLink","blockExplorerUrl","NETWORKS_ROUTE","Navigation","legacy_event","setState","COPY_OPTIONS","setTimeout","SECOND","componentDidMount","recipientAddress","tryReverseResolveAddress","showSpeedUp","showRetry","recipientEns","recipientName","recipientMetadataName","senderAddress","senderNickname","recipientNickname","showCancel","transactionStatus","blockExplorerLinkText","initialTransaction","handleRetry","cancelTransaction","handleCancel","detailsModal","handleBlockExplorerClick","firstPart","wrapperClassName","containerClassName","handleCopyTxId","warnUserOnAccountMismatch","DEFAULT_VARIANT","addressOnly","senderName","onRecipientClick","onSenderClick","tokenMethodApprove","tokenMethodSetApprovalForAll","incoming","isScrollToBottomOnOpen","_redux","_reactRouterDom","_hexstringUtils","compose","withRouter","address","toChecksumHexAddress","getEnsResolutionByAddress","addressBook","getAddressBook","accounts","getInternalAccounts","getAccountName","getMetadataContractName","getNickName","contact","toLowerCase","getIsCustomNetwork","getBlockExplorerLinkText","_transactionListItem","_transactionStatusLabel","_useTransactionDisplayData","_swaps","_multichain","SmartTransactionListItem","smartTransaction","_currentChain$rpcPref","cancelSwapLinkClicked","setCancelSwapLinkClicked","showDetails","setShowDetails","isPending","useTransactionDisplayData","currentChain","useSelector","getCurrentNetwork","date","formatDateWithYearContext","displayedStatusKey","SmartTransactionStatus","startsWith","showCancelSwapLink","cancellable","toggleShowDetails","useCallback","prev","ActivityListItem","BadgeWrapper","anchorElementShape","BadgeWrapperAnchorElementShape","circular","positionObj","top","right","display","Display","Block","badge","AvatarNetwork","AvatarNetworkSize","Xs","nickname","src","imageUrl","borderWidth","borderColor","backgroundDefault","subtitle","paddingTop","uuid","preventDefault","cancelSwapsSmartTransaction","statusOnly","_useI18nContext","_useShouldShowSpeedUp","_gas","_gasFee","_transactionModal","_transactions","_advancedGasFeePopover","_cancelSpeedupPopover","_editGasFeePopover","_editGasPopover","_selectors2","_extends","assign","bind","arguments","source","apply","TransactionListItemInner","setEditGasMode","useI18nContext","useHistory","hasCancelled","showCancelEditGasPopover","setShowCancelEditGasPopover","showRetryEditGasPopover","setShowRetryEditGasPopover","supportsEIP1559","useGasFeeContext","openModal","useTransactionModalContext","testNetworkBackgroundColor","getTestNetworkBackgroundColor","isSmartTransaction","getIsSmartTransaction","retryTransaction","async","EditGasModes","speedUp","abortTransactionSigning","shouldShowSpeedUp","useShouldShowSpeedUp","secondaryCurrency","isSignatureReq","isApproval","isUnapproved","isSwap","includes","isSigning","isSubmitting","signed","CONFIRM_TRANSACTION_ROUTE","ActivityDetailsClosed","ActivityDetailsOpened","activity_type","speedUpButton","useMemo","style","width","showCancelButton","rightContent","fontWeight","FontWeight","Medium","textDefault","textAlign","TextAlign","Right","ellipsis","bodyMd","mode","TransactionListItem","editGasMode","checkNetworkAndAccountSupports1559","isLegacyTransaction","isCustodian","custodyId","GasFeeContextProvider","TransactionModalContextProvider","_transactionList","_smartTransactionListItem","_transactions2","_stringUtils","_useAccountTotalFiatBalance","_rampsCard","_ramps","_accounts","_viewExplorerMenuItem","_blockExplorer","_useMultichainSelector","PAGE_INCREMENT","tokenTransactionFilter","TOKEN_CATEGORY_HASH","getFilteredTransactionGroups","transactionGroups","hideTokenTransactions","tokenAddress","filter","isEqualCaseInsensitive","to","SWAPS_CHAINID_CONTRACT_ADDRESS_MAP","data","match","slice","getTransactionGroupRecipientAddressFilter","groupTransactionsByDate","groupedTransactions","existingGroup","group","dateMillis","TransactionList","boxProps","limit","setLimit","unfilteredPendingTransactions","nonceSortedPendingTransactionsSelector","unfilteredCompletedTransactions","nonceSortedCompletedTransactionsSelector","getCurrentChainId","selectedAccount","getSelectedAccount","shouldHideZeroBalanceTokens","getShouldHideZeroBalanceTokens","totalFiatBalance","useAccountTotalFiatBalance","balanceIsZero","showRampsCard","getIsNativeTokenBuyable","renderDateStamp","dateGroup","paddingInline","pendingTransactions","completedTransactions","viewMore","isBitcoinAccount","isSelectedInternalAccountBtc","multichainNetwork","useMultichainSelector","getMultichainNetwork","addressLink","getMultichainAccountUrl","metricsLocation","Flex","ButtonVariant","Primary","ButtonSize","endIconName","Export","openBlockExplorer","RampsCard","RAMPS_CARD_VARIANT_TYPES","ACTIVITY","_transactionGroup$ini","isIncomingTxsButToAnotherAddress","_transactionGroup$ini2","defaultProps","QUEUED_PSEUDO_STATUS","SIGNING_PSUEDO_STATUS","pendingStatusHash","statusToClassNameHash","TransactionStatusLabel","_error$rpc","statusKey","getStatusKey","tooltipText","rpc","message","statusText","position","_useUserPreferencedCurrency","UserPreferencedCurrencyDisplay","dataTestId","account","ethNumberOfDecimals","fiatNumberOfDecimals","propsNumberOfDecimals","showEthLogo","showNative","showCurrencySuffix","restProps","_currentNetwork$rpcPr2","currentNetwork","getMultichainCurrentNetwork","getMultichainNativeCurrency","useUserPreferencedCurrency","showFiatOverride","showNativeOverride","prefixComponent","_currentNetwork$rpcPr","suffix","UserPreferencedCurrencyDisplayPropTypes","prefix","hideTitle","displayValue","prefixComponentWrapperProps","textProps","suffixProps","_coinOverview","getMultichainProviderConfig","balance","getMultichainSelectedAccountCachedBalance","isBtcBuyable","getIsBitcoinBuyable","CoinOverview","balanceIsCached","isSigningEnabled","isSwapsChain","isBridgeChain","isBuyableChain","_controllerUtils","_utils","_hardware","_send","_iconButton","_useRamps","_useBridging","_receiveModal","trackingLocation","defaultSwapsToken","classPrefix","showReceiveModal","setShowReceiveModal","selectedAddress","useLocation","keyring","getCurrentKeyring","usingHardwareWallet","isHardwareKeyring","isExternalServicesEnabled","getUseExternalServices","buttonTooltips","buyButton","condition","sendButton","swapButton","bridgeButton","generateTooltip","buttonKey","contents","tooltipInfo","openBuyCryptoInPdapp","openBridgeExperience","handleSendOnClick","NavSendButtonClicked","token_symbol","text","chain_id","excludeMetaMetricsId","startNewDraftTransaction","AssetType","native","SEND_ROUTE","handleSwapOnClick","NavSwapButtonClicked","Swaps","MetaMetricsSwapsEventSource","MainView","setSwapsFromToken","openExtensionInBrowser","BUILD_QUOTE_ROUTE","handleBuyAndSellOnClick","isCaipChainId","toHex","NavBuyButtonClicked","handleBridgeOnClick","pathname","JustifyContent","spaceEvenly","PlusMinus","primaryInverse","tooltipRender","Bridge","ReceiveModal","ScanBarcode","NavReceiveButtonClicked","_ethereumjsUtil","_portfolio","_spinner","_useIsOriginalNativeTokenSymbol","_percentageAndAmountChange","_walletOverview","_coinButtons","_tokensMarketData$zer","metaMetricsId","getMetaMetricsId","isMetaMetricsEnabled","getParticipateInMetaMetrics","isMarketingEnabled","getDataCollectionForMarketing","isEvm","getMultichainIsEvm","getMultichainShouldShowFiat","useNativeCurrencyAsPrimaryCurrency","getPreferences","ticker","rpcUrl","isOriginalNativeSymbol","useIsOriginalNativeTokenSymbol","tokensMarketData","getTokensMarketData","handlePortfolioOnClick","getPortfolioUrl","PortfolioLinkClicked","showPrimaryCurrency","PercentageAndAmountChange","zeroAddress","pricePercentChange1d","buttons","_keyringApi","EthOverview","getIsBridgeChain","getSwapsDefaultToken","isEqual","isBalanceCached","getSelectedAccountCachedBalance","getSelectedInternalAccount","getIsSwapsChain","methods","EthMethod","SignTransaction","SignUserOperation","_ethOverview","_btcOverview","WalletOverview","element","_whatsNewPopup","_notifications","_locale","_useEqualityCheck","_useTheme","getActionFunctionById","NOTIFICATION_DROP_LEDGER_FIREFOX","updateViewedNotifications","renderDescription","description","piece","isLast","renderFirstNotification","notification","idRefMap","image","actionText","actionFunction","imageComponent","height","placeImageBelowDescription","ButtonPrimary","Home","WhatsNewClicked","block","renderSubsequentNotification","WhatsNewPopup","notifications","getSortedAnnouncementsToShow","locale","getCurrentLocale","theme","useTheme","seenNotifications","setSeenNotifications","memoizedNotifications","useEqualityCheck","_idRefMap","observer","window","IntersectionObserver","entries","_observer","isIntersecting","_","_ref","isSameNode","_seenNotifications","unobserve","root","threshold","values","observe","disconnect","notificationRenderers","headerProps","padding","WhatsNewViewed","number_viewed","pop","completed_all","getTranslatedUINotifications","_textField","_helpText","_label","FormTextField","autoComplete","autoFocus","defaultValue","helpText","helpTextProps","inputProps","inputRef","labelProps","startAccessory","maxLength","onBlur","onFocus","placeholder","readOnly","required","endAccessory","Size","MD","textFieldProps","truncate","Label","htmlFor","TextField","HelpText","severity","HelpTextSeverity","propName","componentName","_formTextField","_modalContent","_modalContent2","ModalContent","forwardRef","ModalContentSize","modalDialogProps","isClosedOnEscapeKey","isClosedOnOutsideClick","initialFocusRef","finalFocusRef","restoreFocus","useModalContext","modalDialogRef","handleEscKey","handleClickOutside","closest","contains","document","addEventListener","removeEventListener","ModalFocus","BlockSize","Screen","paddingRight","paddingLeft","paddingBottom","role","borderRadius","BorderRadius","LG","Full","overflowY","_modalHeader","ModalHeader","closeButtonProps","onBack","backButtonProps","HeaderBase","ButtonIcon","ArrowLeft","ariaLabel","ButtonIconSize","headingSm","Center","_textFieldSearch","TextFieldSearch","showClearButton","clearButtonOnClick","clearButtonProps","TextFieldType","Search","_props$clearButtonPro","displayName","_textarea","_textarea2","Textarea","isDisabled","resize","TextareaResize","Vertical","rows","cols","BorderColor","borderDefault","SM","_deprecated","AccountDetailsAuthenticate","setPrivateKey","setShowHoldToReveal","password","setPassword","warning","appState","onSubmit","exportAccount","then","hideWarning","catch","handleKeyPress","onKeyPress","BannerAlert","Severity","ButtonSecondary","_qrCodeView","_editableLabel","AccountDetailsDisplay","accountName","onExportClick","metadata","getInternalAccountByAddress","exportPrivateKeyFeatureEnabled","isAbleToExportAccount","deviceName","getHardwareWalletType","setAccountLabel","Accounts","AccountRenamed","account_hardware_type","Qr","ButtonSecondarySize","Lg","KeyExportSelected","key_type","MetaMetricsEventKeyType","Pkey","_lavadomeReact","_useCopyToClipboard","inTest","AccountDetailsKey","privateKey","showSelectDisableWarn","setShowDisableSelectWarn","privateKeyCopied","handlePrivateKeyCopy","useCopyToClipboard","wordBreak","LavaDome","unsafeOpenModeShadow","toLavaDomeToken","CopySuccess","Copy","_holdToRevealModal","_addressCopyButton","_accountDetailsAuthenticate","_accountDetailsDisplay","_accountDetailsKey","AccountDetails","useBlockie","getUseBlockie","getMetaMaskAccountsOrdered","showHoldToReveal","attemptingExport","setAttemptingExport","setAccountDetailsAddress","clearAccountDetails","avatar","AvatarAccount","AvatarAccountVariant","Blockies","Jazzicon","AvatarAccountSize","margin","Modal","isOpen","ModalOverlay","ModalBody","AddressCopyButton","shorten","Keys","KeyExportCanceled","onLongPressed","holdToRevealType","_accountDetails","_menu","_metrics","METRICS_LOCATION","AccountListItemMenu","anchorElement","closeMenu","isRemovable","isPinned","isHidden","accountType","formatAccountType","getAccountTypeForKeyring","pinnedAccountList","getPinnedAccountsList","hiddenAccountList","getHiddenAccountsList","lastItemRef","accountDetailsItemRef","removeAccountItemRef","removeJWTItemRef","handleKeyDown","popoverDialogRef","handleUnpinning","updatedPinnedAccountList","item","updateAccountsList","Popover","referenceElement","PopoverRole","Dialog","PopoverPosition","Bottom","offset","isPortal","preventOverflow","flip","onKeyDown","AccountDetailsMenuItem","ViewExplorerMenuItem","MenuItem","handlePinning","Unpin","Pin","updatedHiddenAccountList","updateHiddenAccountsList","handleUnhidding","handleHidding","Eye","EyeSlash","showModal","AccountRemoved","account_type","Trash","instanceOf","Element","shape","snap","enabled","_accountListItemMenu","_connectedAccountsMenu","_keyring","_useMultichainAccountTotalFiatBalance","_connectedStatus","_address","_accountListItem","AccountListItem","selected","accountsCount","connectedAvatar","menuType","AccountListItemMenuTypes","None","currentTabOrigin","isActive","onActionClick","accountOptionsMenuOpen","setAccountOptionsMenuOpen","accountListItemMenuElement","setAccountListItemMenuElement","isEvmNetwork","isTestnet","getMultichainIsTestnet","isMainnet","shouldShowFiat","showFiatInTestnets","getShowFiatInTestnets","accountTotalFiatBalances","useMultichainAccountTotalFiatBalance","mappedOrderedTokenList","orderedTokenList","avatarValue","iconUrl","balanceToTranslate","totalBalance","itemRef","_itemRef$current","_itemRef$current$scro","primaryTokenImage","getMultichainNativeCurrencyImage","currentTabIsConnectedToSelectedAddress","isAccountConnectedToCurrentTab","isConnected","isSingleAccount","transparent","marginInlineEnd","pill","ConnectedStatus","spaceBetween","bodyMdMedium","Left","flexEnd","End","shortenAddress","normalizeSafeAddress","AvatarGroup","members","AvatarToken","AvatarTokenSize","Tag","bodyXs","startIconName","KeyringType","Snaps","MoreVertical","AccountDetailMenuOpened","Account","hdKeyTree","Connection","ConnectedAccountsMenu","disableAccountSwitcher","activeTabOrigin","memo","_accountListItem2","_fuse","_deprecated2","_app","_accountWatcherSnap","_hiddenAccountList","ACTION_MODES","getActionTitle","actionMode","mergeAccounts","accountsWithBalances","internalAccounts","internalAccount","intAccount","getAccountLabel","AccountListMenu","showAccountCreation","accountListItemProps","allowedAccountTypes","EthAccountType","Eoa","Erc4337","BtcAccountType","P2wpkh","filteredAccounts","connectedSites","getConnectedSubjectsForAllAddresses","getOriginOfCurrentTab","hiddenAddresses","updatedAccountsList","getUpdatedAndSortedAccounts","filteredUpdatedAccountList","addSnapAccountEnabled","getIsAddSnapAccountEnabled","isAddWatchEthereumAccountEnabled","getIsWatchEthereumAccountEnabled","handleAddWatchAccount","AccountAddSelected","MetaMetricsEventAccountType","Snap","snap_id","ACCOUNT_WATCHER_SNAP_ID","snap_name","ACCOUNT_WATCHER_NAME","encodeURIComponent","searchQuery","setSearchQuery","setActionMode","searchResults","fuse","distance","maxPatternLength","minMatchCharLength","setCollection","search","onAccountListItemItemClicked","NavAccountSwitched","setSelectedAccount","CreateEthAccount","onActionComplete","ImportAccount","ButtonLinkSize","Default","Import","Imported","Hardware","_global$platform$open","_global$platform","getEnvironmentType","ENVIRONMENT_TYPE_POPUP","CONNECT_HARDWARE_ROUTE","textMuted","_connectedSites$accou","connectedSite","origin","hideAccountListItem","hidden","pinned","active","HiddenAccountList","_accountListMenu","mergedAccounts","filteredHiddenAccounts","showListItem","setShowListItem","TwoThirds","infoDefault","infoMuted","OneThird","ArrowDown","_accountOverviewLayout","AccountOverviewBtc","AccountOverviewLayout","showTokens","showTokensLinks","showNfts","showActivity","BtcOverview","AccountOverviewEth","_accountOverviewTabs","tabsProps","AccountOverviewTabs","_uiUtils","_nftsTab","_assetList","_tabs","onTabClick","onSupportLinkClick","defaultHomeActiveTabName","tabProps","activeClassName","getEventFromTabName","tabName","NftScreenOpened","ActivityScreenOpened","TokenScreenOpened","handleTabClick","NeedHelpButtonLink","MessageQuestion","SUPPORT_LINK","externalLink","flexGrow","Tabs","defaultActiveTabKey","tabsClassName","Tab","tabKey","onClickAsset","asset","ASSET_ROUTE","AccountOverviewUnknown","useExternalServices","setBasicFunctionalityModalOpen","BannerAlertSeverity","actionButtonLabel","actionButtonOnClick","_accountOverviewEth","_accountOverviewBtc","_accountOverviewUnknown","renderAccountOverviewOption","_accountOverview","AccountPicker","showAddress","addressProps","shortenedAddress","ButtonBase","ButtonBaseSize","endIconProps","XS","_accountPicker","topContent","midContent","primaryClassName","tabIndex","flexWrap","FlexWrap","Wrap","InlineFlex","SevenTwelfths","Normal","Min","_activityListItem","wrap","checksummedAddress","displayAddress","copied","handleCopy","MINUTE","tooltipTitle","_confusable","AddressListItem","useConfusable","overflow","_addressListItem","AppHeaderContainer","isUnlocked","popupStatus","headerBottomMargin","_metafoxLogo","AppHeaderLockedContent","networkOpenCallback","_currentNetwork$netwo","PickerNetwork","avatarNetworkProps","network","unsetIconHeight","DEFAULT_ROUTE","_webextensionPolyfill","_connectedStatusIndicator","_globalMenu","_util2","_notificationsTagCounter","AppHeaderUnlockedContent","disableNetworkPicker","disableAccountPicker","menuRef","_currentNetwork$netwo2","currentAddress","normalizedCurrentAddress","showConnectedStatus","runtime","handleMainMenuOpened","NavMainMenuOpened","toggleAccountMenu","NavAccountMenuOpened","Bold","iconAlternative","CONNECTIONS","NotificationsTagCounter","noLabel","GlobalMenu","_multichainMetaFoxLogo","_appHeaderContainer","_appHeaderUnlockedContent","_appHeaderLockedContent","AppHeader","getIsUnlocked","sendStage","getSendStage","isTransactionEditPage","SEND_STAGES","EDIT","DRAFT","ADD_RECIPIENT","isConfirmationPage","matchPath","exact","isSwapsPage","SWAPS_ROUTE","isSwapsBuildQuotePage","unapprovedTransactions","getUnapprovedTransactions","hasUnapprovedTransactions","toggleNetworkMenu","NavNetworkMenuOpened","unlockedStyling","lockStyling","MultichainMetaFoxLogo","_appHeader","balanceColor","_asset$details","_tokensWithBalances$","_asset$details2","_asset$details3","getCurrentCurrency","isFiatPrimary","getIsFiatPrimary","tokensWithBalances","_useTokenTracker","useTokenTracker","tokens","details","balanceString","hexToDecimal","balanceValue","nativeTokenFiatBalance","_useCurrencyDisplay","useCurrencyDisplay","erc20TokenFiatBalance","_useTokenFiatAmount","useTokenFiatAmount","exchangeRate","MIN_VALUE","formattedFiat","commonProps","errorText","NFT","_t","numberOfTokens","_assetBalanceText","AssetBalanceText","_send2","_useGetAssetImageUrl","_maxClearButton","_assetPicker","_swappableCurrencyInput","_assetBalance","AssetPickerAmount","amount","onAmountChange","isAmountLoading","passedError","assetPickerProps","_asset$details4","_asset$details5","_asset$details6","_asset$details7","swapQuotesError","sendAsset","receiveAsset","getCurrentDraftTransaction","isSwapsErrorShown","isMaxMode","getSendMaxModeState","isNativeSendPossible","getIsNativeSendPossible","nativeCurrencySymbol","nativeCurrencyImageUrl","getNativeCurrencyImage","tokenList","getTokenList","ipfsGateway","getIpfsGateway","isFocused","setIsFocused","isNFTInputChanged","setIsTokenInputChanged","nftImageURL","handleChange","newAmountRaw","newAmountFormatted","rawError","isLowBalanceErrorInvalid","NEGATIVE_OR_ZERO_AMOUNT_TOKENS_ERROR","borderMuted","isSwapAndSendFromNative","standardizedAsset","symbol","token","_tokenList$asset$deta","tokenId","borderStyle","BorderStyle","solid","standard","TokenStandard","ERC721","AssetPicker","SwappableCurrencyInput","assetType","AssetBalance","decimalTokenAmount","getIntlLocale","tokenData","tokenImage","_tokenListItem","TokenListItem","tokenSymbol","primary","_formatAmount","formatAmount","_bignumber","BigNumber","secondary","handleAssetChange","isTokenDisabled","selectedToken","primaryNumberOfDecimals","secondaryNumberOfDecimals","primaryCurrencyProperties","secondaryCurrencyDisplay","secondaryCurrencyProperties","_token$address","isSelected","NoWrap","marginInlineStart","isOriginalTokenSymbol","_Asset","renderSearch","collections","previouslyOwnedCollection","_useNftsCollections","useNftsCollections","collectionsKeys","collectionDataFiltered","_collection$collectio","collection","collectionName","nfts","hasAnyNfts","useNftDetection","getUseNftDetection","getIsMainnet","nftsStillFetchingIndication","getNftIsStillFetchingIndication","_nftsItems","isModal","onCloseModal","showTokenId","displayPreviouslyOwnedCollection","paddingInlineStart","paddingInlineEnd","_nftsDetectionNoticeNftsTab","_zendeskUrl","NFT_TOKENS","isNFTSearch","TextFieldSearchSize","TabName","AssetPickerModalTabs","TOKENS","visibleTabs","NFTS","header","onAssetChange","sendingAsset","_detectedTokens$chain","swapsBlockedTokens","getSwapsBlockedTokens","memoizedSwapsBlockedTokens","Set","nativeCurrencyImage","tokenConversionRates","getTokenExchangeRates","getConversionRate","currentCurrency","detectedTokens","getAllTokens","hideZeroBalanceTokens","topTokens","getTopAssets","usersTokens","uniqBy","memoizedUsersTokens","getIsDisabled","filteredTokenList","nativeToken","decimals","filteredTokens","filteredTokensAddresses","blockedTokens","tokenGenerator","_token$symbol","_token$address2","add","_useTokensToSearch","getRenderableTokenData","MAX_UNOWNED_TOKENS_RENDERED","marginInline","full","_assetPickerModalTabs","_assetPickerModalSearch","_AssetList","_assetPickerModalNftTab","AssetPickerModalNftTab","showAssetPickerModal","setShowAssetPickerModal","isNFT","isSymbolLong","_constants","LARGE_SYMBOL_LENGTH","formattedSymbol","substring","_assetPickerModal","AssetPickerModal","InlineBlock","ELLIPSIFY_LENGTH","ellipsify","_assetPickerAmount","maxModeOn","sendAnalytics","getSendAnalyticProperties","toggleSendMaxMode","integerValue","_unitInput","isFocusOnInput","step","min","newValueAsString","newValue","_Numeric","Numeric","isInteger","toNumber","toPrefixedHexString","keyPressRegex","NUMBERS_REGEX","SwapVertical","isSetToMax","TokenComponent","_currencyInput","isFiatPreferred","hexValue","swapIcon","_swapIcon","onPreferenceToggle","toggleCurrencySwitch","isSkeleton","isMatchingUpstream","NFTComponent","_nftInput","NFTInput","_reselect","createSelector","metamask","preferences","sendInputCurrencySwitched","React","_avatarGroup","avatarType","AvatarType","TOKEN","membersCount","visibleMembers","reverse","showTag","marginLeftValue","tagValue","toLocaleString","member","BadgeStatus","badgeBackgroundColor","badgeBorderColor","isConnectedAndNotActive","bottom","_badgeStatus","ConnectAccountsModalList","allAreSelected","deselectAll","selectAll","handleAccountClick","selectedAccounts","checked","isIndeterminate","onAccountsUpdate","html","getURLHost","Info","iconMuted","isSelectedAccount","ModalFooter","addMorePermittedAccounts","ButtonPrimarySize","_connectAccountsModalList","ConnectAccountsModal","getUnconnectedAccounts","isEvmAccountType","setSelectedAccounts","newSelectedAccounts","indexOf","_item","idx","_permissionDetailsModal","TsMenuItem","showPermissionModal","setShowPermissionModal","permissions","getPermissionsForActiveTab","_popoverDialogRef$cur","Logout","iconColor","removePermittedAccount","PermissionDetailsModal","_connectedSites","ConnectedSiteMenu","globalMenuColor","connectedSubjectsMetadata","getSubjectMetadata","isConnectedtoOtherAccountOrSnap","STATUS_CONNECTED_TO_ANOTHER_ACCOUNT","STATUS_CONNECTED_TO_SNAP","STATUS_NOT_CONNECTED","zIndex","successDefault","AvatarFavicon","Global","_connectedSiteMenu","STATUS_CONNECTED","connectedAndNotActive","_history","CreateAccount","getNextAvailableAccountName","onCreateAccount","mostRecentOverviewPage","getMostRecentOverviewPage","defaultAccountName","setDefaultAccountName","newAccountName","setNewAccountName","trimmedAccountName","trim","isValidAccountName","errorMessage","getAccountNameErrorMessage","AccountAdded","AccountAddFailed","FormTextFieldSize","_createAccount","_keyringController","newAccountAddress","addNewAccount","KeyringTypes","hd","_createEthAccount","CreateNamedSnapAccount","snapSuggestedAccountName","rejectAction","success","completed","getNextAccountName","candidateName","isNameTaken","some","_createNamedSnapAccount","DetectedTokensBanner","getDetectedTokensInCurrentNetwork","detectedTokensDetails","TokenImportClicked","Wallet","source_connection_method","MetaMetricsTokenEventSource","Detected","_detectedTokenBanner","DisconnectType","DisconnectAllModal","hostname","danger","DropdownEditorStyle","DropdownEditor","items","selectedItemIndex","addButtonText","onItemSelected","onItemDeleted","onItemAdd","onDropdownOpened","itemKey","itemIsDeletable","renderItem","renderTooltip","buttonDataTestId","dropdown","isDropdownOpen","setIsDropdownOpen","renderDropdownList","row","newSelectedIndex","tooltip","bodySmMedium","selectedItem","box","Input","PopoverStyle","matchWidth","onClickOutside","defaultAllowedAccountTypes","EditAccountsModal","console","log","_editAccountsModal","_network","EditNetworksModal","networkConfigurations","getNetworkConfigurationsByChainId","nonTestNetworks","testNetworks","nonTestNetworksList","testNetworksList","TEST_CHAINS","NetworkListItem","iconSrc","CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP","showEndAccessory","_editNetworksModal","_fundingMethodItem","FundingMethodModal","onClickReceive","accountAddress","getMultichainDefaultToken","handleTransferCryptoClick","RampsMetaMaskEntry","TokensBanner","handleBuyCryptoClick","Card","Link","_useCounter","_NewFeatureTag","_metamaskNotifications","_profileSyncing","basicFunctionality","notificationsUnreadCount","useUnreadNotificationsCounter","notificationsReadCount","useReadNotificationsCounter","isMetamaskNotificationFeatureSeen","selectIsMetamaskNotificationsFeatureSeen","isMetamaskNotificationsEnabled","selectIsMetamaskNotificationsEnabled","isProfileSyncingEnabled","selectIsProfileSyncingEnabled","hasNotifySnaps","snapsUpdatesAvailable","getAnySnapUpdateAvailable","getNotifySnaps","supportText","supportLink","lastItem","shiftKey","onPressEscKey","minWidth","none","BottomEnd","Notification","NotificationsActivationFlow","NotificationsActivated","action_type","is_profile_syncing_enabled","showConfirmTurnOnMetamaskNotifications","NotificationInteraction","NotificationsMenuOpened","unread_count","read_count","NOTIFICATIONS_ROUTE","handleNotificationsClick","NewFeatureTag","borderBottomWidth","PERMISSIONS","NavPermissionsOpened","ENVIRONMENT_TYPE_FULLSCREEN","Expand","AppWindowExpanded","SNAPS_ROUTE","showInfoDot","SupportLinkClicked","contextPropsIntoEventProperties","MetaMetricsContextProp","PageTitle","Setting","SETTINGS_ROUTE","NavSettingsOpened","Lock","lockMetamask","AppLocked","actions","BottomButtons","importAccountFunc","isPrimaryDisabled","_dropdown","_json","_privateKey","menuItems","setType","importAccount","strategy","importArgs","loadingMessage","ThreeFourths","getLoadingMessage","importNewAccount","displayWarning","trackImportEvent","wasSuccessful","accountImportType","MetaMetricsEventAccountImportType","PrivateKey","Json","account_import_type","inherit","IMPORTED_ACCOUNTS","options","selectedOption","_importAccount","_reactSimpleFileInput","_bottomButtons","JsonImportSubview","fileContents","setFileContents","_importAccountFunc","readAs","onLoad","result","fontSize","TextFieldSize","Password","_showHideToggle","PrivateKeyImportView","showPrivateKey","setShowPrivateKey","shown","ariaLabelShown","ariaLabelHidden","_nftsDetectionNoticeImportNfts","_deprecated3","ImportNftsModal","isDisplayNFTMediaToggleEnabled","getOpenSeaEnabled","nftsDropdownState","getNftsDropdownState","initialTokenAddress","initialTokenId","ignoreErc20Token","importNftsModal","existingNfts","nftAddress","setNftAddress","setTokenId","setDisabled","nftAddFailed","setNftAddFailed","nftAddressValidationError","setNftAddressValidationError","duplicateTokenIdError","setDuplicateTokenIdError","onActionButtonClick","val","isValidHexAddress","tokenIdExists","checkTokenIdExists","isNaN","validateAndSetTokenId","_nftsDropdownState$se","addNftVerifyOwnership","newNftDropdownState","updateNftDropDownState","setNewNftAddedMessage","ignoreTokens","tokensToIgnore","dontShowLoadingIndicator","tokenDetails","getTokenStandardAndDetails","toString","TokenAdded","sensitiveProperties","token_contract_address","asset_type","token_standard","Custom","handleAddNft","_importNftsModal","ImportTokenLink","isTokenDetectionSupported","getIsTokenDetectionSupported","isTokenDetectionInactiveOnMainnet","getIsTokenDetectionInactiveOnMainnet","isTokenDetectionAvailable","showImportTokensModal","TokenImportButtonClicked","charAt","toUpperCase","Refresh","detectTokens","_importTokenLink","_tokenBalance","ImportTokensModalConfirm","pendingTokens","getPendingTokens","_tokenList$address$to","font","_tokenTrackerLink","_tokenSearch","_tokenList","_tokens","_tokenUtil","_importTokensModalConfirm","ImportTokensModal","setMode","tokenSelectorError","setTokenSelectorError","selectedTokens","setSelectedTokens","setSearchResults","showSearchTab","useTokenDetection","networkName","getTokenDetectionSupportNetworkByChainId","tokenDetectionInactiveOnNonMainnetSupportedNetwork","getIstokenDetectionInactiveOnNonMainnetSupportedNetwork","isDynamicTokenListAvailable","getIsDynamicTokenListAvailable","contractExchangeRates","customAddress","setCustomAddress","customAddressError","setCustomAddressError","nftAddressError","setNftAddressError","decimalAutoFilled","setDecimalAutoFilled","mainnetTokenWarning","setMainnetTokenWarning","customSymbol","setCustomSymbol","customName","setCustomName","customSymbolError","setCustomSymbolError","customDecimals","setCustomDecimals","customDecimalsError","setCustomDecimalsError","tokenStandard","setTokenStandard","showSymbolAndDecimals","setShowSymbolAndDecimals","blockExplorerTokenLink","getTokenTrackerLink","blockExplorerLabel","infoGetter","tokenInfoGetter","networkClientId","getSelectedNetworkClientId","handleAddTokens","addedTokenValues","addImportedTokens","pendingToken","token_decimal_precision","unlisted","isCustom","List","ERC20","tokenSymbols","setNewTokensImported","join","clearPendingTokens","hideImportTokensModal","err","setNewTokensImportedError","pendingTokenKeys","initialSelectedTokens","initialCustomToken","handleCustomSymbolChange","symbolLength","symbolError","handleCustomDecimalsChange","decimalsError","hasError","hasSelected","handleCustomAddressChange","addressIsValid","allowNonPrefixed","standardAddress","addHexPrefix","isMainnetToken","STATIC_MAINNET_TOKEN_LIST","addressIsEmpty","ERC1155","showImportNftsModal","checkExistingAddresses","attemptToAutoFillTokenParams","isConfirming","buttonClassName","SECURITY_ROUTE","searchClassName","onSearch","results","onToggleToken","selectedTokensCopy","handleToggleToken","Warning","TOKEN_SAFETY_PRACTICES","max","tokenAddressList","customToken","setPendingTokens","tempTokensToAdd","tmpTokensToDispatch","elm","tokenAddresses","fetchTokenExchangeRates","setConfirmationExchangeRates","handleNext","_importTokensModal","_networkListItem","_networkListMenu","_productTourPopover","_menuItems","_notificationListItem","_notificationListItemIcon","_notificationListItemText","_notificationDetail","_notificationDetailAddress","_notificationDetailAsset","_notificationDetailCollection","_notificationDetailCopyButton","_notificationDetailNetworkFee","_notificationDetailInfo","_notificationDetailNft","_notificationDetailTitle","_notificationDetailButton","_notificationDetailBlockExplorerButton","_notificationsPage","_notificationsSettingsBox","_notificationsSettingsType","_notificationsSettingsAccount","_notificationListItemSnap","_toast","LABEL","AccountDetailsOpened","_accountDetailsMenuItem","ExternalLinkClicked","MetaMetricsEventLinkType","AccountTracker","url_domain","parseCaipChainId","reference","getMultichainBlockExplorerUrl","blockExplorerUrlSubTitle","BlockExplorerLinkClicked","_networkListItemMenu","NetworkListItemMenu","onEditClick","onDeleteClick","Edit"],"mappings":"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","file":"../metamask/ui-4.js","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\nimport { I18nContext } from '../../../contexts/i18n';\nimport Popover from '../../ui/popover';\nimport {\n  AlignItems,\n  TextVariant,\n  Color,\n  TextColor,\n  FlexDirection,\n} from '../../../helpers/constants/design-system';\nimport {\n  Box,\n  Button,\n  BUTTON_VARIANT,\n  ButtonLink,\n  Checkbox,\n  Text,\n} from '../../component-library';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\n\nexport default function TermsOfUsePopup({ onAccept }) {\n  const t = useContext(I18nContext);\n  const trackEvent = useContext(MetaMetricsContext);\n  const [isTermsOfUseChecked, setIsTermsOfUseChecked] = useState(false);\n  const [shouldShowScrollButton, setShouldShowScrollButton] = useState(true);\n\n  const popoverRef = useRef();\n  const bottomRef = React.createRef();\n\n  const handleScrollDownClick = (e) => {\n    e.stopPropagation();\n    bottomRef.current.scrollIntoView({\n      behavior: 'smooth',\n    });\n  };\n\n  const handleDebouncedScroll = debounce((target) => {\n    setShouldShowScrollButton(\n      target.scrollHeight - target.scrollTop !== target.clientHeight,\n    );\n  }, 100);\n\n  const handleScroll = (e) => {\n    handleDebouncedScroll(e.target);\n  };\n\n  useEffect(() => {\n    trackEvent({\n      category: MetaMetricsEventCategory.Onboarding,\n      event: MetaMetricsEventName.TermsOfUseShown,\n      properties: {\n        location: 'Terms Of Use Popover',\n      },\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Popover\n      className=\"terms-of-use__popover\"\n      popoverRef={popoverRef}\n      onScroll={handleScroll}\n      showScrollDown={shouldShowScrollButton}\n      title={t('termsOfUseTitle')}\n      onScrollDownButtonClick={handleScrollDownClick}\n      footerProps={{\n        justifyContent: AlignItems.center,\n        flexDirection: FlexDirection.Column,\n      }}\n      footer={\n        <>\n          <Button\n            variant={BUTTON_VARIANT.PRIMARY}\n            className=\"terms-of-use__button\"\n            onClick={onAccept}\n            disabled={!isTermsOfUseChecked}\n            data-testid=\"terms-of-use-accept-button\"\n          >\n            {t('accept')}\n          </Button>\n          <Text\n            as=\"p\"\n            marginTop={4}\n            className=\"terms-of-use__footer-text\"\n            color={TextColor.textAlternative}\n          >\n            {t('termsOfUseFooterText')}\n          </Text>\n        </>\n      }\n    >\n      <Box className=\"terms-of-use\">\n        <Box\n          className=\"terms-of-use__content\"\n          marginBottom={4}\n          marginLeft={4}\n          marginRight={4}\n        >\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            IMPORTANT NOTICE: THIS AGREEMENT IS SUBJECT TO BINDING ARBITRATION\n            AND A WAIVER OF CLASS ACTION RIGHTS AS DETAILED IN SECTION 11.\n            PLEASE READ THE AGREEMENT CAREFULLY.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            ConsenSys Software Inc. (“ConsenSys,” “we,” “us,” or “our”) is the\n            leading blockchain software development company. With a focus on\n            utilizing decentralized technologies, such as Ethereum, our software\n            is powering a revolution in commerce and finance and helping to\n            optimize business processes. ConsenSys hosts a top level domain\n            website, www.consensys.io, that serves information regarding\n            ConsenSys and our Offerings, as defined below, as well as\n            sub-domains for our products or services (the top level domain with\n            the sub-domains collectively referred to as the “Site”), which\n            include text, images, audio, code and other materials or third party\n            information.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            These Terms of Use (the “Terms,” “Terms of Use” or “Agreement”)\n            contain the terms and conditions that govern your access to and use\n            of the Site and Offerings provided by us and is an agreement between\n            us and you or the entity you represent (“you” or “your”). Please\n            read these Terms of Use carefully before using the Site or\n            Offerings. By using the Site, clicking a button or checkbox to\n            accept or agree to these Terms where that option is made available,\n            clicking a button to use or access any of the Offerings, completing\n            an Order, or,&nbsp; if earlier, using or otherwise accessing the\n            Offerings (the date on which any of the events listed above occur\n            being the “Effective Date”), you (1) accept and agree to these Terms\n            and any additional terms, rules and conditions of participation\n            issued by ConsenSys from time to time and (2) consent to the\n            collection, use, disclosure and other handling of information as\n            described in our{' '}\n            <ButtonLink\n              href=\"https://consensys.io/privacy-policy/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              color={Color.primaryDefault}\n              variant={TextVariant.bodySm}\n            >\n              Privacy Policy.\n            </ButtonLink>{' '}\n            If you do not agree to the Terms or perform any and all obligations\n            you accept under the Terms, then you may not access or use the\n            Offerings.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            You represent to us that you are lawfully able to enter into\n            contracts. If you are entering into this Agreement for an entity,\n            such as the company you work for, you represent to us that you have\n            legal authority to bind that entity. Please see Section 13 for\n            definitions of certain capitalized terms used in this Agreement.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            In addition, you represent to us that you and your financial\n            institutions, or any party that owns or controls you or your\n            financial institutions, are (1) not subject to sanctions or\n            otherwise designated on any list of prohibited or restricted\n            parties, including but not limited to the lists maintained by the\n            United Nations Security Council, the U.S. Government (i.e., the\n            Specially Designated Nationals List and Foreign Sanctions Evaders\n            List of the U.S. Department of Treasury and the Entity List of the\n            U.S. Department of Commerce), the European Union or its Member\n            States, or other applicable government authority and (2) not located\n            in any country subject to a comprehensive sanctions program\n            implemented by the United States.\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            1. The Offerings.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            1.1 Generally. You may access and use the Offerings in accordance\n            with this Agreement. You agree to comply with the terms of this\n            Agreement and all laws, rules and regulations applicable to your use\n            of the Offerings.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            1.2 Offerings and Access. ConsenSys offers a number of products and\n            services, each an “Offering”, under the ConsenSys brand or brands\n            owned by us. These include Codefi, Quorum, Infura, MetaMask and\n            others. Offerings are generally accessed through the Site or through\n            a third party provider of which we approved, such as the Google Play\n            or Apple App Store, unless otherwise agreed in writing. Some\n            Offerings may require you to create an account, enter a valid form\n            of payment, and select a paid plan (a “Paid Plan”), or initiate an\n            Order.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            1.3 Third-Party Content. In certain Offerings, Third-Party Content\n            may be used by you at your election. Third-Party Content is governed\n            by this Agreement and, if applicable, separate terms and conditions\n            accompanying such Third-Party Content, which terms and conditions\n            may include separate fees and charges.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            1.4 Third-Party Offerings. When you use our Offerings, you may also\n            be using the products or services of one or more third parties. Your\n            use of these third party offerings may be subject to the separate\n            policies, terms of use, and fees of these third parties.\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            2. Changes.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            2.1 To the Offerings. We may change or discontinue any or all of the\n            Offerings or change or remove functionality of any or all of the\n            Offerings from time to time. We will use commercially reasonable\n            efforts to communicate to you any material change or discontinuation\n            of an Offering through the Site or public communication\n            channels.&nbsp; If you are on a Paid Plan, we will use commercially\n            reasonable efforts to communicate to you&nbsp; any material changes\n            to or discontinuation of the Offering at least 30 days in advance of\n            such change, and we will use commercially reasonable efforts to\n            continue supporting the previous version of the Offering for up to\n            three months after the change or discontinuation, except if doing so\n            (a) would pose an information security or intellectual property\n            issue, (b) is economically or technically burdensome, or (c) would\n            create undue risk of us violating the law.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            2.2 To this Agreement. We reserve the right, at our sole discretion,\n            to modify or replace any part of this Agreement or any Policies at\n            any time. It is your responsibility to check this Agreement\n            periodically for changes, but we will also use commercially\n            reasonable efforts to communicate any material changes to this\n            Agreement through the Site or other public channels. Your continued\n            use of or access to the Offerings following the posting of any\n            changes to this Agreement constitutes acceptance of those changes.\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            3. Your Responsibilities.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            3.1 Your Accounts.&nbsp; For those Offerings that require an\n            account, and except to the extent caused by our breach of this\n            Agreement, (a) you are responsible for all activities that occur\n            under your account, regardless of whether the activities are\n            authorized by you or undertaken by you, your employees or a third\n            party (including your contractors, agents or other End Users), and\n            (b) we and our affiliates are not responsible for unauthorized\n            access to your account, including any access that occurred as a\n            result of fraud, phishing, or other criminal activity perpetrated by\n            third parties.&nbsp;&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            3.2 Your Use. You are responsible for all activities that occur\n            through your use of those Offerings that do not require an account,\n            except to the extent caused by our breach of this Agreement,\n            regardless of whether the activities are authorized by you or\n            undertaken by you, your employees or a third party (including your\n            contractors, agents or other End Users).&nbsp; We and our affiliates\n            are not responsible for unauthorized access that may occur during\n            your use of the Offerings, including any access that occurred as a\n            result of fraud, phishing, or other criminal activity perpetrated by\n            third parties.&nbsp; You will ensure that your use of the Offerings\n            does not violate any applicable law.&nbsp;&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            3.3 Your Security and Backup. You are solely responsible for\n            properly configuring and using the Offerings and otherwise taking\n            appropriate action to secure, protect and backup your accounts\n            and/or Your Content in a manner that will provide appropriate\n            security and protection, which might include use of\n            encryption.&nbsp; This includes your obligation under this Agreement\n            to record and securely maintain any passwords or backup security\n            phrases (i.e. “seed” phrases) that relate to your use of the\n            Offerings. You acknowledge that you will not share with us nor any\n            other third party any password or backup/seed phrase that relates to\n            your use of the Offerings, and that we will not be held responsible\n            if you do share any such phrase or password.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            3.4 Log-In Credentials and API Authentication. To the extent we\n            provide you with log-in credentials and API authentication generated\n            by the Offerings, such log-in credentials and API authentication are\n            for your use only and you will not sell, transfer or sublicense them\n            to any other entity or person, except that you may disclose your\n            password or private key to your agents and subcontractors performing\n            work on your behalf.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            3.5 Applicability to MetaMask Offerings. For the avoidance of doubt,\n            the terms of this Section 3 are applicable to all Offerings,\n            including MetaMask and any accounts you create through MetaMask with\n            Third Party Offerings, such as decentralized applications, or\n            blockchain-based accounts themselves.\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            4. Fees and Payment.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            4.1 Publicly Available Offerings. Some Offerings may be offered to\n            the public and licensed on a royalty free basis, including Offerings\n            that require a Paid Plan for software licensing fees above a certain\n            threshold of use.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            4.2 Offering Fees.&nbsp; If your use of an Offering does not require\n            an Order or Paid Plan but software licensing fees are charged\n            contemporaneously with your use of the Offering, those fees will be\n            charged as described on the Site or in the user interface of the\n            Offering.&nbsp; Such fees may be calculated by combining a fee\n            charged by us and a fee charged by a Third Party Offering that\n            provides certain functionality related to the Offering.&nbsp; For\n            those Offerings which entail an Order or Paid Plan, we calculate and\n            bill fees and charges according to your Order or Paid Plan. For such\n            Offerings, on the first day of each billing period, you will pay us\n            the applicable fees (the “Base Fees”) and any applicable taxes based\n            on the Offerings in the Paid Plan. In addition, we may, for\n            particular Orders, issue an invoice to you for all charges above the\n            applicable threshold for your Paid Plan which constitute overage\n            fees for the previous billing period. If you make any other changes\n            to the Offerings during a billing period (e.g. upgrading or\n            downgrading your Paid Plan), we will apply any additional charges or\n            credits to the next billing period. We may bill you more frequently\n            for fees accrued at our discretion upon notice to you.&nbsp; You\n            will pay all fees in U.S. dollars unless the particular Offering\n            specifies a different form of payment or otherwise agreed to in\n            writing. All amounts payable by you under this Agreement will be\n            paid to us without setoff or counterclaim, and without any deduction\n            or withholding. Fees and charges for any new Offering or new feature\n            of an Offering will be effective when we use commercially reasonable\n            efforts to communicate updated fees and charges through our Site or\n            other public channels or, if you are on a Paid Plan, upon\n            commercially reasonable efforts to notify you, unless we expressly\n            state otherwise in a notice. We may increase or add new fees and\n            charges for any existing Offerings you are using by using\n            commercially reasonable efforts to notify users of the Offerings\n            through our Site or other public channels or, if you are on a Paid\n            Plan, by giving you at least 30 days’ prior notice.&nbsp; Unless\n            otherwise specified in an Order, if you are on a Paid Plan, all\n            amounts due under this Agreement are payable within thirty (30) days\n            following receipt of your invoice.&nbsp; We may elect to charge you\n            interest at the rate of 1.5% per month (or the highest rate\n            permitted by law, if less) on all late payments.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            4.3 Taxes. Each party will be responsible, as required under\n            applicable law, for identifying and paying all taxes and other\n            governmental fees and charges (and any penalties, interest, and\n            other additions thereto) that are imposed on that party upon or with\n            respect to the transactions and payments under this Agreement. All\n            fees payable by you are exclusive taxes unless otherwise noted. We\n            reserve the right to withhold taxes where required.\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            5. Temporary Suspension; Limiting API Requests.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            5.1 Generally. We may suspend your right to access or use any\n            portion or all of the Offerings immediately if we determine:\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (a) your use of the Offerings (i) poses a security risk to the\n            Offerings or any third party, (ii) could adversely impact our\n            systems, the Offerings or the systems of any other user, (iii) could\n            subject us, our affiliates, or any third party to liability, or (iv)\n            could be unlawful;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (b) you are, or any End User is, in breach of this Agreement;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (c) you are in breach of your payment obligations under Section 4\n            and such breach continues for 30 days or longer; or\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (d) for entities, you have ceased to operate in the ordinary course,\n            made an assignment for the benefit of creditors or similar\n            disposition of your assets, or become the subject of any bankruptcy,\n            reorganization, liquidation, dissolution or similar proceeding.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            5.2 Effect of Suspension. If we suspend your right to access or use\n            any portion or all of the Offerings:\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (a) you remain responsible for all fees and charges you incur during\n            the period of suspension; and\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (b) you will not be entitled to any fee credits for any period of\n            suspension.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            5.3 Limiting API Requests. If applicable to a particular Offering,\n            we retain sole discretion to limit your usage of the Offerings\n            (including without limitation by limiting the number of API requests\n            you may submit (“API Requests”)) at any time if your usage of the\n            Offerings exceeds the usage threshold specified in your Paid\n            Plan.&nbsp;&nbsp;&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            6. Term; Termination.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            6.1 Term. For Offerings subject to a Paid Plan, the term of this\n            Agreement will commence on the Effective Date and will remain in\n            effect until terminated under this Section 6. Any notice of\n            termination of this Agreement by either party to the other must\n            include a Termination Date that complies with the notice periods in\n            Section 6.2.&nbsp; For Offerings that are not subject to a Paid\n            Plan, the term of this Agreement will commence on the Effective Date\n            and will remain in effect until you stop accessing or using the\n            Offerings.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            6.2 Termination.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (a) Termination for Convenience. If you are not on a Paid Plan, you\n            may terminate this Agreement for any reason by ceasing use of the\n            Offering. If you are on a Paid Plan, each party may terminate this\n            Agreement for any reason by giving the other party at least 30 days’\n            written notice, subject to the provisions in Section 6.2(b).\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (b) Termination for Cause.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (i) By Either Party. Either party may terminate this Agreement for\n            cause if the other party is in material breach of this Agreement and\n            the material breach remains uncured for a period of 30 days from\n            receipt of notice by the other party.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (ii) By Us. We may also terminate this Agreement immediately (A) for\n            cause if we have the right to suspend under Section 5, (B) if our\n            relationship with a third-party partner who provides software or\n            other technology we use to provide the Offerings expires, terminates\n            or requires us to change the way we provide the software or other\n            technology as part of the Offerings, or (C) in order to avoid undue\n            risk of violating the law.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            6.3 Effect of Termination. Upon the Termination Date:\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (i) all your rights under this Agreement immediately terminate; and\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (ii) each party remains responsible for all fees and charges it has\n            incurred through the Termination Date and are responsible for any\n            fees and charges it incurs during the post-termination period;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (iii) the terms and conditions of this Agreement shall survive the\n            expiration or termination of this Agreement to the full extent\n            necessary for their enforcement and for the protection of the party\n            in whose favor they operate.&nbsp; For instance, despite this\n            Agreement between you and us terminating, any dispute raised after\n            you stop accessing or using the Offerings will be subject to the\n            applicable provisions of this Agreement if that dispute relates to\n            your prior access or use.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            For any use of the Offerings after the Termination Date, the terms\n            of this Agreement will again apply and, if your use is under a Paid\n            Plan, you will pay the applicable fees at the rates under Section 4.\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            7. Proprietary Rights.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            7.1 Your Content. Depending on the Offering, you may share Content\n            with us. Except as provided in this Section 7, we obtain no rights\n            under this Agreement from you (or your licensors) to Your Content.\n            You consent to our use of Your Content to provide the Offerings to\n            you.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            7.2 Offerings License. We or our licensors own all right, title, and\n            interest in and to the Offerings, and all related technology and\n            intellectual property rights. Subject to the terms of this\n            Agreement, we grant you a limited, revocable, non-exclusive,\n            non-sublicensable, non-transferable license to do the following: (a)\n            access and use the Offerings solely in accordance with this\n            Agreement; and (b) copy and use Our Content solely in connection\n            with your permitted use of the Offerings. Except as provided in this\n            Section 7.2, you obtain no rights under this Agreement from us, our\n            affiliates or our licensors to the Offerings, including any related\n            intellectual property rights. Some of Our Content and Third-Party\n            Content may be provided to you under a separate license, such as the\n            Apache License, Version 2.0, or other open source license. In the\n            event of a conflict between this Agreement and any separate license,\n            the separate license will prevail with respect to Our Content or\n            Third-Party Content that is the subject of such separate license.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            7.3 License Restrictions. Neither you nor any End User will use the\n            Offerings in any manner or for any purpose other than as expressly\n            permitted by this Agreement. Except for as authorized, neither you\n            nor any End User will, or will attempt to (a) modify, distribute,\n            alter, tamper with, repair, or otherwise create derivative works of\n            any Content included in the Offerings (except to the extent Content\n            included in the Offerings is provided to you under a separate\n            license that expressly permits the creation of derivative works),\n            (b) reverse engineer, disassemble, or decompile the Offerings or\n            apply any other process or procedure to derive the source code of\n            any software included in the Offerings (except to the extent\n            applicable law doesn’t allow this restriction), (c) access or use\n            the Offerings in a way intended to avoid incurring fees or exceeding\n            usage limits or quotas, (d) use scraping techniques to mine or\n            otherwise scrape data except as permitted by a Plan, or (e) resell\n            or sublicense the Offerings unless otherwise agreed in writing. You\n            will not use Our Marks unless you obtain our prior written consent.\n            You will not misrepresent or embellish the relationship between us\n            and you (including by expressing or implying that we support,\n            sponsor, endorse, or contribute to you or your business endeavors).\n            You will not imply any relationship or affiliation between us and\n            you except as expressly permitted by this Agreement.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            7.4 Suggestions. If you provide any Suggestions to us or our\n            affiliates, we and our affiliates will be entitled to use the\n            Suggestions without restriction. You hereby irrevocably assign to us\n            all right, title, and interest in and to the Suggestions and agree\n            to provide us any assistance we require to document, perfect, and\n            maintain our rights in the Suggestions.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            7.5 U.S. Government Users. If you are a U.S. Government End User, we\n            are licensing the Offerings to you as a “Commercial Item” as that\n            term is defined in the U.S. Code of Federal Regulations (see 48\n            C.F.R. § 2.101), and the rights we grant you to the Offerings are\n            the same as the rights we grant to all others under these Terms of\n            Use.\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            8. Indemnification.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            8.1 General.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (a) You will defend, indemnify, and hold harmless us, our affiliates\n            and licensors, and each of their respective employees, officers,\n            directors, and representatives from and against any Losses arising\n            out of or relating to any claim concerning: (a) breach of this\n            Agreement or violation of applicable law by you; and (b) a dispute\n            between you and any of your customers or users. You will reimburse\n            us for reasonable attorneys’ fees and expenses, associated with\n            claims described in (a) and (b) above.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (b) We will defend, indemnify, and hold harmless you and your\n            employees, officers, directors, and representatives from and against\n            any Losses arising out of or relating to any claim concerning our\n            material and intentional breach of this Agreement.&nbsp; We will\n            reimburse you for reasonable attorneys’ fees and expenses associated\n            with the claims described in this paragraph.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            8.2 Intellectual Property.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (a) Subject to the limitations in this Section 8, you will defend\n            ConsenSys, its affiliates, and their respective employees, officers,\n            and directors against any third-party claim alleging that any of\n            Your Content infringes or misappropriates that third party’s\n            intellectual property rights, and will pay the amount of any adverse\n            final judgment or settlement.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (b) Subject to the limitations in this Section 8 and the limitations\n            in Section 10, we will defend you and your employees, officers, and\n            directors against any third-party claim alleging that the Offerings\n            infringe or misappropriate that third party’s intellectual property\n            rights, and will pay the amount of any adverse final judgment or\n            settlement.&nbsp; However, we will not be required to spend more\n            than $200,000 pursuant to this Section 8, including without\n            limitation attorneys’ fees, court costs, settlements, judgments, and\n            reimbursement costs.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (c) Neither party will have obligations or liability under this\n            Section 8.2 arising from infringement by you combining the Offerings\n            with any other product, service, software, data, content or method.\n            In addition, we will have no obligations or liability arising from\n            your use of the Offerings after we have notified you to discontinue\n            such use. The remedies provided in this Section 8.2 are the sole and\n            exclusive remedies for any third-party claims of infringement or\n            misappropriation of intellectual property rights by the Offerings or\n            by Your Content.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            8.3 Process. In no event will a party agree to any settlement of any\n            claim that involves any commitment, other than the payment of money,\n            without the written consent of the other party.\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            9. Disclaimers; Risk.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            9.1 DISCLAIMER. THE OFFERINGS ARE PROVIDED “AS IS.” EXCEPT TO THE\n            EXTENT PROHIBITED BY LAW, OR TO THE EXTENT ANY STATUTORY RIGHTS\n            APPLY THAT CANNOT BE EXCLUDED, LIMITED OR WAIVED, WE AND OUR\n            AFFILIATES AND LICENSORS (A) MAKE NO REPRESENTATIONS OR WARRANTIES\n            OF ANY KIND, WHETHER EXPRESS, IMPLIED, STATUTORY OR OTHERWISE\n            REGARDING THE OFFERINGS OR THE THIRD-PARTY CONTENT, AND (B) DISCLAIM\n            ALL WARRANTIES, INCLUDING ANY IMPLIED OR EXPRESS WARRANTIES (I) OF\n            MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR\n            PURPOSE, NON-INFRINGEMENT, OR QUIET ENJOYMENT, (II) ARISING OUT OF\n            ANY COURSE OF DEALING OR USAGE OF TRADE, (III) THAT THE OFFERINGS OR\n            THIRD-PARTY CONTENT WILL BE UNINTERRUPTED, ERROR FREE OR FREE OF\n            HARMFUL COMPONENTS, AND (IV) THAT ANY CONTENT WILL BE SECURE OR NOT\n            OTHERWISE LOST OR ALTERED.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            9.2 RISKS. OUR OFFERINGS RELY ON EMERGING TECHNOLOGIES, SUCH AS\n            ETHEREUM. SOME OFFERINGS ARE SUBJECT TO INCREASED RISK THROUGH YOUR\n            POTENTIAL MISUSE OF THINGS SUCH AS PUBLIC/PRIVATE KEY CRYPTOGRAPHY,\n            OR FAILING TO PROPERLY UPDATE OR RUN SOFTWARE TO ACCOMMODATE\n            PROTOCOL UPGRADES, LIKE THE TRANSITION TO PROOF OF STAKE CONSENSUS.\n            BY USING THE OFFERINGS YOU EXPLICITLY ACKNOWLEDGE AND ACCEPT THESE\n            HEIGHTENED RISKS.&nbsp; YOU REPRESENT THAT YOU ARE FINANCIALLY AND\n            TECHNICALLY SOPHISTICATED ENOUGH TO UNDERSTAND THE INHERENT RISKS\n            ASSOCIATED WITH USING CRYPTOGRAPHIC AND BLOCKCHAIN-BASED SYSTEMS AND\n            UPGRADING YOUR SOFTWARE AND PROCESSES TO ACCOMMODATE PROTOCOL\n            UPGRADES, AND THAT YOU HAVE A WORKING KNOWLEDGE OF THE USAGE AND\n            INTRICACIES OF DIGITAL ASSETS SUCH AS ETHER (ETH) AND OTHER DIGITAL\n            TOKENS, SUCH AS THOSE FOLLOWING THE ERC-20 TOKEN STANDARD.&nbsp; IN\n            PARTICULAR, YOU UNDERSTAND THAT WE DO NOT OPERATE THE ETHEREUM\n            PROTOCOL OR ANY OTHER BLOCKCHAIN PROTOCOL, COMMUNICATE OR EXECUTE\n            PROTOCOL UPGRADES, OR APPROVE OR PROCESS BLOCKCHAIN TRANSACTIONS ON\n            BEHALF OF YOU.&nbsp; YOU FURTHER UNDERSTAND THAT BLOCKCHAIN\n            PROTOCOLS PRESENT THEIR OWN RISKS OF USE, THAT SUPPORTING OR\n            PARTICIPATING IN THE PROTOCOL MAY RESULT IN LOSSES IF YOUR\n            PARTICIPATION VIOLATES CERTAIN PROTOCOL RULES, THAT&nbsp;\n            BLOCKCHAIN-BASED TRANSACTIONS ARE IRREVERSIBLE, THAT YOUR PRIVATE\n            KEY AND BACKUP SEED PHRASE MUST BE KEPT SECRET AT ALL TIMES, THAT\n            CONSENSYS WILL NOT STORE A BACKUP OF, NOR WILL BE ABLE TO DISCOVER\n            OR RECOVER, YOUR PRIVATE KEY OR BACKUP SEED PHRASE, AND THAT YOU ARE\n            SOLELY RESPONSIBLE FOR ANY APPROVALS OR PERMISSIONS YOU PROVIDE BY\n            CRYPTOGRAPHICALLY SIGNING BLOCKCHAIN MESSAGES OR TRANSACTIONS.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            YOU FURTHER UNDERSTAND AND ACCEPT THAT DIGITAL TOKENS PRESENT MARKET\n            VOLATILITY RISK, TECHNICAL SOFTWARE RISKS, REGULATORY RISKS, AND\n            CYBERSECURITY RISKS.&nbsp; YOU UNDERSTAND THAT THE COST AND SPEED OF\n            A BLOCKCHAIN-BASED SYSTEM IS VARIABLE, THAT COST MAY INCREASE\n            DRAMATICALLY AT ANY TIME, AND THAT COST AND SPEED IS NOT WITHIN THE\n            CAPABILITY OF CONSENSYS TO CONTROL.&nbsp; YOU UNDERSTAND THAT\n            PROTOCOL UPGRADES MAY INADVERTENTLY CONTAIN BUGS OR SECURITY\n            VULNERABILITIES THAT MAY RESULT IN LOSS OF FUNCTIONALITY AND\n            ULTIMATELY FUNDS.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            YOU UNDERSTAND AND ACCEPT THAT CONSENSYS DOES NOT CONTROL ANY\n            BLOCKCHAIN PROTOCOL, NOR DOES CONSENSYS CONTROL ANY SMART CONTRACT\n            THAT IS NOT OTHERWISE OFFERED BY CONSENSYS AS PART OF THE\n            OFFERINGS.&nbsp; YOU UNDERSTAND AND ACCEPT THAT CONSENSYS DOES NOT\n            CONTROL AND IS NOT RESPONSIBLE FOR THE TRANSITION OF ANY BLOCKCHAIN\n            PROTOCOL FROM PROOF OF WORK TO PROOF OF STAKE CONSENSUS.&nbsp; YOU\n            AGREE THAT YOU ALONE, AND NOT CONSENSYS, IS RESPONSIBLE FOR ANY\n            TRANSACTIONS THAT YOU ENGAGE IN WITH REGARD TO SUPPORTING ANY\n            BLOCKCHAIN PROTOCOL WHETHER THROUGH TRANSACTION VALIDATION OR\n            OTHERWISE, OR ANY TRANSACTIONS THAT YOU ENGAGE IN WITHANY\n            THIRD-PARTY-DEVELOPED SMART CONTRACT OR TOKEN, INCLUDING TOKENS THAT\n            WERE CREATED BY A THIRD PARTY FOR THE PURPOSE OF FRAUDULENTLY\n            MISREPRESENTING AFFILIATION WITH ANY BLOCKCHAIN PROJECT.&nbsp; YOU\n            AGREE THAT CONSENSYS IS NOT RESPONSIBLE FOR THE REGULATORY STATUS OR\n            TREATMENT OF ANY DIGITAL ASSETS THAT YOU MAY ACCESS OR TRANSACT WITH\n            USING CONSENSYS OFFERINGS.&nbsp; YOU EXPRESSLY ASSUME FULL\n            RESPONSIBILITY FOR ALL OF THE RISKS OF ACCESSING AND USING THE\n            OFFERINGS TO INTERACT WITH BLOCKCHAIN PROTOCOLS.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            10. Limitations of Liability.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            10.1 Limitation of Liability. WITH THE EXCEPTION OF CLAIMS RELATING\n            TO A BREACH OF OUR PROPRIETARY RIGHTS AS GOVERNED BY SECTION 7 AND\n            INTELLECTUAL PROPERTY CLAIMS AS GOVERNED BY SECTION 8, IN NO EVENT\n            SHALL THE AGGREGATE LIABILITY OF EACH PARTY TOGETHER WITH ALL OF ITS\n            AFFILIATES ARISING OUT OF OR RELATED TO THIS AGREEMENT EXCEED THE\n            TOTAL AMOUNT PAID BY YOU HEREUNDER FOR THE OFFERINGS GIVING RISE TO\n            THE LIABILITY IN THE TWELVE MONTHS PRECEDING THE FIRST INCIDENT OUT\n            OF WHICH THE LIABILITY AROSE, OR, IF NO FEES HAVE BEEN PAID,\n            $25,000. THE FOREGOING LIMITATION WILL APPLY WHETHER AN ACTION IS IN\n            CONTRACT OR TORT AND REGARDLESS OF THE THEORY OF LIABILITY, BUT WILL\n            NOT LIMIT YOUR PAYMENT OBLIGATIONS UNDER SECTION 4.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            10.2 Exclusion of Consequential and Related Damages. IN NO EVENT\n            WILL EITHER PARTY OR ITS AFFILIATES HAVE ANY LIABILITY ARISING OUT\n            OF OR RELATED TO THIS AGREEMENT FOR ANY LOST PROFITS, REVENUES,\n            GOODWILL, OR INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL, COVER,\n            BUSINESS INTERRUPTION OR PUNITIVE DAMAGES, WHETHER AN ACTION IS IN\n            CONTRACT OR TORT AND REGARDLESS OF THE THEORY OF LIABILITY, EVEN IF\n            A PARTY OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF\n            SUCH DAMAGES OR IF A PARTY’S OR ITS AFFILIATES’ REMEDY OTHERWISE\n            FAILS OF ITS ESSENTIAL PURPOSE. THE FOREGOING DISCLAIMER WILL NOT\n            APPLY TO THE EXTENT PROHIBITED BY LAW.\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            11. Binding Arbitration and Class Action Waiver.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            PLEASE READ THIS SECTION CAREFULLY – IT MAY SIGNIFICANTLY AFFECT\n            YOUR LEGAL RIGHTS, INCLUDING YOUR RIGHT TO FILE A LAWSUIT IN COURT.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            11.1 Binding Arbitration. Any dispute, claim or controversy\n            (“Claim”) relating in any way to this Agreement, the Site, or your\n            use of the Offerings will be resolved by binding arbitration as\n            provided in this Section 11, rather than in court, except that you\n            may assert claims in small claims court if your claims qualify.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            11.1.1 If you are located in the United States: This agreement and\n            any dispute or claim (including non-contractual disputes or claims)\n            arising out of or in connection with it or its subject matter or\n            formation shall be governed by and construed in accordance with the\n            laws of the State of New York. The Federal Arbitration Act and\n            federal arbitration law apply to this Agreement. There is no judge\n            or jury in arbitration, and court review of an arbitration award is\n            limited. However, an arbitrator can award on an individual basis the\n            same damages and relief as a court (including injunctive and\n            declaratory relief or statutory damages), and must follow the terms\n            of this Agreement as a court would. The arbitration will be\n            conducted in accordance with the expedited procedures set forth in\n            the JAMS Comprehensive Arbitration Rules and Procedures (the\n            “Rules”) as those Rules exist on the effective date of this\n            Agreement, including Rules 16.1 and 16.2 of those Rules. The\n            arbitrator’s decision shall be final, binding, and non-appealable.\n            Judgment upon the award may be entered and enforced in any court\n            having jurisdiction. Neither party shall sue the other party other\n            than as provided herein or for enforcement of this clause or of the\n            arbitrator’s award; any such suit may be brought only in a Federal\n            District Court or a New York state court located in New York County,\n            New York. The arbitrator, and not any federal, state, or local\n            court, shall have exclusive authority to resolve any dispute\n            relating to the interpretation, applicability, unconscionability,\n            arbitrability, enforceability, or formation of this Agreement\n            including any claim that all or any part of the Agreement is void or\n            voidable.&nbsp; If for any reason a claim proceeds in court rather\n            than in arbitration we and you waive any right to a jury trial.\n            Notwithstanding the foregoing we and you both agree that you or we\n            may bring suit in court to enjoin infringement or other misuse of\n            intellectual property rights.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            11.1.2 If you are located in the United Kingdom: This agreement and\n            any dispute or claim (including non-contractual disputes or claims)\n            arising out of or in connection with it or its subject matter or\n            formation shall be governed by and construed in accordance with the\n            law of England and Wales. Any dispute, claim or controversy relating\n            in any way to this Agreement, the Offerings, your use of the\n            Offerings, or to any products or services licensed or distributed by\n            us will be resolved by binding arbitration as provided in this\n            clause. Prior to commencing any formal arbitration proceedings,\n            parties shall first seek settlement of any claim by mediation in\n            accordance with the LCIA Mediation Rules, which Rules are deemed to\n            be incorporated by reference into this clause. If the dispute is not\n            settled by mediation within 14 days of the commencement of the\n            mediation, or such further period as the parties shall agree in\n            writing, the dispute shall be referred to and finally resolved by\n            arbitration under the LCIA Rules, which are deemed to be\n            incorporated by reference into this clause. The language to be used\n            in the mediation and in the arbitration shall be English. The seat\n            or legal place of arbitration shall be London.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            11.1.3 If you are located in any territory that is not specifically\n            enumerated in Sections 11.1.1 or 11.1.2, you may elect for either of\n            Section 11.1.1 or 11.1.2 to apply to you, otherwise this Agreement\n            and any Claim (including non-contractual disputes or claims) arising\n            out of or in connection with it or its subject matter or formation\n            shall be governed by and construed in accordance with the law of\n            Ireland. Any Claim relating in any way to this Agreement, the\n            Offerings, your use of the Offerings, or to any products or services\n            licensed or distributed by us will be resolved by binding\n            arbitration as provided in this clause. Prior to commencing any\n            formal arbitration proceedings, parties shall first seek settlement\n            of any claim by mediation in accordance with the LCIA Mediation\n            Rules, which Rules are deemed to be incorporated by reference into\n            this clause. If the dispute is not settled by mediation within 14\n            days of the commencement of the mediation, or such further period as\n            the parties shall agree in writing, the Claim shall be referred to\n            and finally resolved by arbitration under the LCIA Rules, which are\n            deemed to be incorporated by reference into this clause. The\n            language to be used in the mediation and in the arbitration shall be\n            English. The seat or legal place of arbitration shall be Dublin,\n            Ireland.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            11.2 Class Action Waiver. YOU AND WE AGREE THAT EACH MAY BRING\n            CLAIMS AGAINST THE OTHER ONLY ON AN INDIVIDUAL BASIS, AND NOT AS A\n            PLAINTIFF OR CLASS MEMBER IN ANY PURPORTED CLASS OR REPRESENTATIVE\n            PROCEEDING. YOU AND WE EXPRESSLY WAIVE ANY RIGHT TO FILE A CLASS\n            ACTION OR SEEK RELIEF ON A CLASS BASIS. Unless both you and we\n            agree, no arbitrator or judge may consolidate more than one person’s\n            claims or otherwise preside over any form of a representative or\n            class proceeding. The arbitrator may award injunctive relief only in\n            favor of the individual party seeking relief and only to the extent\n            necessary to provide relief warranted by that party’s individual\n            claim. If a court decides that applicable law precludes enforcement\n            of any of this paragraph’s limitations as to a particular claim for\n            relief, then that claim (and only that claim) must be severed from\n            the arbitration and may be brought in court. If any court or\n            arbitrator determines that the class action waiver set forth in this\n            paragraph is void or unenforceable for any reason or that an\n            arbitration can proceed on a class basis, then the arbitration\n            provision set forth above shall be deemed null and void in its\n            entirety and the parties shall be deemed to have not agreed to\n            arbitrate disputes.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            11.3 30-Day Right to Opt Out. You have the right to opt-out and not\n            be bound by the arbitration and class action waiver provisions set\n            forth above by sending written notice of your decision to opt-out to\n            the email address notices@consensys.net with subject line LEGAL OPT\n            OUT. The notice must be sent within 30 days of your first use of the\n            Offerings, otherwise you shall be bound to arbitrate disputes and\n            will be deemed to have agreed to waive any right to pursue a class\n            action in accordance with the terms of those paragraphs. If you\n            opt-out of these provisions, we will also not be bound by them.\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            12. Miscellaneous.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.1 Assignment. You will not assign or otherwise transfer this\n            Agreement or any of your rights and obligations under this\n            Agreement, without our prior written consent. Any assignment or\n            transfer in violation of this Section 12.1 will be void. We may\n            assign this Agreement without your consent (a) in connection with a\n            merger, acquisition or sale of all or substantially all of our\n            assets, or (b) to any Affiliate or as part of a corporate\n            reorganization; and effective upon such assignment, the assignee is\n            deemed substituted for us as a party to this Agreement and we are\n            fully released from all of our obligations and duties to perform\n            under this Agreement. Subject to the foregoing, this Agreement will\n            be binding upon, and inure to the benefit of the parties and their\n            respective permitted successors and assigns.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.2 DAOs. As a blockchain native company, we may interact with and\n            provide certain Offerings to DAOs. Due to the unique nature of DAOs,\n            to the extent the DAO votes in favor of and/or accepts such\n            Offerings from ConsenSys, the DAO has acknowledged and agreed to\n            these Terms in their entirety.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.2 Entire Agreement and Modifications. This Agreement incorporates\n            the Policies by reference and is the entire agreement between you\n            and us regarding the subject matter of this Agreement. If the terms\n            of this document are inconsistent with the terms contained in any\n            Policy, the terms contained in this document will control. Any\n            modification to the terms of this Agreement may only be made in\n            writing.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.3 Force Majeure. Neither party nor their respective affiliates\n            will be liable for any delay or failure to perform any obligation\n            under this Agreement where the delay or failure results from any\n            cause beyond such party’s reasonable control, including but not\n            limited to acts of God, utilities or other telecommunications\n            failures, cyber attacks, earthquake, storms or other elements of\n            nature, pandemics, blockages, embargoes, riots, acts or orders of\n            government, acts of terrorism, or war.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.4 Export and Sanctions Compliance. In connection with this\n            Agreement, you will comply with all applicable import, re-import,\n            sanctions, anti-boycott, export, and re-export control laws and\n            regulations, including all such laws and regulations that may apply.\n            For clarity, you are solely responsible for compliance related to\n            the manner in which you choose to use the Offerings. You may not use\n            any Offering if you are the subject of U.S. sanctions or of\n            sanctions consistent with U.S. law imposed by the governments of the\n            country where you are using the Offering.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.5 Independent Contractors; Non-Exclusive Rights. We and you are\n            independent contractors, and this Agreement will not be construed to\n            create a partnership, joint venture, agency, or employment\n            relationship. Neither party, nor any of their respective affiliates,\n            is an agent of the other for any purpose or has the authority to\n            bind the other. Both parties reserve the right (a) to develop or\n            have developed for it products, services, concepts, systems, or\n            techniques that are similar to or compete with the products,\n            services, concepts, systems, or techniques developed or contemplated\n            by the other party, and (b) to assist third party developers or\n            systems integrators who may offer products or services which compete\n            with the other party’s products or services.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.6 Eligibility. If you are under the age of majority in your\n            jurisdiction of residence, you may use the Site or Offerings only\n            with the consent of or under the supervision of your parent or legal\n            guardian.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            NOTICE TO PARENTS AND GUARDIANS: By granting your minor permission\n            to access the Site or Offerings, you agree to these Terms of Use on\n            behalf of your minor. You are responsible for exercising supervision\n            over your minor’s online activities. If you do not agree to these\n            Terms of Use, do not let your minor use the Site or Offerings.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.7 Language. All communications and notices made or given pursuant\n            to this Agreement must be in the English language. If we provide a\n            translation of the English language version of this Agreement, the\n            English language version of the Agreement will control if there is\n            any conflict.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.8 Notice.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (a) To You. We may provide any notice to you under this Agreement\n            using commercially reasonable means, including: (i) posting a notice\n            on the Site; (ii) sending a message to the email address then\n            associated with your account; or (iii) using public communication\n            channels . Notices we provide by posting on the Site or using public\n            communication channels will be effective upon posting, and notices\n            we provide by email will be effective when we send the email. It is\n            your responsibility to keep your email address current to the extent\n            you have an account. You will be deemed to have received any email\n            sent to the email address then associated with your account when we\n            send the email, whether or not you actually receive the email.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            (b) To Us. To give us notice under this Agreement, you must contact\n            us by email at notices@consensys.net.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.9 No Third-Party Beneficiaries. Except as otherwise set forth\n            herein, this Agreement does not create any third-party beneficiary\n            rights in any individual or entity that is not a party to this\n            Agreement.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.10 No Waivers. The failure by us to enforce any provision of this\n            Agreement will not constitute a present or future waiver of such\n            provision nor limit our right to enforce such provision at a later\n            time. All waivers by us must be in writing to be effective.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.11 Severability. If any portion of this Agreement is held to be\n            invalid or unenforceable, the remaining portions of this Agreement\n            will remain in full force and effect. Any invalid or unenforceable\n            portions will be interpreted to effect and intent of the original\n            portion. If such construction is not possible, the invalid or\n            unenforceable portion will be severed from this Agreement but the\n            rest of the Agreement will remain in full force and effect.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            12.12 Notice and Procedure for Making Claims of Copyright\n            Infringement. If you are a copyright owner or agent of the owner,\n            and you believe that your copyright or the copyright of a person on\n            whose behalf you are authorized to act has been infringed, please\n            provide us a written notice at the address below with the following\n            information:\n          </Text>\n          <Box as=\"ol\" marginLeft={4} className=\"terms-of-use__terms-list\">\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              an electronic or physical signature of the person authorized to\n              act on behalf of the owner of the copyright or other intellectual\n              property interest;\n            </Text>\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              a description of the copyrighted work or other intellectual\n              property that you claim has been infringed;\n            </Text>\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              a description of where the material that you claim is infringing\n              is located with respect to the Offerings;\n            </Text>\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              your address, telephone number, and email address;\n            </Text>\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              a statement by you that you have a good faith belief that the\n              disputed use is not authorized by the copyright owner, its agent,\n              or the law;\n            </Text>\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              a statement by you, made under penalty of perjury, that the above\n              information in your notice is accurate and that you are the\n              copyright or intellectual property owner or authorized to act on\n              the copyright or intellectual property owner’s behalf.\n            </Text>\n          </Box>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            You can reach us at:\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            Email: notices@consensys.net\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            Subject Line: Copyright Notification Mail\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            Attention: Copyright ℅\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            ConsenSys Software Inc.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            49 Bogart Street Suite 22 Brooklyn, NY 11206\n          </Text>\n          <Text variant={TextVariant.bodyLgMedium} marginBottom={4}>\n            13. Definitions.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Acceptable Use Policy” means the policy set forth below, as it may\n            be updated by us from time to time. You agree not to, and not to\n            allow third parties to, use the Offerings:\n          </Text>\n          <Box as=\"ol\" marginLeft={4} className=\"terms-of-use__terms-list\">\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              to violate, or encourage the violation of, the legal rights of\n              others (for example, this may include allowing End Users to\n              infringe or misappropriate the intellectual property rights of\n              others in violation of the Digital Millennium Copyright Act);\n            </Text>\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              to engage in, promote or encourage any illegal or infringing\n              content;\n            </Text>\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              for any unlawful, invasive, infringing, defamatory or fraudulent\n              purpose (for example, this may include phishing, creating a\n              pyramid scheme or mirroring a website);\n            </Text>\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              to intentionally distribute viruses, worms, Trojan horses,\n              corrupted files, hoaxes, or other items of a destructive or\n              deceptive nature;\n            </Text>\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              to interfere with the use of the Offerings, or the equipment used\n              to provide the Offerings, by customers, authorized resellers, or\n              other authorized users;\n            </Text>\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              to disable, interfere with or circumvent any aspect of the\n              Offerings (for example, any thresholds or limits);\n            </Text>\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              to generate, distribute, publish or facilitate unsolicited mass\n              email, promotions, advertising or other solicitation; or\n            </Text>\n            <Text as=\"li\" variant={TextVariant.bodySm} marginBottom={2}>\n              to use the Offerings, or any interfaces provided with the\n              Offerings, to access any other product or service in a manner that\n              violates the terms of service of such other product or service.\n            </Text>\n          </Box>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “API” means an application program interface.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “API Requests” has the meaning set forth in Section 5.3.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Applicable Threshold” has the meaning set forth in Section 4.2.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Base Fees” has the meaning set forth in Section 4.2.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Content” means any data, text, audio, video or images, software\n            (including machine images), and any documentation.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “DAO” means Decentralized Autonomous Organization.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “End User” means any individual or entity that directly or\n            indirectly through another user: (a) accesses or uses Your Content;\n            or (b) otherwise accesses or uses the Offerings under your\n            account.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Fees” has the meaning set forth in Section 4.2.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Losses” means any claims, damages, losses, liabilities, costs, and\n            expenses (including reasonable attorneys’ fees).’\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Our Content” means any software (including machine images), data,\n            text, audio, video, images, or documentation that we offer in\n            connection with the Offerings.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Our Marks” means any trademarks, service marks, service or trade\n            names, logos, and other designations of ConsenSys Software Inc. and\n            their affiliates or licensors that we may make available to you in\n            connection with this Agreement.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Order” means an order for Offerings executed through an order form\n            directly with ConsenSys, or through a cloud vendor, such as Amazon\n            Web Services, Microsoft Azure, or Google Cloud.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Offerings” means each of the products and services, including but\n            not limited to Codefi, Infura, MetaMask, Quorum and any other\n            features, tools, materials, or services offered from time to time,\n            by us or our affiliates.&nbsp;\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Policies” means the Acceptable Use Policy, Privacy Policy, any\n            supplemental policies or addendums applicable to any Service as\n            provided to you, and any other policy or terms referenced in or\n            incorporated into this Agreement, each as may be updated by us from\n            time to time.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Privacy Policy” means the privacy policy located at{' '}\n            <ButtonLink\n              href=\"https://consensys.io/privacy-policy\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              color={Color.primaryDefault}\n              variant={TextVariant.bodySm}\n            >\n              https://consensys.io/privacy-policy\n            </ButtonLink>{' '}\n            (and any successor or related locations designated by us), as it may\n            be updated by us from time to time.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Service Offerings” means the Services (including associated APIs),\n            Our Content, Our Marks, and any other product or service provided by\n            us under this Agreement. Service Offerings do not include\n            Third-Party Content or Third-Party Services.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Suggestions” means all suggested improvements to the Service\n            Offerings that you provide to us..\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Term” means the term of this Agreement described in Section 6.1.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Termination Date” means the effective date of termination provided\n            in accordance with Section 6, in a notice from one party to the\n            other.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Third-Party Content” means Content made available to you by any\n            third party on the Site or in conjunction with the Offerings.\n          </Text>\n          <Text variant={TextVariant.bodySm} marginBottom={4}>\n            “Your Content” means content that you or any End User transfers to\n            us, storage or hosting by the Offerings in connection with account\n            and any computational results that you or any End User derive from\n            the foregoing through their use of the Offerings, excluding however\n            any information submitted to a blockchain protocol for\n            processing.&nbsp;\n          </Text>\n          <Box\n            flexDirection={FlexDirection.Row}\n            alignItems={AlignItems.flexStart}\n            marginLeft={3}\n            marginRight={3}\n            gap={2}\n          >\n            <Checkbox\n              id=\"terms-of-use__checkbox\"\n              className=\"terms-of-use__checkbox\"\n              data-testid=\"terms-of-use-checkbox\"\n              isChecked={isTermsOfUseChecked}\n              onChange={() => {\n                setIsTermsOfUseChecked(!isTermsOfUseChecked);\n              }}\n              label={t('termsOfUseAgreeText')}\n              ref={bottomRef}\n            />\n          </Box>\n        </Box>\n      </Box>\n    </Popover>\n  );\n}\n\nTermsOfUsePopup.propTypes = {\n  onAccept: PropTypes.func.isRequired,\n};\n","export { default } from './transaction-activity-log.container';\n","export { default } from './transaction-activity-log-icon.component';\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport {\n  TRANSACTION_CREATED_EVENT,\n  TRANSACTION_SUBMITTED_EVENT,\n  TRANSACTION_RESUBMITTED_EVENT,\n  TRANSACTION_CONFIRMED_EVENT,\n  TRANSACTION_DROPPED_EVENT,\n  TRANSACTION_ERRORED_EVENT,\n  TRANSACTION_CANCEL_ATTEMPTED_EVENT,\n  TRANSACTION_CANCEL_SUCCESS_EVENT,\n} from '../transaction-activity-log.constants';\nimport { Icon, IconName, IconSize } from '../../../component-library';\nimport { Color } from '../../../../helpers/constants/design-system';\n\nexport const ACTIVITY_ICONS = {\n  [TRANSACTION_CREATED_EVENT]: IconName.Add,\n  [TRANSACTION_SUBMITTED_EVENT]: IconName.ArrowUp,\n  [TRANSACTION_RESUBMITTED_EVENT]: IconName.ProgrammingArrows,\n  [TRANSACTION_CONFIRMED_EVENT]: IconName.Check,\n  [TRANSACTION_DROPPED_EVENT]: IconName.Close,\n  [TRANSACTION_ERRORED_EVENT]: IconName.Danger,\n  [TRANSACTION_CANCEL_ATTEMPTED_EVENT]: IconName.Close,\n  [TRANSACTION_CANCEL_SUCCESS_EVENT]: IconName.Close,\n};\n\nexport default class TransactionActivityLogIcon extends PureComponent {\n  static contextTypes = {\n    t: PropTypes.func,\n  };\n\n  static propTypes = {\n    className: PropTypes.string,\n    eventKey: PropTypes.oneOf(Object.keys(ACTIVITY_ICONS)),\n  };\n\n  render() {\n    const { className, eventKey } = this.props;\n    const icon = ACTIVITY_ICONS[eventKey];\n\n    return (\n      <div className={classnames('transaction-activity-log-icon', className)}>\n        {icon ? (\n          <Icon name={icon} color={Color.iconDefault} size={IconSize.Sm} />\n        ) : null}\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport { getBlockExplorerLink } from '@metamask/etherscan-link';\nimport { formatDate, getURLHostName } from '../../../helpers/utils/util';\nimport { MetaMetricsEventCategory } from '../../../../shared/constants/metametrics';\nimport { getValueFromWeiHex } from '../../../../shared/modules/conversion.utils';\nimport TransactionActivityLogIcon from './transaction-activity-log-icon';\nimport { CONFIRMED_STATUS } from './transaction-activity-log.constants';\n\nexport default class TransactionActivityLog extends PureComponent {\n  static contextTypes = {\n    t: PropTypes.func,\n    trackEvent: PropTypes.func,\n  };\n\n  static propTypes = {\n    activities: PropTypes.array,\n    className: PropTypes.string,\n    conversionRate: PropTypes.number,\n    inlineRetryIndex: PropTypes.number,\n    inlineCancelIndex: PropTypes.number,\n    nativeCurrency: PropTypes.string,\n    onCancel: PropTypes.func,\n    onRetry: PropTypes.func,\n    primaryTransaction: PropTypes.object,\n    isEarliestNonce: PropTypes.bool,\n    rpcPrefs: PropTypes.object,\n  };\n\n  handleActivityClick = (activity) => {\n    const { rpcPrefs } = this.props;\n    const etherscanUrl = getBlockExplorerLink(activity, rpcPrefs);\n\n    this.context.trackEvent({\n      category: MetaMetricsEventCategory.Transactions,\n      event: 'Clicked Block Explorer Link',\n      properties: {\n        link_type: 'Transaction Block Explorer',\n        action: 'Activity Details',\n        block_explorer_domain: getURLHostName(etherscanUrl),\n      },\n    });\n\n    global.platform.openTab({ url: etherscanUrl });\n  };\n\n  renderInlineRetry(index) {\n    const { t } = this.context;\n    const {\n      inlineRetryIndex,\n      primaryTransaction = {},\n      onRetry,\n      isEarliestNonce,\n    } = this.props;\n    const { status } = primaryTransaction;\n\n    return isEarliestNonce &&\n      status !== CONFIRMED_STATUS &&\n      index === inlineRetryIndex ? (\n      <div className=\"transaction-activity-log__action-link\" onClick={onRetry}>\n        {t('speedUpTransaction')}\n      </div>\n    ) : null;\n  }\n\n  renderInlineCancel(index) {\n    const { t } = this.context;\n    const {\n      inlineCancelIndex,\n      primaryTransaction = {},\n      onCancel,\n      isEarliestNonce,\n    } = this.props;\n    const { status } = primaryTransaction;\n\n    return isEarliestNonce &&\n      status !== CONFIRMED_STATUS &&\n      index === inlineCancelIndex ? (\n      <div className=\"transaction-activity-log__action-link\" onClick={onCancel}>\n        {t('speedUpCancellation')}\n      </div>\n    ) : null;\n  }\n\n  renderActivity(activity, index) {\n    const { conversionRate, nativeCurrency } = this.props;\n    const { eventKey, value, timestamp } = activity;\n    const ethValue = `${getValueFromWeiHex({\n      value,\n      fromCurrency: 'ETH',\n      toCurrency: 'ETH',\n      conversionRate,\n      numberOfDecimals: 6,\n    })} ${nativeCurrency}`;\n    const formattedTimestamp = formatDate(timestamp, \"T 'on' M/d/y\");\n    const activityText = this.context.t(eventKey, [\n      ethValue,\n      formattedTimestamp,\n    ]);\n\n    return (\n      <div key={index} className=\"transaction-activity-log__activity\">\n        <TransactionActivityLogIcon\n          className=\"transaction-activity-log__activity-icon\"\n          eventKey={eventKey}\n        />\n        <div className=\"transaction-activity-log__entry-container\">\n          <div\n            className=\"transaction-activity-log__activity-text\"\n            title={activityText}\n            onClick={() => this.handleActivityClick(activity)}\n          >\n            {activityText}\n          </div>\n          {this.renderInlineRetry(index)}\n          {this.renderInlineCancel(index)}\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { t } = this.context;\n    const { className, activities } = this.props;\n\n    if (activities.length === 0) {\n      return null;\n    }\n\n    return (\n      <div className={classnames('transaction-activity-log', className)}>\n        <div className=\"transaction-activity-log__title\">\n          {t('activityLog')}\n        </div>\n        <div className=\"transaction-activity-log__activities-container\">\n          {activities.map((activity, index) =>\n            this.renderActivity(activity, index),\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","export const TRANSACTION_CREATED_EVENT = 'transactionCreated';\nexport const TRANSACTION_SUBMITTED_EVENT = 'transactionSubmitted';\nexport const TRANSACTION_RESUBMITTED_EVENT = 'transactionResubmitted';\nexport const TRANSACTION_CONFIRMED_EVENT = 'transactionConfirmed';\nexport const TRANSACTION_DROPPED_EVENT = 'transactionDropped';\nexport const TRANSACTION_UPDATED_EVENT = 'transactionUpdated';\nexport const TRANSACTION_ERRORED_EVENT = 'transactionErrored';\nexport const TRANSACTION_CANCEL_ATTEMPTED_EVENT = 'transactionCancelAttempted';\nexport const TRANSACTION_CANCEL_SUCCESS_EVENT = 'transactionCancelSuccess';\n\nexport const SUBMITTED_STATUS = 'submitted';\nexport const CONFIRMED_STATUS = 'confirmed';\nexport const DROPPED_STATUS = 'dropped';\n","import { connect } from 'react-redux';\nimport { findLastIndex } from 'lodash';\nimport {\n  conversionRateSelector,\n  getRpcPrefsForCurrentProvider,\n} from '../../../selectors';\nimport { getNativeCurrency } from '../../../ducks/metamask/metamask';\nimport TransactionActivityLog from './transaction-activity-log.component';\nimport { combineTransactionHistories } from './transaction-activity-log.util';\nimport {\n  TRANSACTION_RESUBMITTED_EVENT,\n  TRANSACTION_CANCEL_ATTEMPTED_EVENT,\n} from './transaction-activity-log.constants';\n\nconst matchesEventKey =\n  (matchEventKey) =>\n  ({ eventKey }) =>\n    eventKey === matchEventKey;\n\nconst mapStateToProps = (state) => {\n  return {\n    conversionRate: conversionRateSelector(state),\n    nativeCurrency: getNativeCurrency(state),\n    rpcPrefs: getRpcPrefsForCurrentProvider(state),\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n  const {\n    transactionGroup: { transactions = [], primaryTransaction } = {},\n    ...restOwnProps\n  } = ownProps;\n\n  const activities = combineTransactionHistories(transactions);\n  const inlineRetryIndex = findLastIndex(\n    activities,\n    matchesEventKey(TRANSACTION_RESUBMITTED_EVENT),\n  );\n  const inlineCancelIndex = findLastIndex(\n    activities,\n    matchesEventKey(TRANSACTION_CANCEL_ATTEMPTED_EVENT),\n  );\n\n  return {\n    ...stateProps,\n    ...dispatchProps,\n    ...restOwnProps,\n    activities,\n    inlineRetryIndex,\n    inlineCancelIndex,\n    primaryTransaction,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null,\n  mergeProps,\n)(TransactionActivityLog);\n","import { TransactionType } from '@metamask/transaction-controller';\nimport { sumHexes } from '../../../../shared/modules/conversion.utils';\nimport { getHexGasTotal } from '../../../helpers/utils/confirm-tx.util';\n\nimport {\n  // event constants\n  TRANSACTION_CREATED_EVENT,\n  TRANSACTION_SUBMITTED_EVENT,\n  TRANSACTION_RESUBMITTED_EVENT,\n  TRANSACTION_CONFIRMED_EVENT,\n  TRANSACTION_DROPPED_EVENT,\n  TRANSACTION_UPDATED_EVENT,\n  TRANSACTION_ERRORED_EVENT,\n  TRANSACTION_CANCEL_ATTEMPTED_EVENT,\n  TRANSACTION_CANCEL_SUCCESS_EVENT,\n  // status constants\n  SUBMITTED_STATUS,\n  CONFIRMED_STATUS,\n  DROPPED_STATUS,\n} from './transaction-activity-log.constants';\n\n// path constants\nconst STATUS_PATH = '/status';\nconst GAS_PRICE_PATH = '/txParams/gasPrice';\nconst GAS_LIMIT_PATH = '/txParams/gas';\nconst ESTIMATE_BASE_FEE_PATH = '/estimatedBaseFee';\nconst BLOCKTIMESTAMP = '/blockTimestamp';\n\n// op constants\nconst REPLACE_OP = 'replace';\n\nconst eventPathsHash = {\n  [STATUS_PATH]: true,\n  [GAS_PRICE_PATH]: true,\n  [GAS_LIMIT_PATH]: true,\n  [BLOCKTIMESTAMP]: true,\n};\n\nconst statusHash = {\n  [SUBMITTED_STATUS]: TRANSACTION_SUBMITTED_EVENT,\n  [CONFIRMED_STATUS]: TRANSACTION_CONFIRMED_EVENT,\n  [DROPPED_STATUS]: TRANSACTION_DROPPED_EVENT,\n};\n\n/**\n * @name getActivities\n * @param {object} transaction - txMeta object\n * @param {boolean} isFirstTransaction - True if the transaction is the first created transaction\n * in the list of transactions with the same nonce. If so, we use this transaction to create the\n * transactionCreated activity.\n * @returns {Array}\n */\nexport function getActivities(transaction, isFirstTransaction = false) {\n  const {\n    id,\n    chainId,\n    hash,\n    history = [],\n    txParams: {\n      gas: paramsGasLimit,\n      gasPrice: paramsGasPrice,\n      maxPriorityFeePerGas: paramsMaxPriorityFeePerGas,\n    },\n    txReceipt: { status } = {},\n    type,\n    estimatedBaseFee: paramsEstimatedBaseFee,\n  } = transaction;\n\n  const paramsEip1559Price =\n    paramsEstimatedBaseFee &&\n    paramsMaxPriorityFeePerGas &&\n    sumHexes(paramsEstimatedBaseFee, paramsMaxPriorityFeePerGas);\n  let cachedGasLimit = '0x0';\n  let cachedGasPrice = '0x0';\n\n  const historyActivities = history.reduce((acc, base, index) => {\n    // First history item should be transaction creation\n    if (index === 0 && !Array.isArray(base) && base.txParams) {\n      const {\n        time: timestamp,\n        estimatedBaseFee,\n        txParams: { value, gas = '0x0', gasPrice, maxPriorityFeePerGas } = {},\n      } = base;\n\n      const eip1559Price =\n        estimatedBaseFee &&\n        maxPriorityFeePerGas &&\n        sumHexes(estimatedBaseFee, maxPriorityFeePerGas);\n      // The cached gas limit and gas price are used to display the gas fee in the activity log. We\n      // need to cache these values because the status update history events don't provide us with\n      // the latest gas limit and gas price.\n      cachedGasLimit = gas;\n      cachedGasPrice = eip1559Price || gasPrice || paramsGasPrice || '0x0';\n\n      if (isFirstTransaction) {\n        return acc.concat({\n          id,\n          hash,\n          chainId,\n          eventKey: TRANSACTION_CREATED_EVENT,\n          timestamp,\n          value,\n        });\n      }\n      // An entry in the history may be an array of more sub-entries.\n    } else if (Array.isArray(base)) {\n      const events = [];\n\n      base.forEach((entry) => {\n        const { op, path, value, timestamp: entryTimestamp } = entry;\n        // Not all sub-entries in a history entry have a timestamp. If the sub-entry does not have a\n        // timestamp, the first sub-entry in a history entry should.\n        const timestamp = entryTimestamp || (base[0] && base[0].timestamp);\n\n        const isAddBaseFee = path === ESTIMATE_BASE_FEE_PATH && op === 'add';\n\n        if ((path in eventPathsHash && op === REPLACE_OP) || isAddBaseFee) {\n          switch (path) {\n            case STATUS_PATH: {\n              const gasFee =\n                cachedGasLimit === '0x0' && cachedGasPrice === '0x0'\n                  ? getHexGasTotal({\n                      gasLimit: paramsGasLimit,\n                      gasPrice: paramsEip1559Price || paramsGasPrice,\n                    })\n                  : getHexGasTotal({\n                      gasLimit: cachedGasLimit,\n                      gasPrice: cachedGasPrice,\n                    });\n\n              if (value in statusHash) {\n                let eventKey = statusHash[value];\n\n                // If the status is 'submitted', we need to determine whether the event is a\n                // transaction retry or a cancellation attempt.\n                if (value === SUBMITTED_STATUS) {\n                  if (type === TransactionType.retry) {\n                    eventKey = TRANSACTION_RESUBMITTED_EVENT;\n                  } else if (type === TransactionType.cancel) {\n                    eventKey = TRANSACTION_CANCEL_ATTEMPTED_EVENT;\n                  }\n                } else if (value === CONFIRMED_STATUS) {\n                  if (type === TransactionType.cancel) {\n                    eventKey = TRANSACTION_CANCEL_SUCCESS_EVENT;\n                  }\n                }\n                events.push({\n                  id,\n                  hash,\n                  eventKey,\n                  timestamp,\n                  chainId,\n                  value: gasFee,\n                });\n              }\n              break;\n            }\n\n            // If the gas price or gas limit has been changed, we update the gasFee of the\n            // previously submitted event. These events happen when the gas limit and gas price is\n            // changed at the confirm screen.\n            case GAS_PRICE_PATH:\n            case GAS_LIMIT_PATH:\n            case ESTIMATE_BASE_FEE_PATH: {\n              const lastEvent = events[events.length - 1] || {};\n              const { lastEventKey } = lastEvent;\n\n              if (path === GAS_LIMIT_PATH) {\n                cachedGasLimit = value;\n              } else if (path === GAS_PRICE_PATH) {\n                cachedGasPrice = value;\n              } else if (path === ESTIMATE_BASE_FEE_PATH) {\n                cachedGasPrice = paramsEip1559Price || base?.txParams?.gasPrice;\n                lastEvent.value = getHexGasTotal({\n                  gasLimit: paramsGasLimit,\n                  gasPrice: cachedGasPrice,\n                });\n              }\n\n              if (\n                lastEventKey === TRANSACTION_SUBMITTED_EVENT ||\n                lastEventKey === TRANSACTION_RESUBMITTED_EVENT\n              ) {\n                lastEvent.value = getHexGasTotal({\n                  gasLimit: cachedGasLimit,\n                  gasPrice: cachedGasPrice,\n                });\n              }\n              break;\n            }\n\n            case BLOCKTIMESTAMP: {\n              const filteredAcc = acc.find(\n                (ac) => ac.eventKey === TRANSACTION_CONFIRMED_EVENT,\n              );\n              if (filteredAcc !== undefined) {\n                filteredAcc.timestamp = new Date(\n                  parseInt(entry.value, 16) * 1000,\n                ).getTime();\n              }\n              break;\n            }\n\n            default: {\n              events.push({\n                id,\n                hash,\n                chainId,\n                eventKey: TRANSACTION_UPDATED_EVENT,\n                timestamp,\n              });\n            }\n          }\n        }\n      });\n\n      return acc.concat(events);\n    }\n\n    return acc;\n  }, []);\n\n  // If txReceipt.status is '0x0', that means that an on-chain error occurred for the transaction,\n  // so we add an error entry to the Activity Log.\n  return status === '0x0'\n    ? historyActivities.concat({\n        id,\n        hash,\n        chainId,\n        eventKey: TRANSACTION_ERRORED_EVENT,\n      })\n    : historyActivities;\n}\n\n/**\n * @description Removes \"Transaction dropped\" activities from a list of sorted activities if one of\n * the transactions has been confirmed. Typically, if multiple transactions have the same nonce,\n * once one transaction is confirmed, the rest are dropped. In this case, we don't want to show\n * multiple \"Transaction dropped\" activities, and instead want to show a single \"Transaction\n * confirmed\".\n * @param {Array} activities - List of sorted activities generated from the getActivities function.\n * @returns {Array}\n */\nfunction filterSortedActivities(activities) {\n  const filteredActivities = [];\n  const hasConfirmedActivity = Boolean(\n    activities.find(\n      ({ eventKey }) =>\n        eventKey === TRANSACTION_CONFIRMED_EVENT ||\n        eventKey === TRANSACTION_CANCEL_SUCCESS_EVENT,\n    ),\n  );\n  let addedDroppedActivity = false;\n\n  activities.forEach((activity) => {\n    if (activity.eventKey === TRANSACTION_DROPPED_EVENT) {\n      if (!hasConfirmedActivity && !addedDroppedActivity) {\n        filteredActivities.push(activity);\n        addedDroppedActivity = true;\n      }\n    } else {\n      filteredActivities.push(activity);\n    }\n  });\n\n  return filteredActivities;\n}\n\n/**\n * Combines the histories of an array of transactions into a single array.\n *\n * @param {Array} transactions - Array of txMeta transaction objects.\n * @returns {Array}\n */\nexport function combineTransactionHistories(transactions = []) {\n  if (!transactions.length) {\n    return [];\n  }\n\n  const activities = [];\n\n  transactions.forEach((transaction, index) => {\n    // The first transaction should be the transaction with the earliest submittedTime. We show the\n    // 'created' and 'submitted' activities here. All subsequent transactions will use 'resubmitted'\n    // instead.\n    const transactionActivities = getActivities(transaction, index === 0);\n    activities.push(...transactionActivities);\n  });\n\n  const sortedActivities = activities.sort((a, b) => a.timestamp - b.timestamp);\n  return filterSortedActivities(sortedActivities);\n}\n","export { default } from './transaction-breakdown.container';\n","export { default } from './transaction-breakdown-row.component';\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nexport default class TransactionBreakdownRow extends PureComponent {\n  static propTypes = {\n    title: PropTypes.string,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    divider: PropTypes.bool,\n  };\n\n  render() {\n    const { title, children, className, divider = false } = this.props;\n\n    return (\n      <div\n        className={classnames(\n          'transaction-breakdown-row',\n          divider ? 'transaction-breakdown-row--with-bottom-border' : '',\n          className,\n        )}\n        data-testid=\"transaction-breakdown-row\"\n      >\n        <div\n          className=\"transaction-breakdown-row__title\"\n          data-testid=\"transaction-breakdown-row-title\"\n        >\n          {title}\n        </div>\n        <div\n          className=\"transaction-breakdown-row__value\"\n          data-testid=\"transaction-breakdown-row-value\"\n        >\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport CurrencyDisplay from '../../ui/currency-display';\nimport UserPreferencedCurrencyDisplay from '../user-preferenced-currency-display';\nimport HexToDecimal from '../../ui/hex-to-decimal';\nimport { PRIMARY, SECONDARY } from '../../../helpers/constants/common';\nimport { EtherDenomination } from '../../../../shared/constants/common';\nimport TransactionBreakdownRow from './transaction-breakdown-row';\n\nexport default class TransactionBreakdown extends PureComponent {\n  static contextTypes = {\n    t: PropTypes.func,\n  };\n\n  static propTypes = {\n    className: PropTypes.string,\n    nativeCurrency: PropTypes.string,\n    showFiat: PropTypes.bool,\n    nonce: PropTypes.string,\n    primaryCurrency: PropTypes.string,\n    isTokenApprove: PropTypes.bool,\n    gas: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    gasPrice: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    maxFeePerGas: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    gasUsed: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    totalInHex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    baseFee: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    priorityFee: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    hexGasTotal: PropTypes.string,\n    isEIP1559Transaction: PropTypes.bool,\n    l1HexGasTotal: PropTypes.string,\n    sourceAmountFormatted: PropTypes.string,\n    destinationAmountFormatted: PropTypes.string,\n  };\n\n  static defaultProps = {\n    showFiat: true,\n  };\n\n  render() {\n    const { t } = this.context;\n    const {\n      gas,\n      gasPrice,\n      maxFeePerGas,\n      primaryCurrency,\n      className,\n      nonce,\n      nativeCurrency,\n      showFiat,\n      totalInHex,\n      gasUsed,\n      isTokenApprove,\n      baseFee,\n      priorityFee,\n      hexGasTotal,\n      isEIP1559Transaction,\n      l1HexGasTotal,\n      sourceAmountFormatted,\n      destinationAmountFormatted,\n    } = this.props;\n    return (\n      <div className={classnames('transaction-breakdown', className)}>\n        <div className=\"transaction-breakdown__title\">{t('transaction')}</div>\n        <TransactionBreakdownRow divider title={t('nonce')}>\n          {typeof nonce === 'undefined' ? null : (\n            <HexToDecimal\n              className=\"transaction-breakdown__value\"\n              value={nonce}\n            />\n          )}\n        </TransactionBreakdownRow>\n        {sourceAmountFormatted && (\n          <TransactionBreakdownRow title={t('amountSent')}>\n            <span\n              className=\"transaction-breakdown__value transaction-breakdown__value--amount\"\n              data-testid=\"transaction-breakdown-value-amount\"\n            >\n              {sourceAmountFormatted}\n            </span>\n          </TransactionBreakdownRow>\n        )}\n        {destinationAmountFormatted && (\n          <TransactionBreakdownRow title={t('amountReceived')}>\n            <span\n              className=\"transaction-breakdown__value transaction-breakdown__value--amount\"\n              data-testid=\"transaction-breakdown-value-amount\"\n            >\n              {destinationAmountFormatted}\n            </span>\n          </TransactionBreakdownRow>\n        )}\n        {!sourceAmountFormatted && (\n          <TransactionBreakdownRow\n            title={isTokenApprove ? t('spendingCap') : t('amount')}\n          >\n            <span\n              className=\"transaction-breakdown__value transaction-breakdown__value--amount\"\n              data-testid=\"transaction-breakdown-value-amount\"\n            >\n              {primaryCurrency}\n            </span>\n          </TransactionBreakdownRow>\n        )}\n        <TransactionBreakdownRow\n          title={\n            l1HexGasTotal\n              ? t('transactionHistoryL2GasLimitLabel')\n              : `${t('gasLimit')} (${t('units')})`\n          }\n          className=\"transaction-breakdown__row-title\"\n        >\n          {typeof gas === 'undefined' ? (\n            '?'\n          ) : (\n            <HexToDecimal\n              className=\"transaction-breakdown__value\"\n              value={gas}\n            />\n          )}\n        </TransactionBreakdownRow>\n        {typeof gasUsed === 'string' && (\n          <TransactionBreakdownRow\n            title={`${t('gasUsed')} (${t('units')})`}\n            className=\"transaction-breakdown__row-title\"\n          >\n            <HexToDecimal\n              className=\"transaction-breakdown__value\"\n              value={gasUsed}\n            />\n          </TransactionBreakdownRow>\n        )}\n        {isEIP1559Transaction && typeof baseFee !== 'undefined' ? (\n          <TransactionBreakdownRow title={t('transactionHistoryBaseFee')}>\n            <CurrencyDisplay\n              className=\"transaction-breakdown__value\"\n              data-testid=\"transaction-breakdown__base-fee\"\n              currency={nativeCurrency}\n              denomination={EtherDenomination.GWEI}\n              value={baseFee}\n              numberOfDecimals={10}\n              hideLabel\n            />\n          </TransactionBreakdownRow>\n        ) : null}\n        {isEIP1559Transaction && typeof priorityFee !== 'undefined' ? (\n          <TransactionBreakdownRow title={t('transactionHistoryPriorityFee')}>\n            <CurrencyDisplay\n              className=\"transaction-breakdown__value\"\n              data-testid=\"transaction-breakdown__priority-fee\"\n              currency={nativeCurrency}\n              denomination={EtherDenomination.GWEI}\n              value={priorityFee}\n              numberOfDecimals={10}\n              hideLabel\n            />\n          </TransactionBreakdownRow>\n        ) : null}\n        {!isEIP1559Transaction && (\n          <TransactionBreakdownRow\n            title={\n              l1HexGasTotal\n                ? t('transactionHistoryL2GasPriceLabel')\n                : t('advancedGasPriceTitle')\n            }\n          >\n            {typeof gasPrice === 'undefined' ? (\n              '?'\n            ) : (\n              <CurrencyDisplay\n                className=\"transaction-breakdown__value\"\n                data-testid=\"transaction-breakdown__gas-price\"\n                currency={nativeCurrency}\n                denomination={EtherDenomination.GWEI}\n                value={gasPrice}\n                numberOfDecimals={9}\n                hideLabel\n              />\n            )}\n          </TransactionBreakdownRow>\n        )}\n        {isEIP1559Transaction && (\n          <TransactionBreakdownRow title={t('transactionHistoryTotalGasFee')}>\n            <UserPreferencedCurrencyDisplay\n              className=\"transaction-breakdown__value\"\n              data-testid=\"transaction-breakdown__effective-gas-price\"\n              currency={nativeCurrency}\n              denomination={EtherDenomination.ETH}\n              numberOfDecimals={6}\n              value={hexGasTotal}\n              type={PRIMARY}\n            />\n            {showFiat && (\n              <UserPreferencedCurrencyDisplay\n                className=\"transaction-breakdown__value\"\n                type={SECONDARY}\n                value={hexGasTotal}\n              />\n            )}\n          </TransactionBreakdownRow>\n        )}\n        {isEIP1559Transaction && (\n          <TransactionBreakdownRow\n            divider\n            title={t('transactionHistoryMaxFeePerGas')}\n          >\n            <UserPreferencedCurrencyDisplay\n              className=\"transaction-breakdown__value\"\n              currency={nativeCurrency}\n              denomination={EtherDenomination.ETH}\n              numberOfDecimals={9}\n              value={maxFeePerGas}\n              type={PRIMARY}\n            />\n            {showFiat && (\n              <UserPreferencedCurrencyDisplay\n                className=\"transaction-breakdown__value\"\n                type={SECONDARY}\n                value={maxFeePerGas}\n              />\n            )}\n          </TransactionBreakdownRow>\n        )}\n        {l1HexGasTotal && (\n          <TransactionBreakdownRow title={t('transactionHistoryL1GasLabel')}>\n            <UserPreferencedCurrencyDisplay\n              className=\"transaction-breakdown__value\"\n              data-testid=\"transaction-breakdown__l1-gas-total\"\n              numberOfDecimals={18}\n              value={l1HexGasTotal}\n              type={PRIMARY}\n            />\n            {showFiat && (\n              <UserPreferencedCurrencyDisplay\n                className=\"transaction-breakdown__value\"\n                type={SECONDARY}\n                value={l1HexGasTotal}\n              />\n            )}\n          </TransactionBreakdownRow>\n        )}\n        <TransactionBreakdownRow title={t('total')}>\n          <UserPreferencedCurrencyDisplay\n            className=\"transaction-breakdown__value transaction-breakdown__value--eth-total\"\n            type={PRIMARY}\n            value={totalInHex}\n            numberOfDecimals={l1HexGasTotal ? 18 : null}\n          />\n          {showFiat && (\n            <UserPreferencedCurrencyDisplay\n              className=\"transaction-breakdown__value\"\n              type={SECONDARY}\n              value={totalInHex}\n            />\n          )}\n        </TransactionBreakdownRow>\n      </div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport { TransactionType } from '@metamask/transaction-controller';\nimport { getShouldShowFiat } from '../../../selectors';\nimport { getNativeCurrency } from '../../../ducks/metamask/metamask';\nimport { getHexGasTotal } from '../../../helpers/utils/confirm-tx.util';\nimport { isEIP1559Transaction } from '../../../../shared/modules/transaction.utils';\n\nimport {\n  subtractHexes,\n  sumHexes,\n} from '../../../../shared/modules/conversion.utils';\nimport {\n  calcTokenAmount,\n  getSwapsTokensReceivedFromTxMeta,\n} from '../../../../shared/lib/transactions-controller-utils';\nimport { CONFIRMED_STATUS } from '../transaction-activity-log/transaction-activity-log.constants';\nimport TransactionBreakdown from './transaction-breakdown.component';\n\nconst mapStateToProps = (state, ownProps) => {\n  const { transaction, isTokenApprove } = ownProps;\n  const {\n    txParams: { gas, gasPrice, maxFeePerGas, value } = {},\n    txReceipt: { gasUsed, effectiveGasPrice, l1Fee: l1HexGasTotal } = {},\n    baseFeePerGas,\n    sourceTokenAmount: rawSourceTokenAmount,\n    sourceTokenDecimals,\n    sourceTokenSymbol,\n    destinationTokenAddress,\n    destinationTokenAmount: rawDestinationTokenAmountEstimate,\n    destinationTokenDecimals,\n    destinationTokenSymbol,\n    status,\n    type,\n  } = transaction;\n\n  const sourceTokenAmount =\n    rawSourceTokenAmount && sourceTokenDecimals\n      ? calcTokenAmount(rawSourceTokenAmount, sourceTokenDecimals).toFixed()\n      : undefined;\n  let destinationTokenAmount;\n\n  if (\n    type === TransactionType.swapAndSend &&\n    // ensure fallback values are available\n    rawDestinationTokenAmountEstimate &&\n    destinationTokenDecimals &&\n    destinationTokenSymbol\n  ) {\n    try {\n      // try to get the actual destination token amount from the on-chain events\n      destinationTokenAmount = getSwapsTokensReceivedFromTxMeta(\n        destinationTokenSymbol,\n        transaction,\n        destinationTokenAddress,\n        undefined,\n        destinationTokenDecimals,\n        undefined,\n        undefined,\n        null,\n      );\n\n      // if no amount is found, throw\n      if (!destinationTokenAmount) {\n        throw new Error('Actual destination token amount not found');\n      }\n    } catch (error) {\n      // if actual destination token amount is not found, use the estimated amount from the quote\n      destinationTokenAmount =\n        rawDestinationTokenAmountEstimate && destinationTokenDecimals\n          ? calcTokenAmount(\n              rawDestinationTokenAmountEstimate,\n              destinationTokenDecimals,\n            ).toFixed()\n          : undefined;\n    }\n  }\n\n  const sourceAmountFormatted =\n    sourceTokenAmount && sourceTokenDecimals && sourceTokenSymbol\n      ? `${sourceTokenAmount} ${sourceTokenSymbol}`\n      : undefined;\n  const destinationAmountFormatted =\n    destinationTokenAmount && status === CONFIRMED_STATUS\n      ? `${destinationTokenAmount} ${destinationTokenSymbol}`\n      : undefined;\n\n  const gasLimit = typeof gasUsed === 'string' ? gasUsed : gas;\n\n  const priorityFee =\n    effectiveGasPrice &&\n    baseFeePerGas &&\n    subtractHexes(effectiveGasPrice, baseFeePerGas);\n\n  // To calculate the total cost of the transaction, we use gasPrice if it is in the txParam,\n  // which will only be the case on non-EIP1559 networks. If it is not in the params, we can\n  // use the effectiveGasPrice from the receipt, which will ultimately represent to true cost\n  // of the transaction. Either of these are used the same way with gasLimit to calculate total\n  // cost. effectiveGasPrice will be available on the txReciept for all EIP1559 networks\n  const usedGasPrice = gasPrice || effectiveGasPrice;\n  const hexGasTotal =\n    (gasLimit &&\n      usedGasPrice &&\n      getHexGasTotal({ gasLimit, gasPrice: usedGasPrice })) ||\n    '0x0';\n\n  const totalInHex = sumHexes(hexGasTotal, value, l1HexGasTotal ?? 0);\n\n  return {\n    nativeCurrency: getNativeCurrency(state),\n    showFiat: getShouldShowFiat(state),\n    totalInHex,\n    gas,\n    gasPrice,\n    maxFeePerGas,\n    gasUsed,\n    isTokenApprove,\n    hexGasTotal,\n    priorityFee,\n    baseFee: baseFeePerGas,\n    isEIP1559Transaction: isEIP1559Transaction(transaction),\n    l1HexGasTotal,\n    sourceAmountFormatted,\n    destinationAmountFormatted,\n  };\n};\n\nexport default connect(mapStateToProps)(TransactionBreakdown);\n","export { default } from './transaction-icon';\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport {\n  TransactionGroupCategory,\n  TransactionGroupStatus,\n} from '../../../../shared/constants/transaction';\nimport { captureSingleException } from '../../../store/actions';\nimport { AvatarIcon, AvatarIconSize, IconName } from '../../component-library';\nimport {\n  BackgroundColor,\n  IconColor,\n} from '../../../helpers/constants/design-system';\n\nconst ICON_MAP = {\n  [TransactionGroupCategory.approval]: IconName.Check,\n  [TransactionGroupCategory.interaction]: IconName.ProgrammingArrows,\n  [TransactionGroupCategory.receive]: IconName.Received,\n  [TransactionGroupCategory.send]: IconName.Arrow2UpRight,\n  [TransactionGroupCategory.signatureRequest]: IconName.SecurityTick,\n  [TransactionGroupCategory.swap]: IconName.SwapHorizontal,\n  [TransactionGroupCategory.swapAndSend]: IconName.Arrow2UpRight,\n};\n\nconst COLOR_MAP = {\n  [TransactionGroupStatus.pending]: IconColor.primaryDefault,\n  [TransactionGroupStatus.cancelled]: IconColor.errorDefault,\n  [TransactionStatus.approved]: IconColor.primaryDefault,\n  [TransactionStatus.dropped]: IconColor.errorDefault,\n  [TransactionStatus.failed]: IconColor.errorDefault,\n  [TransactionStatus.rejected]: IconColor.errorDefault,\n  [TransactionStatus.submitted]: IconColor.primaryDefault,\n  [TransactionStatus.unapproved]: IconColor.primaryDefault,\n};\n\nconst BACKGROUND_COLOR_MAP = {\n  [TransactionGroupStatus.pending]: BackgroundColor.primaryMuted,\n  [TransactionGroupStatus.cancelled]: BackgroundColor.errorMuted,\n  [TransactionStatus.approved]: BackgroundColor.primaryMuted,\n  [TransactionStatus.dropped]: BackgroundColor.errorMuted,\n  [TransactionStatus.failed]: BackgroundColor.errorMuted,\n  [TransactionStatus.rejected]: BackgroundColor.errorMuted,\n  [TransactionStatus.submitted]: BackgroundColor.primaryMuted,\n  [TransactionStatus.unapproved]: BackgroundColor.primaryMuted,\n};\n\nexport default function TransactionIcon({ status, category }) {\n  const dispatch = useDispatch();\n\n  const color = COLOR_MAP[status] || IconColor.primaryDefault;\n  const backgroundColor =\n    BACKGROUND_COLOR_MAP[status] || BackgroundColor.primaryMuted;\n  const Icon = ICON_MAP[category];\n\n  if (!Icon) {\n    dispatch(\n      captureSingleException(\n        `The category prop passed to TransactionIcon is not supported. The prop is: ${category}`,\n      ),\n    );\n    return (\n      <AvatarIcon\n        backgroundColor={BackgroundColor.backgroundAlternative}\n        size={AvatarIconSize.Md}\n      />\n    );\n  }\n\n  return (\n    <AvatarIcon\n      backgroundColor={backgroundColor}\n      iconName={Icon}\n      size={AvatarIconSize.Md}\n      color={color}\n    />\n  );\n}\n\nTransactionIcon.propTypes = {\n  status: PropTypes.oneOf([\n    TransactionGroupStatus.cancelled,\n    TransactionGroupStatus.pending,\n    TransactionStatus.approved,\n    TransactionStatus.confirmed,\n    TransactionStatus.dropped,\n    TransactionStatus.failed,\n    TransactionStatus.rejected,\n    TransactionStatus.submitted,\n    TransactionStatus.unapproved,\n  ]).isRequired,\n  category: PropTypes.oneOf([\n    TransactionGroupCategory.approval,\n    TransactionGroupCategory.interaction,\n    TransactionGroupCategory.receive,\n    TransactionGroupCategory.send,\n    TransactionGroupCategory.signatureRequest,\n    TransactionGroupCategory.swap,\n    TransactionGroupCategory.swapAndSend,\n  ]).isRequired,\n};\n","export { default } from './transaction-list-item-details.container';\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport copyToClipboard from 'copy-to-clipboard';\nimport { getBlockExplorerLink } from '@metamask/etherscan-link';\nimport { TransactionType } from '@metamask/transaction-controller';\nimport SenderToRecipient from '../../ui/sender-to-recipient';\nimport { DEFAULT_VARIANT } from '../../ui/sender-to-recipient/sender-to-recipient.constants';\nimport Disclosure from '../../ui/disclosure';\nimport TransactionActivityLog from '../transaction-activity-log';\nimport TransactionBreakdown from '../transaction-breakdown';\nimport Button from '../../ui/button';\nimport Tooltip from '../../ui/tooltip';\nimport CancelButton from '../cancel-button';\nimport Popover from '../../ui/popover';\nimport { Box } from '../../component-library/box';\nimport { SECOND } from '../../../../shared/constants/time';\nimport { MetaMetricsEventCategory } from '../../../../shared/constants/metametrics';\nimport { getURLHostName } from '../../../helpers/utils/util';\nimport { NETWORKS_ROUTE } from '../../../helpers/constants/routes';\nimport { COPY_OPTIONS } from '../../../../shared/constants/copy';\n\nexport default class TransactionListItemDetails extends PureComponent {\n  static contextTypes = {\n    t: PropTypes.func,\n    trackEvent: PropTypes.func,\n  };\n\n  static defaultProps = {\n    recipientEns: null,\n  };\n\n  static propTypes = {\n    onCancel: PropTypes.func,\n    onRetry: PropTypes.func,\n    showCancel: PropTypes.bool,\n    showSpeedUp: PropTypes.bool,\n    showRetry: PropTypes.bool,\n    isEarliestNonce: PropTypes.bool,\n    primaryCurrency: PropTypes.string,\n    transactionGroup: PropTypes.object,\n    title: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n    recipientEns: PropTypes.string,\n    recipientAddress: PropTypes.string,\n    recipientName: PropTypes.string,\n    recipientMetadataName: PropTypes.string,\n    rpcPrefs: PropTypes.object,\n    senderAddress: PropTypes.string.isRequired,\n    tryReverseResolveAddress: PropTypes.func.isRequired,\n    senderNickname: PropTypes.string.isRequired,\n    recipientNickname: PropTypes.string,\n    transactionStatus: PropTypes.func,\n    isCustomNetwork: PropTypes.bool,\n    history: PropTypes.object,\n    blockExplorerLinkText: PropTypes.object,\n  };\n\n  state = {\n    justCopied: false,\n  };\n\n  handleBlockExplorerClick = () => {\n    const {\n      transactionGroup: { primaryTransaction },\n      rpcPrefs,\n      isCustomNetwork,\n      history,\n      onClose,\n    } = this.props;\n    const blockExplorerLink = getBlockExplorerLink(\n      primaryTransaction,\n      rpcPrefs,\n    );\n\n    if (!rpcPrefs.blockExplorerUrl && isCustomNetwork) {\n      onClose();\n      history.push(`${NETWORKS_ROUTE}#blockExplorerUrl`);\n    } else {\n      this.context.trackEvent({\n        category: MetaMetricsEventCategory.Transactions,\n        event: 'Clicked Block Explorer Link',\n        properties: {\n          link_type: 'Transaction Block Explorer',\n          action: 'Transaction Details',\n          block_explorer_domain: getURLHostName(blockExplorerLink),\n        },\n      });\n\n      global.platform.openTab({\n        url: blockExplorerLink,\n      });\n    }\n  };\n\n  handleCancel = (event) => {\n    const { onCancel, onClose } = this.props;\n    onCancel(event);\n    onClose();\n  };\n\n  handleRetry = (event) => {\n    const { onClose, onRetry } = this.props;\n    onRetry(event);\n    onClose();\n  };\n\n  handleCopyTxId = () => {\n    const { transactionGroup } = this.props;\n    const { primaryTransaction: transaction } = transactionGroup;\n    const { hash } = transaction;\n\n    this.context.trackEvent({\n      category: MetaMetricsEventCategory.Navigation,\n      event: 'Copied Transaction ID',\n      properties: {\n        action: 'Activity Log',\n        legacy_event: true,\n      },\n    });\n\n    this.setState({ justCopied: true }, () => {\n      copyToClipboard(hash, COPY_OPTIONS);\n      setTimeout(() => this.setState({ justCopied: false }), SECOND);\n    });\n  };\n\n  componentDidMount() {\n    const {\n      recipientAddress,\n      tryReverseResolveAddress,\n    } = this.props;\n\n\n    if (recipientAddress) {\n      tryReverseResolveAddress(recipientAddress);\n    }\n  }\n\n\n  render() {\n    const { t } = this.context;\n    const {\n      justCopied,\n    } = this.state;\n    const {\n      transactionGroup,\n      primaryCurrency,\n      showSpeedUp,\n      showRetry,\n      recipientEns,\n      recipientAddress,\n      recipientName,\n      recipientMetadataName,\n      senderAddress,\n      isEarliestNonce,\n      senderNickname,\n      title,\n      onClose,\n      recipientNickname,\n      showCancel,\n      transactionStatus: TransactionStatus,\n      blockExplorerLinkText,\n    } = this.props;\n    const {\n      primaryTransaction: transaction,\n      initialTransaction: { type },\n    } = transactionGroup;\n    const { hash } = transaction;\n\n    return (\n      <Popover title={title} onClose={onClose}>\n        <div className=\"transaction-list-item-details\">\n          <div className=\"transaction-list-item-details__operations\">\n            <div className=\"transaction-list-item-details__header-buttons\">\n              {showSpeedUp && (\n                <Button\n                  type=\"primary\"\n                  onClick={this.handleRetry}\n                  className=\"transaction-list-item-details__header-button-rounded-button\"\n                  data-testid=\"speedup-button\"\n                >\n                  {t('speedUp')}\n                </Button>\n              )}\n              {showCancel && (\n                <CancelButton\n                  transaction={transaction}\n                  cancelTransaction={this.handleCancel}\n                  detailsModal\n                />\n              )}\n              {showRetry && (\n                <Tooltip title={t('retryTransaction')}>\n                  <Button\n                    type=\"raised\"\n                    onClick={this.handleRetry}\n                    className=\"transaction-list-item-details__header-button\"\n                    data-testid=\"rety-button\"\n                  >\n                    <i className=\"fa fa-sync\"></i>\n                  </Button>\n                </Tooltip>\n              )}\n            </div>\n          </div>\n          <div className=\"transaction-list-item-details__header\">\n            <div\n              className=\"transaction-list-item-details__tx-status\"\n              data-testid=\"transaction-list-item-details-tx-status\"\n            >\n              <div>{t('status')}</div>\n              <div>\n                <TransactionStatus />\n              </div>\n            </div>\n            <div className=\"transaction-list-item-details__tx-hash\">\n              <div>\n                <Button\n                  type=\"link\"\n                  onClick={this.handleBlockExplorerClick}\n                  disabled={!hash}\n                >\n                  {blockExplorerLinkText.firstPart === 'addBlockExplorer'\n                    ? t('addBlockExplorer')\n                    : t('viewOnBlockExplorer')}\n                </Button>\n              </div>\n              <div>\n                <Tooltip\n                  wrapperClassName=\"transaction-list-item-details__header-button\"\n                  containerClassName=\"transaction-list-item-details__header-button-tooltip-container\"\n                  title={justCopied ? t('copiedExclamation') : null}\n                >\n                  <Button\n                    type=\"link\"\n                    onClick={this.handleCopyTxId}\n                    disabled={!hash}\n                  >\n                    {t('copyTransactionId')}\n                  </Button>\n                </Tooltip>\n              </div>\n              {\n              }\n            </div>\n          </div>\n          <div className=\"transaction-list-item-details__body\">\n            <div className=\"transaction-list-item-details__sender-to-recipient-header\">\n              <div>{t('from')}</div>\n              <div>{t('to')}</div>\n            </div>\n            <div className=\"transaction-list-item-details__sender-to-recipient-container\">\n              <SenderToRecipient\n                warnUserOnAccountMismatch={false}\n                variant={DEFAULT_VARIANT}\n                addressOnly\n                recipientEns={recipientEns}\n                recipientAddress={recipientAddress}\n                recipientNickname={recipientNickname}\n                recipientName={recipientName}\n                recipientMetadataName={recipientMetadataName}\n                senderName={senderNickname}\n                senderAddress={senderAddress}\n                onRecipientClick={() => {\n                  this.context.trackEvent({\n                    category: MetaMetricsEventCategory.Navigation,\n                    event: 'Copied \"To\" Address',\n                    properties: {\n                      action: 'Activity Log',\n                      legacy_event: true,\n                    },\n                  });\n                }}\n                onSenderClick={() => {\n                  this.context.trackEvent({\n                    category: MetaMetricsEventCategory.Navigation,\n                    event: 'Copied \"From\" Address',\n                    properties: {\n                      action: 'Activity Log',\n                      legacy_event: true,\n                    },\n                  });\n                }}\n              />\n            </div>\n            <div className=\"transaction-list-item-details__cards-container\">\n              <TransactionBreakdown\n                nonce={transactionGroup.initialTransaction.txParams.nonce}\n                isTokenApprove={\n                  type === TransactionType.tokenMethodApprove ||\n                  type === TransactionType.tokenMethodSetApprovalForAll\n                }\n                transaction={transaction}\n                primaryCurrency={primaryCurrency}\n                className=\"transaction-list-item-details__transaction-breakdown\"\n              />\n              {\n              }\n              {transactionGroup.initialTransaction.type !==\n                TransactionType.incoming && (\n                <Box marginTop={3} marginBottom={3}>\n                  <Disclosure\n                    title={t('activityLog')}\n                    size=\"small\"\n                    isScrollToBottomOnOpen\n                  >\n                    <TransactionActivityLog\n                      transactionGroup={transactionGroup}\n                      className=\"transaction-list-item-details__transaction-activity-log\"\n                      onCancel={this.handleCancel}\n                      onRetry={this.handleRetry}\n                      isEarliestNonce={isEarliestNonce}\n                    />\n                  </Disclosure>\n                </Box>\n              )}\n            </div>\n          </div>\n        </div>\n      </Popover>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { tryReverseResolveAddress } from '../../../store/actions';\nimport {\n  getAddressBook,\n  getBlockExplorerLinkText,\n  getIsCustomNetwork,\n  getRpcPrefsForCurrentProvider,\n  getEnsResolutionByAddress,\n  getAccountName,\n  getMetadataContractName,\n  getInternalAccounts,\n} from '../../../selectors';\nimport { toChecksumHexAddress } from '../../../../shared/modules/hexstring-utils';\nimport TransactionListItemDetails from './transaction-list-item-details.component';\n\nconst mapStateToProps = (state, ownProps) => {\n  const { recipientAddress, senderAddress } = ownProps;\n  let recipientEns;\n  if (recipientAddress) {\n    const address = toChecksumHexAddress(recipientAddress);\n    recipientEns = getEnsResolutionByAddress(state, address);\n  }\n  const addressBook = getAddressBook(state);\n  const accounts = getInternalAccounts(state);\n  const recipientName = getAccountName(accounts, recipientAddress);\n  const recipientMetadataName = getMetadataContractName(\n    state,\n    recipientAddress,\n  );\n\n  const getNickName = (address) => {\n    const entry = addressBook.find((contact) => {\n      return address.toLowerCase() === contact.address.toLowerCase();\n    });\n    return (entry && entry.name) || '';\n  };\n  const rpcPrefs = getRpcPrefsForCurrentProvider(state);\n\n  const isCustomNetwork = getIsCustomNetwork(state);\n\n\n  return {\n    rpcPrefs,\n    recipientEns,\n    senderNickname: getNickName(senderAddress),\n    recipientNickname: recipientAddress ? getNickName(recipientAddress) : null,\n    isCustomNetwork,\n    blockExplorerLinkText: getBlockExplorerLinkText(state),\n    recipientName,\n    recipientMetadataName,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    tryReverseResolveAddress: (address) => {\n      return dispatch(tryReverseResolveAddress(address));\n    },\n  };\n};\n\nexport default compose(\n  withRouter,\n  connect(mapStateToProps, mapDispatchToProps),\n)(TransactionListItemDetails);\n","export { default } from './transaction-list-item.component';\n","import React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TransactionStatusLabel from '../transaction-status-label/transaction-status-label';\nimport TransactionIcon from '../transaction-icon';\nimport { useTransactionDisplayData } from '../../../hooks/useTransactionDisplayData';\nimport { formatDateWithYearContext } from '../../../helpers/utils/util';\nimport {\n  TransactionGroupStatus,\n  SmartTransactionStatus,\n} from '../../../../shared/constants/transaction';\n\nimport CancelButton from '../cancel-button';\nimport { cancelSwapsSmartTransaction } from '../../../ducks/swaps/swaps';\nimport TransactionListItemDetails from '../transaction-list-item-details';\nimport { ActivityListItem } from '../../multichain';\nimport {\n  AvatarNetwork,\n  AvatarNetworkSize,\n  BadgeWrapper,\n  BadgeWrapperAnchorElementShape,\n  Box,\n} from '../../component-library';\nimport {\n  BackgroundColor,\n  Display,\n} from '../../../helpers/constants/design-system';\nimport { getCurrentNetwork } from '../../../selectors';\n\nexport default function SmartTransactionListItem({\n  smartTransaction,\n  transactionGroup,\n  isEarliestNonce = false,\n}) {\n  const dispatch = useDispatch();\n  const [cancelSwapLinkClicked, setCancelSwapLinkClicked] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const {\n    title,\n    category,\n    primaryCurrency,\n    recipientAddress,\n    isPending,\n    senderAddress,\n  } = useTransactionDisplayData(transactionGroup);\n  const currentChain = useSelector(getCurrentNetwork);\n\n  const { time, status } = smartTransaction;\n  const date = formatDateWithYearContext(time, 'MMM d, y', 'MMM d');\n  let displayedStatusKey;\n  if (status === SmartTransactionStatus.pending) {\n    displayedStatusKey = TransactionGroupStatus.pending;\n  } else if (status?.startsWith(SmartTransactionStatus.cancelled)) {\n    displayedStatusKey = TransactionGroupStatus.cancelled;\n  }\n  const showCancelSwapLink =\n    smartTransaction.cancellable && !cancelSwapLinkClicked;\n  const className = 'transaction-list-item transaction-list-item--unconfirmed';\n  const toggleShowDetails = useCallback(() => {\n    setShowDetails((prev) => !prev);\n  }, []);\n  return (\n    <>\n      <ActivityListItem\n        className={className}\n        title={title}\n        onClick={toggleShowDetails}\n        icon={\n          <BadgeWrapper\n            anchorElementShape={BadgeWrapperAnchorElementShape.circular}\n            positionObj={{ top: -4, right: -4 }}\n            display={Display.Block}\n            badge={\n              <AvatarNetwork\n                className=\"activity-tx__network-badge\"\n                data-testid=\"activity-tx-network-badge\"\n                size={AvatarNetworkSize.Xs}\n                name={currentChain?.nickname}\n                src={currentChain?.rpcPrefs?.imageUrl}\n                borderWidth={1}\n                borderColor={BackgroundColor.backgroundDefault}\n              />\n            }\n          >\n            <TransactionIcon category={category} status={displayedStatusKey} />\n          </BadgeWrapper>\n        }\n        subtitle={\n          <TransactionStatusLabel\n            isPending\n            isEarliestNonce={isEarliestNonce}\n            date={date}\n            status={displayedStatusKey}\n          />\n        }\n      >\n        {displayedStatusKey === TransactionGroupStatus.pending &&\n          showCancelSwapLink && (\n            <Box\n              paddingTop={4}\n              className=\"transaction-list-item__pending-actions\"\n            >\n              <CancelButton\n                transaction={smartTransaction.uuid}\n                cancelTransaction={(e) => {\n                  e?.preventDefault();\n                  dispatch(cancelSwapsSmartTransaction(smartTransaction.uuid));\n                  setCancelSwapLinkClicked(true);\n                }}\n              />\n            </Box>\n          )}\n      </ActivityListItem>\n      {showDetails && (\n        <TransactionListItemDetails\n          title={title}\n          onClose={toggleShowDetails}\n          senderAddress={senderAddress}\n          recipientAddress={recipientAddress}\n          primaryCurrency={primaryCurrency}\n          isEarliestNonce={isEarliestNonce}\n          transactionGroup={transactionGroup}\n          transactionStatus={() => (\n            <TransactionStatusLabel\n              isPending={isPending}\n              isEarliestNonce={isEarliestNonce}\n              date={date}\n              status={displayedStatusKey}\n              statusOnly\n            />\n          )}\n        />\n      )}\n    </>\n  );\n}\n\nSmartTransactionListItem.propTypes = {\n  smartTransaction: PropTypes.object.isRequired,\n  isEarliestNonce: PropTypes.bool,\n  transactionGroup: PropTypes.object,\n};\n","/* eslint-disable import/no-duplicates */\nimport React, { useMemo, useState, useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport { useTransactionDisplayData } from '../../../hooks/useTransactionDisplayData';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\n\nimport TransactionListItemDetails from '../transaction-list-item-details';\nimport { CONFIRM_TRANSACTION_ROUTE } from '../../../helpers/constants/routes';\nimport { useShouldShowSpeedUp } from '../../../hooks/useShouldShowSpeedUp';\nimport TransactionStatusLabel from '../transaction-status-label/transaction-status-label';\nimport TransactionIcon from '../transaction-icon';\nimport {\n  BackgroundColor,\n  Color,\n  Display,\n  FontWeight,\n  TextAlign,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport {\n  AvatarNetwork,\n  AvatarNetworkSize,\n  BadgeWrapper,\n  BadgeWrapperAnchorElementShape,\n  Box,\n  Text,\n} from '../../component-library';\n\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { TransactionGroupCategory } from '../../../../shared/constants/transaction';\nimport { EditGasModes } from '../../../../shared/constants/gas';\nimport {\n  GasFeeContextProvider,\n  useGasFeeContext,\n} from '../../../contexts/gasFee';\nimport {\n  TransactionModalContextProvider,\n  useTransactionModalContext,\n} from '../../../contexts/transaction-modal';\nimport {\n  checkNetworkAndAccountSupports1559,\n  getCurrentNetwork,\n  getTestNetworkBackgroundColor,\n} from '../../../selectors';\nimport { isLegacyTransaction } from '../../../helpers/utils/transactions.util';\nimport { formatDateWithYearContext } from '../../../helpers/utils/util';\nimport Button from '../../ui/button';\nimport AdvancedGasFeePopover from '../../../pages/confirmations/components/advanced-gas-fee-popover';\nimport CancelButton from '../cancel-button';\nimport CancelSpeedupPopover from '../cancel-speedup-popover';\nimport EditGasFeePopover from '../../../pages/confirmations/components/edit-gas-fee-popover';\nimport EditGasPopover from '../../../pages/confirmations/components/edit-gas-popover';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport { ActivityListItem } from '../../multichain';\nimport { abortTransactionSigning } from '../../../store/actions';\nimport { getIsSmartTransaction } from '../../../../shared/modules/selectors';\n\nfunction TransactionListItemInner({\n  transactionGroup,\n  setEditGasMode,\n  isEarliestNonce = false,\n}) {\n  const t = useI18nContext();\n  const history = useHistory();\n  const { hasCancelled } = transactionGroup;\n  const [showDetails, setShowDetails] = useState(false);\n  const [showCancelEditGasPopover, setShowCancelEditGasPopover] =\n    useState(false);\n  const [showRetryEditGasPopover, setShowRetryEditGasPopover] = useState(false);\n  const { supportsEIP1559 } = useGasFeeContext();\n  const { openModal } = useTransactionModalContext();\n  const testNetworkBackgroundColor = useSelector(getTestNetworkBackgroundColor);\n  const isSmartTransaction = useSelector(getIsSmartTransaction);\n  const dispatch = useDispatch();\n\n  const {\n    initialTransaction: { id },\n    primaryTransaction: { error, status },\n  } = transactionGroup;\n\n  const trackEvent = useContext(MetaMetricsContext);\n\n  const retryTransaction = useCallback(\n    async (event) => {\n      event.stopPropagation();\n      trackEvent({\n        event: 'Clicked \"Speed Up\"',\n        category: MetaMetricsEventCategory.Navigation,\n        properties: {\n          action: 'Activity Log',\n          legacy_event: true,\n        },\n      });\n      if (supportsEIP1559) {\n        setEditGasMode(EditGasModes.speedUp);\n        openModal('cancelSpeedUpTransaction');\n      } else {\n        setShowRetryEditGasPopover(true);\n      }\n    },\n    [openModal, setEditGasMode, trackEvent, supportsEIP1559],\n  );\n\n  const cancelTransaction = useCallback(\n    (event) => {\n      event.stopPropagation();\n      trackEvent({\n        event: 'Clicked \"Cancel\"',\n        category: MetaMetricsEventCategory.Navigation,\n        properties: {\n          action: 'Activity Log',\n          legacy_event: true,\n        },\n      });\n      if (status === TransactionStatus.approved) {\n        dispatch(abortTransactionSigning(id));\n      } else if (supportsEIP1559) {\n        setEditGasMode(EditGasModes.cancel);\n        openModal('cancelSpeedUpTransaction');\n      } else {\n        setShowCancelEditGasPopover(true);\n      }\n    },\n    [\n      trackEvent,\n      openModal,\n      setEditGasMode,\n      supportsEIP1559,\n      status,\n      dispatch,\n      id,\n    ],\n  );\n\n  const shouldShowSpeedUp = useShouldShowSpeedUp(\n    transactionGroup,\n    isEarliestNonce,\n  );\n\n  const {\n    title,\n    category,\n    primaryCurrency,\n    recipientAddress,\n    secondaryCurrency,\n    displayedStatusKey,\n    isPending,\n    senderAddress,\n  } = useTransactionDisplayData(transactionGroup);\n  const date = formatDateWithYearContext(\n    transactionGroup.primaryTransaction.time,\n    'MMM d, y',\n    'MMM d',\n  );\n  const isSignatureReq = category === TransactionGroupCategory.signatureRequest;\n  const isApproval = category === TransactionGroupCategory.approval;\n  const isUnapproved = status === TransactionStatus.unapproved;\n  const isSwap = [\n    TransactionGroupCategory.swap,\n    TransactionGroupCategory.swapAndSend,\n  ].includes(category);\n  const isSigning = status === TransactionStatus.approved;\n  const isSubmitting = status === TransactionStatus.signed;\n\n  const className = classnames('transaction-list-item', {\n    'transaction-list-item--unconfirmed':\n      isPending ||\n      [\n        TransactionStatus.failed,\n        TransactionStatus.dropped,\n        TransactionStatus.rejected,\n      ].includes(displayedStatusKey),\n  });\n\n  const toggleShowDetails = useCallback(() => {\n    if (isUnapproved) {\n      history.push(`${CONFIRM_TRANSACTION_ROUTE}/${id}`);\n      return;\n    }\n    setShowDetails((prev) => {\n      trackEvent({\n        event: prev\n          ? MetaMetricsEventName.ActivityDetailsClosed\n          : MetaMetricsEventName.ActivityDetailsOpened,\n        category: MetaMetricsEventCategory.Navigation,\n        properties: {\n          activity_type: category,\n        },\n      });\n      return !prev;\n    });\n  }, [isUnapproved, history, id, trackEvent, category]);\n\n\n  const speedUpButton = useMemo(() => {\n\n    if (\n      !shouldShowSpeedUp ||\n      !isPending ||\n      isUnapproved ||\n      isSigning ||\n      isSubmitting\n    ) {\n      return null;\n    }\n\n    return (\n      <Button\n        data-testid=\"speed-up-button\"\n        type=\"primary\"\n        onClick={hasCancelled ? cancelTransaction : retryTransaction}\n        style={hasCancelled ? { width: 'auto' } : null}\n      >\n        {hasCancelled ? t('speedUpCancellation') : t('speedUp')}\n      </Button>\n    );\n  }, [\n    shouldShowSpeedUp,\n    isUnapproved,\n    t,\n    isPending,\n    isSigning,\n    isSubmitting,\n    hasCancelled,\n    retryTransaction,\n    cancelTransaction,\n  ]);\n  const currentChain = useSelector(getCurrentNetwork);\n  let showCancelButton =\n    !hasCancelled && isPending && !isUnapproved && !isSubmitting;\n\n\n  return (\n    <>\n      <ActivityListItem\n        data-testid=\"activity-list-item\"\n        onClick={toggleShowDetails}\n        className={className}\n        title={title}\n        icon={\n            <BadgeWrapper\n              anchorElementShape={BadgeWrapperAnchorElementShape.circular}\n              positionObj={{ top: -4, right: -4 }}\n              display={Display.Block}\n              badge={\n                <AvatarNetwork\n                  className=\"activity-tx__network-badge\"\n                  data-testid=\"activity-tx-network-badge\"\n                  size={AvatarNetworkSize.Xs}\n                  name={currentChain?.nickname}\n                  src={currentChain?.rpcPrefs?.imageUrl}\n                  borderWidth={1}\n                  borderColor={BackgroundColor.backgroundDefault}\n                  backgroundColor={testNetworkBackgroundColor}\n                />\n              }\n            >\n              <TransactionIcon\n                category={category}\n                status={displayedStatusKey}\n              />\n            </BadgeWrapper>\n        }\n        subtitle={\n          <TransactionStatusLabel\n            statusOnly\n            isPending={isPending}\n            isEarliestNonce={isEarliestNonce}\n            error={error}\n            date={date}\n            status={displayedStatusKey}\n          />\n        }\n        rightContent={\n          !isSignatureReq &&\n          !isApproval && (\n            <>\n              <Text\n                variant={TextVariant.bodyLgMedium}\n                fontWeight={FontWeight.Medium}\n                color={Color.textDefault}\n                title={primaryCurrency}\n                textAlign={TextAlign.Right}\n                data-testid=\"transaction-list-item-primary-currency\"\n                className=\"activity-list-item__primary-currency\"\n                ellipsis\n              >\n                {primaryCurrency}\n              </Text>\n              <Text\n                variant={TextVariant.bodyMd}\n                color={Color.textAlternative}\n                textAlign={TextAlign.Right}\n                data-testid=\"transaction-list-item-secondary-currency\"\n              >\n                {secondaryCurrency}\n              </Text>\n            </>\n          )\n        }\n      >\n        <Box paddingTop={4} className=\"transaction-list-item__pending-actions\">\n          {showCancelButton && (\n            <CancelButton\n              data-testid=\"cancel-button\"\n              transaction={transactionGroup.primaryTransaction}\n              cancelTransaction={cancelTransaction}\n            />\n          )}\n          {speedUpButton}\n        </Box>\n        {\n        }\n      </ActivityListItem>\n      {showDetails && (\n        <TransactionListItemDetails\n          title={title}\n          onClose={toggleShowDetails}\n          transactionGroup={transactionGroup}\n          primaryCurrency={primaryCurrency}\n          senderAddress={senderAddress}\n          recipientAddress={recipientAddress}\n          onRetry={retryTransaction}\n          showRetry={\n            status === TransactionStatus.failed &&\n            !isSwap &&\n            !isSmartTransaction\n          }\n          showSpeedUp={\n            shouldShowSpeedUp\n          }\n          isEarliestNonce={isEarliestNonce}\n          onCancel={cancelTransaction}\n          showCancel={\n            isPending &&\n            !hasCancelled\n          }\n          transactionStatus={() => (\n            <TransactionStatusLabel\n              isPending={isPending}\n              isEarliestNonce={isEarliestNonce}\n              error={error}\n              date={date}\n              status={displayedStatusKey}\n              statusOnly\n            />\n          )}\n        />\n      )}\n      {!supportsEIP1559 && showRetryEditGasPopover && (\n        <EditGasPopover\n          onClose={() => setShowRetryEditGasPopover(false)}\n          mode={EditGasModes.speedUp}\n          transaction={transactionGroup.primaryTransaction}\n        />\n      )}\n      {!supportsEIP1559 && showCancelEditGasPopover && (\n        <EditGasPopover\n          onClose={() => setShowCancelEditGasPopover(false)}\n          mode={EditGasModes.cancel}\n          transaction={transactionGroup.primaryTransaction}\n        />\n      )}\n    </>\n  );\n}\n\nTransactionListItemInner.propTypes = {\n  transactionGroup: PropTypes.object.isRequired,\n  isEarliestNonce: PropTypes.bool,\n  setEditGasMode: PropTypes.func,\n};\n\nconst TransactionListItem = (props) => {\n  const { transactionGroup } = props;\n  const [editGasMode, setEditGasMode] = useState();\n  const transaction = transactionGroup.primaryTransaction;\n\n  const supportsEIP1559 =\n    useSelector(checkNetworkAndAccountSupports1559) &&\n    !isLegacyTransaction(transaction?.txParams);\n\n  const isCustodian = Boolean(transactionGroup.primaryTransaction.custodyId);\n\n  return (\n    <GasFeeContextProvider\n      transaction={transactionGroup.primaryTransaction}\n      editGasMode={editGasMode}\n    >\n      <TransactionModalContextProvider>\n        <TransactionListItemInner {...props} setEditGasMode={setEditGasMode} />\n        {supportsEIP1559 && (\n          <>\n            {!isCustodian && <CancelSpeedupPopover />}\n            <EditGasFeePopover />\n            <AdvancedGasFeePopover />\n          </>\n        )}\n      </TransactionModalContextProvider>\n    </GasFeeContextProvider>\n  );\n};\n\nTransactionListItem.propTypes = {\n  transactionGroup: PropTypes.object.isRequired,\n};\n\nexport default TransactionListItem;\n","export { default } from './transaction-list.component';\n","import React, {\n  useMemo,\n  useState,\n  useCallback,\n  Fragment,\n  useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { TransactionType } from '@metamask/transaction-controller';\nimport {\n  nonceSortedCompletedTransactionsSelector,\n  nonceSortedPendingTransactionsSelector,\n} from '../../../selectors/transactions';\nimport {\n  getCurrentChainId,\n  getSelectedAccount,\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  getShouldHideZeroBalanceTokens,\n  ///: END:ONLY_INCLUDE_IF\n} from '../../../selectors';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport TransactionListItem from '../transaction-list-item';\nimport SmartTransactionListItem from '../transaction-list-item/smart-transaction-list-item.component';\nimport { TOKEN_CATEGORY_HASH } from '../../../helpers/constants/transactions';\nimport { SWAPS_CHAINID_CONTRACT_ADDRESS_MAP } from '../../../../shared/constants/swaps';\nimport { isEqualCaseInsensitive } from '../../../../shared/modules/string-utils';\nimport {\n  Box,\n  Button,\n  ButtonSize,\n  ButtonVariant,\n  IconName,\n  Text,\n} from '../../component-library';\nimport {\n  Display,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { formatDateWithYearContext } from '../../../helpers/utils/util';\n///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\nimport { useAccountTotalFiatBalance } from '../../../hooks/useAccountTotalFiatBalance';\nimport {\n  RAMPS_CARD_VARIANT_TYPES,\n  RampsCard,\n} from '../../multichain/ramps-card/ramps-card';\nimport { getIsNativeTokenBuyable } from '../../../ducks/ramps';\n///: END:ONLY_INCLUDE_IF\nimport { isSelectedInternalAccountBtc } from '../../../selectors/accounts';\nimport { openBlockExplorer } from '../../multichain/menu-items/view-explorer-menu-item';\nimport { getMultichainAccountUrl } from '../../../helpers/utils/multichain/blockExplorer';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport { useMultichainSelector } from '../../../hooks/useMultichainSelector';\nimport { getMultichainNetwork } from '../../../selectors/multichain';\n\nconst PAGE_INCREMENT = 10;\n\n// When we are on a token page, we only want to show transactions that involve that token.\n// In the case of token transfers or approvals, these will be transactions sent to the\n// token contract. In the case of swaps, these will be transactions sent to the swaps contract\n// and which have the token address in the transaction data.\n//\n// getTransactionGroupRecipientAddressFilter is used to determine whether a transaction matches\n// either of those criteria\nconst getTransactionGroupRecipientAddressFilter = (\n  recipientAddress,\n  chainId,\n) => {\n  return ({ initialTransaction: { txParams } }) => {\n    return (\n      isEqualCaseInsensitive(txParams?.to, recipientAddress) ||\n      (txParams?.to === SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[chainId] &&\n        txParams.data.match(recipientAddress.slice(2)))\n    );\n  };\n};\n\nconst tokenTransactionFilter = ({\n  initialTransaction: { type, destinationTokenSymbol, sourceTokenSymbol },\n}) => {\n  if (TOKEN_CATEGORY_HASH[type]) {\n    return false;\n  } else if (\n    [TransactionType.swap, TransactionType.swapAndSend].includes(type)\n  ) {\n    return destinationTokenSymbol === 'ETH' || sourceTokenSymbol === 'ETH';\n  }\n  return true;\n};\n\nconst getFilteredTransactionGroups = (\n  transactionGroups,\n  hideTokenTransactions,\n  tokenAddress,\n  chainId,\n) => {\n  if (hideTokenTransactions) {\n    return transactionGroups.filter(tokenTransactionFilter);\n  } else if (tokenAddress) {\n    return transactionGroups.filter(\n      getTransactionGroupRecipientAddressFilter(tokenAddress, chainId),\n    );\n  }\n  return transactionGroups;\n};\n\nconst groupTransactionsByDate = (transactionGroups) => {\n  const groupedTransactions = [];\n\n  transactionGroups.forEach((transactionGroup) => {\n    const date = formatDateWithYearContext(\n      transactionGroup.primaryTransaction.time,\n      'MMM d, y',\n      'MMM d',\n    );\n\n    const existingGroup = groupedTransactions.find(\n      (group) => group.date === date,\n    );\n\n    if (existingGroup) {\n      existingGroup.transactionGroups.push(transactionGroup);\n    } else {\n      groupedTransactions.push({\n        date,\n        dateMillis: transactionGroup.primaryTransaction.time,\n        transactionGroups: [transactionGroup],\n      });\n    }\n    groupedTransactions.sort((a, b) => b.dateMillis - a.dateMillis);\n  });\n\n  return groupedTransactions;\n};\n\nexport default function TransactionList({\n  hideTokenTransactions,\n  tokenAddress,\n  boxProps,\n}) {\n  const [limit, setLimit] = useState(PAGE_INCREMENT);\n  const t = useI18nContext();\n\n  const unfilteredPendingTransactions = useSelector(\n    nonceSortedPendingTransactionsSelector,\n  );\n  const unfilteredCompletedTransactions = useSelector(\n    nonceSortedCompletedTransactionsSelector,\n  );\n  const chainId = useSelector(getCurrentChainId);\n  const selectedAccount = useSelector(getSelectedAccount);\n\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  const shouldHideZeroBalanceTokens = useSelector(\n    getShouldHideZeroBalanceTokens,\n  );\n  const { totalFiatBalance } = useAccountTotalFiatBalance(\n    selectedAccount,\n    shouldHideZeroBalanceTokens,\n  );\n  const balanceIsZero = Number(totalFiatBalance) === 0;\n  const isBuyableChain = useSelector(getIsNativeTokenBuyable);\n  const showRampsCard = isBuyableChain && balanceIsZero;\n  ///: END:ONLY_INCLUDE_IF\n\n  const renderDateStamp = (index, dateGroup) => {\n    return index === 0 ? (\n      <Text\n        paddingTop={4}\n        paddingInline={4}\n        variant={TextVariant.bodyMd}\n        color={TextColor.textDefault}\n        key={dateGroup.dateMillis}\n      >\n        {dateGroup.date}\n      </Text>\n    ) : null;\n  };\n\n  const pendingTransactions = useMemo(\n    () =>\n      groupTransactionsByDate(\n        getFilteredTransactionGroups(\n          unfilteredPendingTransactions,\n          hideTokenTransactions,\n          tokenAddress,\n          chainId,\n        ),\n      ),\n    [\n      hideTokenTransactions,\n      tokenAddress,\n      unfilteredPendingTransactions,\n      chainId,\n    ],\n  );\n\n  const completedTransactions = useMemo(\n    () =>\n      groupTransactionsByDate(\n        getFilteredTransactionGroups(\n          unfilteredCompletedTransactions,\n          hideTokenTransactions,\n          tokenAddress,\n          chainId,\n        ),\n      ),\n    [\n      hideTokenTransactions,\n      tokenAddress,\n      unfilteredCompletedTransactions,\n      chainId,\n    ],\n  );\n\n  const viewMore = useCallback(\n    () => setLimit((prev) => prev + PAGE_INCREMENT),\n    [],\n  );\n\n  // Remove transactions within each date group that are incoming transactions\n  // to a user that not the current one.\n  const removeIncomingTxsButToAnotherAddress = (dateGroup) => {\n    const isIncomingTxsButToAnotherAddress = (transaction) =>\n      transaction.type === TransactionType.incoming &&\n      transaction.txParams.to.toLowerCase() !==\n        selectedAccount.address.toLowerCase();\n\n    dateGroup.transactionGroups = dateGroup.transactionGroups.map(\n      (transactionGroup) => {\n        transactionGroup.transactions = transactionGroup.transactions.filter(\n          (transaction) => !isIncomingTxsButToAnotherAddress(transaction),\n        );\n\n        return transactionGroup;\n      },\n    );\n\n    return dateGroup;\n  };\n\n  // Remove transaction groups with no transactions\n  const removeTxGroupsWithNoTx = (dateGroup) => {\n    dateGroup.transactionGroups = dateGroup.transactionGroups.filter(\n      (transactionGroup) => {\n        return transactionGroup.transactions.length > 0;\n      },\n    );\n\n    return dateGroup;\n  };\n\n  // Remove date groups with no transaction groups\n  const dateGroupsWithTransactionGroups = (dateGroup) =>\n    dateGroup.transactionGroups.length > 0;\n\n  // Check if the current account is a bitcoin account\n  const isBitcoinAccount = useSelector(isSelectedInternalAccountBtc);\n  const trackEvent = useContext(MetaMetricsContext);\n  const multichainNetwork = useMultichainSelector(\n    getMultichainNetwork,\n    selectedAccount,\n  );\n  if (isBitcoinAccount) {\n    const addressLink = getMultichainAccountUrl(\n      selectedAccount.address,\n      multichainNetwork,\n    );\n    const metricsLocation = 'Activity Tab';\n    return (\n      <Box className=\"transaction-list\" {...boxProps}>\n        <Box className=\"transaction-list__empty-text\">\n          {t('bitcoinActivityNotSupported')}\n        </Box>\n        <Box className=\"transaction-list__view-on-block-explorer\">\n          <Button\n            display={Display.Flex}\n            variant={ButtonVariant.Primary}\n            size={ButtonSize.Sm}\n            endIconName={IconName.Export}\n            onClick={() =>\n              openBlockExplorer(addressLink, metricsLocation, trackEvent)\n            }\n          >\n            {t('viewOnBlockExplorer')}\n          </Button>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      {\n        ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n        showRampsCard ? (\n          <RampsCard variant={RAMPS_CARD_VARIANT_TYPES.ACTIVITY} />\n        ) : null\n        ///: END:ONLY_INCLUDE_IF\n      }\n      <Box className=\"transaction-list\" {...boxProps}>\n        <Box className=\"transaction-list__transactions\">\n          {pendingTransactions.length > 0 && (\n            <Box className=\"transaction-list__pending-transactions\">\n              {pendingTransactions.map((dateGroup) => {\n                return dateGroup.transactionGroups.map(\n                  (transactionGroup, index) => {\n                    if (\n                      transactionGroup.initialTransaction?.isSmartTransaction\n                    ) {\n                      return (\n                        <Fragment key={`${transactionGroup.nonce}:${index}`}>\n                          {renderDateStamp(index, dateGroup)}\n                          <SmartTransactionListItem\n                            isEarliestNonce={index === 0}\n                            smartTransaction={\n                              transactionGroup.initialTransaction\n                            }\n                            transactionGroup={transactionGroup}\n                          />\n                        </Fragment>\n                      );\n                    }\n                    return (\n                      <Fragment key={`${transactionGroup.nonce}:${index}`}>\n                        {renderDateStamp(index, dateGroup)}\n                        <TransactionListItem\n                          isEarliestNonce={index === 0}\n                          transactionGroup={transactionGroup}\n                        />\n                      </Fragment>\n                    );\n                  },\n                );\n              })}\n            </Box>\n          )}\n          <Box className=\"transaction-list__completed-transactions\">\n            {completedTransactions.length > 0 ? (\n              completedTransactions\n                .map(removeIncomingTxsButToAnotherAddress)\n                .map(removeTxGroupsWithNoTx)\n                .filter(dateGroupsWithTransactionGroups)\n                .slice(0, limit)\n                .map((dateGroup) => {\n                  return dateGroup.transactionGroups.map(\n                    (transactionGroup, index) => {\n                      return (\n                        <Fragment\n                          key={`${transactionGroup.nonce}:${\n                            transactionGroup.initialTransaction\n                              ? index\n                              : limit + index - 10\n                          }`}\n                        >\n                          {renderDateStamp(index, dateGroup)}\n                          {transactionGroup.initialTransaction\n                            ?.isSmartTransaction ? (\n                            <SmartTransactionListItem\n                              transactionGroup={transactionGroup}\n                              smartTransaction={\n                                transactionGroup.initialTransaction\n                              }\n                            />\n                          ) : (\n                            <TransactionListItem\n                              transactionGroup={transactionGroup}\n                            />\n                          )}\n                        </Fragment>\n                      );\n                    },\n                  );\n                })\n            ) : (\n              <Box className=\"transaction-list__empty\">\n                <Box className=\"transaction-list__empty-text\">\n                  {t('noTransactions')}\n                </Box>\n              </Box>\n            )}\n            {completedTransactions.length > limit && (\n              <Button\n                className=\"transaction-list__view-more\"\n                type=\"secondary\"\n                onClick={viewMore}\n              >\n                {t('viewMore')}\n              </Button>\n            )}\n          </Box>\n        </Box>\n      </Box>\n    </>\n  );\n}\n\nTransactionList.propTypes = {\n  hideTokenTransactions: PropTypes.bool,\n  tokenAddress: PropTypes.string,\n  boxProps: PropTypes.object,\n};\n\nTransactionList.defaultProps = {\n  hideTokenTransactions: false,\n  tokenAddress: undefined,\n  boxProps: undefined,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport Tooltip from '../../ui/tooltip';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { TransactionGroupStatus } from '../../../../shared/constants/transaction';\n\nconst QUEUED_PSEUDO_STATUS = 'queued';\nconst SIGNING_PSUEDO_STATUS = 'signing';\n\n/**\n * A note about status logic for this component:\n * Approved, Signed and Submitted statuses are all treated, effectively\n * as pending. Transactions are only approved or signed for less than a\n * second, usually, and ultimately should be rendered in the UI no\n * differently than a pending transaction.\n *\n * Confirmed transactions are not especially highlighted except that their\n * status label will be the date the transaction was finalized.\n */\nconst pendingStatusHash = {\n  [TransactionStatus.submitted]: TransactionGroupStatus.pending,\n  [TransactionStatus.approved]: TransactionGroupStatus.pending,\n};\n\nconst statusToClassNameHash = {\n  [TransactionStatus.unapproved]: 'transaction-status-label--unapproved',\n  [TransactionStatus.rejected]: 'transaction-status-label--rejected',\n  [TransactionStatus.failed]: 'transaction-status-label--failed',\n  [TransactionStatus.dropped]: 'transaction-status-label--dropped',\n  [TransactionGroupStatus.cancelled]: 'transaction-status-label--cancelled',\n  [QUEUED_PSEUDO_STATUS]: 'transaction-status-label--queued',\n  [TransactionGroupStatus.pending]: 'transaction-status-label--pending',\n};\n\nfunction getStatusKey(status, isEarliestNonce) {\n  if (status === TransactionStatus.approved) {\n    return SIGNING_PSUEDO_STATUS;\n  }\n\n  if (pendingStatusHash[status]) {\n    return isEarliestNonce\n      ? TransactionGroupStatus.pending\n      : QUEUED_PSEUDO_STATUS;\n  }\n\n  return status;\n}\n\nexport default function TransactionStatusLabel({\n  status,\n  date,\n  error,\n  isEarliestNonce,\n  className,\n  statusOnly,\n}) {\n  const t = useI18nContext();\n  const statusKey = getStatusKey(status, isEarliestNonce);\n  let tooltipText = error?.rpc?.message || error?.message;\n  let statusText = statusKey && t(statusKey);\n\n\n  if (statusKey === TransactionStatus.confirmed && !statusOnly) {\n    statusText = date;\n  }\n\n\n  return (\n    <Tooltip\n      position=\"top\"\n      title={tooltipText}\n      wrapperClassName={classnames(\n        'transaction-status-label',\n        `transaction-status-label--${statusKey}`,\n        className,\n        statusToClassNameHash[statusKey],\n      )}\n    >\n      {statusText}\n    </Tooltip>\n  );\n}\n\nTransactionStatusLabel.propTypes = {\n  status: PropTypes.string,\n  className: PropTypes.string,\n  date: PropTypes.string,\n  error: PropTypes.object,\n  isEarliestNonce: PropTypes.bool,\n  statusOnly: PropTypes.bool,\n};\n","export { default } from './user-preferenced-currency-display.component';\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { EtherDenomination } from '../../../../shared/constants/common';\nimport { PRIMARY, SECONDARY } from '../../../helpers/constants/common';\nimport CurrencyDisplay from '../../ui/currency-display';\nimport { useUserPreferencedCurrency } from '../../../hooks/useUserPreferencedCurrency';\nimport { AvatarNetwork, AvatarNetworkSize } from '../../component-library';\nimport {\n  getMultichainNativeCurrency,\n  getMultichainCurrentNetwork,\n} from '../../../selectors/multichain';\nimport { useMultichainSelector } from '../../../hooks/useMultichainSelector';\n\n/* eslint-disable jsdoc/require-param-name */\n// eslint-disable-next-line jsdoc/require-param\n/** @param {PropTypes.InferProps<typeof UserPreferencedCurrencyDisplayPropTypes>>} */\nexport default function UserPreferencedCurrencyDisplay({\n  'data-testid': dataTestId,\n  account,\n  ethNumberOfDecimals,\n  fiatNumberOfDecimals,\n  numberOfDecimals: propsNumberOfDecimals,\n  showEthLogo,\n  type,\n  showFiat,\n  showNative,\n  showCurrencySuffix,\n  ...restProps\n}) {\n  const currentNetwork = useMultichainSelector(\n    getMultichainCurrentNetwork,\n    account,\n  );\n  const nativeCurrency = useMultichainSelector(\n    getMultichainNativeCurrency,\n    account,\n  );\n  const { currency, numberOfDecimals } = useUserPreferencedCurrency(type, {\n    account,\n    ethNumberOfDecimals,\n    fiatNumberOfDecimals,\n    numberOfDecimals: propsNumberOfDecimals,\n    showFiatOverride: showFiat,\n    showNativeOverride: showNative,\n  });\n  const prefixComponent = useMemo(() => {\n    return (\n      showEthLogo &&\n      currency === nativeCurrency && (\n        <AvatarNetwork\n          size={AvatarNetworkSize.Xs}\n          name={currentNetwork?.nickname}\n          src={currentNetwork?.rpcPrefs?.imageUrl}\n        />\n      )\n    );\n  }, [\n    currency,\n    showEthLogo,\n    nativeCurrency,\n    currentNetwork?.nickname,\n    currentNetwork?.rpcPrefs?.imageUrl,\n  ]);\n  return (\n    <CurrencyDisplay\n      {...restProps}\n      account={account}\n      currency={currency}\n      data-testid={dataTestId}\n      numberOfDecimals={numberOfDecimals}\n      prefixComponent={prefixComponent}\n      suffix={showCurrencySuffix && !showEthLogo && currency}\n    />\n  );\n}\n\nconst UserPreferencedCurrencyDisplayPropTypes = {\n  className: PropTypes.string,\n  account: PropTypes.object,\n  'data-testid': PropTypes.string,\n  prefix: PropTypes.string,\n  value: PropTypes.string,\n  numberOfDecimals: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  hideLabel: PropTypes.bool,\n  hideTitle: PropTypes.bool,\n  style: PropTypes.object,\n  showEthLogo: PropTypes.bool,\n  type: PropTypes.oneOf([PRIMARY, SECONDARY]),\n  ethNumberOfDecimals: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  fiatNumberOfDecimals: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  showFiat: PropTypes.bool,\n  showNative: PropTypes.bool,\n  showCurrencySuffix: PropTypes.bool,\n  /**\n   * Following are the props from CurrencyDisplay component.\n   * UserPreferencedCurrencyDisplay component should also accept all the props from Currency component\n   */\n  currency: PropTypes.string,\n  denomination: PropTypes.oneOf([\n    EtherDenomination.GWEI,\n    EtherDenomination.ETH,\n  ]),\n  displayValue: PropTypes.string,\n  prefixComponent: PropTypes.node,\n  suffix: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  prefixComponentWrapperProps: PropTypes.object,\n  textProps: PropTypes.object,\n  suffixProps: PropTypes.object,\n};\n\nUserPreferencedCurrencyDisplay.propTypes =\n  UserPreferencedCurrencyDisplayPropTypes;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  getMultichainProviderConfig,\n  getMultichainSelectedAccountCachedBalance,\n} from '../../../selectors/multichain';\n///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\nimport { getIsBitcoinBuyable } from '../../../ducks/ramps';\n///: END:ONLY_INCLUDE_IF\nimport { CoinOverview } from './coin-overview';\n\ntype BtcOverviewProps = {\n  className?: string;\n};\n\nconst BtcOverview = ({ className }: BtcOverviewProps) => {\n  const { chainId } = useSelector(getMultichainProviderConfig);\n  const balance = useSelector(getMultichainSelectedAccountCachedBalance);\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  const isBtcBuyable = useSelector(getIsBitcoinBuyable);\n  ///: END:ONLY_INCLUDE_IF\n\n  return (\n    <CoinOverview\n      balance={balance}\n      balanceIsCached\n      className={className}\n      chainId={chainId}\n      isSigningEnabled={false}\n      isSwapsChain={false}\n      ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n      isBridgeChain={false}\n      isBuyableChain={isBtcBuyable}\n      ///: END:ONLY_INCLUDE_IF\n    />\n  );\n};\n\nexport default BtcOverview;\n","import React, { useCallback, useContext, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  useHistory,\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  useLocation,\n  ///: END:ONLY_INCLUDE_IF\n} from 'react-router-dom';\n///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\nimport { toHex } from '@metamask/controller-utils';\n///: END:ONLY_INCLUDE_IF\nimport {\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  isCaipChainId,\n  ///: END:ONLY_INCLUDE_IF\n  CaipChainId,\n} from '@metamask/utils';\n\n///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\nimport { ChainId } from '../../../../shared/constants/network';\n///: END:ONLY_INCLUDE_IF\nimport { I18nContext } from '../../../contexts/i18n';\nimport {\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  BUILD_QUOTE_ROUTE,\n  ///: END:ONLY_INCLUDE_IF\n  SEND_ROUTE,\n} from '../../../helpers/constants/routes';\nimport {\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  SwapsEthToken,\n  getCurrentKeyring,\n  ///: END:ONLY_INCLUDE_IF\n  getUseExternalServices,\n  getSelectedAccount,\n} from '../../../selectors';\nimport Tooltip from '../../ui/tooltip';\n///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\nimport { setSwapsFromToken } from '../../../ducks/swaps/swaps';\nimport { isHardwareKeyring } from '../../../helpers/utils/hardware';\n///: END:ONLY_INCLUDE_IF\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  MetaMetricsSwapsEventSource,\n  ///: END:ONLY_INCLUDE_IF\n} from '../../../../shared/constants/metametrics';\nimport { AssetType } from '../../../../shared/constants/transaction';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport { startNewDraftTransaction } from '../../../ducks/send';\nimport {\n  Display,\n  IconColor,\n  JustifyContent,\n} from '../../../helpers/constants/design-system';\nimport { Box, Icon, IconName } from '../../component-library';\nimport IconButton from '../../ui/icon-button';\n///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\nimport useRamps from '../../../hooks/ramps/useRamps/useRamps';\nimport useBridging from '../../../hooks/bridge/useBridging';\nimport { ReceiveModal } from '../../multichain/receive-modal';\n///: END:ONLY_INCLUDE_IF\n\nconst CoinButtons = ({\n  chainId,\n  trackingLocation,\n  isSwapsChain,\n  isSigningEnabled,\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  isBridgeChain,\n  isBuyableChain,\n  defaultSwapsToken,\n  ///: END:ONLY_INCLUDE_IF\n  classPrefix = 'coin',\n}: {\n  chainId: `0x${string}` | CaipChainId | number;\n  trackingLocation: string;\n  isSwapsChain: boolean;\n  isSigningEnabled: boolean;\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  isBridgeChain: boolean;\n  isBuyableChain: boolean;\n  defaultSwapsToken?: SwapsEthToken;\n  ///: END:ONLY_INCLUDE_IF\n  classPrefix?: string;\n}) => {\n  const t = useContext(I18nContext);\n  const dispatch = useDispatch();\n\n  const trackEvent = useContext(MetaMetricsContext);\n  const [showReceiveModal, setShowReceiveModal] = useState(false);\n\n  const { address: selectedAddress } = useSelector(getSelectedAccount);\n  const history = useHistory();\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  const location = useLocation();\n  const keyring = useSelector(getCurrentKeyring);\n  const usingHardwareWallet = isHardwareKeyring(keyring?.type);\n  ///: END:ONLY_INCLUDE_IF\n\n  const isExternalServicesEnabled = useSelector(getUseExternalServices);\n\n  const buttonTooltips = {\n    buyButton: [\n      ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n      { condition: !isBuyableChain, message: '' },\n      ///: END:ONLY_INCLUDE_IF\n    ],\n    sendButton: [\n      { condition: !isSigningEnabled, message: 'methodNotSupported' },\n    ],\n    swapButton: [\n      { condition: !isSwapsChain, message: 'currentlyUnavailable' },\n      { condition: !isSigningEnabled, message: 'methodNotSupported' },\n    ],\n    bridgeButton: [\n      ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n      { condition: !isBridgeChain, message: 'currentlyUnavailable' },\n      ///: END:ONLY_INCLUDE_IF\n      { condition: !isSigningEnabled, message: 'methodNotSupported' },\n    ],\n  };\n\n  const generateTooltip = (\n    buttonKey: keyof typeof buttonTooltips,\n    contents: React.ReactElement,\n  ) => {\n    const conditions = buttonTooltips[buttonKey];\n    const tooltipInfo = conditions.find(({ condition }) => condition);\n    if (tooltipInfo?.message) {\n      return (\n        <Tooltip title={t(tooltipInfo.message)} position=\"bottom\">\n          {contents}\n        </Tooltip>\n      );\n    }\n    return contents;\n  };\n\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  const getChainId = (): CaipChainId | ChainId => {\n    if (isCaipChainId(chainId)) {\n      return chainId as CaipChainId;\n    }\n    // Otherwise we assume that's an EVM chain ID, so use the usual 0x prefix\n    return toHex(chainId) as ChainId;\n  };\n  ///: END:ONLY_INCLUDE_IF\n\n\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  const { openBuyCryptoInPdapp } = useRamps();\n\n  const { openBridgeExperience } = useBridging();\n  ///: END:ONLY_INCLUDE_IF\n\n  const handleSendOnClick = useCallback(async () => {\n    trackEvent(\n      {\n        event: MetaMetricsEventName.NavSendButtonClicked,\n        category: MetaMetricsEventCategory.Navigation,\n        properties: {\n          token_symbol: 'ETH',\n          location: 'Home',\n          text: 'Send',\n          chain_id: chainId,\n        },\n      },\n      { excludeMetaMetricsId: false },\n    );\n    await dispatch(startNewDraftTransaction({ type: AssetType.native }));\n    history.push(SEND_ROUTE);\n  }, [chainId]);\n\n  const handleSwapOnClick = useCallback(async () => {\n\n    ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n    if (isSwapsChain) {\n      trackEvent({\n        event: MetaMetricsEventName.NavSwapButtonClicked,\n        category: MetaMetricsEventCategory.Swaps,\n        properties: {\n          token_symbol: 'ETH',\n          location: MetaMetricsSwapsEventSource.MainView,\n          text: 'Swap',\n          chain_id: chainId,\n        },\n      });\n      dispatch(setSwapsFromToken(defaultSwapsToken));\n      if (usingHardwareWallet) {\n        if (global.platform.openExtensionInBrowser) {\n          global.platform.openExtensionInBrowser(BUILD_QUOTE_ROUTE);\n        }\n      } else {\n        history.push(BUILD_QUOTE_ROUTE);\n      }\n    }\n    ///: END:ONLY_INCLUDE_IF\n  }, [\n    isSwapsChain,\n    chainId,\n    ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n    usingHardwareWallet,\n    defaultSwapsToken,\n    ///: END:ONLY_INCLUDE_IF\n  ]);\n\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  const handleBuyAndSellOnClick = useCallback(() => {\n    openBuyCryptoInPdapp(getChainId());\n    trackEvent({\n      event: MetaMetricsEventName.NavBuyButtonClicked,\n      category: MetaMetricsEventCategory.Navigation,\n      properties: {\n        location: 'Home',\n        text: 'Buy',\n        chain_id: chainId,\n        token_symbol: defaultSwapsToken,\n      },\n    });\n  }, [chainId, defaultSwapsToken]);\n\n  const handleBridgeOnClick = useCallback(() => {\n    if (!defaultSwapsToken) {\n      return;\n    }\n    openBridgeExperience(\n      'Home',\n      defaultSwapsToken,\n      location.pathname.includes('asset') ? '&token=native' : '',\n    );\n  }, [defaultSwapsToken, location, openBridgeExperience]);\n  ///: END:ONLY_INCLUDE_IF\n\n  return (\n    <Box display={Display.Flex} justifyContent={JustifyContent.spaceEvenly}>\n      {\n        ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n        <IconButton\n          className={`${classPrefix}-overview__button`}\n          Icon={\n            <Icon name={IconName.PlusMinus} color={IconColor.primaryInverse} />\n          }\n          disabled={!isBuyableChain}\n          data-testid={`${classPrefix}-overview-buy`}\n          label={t('buyAndSell')}\n          onClick={handleBuyAndSellOnClick}\n          tooltipRender={(contents: React.ReactElement) =>\n            generateTooltip('buyButton', contents)\n          }\n        />\n        ///: END:ONLY_INCLUDE_IF\n      }\n\n      {\n      }\n\n      <IconButton\n        className={`${classPrefix}-overview__button`}\n        disabled={\n          !isSwapsChain || !isSigningEnabled || !isExternalServicesEnabled\n        }\n        Icon={\n          <Icon\n            name={IconName.SwapHorizontal}\n            color={IconColor.primaryInverse}\n          />\n        }\n        onClick={handleSwapOnClick}\n        label={t('swap')}\n        data-testid=\"token-overview-button-swap\"\n        tooltipRender={(contents: React.ReactElement) =>\n          generateTooltip('swapButton', contents)\n        }\n      />\n      {\n        ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n        <IconButton\n          className={`${classPrefix}-overview__button`}\n          disabled={!isBridgeChain || !isSigningEnabled}\n          data-testid={`${classPrefix}-overview-bridge`}\n          Icon={\n            <Icon name={IconName.Bridge} color={IconColor.primaryInverse} />\n          }\n          label={t('bridge')}\n          onClick={handleBridgeOnClick}\n          tooltipRender={(contents: React.ReactElement) =>\n            generateTooltip('bridgeButton', contents)\n          }\n        />\n        ///: END:ONLY_INCLUDE_IF\n      }\n      <IconButton\n        className={`${classPrefix}-overview__button`}\n        data-testid={`${classPrefix}-overview-send`}\n        Icon={\n          <Icon\n            name={IconName.Arrow2UpRight}\n            color={IconColor.primaryInverse}\n          />\n        }\n        disabled={!isSigningEnabled}\n        label={t('send')}\n        onClick={handleSendOnClick}\n        tooltipRender={(contents: React.ReactElement) =>\n          generateTooltip('sendButton', contents)\n        }\n      />\n      {\n        <>\n          {showReceiveModal && (\n            <ReceiveModal\n              address={selectedAddress}\n              onClose={() => setShowReceiveModal(false)}\n            />\n          )}\n          <IconButton\n            className={`${classPrefix}-overview__button`}\n            data-testid={`${classPrefix}-overview-receive`}\n            Icon={\n              <Icon\n                name={IconName.ScanBarcode}\n                color={IconColor.primaryInverse}\n              />\n            }\n            label={t('receive')}\n            onClick={() => {\n              trackEvent({\n                event: MetaMetricsEventName.NavReceiveButtonClicked,\n                category: MetaMetricsEventCategory.Navigation,\n                properties: {\n                  text: 'Receive',\n                  location: trackingLocation,\n                  chain_id: chainId,\n                },\n              });\n              setShowReceiveModal(true);\n            }}\n          />\n        </>\n      }\n    </Box>\n  );\n};\n\nexport default CoinButtons;\n","import React, { useContext, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport classnames from 'classnames';\nimport { zeroAddress } from 'ethereumjs-util';\nimport { CaipChainId } from '@metamask/utils';\nimport type { Hex } from '@metamask/utils';\nimport { Icon, IconName, IconSize } from '../../component-library';\nimport { IconColor } from '../../../helpers/constants/design-system';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { getPortfolioUrl } from '../../../helpers/utils/portfolio';\nimport { I18nContext } from '../../../contexts/i18n';\nimport Tooltip from '../../ui/tooltip';\nimport UserPreferencedCurrencyDisplay from '../user-preferenced-currency-display';\nimport { PRIMARY, SECONDARY } from '../../../helpers/constants/common';\nimport {\n  getDataCollectionForMarketing,\n  getMetaMetricsId,\n  getParticipateInMetaMetrics,\n  getPreferences,\n  getTokensMarketData,\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  SwapsEthToken,\n  ///: END:ONLY_INCLUDE_IF\n} from '../../../selectors';\nimport Spinner from '../../ui/spinner';\nimport { useIsOriginalNativeTokenSymbol } from '../../../hooks/useIsOriginalNativeTokenSymbol';\nimport { showPrimaryCurrency } from '../../../../shared/modules/currency-display.utils';\nimport { PercentageAndAmountChange } from '../../multichain/token-list-item/price/percentage-and-amount-change/percentage-and-amount-change';\nimport {\n  getMultichainIsEvm,\n  getMultichainProviderConfig,\n  getMultichainShouldShowFiat,\n} from '../../../selectors/multichain';\nimport WalletOverview from './wallet-overview';\nimport CoinButtons from './coin-buttons';\n\nexport type CoinOverviewProps = {\n  balance: string;\n  balanceIsCached: boolean;\n  className?: string;\n  classPrefix?: string;\n  chainId: CaipChainId | Hex;\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  // FIXME: This seems to be for Ethereum only\n  defaultSwapsToken?: SwapsEthToken;\n  isBridgeChain: boolean;\n  isBuyableChain: boolean;\n  ///: END:ONLY_INCLUDE_IF\n  isSwapsChain: boolean;\n  isSigningEnabled: boolean;\n};\n\nexport const CoinOverview = ({\n  balance,\n  balanceIsCached,\n  className,\n  classPrefix = 'coin',\n  chainId,\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  defaultSwapsToken,\n  isBridgeChain,\n  isBuyableChain,\n  ///: END:ONLY_INCLUDE_IF\n  isSwapsChain,\n  isSigningEnabled,\n}: CoinOverviewProps) => {\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  // Pre-conditions\n  if (isSwapsChain && defaultSwapsToken === undefined) {\n    throw new Error('defaultSwapsToken is required');\n  }\n  ///: END:ONLY_INCLUDE_IF\n\n  const t = useContext(I18nContext);\n  const trackEvent = useContext(MetaMetricsContext);\n\n  const metaMetricsId = useSelector(getMetaMetricsId);\n  const isMetaMetricsEnabled = useSelector(getParticipateInMetaMetrics);\n  const isMarketingEnabled = useSelector(getDataCollectionForMarketing);\n\n  const isEvm = useSelector(getMultichainIsEvm);\n  const showFiat = useSelector(getMultichainShouldShowFiat);\n  const { useNativeCurrencyAsPrimaryCurrency } = useSelector(getPreferences);\n  const { ticker, type, rpcUrl } = useSelector(getMultichainProviderConfig);\n  const isOriginalNativeSymbol = useIsOriginalNativeTokenSymbol(\n    chainId,\n    ticker,\n    type,\n    rpcUrl,\n  );\n  const tokensMarketData = useSelector(getTokensMarketData);\n\n  const handlePortfolioOnClick = useCallback(() => {\n    const url = getPortfolioUrl(\n      '',\n      'ext_portfolio_button',\n      metaMetricsId,\n      isMetaMetricsEnabled,\n      isMarketingEnabled,\n    );\n    global.platform.openTab({ url });\n    trackEvent({\n      category: MetaMetricsEventCategory.Navigation,\n      event: MetaMetricsEventName.PortfolioLinkClicked,\n      properties: {\n        location: 'Home',\n        text: 'Portfolio',\n      },\n    });\n  }, [isMarketingEnabled, isMetaMetricsEnabled, metaMetricsId, trackEvent]);\n\n  return (\n    <WalletOverview\n      balance={\n        <Tooltip\n          position=\"top\"\n          title={t('balanceOutdated')}\n          disabled={!balanceIsCached}\n        >\n          <div className={`${classPrefix}-overview__balance`}>\n            <div className={`${classPrefix}-overview__primary-container`}>\n              {balance ? (\n                <UserPreferencedCurrencyDisplay\n                  style={{ display: 'contents' }}\n                  className={classnames(\n                    `${classPrefix}-overview__primary-balance`,\n                    {\n                      [`${classPrefix}-overview__cached-balance`]:\n                        balanceIsCached,\n                    },\n                  )}\n                  data-testid={`${classPrefix}-overview__primary-currency`}\n                  value={balance}\n                  type={\n                    showPrimaryCurrency(\n                      isOriginalNativeSymbol,\n                      useNativeCurrencyAsPrimaryCurrency,\n                    )\n                      ? PRIMARY\n                      : SECONDARY\n                  }\n                  ethNumberOfDecimals={4}\n                  hideTitle\n                />\n              ) : (\n                <Spinner className=\"loading-overlay__spinner\" />\n              )}\n              {balanceIsCached && (\n                <span className={`${classPrefix}-overview__cached-star`}>\n                  *\n                </span>\n              )}\n            </div>\n            <div className=\"wallet-overview__currency-wrapper\">\n              {showFiat && isOriginalNativeSymbol && balance && (\n                <UserPreferencedCurrencyDisplay\n                  className={classnames({\n                    [`${classPrefix}__cached-secondary-balance`]:\n                      balanceIsCached,\n                    [`${classPrefix}__secondary-balance`]: !balanceIsCached,\n                  })}\n                  data-testid={`${classPrefix}-overview__secondary-currency`}\n                  value={balance}\n                  type={SECONDARY}\n                  ethNumberOfDecimals={4}\n                  hideTitle\n                />\n              )}\n              <div\n                onClick={handlePortfolioOnClick}\n                className=\"wallet-overview__portfolio_button\"\n                data-testid=\"portfolio-link\"\n              >\n                {t('portfolio')}\n                <Icon\n                  size={IconSize.Sm}\n                  name={IconName.Export}\n                  color={IconColor.primaryDefault}\n                />\n              </div>\n            </div>\n            {isEvm && (\n              <PercentageAndAmountChange\n                value={tokensMarketData?.[zeroAddress()]?.pricePercentChange1d}\n              />\n            )}\n          </div>\n        </Tooltip>\n      }\n      buttons={\n        <CoinButtons\n          {...{\n            trackingLocation: 'home',\n            chainId,\n            isSwapsChain,\n            isSigningEnabled,\n            ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n            isBridgeChain,\n            isBuyableChain,\n            defaultSwapsToken,\n            ///: END:ONLY_INCLUDE_IF\n            classPrefix,\n          }}\n        />\n      }\n      className={className}\n    />\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { EthMethod } from '@metamask/keyring-api';\nimport { isEqual } from 'lodash';\nimport {\n  isBalanceCached,\n  getIsSwapsChain,\n  getCurrentChainId,\n  getSelectedInternalAccount,\n  getSelectedAccountCachedBalance,\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  getSwapsDefaultToken,\n  getIsBridgeChain,\n  ///: END:ONLY_INCLUDE_IF\n} from '../../../selectors';\n///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\nimport { getIsNativeTokenBuyable } from '../../../ducks/ramps';\n///: END:ONLY_INCLUDE_IF\nimport { CoinOverview } from './coin-overview';\n\nconst EthOverview = ({ className }) => {\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  const isBridgeChain = useSelector(getIsBridgeChain);\n  const isBuyableChain = useSelector(getIsNativeTokenBuyable);\n  // FIXME: This causes re-renders, so use isEqual to avoid this\n  const defaultSwapsToken = useSelector(getSwapsDefaultToken, isEqual);\n  ///: END:ONLY_INCLUDE_IF\n  const balanceIsCached = useSelector(isBalanceCached);\n  const chainId = useSelector(getCurrentChainId);\n  const balance = useSelector(getSelectedAccountCachedBalance);\n\n  // FIXME: This causes re-renders, so use isEqual to avoid this\n  const account = useSelector(getSelectedInternalAccount, isEqual);\n  const isSwapsChain = useSelector(getIsSwapsChain);\n  const isSigningEnabled =\n    account.methods.includes(EthMethod.SignTransaction) ||\n    account.methods.includes(EthMethod.SignUserOperation);\n\n  return (\n    <CoinOverview\n      balance={balance}\n      balanceIsCached={balanceIsCached}\n      className={className}\n      classPrefix=\"eth\"\n      chainId={chainId}\n      isSigningEnabled={isSigningEnabled}\n      isSwapsChain={isSwapsChain}\n      ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n      isBridgeChain={isBridgeChain}\n      isBuyableChain={isBuyableChain}\n      defaultSwapsToken={defaultSwapsToken}\n      ///: END:ONLY_INCLUDE_IF\n    />\n  );\n};\n\nEthOverview.propTypes = {\n  className: PropTypes.string,\n};\n\nexport default EthOverview;\n","export { default as EthOverview } from './eth-overview';\nexport { default as BtcOverview } from './btc-overview';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst WalletOverview = ({ balance, buttons, className }) => {\n  return (\n    <div className={classnames('wallet-overview', className)}>\n      <div className=\"wallet-overview__balance\">{balance}</div>\n      <div className=\"wallet-overview__buttons\">{buttons}</div>\n    </div>\n  );\n};\n\nWalletOverview.propTypes = {\n  balance: PropTypes.element.isRequired,\n  buttons: PropTypes.element.isRequired,\n  className: PropTypes.string,\n};\n\nexport default WalletOverview;\n","export { default } from './whats-new-popup';\n","import classnames from 'classnames';\nimport { debounce } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport {\n  NOTIFICATION_DROP_LEDGER_FIREFOX,\n  getTranslatedUINotifications,\n} from '../../../../shared/notifications';\nimport { I18nContext } from '../../../contexts/i18n';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport { getCurrentLocale } from '../../../ducks/locale/locale';\nimport { TextVariant } from '../../../helpers/constants/design-system';\nimport { useEqualityCheck } from '../../../hooks/useEqualityCheck';\nimport { useTheme } from '../../../hooks/useTheme';\nimport { getSortedAnnouncementsToShow } from '../../../selectors';\nimport { updateViewedNotifications } from '../../../store/actions';\nimport { ButtonPrimary, Text } from '../../component-library';\nimport Popover from '../../ui/popover';\n\nfunction getActionFunctionById(id) {\n  const actionFunctions = {\n    [NOTIFICATION_DROP_LEDGER_FIREFOX]: () => {\n      updateViewedNotifications({ [NOTIFICATION_DROP_LEDGER_FIREFOX]: true });\n    },\n  };\n\n  return actionFunctions[id];\n}\n\nconst renderDescription = (description) => {\n  if (!Array.isArray(description)) {\n    return <Text variant={TextVariant.bodyMd}>{description}</Text>;\n  }\n\n  return (\n    <>\n      {description.map((piece, index) => {\n        const isLast = index === description.length - 1;\n        return (\n          <Text\n            data-testid={`whats-new-description-item-${index}`}\n            key={`item-${index}`}\n            variant={TextVariant.bodyMd}\n            marginBottom={isLast ? 0 : 4}\n          >\n            {piece}\n          </Text>\n        );\n      })}\n    </>\n  );\n};\n\nconst renderFirstNotification = ({\n  notification,\n  idRefMap,\n  isLast,\n  trackEvent,\n}) => {\n  const { id, date, title, description, image, actionText } = notification;\n  const actionFunction = getActionFunctionById(id);\n\n  const imageComponent = image && (\n    <img\n      className=\"whats-new-popup__notification-image\"\n      src={image.src}\n      height={image.height}\n      width={image.width}\n    />\n  );\n  const placeImageBelowDescription = image?.placeImageBelowDescription;\n\n  return (\n    <div\n      className={classnames(\n        'whats-new-popup__notification whats-new-popup__first-notification',\n        {\n          'whats-new-popup__last-notification': isLast,\n        },\n      )}\n      key={`whats-new-popop-notification-${id}`}\n    >\n      <Text variant={TextVariant.bodyLgMedium} marginBottom={2}>\n        {title}\n      </Text>\n      {!placeImageBelowDescription && imageComponent}\n      <div className=\"whats-new-popup__description-and-date\">\n        <div className=\"whats-new-popup__notification-description\">\n          {renderDescription(description)}\n        </div>\n\n        <div className=\"whats-new-popup__notification-date\">{date}</div>\n      </div>\n      {placeImageBelowDescription && imageComponent}\n      {actionText && (\n        <ButtonPrimary\n          className=\"whats-new-popup__button\"\n          onClick={() => {\n            actionFunction();\n            trackEvent({\n              category: MetaMetricsEventCategory.Home,\n              event: MetaMetricsEventName.WhatsNewClicked,\n            });\n          }}\n          block\n        >\n          {actionText}\n        </ButtonPrimary>\n      )}\n      <div\n        className=\"whats-new-popup__intersection-observable\"\n        ref={idRefMap[id]}\n      />\n    </div>\n  );\n};\n\nconst renderSubsequentNotification = ({\n  notification,\n  idRefMap,\n  history,\n  isLast,\n}) => {\n  const { id, date, title, description, actionText } = notification;\n\n  const actionFunction = getActionFunctionById(id, history);\n  return (\n    <div\n      className={classnames('whats-new-popup__notification', {\n        'whats-new-popup__last-notification': isLast,\n      })}\n      key={`whats-new-popop-notification-${id}`}\n    >\n      <div className=\"whats-new-popup__notification-title\">{title}</div>\n      <div className=\"whats-new-popup__description-and-date\">\n        <div className=\"whats-new-popup__notification-description\">\n          {renderDescription(description)}\n        </div>\n        <div className=\"whats-new-popup__notification-date\">{date}</div>\n      </div>\n      {actionText && (\n        <div className=\"whats-new-popup__link\" onClick={actionFunction}>\n          {`${actionText} >`}\n        </div>\n      )}\n      <div\n        className=\"whats-new-popup__intersection-observable\"\n        ref={idRefMap[id]}\n      />\n    </div>\n  );\n};\n\nexport default function WhatsNewPopup({ onClose }) {\n  const t = useContext(I18nContext);\n  const history = useHistory();\n\n  const notifications = useSelector(getSortedAnnouncementsToShow);\n  const locale = useSelector(getCurrentLocale);\n  const theme = useTheme();\n\n  const [seenNotifications, setSeenNotifications] = useState({});\n  const [shouldShowScrollButton, setShouldShowScrollButton] = useState(true);\n\n  const popoverRef = useRef();\n\n  const memoizedNotifications = useEqualityCheck(notifications);\n  const idRefMap = useMemo(\n    () =>\n      memoizedNotifications.reduce(\n        (_idRefMap, notification) => ({\n          ..._idRefMap,\n          [notification.id]: React.createRef(),\n        }),\n        {},\n      ),\n    [memoizedNotifications],\n  );\n\n  const trackEvent = useContext(MetaMetricsContext);\n\n  const handleDebouncedScroll = debounce((target) => {\n    setShouldShowScrollButton(\n      target.scrollHeight - target.scrollTop !== target.clientHeight,\n    );\n  }, 100);\n\n  const handleScroll = (e) => {\n    handleDebouncedScroll(e.target);\n  };\n\n  const handleScrollDownClick = (e) => {\n    e.stopPropagation();\n    idRefMap[notifications[notifications.length - 1].id].current.scrollIntoView(\n      {\n        behavior: 'smooth',\n      },\n    );\n  };\n\n  useEffect(() => {\n    const observer = new window.IntersectionObserver(\n      (entries, _observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const [id, ref] = Object.entries(idRefMap).find(([_, _ref]) =>\n              _ref.current.isSameNode(entry.target),\n            );\n\n            setSeenNotifications((_seenNotifications) => ({\n              ..._seenNotifications,\n              [id]: true,\n            }));\n\n            _observer.unobserve(ref.current);\n          }\n        });\n      },\n      {\n        root: popoverRef.current,\n        threshold: 1.0,\n      },\n    );\n\n    Object.values(idRefMap).forEach((ref) => {\n      observer.observe(ref.current);\n    });\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [idRefMap, setSeenNotifications]);\n\n  // Display notifications with full image\n  const notificationRenderers = {\n    // This syntax is unusual, but very helpful here.  It's equivalent to `notificationRenderers[NOTIFICATION_DROP_LEDGER_FIREFOX] =`\n    [NOTIFICATION_DROP_LEDGER_FIREFOX]: renderFirstNotification,\n  };\n\n  return (\n    <Popover\n      title={t('whatsNew')}\n      headerProps={{ padding: [4, 4, 4] }}\n      className=\"whats-new-popup__popover\"\n      onClose={() => {\n        updateViewedNotifications(seenNotifications);\n        trackEvent({\n          category: MetaMetricsEventCategory.Home,\n          event: MetaMetricsEventName.WhatsNewViewed,\n          properties: {\n            number_viewed: Object.keys(seenNotifications).pop(),\n            completed_all: true,\n          },\n        });\n        onClose();\n      }}\n      popoverRef={popoverRef}\n      showScrollDown={shouldShowScrollButton && notifications.length > 1}\n      onScrollDownButtonClick={handleScrollDownClick}\n      onScroll={handleScroll}\n    >\n      <div className=\"whats-new-popup__notifications\">\n        {notifications.map(({ id }, index) => {\n          const notification = getTranslatedUINotifications(t, locale, theme)[\n            id\n          ];\n          const isLast = index === notifications.length - 1;\n          // Choose the appropriate rendering function based on the id\n          const renderNotification =\n            notificationRenderers[id] || renderSubsequentNotification;\n\n          return renderNotification({\n            notification,\n            idRefMap,\n            history,\n            isLast,\n            trackEvent,\n          });\n        })}\n      </div>\n    </Popover>\n  );\n}\n\nWhatsNewPopup.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport {\n  Display,\n  FlexDirection,\n  Size,\n} from '../../../../helpers/constants/design-system';\n\nimport Box from '../../../ui/box/box';\n\nimport { TextField } from '../../text-field';\nimport { HelpText, HelpTextSeverity } from '../../help-text';\nimport { Label } from '../../label';\n\n/**\n * @deprecated This has been deprecated in favor of the TypeScript version `<FormTextField />` component in ./ui/components/component-library/form-text-field/form-text-field.tsx\n * See storybook documentation for FormTextField here https://metamask.github.io/metamask-storybook/?path=/docs/components-componentlibrary-formtextfield--docs\n */\n\nexport const FormTextField = ({\n  autoComplete,\n  autoFocus,\n  className,\n  defaultValue,\n  disabled,\n  error,\n  helpText,\n  helpTextProps,\n  id,\n  inputProps,\n  inputRef,\n  label,\n  labelProps,\n  startAccessory,\n  maxLength,\n  name,\n  onBlur,\n  onChange,\n  onFocus,\n  placeholder,\n  readOnly,\n  required,\n  endAccessory,\n  size = Size.MD,\n  textFieldProps,\n  truncate,\n  type = 'text',\n  value,\n  ...props\n}) => (\n  <Box\n    className={classnames(\n      'mm-form-text-field',\n      { 'mm-form-text-field--disabled': disabled },\n      className,\n    )}\n    display={Display.Flex}\n    flexDirection={FlexDirection.Column}\n    {...props}\n  >\n    {label && (\n      <Label\n        htmlFor={id}\n        {...labelProps}\n        className={classnames(\n          'mm-form-text-field__label',\n          labelProps?.className,\n        )}\n      >\n        {label}\n      </Label>\n    )}\n    <TextField\n      className={classnames(\n        'mm-form-text-field__text-field',\n        textFieldProps?.className,\n      )}\n      id={id}\n      {...{\n        autoComplete,\n        autoFocus,\n        defaultValue,\n        disabled,\n        error,\n        id,\n        inputProps,\n        inputRef,\n        startAccessory,\n        maxLength,\n        name,\n        onBlur,\n        onChange,\n        onFocus,\n        placeholder,\n        readOnly,\n        required,\n        endAccessory,\n        size,\n        truncate,\n        type,\n        value,\n        ...textFieldProps,\n      }}\n    />\n    {helpText && (\n      <HelpText\n        severity={error && HelpTextSeverity.Danger}\n        marginTop={1}\n        {...helpTextProps}\n        className={classnames(\n          'mm-form-text-field__help-text',\n          helpTextProps?.className,\n        )}\n      >\n        {helpText}\n      </HelpText>\n    )}\n  </Box>\n);\n\nFormTextField.propTypes = {\n  /**\n   * An additional className to apply to the form-text-field\n   */\n  className: PropTypes.string,\n  /**\n   * The id of the FormTextField\n   * Required if label prop exists to ensure accessibility\n   *\n   * @param {object} props - The props passed to the component.\n   * @param {string} propName - The prop name in this case 'id'.\n   * @param {string} componentName - The name of the component.\n   */\n  id: (props, propName, componentName) => {\n    if (props.label && !props[propName]) {\n      return new Error(\n        `If a label prop exists you must provide an ${propName} prop for the label's htmlFor attribute for accessibility. Warning coming from ${componentName} ui/components/component-library/form-text-field/form-text-field.js`,\n      );\n    }\n    return null;\n  },\n  /**\n   * The content of the Label component\n   */\n  label: PropTypes.string,\n  /**\n   * Props that are applied to the Label component\n   */\n  labelProps: PropTypes.object,\n  /**\n   * The content of the HelpText component\n   */\n  helpText: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n  /**\n   * Props that are applied to the HelpText component\n   */\n  helpTextProps: PropTypes.object,\n  /**\n   * Props that are applied to the TextField component\n   */\n  textFieldProps: PropTypes.object,\n  /**\n   * FormTextField accepts all the props from TextField and Box\n   */\n  ...TextField.propTypes,\n};\n","export { FormTextField } from './form-text-field';\n","export { ModalContent } from './modal-content';\nexport { ModalContentSize } from '../modal-content.types';\nexport type { ModalContentProps } from '../modal-content.types';\n","import React, { useRef, useEffect } from 'react';\nimport classnames from 'classnames';\n\nimport {\n  BackgroundColor,\n  BorderRadius,\n  BlockSize,\n  Display,\n  JustifyContent,\n  AlignItems,\n} from '../../../../helpers/constants/design-system';\n\nimport { Box, ModalFocus, useModalContext } from '../..';\n\nimport { BoxProps } from '../../box';\nimport type { PolymorphicRef } from '../../box';\nimport {\n  ModalContentProps,\n  ModalContentSize,\n  ModalContentComponent,\n} from '../modal-content.types';\n\n/**\n * @deprecated This version of `ModalContent` is deprecated. Please use the version from the component-library in ui/components/component-library/modal-content/modal-content.tsx\n * See PR https://github.com/MetaMask/metamask-extension/pull/22207 for details.\n */\n\nexport const ModalContent: ModalContentComponent = React.forwardRef(\n  <C extends React.ElementType = 'div'>(\n    {\n      className = '',\n      children,\n      size = ModalContentSize.Sm,\n      modalDialogProps,\n      ...props\n    }: ModalContentProps<C>,\n    ref?: PolymorphicRef<C>,\n  ) => {\n    const {\n      onClose,\n      isClosedOnEscapeKey,\n      isClosedOnOutsideClick,\n      initialFocusRef,\n      finalFocusRef,\n      restoreFocus,\n      autoFocus,\n    } = useModalContext();\n    const modalDialogRef = useRef<HTMLElement>(null);\n    const handleEscKey = (event: KeyboardEvent) => {\n      if (isClosedOnEscapeKey && event.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    const handleClickOutside = (event: MouseEvent) => {\n      // Popover should be launched from within Modal but\n      // the Popover containing element is a sibling to modal,\n      // so this is required to ensure `onClose` isn't triggered\n      // when clicking on a popover item\n      if (\n        isClosedOnOutsideClick &&\n        (event.target as HTMLElement).closest('.mm-popover')\n      ) {\n        return;\n      }\n\n      if (\n        isClosedOnOutsideClick &&\n        modalDialogRef?.current &&\n        !modalDialogRef.current.contains(event.target as Node)\n      ) {\n        onClose();\n      }\n    };\n\n    useEffect(() => {\n      document.addEventListener('keydown', handleEscKey);\n      document.addEventListener('mousedown', handleClickOutside);\n\n      return () => {\n        document.removeEventListener('keydown', handleEscKey);\n        document.removeEventListener('mousedown', handleClickOutside);\n      };\n    }, []);\n    return (\n      <ModalFocus\n        initialFocusRef={initialFocusRef}\n        finalFocusRef={finalFocusRef}\n        restoreFocus={restoreFocus}\n        autoFocus={autoFocus}\n      >\n        <Box\n          className={classnames('mm-modal-content', className)}\n          ref={ref}\n          display={Display.Flex}\n          width={BlockSize.Screen}\n          height={BlockSize.Screen}\n          justifyContent={JustifyContent.center}\n          alignItems={AlignItems.flexStart}\n          paddingRight={4}\n          paddingLeft={4}\n          paddingTop={[4, 8, 12]}\n          paddingBottom={[4, 8, 12]}\n          {...(props as BoxProps<C>)}\n        >\n          <Box\n            as=\"section\"\n            role=\"dialog\"\n            aria-modal=\"true\"\n            backgroundColor={BackgroundColor.backgroundDefault}\n            borderRadius={BorderRadius.LG}\n            width={BlockSize.Full}\n            padding={4}\n            ref={modalDialogRef}\n            {...modalDialogProps}\n            className={classnames(\n              'mm-modal-content__dialog',\n              `mm-modal-content__dialog--size-${size}`,\n              modalDialogProps?.className,\n            )}\n            style={{\n              ...props?.style,\n              overflowY: 'auto', // fallback for any content that extends beyond the modal dialog\n            }}\n          >\n            {children}\n          </Box>\n        </Box>\n      </ModalFocus>\n    );\n  },\n);\n","export { ModalHeader } from './modal-header';\nexport type { ModalHeaderProps } from '../modal-header.types';\n","import React from 'react';\nimport classnames from 'classnames';\nimport { HeaderBase, Text, ButtonIcon, ButtonIconSize, IconName } from '../..';\nimport {\n  TextVariant,\n  TextAlign,\n} from '../../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\nimport { ModalHeaderProps } from '.';\n\n/**\n * @deprecated This version of `ModalHeader` is deprecated. Please use the version from the component-library in ui/components/component-library/modal-header/modal-header.tsx\n * See PR https://github.com/MetaMask/metamask-extension/pull/22207 for details.\n * @param options0\n * @param options0.children\n * @param options0.className\n * @param options0.startAccessory\n * @param options0.endAccessory\n * @param options0.onClose\n * @param options0.closeButtonProps\n * @param options0.onBack\n * @param options0.backButtonProps\n */\nexport const ModalHeader: React.FC<ModalHeaderProps> = ({\n  children,\n  className = '',\n  startAccessory,\n  endAccessory,\n  onClose,\n  closeButtonProps,\n  onBack,\n  backButtonProps,\n  ...props\n}) => {\n  const t = useI18nContext();\n  return (\n    <HeaderBase\n      className={classnames('mm-modal-header', className)}\n      startAccessory={\n        startAccessory ||\n        (onBack && (\n          <ButtonIcon\n            iconName={IconName.ArrowLeft}\n            ariaLabel={t('back')}\n            size={ButtonIconSize.Sm}\n            onClick={onBack}\n            {...backButtonProps}\n          />\n        ))\n      }\n      endAccessory={\n        endAccessory ||\n        (onClose && (\n          <ButtonIcon\n            iconName={IconName.Close}\n            ariaLabel={t('close')}\n            size={ButtonIconSize.Sm}\n            onClick={onClose}\n            {...closeButtonProps}\n          />\n        ))\n      }\n      {...props}\n    >\n      {typeof children === 'string' ? (\n        <Text\n          as=\"header\"\n          variant={TextVariant.headingSm}\n          textAlign={TextAlign.Center}\n        >\n          {children}\n        </Text>\n      ) : (\n        children\n      )}\n    </HeaderBase>\n  );\n};\n","export { TextFieldSearch } from './text-field-search';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport {\n  ButtonIcon,\n  ButtonIconSize,\n  Icon,\n  IconName,\n  IconSize,\n  TextField,\n  TextFieldType,\n} from '../..';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\n\n/**\n * @deprecated This has been deprecated in favor of the TypeScript version `<TextFeildSearch />` component in ./ui/components/component-library/text-field-search/text-field-search.tsx\n * See storybook documentation for TextFieldSearch here https://metamask.github.io/metamask-storybook/?path=/docs/components-componentlibrary-textfieldsearch--docs\n */\n\nexport const TextFieldSearch = ({\n  className,\n  showClearButton = true, // only works with a controlled input\n  clearButtonOnClick,\n  clearButtonProps,\n  endAccessory,\n  inputProps,\n  value,\n  onChange,\n  ...props\n}) => {\n  const t = useI18nContext();\n  return (\n    <TextField\n      className={classnames('mm-text-field-search', className)}\n      value={value}\n      onChange={onChange}\n      type={TextFieldType.Search}\n      endAccessory={\n        value && showClearButton ? (\n          <>\n            <ButtonIcon\n              className=\"mm-text-field__button-clear\"\n              ariaLabel={t('clear')}\n              iconName={IconName.Close}\n              size={ButtonIconSize.Sm}\n              onClick={clearButtonOnClick}\n              {...clearButtonProps}\n            />\n            {endAccessory}\n          </>\n        ) : (\n          endAccessory\n        )\n      }\n      startAccessory={\n        <Icon padding={1} name={IconName.Search} size={IconSize.Sm} />\n      }\n      inputProps={{\n        ...inputProps,\n      }}\n      {...props}\n    />\n  );\n};\n\nTextFieldSearch.propTypes = {\n  /**\n   * The value of the TextFieldSearch\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * The onChange handler of the TextFieldSearch\n   */\n  onChange: PropTypes.func,\n  /**\n   * The clear button for the TextFieldSearch.\n   * Defaults to true\n   */\n  showClearButton: PropTypes.bool,\n  /**\n   * The onClick handler for the clear button\n   * Required unless showClearButton is false\n   *\n   * @param {object} props - The props passed to the component.\n   * @param {string} propName - The prop name in this case 'id'.\n   * @param {string} componentName - The name of the component.\n   */\n  clearButtonOnClick: (props, propName, componentName) => {\n    if (\n      props.showClearButton &&\n      (!props[propName] || !props.clearButtonProps?.onClick)\n    ) {\n      return new Error(\n        `${propName} is required unless showClearButton is false. Warning coming from ${componentName} ui/components/component-library/text-field-search/text-field-search.js`,\n      );\n    }\n    return null;\n  },\n  /**\n   * The props to pass to the clear button\n   */\n  clearButtonProps: PropTypes.object,\n  /**\n   * An additional className to apply to the TextFieldSearch\n   */\n  className: PropTypes.string,\n  /**\n   * Component to appear on the right side of the input\n   */\n  endAccessory: PropTypes.node,\n  /**\n   * Attributes applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n};\n\nTextFieldSearch.displayName = 'TextFieldSearch';\n","export { Textarea } from './textarea';\nexport type {\n  TextareaProps,\n  TextareaStyleUtilityProps,\n  TextareaComponent,\n} from './textarea.types';\nexport { TextareaResize } from './textarea.types';\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport {\n  BorderRadius,\n  BackgroundColor,\n  BorderColor,\n} from '../../../helpers/constants/design-system';\n\nimport { Text } from '..';\nimport { TextProps } from '../text';\n\nimport { PolymorphicRef } from '../box';\nimport {\n  TextareaComponent,\n  TextareaProps,\n  TextareaResize,\n} from './textarea.types';\n\nexport const Textarea: TextareaComponent = React.forwardRef(\n  <C extends React.ElementType = 'textarea'>(\n    {\n      autoFocus,\n      className = '',\n      defaultValue,\n      isDisabled,\n      disabled, // to allow our components to maintain intuitive building and support native HTML attribute\n      error,\n      id,\n      resize = TextareaResize.Vertical,\n      rows,\n      cols,\n      maxLength,\n      name,\n      onBlur,\n      onChange,\n      onClick,\n      onFocus,\n      placeholder,\n      readOnly,\n      required,\n      value,\n      ...props\n    }: TextareaProps<C>,\n    ref?: PolymorphicRef<C>,\n  ) => {\n    const handleClick = (event: React.MouseEvent<HTMLTextAreaElement>) => {\n      if (onClick && (!isDisabled || !disabled)) {\n        onClick?.(event);\n      }\n    };\n\n    const handleBlur = (event: React.FocusEvent<HTMLTextAreaElement>) => {\n      onBlur?.(event);\n    };\n\n    const handleFocus = (event: React.FocusEvent<HTMLTextAreaElement>) => {\n      onFocus?.(event);\n    };\n\n    return (\n      <Text\n        className={classnames(\n          'mm-textarea',\n          `mm-textarea--resize-${resize}`,\n          {\n            'mm-textarea--disabled': Boolean(isDisabled || disabled),\n          },\n          className,\n        )}\n        as=\"textarea\"\n        ref={ref}\n        placeholder={placeholder}\n        readOnly={readOnly}\n        required={required}\n        autoFocus={autoFocus}\n        defaultValue={defaultValue}\n        disabled={isDisabled || disabled}\n        {...(error && { 'aria-invalid': error })}\n        id={id}\n        maxLength={maxLength}\n        name={name}\n        value={value}\n        onBlur={handleBlur}\n        onChange={onChange}\n        onClick={handleClick}\n        onFocus={handleFocus}\n        resize={resize}\n        rows={rows}\n        cols={cols}\n        backgroundColor={BackgroundColor.backgroundDefault}\n        borderColor={\n          error ? BorderColor.errorDefault : BorderColor.borderDefault\n        }\n        borderRadius={BorderRadius.SM}\n        borderWidth={1}\n        paddingBottom={1}\n        paddingLeft={4}\n        paddingRight={4}\n        paddingTop={1}\n        {...(props as TextProps<C>)}\n      />\n    );\n  },\n);\n","import React from 'react';\nimport type {\n  PolymorphicComponentPropWithRef,\n  StyleUtilityProps,\n} from '../box';\n\nexport enum TextareaResize {\n  None = 'none',\n  Both = 'both',\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n  Initial = 'initial',\n  Inherit = 'inherit',\n}\n\n// TODO: Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface TextareaStyleUtilityProps extends StyleUtilityProps {\n  /**\n   * If `true`, the textarea will be focused during the first mount.\n   */\n  autoFocus?: boolean;\n  /**\n   * An additional className to apply to the textarea\n   */\n  className?: string;\n  /**\n   * The default textarea value, useful when not controlling the component.\n   */\n  defaultValue?: string;\n  /**\n   * If `true`, the textarea will be disabled.\n   */\n  isDisabled?: boolean;\n  /*\n   * Please use the `isDisabled` prop instead, this prop is added only for backwards compatibility and intuitive HTML support\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the textarea will indicate an error\n   */\n  error?: boolean;\n  /**\n   * The id of the textarea element.\n   */\n  id?: string;\n  /**\n   * Max number of characters to allow\n   */\n  maxLength?: number;\n  /**\n   * Name attribute of the textarea element.\n   */\n  name?: string;\n  /**\n   * Callback fired on blur\n   */\n  onBlur?: (event: React.FocusEvent<HTMLTextAreaElement>) => void;\n  /**\n   * Callback fired when the value is changed.\n   */\n  onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  /**\n   * Callback fired when the Textarea is clicked on\n   */\n  onClick?: (event: React.MouseEvent<HTMLTextAreaElement>) => void;\n  /**\n   * Callback fired on focus\n   */\n  onFocus?: (event: React.FocusEvent<HTMLTextAreaElement>) => void;\n  /**\n   * The short hint displayed in the textarea before the user enters a value.\n   */\n  placeholder?: string;\n  /**\n   * It prevents the user from changing the value of the field (not from interacting with the field).\n   */\n  readOnly?: boolean;\n  /**\n   * If `true`, the textarea will be required. Currently no visual difference is shown.\n   */\n  required?: boolean;\n  /**\n   * The resize property specifies whether or not an element is resizable by the user.\n   */\n  resize?: TextareaResize;\n  /**\n   * Number of rows to display when multiline option is set to true\n   */\n  rows?: number;\n  /**\n   * Number of columns to display when multiline option is set to true\n   */\n  cols?: number;\n  /**\n   * The textarea value, required for a controlled component.\n   */\n  value?: string | number;\n}\n\nexport type TextareaProps<C extends React.ElementType> =\n  PolymorphicComponentPropWithRef<C, TextareaStyleUtilityProps>;\n\nexport type TextareaComponent = <C extends React.ElementType = 'textarea'>(\n  props: TextareaProps<C>,\n) => React.ReactElement | null;\n","import PropTypes from 'prop-types';\nimport React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Display,\n  FontWeight,\n  Severity,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { exportAccount, hideWarning } from '../../../store/actions';\nimport {\n  BannerAlert,\n  Box,\n  ButtonPrimary,\n  ButtonSecondary,\n} from '../../component-library';\nimport { FormTextField } from '../../component-library/form-text-field/deprecated';\n\nexport const AccountDetailsAuthenticate = ({\n  address,\n  onCancel,\n  setPrivateKey,\n  setShowHoldToReveal,\n}) => {\n  const t = useI18nContext();\n  const dispatch = useDispatch();\n\n  const [password, setPassword] = useState('');\n\n  // Password error would result from appState\n  const warning = useSelector((state) => state.appState.warning);\n\n  const onSubmit = useCallback(() => {\n    dispatch(\n      exportAccount(password, address, setPrivateKey, setShowHoldToReveal),\n    )\n      .then((res) => {\n        dispatch(hideWarning());\n        return res;\n      })\n      .catch(() => {\n        // No need to do anything more with the caught error here, we already logged the error\n      });\n  }, [dispatch, password, address, setPrivateKey, setShowHoldToReveal]);\n\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === 'Enter') {\n        onSubmit();\n      }\n    },\n    [onSubmit],\n  );\n\n  return (\n    <>\n      <FormTextField\n        marginTop={6}\n        id=\"account-details-authenticate\"\n        label={t('enterYourPassword')}\n        placeholder={t('password')}\n        error={Boolean(warning)}\n        helpText={warning}\n        onChange={(e) => setPassword(e.target.value)}\n        value={password}\n        variant={TextVariant.bodySm}\n        type=\"password\"\n        inputProps={{ onKeyPress: handleKeyPress }}\n        labelProps={{ fontWeight: FontWeight.Medium }}\n        autoFocus\n      />\n      <BannerAlert\n        marginTop={6}\n        severity={Severity.Danger}\n        description={t('privateKeyWarning')}\n      />\n      <Box display={Display.Flex} marginTop={6} gap={2}>\n        <ButtonSecondary onClick={onCancel} block>\n          {t('cancel')}\n        </ButtonSecondary>\n        <ButtonPrimary onClick={onSubmit} disabled={password === ''} block>\n          {t('confirm')}\n        </ButtonPrimary>\n      </Box>\n    </>\n  );\n};\n\nAccountDetailsAuthenticate.propTypes = {\n  /**\n   * The account address\n   */\n  address: PropTypes.string.isRequired,\n  /**\n   * Executes upon Cancel button click\n   */\n  onCancel: PropTypes.func.isRequired,\n  /**\n   * Private key setter\n   */\n  setPrivateKey: PropTypes.func.isRequired,\n  /**\n   * showHoldToReveal setter\n   */\n  setShowHoldToReveal: PropTypes.func.isRequired,\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport QrCodeView from '../../ui/qr-code-view';\nimport EditableLabel from '../../ui/editable-label/editable-label';\n\nimport { setAccountLabel } from '../../../store/actions';\nimport {\n  getCurrentChainId,\n  getHardwareWalletType,\n  getInternalAccountByAddress,\n} from '../../../selectors';\nimport { isAbleToExportAccount } from '../../../helpers/utils/util';\nimport {\n  Box,\n  ButtonSecondary,\n  ButtonSecondarySize,\n} from '../../component-library';\nimport {\n  AlignItems,\n  Display,\n  FlexDirection,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventKeyType,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\n\nexport const AccountDetailsDisplay = ({\n  accounts,\n  accountName,\n  address,\n  onExportClick,\n}) => {\n  const dispatch = useDispatch();\n  const trackEvent = useContext(MetaMetricsContext);\n  const t = useI18nContext();\n\n  const {\n    metadata: { keyring },\n  } = useSelector((state) => getInternalAccountByAddress(state, address));\n  const exportPrivateKeyFeatureEnabled = isAbleToExportAccount(keyring?.type);\n\n  const chainId = useSelector(getCurrentChainId);\n  const deviceName = useSelector(getHardwareWalletType);\n\n  return (\n    <Box\n      display={Display.Flex}\n      alignItems={AlignItems.center}\n      flexDirection={FlexDirection.Column}\n    >\n      <EditableLabel\n        defaultValue={accountName}\n        onSubmit={(label) => {\n          dispatch(setAccountLabel(address, label));\n          trackEvent({\n            category: MetaMetricsEventCategory.Accounts,\n            event: MetaMetricsEventName.AccountRenamed,\n            properties: {\n              location: 'Account Details Modal',\n              chain_id: chainId,\n              account_hardware_type: deviceName,\n            },\n          });\n        }}\n        accounts={accounts}\n      />\n      <QrCodeView Qr={{ data: address }} />\n      {exportPrivateKeyFeatureEnabled ? (\n        <ButtonSecondary\n          block\n          size={ButtonSecondarySize.Lg}\n          variant={TextVariant.bodyMd}\n          onClick={() => {\n            trackEvent({\n              category: MetaMetricsEventCategory.Accounts,\n              event: MetaMetricsEventName.KeyExportSelected,\n              properties: {\n                key_type: MetaMetricsEventKeyType.Pkey,\n                location: 'Account Details Modal',\n              },\n            });\n            onExportClick();\n          }}\n        >\n          {t('showPrivateKey')}\n        </ButtonSecondary>\n      ) : null}\n    </Box>\n  );\n};\n\nAccountDetailsDisplay.propTypes = {\n  /**\n   * Array of user accounts\n   */\n  accounts: PropTypes.array.isRequired,\n  /**\n   * Name of the current account\n   */\n  accountName: PropTypes.string.isRequired,\n  /**\n   * Current address\n   */\n  address: PropTypes.string.isRequired,\n  /**\n   * Executes upon Export button click\n   */\n  onExportClick: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport {\n  LavaDome as LavaDomeReact,\n  toLavaDomeToken,\n} from '@lavamoat/lavadome-react';\nimport PropTypes from 'prop-types';\nimport {\n  BannerAlert,\n  Box,\n  ButtonIcon,\n  ButtonPrimary,\n  HelpText,\n  HelpTextSeverity,\n  IconName,\n  Text,\n} from '../../component-library';\n\nimport {\n  AlignItems,\n  BorderColor,\n  BorderRadius,\n  Display,\n  FlexDirection,\n  Severity,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { useCopyToClipboard } from '../../../hooks/useCopyToClipboard';\n\nconst inTest = Boolean(process.env.IN_TEST);\n\nexport const AccountDetailsKey = ({ accountName, onClose, privateKey }) => {\n  const t = useI18nContext();\n\n  const [showSelectDisableWarn, setShowDisableSelectWarn] = useState(false);\n  const [privateKeyCopied, handlePrivateKeyCopy] = useCopyToClipboard();\n\n  return (\n    <>\n      <Text\n        marginTop={6}\n        variant={TextVariant.bodySm}\n        style={{ wordBreak: 'break-word' }}\n      >\n        {t('privateKeyCopyWarning', [accountName])}\n      </Text>\n      <Box\n        display={Display.Flex}\n        flexDirection={FlexDirection.Row}\n        alignItems={AlignItems.center}\n        borderRadius={BorderRadius.SM}\n        borderWidth={1}\n        borderColor={BorderColor.default}\n        padding={4}\n        gap={4}\n      >\n        <Text\n          data-testid=\"account-details-key\"\n          variant={TextVariant.bodySm}\n          style={{ wordBreak: 'break-word' }}\n          onClick={() => setShowDisableSelectWarn(true)}\n        >\n          <LavaDomeReact\n            unsafeOpenModeShadow={inTest}\n            text={toLavaDomeToken(privateKey)}\n          />\n        </Text>\n        <ButtonIcon\n          onClick={() =>\n            setShowDisableSelectWarn(false) || handlePrivateKeyCopy(privateKey)\n          }\n          iconName={privateKeyCopied ? IconName.CopySuccess : IconName.Copy}\n          ariaLabel={t('copyPrivateKey')}\n        />\n      </Box>\n      {showSelectDisableWarn && (\n        <HelpText marginTop={2} severity={HelpTextSeverity.Danger}>\n          {t('lavaDomeCopyWarning')}\n        </HelpText>\n      )}\n      <BannerAlert severity={Severity.Danger} marginTop={4}>\n        <Text variant={TextVariant.bodySm}>{t('privateKeyWarning')}</Text>\n      </BannerAlert>\n      <ButtonPrimary marginTop={6} onClick={onClose} block>\n        {t('done')}\n      </ButtonPrimary>\n    </>\n  );\n};\n\nAccountDetailsKey.propTypes = {\n  /**\n   * Name of the account\n   */\n  accountName: PropTypes.string.isRequired,\n  /**\n   * Executes upon Close button click\n   */\n  onClose: PropTypes.func.isRequired,\n  /**\n   * The private key\n   */\n  privateKey: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React, { useCallback, useContext, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventKeyType,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  AlignItems,\n  Display,\n  FlexDirection,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport {\n  getInternalAccountByAddress,\n  getMetaMaskAccountsOrdered,\n  getUseBlockie,\n} from '../../../selectors';\nimport {\n  clearAccountDetails,\n  hideWarning,\n  setAccountDetailsAddress,\n} from '../../../store/actions';\nimport HoldToRevealModal from '../../app/modals/hold-to-reveal-modal/hold-to-reveal-modal';\nimport {\n  AvatarAccount,\n  AvatarAccountSize,\n  AvatarAccountVariant,\n  Box,\n  Modal,\n  ModalOverlay,\n  Text,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n} from '../../component-library';\nimport { AddressCopyButton } from '../address-copy-button';\nimport { AccountDetailsAuthenticate } from './account-details-authenticate';\nimport { AccountDetailsDisplay } from './account-details-display';\nimport { AccountDetailsKey } from './account-details-key';\n\nexport const AccountDetails = ({ address }) => {\n  const dispatch = useDispatch();\n  const t = useI18nContext();\n  const trackEvent = useContext(MetaMetricsContext);\n  const useBlockie = useSelector(getUseBlockie);\n  const accounts = useSelector(getMetaMaskAccountsOrdered);\n  const {\n    metadata: { name },\n  } = useSelector((state) => getInternalAccountByAddress(state, address));\n  const [showHoldToReveal, setShowHoldToReveal] = useState(false);\n  const [attemptingExport, setAttemptingExport] = useState(false);\n\n  // This is only populated when the user properly authenticates\n  const [privateKey, setPrivateKey] = useState('');\n\n  const onClose = useCallback(() => {\n    dispatch(setAccountDetailsAddress(''));\n    dispatch(clearAccountDetails());\n    dispatch(hideWarning());\n  }, [dispatch]);\n\n  const avatar = (\n    <AvatarAccount\n      variant={\n        useBlockie\n          ? AvatarAccountVariant.Blockies\n          : AvatarAccountVariant.Jazzicon\n      }\n      address={address}\n      size={AvatarAccountSize.Lg}\n      style={{ margin: '0 auto' }}\n    />\n  );\n\n  return (\n    <>\n      {/* This is the Modal that says \"Show private key\" on top and has a few states */}\n      <Modal\n        isOpen={!showHoldToReveal}\n        onClose={onClose}\n        data-testid=\"account-details-modal\"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            onClose={onClose}\n            onBack={\n              attemptingExport &&\n              (() => {\n                dispatch(hideWarning());\n                setPrivateKey('');\n                setAttemptingExport(false);\n              })\n            }\n          >\n            {attemptingExport ? t('showPrivateKey') : avatar}\n          </ModalHeader>\n          <ModalBody>\n            {attemptingExport ? (\n              <>\n                <Box\n                  display={Display.Flex}\n                  alignItems={AlignItems.center}\n                  flexDirection={FlexDirection.Column}\n                >\n                  {avatar}\n                  <Text\n                    marginTop={2}\n                    marginBottom={2}\n                    variant={TextVariant.bodyLgMedium}\n                    style={{ wordBreak: 'break-word' }}\n                  >\n                    {name}\n                  </Text>\n                  <AddressCopyButton address={address} shorten />\n                </Box>\n                {privateKey ? (\n                  <AccountDetailsKey\n                    accountName={name}\n                    onClose={onClose}\n                    privateKey={privateKey}\n                  />\n                ) : (\n                  <AccountDetailsAuthenticate\n                    address={address}\n                    onCancel={onClose}\n                    setPrivateKey={setPrivateKey}\n                    setShowHoldToReveal={setShowHoldToReveal}\n                  />\n                )}\n              </>\n            ) : (\n              <AccountDetailsDisplay\n                accounts={accounts}\n                accountName={name}\n                address={address}\n                onExportClick={() => setAttemptingExport(true)}\n              />\n            )}\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n\n      {/* This is the Modal that says \"Hold to reveal private key\" */}\n      <HoldToRevealModal\n        isOpen={showHoldToReveal}\n        onClose={() => {\n          trackEvent({\n            category: MetaMetricsEventCategory.Keys,\n            event: MetaMetricsEventName.KeyExportCanceled,\n            properties: {\n              key_type: MetaMetricsEventKeyType.Pkey,\n            },\n          });\n          setPrivateKey('');\n          setShowHoldToReveal(false);\n        }}\n        onLongPressed={() => {\n          setShowHoldToReveal(false);\n        }}\n        holdToRevealType=\"PrivateKey\"\n      />\n    </>\n  );\n};\n\nAccountDetails.propTypes = {\n  /**\n   * The address to show account details for\n   */\n  address: PropTypes.string,\n};\n","export { AccountDetails } from './account-details';\n","import React, { useCallback, useContext, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport {\n  getCurrentChainId,\n  getHardwareWalletType,\n  getAccountTypeForKeyring,\n  getPinnedAccountsList,\n  getHiddenAccountsList,\n} from '../../../selectors';\nimport { MenuItem } from '../../ui/menu';\nimport {\n  IconName,\n  ModalFocus,\n  Popover,\n  PopoverPosition,\n  PopoverRole,\n  Text,\n} from '../../component-library';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport {\n  showModal,\n  updateAccountsList,\n  updateHiddenAccountsList,\n} from '../../../store/actions';\nimport { TextVariant } from '../../../helpers/constants/design-system';\nimport { formatAccountType } from '../../../helpers/utils/metrics';\nimport { AccountDetailsMenuItem, ViewExplorerMenuItem } from '..';\n\nconst METRICS_LOCATION = 'Account Options';\n\nexport const AccountListItemMenu = ({\n  anchorElement,\n  onClose,\n  closeMenu,\n  isRemovable,\n  account,\n  isOpen,\n  isPinned,\n  isHidden,\n}) => {\n  const t = useI18nContext();\n  const trackEvent = useContext(MetaMetricsContext);\n  const dispatch = useDispatch();\n\n  const chainId = useSelector(getCurrentChainId);\n\n  const deviceName = useSelector(getHardwareWalletType);\n\n  const { keyring } = account.metadata;\n  const accountType = formatAccountType(getAccountTypeForKeyring(keyring));\n\n  const pinnedAccountList = useSelector(getPinnedAccountsList);\n  const hiddenAccountList = useSelector(getHiddenAccountsList);\n\n\n  // Handle Tab key press for accessibility inside the popover and will close the popover on the last MenuItem\n  const lastItemRef = useRef(null);\n  const accountDetailsItemRef = useRef(null);\n  const removeAccountItemRef = useRef(null);\n  const removeJWTItemRef = useRef(null);\n\n  // Checks the MenuItems from the bottom to top to set lastItemRef on the last MenuItem that is not disabled\n  useEffect(() => {\n    if (removeJWTItemRef.current) {\n      lastItemRef.current = removeJWTItemRef.current;\n    } else if (removeAccountItemRef.current) {\n      lastItemRef.current = removeAccountItemRef.current;\n    } else {\n      lastItemRef.current = accountDetailsItemRef.current;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    removeJWTItemRef.current,\n    removeAccountItemRef.current,\n    accountDetailsItemRef.current,\n  ]);\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (event.key === 'Tab' && event.target === lastItemRef.current) {\n        // If Tab is pressed at the last item to close popover and focus to next element in DOM\n        onClose();\n      }\n    },\n    [onClose],\n  );\n\n  // Handle click outside of the popover to close it\n  const popoverDialogRef = useRef(null);\n\n  const handleClickOutside = useCallback(\n    (event) => {\n      if (\n        popoverDialogRef?.current &&\n        !popoverDialogRef.current.contains(event.target)\n      ) {\n        onClose();\n      }\n    },\n    [onClose],\n  );\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n\n  const handlePinning = (address) => {\n    const updatedPinnedAccountList = [...pinnedAccountList, address];\n    dispatch(updateAccountsList(updatedPinnedAccountList));\n  };\n\n  const handleUnpinning = (address) => {\n    const updatedPinnedAccountList = pinnedAccountList.filter(\n      (item) => item !== address,\n    );\n    dispatch(updateAccountsList(updatedPinnedAccountList));\n  };\n\n  const handleHidding = (address) => {\n    const updatedHiddenAccountList = [...hiddenAccountList, address];\n    if (pinnedAccountList.includes(address)) {\n      handleUnpinning(address);\n    }\n    dispatch(updateHiddenAccountsList(updatedHiddenAccountList));\n  };\n\n  const handleUnhidding = (address) => {\n    const updatedHiddenAccountList = hiddenAccountList.filter(\n      (item) => item !== address,\n    );\n    dispatch(updateHiddenAccountsList(updatedHiddenAccountList));\n  };\n\n  return (\n    <Popover\n      className=\"multichain-account-list-item-menu__popover\"\n      referenceElement={anchorElement}\n      role={PopoverRole.Dialog}\n      position={PopoverPosition.Bottom}\n      offset={[0, 0]}\n      padding={0}\n      isOpen={isOpen}\n      isPortal\n      preventOverflow\n      flip\n    >\n      <ModalFocus restoreFocus initialFocusRef={anchorElement}>\n        <div onKeyDown={handleKeyDown} ref={popoverDialogRef}>\n          <AccountDetailsMenuItem\n            metricsLocation={METRICS_LOCATION}\n            closeMenu={closeMenu}\n            address={account.address}\n            textProps={{ variant: TextVariant.bodySm }}\n          />\n          <ViewExplorerMenuItem\n            metricsLocation={METRICS_LOCATION}\n            closeMenu={closeMenu}\n            textProps={{ variant: TextVariant.bodySm }}\n            account={account}\n          />\n          {isHidden ? null : (\n            <MenuItem\n              data-testid=\"account-list-menu-pin\"\n              onClick={() => {\n                isPinned\n                  ? handleUnpinning(account.address)\n                  : handlePinning(account.address);\n                onClose();\n              }}\n              iconName={isPinned ? IconName.Unpin : IconName.Pin}\n            >\n              <Text variant={TextVariant.bodySm}>\n                {isPinned ? t('unpin') : t('pinToTop')}\n              </Text>\n            </MenuItem>\n          )}\n          <MenuItem\n            data-testid=\"account-list-menu-hide\"\n            onClick={() => {\n              isHidden\n                ? handleUnhidding(account.address)\n                : handleHidding(account.address);\n              onClose();\n            }}\n            iconName={isHidden ? IconName.Eye : IconName.EyeSlash}\n          >\n            <Text variant={TextVariant.bodySm}>\n              {isHidden ? t('showAccount') : t('hideAccount')}\n            </Text>\n          </MenuItem>\n          {isRemovable ? (\n            <MenuItem\n              ref={removeAccountItemRef}\n              data-testid=\"account-list-menu-remove\"\n              onClick={() => {\n                dispatch(\n                  showModal({\n                    name: 'CONFIRM_REMOVE_ACCOUNT',\n                    account,\n                  }),\n                );\n                trackEvent({\n                  event: MetaMetricsEventName.AccountRemoved,\n                  category: MetaMetricsEventCategory.Accounts,\n                  properties: {\n                    account_hardware_type: deviceName,\n                    chain_id: chainId,\n                    account_type: accountType,\n                  },\n                });\n                onClose();\n                closeMenu?.();\n              }}\n              iconName={IconName.Trash}\n            >\n              <Text variant={TextVariant.bodySm}>{t('removeAccount')}</Text>\n            </MenuItem>\n          ) : null}\n          {\n          }\n        </div>\n      </ModalFocus>\n    </Popover>\n  );\n};\n\nAccountListItemMenu.propTypes = {\n  /**\n   * Element that the menu should display next to\n   */\n  anchorElement: PropTypes.instanceOf(window.Element),\n  /**\n   * Function that executes when the menu is closed\n   */\n  onClose: PropTypes.func.isRequired,\n  /**\n   * Represents if the menu is open or not\n   *\n   * @type {boolean}\n   */\n  isOpen: PropTypes.bool.isRequired,\n  /**\n   * Function that closes the menu\n   */\n  closeMenu: PropTypes.func,\n  /**\n   * Represents if the account should be removable\n   */\n  isRemovable: PropTypes.bool.isRequired,\n  /**\n   * Represents pinned accounts\n   */\n  isPinned: PropTypes.bool,\n  /**\n   * Represents hidden accounts\n   */\n  isHidden: PropTypes.bool,\n  /**\n   * An account object that has name, address, and balance data\n   */\n  account: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired,\n    metadata: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      snap: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string,\n        enabled: PropTypes.bool,\n      }),\n      keyring: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","export { AccountListItemMenu } from './account-list-item-menu';\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport { useSelector } from 'react-redux';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { shortenAddress } from '../../../helpers/utils/util';\n\nimport { AccountListItemMenu, AvatarGroup } from '..';\nimport { ConnectedAccountsMenu } from '../connected-accounts-menu';\nimport {\n  AvatarAccount,\n  AvatarAccountVariant,\n  AvatarToken,\n  AvatarTokenSize,\n  Box,\n  ButtonIcon,\n  Icon,\n  IconName,\n  IconSize,\n  Tag,\n  Text,\n} from '../../component-library';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BlockSize,\n  BorderColor,\n  BorderRadius,\n  Color,\n  Display,\n  FlexDirection,\n  JustifyContent,\n  Size,\n  TextAlign,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { KeyringType } from '../../../../shared/constants/keyring';\nimport UserPreferencedCurrencyDisplay from '../../app/user-preferenced-currency-display/user-preferenced-currency-display.component';\nimport { PRIMARY, SECONDARY } from '../../../helpers/constants/common';\nimport Tooltip from '../../ui/tooltip/tooltip';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  isAccountConnectedToCurrentTab,\n  getShowFiatInTestnets,\n  getUseBlockie,\n} from '../../../selectors';\nimport {\n  getMultichainIsTestnet,\n  getMultichainNativeCurrency,\n  getMultichainNativeCurrencyImage,\n  getMultichainNetwork,\n  getMultichainShouldShowFiat,\n} from '../../../selectors/multichain';\nimport { useMultichainAccountTotalFiatBalance } from '../../../hooks/useMultichainAccountTotalFiatBalance';\nimport { ConnectedStatus } from '../connected-status/connected-status';\nimport { normalizeSafeAddress } from '../../../../app/scripts/lib/multichain/address';\nimport { useMultichainSelector } from '../../../hooks/useMultichainSelector';\nimport { AccountListItemMenuTypes } from './account-list-item.types';\n\nconst MAXIMUM_CURRENCY_DECIMALS = 3;\nconst MAXIMUM_CHARACTERS_WITHOUT_TOOLTIP = 17;\n\nconst AccountListItem = ({\n  account,\n  selected,\n  onClick,\n  closeMenu,\n  accountsCount,\n  connectedAvatar,\n  isPinned = false,\n  menuType = AccountListItemMenuTypes.None,\n  isHidden = false,\n  currentTabOrigin,\n  isActive = false,\n  startAccessory,\n  onActionClick,\n}) => {\n  const t = useI18nContext();\n  const [accountOptionsMenuOpen, setAccountOptionsMenuOpen] = useState(false);\n  const [accountListItemMenuElement, setAccountListItemMenuElement] =\n    useState();\n\n  const useBlockie = useSelector(getUseBlockie);\n  const { isEvmNetwork } = useMultichainSelector(getMultichainNetwork, account);\n  const setAccountListItemMenuRef = (ref) => {\n    setAccountListItemMenuElement(ref);\n  };\n  const isTestnet = useMultichainSelector(getMultichainIsTestnet, account);\n  const isMainnet = !isTestnet;\n  const shouldShowFiat = useMultichainSelector(\n    getMultichainShouldShowFiat,\n    account,\n  );\n  const showFiatInTestnets = useSelector(getShowFiatInTestnets);\n  const showFiat =\n    shouldShowFiat && (isMainnet || (isTestnet && showFiatInTestnets));\n  const accountTotalFiatBalances =\n    useMultichainAccountTotalFiatBalance(account);\n  const mappedOrderedTokenList = accountTotalFiatBalances.orderedTokenList.map(\n    (item) => ({\n      avatarValue: item.iconUrl,\n    }),\n  );\n  const balanceToTranslate = isEvmNetwork\n    ? account.balance\n    : accountTotalFiatBalances.totalBalance;\n\n\n  // If this is the selected item in the Account menu,\n  // scroll the item into view\n  const itemRef = useRef(null);\n  useEffect(() => {\n    if (selected) {\n      itemRef.current?.scrollIntoView?.();\n    }\n  }, [itemRef, selected]);\n\n  const trackEvent = useContext(MetaMetricsContext);\n  const primaryTokenImage = useMultichainSelector(\n    getMultichainNativeCurrencyImage,\n    account,\n  );\n  const nativeCurrency = useMultichainSelector(\n    getMultichainNativeCurrency,\n    account,\n  );\n  const currentTabIsConnectedToSelectedAddress = useSelector((state) =>\n    isAccountConnectedToCurrentTab(state, account.address),\n  );\n  const isConnected =\n    currentTabOrigin && currentTabIsConnectedToSelectedAddress;\n  const isSingleAccount = accountsCount === 1;\n\n  return (\n    <Box\n      display={Display.Flex}\n      padding={4}\n      backgroundColor={selected ? Color.primaryMuted : Color.transparent}\n      className={classnames('multichain-account-list-item', {\n        'multichain-account-list-item--selected': selected,\n        'multichain-account-list-item--connected': Boolean(connectedAvatar),\n        'multichain-account-list-item--clickable': Boolean(onClick),\n      })}\n      ref={itemRef}\n      onClick={() => {\n        // Without this check, the account will be selected after\n        // the account options menu closes\n        if (!accountOptionsMenuOpen) {\n          onClick?.();\n        }\n      }}\n    >\n      {startAccessory ? (\n        <Box marginInlineEnd={2} marginTop={1}>\n          {startAccessory}\n        </Box>\n      ) : null}\n      {selected && (\n        <Box\n          className=\"multichain-account-list-item__selected-indicator\"\n          borderRadius={BorderRadius.pill}\n          backgroundColor={Color.primaryDefault}\n        />\n      )}\n\n      <>\n        <Box\n          display={[Display.Flex, Display.None]}\n          data-testid=\"account-list-item-badge\"\n        >\n          <ConnectedStatus address={account.address} isActive={isActive} />\n        </Box>\n        <Box display={[Display.None, Display.Flex]}>\n          {\n            ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n            <AvatarAccount\n              borderColor={BorderColor.transparent}\n              size={Size.MD}\n              address={account.address}\n              variant={\n                useBlockie\n                  ? AvatarAccountVariant.Blockies\n                  : AvatarAccountVariant.Jazzicon\n              }\n              marginInlineEnd={2}\n            />\n            ///: END:ONLY_INCLUDE_IF\n          }\n\n          {\n          }\n        </Box>\n      </>\n\n      <Box\n        display={Display.Flex}\n        flexDirection={FlexDirection.Column}\n        className=\"multichain-account-list-item__content\"\n      >\n        <Box display={Display.Flex} flexDirection={FlexDirection.Column}>\n          <Box\n            display={Display.Flex}\n            justifyContent={JustifyContent.spaceBetween}\n          >\n            <Box\n              className=\"multichain-account-list-item__account-name\"\n              marginInlineEnd={2}\n              display={Display.Flex}\n              alignItems={AlignItems.center}\n              gap={2}\n            >\n              {isPinned ? (\n                <Icon\n                  name={IconName.Pin}\n                  size={IconSize.Xs}\n                  className=\"account-pinned-icon\"\n                  data-testid=\"account-pinned-icon\"\n                />\n              ) : null}\n              {isHidden ? (\n                <Icon\n                  name={IconName.EyeSlash}\n                  size={IconSize.Xs}\n                  className=\"account-hidden-icon\"\n                />\n              ) : null}\n              <Text\n                as=\"button\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onClick?.();\n                }}\n                variant={TextVariant.bodyMdMedium}\n                className=\"multichain-account-list-item__account-name__button\"\n                padding={0}\n                backgroundColor={BackgroundColor.transparent}\n                width={BlockSize.Full}\n                textAlign={TextAlign.Left}\n                ellipsis\n              >\n                {account.metadata.name.length >\n                MAXIMUM_CHARACTERS_WITHOUT_TOOLTIP ? (\n                  <Tooltip\n                    title={account.metadata.name}\n                    position=\"bottom\"\n                    wrapperClassName=\"multichain-account-list-item__tooltip\"\n                  >\n                    {account.metadata.name}\n                  </Tooltip>\n                ) : (\n                  account.metadata.name\n                )}\n              </Text>\n            </Box>\n            <Text\n              as=\"div\"\n              className=\"multichain-account-list-item__asset\"\n              display={Display.Flex}\n              flexDirection={FlexDirection.Row}\n              alignItems={AlignItems.center}\n              justifyContent={JustifyContent.flexEnd}\n              ellipsis\n              textAlign={TextAlign.End}\n            >\n              <UserPreferencedCurrencyDisplay\n                account={account}\n                ethNumberOfDecimals={MAXIMUM_CURRENCY_DECIMALS}\n                value={balanceToTranslate}\n                type={PRIMARY}\n                showFiat={showFiat}\n                data-testid=\"first-currency-display\"\n              />\n            </Text>\n          </Box>\n        </Box>\n        <Box\n          display={Display.Flex}\n          justifyContent={JustifyContent.spaceBetween}\n        >\n          <Box display={Display.Flex} alignItems={AlignItems.center}>\n            <Text\n              variant={TextVariant.bodySm}\n              color={Color.textAlternative}\n              data-testid=\"account-list-address\"\n            >\n              {shortenAddress(normalizeSafeAddress(account.address))}\n            </Text>\n          </Box>\n          {/* For non-EVM networks we always want to show tokens */}\n          {mappedOrderedTokenList.length > 1 || !isEvmNetwork ? (\n            <AvatarGroup members={mappedOrderedTokenList} limit={4} />\n          ) : (\n            <Box\n              display={Display.Flex}\n              alignItems={AlignItems.center}\n              justifyContent={JustifyContent.center}\n              gap={1}\n              className=\"multichain-account-list-item__avatar-currency\"\n            >\n              <AvatarToken\n                src={primaryTokenImage}\n                name={nativeCurrency}\n                size={AvatarTokenSize.Xs}\n                borderColor={BorderColor.borderDefault}\n              />\n              <Text\n                variant={TextVariant.bodySm}\n                color={TextColor.textAlternative}\n                textAlign={TextAlign.End}\n                as=\"div\"\n              >\n                <UserPreferencedCurrencyDisplay\n                  account={account}\n                  ethNumberOfDecimals={MAXIMUM_CURRENCY_DECIMALS}\n                  value={account.balance}\n                  type={SECONDARY}\n                  showNative\n                  data-testid=\"second-currency-display\"\n                />\n              </Text>\n            </Box>\n          )}\n        </Box>\n        {account.label ? (\n          <Tag\n            label={account.label}\n            labelProps={{\n              variant: TextVariant.bodyXs,\n              color: Color.textAlternative,\n            }}\n            startIconName={\n              account.metadata.keyring.type === KeyringType.snap\n                ? IconName.Snaps\n                : null\n            }\n          />\n        ) : null}\n      </Box>\n\n      {menuType === AccountListItemMenuTypes.None ? null : (\n        <ButtonIcon\n          ariaLabel={`${account.metadata.name} ${t('options')}`}\n          iconName={IconName.MoreVertical}\n          size={IconSize.Sm}\n          ref={setAccountListItemMenuRef}\n          onClick={(e) => {\n            e.stopPropagation();\n            if (!accountOptionsMenuOpen) {\n              trackEvent({\n                event: MetaMetricsEventName.AccountDetailMenuOpened,\n                category: MetaMetricsEventCategory.Navigation,\n                properties: {\n                  location: 'Account Options',\n                },\n              });\n            }\n            setAccountOptionsMenuOpen(!accountOptionsMenuOpen);\n          }}\n          data-testid=\"account-list-item-menu-button\"\n        />\n      )}\n      {menuType === AccountListItemMenuTypes.Account && (\n        <AccountListItemMenu\n          anchorElement={accountListItemMenuElement}\n          account={account}\n          onClose={() => setAccountOptionsMenuOpen(false)}\n          isOpen={accountOptionsMenuOpen}\n          isRemovable={account.keyring.type !== KeyringType.hdKeyTree}\n          closeMenu={closeMenu}\n          isPinned={isPinned}\n          isHidden={isHidden}\n          isConnected={isConnected}\n        />\n      )}\n      {menuType === AccountListItemMenuTypes.Connection && (\n        <ConnectedAccountsMenu\n          anchorElement={accountListItemMenuElement}\n          account={account}\n          onClose={() => setAccountOptionsMenuOpen(false)}\n          closeMenu={closeMenu}\n          disableAccountSwitcher={isSingleAccount && selected}\n          isOpen={accountOptionsMenuOpen}\n          onActionClick={onActionClick}\n          activeTabOrigin={currentTabOrigin}\n        />\n      )}\n    </Box>\n  );\n};\n\nAccountListItem.propTypes = {\n  /**\n   * An account object that has name, address, and balance data\n   */\n  account: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired,\n    metadata: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      snap: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string,\n        enabled: PropTypes.bool,\n      }),\n      keyring: PropTypes.shape({\n        type: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n    keyring: PropTypes.shape({\n      type: PropTypes.string.isRequired,\n    }).isRequired,\n    label: PropTypes.string,\n  }).isRequired,\n  /**\n   * Represents if this account is currently selected\n   */\n  selected: PropTypes.bool.isRequired,\n  /**\n   * Function to execute when the item is clicked\n   */\n  onClick: PropTypes.func,\n  /**\n   * Represents how many accounts are being listed\n   */\n  accountsCount: PropTypes.number,\n  /**\n   * Function that closes the menu\n   */\n  closeMenu: PropTypes.func,\n  /**\n   * Function to set account name to show disconnect toast when an account is disconnected\n   */\n  onActionClick: PropTypes.func,\n  /**\n   * File location of the avatar icon\n   */\n  connectedAvatar: PropTypes.string,\n  /**\n   * Represents the type of menu to be rendered\n   */\n  menuType: PropTypes.string,\n  /**\n   * Represents pinned accounts\n   */\n  isPinned: PropTypes.bool,\n  /**\n   * Represents hidden accounts\n   */\n  isHidden: PropTypes.bool,\n  /**\n   * Represents current tab origin\n   */\n  currentTabOrigin: PropTypes.string,\n  /**\n   * Represents active accounts\n   */\n  isActive: PropTypes.bool,\n  /**\n   * Represents start accessory\n   */\n  startAccessory: PropTypes.node,\n};\n\nAccountListItem.displayName = 'AccountListItem';\n\nexport default React.memo(AccountListItem);\n","export const AccountListItemMenuTypes = {\n  None: 'none',\n  Connection: 'connection',\n  Account: 'account',\n};\n","export { default as AccountListItem } from './account-list-item';\nexport { AccountListItemMenuTypes } from './account-list-item.types';\n","import React, { useContext, useState, useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport Fuse from 'fuse.js';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  BtcAccountType,\n  EthAccountType,\n} from '@metamask/keyring-api';\nimport {\n  Box,\n  ButtonLink,\n  ButtonLinkSize,\n  ButtonSecondary,\n  ButtonSecondarySize,\n  IconName,\n  Modal,\n  ModalOverlay,\n  Text,\n} from '../../component-library';\nimport { ModalContent } from '../../component-library/modal-content/deprecated';\nimport { ModalHeader } from '../../component-library/modal-header';\nimport { TextFieldSearch } from '../../component-library/text-field-search/deprecated';\nimport {\n  AccountListItem,\n  AccountListItemMenuTypes,\n  CreateEthAccount,\n  ImportAccount,\n} from '..';\nimport {\n  AlignItems,\n  BlockSize,\n  Display,\n  FlexDirection,\n  Size,\n  TextColor,\n} from '../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  getConnectedSubjectsForAllAddresses,\n  getHiddenAccountsList,\n  ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n  getIsAddSnapAccountEnabled,\n  ///: END:ONLY_INCLUDE_IF\n  getMetaMaskAccountsOrdered,\n  getOriginOfCurrentTab,\n  getSelectedInternalAccount,\n  getUpdatedAndSortedAccounts,\n  getIsWatchEthereumAccountEnabled,\n} from '../../../selectors';\nimport { setSelectedAccount } from '../../../store/actions';\nimport {\n  MetaMetricsEventAccountType,\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport {\n  CONNECT_HARDWARE_ROUTE,\n} from '../../../helpers/constants/routes';\nimport { getEnvironmentType } from '../../../../app/scripts/lib/util';\nimport { ENVIRONMENT_TYPE_POPUP } from '../../../../shared/constants/app';\nimport { getAccountLabel } from '../../../helpers/utils/accounts';\nimport {\n  InternalAccountWithBalance,\n  AccountConnections,\n  MergedInternalAccount,\n} from '../../../selectors/selectors.types';\nimport {\n  ACCOUNT_WATCHER_NAME,\n  ACCOUNT_WATCHER_SNAP_ID,\n} from '../../../../app/scripts/lib/snap-keyring/account-watcher-snap';\nimport { HiddenAccountList } from './hidden-account-list';\n\nconst ACTION_MODES = {\n  // Displays the search box and account list\n  LIST: '',\n  // Displays the Add, Import, Hardware accounts\n  MENU: 'menu',\n  // Displays the add account form controls\n  ADD: 'add',\n  // Displays the add account form controls (for watch-only account)\n  ADD_WATCH_ONLY: 'add-watch-only',\n  // Displays the import account form controls\n  IMPORT: 'import',\n};\n\n/**\n * Gets the title for a given action mode.\n *\n * @param t - Function to translate text.\n * @param actionMode - An action mode.\n * @returns The title for this action mode.\n */\nexport const getActionTitle = (\n  t: (text: string) => string,\n  actionMode: string,\n) => {\n  switch (actionMode) {\n    case ACTION_MODES.ADD:\n    case ACTION_MODES.MENU:\n    case ACTION_MODES.ADD_WATCH_ONLY:\n      return t('addAccount');\n    case ACTION_MODES.IMPORT:\n      return t('importAccount');\n    default:\n      return t('selectAnAccount');\n  }\n};\n\n/**\n * Merges ordered accounts with balances with each corresponding account data from internal accounts\n *\n * @param accountsWithBalances - ordered accounts with balances\n * @param internalAccounts - internal accounts\n * @returns merged accounts list with balances and internal account data\n */\nexport const mergeAccounts = (\n  accountsWithBalances: MergedInternalAccount[],\n  internalAccounts: InternalAccount[],\n) => {\n  return accountsWithBalances.map((account) => {\n    const internalAccount = internalAccounts.find(\n      (intAccount) => intAccount.address === account.address,\n    );\n    if (internalAccount) {\n      return {\n        ...account,\n        ...internalAccount,\n        keyring: internalAccount.metadata.keyring,\n        label: getAccountLabel(\n          internalAccount.metadata.keyring.type,\n          internalAccount,\n        ),\n      };\n    }\n    return account;\n  });\n};\n\ntype AccountListMenuProps = {\n  onClose: () => void;\n  showAccountCreation?: boolean;\n  accountListItemProps?: object;\n  allowedAccountTypes?: KeyringAccountType[];\n};\n\nexport const AccountListMenu = ({\n  onClose,\n  showAccountCreation = true,\n  accountListItemProps,\n  allowedAccountTypes = [\n    EthAccountType.Eoa,\n    EthAccountType.Erc4337,\n    BtcAccountType.P2wpkh,\n  ],\n}: AccountListMenuProps) => {\n  const t = useI18nContext();\n  const trackEvent = useContext(MetaMetricsContext);\n  const accounts: InternalAccountWithBalance[] = useSelector(\n    getMetaMaskAccountsOrdered,\n  );\n  const filteredAccounts = useMemo(\n    () =>\n      accounts.filter((account: InternalAccountWithBalance) =>\n        allowedAccountTypes.includes(account.type),\n      ),\n    [accounts, allowedAccountTypes],\n  );\n  const selectedAccount = useSelector(getSelectedInternalAccount);\n  const connectedSites = useSelector(\n    getConnectedSubjectsForAllAddresses,\n  ) as AccountConnections;\n  const currentTabOrigin = useSelector(getOriginOfCurrentTab);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const hiddenAddresses = useSelector(getHiddenAccountsList);\n  const updatedAccountsList = useSelector(getUpdatedAndSortedAccounts);\n  const filteredUpdatedAccountList = useMemo(\n    () =>\n      updatedAccountsList.filter((account) =>\n        allowedAccountTypes.includes(account.type),\n      ),\n    [updatedAccountsList, allowedAccountTypes],\n  );\n  ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n  const addSnapAccountEnabled = useSelector(getIsAddSnapAccountEnabled);\n  ///: END:ONLY_INCLUDE_IF\n  const isAddWatchEthereumAccountEnabled = useSelector(\n    getIsWatchEthereumAccountEnabled,\n  );\n  const handleAddWatchAccount = useCallback(async () => {\n    await trackEvent({\n      category: MetaMetricsEventCategory.Navigation,\n      event: MetaMetricsEventName.AccountAddSelected,\n      properties: {\n        account_type: MetaMetricsEventAccountType.Snap,\n        snap_id: ACCOUNT_WATCHER_SNAP_ID,\n        snap_name: ACCOUNT_WATCHER_NAME,\n        location: 'Main Menu',\n      },\n    });\n    onClose();\n    history.push(`/snaps/view/${encodeURIComponent(ACCOUNT_WATCHER_SNAP_ID)}`);\n  }, [trackEvent, onClose, history]);\n\n  const [searchQuery, setSearchQuery] = useState('');\n  const [actionMode, setActionMode] = useState(ACTION_MODES.LIST);\n\n  let searchResults: MergedInternalAccount[] = filteredUpdatedAccountList;\n  if (searchQuery) {\n    const fuse = new Fuse(filteredAccounts, {\n      threshold: 0.2,\n      location: 0,\n      distance: 100,\n      maxPatternLength: 32,\n      minMatchCharLength: 1,\n      keys: ['metadata.name', 'address'],\n    });\n    fuse.setCollection(filteredAccounts);\n    searchResults = fuse.search(searchQuery);\n  }\n  searchResults = mergeAccounts(searchResults, filteredAccounts);\n\n  const title = useMemo(\n    () => getActionTitle(t as (text: string) => string, actionMode),\n    [actionMode, t],\n  );\n\n  // eslint-disable-next-line no-empty-function\n  let onBack;\n  if (actionMode !== ACTION_MODES.LIST) {\n    if (actionMode === ACTION_MODES.MENU) {\n      onBack = () => setActionMode(ACTION_MODES.LIST);\n    } else {\n      onBack = () => setActionMode(ACTION_MODES.MENU);\n    }\n  }\n\n  const onAccountListItemItemClicked = useCallback(\n    (account) => {\n      return () => {\n        onClose();\n        trackEvent({\n          category: MetaMetricsEventCategory.Navigation,\n          event: MetaMetricsEventName.NavAccountSwitched,\n          properties: {\n            location: 'Main Menu',\n          },\n        });\n        dispatch(setSelectedAccount(account.address));\n      };\n    },\n    [dispatch, onClose, trackEvent],\n  );\n\n  return (\n    <Modal isOpen onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent\n        className=\"multichain-account-menu-popover\"\n        modalDialogProps={{\n          className: 'multichain-account-menu-popover__dialog',\n          padding: 0,\n          display: Display.Flex,\n          flexDirection: FlexDirection.Column,\n        }}\n      >\n        <ModalHeader padding={4} onClose={onClose} onBack={onBack}>\n          {title}\n        </ModalHeader>\n        {actionMode === ACTION_MODES.ADD ? (\n          <Box paddingLeft={4} paddingRight={4} paddingBottom={4}>\n            <CreateEthAccount\n              onActionComplete={(confirmed) => {\n                if (confirmed) {\n                  onClose();\n                } else {\n                  setActionMode(ACTION_MODES.LIST);\n                }\n              }}\n            />\n          </Box>\n        ) : null}\n        {actionMode === ACTION_MODES.IMPORT ? (\n          <Box\n            paddingLeft={4}\n            paddingRight={4}\n            paddingBottom={4}\n            paddingTop={0}\n          >\n            <ImportAccount\n              onActionComplete={(confirmed) => {\n                if (confirmed) {\n                  onClose();\n                } else {\n                  setActionMode(ACTION_MODES.LIST);\n                }\n              }}\n            />\n          </Box>\n        ) : null}\n        {/* Add / Import / Hardware Menu */}\n        {actionMode === ACTION_MODES.MENU ? (\n          <Box padding={4}>\n            <Box>\n              <ButtonLink\n                size={ButtonLinkSize.Sm}\n                startIconName={IconName.Add}\n                onClick={() => {\n                  trackEvent({\n                    category: MetaMetricsEventCategory.Navigation,\n                    event: MetaMetricsEventName.AccountAddSelected,\n                    properties: {\n                      account_type: MetaMetricsEventAccountType.Default,\n                      location: 'Main Menu',\n                    },\n                  });\n                  setActionMode(ACTION_MODES.ADD);\n                }}\n                data-testid=\"multichain-account-menu-popover-add-account\"\n              >\n                {t('addNewAccount')}\n              </ButtonLink>\n            </Box>\n            {\n            }\n            {\n            }\n            <Box marginTop={4}>\n              <ButtonLink\n                size={ButtonLinkSize.Sm}\n                startIconName={IconName.Import}\n                onClick={() => {\n                  trackEvent({\n                    category: MetaMetricsEventCategory.Navigation,\n                    event: MetaMetricsEventName.AccountAddSelected,\n                    properties: {\n                      account_type: MetaMetricsEventAccountType.Imported,\n                      location: 'Main Menu',\n                    },\n                  });\n                  setActionMode(ACTION_MODES.IMPORT);\n                }}\n              >\n                {t('importAccount')}\n              </ButtonLink>\n            </Box>\n            <Box marginTop={4}>\n              <ButtonLink\n                size={ButtonLinkSize.Sm}\n                startIconName={IconName.Hardware}\n                onClick={() => {\n                  onClose();\n                  trackEvent({\n                    category: MetaMetricsEventCategory.Navigation,\n                    event: MetaMetricsEventName.AccountAddSelected,\n                    properties: {\n                      account_type: MetaMetricsEventAccountType.Hardware,\n                      location: 'Main Menu',\n                    },\n                  });\n                  if (getEnvironmentType() === ENVIRONMENT_TYPE_POPUP) {\n                    global.platform.openExtensionInBrowser?.(\n                      CONNECT_HARDWARE_ROUTE,\n                    );\n                  } else {\n                    history.push(CONNECT_HARDWARE_ROUTE);\n                  }\n                }}\n              >\n                {t('addHardwareWallet')}\n              </ButtonLink>\n            </Box>\n            {\n              ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n              addSnapAccountEnabled ? (\n                <Box marginTop={4}>\n                  <ButtonLink\n                    size={ButtonLinkSize.Sm}\n                    startIconName={IconName.Snaps}\n                    onClick={() => {\n                      onClose();\n                      trackEvent({\n                        category: MetaMetricsEventCategory.Navigation,\n                        event: MetaMetricsEventName.AccountAddSelected,\n                        properties: {\n                          account_type: MetaMetricsEventAccountType.Snap,\n                          location: 'Main Menu',\n                        },\n                      });\n                      global.platform.openTab({\n                        url: process.env.ACCOUNT_SNAPS_DIRECTORY_URL as string,\n                      });\n                    }}\n                  >\n                    {t('settingAddSnapAccount')}\n                  </ButtonLink>\n                </Box>\n              ) : null\n              ///: END:ONLY_INCLUDE_IF\n            }\n            {\n            }\n            {isAddWatchEthereumAccountEnabled && (\n              <Box marginTop={4}>\n                <ButtonLink\n                  disabled={!isAddWatchEthereumAccountEnabled}\n                  size={ButtonLinkSize.Sm}\n                  startIconName={IconName.Eye}\n                  onClick={handleAddWatchAccount}\n                  data-testid=\"multichain-account-menu-popover-add-watch-only-account\"\n                >\n                  {t('addEthereumWatchOnlyAccount')}\n                </ButtonLink>\n              </Box>\n            )}\n          </Box>\n        ) : null}\n        {actionMode === ACTION_MODES.LIST ? (\n          <>\n            {/* Search box */}\n            {filteredAccounts.length > 1 ? (\n              <Box\n                paddingLeft={4}\n                paddingRight={4}\n                paddingBottom={4}\n                paddingTop={0}\n              >\n                <TextFieldSearch\n                  size={Size.SM}\n                  width={BlockSize.Full}\n                  placeholder={t('searchAccounts')}\n                  value={searchQuery}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    setSearchQuery(e.target.value)\n                  }\n                  clearButtonOnClick={() => setSearchQuery('')}\n                  clearButtonProps={{\n                    size: Size.SM,\n                  }}\n                  inputProps={{ autoFocus: true }}\n                  // TODO: These props are required in the TextFieldSearch component. These should be optional\n                  endAccessory\n                  className\n                />\n              </Box>\n            ) : null}\n            {/* Account list block */}\n            <Box className=\"multichain-account-menu-popover__list\">\n              {searchResults.length === 0 && searchQuery !== '' ? (\n                <Text\n                  paddingLeft={4}\n                  paddingRight={4}\n                  color={TextColor.textMuted}\n                  data-testid=\"multichain-account-menu-popover-no-results\"\n                >\n                  {t('noAccountsFound')}\n                </Text>\n              ) : null}\n              {searchResults.map((account) => {\n                const connectedSite = connectedSites[account.address]?.find(\n                  ({ origin }) => origin === currentTabOrigin,\n                );\n\n                const hideAccountListItem =\n                  searchQuery.length === 0 && account.hidden;\n\n                /* NOTE: Hidden account will be displayed only in the search list */\n\n                return (\n                  <Box\n                    className={\n                      account.hidden\n                        ? 'multichain-account-menu-popover__list--menu-item-hidden'\n                        : 'multichain-account-menu-popover__list--menu-item'\n                    }\n                    display={hideAccountListItem ? Display.None : Display.Block}\n                    key={account.address}\n                  >\n                    <AccountListItem\n                      onClick={onAccountListItemItemClicked(account)}\n                      account={account}\n                      key={account.address}\n                      selected={selectedAccount.address === account.address}\n                      closeMenu={onClose}\n                      connectedAvatar={connectedSite?.iconUrl}\n                      menuType={AccountListItemMenuTypes.Account}\n                      isPinned={Boolean(account.pinned)}\n                      isHidden={Boolean(account.hidden)}\n                      currentTabOrigin={currentTabOrigin}\n                      isActive={Boolean(account.active)}\n                      {...accountListItemProps}\n                    />\n                  </Box>\n                );\n              })}\n            </Box>\n            {/* Hidden Accounts, this component shows hidden accounts in account list Item*/}\n            {hiddenAddresses.length > 0 ? (\n              <HiddenAccountList onClose={onClose} />\n            ) : null}\n            {/* Add / Import / Hardware button */}\n            {showAccountCreation ? (\n              <Box\n                paddingTop={2}\n                paddingBottom={4}\n                paddingLeft={4}\n                paddingRight={4}\n                alignItems={AlignItems.center}\n                display={Display.Flex}\n              >\n                <ButtonSecondary\n                  startIconName={IconName.Add}\n                  size={ButtonSecondarySize.Lg}\n                  block\n                  onClick={() => setActionMode(ACTION_MODES.MENU)}\n                  data-testid=\"multichain-account-menu-popover-action-button\"\n                >\n                  {t('addImportAccount')}\n                </ButtonSecondary>\n              </Box>\n            ) : null}\n          </>\n        ) : null}\n      </ModalContent>\n    </Modal>\n  );\n};\n\nAccountListMenu.propTypes = {\n  /**\n   * Function that executes when the menu closes\n   */\n  onClose: PropTypes.func.isRequired,\n  /**\n   * Represents if the button to create new accounts should display\n   */\n  showAccountCreation: PropTypes.bool,\n  /**\n   * Props to pass to the AccountListItem,\n   */\n  accountListItemProps: PropTypes.object,\n  /**\n   * Filters the account types to be included in the account list\n   */\n  allowedAccountTypes: PropTypes.array,\n};\n","import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BlockSize,\n  Display,\n  IconColor,\n  JustifyContent,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport {\n  getConnectedSubjectsForAllAddresses,\n  getHiddenAccountsList,\n  getInternalAccounts,\n  getMetaMaskAccountsOrdered,\n  getOriginOfCurrentTab,\n  getSelectedAccount,\n} from '../../../selectors';\nimport { setSelectedAccount } from '../../../store/actions';\nimport {\n  AvatarIcon,\n  AvatarIconSize,\n  Box,\n  Icon,\n  IconName,\n  IconSize,\n  Text,\n} from '../../component-library';\nimport { AccountListItem } from '../account-list-item';\nimport { AccountListItemMenuTypes } from '..';\nimport { mergeAccounts } from './account-list-menu';\n\nexport const HiddenAccountList = ({ onClose }) => {\n  const t = useI18nContext();\n  const trackEvent = useContext(MetaMetricsContext);\n  const dispatch = useDispatch();\n  const hiddenAddresses = useSelector(getHiddenAccountsList);\n  const accounts = useSelector(getMetaMaskAccountsOrdered);\n  const internalAccounts = useSelector(getInternalAccounts);\n  const mergedAccounts = mergeAccounts(accounts, internalAccounts);\n  const selectedAccount = useSelector(getSelectedAccount);\n  const connectedSites = useSelector(getConnectedSubjectsForAllAddresses);\n  const currentTabOrigin = useSelector(getOriginOfCurrentTab);\n  const filteredHiddenAccounts = mergedAccounts.filter((account) =>\n    hiddenAddresses.includes(account.address),\n  );\n  const [showListItem, setShowListItem] = useState(false);\n  return (\n    <>\n      <Box\n        as=\"button\"\n        onClick={() => setShowListItem(!showListItem)}\n        backgroundColor={BackgroundColor.backgroundDefault}\n        display={Display.Flex}\n        padding={4}\n        alignItems={AlignItems.center}\n        width={BlockSize.Full}\n        justifyContent={JustifyContent.spaceBetween}\n        className=\"hidden-accounts-list\"\n        data-testid=\"hidden-accounts-list\"\n      >\n        <Box\n          display={Display.Flex}\n          alignItems={AlignItems.center}\n          width={BlockSize.TwoThirds}\n          gap={2}\n        >\n          <AvatarIcon\n            iconName={IconName.EyeSlash}\n            color={IconColor.infoDefault}\n            backgroundColor={BackgroundColor.infoMuted}\n            size={AvatarIconSize.Sm}\n          />\n          <Box display={Display.Flex}>\n            <Text variant={TextVariant.bodyMdMedium}>\n              {t('hiddenAccounts')}\n            </Text>\n          </Box>\n        </Box>\n        <Box\n          gap={2}\n          display={Display.Flex}\n          alignItems={AlignItems.center}\n          width={BlockSize.OneThird}\n          justifyContent={JustifyContent.flexEnd}\n        >\n          <Text variant={TextVariant.bodyMdMedium}>\n            {hiddenAddresses.length}\n          </Text>\n          <Icon\n            name={showListItem ? IconName.ArrowUp : IconName.ArrowDown}\n            size={IconSize.Sm}\n            color={IconColor.iconDefault}\n          />\n        </Box>\n      </Box>\n      {showListItem ? (\n        <Box>\n          {filteredHiddenAccounts.map((account) => {\n            const connectedSite = connectedSites[account.address]?.find(\n              ({ origin }) => origin === currentTabOrigin,\n            );\n            return (\n              <Box\n                className=\"multichain-account-menu-popover__list--menu-item-hidden-account\"\n                key={account.address}\n              >\n                <AccountListItem\n                  onClick={() => {\n                    onClose();\n                    trackEvent({\n                      category: MetaMetricsEventCategory.Navigation,\n                      event: MetaMetricsEventName.NavAccountSwitched,\n                      properties: {\n                        location: 'Main Menu',\n                      },\n                    });\n                    dispatch(setSelectedAccount(account.address));\n                  }}\n                  account={account}\n                  key={account.address}\n                  selected={selectedAccount.address === account.address}\n                  closeMenu={onClose}\n                  connectedAvatar={connectedSite?.iconUrl}\n                  menuType={AccountListItemMenuTypes.Account}\n                  isPinned={Boolean(account.pinned)}\n                  isHidden={Boolean(account.hidden)}\n                />\n              </Box>\n            );\n          })}\n        </Box>\n      ) : null}\n    </>\n  );\n};\n\nHiddenAccountList.propTypes = {\n  /**\n   * Function that executes when the menu closes\n   */\n  onClose: PropTypes.func.isRequired,\n};\n","export { AccountListMenu } from './account-list-menu';\n","import React from 'react';\nimport { BtcOverview } from '../../app/wallet-overview';\nimport { AccountOverviewLayout } from './account-overview-layout';\nimport { AccountOverviewCommonProps } from './common';\n\nexport type AccountOverviewBtcProps = AccountOverviewCommonProps;\n\nexport const AccountOverviewBtc = (props: AccountOverviewBtcProps) => {\n  return (\n    <AccountOverviewLayout\n      showTokens={true}\n      showTokensLinks={false}\n      showNfts={false}\n      showActivity={true}\n      {...props}\n    >\n      {\n        ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask,build-mmi)\n        <BtcOverview />\n        ///: END:ONLY_INCLUDE_IF\n      }\n    </AccountOverviewLayout>\n  );\n};\n","import React from 'react';\nimport { EthOverview } from '../../app/wallet-overview';\nimport { AccountOverviewLayout } from './account-overview-layout';\nimport { AccountOverviewCommonProps } from './common';\n\nexport type AccountOverviewEthProps = AccountOverviewCommonProps;\n\nexport const AccountOverviewEth = (props: AccountOverviewEthProps) => {\n  return (\n    <AccountOverviewLayout\n      showTokens={true}\n      showNfts={true}\n      showActivity={true}\n      {...props}\n    >\n      {\n        ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask,build-mmi)\n        <EthOverview />\n        ///: END:ONLY_INCLUDE_IF\n      }\n    </AccountOverviewLayout>\n  );\n};\n","import React from 'react';\nimport {\n  AccountOverviewTabsProps,\n  AccountOverviewTabs,\n} from './account-overview-tabs';\n\nexport type AccountOverviewLayoutProps = AccountOverviewTabsProps & {\n  children: React.ReactElement;\n};\n\nexport const AccountOverviewLayout = ({\n  children,\n  ...tabsProps\n}: AccountOverviewLayoutProps) => {\n  return (\n    <>\n      <div className=\"account-overview__balance-wrapper\">{children}</div>\n\n      <AccountOverviewTabs {...tabsProps}></AccountOverviewTabs>\n    </>\n  );\n};\n","import React, { useCallback, useContext, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { ASSET_ROUTE } from '../../../helpers/constants/routes';\nimport {\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main)\n  SUPPORT_LINK,\n  ///: END:ONLY_INCLUDE_IF\n} from '../../../../shared/lib/ui-utils';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport NftsTab from '../../app/assets/nfts/nfts-tab';\nimport AssetList from '../../app/assets/asset-list';\nimport TransactionList from '../../app/transaction-list';\nimport { Tabs, Tab } from '../../ui/tabs';\n///: BEGIN:ONLY_INCLUDE_IF(build-main,build-mmi)\nimport {\n  ///: END:ONLY_INCLUDE_IF\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main)\n  Display,\n  ///: END:ONLY_INCLUDE_IF\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-mmi)\n  JustifyContent,\n} from '../../../helpers/constants/design-system';\n///: END:ONLY_INCLUDE_IF\nimport {\n  Box,\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main)\n  ButtonLink,\n  ButtonLinkSize,\n  IconName,\n  ///: END:ONLY_INCLUDE_IF\n} from '../../component-library';\nimport { AccountOverviewCommonProps } from './common';\n\nexport type AccountOverviewTabsProps = AccountOverviewCommonProps & {\n  showTokens: boolean;\n  showTokensLinks?: boolean;\n  showNfts: boolean;\n  showActivity: boolean;\n};\n\nexport const AccountOverviewTabs = ({\n  onTabClick,\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main)\n  onSupportLinkClick,\n  ///: END:ONLY_INCLUDE_IF\n  defaultHomeActiveTabName,\n  showTokens,\n  showTokensLinks,\n  showNfts,\n  showActivity,\n}: AccountOverviewTabsProps) => {\n  const history = useHistory();\n  const t = useI18nContext();\n  const trackEvent = useContext(MetaMetricsContext);\n\n  const tabProps = useMemo(\n    () => ({\n      activeClassName: 'account-overview__tab--active',\n      className: 'account-overview__tab',\n    }),\n    [],\n  );\n\n  const getEventFromTabName = (tabName: string) => {\n    switch (tabName) {\n      case 'nfts':\n        return MetaMetricsEventName.NftScreenOpened;\n      case 'activity':\n        return MetaMetricsEventName.ActivityScreenOpened;\n      default:\n        return MetaMetricsEventName.TokenScreenOpened;\n    }\n  };\n\n  const handleTabClick = useCallback(\n    (tabName: string) => {\n      onTabClick(tabName);\n      trackEvent({\n        category: MetaMetricsEventCategory.Home,\n        event: getEventFromTabName(tabName),\n      });\n    },\n    [onTabClick],\n  );\n\n\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main)\n  const NeedHelpButtonLink = React.memo((props: Record<string, unknown>) => (\n    <ButtonLink\n      size={ButtonLinkSize.Md}\n      startIconName={IconName.MessageQuestion}\n      data-testid=\"need-help-link\"\n      href={SUPPORT_LINK}\n      display={Display.Flex}\n      onClick={onSupportLinkClick}\n      externalLink\n      {...props}\n    >\n      {t('needHelpLinkText')}\n    </ButtonLink>\n  ));\n  ///: END:ONLY_INCLUDE_IF\n\n  return (\n    <Box style={{ flexGrow: '1' }}>\n      <Tabs\n        defaultActiveTabKey={defaultHomeActiveTabName}\n        onTabClick={handleTabClick}\n        tabsClassName=\"account-overview__tabs\"\n      >\n        {showTokens && (\n          <Tab\n            name={t('tokens')}\n            tabKey=\"tokens\"\n            data-testid=\"account-overview__asset-tab\"\n            {...tabProps}\n          >\n            <Box marginTop={2}>\n              <AssetList\n                showTokensLinks={showTokensLinks ?? true}\n                onClickAsset={(asset: string) =>\n                  history.push(`${ASSET_ROUTE}/${asset}`)\n                }\n              />\n              {\n                ///: BEGIN:ONLY_INCLUDE_IF(build-main)\n                <NeedHelpButtonLink\n                  justifyContent={JustifyContent.flexStart}\n                  paddingLeft={4}\n                  marginBottom={4}\n                ></NeedHelpButtonLink>\n                ///: END:ONLY_INCLUDE_IF\n              }\n            </Box>\n          </Tab>\n        )}\n\n        {showNfts && (\n          <Tab\n            name={t('nfts')}\n            tabKey=\"nfts\"\n            data-testid=\"account-overview__nfts-tab\"\n            {...tabProps}\n          >\n            <NftsTab />\n            {\n              ///: BEGIN:ONLY_INCLUDE_IF(build-main)\n              <NeedHelpButtonLink\n                justifyContent={JustifyContent.flexStart}\n                paddingLeft={4}\n                marginBottom={4}\n              ></NeedHelpButtonLink>\n              ///: END:ONLY_INCLUDE_IF\n            }\n          </Tab>\n        )}\n\n        {showActivity && (\n          <Tab\n            name={t('activity')}\n            tabKey=\"activity\"\n            data-testid=\"account-overview__activity-tab\"\n            {...tabProps}\n          >\n            <TransactionList boxProps={{ paddingTop: 4 }} />\n            {\n              ///: BEGIN:ONLY_INCLUDE_IF(build-main)\n              <NeedHelpButtonLink\n                justifyContent={JustifyContent.center}\n                marginBottom={4}\n                marginTop={4}\n              ></NeedHelpButtonLink>\n              ///: END:ONLY_INCLUDE_IF\n            }\n          </Tab>\n        )}\n      </Tabs>\n      {\n      }\n    </Box>\n  );\n};\n","import React from 'react';\nimport { Box } from '../../component-library';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { AccountOverviewCommonProps } from './common';\nimport { AccountOverviewLayout } from './account-overview-layout';\n\nexport type AccountOverviewUnknownProps = AccountOverviewCommonProps;\n\nexport const AccountOverviewUnknown = (props: AccountOverviewUnknownProps) => {\n  const t = useI18nContext();\n\n  return (\n    <AccountOverviewLayout\n      showTokens={false}\n      showNfts={false}\n      showActivity={true}\n      {...props}\n    >\n      <Box className=\"account-overview-unknown__empty\">\n        <Box className=\"account-overview-unknown__empty-text\">\n          <span>{t('accountTypeNotSupported')}</span>\n        </Box>\n      </Box>\n    </AccountOverviewLayout>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { BtcAccountType, EthAccountType } from '@metamask/keyring-api';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { BannerAlert, BannerAlertSeverity } from '../../component-library';\nimport { getSelectedInternalAccount } from '../../../selectors';\nimport { AccountOverviewEth } from './account-overview-eth';\nimport { AccountOverviewBtc } from './account-overview-btc';\nimport { AccountOverviewUnknown } from './account-overview-unknown';\nimport { AccountOverviewCommonProps } from './common';\n\nexport type AccountOverviewProps = AccountOverviewCommonProps & {\n  useExternalServices: boolean;\n};\n\nexport function AccountOverview(props: AccountOverviewProps) {\n  const t = useI18nContext();\n  const account = useSelector(getSelectedInternalAccount);\n\n  const { useExternalServices, setBasicFunctionalityModalOpen } = props;\n\n  const renderAccountOverviewOption = () => {\n    switch (account.type) {\n      case EthAccountType.Eoa:\n      case EthAccountType.Erc4337:\n        return <AccountOverviewEth {...props}></AccountOverviewEth>;\n      case BtcAccountType.P2wpkh:\n        return <AccountOverviewBtc {...props}></AccountOverviewBtc>;\n      default:\n        return <AccountOverviewUnknown {...props}></AccountOverviewUnknown>;\n    }\n  };\n\n  return (\n    <>\n      {!useExternalServices && (\n        <BannerAlert\n          margin={4}\n          marginBottom={0}\n          severity={BannerAlertSeverity.Danger}\n          actionButtonLabel={t('basicConfigurationBannerCTA')}\n          actionButtonOnClick={() => {\n            setBasicFunctionalityModalOpen();\n          }}\n          title={t('basicConfigurationBannerTitle')}\n        />\n      )}\n      {renderAccountOverviewOption()}\n    </>\n  );\n}\n","export { AccountOverview } from './account-overview';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { toChecksumHexAddress } from '../../../../shared/modules/hexstring-utils';\nimport {\n  AvatarAccount,\n  AvatarAccountVariant,\n  ButtonBase,\n  ButtonBaseSize,\n  IconName,\n  Text,\n} from '../../component-library';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BorderRadius,\n  Display,\n  IconColor,\n  Size,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport {\n  getUseBlockie,\n} from '../../../selectors';\nimport { shortenAddress } from '../../../helpers/utils/util';\n\nexport const AccountPicker = ({\n  address,\n  name,\n  onClick,\n  disabled = false,\n  showAddress = false,\n  addressProps = {},\n  labelProps = {},\n  textProps = {},\n  className = '',\n  ...props\n}) => {\n  const useBlockie = useSelector(getUseBlockie);\n  const shortenedAddress = shortenAddress(toChecksumHexAddress(address));\n\n\n  return (\n    <ButtonBase\n      className={classnames('multichain-account-picker', className)}\n      data-testid=\"account-menu-icon\"\n      onClick={onClick}\n      backgroundColor={BackgroundColor.transparent}\n      borderRadius={BorderRadius.LG}\n      ellipsis\n      textProps={{\n        display: Display.Flex,\n        alignItems: AlignItems.center,\n        gap: 2,\n        ...textProps,\n      }}\n      size={showAddress ? ButtonBaseSize.Lg : ButtonBaseSize.Sm}\n      disabled={disabled}\n      endIconName={IconName.ArrowDown}\n      endIconProps={{\n        color: IconColor.iconDefault,\n        size: Size.SM,\n      }}\n      {...props}\n      gap={2}\n    >\n      {\n        ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n        <AvatarAccount\n          variant={\n            useBlockie\n              ? AvatarAccountVariant.Blockies\n              : AvatarAccountVariant.Jazzicon\n          }\n          address={address}\n          size={showAddress ? Size.MD : Size.XS}\n          borderColor={BackgroundColor.backgroundDefault} // we currently don't have white color for border hence using backgroundDefault as the border\n        />\n        ///: END:ONLY_INCLUDE_IF\n      }\n\n      {\n      }\n\n      <Text\n        as=\"span\"\n        ellipsis\n        {...labelProps}\n        className={classnames(\n          'multichain-account-picker__label',\n          labelProps.className ?? '',\n        )}\n      >\n        {name}\n        {showAddress ? (\n          <Text\n            color={TextColor.textAlternative}\n            variant={TextVariant.bodySm}\n            ellipsis\n            {...addressProps}\n          >\n            {shortenedAddress}\n          </Text>\n        ) : null}\n      </Text>\n    </ButtonBase>\n  );\n};\n\nAccountPicker.propTypes = {\n  /**\n   * Account name\n   */\n  name: PropTypes.string.isRequired,\n  /**\n   * Account address, used for blockie or jazzicon\n   */\n  address: PropTypes.string.isRequired,\n  /**\n   * Represents if the account address should display\n   */\n  showAddress: PropTypes.bool,\n  /**\n   * Props to be added to the address element\n   */\n  addressProps: PropTypes.object,\n  /**\n   * Action to perform when the account picker is clicked\n   */\n  onClick: PropTypes.func.isRequired,\n  /**\n   * Represents if the AccountPicker should be actionable\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Represents if the AccountPicker should take full width\n   */\n  block: PropTypes.bool,\n  /**\n   * Props to be added to the label element\n   */\n  labelProps: PropTypes.object,\n  /**\n   * Props to be added to the text element\n   */\n  textProps: PropTypes.object,\n  /**\n   * Additional className to be added to the AccountPicker\n   */\n  className: PropTypes.string,\n};\n","export { AccountPicker } from './account-picker';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BlockSize,\n  Display,\n  FlexDirection,\n  FlexWrap,\n  FontWeight,\n  TextAlign,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { Box, Text } from '../../component-library';\n\nexport const ActivityListItem = ({\n  topContent,\n  icon,\n  title,\n  subtitle,\n  midContent,\n  children,\n  rightContent,\n  onClick,\n  className,\n  'data-testid': dataTestId,\n}) => {\n  const primaryClassName = classnames('activity-list-item', className, {\n    'activity-list-item--single-content-row': !(subtitle || children),\n  });\n\n  return (\n    <Box\n      tabIndex={0}\n      backgroundColor={BackgroundColor.backgroundDefault}\n      className={primaryClassName}\n      onClick={onClick}\n      onKeyPress={(event) => {\n        if (event.key === 'Enter') {\n          onClick();\n        }\n      }}\n      data-testid={dataTestId}\n      padding={4}\n      display={Display.Flex}\n      width={BlockSize.Full}\n      flexWrap={FlexWrap.Wrap}\n      gap={4}\n    >\n      {topContent && (\n        <Text\n          variant={TextVariant.bodyMd}\n          color={TextColor.textDefault}\n          display={Display.Flex}\n          width={BlockSize.Full}\n        >\n          {topContent}\n        </Text>\n      )}\n      <Box\n        display={Display.Flex}\n        width={BlockSize.Full}\n        flexDirection={FlexDirection.Row}\n        gap={4}\n      >\n        {icon && <Box display={Display.InlineFlex}>{icon}</Box>}\n        <Box\n          display={Display.InlineFlex}\n          width={BlockSize.Full}\n          className=\"activity-list-item__content-container\"\n        >\n          <Box\n            display={Display.InlineFlex}\n            width={[BlockSize.OneThird, BlockSize.SevenTwelfths]}\n            flexDirection={FlexDirection.Column}\n            className=\"activity-list-item__detail-container\"\n          >\n            <Text\n              ellipsis\n              textAlign={TextAlign.Left}\n              variant={TextVariant.bodyLgMedium}\n              fontWeight={FontWeight.Medium}\n              data-testid=\"activity-list-item-action\"\n            >\n              {title}\n            </Text>\n            {subtitle && (\n              <Text\n                as=\"div\"\n                ellipsis\n                textAlign={TextAlign.Left}\n                variant={TextVariant.bodyMd}\n                fontWeight={FontWeight.Normal}\n              >\n                {subtitle}\n              </Text>\n            )}\n            {children && (\n              <Box className=\"activity-list-item__children\">{children}</Box>\n            )}\n          </Box>\n\n          {midContent && (\n            <Box\n              display={Display.InlineFlex}\n              className=\"activity-list-item__mid-content\"\n            >\n              {midContent}\n            </Box>\n          )}\n          {rightContent && (\n            <Box\n              display={Display.InlineFlex}\n              width={BlockSize.Full}\n              height={BlockSize.Min}\n              flexDirection={FlexDirection.Column}\n              alignItems={AlignItems.flexEnd}\n              className=\"activity-list-item__right-content\"\n            >\n              {rightContent}\n            </Box>\n          )}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nActivityListItem.propTypes = {\n  /**\n   * Top content for the activity\n   */\n  topContent: PropTypes.node,\n  /**\n   * Icon which represents the activity\n   */\n  icon: PropTypes.node,\n  /**\n   * Title text\n   */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  /**\n   * Additional text detail\n   */\n  subtitle: PropTypes.node,\n  /**\n   * Middle content\n   */\n  midContent: PropTypes.node,\n  /**\n   * Additional variable contents\n   */\n  children: PropTypes.node,\n  /**\n   * Right-most content\n   */\n  rightContent: PropTypes.node,\n  /**\n   * Executes upon click of the activity\n   */\n  onClick: PropTypes.func,\n  /**\n   * Additional classname for this component\n   */\n  className: PropTypes.string,\n  /**\n   * Test ID for this component\n   */\n  'data-testid': PropTypes.string,\n};\n","export { ActivityListItem } from './activity-list-item';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { ButtonBase, IconName, Box } from '../../component-library';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BorderRadius,\n  Display,\n  Size,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { useCopyToClipboard } from '../../../hooks/useCopyToClipboard';\nimport { shortenAddress } from '../../../helpers/utils/util';\nimport Tooltip from '../../ui/tooltip/tooltip';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { MINUTE } from '../../../../shared/constants/time';\nimport { normalizeSafeAddress } from '../../../../app/scripts/lib/multichain/address';\n\nexport const AddressCopyButton = ({\n  address,\n  shorten = false,\n  wrap = false,\n  onClick,\n}) => {\n  const checksummedAddress = normalizeSafeAddress(address);\n  const displayAddress = shorten\n    ? shortenAddress(checksummedAddress)\n    : checksummedAddress;\n  const [copied, handleCopy] = useCopyToClipboard(MINUTE);\n  const t = useI18nContext();\n\n\n  const tooltipText = copied ? t('copiedExclamation') : t('copyToClipboard');\n  let tooltipTitle = tooltipText;\n\n\n  return (\n    <Tooltip position=\"bottom\" title={tooltipTitle}>\n      <ButtonBase\n        backgroundColor={BackgroundColor.primaryMuted}\n        onClick={() => {\n          handleCopy(checksummedAddress);\n          onClick?.();\n        }}\n        paddingRight={4}\n        paddingLeft={4}\n        size={Size.SM}\n        variant={TextVariant.bodySm}\n        color={TextColor.primaryDefault}\n        endIconName={copied ? IconName.CopySuccess : IconName.Copy}\n        className={classnames('multichain-address-copy-button', {\n          'multichain-address-copy-button__address--wrap': wrap,\n        })}\n        borderRadius={BorderRadius.pill}\n        alignItems={AlignItems.center}\n        data-testid=\"address-copy-button-text\"\n      >\n        <Box display={Display.Flex}>\n          {\n          }\n          {displayAddress}\n        </Box>\n      </ButtonBase>\n    </Tooltip>\n  );\n};\n\nAddressCopyButton.propTypes = {\n  /**\n   * Address to be copied\n   */\n  address: PropTypes.string.isRequired,\n  /**\n   * Represents if the address should be shortened\n   */\n  shorten: PropTypes.bool,\n  /**\n   * Represents if the element should wrap to multiple lines\n   */\n  wrap: PropTypes.bool,\n  /**\n   * Fires when the button is clicked\n   */\n  onClick: PropTypes.func,\n};\n","export { AddressCopyButton } from './address-copy-button';\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Confusable from '../../ui/confusable';\nimport {\n  AvatarAccount,\n  Box,\n  AvatarAccountVariant,\n  Text,\n  AvatarAccountSize,\n} from '../../component-library';\nimport {\n  TextAlign,\n  TextVariant,\n  FlexDirection,\n  BorderColor,\n  Display,\n  BlockSize,\n  BackgroundColor,\n  TextColor,\n  AlignItems,\n} from '../../../helpers/constants/design-system';\nimport { getUseBlockie } from '../../../selectors';\nimport { shortenAddress } from '../../../helpers/utils/util';\nimport Tooltip from '../../ui/tooltip';\n\ntype AddressListItemProps = {\n  address: string;\n  label: string;\n  useConfusable?: boolean;\n  onClick: () => void;\n};\n\nexport const AddressListItem = ({\n  address,\n  label,\n  useConfusable = false,\n  onClick,\n}: AddressListItemProps) => {\n  const useBlockie = useSelector(getUseBlockie);\n  let displayName: string | React.ReactNode = shortenAddress(address);\n  if (label) {\n    displayName = label;\n    if (useConfusable) {\n      displayName = <Confusable input={label} />;\n    }\n  }\n\n  return (\n    <Box\n      display={Display.Flex}\n      padding={4}\n      as=\"button\"\n      onClick={(e: React.MouseEvent) => {\n        e.stopPropagation();\n        onClick();\n      }}\n      width={BlockSize.Full}\n      backgroundColor={BackgroundColor.transparent}\n      className=\"address-list-item\"\n      alignItems={AlignItems.center}\n    >\n      <AvatarAccount\n        borderColor={BorderColor.transparent}\n        size={AvatarAccountSize.Md}\n        address={address}\n        variant={\n          useBlockie\n            ? AvatarAccountVariant.Blockies\n            : AvatarAccountVariant.Jazzicon\n        }\n        marginInlineEnd={2}\n      />\n      <Box\n        display={Display.Flex}\n        flexDirection={FlexDirection.Column}\n        style={{ overflow: 'hidden' }}\n      >\n        <Text\n          variant={TextVariant.bodyMdMedium}\n          padding={0}\n          width={BlockSize.Full}\n          textAlign={TextAlign.Left}\n          className=\"address-list-item__label\"\n          data-testid=\"address-list-item-label\"\n          style={{ overflow: 'hidden' }}\n          ellipsis\n        >\n          {displayName}\n        </Text>\n        <Text\n          variant={TextVariant.bodySm}\n          color={TextColor.textAlternative}\n          ellipsis\n          data-testid=\"address-list-item-address\"\n          as=\"div\"\n          display={Display.Flex}\n        >\n          <Tooltip title={address} position=\"bottom\">\n            {shortenAddress(address)}\n          </Tooltip>\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n","export { AddressListItem } from './address-list-item';\n","import React from 'react';\nimport classnames from 'classnames';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BlockSize,\n  Display,\n} from '../../../helpers/constants/design-system';\nimport { Box, BoxProps } from '../../component-library';\n\ntype AppHeaderContainerProps = {\n  isUnlocked: boolean;\n  popupStatus: boolean;\n  headerBottomMargin: BoxProps<typeof Box>['marginBottom'];\n};\n\nexport const AppHeaderContainer = ({\n  isUnlocked,\n  popupStatus,\n  headerBottomMargin,\n  children,\n}: React.PropsWithChildren<AppHeaderContainerProps>) => {\n  const backgroundColor =\n    !isUnlocked || popupStatus\n      ? BackgroundColor.backgroundDefault\n      : BackgroundColor.backgroundAlternative;\n\n  return (\n    <Box\n      display={Display.Flex}\n      className={classnames('multichain-app-header', {\n        'multichain-app-header-shadow': !isUnlocked || popupStatus,\n      })}\n      marginBottom={headerBottomMargin}\n      alignItems={AlignItems.center}\n      width={BlockSize.Full}\n      backgroundColor={backgroundColor}\n    >\n      {children}\n    </Box>\n  );\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport MetafoxLogo from '../../ui/metafox-logo';\nimport { PickerNetwork } from '../../component-library';\nimport { DEFAULT_ROUTE } from '../../../helpers/constants/routes';\nimport { getTestNetworkBackgroundColor } from '../../../selectors';\nimport { MultichainNetwork } from '../../../selectors/multichain';\n\ntype AppHeaderLockedContentProps = {\n  currentNetwork: MultichainNetwork;\n  networkOpenCallback: () => void;\n};\n\nexport const AppHeaderLockedContent = ({\n  currentNetwork,\n  networkOpenCallback,\n}: AppHeaderLockedContentProps) => {\n  const t = useI18nContext();\n  const history = useHistory();\n\n  const testNetworkBackgroundColor = useSelector(getTestNetworkBackgroundColor);\n\n  return (\n    <>\n      <div>\n        <PickerNetwork\n          avatarNetworkProps={{\n            backgroundColor: testNetworkBackgroundColor,\n            role: 'img',\n            name: currentNetwork?.nickname ?? '',\n          }}\n          aria-label={`${t('networkMenu')} ${currentNetwork?.nickname}`}\n          label={currentNetwork?.nickname ?? ''}\n          src={currentNetwork?.network?.rpcPrefs?.imageUrl}\n          onClick={(e: React.MouseEvent<HTMLElement>) => {\n            e.stopPropagation();\n            e.preventDefault();\n            networkOpenCallback();\n          }}\n          className=\"multichain-app-header__contents__network-picker\"\n          data-testid=\"network-display\"\n        />\n      </div>\n      <MetafoxLogo\n        unsetIconHeight\n        onClick={async () => {\n          history.push(DEFAULT_ROUTE);\n        }}\n      />\n    </>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport browser from 'webextension-polyfill';\n\nimport { InternalAccount } from '@metamask/keyring-api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BlockSize,\n  BorderRadius,\n  Display,\n  FlexDirection,\n  FontWeight,\n  IconColor,\n  JustifyContent,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport {\n  Box,\n  ButtonBase,\n  ButtonBaseSize,\n  ButtonIcon,\n  ButtonIconSize,\n  IconName,\n  IconSize,\n  PickerNetwork,\n  Text,\n} from '../../component-library';\nimport Tooltip from '../../ui/tooltip';\nimport {\n  MetaMetricsEventName,\n  MetaMetricsEventCategory,\n} from '../../../../shared/constants/metametrics';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { toggleAccountMenu } from '../../../store/actions';\nimport ConnectedStatusIndicator from '../../app/connected-status-indicator';\nimport { AccountPicker } from '../account-picker';\nimport { GlobalMenu } from '../global-menu';\nimport {\n  getSelectedInternalAccount,\n  getTestNetworkBackgroundColor,\n  getOriginOfCurrentTab,\n} from '../../../selectors';\nimport { getEnvironmentType } from '../../../../app/scripts/lib/util';\nimport { normalizeSafeAddress } from '../../../../app/scripts/lib/multichain/address';\nimport { shortenAddress } from '../../../helpers/utils/util';\nimport { ENVIRONMENT_TYPE_POPUP } from '../../../../shared/constants/app';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport { useCopyToClipboard } from '../../../hooks/useCopyToClipboard';\nimport { MINUTE } from '../../../../shared/constants/time';\nimport { NotificationsTagCounter } from '../notifications-tag-counter';\nimport { CONNECTIONS } from '../../../helpers/constants/routes';\nimport { MultichainNetwork } from '../../../selectors/multichain';\n\ntype AppHeaderUnlockedContentProps = {\n  popupStatus: boolean;\n  isEvmNetwork: boolean;\n  currentNetwork: MultichainNetwork;\n  networkOpenCallback: () => void;\n  disableNetworkPicker: boolean;\n  disableAccountPicker: boolean;\n  menuRef: React.RefObject<HTMLButtonElement>;\n  internalAccount: InternalAccount;\n};\n\nexport const AppHeaderUnlockedContent = ({\n  popupStatus,\n  isEvmNetwork,\n  currentNetwork,\n  networkOpenCallback,\n  disableNetworkPicker,\n  disableAccountPicker,\n  menuRef,\n}: AppHeaderUnlockedContentProps) => {\n  const trackEvent = useContext(MetaMetricsContext);\n  const t = useI18nContext();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const origin = useSelector(getOriginOfCurrentTab);\n  const [accountOptionsMenuOpen, setAccountOptionsMenuOpen] = useState(false);\n  const testNetworkBackgroundColor = useSelector(getTestNetworkBackgroundColor);\n\n  // Used for account picker\n  const internalAccount = useSelector(getSelectedInternalAccount);\n  const shortenedAddress =\n    internalAccount &&\n    shortenAddress(normalizeSafeAddress(internalAccount.address));\n\n  // During onboarding there is no selected internal account\n  const currentAddress = internalAccount?.address;\n\n  // Passing non-evm address to checksum function will throw an error\n  const normalizedCurrentAddress = normalizeSafeAddress(currentAddress);\n  const [copied, handleCopy] = useCopyToClipboard(MINUTE) as [\n    boolean,\n    (text: string) => void,\n  ];\n\n  const showConnectedStatus =\n    getEnvironmentType() === ENVIRONMENT_TYPE_POPUP &&\n    origin &&\n    origin !== browser.runtime.id;\n\n  const handleMainMenuOpened = () => {\n    trackEvent({\n      event: MetaMetricsEventName.NavMainMenuOpened,\n      category: MetaMetricsEventCategory.Navigation,\n      properties: {\n        location: 'Home',\n      },\n    });\n    setAccountOptionsMenuOpen(true);\n  };\n\n  const handleConnectionsRoute = () => {\n    history.push(`${CONNECTIONS}/${encodeURIComponent(origin)}`);\n  };\n\n  return (\n    <>\n      {popupStatus ? (\n        <Box className=\"multichain-app-header__contents__container\">\n          <Tooltip title={currentNetwork?.nickname} position=\"right\">\n            <PickerNetwork\n              avatarNetworkProps={{\n                backgroundColor: testNetworkBackgroundColor,\n                role: 'img',\n                name: currentNetwork?.nickname ?? '',\n              }}\n              className=\"multichain-app-header__contents--avatar-network\"\n              ref={menuRef}\n              as=\"button\"\n              src={currentNetwork?.network?.rpcPrefs?.imageUrl ?? ''}\n              label={currentNetwork?.nickname ?? ''}\n              aria-label={`${t('networkMenu')} ${currentNetwork?.nickname}`}\n              labelProps={{\n                display: Display.None,\n              }}\n              onClick={(e: React.MouseEvent<HTMLElement>) => {\n                e.stopPropagation();\n                e.preventDefault();\n                networkOpenCallback();\n              }}\n              display={[Display.Flex, Display.None]} // show on popover hide on desktop\n              disabled={disableNetworkPicker}\n            />\n          </Tooltip>\n        </Box>\n      ) : (\n        <div>\n          <PickerNetwork\n            avatarNetworkProps={{\n              backgroundColor: testNetworkBackgroundColor,\n              role: 'img',\n              name: currentNetwork?.nickname ?? '',\n            }}\n            margin={2}\n            aria-label={`${t('networkMenu')} ${currentNetwork?.nickname}`}\n            label={currentNetwork?.nickname ?? ''}\n            src={currentNetwork?.network?.rpcPrefs?.imageUrl}\n            onClick={(e: React.MouseEvent<HTMLElement>) => {\n              e.stopPropagation();\n              e.preventDefault();\n              networkOpenCallback();\n            }}\n            display={[Display.None, Display.Flex]} // show on desktop hide on popover\n            className=\"multichain-app-header__contents__network-picker\"\n            disabled={disableNetworkPicker}\n            data-testid=\"network-display\"\n          />\n        </div>\n      )}\n\n      {internalAccount && (\n        <Text\n          as=\"div\"\n          display={Display.Flex}\n          flexDirection={FlexDirection.Column}\n          alignItems={AlignItems.center}\n          ellipsis\n        >\n          <AccountPicker\n            address={internalAccount.address}\n            name={internalAccount.metadata.name}\n            onClick={() => {\n              dispatch(toggleAccountMenu());\n\n              trackEvent({\n                event: MetaMetricsEventName.NavAccountMenuOpened,\n                category: MetaMetricsEventCategory.Navigation,\n                properties: {\n                  location: 'Home',\n                },\n              });\n            }}\n            disabled={disableAccountPicker}\n            labelProps={{ fontWeight: FontWeight.Bold }}\n            paddingLeft={2}\n            paddingRight={2}\n          />\n          <Tooltip\n            position=\"left\"\n            title={copied ? t('addressCopied') : t('copyToClipboard')}\n          >\n            <ButtonBase\n              className=\"multichain-app-header__address-copy-button\"\n              onClick={() => handleCopy(normalizedCurrentAddress)}\n              size={ButtonBaseSize.Sm}\n              backgroundColor={BackgroundColor.transparent}\n              borderRadius={BorderRadius.LG}\n              endIconName={copied ? IconName.CopySuccess : IconName.Copy}\n              endIconProps={{\n                color: IconColor.iconAlternative,\n                size: IconSize.Sm,\n              }}\n              ellipsis\n              textProps={{\n                display: Display.Flex,\n                alignItems: AlignItems.center,\n                gap: 2,\n              }}\n              style={{ height: 'auto' }} // ButtonBase doesn't have auto size\n              data-testid=\"app-header-copy-button\"\n            >\n              <Text\n                color={TextColor.textAlternative}\n                variant={TextVariant.bodySm}\n                ellipsis\n                as=\"span\"\n              >\n                {shortenedAddress}\n              </Text>\n            </ButtonBase>\n          </Tooltip>\n        </Text>\n      )}\n      <Box\n        display={Display.Flex}\n        alignItems={AlignItems.center}\n        justifyContent={JustifyContent.flexEnd}\n        style={{ marginLeft: 'auto' }}\n      >\n        <Box display={Display.Flex} gap={4}>\n          {showConnectedStatus && (\n            <Box ref={menuRef}>\n              <ConnectedStatusIndicator\n                onClick={() => {\n                  if (!isEvmNetwork) {\n                    return;\n                  }\n                  handleConnectionsRoute();\n                }}\n                disabled={!isEvmNetwork}\n              />\n            </Box>\n          )}{' '}\n          <Box\n            ref={menuRef}\n            display={Display.Flex}\n            justifyContent={JustifyContent.flexEnd}\n            width={BlockSize.Full}\n          >\n            {!accountOptionsMenuOpen && (\n              <Box\n                style={{ position: 'relative' }}\n                onClick={() => handleMainMenuOpened()}\n              >\n                <NotificationsTagCounter noLabel />\n              </Box>\n            )}\n            <ButtonIcon\n              iconName={IconName.MoreVertical}\n              data-testid=\"account-options-menu-button\"\n              ariaLabel={t('accountOptions')}\n              onClick={() => {\n                handleMainMenuOpened();\n              }}\n              size={ButtonIconSize.Sm}\n            />\n          </Box>\n        </Box>\n        <GlobalMenu\n          anchorElement={menuRef.current}\n          isOpen={accountOptionsMenuOpen}\n          closeMenu={() => setAccountOptionsMenuOpen(false)}\n        />\n      </Box>\n    </>\n  );\n};\n","import React, { useCallback, useContext, useRef } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { matchPath } from 'react-router-dom';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport {\n  BUILD_QUOTE_ROUTE,\n  CONFIRM_TRANSACTION_ROUTE,\n  SWAPS_ROUTE,\n} from '../../../helpers/constants/routes';\n\nimport {\n  AlignItems,\n  BackgroundColor,\n  BlockSize,\n  Display,\n  JustifyContent,\n} from '../../../helpers/constants/design-system';\nimport { Box } from '../../component-library';\nimport { getUnapprovedTransactions } from '../../../selectors';\n\nimport { toggleNetworkMenu } from '../../../store/actions';\nimport { getEnvironmentType } from '../../../../app/scripts/lib/util';\nimport { ENVIRONMENT_TYPE_POPUP } from '../../../../shared/constants/app';\nimport { getIsUnlocked } from '../../../ducks/metamask/metamask';\nimport { SEND_STAGES, getSendStage } from '../../../ducks/send';\nimport { getMultichainNetwork } from '../../../selectors/multichain';\nimport { MultichainMetaFoxLogo } from './multichain-meta-fox-logo';\nimport { AppHeaderContainer } from './app-header-container';\nimport { AppHeaderUnlockedContent } from './app-header-unlocked-content';\nimport { AppHeaderLockedContent } from './app-header-locked-content';\n\nexport const AppHeader = ({ location }) => {\n  const trackEvent = useContext(MetaMetricsContext);\n  const menuRef = useRef(null);\n  const isUnlocked = useSelector(getIsUnlocked);\n\n  const multichainNetwork = useSelector(getMultichainNetwork);\n  const { chainId, isEvmNetwork } = multichainNetwork;\n\n  const dispatch = useDispatch();\n\n  const popupStatus = getEnvironmentType() === ENVIRONMENT_TYPE_POPUP;\n\n  // Disable the network and account pickers if the user is in\n  // a critical flow\n  const sendStage = useSelector(getSendStage);\n  const isTransactionEditPage = [\n    SEND_STAGES.EDIT,\n    SEND_STAGES.DRAFT,\n    SEND_STAGES.ADD_RECIPIENT,\n  ].includes(sendStage);\n  const isConfirmationPage = Boolean(\n    matchPath(location.pathname, {\n      path: CONFIRM_TRANSACTION_ROUTE,\n      exact: false,\n    }),\n  );\n  const isSwapsPage = Boolean(\n    matchPath(location.pathname, { path: SWAPS_ROUTE, exact: false }),\n  );\n  const isSwapsBuildQuotePage = Boolean(\n    matchPath(location.pathname, { path: BUILD_QUOTE_ROUTE, exact: false }),\n  );\n\n  const unapprovedTransactions = useSelector(getUnapprovedTransactions);\n\n  const hasUnapprovedTransactions =\n    Object.keys(unapprovedTransactions).length > 0;\n\n  const disableAccountPicker =\n    isConfirmationPage || (isSwapsPage && !isSwapsBuildQuotePage);\n\n  const disableNetworkPicker =\n    isSwapsPage ||\n    isTransactionEditPage ||\n    isConfirmationPage ||\n    hasUnapprovedTransactions ||\n    !isEvmNetwork;\n\n  // Callback for network dropdown\n  const networkOpenCallback = useCallback(() => {\n    dispatch(toggleNetworkMenu());\n    trackEvent({\n      event: MetaMetricsEventName.NavNetworkMenuOpened,\n      category: MetaMetricsEventCategory.Navigation,\n      properties: {\n        location: 'App header',\n        chain_id: chainId,\n      },\n    });\n  }, [chainId, dispatch, trackEvent]);\n\n  // This is required to ensure send and confirmation screens\n  // look as desired\n  const headerBottomMargin = !popupStatus && disableNetworkPicker ? 4 : 0;\n\n  const unlockedStyling = {\n    alignItems: AlignItems.center,\n    width: BlockSize.Full,\n    backgroundColor: BackgroundColor.backgroundDefault,\n    padding: 2,\n    paddingLeft: 4,\n    paddingRight: 4,\n    gap: 2,\n  };\n\n  const lockStyling = {\n    display: Display.Flex,\n    alignItems: AlignItems.center,\n    width: BlockSize.Full,\n    justifyContent: JustifyContent.spaceBetween,\n    backgroundColor: BackgroundColor.backgroundDefault,\n    padding: 2,\n    gap: 2,\n  };\n\n  return (\n    <>\n      {isUnlocked && !popupStatus ? <MultichainMetaFoxLogo /> : null}\n      <AppHeaderContainer\n        isUnlocked={isUnlocked}\n        popupStatus={popupStatus}\n        headerBottomMargin={headerBottomMargin}\n      >\n        <>\n          <Box\n            className={classnames(\n              isUnlocked\n                ? 'multichain-app-header__contents'\n                : 'multichain-app-header__lock-contents',\n              {\n                'multichain-app-header-shadow': isUnlocked && !popupStatus,\n              },\n            )}\n            {...(isUnlocked ? unlockedStyling : lockStyling)}\n          >\n            {isUnlocked ? (\n              <AppHeaderUnlockedContent\n                popupStatus={popupStatus}\n                isEvmNetwork={isEvmNetwork}\n                currentNetwork={multichainNetwork}\n                networkOpenCallback={networkOpenCallback}\n                disableNetworkPicker={disableNetworkPicker}\n                disableAccountPicker={disableAccountPicker}\n                menuRef={menuRef}\n              />\n            ) : (\n              <AppHeaderLockedContent\n                currentNetwork={multichainNetwork}\n                networkOpenCallback={networkOpenCallback}\n              />\n            )}\n          </Box>\n        </>\n      </AppHeaderContainer>\n    </>\n  );\n};\n\nAppHeader.propTypes = {\n  /**\n   * The location object for the application\n   */\n  location: PropTypes.object,\n};\n","export { AppHeader } from './app-header';\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { DEFAULT_ROUTE } from '../../../helpers/constants/routes';\n\nimport {\n  AlignItems,\n  Display,\n  JustifyContent,\n} from '../../../helpers/constants/design-system';\nimport { Box } from '../../component-library';\n\nimport Logo from '../../ui/metafox-logo';\n\nexport const MultichainMetaFoxLogo = () => {\n  const history = useHistory();\n\n  return (\n    <Box\n      display={[Display.None, Display.Flex]}\n      alignItems={AlignItems.center}\n      margin={2}\n      className=\"multichain-app-header-logo\"\n      data-testid=\"app-header-logo\"\n      justifyContent={JustifyContent.center}\n    >\n      <Logo\n        unsetIconHeight\n        onClick={async () => history.push(DEFAULT_ROUTE)}\n      />\n    </Box>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Text } from '../../../component-library';\nimport UserPreferencedCurrencyDisplay from '../../../app/user-preferenced-currency-display';\nimport { PRIMARY } from '../../../../helpers/constants/common';\nimport { Asset } from '../../../../ducks/send';\nimport {\n  getCurrentCurrency,\n  getSelectedAccountCachedBalance,\n} from '../../../../selectors';\nimport { AssetType } from '../../../../../shared/constants/transaction';\nimport {\n  TextColor,\n  TextVariant,\n} from '../../../../helpers/constants/design-system';\nimport CurrencyDisplay from '../../../ui/currency-display';\nimport { useTokenTracker } from '../../../../hooks/useTokenTracker';\nimport { useCurrencyDisplay } from '../../../../hooks/useCurrencyDisplay';\nimport { useTokenFiatAmount } from '../../../../hooks/useTokenFiatAmount';\nimport { getIsFiatPrimary } from '../utils';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\nimport { hexToDecimal } from '../../../../../shared/modules/conversion.utils';\nimport { TokenWithBalance } from '../asset-picker-modal/types';\n\nexport type AssetBalanceTextProps = {\n  asset: Asset;\n  balanceColor: TextColor;\n  error?: string;\n};\n\nexport function AssetBalanceText({\n  asset,\n  balanceColor,\n  error,\n}: AssetBalanceTextProps) {\n  const t = useI18nContext();\n  const secondaryCurrency = useSelector(getCurrentCurrency);\n\n  const isFiatPrimary = useSelector(getIsFiatPrimary);\n\n  const { tokensWithBalances }: { tokensWithBalances: TokenWithBalance[] } =\n    useTokenTracker({\n      tokens:\n        asset.details?.address && !asset.balance\n          ? [{ address: asset.details.address }]\n          : [],\n      address: undefined,\n    });\n\n  const balanceString =\n    hexToDecimal(asset.balance) || tokensWithBalances[0]?.string;\n\n  const balanceValue = useSelector(getSelectedAccountCachedBalance);\n\n  const nativeTokenFiatBalance = useCurrencyDisplay(balanceValue, {\n    numberOfDecimals: 2,\n    currency: secondaryCurrency,\n  })[1].value;\n\n  const erc20TokenFiatBalance = useTokenFiatAmount(\n    asset.details?.address,\n    balanceString,\n    undefined,\n    // if balance is zero, conversion rate will not be available so we just assume ~0 we can't use 0 because it will set off an undefined guard\n    Number(balanceString) === 0\n      ? { exchangeRate: Number.MIN_VALUE }\n      : undefined,\n    true,\n  );\n\n  const formattedFiat =\n    asset.type === AssetType.native\n      ? nativeTokenFiatBalance\n      : erc20TokenFiatBalance;\n\n  const commonProps = {\n    hideLabel: true,\n    textProps: {\n      color: balanceColor,\n      variant: TextVariant.bodySm,\n    },\n    suffixProps: {\n      color: balanceColor,\n      variant: TextVariant.bodySm,\n    },\n  };\n\n  const errorText = error ? `. ${t(error)}` : '';\n\n  if (asset.type === AssetType.NFT) {\n    const numberOfTokens = hexToDecimal(asset.balance || '0x0');\n    return (\n      <Text {...commonProps.textProps}>\n        {`${numberOfTokens} ${t(\n          numberOfTokens === '1' ? 'token' : 'tokens',\n        )?.toLowerCase()}${errorText}`}\n      </Text>\n    );\n  }\n\n  if (isFiatPrimary) {\n    return (\n      <CurrencyDisplay\n        {...commonProps}\n        currency={secondaryCurrency}\n        numberOfDecimals={2}\n        displayValue={`${formattedFiat}${errorText}`}\n      />\n    );\n  }\n\n  if (asset.type === AssetType.native) {\n    return (\n      <>\n        <UserPreferencedCurrencyDisplay\n          {...commonProps}\n          value={asset.balance}\n          type={PRIMARY}\n        />\n        {errorText ? (\n          <Text\n            variant={TextVariant.bodySm}\n            color={TextColor.errorDefault}\n            data-testid=\"send-page-amount-error\"\n          >\n            {errorText}\n          </Text>\n        ) : null}\n      </>\n    );\n  }\n\n  // catch-all for non-natives; they should all have addresses\n  if (asset.details?.address) {\n    return (\n      <UserPreferencedCurrencyDisplay\n        {...commonProps}\n        displayValue={`${balanceString || ''}${errorText}`}\n      />\n    );\n  }\n\n  // this should never happen\n  return null;\n}\n","import React from 'react';\nimport { Box, Text } from '../../../component-library';\nimport {\n  Display,\n  TextColor,\n  TextVariant,\n} from '../../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\nimport { Asset } from '../../../../ducks/send';\nimport { AssetBalanceText } from './asset-balance-text';\n\ntype AssetBalanceProps = {\n  error?: string;\n  asset: Asset;\n};\n\nexport function AssetBalance({ asset, error }: AssetBalanceProps) {\n  const t = useI18nContext();\n\n  const balanceColor = error\n    ? TextColor.errorDefault\n    : TextColor.textAlternative;\n\n  return (\n    <Box className=\"asset-picker-amount__balance\" display={Display.Flex}>\n      <Text color={balanceColor} marginRight={1} variant={TextVariant.bodySm}>\n        {t('balance')}:\n      </Text>\n\n      <AssetBalanceText\n        asset={asset}\n        balanceColor={balanceColor}\n        error={error}\n      />\n    </Box>\n  );\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { TokenListMap } from '@metamask/assets-controllers';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { Box, Text } from '../../component-library';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BorderColor,\n  BorderRadius,\n  BorderStyle,\n  Display,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport {\n  getIpfsGateway,\n  getNativeCurrencyImage,\n  getSelectedInternalAccount,\n  getTokenList,\n} from '../../../selectors';\n\nimport {\n  AssetType,\n  TokenStandard,\n} from '../../../../shared/constants/transaction';\nimport {\n  getCurrentDraftTransaction,\n  getIsNativeSendPossible,\n  getSendMaxModeState,\n  type Amount,\n  type Asset,\n} from '../../../ducks/send';\nimport { NEGATIVE_OR_ZERO_AMOUNT_TOKENS_ERROR } from '../../../pages/confirmations/send/send.constants';\nimport { getNativeCurrency } from '../../../ducks/metamask/metamask';\nimport useGetAssetImageUrl from '../../../hooks/useGetAssetImageUrl';\nimport MaxClearButton from './max-clear-button';\nimport {\n  AssetPicker,\n  type AssetPickerProps,\n} from './asset-picker/asset-picker';\nimport { SwappableCurrencyInput } from './swappable-currency-input/swappable-currency-input';\nimport { AssetBalance } from './asset-balance/asset-balance';\n\ntype AssetPickerAmountProps = OverridingUnion<\n  AssetPickerProps,\n  {\n    // all of these props should be explicitly received\n    asset: Asset;\n    amount: Amount;\n    isAmountLoading?: boolean;\n    error?: string;\n    /**\n     * Callback for when the amount changes; disables the input when undefined\n     */\n    onAmountChange?: (\n      newAmountRaw: string,\n      newAmountFormatted?: string,\n    ) => void;\n  }\n>;\n\n// A component that combines an asset picker with an input for the amount to send.\nexport const AssetPickerAmount = ({\n  asset,\n  amount,\n  onAmountChange,\n  isAmountLoading,\n  error: passedError,\n  ...assetPickerProps\n}: AssetPickerAmountProps) => {\n  const selectedAccount = useSelector(getSelectedInternalAccount);\n  const t = useI18nContext();\n\n  const { swapQuotesError, sendAsset, receiveAsset } = useSelector(\n    getCurrentDraftTransaction,\n  );\n  const isDisabled = !onAmountChange;\n  const isSwapsErrorShown = isDisabled && swapQuotesError;\n\n  const isMaxMode = useSelector(getSendMaxModeState);\n  const isNativeSendPossible = useSelector(getIsNativeSendPossible);\n\n  const nativeCurrencySymbol = useSelector(getNativeCurrency);\n  const nativeCurrencyImageUrl = useSelector(getNativeCurrencyImage);\n  const tokenList = useSelector(getTokenList) as TokenListMap;\n\n  const ipfsGateway = useSelector(getIpfsGateway);\n\n  useEffect(() => {\n    // if this input is immutable – avoids double fire\n    if (isDisabled) {\n      return;\n    }\n\n    // if native send is not possible\n    if (isNativeSendPossible) {\n      return;\n    }\n\n    // if max mode already enabled\n    if (!isMaxMode) {\n      return;\n    }\n\n    // disable max mode and replace with \"0\"\n    onAmountChange('0x0');\n  }, [isNativeSendPossible]);\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isNFTInputChanged, setIsTokenInputChanged] = useState(false);\n  const nftImageURL = useGetAssetImageUrl(\n    asset?.details?.image ?? null,\n    ipfsGateway,\n  );\n\n  const handleChange = useCallback(\n    (newAmountRaw, newAmountFormatted) => {\n      if (!isNFTInputChanged && asset.type === AssetType.NFT) {\n        setIsTokenInputChanged(true);\n      }\n      onAmountChange?.(newAmountRaw, newAmountFormatted);\n    },\n    [onAmountChange, isNFTInputChanged, asset.type],\n  );\n\n  useEffect(() => {\n    setIsTokenInputChanged(false);\n  }, [asset]);\n\n  const { error: rawError } = amount;\n\n  // if input hasn't been touched, don't show the zero amount error\n  const isLowBalanceErrorInvalid =\n    rawError === NEGATIVE_OR_ZERO_AMOUNT_TOKENS_ERROR &&\n    asset.type === AssetType.NFT &&\n    !isNFTInputChanged;\n\n  const error = rawError && !isLowBalanceErrorInvalid ? rawError : undefined;\n\n  useEffect(() => {\n    if (!asset) {\n      throw new Error('No asset is drafted for sending');\n    }\n  }, [selectedAccount]);\n\n  let borderColor = BorderColor.borderMuted;\n\n  if (isDisabled) {\n    // if disabled, do not show source-side border colors\n    if (isSwapsErrorShown) {\n      borderColor = BorderColor.errorDefault;\n    }\n  } else if (error) {\n    borderColor = BorderColor.errorDefault;\n  } else if (isFocused) {\n    borderColor = BorderColor.primaryDefault;\n  }\n\n  const isSwapAndSendFromNative =\n    sendAsset.type === AssetType.native &&\n    receiveAsset.type !== AssetType.native;\n\n  let standardizedAsset;\n  if (asset?.type === AssetType.native) {\n    standardizedAsset = {\n      type: asset.type,\n      image: nativeCurrencyImageUrl,\n      symbol: nativeCurrencySymbol as string,\n    };\n  } else if (asset?.type === AssetType.token && asset?.details?.symbol) {\n    standardizedAsset = {\n      type: asset.type,\n      image:\n        nftImageURL ||\n        (tokenList &&\n          asset.details?.address &&\n          tokenList[asset.details.address.toLowerCase()]?.iconUrl),\n      symbol: asset.details.symbol,\n      address: asset.details.address,\n    };\n  } else if (\n    asset?.type === AssetType.NFT &&\n    asset?.details?.tokenId !== undefined &&\n    asset?.details?.image\n  ) {\n    standardizedAsset = {\n      type: asset.type as AssetType.NFT,\n      tokenId: asset.details.tokenId,\n      image: asset.details.image,\n      symbol: asset.details.symbol,\n    };\n  }\n\n  return (\n    <Box className=\"asset-picker-amount\">\n      <Box\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        display={Display.Flex}\n        alignItems={AlignItems.center}\n        backgroundColor={BackgroundColor.backgroundDefault}\n        borderRadius={BorderRadius.LG}\n        borderColor={borderColor}\n        borderStyle={BorderStyle.solid}\n        borderWidth={1}\n        marginBottom={1}\n        padding={1}\n        // apply extra padding if there isn't an input component to apply it\n        paddingTop={asset.details?.standard === TokenStandard.ERC721 ? 4 : 1}\n        paddingBottom={asset.details?.standard === TokenStandard.ERC721 ? 4 : 1}\n      >\n        <AssetPicker asset={standardizedAsset} {...assetPickerProps} />\n        <SwappableCurrencyInput\n          onAmountChange={onAmountChange ? handleChange : undefined}\n          assetType={asset.type}\n          asset={asset}\n          amount={amount}\n          isAmountLoading={isAmountLoading}\n        />\n      </Box>\n      <Box display={Display.Flex}>\n        {/* Only show balance if mutable */}\n        {onAmountChange && (\n          <AssetBalance asset={asset} error={passedError || error} />\n        )}\n        {isSwapsErrorShown && (\n          <Text variant={TextVariant.bodySm} color={TextColor.errorDefault}>\n            {t(swapQuotesError)}\n          </Text>\n        )}\n        {/* The fiat value will always leave dust and is often inaccurate anyways */}\n        {onAmountChange && isNativeSendPossible && !isSwapAndSendFromNative && (\n          <MaxClearButton asset={asset} />\n        )}\n      </Box>\n    </Box>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { BigNumber } from 'bignumber.js';\nimport { getTokenList } from '../../../../selectors';\nimport { useTokenFiatAmount } from '../../../../hooks/useTokenFiatAmount';\nimport { TokenListItem } from '../../token-list-item';\nimport { isEqualCaseInsensitive } from '../../../../../shared/modules/string-utils';\nimport { formatAmount } from '../../../../pages/confirmations/components/simulation-details/formatAmount';\nimport { getIntlLocale } from '../../../../ducks/locale/locale';\nimport { AssetWithDisplayData, ERC20Asset } from './types';\n\ntype AssetProps = AssetWithDisplayData<ERC20Asset> & {\n  tooltipText?: string;\n};\n\nexport default function Asset({\n  address,\n  image,\n  symbol,\n  string: decimalTokenAmount,\n  tooltipText,\n}: AssetProps) {\n  const locale = useSelector(getIntlLocale);\n\n  const tokenList = useSelector(getTokenList);\n  const tokenData = address\n    ? Object.values(tokenList).find(\n        (token) =>\n          isEqualCaseInsensitive(token.symbol, symbol) &&\n          isEqualCaseInsensitive(token.address, address),\n      )\n    : undefined;\n\n  const title = tokenData?.name || symbol;\n  const tokenImage = tokenData?.iconUrl || image;\n  const formattedFiat = useTokenFiatAmount(\n    address ?? undefined,\n    decimalTokenAmount,\n    symbol,\n    {},\n    true,\n  );\n\n  return (\n    <TokenListItem\n      tokenSymbol={symbol}\n      tokenImage={tokenImage}\n      primary={formatAmount(\n        locale,\n        new BigNumber(decimalTokenAmount || '0', 10),\n      )}\n      secondary={formattedFiat}\n      title={title}\n      tooltipText={tooltipText}\n    />\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport classnames from 'classnames';\nimport {\n  getPreferences,\n  getSelectedAccountCachedBalance,\n} from '../../../../selectors';\nimport { getNativeCurrency } from '../../../../ducks/metamask/metamask';\nimport { useUserPreferencedCurrency } from '../../../../hooks/useUserPreferencedCurrency';\nimport { PRIMARY, SECONDARY } from '../../../../helpers/constants/common';\nimport { useCurrencyDisplay } from '../../../../hooks/useCurrencyDisplay';\nimport { AssetType } from '../../../../../shared/constants/transaction';\nimport { Box } from '../../../component-library';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BorderRadius,\n  Display,\n  FlexWrap,\n} from '../../../../helpers/constants/design-system';\nimport { TokenListItem } from '../..';\nimport AssetComponent from './Asset';\nimport { AssetWithDisplayData, ERC20Asset, NativeAsset } from './types';\n\ntype AssetListProps = {\n  handleAssetChange: (\n    token: AssetWithDisplayData<ERC20Asset> | AssetWithDisplayData<NativeAsset>,\n  ) => void;\n  asset?: ERC20Asset | NativeAsset;\n  tokenList: (\n    | AssetWithDisplayData<ERC20Asset>\n    | AssetWithDisplayData<NativeAsset>\n  )[];\n  isTokenDisabled?: (\n    token: AssetWithDisplayData<ERC20Asset> | AssetWithDisplayData<NativeAsset>,\n  ) => boolean;\n};\n\nexport default function AssetList({\n  handleAssetChange,\n  asset,\n  tokenList,\n  isTokenDisabled,\n}: AssetListProps) {\n  const selectedToken = asset?.address;\n\n  const nativeCurrency = useSelector(getNativeCurrency);\n  const balanceValue = useSelector(getSelectedAccountCachedBalance);\n  const { useNativeCurrencyAsPrimaryCurrency } = useSelector(getPreferences);\n\n  const {\n    currency: primaryCurrency,\n    numberOfDecimals: primaryNumberOfDecimals,\n  } = useUserPreferencedCurrency(PRIMARY, { ethNumberOfDecimals: 4 });\n\n  const {\n    currency: secondaryCurrency,\n    numberOfDecimals: secondaryNumberOfDecimals,\n  } = useUserPreferencedCurrency(SECONDARY, { ethNumberOfDecimals: 4 });\n\n  const [, primaryCurrencyProperties] = useCurrencyDisplay(balanceValue, {\n    numberOfDecimals: primaryNumberOfDecimals,\n    currency: primaryCurrency,\n  });\n\n  const [secondaryCurrencyDisplay, secondaryCurrencyProperties] =\n    useCurrencyDisplay(balanceValue, {\n      numberOfDecimals: secondaryNumberOfDecimals,\n      currency: secondaryCurrency,\n      hideLabel: true,\n    });\n\n  return (\n    <Box className=\"tokens-main-view-modal\">\n      {tokenList.map((token) => {\n        const tokenAddress = token.address?.toLowerCase();\n        const isSelected = tokenAddress === selectedToken?.toLowerCase();\n        const isDisabled = isTokenDisabled?.(token) ?? false;\n        return (\n          <Box\n            padding={0}\n            gap={0}\n            margin={0}\n            key={token.symbol}\n            backgroundColor={\n              isSelected\n                ? BackgroundColor.primaryMuted\n                : BackgroundColor.transparent\n            }\n            className={classnames('multichain-asset-picker-list-item', {\n              'multichain-asset-picker-list-item--selected': isSelected,\n              'multichain-asset-picker-list-item--disabled': isDisabled,\n            })}\n            data-testid=\"asset-list-item\"\n            onClick={() => {\n              if (isDisabled) {\n                return;\n              }\n              handleAssetChange(token);\n            }}\n          >\n            {isSelected ? (\n              <Box\n                className=\"multichain-asset-picker-list-item__selected-indicator\"\n                borderRadius={BorderRadius.pill}\n                backgroundColor={BackgroundColor.primaryDefault}\n              />\n            ) : null}\n            <Box\n              key={token.address}\n              padding={0}\n              display={Display.Block}\n              flexWrap={FlexWrap.NoWrap}\n              alignItems={AlignItems.center}\n            >\n              <Box marginInlineStart={2}>\n                {token.type === AssetType.native ? (\n                  <TokenListItem\n                    title={nativeCurrency}\n                    primary={\n                      primaryCurrencyProperties.value ??\n                      secondaryCurrencyProperties.value\n                    }\n                    tokenSymbol={\n                      useNativeCurrencyAsPrimaryCurrency\n                        ? primaryCurrency\n                        : secondaryCurrency\n                    }\n                    secondary={secondaryCurrencyDisplay}\n                    tokenImage={token.image}\n                    isOriginalTokenSymbol\n                  />\n                ) : (\n                  <AssetComponent\n                    key={token.address}\n                    {...token}\n                    tooltipText={\n                      isDisabled ? 'swapTokenNotAvailable' : undefined\n                    }\n                  />\n                )}\n              </Box>\n            </Box>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport NftsItems from '../../../app/assets/nfts/nfts-items/nfts-items';\nimport {\n  Box,\n  Text,\n  ButtonLink,\n  ButtonLinkSize,\n} from '../../../component-library';\nimport {\n  TextColor,\n  TextVariant,\n  TextAlign,\n  Display,\n  JustifyContent,\n  AlignItems,\n  FlexDirection,\n} from '../../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\nimport ZENDESK_URLS from '../../../../helpers/constants/zendesk-url';\nimport Spinner from '../../../ui/spinner';\nimport {\n  getIsMainnet,\n  getNftIsStillFetchingIndication,\n  getUseNftDetection,\n} from '../../../../selectors';\nimport NFTsDetectionNoticeNFTsTab from '../../../app/assets/nfts/nfts-detection-notice-nfts-tab/nfts-detection-notice-nfts-tab';\nimport { useNftsCollections } from '../../../../hooks/useNftsCollections';\nimport { Collection, NFT } from './types';\n\ntype PreviouslyOwnedCollections = {\n  collectionName: string;\n  nfts: NFT[];\n};\n\ntype AssetPickerModalNftTabProps = {\n  searchQuery: string;\n  onClose: () => void;\n  renderSearch: () => void;\n};\n\nexport function AssetPickerModalNftTab({\n  searchQuery,\n  onClose,\n  renderSearch,\n}: AssetPickerModalNftTabProps) {\n  const t = useI18nContext();\n\n  const {\n    collections,\n    previouslyOwnedCollection,\n  }: {\n    collections: Record<string, Collection>;\n    previouslyOwnedCollection: PreviouslyOwnedCollections;\n  } = useNftsCollections();\n\n  const collectionsKeys = Object.keys(collections);\n\n  const collectionsData = collectionsKeys.reduce((acc: unknown[], key) => {\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const collection = (collections as any)[key];\n\n    const isMatchingQuery = collection.collectionName\n      ?.toLowerCase()\n      .includes(searchQuery.toLowerCase());\n\n    if (isMatchingQuery) {\n      acc.push(collection);\n      return acc;\n    }\n    return acc;\n  }, []);\n\n  // filter and exclude ERC1155\n  const collectionDataFiltered = (collectionsData as Collection[]).filter(\n    (collection) => collection.nfts.length > 0,\n  );\n\n  const hasAnyNfts = Object.keys(collectionDataFiltered).length > 0;\n  const useNftDetection = useSelector(getUseNftDetection);\n  const isMainnet = useSelector(getIsMainnet);\n  const nftsStillFetchingIndication = useSelector(\n    getNftIsStillFetchingIndication,\n  );\n\n  if (!hasAnyNfts && nftsStillFetchingIndication) {\n    return (\n      <Box className=\"modal-tab__loading\" data-testid=\"spinner\">\n        <Spinner\n          color=\"var(--color-warning-default)\"\n          className=\"loading-overlay__spinner\"\n        />\n      </Box>\n    );\n  }\n\n  if (hasAnyNfts) {\n    return (\n      <Box className=\"modal-tab__main-view\">\n        {renderSearch()}\n        <NftsItems\n          collections={collectionDataFiltered}\n          previouslyOwnedCollection={previouslyOwnedCollection}\n          isModal={true}\n          onCloseModal={() => onClose()}\n          showTokenId={true}\n          displayPreviouslyOwnedCollection={false}\n        />\n        {nftsStillFetchingIndication ? (\n          <Box className=\"modal-tab__fetching\">\n            <Spinner\n              color=\"var(--color-warning-default)\"\n              className=\"loading-overlay__spinner\"\n            />\n          </Box>\n        ) : null}\n      </Box>\n    );\n  }\n  return (\n    <>\n      {isMainnet && !useNftDetection && (\n        <Box paddingTop={4} paddingInlineStart={4} paddingInlineEnd={4}>\n          <NFTsDetectionNoticeNFTsTab />\n        </Box>\n      )}\n      <Box\n        padding={12}\n        display={Display.Flex}\n        flexDirection={FlexDirection.Column}\n        alignItems={AlignItems.center}\n        justifyContent={JustifyContent.center}\n      >\n        <Box justifyContent={JustifyContent.center}>\n          <img src=\"./images/no-nfts.svg\" />\n        </Box>\n        <Box\n          marginTop={4}\n          marginBottom={12}\n          display={Display.Flex}\n          justifyContent={JustifyContent.center}\n          alignItems={AlignItems.center}\n          flexDirection={FlexDirection.Column}\n          className=\"nfts-tab__link\"\n        >\n          <Text\n            color={TextColor.textMuted}\n            variant={TextVariant.headingSm}\n            textAlign={TextAlign.Center}\n            as=\"h4\"\n          >\n            {t('noNFTs')}\n          </Text>\n          <ButtonLink\n            size={ButtonLinkSize.Sm}\n            href={ZENDESK_URLS.NFT_TOKENS}\n            externalLink\n          >\n            {t('learnMoreUpperCase')}\n          </ButtonLink>\n        </Box>\n      </Box>\n    </>\n  );\n}\n","import React from 'react';\nimport {\n  Box,\n  ButtonIconSize,\n  TextFieldSearch,\n  TextFieldSearchSize,\n} from '../../../component-library';\nimport {\n  BlockSize,\n  BorderRadius,\n} from '../../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\n\n/**\n * Renders a search component for the asset picker modal.\n *\n * @param props\n * @param props.searchQuery - The current search query.\n * @param props.onChange - The function to handle search query changes.\n * @param props.isNFTSearch - Indicates if the search is for NFTs.\n * @param props.props - Additional props for the containing Box component.\n * @returns The rendered search component.\n */\nexport const Search = ({\n  searchQuery,\n  onChange,\n  isNFTSearch = false,\n  props,\n}: {\n  searchQuery: string;\n  onChange: (value: string) => void;\n  isNFTSearch?: boolean;\n  props?: React.ComponentProps<typeof Box>;\n}) => {\n  const t = useI18nContext();\n\n  return (\n    <Box padding={4} {...props}>\n      <TextFieldSearch\n        borderRadius={BorderRadius.LG}\n        placeholder={t(isNFTSearch ? 'searchNfts' : 'searchTokens')}\n        value={searchQuery}\n        onChange={(e) => onChange(e.target.value)}\n        error={false}\n        autoFocus\n        autoComplete={false}\n        width={BlockSize.Full}\n        clearButtonOnClick={() => onChange('')}\n        clearButtonProps={{\n          size: ButtonIconSize.Sm,\n        }}\n        showClearButton\n        className=\"asset-picker-modal__search-list\"\n        inputProps={{\n          'data-testid': 'asset-picker-modal-search-input',\n        }}\n        endAccessory={null}\n        size={TextFieldSearchSize.Lg}\n      />\n    </Box>\n  );\n};\n","import React, { ReactElement } from 'react';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\nimport { Tab, Tabs } from '../../../ui/tabs';\n\nexport enum TabName {\n  TOKENS = 'tokens',\n  NFTS = 'nfts',\n}\n\n/**\n * AssetPickerModalTabs component.\n *\n * @param props\n * @param props.defaultActiveTabKey - The key of the default active tab.\n * @param props.children - The child components to be displayed within tabs.\n * @param props.visibleTabs - A list of visible tabs.\n * @returns A Tabs instance with the provided visible children.\n */\nexport const AssetPickerModalTabs = ({\n  defaultActiveTabKey = TabName.TOKENS,\n  children,\n  visibleTabs = [TabName.TOKENS, TabName.NFTS],\n}: {\n  defaultActiveTabKey?: TabName;\n  children: ReactElement[];\n  visibleTabs?: TabName[];\n}) => {\n  const t = useI18nContext();\n\n  if (visibleTabs.length > 1) {\n    return (\n      <Tabs\n        defaultActiveTabKey={defaultActiveTabKey}\n        tabsClassName=\"modal-tab__tabs\"\n      >\n        {visibleTabs.map((tabName) => {\n          return (\n            <Tab\n              key={tabName}\n              activeClassName=\"modal-tab__tab--active\"\n              className=\"modal-tab__tab\"\n              name={t(tabName)}\n              tabKey={tabName}\n            >\n              {children.find(({ key }) => key === tabName)}\n            </Tab>\n          );\n        })}\n      </Tabs>\n    );\n  }\n\n  return (\n    <>\n      {visibleTabs.map((tabName) =>\n        children.find(({ key }) => key === tabName),\n      )}\n    </>\n  );\n};\n","import React, { useState, useCallback, useMemo } from 'react';\n\nimport { useSelector } from 'react-redux';\nimport { isEqual, uniqBy } from 'lodash';\nimport {\n  Token,\n  TokenListMap,\n  TokenListToken,\n} from '@metamask/assets-controllers';\nimport { Hex } from '@metamask/utils';\nimport {\n  Modal,\n  ModalContent,\n  ModalOverlay,\n  ModalHeader,\n  Box,\n  AvatarTokenSize,\n  AvatarToken,\n  Text,\n} from '../../../component-library';\nimport {\n  BorderRadius,\n  TextVariant,\n  TextAlign,\n  Display,\n  AlignItems,\n} from '../../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\n\nimport { AssetType } from '../../../../../shared/constants/transaction';\n\nimport {\n  getAllTokens,\n  getCurrentChainId,\n  getCurrentCurrency,\n  getNativeCurrencyImage,\n  getSelectedAccountCachedBalance,\n  getSelectedInternalAccount,\n  getShouldHideZeroBalanceTokens,\n  getTokenExchangeRates,\n  getTokenList,\n} from '../../../../selectors';\nimport {\n  getConversionRate,\n  getNativeCurrency,\n} from '../../../../ducks/metamask/metamask';\nimport { useTokenTracker } from '../../../../hooks/useTokenTracker';\nimport { getTopAssets } from '../../../../ducks/swaps/swaps';\nimport { getRenderableTokenData } from '../../../../hooks/useTokensToSearch';\nimport { useEqualityCheck } from '../../../../hooks/useEqualityCheck';\nimport { getSwapsBlockedTokens } from '../../../../ducks/send';\nimport { isEqualCaseInsensitive } from '../../../../../shared/modules/string-utils';\nimport {\n  ERC20Asset,\n  NativeAsset,\n  NFT,\n  AssetWithDisplayData,\n  TokenWithBalance,\n} from './types';\nimport { AssetPickerModalTabs, TabName } from './asset-picker-modal-tabs';\nimport { AssetPickerModalNftTab } from './asset-picker-modal-nft-tab';\nimport AssetList from './AssetList';\nimport { Search } from './asset-picker-modal-search';\n\ntype AssetPickerModalProps = {\n  header: JSX.Element | string | null;\n  isOpen: boolean;\n  onClose: () => void;\n  asset?: ERC20Asset | NativeAsset | Pick<NFT, 'type' | 'tokenId' | 'image'>;\n  onAssetChange: (\n    asset: AssetWithDisplayData<ERC20Asset> | AssetWithDisplayData<NativeAsset>,\n  ) => void;\n  /**\n   * Sending asset for UI treatments; only for dest component\n   */\n  sendingAsset?: { image: string; symbol: string } | undefined;\n} & Pick<\n  React.ComponentProps<typeof AssetPickerModalTabs>,\n  'visibleTabs' | 'defaultActiveTabKey'\n>;\n\nconst MAX_UNOWNED_TOKENS_RENDERED = 30;\n\nexport function AssetPickerModal({\n  header,\n  isOpen,\n  onClose,\n  asset,\n  onAssetChange,\n  sendingAsset,\n  ...tabProps\n}: AssetPickerModalProps) {\n  const t = useI18nContext();\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const swapsBlockedTokens = useSelector(getSwapsBlockedTokens);\n  const memoizedSwapsBlockedTokens = useMemo(() => {\n    return new Set<string>(swapsBlockedTokens);\n  }, [swapsBlockedTokens]);\n\n  const handleAssetChange = useCallback(onAssetChange, [onAssetChange]);\n\n  const chainId = useSelector(getCurrentChainId);\n\n  const nativeCurrencyImage = useSelector(getNativeCurrencyImage);\n  const nativeCurrency = useSelector(getNativeCurrency);\n  const balanceValue = useSelector(getSelectedAccountCachedBalance);\n\n  const tokenConversionRates = useSelector(getTokenExchangeRates, isEqual);\n  const conversionRate = useSelector(getConversionRate);\n  const currentCurrency = useSelector(getCurrentCurrency);\n\n  const { address: selectedAddress } = useSelector(getSelectedInternalAccount);\n  const shouldHideZeroBalanceTokens = useSelector(\n    getShouldHideZeroBalanceTokens,\n  );\n\n  const detectedTokens: Record<Hex, Record<string, Token[]>> = useSelector(\n    getAllTokens,\n  );\n  const tokens = detectedTokens?.[chainId]?.[selectedAddress] ?? [];\n\n  const { tokensWithBalances }: { tokensWithBalances: TokenWithBalance[] } =\n    useTokenTracker({\n      tokens,\n      address: selectedAddress,\n      hideZeroBalanceTokens: Boolean(shouldHideZeroBalanceTokens),\n    });\n\n  // Swaps token list\n  const tokenList = useSelector(getTokenList) as TokenListMap;\n  const topTokens = useSelector(getTopAssets, isEqual);\n\n  const usersTokens = uniqBy<TokenWithBalance>(\n    [...tokensWithBalances, ...tokens],\n    'address',\n  );\n\n  const memoizedUsersTokens: TokenWithBalance[] = useEqualityCheck(usersTokens);\n\n  const getIsDisabled = useCallback(\n    ({\n      address,\n      symbol,\n    }:\n      | TokenListToken\n      | AssetWithDisplayData<ERC20Asset>\n      | AssetWithDisplayData<NativeAsset>) => {\n      const isDisabled = sendingAsset?.symbol\n        ? !isEqualCaseInsensitive(sendingAsset.symbol, symbol) &&\n          memoizedSwapsBlockedTokens.has(address || '')\n        : false;\n\n      return isDisabled;\n    },\n    [sendingAsset?.symbol, memoizedSwapsBlockedTokens],\n  );\n\n  const filteredTokenList = useMemo(() => {\n    const nativeToken: AssetWithDisplayData<NativeAsset> = {\n      address: null,\n      symbol: nativeCurrency,\n      decimals: 18,\n      image: nativeCurrencyImage,\n      balance: balanceValue,\n      string: undefined,\n      type: AssetType.native,\n    };\n\n    const filteredTokens: AssetWithDisplayData<ERC20Asset | NativeAsset>[] = [];\n    // undefined would be the native token address\n    const filteredTokensAddresses = new Set<string | undefined>();\n\n    function* tokenGenerator(): Generator<\n      | AssetWithDisplayData<NativeAsset>\n      | ((Token | TokenListToken) & {\n          balance?: string;\n          string?: string;\n        })\n    > {\n      yield nativeToken;\n\n      const blockedTokens = [];\n\n      for (const token of memoizedUsersTokens) {\n        yield token;\n      }\n\n      // topTokens should already be sorted by popularity\n      for (const address of Object.keys(topTokens)) {\n        const token = tokenList?.[address];\n        if (token) {\n          if (getIsDisabled(token)) {\n            blockedTokens.push(token);\n            continue;\n          } else {\n            yield token;\n          }\n        }\n      }\n\n      for (const token of Object.values(tokenList)) {\n        yield token;\n      }\n\n      for (const token of blockedTokens) {\n        yield token;\n      }\n    }\n\n    for (const token of tokenGenerator()) {\n      if (\n        token.symbol?.toLowerCase().includes(searchQuery.toLowerCase()) &&\n        !filteredTokensAddresses.has(token.address?.toLowerCase())\n      ) {\n        filteredTokensAddresses.add(token.address?.toLowerCase());\n        filteredTokens.push(\n          getRenderableTokenData(\n            token.address\n              ? ({\n                  ...token,\n                  ...tokenList[token.address.toLowerCase()],\n                  type: AssetType.token,\n                } as AssetWithDisplayData<ERC20Asset>)\n              : token,\n            tokenConversionRates,\n            conversionRate,\n            currentCurrency,\n            chainId,\n            tokenList,\n          ),\n        );\n      }\n\n      if (filteredTokens.length > MAX_UNOWNED_TOKENS_RENDERED) {\n        break;\n      }\n    }\n\n    return filteredTokens;\n  }, [\n    memoizedUsersTokens,\n    topTokens,\n    searchQuery,\n    nativeCurrency,\n    nativeCurrencyImage,\n    balanceValue,\n    memoizedUsersTokens,\n    topTokens,\n    tokenList,\n    getIsDisabled,\n    searchQuery,\n    tokenConversionRates,\n    conversionRate,\n    currentCurrency,\n    chainId,\n    tokenList,\n  ]);\n\n  return (\n    <Modal\n      className=\"asset-picker-modal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      data-testid=\"asset-picker-modal\"\n    >\n      <ModalOverlay />\n      <ModalContent modalDialogProps={{ padding: 0 }}>\n        <ModalHeader onClose={onClose}>\n          <Text variant={TextVariant.headingSm} textAlign={TextAlign.Center}>\n            {header}\n          </Text>\n        </ModalHeader>\n        {sendingAsset?.image && sendingAsset?.symbol && (\n          <Box\n            display={Display.Flex}\n            gap={1}\n            alignItems={AlignItems.center}\n            marginInline=\"auto\"\n          >\n            <AvatarToken\n              borderRadius={BorderRadius.full}\n              src={sendingAsset.image}\n              size={AvatarTokenSize.Xs}\n            />\n            <Text variant={TextVariant.bodySm}>\n              {t('sendingAsset', [sendingAsset.symbol])}\n            </Text>\n          </Box>\n        )}\n        <Box className=\"modal-tab__wrapper\">\n          <AssetPickerModalTabs {...tabProps}>\n            <React.Fragment key={TabName.TOKENS}>\n              <Search\n                searchQuery={searchQuery}\n                onChange={(value) => setSearchQuery(value)}\n              />\n              <AssetList\n                handleAssetChange={handleAssetChange}\n                asset={asset?.type === AssetType.NFT ? undefined : asset}\n                tokenList={filteredTokenList}\n                isTokenDisabled={getIsDisabled}\n              />\n            </React.Fragment>\n            <AssetPickerModalNftTab\n              key={TabName.NFTS}\n              searchQuery={searchQuery}\n              onClose={onClose}\n              renderSearch={() => (\n                <Search\n                  isNFTSearch\n                  searchQuery={searchQuery}\n                  onChange={(value) => setSearchQuery(value)}\n                />\n              )}\n            />\n          </AssetPickerModalTabs>\n        </Box>\n      </ModalContent>\n    </Modal>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  AvatarTokenSize,\n  IconName,\n  AvatarToken,\n  Text,\n  Box,\n  ButtonBase,\n  AvatarNetworkSize,\n  BadgeWrapper,\n  AvatarNetwork,\n} from '../../../component-library';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BorderColor,\n  BorderRadius,\n  Display,\n  IconColor,\n  JustifyContent,\n  TextColor,\n  TextVariant,\n} from '../../../../helpers/constants/design-system';\nimport { AssetType } from '../../../../../shared/constants/transaction';\nimport { AssetPickerModal } from '../asset-picker-modal/asset-picker-modal';\nimport {\n  getCurrentNetwork,\n  getTestNetworkBackgroundColor,\n} from '../../../../selectors';\nimport Tooltip from '../../../ui/tooltip';\nimport { LARGE_SYMBOL_LENGTH } from '../constants';\n///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\n///: END:ONLY_INCLUDE_IF\nimport { ellipsify } from '../../../../pages/confirmations/send/send.utils';\nimport {\n  AssetWithDisplayData,\n  ERC20Asset,\n  NativeAsset,\n  NFT,\n} from '../asset-picker-modal/types';\nimport { TabName } from '../asset-picker-modal/asset-picker-modal-tabs';\n\nconst ELLIPSIFY_LENGTH = 13; // 6 (start) + 4 (end) + 3 (...)\n\nexport type AssetPickerProps = {\n  asset?:\n    | ERC20Asset\n    | NativeAsset\n    | Pick<NFT, 'type' | 'tokenId' | 'image' | 'symbol'>\n    | undefined;\n  /**\n   * Needs to be wrapped in a callback\n   */\n  onAssetChange: (\n    newAsset:\n      | AssetWithDisplayData<NativeAsset>\n      | AssetWithDisplayData<ERC20Asset>,\n  ) => void;\n  onClick?: () => void;\n  isDisabled?: boolean;\n} & Pick<\n  React.ComponentProps<typeof AssetPickerModal>,\n  'visibleTabs' | 'header' | 'sendingAsset'\n>;\n\n// A component that lets the user pick from a list of assets.\nexport function AssetPicker({\n  header,\n  asset,\n  onAssetChange,\n  sendingAsset,\n  onClick,\n  isDisabled = false,\n  visibleTabs,\n}: AssetPickerProps) {\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  const t = useI18nContext();\n  ///: END:ONLY_INCLUDE_IF\n\n  const [showAssetPickerModal, setShowAssetPickerModal] = useState(false);\n\n  const isNFT = asset?.type === AssetType.NFT;\n\n  // selected asset details\n  const primaryTokenImage = asset?.image;\n  const symbol = asset?.symbol;\n\n  const isSymbolLong = symbol && symbol.length > LARGE_SYMBOL_LENGTH;\n  const formattedSymbol =\n    isSymbolLong && !isNFT\n      ? `${symbol.substring(0, LARGE_SYMBOL_LENGTH - 1)}...`\n      : symbol;\n\n  // Badge details\n  const currentNetwork = useSelector(getCurrentNetwork);\n  const testNetworkBackgroundColor = useSelector(getTestNetworkBackgroundColor);\n\n  const handleAssetPickerTitle = (): string | undefined => {\n    ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n    if (isDisabled) {\n      return t('swapTokenNotAvailable');\n    }\n    ///: END:ONLY_INCLUDE_IF\n\n    return undefined;\n  };\n\n  return (\n    <>\n      {/* This is the Modal that ask to choose token to send */}\n      <AssetPickerModal\n        visibleTabs={visibleTabs}\n        header={header}\n        isOpen={showAssetPickerModal}\n        onClose={() => setShowAssetPickerModal(false)}\n        asset={asset}\n        onAssetChange={(\n          token:\n            | AssetWithDisplayData<ERC20Asset>\n            | AssetWithDisplayData<NativeAsset>,\n        ) => {\n          onAssetChange(token);\n          setShowAssetPickerModal(false);\n        }}\n        sendingAsset={sendingAsset}\n        defaultActiveTabKey={\n          asset?.type === AssetType.NFT ? TabName.NFTS : TabName.TOKENS\n        }\n      />\n\n      <ButtonBase\n        data-testid=\"asset-picker-button\"\n        className=\"asset-picker\"\n        disabled={isDisabled}\n        display={Display.Flex}\n        alignItems={AlignItems.center}\n        gap={2}\n        padding={2}\n        paddingLeft={2}\n        paddingRight={2}\n        justifyContent={isNFT ? JustifyContent.spaceBetween : undefined}\n        backgroundColor={BackgroundColor.transparent}\n        onClick={() => {\n          setShowAssetPickerModal(true);\n          onClick?.();\n        }}\n        endIconName={IconName.ArrowDown}\n        endIconProps={{\n          color: IconColor.iconDefault,\n          marginInlineStart: 0,\n          display: isDisabled ? Display.None : Display.InlineBlock,\n        }}\n        title={handleAssetPickerTitle()}\n      >\n        <Box display={Display.Flex} alignItems={AlignItems.center} gap={3}>\n          <Box display={Display.Flex}>\n            <BadgeWrapper\n              badge={\n                <AvatarNetwork\n                  size={AvatarNetworkSize.Xs}\n                  name={currentNetwork?.nickname ?? ''}\n                  src={currentNetwork?.rpcPrefs?.imageUrl}\n                  backgroundColor={testNetworkBackgroundColor}\n                  borderColor={\n                    primaryTokenImage\n                      ? BorderColor.borderMuted\n                      : BorderColor.borderDefault\n                  }\n                />\n              }\n            >\n              <AvatarToken\n                borderRadius={isNFT ? BorderRadius.LG : BorderRadius.full}\n                src={primaryTokenImage ?? undefined}\n                size={AvatarTokenSize.Md}\n                name={symbol}\n                {...(isNFT && { backgroundColor: BackgroundColor.transparent })}\n              />\n            </BadgeWrapper>\n          </Box>\n\n          <Tooltip\n            disabled={!isSymbolLong}\n            title={symbol}\n            position=\"bottom\"\n            wrapperClassName=\"mm-box\"\n          >\n            <Text\n              className=\"asset-picker__symbol\"\n              variant={TextVariant.bodyMd}\n              color={TextColor.textDefault}\n            >\n              {formattedSymbol}\n            </Text>\n            {isNFT && asset?.tokenId && (\n              <Text\n                variant={TextVariant.bodySm}\n                color={TextColor.textAlternative}\n              >\n                #\n                {String(asset.tokenId).length < ELLIPSIFY_LENGTH\n                  ? asset.tokenId\n                  : ellipsify(String(asset.tokenId), 6, 4)}\n              </Text>\n            )}\n          </Tooltip>\n        </Box>\n      </ButtonBase>\n    </>\n  );\n}\n","export const LARGE_SYMBOL_LENGTH = 7;\n","export { AssetPickerAmount } from './asset-picker-amount';\n","import React, { useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Asset,\n  getSendAnalyticProperties,\n  getSendMaxModeState,\n  toggleSendMaxMode,\n} from '../../../ducks/send';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport { MetaMetricsEventCategory } from '../../../../shared/constants/metametrics';\nimport { ButtonLink } from '../../component-library';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { TextVariant } from '../../../helpers/constants/design-system';\nimport { AssetType } from '../../../../shared/constants/transaction';\nimport { hexToDecimal } from '../../../../shared/modules/conversion.utils';\n\n// A button that updates the send amount to max balance or 0.\nexport default function MaxClearButton({ asset }: { asset: Asset }) {\n  const t = useI18nContext();\n  const maxModeOn = useSelector(getSendMaxModeState);\n  const dispatch = useDispatch();\n  const trackEvent = useContext(MetaMetricsContext);\n  const sendAnalytics = useSelector(getSendAnalyticProperties);\n\n  const onClick = () => {\n    trackEvent({\n      event: 'Clicked \"Amount Max\"',\n      category: MetaMetricsEventCategory.Transactions,\n      properties: {\n        ...sendAnalytics,\n        action: 'Edit Screen',\n        legacy_event: true,\n      },\n    });\n    dispatch(toggleSendMaxMode());\n  };\n\n  return asset.type === AssetType.NFT ||\n    Number(hexToDecimal(asset.balance || '0x0')) <= 0 ? null : (\n    <ButtonLink\n      className=\"asset-picker-amount__max-clear\"\n      onClick={onClick}\n      marginLeft=\"auto\"\n      textProps={{ variant: TextVariant.bodySm }}\n      data-testid=\"max-clear-button\"\n    >\n      {maxModeOn ? t('clear') : t('max')}\n    </ButtonLink>\n  );\n}\n","import React from 'react';\nimport UnitInput from '../../../ui/unit-input';\nimport { Numeric } from '../../../../../shared/modules/Numeric';\n\ntype NFTInputProps = {\n  integerValue: number;\n  onChange?: (newAmountRaw: string, newAmountFormatted: string) => void;\n  className?: string;\n};\n\nconst NUMBERS_REGEX = /^[0-9]*$/u;\n\nexport function NFTInput({ integerValue, onChange, className }: NFTInputProps) {\n  const handleChange = (newValueAsString: number) => {\n    if (!onChange) {\n      return;\n    }\n\n    const newValue = new Numeric(newValueAsString, 10);\n\n    if (!Number.isInteger(newValue.toNumber())) {\n      return;\n    }\n\n    onChange(newValue.toPrefixedHexString(), String(newValueAsString));\n  };\n\n  return (\n    <UnitInput\n      isDisabled={!onChange}\n      isFocusOnInput={Boolean(onChange)}\n      type=\"number\"\n      step={1}\n      min={0}\n      dataTestId=\"nft-input\"\n      onChange={handleChange}\n      value={integerValue}\n      className={className}\n      keyPressRegex={NUMBERS_REGEX}\n    />\n  );\n}\n","import React from 'react';\nimport {\n  BackgroundColor,\n  IconColor,\n} from '../../../../helpers/constants/design-system';\nimport {\n  ButtonIcon,\n  ButtonIconSize,\n  IconName,\n} from '../../../component-library';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\n\nexport default function SwapIcon({\n  onClick,\n}: {\n  onClick: React.MouseEventHandler;\n}) {\n  const t = useI18nContext();\n\n  return (\n    <ButtonIcon\n      backgroundColor={BackgroundColor.transparent}\n      iconName={IconName.SwapVertical}\n      size={ButtonIconSize.Sm}\n      color={IconColor.primaryDefault}\n      onClick={onClick}\n      ariaLabel={t('switchInputCurrency')}\n      className=\"asset-picker-amount__input__swap\"\n    />\n  );\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\nimport {\n  type Asset,\n  type Amount,\n  getSendMaxModeState,\n} from '../../../../ducks/send';\nimport { toggleCurrencySwitch } from '../../../../ducks/app/app';\nimport {\n  AssetType,\n  TokenStandard,\n} from '../../../../../shared/constants/transaction';\nimport { Box, Text } from '../../../component-library';\nimport {\n  FontWeight,\n  TextVariant,\n} from '../../../../helpers/constants/design-system';\nimport CurrencyInput from '../../../app/currency-input';\nimport { getIsFiatPrimary } from '../utils';\nimport { NFTInput } from '../nft-input/nft-input';\nimport SwapIcon from './swap-icon';\n\ntype BaseProps = {\n  assetType: AssetType;\n  onAmountChange?: (newAmountRaw: string, newAmountFormatted: string) => void;\n  asset?: Asset;\n  amount: Amount;\n  isAmountLoading?: boolean;\n};\n\ntype ERC20Props = OverridingUnion<\n  BaseProps,\n  {\n    assetType: AssetType.token;\n    asset: Asset;\n  }\n>;\n\ntype NFTProps = OverridingUnion<\n  BaseProps,\n  {\n    assetType: AssetType.NFT;\n    asset: Asset;\n  }\n>;\n\ntype NativeTokenProps = OverridingUnion<\n  BaseProps,\n  {\n    assetType: AssetType.native;\n  }\n>;\n\ntype UnsupportedTokenProps = OverridingUnion<\n  Omit<BaseProps, 'assetType'>,\n  {\n    assetType: Exclude<\n      AssetType,\n      AssetType.NFT | AssetType.native | AssetType.token\n    >;\n    asset?: Asset;\n  }\n>;\n\ntype SwappableCurrencyInputProps =\n  | ERC20Props\n  | NFTProps\n  | NativeTokenProps\n  | UnsupportedTokenProps;\n\nexport function SwappableCurrencyInput({\n  assetType,\n  asset,\n  amount: { value },\n  isAmountLoading,\n  onAmountChange,\n}: SwappableCurrencyInputProps) {\n  const dispatch = useDispatch();\n\n  const t = useI18nContext();\n\n  const isFiatPrimary = useSelector(getIsFiatPrimary);\n  const isSetToMax = useSelector(getSendMaxModeState);\n\n  const TokenComponent = (\n    <CurrencyInput\n      className=\"asset-picker-amount__input\"\n      isFiatPreferred={isFiatPrimary}\n      onChange={onAmountChange} // onChange controls disabled state, disabled if undefined\n      hexValue={value}\n      swapIcon={(onClick: React.MouseEventHandler) => (\n        <SwapIcon onClick={onClick} />\n      )}\n      onPreferenceToggle={useCallback(\n        () => dispatch(toggleCurrencySwitch()),\n        [dispatch],\n      )}\n      asset={asset?.details}\n      isSkeleton={isAmountLoading}\n      isMatchingUpstream={isSetToMax}\n    />\n  );\n\n  const NFTComponent = (\n    <NFTInput\n      integerValue={parseInt(value, 16)}\n      onChange={onAmountChange}\n      className=\"asset-picker-amount__input-nft\"\n    />\n  );\n\n  switch (assetType) {\n    case AssetType.token:\n    case AssetType.native:\n      return TokenComponent;\n    case AssetType.NFT:\n      return asset.details?.standard === TokenStandard.ERC721\n        ? null\n        : NFTComponent;\n    default:\n    // do nothing\n  }\n\n  return (\n    <Box marginLeft={'auto'}>\n      <Text variant={TextVariant.bodySm}>{t('tokenId')}</Text>\n      <Text\n        variant={TextVariant.bodySm}\n        fontWeight={FontWeight.Bold}\n        marginLeft={10}\n      >\n        {asset?.details?.tokenId}\n      </Text>\n    </Box>\n  );\n}\n","import { createSelector } from 'reselect';\n\nexport const getIsFiatPrimary = createSelector(\n  (state: {\n    metamask: { preferences: { useNativeCurrencyAsPrimaryCurrency: boolean } };\n    appState: { sendInputCurrencySwitched: boolean };\n  }) => state.metamask.preferences,\n  (state) => state.appState.sendInputCurrencySwitched,\n  ({ useNativeCurrencyAsPrimaryCurrency }, sendInputCurrencySwitched) => {\n    const isFiatPrimary = Boolean(\n      (useNativeCurrencyAsPrimaryCurrency && sendInputCurrencySwitched) ||\n        (!useNativeCurrencyAsPrimaryCurrency && !sendInputCurrencySwitched),\n    );\n\n    return isFiatPrimary;\n  },\n);\n","import * as React from 'react';\nimport classnames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { getUseBlockie } from '../../../selectors';\nimport {\n  Text,\n  Box,\n  AvatarToken,\n  AvatarTokenSize,\n  AvatarAccount,\n  AvatarAccountSize,\n  AvatarAccountVariant,\n} from '../../component-library';\nimport {\n  AlignItems,\n  BorderRadius,\n  Display,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { AvatarGroupProps, AvatarType } from './avatar-group.types';\n\nexport const AvatarGroup: React.FC<AvatarGroupProps> = ({\n  className = '',\n  limit = 4,\n  members = [],\n  size = AvatarTokenSize.Xs,\n  avatarType = AvatarType.TOKEN,\n  borderColor,\n}): JSX.Element => {\n  const membersCount = members.length;\n  const visibleMembers = members.slice(0, limit).reverse();\n  const showTag = membersCount > limit;\n  const useBlockie = useSelector(getUseBlockie);\n\n  let marginLeftValue = '';\n  if (AvatarTokenSize.Xs) {\n    marginLeftValue = '-8px';\n  } else if (AvatarTokenSize.Sm) {\n    marginLeftValue = '-12px';\n  } else {\n    marginLeftValue = '-16px';\n  }\n  const tagValue = `+${(membersCount - limit).toLocaleString()}`;\n  return (\n    <Box\n      alignItems={AlignItems.center}\n      display={Display.Flex}\n      className={classnames('multichain-avatar-group', className)}\n      data-testid=\"avatar-group\"\n      gap={1}\n    >\n      <Box display={Display.Flex}>\n        {visibleMembers.map((member, i) => {\n          return (\n            <Box\n              borderRadius={BorderRadius.full}\n              key={i}\n              style={{ marginLeft: i === 0 ? '0' : marginLeftValue }}\n            >\n              {avatarType === AvatarType.TOKEN ? (\n                <AvatarToken\n                  src={member.avatarValue}\n                  name={member.symbol}\n                  size={size}\n                  borderColor={borderColor}\n                />\n              ) : (\n                <AvatarAccount\n                  size={AvatarAccountSize.Xs}\n                  address={member.avatarValue}\n                  variant={\n                    useBlockie\n                      ? AvatarAccountVariant.Blockies\n                      : AvatarAccountVariant.Jazzicon\n                  }\n                  borderColor={borderColor}\n                />\n              )}\n            </Box>\n          );\n        })}\n      </Box>\n      {showTag ? (\n        <Box>\n          <Text variant={TextVariant.bodySm} color={TextColor.textAlternative}>\n            {tagValue}\n          </Text>\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import { BorderColor } from '../../../helpers/constants/design-system';\nimport { AvatarTokenSize } from '../../component-library';\nimport type { StyleUtilityProps } from '../../component-library/box';\n\n// TODO: Convert to a `type` in a future major version.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface AvatarGroupProps extends StyleUtilityProps {\n  /** * Additional class name for the AvatarGroup component */\n  className?: string;\n  /** * Limit to show only a certain number of tokens and extras in Text */\n  limit: number;\n  /** * Type of Avatar: Token/Account */\n  avatarType?: AvatarType;\n  /** * List of Avatar Tokens */\n  members: {\n    /** * Image of Avatar Token */\n    avatarValue: string;\n    /** * Symbol of Avatar Token */\n    symbol?: string;\n  }[];\n  /** * Size of Avatar Tokens. For AvatarGroup we are considering AvatarTokenSize.Xs, AvatarTokenSize.Sm, AvatarTokenSize.Md  */\n  size?: AvatarTokenSize;\n  /** * Border Color of Avatar Tokens */\n  borderColor?: BorderColor;\n}\n\nexport enum AvatarType {\n  TOKEN = 'TOKEN',\n  ACCOUNT = 'ACCOUNT',\n}\n","export { AvatarGroup } from './avatar-group';\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BorderColor,\n  BorderRadius,\n  Display,\n  JustifyContent,\n} from '../../../helpers/constants/design-system';\nimport {\n  AvatarAccount,\n  AvatarAccountSize,\n  AvatarAccountVariant,\n  BadgeWrapper,\n  Box,\n  BoxProps,\n} from '../../component-library';\nimport { getUseBlockie } from '../../../selectors';\nimport Tooltip from '../../ui/tooltip';\nimport { BadgeStatusProps } from './badge-status.types';\n\nexport const BadgeStatus: React.FC<BadgeStatusProps> = ({\n  className = '',\n  badgeBackgroundColor = BackgroundColor.backgroundAlternative,\n  badgeBorderColor = BorderColor.borderMuted,\n  address,\n  isConnectedAndNotActive = false,\n  text,\n  ...props\n}): JSX.Element => {\n  const useBlockie = useSelector(getUseBlockie);\n\n\n  return (\n    <Box\n      className={classNames('multichain-badge-status', className)}\n      data-testid=\"multichain-badge-status\"\n      as=\"button\"\n      display={Display.Flex}\n      alignItems={AlignItems.center}\n      justifyContent={JustifyContent.center}\n      backgroundColor={BackgroundColor.transparent}\n      {...(props as BoxProps<'div'>)}\n    >\n      <Tooltip\n        style={{ display: 'flex' }}\n        title={text}\n        data-testid=\"multichain-badge-status__tooltip\"\n        position=\"bottom\"\n      >\n        <BadgeWrapper\n          positionObj={\n            isConnectedAndNotActive\n              ? { bottom: 2, right: 5 }\n              : { bottom: -1, right: 2 }\n          }\n          badge={\n            <Box\n              className={classNames('multichain-badge-status__badge', {\n                'multichain-badge-status__badge-not-connected':\n                  isConnectedAndNotActive,\n              })}\n              backgroundColor={badgeBackgroundColor}\n              borderRadius={BorderRadius.full}\n              borderColor={badgeBorderColor}\n              borderWidth={isConnectedAndNotActive ? 2 : 4}\n            />\n          }\n        >\n          {\n            ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n            <AvatarAccount\n              borderColor={BorderColor.transparent}\n              size={AvatarAccountSize.Md}\n              address={address}\n              variant={\n                useBlockie\n                  ? AvatarAccountVariant.Blockies\n                  : AvatarAccountVariant.Jazzicon\n              }\n              marginInlineEnd={2}\n            />\n            ///: END:ONLY_INCLUDE_IF\n          }\n\n          {\n          }\n        </BadgeWrapper>\n      </Tooltip>\n    </Box>\n  );\n};\n","export { BadgeStatus } from './badge-status';\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Box,\n  ButtonPrimary,\n  ButtonPrimarySize,\n  Checkbox,\n  Icon,\n  IconName,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n} from '../../component-library';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { AccountListItem } from '..';\nimport {\n  Display,\n  IconColor,\n  JustifyContent,\n  TextColor,\n} from '../../../helpers/constants/design-system';\nimport Tooltip from '../../ui/tooltip/tooltip';\nimport { getURLHost } from '../../../helpers/utils/util';\nimport { addMorePermittedAccounts } from '../../../store/actions';\nimport { ConnectAccountsListProps } from './connect-account-modal.types';\n\nexport const ConnectAccountsModalList: React.FC<ConnectAccountsListProps> = ({\n  onClose,\n  allAreSelected,\n  deselectAll,\n  selectAll,\n  handleAccountClick,\n  selectedAccounts,\n  accounts,\n  checked,\n  isIndeterminate,\n  onAccountsUpdate,\n  activeTabOrigin,\n}) => {\n  const t = useI18nContext();\n  const dispatch = useDispatch();\n  return (\n    <Modal isOpen onClose={onClose} data-testid=\"connect-more-accounts\">\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader\n          data-testid=\"connect-more-accounts-title\"\n          onClose={onClose}\n        >\n          {t('connectMoreAccounts')}\n        </ModalHeader>\n        <ModalBody>\n          <Box\n            padding={4}\n            display={Display.Flex}\n            justifyContent={JustifyContent.spaceBetween}\n          >\n            <Checkbox\n              label={t('selectAll')}\n              isChecked={checked}\n              onClick={() => (allAreSelected() ? deselectAll() : selectAll())}\n              isIndeterminate={isIndeterminate}\n            />\n            <Text\n              color={TextColor.textAlternative}\n              as=\"div\"\n              display={Display.Flex}\n            >\n              <Tooltip\n                distance={10}\n                html={t('connectedAccountsListTooltip', [\n                  <strong>{getURLHost(activeTabOrigin)}</strong>,\n                ])}\n                position=\"top\"\n              >\n                <Icon\n                  marginInlineEnd={2}\n                  name={IconName.Info}\n                  color={IconColor.iconMuted}\n                />\n              </Tooltip>\n              {t('permissions')}\n            </Text>\n          </Box>\n          {accounts.map((account) => {\n            const isSelectedAccount = selectedAccounts.includes(\n              account.address,\n            );\n            return (\n              <AccountListItem\n                onClick={() => handleAccountClick(account.address)}\n                account={account}\n                selected={isSelectedAccount}\n                key={account.address}\n                closeMenu={onClose}\n                startAccessory={<Checkbox isChecked={isSelectedAccount} />}\n              />\n            );\n          })}\n        </ModalBody>\n        <ModalFooter>\n          <ButtonPrimary\n            data-testid=\"connect-more-accounts-button\"\n            onClick={() => {\n              dispatch(\n                addMorePermittedAccounts(activeTabOrigin, selectedAccounts),\n              );\n              onClose();\n              onAccountsUpdate();\n            }}\n            size={ButtonPrimarySize.Lg}\n            block\n            disabled={selectedAccounts.length === 0}\n          >\n            {t('confirm')}\n          </ButtonPrimary>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { InternalAccount, isEvmAccountType } from '@metamask/keyring-api';\nimport { getUnconnectedAccounts } from '../../../selectors/selectors';\nimport { ConnectAccountsModalList } from './connect-accounts-modal-list';\n\nexport const ConnectAccountsModal = ({\n  onClose,\n  onAccountsUpdate,\n  activeTabOrigin,\n}: {\n  onClose: () => void;\n  onAccountsUpdate: () => void;\n  activeTabOrigin: string;\n}) => {\n  const accounts = useSelector((state) =>\n    // We only consider EVM accounts.\n    // Connections with non-EVM accounts (Bitcoin only for now) are used implicitly and handled by the Bitcoin Snap itself.\n    getUnconnectedAccounts(state, activeTabOrigin).filter(\n      (account: InternalAccount) => isEvmAccountType(account.type),\n    ),\n  );\n  const [selectedAccounts, setSelectedAccounts] = useState<string[]>([]);\n\n  const handleAccountClick = (address: string) => {\n    const index = selectedAccounts.indexOf(address);\n    let newSelectedAccounts: string[] = [];\n\n    if (index === -1) {\n      // If address is not already selected, add it to the selectedAccounts array\n      newSelectedAccounts = [...selectedAccounts, address];\n    } else {\n      // If address is already selected, remove it from the selectedAccounts array\n      newSelectedAccounts = selectedAccounts.filter(\n        (_item, idx) => idx !== index,\n      );\n    }\n\n    setSelectedAccounts(newSelectedAccounts);\n  };\n\n  const selectAll = () => {\n    const newSelectedAccounts = accounts.map(\n      (account: { address: string }) => account.address,\n    );\n    setSelectedAccounts(newSelectedAccounts);\n  };\n\n  const deselectAll = () => {\n    setSelectedAccounts([]);\n  };\n\n  const allAreSelected = () => {\n    return accounts.length === selectedAccounts.length;\n  };\n  let checked = false;\n  let isIndeterminate = false;\n  if (allAreSelected()) {\n    checked = true;\n    isIndeterminate = false;\n  } else if (selectedAccounts.length > 0 && !allAreSelected()) {\n    checked = false;\n    isIndeterminate = true;\n  }\n  return (\n    <ConnectAccountsModalList\n      accounts={accounts}\n      selectedAccounts={selectedAccounts}\n      allAreSelected={allAreSelected}\n      deselectAll={deselectAll}\n      selectAll={selectAll}\n      handleAccountClick={handleAccountClick}\n      checked={checked}\n      isIndeterminate={isIndeterminate}\n      onClose={onClose}\n      onAccountsUpdate={onAccountsUpdate}\n      activeTabOrigin={activeTabOrigin}\n    />\n  );\n};\n","import React, { useRef, useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  PopoverRole,\n  PopoverPosition,\n  Popover,\n  IconName,\n  Text,\n  ModalFocus,\n  Box,\n} from '../../component-library';\nimport { MenuItem } from '../../ui/menu';\nimport {\n  IconColor,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport {\n  removePermittedAccount,\n  setSelectedAccount,\n} from '../../../store/actions';\nimport { getPermissionsForActiveTab } from '../../../selectors';\nimport { PermissionDetailsModal } from '../permission-details-modal/permission-details-modal';\nimport { Identity } from './connected-accounts-menu.types';\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst TsMenuItem = MenuItem as any;\n\nexport const ConnectedAccountsMenu = ({\n  isOpen,\n  account,\n  anchorElement,\n  disableAccountSwitcher = false,\n  onClose,\n  closeMenu,\n  onActionClick,\n  activeTabOrigin,\n}: {\n  isOpen: boolean;\n  account: Identity;\n  anchorElement: HTMLElement | null;\n  disableAccountSwitcher: boolean;\n  onClose: () => void;\n  closeMenu: () => void;\n  onActionClick: (message: string) => void;\n  activeTabOrigin: string;\n}) => {\n  const dispatch = useDispatch();\n  const t = useI18nContext();\n  const popoverDialogRef = useRef<HTMLDivElement | null>(null);\n  const [showPermissionModal, setShowPermissionModal] = useState(false);\n  const permissions = useSelector(getPermissionsForActiveTab);\n\n  const handleClickOutside = useCallback(\n    (event) => {\n      if (\n        popoverDialogRef?.current &&\n        !popoverDialogRef.current.contains(event.target)\n      ) {\n        onClose();\n      }\n    },\n    [onClose],\n  );\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      if (\n        event.key === 'Tab' &&\n        popoverDialogRef?.current?.contains(event.target) &&\n        onClose\n      ) {\n        onClose();\n      }\n    },\n    [onClose],\n  );\n\n  return (\n    <>\n      <Popover\n        className=\"multichain-connected-accounts-menu__popover\"\n        referenceElement={anchorElement}\n        role={PopoverRole.Dialog}\n        position={PopoverPosition.Bottom}\n        offset={[0, 0]}\n        padding={0}\n        isOpen={isOpen}\n        flip\n        preventOverflow\n        isPortal\n      >\n        <ModalFocus restoreFocus initialFocusRef={{ current: anchorElement }}>\n          <Box onKeyDown={handleKeyDown} ref={popoverDialogRef}>\n            {permissions?.length ? (\n              <TsMenuItem\n                iconName={IconName.SecurityTick}\n                data-testid=\"permission-details-menu-item\"\n                onClick={() => {\n                  setShowPermissionModal(true);\n                  onClose();\n                }}\n              >\n                <Text variant={TextVariant.bodyMd}>\n                  {t('permissionDetails')}\n                </Text>\n              </TsMenuItem>\n            ) : null}\n            {disableAccountSwitcher ? null : (\n              <TsMenuItem\n                iconName={IconName.SwapHorizontal}\n                data-testid=\"switch-account-menu-item\"\n                onClick={() => {\n                  dispatch(setSelectedAccount(account.address));\n                  onClose();\n                  closeMenu();\n                }}\n              >\n                <Text variant={TextVariant.bodyMd}>\n                  {t('switchToThisAccount')}\n                </Text>\n              </TsMenuItem>\n            )}\n            <TsMenuItem\n              iconName={IconName.Logout}\n              iconColor={IconColor.errorDefault}\n              data-testid=\"disconnect-menu-item\"\n              onClick={() => {\n                onActionClick(account.metadata.name);\n                dispatch(\n                  removePermittedAccount(activeTabOrigin, account.address),\n                );\n              }}\n            >\n              <Text color={TextColor.errorDefault} variant={TextVariant.bodyMd}>\n                {t('disconnect')}\n              </Text>\n            </TsMenuItem>\n          </Box>\n        </ModalFocus>\n      </Popover>\n      {showPermissionModal ? (\n        <PermissionDetailsModal\n          isOpen={showPermissionModal}\n          account={account}\n          onClick={() => {\n            dispatch(removePermittedAccount(activeTabOrigin, account.address));\n          }}\n          onClose={() => setShowPermissionModal(false)}\n          permissions={permissions}\n        />\n      ) : null}\n    </>\n  );\n};\n","export { ConnectedAccountsMenu } from './connected-accounts-menu';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport {\n  STATUS_CONNECTED_TO_ANOTHER_ACCOUNT,\n  STATUS_CONNECTED_TO_SNAP,\n  STATUS_NOT_CONNECTED,\n} from '../../../helpers/constants/connected-sites';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BorderColor,\n  BorderRadius,\n  Display,\n  IconColor,\n  JustifyContent,\n  Size,\n} from '../../../helpers/constants/design-system';\nimport {\n  AvatarFavicon,\n  BadgeWrapper,\n  Box,\n  Icon,\n  IconName,\n  IconSize,\n} from '../../component-library';\nimport {\n  getOriginOfCurrentTab,\n  getSelectedInternalAccount,\n  getSubjectMetadata,\n} from '../../../selectors';\nimport Tooltip from '../../ui/tooltip';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\n\nexport const ConnectedSiteMenu = ({\n  className,\n  globalMenuColor,\n  status,\n  text,\n  onClick,\n  disabled,\n}) => {\n  const t = useI18nContext();\n  const selectedAccount = useSelector(getSelectedInternalAccount);\n  const subjectMetadata = useSelector(getSubjectMetadata);\n  const connectedOrigin = useSelector(getOriginOfCurrentTab);\n  const connectedSubjectsMetadata = subjectMetadata[connectedOrigin];\n  const isConnectedtoOtherAccountOrSnap =\n    status === STATUS_CONNECTED_TO_ANOTHER_ACCOUNT ||\n    status === STATUS_CONNECTED_TO_SNAP;\n  return (\n    <Box\n      className={classNames(\n        `multichain-connected-site-menu${disabled ? '--disabled' : ''}`,\n        className,\n      )}\n      data-testid=\"connection-menu\"\n      as=\"button\"\n      onClick={onClick}\n      display={Display.Flex}\n      alignItems={AlignItems.center}\n      justifyContent={JustifyContent.center}\n      backgroundColor={BackgroundColor.backgroundDefault}\n    >\n      <Tooltip\n        title={\n          status === STATUS_NOT_CONNECTED\n            ? t('statusNotConnectedAccount')\n            : `${selectedAccount?.metadata.name} ${text}`\n        }\n        data-testid=\"multichain-connected-site-menu__tooltip\"\n        position=\"bottom\"\n      >\n        <BadgeWrapper\n          positionObj={\n            isConnectedtoOtherAccountOrSnap\n              ? { bottom: -1, right: -2, zIndex: 1 }\n              : { bottom: -1, right: -4, zIndex: 1 }\n          }\n          badge={\n            <Box\n              backgroundColor={globalMenuColor}\n              className={classNames('multichain-connected-site-menu__badge', {\n                'not-connected': isConnectedtoOtherAccountOrSnap,\n              })}\n              borderRadius={BorderRadius.full}\n              borderColor={\n                isConnectedtoOtherAccountOrSnap\n                  ? BorderColor.successDefault\n                  : BackgroundColor.backgroundDefault\n              }\n              borderWidth={isConnectedtoOtherAccountOrSnap ? 2 : 3}\n            />\n          }\n        >\n          {connectedSubjectsMetadata?.iconUrl ? (\n            <AvatarFavicon\n              name={connectedSubjectsMetadata.name}\n              size={Size.SM}\n              src={connectedSubjectsMetadata.iconUrl}\n            />\n          ) : (\n            <Icon\n              name={IconName.Global}\n              size={IconSize.Sm}\n              color={IconColor.iconDefault}\n            />\n          )}\n        </BadgeWrapper>\n      </Tooltip>\n    </Box>\n  );\n};\n\nConnectedSiteMenu.propTypes = {\n  /**\n   * Additional classNames to be added to the ConnectedSiteMenu\n   */\n  className: PropTypes.string,\n  /**\n   * Background color based on the connection status\n   */\n  globalMenuColor: PropTypes.string.isRequired,\n  /**\n   * Connection status string\n   */\n  status: PropTypes.string.isRequired,\n  /**\n   * Connection status message\n   */\n  text: PropTypes.string,\n  /**\n   * onClick handler to be passed\n   */\n  onClick: PropTypes.func,\n  /**\n   *  Disable the connected site menu if the account is non-evm\n   */\n  disabled: PropTypes.bool,\n};\n","export { ConnectedSiteMenu } from './connected-site-menu';\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  BackgroundColor,\n  BorderColor,\n  Color,\n} from '../../../helpers/constants/design-system';\nimport { isAccountConnectedToCurrentTab } from '../../../selectors';\nimport {\n  STATUS_CONNECTED,\n  STATUS_CONNECTED_TO_ANOTHER_ACCOUNT,\n  STATUS_NOT_CONNECTED,\n} from '../../../helpers/constants/connected-sites';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { BadgeStatus } from '../badge-status';\n\nexport type ConnectedStatusProps = {\n  address: string;\n  isActive?: boolean;\n};\nexport type AddressConnectedSubjectMap = {\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [address: string]: any;\n};\n\nexport const ConnectedStatus: React.FC<ConnectedStatusProps> = ({\n  address = '',\n  isActive,\n}): JSX.Element => {\n  const t = useI18nContext();\n\n  const currentTabIsConnectedToSelectedAddress = useSelector((state) =>\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (isAccountConnectedToCurrentTab as any)(state, address),\n  );\n\n  let status = STATUS_NOT_CONNECTED;\n  if (isActive) {\n    status = STATUS_CONNECTED;\n  } else if (currentTabIsConnectedToSelectedAddress) {\n    status = STATUS_CONNECTED_TO_ANOTHER_ACCOUNT;\n  }\n\n  let badgeBorderColor = BackgroundColor.backgroundDefault; // TODO: Replace it once border-color has this value.\n  let badgeBackgroundColor = Color.borderMuted; // //TODO: Replace it once Background color has this value.\n  let tooltipText = t('statusNotConnected');\n  if (status === STATUS_CONNECTED) {\n    badgeBorderColor = BackgroundColor.backgroundDefault;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore: type 'string' can't be used to index type '{}'\n    badgeBackgroundColor = BackgroundColor.successDefault;\n    tooltipText = t('active');\n  } else if (status === STATUS_CONNECTED_TO_ANOTHER_ACCOUNT) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore: type 'string' can't be used to index type '{}'\n    badgeBorderColor = BorderColor.successDefault;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore: type 'string' can't be used to index type '{}'\n    badgeBackgroundColor = BackgroundColor.backgroundDefault;\n    tooltipText = t('tooltipSatusConnectedUpperCase');\n  }\n\n  const connectedAndNotActive =\n    currentTabIsConnectedToSelectedAddress && !isActive;\n\n  return (\n    <BadgeStatus\n      address={address}\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore: type 'string' can't be used to index type '{}'\n      badgeBackgroundColor={badgeBackgroundColor}\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore: type 'string' can't be used to index type '{}'\n      badgeBorderColor={badgeBorderColor}\n      text={tooltipText}\n      isConnectedAndNotActive={connectedAndNotActive}\n    />\n  );\n};\n","export { ConnectedStatus } from './connected-status';\n","import React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { InternalAccount } from '@metamask/keyring-api';\nimport {\n  Box,\n  ButtonPrimary,\n  ButtonSecondary,\n  FormTextFieldSize,\n  PolymorphicComponentPropWithRef,\n  PolymorphicRef,\n} from '../../component-library';\nimport { FormTextField } from '../../component-library/form-text-field/form-text-field';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { getAccountNameErrorMessage } from '../../../helpers/utils/accounts';\nimport { getMetaMaskAccountsOrdered } from '../../../selectors';\nimport { getMostRecentOverviewPage } from '../../../ducks/history/history';\nimport {\n  MetaMetricsEventAccountType,\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport { Display } from '../../../helpers/constants/design-system';\n\ntype Props = {\n  /**\n   * Callback to get the next available account name.\n   */\n  getNextAvailableAccountName: (accounts: InternalAccount[]) => Promise<string>;\n\n  /**\n   * Callback to create the account.\n   */\n  onCreateAccount: (name: string) => Promise<void>;\n\n  /**\n   * Callback called once the account has been created\n   */\n  onActionComplete: (completed: boolean) => Promise<void>;\n};\n\ntype CreateAccountProps<C extends React.ElementType> =\n  PolymorphicComponentPropWithRef<C, Props>;\n\ntype CreateAccountComponent = <C extends React.ElementType = 'form'>(\n  props: CreateAccountProps<C>,\n) => React.ReactElement | null;\n\nexport const CreateAccount: CreateAccountComponent = React.memo(\n  React.forwardRef(\n    <C extends React.ElementType = 'form'>(\n      {\n        getNextAvailableAccountName,\n        onCreateAccount,\n        onActionComplete,\n      }: CreateAccountProps<C>,\n      ref?: PolymorphicRef<C>,\n    ) => {\n      const t = useI18nContext();\n\n      const history = useHistory();\n      const trackEvent = useContext(MetaMetricsContext);\n\n      const mostRecentOverviewPage = useSelector(getMostRecentOverviewPage);\n\n      const accounts: InternalAccount[] = useSelector(\n        getMetaMaskAccountsOrdered,\n      );\n\n      const [defaultAccountName, setDefaultAccountName] = useState('');\n      // We are not using `accounts` as a dependency here to avoid having the input\n      // updating when the new account will be created.\n      useEffect(() => {\n        getNextAvailableAccountName(accounts).then(setDefaultAccountName);\n      }, []);\n\n      const [newAccountName, setNewAccountName] = useState('');\n      const trimmedAccountName = newAccountName.trim();\n\n      const { isValidAccountName, errorMessage } = getAccountNameErrorMessage(\n        accounts,\n        { t },\n        trimmedAccountName || defaultAccountName,\n        defaultAccountName,\n      );\n\n      const onSubmit = useCallback(\n        async (event: KeyboardEvent<HTMLFormElement>) => {\n          event.preventDefault();\n\n          try {\n            await onCreateAccount(trimmedAccountName || defaultAccountName);\n            trackEvent({\n              category: MetaMetricsEventCategory.Accounts,\n              event: MetaMetricsEventName.AccountAdded,\n              properties: {\n                account_type: MetaMetricsEventAccountType.Default,\n                location: 'Home',\n              },\n            });\n            history.push(mostRecentOverviewPage);\n          } catch (error) {\n            trackEvent({\n              category: MetaMetricsEventCategory.Accounts,\n              event: MetaMetricsEventName.AccountAddFailed,\n              properties: {\n                account_type: MetaMetricsEventAccountType.Default,\n                error: (error as Error).message,\n              },\n            });\n          }\n        },\n        [trimmedAccountName, defaultAccountName, mostRecentOverviewPage],\n      );\n\n      return (\n        <Box as=\"form\" onSubmit={onSubmit}>\n          <FormTextField\n            ref={ref}\n            size={FormTextFieldSize.Lg}\n            gap={2}\n            autoFocus\n            id=\"account-name\"\n            label={t('accountName')}\n            placeholder={defaultAccountName}\n            onChange={(e: ChangeEvent<HTMLInputElement>) =>\n              setNewAccountName(e.target.value)\n            }\n            helpText={errorMessage}\n            error={!isValidAccountName}\n            onKeyPress={(e: KeyboardEvent<HTMLFormElement>) => {\n              if (e.key === 'Enter') {\n                onSubmit(e);\n              }\n            }}\n          />\n          <Box display={Display.Flex} marginTop={1} gap={2}>\n            <ButtonSecondary\n              data-testid=\"cancel-add-account-with-name\"\n              type={\n                'button' /* needs to be 'button' to prevent submitting form on cancel */\n              }\n              onClick={async () => await onActionComplete(false)}\n              block\n            >\n              {t('cancel')}\n            </ButtonSecondary>\n            <ButtonPrimary\n              data-testid=\"submit-add-account-with-name\"\n              type=\"submit\"\n              disabled={!isValidAccountName}\n              block\n            >\n              {t('addAccount')}\n            </ButtonPrimary>\n          </Box>\n        </Box>\n      );\n    },\n  ),\n);\n","export { CreateAccount } from './create-account';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { KeyringTypes } from '@metamask/keyring-controller';\nimport {\n  addNewAccount,\n  setAccountLabel,\n  getNextAvailableAccountName as getNextAvailableAccountNameFromController,\n} from '../../../store/actions';\nimport { CreateAccount } from '..';\n\nexport const CreateEthAccount = ({ onActionComplete }) => {\n  const dispatch = useDispatch();\n\n  const onCreateAccount = async (name) => {\n    const newAccountAddress = await dispatch(addNewAccount());\n    if (name) {\n      dispatch(setAccountLabel(newAccountAddress, name));\n    }\n    onActionComplete(true);\n  };\n\n  const getNextAvailableAccountName = async () => {\n    return await getNextAvailableAccountNameFromController(KeyringTypes.hd);\n  };\n\n  return (\n    <CreateAccount\n      onActionComplete={onActionComplete}\n      onCreateAccount={onCreateAccount}\n      getNextAvailableAccountName={getNextAvailableAccountName}\n    ></CreateAccount>\n  );\n};\n\nCreateEthAccount.propTypes = {\n  /**\n   * Executes when the Create button is clicked\n   */\n  onActionComplete: PropTypes.func.isRequired,\n};\n","export { CreateEthAccount } from './create-eth-account';\n","import React, { useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { InternalAccount } from '@metamask/keyring-api';\nimport { KeyringTypes } from '@metamask/keyring-controller';\nimport { CreateAccount } from '..';\nimport { Box, ModalHeader } from '../../component-library';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { getMostRecentOverviewPage } from '../../../ducks/history/history';\nimport { getNextAvailableAccountName } from '../../../store/actions';\n\nexport type CreateNamedSnapAccountProps = {\n  /**\n   * Callback called once the account has been created\n   */\n  onActionComplete: (\n    completed: { success: boolean; name?: string },\n    reject?: boolean,\n  ) => Promise<void>;\n\n  /**\n   * Suggested account name from the snap\n   */\n  snapSuggestedAccountName?: string;\n};\n\nexport const CreateNamedSnapAccount: React.FC<CreateNamedSnapAccountProps> = ({\n  onActionComplete,\n  snapSuggestedAccountName,\n}) => {\n  const t = useI18nContext();\n  const history = useHistory();\n\n  const mostRecentOverviewPage = useSelector(getMostRecentOverviewPage);\n\n  const rejectAction = useCallback(async (completed: boolean) => {\n    await onActionComplete({ success: completed });\n  }, []);\n\n  const onCreateAccount = useCallback(async (name?: string) => {\n    await onActionComplete({ success: true, name });\n  }, []);\n\n  const getNextAccountName = useCallback(\n    async (accounts: InternalAccount[]): Promise<string> => {\n      // If a snap-suggested account name exists, use it as a base\n      if (snapSuggestedAccountName) {\n        let suffix = 1;\n        let candidateName = snapSuggestedAccountName;\n\n        // Check if the name is already taken\n        const isNameTaken = (name: string) =>\n          accounts.some((account) => account.metadata.name === name);\n\n        // Keep incrementing suffix until we find an available name\n        while (isNameTaken(candidateName)) {\n          suffix += 1;\n          candidateName = `${snapSuggestedAccountName} ${suffix}`;\n        }\n\n        return candidateName;\n      }\n\n      // If no snap-suggested name, use the next available account name\n      return getNextAvailableAccountName(KeyringTypes.snap);\n    },\n    [],\n  );\n\n  const onClose = useCallback(async () => {\n    await onActionComplete({ success: false });\n    history.push(mostRecentOverviewPage);\n  }, []);\n\n  return (\n    <Box padding={4} className=\"name-snap-account-page\">\n      <ModalHeader padding={4} onClose={onClose}>\n        {t('addAccountToMetaMask')}\n      </ModalHeader>\n      <CreateAccount\n        // onActionComplete is called when a user rejects the action\n        // onCreateAccount will call onActionComplete if a user confirms the action\n        onActionComplete={rejectAction}\n        onCreateAccount={onCreateAccount}\n        getNextAvailableAccountName={getNextAccountName}\n      />\n    </Box>\n  );\n};\n","export { CreateNamedSnapAccount } from './create-named-snap-account';\n","import React, { useContext } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport {\n  getCurrentChainId,\n  getDetectedTokensInCurrentNetwork,\n} from '../../../selectors';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n  MetaMetricsTokenEventSource,\n} from '../../../../shared/constants/metametrics';\nimport { BannerAlert } from '../../component-library';\n\nexport const DetectedTokensBanner = ({\n  className,\n  actionButtonOnClick,\n  ...props\n}) => {\n  const t = useI18nContext();\n  const trackEvent = useContext(MetaMetricsContext);\n\n  const detectedTokens = useSelector(getDetectedTokensInCurrentNetwork);\n  const detectedTokensDetails = detectedTokens.map(\n    ({ address, symbol }) => `${symbol} - ${address}`,\n  );\n\n  const chainId = useSelector(getCurrentChainId);\n\n  const handleOnClick = () => {\n    actionButtonOnClick();\n    trackEvent({\n      event: MetaMetricsEventName.TokenImportClicked,\n      category: MetaMetricsEventCategory.Wallet,\n      properties: {\n        source_connection_method: MetaMetricsTokenEventSource.Detected,\n        tokens: detectedTokensDetails,\n        chain_id: chainId,\n      },\n    });\n  };\n  return (\n    <BannerAlert\n      className={classNames('multichain-detected-token-banner', className)}\n      actionButtonLabel={t('importTokensCamelCase')}\n      actionButtonOnClick={handleOnClick}\n      data-testid=\"detected-token-banner\"\n      {...props}\n    >\n      {detectedTokens.length === 1\n        ? t('numberOfNewTokensDetectedSingular')\n        : t('numberOfNewTokensDetectedPlural', [detectedTokens.length])}\n    </BannerAlert>\n  );\n};\n\nDetectedTokensBanner.propTypes = {\n  /**\n   * Handler to be passed to the DetectedTokenBanner component\n   */\n  actionButtonOnClick: PropTypes.func.isRequired,\n  /**\n   * An additional className to the DetectedTokenBanner component\n   */\n  className: PropTypes.string,\n};\n","export { DetectedTokensBanner } from './detected-token-banner';\n","import React from 'react';\nimport {\n  Button,\n  IconName,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n} from '../../component-library';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\n\n// Maps to localizations for title and text\nexport enum DisconnectType {\n  Account = 'disconnectAllAccountsText',\n  Snap = 'disconnectAllSnapsText',\n}\n\nexport const DisconnectAllModal = ({\n  type,\n  hostname,\n  onClick,\n  onClose,\n}: {\n  type: DisconnectType;\n  hostname: string;\n  onClick: () => void;\n  onClose: () => void;\n}) => {\n  const t = useI18nContext();\n\n  return (\n    <Modal isOpen onClose={onClose} data-testid=\"disconnect-all-modal\">\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader onClose={onClose}>\n          {t('disconnectAllTitle', [t(type)])}\n        </ModalHeader>\n        <ModalBody>\n          <Text>{t('disconnectAllText', [t(type), hostname])}</Text>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            onClick={onClick}\n            startIconName={IconName.Logout}\n            block\n            danger\n            data-testid=\"disconnect-all\"\n          >\n            {t('disconnect')}\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import React, { ReactNode, useEffect, useRef, useState } from 'react';\nimport classnames from 'classnames';\nimport {\n  Box,\n  ButtonIcon,\n  ButtonIconSize,\n  Icon,\n  IconName,\n  IconSize,\n  Input,\n  Label,\n  Popover,\n  PopoverPosition,\n  Text,\n} from '../../component-library';\nimport {\n  AlignItems,\n  BackgroundColor,\n  BorderColor,\n  BorderRadius,\n  Display,\n  IconColor,\n  JustifyContent,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport Tooltip from '../../ui/tooltip';\n\nexport enum DropdownEditorStyle {\n  /** When open, the dropdown overlays elements that follow  */\n  PopoverStyle,\n  /** When open, the dropdown pushes down elements that follow */\n  BoxStyle,\n}\n\n// A dropdown for selecting, adding, and deleting items.\nexport const DropdownEditor = <Item,>({\n  title,\n  placeholder,\n  items,\n  selectedItemIndex,\n  addButtonText,\n  error,\n  style,\n  onItemSelected,\n  onItemDeleted,\n  onItemAdd,\n  onDropdownOpened,\n  itemKey,\n  itemIsDeletable = () => true,\n  renderItem,\n  renderTooltip,\n  buttonDataTestId,\n}: {\n  title: string;\n  placeholder: string;\n  items?: Item[];\n  selectedItemIndex?: number;\n  addButtonText: string;\n  error?: boolean;\n  style: DropdownEditorStyle;\n  onItemSelected: (index: number) => void;\n  onItemDeleted: (deletedIndex: number, newSelectedIndex?: number) => void;\n  onItemAdd: () => void;\n  onDropdownOpened?: () => void;\n  itemKey: (item: Item) => string;\n  itemIsDeletable?: (item: Item, items: Item[]) => boolean;\n  renderItem: (item: Item, isList: boolean) => string | ReactNode;\n  renderTooltip: (item: Item, isList: boolean) => string | undefined;\n  buttonDataTestId: string;\n}) => {\n  const t = useI18nContext();\n  const dropdown = useRef(null);\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  const renderDropdownList = () => (\n    <Box>\n      {items?.map((item, index) => {\n        const row = (\n          <Box\n            alignItems={AlignItems.center}\n            paddingLeft={4}\n            paddingRight={4}\n            display={Display.Flex}\n            justifyContent={JustifyContent.spaceBetween}\n            key={itemKey(item)}\n            onClick={() => {\n              onItemSelected(index);\n              setIsDropdownOpen(false);\n            }}\n            className={classnames('dropdown-editor__item', {\n              'dropdown-editor__item--selected': index === selectedItemIndex,\n            })}\n          >\n            {index === selectedItemIndex && (\n              <Box\n                className=\"dropdown-editor__item-selected-pill\"\n                borderRadius={BorderRadius.pill}\n                backgroundColor={BackgroundColor.primaryDefault}\n              />\n            )}\n            {renderItem(item, true)}\n            {itemIsDeletable(item, items) && (\n              <ButtonIcon\n                marginLeft={1}\n                ariaLabel={t('delete')}\n                size={ButtonIconSize.Sm}\n                iconName={IconName.Trash}\n                data-testid={`delete-item-${index}`}\n                color={IconColor.errorDefault}\n                onClick={(e: React.MouseEvent) => {\n                  e.stopPropagation();\n\n                  // Determine which item should be selected after deletion\n                  let newSelectedIndex;\n                  if (selectedItemIndex === undefined || items.length <= 1) {\n                    newSelectedIndex = undefined;\n                  } else if (index === selectedItemIndex) {\n                    newSelectedIndex = 0;\n                  } else if (index > selectedItemIndex) {\n                    newSelectedIndex = selectedItemIndex;\n                  } else if (index < selectedItemIndex) {\n                    newSelectedIndex = selectedItemIndex - 1;\n                  }\n\n                  onItemDeleted(index, newSelectedIndex);\n                }}\n              />\n            )}\n          </Box>\n        );\n\n        const tooltip = renderTooltip(item, true);\n        return tooltip ? (\n          <Tooltip title={tooltip} position=\"bottom\">\n            {row}\n          </Tooltip>\n        ) : (\n          row\n        );\n      })}\n\n      <Box\n        onClick={onItemAdd}\n        padding={4}\n        display={Display.Flex}\n        alignItems={AlignItems.center}\n        className=\"dropdown-editor__item\"\n      >\n        <Icon\n          color={IconColor.primaryDefault}\n          name={IconName.Add}\n          size={IconSize.Sm}\n          marginRight={2}\n        />\n        <Text\n          as=\"button\"\n          backgroundColor={BackgroundColor.transparent}\n          color={TextColor.primaryDefault}\n          variant={TextVariant.bodySmMedium}\n        >\n          {addButtonText}\n        </Text>\n      </Box>\n    </Box>\n  );\n\n  let borderColor = BorderColor.borderDefault;\n  if (error) {\n    borderColor = BorderColor.errorDefault;\n  } else if (isDropdownOpen) {\n    borderColor = BorderColor.primaryDefault;\n  }\n\n  // Call back in a useEffect so it triggers after the opening has rendered\n  useEffect(() => {\n    if (isDropdownOpen) {\n      onDropdownOpened?.();\n    }\n  }, [isDropdownOpen]);\n\n  const selectedItem = items?.[selectedItemIndex ?? -1];\n  const tooltip = selectedItem ? renderTooltip(selectedItem, false) : undefined;\n\n  const box = (\n    <Box\n      onClick={() => {\n        setIsDropdownOpen(!isDropdownOpen);\n      }}\n      className=\"dropdown-editor__item-dropdown\"\n      display={Display.Flex}\n      alignItems={AlignItems.center}\n      justifyContent={JustifyContent.spaceBetween}\n      borderRadius={BorderRadius.LG}\n      borderColor={borderColor}\n      borderWidth={1}\n      paddingLeft={4}\n      paddingRight={4}\n      ref={dropdown}\n    >\n      {selectedItem ? (\n        renderItem(selectedItem, false)\n      ) : (\n        <Input\n          className=\"dropdown-editor__item-placeholder\"\n          placeholder={placeholder}\n          readOnly\n          tabIndex={-1}\n          paddingTop={3}\n          paddingBottom={3}\n        />\n      )}\n      <ButtonIcon\n        marginLeft=\"auto\"\n        iconName={isDropdownOpen ? IconName.ArrowUp : IconName.ArrowDown}\n        ariaLabel={title}\n        size={ButtonIconSize.Md}\n        data-testid={buttonDataTestId}\n      />\n    </Box>\n  );\n\n  return (\n    <Box paddingTop={4}>\n      <Label variant={TextVariant.bodyMdMedium}>{title}</Label>\n      {tooltip ? (\n        <Tooltip title={tooltip} position=\"bottom\">\n          {box}\n        </Tooltip>\n      ) : (\n        box\n      )}\n      {style === DropdownEditorStyle.PopoverStyle ? (\n        <Popover\n          paddingTop={items && items.length > 0 ? 2 : 0}\n          paddingBottom={items && items.length > 0 ? 2 : 0}\n          paddingLeft={0}\n          matchWidth={true}\n          paddingRight={0}\n          className=\"dropdown-editor__item-popover\"\n          referenceElement={dropdown.current}\n          position={PopoverPosition.Bottom}\n          isOpen={isDropdownOpen}\n          onClickOutside={() => setIsDropdownOpen(false)}\n        >\n          {renderDropdownList()}\n        </Popover>\n      ) : (\n        <Box\n          marginTop={2}\n          display={isDropdownOpen ? Display.Block : Display.None}\n          borderColor={BorderColor.borderMuted}\n          borderRadius={BorderRadius.LG}\n        >\n          {renderDropdownList()}\n        </Box>\n      )}\n    </Box>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  EthAccountType,\n  InternalAccount,\n  KeyringAccountType,\n} from '@metamask/keyring-api';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport {\n  getInternalAccounts,\n  getUpdatedAndSortedAccounts,\n} from '../../../selectors';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  Checkbox,\n  Box,\n} from '../../component-library';\nimport { AccountListItem } from '..';\nimport { MergedInternalAccount } from '../../../selectors/selectors.types';\nimport { mergeAccounts } from '../account-list-menu/account-list-menu';\n\ntype EditAccountsModalProps = {\n  onClose: () => void;\n  allowedAccountTypes?: KeyringAccountType[];\n};\n\nconst defaultAllowedAccountTypes: KeyringAccountType[] = [\n  EthAccountType.Eoa,\n  EthAccountType.Erc4337,\n];\n\nexport const EditAccountsModal = ({\n  onClose,\n  allowedAccountTypes = defaultAllowedAccountTypes,\n}: EditAccountsModalProps) => {\n  const t = useI18nContext();\n  const accounts = useSelector(getUpdatedAndSortedAccounts);\n  const internalAccounts = useSelector(getInternalAccounts);\n\n  const mergedAccounts: MergedInternalAccount[] = useMemo(() => {\n    return mergeAccounts(accounts, internalAccounts).filter(\n      (account: InternalAccount) => allowedAccountTypes.includes(account.type),\n    );\n  }, [accounts, internalAccounts, allowedAccountTypes]); // Add allowedAccountTypes to dependency array\n\n  return (\n    <Modal\n      isOpen\n      onClose={onClose} // Simplified inline function\n      data-testid=\"edit-accounts-modal\"\n      className=\"edit-accounts-modal\"\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader onClose={onClose}>{t('editAccounts')}</ModalHeader>\n        <Box padding={4}>\n          <Checkbox\n            label={t('selectAll')}\n            isChecked\n            gap={4}\n            // Uncomment and implement these if needed:\n            // onClick={() => (allAreSelected() ? deselectAll() : selectAll())}\n            // isIndeterminate={isIndeterminate}\n          />\n        </Box>\n        {mergedAccounts.map((account) => (\n          <AccountListItem\n            account={account}\n            key={account.address}\n            isPinned={Boolean(account.pinned)}\n            startAccessory={<Checkbox isChecked />}\n            onClick={() => console.log(null)}\n            selected={false}\n          />\n        ))}\n      </ModalContent>\n    </Modal>\n  );\n};\n","export { EditAccountsModal } from './edit-accounts-modal';\n","import PropTypes from 'prop-types';\nimport React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { TextVariant } from '../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { getNetworkConfigurationsByChainId } from '../../../selectors';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  Checkbox,\n  Text,\n  Box,\n} from '../../component-library';\nimport { NetworkListItem } from '..';\nimport {\n  CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP,\n  TEST_CHAINS,\n} from '../../../../shared/constants/network';\n\nexport const EditNetworksModal = ({ onClose }) => {\n  const t = useI18nContext();\n\n  const networkConfigurations = useSelector(getNetworkConfigurationsByChainId);\n  const [nonTestNetworks, testNetworks] = useMemo(\n    () =>\n      Object.entries(networkConfigurations).reduce(\n        ([nonTestNetworksList, testNetworksList], [chainId, network]) => {\n          const isTest = TEST_CHAINS.includes(chainId);\n          (isTest ? testNetworksList : nonTestNetworksList).push(network);\n          return [nonTestNetworksList, testNetworksList];\n        },\n        [[], []],\n      ),\n    [networkConfigurations],\n  );\n\n  return (\n    <Modal\n      isOpen\n      onClose={() => {\n        onClose();\n      }}\n      className=\"edit-networks-modal\"\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader\n          onClose={() => {\n            onClose();\n          }}\n        >\n          {t('editNetworksTitle')}\n        </ModalHeader>\n        <Box padding={4}>\n          <Checkbox\n            label={t('selectAll')}\n            isChecked\n            gap={4}\n            // onClick={() => (allAreSelected() ? deselectAll() : selectAll())}\n            // isIndeterminate={isIndeterminate}\n          />\n        </Box>\n        {nonTestNetworks.map((network) => (\n          <NetworkListItem\n            name={network.name}\n            iconSrc={CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[network.chainId]}\n            key={network.chainId}\n            onClick={() => {\n              console.log(network.chainId);\n            }}\n            startAccessory={<Checkbox isChecked />}\n          />\n        ))}\n        <Box padding={4}>\n          <Text variant={TextVariant.bodyMdMedium}>{t('testnets')}</Text>\n        </Box>\n        {testNetworks.map((network) => (\n          <NetworkListItem\n            name={network.name}\n            iconSrc={CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[network.chainId]}\n            key={network.chainId}\n            onClick={() => {\n              console.log(network.chainId);\n            }}\n            startAccessory={<Checkbox isChecked />}\n            showEndAccessory={false}\n          />\n        ))}\n      </ModalContent>\n    </Modal>\n  );\n};\n\nEditNetworksModal.propTypes = {\n  /**\n   * Executes when the modal closes\n   */\n  onClose: PropTypes.func.isRequired,\n};\n","export { EditNetworksModal } from './edit-networks-modal';\n","import React from 'react';\nimport { Box, Text, Icon, IconName } from '../../component-library';\nimport {\n  Display,\n  FlexDirection,\n  TextVariant,\n  TextColor,\n  AlignItems,\n} from '../../../helpers/constants/design-system';\n\ntype FundingMethodItemProps = {\n  icon: IconName;\n  title: string;\n  description: string;\n  onClick: () => void;\n};\n\nconst FundingMethodItem: React.FC<FundingMethodItemProps> = ({\n  icon,\n  title,\n  description,\n  onClick,\n}) => (\n  <Box\n    display={[Display.Flex]}\n    gap={2}\n    alignItems={AlignItems.center}\n    onClick={onClick}\n    className=\"funding-method-item\"\n    padding={4}\n  >\n    <Icon name={icon} />\n    <Box display={[Display.Flex]} flexDirection={FlexDirection.Column}>\n      <Text variant={TextVariant.bodyMdMedium}>{title}</Text>\n      <Text variant={TextVariant.bodySm} color={TextColor.textAlternative}>\n        {description}\n      </Text>\n    </Box>\n  </Box>\n);\n\nexport default FundingMethodItem;\n","import React, { useCallback, useContext } from 'react';\nimport { useSelector } from 'react-redux';\nimport { CaipChainId } from '@metamask/utils';\nimport {\n  Modal,\n  ModalContent,\n  ModalOverlay,\n  ModalHeader,\n  Text,\n  IconName,\n} from '../../component-library';\nimport {\n  TextVariant,\n  TextAlign,\n} from '../../../helpers/constants/design-system';\nimport {\n  getMultichainCurrentNetwork,\n  getMultichainDefaultToken,\n} from '../../../selectors/multichain';\nimport useRamps, {\n  RampsMetaMaskEntry,\n} from '../../../hooks/ramps/useRamps/useRamps';\nimport { getPortfolioUrl } from '../../../helpers/utils/portfolio';\nimport {\n  getMetaMetricsId,\n  getParticipateInMetaMetrics,\n  getDataCollectionForMarketing,\n  getSelectedAccount,\n} from '../../../selectors';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { ChainId } from '../../../../shared/constants/network';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport FundingMethodItem from './funding-method-item';\n\ntype FundingMethodModalProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  onClickReceive: () => void;\n};\n\nexport const FundingMethodModal: React.FC<FundingMethodModalProps> = ({\n  isOpen,\n  onClose,\n  title,\n  onClickReceive,\n}) => {\n  const t = useI18nContext();\n  const trackEvent = useContext(MetaMetricsContext);\n  const { openBuyCryptoInPdapp } = useRamps();\n  const { address: accountAddress } = useSelector(getSelectedAccount);\n  const { chainId } = useSelector(getMultichainCurrentNetwork);\n  const { symbol } = useSelector(getMultichainDefaultToken);\n  const metaMetricsId = useSelector(getMetaMetricsId);\n  const isMetaMetricsEnabled = useSelector(getParticipateInMetaMetrics);\n  const isMarketingEnabled = useSelector(getDataCollectionForMarketing);\n\n  const handleTransferCryptoClick = useCallback(() => {\n    trackEvent({\n      event: MetaMetricsEventName.NavSendButtonClicked,\n      category: MetaMetricsEventCategory.Navigation,\n      properties: {\n        location: RampsMetaMaskEntry?.TokensBanner,\n        text: 'Transfer crypto',\n        chain_id: chainId,\n        token_symbol: symbol,\n      },\n    });\n\n    const url = getPortfolioUrl(\n      'transfer',\n      'ext_funding_method_modal',\n      metaMetricsId,\n      isMetaMetricsEnabled,\n      isMarketingEnabled,\n      accountAddress,\n      'transfer',\n    );\n    global.platform.openTab({ url });\n  }, [\n    metaMetricsId,\n    isMetaMetricsEnabled,\n    isMarketingEnabled,\n    chainId,\n    symbol,\n    accountAddress,\n  ]);\n\n  const handleBuyCryptoClick = useCallback(() => {\n    trackEvent({\n      event: MetaMetricsEventName.NavBuyButtonClicked,\n      category: MetaMetricsEventCategory.Navigation,\n      properties: {\n        location: RampsMetaMaskEntry?.TokensBanner,\n        text: 'Buy crypto',\n        chain_id: chainId,\n        token_symbol: symbol,\n      },\n    });\n    openBuyCryptoInPdapp(chainId as ChainId | CaipChainId);\n  }, [chainId, symbol]);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} data-testid=\"funding-method-modal\">\n      <ModalOverlay />\n      <ModalContent modalDialogProps={{ padding: 0 }}>\n        <ModalHeader paddingBottom={2} onClose={onClose}>\n          <Text variant={TextVariant.headingSm} textAlign={TextAlign.Center}>\n            {title}\n          </Text>\n        </ModalHeader>\n        <FundingMethodItem\n          icon={IconName.Card}\n          title={t('buyCrypto')}\n          description={t('buyFirstCrypto')}\n          onClick={handleBuyCryptoClick}\n        />\n        <FundingMethodItem\n          icon={IconName.Received}\n          title={t('receiveCrypto')}\n          description={t('depositCrypto')}\n          onClick={onClickReceive}\n        />\n        <FundingMethodItem\n          icon={IconName.Link}\n          title={t('transferCrypto')}\n          description={t('linkCentralizedExchanges')}\n          onClick={handleTransferCryptoClick}\n        />\n      </ModalContent>\n    </Modal>\n  );\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  useUnreadNotificationsCounter,\n  useReadNotificationsCounter,\n} from '../../../hooks/metamask-notifications/useCounter';\nimport { NotificationsTagCounter } from '../notifications-tag-counter';\nimport { NewFeatureTag } from '../../../pages/notifications/NewFeatureTag';\nimport {\n  SETTINGS_ROUTE,\n  DEFAULT_ROUTE,\n  NOTIFICATIONS_ROUTE,\n  SNAPS_ROUTE,\n  PERMISSIONS,\n} from '../../../helpers/constants/routes';\nimport {\n  lockMetamask,\n  showConfirmTurnOnMetamaskNotifications,\n} from '../../../store/actions';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport {\n  selectIsMetamaskNotificationsEnabled,\n  selectIsMetamaskNotificationsFeatureSeen,\n} from '../../../selectors/metamask-notifications/metamask-notifications';\nimport { selectIsProfileSyncingEnabled } from '../../../selectors/metamask-notifications/profile-syncing';\nimport {\n  Box,\n  IconName,\n  Popover,\n  PopoverPosition,\n} from '../../component-library';\n\nimport { MenuItem } from '../../ui/menu';\nimport { getEnvironmentType } from '../../../../app/scripts/lib/util';\nimport { ENVIRONMENT_TYPE_FULLSCREEN } from '../../../../shared/constants/app';\nimport { SUPPORT_LINK } from '../../../../shared/lib/ui-utils';\n\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  MetaMetricsContextProp,\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport {\n  getSelectedInternalAccount,\n  getUnapprovedTransactions,\n  getAnySnapUpdateAvailable,\n  getNotifySnaps,\n  getUseExternalServices,\n} from '../../../selectors';\nimport {\n  AlignItems,\n  BlockSize,\n  BorderColor,\n  BorderStyle,\n  Display,\n  FlexDirection,\n  JustifyContent,\n} from '../../../helpers/constants/design-system';\nimport { AccountDetailsMenuItem, ViewExplorerMenuItem } from '..';\n\nconst METRICS_LOCATION = 'Global Menu';\n\nexport const GlobalMenu = ({ closeMenu, anchorElement, isOpen }) => {\n  const t = useI18nContext();\n  const dispatch = useDispatch();\n  const trackEvent = useContext(MetaMetricsContext);\n  const basicFunctionality = useSelector(getUseExternalServices);\n\n  const history = useHistory();\n\n  const { notificationsUnreadCount } = useUnreadNotificationsCounter();\n  const { notificationsReadCount } = useReadNotificationsCounter();\n\n  const account = useSelector(getSelectedInternalAccount);\n\n  const unapprovedTransactions = useSelector(getUnapprovedTransactions);\n\n  const isMetamaskNotificationFeatureSeen = useSelector(\n    selectIsMetamaskNotificationsFeatureSeen,\n  );\n\n  const isMetamaskNotificationsEnabled = useSelector(\n    selectIsMetamaskNotificationsEnabled,\n  );\n  const isProfileSyncingEnabled = useSelector(selectIsProfileSyncingEnabled);\n\n  const hasUnapprovedTransactions =\n    Object.keys(unapprovedTransactions).length > 0;\n\n\n  let hasNotifySnaps = false;\n  const snapsUpdatesAvailable = useSelector(getAnySnapUpdateAvailable);\n  hasNotifySnaps = useSelector(getNotifySnaps).length > 0;\n\n  let supportText = t('support');\n  let supportLink = SUPPORT_LINK;\n\n  // Accessibility improvement for popover\n  const lastItemRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const lastItem = lastItemRef.current;\n    const handleKeyDown = (event) => {\n      if (event.key === 'Tab' && !event.shiftKey) {\n        event.preventDefault();\n        closeMenu();\n      }\n    };\n\n    if (lastItem) {\n      lastItem.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => {\n      if (lastItem) {\n        lastItem.removeEventListener('keydown', handleKeyDown);\n      }\n    };\n  }, [closeMenu]);\n\n  const handleNotificationsClick = () => {\n    const shouldShowEnableModal =\n      !hasNotifySnaps && !isMetamaskNotificationsEnabled;\n\n    if (shouldShowEnableModal) {\n      trackEvent({\n        category: MetaMetricsEventCategory.NotificationsActivationFlow,\n        event: MetaMetricsEventName.NotificationsActivated,\n        properties: {\n          action_type: 'started',\n          is_profile_syncing_enabled: isProfileSyncingEnabled,\n        },\n      });\n      dispatch(showConfirmTurnOnMetamaskNotifications());\n\n      closeMenu();\n      return;\n    }\n\n    // Otherwise we can navigate to the notifications page\n    trackEvent({\n      category: MetaMetricsEventCategory.NotificationInteraction,\n      event: MetaMetricsEventName.NotificationsMenuOpened,\n      properties: {\n        unread_count: notificationsUnreadCount,\n        read_count: notificationsReadCount,\n      },\n    });\n    history.push(NOTIFICATIONS_ROUTE);\n    closeMenu();\n  };\n\n  return (\n    <Popover\n      data-testid=\"global-menu\"\n      referenceElement={anchorElement}\n      isOpen={isOpen}\n      padding={0}\n      onClickOutside={closeMenu}\n      onPressEscKey={closeMenu}\n      style={{\n        overflow: 'hidden',\n        minWidth: 225,\n      }}\n      borderStyle={BorderStyle.none}\n      position={PopoverPosition.BottomEnd}\n    >\n      {basicFunctionality && (\n        <>\n          <MenuItem\n            iconName={IconName.Notification}\n            onClick={() => handleNotificationsClick()}\n          >\n            <Box\n              display={Display.Flex}\n              flexDirection={FlexDirection.Row}\n              alignItems={AlignItems.center}\n              justifyContent={JustifyContent.spaceBetween}\n            >\n              {t('notifications')}\n              {notificationsUnreadCount === 0 &&\n                !isMetamaskNotificationFeatureSeen && <NewFeatureTag />}\n              <NotificationsTagCounter />\n            </Box>\n          </MenuItem>\n          <Box\n            borderColor={BorderColor.borderMuted}\n            width={BlockSize.Full}\n            style={{ height: '1px', borderBottomWidth: 0 }}\n          ></Box>\n        </>\n      )}\n      {account && (\n        <>\n          <AccountDetailsMenuItem\n            metricsLocation={METRICS_LOCATION}\n            closeMenu={closeMenu}\n            address={account.address}\n          />\n          <ViewExplorerMenuItem\n            metricsLocation={METRICS_LOCATION}\n            closeMenu={closeMenu}\n            account={account}\n          />\n        </>\n      )}\n      <Box\n        borderColor={BorderColor.borderMuted}\n        width={BlockSize.Full}\n        style={{ height: '1px', borderBottomWidth: 0 }}\n      ></Box>\n      <MenuItem\n        iconName={IconName.SecurityTick}\n        onClick={() => {\n          history.push(PERMISSIONS);\n          trackEvent({\n            event: MetaMetricsEventName.NavPermissionsOpened,\n            category: MetaMetricsEventCategory.Navigation,\n            properties: {\n              location: METRICS_LOCATION,\n            },\n          });\n          closeMenu();\n        }}\n        data-testid=\"global-menu-connected-sites\"\n        disabled={hasUnapprovedTransactions}\n      >\n        {t('allPermissions')}\n      </MenuItem>\n\n      {\n      }\n      {getEnvironmentType() === ENVIRONMENT_TYPE_FULLSCREEN ? null : (\n        <MenuItem\n          iconName={IconName.Expand}\n          onClick={() => {\n            global.platform.openExtensionInBrowser();\n            trackEvent({\n              event: MetaMetricsEventName.AppWindowExpanded,\n              category: MetaMetricsEventCategory.Navigation,\n              properties: {\n                location: METRICS_LOCATION,\n              },\n            });\n            closeMenu();\n          }}\n          data-testid=\"global-menu-expand\"\n        >\n          {t('expandView')}\n        </MenuItem>\n      )}\n      <MenuItem\n        iconName={IconName.Snaps}\n        onClick={() => {\n          history.push(SNAPS_ROUTE);\n          closeMenu();\n        }}\n        showInfoDot={snapsUpdatesAvailable}\n      >\n        {t('snaps')}\n      </MenuItem>\n      <MenuItem\n        iconName={IconName.MessageQuestion}\n        onClick={() => {\n          global.platform.openTab({ url: supportLink });\n          trackEvent(\n            {\n              category: MetaMetricsEventCategory.Home,\n              event: MetaMetricsEventName.SupportLinkClicked,\n              properties: {\n                url: supportLink,\n                location: METRICS_LOCATION,\n              },\n            },\n            {\n              contextPropsIntoEventProperties: [\n                MetaMetricsContextProp.PageTitle,\n              ],\n            },\n          );\n          closeMenu();\n        }}\n        data-testid=\"global-menu-support\"\n      >\n        {supportText}\n      </MenuItem>\n      <MenuItem\n        iconName={IconName.Setting}\n        disabled={hasUnapprovedTransactions}\n        onClick={() => {\n          history.push(SETTINGS_ROUTE);\n          trackEvent({\n            category: MetaMetricsEventCategory.Navigation,\n            event: MetaMetricsEventName.NavSettingsOpened,\n            properties: {\n              location: METRICS_LOCATION,\n            },\n          });\n          closeMenu();\n        }}\n        data-testid=\"global-menu-settings\"\n      >\n        {t('settings')}\n      </MenuItem>\n      <MenuItem\n        ref={lastItemRef} // ref for last item in GlobalMenu\n        iconName={IconName.Lock}\n        onClick={() => {\n          dispatch(lockMetamask());\n          history.push(DEFAULT_ROUTE);\n          trackEvent({\n            category: MetaMetricsEventCategory.Navigation,\n            event: MetaMetricsEventName.AppLocked,\n            properties: {\n              location: METRICS_LOCATION,\n            },\n          });\n          closeMenu();\n        }}\n        data-testid=\"global-menu-lock\"\n      >\n        {t('lockMetaMask')}\n      </MenuItem>\n    </Popover>\n  );\n};\n\nGlobalMenu.propTypes = {\n  /**\n   * The element that the menu should display next to\n   */\n  anchorElement: PropTypes.instanceOf(window.Element),\n  /**\n   * Function that closes this menu\n   */\n  closeMenu: PropTypes.func.isRequired,\n  /**\n   * Whether or not the menu is open\n   */\n  isOpen: PropTypes.bool.isRequired,\n};\n","export { GlobalMenu } from './global-menu';\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  Box,\n  ButtonPrimary,\n  ButtonSecondary,\n  ButtonSecondarySize,\n} from '../../component-library';\nimport { Display } from '../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport * as actions from '../../../store/actions';\n\nexport default function BottomButtons({\n  importAccountFunc,\n  isPrimaryDisabled,\n  onActionComplete,\n}) {\n  const t = useI18nContext();\n  const dispatch = useDispatch();\n\n  return (\n    <Box display={Display.Flex} gap={4}>\n      <ButtonSecondary\n        onClick={() => {\n          dispatch(actions.hideWarning());\n          onActionComplete();\n        }}\n        size={ButtonSecondarySize.Lg}\n        block\n      >\n        {t('cancel')}\n      </ButtonSecondary>\n      <ButtonPrimary\n        onClick={async () => {\n          try {\n            const result = await importAccountFunc();\n            if (result) {\n              onActionComplete(true);\n            }\n          } catch (e) {\n            // Take no action\n          }\n        }}\n        disabled={isPrimaryDisabled}\n        size={ButtonSecondarySize.Lg}\n        data-testid=\"import-account-confirm-button\"\n        block\n      >\n        {t('import')}\n      </ButtonPrimary>\n    </Box>\n  );\n}\n\nBottomButtons.propTypes = {\n  /**\n   * Function to import the account\n   */\n  importAccountFunc: PropTypes.func.isRequired,\n  /**\n   * Represents if the action button is disabled\n   */\n  isPrimaryDisabled: PropTypes.bool.isRequired,\n  /**\n   * Executes when the primary action is complete\n   */\n  onActionComplete: PropTypes.func.isRequired,\n};\n","import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport {\n  MetaMetricsEventAccountImportType,\n  MetaMetricsEventAccountType,\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { Box, ButtonLink, Label, Text } from '../../component-library';\nimport Dropdown from '../../ui/dropdown';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  BlockSize,\n  FontWeight,\n  JustifyContent,\n  Size,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport ZENDESK_URLS from '../../../helpers/constants/zendesk-url';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport * as actions from '../../../store/actions';\n\n// Subviews\nimport JsonImportView from './json';\nimport PrivateKeyImportView from './private-key';\n\nexport const ImportAccount = ({ onActionComplete }) => {\n  const t = useI18nContext();\n  const dispatch = useDispatch();\n  const trackEvent = useContext(MetaMetricsContext);\n\n  const menuItems = [t('privateKey'), t('jsonFile')];\n\n  const [type, setType] = useState(menuItems[0]);\n\n  async function importAccount(strategy, importArgs) {\n    const loadingMessage = getLoadingMessage(strategy);\n\n    try {\n      const { selectedAddress } = await dispatch(\n        actions.importNewAccount(strategy, importArgs, loadingMessage),\n      );\n      if (selectedAddress) {\n        trackImportEvent(strategy, true);\n        dispatch(actions.hideWarning());\n        onActionComplete(true);\n      } else {\n        dispatch(actions.displayWarning(t('importAccountError')));\n        return false;\n      }\n    } catch (error) {\n      trackImportEvent(strategy, error.message);\n      translateWarning(error.message);\n      return false;\n    }\n\n    return true;\n  }\n\n  function trackImportEvent(strategy, wasSuccessful) {\n    const accountImportType =\n      strategy === 'Private Key'\n        ? MetaMetricsEventAccountImportType.PrivateKey\n        : MetaMetricsEventAccountImportType.Json;\n\n    const event = wasSuccessful\n      ? MetaMetricsEventName.AccountAdded\n      : MetaMetricsEventName.AccountAddFailed;\n\n    trackEvent({\n      category: MetaMetricsEventCategory.Accounts,\n      event,\n      properties: {\n        account_type: MetaMetricsEventAccountType.Imported,\n        account_import_type: accountImportType,\n      },\n    });\n  }\n\n  function getLoadingMessage(strategy) {\n    if (strategy === 'json') {\n      return (\n        <>\n          <Text width={BlockSize.ThreeFourths} fontWeight={FontWeight.Bold}>\n            {t('importAccountJsonLoading1')}\n          </Text>\n          <Text width={BlockSize.ThreeFourths} fontWeight={FontWeight.Bold}>\n            {t('importAccountJsonLoading2')}\n          </Text>\n        </>\n      );\n    }\n\n    return '';\n  }\n\n  /**\n   * @param message - an Error/Warning message caught in importAccount()\n   * This function receives a message that is a string like:\n   * `t('importAccountErrorNotHexadecimal')`\n   * `t('importAccountErrorIsSRP')`\n   * `t('importAccountErrorNotAValidPrivateKey')`\n   * and feeds it through useI18nContext\n   */\n  function translateWarning(message) {\n    if (message && !message.startsWith('t(')) {\n      // This is just a normal error message\n      dispatch(actions.displayWarning(message));\n    } else {\n      // This is an error message in a form like\n      // `t('importAccountErrorNotHexadecimal')`\n      // so slice off the first 3 chars and last 2 chars, and feed to i18n\n      dispatch(actions.displayWarning(t(message.slice(3, -2))));\n    }\n  }\n\n  return (\n    <>\n      <Text variant={TextVariant.bodySm} marginTop={2}>\n        {t('importAccountMsg')}{' '}\n        <ButtonLink\n          size={Size.inherit}\n          href={ZENDESK_URLS.IMPORTED_ACCOUNTS}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {t('here')}\n        </ButtonLink>\n      </Text>\n      <Box paddingTop={4} paddingBottom={8}>\n        <Label\n          width={BlockSize.Full}\n          marginBottom={4}\n          justifyContent={JustifyContent.spaceBetween}\n        >\n          {t('selectType')}\n          <Dropdown\n            options={menuItems.map((text) => ({ value: text }))}\n            selectedOption={type}\n            onChange={(value) => {\n              dispatch(actions.hideWarning());\n              setType(value);\n            }}\n          />\n        </Label>\n        {type === menuItems[0] ? (\n          <PrivateKeyImportView\n            importAccountFunc={importAccount}\n            onActionComplete={onActionComplete}\n          />\n        ) : (\n          <JsonImportView\n            importAccountFunc={importAccount}\n            onActionComplete={onActionComplete}\n          />\n        )}\n      </Box>\n    </>\n  );\n};\n\nImportAccount.propTypes = {\n  /**\n   * Executes when the key is imported\n   */\n  onActionComplete: PropTypes.func.isRequired,\n};\n","export { ImportAccount } from './import-account';\n","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport FileInput from 'react-simple-file-input';\nimport {\n  ButtonLink,\n  TextFieldSize,\n  TextFieldType,\n  Text,\n} from '../../component-library';\nimport {\n  Size,\n  TextAlign,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { FormTextField } from '../../component-library/form-text-field/deprecated';\nimport ZENDESK_URLS from '../../../helpers/constants/zendesk-url';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { displayWarning } from '../../../store/actions';\nimport BottomButtons from './bottom-buttons';\n\nexport default function JsonImportSubview({\n  importAccountFunc,\n  onActionComplete,\n}) {\n  const t = useI18nContext();\n  const warning = useSelector((state) => state.appState.warning);\n  const [password, setPassword] = useState('');\n  const [fileContents, setFileContents] = useState('');\n\n  const isPrimaryDisabled = fileContents === '';\n\n  function handleKeyPress(event) {\n    if (!isPrimaryDisabled && event.key === 'Enter') {\n      event.preventDefault();\n      _importAccountFunc();\n    }\n  }\n\n  function _importAccountFunc() {\n    if (isPrimaryDisabled) {\n      displayWarning(t('needImportFile'));\n    } else {\n      importAccountFunc('json', [fileContents, password]);\n    }\n  }\n\n  return (\n    <>\n      <Text variant={TextVariant.bodyMd} textAlign={TextAlign.Center}>\n        {t('usedByClients')}\n        <ButtonLink\n          size={Size.inherit}\n          href={ZENDESK_URLS.IMPORTED_ACCOUNTS}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {t('fileImportFail')}\n        </ButtonLink>\n      </Text>\n\n      <FileInput\n        id=\"file-input\"\n        data-testid=\"file-input\"\n        readAs=\"text\"\n        onLoad={(event) => setFileContents(event.target.result)}\n        style={{\n          padding: '20px 0px 12px 15%',\n          fontSize: '16px',\n          display: 'flex',\n          justifyContent: 'center',\n          width: '100%',\n        }}\n      />\n\n      <FormTextField\n        id=\"json-password-box\"\n        size={TextFieldSize.Lg}\n        autoFocus\n        type={TextFieldType.Password}\n        helpText={warning}\n        error\n        placeholder={t('enterOptionalPassword')}\n        value={password}\n        onChange={(event) => {\n          setPassword(event.target.value);\n        }}\n        inputProps={{\n          onKeyPress: handleKeyPress,\n        }}\n        marginBottom={4}\n      />\n\n      <BottomButtons\n        importAccountFunc={_importAccountFunc}\n        isPrimaryDisabled={isPrimaryDisabled}\n        onActionComplete={onActionComplete}\n      />\n    </>\n  );\n}\n\nJsonImportSubview.propTypes = {\n  /**\n   * Function to import the account\n   */\n  importAccountFunc: PropTypes.func.isRequired,\n  /**\n   * Executes when the key is imported\n   */\n  onActionComplete: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  FormTextField,\n  TextFieldSize,\n  TextFieldType,\n} from '../../component-library';\n\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport ShowHideToggle from '../../ui/show-hide-toggle';\nimport BottomButtons from './bottom-buttons';\n\nexport default function PrivateKeyImportView({\n  importAccountFunc,\n  onActionComplete,\n}) {\n  const t = useI18nContext();\n  const [privateKey, setPrivateKey] = useState('');\n  const [showPrivateKey, setShowPrivateKey] = useState(false);\n\n  const warning = useSelector((state) => state.appState.warning);\n\n  function handleKeyPress(event) {\n    if (privateKey !== '' && event.key === 'Enter') {\n      event.preventDefault();\n      _importAccountFunc();\n    }\n  }\n\n  function _importAccountFunc() {\n    importAccountFunc('privateKey', [privateKey]);\n  }\n\n  return (\n    <>\n      <FormTextField\n        id=\"private-key-box\"\n        size={TextFieldSize.Lg}\n        autoFocus\n        helpText={warning}\n        error\n        label={t('pastePrivateKey')}\n        value={privateKey}\n        onChange={(event) => setPrivateKey(event.target.value)}\n        inputProps={{\n          onKeyPress: handleKeyPress,\n        }}\n        marginBottom={4}\n        type={showPrivateKey ? TextFieldType.Text : TextFieldType.Password}\n        textFieldProps={{\n          endAccessory: (\n            <ShowHideToggle\n              shown={showPrivateKey}\n              id=\"show-hide-private-key\"\n              title={t('privateKeyShow')}\n              ariaLabelShown={t('privateKeyShown')}\n              ariaLabelHidden={t('privateKeyHidden')}\n              onChange={() => setShowPrivateKey(!showPrivateKey)}\n            />\n          ),\n        }}\n      />\n\n      <BottomButtons\n        importAccountFunc={_importAccountFunc}\n        isPrimaryDisabled={privateKey === ''}\n        onActionComplete={onActionComplete}\n      />\n    </>\n  );\n}\n\nPrivateKeyImportView.propTypes = {\n  /**\n   * Function to import the account\n   */\n  importAccountFunc: PropTypes.func.isRequired,\n  /**\n   * Executes when the key is imported\n   */\n  onActionComplete: PropTypes.func.isRequired,\n};\n","import { isValidHexAddress } from '@metamask/controller-utils';\nimport PropTypes from 'prop-types';\nimport React, { useContext, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  MetaMetricsEventName,\n  MetaMetricsTokenEventSource,\n} from '../../../../shared/constants/metametrics';\nimport { AssetType } from '../../../../shared/constants/transaction';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport { getNftsDropdownState } from '../../../ducks/metamask/metamask';\nimport {\n  AlignItems,\n  Display,\n  FlexDirection,\n  IconColor,\n  JustifyContent,\n  Severity,\n  Size,\n} from '../../../helpers/constants/design-system';\nimport { DEFAULT_ROUTE } from '../../../helpers/constants/routes';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport {\n  getCurrentChainId,\n  getIsMainnet,\n  getSelectedInternalAccount,\n  getOpenSeaEnabled,\n} from '../../../selectors';\nimport {\n  addNftVerifyOwnership,\n  getTokenStandardAndDetails,\n  ignoreTokens,\n  setNewNftAddedMessage,\n  updateNftDropDownState,\n} from '../../../store/actions';\nimport NftsDetectionNoticeImportNFTs from '../../app/assets/nfts/nfts-detection-notice-import-nfts/nfts-detection-notice-import-nfts';\nimport {\n  BannerAlert,\n  Box,\n  ButtonPrimary,\n  ButtonSecondary,\n  ButtonSecondarySize,\n  Icon,\n  IconName,\n  IconSize,\n  Label,\n  Modal,\n  ModalOverlay,\n} from '../../component-library';\nimport { FormTextField } from '../../component-library/form-text-field/deprecated';\nimport { ModalContent } from '../../component-library/modal-content/deprecated';\nimport { ModalHeader } from '../../component-library/modal-header/deprecated';\nimport Tooltip from '../../ui/tooltip';\nimport { useNftsCollections } from '../../../hooks/useNftsCollections';\nimport { checkTokenIdExists } from '../../../helpers/utils/util';\n\nexport const ImportNftsModal = ({ onClose }) => {\n  const t = useI18nContext();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const isDisplayNFTMediaToggleEnabled = useSelector(getOpenSeaEnabled);\n  const isMainnet = useSelector(getIsMainnet);\n  const nftsDropdownState = useSelector(getNftsDropdownState);\n  const selectedAccount = useSelector(getSelectedInternalAccount);\n  const chainId = useSelector(getCurrentChainId);\n  const {\n    tokenAddress: initialTokenAddress,\n    tokenId: initialTokenId,\n    ignoreErc20Token,\n  } = useSelector((state) => state.appState.importNftsModal);\n  const existingNfts = useNftsCollections();\n  const [nftAddress, setNftAddress] = useState(initialTokenAddress ?? '');\n  const [tokenId, setTokenId] = useState(initialTokenId ?? '');\n  const [disabled, setDisabled] = useState(true);\n  const [nftAddFailed, setNftAddFailed] = useState(false);\n  const trackEvent = useContext(MetaMetricsContext);\n  const [nftAddressValidationError, setNftAddressValidationError] =\n    useState(null);\n  const [duplicateTokenIdError, setDuplicateTokenIdError] = useState(null);\n\n  const handleAddNft = async () => {\n    try {\n      await dispatch(addNftVerifyOwnership(nftAddress, tokenId));\n      const newNftDropdownState = {\n        ...nftsDropdownState,\n        [selectedAccount.address]: {\n          ...nftsDropdownState?.[selectedAccount.address],\n          [chainId]: {\n            ...nftsDropdownState?.[selectedAccount.address]?.[chainId],\n            [nftAddress]: true,\n          },\n        },\n      };\n\n      dispatch(updateNftDropDownState(newNftDropdownState));\n    } catch (error) {\n      const { message } = error;\n      dispatch(setNewNftAddedMessage(message));\n      setNftAddFailed(true);\n      return;\n    }\n    if (ignoreErc20Token && nftAddress) {\n      await dispatch(\n        ignoreTokens({\n          tokensToIgnore: nftAddress,\n          dontShowLoadingIndicator: true,\n        }),\n      );\n    }\n    dispatch(setNewNftAddedMessage('success'));\n\n    const tokenDetails = await getTokenStandardAndDetails(\n      nftAddress,\n      null,\n      tokenId.toString(),\n    ).catch(() => ({}));\n\n    trackEvent({\n      event: MetaMetricsEventName.TokenAdded,\n      category: 'Wallet',\n      sensitiveProperties: {\n        token_contract_address: nftAddress,\n        token_symbol: tokenDetails?.symbol,\n        tokenId: tokenId.toString(),\n        asset_type: AssetType.NFT,\n        token_standard: tokenDetails?.standard,\n        source_connection_method: MetaMetricsTokenEventSource.Custom,\n      },\n    });\n\n    history.push(DEFAULT_ROUTE);\n    onClose();\n  };\n\n  const validateAndSetAddress = (val) => {\n    setNftAddressValidationError(null);\n    if (val && !isValidHexAddress(val)) {\n      setNftAddressValidationError(t('invalidAddress'));\n    }\n    setDisabled(!isValidHexAddress(val) || !tokenId);\n    setNftAddress(val);\n  };\n\n  const validateAndSetTokenId = (val) => {\n    setDuplicateTokenIdError(null);\n    // Check if tokenId is already imported\n    const tokenIdExists = checkTokenIdExists(\n      nftAddress,\n      val,\n      existingNfts.collections,\n    );\n    if (tokenIdExists) {\n      setDuplicateTokenIdError(t('nftAlreadyAdded'));\n    }\n    setDisabled(\n      !isValidHexAddress(nftAddress) ||\n        !val ||\n        isNaN(Number(val)) ||\n        tokenIdExists,\n    );\n\n    setTokenId(val);\n  };\n\n  return (\n    <Modal\n      isOpen\n      onClose={() => {\n        onClose();\n      }}\n      className=\"import-nfts-modal\"\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader\n          onClose={() => {\n            onClose();\n          }}\n        >\n          {t('importNFT')}\n        </ModalHeader>\n        <Box>\n          {isMainnet && !isDisplayNFTMediaToggleEnabled ? (\n            <Box marginTop={6}>\n              <NftsDetectionNoticeImportNFTs onActionButtonClick={onClose} />\n            </Box>\n          ) : null}\n          {nftAddFailed && (\n            <Box marginTop={6}>\n              <BannerAlert\n                severity={Severity.Danger}\n                onClose={() => setNftAddFailed(false)}\n                closeButtonProps={{ 'data-testid': 'add-nft-error-close' }}\n              >\n                {t('nftAddFailedMessage')}\n              </BannerAlert>\n            </Box>\n          )}\n          <Box\n            display={Display.Flex}\n            flexDirection={FlexDirection.Column}\n            gap={6}\n            marginTop={6}\n            marginBottom={6}\n          >\n            <Box>\n              <Box\n                display={Display.Flex}\n                justifyContent={JustifyContent.spaceBetween}\n                alignItems={AlignItems.flexEnd}\n              >\n                <Box display={Display.Flex} alignItems={AlignItems.center}>\n                  <Label htmlFor=\"address\">{t('address')}</Label>\n                  <Tooltip\n                    title={t('importNFTAddressToolTip')}\n                    position=\"bottom\"\n                  >\n                    <Icon\n                      name={IconName.Info}\n                      size={IconSize.Sm}\n                      marginLeft={1}\n                      color={IconColor.iconAlternative}\n                    />\n                  </Tooltip>\n                </Box>\n              </Box>\n              <FormTextField\n                autoFocus\n                dataTestId=\"address\"\n                id=\"address\"\n                placeholder=\"0x...\"\n                value={nftAddress}\n                onChange={(e) => {\n                  validateAndSetAddress(e.target.value);\n                  setNftAddFailed(false);\n                }}\n                helpText={nftAddressValidationError}\n                error={Boolean(nftAddressValidationError)}\n              />\n            </Box>\n            <Box>\n              <Box\n                display={Display.Flex}\n                justifyContent={JustifyContent.spaceBetween}\n                alignItems={AlignItems.flexEnd}\n              >\n                <Box display={Display.Flex} alignItems={AlignItems.center}>\n                  <Label htmlFor=\"token-id\">{t('tokenId')}</Label>\n                  <Tooltip\n                    title={t('importNFTTokenIdToolTip')}\n                    position=\"bottom\"\n                  >\n                    <Icon\n                      name={IconName.Info}\n                      size={IconSize.Sm}\n                      marginLeft={1}\n                      color={IconColor.iconAlternative}\n                    />\n                  </Tooltip>\n                </Box>\n              </Box>\n              <FormTextField\n                dataTestId=\"token-id\"\n                id=\"token-id\"\n                placeholder={t('nftTokenIdPlaceholder')}\n                value={tokenId}\n                onChange={(e) => {\n                  validateAndSetTokenId(e.target.value);\n                  setNftAddFailed(false);\n                }}\n                helpText={duplicateTokenIdError}\n                error={duplicateTokenIdError}\n              />\n            </Box>\n          </Box>\n        </Box>\n        <Box\n          display={Display.Flex}\n          flexDirection={FlexDirection.Row}\n          justifyContent={JustifyContent.spaceBetween}\n          gap={4}\n          paddingTop={4}\n          paddingBottom={4}\n        >\n          <ButtonSecondary\n            size={ButtonSecondarySize.Lg}\n            onClick={() => onClose()}\n            block\n            className=\"import-nfts-modal__cancel-button\"\n          >\n            {t('cancel')}\n          </ButtonSecondary>\n          <ButtonPrimary\n            size={Size.LG}\n            onClick={() => handleAddNft()}\n            disabled={disabled}\n            block\n            data-testid=\"import-nfts-modal-import-button\"\n          >\n            {t('import')}\n          </ButtonPrimary>\n        </Box>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nImportNftsModal.propTypes = {\n  /**\n   * Executes when the modal closes\n   */\n  onClose: PropTypes.func.isRequired,\n};\n","export { ImportNftsModal } from './import-nfts-modal';\n","import React, { useContext } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classnames from 'classnames';\nimport {\n  ButtonLink,\n  IconName,\n  Box,\n  ButtonLinkSize,\n} from '../../component-library';\nimport { AlignItems, Display } from '../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { detectTokens, showImportTokensModal } from '../../../store/actions';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport {\n  getIsTokenDetectionSupported,\n  getIsTokenDetectionInactiveOnMainnet,\n} from '../../../selectors';\nimport type { BoxProps } from '../../component-library/box';\nimport type { ImportTokenLinkProps } from './import-token-link.types';\n\nexport const ImportTokenLink: React.FC<ImportTokenLinkProps> = ({\n  className = '',\n  ...props\n}): JSX.Element => {\n  const trackEvent = useContext(MetaMetricsContext);\n  const t = useI18nContext();\n  const dispatch = useDispatch();\n\n  const isTokenDetectionSupported = useSelector(getIsTokenDetectionSupported);\n  const isTokenDetectionInactiveOnMainnet = useSelector(\n    getIsTokenDetectionInactiveOnMainnet,\n  );\n\n  const isTokenDetectionAvailable =\n    isTokenDetectionSupported ||\n    isTokenDetectionInactiveOnMainnet ||\n    Boolean(process.env.IN_TEST);\n  return (\n    <Box\n      className={classnames('multichain-import-token-link', className)}\n      {...(props as BoxProps<'div'>)}\n    >\n      <Box display={Display.Flex} alignItems={AlignItems.center}>\n        <ButtonLink\n          size={ButtonLinkSize.Md}\n          data-testid=\"import-token-button\"\n          startIconName={IconName.Add}\n          onClick={() => {\n            dispatch(showImportTokensModal());\n            trackEvent({\n              category: MetaMetricsEventCategory.Navigation,\n              event: MetaMetricsEventName.TokenImportButtonClicked,\n              properties: {\n                location: 'HOME',\n              },\n            });\n          }}\n        >\n          {isTokenDetectionAvailable\n            ? t('importTokensCamelCase')\n            : t('importTokensCamelCase').charAt(0).toUpperCase() +\n              t('importTokensCamelCase').slice(1)}\n        </ButtonLink>\n      </Box>\n      <Box display={Display.Flex} alignItems={AlignItems.center} paddingTop={2}>\n        <ButtonLink\n          size={ButtonLinkSize.Md}\n          startIconName={IconName.Refresh}\n          data-testid=\"refresh-list-button\"\n          onClick={() => dispatch(detectTokens())}\n        >\n          {t('refreshList')}\n        </ButtonLink>\n      </Box>\n    </Box>\n  );\n};\n","export { ImportTokenLink } from './import-token-link';\n","import React, { useContext } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  getCurrentNetwork,\n  getTestNetworkBackgroundColor,\n  getTokenList,\n} from '../../../selectors';\nimport {\n  Text,\n  Box,\n  AvatarToken,\n  BadgeWrapper,\n  AvatarNetwork,\n  AvatarNetworkSize,\n} from '../../component-library';\nimport {\n  TextVariant,\n  TextAlign,\n  TextColor,\n  FontWeight,\n  Display,\n  AlignItems,\n  FlexDirection,\n} from '../../../helpers/constants/design-system';\nimport { getPendingTokens } from '../../../ducks/metamask/metamask';\nimport TokenBalance from '../../ui/token-balance/token-balance';\nimport { I18nContext } from '../../../contexts/i18n';\n\nexport const ImportTokensModalConfirm = () => {\n  const t = useContext(I18nContext);\n  const currentNetwork = useSelector(getCurrentNetwork);\n  const testNetworkBackgroundColor = useSelector(getTestNetworkBackgroundColor);\n  const pendingTokens = useSelector(getPendingTokens);\n  const tokenList = useSelector(getTokenList);\n  return (\n    <Box paddingTop={6}>\n      <Text textAlign={TextAlign.Center}>\n        {Object.keys(pendingTokens).length === 1\n          ? t('likeToImportToken')\n          : t('likeToImportTokens')}\n      </Text>\n      <Box paddingTop={6}>\n        <Box\n          flexDirection={FlexDirection.Column}\n          className=\"import-tokens-modal__confirmation-list\"\n        >\n          {Object.entries(pendingTokens).map(([address, token]) => {\n            const { name, symbol, iconUrl } = token;\n            const tokenImage =\n              iconUrl || tokenList[address.toLowerCase()]?.iconUrl;\n            return (\n              <Box key={address} padding={4} display={Display.Flex}>\n                <Box\n                  display={Display.Flex}\n                  className=\"import-tokens-modal__confirm-token-list-item-wrapper\"\n                >\n                  <BadgeWrapper\n                    badge={\n                      <AvatarNetwork\n                        size={AvatarNetworkSize.Xs}\n                        name={currentNetwork?.nickname}\n                        src={currentNetwork?.rpcPrefs?.imageUrl}\n                        backgroundColor={testNetworkBackgroundColor}\n                      />\n                    }\n                    marginRight={4}\n                    marginTop={1}\n                  >\n                    <AvatarToken name={symbol} src={tokenImage} />\n                  </BadgeWrapper>\n                  <Box>\n                    <Text\n                      fontWeight={FontWeight.Medium}\n                      variant={TextVariant.bodyMd}\n                    >\n                      {name || symbol}\n                    </Text>\n                    <Text\n                      variant={TextVariant.bodySm}\n                      color={TextColor.textAlternative}\n                    >\n                      <TokenBalance token={token} />\n                    </Text>\n                  </Box>\n                </Box>\n                <Box alignItems={AlignItems.flexStart}>\n                  <TokenBalance\n                    textProps={{\n                      font: FontWeight.Medium,\n                      variant: TextVariant.bodyLgMedium,\n                    }}\n                    suffixProps={{\n                      font: FontWeight.Medium,\n                      variant: TextVariant.bodyLgMedium,\n                    }}\n                    token={token}\n                    showFiat\n                  />\n                </Box>\n              </Box>\n            );\n          })}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getTokenTrackerLink } from '@metamask/etherscan-link/dist/token-tracker-link';\nimport { Tab, Tabs } from '../../ui/tabs';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport {\n  getCurrentChainId,\n  getInternalAccounts,\n  getIsDynamicTokenListAvailable,\n  getIsMainnet,\n  getIsTokenDetectionInactiveOnMainnet,\n  getIsTokenDetectionSupported,\n  getIstokenDetectionInactiveOnNonMainnetSupportedNetwork,\n  getRpcPrefsForCurrentProvider,\n  getSelectedInternalAccount,\n  getSelectedNetworkClientId,\n  getTokenDetectionSupportNetworkByChainId,\n  getTokenList,\n  getCurrentNetwork,\n  getTestNetworkBackgroundColor,\n  getTokenExchangeRates,\n} from '../../../selectors';\nimport {\n  addImportedTokens,\n  clearPendingTokens,\n  getTokenStandardAndDetails,\n  setPendingTokens,\n  showImportNftsModal,\n  setNewTokensImported,\n  setNewTokensImportedError,\n  hideImportTokensModal,\n  setConfirmationExchangeRates,\n} from '../../../store/actions';\nimport {\n  BannerAlert,\n  Box,\n  ButtonLink,\n  ButtonPrimary,\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  Text,\n  ButtonSecondary,\n  IconName,\n} from '../../component-library';\nimport { FormTextField } from '../../component-library/form-text-field/deprecated';\nimport TokenSearch from '../../app/import-token/token-search';\nimport TokenList from '../../app/import-token/token-list';\n\nimport {\n  Display,\n  Severity,\n  Size,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\n\nimport {\n  SECURITY_ROUTE,\n  DEFAULT_ROUTE,\n} from '../../../helpers/constants/routes';\nimport ZENDESK_URLS from '../../../helpers/constants/zendesk-url';\nimport {\n  isValidHexAddress,\n  toChecksumHexAddress,\n} from '../../../../shared/modules/hexstring-utils';\nimport { addHexPrefix } from '../../../../app/scripts/lib/util';\nimport { STATIC_MAINNET_TOKEN_LIST } from '../../../../shared/constants/tokens';\nimport {\n  AssetType,\n  TokenStandard,\n} from '../../../../shared/constants/transaction';\nimport {\n  checkExistingAddresses,\n  getURLHostName,\n  fetchTokenExchangeRates,\n} from '../../../helpers/utils/util';\nimport { tokenInfoGetter } from '../../../helpers/utils/token-util';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  getNativeCurrency,\n  getPendingTokens,\n} from '../../../ducks/metamask/metamask';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n  MetaMetricsTokenEventSource,\n} from '../../../../shared/constants/metametrics';\nimport { ImportTokensModalConfirm } from './import-tokens-modal-confirm';\n\nexport const ImportTokensModal = ({ onClose }) => {\n  const t = useI18nContext();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const [mode, setMode] = useState('');\n\n  const [tokenSelectorError, setTokenSelectorError] = useState(null);\n  const [selectedTokens, setSelectedTokens] = useState({});\n  const [searchResults, setSearchResults] = useState([]);\n\n  // Determine if we should show the search tab\n  const isTokenDetectionSupported = useSelector(getIsTokenDetectionSupported);\n  const isTokenDetectionInactiveOnMainnet = useSelector(\n    getIsTokenDetectionInactiveOnMainnet,\n  );\n  const showSearchTab =\n    isTokenDetectionSupported ||\n    isTokenDetectionInactiveOnMainnet ||\n    Boolean(process.env.IN_TEST);\n\n  const tokenList = useSelector(getTokenList);\n  const useTokenDetection = useSelector(\n    ({ metamask }) => metamask.useTokenDetection,\n  );\n  const networkName = useSelector(getTokenDetectionSupportNetworkByChainId);\n  const nativeCurrency = useSelector(getNativeCurrency);\n\n  // Custom token stuff\n  const tokenDetectionInactiveOnNonMainnetSupportedNetwork = useSelector(\n    getIstokenDetectionInactiveOnNonMainnetSupportedNetwork,\n  );\n  const isDynamicTokenListAvailable = useSelector(\n    getIsDynamicTokenListAvailable,\n  );\n  const selectedAccount = useSelector(getSelectedInternalAccount);\n  const isMainnet = useSelector(getIsMainnet);\n  const accounts = useSelector(getInternalAccounts);\n  const tokens = useSelector((state) => state.metamask.tokens);\n  const rpcPrefs = useSelector(getRpcPrefsForCurrentProvider);\n  const contractExchangeRates = useSelector(getTokenExchangeRates);\n\n  const [customAddress, setCustomAddress] = useState('');\n  const [customAddressError, setCustomAddressError] = useState(null);\n  const [nftAddressError, setNftAddressError] = useState(null);\n  const [decimalAutoFilled, setDecimalAutoFilled] = useState(false);\n  const [mainnetTokenWarning, setMainnetTokenWarning] = useState(null);\n  const [customSymbol, setCustomSymbol] = useState('');\n  const [customName, setCustomName] = useState('');\n  const [customSymbolError, setCustomSymbolError] = useState(null);\n  const [customDecimals, setCustomDecimals] = useState(0);\n  const [customDecimalsError, setCustomDecimalsError] = useState(null);\n  const [tokenStandard, setTokenStandard] = useState(TokenStandard.none);\n  const currentNetwork = useSelector(getCurrentNetwork);\n  const testNetworkBackgroundColor = useSelector(getTestNetworkBackgroundColor);\n  const [showSymbolAndDecimals, setShowSymbolAndDecimals] = useState(false);\n\n  const chainId = useSelector(getCurrentChainId);\n  const blockExplorerTokenLink = getTokenTrackerLink(\n    customAddress,\n    chainId,\n    null,\n    null,\n    { blockExplorerUrl: rpcPrefs?.blockExplorerUrl ?? null },\n  );\n  const blockExplorerLabel = rpcPrefs?.blockExplorerUrl\n    ? getURLHostName(blockExplorerTokenLink)\n    : t('etherscan');\n\n  // Min and Max decimal values\n  const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\n  const MIN_DECIMAL_VALUE = 0;\n  const MAX_DECIMAL_VALUE = 36;\n\n  const infoGetter = useRef(tokenInfoGetter());\n\n  // CONFIRMATION MODE\n  const trackEvent = useContext(MetaMetricsContext);\n  const pendingTokens = useSelector(getPendingTokens);\n  const networkClientId = useSelector(getSelectedNetworkClientId);\n\n  const handleAddTokens = useCallback(async () => {\n    try {\n      const addedTokenValues = Object.values(pendingTokens);\n      await dispatch(addImportedTokens(addedTokenValues, networkClientId));\n\n      addedTokenValues.forEach((pendingToken) => {\n        trackEvent({\n          event: MetaMetricsEventName.TokenAdded,\n          category: MetaMetricsEventCategory.Wallet,\n          sensitiveProperties: {\n            token_symbol: pendingToken.symbol,\n            token_contract_address: pendingToken.address,\n            token_decimal_precision: pendingToken.decimals,\n            unlisted: pendingToken.unlisted,\n            source_connection_method: pendingToken.isCustom\n              ? MetaMetricsTokenEventSource.Custom\n              : MetaMetricsTokenEventSource.List,\n            token_standard: TokenStandard.ERC20,\n            asset_type: AssetType.token,\n          },\n        });\n      });\n      const tokenSymbols = [];\n      for (const key in pendingTokens) {\n        if (Object.prototype.hasOwnProperty.call(pendingTokens, key)) {\n          tokenSymbols.push(pendingTokens[key].symbol);\n        }\n      }\n\n      dispatch(setNewTokensImported(tokenSymbols.join(', ')));\n      dispatch(clearPendingTokens());\n      dispatch(hideImportTokensModal());\n      history.push(DEFAULT_ROUTE);\n    } catch (err) {\n      dispatch(setNewTokensImportedError('error'));\n      dispatch(clearPendingTokens());\n      history.push(DEFAULT_ROUTE);\n    }\n  }, [dispatch, history, pendingTokens, trackEvent]);\n\n  useEffect(() => {\n    const pendingTokenKeys = Object.keys(pendingTokens);\n\n    if (pendingTokenKeys.length === 0) {\n      return;\n    }\n\n    let initialSelectedTokens = {};\n    let initialCustomToken = {};\n\n    pendingTokenKeys.forEach((tokenAddress) => {\n      const token = pendingTokens[tokenAddress];\n      const { isCustom } = token;\n\n      if (isCustom) {\n        initialCustomToken = { ...token };\n      } else {\n        initialSelectedTokens = {\n          ...selectedTokens,\n          [tokenAddress]: { ...token },\n        };\n      }\n    });\n\n    setSelectedTokens(initialSelectedTokens);\n    setCustomAddress(initialCustomToken.address);\n    setCustomSymbol(initialCustomToken.symbol);\n    setCustomDecimals(initialCustomToken.decimals);\n  }, [pendingTokens]);\n\n  const handleCustomSymbolChange = (value) => {\n    const symbol = value.trim();\n    const symbolLength = symbol.length;\n    let symbolError = null;\n\n    if (symbolLength <= 0 || symbolLength >= 12) {\n      symbolError = t('symbolBetweenZeroTwelve');\n    }\n\n    setCustomSymbol(symbol);\n    setCustomSymbolError(symbolError);\n  };\n\n  const handleCustomDecimalsChange = (value) => {\n    let decimals;\n    let decimalsError = null;\n\n    if (value) {\n      decimals = Number(value.trim());\n      decimalsError =\n        value < MIN_DECIMAL_VALUE || value > MAX_DECIMAL_VALUE\n          ? t('decimalsMustZerotoTen')\n          : null;\n    } else {\n      decimals = '';\n      decimalsError = t('tokenDecimalFetchFailed', [\n        <ButtonLink\n          className=\"import-tokens-modal__button-link\"\n          key=\"import-token-verify-token-decimal\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          href={blockExplorerTokenLink}\n          endIconName={IconName.Export}\n        >\n          {blockExplorerLabel}\n        </ButtonLink>,\n      ]);\n    }\n\n    setCustomDecimals(decimals);\n    setCustomDecimalsError(decimalsError);\n  };\n\n  const attemptToAutoFillTokenParams = async (address) => {\n    const {\n      symbol = '',\n      decimals,\n      name,\n    } = await infoGetter.current(address, tokenList);\n\n    setDecimalAutoFilled(Boolean(decimals));\n    handleCustomSymbolChange(symbol || '');\n    handleCustomDecimalsChange(decimals);\n    // Set custom token name\n    setCustomName(name);\n  };\n\n  const handleToggleToken = (token) => {\n    const { address } = token;\n    const selectedTokensCopy = { ...selectedTokens };\n\n    if (address in selectedTokensCopy) {\n      delete selectedTokensCopy[address];\n    } else {\n      selectedTokensCopy[address] = token;\n    }\n\n    setSelectedTokens(selectedTokensCopy);\n    setTokenSelectorError(null);\n  };\n\n  const hasError = () => {\n    return (\n      tokenSelectorError ||\n      customAddressError ||\n      customSymbolError ||\n      customDecimalsError ||\n      nftAddressError\n    );\n  };\n\n  const hasSelected = () => {\n    return customAddress || Object.keys(selectedTokens).length > 0;\n  };\n\n  const handleNext = async () => {\n    if (hasError()) {\n      return;\n    }\n\n    if (!hasSelected()) {\n      setTokenSelectorError(t('mustSelectOne'));\n      return;\n    }\n\n    const tokenAddressList = Object.keys(tokenList);\n    const customToken = customAddress\n      ? {\n          address: customAddress,\n          symbol: customSymbol,\n          decimals: customDecimals,\n          standard: tokenStandard,\n          name: customName,\n        }\n      : null;\n\n    dispatch(\n      setPendingTokens({ customToken, selectedTokens, tokenAddressList }),\n    );\n\n    const tempTokensToAdd = {\n      ...selectedTokens,\n      ...(customToken?.address && {\n        [customToken.address]: {\n          ...customToken,\n        },\n      }),\n    };\n\n    const tmpTokens = Object.values(tempTokensToAdd);\n    const tmpTokensToDispatch = tmpTokens.filter(\n      (elm) =>\n        contractExchangeRates?.[toChecksumHexAddress(elm.address)] ===\n        undefined,\n    );\n\n    const tokenAddresses = tmpTokensToDispatch.map((obj) => obj.address);\n    if (tmpTokensToDispatch.length !== 0) {\n      const result = await fetchTokenExchangeRates(\n        nativeCurrency,\n        tokenAddresses,\n        chainId,\n      );\n      // dispatch action\n      dispatch(setConfirmationExchangeRates(result));\n    }\n    setMode('confirm');\n  };\n\n  const handleCustomAddressChange = async (value) => {\n    const address = value.trim();\n\n    setCustomAddress(address);\n    setCustomAddressError(null);\n    setNftAddressError(null);\n    setDecimalAutoFilled(false);\n    setMainnetTokenWarning(null);\n    setShowSymbolAndDecimals(false);\n\n    const addressIsValid = isValidHexAddress(address, {\n      allowNonPrefixed: false,\n    });\n    const standardAddress = addHexPrefix(address).toLowerCase();\n\n    const isMainnetToken = Object.keys(STATIC_MAINNET_TOKEN_LIST).some(\n      (key) => key.toLowerCase() === address.toLowerCase(),\n    );\n\n    let standard;\n    if (addressIsValid) {\n      try {\n        ({ standard } = await getTokenStandardAndDetails(\n          standardAddress,\n          selectedAccount.address,\n          null,\n        ));\n      } catch (error) {\n        // ignore\n      }\n    }\n\n    const addressIsEmpty = address.length === 0 || address === EMPTY_ADDRESS;\n    switch (true) {\n      case !addressIsValid && !addressIsEmpty:\n        setCustomAddressError(t('invalidAddress'));\n        setCustomSymbol('');\n        setCustomDecimals(0);\n        setCustomSymbolError(null);\n        setCustomDecimalsError(null);\n        setShowSymbolAndDecimals(false);\n        break;\n\n      case standard === TokenStandard.ERC1155 ||\n        standard === TokenStandard.ERC721:\n        setNftAddressError(\n          t('nftAddressError', [\n            <ButtonLink\n              className=\"import-tokens-modal__nft-address-error-link\"\n              onClick={() => {\n                dispatch(showImportNftsModal({ tokenAddress: address }));\n                onClose();\n              }}\n              color={TextColor.primaryDefault}\n              key=\"nftAddressError\"\n            >\n              {t('importNFTPage')}\n            </ButtonLink>,\n          ]),\n        );\n        setShowSymbolAndDecimals(false);\n        break;\n\n      case isMainnetToken && !isMainnet:\n        setMainnetTokenWarning(t('mainnetToken'));\n        setCustomSymbol('');\n        setCustomDecimals(0);\n        setCustomSymbolError(null);\n        setCustomDecimalsError(null);\n        setShowSymbolAndDecimals(false);\n        break;\n\n      case Boolean(\n        accounts.find(\n          (internalAccount) =>\n            internalAccount.address.toLowerCase() === standardAddress,\n        ),\n      ):\n        setCustomAddressError(t('personalAddressDetected'));\n        setShowSymbolAndDecimals(false);\n        break;\n\n      case checkExistingAddresses(address, tokens):\n        setCustomAddressError(t('tokenAlreadyAdded'));\n        setShowSymbolAndDecimals(false);\n        break;\n\n      default:\n        if (!addressIsEmpty) {\n          attemptToAutoFillTokenParams(address);\n          setShowSymbolAndDecimals(true);\n          if (standard) {\n            setTokenStandard(standard);\n          }\n        }\n    }\n  };\n\n  // Determines whether to show the Search/Import or Confirm action\n  const isConfirming = mode === 'confirm';\n\n  return (\n    <Modal\n      isOpen\n      isClosedOnOutsideClick={false}\n      onClose={() => {\n        dispatch(clearPendingTokens());\n        onClose();\n      }}\n      className=\"import-tokens-modal\"\n    >\n      <ModalOverlay />\n      <ModalContent\n        modalDialogProps={{\n          className: 'import-tokens-modal__modal-dialog-content',\n        }}\n      >\n        <ModalHeader\n          onBack={isConfirming ? () => setMode('') : null}\n          paddingBottom={4}\n          paddingRight={4}\n          paddingLeft={4}\n          onClose={() => {\n            dispatch(clearPendingTokens());\n            onClose();\n          }}\n        >\n          {t('importTokensCamelCase')}\n        </ModalHeader>\n        <Box className=\"import-tokens-modal__body\">\n          <Tabs t={t} tabsClassName=\"import-tokens-modal__tabs\">\n            {showSearchTab ? (\n              <Tab\n                activeClassName=\"import-tokens-modal__active-tab\"\n                buttonClassName=\"import-tokens-modal__button-tab\"\n                tabKey=\"search\"\n                name={t('search')}\n              >\n                {isConfirming ? (\n                  <ImportTokensModalConfirm />\n                ) : (\n                  <Box paddingTop={4}>\n                    {useTokenDetection ? null : (\n                      <Box paddingLeft={4} paddingRight={4}>\n                        <BannerAlert\n                          severity={Severity.Info}\n                          marginBottom={4}\n                          paddingLeft={4}\n                          paddingRight={4}\n                        >\n                          <Text variant={TextVariant.bodyMd} fontSize=\"16\">\n                            {t('enhancedTokenDetectionAlertMessage', [\n                              networkName,\n                              <ButtonLink\n                                key=\"token-detection-announcement\"\n                                className=\"import-tokens-modal__autodetect\"\n                                onClick={() => {\n                                  onClose();\n                                  history.push(\n                                    `${SECURITY_ROUTE}#auto-detect-tokens`,\n                                  );\n                                }}\n                              >\n                                {t('enableFromSettings')}\n                              </ButtonLink>,\n                            ])}\n                          </Text>\n                        </BannerAlert>\n                      </Box>\n                    )}\n                    <Box paddingLeft={4} paddingRight={4} paddingBottom={4}>\n                      <TokenSearch\n                        searchClassName=\"import-tokens-modal__button-search\"\n                        onSearch={({ results = [] }) =>\n                          setSearchResults(results)\n                        }\n                        error={tokenSelectorError}\n                        tokenList={tokenList}\n                      />\n                    </Box>\n\n                    <TokenList\n                      currentNetwork={currentNetwork}\n                      testNetworkBackgroundColor={testNetworkBackgroundColor}\n                      results={searchResults}\n                      selectedTokens={selectedTokens}\n                      onToggleToken={(token) => handleToggleToken(token)}\n                    />\n                  </Box>\n                )}\n              </Tab>\n            ) : null}\n            <Tab\n              activeClassName=\"import-tokens-modal__active-tab\"\n              buttonClassName=\"import-tokens-modal__button-tab\"\n              tabKey=\"customToken\"\n              name={t('customToken')}\n            >\n              {isConfirming ? (\n                <ImportTokensModalConfirm />\n              ) : (\n                <Box paddingTop={4}>\n                  <Box className=\"import-tokens-modal__custom-token-form__container\">\n                    {tokenDetectionInactiveOnNonMainnetSupportedNetwork ? (\n                      <Box paddingLeft={4} paddingRight={4}>\n                        <BannerAlert severity={Severity.Warning}>\n                          <Text variant={TextVariant.bodyMd}>\n                            {t(\n                              'customTokenWarningInTokenDetectionNetworkWithTDOFF',\n                              [\n                                <ButtonLink\n                                  key=\"import-token-security-risk\"\n                                  rel=\"noopener noreferrer\"\n                                  target=\"_blank\"\n                                  href={ZENDESK_URLS.TOKEN_SAFETY_PRACTICES}\n                                >\n                                  {t('tokenScamSecurityRisk')}\n                                </ButtonLink>,\n                                <ButtonLink\n                                  type=\"link\"\n                                  key=\"import-token-token-detection-announcement\"\n                                  onClick={() => {\n                                    onClose();\n                                    history.push(\n                                      `${SECURITY_ROUTE}#auto-detect-tokens`,\n                                    );\n                                  }}\n                                >\n                                  {t('inYourSettings')}\n                                </ButtonLink>,\n                              ],\n                            )}\n                          </Text>\n                        </BannerAlert>\n                      </Box>\n                    ) : (\n                      <Box paddingLeft={4} paddingRight={4}>\n                        <BannerAlert\n                          severity={\n                            isDynamicTokenListAvailable\n                              ? Severity.Warning\n                              : Severity.Info\n                          }\n                        >\n                          <Text variant={TextVariant.bodyMd}>\n                            {t(\n                              isDynamicTokenListAvailable\n                                ? 'customTokenWarningInTokenDetectionNetwork'\n                                : 'customTokenWarningInNonTokenDetectionNetwork',\n                              [\n                                <ButtonLink\n                                  key=\"import-token-fake-token-warning\"\n                                  rel=\"noopener noreferrer\"\n                                  target=\"_blank\"\n                                  href={ZENDESK_URLS.TOKEN_SAFETY_PRACTICES}\n                                >\n                                  {t('learnScamRisk')}\n                                </ButtonLink>,\n                              ],\n                            )}\n                          </Text>\n                        </BannerAlert>\n                      </Box>\n                    )}\n                    <Box>\n                      <FormTextField\n                        paddingLeft={4}\n                        paddingRight={4}\n                        paddingTop={6}\n                        label={t('tokenContractAddress')}\n                        value={customAddress}\n                        onChange={(e) =>\n                          handleCustomAddressChange(e.target.value)\n                        }\n                        helpText={\n                          customAddressError ||\n                          mainnetTokenWarning ||\n                          nftAddressError\n                        }\n                        error={\n                          customAddressError ||\n                          mainnetTokenWarning ||\n                          nftAddressError\n                        }\n                        textFieldProps={{\n                          className:\n                            customAddressError ||\n                            mainnetTokenWarning ||\n                            nftAddressError\n                              ? 'import-tokens-modal__custom-token-form__text-outline-error'\n                              : 'import-tokens-modal__custom-token-form__text-outline-success',\n                        }}\n                        inputProps={{\n                          'data-testid': 'import-tokens-modal-custom-address',\n                        }}\n                      />\n                      {showSymbolAndDecimals && (\n                        <Box>\n                          <FormTextField\n                            paddingLeft={4}\n                            paddingRight={4}\n                            paddingTop={4}\n                            label={<>{t('tokenSymbol')}</>}\n                            value={customSymbol}\n                            onChange={(e) =>\n                              handleCustomSymbolChange(e.target.value)\n                            }\n                            helpText={customSymbolError}\n                            error={customSymbolError}\n                            textFieldProps={{\n                              className: customSymbolError\n                                ? 'import-tokens-modal__custom-token-form__text-outline-error'\n                                : 'import-tokens-modal__custom-token-form__text-outline-success',\n                            }}\n                            inputProps={{\n                              'data-testid':\n                                'import-tokens-modal-custom-symbol',\n                            }}\n                          />\n                          <FormTextField\n                            paddingLeft={4}\n                            paddingRight={4}\n                            paddingTop={4}\n                            label={t('decimal')}\n                            type=\"number\"\n                            value={customDecimals}\n                            onChange={(e) =>\n                              handleCustomDecimalsChange(e.target.value)\n                            }\n                            helpText={customDecimalsError}\n                            error={customDecimalsError}\n                            disabled={decimalAutoFilled}\n                            min={MIN_DECIMAL_VALUE}\n                            max={MAX_DECIMAL_VALUE}\n                            textFieldProps={{\n                              className: customDecimalsError\n                                ? 'import-tokens-modal__custom-token-form__text-outline-error'\n                                : 'import-tokens-modal__custom-token-form__text-outline-success',\n                            }}\n                            inputProps={{\n                              'data-testid':\n                                'import-tokens-modal-custom-decimals',\n                            }}\n                          />\n                        </Box>\n                      )}\n                    </Box>\n                  </Box>\n                </Box>\n              )}\n            </Tab>\n          </Tabs>\n        </Box>\n        {isConfirming ? (\n          <Box\n            paddingTop={5}\n            paddingLeft={4}\n            paddingRight={4}\n            display={Display.Flex}\n          >\n            <ButtonSecondary\n              size={Size.LG}\n              onClick={() => {\n                dispatch(clearPendingTokens());\n                setMode('');\n              }}\n              block\n              marginRight={5}\n            >\n              {t('back')}\n            </ButtonSecondary>\n            <ButtonPrimary\n              size={Size.LG}\n              onClick={async () => {\n                await handleAddTokens();\n                history.push(DEFAULT_ROUTE);\n              }}\n              block\n              data-testid=\"import-tokens-modal-import-button\"\n            >\n              {t('import')}\n            </ButtonPrimary>\n          </Box>\n        ) : (\n          <Box paddingTop={6} paddingLeft={4} paddingRight={4}>\n            <ButtonPrimary\n              onClick={() => handleNext()}\n              size={Size.LG}\n              disabled={Boolean(hasError()) || !hasSelected()}\n              block\n              data-testid=\"import-tokens-button-next\"\n            >\n              {t('next')}\n            </ButtonPrimary>\n          </Box>\n        )}\n      </ModalContent>\n    </Modal>\n  );\n};\n\nImportTokensModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","export { ImportTokensModal } from './import-tokens-modal';\n","export { AccountListItem, AccountListItemMenuTypes } from './account-list-item';\nexport { AccountListItemMenu } from './account-list-item-menu';\nexport { AccountListMenu } from './account-list-menu';\nexport { AccountOverview } from './account-overview';\nexport { AccountPicker } from './account-picker';\nexport { ActivityListItem } from './activity-list-item';\nexport { AppHeader } from './app-header';\nexport { DetectedTokensBanner } from './detected-token-banner';\nexport { GlobalMenu } from './global-menu';\nexport { ImportTokenLink } from './import-token-link';\nexport { TokenListItem } from './token-list-item';\nexport { AddressCopyButton } from './address-copy-button';\nexport { ConnectedSiteMenu } from './connected-site-menu';\nexport { NetworkListItem } from './network-list-item';\nexport { NetworkListMenu } from './network-list-menu';\nexport { ProductTour } from './product-tour-popover';\nexport { AccountDetails } from './account-details';\nexport { CreateAccount } from './create-account';\nexport { CreateEthAccount } from './create-eth-account';\nexport { ConnectedAccountsMenu } from './connected-accounts-menu';\nexport { ImportAccount } from './import-account';\nexport { ImportNftsModal } from './import-nfts-modal';\nexport { AccountDetailsMenuItem, ViewExplorerMenuItem } from './menu-items';\nexport { ImportTokensModal } from './import-tokens-modal';\nexport { AvatarGroup } from './avatar-group';\nexport { AssetPickerAmount } from './asset-picker-amount';\nexport { AddressListItem } from './address-list-item';\nexport { ConnectedStatus } from './connected-status';\nexport { NotificationListItem } from './notification-list-item';\nexport { NotificationListItemIcon } from './notification-list-item-icon';\nexport { NotificationListItemText } from './notification-list-item-text';\nexport { NotificationDetail } from './notification-detail';\nexport { NotificationDetailAddress } from './notification-detail-address';\nexport { NotificationDetailAsset } from './notification-detail-asset';\nexport { NotificationDetailCollection } from './notification-detail-collection';\nexport { NotificationDetailCopyButton } from './notification-detail-copy-button';\nexport { NotificationDetailNetworkFee } from './notification-detail-network-fee';\nexport { NotificationDetailInfo } from './notification-detail-info';\nexport { NotificationDetailNft } from './notification-detail-nft';\nexport { NotificationDetailTitle } from './notification-detail-title';\nexport { NotificationDetailButton } from './notification-detail-button';\nexport { NotificationDetailBlockExplorerButton } from './notification-detail-block-explorer-button';\nexport { NotificationsPage } from './notifications-page';\nexport { NotificationsSettingsBox } from './notifications-settings-box';\nexport { NotificationsSettingsType } from './notifications-settings-type';\nexport { NotificationsSettingsAccount } from './notifications-settings-account';\nexport { NotificationListItemSnap } from './notification-list-item-snap';\nexport { NotificationsTagCounter } from './notifications-tag-counter';\nexport { Toast, ToastContainer } from './toast';\nexport { PermissionDetailsModal } from './permission-details-modal';\nexport { ReceiveModal } from './receive-modal';\nexport { EditNetworksModal } from './edit-networks-modal';\nexport { EditAccountsModal } from './edit-accounts-modal';\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { setAccountDetailsAddress } from '../../../store/actions';\n\nimport { MenuItem } from '../../ui/menu';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { IconName, Text } from '../../component-library';\n\nexport const AccountDetailsMenuItem = ({\n  metricsLocation,\n  closeMenu,\n  address,\n  textProps,\n}) => {\n  const t = useI18nContext();\n  const dispatch = useDispatch();\n  const trackEvent = useContext(MetaMetricsContext);\n\n  const LABEL = t('accountDetails');\n\n  return (\n    <MenuItem\n      onClick={() => {\n        dispatch(setAccountDetailsAddress(address));\n        trackEvent({\n          event: MetaMetricsEventName.AccountDetailsOpened,\n          category: MetaMetricsEventCategory.Navigation,\n          properties: {\n            location: metricsLocation,\n          },\n        });\n        closeMenu?.();\n      }}\n      iconName={IconName.ScanBarcode}\n      data-testid=\"account-list-menu-details\"\n    >\n      {textProps ? <Text {...textProps}>{LABEL}</Text> : LABEL}\n    </MenuItem>\n  );\n};\n\nAccountDetailsMenuItem.propTypes = {\n  /**\n   * Represents the \"location\" property of the metrics event\n   */\n  metricsLocation: PropTypes.string.isRequired,\n  /**\n   * Closes the menu\n   */\n  closeMenu: PropTypes.func,\n  /**\n   * Address to show account details for\n   */\n  address: PropTypes.string.isRequired,\n  /**\n   * Custom properties for the menu item text\n   */\n  textProps: PropTypes.object,\n};\n","export { AccountDetailsMenuItem } from './account-details-menu-item';\nexport { ViewExplorerMenuItem } from './view-explorer-menu-item';\n","import React, { useContext } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { parseCaipChainId } from '@metamask/utils';\nimport { InternalAccount } from '@metamask/keyring-api';\nimport {\n  getMultichainAccountUrl,\n  getMultichainBlockExplorerUrl,\n} from '../../../helpers/utils/multichain/blockExplorer';\n\nimport { MenuItem } from '../../ui/menu';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventLinkType,\n  MetaMetricsEventName,\n  MetaMetricsEventOptions,\n  MetaMetricsEventPayload,\n} from '../../../../shared/constants/metametrics';\nimport { IconName, Text } from '../../component-library';\nimport { getBlockExplorerLinkText } from '../../../selectors';\nimport { getURLHostName } from '../../../helpers/utils/util';\nimport { NETWORKS_ROUTE } from '../../../helpers/constants/routes';\nimport { getMultichainNetwork } from '../../../selectors/multichain';\nimport { useMultichainSelector } from '../../../hooks/useMultichainSelector';\n\nexport type ViewExplorerMenuItemProps = {\n  /**\n   * Represents the \"location\" property of the metrics event\n   */\n  metricsLocation: string;\n  /**\n   * Closes the menu\n   */\n  closeMenu?: () => void;\n  /**\n   * Custom properties for the menu item text\n   */\n  textProps?: object;\n  /**\n   * Account to show account details for\n   */\n  account: InternalAccount;\n};\n\nexport const openBlockExplorer = (\n  addressLink: string,\n  metricsLocation: string,\n  trackEvent: (\n    payload: MetaMetricsEventPayload,\n    options?: MetaMetricsEventOptions,\n  ) => Promise<void>,\n  closeMenu?: () => void,\n) => {\n  trackEvent({\n    event: MetaMetricsEventName.ExternalLinkClicked,\n    category: MetaMetricsEventCategory.Navigation,\n    properties: {\n      link_type: MetaMetricsEventLinkType.AccountTracker,\n      location: metricsLocation,\n      url_domain: getURLHostName(addressLink),\n    },\n  });\n\n  global.platform.openTab({\n    url: addressLink,\n  });\n  closeMenu?.();\n};\n\nexport const ViewExplorerMenuItem = ({\n  metricsLocation,\n  closeMenu,\n  textProps,\n  account,\n}: ViewExplorerMenuItemProps) => {\n  const t = useI18nContext();\n  const trackEvent = useContext(MetaMetricsContext);\n  const history = useHistory();\n\n  const multichainNetwork = useMultichainSelector(\n    getMultichainNetwork,\n    account,\n  );\n  const addressLink = getMultichainAccountUrl(\n    account.address,\n    multichainNetwork,\n  );\n  // TODO: Re-use CAIP-2 for metrics once event schemas support it\n  const chainId = parseCaipChainId(multichainNetwork.chainId).reference;\n  const blockExplorerUrl = getMultichainBlockExplorerUrl(multichainNetwork);\n  const blockExplorerUrlSubTitle = getURLHostName(blockExplorerUrl);\n  const blockExplorerLinkText = useSelector(getBlockExplorerLinkText);\n\n  const routeToAddBlockExplorerUrl = () => {\n    history.push(`${NETWORKS_ROUTE}#blockExplorerUrl`);\n  };\n\n  const LABEL = t('viewOnExplorer');\n\n  return (\n    // @ts-expect-error - TODO: Fix MenuItem props types\n    <MenuItem\n      onClick={() => {\n        blockExplorerLinkText.firstPart === 'addBlockExplorer'\n          ? routeToAddBlockExplorerUrl()\n          : openBlockExplorer(\n              addressLink,\n              metricsLocation,\n              trackEvent,\n              closeMenu,\n            );\n\n        trackEvent({\n          event: MetaMetricsEventName.BlockExplorerLinkClicked,\n          category: MetaMetricsEventCategory.Accounts,\n          properties: {\n            location: metricsLocation,\n            chain_id: chainId,\n          },\n        });\n\n        closeMenu?.();\n      }}\n      subtitle={blockExplorerUrlSubTitle || null}\n      iconName={IconName.Export}\n      data-testid=\"account-list-menu-open-explorer\"\n    >\n      {textProps ? <Text {...textProps}>{LABEL}</Text> : LABEL}\n    </MenuItem>\n  );\n};\n","export { NetworkListItemMenu } from './network-list-item-menu';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport {\n  Box,\n  IconName,\n  ModalFocus,\n  Popover,\n  PopoverPosition,\n  PopoverRole,\n  Text,\n} from '../../component-library';\nimport { MenuItem } from '../../ui/menu';\nimport { IconColor, TextColor } from '../../../helpers/constants/design-system';\n\nexport const NetworkListItemMenu = ({\n  anchorElement,\n  onClose,\n  onEditClick,\n  onDeleteClick,\n  isOpen,\n}) => {\n  const t = useI18nContext();\n\n  return (\n    <Popover\n      className=\"multichain-network-list-item-menu__popover\"\n      onClickOutside={onClose}\n      referenceElement={anchorElement}\n      role={PopoverRole.Dialog}\n      position={PopoverPosition.BottomEnd}\n      offset={[8, 0]}\n      padding={0}\n      isOpen={isOpen}\n      isPortal\n      preventOverflow\n      flip\n    >\n      <ModalFocus restoreFocus initialFocusRef={anchorElement}>\n        <Box>\n          {onEditClick ? (\n            <MenuItem\n              iconName={IconName.Edit}\n              onClick={(e) => {\n                e.stopPropagation();\n                onEditClick();\n              }}\n              data-testid=\"network-list-item-options-edit\"\n            >\n              <Text> {t('edit')}</Text>\n            </MenuItem>\n          ) : null}\n          {onDeleteClick ? (\n            <MenuItem\n              iconName={IconName.Trash}\n              iconColor={IconColor.errorDefault}\n              onClick={(e) => {\n                e.stopPropagation();\n                onDeleteClick();\n              }}\n              data-testid=\"network-list-item-options-delete\"\n            >\n              <Text color={TextColor.errorDefault}>{t('delete')}</Text>\n            </MenuItem>\n          ) : null}\n        </Box>\n      </ModalFocus>\n    </Popover>\n  );\n};\n\nNetworkListItemMenu.propTypes = {\n  /**\n   * Element that the menu should display next to\n   */\n  anchorElement: PropTypes.instanceOf(window.Element),\n  /**\n   * Function that executes when the menu is closed\n   */\n  onClose: PropTypes.func.isRequired,\n  /**\n   * Function that executes when the Edit menu item is clicked\n   */\n  onEditClick: PropTypes.func,\n  /**\n   * Function that executes when the Delete menu item is closed\n   */\n  onDeleteClick: PropTypes.func,\n  /**\n   * Represents if the menu is open or not\n   *\n   * @type {boolean}\n   */\n  isOpen: PropTypes.bool.isRequired,\n};\n"]}