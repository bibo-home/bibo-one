{"version":3,"sources":["ui/pages/confirmations/confirm-deploy-contract/confirm-deploy-contract.container.js","ui/pages/confirmations/confirm-deploy-contract/index.js","ui/pages/confirmations/confirm-send-ether/confirm-send-ether.js","ui/pages/confirmations/confirm-send-ether/index.js","ui/pages/confirmations/confirm-send-token/confirm-send-token.js","ui/pages/confirmations/confirm-send-token/index.js","ui/pages/confirmations/confirm-signature-request/index.js","ui/pages/confirmations/confirm-token-transaction-base/confirm-token-transaction-base.js","ui/pages/confirmations/confirm-token-transaction-base/index.js","ui/pages/confirmations/confirm-transaction-base/confirm-transaction-base.component.js","ui/pages/confirmations/confirm-transaction-base/confirm-transaction-base.container.js","ui/pages/confirmations/confirm-transaction-base/index.js","ui/pages/confirmations/confirm-transaction-switch/confirm-transaction-switch.component.js","ui/pages/confirmations/confirm-transaction-switch/confirm-transaction-switch.container.js","ui/pages/confirmations/confirm-transaction-switch/index.js","ui/pages/confirmations/confirm-transaction/confirm-token-transaction-switch.js","ui/pages/confirmations/confirm-transaction/confirm-transaction.component.js","ui/pages/confirmations/confirm-transaction/index.js","ui/pages/confirmations/confirm/confirm.tsx","ui/pages/confirmations/confirmation/components/confirmation-footer/confirmation-footer.js","ui/pages/confirmations/confirmation/components/confirmation-footer/index.js","ui/pages/confirmations/confirmation/components/confirmation-network-switch/confirmation-network-switch.js","ui/pages/confirmations/confirmation/components/confirmation-network-switch/index.js","ui/pages/confirmations/confirmation/components/queued-requests-banner-alert/index.ts","ui/pages/confirmations/confirmation/components/queued-requests-banner-alert/queued-requests-banner-alert.tsx","ui/pages/confirmations/confirmation/confirmation.js","ui/pages/confirmations/confirmation/index.js","ui/pages/confirmations/context/confirm/index.tsx","ui/pages/confirmations/hooks/alerts/constants.ts","ui/pages/confirmations/hooks/alerts/signatures/useAccountMismatchAlerts.ts","ui/pages/confirmations/hooks/alerts/signatures/useDomainMismatchAlerts.ts","ui/pages/confirmations/hooks/alerts/transactions/useGasEstimateFailedAlerts.ts","ui/pages/confirmations/hooks/alerts/transactions/useGasFeeLowAlerts.ts","ui/pages/confirmations/hooks/alerts/transactions/useGasTooLowAlerts.ts","ui/pages/confirmations/hooks/alerts/transactions/useInsufficientBalanceAlerts.ts","ui/pages/confirmations/hooks/alerts/transactions/useNetworkBusyAlerts.ts","ui/pages/confirmations/hooks/alerts/transactions/useNoGasPriceAlerts.ts","ui/pages/confirmations/hooks/alerts/transactions/usePendingTransactionAlerts.ts","ui/pages/confirmations/hooks/alerts/transactions/useQueuedConfirmationsAlerts.ts","ui/pages/confirmations/hooks/alerts/transactions/useSigningOrSubmittingAlerts.ts","ui/pages/confirmations/hooks/alerts/useBlockaidAlerts.ts","ui/pages/confirmations/hooks/alerts/useConfirmationOriginAlerts.ts","ui/pages/confirmations/hooks/alerts/utils.ts","ui/pages/confirmations/hooks/setConfirmationAlerts.ts","ui/pages/confirmations/hooks/syncConfirmPath.ts","ui/pages/confirmations/hooks/useApproveTransaction.js","ui/pages/confirmations/hooks/useAssetDetails.js","ui/pages/confirmations/hooks/useBalance.js","ui/pages/confirmations/hooks/useConfirmationAlertActions.ts","ui/pages/confirmations/hooks/useConfirmationAlertMetrics.ts","ui/pages/confirmations/hooks/useConfirmationAlerts.ts","ui/pages/confirmations/hooks/useConfirmationNetworkInfo.ts","ui/pages/confirmations/hooks/useConfirmationRecipientInfo.ts","ui/pages/confirmations/hooks/useCurrentConfirmation.ts","ui/pages/confirmations/hooks/useCurrentSignatureSecurityAlertResponse.ts","ui/pages/confirmations/hooks/useDraftTransactionWithTxParams.js","ui/pages/confirmations/hooks/useGasEstimates.js","ui/pages/confirmations/hooks/useGasFeeErrors.js","ui/pages/confirmations/hooks/useGasFeeInputs.js","ui/pages/confirmations/hooks/useGasPriceInput.js","ui/pages/confirmations/hooks/useIncrementedGasFees.js","ui/pages/confirmations/hooks/useLedgerConnection.ts","ui/pages/confirmations/hooks/useMaxFeePerGasInput.js","ui/pages/confirmations/hooks/useMaxPriorityFeePerGasInput.js","ui/pages/confirmations/hooks/useQueuedConfirmationEvents.ts","ui/pages/confirmations/hooks/useRejectTransactionModal.js","ui/pages/confirmations/hooks/useRouting.js","ui/pages/confirmations/hooks/useSignatureEventFragment.ts","ui/pages/confirmations/hooks/useSimulationFailureWarning.js","ui/pages/confirmations/hooks/useTransactionEventFragment.js","ui/pages/confirmations/hooks/useTransactionFunctionType.js","ui/pages/confirmations/hooks/useTransactionFunctions.js","ui/pages/confirmations/hooks/useTransactionInfo.js","ui/pages/confirmations/hooks/utils.js","ui/pages/confirmations/selectors/preferences.ts","ui/pages/confirmations/send/send-content/add-recipient/domain-input.component.js","ui/pages/confirmations/send/send-content/add-recipient/domain-input.container.js","ui/pages/confirmations/send/send-content/add-recipient/domain-input.js","ui/pages/confirmations/token-allowance/token-allowance.js","ui/pages/confirmations/utils/token.ts","ui/pages/connected-accounts/connected-accounts.component.js","ui/pages/connected-accounts/connected-accounts.container.js","ui/pages/connected-accounts/index.js","ui/pages/connected-sites/connected-sites.component.js","ui/pages/connected-sites/connected-sites.container.js","ui/pages/connected-sites/index.js","ui/pages/create-account/connect-hardware/account-list.js","ui/pages/create-account/connect-hardware/index.js","ui/pages/create-account/connect-hardware/select-hardware.js","ui/pages/create-account/create-account.component.js","ui/pages/create-snap-account/create-snap-account.tsx","ui/pages/create-snap-account/index.ts","ui/pages/error/error.component.js","ui/pages/error/index.js","ui/pages/home/home.component.js","ui/pages/home/home.container.js","ui/pages/home/index.js","ui/pages/index.js","ui/pages/keychains/restore-vault.js","ui/pages/keychains/reveal-seed.js","ui/pages/lock/index.js","ui/pages/lock/lock.component.js","ui/pages/lock/lock.container.js","ui/pages/notification-details/index.js","ui/pages/notification-details/notification-details-body/notification-details-body.tsx","ui/pages/notification-details/notification-details-footer/notification-details-footer.tsx","ui/pages/notification-details/notification-details-header/notification-details-header.tsx","ui/pages/notification-details/notification-details.tsx","ui/pages/notification-details/utils/utils.ts","ui/pages/notifications-settings/index.js","ui/pages/notifications-settings/notifications-settings-allow-notifications.tsx","ui/pages/notifications-settings/notifications-settings-per-account.tsx","ui/pages/notifications-settings/notifications-settings-types.tsx","ui/pages/notifications-settings/notifications-settings.tsx","ui/pages/notifications/NewFeatureTag.tsx","ui/pages/notifications/index.js","ui/pages/notifications/notification-components/erc1155-sent-received/erc1155-sent-received.tsx","ui/pages/notifications/notification-components/erc20-sent-received/erc20-sent-received.tsx","ui/pages/notifications/notification-components/erc721-sent-received/erc721-sent-received.tsx","ui/pages/notifications/notification-components/eth-sent-received/eth-sent-received.tsx","ui/pages/notifications/notification-components/feature-announcement/feature-announcement.tsx","ui/pages/notifications/notification-components/index.ts","ui/pages/notifications/notification-components/lido-stake-ready-to-be-withdrawn/lido-stake-ready-to-be-withdrawn.tsx","ui/pages/notifications/notification-components/lido-withdrawal-requested/lido-withdrawal-requested.tsx","ui/pages/notifications/notification-components/node-guard.ts","ui/pages/notifications/notification-components/snap/snap.tsx","ui/pages/notifications/notification-components/stake/stake.tsx","ui/pages/notifications/notification-components/swap-completed/swap-completed.tsx","ui/pages/notifications/notifications-list-item.tsx","ui/pages/notifications/notifications-list-placeholder.tsx","ui/pages/notifications/notifications-list-read-all-button.tsx"],"names":["obj","_reactRedux","require","_confirmDeployContract","__esModule","default","exports","connect","state","confirmTransaction","txData","_react","_interopRequireDefault","_reactRouterDom","_transaction","_confirmTransaction","_send","_routes","_confirmTransactionBase","dispatch","useDispatch","history","useHistory","handleEdit","async","id","editExistingTransaction","AssetType","native","toString","clearConfirmTransaction","editTransaction","then","push","SEND_ROUTE","createElement","actionKey","onEdit","confirmTransactionData","_confirmSendEther","_propTypes","_confirmTokenTransactionBase","_selectors","_metamask","_actions","ConfirmSendToken","assetStandard","toAddress","tokenAddress","assetName","tokenSymbol","tokenAmount","tokenId","transaction","image","ethTransactionTotal","fiatTransactionTotal","hexMaximumTransactionFee","conversionRate","useSelector","getConversionRate","nativeCurrency","getNativeCurrency","currentCurrency","getCurrentCurrency","contractExchangeRate","contractExchangeRateSelector","title","subtitle","TokenStandard","ERC721","ERC20","token","showSendTokenPage","handleEditTransaction","propTypes","string","shape","origin","txParams","data","to","from","_confirmSendToken","_interopRequireWildcard","_loglevel","_lodash","_permissionController","_transactionController","actions","_txHelper","_signatureRequest","_signatureRequestOriginal","_signatureRequestSiwe","_loadingScreen","_useRouting","_useInsightSnaps","_app","_getRequireWildcardCache","e","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","ConfirmTxScreen","match","_txData$securityAlert","navigateToMostRecentOverviewPage","useRouting","unapprovedMessagesTotal","getTotalUnapprovedSignatureRequestCount","sendTo","getSendTo","internalAccounts","getInternalAccounts","blockGasLimit","signatureSecurityAlertResponses","metamask","unapprovedPersonalMsgs","getMemoizedUnapprovedPersonalMessages","unapprovedTypedMessages","getMemoizedUnapprovedTypedMessages","unapprovedTxs","getUnapprovedTransactions","currentNetworkTxList","getCurrentNetworkTransactions","chainId","getMemoizedCurrentChainId","index","getMemoizedTxId","prevValue","setPrevValues","useState","useEffect","length","prevTx","params","transactionId","find","prevIndex","prevUnapprovedTxs","prevTxData","unconfTxList","status","TransactionStatus","dropped","showModal","name","onSubmit","txIdFromPath","useMemo","info","unconfirmedTx","cloneDeep","warnings","useInsightSnaps","resolvedSecurityAlertResponse","securityAlertResponse","securityAlertId","targetSubjectMetadata","_txData$msgParams","getTargetSubjectMetadata","msgParams","SigComponent","type","version","siwe","MESSAGE_TYPE","ETH_SIGN_TYPED_DATA","isSIWEMessage","SubjectType","Snap","signatureSelect","key","accounts","withRouter","_bignumber","_etherscanLink","_i18n","_userPreferencedCurrencyDisplay","_confirmTx","_common","_conversion","_common2","_network","_constants","ConfirmTokenTransactionBase","useContext","I18nContext","rpcPrefs","getRpcPrefsForCurrentProvider","getCurrentChainId","address","userAddress","getSelectedInternalAccount","nftCollections","getNftContracts","ethTransactionTotalMaxAmount","Number","hexWEIToDecETH","toFixed","ETH_DEFAULT_DECIMALS","getTitleTokenDescription","renderType","useBlockExplorer","blockExplorerUrl","TEST_CHAINS","CHAIN_IDS","MAINNET","LINEA_MAINNET","includes","nftCollection","collection","toLowerCase","titleTokenDescription","blockExplorerLink","getTokenTrackerLink","Fragment","href","target","rel","className","assetImage","subtotalDisplay","ERC1155","hexWeiValue","decimalEthValue","times","String","getWeiHexFromDecimalValue","value","fromCurrency","EtherDenomination","ETH","fromDenomination","secondaryTotalTextOverride","formatCurrency","fiatTransactionAmount","convertTokenToFiat","toCurrency","fiatTotal","addFiat","roundedFiatTotal","roundExponential","subtitleComponent","undefined","PRIMARY","showEthLogo","hideLabel","primaryTotalTextOverride","primaryTotalTextOverrideMaxAmount","func","_confirmPageContainer","_designSystem","_errorKeys","_metametrics","_metrics","_transactions","_custody","_transactionModal","_transactionDetail","_transactionDetailItem","_componentLibrary","_loadingHeartbeat","_ledgerInstructionField","_send2","_transactionAlerts","_confirmHexdata","_confirmTitle","_confirmSubtitle","_confirmGasDisplay","_updateTxData","_keyring","_snapAccountTransactionLoadingScreen","_hardware","_feeDetailsComponent","_simulationDetails","_swaps","_networkChangeToast","_defineProperty","arg","input","hint","prim","Symbol","toPrimitive","res","TypeError","_toPrimitive","_toPropertyKey","enumerable","configurable","writable","ConfirmTransactionBase","Component","constructor","args","super","this","submitting","submitError","submitWarning","ethGasPriceWarning","editingGas","userAcknowledgedGasMissing","showWarningModal","_isMounted","pollingToken","gasFeeStopPollingByPollingToken","removePollingTokenFromAppState","window","removeEventListener","_beforeUnloadForGasPolling","props","supportsEIP1559","isLegacyTransaction","componentDidUpdate","prevProps","transactionStatus","showTransactionConfirmedModal","nextNonce","customNonceValue","tryReverseResolveAddress","isEthGasPriceFetched","setDefaultHomeActiveTabName","useMaxValue","hasPriorityApprovalRequest","mostRecentOverviewPage","prevCustomNonceValue","prevNextNonce","prevToAddress","prevTxStatus","prevIsEthGasPriceFetched","prevHexMaximumTransactionFee","prevHasPriorityApprovalRequest","statusUpdated","txDroppedOrConfirmed","confirmed","setState","context","DEFAULT_ROUTE","ETH_GAS_PRICE_FETCH_WARNING_KEY","updateValueToMax","getErrorKey","balance","amount","customGas","noGasPrice","gasFeeIsCustom","isSigningOrSubmitting","isUserOpContractDeployError","valid","errorKey","USER_OP_CONTRACT_DEPLOY_ERROR_KEY","isBalanceSufficient","gasTotal","INSUFFICIENT_FUNDS_ERROR_KEY","hexToDecimal","gasLimit","MIN_GAS_LIMIT_DEC","GAS_LIMIT_TOO_LOW_ERROR_KEY","GAS_PRICE_FETCH_FAILURE_ERROR_KEY","IS_SIGNING_OR_SUBMITTING","handleEditGas","methodData","trackEvent","category","MetaMetricsEventCategory","Transactions","event","properties","action","legacy_event","recipientKnown","functionType","getMethodName","TransactionType","contractInteraction","handleCloseEditGas","setUserAcknowledgedGasMissing","maxValue","updateTransactionValue","renderDetails","_this$props$txData2","_txData$txParams","hexMinimumTransactionFee","useNonceField","updateCustomNonce","getNextNonce","useNativeCurrencyAsPrimaryCurrency","showLedgerSteps","isBuyableChain","useCurrencyRateCheck","isUsingPaymaster","isDisabled","renderSimulationFailureWarning","Boolean","simulationFails","networkName","NETWORK_TO_NAME_MAP","getTotalAmount","useMaxFee","sumHexes","layer1GasFee","renderTotalMaxAmount","isBoldTextAndNotOverridden","totalMaxAmount","Text","variant","TextVariant","bodyMdBold","nextNonceValue","renderNonceField","nonceField","TextField","min","placeholder","onChange","inputValue","isNaN","fullWidth","margin","simulationData","simulationDetails","SimulationDetails","enableMetrics","showTotals","error","disableEditGasFeeButton","disabled","rows","ConfirmGasDisplay","detailTitle","detailText","_this$props$txData","estimateUsed","userFeeLevel","SECONDARY","suffixProps","color","TextColor","textDefault","textProps","renderTotalDetailText","detailTotal","subTitle","subText","textAlternative","bodySmMedium","showDataInstruction","renderDataHex","dataHexComponent","ConfirmHexData","tokenData","tokenProps","handleCancelAll","cancelAllTransactions","showRejectTransactionsConfirmationModal","unapprovedTxCount","_removeBeforeUnload","handleCancel","cancelTransaction","handleSubmit","isMainBetaFlask","handleMainSubmit","handleMMISubmit","sendTransaction","maxFeePerGas","customTokenAmount","dappProposedTokenAmount","currentTokenBalance","maxPriorityFeePerGas","baseFeePerGas","addToAddressBookIfNew","toAccounts","keyringForAccount","fromInternalAccount","loadingIndicatorMessage","KeyringType","snap","internalAccount","isHardwareKeyring","catch","message","updateTransaction","accountType","isNotification","setWaitForConfirmDeepLinkDialog","showTransactionsFailedModal","fromAddress","isNoteToTraderSupported","custodianPublishesTransaction","rpcUrl","showCustodianDeepLink","isSmartTransactionsEnabled","noteText","AccountType","CUSTODY","custodyStatus","CustodyStatus","CREATED","metadata","note","closeNotification","txId","onDeepLinkFetched","onDeepLinkShown","handleSetApprovalForAll","renderTitleComponent","hexTransactionAmount","ConfirmTitle","renderSubtitleComponent","ConfirmSubTitle","componentDidMount","txChainId","smartTransactionsOptInStatus","currentChainSupportsSmartTransactions","setSwapsFeatureFlags","fetchSmartTransactionsLiveness","Error","gasFeeStartPollingByNetworkClientId","selectedNetworkClientId","addPollingTokenToAppState","addEventListener","Promise","all","fetchSwapsFeatureFlags","swapsFeatureFlags","componentWillUnmount","render","fromName","toName","toEns","toNickname","contentComponent","nonce","hideSenderToRecipient","showAccountInHeader","gasIsLoading","hardwareWalletRequiresConnection","isApprovalOrRejection","displayAccountBalanceHeader","hasSimulationError","isTokenApproval","tokenMethodSetApprovalForAll","tokenMethodApprove","tokenMethodIncreaseAllowance","isContractInteraction","isContractInteractionFromDapp","getTransactionTypeTitle","TransactionModalContextProvider","showEdit","titleComponent","detailsComponent","errorMessage","warning","onCancelAll","onCancel","onSetApprovalForAll","currentTransaction","NetworkChangeToastLegacy","confirmation","object","number","bool","array","node","isRequired","_redux","_browser","_util","_selectors2","_history","_util2","_hexstringUtils","_gas","_accountAbstraction","_transactionsControllerUtils","_ramps","mapDispatchToProps","cancelTx","txList","cancelTxs","dontShowLoadingIndicator","updateAndApproveTx","customNonceMerge","txMeta","updateEditableParams","tabName","updateTransactionGasFees","gasFees","updateGasFees","expectHexWei","newAddress","nickname","hexPrefixedAddress","addHexPrefix","newAddressNormalized","some","addressIsNew","addToAddressBook","compose","ownProps","_getInternalAccountBy","_tokenList$toAddress$","_state$confirmTransac","propsToAddress","customTxParamsData","paramsTransactionId","isMainnet","getIsMainnet","getSelectedNetworkClientId","isGasEstimatesLoading","getIsGasEstimatesLoading","gasLoadingAnimationIsShowing","getGasLoadingAnimationIsShowing","getIsNativeTokenBuyable","addressBook","getProviderConfig","getUnapprovedTransaction","txParamsToAddress","gasPrice","gas","getMetaMaskAccounts","getSmartTransactionsOptInStatus","getCurrentChainSupportsSmartTransactions","captureException","getInternalAccountByAddress","keyring","findKeyringForAddress","tokenToAddress","_transactionData$args","_transactionData$args2","tokenMethodTransferFrom","tokenMethodSafeTransferFrom","tokenMethodTransfer","transactionData","parseStandardTokenTransactionData","_to","getTokenToAddress","getSendToAccounts","tokenList","getTokenList","shortenAddress","toChecksumHexAddress","checksummedAddress","addressBookObject","getEnsResolutionByAddress","checkNetworkAndAccountSupports1559","initialHexTransactionAmount","gasEstimationObject","transactionFeeSelector","maxValueMode","subtractHexes","currentNetworkUnapprovedTxs","keys","filter","reduce","acc","valuesFor","insufficientBalance","calcGasTotal","getKnownMethodData","fullTxData","getFullTxData","unapproved","getCustomNonceValue","getIsEthGasPriceFetched","getNoGasPriceFetched","getPreferences","CUSTOM_GAS_ESTIMATE","txParamsAreDappSuggested","fromAddressIsLedger","isAddressLedger","doesAddressRequireLedgerHidConnection","getIsUsingPaymaster","getApprovedAndSignedTransactions","isUserOperation","deployContract","getPrioritizedUnapprovedTemplatedConfirmations","advancedInlineGasShown","getAdvancedInlineGasShown","getUseNonceField","hideFiatConversion","getShouldShowFiat","getMostRecentOverviewPage","getUseCurrencyRateCheck","stateProps","dispatchProps","dispatchCancelAllTransactions","dispatchUpdateTransactionGasFees","otherDispatchProps","updateGasAndCalculate","ConfirmTransactionSwitch","redirectToTransaction","pathname","CONFIRM_TRANSACTION_ROUTE","CONFIRM_DEPLOY_CONTRACT_PATH","Redirect","simpleSend","CONFIRM_SEND_ETHER_PATH","CONFIRM_SEND_TOKEN_PATH","CONFIRM_APPROVE_PATH","CONFIRM_SET_APPROVAL_FOR_ALL_PATH","CONFIRM_TRANSFER_FROM_PATH","CONFIRM_SAFE_TRANSFER_FROM_PATH","CONFIRM_INCREASE_ALLOWANCE_PATH","CONFIRM_TOKEN_METHOD_PATH","SIGNATURE_REQUEST_PATH","ETH_DECRYPT","DECRYPT_MESSAGE_REQUEST_PATH","ETH_GET_ENCRYPTION_PUBLIC_KEY","ENCRYPTION_PUBLIC_KEY_REQUEST_PATH","_confirmTransactionSwitch","url","confirmTransactionRoute","urlId","split","paramsId","unconfirmedTransactions","unconfirmedTransactionsListSelector","_confirmApprove","_useAssetDetails","ConfirmTokenTransactionSwitch","userBalance","decimals","tokenImage","useAssetDetails","hexTransactionTotal","Switch","Route","exact","path","isSetApproveForAll","NFT","component","_usePolling","_usePrevious","_confirmDecryptMessage","_confirmEncryptionPublicKey","_confirmContractInteraction","_confirmSignatureRequest","_confirm","_useCurrentConfirmation","_useAsyncResult","_trace","_confirmTokenTransactionSwitch","useParams","unconfirmedTxsSorted","unconfirmedTxs","unconfirmedTransactionsHashSelector","networkClientId","totalUnapproved","getTransaction","useCallback","setTransaction","use4ByteResolution","use4ByteResolutionSelector","currentConfirmation","tx","setTransactionToConfirm","getEnvironmentType","ENVIRONMENT_TYPE_NOTIFICATION","useAsyncResult","endBackgroundTrace","TraceName","NotificationDisplay","isValidTokenMethod","isTokenMethodAction","isValidTransactionId","prevParamsTransactionId","usePrevious","prevTransactionId","startPollingByNetworkClientId","stopPollingByPollingToken","ORIGIN_METAMASK","getContractMethodData","replace","_page","_gasFee","_advancedGasFeePopover","_blockaidLoadingIndicator","_confirmAlerts","_footer","_header","_info","_ledgerInfo","_nav","_pluggableSection","_scrollToBottom","_title","_editGasFeePopover","EIP1559TransactionGasModal","GasFeeContextProviderWrapper","children","useConfirmContext","GasFeeContextProvider","ConfirmContextProvider","ConfirmAlerts","Page","Nav","Header","BlockaidLoadingIndicator","LedgerInfo","Title","Info","PluggableSection","Footer","NetworkChangeToast","_classnames","_button","ConfirmationFooter","submitText","cancelText","loadingText","alerts","loading","submitAlerts","actionsStyle","style","showActions","onClick","centered","_confirmationFooter","getNetworkDetails","network","iconUrl","CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP","ConfirmationNetworkSwitch","toNetwork","fromNetwork","fromNetworkDetails","toNetworkDetails","Box","display","Display","Flex","height","BlockSize","Full","justifyContent","JustifyContent","center","marginTop","Block","AvatarNetwork","src","size","AvatarNetworkSize","Xl","marginBottom","alignItems","AlignItems","_confirmationNetworkSwitch","_queuedRequestsBannerAlert","_useI18nContext","_useQueuedConfirmationEvents","QueuedRequestsBannerAlert","useI18nContext","queuedRequestCount","getQueuedRequestCount","useQueuedConfirmationsEvent","QueueType","QueueController","BannerAlert","severity","BannerAlertSeverity","description","_immer","_controllerUtils","_snapsRpcMethods","_fetchWithCache","_metamaskTemplateRenderer","_confirmationWarningModal","_metametrics2","_networkDisplay","_callout","_snapAuthorshipHeader","_snapUiRenderer","_time","_templates","alertStateReducer","produce","_state$action$confirm","confirmationId","alertId","dismissed","forEach","alert","ConfirmationPage","redirectToHomeOnZeroConfirmations","_snapsMetadata$pendin","MetaMetricsContext","pendingConfirmations","getMemoizedUnapprovedTemplatedConfirmations","unapprovedTxsCount","getUnapprovedTxCount","approvalFlows","getApprovalFlows","isEqual","totalUnapprovedCount","getTotalUnapprovedCount","useSafeChainsListValidation","useSafeChainsListValidationSelector","networkConfigurationsByChainId","getNetworkConfigurationsByChainId","approvalFlowLoadingText","setApprovalFlowLoadingText","currentPendingConfirmation","setCurrentPendingConfirmation","pendingConfirmation","matchedChain","setMatchedChain","chainFetchComplete","setChainFetchComplete","preventAlertsForAddChainValidation","ApprovalType","AddEthereumChain","currencySymbolWarning","setCurrencySymbolWarning","providerError","setProviderError","alertState","dismissAlert","useReducer","isMounted","getTemplateAlerts","useAlertState","templateState","setTemplateState","getTemplateState","values","prevState","useTemplateState","setShowWarningModal","inputStates","setInputStates","setLoading","setLoadingText","setSubmitAlerts","snapsMetadata","getSnapsMetadata","hideSnapBranding","getHideSnapBranding","SNAP_DIALOG_TYPE","DIALOG_APPROVAL_TYPES","SNAP_CUSTOM_UI_DIALOG","SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES","isSnapDialog","isSnapCustomUIDialog","isSnapPrompt","SnapDialogPrompt","isSnapDefaultDialog","snapName","INPUT_STATE_CONFIRMATIONS","templatedValues","_pendingConfirmation$","getTemplateValues","existingNetworkConfiguration","requestData","onLoad","childFlow","_pendingConfirmation","_matchedChain$nativeC","_pendingConfirmation$2","_matchedChain","cacheOptions","cacheRefreshTime","DAY","functionName","chain","parseInt","_matchedChain$nativeC2","symbol","ticker","warn","fetchSafeChainsList","loadingMessage","handleSubmitResult","submitResult","_pendingConfirmation$3","_pendingConfirmation$4","_templateState$pendin","fromNetworkConfiguration","toNetworkConfiguration","Network","MetaMetricsEventName","NavNetworkSwitched","location","from_network","to_network","referrer","useWarningModal","inputState","getInputState","handleSnapDialogCancel","SnapDialogAlert","contentMargin","position","zIndex","width","Screen","Icon","IconName","ArrowLeft","ArrowRight","snapId","padding","overflowY","networkDisplay","SnapUIRenderer","interfaceId","isPrompt","onInputChange","setInputState","currentState","useDelineator","useFooter","contentBackgroundColor","BackgroundColor","backgroundAlternative","sections","content","map","idx","filtered","dismiss","isFirst","isLast","isMultiple","boxShadow","borderTop","hideSubmitButton","_confirmation","_syncConfirmPath","ConfirmContext","createContext","isScrollToBottomCompleted","setIsScrollToBottomCompleted","Provider","AlertsName","_currentConfirmation$","_utils","getConfirmationSender","isSIWE","_utils2","isSIWESignatureRequest","siweParsedAddress","parsedMessage","isMismatchSIWEAdddress","isMismatchAccount","field","RowAlertKey","SigningInWith","reason","Severity","Warning","isInvalidSIWEDomain","isValidSIWEOrigin","RequestFrom","Danger","estimationFailed","AlertActionKey","ShowAdvancedGasFeeModal","label","EstimatedFee","useGasFeeContext","isLowEstimate","PriorityLevels","low","ShowGasFeeModal","gasTooLow","isBlocking","selectTransactionAvailableBalance","selectTransactionValue","selectTransactionFeeById","Buy","isNetworkBusy","getIsNetworkBusyByChainId","showAlert","isNoGasPriceFetched","UserFeeLevel","CUSTOM","pendingTransactions","submittedPendingTransactionsSelector","hasPendingTransactions","REDESIGN_DEV_TRANSACTION_TYPES","Speed","isQueuedConfirmation","signingOrSubmittingTransactions","_package","_securityProvider","_zendeskUrl","_useCurrentSignatureSecurityAlertResponse","zlib","SUPPORTED_TRANSACTION_TYPES","SIGNATURE_TRANSACTION_TYPES","IGNORED_RESULT_TYPES","BlockaidResultType","Benign","Loading","selectorChainId","transactionType","signatureSecurityAlertResponse","transactionSecurityAlertResponse","_state$metamask$trans","transactions","_transaction$security","isTransactionTypeSupported","isResultTypeIgnored","result_type","stringifiedJSONData","block","features","resultType","isFailedResultType","Errored","reportData","blockNumber","blockaidVersion","classification","domain","jsonRpcMethod","jsonRpcParams","JSON","stringify","reproduce","reportUrl","SUPPORT_URL","_zlib$gzipSync","encodedData","gzipSync","FALSE_POSITIVE_REPORT_BASE_URL","encodeURIComponent","SECURITY_PROVIDER_UTM_SOURCE","normalizeProviderAlert","_confirm2","_msgParams","isSignatureTransactionType","originUndefinedOrValid","isValidASCIIURL","alertDetails","toPunycodeURL","_blockaidBannerAlert","REASON_TO_TITLE_TKEY","getProviderAlertSeverity","REASON_TO_DESCRIPTION_TKEY","other","provider","SecurityProvider","Blockaid","Malicious","_useConfirmationAlerts","ownerId","updateAlerts","clearAlerts","showCustomizeGasPopover","setShowCustomizeGasPopover","approveTransaction","closeCustomizeGasPopover","nfts","getNfts","currentToken","getTokens","_stringUtils","isEqualCaseInsensitive","currentAsset","setCurrentAsset","tokensWithBalances","_useTokenTracker","useTokenTracker","tokens","prevTokenAddress","prevUserAddress","prevTransactionData","prevTokenBalance","showLoadingIndication","assetDetails","_tokenUtil","getAssetDetails","hideLoadingIndication","getAndSetAssetDetails","standard","assetAddress","_useAccountTotalFiatBalance","useBalance","shouldHideZeroBalanceTokens","getShouldHideZeroBalanceTokens","fromAccount","totalWeiBalance","useAccountTotalFiatBalance","currentNetwork","getCurrentNetwork","showFiatInTestnets","getShowFiatInTestnets","showFiat","TEST_NETWORKS","balanceToUse","getSelectedAccountCachedBalance","_useRamps","openBuyCryptoInPdapp","openModal","useTransactionModalContext","console","isAlertConfirmed","_useAlerts","updateSignatureEventFragment","_useSignatureEventFragment","useSignatureEventFragment","updateTransactionEventFragment","_useTransactionEventFragment","useTransactionEventFragment","metricsProperties","setMetricsProperties","alert_visualized","alert_visualized_count","alert_key_clicked","alert_action_clicked","alert_triggered_count","alert_triggered","getAlertNames","alert_resolved_count","alert_resolved","trackAlertRender","alertKey","newState","alertName","getAlertName","uniqueFreshArrayPush","trackInlineAlertClicked","trackAlertActionClicked","updateAlertMetrics","_uuid","ALERTS_NAME_METRICS","GasEstimateFailed","GasFeeLow","GasTooLow","InsufficientBalance","NetworkBusy","NoGasPrice","PendingTransaction","SigningOrSubmitting","Set","validate","blockaidAlerts","_useBlockaidAlerts","confirmationOriginAlerts","_useConfirmationOriginAlerts","signatureAlerts","accountMismatchAlerts","_useAccountMismatchAlerts","domainMismatchAlerts","_useDomainMismatchAlerts","useSignatureAlerts","transactionAlerts","gasEstimateFailedAlerts","_useGasEstimateFailedAlerts","useGasEstimateFailedAlerts","gasFeeLowAlerts","_useGasFeeLowAlerts","useGasFeeLowAlerts","gasTooLowAlerts","_useGasTooLowAlerts","useGasTooLowAlerts","insufficientBalanceAlerts","_useInsufficientBalanceAlerts","useInsufficientBalanceAlerts","networkBusyAlerts","_useNetworkBusyAlerts","useNetworkBusyAlerts","noGasPriceAlerts","_useNoGasPriceAlerts","useNoGasPriceAlerts","pendingTransactionAlerts","_usePendingTransactionAlerts","usePendingTransactionAlerts","signingOrSubmittingAlerts","_useSigningOrSubmittingAlerts","useSigningOrSubmittingAlerts","queuedConfirmationsAlerts","_useQueuedConfirmationsAlerts","useQueuedConfirmationsAlerts","useTransactionAlerts","networkConfigurations","currentChainId","networkDisplayName","networkImageUrl","networkConfiguration","allAccounts","accountsWithSendEtherInfoSelector","senderAddress","senderName","_fromAccount$metadata","getAccountByAddress","_signatures","_buildTypes","paramsConfirmationId","latestPendingApproval","latestPendingConfirmationSelector","isRedesignedSignaturesUserSettingEnabled","getRedesignedConfirmationsEnabled","isRedesignedTransactionsUserSettingEnabled","getRedesignedTransactionsEnabled","isRedesignedConfirmationsDeveloperSettingEnabled","getIsRedesignedConfirmationsDeveloperEnabled","pendingApproval","selectPendingApproval","transactionMetadata","signatureMessage","selectUnapprovedMessage","isCorrectUserTransactionType","REDESIGN_USER_TRANSACTION_TYPES","isCorrectDeveloperTransactionType","isCorrectApprovalType","REDESIGN_APPROVAL_TYPES","shouldUseRedesignForTransactions","shouldUseRedesign","isMMI","_state$metamask$signa","useDraftTransactionWithTxParams","draftTransaction","getCurrentDraftTransaction","_draftTransaction$gas","_editingTransaction$t","_draftTransaction$gas2","_editingTransaction$t2","_editingTransaction$t3","_draftTransaction$gas3","_editingTransaction$t4","_editingTransaction$t5","_draftTransaction$gas4","_draftTransaction$amo","editingTransaction","userEditedGasLimit","editGasMode","gasEstimateType","gasFeeEstimates","minimumGasLimit","currency","primaryCurrency","numberOfDecimals","primaryNumberOfDecimals","_useUserPreferencedCurrency","useUserPreferencedCurrency","gasSettings","decimalToHex","decGWEIToHexWEI","estimatedBaseFee","GasEstimateTypes","none","maximumCostInHexWei","_gas2","getMaximumGasTotalInHexWei","EditGasModes","swaps","minimumCostInHexWei","getMinimumGasTotalInHexWei","estimatedMinimumNative","_useCurrencyDisplay","useCurrencyDisplay","isFeeMarketGasEstimate","feeMarket","gasLimitError","validateGasLimit","maxPriorityFeeError","validateMaxPriorityFee","maxFeeError","validateMaxFee","gasPriceError","validateGasPrice","maxPriorityFeeWarning","getMaxPriorityFeeWarning","maxFeeWarning","getMaxFeeWarning","gasErrors","errors","maxPriorityFee","maxFee","gasWarnings","hasGasErrors","errorsAndWarnings","account","_transaction$txParams3","getTargetAccount","shallowEqual","balanceError","incoming","_transactions2","PENDING_STATUS_HASH","hasBalanceError","_Numeric","Numeric","lessThan","GAS_LIMITS","SIMPLE","GAS_FORM_ERRORS","GAS_LIMIT_OUT_OF_BOUNDS","bnLessThan","MAX_PRIORITY_FEE_BELOW_MINIMUM","bnGreaterThan","MAX_FEE_IMBALANCE","_transaction$txParams","GAS_PRICE_TOO_LOW","_gasFeeEstimates$low","suggestedMaxPriorityFeePerGas","MAX_PRIORITY_FEE_TOO_LOW","high","MAX_PRIORITY_FEE_HIGH_WARNING","_gasFeeEstimates$low2","suggestedMaxFeePerGas","MAX_FEE_TOO_LOW","MAX_FEE_HIGH_WARNING","ethBalance","_transaction$txParams2","minimumTxCostInHexWei","add","ethBalanceInHexWei","greaterThan","defaultEstimateToUse","GasRecommendations","medium","modifyInPlace","initialRetryTxMeta","originalGasEstimate","previousGas","retryTxMeta","setRetryTxMeta","_gas3","editGasModeIsSpeedUpOrCancel","_useGasFeeEstimates","useGasFeeEstimates","userPrefersAdvancedGas","estimateToUse","setInternalEstimateToUse","setEstimateUsed","custom","setGasLimit","properGasLimit","_transaction$txParams4","_transaction$txParams5","_transaction$txParams6","maximumGas","toPrefixedHexString","fee","WEI","toDenomination","toBase","GAS_LIMIT_TOO_HIGH_IN_ETH","dappSuggestedHigh","setGasPrice","setGasPriceHasBeenManuallySet","_useGasPriceInput","useGasPriceInput","setMaxFeePerGas","_useMaxFeePerGasInput","useMaxFeePerGasInput","setMaxPriorityFeePerGas","_useMaxPriorityFeePerGasInput","useMaxPriorityFeePerGasInput","_useGasEstimates","useGasEstimates","_useGasFeeErrors","useGasFeeErrors","handleGasLimitOutOfBoundError","_transaction$txParams7","transactionGasLimitDec","minimumGasLimitDec","speedUpTransaction","updateTransactionToTenPercentIncreasedGasFee","updateTransactionUsingDAPPSuggestedValues","updateTransactionUsingEstimate","_useTransactionFunctions","useTransactionFunctions","onManualChange","gasPriceHasBeenManuallySet","txGasPrice","feeParamsAreCustom","hexWEIToDecGWEI","initialGasPriceEstimates","gasPriceEstimatesHaveNotChanged","getGasPriceEstimate","legacy","ethGasPrice","_gasFeeEstimates$medi","_gasFeeEstimates$medi2","temporaryGasSettings","isEIP1559Transaction","transactionMaxFeePerGas","transactionMaxPriorityFeePerGas","startsWith","getHighestIncrementedFee","transactionGasPrice","originalFee","currentEstimate","buffedOriginalHexWei","addTenPercentAndRound","currentEstimateHexWei","_hardwareWallets","ledgerTransportType","getLedgerTransportType","transportStatus","getLedgerTransportStatus","webHidConnectedStatus","getLedgerWebHidConnectedStatus","isLedgerWallet","LedgerTransportTypes","webhid","WebHIDConnectedStatuses","connected","HardwareTransportStates","transportedCreated","attemptLedgerTransportCreation","setLedgerTransportStatus","verified","unknownFailure","deviceOpenFailure","determineTransportStatus","_window$navigator","devices","navigator","hid","getDevices","webHidIsConnected","device","vendorId","LEDGER_USB_VENDOR_ID","setLedgerWebHidConnectedStatus","notConnected","initialConnectedDeviceCheck","initialMaxFeePerGas","getMaxFeePerGasFromTransaction","getGasFeeEstimate","initialMaxPriorityFeePerGas","getMaxPriorityFeePerGasFromTransaction","isNullOrUndefined","feeInHexWei","queueType","pendingApprovals","pendingApprovalsSortedSelector","confirmation_type","queue_size","queue_type","ConfirmationQueued","Confirmations","unapprovedMessagesCount","getTotalUnapprovedMessagesCount","unconfirmedMessagesList","unconfirmedMessagesHashSelector","rejectAllMessages","isRequestType","requestId","fragmentId","generateSignatureUniqueId","updateEventFragment","fragmentPayload","txDataSelector","fragment","selectMatchingFragment","fragmentOptions","existingId","fragmentExists","gasTransactionId","_transactionId","createTransactionEventFragment","useTransactionFunctionType","gasLimitValue","maxPriorityFeePerGasValue","getTxMeta","cancel","speedUp","estimateSuggested","newGasSettings","updatedTxMeta","updateSwapsUserFeeLevel","updateCustomSwapsEIP1559GasParams","updatePreviousGasParams","createCancelTransaction","createSpeedUpTransaction","initTransaction","newMaxPriorityFeePerGas","isZero","tenPercentIncreased","gasFeeEstimateToUse","dappSuggestedGasFees","dAppSuggested","useTransactionInfo","_allNftContracts$sele","allNftContracts","selectedInternalAccount","isNftTransfer","contract","fallback","_gasFeeEstimates$esti","showConfirmationAdvancedDetails","selectUseTransactionSimulations","useTransactionSimulations","DomainInput","_event$clipboardData$","clipboardData","items","clipboardItem","getAsString","text","trim","isBurnAddress","isValidHexAddress","mixedCaseUseChecksum","onPaste","onValidAddressTyped","internalSearch","lookupDomainName","resetDomainResolution","isHexString","initializeDomainSlice","selectedAddress","selectedName","userInput","useBlockie","hasSelectedAddress","shortenedAddress","AvatarAccount","AvatarAccountVariant","Blockies","Jazzicon","Size","MD","borderColor","backgroundDefault","bodySm","ellipsis","ButtonIcon","iconName","Close","ariaLabel","onReset","IconSize","Sm","dir","spellCheck","autoFocus","scanQrCode","Scan","IconColor","iconDefault","primaryDefault","metricsEvent","_domains","_domainInput","getUseBlockie","debounce","domainName","_box","_networkAccountBalanceHeader","_urlIcon","_contractTokenValues","_reviewSpendingCap","_pageContainer","_contractDetailsModal","_approveContentCard","_customSpendingCap","_dialog","_tokens","_useSimulationFailureWarning","_simulationErrorMessage","_securityProviderBannerMessage","_confirmPageContainerContent","_customNonce","_securityProvider2","ALLOWED_HOSTS","TokenAllowance","siteImage","showCustomizeGasModal","hostname","URL","thisOriginIsAllowedToSkipFirstPage","getCustomTokenAmount","customSpendingCap","setCustomSpendingCap","showContractDetails","setShowContractDetails","inputChangeInProgress","setInputChangeInProgress","showFullTxDetails","setShowFullTxDetails","isFirstPage","setIsFirstPage","errorText","setErrorText","useSimulationFailureWarning","getTargetAccountWithSendEtherInfo","networkIdentifier","getNetworkIdentifier","getNextSuggestedNonce","replaceCommaToDot","customPermissionAmount","NUM_W_OPT_DECIMAL_COMMA_OR_DOT_REGEX","test","maxTokenAmount","calcTokenAmount","MAX_TOKEN_ALLOWANCE_AMOUNT","getCustomTxParamsData","disableNextButton","disableApproveButton","handleApprove","contractMethodName","originalApprovalAmount","finalApprovalAmount","handleBackClick","handleNextNonce","handleUpdateCustomNonce","isEmpty","renderContractTokenValues","tokenName","submitButtonType","ConfirmPageContainerNavigation","paddingLeft","paddingRight","DISPLAY","FLEX","flexDirection","FLEX_DIRECTION","ROW","spaceBetween","as","textMuted","fontWeight","FontWeight","Bold","textAlign","TextAlign","End","accountName","accountBalance","accountAddress","marginLeft","marginRight","isSuspiciousResponse","securityProviderResponse","ConfirmPageContainerWarning","paddingTop","paddingBottom","Color","borderMuted","borderStyle","BorderStyle","solid","borderWidth","fallbackClassName","headingMd","align","Center","dappProposedValue","siteOrigin","passTheErrorText","tokenValue","parseFloat","Tag","showAdvanceGasFeeOptions","onEditClick","renderTransactionDetailsContent","noBorder","hideGasDetails","showCustomizeNonceModal","handleCustomizeNonceModal","COLUMN","renderDataContent","PageContainerFooter","setCustomTokenAmount","preventDefault","onClose","ERC20_DEFAULT_DECIMALS","fetchErc20Decimals","memoize","decStr","getTokenStandardAndDetails","radix","parsedDec","isFinite","_snapsUtils","_popover","_connectedAccountsList","_connectedAccountsPermissions","_connectedSnaps","ConnectedAccounts","accountToConnect","activeTabOrigin","isActiveTabExtension","connectAccount","connectedAccounts","permissions","removePermittedAccount","setSelectedAccount","subjectMetadata","originOfActiveTab","permissionSubjects","_permissionSubjects$o","_permissionSubjects$o2","_permissionSubjects$o3","connectedSubjectsMetadata","subjectHasSnaps","WALLET_SNAP_PERMISSION_KEY","connectedSnaps","wallet_snap","caveats","connectedSnapsMetaData","sub","connectedAccountsDescription","getURLHost","headerProps","footerClassName","ConnectedAccountsPermissions","footer","bodyMdMedium","setSelectedAddress","accountId","shouldRenderListOptions","connectedSubjects","arrayOf","_connectedAccounts","_internalAccounts$fin","activeTab","getAccountToConnectToActiveTab","getOrderedConnectedAccountsForActiveTab","internalAccountsMap","Map","connectedAccountsWithName","_internalAccountsMap$","accountToConnectWithName","getPermissionsForActiveTab","getSubjectMetadata","getOriginOfCurrentTab","getPermissionSubjects","isExtensionUrl","addPermittedAccount","setSelectedInternalAccount","_connectedSitesList","ConnectedSites","sitePendingDisconnect","subjectKey","disconnectAccount","clearPendingDisconnect","disconnectAllAccounts","getOpenMetamaskTabsIds","renderConnectedSitesList","onDisconnect","setPendingDisconnect","renderConnectedSitesPopover","accountLabel","closePopover","tabToConnect","requestAccountsPermission","renderDisconnectPopover","permittedAccountsByOrigin","numPermittedAccounts","objectOf","_connectedSites","_permittedAccountsByO","openMetaMaskTabs","appState","getConnectedSubjectsForSelectedAddress","originOfCurrentTab","getPermittedAccountsByOrigin","currentTabHasNoAccounts","subjects","subject","permissionMethodNames","parentCapability","removePermissionsFor","requestAccountsPermissionWithId","CONNECT_ROUTE","_checkBox","_dropdown","AccountList","pathValue","getPage","selectedPath","onAccountRestriction","setPath","_this$props$accounts$","renderHdPathSelector","hdPaths","onPathChange","options","selectedOption","capitalizeDevice","slice","toUpperCase","renderHeader","shouldShowHDPaths","HardwareDeviceNames","ledger","lattice","trezor","renderAccounts","accountAlreadyConnected","checked","selectedAccounts","accountLink","getAccountLink","blockExplorerDomain","getURLHostName","onAccountChange","htmlFor","Accounts","link_type","block_explorer_domain","global","platform","openTab","renderPagination","goToPreviousPage","goToNextPage","renderButtons","large","bind","onUnlockAccounts","renderForgetDevice","onForgetDevice","contextTypes","_selectHardware","_accountList","U2F_ERROR","LEDGER_ERRORS_CODES","MEW_PATH","BIP44_PATH","LATTICE_STANDARD_BIP44_PATH","LATTICE_LEDGER_LIVE_PATH","LATTICE_MEW_PATH","HD_PATHS","LEDGER_HD_PATHS","LATTICE_HD_PATHS","TREZOR_HD_PATHS","getErrorMessage","errorCode","ConnectHardwareForm","browserSupported","unlocked","isFirefox","defaultHdPaths","setHardwareWalletDefaultHdPath","page","hdPath","connectHardware","showTemporaryAlert","newAccounts","normalizedAddress","balanceValue","formatBalance","ledgerErrorCode","forgetDevice","_","unlockHardwareWalletAccounts","AccountAdded","account_type","MetaMetricsEventAccountType","Hardware","account_hardware_type","AccountAddFailed","UNSAFE_componentWillReceiveProps","nextProps","_accounts$normalizedA","checkIfUnlocked","useAgent","userAgent","checkHardwareStatus","setTimeout","hideAlert","SECOND","renderError","warningDefault","Button","BUTTON_VARIANT","LINK","HARDWARE_CONNECTION","BUTTON_SIZES","INHERIT","LEDGER_FIREFOX_U2F_GUIDE","renderContent","connectToHardwareWallet","oneOf","getMetaMaskAccountsConnected","deviceName","indexes","hdPathDescription","msg","_logoLedger","_logoQrBased","_logoTrezor","_logoLattice","_window","_extends","assign","arguments","source","apply","isUSBSupported","usb","SelectHardware","selectedDevice","trezorRequestDevicePending","requestDevice","filters","productId","renderConnectToTrezorButton","selected","renderConnectToLatticeButton","renderConnectToLedgerButton","renderConnectToQRButton","qr","renderContinueButton","LG","renderFooter","renderUnsupportedBrowser","FlexDirection","Column","bodyMd","Row","ButtonIconSize","renderTutorialSteps","renderLedgerTutorialSteps","renderTrezorTutorialSteps","renderLatticeTutorialSteps","renderQRHardwareWalletSteps","steps","live","asset","dimensions","step","Navigation","openWindow","HardwareAffiliateLinks","HardwareAffiliateTutorialLinks","alt","gridplus","keystone","airgap","coolwallet","dcent","imtoken","onekey","ngrave","renderConnectScreen","CONNECT_HARDWARE_ROUTE","_connectHardware","flexGrow","AvatarIcon","UserCircleAdd","AvatarIconSize","headingLg","overflowWrap","OverflowWrap","Anywhere","inherit","Medium","_createSnapAccount","ErrorPage","PureComponent","renderErrorDetail","renderErrorStack","stack","isPopup","ENVIRONMENT_TYPE_POPUP","supportLink","SUPPORT_REQUEST_LINK","SupportLinkClicked","contextPropsIntoEventProperties","MetaMetricsContextProp","PageTitle","code","_error","_termsOfUsePopup","_recoveryPhraseReminder","_whatsNewPopup","_onboarding","_smartTransactionsOptInModal","_homeNotification","_multipleNotifications","_typography","_mv","_actionableMessage","_multiRpcEditModal","_uiUtils","_accountOverview","shouldCloseNotificationPopup","totalUnapprovedAndQueuedRequestCount","hasApprovalFlows","isSigningQRHardwareTransaction","Home","_location$state","canShowBlockageNotification","notificationClosing","redirecting","setRecoveryPhraseReminderHasBeenShown","setRecoveryPhraseReminderLastShown","Date","getTime","setTermsOfUseLastAgreed","Onboarding","TermsOfUseAccepted","SUPPORT_LINK","setOutdatedBrowserWarningLastShown","setDataCollectionForMarketing","handleClose","AnalyticsPreferenceSelected","has_marketing_consent","handleConsent","consent","Modal","isOpen","ModalOverlay","ModalContent","ModalHeader","gap","ModalBody","METAMETRICS_SETTINGS_LINK","ModalFooter","setConnectedStatusPopoverHasBeenShown","showArrow","CustomBackground","USER_GUIDE_DAPPS","closeNotificationPopup","firstPermissionsRequestId","haveSwapsQuotes","showAwaitingSwapScreen","hasWatchTokenPendingApprovals","hasWatchNftPendingApprovals","swapsFetchParams","hasTransactionPendingApprovals","stayOnHomePage","checkStatusAndNavigate","_location$state2","pendingConfirmationsPrioritized","canRedirect","AWAITING_SWAP_ROUTE","VIEW_QUOTE_ROUTE","BUILD_QUOTE_ROUTE","CONFIRMATION_V_NEXT_ROUTE","CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE","CONFIRM_ADD_SUGGESTED_NFT_ROUTE","fetchBuyableChains","getDerivedStateFromProps","_prevProps","hasAllowedPopupRedirectApprovals","newNetworkAddedConfigurationId","setActiveNetwork","clearNewNetworkAdded","prevNewNetworkAddedConfigurationId","renderNotifications","shouldShowSeedPhraseReminder","shouldShowWeb3ShimUsageNotification","setWeb3ShimUsageAlertDismissed","disableWeb3ShimUsageAlert","infuraBlocked","showOutdatedBrowserWarning","newNftAddedMessage","setNewNftAddedMessage","newNetworkAddedName","editedNetwork","removeNftMessage","setRemoveNftMessage","newTokensImported","newTokensImportedError","setNewTokensImported","setNewTokensImportedError","clearEditedNetwork","onAutoHide","setEditedNetwork","autoHideDelay","outdatedBrowserNotificationDescriptionText","isMv3ButOffscreenDocIsMissing","autoHideTime","InlineFlex","editCompleted","newNetwork","bodySmBold","descriptionText","LEGACY_WEB3","ignoreText","onIgnore","disable","checkboxText","checkboxTooltipText","acceptText","onAccept","backUpSRPRoute","ONBOARDING_SECURE_YOUR_WALLET_ROUTE","openExtensionInBrowser","infoText","INFURA_BLOCKAGE","onOutdatedBrowserWarningClose","defaultHomeActiveTabName","onTabClick","useExternalServices","setBasicFunctionalityModalOpen","forgottenPassword","participateInMetaMetrics","dataCollectionForMarketing","connectedStatusPopoverHasBeenShown","seedPhraseBackedUp","showRecoveryPhraseReminder","showTermsOfUsePopup","showWhatsNewPopup","hideWhatsNewPopup","completedOnboarding","onboardedInThisUISession","announcementsToShow","firstTimeFlowType","isSmartTransactionsOptInModalAvailable","showMultiRpcModal","RESTORE_VAULT_ROUTE","canSeeModals","FirstTimeFlowType","import","showSmartTransactionsOptInModal","showWhatsNew","showMultiRpcEditModal","showTermsOfUse","CONNECTED_ROUTE","CONNECTED_ACCOUNTS_ROUTE","renderOnboardingPopover","hasBackedUp","onConfirm","onRecoveryPhraseReminderClose","onAcceptTermsOfUse","renderPopover","AccountOverview","onSupportLinkClick","_app2","_alerts","_home","_firstPermissionsRequ","_getApprovalFlows","swapsState","swapsEnabled","getSwapsFeatureIsLive","getUnapprovedTemplatedConfirmations","envType","firstPermissionsRequest","_firstPermissionsRequ2","getFirstPermissionRequest","getFirstSnapInstallOrUpdateRequest","getWeb3ShimUsageAlertEnabledness","activeTabHasPermissions","getWeb3ShimUsageStateForOrigin","Web3ShimUsageAlertStates","recorded","getSuggestedTokens","getSuggestedNfts","hasPendingApprovals","confirmAccountCreation","confirmAccountRemoval","showNameSnapAccount","showSnapAccountRedirect","getUseExternalServices","isBasicConfigurationModalOpen","showBasicFunctionalityModal","getShouldShowSeedPhraseReminder","quotes","fetchParams","routeState","getInfuraBlocked","getSortedAnnouncementsToShow","getShowRecoveryPhraseReminder","getShowTermsOfUse","getIsBrowserDeprecated","getShowOutdatedBrowserWarning","getNewNetworkAdded","getEditedNetwork","getIsSigningQRHardwareTransaction","getNewNftAddedMessage","getRemoveNftMessage","getNewTokensImported","getNewTokensImportedError","getIsSmartTransactionsOptInModalAvailable","preferences","val","setAlertEnabledness","AlertTypes","web3ShimUsage","lastShown","lastAgreed","newTokens","setNewNetworkAdded","networkConfigurationId","openBasicFunctionalityModal","Sentry","_metamaskNotifications","_currencyRate","Index","getDerivedStateFromError","componentDidCatch","errorId","store","I18nProvider","LegacyI18nProvider","HashRouter","hashType","MetaMetricsProvider","LegacyMetaMetricsProvider","CurrencyRateProvider","MetamaskNotificationsProvider","_createNewVault","RestoreVaultPage","password","seedPhrase","createNewVaultAndRestore","leaveImportSeedScreenState","Retention","isLoading","displayMd","ADD_MISSING_ACCOUNTS","IMPORT_ACCOUNTS","ADD_CUSTOM_TOKENS","handleImport","unMarkPasswordForgotten","pw","seed","screen","setScreen","PASSWORD_PROMPT_SCREEN","setPassword","seedWords","setSeedWords","completedLongPress","setCompletedLongPress","setError","isShowingHoldModal","setIsShowingHoldModal","passwordBox","document","getElementById","focus","renderQR","qrImage","_qrcodeGenerator","addData","make","requestRevealSeedWords","revealedSeedWords","Keys","KeyExportRevealed","key_type","MetaMetricsEventKeyType","Srp","KeyExportFailed","SECRET_RECOVERY_PHRASE","NON_CUSTODIAL_WALLET","SrpViewSrpText","_tabs","Tabs","defaultActiveTabName","SrpViewsSrpQR","Tab","activeClassName","tabKey","Label","_exportTextContainer","onClickCopy","KeyExportCopied","copy_method","SrpCopiedToClipboard","dangerouslySetInnerHTML","__html","createTableTag","inputProps","TextFieldType","Password","TextFieldSize","Large","HelpText","HelpTextSeverity","SrpRevealCloseClicked","KeyExportCanceled","SrpRevealCancelled","KeyExportRequested","SrpRevealNextClicked","_holdToRevealModal","SrpHoldToRevealCloseClicked","onLongPressed","REVEAL_SEED_SCREEN","holdToRevealType","_lock","Lock","lockMetamask","isUnlocked","_notificationDetails","NotificationDetailsBody","body","notification","Image","Description","From","To","Account","Asset","AssetReceived","Status","Rate","NetworkFee","NotificationDetailsFooter","ScanLink","ExtensionLink","NotificationDetailsHeader","onClickBack","HeaderBase","startAccessory","endAccessory","redirectToNotifications","NOTIFICATIONS_ROUTE","useModalNavigation","useLocation","getExtractIdentifier","getMetamaskNotificationById","useNotificationByPath","notificationData","markNotificationAsRead","_useNotifications","useMarkNotificationAsRead","isRead","useEffectOnNotificationView","_notificationComponents","hasNotificationComponents","ncs","NotificationComponents","_multichain","NotificationsPage","_notificationDetailsHeader","details","Content","_notificationDetailsBody","_notificationDetailsFooter","parts","_notificationsSettings","listNotifications","_metamaskNotifications2","useMetamaskNotificationsContext","isMetamaskNotificationsEnabled","selectIsMetamaskNotificationsEnabled","toggleValue","setToggleValue","isUpdatingMetamaskNotifications","getIsUpdatingMetamaskNotifications","isProfileSyncingEnabled","_profileSyncing","selectIsProfileSyncingEnabled","enableNotifications","errorEnableNotifications","useEnableNotifications","disableNotifications","errorDisableNotifications","useDisableNotifications","toggleNotifications","NotificationSettings","NotificationsSettingsUpdated","settings_type","was_profile_syncing_on","old_value","new_value","privacyLink","infoDefault","flexStart","NotificationsSettingsBox","onToggle","NotificationsSettingsType","errorDefault","_useSwitchNotifications","NotificationsSettingsPerAccount","isEnabled","disabledSwitch","refetchAccountSettings","toggleAccount","isUpdatingAccount","accountError","switchAccountNotifications","useSwitchAccountNotificationsChange","refetch","useListNotifications","useUpdateAccountSetting","handleToggleAccountNotifications","NotificationsSettingsAccount","isFeatureAnnouncementsEnabled","selectIsFeatureAnnouncementsEnabled","onChangeFeatureAnnouncements","errorFeatureAnnouncements","useSwitchFeatureAnnouncementsChange","featureAnnouncementsEnabled","setFeatureAnnouncementsEnabled","icon","Star","BorderColor","borderBottomWidth","loadingAllowNotifications","setLoadingAllowNotifications","accountAddresses","accountSettingsProps","useAccountSettingsProps","updatingAccounts","accountsBeingUpdated","update","_notificationsSettingsAllowNotifications","NotificationsSettingsAllowNotifications","_notificationsSettingsTypes","NotificationsSettingsTypes","_accountSettingsProps","_notificationsSettingsPerAccount","initialLoading","selectIsMetamaskNotificationsFeatureSeen","backgroundColor","infoMuted","borderRadius","BorderRadius","labelProps","_notifications","_notificationServicesController","_translate","_nodeGuard","_notification","_notificationListItemIcon","TRIGGER_TYPES","NotificationServicesController","Constants","isERC1155Notification","isOfTypeNodeGuard","ERC1155_RECEIVED","ERC1155_SENT","isSent","getTitle","createTextItems","components","guardFn","item","_notification$data$nf","_notification$data$nf2","_notification$data$nf3","_n$data$nft","NotificationListItem","nft","NotificationListItemIconType","Nft","Token","badge","Arrow2UpRight","Received","BadgeWrapperPosition","bottomRight","createdAt","token_id","NotificationDetailTitle","date","formatIsoDateString","_notification$data$nf4","_notification$data$nf5","_notification$data$nf6","chain_id","nativeCurrencyLogo","nativeCurrencyName","getNetworkDetailsByChainId","NotificationDetailNft","networkSrc","tokenSrc","NotificationDetailAddress","side","NotificationDetailInfo","Check","successDefault","successMuted","detail","_notification$data$nf7","_notification$data$nf8","_notification$data$nf9","NotificationDetailCollection","badgeSrc","NotificationDetailAsset","NotificationDetailNetworkFee","NotificationDetailBlockExplorerButton","txHash","tx_hash","isERC20Notification","ERC20_RECEIVED","ERC20_SENT","getAmount","shouldEllipse","NotificationDetailCopyButton","displayText","topRight","fiatValue","getUsdAmount","usd","isERC721Notification","ERC721_RECEIVED","ERC721_SENT","isETHNotification","ETH_RECEIVED","ETH_SENT","getDescription","nativeCurrencySymbol","formatAmount","eth","isFeatureAnnouncementNotification","FEATURES_ANNOUNCEMENT","shortDescription","XL","longDescription","extensionLink","NotificationDetailButton","ButtonVariant","Primary","extensionLinkText","extensionLinkRoute","endIconName","isExternal","_erc20SentReceived","_erc721SentReceived","_erc1155SentReceived","_ethSentReceived","_featureAnnouncement","_stake","_swapCompleted","_lidoWithdrawalRequested","_lidoStakeReadyToBeWithdrawn","ROCKETPOOL_STAKE_COMPLETED","ROCKETPOOL_UNSTAKE_COMPLETED","LIDO_STAKE_COMPLETED","LIDO_WITHDRAWAL_COMPLETED","LIDO_WITHDRAWAL_REQUESTED","METAMASK_SWAP_COMPLETED","LIDO_STAKE_READY_TO_BE_WITHDRAWN","isLidoReadyWithDrawnNotification","staked_eth","trigger_id","Stake","isLidoWithdrawalRequestedNotification","stake_in","types","SnapComponent","snapNotification","snapsNameGetter","getSnapName","NotificationListItemSnap","snapMessage","handleSnapClick","markNotificationsAsRead","NotificationInteraction","NotificationClicked","notification_id","notification_type","previously_read","handleSnapButton","getSnapRoute","isStakeNotification","TITLE_MAP","DIRECTION_MAP","STAKING_PROVIDER_MAP","direction","stake_out","stakingProp","isSwapCompletedNotification","token_out","SwapHorizontal","token_in","rate","handleNotificationClick","Notification","headingSm","_types","NotificationsListReadAllButton","notifications","unreadNotifications","getUnreadNotifications","notificationsRead","SNAP","MarkAllNotificationsRead","unreadNotificationIds"],"mappings":"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","file":"../metamask/ui-8.js","sourcesContent":["import { connect } from 'react-redux';\nimport ConfirmDeployContract from './confirm-deploy-contract.component';\n\nconst mapStateToProps = (state) => {\n  const { confirmTransaction: { txData } = {} } = state;\n\n  return {\n    txData,\n  };\n};\n\nexport default connect(mapStateToProps)(ConfirmDeployContract);\n","export { default } from './confirm-deploy-contract.container';\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { AssetType } from '../../../../shared/constants/transaction';\nimport { clearConfirmTransaction } from '../../../ducks/confirm-transaction/confirm-transaction.duck';\nimport { editExistingTransaction } from '../../../ducks/send';\nimport { SEND_ROUTE } from '../../../helpers/constants/routes';\nimport ConfirmTransactionBase from '../confirm-transaction-base';\n\nconst ConfirmSendEther = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const editTransaction = async (txData) => {\n    const { id } = txData;\n    await dispatch(editExistingTransaction(AssetType.native, id.toString()));\n    dispatch(clearConfirmTransaction());\n  };\n\n  const handleEdit = ({ txData }) => {\n    editTransaction(txData).then(() => {\n      history.push(SEND_ROUTE);\n    });\n  };\n\n  return (\n    <ConfirmTransactionBase\n      actionKey=\"confirm\"\n      onEdit={(confirmTransactionData) => handleEdit(confirmTransactionData)}\n    />\n  );\n};\n\nexport default ConfirmSendEther;\n","export { default } from './confirm-send-ether';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport ConfirmTokenTransactionBase from '../confirm-token-transaction-base/confirm-token-transaction-base';\nimport { SEND_ROUTE } from '../../../helpers/constants/routes';\nimport { editExistingTransaction } from '../../../ducks/send';\nimport {\n  contractExchangeRateSelector,\n  getCurrentCurrency,\n} from '../../../selectors';\nimport {\n  getConversionRate,\n  getNativeCurrency,\n} from '../../../ducks/metamask/metamask';\nimport { clearConfirmTransaction } from '../../../ducks/confirm-transaction/confirm-transaction.duck';\nimport { showSendTokenPage } from '../../../store/actions';\nimport {\n  AssetType,\n  TokenStandard,\n} from '../../../../shared/constants/transaction';\n\nexport default function ConfirmSendToken({\n  assetStandard,\n  toAddress,\n  tokenAddress,\n  assetName,\n  tokenSymbol,\n  tokenAmount,\n  tokenId,\n  transaction,\n  image,\n  ethTransactionTotal,\n  fiatTransactionTotal,\n  hexMaximumTransactionFee,\n}) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const handleEditTransaction = async ({ txData }) => {\n    const { id } = txData;\n    await dispatch(editExistingTransaction(AssetType.token, id.toString()));\n    dispatch(clearConfirmTransaction());\n    dispatch(showSendTokenPage());\n  };\n\n  const handleEdit = (confirmTransactionData) => {\n    handleEditTransaction(confirmTransactionData).then(() => {\n      history.push(SEND_ROUTE);\n    });\n  };\n  const conversionRate = useSelector(getConversionRate);\n  const nativeCurrency = useSelector(getNativeCurrency);\n  const currentCurrency = useSelector(getCurrentCurrency);\n  const contractExchangeRate = useSelector(contractExchangeRateSelector);\n\n  let title, subtitle;\n\n  if (assetStandard === TokenStandard.ERC721) {\n    title = assetName;\n    subtitle = `#${tokenId}`;\n  } else if (assetStandard === TokenStandard.ERC20) {\n    title = `${tokenAmount} ${tokenSymbol}`;\n  }\n\n  return (\n    <ConfirmTokenTransactionBase\n      onEdit={handleEdit}\n      conversionRate={conversionRate}\n      currentCurrency={currentCurrency}\n      nativeCurrency={nativeCurrency}\n      contractExchangeRate={contractExchangeRate}\n      title={title}\n      subtitle={subtitle}\n      assetStandard={assetStandard}\n      assetName={assetName}\n      tokenSymbol={tokenSymbol}\n      tokenAmount={tokenAmount}\n      tokenId={tokenId}\n      transaction={transaction}\n      image={image}\n      toAddress={toAddress}\n      tokenAddress={tokenAddress}\n      ethTransactionTotal={ethTransactionTotal}\n      fiatTransactionTotal={fiatTransactionTotal}\n      hexMaximumTransactionFee={hexMaximumTransactionFee}\n    />\n  );\n}\n\nConfirmSendToken.propTypes = {\n  tokenAmount: PropTypes.string,\n  assetStandard: PropTypes.string,\n  assetName: PropTypes.string,\n  tokenSymbol: PropTypes.string,\n  image: PropTypes.string,\n  tokenId: PropTypes.string,\n  toAddress: PropTypes.string,\n  tokenAddress: PropTypes.string,\n  transaction: PropTypes.shape({\n    origin: PropTypes.string,\n    txParams: PropTypes.shape({\n      data: PropTypes.string,\n      to: PropTypes.string,\n      from: PropTypes.string,\n    }),\n  }),\n  ethTransactionTotal: PropTypes.string,\n  fiatTransactionTotal: PropTypes.string,\n  hexMaximumTransactionFee: PropTypes.string,\n};\n","export { default } from './confirm-send-token';\n","import PropTypes from 'prop-types';\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, withRouter } from 'react-router-dom';\nimport log from 'loglevel';\nimport { cloneDeep } from 'lodash';\nimport { SubjectType } from '@metamask/permission-controller';\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport * as actions from '../../../store/actions';\nimport txHelper from '../../../helpers/utils/tx-helper';\nimport SignatureRequest from '../components/signature-request';\nimport SignatureRequestOriginal from '../components/signature-request-original';\nimport SignatureRequestSIWE from '../components/signature-request-siwe';\nimport Loading from '../../../components/ui/loading-screen';\nimport { useRouting } from '../hooks/useRouting';\nimport {\n  getTotalUnapprovedSignatureRequestCount,\n  getTargetSubjectMetadata,\n  getCurrentNetworkTransactions,\n  getUnapprovedTransactions,\n  getInternalAccounts,\n  getMemoizedUnapprovedPersonalMessages,\n  getMemoizedUnapprovedTypedMessages,\n  getMemoizedCurrentChainId,\n  getMemoizedTxId,\n} from '../../../selectors';\nimport { useInsightSnaps } from '../../../hooks/snaps/useInsightSnaps';\nimport { MESSAGE_TYPE } from '../../../../shared/constants/app';\nimport { getSendTo } from '../../../ducks/send';\n\nconst signatureSelect = (txData, targetSubjectMetadata) => {\n  const {\n    type,\n    msgParams: { version, siwe },\n  } = txData;\n\n  // Temporarily direct only v3 and v4 requests to new code.\n  if (\n    type === MESSAGE_TYPE.ETH_SIGN_TYPED_DATA &&\n    (version === 'V3' || version === 'V4')\n  ) {\n    return SignatureRequest;\n  }\n\n  if (siwe?.isSIWEMessage && targetSubjectMetadata !== SubjectType.Snap) {\n    return SignatureRequestSIWE;\n  }\n\n  return SignatureRequestOriginal;\n};\n\nconst ConfirmTxScreen = ({ match }) => {\n  const dispatch = useDispatch();\n  const { navigateToMostRecentOverviewPage } = useRouting();\n  const unapprovedMessagesTotal = useSelector(\n    getTotalUnapprovedSignatureRequestCount,\n  );\n  const sendTo = useSelector(getSendTo);\n  const internalAccounts = useSelector(getInternalAccounts);\n\n  const { currentCurrency, blockGasLimit, signatureSecurityAlertResponses } =\n    useSelector((state) => state.metamask);\n  const unapprovedPersonalMsgs = useSelector(\n    getMemoizedUnapprovedPersonalMessages,\n  );\n  const unapprovedTypedMessages = useSelector(\n    getMemoizedUnapprovedTypedMessages,\n  );\n\n  const unapprovedTxs = useSelector(getUnapprovedTransactions);\n  const currentNetworkTxList = useSelector(getCurrentNetworkTransactions);\n  const chainId = useSelector(getMemoizedCurrentChainId);\n  const index = useSelector(getMemoizedTxId);\n\n\n  const [prevValue, setPrevValues] = useState();\n  const history = useHistory();\n\n  useEffect(() => {\n    const unconfTxList = txHelper(\n      unapprovedTxs || {},\n      {},\n      {},\n      {},\n      {},\n      {},\n      chainId,\n    );\n    if (unconfTxList.length === 0 && !sendTo && unapprovedMessagesTotal === 0) {\n      navigateToMostRecentOverviewPage();\n    }\n  }, [\n    chainId,\n    navigateToMostRecentOverviewPage,\n    sendTo,\n    unapprovedMessagesTotal,\n    unapprovedTxs,\n  ]);\n\n  useEffect(\n    () => {\n      if (!prevValue) {\n        setPrevValues({ index, unapprovedTxs });\n        return;\n      }\n\n      let prevTx;\n      const { params: { id: transactionId } = {} } = match;\n      if (transactionId) {\n        prevTx = currentNetworkTxList.find(\n          ({ id }) => `${id}` === transactionId,\n        );\n      } else {\n        const { index: prevIndex, unapprovedTxs: prevUnapprovedTxs } =\n          prevValue;\n        const prevUnconfTxList = txHelper(\n          prevUnapprovedTxs,\n          {},\n          {},\n          {},\n          {},\n          {},\n          chainId,\n        );\n        const prevTxData = prevUnconfTxList[prevIndex] || {};\n        prevTx =\n          currentNetworkTxList.find(({ id }) => id === prevTxData.id) || {};\n      }\n\n      const unconfTxList = txHelper(\n        unapprovedTxs || {},\n        {},\n        {},\n        {},\n        {},\n        {},\n        chainId,\n      );\n\n      if (prevTx && prevTx.status === TransactionStatus.dropped) {\n        dispatch(\n          actions.showModal({\n            name: 'TRANSACTION_CONFIRMED',\n            onSubmit: () => navigateToMostRecentOverviewPage(),\n          }),\n        );\n        return;\n      }\n\n      if (\n        unconfTxList.length === 0 &&\n        !sendTo &&\n        unapprovedMessagesTotal === 0\n      ) {\n        navigateToMostRecentOverviewPage();\n      }\n\n      setPrevValues({ index, unapprovedTxs });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [],\n  );\n\n  const { params: { id: txIdFromPath } = {} } = match;\n\n  const txData = useMemo(() => {\n    const unconfTxList = txHelper(\n      unapprovedTxs || {},\n      unapprovedPersonalMsgs,\n      {},\n      {},\n      unapprovedTypedMessages,\n      chainId,\n    );\n\n    log.info(`rendering a combined ${unconfTxList.length} unconf msgs & txs`);\n\n    const unconfirmedTx = txIdFromPath\n      ? unconfTxList.find(({ id }) => `${id}` === txIdFromPath)\n      : unconfTxList[index];\n    return unconfirmedTx ? cloneDeep(unconfirmedTx) : {};\n  }, [\n    chainId,\n    index,\n    txIdFromPath,\n    unapprovedPersonalMsgs,\n    unapprovedTxs,\n    unapprovedTypedMessages,\n  ]);\n\n  const { warnings } = useInsightSnaps(txData.id);\n  const resolvedSecurityAlertResponse =\n    signatureSecurityAlertResponses?.[\n      txData.securityAlertResponse?.securityAlertId\n    ];\n\n  if (resolvedSecurityAlertResponse) {\n    txData.securityAlertResponse = resolvedSecurityAlertResponse;\n  }\n\n  const targetSubjectMetadata = useSelector((state) =>\n    getTargetSubjectMetadata(state, txData.msgParams?.origin),\n  );\n\n  if (!txData.msgParams) {\n    return <Loading />;\n  }\n\n  const SigComponent = signatureSelect(txData, targetSubjectMetadata);\n\n  return (\n    <SigComponent\n      history={history}\n      txData={txData}\n      key={txData.id}\n      accounts={internalAccounts}\n      currentCurrency={currentCurrency}\n      blockGasLimit={blockGasLimit}\n      warnings={warnings}\n    />\n  );\n};\n\nConfirmTxScreen.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }),\n};\n\nexport default withRouter(ConfirmTxScreen);\n","import React, { useContext, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport BigNumber from 'bignumber.js';\nimport { useSelector } from 'react-redux';\nimport { getTokenTrackerLink } from '@metamask/etherscan-link';\nimport { I18nContext } from '../../../contexts/i18n';\nimport ConfirmTransactionBase from '../confirm-transaction-base';\nimport UserPreferencedCurrencyDisplay from '../../../components/app/user-preferenced-currency-display';\nimport {\n  formatCurrency,\n  convertTokenToFiat,\n  addFiat,\n  roundExponential,\n} from '../../../helpers/utils/confirm-tx.util';\nimport { PRIMARY } from '../../../helpers/constants/common';\nimport {\n  contractExchangeRateSelector,\n  getCurrentChainId,\n  getCurrentCurrency,\n  getRpcPrefsForCurrentProvider,\n  getSelectedInternalAccount,\n} from '../../../selectors';\nimport {\n  getConversionRate,\n  getNativeCurrency,\n  getNftContracts,\n} from '../../../ducks/metamask/metamask';\nimport { TokenStandard } from '../../../../shared/constants/transaction';\nimport {\n  getWeiHexFromDecimalValue,\n  hexWEIToDecETH,\n} from '../../../../shared/modules/conversion.utils';\nimport { EtherDenomination } from '../../../../shared/constants/common';\nimport { CHAIN_IDS, TEST_CHAINS } from '../../../../shared/constants/network';\nimport { ETH_DEFAULT_DECIMALS } from '../../../constants';\n\nexport default function ConfirmTokenTransactionBase({\n  image = '',\n  assetName,\n  toAddress,\n  tokenAddress,\n  tokenAmount = '0',\n  tokenSymbol,\n  tokenId,\n  assetStandard,\n  onEdit,\n  ethTransactionTotal,\n  fiatTransactionTotal,\n  hexMaximumTransactionFee,\n}) {\n  const t = useContext(I18nContext);\n  const contractExchangeRate = useSelector(contractExchangeRateSelector);\n  const nativeCurrency = useSelector(getNativeCurrency);\n  const currentCurrency = useSelector(getCurrentCurrency);\n  const conversionRate = useSelector(getConversionRate);\n  const rpcPrefs = useSelector(getRpcPrefsForCurrentProvider);\n  const chainId = useSelector(getCurrentChainId);\n  const { address: userAddress } = useSelector(getSelectedInternalAccount);\n  const nftCollections = useSelector(getNftContracts);\n\n  const ethTransactionTotalMaxAmount = Number(\n    hexWEIToDecETH(hexMaximumTransactionFee),\n  ).toFixed(ETH_DEFAULT_DECIMALS);\n\n  const getTitleTokenDescription = (renderType) => {\n    const useBlockExplorer =\n      rpcPrefs?.blockExplorerUrl ||\n      [...TEST_CHAINS, CHAIN_IDS.MAINNET, CHAIN_IDS.LINEA_MAINNET].includes(\n        chainId,\n      );\n\n    const nftCollection = nftCollections.find(\n      (collection) =>\n        collection.address.toLowerCase() === tokenAddress.toLowerCase(),\n    );\n    const titleTokenDescription =\n      tokenSymbol || nftCollection?.name || t('unknownCollection');\n\n    if (renderType === 'text') {\n      return titleTokenDescription;\n    }\n\n    if (useBlockExplorer) {\n      const blockExplorerLink = getTokenTrackerLink(\n        tokenAddress,\n        chainId,\n        null,\n        userAddress,\n        {\n          blockExplorerUrl: rpcPrefs?.blockExplorerUrl ?? null,\n        },\n      );\n      const blockExplorerElement = (\n        <>\n          <a\n            href={blockExplorerLink}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            title={tokenAddress}\n            className=\"confirm-approve-content__approval-asset-link\"\n          >\n            {titleTokenDescription}\n          </a>\n        </>\n      );\n      return blockExplorerElement;\n    }\n    return (\n      <>\n        <span\n          className=\"confirm-approve-content__approval-asset-title\"\n          title={tokenAddress}\n        >\n          {titleTokenDescription}\n        </span>\n      </>\n    );\n  };\n\n  const assetImage = image;\n  let title, subtitle, subtotalDisplay;\n  if (\n    assetStandard === TokenStandard.ERC721 ||\n    assetStandard === TokenStandard.ERC1155\n  ) {\n    title = assetName || getTitleTokenDescription();\n    subtitle = `#${tokenId}`;\n    subtotalDisplay =\n      assetName || `${getTitleTokenDescription('text')} #${tokenId}`;\n  } else if (assetStandard === TokenStandard.ERC20) {\n    title = `${tokenAmount} ${tokenSymbol}`;\n    subtotalDisplay = `${tokenAmount} ${tokenSymbol}`;\n  }\n\n  const hexWeiValue = useMemo(() => {\n    if (tokenAmount === '0' || !contractExchangeRate) {\n      return '0';\n    }\n\n    const decimalEthValue = new BigNumber(tokenAmount)\n      .times(\n        new BigNumber(contractExchangeRate ? String(contractExchangeRate) : 0),\n      )\n      .toFixed();\n\n    return getWeiHexFromDecimalValue({\n      value: decimalEthValue,\n      fromCurrency: EtherDenomination.ETH,\n      fromDenomination: EtherDenomination.ETH,\n    });\n  }, [tokenAmount, contractExchangeRate]);\n\n  const secondaryTotalTextOverride = useMemo(() => {\n    if (typeof contractExchangeRate === 'undefined') {\n      return formatCurrency(fiatTransactionTotal, currentCurrency);\n    }\n\n    const fiatTransactionAmount = convertTokenToFiat({\n      value: tokenAmount,\n      toCurrency: currentCurrency,\n      conversionRate,\n      contractExchangeRate,\n    });\n    const fiatTotal = addFiat(fiatTransactionAmount, fiatTransactionTotal);\n    const roundedFiatTotal = roundExponential(fiatTotal);\n    return formatCurrency(roundedFiatTotal, currentCurrency);\n  }, [\n    currentCurrency,\n    conversionRate,\n    contractExchangeRate,\n    fiatTransactionTotal,\n    tokenAmount,\n  ]);\n\n  const subtitleComponent = () => {\n    if (contractExchangeRate === undefined && subtitle === undefined) {\n      return <span>{t('noConversionRateAvailable')}</span>;\n    }\n    if (subtitle) {\n      return <span>{subtitle}</span>;\n    }\n    return (\n      <UserPreferencedCurrencyDisplay\n        value={hexWeiValue}\n        type={PRIMARY}\n        showEthLogo\n        hideLabel\n      />\n    );\n  };\n\n  return (\n    <ConfirmTransactionBase\n      assetStandard={assetStandard}\n      toAddress={toAddress}\n      image={assetImage}\n      onEdit={onEdit}\n      tokenAddress={tokenAddress}\n      title={title}\n      subtitleComponent={subtitleComponent()}\n      primaryTotalTextOverride={`${subtotalDisplay} + ${ethTransactionTotal} ${nativeCurrency}`}\n      primaryTotalTextOverrideMaxAmount={`${subtotalDisplay} + ${ethTransactionTotalMaxAmount} ${nativeCurrency}`}\n      secondaryTotalTextOverride={secondaryTotalTextOverride}\n      tokenSymbol={tokenSymbol}\n    />\n  );\n}\n\nConfirmTokenTransactionBase.propTypes = {\n  image: PropTypes.string,\n  assetName: PropTypes.string,\n  toAddress: PropTypes.string,\n  tokenAddress: PropTypes.string,\n  tokenAmount: PropTypes.string,\n  tokenSymbol: PropTypes.string,\n  tokenId: PropTypes.string,\n  assetStandard: PropTypes.string,\n  onEdit: PropTypes.func,\n  ethTransactionTotal: PropTypes.string,\n  fiatTransactionTotal: PropTypes.string,\n  hexMaximumTransactionFee: PropTypes.string,\n};\n","export { default } from './confirm-token-transaction-base';\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TransactionStatus,\n  TransactionType,\n} from '@metamask/transaction-controller';\nimport ConfirmPageContainer from '../components/confirm-page-container';\nimport { isBalanceSufficient } from '../send/send.utils';\nimport { DEFAULT_ROUTE } from '../../../helpers/constants/routes';\nimport {\n  TextVariant,\n  TextColor,\n} from '../../../helpers/constants/design-system';\nimport {\n  INSUFFICIENT_FUNDS_ERROR_KEY,\n  GAS_LIMIT_TOO_LOW_ERROR_KEY,\n  ETH_GAS_PRICE_FETCH_WARNING_KEY,\n  GAS_PRICE_FETCH_FAILURE_ERROR_KEY,\n  IS_SIGNING_OR_SUBMITTING,\n  USER_OP_CONTRACT_DEPLOY_ERROR_KEY,\n} from '../../../helpers/constants/error-keys';\n\nimport UserPreferencedCurrencyDisplay from '../../../components/app/user-preferenced-currency-display';\n\nimport { PRIMARY, SECONDARY } from '../../../helpers/constants/common';\nimport { MetaMetricsEventCategory } from '../../../../shared/constants/metametrics';\nimport { getMethodName } from '../../../helpers/utils/metrics';\nimport {\n  getTransactionTypeTitle,\n  isLegacyTransaction,\n} from '../../../helpers/utils/transactions.util';\n\nimport {\n  AccountType,\n  CustodyStatus,\n} from '../../../../shared/constants/custody';\n\nimport { TransactionModalContextProvider } from '../../../contexts/transaction-modal';\nimport TransactionDetail from '../components/transaction-detail/transaction-detail.component';\nimport TransactionDetailItem from '../components/transaction-detail-item/transaction-detail-item.component';\nimport { Text, TextField } from '../../../components/component-library';\nimport LoadingHeartBeat from '../../../components/ui/loading-heartbeat';\nimport LedgerInstructionField from '../components/ledger-instruction-field';\nimport {\n  addPollingTokenToAppState,\n  removePollingTokenFromAppState,\n  gasFeeStartPollingByNetworkClientId,\n  gasFeeStopPollingByPollingToken,\n} from '../../../store/actions';\n\nimport { MIN_GAS_LIMIT_DEC } from '../send/send.constants';\n\nimport { NETWORK_TO_NAME_MAP } from '../../../../shared/constants/network';\nimport {\n  sumHexes,\n  hexToDecimal,\n} from '../../../../shared/modules/conversion.utils';\nimport TransactionAlerts from '../components/transaction-alerts';\nimport { ConfirmHexData } from '../components/confirm-hexdata';\nimport { ConfirmTitle } from '../components/confirm-title';\nimport { ConfirmSubTitle } from '../components/confirm-subtitle';\nimport { ConfirmGasDisplay } from '../components/confirm-gas-display';\nimport updateTxData from '../../../../shared/modules/updateTxData';\n///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\nimport { KeyringType } from '../../../../shared/constants/keyring';\nimport SnapAccountTransactionLoadingScreen from '../../snap-account-transaction-loading-screen/snap-account-transaction-loading-screen';\n///: END:ONLY_INCLUDE_IF\nimport { isHardwareKeyring } from '../../../helpers/utils/hardware';\nimport FeeDetailsComponent from '../components/fee-details-component/fee-details-component';\nimport { SimulationDetails } from '../components/simulation-details';\nimport { fetchSwapsFeatureFlags } from '../../swaps/swaps.util';\nimport { NetworkChangeToastLegacy } from '../components/confirm/network-change-toast';\n\nexport default class ConfirmTransactionBase extends Component {\n  static contextTypes = {\n    t: PropTypes.func,\n    trackEvent: PropTypes.func,\n  };\n\n  static propTypes = {\n    // react-router props\n    history: PropTypes.object,\n    // Redux props\n    balance: PropTypes.string,\n    cancelTransaction: PropTypes.func,\n    cancelAllTransactions: PropTypes.func,\n    clearConfirmTransaction: PropTypes.func,\n    conversionRate: PropTypes.number,\n    fromAddress: PropTypes.string,\n    fromName: PropTypes.string,\n    hexTransactionAmount: PropTypes.string,\n    hexMaximumTransactionFee: PropTypes.string,\n    hexMinimumTransactionFee: PropTypes.string,\n    methodData: PropTypes.object,\n    nonce: PropTypes.string,\n    useNonceField: PropTypes.bool,\n    customNonceValue: PropTypes.string,\n    updateCustomNonce: PropTypes.func,\n    sendTransaction: PropTypes.func,\n    showTransactionConfirmedModal: PropTypes.func,\n    showRejectTransactionsConfirmationModal: PropTypes.func,\n    toAccounts: PropTypes.array,\n    toAddress: PropTypes.string,\n    tokenData: PropTypes.object,\n    tokenProps: PropTypes.object,\n    toName: PropTypes.string,\n    toEns: PropTypes.string,\n    toNickname: PropTypes.string,\n    transactionStatus: PropTypes.string,\n    txData: PropTypes.object,\n    unapprovedTxCount: PropTypes.number,\n    customGas: PropTypes.object,\n    addToAddressBookIfNew: PropTypes.func,\n    ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n    fromInternalAccount: PropTypes.object,\n    ///: END:ONLY_INCLUDE_IF\n    keyringForAccount: PropTypes.object,\n    // Component props\n    actionKey: PropTypes.string,\n    contentComponent: PropTypes.node,\n    dataHexComponent: PropTypes.node,\n    tokenAddress: PropTypes.string,\n    customTokenAmount: PropTypes.string,\n    dappProposedTokenAmount: PropTypes.string,\n    currentTokenBalance: PropTypes.string,\n    onEdit: PropTypes.func,\n    subtitleComponent: PropTypes.node,\n    title: PropTypes.string,\n    image: PropTypes.string,\n    type: PropTypes.string,\n    getNextNonce: PropTypes.func,\n    nextNonce: PropTypes.number,\n    tryReverseResolveAddress: PropTypes.func.isRequired,\n    hideSenderToRecipient: PropTypes.bool,\n    showAccountInHeader: PropTypes.bool,\n    mostRecentOverviewPage: PropTypes.string.isRequired,\n    isEthGasPriceFetched: PropTypes.bool,\n    noGasPrice: PropTypes.bool,\n    setDefaultHomeActiveTabName: PropTypes.func,\n    primaryTotalTextOverride: PropTypes.string,\n    secondaryTotalTextOverride: PropTypes.string,\n    gasIsLoading: PropTypes.bool,\n    primaryTotalTextOverrideMaxAmount: PropTypes.string,\n    useNativeCurrencyAsPrimaryCurrency: PropTypes.bool,\n    maxFeePerGas: PropTypes.string,\n    maxPriorityFeePerGas: PropTypes.string,\n    baseFeePerGas: PropTypes.string,\n    gasFeeIsCustom: PropTypes.bool,\n    showLedgerSteps: PropTypes.bool.isRequired,\n    nativeCurrency: PropTypes.string,\n    supportsEIP1559: PropTypes.bool,\n    hardwareWalletRequiresConnection: PropTypes.bool,\n    isBuyableChain: PropTypes.bool,\n    isApprovalOrRejection: PropTypes.bool,\n    assetStandard: PropTypes.string,\n    useCurrencyRateCheck: PropTypes.bool,\n    isNotification: PropTypes.bool,\n    accountType: PropTypes.string,\n    setWaitForConfirmDeepLinkDialog: PropTypes.func,\n    showTransactionsFailedModal: PropTypes.func,\n    showCustodianDeepLink: PropTypes.func,\n    isNoteToTraderSupported: PropTypes.bool,\n    custodianPublishesTransaction: PropTypes.bool,\n    rpcUrl: PropTypes.string,\n    isMainBetaFlask: PropTypes.bool,\n    displayAccountBalanceHeader: PropTypes.bool,\n    tokenSymbol: PropTypes.string,\n    updateTransaction: PropTypes.func,\n    updateTransactionValue: PropTypes.func,\n    setSwapsFeatureFlags: PropTypes.func,\n    fetchSmartTransactionsLiveness: PropTypes.func,\n    isUsingPaymaster: PropTypes.bool,\n    isSigningOrSubmitting: PropTypes.bool,\n    isUserOpContractDeployError: PropTypes.bool,\n    useMaxValue: PropTypes.bool,\n    maxValue: PropTypes.string,\n    smartTransactionsOptInStatus: PropTypes.bool,\n    currentChainSupportsSmartTransactions: PropTypes.bool,\n    selectedNetworkClientId: PropTypes.string,\n    isSmartTransactionsEnabled: PropTypes.bool,\n    hasPriorityApprovalRequest: PropTypes.bool,\n    chainId: PropTypes.string,\n  };\n\n  state = {\n    submitting: false,\n    submitError: null,\n    submitWarning: '',\n    ethGasPriceWarning: '',\n    editingGas: false,\n    userAcknowledgedGasMissing: false,\n    showWarningModal: false,\n  };\n\n  componentDidUpdate(prevProps) {\n    const {\n      transactionStatus,\n      showTransactionConfirmedModal,\n      history,\n      clearConfirmTransaction,\n      nextNonce,\n      customNonceValue,\n      toAddress,\n      tryReverseResolveAddress,\n      isEthGasPriceFetched,\n      setDefaultHomeActiveTabName,\n      hexMaximumTransactionFee,\n      useMaxValue,\n      hasPriorityApprovalRequest,\n      mostRecentOverviewPage,\n    } = this.props;\n\n    const {\n      customNonceValue: prevCustomNonceValue,\n      nextNonce: prevNextNonce,\n      toAddress: prevToAddress,\n      transactionStatus: prevTxStatus,\n      isEthGasPriceFetched: prevIsEthGasPriceFetched,\n      hexMaximumTransactionFee: prevHexMaximumTransactionFee,\n      hasPriorityApprovalRequest: prevHasPriorityApprovalRequest,\n    } = prevProps;\n\n    const statusUpdated = transactionStatus !== prevTxStatus;\n    const txDroppedOrConfirmed =\n      transactionStatus === TransactionStatus.dropped ||\n      transactionStatus === TransactionStatus.confirmed;\n\n    if (\n      nextNonce !== prevNextNonce ||\n      customNonceValue !== prevCustomNonceValue\n    ) {\n      if (nextNonce !== null && customNonceValue > nextNonce) {\n        this.setState({\n          submitWarning: this.context.t('nextNonceWarning', [nextNonce]),\n        });\n      } else {\n        this.setState({ submitWarning: '' });\n      }\n    }\n\n    if (statusUpdated && txDroppedOrConfirmed) {\n      showTransactionConfirmedModal({\n        onSubmit: () => {\n          clearConfirmTransaction();\n          setDefaultHomeActiveTabName('activity').then(() => {\n            history.push(DEFAULT_ROUTE);\n          });\n        },\n      });\n    }\n\n    if (toAddress && toAddress !== prevToAddress) {\n      tryReverseResolveAddress(toAddress);\n    }\n\n    if (isEthGasPriceFetched !== prevIsEthGasPriceFetched) {\n      if (isEthGasPriceFetched) {\n        this.setState({\n          ethGasPriceWarning: this.context.t(ETH_GAS_PRICE_FETCH_WARNING_KEY),\n        });\n      } else {\n        this.setState({\n          ethGasPriceWarning: '',\n        });\n      }\n    }\n\n    if (\n      hexMaximumTransactionFee !== prevHexMaximumTransactionFee &&\n      useMaxValue\n    ) {\n      this.updateValueToMax();\n    }\n\n    if (hasPriorityApprovalRequest && !prevHasPriorityApprovalRequest) {\n      // Redirect to home which will redirect to the priority confirmation.\n      history.push(mostRecentOverviewPage);\n    }\n  }\n\n  getErrorKey() {\n    const {\n      balance,\n      conversionRate,\n      hexMaximumTransactionFee,\n      txData: { txParams: { value: amount } = {} } = {},\n      customGas,\n      noGasPrice,\n      gasFeeIsCustom,\n      isSigningOrSubmitting,\n      isUserOpContractDeployError,\n    } = this.props;\n\n    if (isUserOpContractDeployError) {\n      return {\n        valid: false,\n        errorKey: USER_OP_CONTRACT_DEPLOY_ERROR_KEY,\n      };\n    }\n\n    const insufficientBalance =\n      balance &&\n      !isBalanceSufficient({\n        amount,\n        gasTotal: hexMaximumTransactionFee || '0x0',\n        balance,\n        conversionRate,\n      });\n\n    if (insufficientBalance) {\n      return {\n        valid: false,\n        errorKey: INSUFFICIENT_FUNDS_ERROR_KEY,\n      };\n    }\n\n    if (hexToDecimal(customGas.gasLimit) < Number(MIN_GAS_LIMIT_DEC)) {\n      return {\n        valid: false,\n        errorKey: GAS_LIMIT_TOO_LOW_ERROR_KEY,\n      };\n    }\n\n    if (noGasPrice && !gasFeeIsCustom) {\n      return {\n        valid: false,\n        errorKey: GAS_PRICE_FETCH_FAILURE_ERROR_KEY,\n      };\n    }\n\n    if (isSigningOrSubmitting) {\n      return {\n        valid: false,\n        errorKey: IS_SIGNING_OR_SUBMITTING,\n      };\n    }\n\n    return {\n      valid: true,\n    };\n  }\n\n  handleEditGas() {\n    const {\n      actionKey,\n      txData: { origin },\n      methodData = {},\n    } = this.props;\n\n    this.context.trackEvent({\n      category: MetaMetricsEventCategory.Transactions,\n      event: 'User clicks \"Edit\" on gas',\n      properties: {\n        action: 'Confirm Screen',\n        legacy_event: true,\n        recipientKnown: null,\n        functionType:\n          actionKey ||\n          getMethodName(methodData.name) ||\n          TransactionType.contractInteraction,\n        origin,\n      },\n    });\n\n    this.setState({ editingGas: true });\n  }\n\n  handleCloseEditGas() {\n    this.setState({ editingGas: false });\n  }\n\n  setUserAcknowledgedGasMissing() {\n    this.setState({ userAcknowledgedGasMissing: true });\n  }\n\n  updateValueToMax() {\n    const { maxValue: value, txData, updateTransactionValue } = this.props;\n\n    updateTransactionValue(txData.id, value);\n  }\n\n  renderDetails() {\n    const {\n      primaryTotalTextOverride,\n      secondaryTotalTextOverride,\n      hexMaximumTransactionFee,\n      hexMinimumTransactionFee,\n      useNonceField,\n      customNonceValue,\n      updateCustomNonce,\n      nextNonce,\n      getNextNonce,\n      txData,\n      useNativeCurrencyAsPrimaryCurrency,\n      primaryTotalTextOverrideMaxAmount,\n      showLedgerSteps,\n      nativeCurrency,\n      isBuyableChain,\n      useCurrencyRateCheck,\n      tokenSymbol,\n      isUsingPaymaster,\n      isSigningOrSubmitting,\n    } = this.props;\n\n    const { t } = this.context;\n    const { userAcknowledgedGasMissing } = this.state;\n\n    const { valid } = this.getErrorKey();\n    const isDisabled = () => {\n      return userAcknowledgedGasMissing ? false : !valid;\n    };\n\n    const hasSimulationError = Boolean(txData.simulationFails);\n\n    const renderSimulationFailureWarning =\n      hasSimulationError && !userAcknowledgedGasMissing;\n    const networkName = NETWORK_TO_NAME_MAP[txData.chainId];\n\n    const getTotalAmount = (useMaxFee) => {\n      return sumHexes(\n        txData.txParams.value,\n        useMaxFee ? hexMaximumTransactionFee : hexMinimumTransactionFee,\n        txData.layer1GasFee ?? 0,\n      );\n    };\n\n    const handleNonceChange = ({ target: { value } }) => {\n      const inputValue = Number(value);\n\n      if (inputValue < 0 || isNaN(inputValue)) {\n        updateCustomNonce(undefined);\n        return;\n      }\n\n      updateCustomNonce(inputValue);\n\n      getNextNonce();\n    };\n\n    const renderTotalMaxAmount = ({\n      useMaxFee,\n      isBoldTextAndNotOverridden = false,\n    } = {}) => {\n      if (\n        primaryTotalTextOverrideMaxAmount === undefined &&\n        secondaryTotalTextOverride === undefined\n      ) {\n        // Native Send\n        return (\n          <UserPreferencedCurrencyDisplay\n            type={PRIMARY}\n            key=\"total-max-amount\"\n            value={getTotalAmount(useMaxFee)}\n            hideLabel={!useNativeCurrencyAsPrimaryCurrency}\n          />\n        );\n      }\n\n      // Token send\n      const primaryTotal = useMaxFee\n        ? primaryTotalTextOverrideMaxAmount\n        : primaryTotalTextOverride;\n      const totalMaxAmount = useNativeCurrencyAsPrimaryCurrency\n        ? primaryTotal\n        : secondaryTotalTextOverride;\n\n      return isBoldTextAndNotOverridden ? (\n        <Text variant={TextVariant.bodyMdBold}>{totalMaxAmount}</Text>\n      ) : (\n        totalMaxAmount\n      );\n    };\n\n    const renderTotalDetailText = (value) => {\n      if (\n        (primaryTotalTextOverride === undefined &&\n          secondaryTotalTextOverride === undefined) ||\n        value === '0x0'\n      ) {\n        return (\n          <div className=\"confirm-page-container-content__total-value\">\n            <LoadingHeartBeat estimateUsed={this.props.txData?.userFeeLevel} />\n            <UserPreferencedCurrencyDisplay\n              type={SECONDARY}\n              key=\"total-detail-text\"\n              value={value}\n              suffixProps={{\n                color: TextColor.textDefault,\n                variant: TextVariant.bodyMdBold,\n              }}\n              textProps={{\n                color: TextColor.textDefault,\n                variant: TextVariant.bodyMdBold,\n              }}\n              hideLabel={Boolean(useNativeCurrencyAsPrimaryCurrency)}\n            />\n          </div>\n        );\n      }\n      return useNativeCurrencyAsPrimaryCurrency\n        ? secondaryTotalTextOverride\n        : primaryTotalTextOverride;\n    };\n\n    const nextNonceValue =\n      typeof nextNonce === 'number' ? nextNonce.toString() : null;\n    const renderNonceField = useNonceField && !isSigningOrSubmitting;\n\n    if (renderNonceField && !customNonceValue && nextNonceValue) {\n      updateCustomNonce(nextNonceValue);\n    }\n\n    const nonceField = renderNonceField ? (\n      <div>\n        <div className=\"confirm-detail-row\">\n          <div className=\"confirm-detail-row__label\">\n            {t('nonceFieldHeading')}\n          </div>\n          <div className=\"custom-nonce-input\">\n            <TextField\n              type=\"number\"\n              min={0}\n              placeholder={nextNonceValue}\n              onChange={handleNonceChange}\n              fullWidth\n              margin=\"dense\"\n              value={customNonceValue ?? ''}\n            />\n          </div>\n        </div>\n      </div>\n    ) : null;\n\n    const { simulationData } = txData;\n\n    const simulationDetails = (\n      <SimulationDetails\n        simulationData={simulationData}\n        transactionId={txData.id}\n        enableMetrics\n      />\n    );\n\n    const showTotals = Boolean(simulationData?.error);\n\n    return (\n      <div className=\"confirm-page-container-content__details\">\n        <TransactionAlerts\n          txData={txData}\n          setUserAcknowledgedGasMissing={() =>\n            this.setUserAcknowledgedGasMissing()\n          }\n          userAcknowledgedGasMissing={userAcknowledgedGasMissing}\n          nativeCurrency={nativeCurrency}\n          networkName={networkName}\n          type={txData.type}\n          isBuyableChain={isBuyableChain}\n          tokenSymbol={tokenSymbol}\n          isUsingPaymaster={isUsingPaymaster}\n        />\n        {simulationDetails}\n        {!renderSimulationFailureWarning && (\n          <TransactionDetail\n            disableEditGasFeeButton\n            disabled={isDisabled()}\n            userAcknowledgedGasMissing={userAcknowledgedGasMissing}\n            onEdit={() => this.handleEditGas()}\n            rows={[\n              <div key=\"confirm-transaction-base_confirm-gas-display\">\n                <ConfirmGasDisplay\n                  userAcknowledgedGasMissing={userAcknowledgedGasMissing}\n                />\n                <FeeDetailsComponent\n                  useCurrencyRateCheck={useCurrencyRateCheck}\n                  txData={txData}\n                />\n              </div>,\n            ]}\n          />\n        )}\n        {showTotals && (\n          <TransactionDetail\n            disableEditGasFeeButton\n            disabled={isDisabled()}\n            userAcknowledgedGasMissing={userAcknowledgedGasMissing}\n            rows={[\n              <TransactionDetailItem\n                key=\"confirm-transaction-base-total-item\"\n                detailTitle={t('total')}\n                detailText={\n                  useCurrencyRateCheck &&\n                  renderTotalDetailText(getTotalAmount())\n                }\n                detailTotal={renderTotalMaxAmount({\n                  useMaxFee: false,\n                  isBoldTextAndNotOverridden: true,\n                })}\n                subTitle={t('transactionDetailGasTotalSubtitle')}\n                subText={\n                  <div\n                    className=\"confirm-page-container-content__total-amount\"\n                    data-testid=\"confirm-page-total-amount\"\n                  >\n                    <LoadingHeartBeat\n                      estimateUsed={this.props.txData?.userFeeLevel}\n                    />\n                    <Text\n                      color={TextColor.textAlternative}\n                      variant={TextVariant.bodySmMedium}\n                    >\n                      {t('editGasSubTextAmountLabel')}\n                    </Text>{' '}\n                    {renderTotalMaxAmount({\n                      useMaxFee: true,\n                    })}\n                  </div>\n                }\n              />,\n            ]}\n          />\n        )}\n        {nonceField}\n        {showLedgerSteps ? (\n          <LedgerInstructionField\n            showDataInstruction={Boolean(txData.txParams?.data)}\n          />\n        ) : null}\n      </div>\n    );\n  }\n\n  renderDataHex() {\n    const { txData, dataHexComponent } = this.props;\n    const {\n      txParams: { data },\n    } = txData;\n    if (!data) {\n      return null;\n    }\n    return (\n      <ConfirmHexData txData={txData} dataHexComponent={dataHexComponent} />\n    );\n  }\n\n  handleEdit() {\n    const {\n      txData,\n      tokenData,\n      tokenProps,\n      onEdit,\n      actionKey,\n      txData: { origin },\n      methodData = {},\n    } = this.props;\n\n    this.context.trackEvent({\n      category: MetaMetricsEventCategory.Transactions,\n      event: 'Edit Transaction',\n      properties: {\n        action: 'Confirm Screen',\n        legacy_event: true,\n        recipientKnown: null,\n        functionType:\n          actionKey ||\n          getMethodName(methodData.name) ||\n          TransactionType.contractInteraction,\n        origin,\n      },\n    });\n\n    onEdit({ txData, tokenData, tokenProps });\n  }\n\n  handleCancelAll() {\n    const {\n      cancelAllTransactions,\n      clearConfirmTransaction,\n      history,\n      mostRecentOverviewPage,\n      showRejectTransactionsConfirmationModal,\n      unapprovedTxCount,\n    } = this.props;\n\n    showRejectTransactionsConfirmationModal({\n      unapprovedTxCount,\n      onSubmit: async () => {\n        this._removeBeforeUnload();\n        await cancelAllTransactions();\n        clearConfirmTransaction();\n        history.push(mostRecentOverviewPage);\n      },\n    });\n  }\n\n  async handleCancel() {\n    const {\n      txData,\n      cancelTransaction,\n      history,\n      mostRecentOverviewPage,\n      updateCustomNonce,\n    } = this.props;\n\n    this._removeBeforeUnload();\n    updateCustomNonce('');\n    await cancelTransaction(txData);\n    history.push(mostRecentOverviewPage);\n  }\n\n  handleSubmit() {\n    const { submitting } = this.state;\n\n    if (submitting) {\n      return;\n    }\n\n    this.props.isMainBetaFlask\n      ? this.handleMainSubmit()\n      : this.handleMMISubmit();\n  }\n\n  handleMainSubmit() {\n    const {\n      sendTransaction,\n      txData,\n      history,\n      mostRecentOverviewPage,\n      updateCustomNonce,\n      methodData,\n      maxFeePerGas,\n      customTokenAmount,\n      dappProposedTokenAmount,\n      currentTokenBalance,\n      maxPriorityFeePerGas,\n      baseFeePerGas,\n      addToAddressBookIfNew,\n      toAccounts,\n      toAddress,\n      keyringForAccount,\n      ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n      fromInternalAccount,\n      ///: END:ONLY_INCLUDE_IF\n    } = this.props;\n\n    let loadingIndicatorMessage;\n\n    switch (keyringForAccount?.type) {\n      ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n      case KeyringType.snap:\n        loadingIndicatorMessage = (\n          <SnapAccountTransactionLoadingScreen\n            internalAccount={fromInternalAccount}\n          ></SnapAccountTransactionLoadingScreen>\n        );\n        break;\n      ///: END:ONLY_INCLUDE_IF\n      default:\n        if (isHardwareKeyring(keyringForAccount?.type)) {\n          loadingIndicatorMessage = this.context.t(\n            'loadingScreenHardwareWalletMessage',\n          );\n        } else {\n          loadingIndicatorMessage = null;\n        }\n        break;\n    }\n\n    updateTxData({\n      txData,\n      maxFeePerGas,\n      customTokenAmount,\n      dappProposedTokenAmount,\n      currentTokenBalance,\n      maxPriorityFeePerGas,\n      baseFeePerGas,\n      addToAddressBookIfNew,\n      toAccounts,\n      toAddress,\n      name: methodData.name,\n    });\n\n    this.setState(\n      {\n        submitting: true,\n        submitError: null,\n      },\n      () => {\n        this._removeBeforeUnload();\n\n        sendTransaction(txData, false, loadingIndicatorMessage)\n          .then(() => {\n            if (!this._isMounted) {\n              return;\n            }\n\n            this.setState(\n              {\n                submitting: false,\n              },\n              () => {\n                history.push(mostRecentOverviewPage);\n                updateCustomNonce('');\n              },\n            );\n          })\n          .catch((error) => {\n            if (!this._isMounted) {\n              return;\n            }\n            this.setState({\n              submitting: false,\n              submitError: error.message,\n            });\n            updateCustomNonce('');\n          });\n      },\n    );\n  }\n\n  async handleMMISubmit() {\n    const {\n      sendTransaction,\n      updateTransaction,\n      txData,\n      history,\n      mostRecentOverviewPage,\n      updateCustomNonce,\n      unapprovedTxCount,\n      accountType,\n      isNotification,\n      setWaitForConfirmDeepLinkDialog,\n      showTransactionsFailedModal,\n      fromAddress,\n      isNoteToTraderSupported,\n      custodianPublishesTransaction,\n      rpcUrl,\n      methodData,\n      maxFeePerGas,\n      customTokenAmount,\n      dappProposedTokenAmount,\n      currentTokenBalance,\n      maxPriorityFeePerGas,\n      baseFeePerGas,\n      addToAddressBookIfNew,\n      toAccounts,\n      toAddress,\n      showCustodianDeepLink,\n      clearConfirmTransaction,\n      isSmartTransactionsEnabled,\n    } = this.props;\n    const { noteText } = this.state;\n\n    if (accountType === AccountType.CUSTODY) {\n      txData.custodyStatus = CustodyStatus.CREATED;\n      txData.metadata = txData.metadata || {};\n\n      if (isNoteToTraderSupported) {\n        txData.metadata.note = noteText;\n      }\n\n      if (isSmartTransactionsEnabled) {\n        txData.origin += '#smartTransaction';\n      }\n\n      txData.metadata.custodianPublishesTransaction =\n        custodianPublishesTransaction;\n      txData.metadata.rpcUrl = rpcUrl;\n\n      await updateTransaction(txData);\n    }\n\n    updateTxData({\n      txData,\n      maxFeePerGas,\n      customTokenAmount,\n      dappProposedTokenAmount,\n      currentTokenBalance,\n      maxPriorityFeePerGas,\n      baseFeePerGas,\n      addToAddressBookIfNew,\n      toAccounts,\n      toAddress,\n      name: methodData.name,\n    });\n\n    this.setState(\n      {\n        submitting: true,\n        submitError: null,\n      },\n      () => {\n        this._removeBeforeUnload();\n\n        if (txData.custodyStatus) {\n          setWaitForConfirmDeepLinkDialog(true);\n        }\n\n        sendTransaction(txData)\n          .then(() => {\n            if (txData.custodyStatus) {\n              showCustodianDeepLink({\n                fromAddress,\n                closeNotification: isNotification && unapprovedTxCount === 1,\n                txId: txData.id,\n                onDeepLinkFetched: () => {\n                  this.context.trackEvent({\n                    category: 'MMI',\n                    event: 'Show deeplink for transaction',\n                  });\n                },\n                onDeepLinkShown: () => {\n                  clearConfirmTransaction();\n                  if (!this._isMounted) {\n                    return;\n                  }\n                  this.setState({ submitting: false }, () => {\n                    history.push(mostRecentOverviewPage);\n                    updateCustomNonce('');\n                  });\n                },\n              });\n            } else {\n              if (!this._isMounted) {\n                return;\n              }\n              this.setState(\n                {\n                  submitting: false,\n                },\n                () => {\n                  history.push(mostRecentOverviewPage);\n                  updateCustomNonce('');\n                },\n              );\n            }\n          })\n          .catch((error) => {\n            if (!this._isMounted) {\n              return;\n            }\n\n            showTransactionsFailedModal(error.message, isNotification);\n\n            this.setState({\n              submitting: false,\n              submitError: error.message,\n            });\n            setWaitForConfirmDeepLinkDialog(true);\n            updateCustomNonce('');\n          });\n      },\n    );\n  }\n\n  handleSetApprovalForAll() {\n    this.setState({ showWarningModal: true });\n  }\n\n  renderTitleComponent() {\n    const { title, hexTransactionAmount, txData } = this.props;\n\n    return (\n      <ConfirmTitle\n        title={title}\n        hexTransactionAmount={hexTransactionAmount}\n        txData={txData}\n      />\n    );\n  }\n\n  renderSubtitleComponent() {\n    const { assetStandard, subtitleComponent, hexTransactionAmount, txData } =\n      this.props;\n\n    return (\n      <ConfirmSubTitle\n        hexTransactionAmount={hexTransactionAmount}\n        subtitleComponent={subtitleComponent}\n        txData={txData}\n        assetStandard={assetStandard}\n      />\n    );\n  }\n\n  _beforeUnloadForGasPolling = () => {\n    this._isMounted = false;\n    if (this.state.pollingToken) {\n      gasFeeStopPollingByPollingToken(this.state.pollingToken);\n      removePollingTokenFromAppState(this.state.pollingToken);\n    }\n  };\n\n  _removeBeforeUnload = () => {\n    window.removeEventListener('beforeunload', this._beforeUnloadForGasPolling);\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n    const {\n      toAddress,\n      txData: { origin, chainId: txChainId } = {},\n      getNextNonce,\n      tryReverseResolveAddress,\n      smartTransactionsOptInStatus,\n      currentChainSupportsSmartTransactions,\n      setSwapsFeatureFlags,\n      fetchSmartTransactionsLiveness,\n      chainId,\n    } = this.props;\n\n    // If the user somehow finds themselves seeing a confirmation\n    // on a network which is not presently selected, throw\n    if (txChainId === undefined || txChainId !== chainId) {\n      throw new Error(\n        `Currently selected chainId (${chainId}) does not match chainId (${txChainId}) on which the transaction was proposed.`,\n      );\n    }\n\n    const { trackEvent } = this.context;\n    trackEvent({\n      category: MetaMetricsEventCategory.Transactions,\n      event: 'Confirm: Started',\n      properties: {\n        action: 'Confirm Screen',\n        legacy_event: true,\n        origin,\n      },\n    });\n\n    getNextNonce();\n    if (toAddress) {\n      tryReverseResolveAddress(toAddress);\n    }\n\n    /**\n     * This makes a request to get estimates and begin polling, keeping track of the poll\n     * token in component state.\n     * It then disconnects polling upon componentWillUnmount. If the hook is unmounted\n     * while waiting for `gasFeeStartPollingByNetworkClientId` to resolve, the `_isMounted`\n     * flag ensures that a call to disconnect happens after promise resolution.\n     */\n    gasFeeStartPollingByNetworkClientId(\n      this.props.selectedNetworkClientId,\n    ).then((pollingToken) => {\n      if (this._isMounted) {\n        addPollingTokenToAppState(pollingToken);\n        this.setState({ pollingToken });\n      } else {\n        gasFeeStopPollingByPollingToken(pollingToken);\n        removePollingTokenFromAppState(this.state.pollingToken);\n      }\n    });\n\n    window.addEventListener('beforeunload', this._beforeUnloadForGasPolling);\n\n    if (smartTransactionsOptInStatus && currentChainSupportsSmartTransactions) {\n      // TODO: Fetching swaps feature flags, which include feature flags for smart transactions, is only a short-term solution.\n      // Long-term, we want to have a new proxy service specifically for feature flags.\n      Promise.all([\n        fetchSwapsFeatureFlags(),\n        fetchSmartTransactionsLiveness(),\n      ]).then(([swapsFeatureFlags]) => setSwapsFeatureFlags(swapsFeatureFlags));\n    }\n  }\n\n  componentWillUnmount() {\n    this._beforeUnloadForGasPolling();\n    this._removeBeforeUnload();\n    this.props.clearConfirmTransaction();\n  }\n\n  supportsEIP1559 =\n    this.props.supportsEIP1559 && !isLegacyTransaction(this.props.txData);\n\n  render() {\n    const { t } = this.context;\n    const {\n      fromName,\n      fromAddress,\n      toName,\n      toAddress,\n      toEns,\n      toNickname,\n      methodData,\n      tokenAddress,\n      contentComponent,\n      onEdit,\n      nonce,\n      customNonceValue,\n      unapprovedTxCount,\n      type,\n      hideSenderToRecipient,\n      showAccountInHeader,\n      txData,\n      gasIsLoading,\n      gasFeeIsCustom,\n      nativeCurrency,\n      hardwareWalletRequiresConnection,\n      image,\n      isApprovalOrRejection,\n      assetStandard,\n      displayAccountBalanceHeader,\n      title,\n      isSigningOrSubmitting,\n    } = this.props;\n    const {\n      submitting,\n      submitError,\n      submitWarning,\n      ethGasPriceWarning,\n      editingGas,\n      userAcknowledgedGasMissing,\n      showWarningModal,\n    } = this.state;\n    const { name } = methodData;\n    const { valid, errorKey } = this.getErrorKey();\n    const hasSimulationError = Boolean(txData.simulationFails);\n    const renderSimulationFailureWarning =\n      hasSimulationError && !userAcknowledgedGasMissing;\n\n    // This `isTokenApproval` case is added to handle possible rendering of this component from\n    // confirm-approve.js when `assetStandard` is `undefined`. That will happen if the request to\n    // get the asset standard fails. In that scenario, confirm-approve.js returns the `<ConfirmContractInteraction />`\n    // component, which in turn returns this `<ConfirmTransactionBase />` component. We meed to prevent\n    // the user from editing the transaction in those cases.\n\n    // as this component is made functional, useTransactionFunctionType can be used to get functionType\n    const isTokenApproval =\n      txData.type === TransactionType.tokenMethodSetApprovalForAll ||\n      txData.type === TransactionType.tokenMethodApprove ||\n      txData.type === TransactionType.tokenMethodIncreaseAllowance;\n    const isContractInteraction =\n      txData.type === TransactionType.contractInteraction;\n\n    const isContractInteractionFromDapp =\n      (isTokenApproval || isContractInteraction) &&\n      txData.origin !== 'metamask';\n    let functionType;\n    if (isContractInteractionFromDapp) {\n      functionType = getMethodName(name);\n    }\n\n    if (!functionType) {\n      if (type) {\n        functionType = getTransactionTypeTitle(t, type, nativeCurrency);\n      } else {\n        functionType = t('contractInteraction');\n      }\n    }\n\n    return (\n      <TransactionModalContextProvider>\n        <ConfirmPageContainer\n          fromName={fromName}\n          fromAddress={fromAddress}\n          showAccountInHeader={showAccountInHeader}\n          toName={toName}\n          toAddress={toAddress}\n          toEns={toEns}\n          toNickname={toNickname}\n          showEdit={!isContractInteractionFromDapp && Boolean(onEdit)}\n          action={functionType}\n          image={image}\n          title={title}\n          titleComponent={this.renderTitleComponent()}\n          subtitleComponent={this.renderSubtitleComponent()}\n          detailsComponent={this.renderDetails()}\n          dataHexComponent={this.renderDataHex(functionType)}\n          contentComponent={contentComponent}\n          nonce={customNonceValue || nonce}\n          unapprovedTxCount={unapprovedTxCount}\n          tokenAddress={tokenAddress}\n          errorMessage={submitError}\n          errorKey={errorKey}\n          hasSimulationError={hasSimulationError}\n          warning={submitWarning}\n          disabled={\n            renderSimulationFailureWarning ||\n            !valid ||\n            submitting ||\n            hardwareWalletRequiresConnection ||\n            (gasIsLoading && !gasFeeIsCustom) ||\n            isSigningOrSubmitting\n          }\n          onEdit={() => this.handleEdit()}\n          onCancelAll={() => this.handleCancelAll()}\n          onCancel={() => this.handleCancel()}\n          onSubmit={() => this.handleSubmit()}\n          onSetApprovalForAll={() => this.handleSetApprovalForAll()}\n          showWarningModal={showWarningModal}\n          hideSenderToRecipient={hideSenderToRecipient}\n          origin={txData.origin}\n          ethGasPriceWarning={ethGasPriceWarning}\n          editingGas={editingGas}\n          handleCloseEditGas={() => this.handleCloseEditGas()}\n          currentTransaction={txData}\n          supportsEIP1559={this.supportsEIP1559}\n          nativeCurrency={nativeCurrency}\n          isApprovalOrRejection={isApprovalOrRejection}\n          assetStandard={assetStandard}\n          txData={txData}\n          displayAccountBalanceHeader={displayAccountBalanceHeader}\n        />\n        <NetworkChangeToastLegacy confirmation={txData} />\n      </TransactionModalContextProvider>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport {\n  TransactionStatus,\n  TransactionType,\n} from '@metamask/transaction-controller';\nimport { captureException } from '@sentry/browser';\n\nimport { clearConfirmTransaction } from '../../../ducks/confirm-transaction/confirm-transaction.duck';\n\nimport {\n  updateCustomNonce,\n  cancelTx,\n  cancelTxs,\n  updateAndApproveTx,\n  showModal,\n  getNextNonce,\n  tryReverseResolveAddress,\n  setDefaultHomeActiveTabName,\n  addToAddressBook,\n  updateTransaction,\n  updateEditableParams,\n  setSwapsFeatureFlags,\n  fetchSmartTransactionsLiveness,\n} from '../../../store/actions';\nimport { isBalanceSufficient } from '../send/send.utils';\nimport { shortenAddress, valuesFor } from '../../../helpers/utils/util';\nimport {\n  getAdvancedInlineGasShown,\n  getCustomNonceValue,\n  getIsMainnet,\n  getKnownMethodData,\n  getMetaMaskAccounts,\n  getUseNonceField,\n  transactionFeeSelector,\n  getNoGasPriceFetched,\n  getIsEthGasPriceFetched,\n  getShouldShowFiat,\n  checkNetworkAndAccountSupports1559,\n  getPreferences,\n  doesAddressRequireLedgerHidConnection,\n  getTokenList,\n  getEnsResolutionByAddress,\n  getUnapprovedTransaction,\n  getFullTxData,\n  getUseCurrencyRateCheck,\n  getUnapprovedTransactions,\n  getInternalAccountByAddress,\n  getApprovedAndSignedTransactions,\n  getSelectedNetworkClientId,\n  getPrioritizedUnapprovedTemplatedConfirmations,\n} from '../../../selectors';\nimport {\n  getCurrentChainSupportsSmartTransactions,\n  getSmartTransactionsOptInStatus,\n} from '../../../../shared/modules/selectors';\nimport { getMostRecentOverviewPage } from '../../../ducks/history/history';\nimport {\n  isAddressLedger,\n  updateGasFees,\n  getIsGasEstimatesLoading,\n  getNativeCurrency,\n  getSendToAccounts,\n  getProviderConfig,\n  findKeyringForAddress,\n  getConversionRate,\n} from '../../../ducks/metamask/metamask';\nimport {\n  addHexPrefix,\n} from '../../../../app/scripts/lib/util';\n\nimport {\n  parseStandardTokenTransactionData,\n  txParamsAreDappSuggested,\n} from '../../../../shared/modules/transaction.utils';\nimport { toChecksumHexAddress } from '../../../../shared/modules/hexstring-utils';\n\nimport { getGasLoadingAnimationIsShowing } from '../../../ducks/app/app';\nimport { isLegacyTransaction } from '../../../helpers/utils/transactions.util';\nimport { CUSTOM_GAS_ESTIMATE } from '../../../../shared/constants/gas';\n\n// eslint-disable-next-line import/no-duplicates\nimport { getIsUsingPaymaster } from '../../../selectors/account-abstraction';\n\nimport { calcGasTotal } from '../../../../shared/lib/transactions-controller-utils';\nimport { subtractHexes } from '../../../../shared/modules/conversion.utils';\nimport { getIsNativeTokenBuyable } from '../../../ducks/ramps';\nimport ConfirmTransactionBase from './confirm-transaction-base.component';\n\nlet customNonceValue = '';\nconst customNonceMerge = (txData) => {\n  return customNonceValue\n    ? {\n        ...txData,\n        customNonceValue,\n      }\n    : txData;\n};\n\nfunction addressIsNew(toAccounts, newAddress) {\n  const newAddressNormalized = newAddress.toLowerCase();\n  const foundMatching = toAccounts.some(\n    ({ address }) => address.toLowerCase() === newAddressNormalized,\n  );\n  return !foundMatching;\n}\n\nfunction getTokenToAddress(data, type) {\n  if (\n    ![\n      TransactionType.tokenMethodTransferFrom,\n      TransactionType.tokenMethodSafeTransferFrom,\n      TransactionType.tokenMethodTransfer,\n    ].includes(type)\n  ) {\n    return undefined;\n  }\n\n  const transactionData = parseStandardTokenTransactionData(data);\n\n  const value = transactionData?.args?._to || transactionData?.args?.to;\n\n  return value?.toString().toLowerCase();\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    toAddress: propsToAddress,\n    customTxParamsData,\n    match: { params = {} },\n  } = ownProps;\n  const { id: paramsTransactionId } = params;\n  const isMainnet = getIsMainnet(state);\n  const selectedNetworkClientId = getSelectedNetworkClientId(state);\n\n\n  const isGasEstimatesLoading = getIsGasEstimatesLoading(state);\n  const gasLoadingAnimationIsShowing = getGasLoadingAnimationIsShowing(state);\n  const isBuyableChain = getIsNativeTokenBuyable(state);\n  const { confirmTransaction, metamask } = state;\n  const conversionRate = getConversionRate(state);\n  const { addressBook, nextNonce } = metamask;\n  const unapprovedTxs = getUnapprovedTransactions(state);\n\n  const { chainId } = getProviderConfig(state);\n  const { tokenData, txData, tokenProps, nonce } = confirmTransaction;\n  const { txParams = {}, id: transactionId, type } = txData;\n  const txId = transactionId || paramsTransactionId;\n  const transaction = getUnapprovedTransaction(state, txId) ?? {};\n  const {\n    from: fromAddress,\n    to: txParamsToAddress,\n    gasPrice,\n    gas: gasLimit,\n    data,\n  } = (transaction && transaction.txParams) || txParams;\n  const accounts = getMetaMaskAccounts(state);\n  const smartTransactionsOptInStatus = getSmartTransactionsOptInStatus(state);\n  const currentChainSupportsSmartTransactions =\n    getCurrentChainSupportsSmartTransactions(state);\n\n  if (!accounts[fromAddress]) {\n    captureException(\n      new Error(\n        `ConfirmTransactionBase: Unexpected state - No account found for sender address. ` +\n          `chainId: ${chainId}. fromAddress?: ${Boolean(fromAddress)}`,\n      ),\n    );\n  }\n\n  const { balance } = accounts[fromAddress] || { balance: '0x0' };\n  const fromInternalAccount = getInternalAccountByAddress(state, fromAddress);\n  const fromName = fromInternalAccount?.metadata.name;\n  const keyring = findKeyringForAddress(state, fromAddress);\n\n  const tokenToAddress = getTokenToAddress(data, type);\n  const toAddress = propsToAddress || tokenToAddress || txParamsToAddress;\n\n  const toAccounts = getSendToAccounts(state);\n\n  const tokenList = getTokenList(state);\n\n  const toName =\n    getInternalAccountByAddress(state, toAddress)?.metadata.name ||\n    tokenList[toAddress?.toLowerCase()]?.name ||\n    shortenAddress(toChecksumHexAddress(toAddress));\n\n  const checksummedAddress = toChecksumHexAddress(toAddress);\n  const addressBookObject =\n    addressBook &&\n    addressBook[chainId] &&\n    addressBook[chainId][checksummedAddress];\n  const toEns = getEnsResolutionByAddress(state, checksummedAddress);\n  const toNickname = addressBookObject ? addressBookObject.name : '';\n  const transactionStatus = transaction ? transaction.status : '';\n  const supportsEIP1559 =\n    checkNetworkAndAccountSupports1559(state) && !isLegacyTransaction(txParams);\n\n  const {\n    hexTransactionAmount: initialHexTransactionAmount,\n    hexMaximumTransactionFee,\n    hexMinimumTransactionFee,\n    gasEstimationObject,\n  } = transactionFeeSelector(state, transaction);\n\n  const useMaxValue = state.confirmTransaction.maxValueMode?.[txId] ?? false;\n  const maxValue = subtractHexes(balance, hexMaximumTransactionFee);\n\n  const hexTransactionAmount = useMaxValue\n    ? maxValue\n    : initialHexTransactionAmount;\n\n  const currentNetworkUnapprovedTxs = Object.keys(unapprovedTxs)\n    .filter((key) => unapprovedTxs[key].chainId === chainId)\n    .reduce((acc, key) => ({ ...acc, [key]: unapprovedTxs[key] }), {});\n  const unapprovedTxCount = valuesFor(currentNetworkUnapprovedTxs).length;\n\n  const insufficientBalance = !isBalanceSufficient({\n    hexTransactionAmount,\n    gasTotal: calcGasTotal(gasLimit, gasPrice),\n    balance,\n    conversionRate,\n  });\n\n  const methodData = getKnownMethodData(state, data) || {};\n\n  const fullTxData = getFullTxData(\n    state,\n    txId,\n    TransactionStatus.unapproved,\n    customTxParamsData,\n    hexTransactionAmount,\n  );\n\n  customNonceValue = getCustomNonceValue(state);\n  const isEthGasPriceFetched = getIsEthGasPriceFetched(state);\n  const noGasPrice = !supportsEIP1559 && getNoGasPriceFetched(state);\n  const { useNativeCurrencyAsPrimaryCurrency } = getPreferences(state);\n  const gasFeeIsCustom =\n    fullTxData.userFeeLevel === CUSTOM_GAS_ESTIMATE ||\n    txParamsAreDappSuggested(fullTxData);\n  const fromAddressIsLedger = isAddressLedger(state, fromAddress);\n  const nativeCurrency = getNativeCurrency(state);\n\n  const hardwareWalletRequiresConnection =\n    doesAddressRequireLedgerHidConnection(state, fromAddress);\n\n  const isUsingPaymaster = getIsUsingPaymaster(state);\n\n  let isSigningOrSubmitting = Boolean(\n    getApprovedAndSignedTransactions(state).length,\n  );\n\n\n  const isUserOpContractDeployError =\n    fullTxData.isUserOperation && type === TransactionType.deployContract;\n\n  const hasPriorityApprovalRequest = Boolean(\n    getPrioritizedUnapprovedTemplatedConfirmations(state).length,\n  );\n\n  return {\n    balance,\n    fromAddress,\n    fromName,\n    toAccounts,\n    toAddress,\n    toEns,\n    toName,\n    toNickname,\n    hexTransactionAmount,\n    hexMaximumTransactionFee,\n    hexMinimumTransactionFee,\n    txData: fullTxData,\n    tokenData,\n    methodData,\n    tokenProps,\n    conversionRate,\n    transactionStatus,\n    nonce,\n    unapprovedTxs,\n    unapprovedTxCount,\n    customGas: {\n      gasLimit,\n      gasPrice,\n    },\n    advancedInlineGasShown: getAdvancedInlineGasShown(state),\n    useNonceField: getUseNonceField(state),\n    customNonceValue,\n    insufficientBalance,\n    hideFiatConversion: !getShouldShowFiat(state),\n    type,\n    nextNonce,\n    mostRecentOverviewPage: getMostRecentOverviewPage(state),\n    isMainnet,\n    selectedNetworkClientId,\n    isEthGasPriceFetched,\n    noGasPrice,\n    supportsEIP1559,\n    gasIsLoading: isGasEstimatesLoading || gasLoadingAnimationIsShowing,\n    useNativeCurrencyAsPrimaryCurrency,\n    maxFeePerGas: gasEstimationObject.maxFeePerGas,\n    maxPriorityFeePerGas: gasEstimationObject.maxPriorityFeePerGas,\n    baseFeePerGas: gasEstimationObject.baseFeePerGas,\n    gasFeeIsCustom,\n    showLedgerSteps: fromAddressIsLedger,\n    nativeCurrency,\n    hardwareWalletRequiresConnection,\n    chainId,\n    isBuyableChain,\n    useCurrencyRateCheck: getUseCurrencyRateCheck(state),\n    keyringForAccount: keyring,\n    ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n    fromInternalAccount,\n    ///: END:ONLY_INCLUDE_IF\n    isUsingPaymaster,\n    isSigningOrSubmitting,\n    isUserOpContractDeployError,\n    useMaxValue,\n    maxValue,\n    smartTransactionsOptInStatus,\n    currentChainSupportsSmartTransactions,\n    hasPriorityApprovalRequest,\n  };\n};\n\nexport const mapDispatchToProps = (dispatch) => {\n  return {\n    tryReverseResolveAddress: (address) => {\n      return dispatch(tryReverseResolveAddress(address));\n    },\n    updateCustomNonce: (value) => {\n      customNonceValue = value;\n      dispatch(updateCustomNonce(value));\n    },\n    clearConfirmTransaction: () => dispatch(clearConfirmTransaction()),\n    showTransactionConfirmedModal: ({ onSubmit }) => {\n      return dispatch(showModal({ name: 'TRANSACTION_CONFIRMED', onSubmit }));\n    },\n    showRejectTransactionsConfirmationModal: ({\n      onSubmit,\n      unapprovedTxCount,\n    }) => {\n      return dispatch(\n        showModal({ name: 'REJECT_TRANSACTIONS', onSubmit, unapprovedTxCount }),\n      );\n    },\n    cancelTransaction: ({ id }) => dispatch(cancelTx({ id })),\n    cancelAllTransactions: (txList) => dispatch(cancelTxs(txList)),\n    sendTransaction: (\n      txData,\n      dontShowLoadingIndicator,\n      loadingIndicatorMessage,\n    ) =>\n      dispatch(\n        updateAndApproveTx(\n          customNonceMerge(txData),\n          dontShowLoadingIndicator,\n          loadingIndicatorMessage,\n        ),\n      ),\n    updateTransaction: (txMeta) => {\n      dispatch(updateTransaction(txMeta, true));\n    },\n    updateTransactionValue: (id, value) => {\n      dispatch(updateEditableParams(id, { value }));\n    },\n    setSwapsFeatureFlags: (swapsFeatureFlags) => {\n      dispatch(setSwapsFeatureFlags(swapsFeatureFlags));\n    },\n    fetchSmartTransactionsLiveness: () => {\n      dispatch(fetchSmartTransactionsLiveness());\n    },\n    getNextNonce: () => dispatch(getNextNonce()),\n    setDefaultHomeActiveTabName: (tabName) =>\n      dispatch(setDefaultHomeActiveTabName(tabName)),\n    updateTransactionGasFees: (gasFees) => {\n      dispatch(updateGasFees({ ...gasFees, expectHexWei: true }));\n    },\n    addToAddressBookIfNew: (newAddress, toAccounts, nickname = '') => {\n      const hexPrefixedAddress = addHexPrefix(newAddress);\n      if (addressIsNew(toAccounts, hexPrefixedAddress)) {\n        dispatch(addToAddressBook(hexPrefixedAddress, nickname));\n      }\n    },\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n  const { txData, unapprovedTxs } = stateProps;\n\n  const {\n    cancelAllTransactions: dispatchCancelAllTransactions,\n    updateTransactionGasFees: dispatchUpdateTransactionGasFees,\n    ...otherDispatchProps\n  } = dispatchProps;\n\n  let isMainBetaFlask = ownProps.isMainBetaFlask || false;\n\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  if (ownProps.isMainBetaFlask === undefined) {\n    isMainBetaFlask = true;\n  }\n  ///: END:ONLY_INCLUDE_IF\n\n  return {\n    ...stateProps,\n    ...otherDispatchProps,\n    ...ownProps,\n    cancelAllTransactions: () =>\n      dispatchCancelAllTransactions(valuesFor(unapprovedTxs)),\n    updateGasAndCalculate: ({ gasLimit, gasPrice }) => {\n      dispatchUpdateTransactionGasFees({\n        gasLimit,\n        gasPrice,\n        transaction: txData,\n      });\n    },\n    isMainBetaFlask,\n  };\n};\n\nexport default compose(\n  withRouter,\n  connect(mapStateToProps, mapDispatchToProps, mergeProps),\n)(ConfirmTransactionBase);\n","export { default } from './confirm-transaction-base.container';\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { TransactionType } from '@metamask/transaction-controller';\nimport Loading from '../../../components/ui/loading-screen';\nimport {\n  CONFIRM_TRANSACTION_ROUTE,\n  CONFIRM_DEPLOY_CONTRACT_PATH,\n  CONFIRM_SEND_ETHER_PATH,\n  CONFIRM_SEND_TOKEN_PATH,\n  CONFIRM_APPROVE_PATH,\n  CONFIRM_TRANSFER_FROM_PATH,\n  CONFIRM_TOKEN_METHOD_PATH,\n  SIGNATURE_REQUEST_PATH,\n  DECRYPT_MESSAGE_REQUEST_PATH,\n  ENCRYPTION_PUBLIC_KEY_REQUEST_PATH,\n  CONFIRM_SAFE_TRANSFER_FROM_PATH,\n  CONFIRM_SET_APPROVAL_FOR_ALL_PATH,\n  CONFIRM_INCREASE_ALLOWANCE_PATH,\n} from '../../../helpers/constants/routes';\nimport { MESSAGE_TYPE } from '../../../../shared/constants/app';\n\nexport default class ConfirmTransactionSwitch extends Component {\n  static propTypes = {\n    txData: PropTypes.object,\n  };\n\n  redirectToTransaction() {\n    const { txData } = this.props;\n    const { id, txParams: { data } = {}, type } = txData;\n\n    if (type === TransactionType.deployContract) {\n      const pathname = `${CONFIRM_TRANSACTION_ROUTE}/${id}${CONFIRM_DEPLOY_CONTRACT_PATH}`;\n      return <Redirect to={{ pathname }} />;\n    }\n\n    if (type === TransactionType.simpleSend) {\n      const pathname = `${CONFIRM_TRANSACTION_ROUTE}/${id}${CONFIRM_SEND_ETHER_PATH}`;\n      return <Redirect to={{ pathname }} />;\n    }\n\n    if (data) {\n      switch (type) {\n        case TransactionType.tokenMethodTransfer: {\n          const pathname = `${CONFIRM_TRANSACTION_ROUTE}/${id}${CONFIRM_SEND_TOKEN_PATH}`;\n          return <Redirect to={{ pathname }} />;\n        }\n        case TransactionType.tokenMethodApprove: {\n          const pathname = `${CONFIRM_TRANSACTION_ROUTE}/${id}${CONFIRM_APPROVE_PATH}`;\n          return <Redirect to={{ pathname }} />;\n        }\n        case TransactionType.tokenMethodSetApprovalForAll: {\n          const pathname = `${CONFIRM_TRANSACTION_ROUTE}/${id}${CONFIRM_SET_APPROVAL_FOR_ALL_PATH}`;\n          return <Redirect to={{ pathname }} />;\n        }\n        case TransactionType.tokenMethodTransferFrom: {\n          const pathname = `${CONFIRM_TRANSACTION_ROUTE}/${id}${CONFIRM_TRANSFER_FROM_PATH}`;\n          return <Redirect to={{ pathname }} />;\n        }\n        case TransactionType.tokenMethodSafeTransferFrom: {\n          const pathname = `${CONFIRM_TRANSACTION_ROUTE}/${id}${CONFIRM_SAFE_TRANSFER_FROM_PATH}`;\n          return <Redirect to={{ pathname }} />;\n        }\n        case TransactionType.tokenMethodIncreaseAllowance: {\n          const pathname = `${CONFIRM_TRANSACTION_ROUTE}/${id}${CONFIRM_INCREASE_ALLOWANCE_PATH}`;\n          return <Redirect to={{ pathname }} />;\n        }\n        default: {\n          const pathname = `${CONFIRM_TRANSACTION_ROUTE}/${id}${CONFIRM_TOKEN_METHOD_PATH}`;\n          return <Redirect to={{ pathname }} />;\n        }\n      }\n    }\n\n    const pathname = `${CONFIRM_TRANSACTION_ROUTE}/${id}${CONFIRM_SEND_ETHER_PATH}`;\n    return <Redirect to={{ pathname }} />;\n  }\n\n  render() {\n    const { txData } = this.props;\n    if (txData.txParams) {\n      return this.redirectToTransaction();\n    } else if (txData.msgParams) {\n      let pathname = `${CONFIRM_TRANSACTION_ROUTE}/${txData.id}${SIGNATURE_REQUEST_PATH}`;\n      if (txData.type === MESSAGE_TYPE.ETH_DECRYPT) {\n        pathname = `${CONFIRM_TRANSACTION_ROUTE}/${txData.id}${DECRYPT_MESSAGE_REQUEST_PATH}`;\n      } else if (txData.type === MESSAGE_TYPE.ETH_GET_ENCRYPTION_PUBLIC_KEY) {\n        pathname = `${CONFIRM_TRANSACTION_ROUTE}/${txData.id}${ENCRYPTION_PUBLIC_KEY_REQUEST_PATH}`;\n      }\n      return <Redirect to={{ pathname }} />;\n    }\n\n    return <Loading />;\n  }\n}\n","import { connect } from 'react-redux';\nimport {\n  getUnapprovedTransactions,\n  unconfirmedTransactionsListSelector,\n} from '../../../selectors';\nimport { CONFIRM_TRANSACTION_ROUTE } from '../../../helpers/constants/routes';\nimport ConfirmTransactionSwitch from './confirm-transaction-switch.component';\n\nconst mapStateToProps = (state, ownProps) => {\n  const unapprovedTxs = getUnapprovedTransactions(state);\n  const {\n    match: { params = {}, url },\n  } = ownProps;\n  const confirmTransactionRoute = `${CONFIRM_TRANSACTION_ROUTE}/`;\n  const urlId = url.includes(confirmTransactionRoute)\n    ? url.split(confirmTransactionRoute)[1]\n    : null;\n  const { id: paramsId } = params;\n  const transactionId = paramsId || urlId;\n\n  const unconfirmedTransactions = unconfirmedTransactionsListSelector(state);\n  const totalUnconfirmed = unconfirmedTransactions.length;\n  const transaction = totalUnconfirmed\n    ? unapprovedTxs[transactionId] || unconfirmedTransactions[0]\n    : {};\n\n  return {\n    txData: transaction,\n  };\n};\n\nexport default connect(mapStateToProps)(ConfirmTransactionSwitch);\n","import ConfirmTransactionSwitch from './confirm-transaction-switch.container';\n\nexport default ConfirmTransactionSwitch;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Switch, Route, useHistory } from 'react-router-dom';\n\nimport { sumHexes } from '../../../../shared/modules/conversion.utils';\nimport {\n  CONFIRM_APPROVE_PATH,\n  CONFIRM_INCREASE_ALLOWANCE_PATH,\n  CONFIRM_SAFE_TRANSFER_FROM_PATH,\n  CONFIRM_SEND_TOKEN_PATH,\n  CONFIRM_SET_APPROVAL_FOR_ALL_PATH,\n  CONFIRM_TRANSACTION_ROUTE,\n  CONFIRM_TRANSFER_FROM_PATH,\n  SEND_ROUTE,\n} from '../../../helpers/constants/routes';\nimport { transactionFeeSelector } from '../../../selectors';\nimport ConfirmApprove from '../confirm-approve';\nimport ConfirmSendToken from '../confirm-send-token';\nimport ConfirmTokenTransactionBase from '../confirm-token-transaction-base';\nimport ConfirmTransactionSwitch from '../confirm-transaction-switch';\nimport { editExistingTransaction } from '../../../ducks/send';\nimport { AssetType } from '../../../../shared/constants/transaction';\nimport { clearConfirmTransaction } from '../../../ducks/confirm-transaction/confirm-transaction.duck';\n\nimport { useAssetDetails } from '../hooks/useAssetDetails';\n\nexport default function ConfirmTokenTransactionSwitch({ transaction }) {\n  const {\n    txParams: { data, to: tokenAddress, from: userAddress } = {},\n    layer1GasFee,\n  } = transaction;\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const {\n    assetStandard,\n    assetName,\n    userBalance,\n    tokenSymbol,\n    decimals,\n    tokenImage,\n    tokenAmount,\n    tokenId,\n    toAddress,\n  } = useAssetDetails(tokenAddress, userAddress, data);\n\n  const {\n    ethTransactionTotal,\n    fiatTransactionTotal,\n    hexTransactionTotal,\n    hexMaximumTransactionFee,\n    hexMinimumTransactionFee,\n  } = useSelector((state) => transactionFeeSelector(state, transaction));\n\n  return (\n    <Switch>\n      <Route\n        exact\n        path={`${CONFIRM_TRANSACTION_ROUTE}/:id?${CONFIRM_APPROVE_PATH}`}\n        render={() => (\n          <ConfirmApprove\n            assetStandard={assetStandard}\n            assetName={assetName}\n            userBalance={userBalance}\n            tokenSymbol={tokenSymbol}\n            decimals={decimals}\n            tokenImage={tokenImage}\n            tokenAmount={tokenAmount}\n            tokenId={tokenId}\n            userAddress={userAddress}\n            tokenAddress={tokenAddress}\n            toAddress={toAddress}\n            transaction={transaction}\n            ethTransactionTotal={ethTransactionTotal}\n            fiatTransactionTotal={fiatTransactionTotal}\n            hexTransactionTotal={hexTransactionTotal}\n            hexMinimumTransactionFee={hexMinimumTransactionFee}\n          />\n        )}\n      />\n      <Route\n        exact\n        path={`${CONFIRM_TRANSACTION_ROUTE}/:id?${CONFIRM_SET_APPROVAL_FOR_ALL_PATH}`}\n        render={() => (\n          <ConfirmApprove\n            isSetApproveForAll\n            assetStandard={assetStandard}\n            assetName={assetName}\n            userBalance={userBalance}\n            tokenSymbol={tokenSymbol}\n            decimals={decimals}\n            tokenImage={tokenImage}\n            tokenAmount={tokenAmount}\n            tokenId={tokenId}\n            userAddress={userAddress}\n            tokenAddress={tokenAddress}\n            toAddress={toAddress}\n            transaction={transaction}\n            ethTransactionTotal={ethTransactionTotal}\n            fiatTransactionTotal={fiatTransactionTotal}\n            hexTransactionTotal={hexTransactionTotal}\n            hexMinimumTransactionFee={hexMinimumTransactionFee}\n          />\n        )}\n      />\n      <Route\n        exact\n        path={`${CONFIRM_TRANSACTION_ROUTE}/:id?${CONFIRM_TRANSFER_FROM_PATH}`}\n        render={() => (\n          <ConfirmTokenTransactionBase\n            assetStandard={assetStandard}\n            assetName={assetName}\n            userBalance={userBalance}\n            tokenSymbol={tokenSymbol}\n            decimals={decimals}\n            image={tokenImage}\n            tokenAddress={tokenAddress}\n            onEdit={async ({ txData }) => {\n              const { id } = txData;\n              await dispatch(\n                editExistingTransaction(AssetType.NFT, id.toString()),\n              );\n              dispatch(clearConfirmTransaction());\n              history.push(SEND_ROUTE);\n            }}\n            toAddress={toAddress}\n            tokenAmount={tokenAmount}\n            tokenId={tokenId}\n            userAddress={userAddress}\n            transaction={transaction}\n            ethTransactionTotal={ethTransactionTotal}\n            fiatTransactionTotal={fiatTransactionTotal}\n            hexMaximumTransactionFee={hexMaximumTransactionFee}\n          />\n        )}\n      />\n      <Route\n        exact\n        path={`${CONFIRM_TRANSACTION_ROUTE}/:id?${CONFIRM_SAFE_TRANSFER_FROM_PATH}`}\n        render={() => (\n          <ConfirmTokenTransactionBase\n            assetStandard={assetStandard}\n            assetName={assetName}\n            userBalance={userBalance}\n            tokenSymbol={tokenSymbol}\n            decimals={decimals}\n            image={tokenImage}\n            tokenAddress={tokenAddress}\n            onEdit={async ({ txData }) => {\n              const { id } = txData;\n              await dispatch(\n                editExistingTransaction(AssetType.NFT, id.toString()),\n              );\n              dispatch(clearConfirmTransaction());\n              history.push(SEND_ROUTE);\n            }}\n            toAddress={toAddress}\n            tokenAmount={tokenAmount}\n            tokenId={tokenId}\n            userAddress={userAddress}\n            transaction={transaction}\n            ethTransactionTotal={ethTransactionTotal}\n            fiatTransactionTotal={fiatTransactionTotal}\n            hexMaximumTransactionFee={hexMaximumTransactionFee}\n          />\n        )}\n      />\n      <Route\n        exact\n        path={`${CONFIRM_TRANSACTION_ROUTE}/:id?${CONFIRM_SEND_TOKEN_PATH}`}\n        render={() => (\n          <ConfirmSendToken\n            assetStandard={assetStandard}\n            assetName={assetName}\n            tokenSymbol={tokenSymbol}\n            image={tokenImage}\n            tokenAddress={tokenAddress}\n            toAddress={toAddress}\n            tokenAmount={tokenAmount}\n            tokenId={tokenId}\n            transaction={transaction}\n            ethTransactionTotal={ethTransactionTotal}\n            fiatTransactionTotal={fiatTransactionTotal}\n            hexMaximumTransactionFee={sumHexes(\n              hexMaximumTransactionFee,\n              layer1GasFee ?? 0x0,\n            )}\n          />\n        )}\n      />\n      <Route\n        exact\n        path={`${CONFIRM_TRANSACTION_ROUTE}/:id?${CONFIRM_INCREASE_ALLOWANCE_PATH}`}\n        render={() => (\n          <ConfirmApprove\n            assetStandard={assetStandard}\n            assetName={assetName}\n            userBalance={userBalance}\n            tokenSymbol={tokenSymbol}\n            decimals={decimals}\n            tokenImage={tokenImage}\n            tokenAmount={tokenAmount}\n            tokenId={tokenId}\n            userAddress={userAddress}\n            tokenAddress={tokenAddress}\n            toAddress={toAddress}\n            transaction={transaction}\n            ethTransactionTotal={ethTransactionTotal}\n            fiatTransactionTotal={fiatTransactionTotal}\n            hexTransactionTotal={hexTransactionTotal}\n            hexMinimumTransactionFee={hexMinimumTransactionFee}\n          />\n        )}\n      />\n      <Route path=\"*\" component={ConfirmTransactionSwitch} />\n    </Switch>\n  );\n}\n\nConfirmTokenTransactionSwitch.propTypes = {\n  transaction: PropTypes.shape({\n    origin: PropTypes.string,\n    txParams: PropTypes.shape({\n      data: PropTypes.string,\n      to: PropTypes.string,\n      from: PropTypes.string,\n    }),\n    layer1GasFee: PropTypes.number,\n  }),\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Route, Switch, useHistory, useParams } from 'react-router-dom';\nimport {\n  ENVIRONMENT_TYPE_NOTIFICATION,\n  ORIGIN_METAMASK,\n} from '../../../../shared/constants/app';\nimport Loading from '../../../components/ui/loading-screen';\nimport {\n  clearConfirmTransaction,\n  setTransactionToConfirm,\n} from '../../../ducks/confirm-transaction/confirm-transaction.duck';\nimport { getMostRecentOverviewPage } from '../../../ducks/history/history';\nimport { getSendTo } from '../../../ducks/send';\nimport {\n  CONFIRM_DEPLOY_CONTRACT_PATH,\n  CONFIRM_SEND_ETHER_PATH,\n  CONFIRM_TOKEN_METHOD_PATH,\n  CONFIRM_TRANSACTION_ROUTE,\n  DECRYPT_MESSAGE_REQUEST_PATH,\n  DEFAULT_ROUTE,\n  ENCRYPTION_PUBLIC_KEY_REQUEST_PATH,\n  SIGNATURE_REQUEST_PATH,\n} from '../../../helpers/constants/routes';\nimport { isTokenMethodAction } from '../../../helpers/utils/transactions.util';\nimport usePolling from '../../../hooks/usePolling';\nimport { usePrevious } from '../../../hooks/usePrevious';\nimport {\n  getSelectedNetworkClientId,\n  unconfirmedTransactionsHashSelector,\n  unconfirmedTransactionsListSelector,\n  use4ByteResolutionSelector,\n} from '../../../selectors';\nimport {\n  endBackgroundTrace,\n  gasFeeStartPollingByNetworkClientId,\n  gasFeeStopPollingByPollingToken,\n  getContractMethodData,\n  setDefaultHomeActiveTabName,\n} from '../../../store/actions';\nimport ConfirmDecryptMessage from '../../confirm-decrypt-message';\nimport ConfirmEncryptionPublicKey from '../../confirm-encryption-public-key';\nimport ConfirmContractInteraction from '../confirm-contract-interaction';\nimport ConfirmDeployContract from '../confirm-deploy-contract';\nimport ConfirmSendEther from '../confirm-send-ether';\nimport ConfirmSignatureRequest from '../confirm-signature-request';\nimport ConfirmTransactionSwitch from '../confirm-transaction-switch';\nimport Confirm from '../confirm/confirm';\nimport useCurrentConfirmation from '../hooks/useCurrentConfirmation';\nimport { getEnvironmentType } from '../../../../app/scripts/lib/util';\nimport { useAsyncResult } from '../../../hooks/useAsyncResult';\nimport { TraceName } from '../../../../shared/lib/trace';\nimport ConfirmTokenTransactionSwitch from './confirm-token-transaction-switch';\n\nconst ConfirmTransaction = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { id: paramsTransactionId } = useParams();\n\n  const mostRecentOverviewPage = useSelector(getMostRecentOverviewPage);\n  const sendTo = useSelector(getSendTo);\n\n  const unconfirmedTxsSorted = useSelector(unconfirmedTransactionsListSelector);\n  const unconfirmedTxs = useSelector(unconfirmedTransactionsHashSelector);\n  const networkClientId = useSelector(getSelectedNetworkClientId);\n\n  const totalUnapproved = unconfirmedTxsSorted.length || 0;\n  const getTransaction = useCallback(() => {\n    return totalUnapproved\n      ? unconfirmedTxs[paramsTransactionId] || unconfirmedTxsSorted[0]\n      : {};\n  }, [\n    paramsTransactionId,\n    totalUnapproved,\n    unconfirmedTxs,\n    unconfirmedTxsSorted,\n  ]);\n  const [transaction, setTransaction] = useState(getTransaction);\n  const use4ByteResolution = useSelector(use4ByteResolutionSelector);\n  const { currentConfirmation } = useCurrentConfirmation();\n\n  useEffect(() => {\n    const tx = getTransaction();\n    setTransaction(tx);\n    if (tx?.id) {\n      dispatch(setTransactionToConfirm(tx.id));\n    }\n  }, [\n    dispatch,\n    getTransaction,\n    paramsTransactionId,\n    totalUnapproved,\n    unconfirmedTxs,\n    unconfirmedTxsSorted,\n  ]);\n\n  const { id, type } = transaction;\n\n  const isNotification = getEnvironmentType() === ENVIRONMENT_TYPE_NOTIFICATION;\n\n  useAsyncResult(async () => {\n    if (!isNotification) {\n      return undefined;\n    }\n\n    return await endBackgroundTrace({\n      name: TraceName.NotificationDisplay,\n      id,\n    });\n  }, [id, isNotification]);\n\n  const transactionId = id;\n  const isValidTokenMethod = isTokenMethodAction(type);\n  const isValidTransactionId =\n    transactionId &&\n    (!paramsTransactionId || paramsTransactionId === transactionId);\n\n  const prevParamsTransactionId = usePrevious(paramsTransactionId);\n  const prevTransactionId = usePrevious(transactionId);\n\n  usePolling({\n    startPollingByNetworkClientId: gasFeeStartPollingByNetworkClientId,\n    stopPollingByPollingToken: gasFeeStopPollingByPollingToken,\n    networkClientId: transaction.networkClientId ?? networkClientId,\n  });\n\n  useEffect(() => {\n    if (!totalUnapproved && !sendTo) {\n      history.replace(mostRecentOverviewPage);\n    } else {\n      const { txParams: { data } = {}, origin } = transaction;\n\n      if (origin !== ORIGIN_METAMASK) {\n        dispatch(getContractMethodData(data, use4ByteResolution));\n      }\n\n      const txId = transactionId || paramsTransactionId;\n      if (txId) {\n        dispatch(setTransactionToConfirm(txId));\n      }\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (\n      paramsTransactionId &&\n      transactionId &&\n      prevParamsTransactionId !== paramsTransactionId\n    ) {\n      const { txData: { txParams: { data } = {}, origin } = {} } = transaction;\n\n      dispatch(clearConfirmTransaction());\n      dispatch(setTransactionToConfirm(paramsTransactionId));\n      if (origin !== ORIGIN_METAMASK) {\n        dispatch(getContractMethodData(data, use4ByteResolution));\n      }\n    } else if (prevTransactionId && !transactionId && !totalUnapproved) {\n      dispatch(setDefaultHomeActiveTabName('activity')).then(() => {\n        history.replace(DEFAULT_ROUTE);\n      });\n    } else if (\n      prevTransactionId &&\n      transactionId &&\n      prevTransactionId !== transactionId &&\n      paramsTransactionId !== transactionId\n    ) {\n      history.replace(mostRecentOverviewPage);\n    }\n  }, [\n    dispatch,\n    history,\n    mostRecentOverviewPage,\n    paramsTransactionId,\n    prevParamsTransactionId,\n    prevTransactionId,\n    totalUnapproved,\n    transaction,\n    transactionId,\n    use4ByteResolution,\n  ]);\n\n  // Code below is required as we need to support both new and old confirmation pages,\n  // It takes care to render <Confirm /> component for confirmations of type Personal Sign.\n  // Once we migrate all confirmations to new designs we can get rid of this code\n  // and render <Confirm /> component for all confirmation requests.\n  if (currentConfirmation) {\n    return <Confirm />;\n  }\n\n  if (isValidTokenMethod && isValidTransactionId) {\n    return <ConfirmTokenTransactionSwitch transaction={transaction} />;\n  }\n  // Show routes when state.confirmTransaction has been set and when either the ID in the params\n  // isn't specified or is specified and matches the ID in state.confirmTransaction in order to\n  // support URLs of /confirm-transaction or /confirm-transaction/<transactionId>\n  return isValidTransactionId ? (\n    <Switch>\n      <Route\n        exact\n        path={`${CONFIRM_TRANSACTION_ROUTE}/:id?${CONFIRM_DEPLOY_CONTRACT_PATH}`}\n        component={ConfirmDeployContract}\n      />\n      <Route\n        exact\n        path={`${CONFIRM_TRANSACTION_ROUTE}/:id?${CONFIRM_SEND_ETHER_PATH}`}\n        component={ConfirmSendEther}\n      />\n      <Route\n        exact\n        path={`${CONFIRM_TRANSACTION_ROUTE}/:id?${CONFIRM_TOKEN_METHOD_PATH}`}\n        component={ConfirmContractInteraction}\n      />\n      <Route\n        exact\n        path={`${CONFIRM_TRANSACTION_ROUTE}/:id?${SIGNATURE_REQUEST_PATH}`}\n        component={ConfirmSignatureRequest}\n      />\n      <Route\n        exact\n        path={`${CONFIRM_TRANSACTION_ROUTE}/:id?${DECRYPT_MESSAGE_REQUEST_PATH}`}\n        component={ConfirmDecryptMessage}\n      />\n      <Route\n        exact\n        path={`${CONFIRM_TRANSACTION_ROUTE}/:id?${ENCRYPTION_PUBLIC_KEY_REQUEST_PATH}`}\n        component={ConfirmEncryptionPublicKey}\n      />\n      <Route path=\"*\" component={ConfirmTransactionSwitch} />\n    </Switch>\n  ) : (\n    <Loading />\n  );\n};\n\nexport default ConfirmTransaction;\n","import ConfirmTransaction from './confirm-transaction.component';\n\nexport default ConfirmTransaction;\n","import React, { ReactNode } from 'react';\nimport { ReactNodeLike } from 'prop-types';\n\nimport { Page } from '../../../components/multichain/pages/page';\nimport { GasFeeContextProvider } from '../../../contexts/gasFee';\nimport { TransactionModalContextProvider } from '../../../contexts/transaction-modal';\nimport AdvancedGasFeePopover from '../components/advanced-gas-fee-popover';\nimport { BlockaidLoadingIndicator } from '../components/confirm/blockaid-loading-indicator';\nimport { ConfirmAlerts } from '../components/confirm/confirm-alerts';\nimport { Footer } from '../components/confirm/footer';\nimport { Header } from '../components/confirm/header';\nimport { Info } from '../components/confirm/info';\nimport { LedgerInfo } from '../components/confirm/ledger-info';\nimport { Nav } from '../components/confirm/nav';\nimport { PluggableSection } from '../components/confirm/pluggable-section';\nimport ScrollToBottom from '../components/confirm/scroll-to-bottom';\nimport { Title } from '../components/confirm/title';\nimport EditGasFeePopover from '../components/edit-gas-fee-popover';\nimport { NetworkChangeToast } from '../components/confirm/network-change-toast';\nimport { ConfirmContextProvider, useConfirmContext } from '../context/confirm';\n\nconst EIP1559TransactionGasModal = () => {\n  return (\n    <>\n      <EditGasFeePopover />\n      <AdvancedGasFeePopover />\n    </>\n  );\n};\n\nconst GasFeeContextProviderWrapper: React.FC<{\n  children: ReactNode;\n}> = ({ children }) => {\n  const { currentConfirmation } = useConfirmContext();\n  return (\n    <GasFeeContextProvider transaction={currentConfirmation}>\n      {children as NonNullable<ReactNodeLike>}\n    </GasFeeContextProvider>\n  );\n};\n\nconst Confirm = () => (\n  <ConfirmContextProvider>\n    <TransactionModalContextProvider>\n      {/* This context should be removed once we implement the new edit gas fees popovers */}\n      <GasFeeContextProviderWrapper>\n        <EIP1559TransactionGasModal />\n        <ConfirmAlerts>\n          <Page className=\"confirm_wrapper\">\n            <Nav />\n            <Header />\n            <ScrollToBottom>\n              {\n              }\n              <BlockaidLoadingIndicator />\n              <LedgerInfo />\n              <Title />\n              <Info />\n              <PluggableSection />\n            </ScrollToBottom>\n            <Footer />\n            <NetworkChangeToast />\n          </Page>\n        </ConfirmAlerts>\n      </GasFeeContextProviderWrapper>\n    </TransactionModalContextProvider>\n  </ConfirmContextProvider>\n);\n\nexport default Confirm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Button from '../../../../../components/ui/button';\n\nexport default function ConfirmationFooter({\n  onSubmit,\n  onCancel,\n  submitText,\n  cancelText,\n  loadingText,\n  alerts,\n  loading,\n  submitAlerts,\n  actionsStyle,\n  style,\n}) {\n  const showActions = Boolean(onCancel || onSubmit);\n  return (\n    <div className=\"confirmation-footer\" style={style}>\n      {alerts}\n      {submitAlerts}\n      {showActions && (\n        <div className=\"confirmation-footer__actions\" style={actionsStyle}>\n          {onCancel ? (\n            <Button\n              data-testid=\"confirmation-cancel-button\"\n              type=\"secondary\"\n              onClick={onCancel}\n            >\n              {cancelText}\n            </Button>\n          ) : null}\n          {onSubmit && submitText ? (\n            <Button\n              data-testid=\"confirmation-submit-button\"\n              disabled={Boolean(loading)}\n              type=\"primary\"\n              onClick={onSubmit}\n              className={classnames({\n                centered: !onCancel,\n              })}\n            >\n              {loading ? loadingText : submitText}\n            </Button>\n          ) : null}\n        </div>\n      )}\n    </div>\n  );\n}\n\nConfirmationFooter.propTypes = {\n  alerts: PropTypes.node,\n  onCancel: PropTypes.func,\n  cancelText: PropTypes.string,\n  onSubmit: PropTypes.func.isRequired,\n  submitText: PropTypes.string.isRequired,\n  loadingText: PropTypes.string,\n  loading: PropTypes.bool,\n  submitAlerts: PropTypes.node,\n  style: PropTypes.object,\n  actionsStyle: PropTypes.object,\n};\n","export { default } from './confirmation-footer';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  AvatarNetwork,\n  AvatarNetworkSize,\n  Box,\n  Text,\n} from '../../../../../components/component-library';\nimport {\n  Display,\n  JustifyContent,\n  BlockSize,\n  AlignItems,\n} from '../../../../../helpers/constants/design-system';\nimport {\n  CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP,\n  NETWORK_TO_NAME_MAP,\n} from '../../../../../../shared/constants/network';\n\nconst getNetworkDetails = (network) => {\n  return {\n    ...network,\n    name: network.name ?? NETWORK_TO_NAME_MAP[network.chainId],\n    iconUrl:\n      network.iconUrl ?? CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[network.chainId],\n  };\n};\n\nexport default function ConfirmationNetworkSwitch({ toNetwork, fromNetwork }) {\n  const fromNetworkDetails = getNetworkDetails(fromNetwork);\n  const toNetworkDetails = getNetworkDetails(toNetwork);\n\n  return (\n    <Box\n      className=\"confirmation-network-switch\"\n      display={Display.Flex}\n      height={BlockSize.Full}\n      justifyContent={JustifyContent.center}\n      marginTop={8}\n    >\n      <Box\n        className=\"confirmation-network-switch__icon\"\n        display={Display.Block}\n      >\n        <AvatarNetwork\n          src={fromNetworkDetails.iconUrl}\n          name={fromNetworkDetails.name}\n          size={AvatarNetworkSize.Xl}\n          marginBottom={2}\n        />\n        <Text\n          display={Display.Flex}\n          justifyContent={JustifyContent.center}\n          data-testid=\"network-switch-from-network\"\n        >\n          {fromNetworkDetails.name}\n        </Text>\n      </Box>\n      <Box\n        className=\"confirmation-network-switch__center-icon\"\n        display={Display.Flex}\n        alignItems={AlignItems.center}\n        justifyContent={JustifyContent.center}\n      >\n        <i className=\"fa fa-angle-right fa-lg confirmation-network-switch__check\" />\n        <div className=\"confirmation-network-switch__dashed-line\" />\n      </Box>\n      <Box\n        className=\"confirmation-network-switch__icon\"\n        display={Display.Block}\n      >\n        <AvatarNetwork\n          src={toNetworkDetails.iconUrl}\n          name={toNetworkDetails.name}\n          size={AvatarNetworkSize.Xl}\n          marginBottom={2}\n        />\n        <Text\n          display={Display.Flex}\n          justifyContent={JustifyContent.center}\n          data-testid=\"network-switch-to-network\"\n        >\n          {toNetworkDetails.name}\n        </Text>\n      </Box>\n    </Box>\n  );\n}\n\nConfirmationNetworkSwitch.propTypes = {\n  toNetwork: PropTypes.shape({\n    chainId: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n  fromNetwork: PropTypes.shape({\n    chainId: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n};\n","export { default } from './confirmation-network-switch';\n","export { QueuedRequestsBannerAlert } from './queued-requests-banner-alert';\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { QueueType } from '../../../../../../shared/constants/metametrics';\nimport {\n  BannerAlert,\n  BannerAlertSeverity,\n} from '../../../../../components/component-library';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\nimport { getQueuedRequestCount } from '../../../../../selectors';\nimport { useQueuedConfirmationsEvent } from '../../../hooks/useQueuedConfirmationEvents';\n\nexport const QueuedRequestsBannerAlert = () => {\n  const t = useI18nContext();\n\n  const queuedRequestCount = useSelector(getQueuedRequestCount);\n\n  useQueuedConfirmationsEvent(QueueType.QueueController);\n\n  if (queuedRequestCount === 0) {\n    return null;\n  }\n\n  return (\n    <BannerAlert\n      severity={BannerAlertSeverity.Info}\n      description={t('existingRequestsBannerAlertDesc')}\n      margin={4}\n    />\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState,\n  useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { isEqual } from 'lodash';\nimport { produce } from 'immer';\nimport log from 'loglevel';\nimport { ApprovalType } from '@metamask/controller-utils';\nimport { DIALOG_APPROVAL_TYPES } from '@metamask/snaps-rpc-methods';\nimport fetchWithCache from '../../../../shared/lib/fetch-with-cache';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport MetaMaskTemplateRenderer from '../../../components/app/metamask-template-renderer';\nimport ConfirmationWarningModal from '../components/confirmation-warning-modal';\nimport { DEFAULT_ROUTE } from '../../../helpers/constants/routes';\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  getMemoizedUnapprovedTemplatedConfirmations,\n  getUnapprovedTxCount,\n  getApprovalFlows,\n  getTotalUnapprovedCount,\n  useSafeChainsListValidationSelector,\n  getSnapsMetadata,\n  getNetworkConfigurationsByChainId,\n  getHideSnapBranding,\n} from '../../../selectors';\nimport NetworkDisplay from '../../../components/app/network-display/network-display';\nimport Callout from '../../../components/ui/callout';\nimport { Box, Icon, IconName } from '../../../components/component-library';\nimport Loading from '../../../components/ui/loading-screen';\nimport SnapAuthorshipHeader from '../../../components/app/snaps/snap-authorship-header';\nimport { SnapUIRenderer } from '../../../components/app/snaps/snap-ui-renderer';\n///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\nimport { SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES } from '../../../../shared/constants/app';\n///: END:ONLY_INCLUDE_IF\nimport { DAY } from '../../../../shared/constants/time';\nimport {\n  BlockSize,\n  Display,\n  BackgroundColor,\n} from '../../../helpers/constants/design-system';\nimport ConfirmationFooter from './components/confirmation-footer';\nimport {\n  getTemplateValues,\n  getTemplateAlerts,\n  getTemplateState,\n} from './templates';\n\n// TODO(rekmarks): This component and all of its sub-components should probably\n// be renamed to \"Dialog\", now that we are using it in that manner.\n\n/**\n * a very simple reducer using produce from Immer to keep state manipulation\n * immutable and painless. This state is not stored in redux state because it\n * should persist only for the lifespan of the current session, and will only\n * be used on this page. Dismissing alerts for confirmations should persist\n * while the user pages back and forth between confirmations. However, if the\n * user closes the confirmation window and later reopens the extension they\n * should be displayed the alerts again.\n */\nconst alertStateReducer = produce((state, action) => {\n  switch (action.type) {\n    case 'dismiss':\n      if (state?.[action.confirmationId]?.[action.alertId]) {\n        state[action.confirmationId][action.alertId].dismissed = true;\n      }\n      break;\n    case 'set':\n      if (!state[action.confirmationId]) {\n        state[action.confirmationId] = {};\n      }\n      action.alerts.forEach((alert) => {\n        state[action.confirmationId][alert.id] = {\n          ...alert,\n          dismissed: false,\n        };\n      });\n      break;\n    default:\n      throw new Error(\n        'You must provide a type when dispatching an action for alertState',\n      );\n  }\n});\n\n/**\n * Encapsulates the state and effects needed to manage alert state for the\n * confirmation page in a custom hook. This hook is not likely to be used\n * outside of this file, but it helps to reduce complexity of the primary\n * component.\n *\n * @param {object} pendingConfirmation - a pending confirmation waiting for\n * user approval\n * @param {object} state - The state object consist of required info to determine alerts.\n * @param state.unapprovedTxsCount\n * @param state.useSafeChainsListValidation\n * @param state.matchedChain\n * @param state.providerError\n * @param state.preventAlertsForAddChainValidation\n * @returns {[alertState: object, dismissAlert: Function]} A tuple with\n * the current alert state and function to dismiss an alert by id\n */\nfunction useAlertState(\n  pendingConfirmation,\n  {\n    unapprovedTxsCount,\n    useSafeChainsListValidation,\n    matchedChain,\n    providerError,\n    preventAlertsForAddChainValidation = false,\n  } = {},\n) {\n  const [alertState, dispatch] = useReducer(alertStateReducer, {});\n\n  /**\n   * Computation of the current alert state happens every time the current\n   * pendingConfirmation changes. The async function getTemplateAlerts is\n   * responsible for returning alert state. Setting state on unmounted\n   * components is an anti-pattern, so we use a isMounted variable to keep\n   * track of the current state of the component. Returning a function that\n   * sets isMounted to false when the component is unmounted.\n   */\n  useEffect(() => {\n    let isMounted = true;\n    if (pendingConfirmation && !preventAlertsForAddChainValidation) {\n      getTemplateAlerts(pendingConfirmation, {\n        unapprovedTxsCount,\n        useSafeChainsListValidation,\n        matchedChain,\n        providerError,\n      }).then((alerts) => {\n        if (isMounted && alerts.length > 0) {\n          dispatch({\n            type: 'set',\n            confirmationId: pendingConfirmation.id,\n            alerts,\n          });\n        }\n      });\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [\n    pendingConfirmation,\n    unapprovedTxsCount,\n    useSafeChainsListValidation,\n    matchedChain,\n    providerError,\n    preventAlertsForAddChainValidation,\n  ]);\n\n  const dismissAlert = useCallback(\n    (alertId) => {\n      dispatch({\n        type: 'dismiss',\n        confirmationId: pendingConfirmation.id,\n        alertId,\n      });\n    },\n    [pendingConfirmation],\n  );\n\n  return [alertState, dismissAlert];\n}\n\nfunction useTemplateState(pendingConfirmation) {\n  const [templateState, setTemplateState] = useState({});\n  useEffect(() => {\n    let isMounted = true;\n    if (pendingConfirmation) {\n      getTemplateState(pendingConfirmation).then((state) => {\n        if (isMounted && Object.values(state).length > 0) {\n          setTemplateState((prevState) => ({\n            ...prevState,\n            [pendingConfirmation.id]: state,\n          }));\n        }\n      });\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [pendingConfirmation]);\n\n  return [templateState];\n}\n\nexport default function ConfirmationPage({\n  redirectToHomeOnZeroConfirmations = true,\n}) {\n  const t = useI18nContext();\n  const trackEvent = useContext(MetaMetricsContext);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const pendingConfirmations = useSelector(\n    getMemoizedUnapprovedTemplatedConfirmations,\n  );\n  const unapprovedTxsCount = useSelector(getUnapprovedTxCount);\n  const approvalFlows = useSelector(getApprovalFlows, isEqual);\n  const totalUnapprovedCount = useSelector(getTotalUnapprovedCount);\n  const useSafeChainsListValidation = useSelector(\n    useSafeChainsListValidationSelector,\n  );\n  const networkConfigurationsByChainId = useSelector(\n    getNetworkConfigurationsByChainId,\n  );\n  const [approvalFlowLoadingText, setApprovalFlowLoadingText] = useState(null);\n\n  const [currentPendingConfirmation, setCurrentPendingConfirmation] =\n    useState(0);\n  const { id } = useParams();\n  const pendingRoutedConfirmation = pendingConfirmations.find(\n    (confirmation) => confirmation.id === id,\n  );\n  // Confirmations that are directly routed to get priority and will be shown above the current queue.\n  const pendingConfirmation =\n    pendingRoutedConfirmation ??\n    pendingConfirmations[currentPendingConfirmation];\n\n  const [matchedChain, setMatchedChain] = useState({});\n  const [chainFetchComplete, setChainFetchComplete] = useState(false);\n  const preventAlertsForAddChainValidation =\n    pendingConfirmation?.type === ApprovalType.AddEthereumChain &&\n    !chainFetchComplete;\n  const [currencySymbolWarning, setCurrencySymbolWarning] = useState(null);\n  const [providerError, setProviderError] = useState(null);\n  const [alertState, dismissAlert] = useAlertState(pendingConfirmation, {\n    unapprovedTxsCount,\n    useSafeChainsListValidation,\n    matchedChain,\n    providerError,\n    preventAlertsForAddChainValidation,\n  });\n  const [templateState] = useTemplateState(pendingConfirmation);\n  const [showWarningModal, setShowWarningModal] = useState(false);\n\n  const [inputStates, setInputStates] = useState({});\n  const setInputState = (key, value) => {\n    setInputStates((currentState) => ({ ...currentState, [key]: value }));\n  };\n  const [loading, setLoading] = useState(false);\n  const [loadingText, setLoadingText] = useState();\n\n  const [submitAlerts, setSubmitAlerts] = useState([]);\n\n  const snapsMetadata = useSelector(getSnapsMetadata);\n\n  const hideSnapBranding = useSelector((state) =>\n    getHideSnapBranding(state, pendingConfirmation?.origin),\n  );\n\n  const name = snapsMetadata[pendingConfirmation?.origin]?.name;\n\n  const SNAP_DIALOG_TYPE = Object.values(DIALOG_APPROVAL_TYPES);\n\n  const SNAP_CUSTOM_UI_DIALOG = Object.values(DIALOG_APPROVAL_TYPES);\n\n  ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n  SNAP_DIALOG_TYPE.push(\n    ...Object.values(SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES),\n  );\n  ///: END:ONLY_INCLUDE_IF\n\n  const isSnapDialog = SNAP_DIALOG_TYPE.includes(pendingConfirmation?.type);\n  const isSnapCustomUIDialog = SNAP_CUSTOM_UI_DIALOG.includes(\n    pendingConfirmation?.type,\n  );\n  const isSnapPrompt =\n    pendingConfirmation?.type === ApprovalType.SnapDialogPrompt;\n\n  const isSnapDefaultDialog =\n    pendingConfirmation?.type === DIALOG_APPROVAL_TYPES.default;\n\n  // When pendingConfirmation is undefined, this will also be undefined\n  const snapName = isSnapDialog && name;\n\n  const INPUT_STATE_CONFIRMATIONS = [ApprovalType.SnapDialogPrompt];\n\n  // Generating templatedValues is potentially expensive, and if done on every render\n  // will result in a new object. Avoiding calling this generation unnecessarily will\n  // improve performance and prevent unnecessary draws.\n  const templatedValues = useMemo(() => {\n    return pendingConfirmation\n      ? getTemplateValues(\n          {\n            snapName: isSnapDialog && snapName,\n            ...pendingConfirmation,\n          },\n          t,\n          dispatch,\n          history,\n          {\n            matchedChain,\n            currencySymbolWarning,\n            existingNetworkConfiguration:\n              networkConfigurationsByChainId?.[\n                pendingConfirmation.requestData?.chainId\n              ],\n          },\n          // Passing `t` in the contexts object is a bit redundant but since it's a\n          // context too, it makes sense (for completeness)\n          { t, trackEvent },\n        )\n      : {};\n  }, [\n    pendingConfirmation,\n    t,\n    dispatch,\n    history,\n    matchedChain,\n    currencySymbolWarning,\n    trackEvent,\n    isSnapDialog,\n    snapName,\n    networkConfigurationsByChainId,\n  ]);\n\n  useEffect(() => {\n    if (templatedValues.onLoad) {\n      templatedValues.onLoad();\n    }\n  }, [templatedValues]);\n\n  useEffect(() => {\n    // If the number of pending confirmations reduces to zero when the user\n    // return them to the default route. Otherwise, if the number of pending\n    // confirmations reduces to a number that is less than the currently\n    // viewed index, reset the index.\n    if (\n      pendingConfirmations.length === 0 &&\n      (approvalFlows.length === 0 || totalUnapprovedCount !== 0) &&\n      redirectToHomeOnZeroConfirmations\n    ) {\n      history.push(DEFAULT_ROUTE);\n    } else if (\n      pendingConfirmations.length &&\n      pendingConfirmations.length <= currentPendingConfirmation\n    ) {\n      setCurrentPendingConfirmation(pendingConfirmations.length - 1);\n    }\n  }, [\n    pendingConfirmations,\n    approvalFlows,\n    totalUnapprovedCount,\n    history,\n    currentPendingConfirmation,\n    redirectToHomeOnZeroConfirmations,\n  ]);\n\n  useEffect(() => {\n    const childFlow = approvalFlows[approvalFlows.length - 1];\n\n    setApprovalFlowLoadingText(childFlow?.loadingText ?? null);\n  }, [approvalFlows]);\n\n  useEffect(() => {\n    async function fetchSafeChainsList(_pendingConfirmation) {\n      try {\n        if (useSafeChainsListValidation) {\n          const response = await fetchWithCache({\n            url: 'https://chainid.network/chains.json',\n            cacheOptions: { cacheRefreshTime: DAY },\n            functionName: 'getSafeChainsList',\n          });\n          const safeChainsList = response;\n          const _matchedChain = safeChainsList.find(\n            (chain) =>\n              chain.chainId ===\n              parseInt(_pendingConfirmation.requestData.chainId, 16),\n          );\n          setMatchedChain(_matchedChain);\n          setChainFetchComplete(true);\n          setProviderError(null);\n          if (\n            _matchedChain?.nativeCurrency?.symbol?.toLowerCase() ===\n            _pendingConfirmation.requestData.ticker?.toLowerCase()\n          ) {\n            setCurrencySymbolWarning(null);\n          } else {\n            setCurrencySymbolWarning(\n              t('chainListReturnedDifferentTickerSymbol', [\n                _matchedChain?.nativeCurrency?.symbol,\n              ]),\n            );\n          }\n        }\n      } catch (error) {\n        log.warn('Failed to fetch the chainList from chainid.network', error);\n        setProviderError(error);\n        setMatchedChain(null);\n        setCurrencySymbolWarning(null);\n        setChainFetchComplete(true);\n        // Swallow the error here to not block the user from adding a custom network\n      }\n    }\n    if (pendingConfirmation?.type === ApprovalType.AddEthereumChain) {\n      fetchSafeChainsList(pendingConfirmation);\n    }\n  }, [\n    pendingConfirmation,\n    t,\n    useSafeChainsListValidation,\n    setChainFetchComplete,\n  ]);\n\n  if (!pendingConfirmation) {\n    if (approvalFlows.length > 0) {\n      return <Loading loadingMessage={approvalFlowLoadingText} />;\n    }\n\n    return null;\n  }\n\n  const hasInputState = (type) => {\n    return INPUT_STATE_CONFIRMATIONS.includes(type);\n  };\n\n  const getInputState = (type) => {\n    return inputStates[type] ?? '';\n  };\n\n  const onInputChange = (event) =>\n    setInputState(pendingConfirmation?.type, event.target.value ?? '');\n\n  const handleSubmitResult = (submitResult) => {\n    if (submitResult?.length > 0) {\n      setLoadingText(templatedValues.submitText);\n      setSubmitAlerts(submitResult);\n      setLoading(true);\n    } else {\n      setLoading(false);\n    }\n  };\n  const handleSubmit = async () => {\n    setLoading(true);\n\n    if (\n      pendingConfirmation?.requestData?.fromNetworkConfiguration?.chainId &&\n      pendingConfirmation?.requestData?.toNetworkConfiguration?.chainId\n    ) {\n      trackEvent({\n        category: MetaMetricsEventCategory.Network,\n        event: MetaMetricsEventName.NavNetworkSwitched,\n        properties: {\n          location: 'Switch Modal',\n          from_network:\n            pendingConfirmation.requestData.fromNetworkConfiguration.chainId,\n          to_network:\n            pendingConfirmation.requestData.toNetworkConfiguration.chainId,\n          referrer: {\n            url: window.location.origin,\n          },\n        },\n      });\n    }\n\n    if (templateState[pendingConfirmation.id]?.useWarningModal) {\n      setShowWarningModal(true);\n    } else {\n      const inputState = hasInputState(pendingConfirmation.type)\n        ? getInputState(pendingConfirmation.type)\n        : null;\n      // submit result is an array of errors or empty on success\n      const submitResult = await templatedValues.onSubmit(inputState);\n      handleSubmitResult(submitResult);\n    }\n  };\n\n  const handleSnapDialogCancel =\n    templatedValues.onCancel ||\n    // /!\\ Treat cancel as submit only if approval type is appropriate /!\\\n    (pendingConfirmation?.type === ApprovalType.SnapDialogAlert\n      ? handleSubmit\n      : null);\n\n  const NAVIGATION_CONTROLS_HEIGHT = 32;\n  const SNAP_DIALOG_HEADER_HEIGHT = 64;\n\n  let contentMargin = 0;\n  if (pendingConfirmations.length > 1) {\n    contentMargin += NAVIGATION_CONTROLS_HEIGHT;\n  }\n  if (isSnapCustomUIDialog && !hideSnapBranding) {\n    contentMargin += SNAP_DIALOG_HEADER_HEIGHT;\n  }\n\n  return (\n    <div className=\"confirmation-page\">\n      {pendingConfirmations.length > 1 && (\n        <Box\n          className=\"confirmation-page__navigation\"\n          style={{ position: 'fixed', zIndex: 1 }}\n          width={BlockSize.Screen}\n        >\n          <p>\n            {t('xOfYPending', [\n              currentPendingConfirmation + 1,\n              pendingConfirmations.length,\n            ])}\n          </p>\n          {currentPendingConfirmation > 0 && (\n            <button\n              className=\"confirmation-page__navigation-button\"\n              onClick={() =>\n                setCurrentPendingConfirmation(currentPendingConfirmation - 1)\n              }\n            >\n              <Icon name={IconName.ArrowLeft} />\n            </button>\n          )}\n          <button\n            className=\"confirmation-page__navigation-button\"\n            disabled={\n              currentPendingConfirmation + 1 === pendingConfirmations.length\n            }\n            onClick={() =>\n              setCurrentPendingConfirmation(currentPendingConfirmation + 1)\n            }\n          >\n            <Icon name={IconName.ArrowRight} />\n          </button>\n        </Box>\n      )}\n      {isSnapCustomUIDialog && !hideSnapBranding && (\n        <Box\n          width={BlockSize.Screen}\n          style={{\n            position: 'fixed',\n            zIndex: 1,\n            marginTop: pendingConfirmations.length > 1 ? '32px' : 'initial',\n          }}\n        >\n          <SnapAuthorshipHeader\n            snapId={pendingConfirmation?.origin}\n            onCancel={handleSnapDialogCancel}\n          />\n        </Box>\n      )}\n      <Box\n        className=\"confirmation-page__content\"\n        padding={process.env.CHAIN_PERMISSIONS && !isSnapCustomUIDialog ? 4 : 0}\n        style={{\n          marginTop: `${contentMargin}px`,\n          overflowY: 'auto',\n        }}\n      >\n        {templatedValues.networkDisplay && !process.env.CHAIN_PERMISSIONS ? (\n          <Box justifyContent=\"center\" marginTop={2} display={Display.Flex}>\n            <NetworkDisplay />\n          </Box>\n        ) : null}\n        {isSnapCustomUIDialog ? (\n          <SnapUIRenderer\n            snapId={pendingConfirmation?.origin}\n            interfaceId={pendingConfirmation?.requestData.id}\n            isPrompt={isSnapPrompt}\n            inputValue={isSnapPrompt && inputStates[pendingConfirmation?.type]}\n            onInputChange={isSnapPrompt && onInputChange}\n            placeholder={\n              isSnapPrompt && pendingConfirmation?.requestData.placeholder\n            }\n            useDelineator={false}\n            onCancel={handleSnapDialogCancel}\n            useFooter={isSnapDefaultDialog}\n            contentBackgroundColor={BackgroundColor.backgroundAlternative}\n          />\n        ) : (\n          <MetaMaskTemplateRenderer sections={templatedValues.content} />\n        )}\n\n        {showWarningModal && (\n          <ConfirmationWarningModal\n            onSubmit={async () => {\n              const res = await templatedValues.onSubmit();\n              await handleSubmitResult(res);\n              setShowWarningModal(false);\n            }}\n            onCancel={templatedValues.onCancel}\n          />\n        )}\n      </Box>\n      {!isSnapDefaultDialog && (\n        <ConfirmationFooter\n          alerts={\n            alertState[pendingConfirmation.id] &&\n            Object.values(alertState[pendingConfirmation.id])\n              .filter((alert) => alert.dismissed === false)\n              .map((alert, idx, filtered) => (\n                <Callout\n                  key={alert.id}\n                  severity={alert.severity}\n                  dismiss={() => dismissAlert(alert.id)}\n                  isFirst={idx === 0}\n                  isLast={idx === filtered.length - 1}\n                  isMultiple={filtered.length > 1}\n                >\n                  <MetaMaskTemplateRenderer sections={alert.content} />\n                </Callout>\n              ))\n          }\n          style={\n            isSnapDialog\n              ? {\n                  boxShadow:\n                    'var(--shadow-size-lg) var(--color-shadow-default)',\n                }\n              : {}\n          }\n          actionsStyle={\n            isSnapDialog\n              ? {\n                  borderTop: 0,\n                }\n              : {}\n          }\n          onSubmit={!templatedValues.hideSubmitButton && handleSubmit}\n          onCancel={templatedValues.onCancel}\n          submitText={templatedValues.submitText}\n          cancelText={templatedValues.cancelText}\n          loadingText={loadingText || templatedValues.loadingText}\n          loading={loading}\n          submitAlerts={submitAlerts.map((alert, idx) => (\n            <Callout\n              key={alert.id}\n              severity={alert.severity}\n              isFirst={idx === 0}\n            >\n              <MetaMaskTemplateRenderer sections={alert.content} />\n            </Callout>\n          ))}\n        />\n      )}\n    </div>\n  );\n}\n\nConfirmationPage.propTypes = {\n  redirectToHomeOnZeroConfirmations: PropTypes.bool,\n};\n","export { default } from './confirmation';\n","import React, {\n  ReactElement,\n  createContext,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\n\nimport useCurrentConfirmation from '../../hooks/useCurrentConfirmation';\nimport syncConfirmPath from '../../hooks/syncConfirmPath';\nimport { Confirmation } from '../../types/confirm';\n\ntype ConfirmContextType = {\n  currentConfirmation: Confirmation;\n  isScrollToBottomCompleted: boolean;\n  setIsScrollToBottomCompleted: (isScrollToBottomCompleted: boolean) => void;\n};\n\nexport const ConfirmContext = createContext<ConfirmContextType | undefined>(\n  undefined,\n);\n\nexport const ConfirmContextProvider: React.FC<{\n  children: ReactElement;\n}> = ({ children }) => {\n  const [isScrollToBottomCompleted, setIsScrollToBottomCompleted] =\n    useState(true);\n  const { currentConfirmation } = useCurrentConfirmation();\n  syncConfirmPath(currentConfirmation);\n\n  const value = useMemo(\n    () => ({\n      currentConfirmation,\n      isScrollToBottomCompleted,\n      setIsScrollToBottomCompleted,\n    }),\n    [\n      currentConfirmation,\n      isScrollToBottomCompleted,\n      setIsScrollToBottomCompleted,\n    ],\n  );\n\n  return (\n    <ConfirmContext.Provider value={value}>{children}</ConfirmContext.Provider>\n  );\n};\n\nexport const useConfirmContext = <T = Confirmation,>() => {\n  const context = useContext(ConfirmContext);\n  if (!context) {\n    throw new Error(\n      'useConfirmContext must be used within an ConfirmContextProvider',\n    );\n  }\n  return context as {\n    currentConfirmation: T;\n    isScrollToBottomCompleted: boolean;\n    setIsScrollToBottomCompleted: (isScrollToBottomCompleted: boolean) => void;\n  };\n};\n","export enum AlertsName {\n  GasEstimateFailed = 'gasEstimateFailed',\n  GasFeeLow = 'gasFeeLow',\n  GasTooLow = 'gasTooLow',\n  InsufficientBalance = 'insufficientBalance',\n  NetworkBusy = 'networkBusy',\n  NoGasPrice = 'noGasPrice',\n  PendingTransaction = 'pendingTransactions',\n  SigningOrSubmitting = 'signingOrSubmitting',\n  Blockaid = 'blockaid',\n}\n","import { useMemo } from 'react';\nimport { RowAlertKey } from '../../../../../components/app/confirm/info/row/constants';\nimport { Alert } from '../../../../../ducks/confirm-alerts/confirm-alerts';\nimport { Severity } from '../../../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\nimport { getConfirmationSender } from '../../../components/confirm/utils';\nimport { SignatureRequestType } from '../../../types/confirm';\nimport { isSIWESignatureRequest } from '../../../utils';\nimport { useConfirmContext } from '../../../context/confirm';\n\n/**\n * This hook returns an array of alerts when the expected address of the request\n * does not match the selected account's address.\n */\nexport default function useAccountMismatchAlerts(): Alert[] {\n  const t = useI18nContext();\n  const { currentConfirmation } = useConfirmContext<SignatureRequestType>();\n\n  const { from: fromAddress } = getConfirmationSender(currentConfirmation);\n  const isSIWE = isSIWESignatureRequest(currentConfirmation);\n  const siweParsedAddress =\n    currentConfirmation?.msgParams?.siwe?.parsedMessage?.address;\n  const isMismatchSIWEAdddress =\n    siweParsedAddress?.toLowerCase() !== fromAddress?.toLowerCase();\n  const isMismatchAccount = isSIWE && isMismatchSIWEAdddress;\n\n  return useMemo(() => {\n    if (!isMismatchAccount) {\n      return [];\n    }\n\n    return [\n      {\n        field: RowAlertKey.SigningInWith,\n        key: 'signingInWith',\n        message: t('alertMessageSignInWrongAccount'),\n        reason: t('alertReasonWrongAccount'),\n        severity: Severity.Warning,\n      },\n    ];\n  }, [isMismatchAccount, t]);\n}\n","import { useMemo } from 'react';\nimport {\n  isValidSIWEOrigin,\n  WrappedSIWERequest,\n} from '@metamask/controller-utils';\n\nimport { Alert } from '../../../../../ducks/confirm-alerts/confirm-alerts';\nimport { RowAlertKey } from '../../../../../components/app/confirm/info/row/constants';\nimport { Severity } from '../../../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\n\nimport { SignatureRequestType } from '../../../types/confirm';\nimport { isSIWESignatureRequest } from '../../../utils';\nimport { useConfirmContext } from '../../../context/confirm';\n\nexport default function useDomainMismatchAlerts(): Alert[] {\n  const t = useI18nContext();\n  const { currentConfirmation } = useConfirmContext<SignatureRequestType>();\n\n  const { msgParams } = currentConfirmation || {};\n  const isSIWE = isSIWESignatureRequest(currentConfirmation);\n  const isInvalidSIWEDomain =\n    isSIWE && !isValidSIWEOrigin(msgParams as WrappedSIWERequest);\n\n  const alerts = useMemo(() => {\n    if (!isInvalidSIWEDomain) {\n      return [];\n    }\n\n    return [\n      {\n        field: RowAlertKey.RequestFrom,\n        key: 'requestFrom',\n        message: t('alertMessageSignInDomainMismatch'),\n        reason: t('alertReasonSignIn'),\n        severity: Severity.Danger,\n      },\n    ] as Alert[];\n  }, [isInvalidSIWEDomain, t]);\n\n  return alerts;\n}\n","import { TransactionMeta } from '@metamask/transaction-controller';\nimport { useMemo } from 'react';\nimport { Severity } from '../../../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\nimport { Alert } from '../../../../../ducks/confirm-alerts/confirm-alerts';\nimport {\n  AlertActionKey,\n  RowAlertKey,\n} from '../../../../../components/app/confirm/info/row/constants';\nimport { useConfirmContext } from '../../../context/confirm';\n\nexport function useGasEstimateFailedAlerts(): Alert[] {\n  const t = useI18nContext();\n  const { currentConfirmation } = useConfirmContext<TransactionMeta>();\n\n  const estimationFailed = Boolean(currentConfirmation?.simulationFails);\n\n  return useMemo(() => {\n    if (!estimationFailed) {\n      return [];\n    }\n\n    return [\n      {\n        actions: [\n          {\n            key: AlertActionKey.ShowAdvancedGasFeeModal,\n            label: t('alertActionUpdateGas'),\n          },\n        ],\n        field: RowAlertKey.EstimatedFee,\n        key: 'gasEstimateFailed',\n        message: t('alertMessageGasEstimateFailed'),\n        reason: t('alertReasonGasEstimateFailed'),\n        severity: Severity.Warning,\n      },\n    ];\n  }, [estimationFailed]);\n}\n","import { useMemo } from 'react';\nimport { TransactionMeta } from '@metamask/transaction-controller';\nimport { useGasFeeContext } from '../../../../../contexts/gasFee';\nimport { Severity } from '../../../../../helpers/constants/design-system';\nimport { PriorityLevels } from '../../../../../../shared/constants/gas';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\nimport { Alert } from '../../../../../ducks/confirm-alerts/confirm-alerts';\nimport {\n  AlertActionKey,\n  RowAlertKey,\n} from '../../../../../components/app/confirm/info/row/constants';\nimport { useConfirmContext } from '../../../context/confirm';\n\nexport function useGasFeeLowAlerts(): Alert[] {\n  const t = useI18nContext();\n  const { currentConfirmation } = useConfirmContext();\n  const { id: transactionId } = (currentConfirmation ?? {}) as TransactionMeta;\n\n  const { estimateUsed, transaction } = useGasFeeContext() as {\n    estimateUsed: PriorityLevels;\n    transaction: TransactionMeta;\n  };\n\n  const isLowEstimate =\n    transactionId === transaction?.id && estimateUsed === PriorityLevels.low;\n\n  return useMemo(() => {\n    if (!isLowEstimate) {\n      return [];\n    }\n\n    return [\n      {\n        actions: [\n          {\n            key: AlertActionKey.ShowGasFeeModal,\n            label: t('alertActionUpdateGasFeeLevel'),\n          },\n        ],\n        field: RowAlertKey.EstimatedFee,\n        key: 'gasFeeLow',\n        message: t('alertMessageGasFeeLow'),\n        reason: t('alertReasonGasFeeLow'),\n        severity: Severity.Warning,\n      },\n    ];\n  }, [isLowEstimate]);\n}\n","import { TransactionMeta } from '@metamask/transaction-controller';\nimport { useMemo } from 'react';\nimport { MIN_GAS_LIMIT_DEC } from '../../../send/send.constants';\nimport { hexToDecimal } from '../../../../../../shared/modules/conversion.utils';\nimport { Severity } from '../../../../../helpers/constants/design-system';\nimport { Alert } from '../../../../../ducks/confirm-alerts/confirm-alerts';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\nimport {\n  AlertActionKey,\n  RowAlertKey,\n} from '../../../../../components/app/confirm/info/row/constants';\nimport { useConfirmContext } from '../../../context/confirm';\n\nexport function useGasTooLowAlerts(): Alert[] {\n  const t = useI18nContext();\n  const { currentConfirmation } = useConfirmContext<TransactionMeta>();\n\n  const gas = currentConfirmation?.txParams?.gas;\n\n  const gasTooLow =\n    gas && Number(hexToDecimal(gas)) < Number(MIN_GAS_LIMIT_DEC);\n\n  return useMemo(() => {\n    if (!gasTooLow) {\n      return [];\n    }\n\n    return [\n      {\n        actions: [\n          {\n            key: AlertActionKey.ShowAdvancedGasFeeModal,\n            label: t('alertActionUpdateGas'),\n          },\n        ],\n        field: RowAlertKey.EstimatedFee,\n        isBlocking: true,\n        key: 'gasTooLow',\n        message: t('alertMessageGasTooLow'),\n        reason: t('alertReasonGasTooLow'),\n        severity: Severity.Warning,\n      },\n    ];\n  }, [gasTooLow]);\n}\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { Alert } from '../../../../../ducks/confirm-alerts/confirm-alerts';\nimport {\n  selectTransactionAvailableBalance,\n  selectTransactionFeeById,\n  selectTransactionValue,\n} from '../../../../../selectors';\nimport { isBalanceSufficient } from '../../../send/send.utils';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\nimport { Severity } from '../../../../../helpers/constants/design-system';\nimport {\n  AlertActionKey,\n  RowAlertKey,\n} from '../../../../../components/app/confirm/info/row/constants';\nimport { useConfirmContext } from '../../../context/confirm';\n\nexport function useInsufficientBalanceAlerts(): Alert[] {\n  const t = useI18nContext();\n  const { currentConfirmation } = useConfirmContext();\n  const { id: transactionId } = currentConfirmation ?? {};\n\n  const balance = useSelector((state) =>\n    selectTransactionAvailableBalance(state, transactionId),\n  );\n\n  const value = useSelector((state) =>\n    selectTransactionValue(state, transactionId),\n  );\n\n  const { hexMaximumTransactionFee } = useSelector((state) =>\n    selectTransactionFeeById(state, transactionId),\n  );\n\n  const insufficientBalance = !isBalanceSufficient({\n    amount: value,\n    gasTotal: hexMaximumTransactionFee,\n    balance,\n  });\n\n  return useMemo(() => {\n    if (!insufficientBalance) {\n      return [];\n    }\n\n    return [\n      {\n        actions: [\n          {\n            key: AlertActionKey.Buy,\n            label: t('alertActionBuy'),\n          },\n        ],\n        field: RowAlertKey.EstimatedFee,\n        isBlocking: true,\n        key: 'insufficientBalance',\n        message: t('alertMessageInsufficientBalance'),\n        reason: t('alertReasonInsufficientBalance'),\n        severity: Severity.Danger,\n      },\n    ];\n  }, [insufficientBalance]);\n}\n","import { TransactionMeta } from '@metamask/transaction-controller';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Severity } from '../../../../../helpers/constants/design-system';\nimport { Alert } from '../../../../../ducks/confirm-alerts/confirm-alerts';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\nimport { RowAlertKey } from '../../../../../components/app/confirm/info/row/constants';\nimport { getIsNetworkBusyByChainId } from '../../../../../ducks/metamask/metamask';\nimport { useConfirmContext } from '../../../context/confirm';\n\nexport function useNetworkBusyAlerts(): Alert[] {\n  const t = useI18nContext();\n  const { currentConfirmation } = useConfirmContext<TransactionMeta>();\n  const isNetworkBusy = useSelector((state) =>\n    getIsNetworkBusyByChainId(state, currentConfirmation?.chainId),\n  );\n\n  const showAlert = currentConfirmation?.chainId && isNetworkBusy;\n\n  return useMemo(() => {\n    if (!showAlert) {\n      return [];\n    }\n\n    return [\n      {\n        field: RowAlertKey.EstimatedFee,\n        key: 'networkBusy',\n        message: t('alertMessageNetworkBusy'),\n        reason: t('alertReasonNetworkBusy'),\n        severity: Severity.Warning,\n      },\n    ];\n  }, [showAlert]);\n}\n","import { useSelector } from 'react-redux';\nimport {\n  TransactionMeta,\n  UserFeeLevel,\n} from '@metamask/transaction-controller';\nimport { useMemo } from 'react';\n\nimport { txParamsAreDappSuggested } from '../../../../../../shared/modules/transaction.utils';\nimport { Alert } from '../../../../../ducks/confirm-alerts/confirm-alerts';\nimport { Severity } from '../../../../../helpers/constants/design-system';\nimport {\n  AlertActionKey,\n  RowAlertKey,\n} from '../../../../../components/app/confirm/info/row/constants';\nimport { getNoGasPriceFetched } from '../../../../../selectors';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\nimport { useConfirmContext } from '../../../context/confirm';\n\nexport function useNoGasPriceAlerts(): Alert[] {\n  const t = useI18nContext();\n  const isNoGasPriceFetched = useSelector(getNoGasPriceFetched);\n  const { currentConfirmation } = useConfirmContext<TransactionMeta>();\n\n  const isNotCustomGasPrice =\n    currentConfirmation?.userFeeLevel &&\n    currentConfirmation.userFeeLevel !== UserFeeLevel.CUSTOM &&\n    !txParamsAreDappSuggested(currentConfirmation);\n\n  const noGasPrice = isNotCustomGasPrice && isNoGasPriceFetched;\n\n  return useMemo(() => {\n    if (!noGasPrice) {\n      return [];\n    }\n\n    return [\n      {\n        actions: [\n          {\n            key: AlertActionKey.ShowAdvancedGasFeeModal,\n            label: t('alertActionUpdateGasFee'),\n          },\n        ],\n        field: RowAlertKey.EstimatedFee,\n        isBlocking: true,\n        key: 'noGasPrice',\n        message: t('alertMessageNoGasPrice'),\n        reason: t('alertReasonNoGasPrice'),\n        severity: Severity.Warning,\n      },\n    ];\n  }, [noGasPrice]);\n}\n","import {\n  TransactionMeta,\n  TransactionType,\n} from '@metamask/transaction-controller';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { submittedPendingTransactionsSelector } from '../../../../../selectors';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\nimport { Alert } from '../../../../../ducks/confirm-alerts/confirm-alerts';\nimport { Severity } from '../../../../../helpers/constants/design-system';\nimport { REDESIGN_DEV_TRANSACTION_TYPES } from '../../../utils';\nimport { RowAlertKey } from '../../../../../components/app/confirm/info/row/constants';\nimport { useConfirmContext } from '../../../context/confirm';\n\nexport function usePendingTransactionAlerts(): Alert[] {\n  const t = useI18nContext();\n  const { currentConfirmation } = useConfirmContext();\n  const { type } = currentConfirmation ?? ({} as TransactionMeta);\n  const pendingTransactions = useSelector(submittedPendingTransactionsSelector);\n\n  const isValidType = REDESIGN_DEV_TRANSACTION_TYPES.includes(\n    type as TransactionType,\n  );\n\n  const hasPendingTransactions =\n    isValidType && Boolean(pendingTransactions.length);\n\n  return useMemo(() => {\n    if (!hasPendingTransactions) {\n      return [];\n    }\n\n    return [\n      {\n        field: RowAlertKey.Speed,\n        key: 'pendingTransactions',\n        message: t('alertMessagePendingTransactions'),\n        reason: t('alertReasonPendingTransactions'),\n        severity: Severity.Warning,\n      },\n    ];\n  }, [hasPendingTransactions]);\n}\n","import { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { QueueType } from '../../../../../../shared/constants/metametrics';\nimport { Alert } from '../../../../../ducks/confirm-alerts/confirm-alerts';\nimport { Severity } from '../../../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\nimport { getQueuedRequestCount } from '../../../../../selectors';\nimport { useQueuedConfirmationsEvent } from '../../useQueuedConfirmationEvents';\n\nexport function useQueuedConfirmationsAlerts(): Alert[] {\n  const t = useI18nContext();\n\n  const queuedRequestCount = useSelector(getQueuedRequestCount);\n  const isQueuedConfirmation = queuedRequestCount > 0;\n\n  useQueuedConfirmationsEvent(QueueType.QueueController);\n\n  return useMemo(() => {\n    if (!isQueuedConfirmation) {\n      return [];\n    }\n\n    return [\n      {\n        isBlocking: false,\n        key: 'queuedConfirmations',\n        message: t('existingRequestsBannerAlertDesc'),\n        severity: Severity.Info,\n      },\n    ];\n  }, [isQueuedConfirmation]);\n}\n","import {\n  TransactionMeta,\n  TransactionType,\n} from '@metamask/transaction-controller';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getApprovedAndSignedTransactions } from '../../../../../selectors';\nimport { Severity } from '../../../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../../../hooks/useI18nContext';\nimport { Alert } from '../../../../../ducks/confirm-alerts/confirm-alerts';\nimport { REDESIGN_DEV_TRANSACTION_TYPES } from '../../../utils';\nimport { useConfirmContext } from '../../../context/confirm';\n\nexport function useSigningOrSubmittingAlerts(): Alert[] {\n  const t = useI18nContext();\n  const { currentConfirmation } = useConfirmContext();\n  const { type } = (currentConfirmation ?? {}) as TransactionMeta;\n\n  const signingOrSubmittingTransactions = useSelector(\n    getApprovedAndSignedTransactions,\n  );\n\n  const isValidType = REDESIGN_DEV_TRANSACTION_TYPES.includes(\n    type as TransactionType,\n  );\n\n  const isSigningOrSubmitting =\n    isValidType && signingOrSubmittingTransactions.length > 0;\n\n  return useMemo(() => {\n    if (!isSigningOrSubmitting) {\n      return [];\n    }\n\n    return [\n      {\n        isBlocking: true,\n        key: 'signingOrSubmitting',\n        message: t('alertMessageSigningOrSubmitting'),\n        severity: Severity.Warning,\n      },\n    ];\n  }, [isSigningOrSubmitting]);\n}\n","import BlockaidPackage from '@blockaid/ppom_release/package.json';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport {\n  TransactionMeta,\n  TransactionType,\n} from '@metamask/transaction-controller';\nimport { NETWORK_TO_NAME_MAP } from '../../../../../shared/constants/network';\nimport {\n  BlockaidResultType,\n  FALSE_POSITIVE_REPORT_BASE_URL,\n  SECURITY_PROVIDER_UTM_SOURCE,\n} from '../../../../../shared/constants/security-provider';\nimport { Alert } from '../../../../ducks/confirm-alerts/confirm-alerts';\nimport ZENDESK_URLS from '../../../../helpers/constants/zendesk-url';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\nimport { getCurrentChainId } from '../../../../selectors';\nimport {\n  SIGNATURE_TRANSACTION_TYPES,\n  REDESIGN_DEV_TRANSACTION_TYPES,\n} from '../../utils';\nimport {\n  SecurityAlertResponse,\n  SignatureRequestType,\n} from '../../types/confirm';\nimport { useConfirmContext } from '../../context/confirm';\nimport useCurrentSignatureSecurityAlertResponse from '../useCurrentSignatureSecurityAlertResponse';\nimport { normalizeProviderAlert } from './utils';\n\n// eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\nconst zlib = require('zlib');\n\nconst SUPPORTED_TRANSACTION_TYPES = [\n  ...SIGNATURE_TRANSACTION_TYPES,\n  ...REDESIGN_DEV_TRANSACTION_TYPES,\n];\n\nconst IGNORED_RESULT_TYPES = [\n  BlockaidResultType.Benign,\n  BlockaidResultType.Loading,\n];\n\ntype SecurityAlertResponsesState = {\n  metamask: {\n    signatureSecurityAlertResponses: Record<string, SecurityAlertResponse>;\n    transactions: TransactionMeta[];\n  };\n};\n\nconst useBlockaidAlerts = (): Alert[] => {\n  const t = useI18nContext();\n  const { currentConfirmation } = useConfirmContext();\n  const selectorChainId = useSelector(getCurrentChainId);\n\n  const securityAlertId = (\n    currentConfirmation?.securityAlertResponse as SecurityAlertResponse\n  )?.securityAlertId as string;\n\n  const transactionType = currentConfirmation?.type as TransactionType;\n\n  const signatureSecurityAlertResponse =\n    useCurrentSignatureSecurityAlertResponse();\n\n  const transactionSecurityAlertResponse = useSelector(\n    (state: SecurityAlertResponsesState) =>\n      state.metamask.transactions.find(\n        (transaction) =>\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (transaction.securityAlertResponse as any)?.securityAlertId ===\n          securityAlertId,\n      )?.securityAlertResponse,\n  );\n\n  const securityAlertResponse =\n    signatureSecurityAlertResponse || transactionSecurityAlertResponse;\n\n  const isTransactionTypeSupported =\n    SUPPORTED_TRANSACTION_TYPES.includes(transactionType);\n\n  const isResultTypeIgnored = IGNORED_RESULT_TYPES.includes(\n    securityAlertResponse?.result_type as BlockaidResultType,\n  );\n\n  let stringifiedJSONData: string | undefined;\n\n  if (securityAlertResponse && currentConfirmation) {\n    const {\n      block,\n      features,\n      reason,\n      result_type: resultType,\n    } = securityAlertResponse as SecurityAlertResponse;\n    const { chainId, msgParams, origin, type, txParams } =\n      currentConfirmation as SignatureRequestType & TransactionMeta;\n\n    const isFailedResultType = resultType === BlockaidResultType.Errored;\n\n    const reportData = {\n      blockNumber: block,\n      blockaidVersion: BlockaidPackage.version,\n      chain: (NETWORK_TO_NAME_MAP as Record<string, string>)[\n        chainId ?? selectorChainId\n      ],\n      classification: isFailedResultType ? 'error' : reason,\n      domain: origin ?? msgParams?.origin ?? origin,\n      jsonRpcMethod: type,\n      jsonRpcParams: JSON.stringify(txParams ?? msgParams),\n      resultType: isFailedResultType ? BlockaidResultType.Errored : resultType,\n      reproduce: JSON.stringify(features),\n    };\n\n    stringifiedJSONData = JSON.stringify(reportData);\n  }\n\n  return useMemo<Alert[]>(() => {\n    if (\n      !isTransactionTypeSupported ||\n      isResultTypeIgnored ||\n      !securityAlertResponse\n    ) {\n      return [];\n    }\n\n    let reportUrl = ZENDESK_URLS.SUPPORT_URL;\n    if (stringifiedJSONData) {\n      const encodedData =\n        zlib?.gzipSync?.(stringifiedJSONData) ?? stringifiedJSONData;\n\n      reportUrl = `${FALSE_POSITIVE_REPORT_BASE_URL}?data=${encodeURIComponent(\n        encodedData.toString('base64'),\n      )}&utm_source=${SECURITY_PROVIDER_UTM_SOURCE}`;\n    }\n\n    return [normalizeProviderAlert(securityAlertResponse, t, reportUrl)];\n  }, [\n    isTransactionTypeSupported,\n    isResultTypeIgnored,\n    securityAlertResponse,\n    stringifiedJSONData,\n    t,\n  ]);\n};\n\nexport default useBlockaidAlerts;\n","import { useMemo } from 'react';\nimport { TransactionMeta } from '@metamask/transaction-controller';\n\nimport { Alert } from '../../../../ducks/confirm-alerts/confirm-alerts';\nimport { RowAlertKey } from '../../../../components/app/confirm/info/row/constants';\nimport { Severity } from '../../../../helpers/constants/design-system';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\nimport { SignatureRequestType } from '../../types/confirm';\nimport { isValidASCIIURL, toPunycodeURL } from '../../utils/confirm';\nimport { isSignatureTransactionType } from '../../utils';\nimport { useConfirmContext } from '../../context/confirm';\n\nconst useConfirmationOriginAlerts = (): Alert[] => {\n  const t = useI18nContext();\n\n  const { currentConfirmation } = useConfirmContext();\n\n  const origin = isSignatureTransactionType(currentConfirmation)\n    ? (currentConfirmation as SignatureRequestType)?.msgParams?.origin\n    : (currentConfirmation as TransactionMeta)?.origin;\n\n  const originUndefinedOrValid =\n    origin === undefined || isValidASCIIURL(origin);\n\n  return useMemo<Alert[]>((): Alert[] => {\n    if (originUndefinedOrValid) {\n      return [];\n    }\n\n    return [\n      {\n        key: 'originSpecialCharacterWarning',\n        reason: t('addressMismatch'),\n        field: RowAlertKey.RequestFrom,\n        severity: Severity.Warning,\n        message: t('alertMessageAddressMismatchWarning'),\n        alertDetails: [\n          t('addressMismatchOriginal', [origin]),\n          t('addressMismatchPunycode', [origin ? toPunycodeURL(origin) : '']),\n        ],\n      },\n    ];\n  }, [origin, originUndefinedOrValid, t]);\n};\n\nexport default useConfirmationOriginAlerts;\n","import {\n  BlockaidResultType,\n  SecurityProvider,\n} from '../../../../../shared/constants/security-provider';\nimport { Severity } from '../../../../helpers/constants/design-system';\nimport {\n  Alert,\n  AlertSeverity,\n} from '../../../../ducks/confirm-alerts/confirm-alerts';\nimport { useI18nContext } from '../../../../hooks/useI18nContext';\nimport {\n  REASON_TO_DESCRIPTION_TKEY,\n  REASON_TO_TITLE_TKEY,\n} from '../../components/security-provider-banner-alert/blockaid-banner-alert/blockaid-banner-alert';\nimport { SecurityAlertResponse } from '../../types/confirm';\n\n/**\n * Returns the corresponding AlertSeverity based on the provided BlockaidResultType.\n *\n * @param severity - The BlockaidResultType to determine the AlertSeverity for.\n * @returns The AlertSeverity corresponding to the provided BlockaidResultType.\n */\nexport function getProviderAlertSeverity(\n  severity: BlockaidResultType,\n): AlertSeverity {\n  switch (severity) {\n    case BlockaidResultType.Malicious:\n      return Severity.Danger;\n    case BlockaidResultType.Warning:\n      return Severity.Warning;\n    default:\n      return Severity.Info;\n  }\n}\n\n/**\n * Normalizes a security alert response into an Alert object.\n *\n * @param securityAlertResponse - The security alert response to normalize.\n * @param t - The translation function.\n * @param reportUrl - URL to report.\n * @returns The normalized Alert object.\n */\nexport function normalizeProviderAlert(\n  securityAlertResponse: SecurityAlertResponse,\n  t: ReturnType<typeof useI18nContext>,\n  reportUrl?: string,\n): Alert {\n  return {\n    key: securityAlertResponse.securityAlertId || '',\n    reason: t(\n      REASON_TO_TITLE_TKEY[\n        securityAlertResponse.reason as keyof typeof REASON_TO_TITLE_TKEY\n      ] || 'blockaidTitleDeceptive',\n    ),\n    severity: getProviderAlertSeverity(\n      securityAlertResponse.result_type as BlockaidResultType,\n    ),\n    alertDetails: securityAlertResponse.features,\n    message: t(\n      REASON_TO_DESCRIPTION_TKEY[\n        securityAlertResponse.reason as keyof typeof REASON_TO_DESCRIPTION_TKEY\n      ] || REASON_TO_DESCRIPTION_TKEY.other,\n    ),\n    provider: SecurityProvider.Blockaid, // TODO: Remove this once we support more providers and implement a way to determine it.\n    reportUrl,\n  };\n}\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  clearAlerts,\n  updateAlerts,\n} from '../../../ducks/confirm-alerts/confirm-alerts';\nimport { useConfirmContext } from '../context/confirm';\nimport useConfirmationAlerts from './useConfirmationAlerts';\n\nconst setConfirmationAlerts = () => {\n  const dispatch = useDispatch();\n  const { currentConfirmation } = useConfirmContext();\n  const alerts = useConfirmationAlerts();\n  const ownerId = currentConfirmation?.id as string;\n\n  useEffect(() => {\n    dispatch(updateAlerts(ownerId, alerts));\n  }, [alerts, ownerId]);\n\n  useEffect(() => {\n    return () => {\n      dispatch(clearAlerts(ownerId));\n    };\n  }, []);\n};\n\nexport default setConfirmationAlerts;\n","import { useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport { CONFIRM_TRANSACTION_ROUTE } from '../../../helpers/constants/routes';\nimport { Confirmation } from '../types/confirm';\n\nconst syncConfirmPath = (currentConfirmation?: Confirmation) => {\n  const history = useHistory();\n  const { id: paramsTransactionId } = useParams<{ id: string }>();\n\n  // Redirect below is done to keep the confirmation routes backward compatible\n  useEffect(() => {\n    if (!currentConfirmation) {\n      return;\n    }\n    if (!paramsTransactionId) {\n      history.replace(`${CONFIRM_TRANSACTION_ROUTE}/${currentConfirmation.id}`);\n    }\n  }, [currentConfirmation, paramsTransactionId]);\n};\n\nexport default syncConfirmPath;\n","import { useCallback, useState } from 'react';\n\n/**\n * Determine whether a transaction can be approved and provide a method to\n * kick off the approval process.\n *\n * Provides a reusable hook that, given a transactionGroup, will manage\n * the process of editing gas for approvals\n *\n * @returns {[boolean, Function]}\n */\nexport function useApproveTransaction() {\n  const [showCustomizeGasPopover, setShowCustomizeGasPopover] = useState(false);\n\n  const closeCustomizeGasPopover = () => setShowCustomizeGasPopover(false);\n\n  const approveTransaction = useCallback(() => {\n    return setShowCustomizeGasPopover(true);\n  }, []);\n\n  return {\n    approveTransaction,\n    showCustomizeGasPopover,\n    closeCustomizeGasPopover,\n  };\n}\n","import { isEqual } from 'lodash';\nimport { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getNfts, getTokens } from '../../../ducks/metamask/metamask';\nimport { getAssetDetails } from '../../../helpers/utils/token-util';\nimport {\n  hideLoadingIndication,\n  showLoadingIndication,\n} from '../../../store/actions';\nimport { isEqualCaseInsensitive } from '../../../../shared/modules/string-utils';\nimport { usePrevious } from '../../../hooks/usePrevious';\nimport { useTokenTracker } from '../../../hooks/useTokenTracker';\n\nexport function useAssetDetails(tokenAddress, userAddress, transactionData) {\n  const dispatch = useDispatch();\n  // state selectors\n  const nfts = useSelector(getNfts);\n  const tokens = useSelector(getTokens, isEqual);\n  const currentToken = tokens.find((token) =>\n    isEqualCaseInsensitive(token.address, tokenAddress),\n  );\n\n  // in-hook state\n  const [currentAsset, setCurrentAsset] = useState(null);\n  const { tokensWithBalances } = useTokenTracker({\n    tokens: currentToken ? [currentToken] : [],\n  });\n\n  // previous state checkers\n  const prevTokenAddress = usePrevious(tokenAddress);\n  const prevUserAddress = usePrevious(userAddress);\n  const prevTransactionData = usePrevious(transactionData);\n  const prevTokenBalance = usePrevious(tokensWithBalances);\n\n  useEffect(() => {\n    async function getAndSetAssetDetails() {\n      dispatch(showLoadingIndication());\n      const assetDetails = await getAssetDetails(\n        tokenAddress,\n        userAddress,\n        transactionData,\n        nfts,\n      );\n      setCurrentAsset(assetDetails);\n      dispatch(hideLoadingIndication());\n    }\n    if (\n      tokenAddress !== prevTokenAddress ||\n      userAddress !== prevUserAddress ||\n      transactionData !== prevTransactionData ||\n      (prevTokenBalance && prevTokenBalance !== tokensWithBalances)\n    ) {\n      getAndSetAssetDetails();\n    }\n  }, [\n    dispatch,\n    prevTokenAddress,\n    prevTransactionData,\n    prevUserAddress,\n    tokenAddress,\n    userAddress,\n    transactionData,\n    nfts,\n    tokensWithBalances,\n    prevTokenBalance,\n  ]);\n\n  if (currentAsset) {\n    const {\n      standard,\n      symbol,\n      image,\n      name,\n      balance,\n      tokenId,\n      toAddress,\n      tokenAmount,\n      decimals,\n    } = currentAsset;\n\n    return {\n      toAddress,\n      tokenId,\n      decimals,\n      tokenAmount,\n      assetAddress: tokenAddress,\n      assetStandard: standard,\n      tokenSymbol: symbol ?? '',\n      tokenImage: image,\n      userBalance: balance,\n      assetName: name,\n    };\n  }\n\n  return {};\n}\n","import { useSelector } from 'react-redux';\nimport {\n  getCurrentNetwork,\n  getInternalAccountByAddress,\n  getSelectedAccountCachedBalance,\n  getShouldHideZeroBalanceTokens,\n  getShowFiatInTestnets,\n} from '../../../selectors';\nimport { TEST_NETWORKS } from '../../../../shared/constants/network';\nimport { useAccountTotalFiatBalance } from '../../../hooks/useAccountTotalFiatBalance';\n\nexport const useBalance = (fromAddress) => {\n  const shouldHideZeroBalanceTokens = useSelector(\n    getShouldHideZeroBalanceTokens,\n  );\n\n  const fromAccount = useSelector((state) =>\n    getInternalAccountByAddress(state, fromAddress),\n  );\n\n  const { totalWeiBalance } = useAccountTotalFiatBalance(\n    fromAccount,\n    shouldHideZeroBalanceTokens,\n  );\n\n  const currentNetwork = useSelector(getCurrentNetwork);\n\n  const showFiatInTestnets = useSelector(getShowFiatInTestnets);\n  const showFiat =\n    TEST_NETWORKS.includes(currentNetwork?.nickname) && !showFiatInTestnets;\n\n  let balanceToUse = totalWeiBalance;\n\n  const balance = useSelector(getSelectedAccountCachedBalance);\n\n  if (!fromAddress) {\n    return {};\n  }\n\n  if (showFiat) {\n    balanceToUse = balance;\n  }\n\n  return { balance: balanceToUse };\n};\n","import { useCallback } from 'react';\nimport { AlertActionKey } from '../../../components/app/confirm/info/row/constants';\nimport useRamps from '../../../hooks/ramps/useRamps/useRamps';\nimport { useTransactionModalContext } from '../../../contexts/transaction-modal';\n\nconst useConfirmationAlertActions = () => {\n  const { openBuyCryptoInPdapp } = useRamps();\n  const { openModal } = useTransactionModalContext();\n\n  const processAction = useCallback(\n    (actionKey: string) => {\n      switch (actionKey) {\n        case AlertActionKey.Buy:\n          openBuyCryptoInPdapp();\n          break;\n\n        case AlertActionKey.ShowAdvancedGasFeeModal:\n          openModal('advancedGasFee');\n          break;\n\n        case AlertActionKey.ShowGasFeeModal:\n          openModal('editGasFee');\n          break;\n\n        default:\n          console.error('Unknown alert action key:', actionKey);\n          break;\n      }\n    },\n    [openBuyCryptoInPdapp],\n  );\n\n  return processAction;\n};\n\nexport default useConfirmationAlertActions;\n","import { useCallback, useEffect, useState } from 'react';\nimport { validate as isUuid } from 'uuid';\n\nimport useAlerts from '../../../hooks/useAlerts';\nimport { isSignatureTransactionType } from '../utils';\nimport { Alert } from '../../../ducks/confirm-alerts/confirm-alerts';\nimport { useConfirmContext } from '../context/confirm';\nimport { AlertsName } from './alerts/constants';\nimport { useSignatureEventFragment } from './useSignatureEventFragment';\nimport { useTransactionEventFragment } from './useTransactionEventFragment';\n\nexport type AlertMetricsProperties = {\n  alert_visualized: string[];\n  alert_visualized_count: number;\n  alert_key_clicked: string[];\n  alert_action_clicked: string[];\n};\n\nexport const ALERTS_NAME_METRICS: Record<AlertsName | string, string> = {\n  [AlertsName.GasEstimateFailed]: 'gas_estimate_failed',\n  [AlertsName.GasFeeLow]: 'gas_fee_low',\n  [AlertsName.GasTooLow]: 'gas_too_low',\n  [AlertsName.InsufficientBalance]: 'insufficient_balance',\n  [AlertsName.NetworkBusy]: 'network_busy',\n  [AlertsName.NoGasPrice]: 'no_gas_price',\n  [AlertsName.PendingTransaction]: 'pending_transaction',\n  [AlertsName.SigningOrSubmitting]: 'signing_or_submitting',\n  [AlertsName.Blockaid]: 'blockaid',\n};\n\nfunction uniqueFreshArrayPush<T>(array: T[], value: T): T[] {\n  return [...new Set([...array, value])];\n}\n\nfunction getAlertNames(alerts: Alert[]): string[] {\n  return alerts.map((alert) => getAlertName(alert.key));\n}\n\nfunction getAlertName(alertKey: string): string {\n  return isUuid(alertKey)\n    ? ALERTS_NAME_METRICS[AlertsName.Blockaid]\n    : ALERTS_NAME_METRICS[alertKey] ?? alertKey;\n}\n\nexport function useConfirmationAlertMetrics() {\n  const { currentConfirmation } = useConfirmContext();\n  const ownerId = currentConfirmation?.id ?? '';\n  const { alerts, isAlertConfirmed } = useAlerts(ownerId);\n  const { updateSignatureEventFragment } = useSignatureEventFragment();\n  const { updateTransactionEventFragment } = useTransactionEventFragment();\n\n  const [metricsProperties, setMetricsProperties] =\n    useState<AlertMetricsProperties>({\n      alert_visualized: [],\n      alert_visualized_count: 0,\n      alert_key_clicked: [],\n      alert_action_clicked: [],\n    });\n\n  const properties =\n    alerts.length > 0\n      ? {\n          alert_triggered_count: alerts.length,\n          alert_triggered: getAlertNames(alerts),\n          alert_resolved_count: alerts.filter((alert) =>\n            isAlertConfirmed(alert.key),\n          ).length,\n          alert_resolved: getAlertNames(\n            alerts.filter((alert) => isAlertConfirmed(alert.key)),\n          ),\n          ...metricsProperties,\n        }\n      : undefined;\n\n  const trackAlertRender = useCallback((alertKey: string) => {\n    setMetricsProperties((prevState) => {\n      const newState = { ...prevState };\n      const alertName = getAlertName(alertKey);\n      newState.alert_visualized = uniqueFreshArrayPush(\n        prevState.alert_visualized,\n        alertName,\n      );\n      newState.alert_visualized_count = newState.alert_visualized.length;\n      return newState;\n    });\n  }, []);\n\n  const trackInlineAlertClicked = useCallback((alertKey: string) => {\n    setMetricsProperties((prevState) => {\n      const newState = { ...prevState };\n      const alertName = getAlertName(alertKey);\n      newState.alert_key_clicked = uniqueFreshArrayPush(\n        prevState.alert_key_clicked,\n        alertName,\n      );\n      return newState;\n    });\n  }, []);\n\n  const trackAlertActionClicked = useCallback((alertKey: string) => {\n    setMetricsProperties((prevState) => {\n      const newState = { ...prevState };\n      const alertName = getAlertName(alertKey);\n      newState.alert_action_clicked = uniqueFreshArrayPush(\n        prevState.alert_action_clicked,\n        alertName,\n      );\n      return newState;\n    });\n  }, []);\n\n  const updateAlertMetrics = useCallback(() => {\n    if (!properties) {\n      return;\n    }\n\n    if (isSignatureTransactionType(currentConfirmation)) {\n      updateSignatureEventFragment({ properties });\n    } else {\n      updateTransactionEventFragment({ properties }, ownerId);\n    }\n  }, [JSON.stringify(properties), updateTransactionEventFragment, ownerId]);\n\n  useEffect(() => {\n    updateAlertMetrics();\n  }, [updateAlertMetrics]);\n\n  return {\n    trackAlertRender,\n    trackInlineAlertClicked,\n    trackAlertActionClicked,\n  };\n}\n","import { useMemo } from 'react';\nimport { Alert } from '../../../ducks/confirm-alerts/confirm-alerts';\nimport useAccountMismatchAlerts from './alerts/signatures/useAccountMismatchAlerts';\nimport useDomainMismatchAlerts from './alerts/signatures/useDomainMismatchAlerts';\nimport { useGasEstimateFailedAlerts } from './alerts/transactions/useGasEstimateFailedAlerts';\nimport { useGasFeeLowAlerts } from './alerts/transactions/useGasFeeLowAlerts';\nimport { useGasTooLowAlerts } from './alerts/transactions/useGasTooLowAlerts';\nimport { useInsufficientBalanceAlerts } from './alerts/transactions/useInsufficientBalanceAlerts';\nimport { useNetworkBusyAlerts } from './alerts/transactions/useNetworkBusyAlerts';\nimport { useNoGasPriceAlerts } from './alerts/transactions/useNoGasPriceAlerts';\nimport { usePendingTransactionAlerts } from './alerts/transactions/usePendingTransactionAlerts';\nimport { useQueuedConfirmationsAlerts } from './alerts/transactions/useQueuedConfirmationsAlerts';\n///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\nimport { useSigningOrSubmittingAlerts } from './alerts/transactions/useSigningOrSubmittingAlerts';\n///: END:ONLY_INCLUDE_IF\nimport useConfirmationOriginAlerts from './alerts/useConfirmationOriginAlerts';\nimport useBlockaidAlerts from './alerts/useBlockaidAlerts';\n\nfunction useSignatureAlerts(): Alert[] {\n  const accountMismatchAlerts = useAccountMismatchAlerts();\n  const domainMismatchAlerts = useDomainMismatchAlerts();\n\n  return useMemo(\n    () => [...accountMismatchAlerts, ...domainMismatchAlerts],\n    [accountMismatchAlerts, domainMismatchAlerts],\n  );\n}\n\nfunction useTransactionAlerts(): Alert[] {\n  const gasEstimateFailedAlerts = useGasEstimateFailedAlerts();\n  const gasFeeLowAlerts = useGasFeeLowAlerts();\n  const gasTooLowAlerts = useGasTooLowAlerts();\n  const insufficientBalanceAlerts = useInsufficientBalanceAlerts();\n  const networkBusyAlerts = useNetworkBusyAlerts();\n  const noGasPriceAlerts = useNoGasPriceAlerts();\n  const pendingTransactionAlerts = usePendingTransactionAlerts();\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  const signingOrSubmittingAlerts = useSigningOrSubmittingAlerts();\n  ///: END:ONLY_INCLUDE_IF\n  const queuedConfirmationsAlerts = useQueuedConfirmationsAlerts();\n\n  return useMemo(\n    () => [\n      ...gasEstimateFailedAlerts,\n      ...gasFeeLowAlerts,\n      ...gasTooLowAlerts,\n      ...insufficientBalanceAlerts,\n      ...networkBusyAlerts,\n      ...noGasPriceAlerts,\n      ...pendingTransactionAlerts,\n      ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n      ...signingOrSubmittingAlerts,\n      ///: END:ONLY_INCLUDE_IF\n      ...queuedConfirmationsAlerts,\n    ],\n    [\n      gasEstimateFailedAlerts,\n      gasFeeLowAlerts,\n      gasTooLowAlerts,\n      insufficientBalanceAlerts,\n      networkBusyAlerts,\n      noGasPriceAlerts,\n      pendingTransactionAlerts,\n      ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n      signingOrSubmittingAlerts,\n      ///: END:ONLY_INCLUDE_IF\n      queuedConfirmationsAlerts,\n    ],\n  );\n}\n\nexport default function useConfirmationAlerts(): Alert[] {\n  const blockaidAlerts = useBlockaidAlerts();\n  const confirmationOriginAlerts = useConfirmationOriginAlerts();\n  const signatureAlerts = useSignatureAlerts();\n  const transactionAlerts = useTransactionAlerts();\n\n  return useMemo(\n    () => [\n      ...blockaidAlerts,\n      ...confirmationOriginAlerts,\n      ...signatureAlerts,\n      ...transactionAlerts,\n    ],\n    [\n      blockaidAlerts,\n      confirmationOriginAlerts,\n      signatureAlerts,\n      transactionAlerts,\n    ],\n  );\n}\n","import { useSelector } from 'react-redux';\n\nimport { Hex } from '@metamask/utils';\nimport {\n  CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP,\n  NETWORK_TO_NAME_MAP,\n} from '../../../../shared/constants/network';\n\nimport {\n  getCurrentChainId,\n  getNetworkConfigurationsByChainId,\n} from '../../../selectors';\n\nimport { useI18nContext } from '../../../hooks/useI18nContext';\nimport { useConfirmContext } from '../context/confirm';\n\nfunction useConfirmationNetworkInfo() {\n  const t = useI18nContext();\n  const { currentConfirmation } = useConfirmContext();\n  const networkConfigurations = useSelector(getNetworkConfigurationsByChainId);\n  const currentChainId = useSelector(getCurrentChainId);\n\n  let networkDisplayName = '';\n  let networkImageUrl = '';\n\n  if (currentConfirmation) {\n    // use the current confirmation chainId, else use the current network chainId\n    const chainId =\n      (currentConfirmation?.chainId as Hex | undefined) ?? currentChainId;\n\n    const networkConfiguration = networkConfigurations[chainId];\n\n    networkDisplayName =\n      networkConfiguration?.name ??\n      NETWORK_TO_NAME_MAP[chainId as keyof typeof NETWORK_TO_NAME_MAP] ??\n      t('privateNetwork');\n\n    networkImageUrl =\n      CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP[\n        chainId as keyof typeof CHAIN_ID_TO_NETWORK_IMAGE_URL_MAP\n      ];\n  }\n\n  return {\n    networkImageUrl,\n    networkDisplayName,\n  };\n}\n\nexport default useConfirmationNetworkInfo;\n","import { useSelector } from 'react-redux';\nimport { getAccountByAddress } from '../../../helpers/utils/util';\nimport { accountsWithSendEtherInfoSelector } from '../../../selectors';\nimport { getConfirmationSender } from '../components/confirm/utils';\nimport { useConfirmContext } from '../context/confirm';\n\nfunction useConfirmationRecipientInfo() {\n  const { currentConfirmation } = useConfirmContext();\n  const allAccounts = useSelector(accountsWithSendEtherInfoSelector);\n\n  let senderAddress, senderName;\n  if (currentConfirmation) {\n    const { from } = getConfirmationSender(currentConfirmation);\n    const fromAccount = getAccountByAddress(allAccounts, from);\n\n    senderAddress = from;\n    senderName = fromAccount?.metadata?.name;\n  }\n\n  return {\n    senderAddress: senderAddress || '',\n    senderName: senderName || '',\n  };\n}\n\nexport default useConfirmationRecipientInfo;\n","import { useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport {\n  TransactionMeta,\n  TransactionType,\n} from '@metamask/transaction-controller';\nimport { ApprovalType } from '@metamask/controller-utils';\nimport { useMemo } from 'react';\nimport {\n  ApprovalsMetaMaskState,\n  getIsRedesignedConfirmationsDeveloperEnabled,\n  getRedesignedConfirmationsEnabled,\n  getRedesignedTransactionsEnabled,\n  getUnapprovedTransaction,\n  latestPendingConfirmationSelector,\n  selectPendingApproval,\n} from '../../../selectors';\nimport {\n  REDESIGN_APPROVAL_TYPES,\n  REDESIGN_DEV_TRANSACTION_TYPES,\n  REDESIGN_USER_TRANSACTION_TYPES,\n} from '../utils';\nimport { selectUnapprovedMessage } from '../../../selectors/signatures';\nimport { isMMI } from '../../../helpers/utils/build-types';\n\n/**\n * Determine the current confirmation based on the pending approvals and controller state.\n *\n * DO NOT USE within a redesigned confirmation.\n * Instead use ConfirmContext to read the current confirmation.\n *\n * @returns The current confirmation data.\n */\nconst useCurrentConfirmation = () => {\n  const { id: paramsConfirmationId } = useParams<{ id: string }>();\n  const latestPendingApproval = useSelector(latestPendingConfirmationSelector);\n  const confirmationId = paramsConfirmationId ?? latestPendingApproval?.id;\n\n  const isRedesignedSignaturesUserSettingEnabled = useSelector(\n    getRedesignedConfirmationsEnabled,\n  );\n\n  const isRedesignedTransactionsUserSettingEnabled = useSelector(\n    getRedesignedTransactionsEnabled,\n  );\n\n  const isRedesignedConfirmationsDeveloperEnabled = useSelector(\n    getIsRedesignedConfirmationsDeveloperEnabled,\n  );\n\n  const isRedesignedConfirmationsDeveloperSettingEnabled =\n    process.env.ENABLE_CONFIRMATION_REDESIGN === 'true' ||\n    isRedesignedConfirmationsDeveloperEnabled;\n\n  const pendingApproval = useSelector((state) =>\n    selectPendingApproval(state as ApprovalsMetaMaskState, confirmationId),\n  );\n\n  const transactionMetadata = useSelector((state) =>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (getUnapprovedTransaction as any)(state, confirmationId),\n  ) as TransactionMeta | undefined;\n\n  const signatureMessage = useSelector((state) =>\n    selectUnapprovedMessage(state, confirmationId),\n  );\n\n  const isCorrectUserTransactionType = REDESIGN_USER_TRANSACTION_TYPES.includes(\n    transactionMetadata?.type as TransactionType,\n  );\n\n  const isCorrectDeveloperTransactionType =\n    REDESIGN_DEV_TRANSACTION_TYPES.includes(\n      transactionMetadata?.type as TransactionType,\n    );\n\n  const isCorrectApprovalType = REDESIGN_APPROVAL_TYPES.includes(\n    pendingApproval?.type as ApprovalType,\n  );\n\n  const shouldUseRedesignForSignatures =\n    (isRedesignedSignaturesUserSettingEnabled && isCorrectApprovalType) ||\n    (isRedesignedConfirmationsDeveloperSettingEnabled && isCorrectApprovalType);\n\n  const shouldUseRedesignForTransactions =\n    (isRedesignedTransactionsUserSettingEnabled &&\n      isCorrectUserTransactionType) ||\n    (isRedesignedConfirmationsDeveloperSettingEnabled &&\n      isCorrectDeveloperTransactionType);\n\n  // If the developer toggle or the build time environment variable are enabled,\n  // all the signatures and transactions in development are shown. If the user\n  // facing feature toggles for signature or transactions are enabled, we show\n  // only confirmations that shipped (contained in `REDESIGN_APPROVAL_TYPES` and\n  // `REDESIGN_USER_TRANSACTION_TYPES` or `REDESIGN_DEV_TRANSACTION_TYPES`\n  // respectively).\n  const shouldUseRedesign =\n    shouldUseRedesignForSignatures ||\n    (!isMMI() && shouldUseRedesignForTransactions);\n\n  return useMemo(() => {\n    if (!shouldUseRedesign) {\n      return { currentConfirmation: undefined };\n    }\n\n    const currentConfirmation =\n      transactionMetadata ?? signatureMessage ?? undefined;\n\n    return { currentConfirmation };\n  }, [transactionMetadata, signatureMessage, shouldUseRedesign]);\n};\n\nexport default useCurrentConfirmation;\n","import { useSelector } from 'react-redux';\nimport { TransactionMeta } from '@metamask/transaction-controller';\n\nimport { SecurityAlertResponse } from '../types/confirm';\nimport { useConfirmContext } from '../context/confirm';\n\ntype SecurityAlertResponsesState = {\n  metamask: {\n    signatureSecurityAlertResponses: Record<string, SecurityAlertResponse>;\n    transactions: TransactionMeta[];\n  };\n};\n\nconst useCurrentSignatureSecurityAlertResponse = ():\n  | SecurityAlertResponse\n  | undefined => {\n  const { currentConfirmation } = useConfirmContext();\n\n  const securityAlertId = (\n    currentConfirmation?.securityAlertResponse as SecurityAlertResponse\n  )?.securityAlertId as string;\n\n  const signatureSecurityAlertResponse = useSelector(\n    (state: SecurityAlertResponsesState) => {\n      if (securityAlertId === undefined) {\n        return undefined;\n      }\n      return state.metamask.signatureSecurityAlertResponses?.[\n        securityAlertId as string\n      ];\n    },\n  );\n\n  return signatureSecurityAlertResponse;\n};\n\nexport default useCurrentSignatureSecurityAlertResponse;\n","import { useSelector } from 'react-redux';\nimport { getCurrentDraftTransaction } from '../../../ducks/send';\nimport { getUnapprovedTransactions } from '../../../selectors';\n\n/**\n * Returns an object that resembles the txData.txParams from the Transactions state.\n * While processing gas details for send transaction and edit transaction,\n * the gas data from draftTransaction and unapprovedTx has to be reorganized\n * to mimic the txdata.txParam from a confirmTransaction\n *\n * @returns {object} The transaction data\n */\nexport const useDraftTransactionWithTxParams = () => {\n  const draftTransaction = useSelector(getCurrentDraftTransaction);\n\n  const unapprovedTxs = useSelector(getUnapprovedTransactions);\n\n  let transactionData = {};\n\n  if (Object.keys(draftTransaction).length !== 0) {\n    const editingTransaction = unapprovedTxs[draftTransaction.id];\n    transactionData = {\n      txParams: {\n        gasPrice: draftTransaction.gas?.gasPrice,\n        gas: editingTransaction?.userEditedGasLimit\n          ? editingTransaction?.txParams?.gas\n          : draftTransaction.gas?.gasLimit,\n        maxFeePerGas: editingTransaction?.txParams?.maxFeePerGas\n          ? editingTransaction?.txParams?.maxFeePerGas\n          : draftTransaction.gas?.maxFeePerGas,\n        maxPriorityFeePerGas: editingTransaction?.txParams?.maxPriorityFeePerGas\n          ? editingTransaction?.txParams?.maxPriorityFeePerGas\n          : draftTransaction.gas?.maxPriorityFeePerGas,\n        value: draftTransaction.amount?.value,\n        type: draftTransaction.transactionType,\n      },\n      userFeeLevel: editingTransaction?.userFeeLevel,\n    };\n  }\n\n  return transactionData;\n};\n","import { useSelector } from 'react-redux';\n\nimport {\n  EditGasModes,\n  GasEstimateTypes,\n} from '../../../../shared/constants/gas';\nimport {\n  getMaximumGasTotalInHexWei,\n  getMinimumGasTotalInHexWei,\n} from '../../../../shared/modules/gas.utils';\n\nimport { PRIMARY } from '../../../helpers/constants/common';\nimport { checkNetworkAndAccountSupports1559 } from '../../../selectors';\nimport { isLegacyTransaction } from '../../../helpers/utils/transactions.util';\n\nimport { useCurrencyDisplay } from '../../../hooks/useCurrencyDisplay';\nimport { useUserPreferencedCurrency } from '../../../hooks/useUserPreferencedCurrency';\nimport {\n  decGWEIToHexWEI,\n  decimalToHex,\n} from '../../../../shared/modules/conversion.utils';\n\n/**\n * @typedef {object} GasEstimatesReturnType\n * @property {string} [estimatedMinimumNative] - the maximum amount estimated to be paid if the\n *  current network transaction volume increases. Expressed in the network's native currency.\n * @property {HexWeiString} [maximumCostInHexWei] - the maximum amount this transaction will cost.\n * @property {HexWeiString} [minimumCostInHexWei] - the minimum amount this transaction will cost.\n */\n\n/**\n * @param options\n * @param options.editGasMode\n * @param options.gasEstimateType\n * @param options.gasFeeEstimates\n * @param options.gasLimit\n * @param options.gasPrice\n * @param options.maxFeePerGas\n * @param options.maxPriorityFeePerGas\n * @param options.minimumGasLimit\n * @param options.transaction\n * @returns {GasEstimatesReturnType} The gas estimates.\n */\nexport function useGasEstimates({\n  editGasMode,\n  gasEstimateType,\n  gasFeeEstimates,\n  gasLimit,\n  gasPrice,\n  maxFeePerGas,\n  maxPriorityFeePerGas,\n  minimumGasLimit,\n  transaction,\n}) {\n  const supportsEIP1559 =\n    useSelector((state) =>\n      checkNetworkAndAccountSupports1559(state, transaction?.networkClientId),\n    ) && !isLegacyTransaction(transaction?.txParams);\n\n  const {\n    currency: primaryCurrency,\n    numberOfDecimals: primaryNumberOfDecimals,\n  } = useUserPreferencedCurrency(PRIMARY);\n\n  // We have two helper methods that take an object that can have either\n  // gasPrice OR the EIP-1559 fields on it, plus gasLimit. This object is\n  // conditionally set to the appropriate fields to compute the minimum\n  // and maximum cost of a transaction given the current estimates or selected\n  // gas fees.\n  let gasSettings = {\n    gasLimit: decimalToHex(gasLimit),\n  };\n  if (supportsEIP1559) {\n    gasSettings = {\n      ...gasSettings,\n      maxFeePerGas: decGWEIToHexWEI(maxFeePerGas || gasPrice || '0'),\n      maxPriorityFeePerGas: decGWEIToHexWEI(\n        maxPriorityFeePerGas || maxFeePerGas || gasPrice || '0',\n      ),\n      baseFeePerGas: decGWEIToHexWEI(gasFeeEstimates?.estimatedBaseFee ?? '0'),\n    };\n  } else {\n    gasSettings = {\n      ...gasSettings,\n      gasPrice:\n        gasEstimateType === GasEstimateTypes.none\n          ? '0x0'\n          : decGWEIToHexWEI(gasPrice),\n    };\n  }\n\n  // The maximum amount this transaction will cost\n  const maximumCostInHexWei = getMaximumGasTotalInHexWei(gasSettings);\n\n  if (editGasMode === EditGasModes.swaps) {\n    gasSettings = { ...gasSettings, gasLimit: minimumGasLimit };\n  }\n\n  // The minimum amount this transaction will cost\n  const minimumCostInHexWei = getMinimumGasTotalInHexWei(gasSettings);\n\n  const [estimatedMinimumNative] = useCurrencyDisplay(minimumCostInHexWei, {\n    numberOfDecimals: primaryNumberOfDecimals,\n    currency: primaryCurrency,\n  });\n\n  return {\n    estimatedMinimumNative,\n    maximumCostInHexWei,\n    minimumCostInHexWei,\n  };\n}\n","import { useMemo } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { TransactionType } from '@metamask/transaction-controller';\nimport { GasEstimateTypes, GAS_LIMITS } from '../../../../shared/constants/gas';\nimport {\n  checkNetworkAndAccountSupports1559,\n  getTargetAccount,\n} from '../../../selectors';\nimport { isLegacyTransaction } from '../../../helpers/utils/transactions.util';\nimport { bnGreaterThan, bnLessThan } from '../../../helpers/utils/util';\nimport { GAS_FORM_ERRORS } from '../../../helpers/constants/gas';\nimport { Numeric } from '../../../../shared/modules/Numeric';\nimport { PENDING_STATUS_HASH } from '../../../helpers/constants/transactions';\n\nconst HIGH_FEE_WARNING_MULTIPLIER = 1.5;\n\nconst validateGasLimit = (gasLimit, minimumGasLimit) => {\n  const gasLimitTooLow = new Numeric(gasLimit, 10).lessThan(\n    new Numeric(minimumGasLimit || GAS_LIMITS.SIMPLE, 16),\n  );\n\n  if (gasLimitTooLow) {\n    return GAS_FORM_ERRORS.GAS_LIMIT_OUT_OF_BOUNDS;\n  }\n  return undefined;\n};\n\nconst validateMaxPriorityFee = (maxPriorityFeePerGas, supportsEIP1559) => {\n  if (!supportsEIP1559) {\n    return undefined;\n  }\n  if (bnLessThan(maxPriorityFeePerGas, 0)) {\n    return GAS_FORM_ERRORS.MAX_PRIORITY_FEE_BELOW_MINIMUM;\n  }\n  return undefined;\n};\n\nconst validateMaxFee = (\n  maxFeePerGas,\n  maxPriorityFeeError,\n  maxPriorityFeePerGas,\n  supportsEIP1559,\n) => {\n  if (maxPriorityFeeError || !supportsEIP1559) {\n    return undefined;\n  }\n  if (bnGreaterThan(maxPriorityFeePerGas, maxFeePerGas)) {\n    return GAS_FORM_ERRORS.MAX_FEE_IMBALANCE;\n  }\n  return undefined;\n};\n\nconst validateGasPrice = (\n  isFeeMarketGasEstimate,\n  gasPrice,\n  supportsEIP1559,\n  transaction,\n) => {\n  if (supportsEIP1559 && isFeeMarketGasEstimate) {\n    return undefined;\n  }\n  if (\n    (!supportsEIP1559 || transaction?.txParams?.gasPrice) &&\n    bnLessThan(gasPrice, 0)\n  ) {\n    return GAS_FORM_ERRORS.GAS_PRICE_TOO_LOW;\n  }\n  return undefined;\n};\n\nconst getMaxPriorityFeeWarning = (\n  gasFeeEstimates,\n  isFeeMarketGasEstimate,\n  isGasEstimatesLoading,\n  maxPriorityFeePerGas,\n  supportsEIP1559,\n) => {\n  if (!supportsEIP1559 || !isFeeMarketGasEstimate || isGasEstimatesLoading) {\n    return undefined;\n  }\n  if (\n    bnLessThan(\n      maxPriorityFeePerGas,\n      gasFeeEstimates?.low?.suggestedMaxPriorityFeePerGas,\n    )\n  ) {\n    return GAS_FORM_ERRORS.MAX_PRIORITY_FEE_TOO_LOW;\n  }\n  if (\n    gasFeeEstimates?.high &&\n    bnGreaterThan(\n      maxPriorityFeePerGas,\n      gasFeeEstimates.high.suggestedMaxPriorityFeePerGas *\n        HIGH_FEE_WARNING_MULTIPLIER,\n    )\n  ) {\n    return GAS_FORM_ERRORS.MAX_PRIORITY_FEE_HIGH_WARNING;\n  }\n  return undefined;\n};\n\nconst getMaxFeeWarning = (\n  gasFeeEstimates,\n  isGasEstimatesLoading,\n  isFeeMarketGasEstimate,\n  maxFeeError,\n  maxPriorityFeeError,\n  maxFeePerGas,\n  supportsEIP1559,\n) => {\n  if (\n    maxPriorityFeeError ||\n    maxFeeError ||\n    !isFeeMarketGasEstimate ||\n    !supportsEIP1559 ||\n    isGasEstimatesLoading\n  ) {\n    return undefined;\n  }\n  if (bnLessThan(maxFeePerGas, gasFeeEstimates?.low?.suggestedMaxFeePerGas)) {\n    return GAS_FORM_ERRORS.MAX_FEE_TOO_LOW;\n  }\n  if (\n    gasFeeEstimates?.high &&\n    bnGreaterThan(\n      maxFeePerGas,\n      gasFeeEstimates.high.suggestedMaxFeePerGas * HIGH_FEE_WARNING_MULTIPLIER,\n    )\n  ) {\n    return GAS_FORM_ERRORS.MAX_FEE_HIGH_WARNING;\n  }\n  return undefined;\n};\n\nconst hasBalanceError = (minimumCostInHexWei, transaction, ethBalance) => {\n  if (minimumCostInHexWei === undefined || ethBalance === undefined) {\n    return false;\n  }\n  const minimumTxCostInHexWei = new Numeric(minimumCostInHexWei, 16).add(\n    new Numeric(transaction?.txParams?.value || '0x0', 16),\n  );\n  const ethBalanceInHexWei = new Numeric(ethBalance, 16);\n\n  return minimumTxCostInHexWei.greaterThan(ethBalanceInHexWei);\n};\n\n/**\n * @typedef {object} GasFeeErrorsReturnType\n * @property {object} [gasErrors] - combined map of errors and warnings.\n * @property {boolean} [hasGasErrors] - true if there are errors that can block submission.\n * @property {boolean} [balanceError] - true if user balance is less than transaction value.\n * @property {boolean} [hasSimulationError] - true if simulation error exists.\n */\n\n/**\n * @param options\n * @param options.gasEstimateType\n * @param options.gasFeeEstimates\n * @param options.isGasEstimatesLoading\n * @param options.gasLimit\n * @param options.gasPrice\n * @param options.maxPriorityFeePerGas\n * @param options.maxFeePerGas\n * @param options.minimumCostInHexWei\n * @param options.minimumGasLimit\n * @param options.transaction\n * @returns {GasFeeErrorsReturnType}\n */\nexport function useGasFeeErrors({\n  gasEstimateType,\n  gasFeeEstimates,\n  isGasEstimatesLoading,\n  gasLimit,\n  gasPrice,\n  maxPriorityFeePerGas,\n  maxFeePerGas,\n  minimumCostInHexWei,\n  minimumGasLimit,\n  transaction,\n}) {\n  const supportsEIP1559 =\n    useSelector(checkNetworkAndAccountSupports1559) &&\n    !isLegacyTransaction(transaction?.txParams);\n\n  const isFeeMarketGasEstimate = gasEstimateType === GasEstimateTypes.feeMarket;\n\n  // Get all errors\n  const gasLimitError = validateGasLimit(gasLimit, minimumGasLimit);\n\n  const maxPriorityFeeError = validateMaxPriorityFee(\n    maxPriorityFeePerGas,\n    supportsEIP1559,\n  );\n\n  const maxFeeError = validateMaxFee(\n    maxFeePerGas,\n    maxPriorityFeeError,\n    maxPriorityFeePerGas,\n    supportsEIP1559,\n  );\n\n  const gasPriceError = validateGasPrice(\n    isFeeMarketGasEstimate,\n    gasPrice,\n    supportsEIP1559,\n    transaction,\n  );\n\n  // Get all warnings\n  const maxPriorityFeeWarning = getMaxPriorityFeeWarning(\n    gasFeeEstimates,\n    isFeeMarketGasEstimate,\n    isGasEstimatesLoading,\n    maxPriorityFeePerGas,\n    supportsEIP1559,\n  );\n\n  const maxFeeWarning = getMaxFeeWarning(\n    gasFeeEstimates,\n    isGasEstimatesLoading,\n    isFeeMarketGasEstimate,\n    maxFeeError,\n    maxPriorityFeeError,\n    maxFeePerGas,\n    supportsEIP1559,\n  );\n\n  // Separating errors from warnings so we can know which value problems\n  // are blocking or simply useful information for the users\n\n  const gasErrors = useMemo(() => {\n    const errors = {};\n    if (gasLimitError) {\n      errors.gasLimit = gasLimitError;\n    }\n    if (maxPriorityFeeError) {\n      errors.maxPriorityFee = maxPriorityFeeError;\n    }\n    if (maxFeeError) {\n      errors.maxFee = maxFeeError;\n    }\n    if (gasPriceError) {\n      errors.gasPrice = gasPriceError;\n    }\n    return errors;\n  }, [gasLimitError, maxPriorityFeeError, maxFeeError, gasPriceError]);\n\n  const gasWarnings = useMemo(() => {\n    const warnings = {};\n    if (maxPriorityFeeWarning) {\n      warnings.maxPriorityFee = maxPriorityFeeWarning;\n    }\n    if (maxFeeWarning) {\n      warnings.maxFee = maxFeeWarning;\n    }\n    return warnings;\n  }, [maxPriorityFeeWarning, maxFeeWarning]);\n\n  // Determine if we have any errors which should block submission\n  const hasGasErrors = Boolean(Object.keys(gasErrors).length);\n\n  // Combine the warnings and errors into one object for easier use within the UI.\n  // This object should have no effect on whether or not the user can submit the form\n  const errorsAndWarnings = useMemo(\n    () => ({\n      ...gasWarnings,\n      ...gasErrors,\n    }),\n    [gasErrors, gasWarnings],\n  );\n\n  const account = useSelector(\n    (state) => getTargetAccount(state, transaction?.txParams?.from),\n    shallowEqual,\n  );\n\n  // Balance check is only relevant for outgoing + pending transactions\n  const balanceError =\n    account !== undefined &&\n    transaction?.type !== TransactionType.incoming &&\n    transaction?.status in PENDING_STATUS_HASH\n      ? hasBalanceError(minimumCostInHexWei, transaction, account.balance)\n      : false;\n\n  return {\n    gasErrors: errorsAndWarnings,\n    hasGasErrors,\n    balanceError,\n    hasSimulationError: Boolean(transaction?.simulationFails),\n  };\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport {\n  CUSTOM_GAS_ESTIMATE,\n  GasRecommendations,\n  EditGasModes,\n  PriorityLevels,\n} from '../../../../shared/constants/gas';\nimport { GAS_FORM_ERRORS } from '../../../helpers/constants/gas';\nimport {\n  checkNetworkAndAccountSupports1559,\n  getAdvancedInlineGasShown,\n} from '../../../selectors';\nimport { isLegacyTransaction } from '../../../helpers/utils/transactions.util';\nimport { useGasFeeEstimates } from '../../../hooks/useGasFeeEstimates';\n\nimport { editGasModeIsSpeedUpOrCancel } from '../../../helpers/utils/gas';\nimport { hexToDecimal } from '../../../../shared/modules/conversion.utils';\nimport { Numeric } from '../../../../shared/modules/Numeric';\nimport { EtherDenomination } from '../../../../shared/constants/common';\nimport { useGasFeeErrors } from './useGasFeeErrors';\nimport { useGasPriceInput } from './useGasPriceInput';\nimport { useMaxFeePerGasInput } from './useMaxFeePerGasInput';\nimport { useMaxPriorityFeePerGasInput } from './useMaxPriorityFeePerGasInput';\nimport { useGasEstimates } from './useGasEstimates';\nimport { useTransactionFunctions } from './useTransactionFunctions';\n\n/**\n * In EIP_1559_V2 implementation as used by useGasfeeInputContext() the use of this hook is evolved.\n * It is no longer used to keep transient state of advance gas fee inputs.\n * Transient state of inputs is maintained locally in /ui/components/app/advance-gas-fee-popover component.\n *\n * This hook is used now as source of shared data about transaction, it shares details of gas fee in transaction,\n * estimate used, is EIP-1559 supported and other details. It also  have methods to update transaction.\n *\n * Transaction is used as single source of truth and as transaction is updated the fields shared by hook are\n * also updated using useEffect hook.\n *\n * It will be useful to plan a task to create a new hook of this shared information from this hook.\n * Methods like setEstimateToUse, onManualChange are deprecated in context of EIP_1559_V2 implementation.\n */\n\n/**\n * @typedef {object} GasFeeInputReturnType\n * @property {object} [transaction] - .\n * @property {DecGweiString} [maxFeePerGas] - the maxFeePerGas input value.\n * @property {DecGweiString} [maxPriorityFeePerGas] - the maxPriorityFeePerGas\n *  input value.\n * @property {DecGweiString} [gasPrice] - the gasPrice input value.\n * @property {(DecGweiString) => void} setGasPrice - state setter method to\n *  update the gasPrice.\n * @property {DecGweiString} gasLimit - the gasLimit input value.\n * @property {(DecGweiString) => void} setGasLimit - state setter method to\n *  update the gasLimit.\n * @property {DecGweiString} [properGasLimit] - proper gas limit.\n * @property {string} [editGasMode] - one of CANCEL, SPEED-UP, MODIFY_IN_PLACE, SWAPS.\n * @property {EstimateLevel} [estimateToUse] - the estimate level currently\n *  selected. This will be null if the user has ejected from using the estimates.\n * @property {boolean} [isGasEstimatesLoading] - true if gas estimate is loading.\n * @property {DecGweiString} [maximumCostInHexWei] - maximum cost of transaction in HexWei.\n * @property {DecGweiString} [minimumCostInHexWei] - minimum cost of transaction in HexWei.\n * @property {string} [estimateUsed] - estimate used in the transaction.\n * @property {boolean} [isNetworkBusy] - true if network is busy.\n * @property {() => void} [onManualChange] - function to call when transaction is manually changed.\n * @property {boolean} [balanceError] - true if user balance is less than transaction value.\n * @property {object} [gasErrors] - object of gas errors.\n * @property {boolean} [hasGasErrors] - true if there are gas errors.\n * @property {boolean} [hasSimulationError] - true if simulation error exists.\n * @property {number} [minimumGasLimitDec] - minimum gas limit in decimals.\n * @property {boolean} [supportsEIP1559] - true if EIP1559 is cupported.\n * @property {() => void} cancelTransaction - cancel the transaction.\n * @property {() => void} speedUpTransaction - speed up the transaction.\n * @property {(string, number, number, number, string) => void} updateTransaction - update the transaction.\n * @property {(boolean) => void} updateTransactionToTenPercentIncreasedGasFee - update the cancel / speed transaction to\n * gas fee which is equal to current gas fee +10 percent.\n * @property {(string) => void} updateTransactionUsingDAPPSuggestedValues - update the transaction to DAPP suggested gas value.\n * @property {(string) => void} updateTransactionUsingEstimate - update the transaction using the estimate passed.\n */\n\n/**\n * Uses gasFeeEstimates and state to keep track of user gas fee inputs.\n * Will update the gas fee state when estimates update if the user has not yet\n * modified the fields.\n *\n * @param {GasRecommendations} [defaultEstimateToUse] - which estimate\n *  level to default the 'estimateToUse' state variable to.\n * @param {object} [_transaction]\n * @param {string} [minimumGasLimit]\n * @param {EditGasModes[keyof EditGasModes]} editGasMode\n * @returns {GasFeeInputReturnType & import(\n *  '../../../hooks/useGasFeeEstimates'\n * ).GasEstimates} gas fee input state and the GasFeeEstimates object\n */\n\nconst GAS_LIMIT_TOO_HIGH_IN_ETH = '1';\nexport function useGasFeeInputs(\n  defaultEstimateToUse = GasRecommendations.medium,\n  _transaction,\n  minimumGasLimit = '0x5208',\n  editGasMode = EditGasModes.modifyInPlace,\n) {\n  const initialRetryTxMeta = {\n    txParams: _transaction?.txParams,\n    id: _transaction?.id,\n    userFeeLevel: _transaction?.userFeeLevel,\n    originalGasEstimate: _transaction?.originalGasEstimate,\n    userEditedGasLimit: _transaction?.userEditedGasLimit,\n  };\n\n  if (_transaction?.previousGas) {\n    initialRetryTxMeta.previousGas = _transaction?.previousGas;\n  }\n\n  const [retryTxMeta, setRetryTxMeta] = useState(initialRetryTxMeta);\n\n  const transaction = editGasModeIsSpeedUpOrCancel(editGasMode)\n    ? retryTxMeta\n    : _transaction;\n\n  const supportsEIP1559 =\n    useSelector(checkNetworkAndAccountSupports1559) &&\n    !isLegacyTransaction(transaction?.txParams);\n\n  // We need the gas estimates from the GasFeeController in the background.\n  // Calling this hooks initiates polling for new gas estimates and returns the\n  // current estimate.\n  const {\n    gasEstimateType,\n    gasFeeEstimates,\n    isGasEstimatesLoading,\n    isNetworkBusy,\n  } = useGasFeeEstimates(transaction?.networkClientId);\n\n  const userPrefersAdvancedGas = useSelector(getAdvancedInlineGasShown);\n\n  const [estimateToUse, setInternalEstimateToUse] = useState(() => {\n    if (\n      userPrefersAdvancedGas &&\n      transaction?.txParams?.maxPriorityFeePerGas &&\n      transaction?.txParams?.maxFeePerGas\n    ) {\n      return null;\n    }\n    if (transaction) {\n      return transaction?.userFeeLevel || null;\n    }\n    return defaultEstimateToUse;\n  });\n\n  const [estimateUsed, setEstimateUsed] = useState(() => {\n    if (estimateToUse) {\n      return estimateToUse;\n    }\n    return PriorityLevels.custom;\n  });\n\n  const [gasLimit, setGasLimit] = useState(() =>\n    Number(hexToDecimal(transaction?.txParams?.gas ?? '0x0')),\n  );\n\n  const properGasLimit = Number(hexToDecimal(transaction?.originalGasEstimate));\n\n  /**\n   * In EIP-1559 V2 designs change to gas estimate is always updated to transaction\n   * Thus callback setEstimateToUse can be deprecate in favor of this useEffect\n   * so that transaction is source of truth whenever possible.\n   */\n  useEffect(() => {\n    if (supportsEIP1559) {\n      if (transaction?.userFeeLevel) {\n        setInternalEstimateToUse(transaction?.userFeeLevel);\n      }\n\n      const maximumGas = new Numeric(transaction?.txParams?.gas ?? '0x0', 16)\n        .times(new Numeric(transaction?.txParams?.maxFeePerGas ?? '0x0', 16))\n        .toPrefixedHexString();\n\n      const fee = new Numeric(maximumGas, 16, EtherDenomination.WEI)\n        .toDenomination(EtherDenomination.ETH)\n        .toBase(10)\n        .toString();\n\n      if (Number(fee) > Number(GAS_LIMIT_TOO_HIGH_IN_ETH)) {\n        setEstimateUsed(PriorityLevels.dappSuggestedHigh);\n      } else if (transaction?.userFeeLevel) {\n        setEstimateUsed(transaction?.userFeeLevel);\n      }\n\n      setGasLimit(Number(hexToDecimal(transaction?.txParams?.gas ?? '0x0')));\n    }\n  }, [\n    setEstimateUsed,\n    setGasLimit,\n    setInternalEstimateToUse,\n    supportsEIP1559,\n    transaction,\n  ]);\n\n  const { gasPrice, setGasPrice, setGasPriceHasBeenManuallySet } =\n    useGasPriceInput({\n      estimateToUse,\n      gasEstimateType,\n      gasFeeEstimates,\n      transaction,\n    });\n\n  const { maxFeePerGas, setMaxFeePerGas } = useMaxFeePerGasInput({\n    estimateToUse,\n    gasEstimateType,\n    gasFeeEstimates,\n    transaction,\n  });\n\n  const { maxPriorityFeePerGas, setMaxPriorityFeePerGas } =\n    useMaxPriorityFeePerGasInput({\n      estimateToUse,\n      gasEstimateType,\n      gasFeeEstimates,\n      transaction,\n    });\n\n  const { estimatedMinimumNative, maximumCostInHexWei, minimumCostInHexWei } =\n    useGasEstimates({\n      editGasMode,\n      gasEstimateType,\n      gasFeeEstimates,\n      gasLimit,\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      minimumGasLimit,\n      transaction,\n    });\n\n  const { balanceError, gasErrors, hasGasErrors, hasSimulationError } =\n    useGasFeeErrors({\n      gasEstimateType,\n      gasFeeEstimates,\n      isGasEstimatesLoading,\n      gasLimit,\n      gasPrice,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      minimumCostInHexWei,\n      minimumGasLimit,\n      transaction,\n    });\n\n  const handleGasLimitOutOfBoundError = useCallback(() => {\n    if (gasErrors.gasLimit === GAS_FORM_ERRORS.GAS_LIMIT_OUT_OF_BOUNDS) {\n      const transactionGasLimitDec = hexToDecimal(transaction?.txParams?.gas);\n      const minimumGasLimitDec = hexToDecimal(minimumGasLimit);\n      setGasLimit(\n        transactionGasLimitDec > minimumGasLimitDec\n          ? transactionGasLimitDec\n          : minimumGasLimitDec,\n      );\n    }\n  }, [minimumGasLimit, gasErrors.gasLimit, transaction]);\n\n  const {\n    cancelTransaction,\n    speedUpTransaction,\n    updateTransaction,\n    updateTransactionToTenPercentIncreasedGasFee,\n    updateTransactionUsingDAPPSuggestedValues,\n    updateTransactionUsingEstimate,\n  } = useTransactionFunctions({\n    defaultEstimateToUse,\n    editGasMode,\n    gasFeeEstimates,\n    gasLimit,\n    maxPriorityFeePerGas,\n    minimumGasLimit,\n    transaction,\n    setRetryTxMeta,\n  });\n\n  const onManualChange = useCallback(() => {\n    setInternalEstimateToUse(CUSTOM_GAS_ESTIMATE);\n    handleGasLimitOutOfBoundError();\n    // Restore existing values\n    setGasPrice(gasPrice);\n    setGasLimit(gasLimit);\n    setMaxFeePerGas(maxFeePerGas);\n    setMaxPriorityFeePerGas(maxPriorityFeePerGas);\n    setGasPriceHasBeenManuallySet(true);\n    setEstimateUsed('custom');\n  }, [\n    setInternalEstimateToUse,\n    handleGasLimitOutOfBoundError,\n    setGasPrice,\n    gasPrice,\n    setGasLimit,\n    gasLimit,\n    setMaxFeePerGas,\n    maxFeePerGas,\n    setMaxPriorityFeePerGas,\n    maxPriorityFeePerGas,\n    setGasPriceHasBeenManuallySet,\n  ]);\n\n  return {\n    transaction,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    gasPrice,\n    setGasPrice,\n    gasLimit,\n    setGasLimit,\n    properGasLimit,\n    editGasMode,\n    estimateToUse,\n    estimatedMinimumNative,\n    maximumCostInHexWei,\n    minimumCostInHexWei,\n    estimateUsed,\n    gasFeeEstimates,\n    isNetworkBusy,\n    onManualChange,\n    // error and warnings\n    balanceError,\n    gasErrors,\n    hasGasErrors,\n    hasSimulationError,\n    minimumGasLimitDec: hexToDecimal(minimumGasLimit),\n    supportsEIP1559,\n    cancelTransaction,\n    speedUpTransaction,\n    updateTransaction,\n    updateTransactionToTenPercentIncreasedGasFee,\n    updateTransactionUsingDAPPSuggestedValues,\n    updateTransactionUsingEstimate,\n  };\n}\n","import { useState } from 'react';\nimport { isEqual } from 'lodash';\n\nimport {\n  GasEstimateTypes,\n  CUSTOM_GAS_ESTIMATE,\n} from '../../../../shared/constants/gas';\nimport { isLegacyTransaction } from '../../../helpers/utils/transactions.util';\n\nimport { hexWEIToDecGWEI } from '../../../../shared/modules/conversion.utils';\nimport { feeParamsAreCustom } from './utils';\n\nfunction getGasPriceEstimate(gasFeeEstimates, gasEstimateType, estimateToUse) {\n  if (gasEstimateType === GasEstimateTypes.legacy) {\n    return gasFeeEstimates?.[estimateToUse] ?? '0';\n  } else if (gasEstimateType === GasEstimateTypes.ethGasPrice) {\n    return gasFeeEstimates?.gasPrice ?? '0';\n  }\n  return '0';\n}\n\n/**\n * @typedef {object} GasPriceInputsReturnType\n * @property {DecGweiString} [gasPrice] - the gasPrice input value.\n * @property {(DecGweiString) => void} setGasPrice - state setter method to update the gasPrice.\n * @property {(boolean) => true} setGasPriceHasBeenManuallySet - state setter method to update gasPriceHasBeenManuallySet\n * field gasPriceHasBeenManuallySet is used in gasPrice calculations.\n */\n\n/**\n * @param options\n * @param options.estimateToUse\n * @param options.gasEstimateType\n * @param options.gasFeeEstimates\n * @param options.transaction\n * @returns {GasPriceInputsReturnType}\n */\nexport function useGasPriceInput({\n  estimateToUse,\n  gasEstimateType,\n  gasFeeEstimates,\n  transaction,\n}) {\n  const [gasPriceHasBeenManuallySet, setGasPriceHasBeenManuallySet] = useState(\n    transaction?.userFeeLevel === CUSTOM_GAS_ESTIMATE,\n  );\n\n  const [gasPrice, setGasPrice] = useState(() => {\n    const { gasPrice: txGasPrice } = transaction?.txParams || {};\n    return txGasPrice && feeParamsAreCustom(transaction)\n      ? Number(hexWEIToDecGWEI(txGasPrice))\n      : null;\n  });\n\n  const [initialGasPriceEstimates] = useState(gasFeeEstimates);\n  const gasPriceEstimatesHaveNotChanged = isEqual(\n    initialGasPriceEstimates,\n    gasFeeEstimates,\n  );\n\n  const gasPriceToUse =\n    gasPrice !== null &&\n    (gasPriceHasBeenManuallySet ||\n      gasPriceEstimatesHaveNotChanged ||\n      isLegacyTransaction(transaction?.txParams))\n      ? gasPrice\n      : getGasPriceEstimate(gasFeeEstimates, gasEstimateType, estimateToUse);\n\n  return {\n    gasPrice: gasPriceToUse,\n    setGasPrice,\n    setGasPriceHasBeenManuallySet,\n  };\n}\n","import BigNumber from 'bignumber.js';\nimport { useMemo } from 'react';\nimport { decGWEIToHexWEI } from '../../../../shared/modules/conversion.utils';\nimport { isEIP1559Transaction } from '../../../../shared/modules/transaction.utils';\nimport { addTenPercentAndRound } from '../../../helpers/utils/gas';\nimport { useGasFeeEstimates } from '../../../hooks/useGasFeeEstimates';\n\n/**\n * Helper that returns the higher of two options for a new gas fee:\n * The original fee + 10% or\n * the current medium suggested fee from our gas estimation api\n *\n * @param {string} originalFee - hexWei vale of the original fee (maxFee or maxPriority)\n * @param {string} currentEstimate - decGwei value of the current medium gasFee estimate (maxFee or maxPriorityfee)\n * @returns {string} hexWei value of the higher of the two inputs.\n */\nfunction getHighestIncrementedFee(originalFee, currentEstimate) {\n  const buffedOriginalHexWei = addTenPercentAndRound(originalFee);\n  const currentEstimateHexWei = decGWEIToHexWEI(currentEstimate);\n\n  return new BigNumber(buffedOriginalHexWei, 16).greaterThan(\n    new BigNumber(currentEstimateHexWei, 16),\n  )\n    ? buffedOriginalHexWei\n    : currentEstimateHexWei;\n}\n\n/**\n * When initializing cancellations or speed ups we need to set the baseline\n * gas fees to be 10% higher, which is the bare minimum that the network will\n * accept for transactions of the same nonce. Anything lower than this will be\n * discarded by the network to avoid DoS attacks. This hook returns an object\n * that either has gasPrice or maxFeePerGas/maxPriorityFeePerGas specified. In\n * addition the gasLimit will also be included.\n *\n * @param {} transaction\n * @returns {import(\n *   '../../app/scripts/controllers/transactions'\n * ).CustomGasSettings} Gas settings for cancellations/speed ups\n */\nexport function useIncrementedGasFees(transaction) {\n  const { gasFeeEstimates = {} } = useGasFeeEstimates(\n    transaction.networkClientId,\n  );\n\n  // We memoize this value so that it can be relied upon in other hooks.\n  const customGasSettings = useMemo(() => {\n    // This hook is called indiscriminantly on all transactions appearing in\n    // the activity list. This includes transitional items such as signature\n    // requests. These types of \"transactions\" are not really transactions and\n    // do not have txParams. This is why we use optional chaining on the\n    // txParams object in this hook.\n    const temporaryGasSettings = {\n      gasLimit: transaction.txParams?.gas,\n      gas: transaction.txParams?.gas,\n    };\n\n    const suggestedMaxFeePerGas =\n      gasFeeEstimates?.medium?.suggestedMaxFeePerGas ?? '0';\n    const suggestedMaxPriorityFeePerGas =\n      gasFeeEstimates?.medium?.suggestedMaxPriorityFeePerGas ?? '0';\n\n    if (isEIP1559Transaction(transaction)) {\n      const transactionMaxFeePerGas = transaction.txParams?.maxFeePerGas;\n      const transactionMaxPriorityFeePerGas =\n        transaction.txParams?.maxPriorityFeePerGas;\n\n      temporaryGasSettings.maxFeePerGas =\n        transactionMaxFeePerGas === undefined ||\n        transactionMaxFeePerGas.startsWith('-')\n          ? '0x0'\n          : getHighestIncrementedFee(\n              transactionMaxFeePerGas,\n              suggestedMaxFeePerGas,\n            );\n      temporaryGasSettings.maxPriorityFeePerGas =\n        transactionMaxPriorityFeePerGas === undefined ||\n        transactionMaxPriorityFeePerGas.startsWith('-')\n          ? '0x0'\n          : getHighestIncrementedFee(\n              transactionMaxPriorityFeePerGas,\n              suggestedMaxPriorityFeePerGas,\n            );\n    } else {\n      const transactionGasPrice = transaction.txParams?.gasPrice;\n      temporaryGasSettings.gasPrice =\n        transactionGasPrice === undefined || transactionGasPrice.startsWith('-')\n          ? '0x0'\n          : getHighestIncrementedFee(\n              transactionGasPrice,\n              suggestedMaxFeePerGas,\n            );\n    }\n    return temporaryGasSettings;\n  }, [transaction, gasFeeEstimates]);\n\n  return customGasSettings;\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  HardwareTransportStates,\n  LEDGER_USB_VENDOR_ID,\n  LedgerTransportTypes,\n  WebHIDConnectedStatuses,\n} from '../../../../shared/constants/hardware-wallets';\nimport {\n  getLedgerTransportStatus,\n  getLedgerWebHidConnectedStatus,\n  setLedgerTransportStatus,\n  setLedgerWebHidConnectedStatus,\n} from '../../../ducks/app/app';\nimport {\n  getLedgerTransportType,\n  isAddressLedger,\n} from '../../../ducks/metamask/metamask';\nimport { attemptLedgerTransportCreation } from '../../../store/actions';\nimport { SignatureRequestType } from '../types/confirm';\nimport { useConfirmContext } from '../context/confirm';\n\nconst useLedgerConnection = () => {\n  const dispatch = useDispatch();\n  const { currentConfirmation } = useConfirmContext<SignatureRequestType>();\n  const ledgerTransportType = useSelector(getLedgerTransportType);\n  const transportStatus = useSelector(getLedgerTransportStatus);\n  const webHidConnectedStatus = useSelector(getLedgerWebHidConnectedStatus);\n\n  let from: string | undefined;\n  // todo: extend to other confirmation types\n  if (currentConfirmation?.msgParams) {\n    from = currentConfirmation.msgParams.from;\n  }\n\n  const isLedgerWallet = useSelector(\n    (state) => from && isAddressLedger(state, from),\n  );\n\n  useEffect(() => {\n    if (!isLedgerWallet) {\n      return;\n    }\n    const initialConnectedDeviceCheck = async () => {\n      if (\n        ledgerTransportType === LedgerTransportTypes.webhid &&\n        webHidConnectedStatus !== WebHIDConnectedStatuses.connected\n      ) {\n        const devices = await window.navigator?.hid?.getDevices();\n        const webHidIsConnected = devices?.some(\n          (device) => device.vendorId === Number(LEDGER_USB_VENDOR_ID),\n        );\n        dispatch(\n          setLedgerWebHidConnectedStatus(\n            webHidIsConnected\n              ? WebHIDConnectedStatuses.connected\n              : WebHIDConnectedStatuses.notConnected,\n          ),\n        );\n      }\n    };\n    const determineTransportStatus = async () => {\n      if (\n        ledgerTransportType === LedgerTransportTypes.webhid &&\n        webHidConnectedStatus === WebHIDConnectedStatuses.connected &&\n        transportStatus === HardwareTransportStates.none\n      ) {\n        try {\n          const transportedCreated = await attemptLedgerTransportCreation();\n          dispatch(\n            setLedgerTransportStatus(\n              transportedCreated\n                ? HardwareTransportStates.verified\n                : HardwareTransportStates.unknownFailure,\n            ),\n          );\n        } catch (e: unknown) {\n          if ((e as Error).message.match('Failed to open the device')) {\n            dispatch(\n              setLedgerTransportStatus(\n                HardwareTransportStates.deviceOpenFailure,\n              ),\n            );\n          } else if ((e as Error).message.match('the device is already open')) {\n            dispatch(\n              setLedgerTransportStatus(HardwareTransportStates.verified),\n            );\n          } else {\n            dispatch(\n              setLedgerTransportStatus(HardwareTransportStates.unknownFailure),\n            );\n          }\n        }\n      }\n    };\n    determineTransportStatus();\n    initialConnectedDeviceCheck();\n  }, [\n    dispatch,\n    ledgerTransportType,\n    isLedgerWallet,\n    webHidConnectedStatus,\n    transportStatus,\n  ]);\n\n  useEffect(() => {\n    if (!isLedgerWallet) {\n      return undefined;\n    }\n    return () => {\n      dispatch(setLedgerTransportStatus(HardwareTransportStates.none));\n    };\n  }, [dispatch]);\n\n  return { isLedgerWallet };\n};\n\nexport default useLedgerConnection;\n","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { checkNetworkAndAccountSupports1559 } from '../../../selectors';\nimport { isLegacyTransaction } from '../../../helpers/utils/transactions.util';\n\nimport { hexWEIToDecGWEI } from '../../../../shared/modules/conversion.utils';\nimport { feeParamsAreCustom, getGasFeeEstimate } from './utils';\n\nconst getMaxFeePerGasFromTransaction = (transaction, gasFeeEstimates) => {\n  if (gasFeeEstimates?.[transaction?.userFeeLevel]) {\n    return gasFeeEstimates[transaction.userFeeLevel].suggestedMaxFeePerGas;\n  }\n  const { maxFeePerGas, gasPrice } = transaction?.txParams || {};\n  return Number(hexWEIToDecGWEI(maxFeePerGas || gasPrice));\n};\n\n/**\n * @typedef {object} MaxFeePerGasInputReturnType\n * @property {(DecGweiString) => void} setMaxFeePerGas - state setter method to update the maxFeePerGas.\n * @property {string} [maxFeePerGas] - getter method for maxFeePerGas.\n */\n\n/**\n * @param options\n * @param options.estimateToUse\n * @param options.gasEstimateType\n * @param options.gasFeeEstimates\n * @param options.transaction\n * @returns {MaxFeePerGasInputReturnType}\n */\nexport function useMaxFeePerGasInput({\n  estimateToUse,\n  gasEstimateType,\n  gasFeeEstimates,\n  transaction,\n}) {\n  const supportsEIP1559 =\n    useSelector(checkNetworkAndAccountSupports1559) &&\n    !isLegacyTransaction(transaction?.txParams);\n\n  const initialMaxFeePerGas = supportsEIP1559\n    ? getMaxFeePerGasFromTransaction(transaction, gasFeeEstimates)\n    : 0;\n\n  // This hook keeps track of a few pieces of transitional state. It is\n  // transitional because it is only used to modify a transaction in the\n  // metamask (background) state tree.\n  const [maxFeePerGas, setMaxFeePerGas] = useState(() => {\n    if (initialMaxFeePerGas && feeParamsAreCustom(transaction)) {\n      return initialMaxFeePerGas;\n    }\n    return null;\n  });\n\n  useEffect(() => {\n    if (supportsEIP1559 && initialMaxFeePerGas) {\n      setMaxFeePerGas(initialMaxFeePerGas);\n    }\n  }, [initialMaxFeePerGas, setMaxFeePerGas, supportsEIP1559]);\n\n  // We specify whether to use the estimate value by checking if the state\n  // value has been set. The state value is only set by user input and is wiped\n  // when the user selects an estimate. Default here is '0' to avoid bignumber\n  // errors in later calculations for nullish values.\n  const maxFeePerGasToUse =\n    maxFeePerGas ??\n    getGasFeeEstimate(\n      'suggestedMaxFeePerGas',\n      gasFeeEstimates,\n      gasEstimateType,\n      estimateToUse,\n      initialMaxFeePerGas || 0,\n    );\n\n  return {\n    maxFeePerGas: maxFeePerGasToUse,\n    setMaxFeePerGas,\n  };\n}\n","import { useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\n\nimport { checkNetworkAndAccountSupports1559 } from '../../../selectors';\nimport { isLegacyTransaction } from '../../../helpers/utils/transactions.util';\n\nimport { hexWEIToDecGWEI } from '../../../../shared/modules/conversion.utils';\nimport { feeParamsAreCustom, getGasFeeEstimate } from './utils';\n\nconst isNullOrUndefined = (value) => value === null || value === undefined;\n\nconst getMaxPriorityFeePerGasFromTransaction = (\n  transaction,\n  gasFeeEstimates,\n) => {\n  if (gasFeeEstimates?.[transaction?.userFeeLevel]) {\n    return gasFeeEstimates[transaction.userFeeLevel]\n      .suggestedMaxPriorityFeePerGas;\n  }\n  const { maxPriorityFeePerGas, maxFeePerGas, gasPrice } =\n    transaction?.txParams || {};\n  const feeInHexWei = maxPriorityFeePerGas || maxFeePerGas || gasPrice;\n  return feeInHexWei ? Number(hexWEIToDecGWEI(feeInHexWei)) : null;\n};\n\n/**\n * @typedef {object} MaxPriorityFeePerGasInputReturnType\n * @property {DecGweiString} [maxPriorityFeePerGas] - the maxPriorityFeePerGas\n *  input value.\n * @property {(DecGweiString) => void} setMaxPriorityFeePerGas - state setter\n *  method to update the maxPriorityFeePerGas.\n */\n\n/**\n * @param options\n * @param options.estimateToUse\n * @param options.gasEstimateType\n * @param options.gasFeeEstimates\n * @param options.transaction\n * @returns {MaxPriorityFeePerGasInputReturnType}\n */\nexport function useMaxPriorityFeePerGasInput({\n  estimateToUse,\n  gasEstimateType,\n  gasFeeEstimates,\n  transaction,\n}) {\n  const supportsEIP1559 =\n    useSelector(checkNetworkAndAccountSupports1559) &&\n    !isLegacyTransaction(transaction?.txParams);\n\n  const initialMaxPriorityFeePerGas = supportsEIP1559\n    ? getMaxPriorityFeePerGasFromTransaction(transaction, gasFeeEstimates)\n    : null;\n\n  const [maxPriorityFeePerGas, setMaxPriorityFeePerGas] = useState(() => {\n    if (\n      !isNullOrUndefined(initialMaxPriorityFeePerGas) &&\n      feeParamsAreCustom(transaction)\n    ) {\n      return initialMaxPriorityFeePerGas;\n    }\n    return null;\n  });\n\n  useEffect(() => {\n    if (supportsEIP1559 && !isNullOrUndefined(initialMaxPriorityFeePerGas)) {\n      setMaxPriorityFeePerGas(initialMaxPriorityFeePerGas);\n    }\n  }, [initialMaxPriorityFeePerGas, setMaxPriorityFeePerGas, supportsEIP1559]);\n\n  const maxPriorityFeePerGasToUse =\n    maxPriorityFeePerGas ??\n    getGasFeeEstimate(\n      'suggestedMaxPriorityFeePerGas',\n      gasFeeEstimates,\n      gasEstimateType,\n      estimateToUse,\n      initialMaxPriorityFeePerGas || 0,\n    );\n\n  return {\n    maxPriorityFeePerGas: maxPriorityFeePerGasToUse,\n    setMaxPriorityFeePerGas,\n  };\n}\n","import { useContext, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n  QueueType,\n} from '../../../../shared/constants/metametrics';\nimport { MetaMetricsContext } from '../../../contexts/metametrics';\nimport {\n  getQueuedRequestCount,\n  pendingApprovalsSortedSelector,\n} from '../../../selectors';\n\nexport const useQueuedConfirmationsEvent = (queueType: QueueType) => {\n  const pendingApprovals = useSelector(pendingApprovalsSortedSelector);\n  const queuedRequestCount = useSelector(getQueuedRequestCount);\n  const trackEvent = useContext(MetaMetricsContext);\n\n  useEffect(() => {\n    if (pendingApprovals.length > 0 && queuedRequestCount > 0) {\n      const properties = {\n        confirmation_type: pendingApprovals[0].type,\n        referrer: pendingApprovals[0].origin,\n        queue_size: queuedRequestCount,\n        queue_type: queueType,\n      };\n\n      trackEvent({\n        event: MetaMetricsEventName.ConfirmationQueued,\n        category: MetaMetricsEventCategory.Confirmations,\n        properties,\n      });\n    }\n  }, [\n    JSON.stringify(pendingApprovals),\n    queuedRequestCount,\n    queueType,\n    trackEvent,\n  ]);\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { valuesFor } from '../../../helpers/utils/util';\nimport { showModal, rejectAllMessages } from '../../../store/actions';\nimport { clearConfirmTransaction } from '../../../ducks/confirm-transaction/confirm-transaction.duck';\nimport { getMostRecentOverviewPage } from '../../../ducks/history/history';\nimport {\n  getTotalUnapprovedMessagesCount,\n  unconfirmedMessagesHashSelector,\n} from '../../../selectors';\n\nexport function useRejectTransactionModal() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const mostRecentOverviewPage = useSelector(getMostRecentOverviewPage);\n  const unapprovedMessagesCount = useSelector(getTotalUnapprovedMessagesCount);\n  const unconfirmedMessagesList = useSelector(unconfirmedMessagesHashSelector);\n\n  const handleCancelAll = () => {\n    dispatch(\n      showModal({\n        name: 'REJECT_TRANSACTIONS',\n        onSubmit: async () => {\n          await dispatch(rejectAllMessages(valuesFor(unconfirmedMessagesList)));\n          dispatch(clearConfirmTransaction());\n          history.push(mostRecentOverviewPage);\n        },\n        unapprovedTxCount: unapprovedMessagesCount,\n        isRequestType: true,\n      }),\n    );\n  };\n\n  return { handleCancelAll };\n}\n","import { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport { getMostRecentOverviewPage } from '../../../ducks/history/history';\n\n/**\n * useRouting - hook for re-uable reoting related code.\n */\n\nexport function useRouting() {\n  const history = useHistory();\n  const mostRecentOverviewPage = useSelector(getMostRecentOverviewPage);\n\n  const navigateToMostRecentOverviewPage = useCallback(() => {\n    history.push(mostRecentOverviewPage);\n  }, [history, mostRecentOverviewPage]);\n  return { navigateToMostRecentOverviewPage };\n}\n","import { useCallback } from 'react';\nimport { generateSignatureUniqueId } from '../../../helpers/utils/metrics';\nimport { updateEventFragment } from '../../../store/actions';\nimport { useConfirmContext } from '../context/confirm';\nimport { SignatureRequestType } from '../types/confirm';\nimport { isSignatureTransactionType } from '../utils';\n\nimport type { MetaMetricsEventFragment } from '../../../../shared/constants/metametrics';\n\n/**\n * When a signature has been requested, there should be an event fragment created for it in\n * {@see {@link app/scripts/lib/createRPCMethodTrackingMiddleware.js}.\n * This hook method is used to update an existing signature event fragment for a signature confirmation.\n */\nexport const useSignatureEventFragment = () => {\n  const { currentConfirmation } = useConfirmContext();\n\n  const requestId =\n    isSignatureTransactionType(currentConfirmation) &&\n    ((currentConfirmation as SignatureRequestType)?.msgParams\n      ?.requestId as number);\n  const fragmentId = requestId ? generateSignatureUniqueId(requestId) : null;\n\n  const updateSignatureEventFragment = useCallback(\n    async (fragmentPayload: Partial<MetaMetricsEventFragment>) => {\n      if (!fragmentId) {\n        return;\n      }\n\n      updateEventFragment(fragmentId, fragmentPayload);\n    },\n    [fragmentId],\n  );\n\n  return { updateSignatureEventFragment };\n};\n","import { useSelector } from 'react-redux';\nimport { txDataSelector } from '../../../selectors';\n\n/**\n * Returns the simulation failure warning if a simulaiton error\n * is present and user didn't acknowledge gas missing\n *\n * @param {boolean} userAcknowledgedGasMissing - Whether the user acknowledge gas missing\n * @returns {boolean} simulation failure warning\n */\n\nexport function useSimulationFailureWarning(userAcknowledgedGasMissing) {\n  const txData = useSelector(txDataSelector) || {};\n  const hasSimulationError = Boolean(txData.simulationFails);\n  const renderSimulationFailureWarning =\n    hasSimulationError && !userAcknowledgedGasMissing;\n  return renderSimulationFailureWarning;\n}\n","import { useCallback } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { useGasFeeContext } from '../../../contexts/gasFee';\nimport {\n  createTransactionEventFragment,\n  updateEventFragment,\n} from '../../../store/actions';\nimport { selectMatchingFragment } from '../../../selectors';\n\nexport const useTransactionEventFragment = () => {\n  const { transaction } = useGasFeeContext();\n  const fragment = useSelector((state) =>\n    selectMatchingFragment(state, {\n      fragmentOptions: {},\n      existingId: `transaction-added-${transaction?.id}`,\n    }),\n  );\n\n  const fragmentExists = Boolean(fragment);\n  const gasTransactionId = transaction?.id;\n\n  const updateTransactionEventFragment = useCallback(\n    async (params, _transactionId) => {\n      const transactionId = _transactionId || gasTransactionId;\n\n      if (!transactionId) {\n        return;\n      }\n      if (!fragmentExists) {\n        await createTransactionEventFragment(transactionId);\n      }\n      updateEventFragment(`transaction-added-${transactionId}`, params);\n    },\n    [fragmentExists, gasTransactionId],\n  );\n\n  return { updateTransactionEventFragment };\n};\n","import { useSelector } from 'react-redux';\n\nimport { TransactionType } from '@metamask/transaction-controller';\nimport { ORIGIN_METAMASK } from '../../../../shared/constants/app';\nimport { getKnownMethodData } from '../../../selectors';\nimport { getNativeCurrency } from '../../../ducks/metamask/metamask';\nimport { getTransactionTypeTitle } from '../../../helpers/utils/transactions.util';\nimport { getMethodName } from '../../../helpers/utils/metrics';\n\nimport { useI18nContext } from '../../../hooks/useI18nContext';\n\nexport const useTransactionFunctionType = (txData = {}) => {\n  const t = useI18nContext();\n  const nativeCurrency = useSelector(getNativeCurrency);\n  const { txParams } = txData;\n  const methodData = useSelector(\n    (state) => getKnownMethodData(state, txParams?.data) || {},\n  );\n\n  if (!txParams) {\n    return {};\n  }\n\n  const isTokenApproval =\n    txData.type === TransactionType.tokenMethodSetApprovalForAll ||\n    txData.type === TransactionType.tokenMethodApprove ||\n    txData.type === TransactionType.tokenMethodIncreaseAllowance;\n\n  const isContractInteraction =\n    txData.type === TransactionType.contractInteraction;\n\n  const isTransactionFromDapp =\n    (isTokenApproval || isContractInteraction) &&\n    txData.origin !== ORIGIN_METAMASK;\n\n  let functionType = isTransactionFromDapp\n    ? getMethodName(methodData?.name)\n    : undefined;\n\n  if (!functionType) {\n    functionType = txData.type\n      ? getTransactionTypeTitle(t, txData.type, nativeCurrency)\n      : t('contractInteraction');\n  }\n\n  return { functionType };\n};\n","import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport BigNumber from 'bignumber.js';\nimport {\n  EditGasModes,\n  PriorityLevels,\n  CUSTOM_GAS_ESTIMATE,\n} from '../../../../shared/constants/gas';\nimport {\n  addTenPercentAndRound,\n  editGasModeIsSpeedUpOrCancel,\n} from '../../../helpers/utils/gas';\nimport {\n  createCancelTransaction,\n  createSpeedUpTransaction,\n  updateCustomSwapsEIP1559GasParams,\n  updatePreviousGasParams,\n  updateSwapsUserFeeLevel,\n  updateTransactionGasFees,\n} from '../../../store/actions';\nimport {\n  decGWEIToHexWEI,\n  decimalToHex,\n} from '../../../../shared/modules/conversion.utils';\n\n/**\n * @typedef {object} TransactionFunctionsReturnType\n * @property {() => void} cancelTransaction - cancel the transaction.\n * @property {() => void} speedUpTransaction - speed up the transaction.\n * @property {(string, number, number, number, string) => void} updateTransaction - update the transaction.\n * @property {(boolean) => void} updateTransactionToTenPercentIncreasedGasFee - update the cancel / speed transaction to\n * gas fee which is equal to current gas fee +10 percent.\n * @property {(string) => void} updateTransactionUsingDAPPSuggestedValues - update the transaction to DAPP suggested gas value.\n * @property {(string) => void} updateTransactionUsingEstimate - update the transaction using the estimate passed.\n */\n\n/**\n * @param options\n * @param options.defaultEstimateToUse\n * @param options.editGasMode\n * @param options.estimatedBaseFee\n * @param options.gasFeeEstimates\n * @param options.gasLimit\n * @param options.maxPriorityFeePerGas\n * @param options.transaction\n * @param options.setRetryTxMeta\n * @returns {TransactionFunctionsReturnType}\n */\nexport const useTransactionFunctions = ({\n  defaultEstimateToUse,\n  editGasMode,\n  estimatedBaseFee,\n  gasFeeEstimates,\n  gasLimit: gasLimitValue,\n  maxPriorityFeePerGas: maxPriorityFeePerGasValue,\n  transaction,\n  setRetryTxMeta,\n}) => {\n  const dispatch = useDispatch();\n\n  const getTxMeta = useCallback(() => {\n    if (\n      (editGasMode !== EditGasModes.cancel &&\n        editGasMode !== EditGasModes.speedUp) ||\n      transaction.previousGas\n    ) {\n      return {};\n    }\n    const { maxFeePerGas, maxPriorityFeePerGas, gasLimit } =\n      transaction?.txParams ?? {};\n    return {\n      previousGas: {\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        gasLimit,\n      },\n    };\n  }, [editGasMode, transaction?.previousGas, transaction?.txParams]);\n\n  const updateTransaction = useCallback(\n    async ({\n      estimateUsed,\n      gasLimit,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      estimateSuggested,\n    }) => {\n      const newGasSettings = {\n        gas: decimalToHex(gasLimit || gasLimitValue),\n        gasLimit: decimalToHex(gasLimit || gasLimitValue),\n        estimateSuggested: estimateSuggested || defaultEstimateToUse,\n        estimateUsed,\n      };\n      if (maxFeePerGas) {\n        newGasSettings.maxFeePerGas = maxFeePerGas;\n      }\n      if (maxPriorityFeePerGas) {\n        newGasSettings.maxPriorityFeePerGas =\n          maxPriorityFeePerGas || decGWEIToHexWEI(maxPriorityFeePerGasValue);\n      }\n      const txMeta = getTxMeta();\n\n      const updatedTxMeta = {\n        ...transaction,\n        userFeeLevel: estimateUsed || PriorityLevels.custom,\n        txParams: {\n          ...transaction.txParams,\n          ...newGasSettings,\n        },\n        ...txMeta,\n      };\n\n      if (editGasMode === EditGasModes.swaps) {\n        dispatch(\n          updateSwapsUserFeeLevel(estimateUsed || PriorityLevels.custom),\n        );\n        dispatch(updateCustomSwapsEIP1559GasParams(newGasSettings));\n      } else if (editGasModeIsSpeedUpOrCancel(editGasMode)) {\n        setRetryTxMeta(updatedTxMeta);\n      } else {\n        newGasSettings.userEditedGasLimit = updatedTxMeta.userEditedGasLimit;\n        newGasSettings.userFeeLevel = updatedTxMeta.userFeeLevel;\n\n        if (txMeta && txMeta.previousGas) {\n          await dispatch(\n            updatePreviousGasParams(updatedTxMeta.id, txMeta.previousGas),\n          );\n        }\n\n        await dispatch(\n          updateTransactionGasFees(updatedTxMeta.id, newGasSettings),\n        );\n      }\n    },\n    [\n      defaultEstimateToUse,\n      dispatch,\n      editGasMode,\n      gasLimitValue,\n      getTxMeta,\n      maxPriorityFeePerGasValue,\n      transaction,\n      setRetryTxMeta,\n    ],\n  );\n\n  const cancelTransaction = useCallback(() => {\n    dispatch(\n      createCancelTransaction(transaction.id, transaction.txParams, {\n        estimatedBaseFee,\n      }),\n    );\n  }, [dispatch, estimatedBaseFee, transaction]);\n\n  const speedUpTransaction = useCallback(() => {\n    dispatch(\n      createSpeedUpTransaction(transaction.id, transaction.txParams, {\n        estimatedBaseFee,\n      }),\n    );\n  }, [dispatch, estimatedBaseFee, transaction]);\n\n  const updateTransactionToTenPercentIncreasedGasFee = useCallback(\n    (initTransaction = false) => {\n      const {\n        gas: gasLimit,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n      } = transaction.previousGas || transaction.txParams;\n\n      const newMaxPriorityFeePerGas = new BigNumber(\n        maxPriorityFeePerGas,\n        16,\n      ).isZero()\n        ? decGWEIToHexWEI(\n            gasFeeEstimates[defaultEstimateToUse].suggestedMaxPriorityFeePerGas,\n          )\n        : maxPriorityFeePerGas;\n\n      const estimateUsed =\n        maxPriorityFeePerGas === '0x0'\n          ? CUSTOM_GAS_ESTIMATE\n          : PriorityLevels.tenPercentIncreased;\n\n      if (!gasFeeEstimates) {\n        return;\n      }\n      updateTransaction({\n        estimateSuggested: initTransaction\n          ? defaultEstimateToUse\n          : PriorityLevels.tenPercentIncreased,\n        estimateUsed,\n        gasLimit,\n        maxFeePerGas: addTenPercentAndRound(maxFeePerGas),\n        maxPriorityFeePerGas: addTenPercentAndRound(newMaxPriorityFeePerGas),\n      });\n    },\n    [defaultEstimateToUse, gasFeeEstimates, transaction, updateTransaction],\n  );\n\n  const updateTransactionUsingEstimate = useCallback(\n    (gasFeeEstimateToUse) => {\n      if (!gasFeeEstimates[gasFeeEstimateToUse]) {\n        return;\n      }\n      const { suggestedMaxFeePerGas, suggestedMaxPriorityFeePerGas } =\n        gasFeeEstimates[gasFeeEstimateToUse];\n      updateTransaction({\n        estimateUsed: gasFeeEstimateToUse,\n        maxFeePerGas: decGWEIToHexWEI(suggestedMaxFeePerGas),\n        maxPriorityFeePerGas: decGWEIToHexWEI(suggestedMaxPriorityFeePerGas),\n      });\n    },\n    [gasFeeEstimates, updateTransaction],\n  );\n\n  const updateTransactionUsingDAPPSuggestedValues = useCallback(() => {\n    const { maxFeePerGas, maxPriorityFeePerGas } =\n      transaction?.dappSuggestedGasFees ?? {};\n    updateTransaction({\n      estimateUsed: PriorityLevels.dAppSuggested,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    });\n  }, [transaction, updateTransaction]);\n\n  return {\n    cancelTransaction,\n    speedUpTransaction,\n    updateTransaction,\n    updateTransactionToTenPercentIncreasedGasFee,\n    updateTransactionUsingDAPPSuggestedValues,\n    updateTransactionUsingEstimate,\n  };\n};\n","import { useSelector } from 'react-redux';\nimport { getProviderConfig } from '../../../ducks/metamask/metamask';\n\nimport { isEqualCaseInsensitive } from '../../../../shared/modules/string-utils';\nimport { getSelectedInternalAccount } from '../../../selectors';\n\nexport const useTransactionInfo = (txData = {}) => {\n  const { allNftContracts } = useSelector((state) => state.metamask);\n  const selectedInternalAccount = useSelector(getSelectedInternalAccount);\n  const { chainId } = useSelector(getProviderConfig);\n\n  const isNftTransfer = Boolean(\n    allNftContracts?.[selectedInternalAccount.address]?.[chainId]?.find(\n      (contract) => {\n        return isEqualCaseInsensitive(contract.address, txData.txParams.to);\n      },\n    ),\n  );\n\n  return { isNftTransfer };\n};\n","import {\n  GasEstimateTypes,\n  CUSTOM_GAS_ESTIMATE,\n} from '../../../../shared/constants/gas';\n\nexport function getGasFeeEstimate(\n  field,\n  gasFeeEstimates,\n  gasEstimateType,\n  estimateToUse,\n  fallback = '0',\n) {\n  if (gasEstimateType === GasEstimateTypes.feeMarket) {\n    return gasFeeEstimates?.[estimateToUse]?.[field] ?? String(fallback);\n  }\n  return String(fallback);\n}\n\nexport const feeParamsAreCustom = (transaction) =>\n  !transaction?.userFeeLevel ||\n  transaction?.userFeeLevel === CUSTOM_GAS_ESTIMATE;\n","import { getPreferences } from '../../../selectors';\n\nexport type RootState = {\n  metamask: {\n    useTransactionSimulations?: boolean;\n  };\n};\n\nexport const selectUseTransactionSimulations = (state: RootState) =>\n  state.metamask.useTransactionSimulations;\n\nexport function selectConfirmationAdvancedDetailsOpen(state: RootState) {\n  return Boolean(getPreferences(state).showConfirmationAdvancedDetails);\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport { isHexString } from '@metamask/utils';\nimport { addHexPrefix } from '../../../../../../app/scripts/lib/util';\nimport { shortenAddress } from '../../../../../helpers/utils/util';\nimport {\n  isBurnAddress,\n  isValidHexAddress,\n  toChecksumHexAddress,\n} from '../../../../../../shared/modules/hexstring-utils';\nimport {\n  ButtonIcon,\n  IconName,\n  IconSize,\n  AvatarAccount,\n  AvatarAccountVariant,\n  Text,\n} from '../../../../../components/component-library';\nimport {\n  IconColor,\n  Size,\n  BackgroundColor,\n  TextColor,\n  TextVariant,\n} from '../../../../../helpers/constants/design-system';\n\nexport default class DomainInput extends Component {\n  static contextTypes = {\n    t: PropTypes.func,\n    metricsEvent: PropTypes.func,\n  };\n\n  static propTypes = {\n    className: PropTypes.string,\n    useBlockie: PropTypes.bool,\n    selectedAddress: PropTypes.string,\n    selectedName: PropTypes.string,\n    scanQrCode: PropTypes.func,\n    onPaste: PropTypes.func,\n    onValidAddressTyped: PropTypes.func,\n    internalSearch: PropTypes.bool,\n    userInput: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired,\n    lookupDomainName: PropTypes.func.isRequired,\n    initializeDomainSlice: PropTypes.func.isRequired,\n    resetDomainResolution: PropTypes.func.isRequired,\n  };\n\n  componentDidMount() {\n    this.props.initializeDomainSlice();\n  }\n\n  onPaste = (event) => {\n    if (event.clipboardData.items?.length) {\n      const clipboardItem = event.clipboardData.items[0];\n      clipboardItem?.getAsString((text) => {\n        const input = text.trim();\n        if (\n          !isBurnAddress(input) &&\n          isValidHexAddress(input, { mixedCaseUseChecksum: true })\n        ) {\n          this.props.onPaste(addHexPrefix(input));\n        }\n      });\n    }\n  };\n\n  onChange = ({ target: { value } }) => {\n    const {\n      onValidAddressTyped,\n      internalSearch,\n      onChange,\n      lookupDomainName,\n      resetDomainResolution,\n    } = this.props;\n    const input = value.trim();\n\n    onChange(input);\n    if (internalSearch) {\n      return null;\n    }\n\n    if (isHexString(input)) {\n      resetDomainResolution();\n      if (\n        onValidAddressTyped &&\n        !isBurnAddress(input) &&\n        isValidHexAddress(input, { mixedCaseUseChecksum: true })\n      ) {\n        onValidAddressTyped(addHexPrefix(input));\n      }\n    } else {\n      lookupDomainName(input);\n    }\n\n    return null;\n  };\n\n  render() {\n    const { t } = this.context;\n    const { className, selectedAddress, selectedName, userInput, useBlockie } =\n      this.props;\n\n    const hasSelectedAddress = Boolean(selectedAddress);\n\n    const shortenedAddress =\n      selectedName && selectedAddress\n        ? shortenAddress(toChecksumHexAddress(selectedAddress))\n        : undefined;\n\n    return (\n      <div className={classnames('ens-input', className)}>\n        <div\n          className={classnames('ens-input__wrapper', {\n            'ens-input__wrapper__status-icon--error': false,\n            'ens-input__wrapper__status-icon--valid': false,\n            'ens-input__wrapper--valid': hasSelectedAddress,\n          })}\n        >\n          {hasSelectedAddress ? (\n            <>\n              <div\n                className=\"ens-input__wrapper__input ens-input__wrapper__input--selected\"\n                data-testid=\"ens-input-selected\"\n              >\n                <AvatarAccount\n                  variant={\n                    useBlockie\n                      ? AvatarAccountVariant.Blockies\n                      : AvatarAccountVariant.Jazzicon\n                  }\n                  address={selectedAddress}\n                  size={Size.MD}\n                  borderColor={BackgroundColor.backgroundDefault} // we currently don't have white color for border hence using backgroundDefault as the border\n                />\n                <div className=\"ens-input__selected-input__title\">\n                  {selectedName || selectedAddress}\n                  {shortenedAddress ? (\n                    <Text\n                      color={TextColor.textAlternative}\n                      variant={TextVariant.bodySm}\n                      ellipsis\n                    >\n                      {shortenedAddress}\n                    </Text>\n                  ) : null}\n                </div>\n              </div>\n              <ButtonIcon\n                iconName={IconName.Close}\n                ariaLabel={t('close')}\n                onClick={this.props.onReset}\n                className=\"ens-input__wrapper__action-icon-button\"\n                size={IconSize.Sm}\n              />\n            </>\n          ) : (\n            <>\n              <input\n                className=\"ens-input__wrapper__input\"\n                type=\"text\"\n                dir=\"auto\"\n                placeholder={t('recipientAddressPlaceholderNew')}\n                onChange={this.onChange}\n                onPaste={this.onPaste}\n                spellCheck=\"false\"\n                value={selectedAddress || userInput}\n                autoFocus\n                data-testid=\"ens-input\"\n              />\n              <ButtonIcon\n                className=\"ens-input__wrapper__action-icon-button\"\n                onClick={() => {\n                  if (userInput?.length > 0) {\n                    this.props.onReset();\n                  } else {\n                    this.props.scanQrCode();\n                  }\n                }}\n                iconName={userInput ? IconName.Close : IconName.Scan}\n                ariaLabel={t(userInput ? 'close' : 'scanQrCode')}\n                color={\n                  userInput ? IconColor.iconDefault : IconColor.primaryDefault\n                }\n                data-testid=\"ens-qr-scan-button\"\n              />\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import { debounce } from 'lodash';\nimport { connect } from 'react-redux';\nimport {\n  lookupDomainName,\n  initializeDomainSlice,\n  resetDomainResolution,\n} from '../../../../../ducks/domains';\nimport { getUseBlockie } from '../../../../../selectors';\nimport DomainInput from './domain-input.component';\n\n// Trigger onChange when chainId changes using MapStateToProps\nfunction mapStateToProps(state) {\n  return { useBlockie: getUseBlockie(state) };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    lookupDomainName: debounce(\n      (domainName) => dispatch(lookupDomainName(domainName)),\n      150,\n    ),\n    initializeDomainSlice: () => dispatch(initializeDomainSlice()),\n    resetDomainResolution: debounce(\n      () => dispatch(resetDomainResolution()),\n      300,\n    ),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DomainInput);\n","export { default } from './domain-input.container';\n","import React, { useState, useContext, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport BigNumber from 'bignumber.js';\nimport Box from '../../../components/ui/box/box';\nimport NetworkAccountBalanceHeader from '../../../components/app/network-account-balance-header/network-account-balance-header';\nimport UrlIcon from '../../../components/ui/url-icon/url-icon';\nimport {\n  AlignItems,\n  BorderStyle,\n  Color,\n  DISPLAY,\n  FLEX_DIRECTION,\n  FontWeight,\n  JustifyContent,\n  TextAlign,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\nimport { I18nContext } from '../../../contexts/i18n';\nimport ContractTokenValues from '../components/contract-token-values/contract-token-values';\nimport Button from '../../../components/ui/button';\nimport ReviewSpendingCap from '../components/review-spending-cap/review-spending-cap';\nimport { PageContainerFooter } from '../../../components/ui/page-container';\nimport ContractDetailsModal from '../components/contract-details-modal/contract-details-modal';\nimport {\n  getCustomTokenAmount,\n  getNetworkIdentifier,\n  transactionFeeSelector,\n  getKnownMethodData,\n  getRpcPrefsForCurrentProvider,\n  getUnapprovedTxCount,\n  getUnapprovedTransactions,\n  getUseCurrencyRateCheck,\n  getTargetAccountWithSendEtherInfo,\n  getCustomNonceValue,\n  getNextSuggestedNonce,\n} from '../../../selectors';\nimport { NETWORK_TO_NAME_MAP } from '../../../../shared/constants/network';\nimport {\n  cancelTx,\n  cancelTxs,\n  showModal,\n  updateAndApproveTx,\n  getNextNonce,\n  updateCustomNonce,\n} from '../../../store/actions';\nimport { clearConfirmTransaction } from '../../../ducks/confirm-transaction/confirm-transaction.duck';\nimport { getMostRecentOverviewPage } from '../../../ducks/history/history';\nimport ApproveContentCard from '../components/approve-content-card/approve-content-card';\nimport CustomSpendingCap from '../components/custom-spending-cap/custom-spending-cap';\nimport Dialog from '../../../components/ui/dialog';\nimport { useGasFeeContext } from '../../../contexts/gasFee';\nimport { getCustomTxParamsData } from '../confirm-approve/confirm-approve.util';\nimport { setCustomTokenAmount } from '../../../ducks/app/app';\nimport { valuesFor } from '../../../helpers/utils/util';\nimport { calcTokenAmount } from '../../../../shared/lib/transactions-controller-utils';\nimport {\n  MAX_TOKEN_ALLOWANCE_AMOUNT,\n  NUM_W_OPT_DECIMAL_COMMA_OR_DOT_REGEX,\n} from '../../../../shared/constants/tokens';\nimport { isSuspiciousResponse } from '../../../../shared/modules/security-provider.utils';\nimport BlockaidBannerAlert from '../components/security-provider-banner-alert/blockaid-banner-alert/blockaid-banner-alert';\nimport { ConfirmPageContainerNavigation } from '../components/confirm-page-container';\nimport { useSimulationFailureWarning } from '../hooks/useSimulationFailureWarning';\nimport SimulationErrorMessage from '../components/simulation-error-message';\nimport LedgerInstructionField from '../components/ledger-instruction-field/ledger-instruction-field';\nimport SecurityProviderBannerMessage from '../components/security-provider-banner-message/security-provider-banner-message';\nimport { Icon, IconName, Text } from '../../../components/component-library';\nimport { ConfirmPageContainerWarning } from '../components/confirm-page-container/confirm-page-container-content';\nimport CustomNonce from '../components/custom-nonce';\nimport FeeDetailsComponent from '../components/fee-details-component/fee-details-component';\nimport { BlockaidResultType } from '../../../../shared/constants/security-provider';\nimport { QueuedRequestsBannerAlert } from '../confirmation/components/queued-requests-banner-alert/queued-requests-banner-alert';\n\n\nconst ALLOWED_HOSTS = ['portfolio.metamask.io'];\n\nexport default function TokenAllowance({\n  origin,\n  siteImage,\n  showCustomizeGasModal,\n  useNonceField,\n  currentCurrency,\n  nativeCurrency,\n  ethTransactionTotal,\n  fiatTransactionTotal,\n  hexTransactionTotal,\n  hexMinimumTransactionFee,\n  txData,\n  supportsEIP1559,\n  userAddress,\n  tokenAddress,\n  data,\n  isSetApproveForAll,\n  isApprovalOrRejection,\n  decimals,\n  dappProposedTokenAmount,\n  currentTokenBalance,\n  toAddress,\n  tokenSymbol,\n  fromAddressIsLedger,\n  warning,\n}) {\n  const t = useContext(I18nContext);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const mostRecentOverviewPage = useSelector(getMostRecentOverviewPage);\n\n  const { hostname } = new URL(origin);\n  const thisOriginIsAllowedToSkipFirstPage = ALLOWED_HOSTS.includes(hostname);\n\n  const customTokenAmount = useSelector(getCustomTokenAmount);\n  const [customSpendingCap, setCustomSpendingCap] = useState(customTokenAmount);\n\n  const [showContractDetails, setShowContractDetails] = useState(false);\n  const [inputChangeInProgress, setInputChangeInProgress] = useState(false);\n  const [showFullTxDetails, setShowFullTxDetails] = useState(false);\n  const [isFirstPage, setIsFirstPage] = useState(\n    dappProposedTokenAmount !== '0' && !thisOriginIsAllowedToSkipFirstPage,\n  );\n  const [errorText, setErrorText] = useState('');\n  const [userAcknowledgedGasMissing, setUserAcknowledgedGasMissing] =\n    useState(false);\n\n  const renderSimulationFailureWarning = useSimulationFailureWarning(\n    userAcknowledgedGasMissing,\n  );\n  const fromAccount = useSelector((state) =>\n    getTargetAccountWithSendEtherInfo(state, userAddress),\n  );\n  const networkIdentifier = useSelector(getNetworkIdentifier);\n  const rpcPrefs = useSelector(getRpcPrefsForCurrentProvider);\n  const unapprovedTxCount = useSelector(getUnapprovedTxCount);\n  const unapprovedTxs = useSelector(getUnapprovedTransactions);\n  const useCurrencyRateCheck = useSelector(getUseCurrencyRateCheck);\n  const nextNonce = useSelector(getNextSuggestedNonce);\n  const customNonceValue = useSelector(getCustomNonceValue);\n\n  /**\n   * We set the customSpendingCap to the dappProposedTokenAmount, if provided, rather than setting customTokenAmount\n   * because customTokenAmount is reserved for custom user input. This is only set once when the component is mounted.\n   */\n  const initializeCustomSpendingCap = () => {\n    if (\n      (!customSpendingCap || customSpendingCap === '') &&\n      dappProposedTokenAmount\n    ) {\n      setCustomSpendingCap(dappProposedTokenAmount);\n    }\n  };\n\n  useEffect(() => {\n    initializeCustomSpendingCap();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const replaceCommaToDot = (inputValue) => {\n    return inputValue.replace(/,/gu, '.');\n  };\n\n  let customPermissionAmount = NUM_W_OPT_DECIMAL_COMMA_OR_DOT_REGEX.test(\n    customSpendingCap,\n  )\n    ? replaceCommaToDot(customSpendingCap).toString()\n    : '0';\n\n  const maxTokenAmount = calcTokenAmount(MAX_TOKEN_ALLOWANCE_AMOUNT, decimals);\n  if (customSpendingCap.length > 1 && Number(customSpendingCap)) {\n    const customSpendLimitNumber = new BigNumber(customSpendingCap);\n    if (customSpendLimitNumber.greaterThan(maxTokenAmount)) {\n      customPermissionAmount = 0;\n    }\n  }\n\n  const customTxParamsData = customPermissionAmount\n    ? getCustomTxParamsData(data, {\n        customPermissionAmount,\n        decimals,\n      })\n    : null;\n\n  let fullTxData = { ...txData };\n\n  if (customTxParamsData) {\n    fullTxData = {\n      ...fullTxData,\n      txParams: {\n        ...fullTxData.txParams,\n        data: customTxParamsData,\n      },\n    };\n  }\n\n  const fee = useSelector((state) => transactionFeeSelector(state, fullTxData));\n  const methodData = useSelector((state) => getKnownMethodData(state, data));\n\n  const { balanceError } = useGasFeeContext();\n\n  const disableNextButton =\n    isFirstPage && (customSpendingCap === '' || errorText !== '');\n\n  const disableApproveButton = !isFirstPage && balanceError;\n\n  const networkName =\n    NETWORK_TO_NAME_MAP[fullTxData.chainId] || networkIdentifier;\n\n  const customNonceMerge = (transactionData) =>\n    customNonceValue\n      ? {\n          ...transactionData,\n          customNonceValue,\n        }\n      : transactionData;\n\n  const handleReject = () => {\n    dispatch(updateCustomNonce(''));\n    dispatch(setCustomTokenAmount(''));\n\n    dispatch(cancelTx(fullTxData)).then(() => {\n      dispatch(clearConfirmTransaction());\n      history.push(mostRecentOverviewPage);\n    });\n  };\n\n\n  const handleApprove = () => {\n    const { name } = methodData;\n\n    if (fee.gasEstimationObject.baseFeePerGas) {\n      fullTxData.estimatedBaseFee = fee.gasEstimationObject.baseFeePerGas;\n    }\n\n    if (name) {\n      fullTxData.contractMethodName = name;\n    }\n\n    if (dappProposedTokenAmount) {\n      fullTxData.dappProposedTokenAmount = dappProposedTokenAmount;\n      fullTxData.originalApprovalAmount = dappProposedTokenAmount;\n    }\n\n    if (customSpendingCap) {\n      fullTxData.customTokenAmount = customSpendingCap;\n      fullTxData.finalApprovalAmount = customSpendingCap;\n    } else if (dappProposedTokenAmount !== undefined) {\n      fullTxData.finalApprovalAmount = dappProposedTokenAmount;\n    }\n\n    if (currentTokenBalance) {\n      fullTxData.currentTokenBalance = currentTokenBalance;\n    }\n\n    dispatch(updateCustomNonce(''));\n\n\n    ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n    dispatch(updateAndApproveTx(customNonceMerge(fullTxData))).then(() => {\n      dispatch(clearConfirmTransaction());\n      history.push(mostRecentOverviewPage);\n    });\n    ///: END:ONLY_INCLUDE_IF\n  };\n\n  const handleNextClick = () => {\n    setShowFullTxDetails(false);\n    setIsFirstPage(false);\n  };\n\n  const handleBackClick = () => {\n    setShowFullTxDetails(false);\n    setIsFirstPage(true);\n  };\n\n  const handleCancelAll = () => {\n    dispatch(\n      showModal({\n        name: 'REJECT_TRANSACTIONS',\n        unapprovedTxCount,\n        onSubmit: async () => {\n          await dispatch(cancelTxs(valuesFor(unapprovedTxs)));\n          dispatch(clearConfirmTransaction());\n          history.push(mostRecentOverviewPage);\n        },\n      }),\n    );\n  };\n\n  const handleNextNonce = useCallback(() => {\n    dispatch(getNextNonce());\n  }, [getNextNonce, dispatch]);\n\n  useEffect(() => {\n    dispatch(getNextNonce());\n  }, [getNextNonce, dispatch]);\n\n  const handleUpdateCustomNonce = (value) => {\n    dispatch(updateCustomNonce(value));\n  };\n\n  const handleCustomizeNonceModal = (\n    /* eslint-disable no-shadow */\n    useNonceField,\n    nextNonce,\n    customNonceValue,\n    updateCustomNonce,\n    getNextNonce,\n    /* eslint-disable no-shadow */\n  ) => {\n    dispatch(\n      showModal({\n        name: 'CUSTOMIZE_NONCE',\n        useNonceField,\n        nextNonce,\n        customNonceValue,\n        updateCustomNonce,\n        getNextNonce,\n      }),\n    );\n  };\n\n  const isEmpty = customSpendingCap === '';\n\n  const renderContractTokenValues = (\n    <Box marginTop={4} key={tokenAddress}>\n      <ContractTokenValues\n        tokenName={tokenSymbol}\n        address={tokenAddress}\n        chainId={fullTxData.chainId}\n        rpcPrefs={rpcPrefs}\n      />\n    </Box>\n  );\n\n  const submitButtonType =\n    txData.securityAlertResponse?.result_type === BlockaidResultType.Malicious\n      ? 'danger-primary'\n      : 'primary';\n\n  return (\n    <Box className=\"token-allowance-container page-container\">\n      <Box>\n        <ConfirmPageContainerNavigation />\n      </Box>\n      <Box\n        paddingLeft={4}\n        paddingRight={4}\n        alignItems={AlignItems.center}\n        display={DISPLAY.FLEX}\n        flexDirection={FLEX_DIRECTION.ROW}\n        justifyContent={JustifyContent.spaceBetween}\n      >\n        <Box>\n          {!isFirstPage && (\n            <Button type=\"inline\" onClick={() => handleBackClick()}>\n              <Text\n                variant={TextVariant.bodySm}\n                as=\"h6\"\n                color={TextColor.textMuted}\n                fontWeight={FontWeight.Bold}\n              >\n                {'<'} {t('back')}\n              </Text>\n            </Button>\n          )}\n        </Box>\n        <Box textAlign={TextAlign.End}>\n          <Text\n            variant={TextVariant.bodySm}\n            as=\"h6\"\n            color={TextColor.textMuted}\n            fontWeight={FontWeight.Bold}\n          >\n            {isFirstPage ? 1 : 2} {t('ofTextNofM')} 2\n          </Text>\n        </Box>\n      </Box>\n      <NetworkAccountBalanceHeader\n        networkName={networkName}\n        accountName={fromAccount.metadata.name}\n        accountBalance={currentTokenBalance}\n        tokenName={tokenSymbol}\n        accountAddress={userAddress}\n        chainId={fullTxData.chainId}\n      />\n      <BlockaidBannerAlert\n        txData={txData}\n        marginTop={4}\n        marginLeft={4}\n        marginRight={4}\n      />\n      <QueuedRequestsBannerAlert />\n      {isSuspiciousResponse(txData?.securityProviderResponse) && (\n        <SecurityProviderBannerMessage\n          securityProviderResponse={txData.securityProviderResponse}\n        />\n      )}\n      {warning && (\n        <Box className=\"token-allowance-container__custom-nonce-warning\">\n          <ConfirmPageContainerWarning warning={warning} />\n        </Box>\n      )}\n      <Box\n        display={DISPLAY.FLEX}\n        flexDirection={FLEX_DIRECTION.ROW}\n        justifyContent={JustifyContent.center}\n      >\n        <Box\n          display={DISPLAY.FLEX}\n          alignItems={AlignItems.center}\n          marginTop={6}\n          marginRight={12}\n          marginBottom={8}\n          marginLeft={12}\n          paddingTop={2}\n          paddingRight={4}\n          paddingBottom={2}\n          paddingLeft={2}\n          borderColor={Color.borderMuted}\n          borderStyle={BorderStyle.solid}\n          borderWidth={1}\n          className=\"token-allowance-container__icon-display-content\"\n        >\n          <UrlIcon\n            className=\"token-allowance-container__icon-display-content__siteimage-identicon\"\n            fallbackClassName=\"token-allowance-container__icon-display-content__siteimage-identicon\"\n            name={origin}\n            url={siteImage}\n          />\n          <Text\n            variant={TextVariant.bodySm}\n            as=\"h6\"\n            color={TextColor.textAlternative}\n            marginLeft={1}\n          >\n            {origin}\n          </Text>\n        </Box>\n      </Box>\n      <Box marginLeft={4} marginRight={4}>\n        <Text variant={TextVariant.headingMd} align={TextAlign.Center}>\n          {isFirstPage ? (\n            t('spendingCapRequest', [renderContractTokenValues])\n          ) : (\n            <Box>\n              {customSpendingCap === '0' || isEmpty\n                ? t('revokeSpendingCap', [renderContractTokenValues])\n                : t('spendingCapRequest', [renderContractTokenValues])}\n            </Box>\n          )}\n        </Text>\n      </Box>\n      <Box\n        marginTop={1}\n        display={DISPLAY.FLEX}\n        flexDirection={FLEX_DIRECTION.ROW}\n        justifyContent={JustifyContent.center}\n      >\n        <Button\n          type=\"link\"\n          onClick={() => setShowContractDetails(true)}\n          className=\"token-allowance-container__verify-link\"\n        >\n          <Text\n            variant={TextVariant.bodySm}\n            as=\"h6\"\n            color={Color.primaryDefault}\n          >\n            {t('verifyContractDetails')}\n          </Text>\n        </Button>\n      </Box>\n      <Box margin={[4, 4, 3, 4]}>\n        {isFirstPage ? (\n          <CustomSpendingCap\n            txParams={txData?.txParams}\n            tokenName={tokenSymbol}\n            currentTokenBalance={currentTokenBalance}\n            dappProposedValue={dappProposedTokenAmount}\n            siteOrigin={origin}\n            passTheErrorText={(value) => setErrorText(value)}\n            decimals={decimals}\n            setInputChangeInProgress={setInputChangeInProgress}\n            customSpendingCap={customSpendingCap}\n            setCustomSpendingCap={setCustomSpendingCap}\n          />\n        ) : (\n          <ReviewSpendingCap\n            tokenName={tokenSymbol}\n            currentTokenBalance={currentTokenBalance}\n            tokenValue={\n              isNaN(parseFloat(customSpendingCap))\n                ? dappProposedTokenAmount\n                : replaceCommaToDot(customSpendingCap)\n            }\n            onEdit={() => handleBackClick()}\n          />\n        )}\n      </Box>\n      {!isFirstPage && balanceError && (\n        <Dialog type=\"error\" className=\"send__error-dialog\">\n          {t('insufficientFundsForGas')}\n        </Dialog>\n      )}\n      {!isFirstPage && (\n        <Box className=\"token-allowance-container__card-wrapper\">\n          {renderSimulationFailureWarning && (\n            <Box\n              paddingTop={0}\n              paddingRight={4}\n              paddingBottom={4}\n              paddingLeft={4}\n            >\n              <SimulationErrorMessage\n                userAcknowledgedGasMissing={userAcknowledgedGasMissing}\n                setUserAcknowledgedGasMissing={() =>\n                  setUserAcknowledgedGasMissing(true)\n                }\n              />\n            </Box>\n          )}\n          <ApproveContentCard\n            symbol={<Icon name={IconName.Tag} />}\n            title={t('transactionFee')}\n            showEdit\n            showAdvanceGasFeeOptions\n            onEditClick={showCustomizeGasModal}\n            renderTransactionDetailsContent\n            noBorder={useNonceField || !showFullTxDetails}\n            supportsEIP1559={supportsEIP1559}\n            ethTransactionTotal={ethTransactionTotal}\n            nativeCurrency={nativeCurrency}\n            fullTxData={fullTxData}\n            userAcknowledgedGasMissing={userAcknowledgedGasMissing}\n            renderSimulationFailureWarning={renderSimulationFailureWarning}\n            hexTransactionTotal={hexTransactionTotal}\n            hexMinimumTransactionFee={hexMinimumTransactionFee}\n            fiatTransactionTotal={fiatTransactionTotal}\n            currentCurrency={currentCurrency}\n            useCurrencyRateCheck={useCurrencyRateCheck}\n          />\n        </Box>\n      )}\n      <Box marginRight={4} marginLeft={4}>\n        <FeeDetailsComponent\n          useCurrencyRateCheck={useCurrencyRateCheck}\n          txData={txData}\n          hideGasDetails={isFirstPage}\n        />\n      </Box>\n      {useNonceField && (\n        <Box marginTop={4} marginRight={4} marginLeft={4}>\n          <CustomNonce\n            nextNonce={nextNonce}\n            customNonceValue={customNonceValue}\n            showCustomizeNonceModal={() =>\n              handleCustomizeNonceModal(\n                useNonceField,\n                nextNonce,\n                customNonceValue,\n                handleUpdateCustomNonce,\n                handleNextNonce,\n              )\n            }\n          />\n        </Box>\n      )}\n      <Box\n        display={DISPLAY.FLEX}\n        flexDirection={FLEX_DIRECTION.ROW}\n        justifyContent={JustifyContent.center}\n      >\n        <Button\n          type=\"link\"\n          onClick={() => setShowFullTxDetails(!showFullTxDetails)}\n          className=\"token-allowance-container__view-details\"\n        >\n          <Text\n            variant={TextVariant.bodySm}\n            as=\"h6\"\n            color={TextColor.primaryDefault}\n            marginRight={1}\n          >\n            {t('viewDetails')}\n          </Text>\n          {showFullTxDetails ? (\n            <i className=\"fa fa-sm fa-angle-up\" />\n          ) : (\n            <i className=\"fa fa-sm fa-angle-down\" />\n          )}\n        </Button>\n      </Box>\n      {showFullTxDetails ? (\n        <Box\n          display={DISPLAY.FLEX}\n          flexDirection={FLEX_DIRECTION.COLUMN}\n          alignItems={AlignItems.center}\n          className=\"token-allowance-container__full-tx-content\"\n        >\n          <Box className=\"token-allowance-container__data\">\n            <ApproveContentCard\n              symbol={<i className=\"fa fa-file\" />}\n              title={t('data')}\n              renderDataContent\n              noBorder\n              supportsEIP1559={supportsEIP1559}\n              isSetApproveForAll={isSetApproveForAll}\n              fullTxData={fullTxData}\n              userAcknowledgedGasMissing={userAcknowledgedGasMissing}\n              renderSimulationFailureWarning={renderSimulationFailureWarning}\n              isApprovalOrRejection={isApprovalOrRejection}\n              data={customTxParamsData || data}\n              useCurrencyRateCheck={useCurrencyRateCheck}\n              hexMinimumTransactionFee={hexMinimumTransactionFee}\n            />\n          </Box>\n        </Box>\n      ) : null}\n      {!isFirstPage && fromAddressIsLedger && (\n        <Box paddingLeft={2} paddingRight={2}>\n          <LedgerInstructionField showDataInstruction />\n        </Box>\n      )}\n      <PageContainerFooter\n        cancelText={t('reject')}\n        submitText={isFirstPage ? t('next') : t('approveButtonText')}\n        onCancel={() => handleReject()}\n        onSubmit={() => (isFirstPage ? handleNextClick() : handleApprove())}\n        disabled={\n          inputChangeInProgress || disableNextButton || disableApproveButton\n        }\n        submitButtonType={submitButtonType}\n      >\n        {unapprovedTxCount > 1 && (\n          <Button\n            type=\"link\"\n            onClick={(e) => {\n              e.preventDefault();\n              handleCancelAll();\n            }}\n          >\n            {t('rejectTxsN', [unapprovedTxCount])}\n          </Button>\n        )}\n      </PageContainerFooter>\n      {showContractDetails && (\n        <ContractDetailsModal\n          tokenName={tokenSymbol}\n          onClose={() => setShowContractDetails(false)}\n          tokenAddress={tokenAddress}\n          toAddress={toAddress}\n          chainId={fullTxData.chainId}\n          rpcPrefs={rpcPrefs}\n        />\n      )}\n    </Box>\n  );\n}\n\nTokenAllowance.propTypes = {\n  /**\n   * Dapp URL\n   */\n  origin: PropTypes.string,\n  /**\n   * Dapp image\n   */\n  siteImage: PropTypes.string,\n  /**\n   * Function that is supposed to open the customized gas modal\n   */\n  showCustomizeGasModal: PropTypes.func,\n  /**\n   * Whether nonce field should be used or not\n   */\n  useNonceField: PropTypes.bool,\n  /**\n   * Current fiat currency (e.g. USD)\n   */\n  currentCurrency: PropTypes.string,\n  /**\n   * Current native currency (e.g. RopstenETH)\n   */\n  nativeCurrency: PropTypes.string,\n  /**\n   * Total sum of the transaction in native currency\n   */\n  ethTransactionTotal: PropTypes.string,\n  /**\n   * Total sum of the transaction in fiat currency\n   */\n  fiatTransactionTotal: PropTypes.string,\n  /**\n   * Total sum of the transaction converted to hex value\n   */\n  hexTransactionTotal: PropTypes.string,\n  /**\n   * Minimum transaction fee converted to hex value\n   */\n  hexMinimumTransactionFee: PropTypes.string,\n  /**\n   * Current transaction\n   */\n  txData: PropTypes.object,\n  /**\n   * Is the enhanced gas fee enabled or not\n   */\n  supportsEIP1559: PropTypes.bool,\n  /**\n   * User's address\n   */\n  userAddress: PropTypes.string,\n  /**\n   * Address of the token that is waiting to be allowed\n   */\n  tokenAddress: PropTypes.string,\n  /**\n   * Current transaction data\n   */\n  data: PropTypes.string,\n  /**\n   * Is set approve for all or not\n   */\n  isSetApproveForAll: PropTypes.bool,\n  /**\n   * Whether a current set approval for all transaction will approve or revoke access\n   */\n  isApprovalOrRejection: PropTypes.bool,\n  /**\n   * Number of decimals\n   */\n  decimals: PropTypes.string,\n  /**\n   * Token amount proposed by the Dapp\n   */\n  dappProposedTokenAmount: PropTypes.string,\n  /**\n   * Token balance of the current account\n   */\n  currentTokenBalance: PropTypes.string,\n  /**\n   * Contract address requesting spending cap\n   */\n  toAddress: PropTypes.string,\n  /**\n   * Symbol of the token that is waiting to be allowed\n   */\n  tokenSymbol: PropTypes.string,\n  /**\n   * Whether the address sending the transaction is a ledger address\n   */\n  fromAddressIsLedger: PropTypes.bool,\n  /**\n   * Customize nonce warning message\n   */\n  warning: PropTypes.string,\n};\n","import { memoize } from 'lodash';\nimport { Hex } from '@metamask/utils';\nimport { getTokenStandardAndDetails } from '../../../store/actions';\n\nexport const ERC20_DEFAULT_DECIMALS = 18;\n\n/**\n * Fetches the decimals for the given token address.\n *\n * @param {Hex | string} address - The ethereum token contract address. It is expected to be in hex format.\n * We currently accept strings since we have a patch that accepts a custom string\n * {@see .yarn/patches/@metamask-eth-json-rpc-middleware-npm-14.0.1-b6c2ccbe8c.patch}\n */\nexport const fetchErc20Decimals = memoize(\n  async (address: Hex | string): Promise<number> => {\n    try {\n      const { decimals: decStr } = await getTokenStandardAndDetails(address);\n      if (!decStr) {\n        return ERC20_DEFAULT_DECIMALS;\n      }\n      for (const radix of [10, 16]) {\n        const parsedDec = parseInt(decStr, radix);\n        if (isFinite(parsedDec)) {\n          return parsedDec;\n        }\n      }\n      return ERC20_DEFAULT_DECIMALS;\n    } catch {\n      return ERC20_DEFAULT_DECIMALS;\n    }\n  },\n);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { WALLET_SNAP_PERMISSION_KEY } from '@metamask/snaps-utils';\nimport Popover from '../../components/ui/popover';\nimport ConnectedAccountsList from '../../components/app/connected-accounts-list';\nimport ConnectedAccountsPermissions from '../../components/app/connected-accounts-permissions';\nimport { getURLHost } from '../../helpers/utils/util';\nimport { useI18nContext } from '../../hooks/useI18nContext';\nimport ConnectedSnaps from '../../components/app/connected-sites-list/connected-snaps';\nimport { TextColor, TextVariant } from '../../helpers/constants/design-system';\nimport { Box, Text } from '../../components/component-library';\nimport { getInternalAccounts } from '../../selectors';\n\nexport default function ConnectedAccounts({\n  accountToConnect = null,\n  activeTabOrigin,\n  isActiveTabExtension,\n  connectAccount,\n  connectedAccounts,\n  history,\n  mostRecentOverviewPage,\n  permissions = undefined,\n  selectedAddress,\n  removePermittedAccount,\n  setSelectedAccount,\n  subjectMetadata,\n  originOfActiveTab,\n  permissionSubjects,\n}) {\n  const t = useI18nContext();\n  const internalAccounts = useSelector(getInternalAccounts);\n  const connectedSubjectsMetadata = subjectMetadata[originOfActiveTab];\n  const subjectHasSnaps =\n    permissionSubjects[originOfActiveTab]?.origin ===\n      connectedSubjectsMetadata?.origin &&\n    permissionSubjects[originOfActiveTab]?.permissions[\n      WALLET_SNAP_PERMISSION_KEY\n    ];\n\n  const connectedSnaps =\n    subjectHasSnaps &&\n    Object.keys(\n      permissionSubjects[originOfActiveTab]?.permissions?.wallet_snap\n        ?.caveats[0]?.value,\n    );\n  const connectedSnapsMetaData =\n    subjectHasSnaps && connectedSnaps?.map((sub) => subjectMetadata[sub]);\n\n  const connectedAccountsDescription =\n    connectedAccounts.length > 0\n      ? t('connectedAccountsDescriptionPlural', [connectedAccounts.length])\n      : t('connectedAccountsDescriptionSingular');\n\n  let subtitle;\n  if (connectedAccounts.length && !subjectHasSnaps) {\n    subtitle = connectedAccountsDescription;\n  } else if (subjectHasSnaps && !connectedAccounts.length) {\n    subtitle = t('connectedSnapAndNoAccountDescription');\n  } else if (connectedAccounts && subjectHasSnaps) {\n    subtitle = null;\n  } else {\n    subtitle = t('connectedAccountsEmptyDescription');\n  }\n\n  return (\n    <Popover\n      title={\n        isActiveTabExtension\n          ? t('currentExtension')\n          : getURLHost(activeTabOrigin)\n      }\n      headerProps={{\n        paddingLeft: 4,\n        paddingRight: 4,\n      }}\n      subtitle={subtitle}\n      onClose={() => history.push(mostRecentOverviewPage)}\n      footerClassName=\"connected-accounts__footer\"\n      ConnectedAccountsPermissions={{}}\n      footer={\n        connectedAccounts.length > 0 && ( // show permissions only for connected accounts not snaps\n          <ConnectedAccountsPermissions permissions={permissions} />\n        )\n      }\n    >\n      <Box>\n        {connectedAccounts.length > 0 ? (\n          <Box marginLeft={4}>\n            <Text\n              variant={TextVariant.bodyMdMedium}\n              color={TextColor.textAlternative}\n            >\n              {t('accountsConnected')}&nbsp;({connectedAccounts.length})\n            </Text>\n          </Box>\n        ) : null}\n\n        <ConnectedAccountsList\n          accountToConnect={accountToConnect}\n          connectAccount={connectAccount}\n          connectedAccounts={connectedAccounts}\n          selectedAddress={selectedAddress}\n          removePermittedAccount={removePermittedAccount}\n          setSelectedAddress={(address) => {\n            const { id: accountId } = internalAccounts.find(\n              (internalAccount) => internalAccount.address === address,\n            );\n            setSelectedAccount(accountId);\n          }}\n          shouldRenderListOptions\n        />\n      </Box>\n      {subjectHasSnaps && connectedSnapsMetaData.length > 0 && (\n        <>\n          <Box marginLeft={4}>\n            <Text\n              variant={TextVariant.bodyMdMedium}\n              color={TextColor.textAlternative}\n            >\n              {t('snapsConnected')}&nbsp;({connectedSnaps.length})\n            </Text>\n          </Box>\n          <ConnectedSnaps connectedSubjects={connectedSnapsMetaData} />\n        </>\n      )}\n    </Popover>\n  );\n}\n\nConnectedAccounts.propTypes = {\n  accountToConnect: PropTypes.object,\n  activeTabOrigin: PropTypes.string.isRequired,\n  connectAccount: PropTypes.func.isRequired,\n  connectedAccounts: PropTypes.array.isRequired,\n  mostRecentOverviewPage: PropTypes.string.isRequired,\n  permissions: PropTypes.array,\n  isActiveTabExtension: PropTypes.bool.isRequired,\n  selectedAddress: PropTypes.string.isRequired,\n  removePermittedAccount: PropTypes.func.isRequired,\n  setSelectedAccount: PropTypes.func.isRequired,\n  history: PropTypes.object.isRequired,\n  subjectMetadata: PropTypes.arrayOf(PropTypes.object).isRequired,\n  originOfActiveTab: PropTypes.string,\n  permissionSubjects: PropTypes.object,\n};\n","import { connect } from 'react-redux';\nimport {\n  getAccountToConnectToActiveTab,\n  getOrderedConnectedAccountsForActiveTab,\n  getOriginOfCurrentTab,\n  getPermissionsForActiveTab,\n  getSelectedInternalAccount,\n  getPermissionSubjects,\n  getSubjectMetadata,\n  getInternalAccounts,\n} from '../../selectors';\nimport { isExtensionUrl } from '../../helpers/utils/util';\nimport {\n  addPermittedAccount,\n  removePermittedAccount,\n  setSelectedInternalAccount,\n} from '../../store/actions';\nimport { getMostRecentOverviewPage } from '../../ducks/history/history';\nimport ConnectedAccounts from './connected-accounts.component';\n\nconst mapStateToProps = (state) => {\n  const { activeTab } = state;\n  const accountToConnect = getAccountToConnectToActiveTab(state);\n  const connectedAccounts = getOrderedConnectedAccountsForActiveTab(state);\n  const internalAccounts = getInternalAccounts(state);\n  // Temporary fix until https://github.com/MetaMask/metamask-extension/pull/21553\n  const internalAccountsMap = new Map(\n    internalAccounts.map((acc) => [acc.address, acc]),\n  );\n\n  const connectedAccountsWithName = connectedAccounts.map((account) => ({\n    ...account,\n    name: internalAccountsMap.get(account.address)?.metadata.name,\n  }));\n  const accountToConnectWithName = accountToConnect && {\n    ...accountToConnect,\n    name: internalAccounts.find(\n      (internalAccount) =>\n        internalAccount.address === accountToConnect?.address,\n    )?.metadata.name,\n  };\n  const permissions = getPermissionsForActiveTab(state);\n  const { address: selectedAddress } = getSelectedInternalAccount(state);\n  const subjectMetadata = getSubjectMetadata(state);\n  const originOfActiveTab = getOriginOfCurrentTab(state);\n  const permissionSubjects = getPermissionSubjects(state);\n\n  const isActiveTabExtension = isExtensionUrl(activeTab);\n  return {\n    accountToConnect: accountToConnectWithName,\n    isActiveTabExtension,\n    activeTabOrigin: activeTab.origin,\n    connectedAccounts: connectedAccountsWithName,\n    mostRecentOverviewPage: getMostRecentOverviewPage(state),\n    permissions,\n    selectedAddress,\n    subjectMetadata,\n    originOfActiveTab,\n    permissionSubjects,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addPermittedAccount: (origin, address) =>\n      dispatch(addPermittedAccount(origin, address)),\n    removePermittedAccount: (origin, address) =>\n      dispatch(removePermittedAccount(origin, address)),\n    setSelectedAccount: (accountId) =>\n      dispatch(setSelectedInternalAccount(accountId)),\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n  const { activeTabOrigin } = stateProps;\n\n  return {\n    ...ownProps,\n    ...stateProps,\n    ...dispatchProps,\n    connectAccount: (address) =>\n      dispatchProps.addPermittedAccount(activeTabOrigin, address),\n    removePermittedAccount: (address) =>\n      dispatchProps.removePermittedAccount(activeTabOrigin, address),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n)(ConnectedAccounts);\n","export { default } from './connected-accounts.container';\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport ConnectedSitesList from '../../components/app/connected-sites-list';\nimport Popover from '../../components/ui/popover/popover.component';\nimport Button from '../../components/ui/button';\n\nexport default class ConnectedSites extends Component {\n  static contextTypes = {\n    t: PropTypes.func,\n  };\n\n  static defaultProps = {\n    tabToConnect: null,\n  };\n\n  static propTypes = {\n    accountLabel: PropTypes.string.isRequired,\n    closePopover: PropTypes.func.isRequired,\n    connectedSubjects: PropTypes.arrayOf(PropTypes.object).isRequired,\n    disconnectAllAccounts: PropTypes.func.isRequired,\n    disconnectAccount: PropTypes.func.isRequired,\n    getOpenMetamaskTabsIds: PropTypes.func.isRequired,\n    permittedAccountsByOrigin: PropTypes.objectOf(\n      PropTypes.arrayOf(PropTypes.string),\n    ).isRequired,\n    tabToConnect: PropTypes.object,\n    requestAccountsPermission: PropTypes.func.isRequired,\n  };\n\n  state = {\n    sitePendingDisconnect: null,\n  };\n\n  componentDidMount() {\n    const { getOpenMetamaskTabsIds } = this.props;\n    getOpenMetamaskTabsIds();\n  }\n\n  setPendingDisconnect = (subjectKey) => {\n    this.setState({\n      sitePendingDisconnect: {\n        subjectKey,\n      },\n    });\n  };\n\n  clearPendingDisconnect = () => {\n    this.setState({\n      sitePendingDisconnect: null,\n    });\n  };\n\n  disconnectAccount = () => {\n    const { disconnectAccount } = this.props;\n    const { sitePendingDisconnect } = this.state;\n\n    disconnectAccount(sitePendingDisconnect.subjectKey);\n    this.clearPendingDisconnect();\n  };\n\n  disconnectAllAccounts = () => {\n    const { disconnectAllAccounts } = this.props;\n    const { sitePendingDisconnect } = this.state;\n\n    disconnectAllAccounts(sitePendingDisconnect.subjectKey);\n    this.clearPendingDisconnect();\n  };\n\n  renderConnectedSitesList() {\n    return (\n      <ConnectedSitesList\n        connectedSubjects={this.props.connectedSubjects}\n        onDisconnect={this.setPendingDisconnect}\n      />\n    );\n  }\n\n  renderConnectedSitesPopover() {\n    const {\n      accountLabel,\n      closePopover,\n      connectedSubjects,\n      tabToConnect,\n      requestAccountsPermission,\n    } = this.props;\n    const { t } = this.context;\n\n    return (\n      <Popover\n        className=\"connected-sites\"\n        title={t('connectedSites')}\n        subtitle={\n          connectedSubjects.length\n            ? t('connectedSitesDescription', [accountLabel])\n            : t('connectedSitesEmptyDescription', [accountLabel])\n        }\n        onClose={closePopover}\n        footer={\n          tabToConnect ? (\n            <a\n              className=\"connected-sites__text-button\"\n              onClick={requestAccountsPermission}\n            >\n              {t('connectManually')}\n            </a>\n          ) : null\n        }\n        footerClassName=\"connected-sites__add-site-manually\"\n      >\n        {this.renderConnectedSitesList()}\n      </Popover>\n    );\n  }\n\n  renderDisconnectPopover() {\n    const { closePopover, permittedAccountsByOrigin } = this.props;\n    const { t } = this.context;\n    const {\n      sitePendingDisconnect: { subjectKey },\n    } = this.state;\n\n    const numPermittedAccounts = permittedAccountsByOrigin[subjectKey].length;\n\n    return (\n      <Popover\n        className=\"connected-sites\"\n        title={t('disconnectPrompt', [subjectKey])}\n        subtitle={t('disconnectAllAccountsConfirmationDescription')}\n        onClose={closePopover}\n        footer={\n          <>\n            <div className=\"connected-sites__footer-row\">\n              <Button type=\"secondary\" onClick={this.clearPendingDisconnect}>\n                {t('cancel')}\n              </Button>\n              <Button type=\"primary\" onClick={this.disconnectAccount}>\n                {t('disconnect')}\n              </Button>\n            </div>\n            {numPermittedAccounts > 1 ? (\n              <div className=\"connected-sites__footer-row\">\n                <a\n                  className=\"connected-sites__text-button\"\n                  onClick={this.disconnectAllAccounts}\n                >\n                  {t('disconnectAllAccounts')}\n                </a>\n              </div>\n            ) : null}\n          </>\n        }\n        footerClassName=\"connected-sites__confirmation\"\n      />\n    );\n  }\n\n  render() {\n    const { sitePendingDisconnect } = this.state;\n    return sitePendingDisconnect\n      ? this.renderDisconnectPopover()\n      : this.renderConnectedSitesPopover();\n  }\n}\n","import { connect } from 'react-redux';\nimport {\n  getOpenMetamaskTabsIds,\n  requestAccountsPermissionWithId,\n  removePermissionsFor,\n  removePermittedAccount,\n} from '../../store/actions';\nimport {\n  getConnectedSubjectsForSelectedAddress,\n  getOriginOfCurrentTab,\n  getPermissionSubjects,\n  getPermittedAccountsByOrigin,\n  getSelectedInternalAccount,\n} from '../../selectors';\nimport { CONNECT_ROUTE } from '../../helpers/constants/routes';\nimport { getMostRecentOverviewPage } from '../../ducks/history/history';\nimport ConnectedSites from './connected-sites.component';\n\nconst mapStateToProps = (state) => {\n  const { openMetaMaskTabs } = state.appState;\n  const { id } = state.activeTab;\n  const connectedSubjects = getConnectedSubjectsForSelectedAddress(state);\n  const originOfCurrentTab = getOriginOfCurrentTab(state);\n  const permittedAccountsByOrigin = getPermittedAccountsByOrigin(state);\n  const { address: selectedAddress } = getSelectedInternalAccount(state);\n\n  const currentTabHasNoAccounts =\n    !permittedAccountsByOrigin[originOfCurrentTab]?.length;\n\n  let tabToConnect;\n  if (originOfCurrentTab && currentTabHasNoAccounts && !openMetaMaskTabs[id]) {\n    tabToConnect = {\n      origin: originOfCurrentTab,\n    };\n  }\n\n  return {\n    accountLabel: getSelectedInternalAccount(state).metadata.name,\n    connectedSubjects,\n    subjects: getPermissionSubjects(state),\n    mostRecentOverviewPage: getMostRecentOverviewPage(state),\n    permittedAccountsByOrigin,\n    selectedAddress,\n    tabToConnect,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getOpenMetamaskTabsIds: () => dispatch(getOpenMetamaskTabsIds()),\n    disconnectAccount: (subjectKey, address) => {\n      dispatch(removePermittedAccount(subjectKey, address));\n    },\n    disconnectAllAccounts: (subjectKey, subject) => {\n      const permissionMethodNames = Object.values(subject.permissions).map(\n        ({ parentCapability }) => parentCapability,\n      );\n      dispatch(\n        removePermissionsFor({\n          [subjectKey]: permissionMethodNames,\n        }),\n      );\n    },\n    requestAccountsPermissionWithId: (origin) =>\n      dispatch(requestAccountsPermissionWithId(origin)),\n  };\n};\n\nconst mergeProps = (stateProps, dispatchProps, ownProps) => {\n  const {\n    connectedSubjects,\n    subjects,\n    mostRecentOverviewPage,\n    selectedAddress,\n    tabToConnect,\n  } = stateProps;\n  const {\n    disconnectAccount,\n    disconnectAllAccounts,\n    // eslint-disable-next-line no-shadow\n    requestAccountsPermissionWithId,\n  } = dispatchProps;\n  const { history } = ownProps;\n\n  const closePopover = () => history.push(mostRecentOverviewPage);\n\n  return {\n    ...ownProps,\n    ...stateProps,\n    ...dispatchProps,\n    closePopover,\n    disconnectAccount: (subjectKey) => {\n      disconnectAccount(subjectKey, selectedAddress);\n      if (connectedSubjects.length === 1) {\n        closePopover();\n      }\n    },\n    disconnectAllAccounts: (subjectKey) => {\n      disconnectAllAccounts(subjectKey, subjects[subjectKey]);\n      if (connectedSubjects.length === 1) {\n        closePopover();\n      }\n    },\n    requestAccountsPermission: async () => {\n      const id = await requestAccountsPermissionWithId(tabToConnect.origin);\n      history.push(`${CONNECT_ROUTE}/${id}`);\n    },\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n)(ConnectedSites);\n","export { default } from './connected-sites.container';\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { getAccountLink } from '@metamask/etherscan-link';\n\nimport Button from '../../../components/ui/button';\nimport Checkbox from '../../../components/ui/check-box';\nimport Dropdown from '../../../components/ui/dropdown';\n\nimport { getURLHostName } from '../../../helpers/utils/util';\n\nimport { HardwareDeviceNames } from '../../../../shared/constants/hardware-wallets';\nimport { MetaMetricsEventCategory } from '../../../../shared/constants/metametrics';\n\nclass AccountList extends Component {\n  state = {\n    pathValue: null,\n  };\n\n  goToNextPage = () => {\n    // If we have < 5 accounts, it's restricted by BIP-44\n    if (this.props.accounts.length === 5) {\n      this.props.getPage(this.props.device, 1, this.props.selectedPath);\n    } else {\n      this.props.onAccountRestriction();\n    }\n  };\n\n  goToPreviousPage = () => {\n    this.props.getPage(this.props.device, -1, this.props.selectedPath);\n  };\n\n  setPath(pathValue) {\n    this.setState({ pathValue });\n  }\n\n  isFirstPage() {\n    return this.props.accounts[0]?.index === 0;\n  }\n\n  renderHdPathSelector() {\n    const { device, selectedPath, hdPaths, onPathChange } = this.props;\n    const { pathValue } = this.state;\n\n    return (\n      <div>\n        <h3 className=\"hw-connect__hdPath__title\">\n          {this.context.t('selectHdPath')}\n        </h3>\n        <p className=\"hw-connect__msg\">{this.context.t('selectPathHelp')}</p>\n        <div className=\"hw-connect__hdPath\">\n          <Dropdown\n            className=\"hw-connect__hdPath__select\"\n            options={hdPaths[device.toLowerCase()]}\n            selectedOption={pathValue || selectedPath}\n            onChange={(value) => {\n              this.setPath(value);\n              onPathChange(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  capitalizeDevice(device) {\n    return device.slice(0, 1).toUpperCase() + device.slice(1);\n  }\n\n  renderHeader() {\n    const { device } = this.props;\n    const shouldShowHDPaths = [\n      HardwareDeviceNames.ledger,\n      HardwareDeviceNames.lattice,\n      HardwareDeviceNames.trezor,\n    ].includes(device.toLowerCase());\n    return (\n      <div className=\"hw-connect\">\n        <h3 className=\"hw-connect__unlock-title\">\n          {this.context.t('selectAnAccount')}\n        </h3>\n        {shouldShowHDPaths ? this.renderHdPathSelector() : null}\n        <h3 className=\"hw-connect__hdPath__title\">\n          {this.context.t('selectAnAccount')}\n        </h3>\n      </div>\n    );\n  }\n\n  renderAccounts() {\n    const { accounts, connectedAccounts, rpcPrefs, chainId } = this.props;\n\n    return (\n      <div className=\"hw-account-list\">\n        {accounts.map((account, idx) => {\n          const accountAlreadyConnected = connectedAccounts.includes(\n            account.address.toLowerCase(),\n          );\n          const value = account.index;\n          const checked =\n            this.props.selectedAccounts.includes(account.index) ||\n            accountAlreadyConnected;\n          const accountLink = getAccountLink(\n            account.address,\n            chainId,\n            rpcPrefs,\n          );\n          const blockExplorerDomain = getURLHostName(accountLink);\n\n          return (\n            <div\n              className=\"hw-account-list__item\"\n              key={account.address}\n              data-testid=\"hw-account-list__item\"\n              title={\n                accountAlreadyConnected\n                  ? this.context.t('selectAnAccountAlreadyConnected')\n                  : ''\n              }\n            >\n              <div className=\"hw-account-list__item__checkbox\">\n                <Checkbox\n                  id={`address-${idx}`}\n                  checked={checked}\n                  disabled={accountAlreadyConnected}\n                  onClick={() => {\n                    this.props.onAccountChange(value);\n                  }}\n                />\n                <label\n                  className=\"hw-account-list__item__label\"\n                  htmlFor={`address-${idx}`}\n                >\n                  <span className=\"hw-account-list__item__index\">\n                    {account.index + 1}\n                  </span>\n                  {`${account.address.slice(0, 4)}...${account.address.slice(\n                    -4,\n                  )}`}\n                  <span className=\"hw-account-list__item__balance\">{`${account.balance}`}</span>\n                </label>\n              </div>\n              <a\n                className=\"hw-account-list__item__link\"\n                onClick={() => {\n                  this.context.trackEvent({\n                    category: MetaMetricsEventCategory.Accounts,\n                    event: 'Clicked Block Explorer Link',\n                    properties: {\n                      actions: 'Hardware Connect',\n                      link_type: 'Account Tracker',\n                      block_explorer_domain: blockExplorerDomain,\n                    },\n                  });\n                  global.platform.openTab({\n                    url: accountLink,\n                  });\n                }}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                title={this.context.t('genericExplorerView', [\n                  blockExplorerDomain,\n                ])}\n              >\n                <i\n                  className=\"fa fa-share-square\"\n                  style={{ color: 'var(--color-icon-default)' }}\n                />\n              </a>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  renderPagination() {\n    return (\n      <div className=\"hw-list-pagination\">\n        <button\n          className=\"hw-list-pagination__button\"\n          disabled={this.isFirstPage()}\n          onClick={this.goToPreviousPage}\n          data-testid=\"hw-list-pagination__prev-button\"\n        >\n          {`< ${this.context.t('prev')}`}\n        </button>\n        <button\n          className=\"hw-list-pagination__button\"\n          onClick={this.goToNextPage}\n        >\n          {`${this.context.t('next')} >`}\n        </button>\n      </div>\n    );\n  }\n\n  renderButtons() {\n    const disabled = this.props.selectedAccounts.length === 0;\n    const buttonProps = {};\n    if (disabled) {\n      buttonProps.disabled = true;\n    }\n\n    return (\n      <div className=\"new-external-account-form__buttons\">\n        <Button\n          type=\"secondary\"\n          large\n          className=\"new-external-account-form__button\"\n          onClick={this.props.onCancel.bind(this)}\n        >\n          {this.context.t('cancel')}\n        </Button>\n        <Button\n          type=\"primary\"\n          large\n          className=\"new-external-account-form__button unlock\"\n          disabled={disabled}\n          onClick={this.props.onUnlockAccounts.bind(\n            this,\n            this.props.device,\n            this.props.selectedPath,\n          )}\n        >\n          {this.context.t('unlock')}\n        </Button>\n      </div>\n    );\n  }\n\n  renderForgetDevice() {\n    return (\n      <div className=\"hw-forget-device-container\">\n        <a onClick={this.props.onForgetDevice.bind(this, this.props.device)}>\n          {this.context.t('forgetDevice')}\n        </a>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"new-external-account-form account-list\">\n        {this.renderHeader()}\n        {this.renderAccounts()}\n        {this.renderPagination()}\n        {this.renderButtons()}\n        {this.renderForgetDevice()}\n      </div>\n    );\n  }\n}\n\nAccountList.propTypes = {\n  onPathChange: PropTypes.func.isRequired,\n  selectedPath: PropTypes.string.isRequired,\n  device: PropTypes.string.isRequired,\n  accounts: PropTypes.array.isRequired,\n  connectedAccounts: PropTypes.array.isRequired,\n  onAccountChange: PropTypes.func.isRequired,\n  onForgetDevice: PropTypes.func.isRequired,\n  getPage: PropTypes.func.isRequired,\n  chainId: PropTypes.string,\n  rpcPrefs: PropTypes.object,\n  selectedAccounts: PropTypes.array.isRequired,\n  onUnlockAccounts: PropTypes.func,\n  onCancel: PropTypes.func,\n  onAccountRestriction: PropTypes.func,\n  hdPaths: PropTypes.object.isRequired,\n};\n\nAccountList.contextTypes = {\n  t: PropTypes.func,\n  trackEvent: PropTypes.func,\n};\n\nexport default AccountList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../store/actions';\nimport {\n  getCurrentChainId,\n  getMetaMaskAccounts,\n  getRpcPrefsForCurrentProvider,\n  getMetaMaskAccountsConnected,\n} from '../../../selectors';\nimport { formatBalance } from '../../../helpers/utils/util';\nimport { getMostRecentOverviewPage } from '../../../ducks/history/history';\nimport {\n  MetaMetricsEventAccountType,\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { SECOND } from '../../../../shared/constants/time';\nimport {\n  HardwareDeviceNames,\n  LedgerTransportTypes,\n} from '../../../../shared/constants/hardware-wallets';\nimport {\n  BUTTON_VARIANT,\n  BUTTON_SIZES,\n  Button,\n  Text,\n} from '../../../components/component-library';\nimport ZENDESK_URLS from '../../../helpers/constants/zendesk-url';\nimport { TextColor } from '../../../helpers/constants/design-system';\nimport SelectHardware from './select-hardware';\nimport AccountList from './account-list';\n\nconst U2F_ERROR = 'U2F';\nconst LEDGER_ERRORS_CODES = {\n  '0x650f': 'ledgerErrorConnectionIssue',\n  '0x5515': 'ledgerErrorDevicedLocked',\n  '0x6501': 'ledgerErrorEthAppNotOpen',\n  '0x6a80': 'ledgerErrorTransactionDataNotPadded',\n};\n\nconst LEDGER_LIVE_PATH = `m/44'/60'/0'/0/0`;\nconst MEW_PATH = `m/44'/60'/0'`;\nconst BIP44_PATH = `m/44'/60'/0'/0`;\nexport const LEDGER_HD_PATHS = [\n  { name: 'Ledger Live', value: LEDGER_LIVE_PATH },\n  { name: 'Legacy (MEW / MyCrypto)', value: MEW_PATH },\n  { name: `BIP44 Standard (e.g. MetaMask, Trezor)`, value: BIP44_PATH },\n];\n\nconst LATTICE_STANDARD_BIP44_PATH = `m/44'/60'/0'/0/x`;\nconst LATTICE_LEDGER_LIVE_PATH = `m/44'/60'/x'/0/0`;\nconst LATTICE_MEW_PATH = `m/44'/60'/0'/x`;\nexport const LATTICE_HD_PATHS = [\n  {\n    name: `Standard (${LATTICE_STANDARD_BIP44_PATH})`,\n    value: LATTICE_STANDARD_BIP44_PATH,\n  },\n  {\n    name: `Ledger Live (${LATTICE_LEDGER_LIVE_PATH})`,\n    value: LATTICE_LEDGER_LIVE_PATH,\n  },\n  { name: `Ledger Legacy (${LATTICE_MEW_PATH})`, value: LATTICE_MEW_PATH },\n];\n\nconst TREZOR_TESTNET_PATH = `m/44'/1'/0'/0`;\nexport const TREZOR_HD_PATHS = [\n  { name: `BIP44 Standard (e.g. MetaMask, Trezor)`, value: BIP44_PATH },\n  { name: `Legacy (Ledger / MEW / MyCrypto)`, value: MEW_PATH },\n  { name: `Trezor Testnets`, value: TREZOR_TESTNET_PATH },\n];\n\nconst HD_PATHS = {\n  ledger: LEDGER_HD_PATHS,\n  lattice: LATTICE_HD_PATHS,\n  trezor: TREZOR_HD_PATHS,\n};\n\nconst getErrorMessage = (errorCode, t) => {\n  switch (errorCode) {\n    case '0x650f':\n      return t('ledgerErrorConnectionIssue');\n    case '0x5515':\n      return t('ledgerErrorDevicedLocked');\n    case '0x6501':\n      return t('ledgerErrorEthAppNotOpen');\n    case '0x6a80':\n      return t('ledgerErrorTransactionDataNotPadded');\n    default:\n      return errorCode;\n  }\n};\n\nclass ConnectHardwareForm extends Component {\n  static contextTypes = {\n    t: PropTypes.func,\n  };\n\n  state = {\n    error: null,\n    selectedAccounts: [],\n    accounts: [],\n    browserSupported: true,\n    unlocked: false,\n    device: null,\n    isFirefox: false,\n  };\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { accounts } = nextProps;\n    const newAccounts = this.state.accounts.map((a) => {\n      const normalizedAddress = a.address.toLowerCase();\n      const balanceValue = accounts[normalizedAddress]?.balance || null;\n      a.balance = balanceValue ? formatBalance(balanceValue, 6) : '...';\n      return a;\n    });\n    this.setState({ accounts: newAccounts });\n  }\n\n  componentDidMount() {\n    this.checkIfUnlocked();\n    const useAgent = window.navigator.userAgent;\n    if (/Firefox/u.test(useAgent)) {\n      this.setState({ isFirefox: true });\n    }\n  }\n\n  async checkIfUnlocked() {\n    for (const device of [\n      HardwareDeviceNames.trezor,\n      HardwareDeviceNames.ledger,\n      HardwareDeviceNames.lattice,\n    ]) {\n      const path = this.props.defaultHdPaths[device];\n      const unlocked = await this.props.checkHardwareStatus(device, path);\n      if (unlocked && this.state.device) {\n        this.setState({ unlocked: true });\n        this.getPage(device, 0, path);\n      }\n    }\n  }\n\n  connectToHardwareWallet = (device) => {\n    this.setState({ device });\n    if (this.state.accounts.length) {\n      return;\n    }\n\n    // Default values\n    this.getPage(device, 0, this.props.defaultHdPaths[device]);\n  };\n\n  onPathChange = (path) => {\n    this.props.setHardwareWalletDefaultHdPath({\n      device: this.state.device,\n      path,\n    });\n    this.setState({\n      selectedAccounts: [],\n    });\n    this.getPage(this.state.device, 0, path);\n  };\n\n  onAccountChange = (account) => {\n    let { selectedAccounts } = this.state;\n    if (selectedAccounts.includes(account)) {\n      selectedAccounts = selectedAccounts.filter((acc) => account !== acc);\n    } else {\n      selectedAccounts.push(account);\n    }\n    this.setState({ selectedAccounts, error: null });\n  };\n\n  onAccountRestriction = () => {\n    this.setState({ error: this.context.t('ledgerAccountRestriction') });\n  };\n\n  showTemporaryAlert() {\n    this.props.showAlert(this.context.t('hardwareWalletConnected'));\n    // Autohide the alert after 5 seconds\n    setTimeout((_) => {\n      this.props.hideAlert();\n    }, SECOND * 5);\n  }\n\n  getPage = (device, page, hdPath) => {\n    this.props\n      .connectHardware(device, page, hdPath, this.context.t)\n      .then((accounts) => {\n        if (accounts.length) {\n          // If we just loaded the accounts for the first time\n          // (device previously locked) show the global alert\n          if (this.state.accounts.length === 0 && !this.state.unlocked) {\n            this.showTemporaryAlert();\n          }\n\n          // Map accounts with balances\n          const newAccounts = accounts.map((account) => {\n            const normalizedAddress = account.address.toLowerCase();\n            const balanceValue =\n              this.props.accounts[normalizedAddress]?.balance || null;\n            account.balance = balanceValue\n              ? formatBalance(balanceValue, 6)\n              : '...';\n            return account;\n          });\n\n          this.setState({\n            accounts: newAccounts,\n            unlocked: true,\n            device,\n            error: null,\n          });\n        }\n      })\n      .catch((e) => {\n        const errorMessage = typeof e === 'string' ? e : e.message;\n        const ledgerErrorCode = Object.keys(LEDGER_ERRORS_CODES).find(\n          (errorCode) => errorMessage.includes(errorCode),\n        );\n        if (errorMessage === 'Window blocked') {\n          this.setState({ browserSupported: false, error: null });\n        } else if (errorMessage.includes(U2F_ERROR)) {\n          this.setState({ error: U2F_ERROR });\n        } else if (\n          errorMessage === 'LEDGER_LOCKED' ||\n          errorMessage === 'LEDGER_WRONG_APP'\n        ) {\n          this.setState({\n            error: this.context.t('ledgerLocked'),\n          });\n        } else if (errorMessage.includes('timeout')) {\n          this.setState({\n            error: this.context.t('ledgerTimeout'),\n          });\n        } else if (ledgerErrorCode) {\n          this.setState({\n            error: `${errorMessage} - ${getErrorMessage(ledgerErrorCode)}`,\n          });\n        } else if (\n          errorMessage\n            .toLowerCase()\n            .includes(\n              'KeystoneError#pubkey_account.no_expected_account'.toLowerCase(),\n            )\n        ) {\n          this.setState({\n            error: this.context.t('QRHardwarePubkeyAccountOutOfRange'),\n          });\n        } else if (\n          errorMessage !== 'Window closed' &&\n          errorMessage !== 'Popup closed' &&\n          errorMessage\n            .toLowerCase()\n            .includes('KeystoneError#sync_cancel'.toLowerCase()) === false\n        ) {\n          this.setState({\n            error: errorMessage,\n          });\n        }\n      });\n  };\n\n  onForgetDevice = (device) => {\n    this.props\n      .forgetDevice(device)\n      .then((_) => {\n        this.setState({\n          error: null,\n          selectedAccounts: [],\n          accounts: [],\n          unlocked: false,\n        });\n      })\n      .catch((e) => {\n        this.setState({ error: e.message });\n      });\n  };\n\n  onUnlockAccounts = (device, path) => {\n    const { history, mostRecentOverviewPage, unlockHardwareWalletAccounts } =\n      this.props;\n    const { selectedAccounts } = this.state;\n\n    if (selectedAccounts.length === 0) {\n      this.setState({ error: this.context.t('accountSelectionRequired') });\n    }\n\n    const description =\n      MEW_PATH === path\n        ? this.context.t('hardwareWalletLegacyDescription')\n        : '';\n    return unlockHardwareWalletAccounts(\n      selectedAccounts,\n      device,\n      path || null,\n      description,\n    )\n      .then((_) => {\n        this.context.trackEvent({\n          category: MetaMetricsEventCategory.Accounts,\n          event: MetaMetricsEventName.AccountAdded,\n          properties: {\n            account_type: MetaMetricsEventAccountType.Hardware,\n            account_hardware_type: device,\n          },\n        });\n        history.push(mostRecentOverviewPage);\n      })\n      .catch((e) => {\n        this.context.trackEvent({\n          category: MetaMetricsEventCategory.Accounts,\n          event: MetaMetricsEventName.AccountAddFailed,\n          properties: {\n            account_type: MetaMetricsEventAccountType.Hardware,\n            account_hardware_type: device,\n            error: e.message,\n          },\n        });\n        this.setState({ error: e.message });\n      });\n  };\n\n  onCancel = () => {\n    const { history, mostRecentOverviewPage } = this.props;\n    history.push(mostRecentOverviewPage);\n  };\n\n  renderError() {\n    if (this.state.error === U2F_ERROR) {\n      if (this.state.device === 'ledger' && this.state.isFirefox) {\n        return (\n          <>\n            <Text color={TextColor.warningDefault} margin={[5, 5, 2]}>\n              {this.context.t('troubleConnectingToLedgerU2FOnFirefox', [\n                // eslint-disable-next-line react/jsx-key\n                <Button\n                  variant={BUTTON_VARIANT.LINK}\n                  href={ZENDESK_URLS.HARDWARE_CONNECTION}\n                  size={BUTTON_SIZES.INHERIT}\n                  key=\"u2f-error-1\"\n                  as=\"a\"\n                  block={false}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {this.context.t('troubleConnectingToLedgerU2FOnFirefox2')}\n                </Button>,\n              ])}\n            </Text>\n            <Text color={TextColor.warningDefault} margin={[5, 5, 2]}>\n              {this.context.t(\n                'troubleConnectingToLedgerU2FOnFirefoxLedgerSolution',\n                [\n                  // eslint-disable-next-line react/jsx-key\n                  <Button\n                    variant={BUTTON_VARIANT.LINK}\n                    href={ZENDESK_URLS.LEDGER_FIREFOX_U2F_GUIDE}\n                    size={BUTTON_SIZES.INHERIT}\n                    key=\"u2f-error-1\"\n                    as=\"a\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    {this.context.t(\n                      'troubleConnectingToLedgerU2FOnFirefoxLedgerSolution2',\n                    )}\n                  </Button>,\n                ],\n              )}\n            </Text>\n          </>\n        );\n      }\n      return (\n        <Text color={TextColor.warningDefault} margin={[5, 5, 2]}>\n          {this.context.t('troubleConnectingToWallet', [\n            this.state.device,\n            // eslint-disable-next-line react/jsx-key\n            <Button\n              variant={BUTTON_VARIANT.LINK}\n              href={ZENDESK_URLS.HARDWARE_CONNECTION}\n              key=\"u2f-error-1\"\n            >\n              {this.context.t('walletConnectionGuide')}\n            </Button>,\n          ])}\n        </Text>\n      );\n    }\n    return this.state.error ? (\n      <span className=\"hw-connect__error\">{this.state.error}</span>\n    ) : null;\n  }\n\n  renderContent() {\n    if (!this.state.accounts.length) {\n      return (\n        <SelectHardware\n          connectToHardwareWallet={this.connectToHardwareWallet}\n          browserSupported={this.state.browserSupported}\n          ledgerTransportType={this.props.ledgerTransportType}\n          onCancel={this.onCancel}\n        />\n      );\n    }\n\n    return (\n      <AccountList\n        onPathChange={this.onPathChange}\n        selectedPath={this.props.defaultHdPaths[this.state.device]}\n        device={this.state.device}\n        accounts={this.state.accounts}\n        connectedAccounts={this.props.connectedAccounts}\n        selectedAccounts={this.state.selectedAccounts}\n        onAccountChange={this.onAccountChange}\n        chainId={this.props.chainId}\n        rpcPrefs={this.props.rpcPrefs}\n        getPage={this.getPage}\n        onUnlockAccounts={this.onUnlockAccounts}\n        onForgetDevice={this.onForgetDevice}\n        onCancel={this.onCancel}\n        onAccountRestriction={this.onAccountRestriction}\n        hdPaths={HD_PATHS}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {this.renderError()}\n        {this.renderContent()}\n      </>\n    );\n  }\n}\n\nConnectHardwareForm.propTypes = {\n  connectHardware: PropTypes.func,\n  checkHardwareStatus: PropTypes.func,\n  forgetDevice: PropTypes.func,\n  showAlert: PropTypes.func,\n  hideAlert: PropTypes.func,\n  unlockHardwareWalletAccounts: PropTypes.func,\n  setHardwareWalletDefaultHdPath: PropTypes.func,\n  history: PropTypes.object,\n  chainId: PropTypes.string,\n  rpcPrefs: PropTypes.object,\n  accounts: PropTypes.object,\n  connectedAccounts: PropTypes.array.isRequired,\n  defaultHdPaths: PropTypes.object,\n  mostRecentOverviewPage: PropTypes.string.isRequired,\n  ledgerTransportType: PropTypes.oneOf(Object.values(LedgerTransportTypes)),\n};\n\nconst mapStateToProps = (state) => ({\n  chainId: getCurrentChainId(state),\n  rpcPrefs: getRpcPrefsForCurrentProvider(state),\n  accounts: getMetaMaskAccounts(state),\n  connectedAccounts: getMetaMaskAccountsConnected(state),\n  defaultHdPaths: state.appState.defaultHdPaths,\n  mostRecentOverviewPage: getMostRecentOverviewPage(state),\n  ledgerTransportType: state.metamask.ledgerTransportType,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setHardwareWalletDefaultHdPath: ({ device, path }) => {\n      return dispatch(actions.setHardwareWalletDefaultHdPath({ device, path }));\n    },\n    connectHardware: (deviceName, page, hdPath, t) => {\n      return dispatch(actions.connectHardware(deviceName, page, hdPath, t));\n    },\n    checkHardwareStatus: (deviceName, hdPath) => {\n      return dispatch(actions.checkHardwareStatus(deviceName, hdPath));\n    },\n    forgetDevice: (deviceName) => {\n      return dispatch(actions.forgetDevice(deviceName));\n    },\n    unlockHardwareWalletAccounts: (\n      indexes,\n      deviceName,\n      hdPath,\n      hdPathDescription,\n    ) => {\n      return dispatch(\n        actions.unlockHardwareWalletAccounts(\n          indexes,\n          deviceName,\n          hdPath,\n          hdPathDescription,\n        ),\n      );\n    },\n    showAlert: (msg) => dispatch(actions.showAlert(msg)),\n    hideAlert: () => dispatch(actions.hideAlert()),\n  };\n};\n\nConnectHardwareForm.contextTypes = {\n  t: PropTypes.func,\n  trackEvent: PropTypes.func,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ConnectHardwareForm);\n","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n  Text,\n  Box,\n  IconName,\n  ButtonIconSize,\n  ButtonIcon,\n  Button,\n  BUTTON_SIZES,\n  BUTTON_VARIANT,\n} from '../../../components/component-library';\nimport LogoLedger from '../../../components/ui/logo/logo-ledger';\nimport LogoQRBased from '../../../components/ui/logo/logo-qr-based';\nimport LogoTrezor from '../../../components/ui/logo/logo-trezor';\nimport LogoLattice from '../../../components/ui/logo/logo-lattice';\n\nimport {\n  HardwareDeviceNames,\n  LedgerTransportTypes,\n  HardwareAffiliateLinks,\n  HardwareAffiliateTutorialLinks,\n} from '../../../../shared/constants/hardware-wallets';\nimport ZENDESK_URLS from '../../../helpers/constants/zendesk-url';\nimport { MetaMetricsEventCategory } from '../../../../shared/constants/metametrics';\nimport { openWindow } from '../../../helpers/utils/window';\nimport {\n  AlignItems,\n  Display,\n  FlexDirection,\n  FontWeight,\n  JustifyContent,\n  TextAlign,\n  TextColor,\n  TextVariant,\n} from '../../../helpers/constants/design-system';\n\n// Not all browsers have usb support. In particular, Firefox does\n// not support usb. More information on that can be found here:\n// https://mozilla.github.io/standards-positions/#webusb\n//\n// The below `&& window.navigator.usb` condition ensures that we\n// only attempt to connect Trezor via usb if we are in a browser\n// that supports usb. If not, the connection of the hardware wallet\n// to the browser will be handled by the Trezor connect screen. In\n// the case of Firefox, this will depend on the Trezor bridge software\nconst isUSBSupported = !process.env.IN_TEST && window.navigator.usb;\n\nexport default class SelectHardware extends Component {\n  static contextTypes = {\n    t: PropTypes.func,\n    trackEvent: PropTypes.func,\n  };\n\n  static propTypes = {\n    onCancel: PropTypes.func.isRequired,\n    connectToHardwareWallet: PropTypes.func.isRequired,\n    browserSupported: PropTypes.bool.isRequired,\n    ledgerTransportType: PropTypes.oneOf(Object.values(LedgerTransportTypes)),\n  };\n\n  state = {\n    selectedDevice: null,\n    trezorRequestDevicePending: false,\n  };\n\n  connect = async () => {\n    if (this.state.selectedDevice) {\n      if (this.state.selectedDevice === 'trezor' && isUSBSupported) {\n        this.setState({ trezorRequestDevicePending: true });\n        try {\n          await window.navigator.usb.requestDevice({\n            filters: [\n              { vendorId: 0x534c, productId: 0x0001 },\n              { vendorId: 0x1209, productId: 0x53c0 },\n              { vendorId: 0x1209, productId: 0x53c1 },\n            ],\n          });\n        } catch (e) {\n          if (!e.message.match('No device selected')) {\n            throw e;\n          }\n        } finally {\n          this.setState({ trezorRequestDevicePending: false });\n        }\n      }\n\n      this.props.connectToHardwareWallet(this.state.selectedDevice);\n    }\n    return null;\n  };\n\n  renderConnectToTrezorButton() {\n    return (\n      <button\n        data-testid=\"connect-trezor-btn\"\n        className={classnames('hw-connect__btn', {\n          selected: this.state.selectedDevice === HardwareDeviceNames.trezor,\n        })}\n        onClick={(_) =>\n          this.setState({ selectedDevice: HardwareDeviceNames.trezor })\n        }\n      >\n        <LogoTrezor className=\"hw-connect__btn__img\" ariaLabel=\"Trezor\" />\n      </button>\n    );\n  }\n\n  renderConnectToLatticeButton() {\n    return (\n      <button\n        data-testid=\"connect-lattice-btn\"\n        className={classnames('hw-connect__btn', {\n          selected: this.state.selectedDevice === HardwareDeviceNames.lattice,\n        })}\n        onClick={(_) =>\n          this.setState({ selectedDevice: HardwareDeviceNames.lattice })\n        }\n      >\n        <LogoLattice className=\"hw-connect__btn__img\" ariaLabel=\"Lattice\" />\n      </button>\n    );\n  }\n\n  renderConnectToLedgerButton() {\n    return (\n      <button\n        data-testid=\"connect-ledger-btn\"\n        className={classnames('hw-connect__btn', {\n          selected: this.state.selectedDevice === HardwareDeviceNames.ledger,\n        })}\n        onClick={(_) =>\n          this.setState({ selectedDevice: HardwareDeviceNames.ledger })\n        }\n      >\n        <LogoLedger className=\"hw-connect__btn__img\" ariaLabel=\"Ledger\" />\n      </button>\n    );\n  }\n\n  renderConnectToQRButton() {\n    return (\n      <button\n        data-testid=\"connect-qr-btn\"\n        className={classnames('hw-connect__btn', {\n          selected: this.state.selectedDevice === HardwareDeviceNames.qr,\n        })}\n        onClick={(_) =>\n          this.setState({ selectedDevice: HardwareDeviceNames.qr })\n        }\n      >\n        <LogoQRBased className=\"hw-connect__btn__img\" ariaLabel=\"QRCode\" />\n      </button>\n    );\n  }\n\n  renderButtons() {\n    return (\n      <>\n        <div className=\"hw-connect__btn-wrapper\">\n          {this.renderConnectToLedgerButton()}\n          {this.renderConnectToTrezorButton()}\n        </div>\n        <div\n          className=\"hw-connect__btn-wrapper\"\n          style={{ margin: '10px 0 0 0' }}\n        >\n          {this.renderConnectToLatticeButton()}\n          {this.renderConnectToQRButton()}\n        </div>\n      </>\n    );\n  }\n\n  renderContinueButton() {\n    return (\n      <Button\n        variant={BUTTON_VARIANT.PRIMARY}\n        size={BUTTON_SIZES.LG}\n        className=\"hw-connect__connect-btn\"\n        onClick={this.connect}\n        disabled={\n          !this.state.selectedDevice || this.state.trezorRequestDevicePending\n        }\n      >\n        {this.context.t('continue')}\n      </Button>\n    );\n  }\n\n  renderFooter() {\n    return (\n      <Text\n        color={TextColor.textAlternative}\n        variant={TextVariant.bodySm}\n        textAlign={TextAlign.Center}\n        as=\"h6\"\n        marginTop={4}\n        className=\"new-external-account-form footer\"\n      >\n        {this.context.t('hardwareWalletsInfo')}\n      </Text>\n    );\n  }\n\n  renderUnsupportedBrowser() {\n    return (\n      <Box\n        display={Display.Flex}\n        flexDirection={FlexDirection.Column}\n        justifyContent={JustifyContent.center}\n        alignItems={AlignItems.center}\n        className=\"new-external-account-form unsupported-browser\"\n      >\n        <Box\n          className=\"hw-connect\"\n          display={Display.Flex}\n          flexDirection={FlexDirection.Column}\n          alignItems={AlignItems.center}\n        >\n          <Text\n            className=\"hw-connect__title\"\n            variant={TextVariant.headingMd}\n            as=\"h3\"\n            fontWeight={FontWeight.Bold}\n            marginTop={6}\n            marginBottom={3}\n          >\n            {this.context.t('browserNotSupported')}\n          </Text>\n          <Text\n            className=\"hw-connect__msg\"\n            variant={TextVariant.bodyMd}\n            as=\"h5\"\n            marginTop={3}\n            marginBottom={5}\n          >\n            {this.context.t('chromeRequiredForHardwareWallets')}\n          </Text>\n        </Box>\n        <Button\n          variant={BUTTON_VARIANT.PRIMARY}\n          size={BUTTON_SIZES.LG}\n          onClick={() =>\n            global.platform.openTab({\n              url: 'https://google.com/chrome',\n            })\n          }\n        >\n          {this.context.t('downloadGoogleChrome')}\n        </Button>\n      </Box>\n    );\n  }\n\n  renderHeader() {\n    return (\n      <Box\n        className=\"hw-connect__header\"\n        display={Display.Flex}\n        flexDirection={FlexDirection.Column}\n        alignItems={AlignItems.center}\n      >\n        <Box\n          display={Display.Flex}\n          flexDirection={FlexDirection.Row}\n          justifyContent={JustifyContent.center}\n          alignItems={AlignItems.center}\n          className=\"hw-connect__header__title-wrapper\"\n          marginTop={6}\n        >\n          <Text\n            variant={TextVariant.headingMd}\n            as=\"h3\"\n            fontWeight={FontWeight.Bold}\n            marginLeft=\"auto\"\n          >\n            {this.context.t('hardwareWallets')}\n          </Text>\n          <ButtonIcon\n            iconName={IconName.Close}\n            ariaLabel={this.context.t('close')}\n            onClick={this.props.onCancel}\n            size={ButtonIconSize.Sm}\n            marginLeft=\"auto\"\n            data-testid=\"hardware-connect-close-btn\"\n          />\n        </Box>\n\n        <Text\n          className=\"hw-connect__header__msg\"\n          variant={TextVariant.bodyMd}\n          as=\"h5\"\n          marginTop={5}\n          marginBottom={3}\n        >\n          {this.context.t('hardwareWalletsMsg')}\n        </Text>\n      </Box>\n    );\n  }\n\n  renderTutorialSteps() {\n    switch (this.state.selectedDevice) {\n      case HardwareDeviceNames.ledger:\n        return this.renderLedgerTutorialSteps();\n      case HardwareDeviceNames.trezor:\n        return this.renderTrezorTutorialSteps();\n      case HardwareDeviceNames.lattice:\n        return this.renderLatticeTutorialSteps();\n      case HardwareDeviceNames.qr:\n        return this.renderQRHardwareWalletSteps();\n      default:\n        return '';\n    }\n  }\n\n  renderLedgerTutorialSteps() {\n    const steps = [];\n    if (this.props.ledgerTransportType === LedgerTransportTypes.live) {\n      steps.push({\n        renderButtons: false,\n        title: this.context.t('step1LedgerWallet'),\n        message: this.context.t('step1LedgerWalletMsg', [\n          <a\n            className=\"hw-connect__msg-link\"\n            href=\"https://www.ledger.com/ledger-live\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            key=\"ledger-live-app-link\"\n          >\n            {this.context.t('ledgerLiveApp')}\n          </a>,\n        ]),\n      });\n    }\n\n    steps.push({\n      renderButtons: true,\n      asset: 'plug-in-wallet',\n      dimensions: { width: '225px', height: '75px' },\n      title: this.context.t('step2LedgerWallet'),\n      message: this.context.t('step2LedgerWalletMsg', [\n        <a\n          className=\"hw-connect__msg-link\"\n          href={ZENDESK_URLS.HARDWARE_CONNECTION}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          key=\"ledger-support-link\"\n        >\n          {this.context.t('hardwareWalletSupportLinkConversion')}\n        </a>,\n      ]),\n    });\n\n    return (\n      <div className=\"hw-tutorial\">\n        {steps.map((step, index) => (\n          <Box\n            display={Display.Flex}\n            flexDirection={FlexDirection.Column}\n            alignItems={AlignItems.center}\n            className=\"hw-connect\"\n            key={index}\n          >\n            <h3 className=\"hw-connect__title\">{step.title}</h3>\n            {step.renderButtons ? (\n              <Box\n                display={Display.Flex}\n                flexDirection={FlexDirection.Row}\n                justifyContent={JustifyContent.center}\n                marginBottom={2}\n              >\n                <Button\n                  className=\"hw-connect__external-btn-first\"\n                  variant={BUTTON_VARIANT.SECONDARY}\n                  onClick={() => {\n                    this.context.trackEvent({\n                      category: MetaMetricsEventCategory.Navigation,\n                      event: 'Clicked Ledger Buy Now',\n                    });\n                    openWindow(HardwareAffiliateLinks.ledger);\n                  }}\n                >\n                  {this.context.t('buyNow')}\n                </Button>\n                <Button\n                  className=\"hw-connect__external-btn\"\n                  variant={BUTTON_VARIANT.SECONDARY}\n                  onClick={() => {\n                    this.context.trackEvent({\n                      category: MetaMetricsEventCategory.Navigation,\n                      event: 'Clicked Ledger Tutorial',\n                    });\n                    openWindow(HardwareAffiliateTutorialLinks.ledger);\n                  }}\n                >\n                  {this.context.t('tutorial')}\n                </Button>\n              </Box>\n            ) : null}\n            <p className=\"hw-connect__msg\">{step.message}</p>\n            {step.asset && (\n              <img\n                className=\"hw-connect__step-asset\"\n                src={`images/${step.asset}.svg`}\n                {...step.dimensions}\n                alt=\"\"\n              />\n            )}\n          </Box>\n        ))}\n      </div>\n    );\n  }\n\n  renderLatticeTutorialSteps() {\n    const steps = [\n      {\n        asset: 'connect-lattice',\n        dimensions: { width: '225px', height: '75px' },\n        title: this.context.t('step1LatticeWallet'),\n        message: this.context.t('step1LatticeWalletMsg', [\n          <a\n            className=\"hw-connect__msg-link\"\n            href={ZENDESK_URLS.HARDWARE_CONNECTION}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            key=\"lattice-setup-link\"\n          >\n            {this.context.t('hardwareWalletSupportLinkConversion')}\n          </a>,\n        ]),\n      },\n    ];\n\n    return (\n      <div className=\"hw-tutorial\">\n        {steps.map((step, index) => (\n          <Box\n            display={Display.Flex}\n            flexDirection={FlexDirection.Column}\n            alignItems={AlignItems.center}\n            className=\"hw-connect\"\n            key={index}\n          >\n            <h3 className=\"hw-connect__title\">{step.title}</h3>\n            <Box\n              display={Display.Flex}\n              flexDirection={FlexDirection.Row}\n              justifyContent={JustifyContent.center}\n              marginBottom={2}\n            >\n              <Button\n                className=\"hw-connect__external-btn-first\"\n                variant={BUTTON_VARIANT.SECONDARY}\n                onClick={() => {\n                  this.context.trackEvent({\n                    category: MetaMetricsEventCategory.Navigation,\n                    event: 'Clicked GridPlus Buy Now',\n                  });\n                  openWindow(HardwareAffiliateLinks.gridplus);\n                }}\n              >\n                {this.context.t('buyNow')}\n              </Button>\n              <Button\n                className=\"hw-connect__external-btn\"\n                variant={BUTTON_VARIANT.SECONDARY}\n                onClick={() => {\n                  this.context.trackEvent({\n                    category: MetaMetricsEventCategory.Navigation,\n                    event: 'Clicked GidPlus Tutorial',\n                  });\n                  openWindow(HardwareAffiliateTutorialLinks.gridplus);\n                }}\n              >\n                {this.context.t('tutorial')}\n              </Button>\n            </Box>\n            <p className=\"hw-connect__msg\">{step.message}</p>\n            {step.asset && (\n              <img\n                className=\"hw-connect__step-asset\"\n                src={`images/${step.asset}.svg`}\n                {...step.dimensions}\n                alt=\"\"\n              />\n            )}\n          </Box>\n        ))}\n      </div>\n    );\n  }\n\n  renderTrezorTutorialSteps() {\n    const steps = [\n      {\n        asset: 'plug-in-wallet',\n        dimensions: { width: '225px', height: '75px' },\n        title: this.context.t('step1TrezorWallet'),\n        message: this.context.t('step1TrezorWalletMsg', [\n          <a\n            className=\"hw-connect__msg-link\"\n            href={ZENDESK_URLS.HARDWARE_CONNECTION}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            key=\"trezor-support-link\"\n          >\n            {this.context.t('hardwareWalletSupportLinkConversion')}\n          </a>,\n        ]),\n      },\n    ];\n\n    return (\n      <div className=\"hw-tutorial\">\n        {steps.map((step, index) => (\n          <Box\n            display={Display.Flex}\n            flexDirection={FlexDirection.Column}\n            alignItems={AlignItems.center}\n            className=\"hw-connect\"\n            key={index}\n          >\n            <h3 className=\"hw-connect__title\">{step.title}</h3>\n            <Box\n              display={Display.Flex}\n              flexDirection={FlexDirection.Row}\n              justifyContent={JustifyContent.center}\n              marginBottom={2}\n            >\n              <Button\n                className=\"hw-connect__external-btn-first\"\n                variant={BUTTON_VARIANT.SECONDARY}\n                onClick={() => {\n                  this.context.trackEvent({\n                    category: MetaMetricsEventCategory.Navigation,\n                    event: 'Clicked Trezor Buy Now',\n                  });\n                  openWindow(HardwareAffiliateLinks.trezor);\n                }}\n              >\n                {this.context.t('buyNow')}\n              </Button>\n              <Button\n                className=\"hw-connect__external-btn\"\n                variant={BUTTON_VARIANT.SECONDARY}\n                onClick={() => {\n                  this.context.trackEvent({\n                    category: MetaMetricsEventCategory.Navigation,\n                    event: 'Clicked Trezor Tutorial',\n                  });\n                  openWindow(HardwareAffiliateTutorialLinks.trezor);\n                }}\n              >\n                {this.context.t('tutorial')}\n              </Button>\n            </Box>\n\n            <p className=\"hw-connect__msg\">{step.message}</p>\n            {step.asset && (\n              <img\n                className=\"hw-connect__step-asset\"\n                src={`images/${step.asset}.svg`}\n                {...step.dimensions}\n                alt=\"\"\n              />\n            )}\n          </Box>\n        ))}\n      </div>\n    );\n  }\n\n  renderQRHardwareWalletSteps() {\n    const steps = [];\n    steps.push(\n      {\n        title: this.context.t('QRHardwareWalletSteps1Title'),\n        message: this.context.t('QRHardwareWalletSteps1Description'),\n      },\n      {\n        message: (\n          <>\n            <p className=\"hw-connect__QR-subtitle\">\n              {this.context.t('keystone')}\n            </p>\n            <Button\n              className=\"hw-connect__external-btn-first\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked Keystone Learn More',\n                });\n                openWindow(HardwareAffiliateLinks.keystone);\n              }}\n            >\n              {this.context.t('learnMoreKeystone')}\n            </Button>\n            <Button\n              className=\"hw-connect__external-btn\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked Keystone Tutorial',\n                });\n                openWindow(HardwareAffiliateTutorialLinks.keystone);\n              }}\n            >\n              {this.context.t('tutorial')}\n            </Button>\n          </>\n        ),\n      },\n      {\n        message: (\n          <>\n            <p className=\"hw-connect__QR-subtitle\">\n              {this.context.t('airgapVault')}\n            </p>\n            <Button\n              className=\"hw-connect__external-btn-first\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked AirGap Vault Buy Now',\n                });\n                openWindow(HardwareAffiliateLinks.airgap);\n              }}\n            >\n              {this.context.t('downloadNow')}\n            </Button>\n            <Button\n              className=\"hw-connect__external-btn\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked AirGap Vault Tutorial',\n                });\n                openWindow(HardwareAffiliateTutorialLinks.airgap);\n              }}\n            >\n              {this.context.t('tutorial')}\n            </Button>\n          </>\n        ),\n      },\n      {\n        message: (\n          <>\n            <p className=\"hw-connect__QR-subtitle\">\n              {this.context.t('coolWallet')}\n            </p>\n            <Button\n              className=\"hw-connect__external-btn-first\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked CoolWallet Buy Now',\n                });\n                openWindow(HardwareAffiliateLinks.coolwallet);\n              }}\n            >\n              {this.context.t('buyNow')}\n            </Button>\n            <Button\n              className=\"hw-connect__external-btn\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked CoolWallet Tutorial',\n                });\n                openWindow(HardwareAffiliateTutorialLinks.coolwallet);\n              }}\n            >\n              {this.context.t('tutorial')}\n            </Button>\n          </>\n        ),\n      },\n      {\n        message: (\n          <>\n            <p className=\"hw-connect__QR-subtitle\">{this.context.t('dcent')}</p>\n            <Button\n              className=\"hw-connect__external-btn-first\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked DCent Buy Now',\n                });\n                openWindow(HardwareAffiliateLinks.dcent);\n              }}\n            >\n              {this.context.t('buyNow')}\n            </Button>\n            <Button\n              className=\"hw-connect__external-btn\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked DCent Tutorial',\n                });\n                openWindow(HardwareAffiliateTutorialLinks.dcent);\n              }}\n            >\n              {this.context.t('tutorial')}\n            </Button>\n          </>\n        ),\n      },\n      {\n        message: (\n          <>\n            <p className=\"hw-connect__QR-subtitle\">\n              {this.context.t('imToken')}\n            </p>\n            <Button\n              className=\"hw-connect__external-btn-first\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked imToken Learn More',\n                });\n                openWindow(HardwareAffiliateLinks.imtoken);\n              }}\n            >\n              {this.context.t('downloadNow')}\n            </Button>\n            <Button\n              className=\"hw-connect__external-btn\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked imToken Tutorial',\n                });\n                openWindow(HardwareAffiliateTutorialLinks.imtoken);\n              }}\n            >\n              {this.context.t('tutorial')}\n            </Button>\n          </>\n        ),\n      },\n      {\n        message: (\n          <>\n            <p className=\"hw-connect__QR-subtitle\">\n              {this.context.t('onekey')}\n            </p>\n            <Button\n              className=\"hw-connect__external-btn-first\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked OneKey Learn More',\n                });\n                openWindow(HardwareAffiliateLinks.onekey);\n              }}\n            >\n              {this.context.t('buyNow')}\n            </Button>\n            <Button\n              className=\"hw-connect__external-btn\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked OneKey Tutorial',\n                });\n                openWindow(HardwareAffiliateTutorialLinks.onekey);\n              }}\n            >\n              {this.context.t('tutorial')}\n            </Button>\n          </>\n        ),\n      },\n      {\n        message: (\n          <>\n            <p className=\"hw-connect__QR-subtitle\">\n              {this.context.t('QRHardwareWalletSteps2Description')}\n            </p>\n            <Button\n              className=\"hw-connect__external-btn-first\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked Ngrave Buy Now',\n                });\n                openWindow(HardwareAffiliateLinks.ngrave);\n              }}\n              data-testid=\"ngrave-brand-buy-now-btn\"\n            >\n              {this.context.t('buyNow')}\n            </Button>\n            <Button\n              className=\"hw-connect__external-btn\"\n              variant={BUTTON_VARIANT.SECONDARY}\n              onClick={() => {\n                this.context.trackEvent({\n                  category: MetaMetricsEventCategory.Navigation,\n                  event: 'Clicked Ngrave Learn more',\n                });\n                openWindow(HardwareAffiliateTutorialLinks.ngrave);\n              }}\n              data-testid=\"ngrave-brand-learn-more-btn\"\n            >\n              {this.context.t('learnMoreUpperCase')}\n            </Button>\n          </>\n        ),\n      },\n    );\n    return (\n      <div className=\"hw-tutorial\">\n        {steps.map((step, index) => (\n          <div className=\"hw-connect\" key={index}>\n            {step.title && <h3 className=\"hw-connect__title\">{step.title}</h3>}\n            <div className=\"hw-connect__msg\">{step.message}</div>\n            {step.asset && (\n              <img\n                className=\"hw-connect__step-asset\"\n                src={`images/${step.asset}.svg`}\n                {...step.dimensions}\n                alt=\"\"\n              />\n            )}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  renderConnectScreen() {\n    return (\n      <Box\n        className=\"new-external-account-form\"\n        display={Display.Flex}\n        flexDirection={FlexDirection.Column}\n        alignItems={AlignItems.center}\n        justifyContent={JustifyContent.center}\n      >\n        {this.renderHeader()}\n        {this.renderButtons()}\n        {this.state.selectedDevice ? this.renderTutorialSteps() : null}\n        {this.renderContinueButton()}\n        {this.renderFooter()}\n      </Box>\n    );\n  }\n\n  render() {\n    if (this.props.browserSupported) {\n      return this.renderConnectScreen();\n    }\n    return this.renderUnsupportedBrowser();\n  }\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Box } from '../../components/component-library';\nimport { CONNECT_HARDWARE_ROUTE } from '../../helpers/constants/routes';\nimport ConnectHardwareForm from './connect-hardware';\n\nexport default function CreateAccountPage() {\n  return (\n    <Box className=\"new-account-wrapper\">\n      <Switch>\n        <Route\n          exact\n          path={CONNECT_HARDWARE_ROUTE}\n          component={ConnectHardwareForm}\n        />\n      </Switch>\n    </Box>\n  );\n}\n","import React from 'react';\nimport {\n  AvatarIcon,\n  AvatarIconSize,\n  Box,\n  IconName,\n  Text,\n} from '../../components/component-library';\nimport {\n  AlignItems,\n  BlockSize,\n  BorderStyle,\n  Display,\n  FlexDirection,\n  FontWeight,\n  JustifyContent,\n  OverflowWrap,\n  TextAlign,\n  TextColor,\n  TextVariant,\n} from '../../helpers/constants/design-system';\nimport SnapAuthorshipHeader from '../../components/app/snaps/snap-authorship-header';\nimport { useI18nContext } from '../../hooks/useI18nContext';\n\nexport type CreateSnapAccountProps = {\n  snapId: string;\n  snapName: string;\n  onCancel: () => void;\n};\n\nconst CreateSnapAccount = ({\n  snapId,\n  snapName,\n  onCancel,\n}: CreateSnapAccountProps) => {\n  const t = useI18nContext();\n  return (\n    <Box\n      className=\"create-snap-account-page\"\n      height={BlockSize.Full}\n      width={BlockSize.Full}\n      display={Display.Flex}\n      borderStyle={BorderStyle.none}\n      flexDirection={FlexDirection.Column}\n      alignItems={AlignItems.center}\n      marginBottom={0}\n    >\n      <SnapAuthorshipHeader snapId={snapId} onCancel={onCancel} />\n      <Box\n        display={Display.Flex}\n        flexDirection={FlexDirection.Column}\n        alignItems={AlignItems.center}\n        justifyContent={JustifyContent.center}\n        paddingLeft={4}\n        paddingRight={4}\n        style={{ flexGrow: 1 }}\n      >\n        <Box\n          display={Display.Flex}\n          flexDirection={FlexDirection.Column}\n          alignItems={AlignItems.center}\n        >\n          <Box paddingBottom={4}>\n            <AvatarIcon\n              iconName={IconName.UserCircleAdd}\n              size={AvatarIconSize.Xl}\n            />\n          </Box>\n          <Text\n            data-testid=\"create-snap-account-content-title\"\n            textAlign={TextAlign.Center}\n            variant={TextVariant.headingLg}\n          >\n            {t('createSnapAccountTitle')}\n          </Text>\n          <Text\n            variant={TextVariant.bodyMd}\n            textAlign={TextAlign.Center}\n            overflowWrap={OverflowWrap.Anywhere}\n            data-testid=\"create-snap-account-content-description\"\n          >\n            {t('createSnapAccountDescription', [\n              <Text\n                color={TextColor.inherit}\n                variant={TextVariant.inherit}\n                fontWeight={FontWeight.Medium}\n                key=\"1\"\n              >\n                {snapName}\n              </Text>,\n            ])}\n          </Text>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default CreateSnapAccount;\n","export { default as CreateSnapAccount } from './create-snap-account';\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { getEnvironmentType } from '../../../app/scripts/lib/util';\nimport { ENVIRONMENT_TYPE_POPUP } from '../../../shared/constants/app';\nimport { SUPPORT_REQUEST_LINK } from '../../helpers/constants/common';\nimport {\n  MetaMetricsContextProp,\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../shared/constants/metametrics';\n\nclass ErrorPage extends PureComponent {\n  static contextTypes = {\n    t: PropTypes.func.isRequired,\n    trackEvent: PropTypes.func,\n  };\n\n  static propTypes = {\n    error: PropTypes.object.isRequired,\n  };\n\n  renderErrorDetail(content) {\n    return (\n      <li>\n        <p>{content}</p>\n      </li>\n    );\n  }\n\n  renderErrorStack(title, stack) {\n    return (\n      <li>\n        <span>{title}</span>\n        <pre className=\"error-page__stack\">{stack}</pre>\n      </li>\n    );\n  }\n\n  render() {\n    const { error } = this.props;\n    const { t } = this.context;\n\n    const isPopup = getEnvironmentType() === ENVIRONMENT_TYPE_POPUP;\n    const supportLink = (\n      <a\n        target=\"_blank\"\n        key=\"metamaskSupportLink\"\n        rel=\"noopener noreferrer\"\n        href={SUPPORT_REQUEST_LINK}\n        onClick={() => {\n          this.context.trackEvent(\n            {\n              category: MetaMetricsEventCategory.Error,\n              event: MetaMetricsEventName.SupportLinkClicked,\n              properties: {\n                url: SUPPORT_REQUEST_LINK,\n              },\n            },\n            {\n              contextPropsIntoEventProperties: [\n                MetaMetricsContextProp.PageTitle,\n              ],\n            },\n          );\n        }}\n      >\n        <span className=\"error-page__link-text\">{this.context.t('here')}</span>\n      </a>\n    );\n    const message = isPopup\n      ? t('errorPagePopupMessage', [supportLink])\n      : t('errorPageMessage', [supportLink]);\n\n    return (\n      <section className=\"error-page\">\n        <h1 className=\"error-page__header\">{t('errorPageTitle')}</h1>\n        <h2 className=\"error-page__subheader\">{message}</h2>\n        <section className=\"error-page__details\">\n          <details>\n            <summary>{t('errorDetails')}</summary>\n            <ul>\n              {error.message\n                ? this.renderErrorDetail(t('errorMessage', [error.message]))\n                : null}\n              {error.code\n                ? this.renderErrorDetail(t('errorCode', [error.code]))\n                : null}\n              {error.name\n                ? this.renderErrorDetail(t('errorName', [error.name]))\n                : null}\n              {error.stack\n                ? this.renderErrorStack(t('errorStack'), error.stack)\n                : null}\n            </ul>\n          </details>\n        </section>\n      </section>\n    );\n  }\n}\n\nexport default ErrorPage;\n","export { default } from './error.component';\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect, Route } from 'react-router-dom';\nimport {\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main)\n  MetaMetricsContextProp,\n  ///: END:ONLY_INCLUDE_IF\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../shared/constants/metametrics';\n///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\nimport TermsOfUsePopup from '../../components/app/terms-of-use-popup';\nimport RecoveryPhraseReminder from '../../components/app/recovery-phrase-reminder';\nimport WhatsNewPopup from '../../components/app/whats-new-popup';\nimport { FirstTimeFlowType } from '../../../shared/constants/onboarding';\nimport SmartTransactionsOptInModal from '../smart-transactions/components/smart-transactions-opt-in-modal';\n///: END:ONLY_INCLUDE_IF\nimport HomeNotification from '../../components/app/home-notification';\nimport MultipleNotifications from '../../components/app/multiple-notifications';\nimport Typography from '../../components/ui/typography/typography';\nimport Button from '../../components/ui/button';\nimport Popover from '../../components/ui/popover';\nimport ConnectedSites from '../connected-sites';\nimport ConnectedAccounts from '../connected-accounts';\nimport { isMv3ButOffscreenDocIsMissing } from '../../../shared/modules/mv3.utils';\nimport ActionableMessage from '../../components/ui/actionable-message/actionable-message';\n\nimport {\n  FontWeight,\n  Display,\n  TextColor,\n  TextVariant,\n  FlexDirection,\n  BlockSize,\n  AlignItems,\n  JustifyContent,\n} from '../../helpers/constants/design-system';\nimport { SECOND } from '../../../shared/constants/time';\nimport {\n  ButtonIcon,\n  ButtonIconSize,\n  IconName,\n  Box,\n  Text,\n  Icon,\n  Modal,\n  ModalBody,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n} from '../../components/component-library';\n///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\nimport MultiRpcEditModal from '../../components/app/multi-rpc-edit-modal/multi-rpc-edit-modal';\n///: END:ONLY_INCLUDE_IF\nimport {\n  RESTORE_VAULT_ROUTE,\n  CONFIRM_TRANSACTION_ROUTE,\n  CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE,\n  CONFIRM_ADD_SUGGESTED_NFT_ROUTE,\n  CONNECT_ROUTE,\n  CONNECTED_ROUTE,\n  CONNECTED_ACCOUNTS_ROUTE,\n  AWAITING_SWAP_ROUTE,\n  BUILD_QUOTE_ROUTE,\n  VIEW_QUOTE_ROUTE,\n  CONFIRMATION_V_NEXT_ROUTE,\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n  ONBOARDING_SECURE_YOUR_WALLET_ROUTE,\n  ///: END:ONLY_INCLUDE_IF\n} from '../../helpers/constants/routes';\nimport ZENDESK_URLS from '../../helpers/constants/zendesk-url';\nimport { METAMETRICS_SETTINGS_LINK } from '../../helpers/constants/common';\nimport {\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main)\n  SUPPORT_LINK,\n  ///: END:ONLY_INCLUDE_IF\n} from '../../../shared/lib/ui-utils';\nimport { AccountOverview } from '../../components/multichain/account-overview';\nimport { setEditedNetwork } from '../../store/actions';\n\nfunction shouldCloseNotificationPopup({\n  isNotification,\n  totalUnapprovedAndQueuedRequestCount,\n  hasApprovalFlows,\n  isSigningQRHardwareTransaction,\n}) {\n  // we can't use totalUnapproved because there are also queued requests\n\n  let shouldClose =\n    isNotification &&\n    totalUnapprovedAndQueuedRequestCount === 0 &&\n    !hasApprovalFlows &&\n    !isSigningQRHardwareTransaction;\n\n\n  return shouldClose;\n}\n\nexport default class Home extends PureComponent {\n  static contextTypes = {\n    t: PropTypes.func,\n    trackEvent: PropTypes.func,\n  };\n\n  static propTypes = {\n    history: PropTypes.object,\n    forgottenPassword: PropTypes.bool,\n    hasTransactionPendingApprovals: PropTypes.bool.isRequired,\n    hasWatchTokenPendingApprovals: PropTypes.bool,\n    hasWatchNftPendingApprovals: PropTypes.bool,\n    setConnectedStatusPopoverHasBeenShown: PropTypes.func,\n    ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n    shouldShowSeedPhraseReminder: PropTypes.bool.isRequired,\n    isPopup: PropTypes.bool,\n    connectedStatusPopoverHasBeenShown: PropTypes.bool,\n    showRecoveryPhraseReminder: PropTypes.bool.isRequired,\n    showTermsOfUsePopup: PropTypes.bool.isRequired,\n    seedPhraseBackedUp: (props) => {\n      if (\n        props.seedPhraseBackedUp !== null &&\n        typeof props.seedPhraseBackedUp !== 'boolean'\n      ) {\n        throw new Error(\n          `seedPhraseBackedUp is required to be null or boolean. Received ${props.seedPhraseBackedUp}`,\n        );\n      }\n    },\n    firstTimeFlowType: PropTypes.string,\n    completedOnboarding: PropTypes.bool,\n    showWhatsNewPopup: PropTypes.bool.isRequired,\n    hideWhatsNewPopup: PropTypes.func.isRequired,\n    announcementsToShow: PropTypes.bool.isRequired,\n    onboardedInThisUISession: PropTypes.bool,\n    isSmartTransactionsOptInModalAvailable: PropTypes.bool.isRequired,\n    showMultiRpcModal: PropTypes.bool.isRequired,\n    ///: END:ONLY_INCLUDE_IF\n    newNetworkAddedConfigurationId: PropTypes.string,\n    isNotification: PropTypes.bool.isRequired,\n    firstPermissionsRequestId: PropTypes.string,\n    // This prop is used in the `shouldCloseNotificationPopup` function\n    // eslint-disable-next-line react/no-unused-prop-types\n    totalUnapprovedCount: PropTypes.number.isRequired,\n    defaultHomeActiveTabName: PropTypes.string,\n    participateInMetaMetrics: PropTypes.bool.isRequired,\n    onTabClick: PropTypes.func.isRequired,\n    haveSwapsQuotes: PropTypes.bool.isRequired,\n    showAwaitingSwapScreen: PropTypes.bool.isRequired,\n    setDataCollectionForMarketing: PropTypes.func.isRequired,\n    dataCollectionForMarketing: PropTypes.bool,\n    swapsFetchParams: PropTypes.object,\n    location: PropTypes.object,\n    shouldShowWeb3ShimUsageNotification: PropTypes.bool.isRequired,\n    setWeb3ShimUsageAlertDismissed: PropTypes.func.isRequired,\n    originOfCurrentTab: PropTypes.string,\n    disableWeb3ShimUsageAlert: PropTypes.func.isRequired,\n    pendingConfirmations: PropTypes.arrayOf(PropTypes.object).isRequired,\n    pendingConfirmationsPrioritized: PropTypes.arrayOf(PropTypes.object)\n      .isRequired,\n    hasApprovalFlows: PropTypes.bool.isRequired,\n    infuraBlocked: PropTypes.bool.isRequired,\n    setRecoveryPhraseReminderHasBeenShown: PropTypes.func.isRequired,\n    setRecoveryPhraseReminderLastShown: PropTypes.func.isRequired,\n    setTermsOfUseLastAgreed: PropTypes.func.isRequired,\n    showOutdatedBrowserWarning: PropTypes.bool.isRequired,\n    setOutdatedBrowserWarningLastShown: PropTypes.func.isRequired,\n    newNetworkAddedName: PropTypes.string,\n    editedNetwork: PropTypes.object,\n    // This prop is used in the `shouldCloseNotificationPopup` function\n    // eslint-disable-next-line react/no-unused-prop-types\n    isSigningQRHardwareTransaction: PropTypes.bool.isRequired,\n    newNftAddedMessage: PropTypes.string,\n    setNewNftAddedMessage: PropTypes.func.isRequired,\n    removeNftMessage: PropTypes.string,\n    setRemoveNftMessage: PropTypes.func.isRequired,\n    closeNotificationPopup: PropTypes.func.isRequired,\n    newTokensImported: PropTypes.string,\n    newTokensImportedError: PropTypes.string,\n    setNewTokensImported: PropTypes.func.isRequired,\n    setNewTokensImportedError: PropTypes.func.isRequired,\n    clearNewNetworkAdded: PropTypes.func,\n    clearEditedNetwork: PropTypes.func,\n    setActiveNetwork: PropTypes.func,\n    hasAllowedPopupRedirectApprovals: PropTypes.bool.isRequired,\n    useExternalServices: PropTypes.bool,\n    setBasicFunctionalityModalOpen: PropTypes.func,\n    fetchBuyableChains: PropTypes.func.isRequired,\n  };\n\n  state = {\n    canShowBlockageNotification: true,\n    notificationClosing: false,\n    redirecting: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const {\n      closeNotificationPopup,\n      firstPermissionsRequestId,\n      haveSwapsQuotes,\n      isNotification,\n      showAwaitingSwapScreen,\n      hasWatchTokenPendingApprovals,\n      hasWatchNftPendingApprovals,\n      swapsFetchParams,\n      hasTransactionPendingApprovals,\n      location,\n    } = this.props;\n    const stayOnHomePage = Boolean(location?.state?.stayOnHomePage);\n\n    if (shouldCloseNotificationPopup(props)) {\n      this.state.notificationClosing = true;\n      closeNotificationPopup();\n    } else if (\n      firstPermissionsRequestId ||\n      hasTransactionPendingApprovals ||\n      hasWatchTokenPendingApprovals ||\n      hasWatchNftPendingApprovals ||\n      (!isNotification &&\n        !stayOnHomePage &&\n        (showAwaitingSwapScreen || haveSwapsQuotes || swapsFetchParams))\n    ) {\n      this.state.redirecting = true;\n    }\n  }\n\n\n  checkStatusAndNavigate() {\n    const {\n      firstPermissionsRequestId,\n      history,\n      isNotification,\n      hasTransactionPendingApprovals,\n      hasWatchTokenPendingApprovals,\n      hasWatchNftPendingApprovals,\n      haveSwapsQuotes,\n      showAwaitingSwapScreen,\n      swapsFetchParams,\n      location,\n      pendingConfirmations,\n      pendingConfirmationsPrioritized,\n      hasApprovalFlows,\n    } = this.props;\n    const stayOnHomePage = Boolean(location?.state?.stayOnHomePage);\n\n\n    const canRedirect = !isNotification && !stayOnHomePage;\n    if (canRedirect && showAwaitingSwapScreen) {\n      history.push(AWAITING_SWAP_ROUTE);\n    } else if (canRedirect && haveSwapsQuotes) {\n      history.push(VIEW_QUOTE_ROUTE);\n    } else if (canRedirect && swapsFetchParams) {\n      history.push(BUILD_QUOTE_ROUTE);\n    } else if (firstPermissionsRequestId) {\n      history.push(`${CONNECT_ROUTE}/${firstPermissionsRequestId}`);\n    } else if (pendingConfirmationsPrioritized.length > 0) {\n      history.push(CONFIRMATION_V_NEXT_ROUTE);\n    } else if (hasTransactionPendingApprovals) {\n      history.push(CONFIRM_TRANSACTION_ROUTE);\n    } else if (hasWatchTokenPendingApprovals) {\n      history.push(CONFIRM_ADD_SUGGESTED_TOKEN_ROUTE);\n    } else if (hasWatchNftPendingApprovals) {\n      history.push(CONFIRM_ADD_SUGGESTED_NFT_ROUTE);\n    } else if (pendingConfirmations.length > 0 || hasApprovalFlows) {\n      history.push(CONFIRMATION_V_NEXT_ROUTE);\n    }\n  }\n\n  componentDidMount() {\n    this.checkStatusAndNavigate();\n\n\n    this.props.fetchBuyableChains();\n  }\n\n  static getDerivedStateFromProps(props) {\n    if (shouldCloseNotificationPopup(props)) {\n      return { notificationClosing: true };\n    }\n    return null;\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    const {\n      closeNotificationPopup,\n      isNotification,\n      hasAllowedPopupRedirectApprovals,\n      newNetworkAddedConfigurationId,\n      setActiveNetwork,\n      clearNewNetworkAdded,\n    } = this.props;\n\n    const {\n      newNetworkAddedConfigurationId: prevNewNetworkAddedConfigurationId,\n    } = _prevProps;\n    const { notificationClosing } = this.state;\n\n    if (\n      newNetworkAddedConfigurationId &&\n      prevNewNetworkAddedConfigurationId !== newNetworkAddedConfigurationId\n    ) {\n      setActiveNetwork(newNetworkAddedConfigurationId);\n      clearNewNetworkAdded();\n    }\n\n    if (notificationClosing && !prevState.notificationClosing) {\n      closeNotificationPopup();\n    } else if (isNotification || hasAllowedPopupRedirectApprovals) {\n      this.checkStatusAndNavigate();\n    }\n\n  }\n\n  onRecoveryPhraseReminderClose = () => {\n    const {\n      setRecoveryPhraseReminderHasBeenShown,\n      setRecoveryPhraseReminderLastShown,\n    } = this.props;\n    setRecoveryPhraseReminderHasBeenShown(true);\n    setRecoveryPhraseReminderLastShown(new Date().getTime());\n  };\n\n  onAcceptTermsOfUse = () => {\n    const { setTermsOfUseLastAgreed } = this.props;\n    setTermsOfUseLastAgreed(new Date().getTime());\n    this.context.trackEvent({\n      category: MetaMetricsEventCategory.Onboarding,\n      event: MetaMetricsEventName.TermsOfUseAccepted,\n      properties: {\n        location: 'Terms Of Use Popover',\n      },\n    });\n  };\n\n  ///: BEGIN:ONLY_INCLUDE_IF(build-main)\n  onSupportLinkClick = () => {\n    this.context.trackEvent(\n      {\n        category: MetaMetricsEventCategory.Home,\n        event: MetaMetricsEventName.SupportLinkClicked,\n        properties: {\n          url: SUPPORT_LINK,\n        },\n      },\n      {\n        contextPropsIntoEventProperties: [MetaMetricsContextProp.PageTitle],\n      },\n    );\n  };\n  ///: END:ONLY_INCLUDE_IF\n\n  onOutdatedBrowserWarningClose = () => {\n    const { setOutdatedBrowserWarningLastShown } = this.props;\n    setOutdatedBrowserWarningLastShown(new Date().getTime());\n  };\n\n  renderNotifications() {\n    const { t } = this.context;\n\n    const {\n      ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n      history,\n      shouldShowSeedPhraseReminder,\n      isPopup,\n      ///: END:ONLY_INCLUDE_IF\n      shouldShowWeb3ShimUsageNotification,\n      setWeb3ShimUsageAlertDismissed,\n      originOfCurrentTab,\n      disableWeb3ShimUsageAlert,\n      infuraBlocked,\n      showOutdatedBrowserWarning,\n      newNftAddedMessage,\n      setNewNftAddedMessage,\n      newNetworkAddedName,\n      editedNetwork,\n      removeNftMessage,\n      setRemoveNftMessage,\n      newTokensImported,\n      newTokensImportedError,\n      setNewTokensImported,\n      setNewTokensImportedError,\n      clearNewNetworkAdded,\n      clearEditedNetwork,\n    } = this.props;\n\n    const onAutoHide = () => {\n      setNewNftAddedMessage('');\n      setRemoveNftMessage('');\n      setNewTokensImported(''); // Added this so we dnt see the notif if user does not close it\n      setNewTokensImportedError('');\n      setEditedNetwork();\n    };\n\n    const autoHideDelay = 5 * SECOND;\n\n    const outdatedBrowserNotificationDescriptionText =\n      isMv3ButOffscreenDocIsMissing ? (\n        <div>\n          <Text>{t('outdatedBrowserNotification')}</Text>\n          <br />\n          <Text fontWeight={FontWeight.Bold} color={TextColor.warningDefault}>\n            {t('noHardwareWalletOrSnapsSupport')}\n          </Text>\n        </div>\n      ) : (\n        t('outdatedBrowserNotification')\n      );\n\n    return (\n      <MultipleNotifications>\n        {newNftAddedMessage === 'success' ? (\n          <ActionableMessage\n            type=\"success\"\n            className=\"home__new-network-notification\"\n            autoHideTime={autoHideDelay}\n            onAutoHide={onAutoHide}\n            message={\n              <Box display={Display.InlineFlex}>\n                <i className=\"fa fa-check-circle home__new-nft-notification-icon\" />\n                <Text variant={TextVariant.bodySm} as=\"h6\">\n                  {t('newNftAddedMessage')}\n                </Text>\n                <ButtonIcon\n                  iconName={IconName.Close}\n                  size={ButtonIconSize.Sm}\n                  ariaLabel={t('close')}\n                  onClick={onAutoHide}\n                />\n              </Box>\n            }\n          />\n        ) : null}\n        {removeNftMessage === 'success' ? (\n          <ActionableMessage\n            type=\"success\"\n            className=\"home__new-network-notification\"\n            autoHideTime={autoHideDelay}\n            onAutoHide={onAutoHide}\n            message={\n              <Box display={Display.InlineFlex}>\n                <i className=\"fa fa-check-circle home__new-nft-notification-icon\" />\n                <Text variant={TextVariant.bodySm} as=\"h6\">\n                  {t('removeNftMessage')}\n                </Text>\n                <ButtonIcon\n                  iconName={IconName.Close}\n                  size={ButtonIconSize.Sm}\n                  ariaLabel={t('close')}\n                  onClick={onAutoHide}\n                />\n              </Box>\n            }\n          />\n        ) : null}\n        {removeNftMessage === 'error' ? (\n          <ActionableMessage\n            type=\"danger\"\n            className=\"home__new-network-notification\"\n            autoHideTime={autoHideDelay}\n            onAutoHide={onAutoHide}\n            message={\n              <Box display={Display.InlineFlex}>\n                <i className=\"fa fa-check-circle home__new-nft-notification-icon\" />\n                <Text variant={TextVariant.bodySm} as=\"h6\">\n                  {t('removeNftErrorMessage')}\n                </Text>\n                <ButtonIcon\n                  iconName={IconName.Close}\n                  size={ButtonIconSize.Sm}\n                  ariaLabel={t('close')}\n                  onClick={onAutoHide}\n                />\n              </Box>\n            }\n          />\n        ) : null}\n        {newNetworkAddedName ? (\n          <ActionableMessage\n            type=\"success\"\n            className=\"home__new-network-notification\"\n            message={\n              <Box display={Display.InlineFlex}>\n                <i className=\"fa fa-check-circle home__new-network-notification-icon\" />\n                <Text variant={TextVariant.bodySm} as=\"h6\">\n                  {t('newNetworkAdded', [newNetworkAddedName])}\n                </Text>\n                <ButtonIcon\n                  iconName={IconName.Close}\n                  size={ButtonIconSize.Sm}\n                  ariaLabel={t('close')}\n                  onClick={() => clearNewNetworkAdded()}\n                  className=\"home__new-network-notification-close\"\n                />\n              </Box>\n            }\n          />\n        ) : null}\n        {editedNetwork?.editCompleted ? (\n          <ActionableMessage\n            type=\"success\"\n            className=\"home__new-tokens-imported-notification\"\n            autoHideTime={autoHideDelay}\n            onAutoHide={onAutoHide}\n            message={\n              <Box display={Display.InlineFlex}>\n                <i className=\"fa fa-check-circle home__new-network-notification-icon\" />\n                <Text variant={TextVariant.bodySm} as=\"h6\">\n                  {editedNetwork.newNetwork\n                    ? t('newNetworkAdded', [editedNetwork.nickname])\n                    : t('newNetworkEdited', [editedNetwork.nickname])}\n                </Text>\n                <ButtonIcon\n                  iconName={IconName.Close}\n                  size={ButtonIconSize.Sm}\n                  ariaLabel={t('close')}\n                  onClick={() => clearEditedNetwork()}\n                  className=\"home__new-network-notification-close\"\n                />\n              </Box>\n            }\n          />\n        ) : null}\n        {newTokensImported ? (\n          <ActionableMessage\n            type=\"success\"\n            autoHideTime={autoHideDelay}\n            onAutoHide={onAutoHide}\n            className=\"home__new-tokens-imported-notification\"\n            message={\n              <Box display={Display.InlineFlex}>\n                <i className=\"fa fa-check-circle home__new-tokens-imported-notification-icon\" />\n                <Box>\n                  <Text\n                    className=\"home__new-tokens-imported-notification-title\"\n                    variant={TextVariant.bodySmBold}\n                    as=\"h6\"\n                  >\n                    {t('newTokensImportedTitle')}\n                  </Text>\n                  <Text\n                    className=\"home__new-tokens-imported-notification-message\"\n                    variant={TextVariant.bodySm}\n                    as=\"h6\"\n                  >\n                    {t('newTokensImportedMessage', [newTokensImported])}\n                  </Text>\n                </Box>\n\n                <ButtonIcon\n                  iconName={IconName.Close}\n                  size={ButtonIconSize.Sm}\n                  ariaLabel={t('close')}\n                  onClick={() => setNewTokensImported('')}\n                  className=\"home__new-tokens-imported-notification-close\"\n                />\n              </Box>\n            }\n          />\n        ) : null}\n        {newTokensImportedError ? (\n          <ActionableMessage\n            type=\"danger\"\n            className=\"home__new-tokens-imported-notification\"\n            autoHideTime={autoHideDelay}\n            onAutoHide={onAutoHide}\n            message={\n              <Box display={Display.InlineFlex}>\n                <Icon name={IconName.Danger} />\n                <Text variant={TextVariant.bodySm} as=\"h6\">\n                  {t('importTokensError')}\n                </Text>\n                <ButtonIcon\n                  iconName={IconName.Close}\n                  size={ButtonIconSize.Sm}\n                  ariaLabel={t('close')}\n                  onClick={onAutoHide}\n                />\n              </Box>\n            }\n          />\n        ) : null}\n        {shouldShowWeb3ShimUsageNotification ? (\n          <HomeNotification\n            descriptionText={t('web3ShimUsageNotification', [\n              <span\n                key=\"web3ShimUsageNotificationLink\"\n                className=\"home-notification__text-link\"\n                onClick={() =>\n                  global.platform.openTab({ url: ZENDESK_URLS.LEGACY_WEB3 })\n                }\n              >\n                {t('here')}\n              </span>,\n            ])}\n            ignoreText={t('dismiss')}\n            onIgnore={(disable) => {\n              setWeb3ShimUsageAlertDismissed(originOfCurrentTab);\n              if (disable) {\n                disableWeb3ShimUsageAlert();\n              }\n            }}\n            checkboxText={t('dontShowThisAgain')}\n            checkboxTooltipText={t('canToggleInSettings')}\n            key=\"home-web3ShimUsageNotification\"\n          />\n        ) : null}\n        {\n          ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n          shouldShowSeedPhraseReminder ? (\n            <HomeNotification\n              descriptionText={t('backupApprovalNotice')}\n              acceptText={t('backupNow')}\n              onAccept={() => {\n                const backUpSRPRoute = `${ONBOARDING_SECURE_YOUR_WALLET_ROUTE}/?isFromReminder=true`;\n                if (isPopup) {\n                  global.platform.openExtensionInBrowser(backUpSRPRoute);\n                } else {\n                  history.push(backUpSRPRoute);\n                }\n              }}\n              infoText={t('backupApprovalInfo')}\n              key=\"home-backupApprovalNotice\"\n            />\n          ) : null\n          ///: END:ONLY_INCLUDE_IF\n        }\n        {infuraBlocked && this.state.canShowBlockageNotification ? (\n          <HomeNotification\n            descriptionText={t('infuraBlockedNotification', [\n              <span\n                key=\"infuraBlockedNotificationLink\"\n                className=\"home-notification__text-link\"\n                onClick={() =>\n                  global.platform.openTab({ url: ZENDESK_URLS.INFURA_BLOCKAGE })\n                }\n              >\n                {t('here')}\n              </span>,\n            ])}\n            ignoreText={t('dismiss')}\n            onIgnore={() => {\n              this.setState({\n                canShowBlockageNotification: false,\n              });\n            }}\n            key=\"home-infuraBlockedNotification\"\n          />\n        ) : null}\n        {showOutdatedBrowserWarning ? (\n          <HomeNotification\n            descriptionText={outdatedBrowserNotificationDescriptionText}\n            acceptText={t('gotIt')}\n            onAccept={this.onOutdatedBrowserWarningClose}\n            key=\"home-outdatedBrowserNotification\"\n          />\n        ) : null}\n      </MultipleNotifications>\n    );\n  }\n\n  renderOnboardingPopover = () => {\n    const { t } = this.context;\n    const { setDataCollectionForMarketing } = this.props;\n\n    const handleClose = () => {\n      setDataCollectionForMarketing(false);\n      this.context.trackEvent({\n        category: MetaMetricsEventCategory.Home,\n        event: MetaMetricsEventName.AnalyticsPreferenceSelected,\n        properties: {\n          has_marketing_consent: false,\n          location: 'marketing_consent_modal',\n        },\n      });\n    };\n\n    const handleConsent = (consent) => {\n      setDataCollectionForMarketing(consent);\n      this.context.trackEvent({\n        category: MetaMetricsEventCategory.Home,\n        event: MetaMetricsEventName.AnalyticsPreferenceSelected,\n        properties: {\n          has_marketing_consent: consent,\n          location: 'marketing_consent_modal',\n        },\n      });\n    };\n\n    return (\n      <Modal isOpen onClose={handleClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            onClose={handleClose}\n            display={Display.Flex}\n            flexDirection={FlexDirection.Row}\n            fontWeight={FontWeight.Bold}\n            alignItems={AlignItems.center}\n            justifyContent={JustifyContent.center}\n            gap={4}\n            size={18}\n            paddingBottom={0}\n          >\n            {t('onboardedMetametricsTitle')}\n          </ModalHeader>\n          <ModalBody>\n            <Box\n              display={Display.Flex}\n              flexDirection={FlexDirection.Column}\n              gap={2}\n              margin={4}\n            >\n              <Typography>\n                {t('onboardedMetametricsParagraph1', [\n                  <a\n                    href={METAMETRICS_SETTINGS_LINK}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    key=\"retention-link\"\n                  >\n                    {t('onboardedMetametricsLink')}\n                  </a>,\n                ])}\n              </Typography>\n              <Typography>{t('onboardedMetametricsParagraph2')}</Typography>\n              <ul className=\"home__onboarding_list\">\n                <li>{t('onboardedMetametricsKey1')}</li>\n                <li>{t('onboardedMetametricsKey2')}</li>\n                <li>{t('onboardedMetametricsKey3')}</li>\n              </ul>\n              <Typography>{t('onboardedMetametricsParagraph3')}</Typography>\n            </Box>\n          </ModalBody>\n          <ModalFooter>\n            <Box\n              display={Display.Flex}\n              flexDirection={FlexDirection.Row}\n              gap={2}\n              width={BlockSize.Full}\n            >\n              <Button type=\"secondary\" onClick={() => handleConsent(false)}>\n                {t('onboardedMetametricsDisagree')}\n              </Button>\n              <Button type=\"primary\" onClick={() => handleConsent(true)}>\n                {t('onboardedMetametricsAccept')}\n              </Button>\n            </Box>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    );\n  };\n\n  renderPopover = () => {\n    const { setConnectedStatusPopoverHasBeenShown } = this.props;\n    const { t } = this.context;\n    return (\n      <Popover\n        title={t('whatsThis')}\n        onClose={setConnectedStatusPopoverHasBeenShown}\n        className=\"home__connected-status-popover\"\n        showArrow\n        CustomBackground={({ onClose }) => {\n          return (\n            <div\n              className=\"home__connected-status-popover-bg-container\"\n              onClick={onClose}\n            >\n              <div className=\"home__connected-status-popover-bg\" />\n            </div>\n          );\n        }}\n        footer={\n          <>\n            <a\n              href={ZENDESK_URLS.USER_GUIDE_DAPPS}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {t('learnMoreUpperCase')}\n            </a>\n            <Button\n              type=\"primary\"\n              onClick={setConnectedStatusPopoverHasBeenShown}\n            >\n              {t('dismiss')}\n            </Button>\n          </>\n        }\n      >\n        <main className=\"home__connect-status-text\">\n          <div>{t('metaMaskConnectStatusParagraphOne')}</div>\n          <div>{t('metaMaskConnectStatusParagraphTwo')}</div>\n          <div>{t('metaMaskConnectStatusParagraphThree')}</div>\n        </main>\n      </Popover>\n    );\n  };\n\n  render() {\n    const {\n      defaultHomeActiveTabName,\n      onTabClick,\n      useExternalServices,\n      setBasicFunctionalityModalOpen,\n      forgottenPassword,\n      participateInMetaMetrics,\n      dataCollectionForMarketing,\n      ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n      connectedStatusPopoverHasBeenShown,\n      isPopup,\n      seedPhraseBackedUp,\n      showRecoveryPhraseReminder,\n      showTermsOfUsePopup,\n      showWhatsNewPopup,\n      hideWhatsNewPopup,\n      completedOnboarding,\n      onboardedInThisUISession,\n      announcementsToShow,\n      firstTimeFlowType,\n      newNetworkAddedConfigurationId,\n      isSmartTransactionsOptInModalAvailable,\n      showMultiRpcModal,\n      ///: END:ONLY_INCLUDE_IF\n    } = this.props;\n\n    if (forgottenPassword) {\n      return <Redirect to={{ pathname: RESTORE_VAULT_ROUTE }} />;\n    } else if (this.state.notificationClosing || this.state.redirecting) {\n      return null;\n    }\n\n    ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n    const canSeeModals =\n      completedOnboarding &&\n      (!onboardedInThisUISession ||\n        firstTimeFlowType === FirstTimeFlowType.import) &&\n      !process.env.IN_TEST &&\n      !newNetworkAddedConfigurationId;\n\n    const showSmartTransactionsOptInModal =\n      canSeeModals && isSmartTransactionsOptInModalAvailable;\n\n    const showWhatsNew =\n      canSeeModals &&\n      announcementsToShow &&\n      showWhatsNewPopup &&\n      !showSmartTransactionsOptInModal;\n\n    const showMultiRpcEditModal =\n      canSeeModals &&\n      showMultiRpcModal &&\n      !showSmartTransactionsOptInModal &&\n      !showWhatsNew;\n\n    const showTermsOfUse =\n      completedOnboarding && !onboardedInThisUISession && showTermsOfUsePopup;\n    ///: END:ONLY_INCLUDE_IF\n\n    return (\n      <div className=\"main-container\">\n        <Route path={CONNECTED_ROUTE} component={ConnectedSites} exact />\n        <Route\n          path={CONNECTED_ACCOUNTS_ROUTE}\n          component={ConnectedAccounts}\n          exact\n        />\n        <div className=\"home__container\">\n          {dataCollectionForMarketing === null &&\n          participateInMetaMetrics === true\n            ? this.renderOnboardingPopover()\n            : null}\n          {\n            ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n          }\n          <SmartTransactionsOptInModal\n            isOpen={showSmartTransactionsOptInModal}\n            hideWhatsNewPopup={hideWhatsNewPopup}\n          />\n\n          {showMultiRpcEditModal && <MultiRpcEditModal />}\n          {showWhatsNew ? <WhatsNewPopup onClose={hideWhatsNewPopup} /> : null}\n          {!showWhatsNew && showRecoveryPhraseReminder ? (\n            <RecoveryPhraseReminder\n              hasBackedUp={seedPhraseBackedUp}\n              onConfirm={this.onRecoveryPhraseReminderClose}\n            />\n          ) : null}\n          {showTermsOfUse ? (\n            <TermsOfUsePopup onAccept={this.onAcceptTermsOfUse} />\n          ) : null}\n          {isPopup && !connectedStatusPopoverHasBeenShown\n            ? this.renderPopover()\n            : null}\n          {\n            ///: END:ONLY_INCLUDE_IF\n          }\n          <div className=\"home__main-view\">\n            <AccountOverview\n              onTabClick={onTabClick}\n              ///: BEGIN:ONLY_INCLUDE_IF(build-main)\n              onSupportLinkClick={this.onSupportLinkClick}\n              ///: END:ONLY_INCLUDE_IF\n              defaultHomeActiveTabName={defaultHomeActiveTabName}\n              useExternalServices={useExternalServices}\n              setBasicFunctionalityModalOpen={setBasicFunctionalityModalOpen}\n            ></AccountOverview>\n            {\n            }\n            {\n            }\n          </div>\n          {this.renderNotifications()}\n        </div>\n      </div>\n    );\n  }\n}\n","import { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport {\n  activeTabHasPermissions,\n  getUseExternalServices,\n  getFirstPermissionRequest,\n  getFirstSnapInstallOrUpdateRequest,\n  getIsMainnet,\n  getOriginOfCurrentTab,\n  getTotalUnapprovedCount,\n  getUnapprovedTemplatedConfirmations,\n  getWeb3ShimUsageStateForOrigin,\n  getInfuraBlocked,\n  getShowWhatsNewPopup,\n  getSortedAnnouncementsToShow,\n  getShowRecoveryPhraseReminder,\n  getShowTermsOfUse,\n  getShowOutdatedBrowserWarning,\n  getNewNetworkAdded,\n  getIsSigningQRHardwareTransaction,\n  getNewNftAddedMessage,\n  getNewTokensImported,\n  getShouldShowSeedPhraseReminder,\n  getRemoveNftMessage,\n  getSuggestedTokens,\n  getSuggestedNfts,\n  getApprovalFlows,\n  getNewTokensImportedError,\n  hasPendingApprovals,\n  getSelectedInternalAccount,\n  getQueuedRequestCount,\n  getEditedNetwork,\n  getPrioritizedUnapprovedTemplatedConfirmations,\n} from '../../selectors';\nimport { getIsSmartTransactionsOptInModalAvailable } from '../../../shared/modules/selectors';\n\nimport {\n  closeNotificationPopup,\n  setConnectedStatusPopoverHasBeenShown,\n  setDefaultHomeActiveTabName,\n  setWeb3ShimUsageAlertDismissed,\n  setAlertEnabledness,\n  setRecoveryPhraseReminderHasBeenShown,\n  setRecoveryPhraseReminderLastShown,\n  setTermsOfUseLastAgreed,\n  setOutdatedBrowserWarningLastShown,\n  setNewNetworkAdded,\n  setNewNftAddedMessage,\n  setRemoveNftMessage,\n  setNewTokensImported,\n  setActiveNetwork,\n  setNewTokensImportedError,\n  setDataCollectionForMarketing,\n  setEditedNetwork,\n} from '../../store/actions';\nimport {\n  hideWhatsNewPopup,\n  openBasicFunctionalityModal,\n} from '../../ducks/app/app';\nimport { getWeb3ShimUsageAlertEnabledness } from '../../ducks/metamask/metamask';\nimport { getSwapsFeatureIsLive } from '../../ducks/swaps/swaps';\nimport { fetchBuyableChains } from '../../ducks/ramps';\nimport { getEnvironmentType } from '../../../app/scripts/lib/util';\nimport { getIsBrowserDeprecated } from '../../helpers/utils/util';\nimport {\n  ENVIRONMENT_TYPE_NOTIFICATION,\n  ENVIRONMENT_TYPE_POPUP,\n  ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n  SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES,\n  ///: END:ONLY_INCLUDE_IF\n} from '../../../shared/constants/app';\nimport {\n  AlertTypes,\n  Web3ShimUsageAlertStates,\n} from '../../../shared/constants/alerts';\nimport { hasTransactionPendingApprovals } from '../../selectors/transactions';\nimport Home from './home.component';\n\nconst mapStateToProps = (state) => {\n  const { metamask, appState } = state;\n  const {\n    seedPhraseBackedUp,\n    connectedStatusPopoverHasBeenShown,\n    defaultHomeActiveTabName,\n    swapsState,\n    dataCollectionForMarketing,\n    participateInMetaMetrics,\n    firstTimeFlowType,\n    completedOnboarding,\n  } = metamask;\n  const { address: selectedAddress } = getSelectedInternalAccount(state);\n  const { forgottenPassword } = metamask;\n  const totalUnapprovedCount = getTotalUnapprovedCount(state);\n  const queuedRequestCount = getQueuedRequestCount(state);\n  const totalUnapprovedAndQueuedRequestCount =\n    totalUnapprovedCount + queuedRequestCount;\n  const swapsEnabled = getSwapsFeatureIsLive(state);\n  const pendingConfirmations = getUnapprovedTemplatedConfirmations(state);\n  const pendingConfirmationsPrioritized =\n    getPrioritizedUnapprovedTemplatedConfirmations(state);\n\n\n  const envType = getEnvironmentType();\n  const isPopup = envType === ENVIRONMENT_TYPE_POPUP;\n  const isNotification = envType === ENVIRONMENT_TYPE_NOTIFICATION;\n\n  let firstPermissionsRequest, firstPermissionsRequestId;\n  firstPermissionsRequest = getFirstPermissionRequest(state);\n  firstPermissionsRequestId = firstPermissionsRequest?.metadata.id || null;\n\n  // getFirstPermissionRequest should be updated with snap update logic once we hit main extension release\n\n  if (!firstPermissionsRequest) {\n    firstPermissionsRequest = getFirstSnapInstallOrUpdateRequest(state);\n    firstPermissionsRequestId = firstPermissionsRequest?.metadata.id || null;\n  }\n\n  const originOfCurrentTab = getOriginOfCurrentTab(state);\n  const shouldShowWeb3ShimUsageNotification =\n    isPopup &&\n    getWeb3ShimUsageAlertEnabledness(state) &&\n    activeTabHasPermissions(state) &&\n    getWeb3ShimUsageStateForOrigin(state, originOfCurrentTab) ===\n      Web3ShimUsageAlertStates.recorded;\n\n  const hasWatchTokenPendingApprovals = getSuggestedTokens(state).length > 0;\n\n  const hasWatchNftPendingApprovals = getSuggestedNfts(state).length > 0;\n\n  const hasAllowedPopupRedirectApprovals = hasPendingApprovals(state, [\n    ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n    SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountCreation,\n    SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountRemoval,\n    SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.showNameSnapAccount,\n    SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.showSnapAccountRedirect,\n    ///: END:ONLY_INCLUDE_IF\n  ]);\n\n  const TEMPORARY_DISABLE_WHATS_NEW = true;\n  const showWhatsNewPopup = TEMPORARY_DISABLE_WHATS_NEW\n    ? false\n    : getShowWhatsNewPopup(state);\n\n  return {\n    useExternalServices: getUseExternalServices(state),\n    isBasicConfigurationModalOpen: appState.showBasicFunctionalityModal,\n    forgottenPassword,\n    hasWatchTokenPendingApprovals,\n    hasWatchNftPendingApprovals,\n    swapsEnabled,\n    hasTransactionPendingApprovals: hasTransactionPendingApprovals(state),\n    shouldShowSeedPhraseReminder: getShouldShowSeedPhraseReminder(state),\n    isPopup,\n    isNotification,\n    dataCollectionForMarketing,\n    selectedAddress,\n    firstPermissionsRequestId,\n    totalUnapprovedCount,\n    totalUnapprovedAndQueuedRequestCount,\n    participateInMetaMetrics,\n    hasApprovalFlows: getApprovalFlows(state)?.length > 0,\n    connectedStatusPopoverHasBeenShown,\n    defaultHomeActiveTabName,\n    firstTimeFlowType,\n    completedOnboarding,\n    haveSwapsQuotes: Boolean(Object.values(swapsState.quotes || {}).length),\n    swapsFetchParams: swapsState.fetchParams,\n    showAwaitingSwapScreen: swapsState.routeState === 'awaiting',\n    isMainnet: getIsMainnet(state),\n    originOfCurrentTab,\n    shouldShowWeb3ShimUsageNotification,\n    pendingConfirmations,\n    pendingConfirmationsPrioritized,\n    infuraBlocked: getInfuraBlocked(state),\n    announcementsToShow: getSortedAnnouncementsToShow(state).length > 0,\n    showWhatsNewPopup,\n    showRecoveryPhraseReminder: getShowRecoveryPhraseReminder(state),\n    showTermsOfUsePopup: getShowTermsOfUse(state),\n    showOutdatedBrowserWarning:\n      getIsBrowserDeprecated() && getShowOutdatedBrowserWarning(state),\n    seedPhraseBackedUp,\n    newNetworkAddedName: getNewNetworkAdded(state),\n    editedNetwork: getEditedNetwork(state),\n    isSigningQRHardwareTransaction: getIsSigningQRHardwareTransaction(state),\n    newNftAddedMessage: getNewNftAddedMessage(state),\n    removeNftMessage: getRemoveNftMessage(state),\n    newTokensImported: getNewTokensImported(state),\n    newTokensImportedError: getNewTokensImportedError(state),\n    newNetworkAddedConfigurationId: appState.newNetworkAddedConfigurationId,\n    onboardedInThisUISession: appState.onboardedInThisUISession,\n    hasAllowedPopupRedirectApprovals,\n    isSmartTransactionsOptInModalAvailable:\n      getIsSmartTransactionsOptInModalAvailable(state),\n    showMultiRpcModal: state.metamask.preferences.showMultiRpcModal,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\n  return {\n    setDataCollectionForMarketing: (val) =>\n      dispatch(setDataCollectionForMarketing(val)),\n    closeNotificationPopup: () => closeNotificationPopup(),\n    setConnectedStatusPopoverHasBeenShown: () =>\n      dispatch(setConnectedStatusPopoverHasBeenShown()),\n    onTabClick: (name) => dispatch(setDefaultHomeActiveTabName(name)),\n    setWeb3ShimUsageAlertDismissed: (origin) =>\n      setWeb3ShimUsageAlertDismissed(origin),\n    disableWeb3ShimUsageAlert: () =>\n      setAlertEnabledness(AlertTypes.web3ShimUsage, false),\n    hideWhatsNewPopup: () => dispatch(hideWhatsNewPopup()),\n    setRecoveryPhraseReminderHasBeenShown: () =>\n      dispatch(setRecoveryPhraseReminderHasBeenShown()),\n    setRecoveryPhraseReminderLastShown: (lastShown) =>\n      dispatch(setRecoveryPhraseReminderLastShown(lastShown)),\n    setTermsOfUseLastAgreed: (lastAgreed) => {\n      dispatch(setTermsOfUseLastAgreed(lastAgreed));\n    },\n    setOutdatedBrowserWarningLastShown: (lastShown) => {\n      dispatch(setOutdatedBrowserWarningLastShown(lastShown));\n    },\n    setNewNftAddedMessage: (message) => {\n      dispatch(setRemoveNftMessage(''));\n      dispatch(setNewNftAddedMessage(message));\n    },\n    setRemoveNftMessage: (message) => {\n      dispatch(setNewNftAddedMessage(''));\n      dispatch(setRemoveNftMessage(message));\n    },\n    setNewTokensImported: (newTokens) => {\n      dispatch(setNewTokensImported(newTokens));\n    },\n    setNewTokensImportedError: (msg) => {\n      dispatch(setNewTokensImportedError(msg));\n    },\n    clearNewNetworkAdded: () => {\n      dispatch(setNewNetworkAdded({}));\n    },\n    clearEditedNetwork: () => {\n      dispatch(setEditedNetwork());\n    },\n    setActiveNetwork: (networkConfigurationId) => {\n      dispatch(setActiveNetwork(networkConfigurationId));\n    },\n    setBasicFunctionalityModalOpen: () =>\n      dispatch(openBasicFunctionalityModal()),\n    fetchBuyableChains: () => dispatch(fetchBuyableChains()),\n  };\n};\n\nexport default compose(\n  withRouter,\n  connect(mapStateToProps, mapDispatchToProps),\n)(Home);\n","export { default } from './home.container';\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport * as Sentry from '@sentry/browser';\nimport { I18nProvider, LegacyI18nProvider } from '../contexts/i18n';\nimport {\n  MetaMetricsProvider,\n  LegacyMetaMetricsProvider,\n} from '../contexts/metametrics';\nimport { MetamaskNotificationsProvider } from '../contexts/metamask-notifications';\nimport { CurrencyRateProvider } from '../contexts/currencyRate';\nimport ErrorPage from './error';\nimport Routes from './routes';\n\nclass Index extends PureComponent {\n  state = {};\n\n  static getDerivedStateFromError(error) {\n    return { error };\n  }\n\n  componentDidCatch(error) {\n    Sentry.captureException(error);\n  }\n\n  render() {\n    const { error, errorId } = this.state;\n    const { store } = this.props;\n\n    if (error) {\n      return (\n        <Provider store={store}>\n          <I18nProvider>\n            <LegacyI18nProvider>\n              <ErrorPage error={error} errorId={errorId} />\n            </LegacyI18nProvider>\n          </I18nProvider>\n        </Provider>\n      );\n    }\n\n    return (\n      <Provider store={store}>\n        <HashRouter hashType=\"noslash\">\n          <MetaMetricsProvider>\n            <LegacyMetaMetricsProvider>\n              <I18nProvider>\n                <LegacyI18nProvider>\n                  <CurrencyRateProvider>\n                    <MetamaskNotificationsProvider>\n                      <Routes />\n                    </MetamaskNotificationsProvider>\n                  </CurrencyRateProvider>\n                </LegacyI18nProvider>\n              </I18nProvider>\n            </LegacyMetaMetricsProvider>\n          </MetaMetricsProvider>\n        </HashRouter>\n      </Provider>\n    );\n  }\n}\n\nIndex.propTypes = {\n  store: PropTypes.object,\n};\n\nexport default Index;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  createNewVaultAndRestore,\n  unMarkPasswordForgotten,\n} from '../../store/actions';\nimport { DEFAULT_ROUTE } from '../../helpers/constants/routes';\nimport CreateNewVault from '../../components/app/create-new-vault';\nimport Button from '../../components/ui/button';\nimport Box from '../../components/ui/box';\nimport { Text } from '../../components/component-library';\nimport { TextVariant, TextColor } from '../../helpers/constants/design-system';\nimport ZENDESK_URLS from '../../helpers/constants/zendesk-url';\nimport { MetaMetricsEventCategory } from '../../../shared/constants/metametrics';\n\nclass RestoreVaultPage extends Component {\n  static contextTypes = {\n    t: PropTypes.func,\n    trackEvent: PropTypes.func,\n  };\n\n  static propTypes = {\n    createNewVaultAndRestore: PropTypes.func.isRequired,\n    leaveImportSeedScreenState: PropTypes.func,\n    history: PropTypes.object,\n    isLoading: PropTypes.bool,\n  };\n\n  handleImport = async (password, seedPhrase) => {\n    const {\n      // eslint-disable-next-line no-shadow\n      createNewVaultAndRestore,\n      leaveImportSeedScreenState,\n      history,\n    } = this.props;\n\n    leaveImportSeedScreenState();\n    await createNewVaultAndRestore(password, seedPhrase);\n    this.context.trackEvent({\n      category: MetaMetricsEventCategory.Retention,\n      event: 'onboardingRestoredVault',\n      properties: {\n        action: 'userEntersSeedPhrase',\n        legacy_event: true,\n      },\n    });\n    history.push(DEFAULT_ROUTE);\n  };\n\n  render() {\n    const { t } = this.context;\n    const { isLoading } = this.props;\n\n    return (\n      <Box className=\"first-view-main-wrapper\">\n        <Box className=\"first-view-main\">\n          <Box className=\"import-account\">\n            <a\n              className=\"import-account__back-button\"\n              onClick={(e) => {\n                e.preventDefault();\n                this.props.leaveImportSeedScreenState();\n                this.props.history.push(DEFAULT_ROUTE);\n              }}\n              href=\"#\"\n            >\n              {`< ${t('back')}`}\n            </a>\n            <Text variant={TextVariant.displayMd} color={TextColor.textDefault}>\n              {t('resetWallet')}\n            </Text>\n            <Text color={TextColor.textDefault}>\n              {t('resetWalletSubHeader')}\n            </Text>\n            <Text color={TextColor.textDefault} marginTop={4} marginBottom={4}>\n              {t('resetWalletUsingSRP', [\n                <Button\n                  type=\"link\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href={ZENDESK_URLS.ADD_MISSING_ACCOUNTS}\n                  key=\"import-account-secretphase\"\n                  className=\"import-account__link\"\n                >\n                  {t('reAddAccounts')}\n                </Button>,\n                <Button\n                  type=\"link\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href={ZENDESK_URLS.IMPORT_ACCOUNTS}\n                  key=\"import-account-reimport-accounts\"\n                  className=\"import-account__link\"\n                >\n                  {t('reAdded')}\n                </Button>,\n                <Button\n                  type=\"link\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href={ZENDESK_URLS.ADD_CUSTOM_TOKENS}\n                  key=\"import-account-readd-tokens\"\n                  className=\"import-account__link\"\n                >\n                  {t('reAdded')}\n                </Button>,\n              ])}\n            </Text>\n            <Text color={TextColor.textDefault} margin={0} marginBottom={4}>\n              {t('resetWalletWarning')}\n            </Text>\n            <CreateNewVault\n              disabled={isLoading}\n              onSubmit={this.handleImport}\n              submitText={t('restore')}\n            />\n          </Box>\n        </Box>\n      </Box>\n    );\n  }\n}\n\nexport default connect(\n  ({ appState: { isLoading } }) => ({ isLoading }),\n  (dispatch) => ({\n    leaveImportSeedScreenState: () => {\n      dispatch(unMarkPasswordForgotten());\n    },\n    createNewVaultAndRestore: (pw, seed) =>\n      dispatch(createNewVaultAndRestore(pw, seed)),\n  }),\n)(RestoreVaultPage);\n","import qrCode from 'qrcode-generator';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventKeyType,\n  MetaMetricsEventName,\n} from '../../../shared/constants/metametrics';\nimport HoldToRevealModal from '../../components/app/modals/hold-to-reveal-modal/hold-to-reveal-modal';\nimport {\n  BUTTON_SIZES,\n  BUTTON_VARIANT,\n  BannerAlert,\n  Button,\n  HelpText,\n  HelpTextSeverity,\n  Label,\n  Text,\n  TextField,\n  TextFieldSize,\n  TextFieldType,\n} from '../../components/component-library';\nimport Box from '../../components/ui/box';\nimport ExportTextContainer from '../../components/ui/export-text-container';\nimport { Tab, Tabs } from '../../components/ui/tabs';\nimport { MetaMetricsContext } from '../../contexts/metametrics';\nimport { getMostRecentOverviewPage } from '../../ducks/history/history';\nimport {\n  AlignItems,\n  BlockSize,\n  Display,\n  JustifyContent,\n  Severity,\n  Size,\n  TextVariant,\n} from '../../helpers/constants/design-system';\nimport ZENDESK_URLS from '../../helpers/constants/zendesk-url';\nimport { useI18nContext } from '../../hooks/useI18nContext';\nimport { requestRevealSeedWords } from '../../store/actions';\n\nconst PASSWORD_PROMPT_SCREEN = 'PASSWORD_PROMPT_SCREEN';\nconst REVEAL_SEED_SCREEN = 'REVEAL_SEED_SCREEN';\n\nexport default function RevealSeedPage() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const t = useI18nContext();\n  const trackEvent = useContext(MetaMetricsContext);\n\n  const [screen, setScreen] = useState(PASSWORD_PROMPT_SCREEN);\n  const [password, setPassword] = useState('');\n  const [seedWords, setSeedWords] = useState(null);\n  const [completedLongPress, setCompletedLongPress] = useState(false);\n  const [error, setError] = useState(null);\n  const mostRecentOverviewPage = useSelector(getMostRecentOverviewPage);\n  const [isShowingHoldModal, setIsShowingHoldModal] = useState(false);\n\n  useEffect(() => {\n    const passwordBox = document.getElementById('password-box');\n    if (passwordBox) {\n      passwordBox.focus();\n    }\n  }, []);\n\n  const renderQR = () => {\n    const qrImage = qrCode(0, 'L');\n    qrImage.addData(seedWords);\n    qrImage.make();\n    return qrImage;\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setSeedWords(null);\n    setCompletedLongPress(false);\n    setError(null);\n    dispatch(requestRevealSeedWords(password))\n      .then((revealedSeedWords) => {\n        trackEvent({\n          category: MetaMetricsEventCategory.Keys,\n          event: MetaMetricsEventName.KeyExportRevealed,\n          properties: {\n            key_type: MetaMetricsEventKeyType.Srp,\n          },\n        });\n        setSeedWords(revealedSeedWords);\n\n        setIsShowingHoldModal(true);\n      })\n      .catch((e) => {\n        trackEvent({\n          category: MetaMetricsEventCategory.Keys,\n          event: MetaMetricsEventName.KeyExportFailed,\n          properties: {\n            key_type: MetaMetricsEventKeyType.Srp,\n            reason: e.message, // 'incorrect_password',\n          },\n        });\n        setError(e.message);\n      });\n  };\n\n  const renderWarning = () => {\n    return (\n      <BannerAlert severity={Severity.Danger}>\n        <Text variant={TextVariant.bodyMd}>\n          {t('revealSeedWordsWarning', [\n            <Text\n              key=\"reveal-seed-words-warning-2\"\n              variant={TextVariant.bodyMdBold}\n              as=\"strong\"\n            >\n              {t('revealSeedWordsWarning2')}\n            </Text>,\n          ])}\n        </Text>\n      </BannerAlert>\n    );\n  };\n\n  const renderPasswordPromptContent = () => {\n    return (\n      <form onSubmit={handleSubmit}>\n        <Label htmlFor=\"password-box\">{t('enterPasswordContinue')}</Label>\n        <TextField\n          inputProps={{\n            'data-testid': 'input-password',\n          }}\n          type={TextFieldType.Password}\n          placeholder={t('makeSureNoOneWatching')}\n          id=\"password-box\"\n          size={TextFieldSize.Large}\n          value={password}\n          onChange={(event) => setPassword(event.target.value)}\n          error={Boolean(error)}\n          width={BlockSize.Full}\n        />\n        {error && (\n          <HelpText severity={HelpTextSeverity.Danger}>{error}</HelpText>\n        )}\n      </form>\n    );\n  };\n\n  const renderRevealSeedContent = () => {\n    // default for SRP_VIEW_SRP_TEXT event because this is the first thing shown after rendering\n    trackEvent({\n      category: MetaMetricsEventCategory.Keys,\n      event: MetaMetricsEventName.SrpViewSrpText,\n      properties: {\n        key_type: MetaMetricsEventKeyType.Srp,\n      },\n    });\n\n    return (\n      <div>\n        <Tabs\n          defaultActiveTabName={t('revealSeedWordsText')}\n          onTabClick={(tabName) => {\n            if (tabName === 'text-seed') {\n              trackEvent({\n                category: MetaMetricsEventCategory.Keys,\n                event: MetaMetricsEventName.SrpViewSrpText,\n                properties: {\n                  key_type: MetaMetricsEventKeyType.Srp,\n                },\n              });\n            } else if (tabName === 'qr-srp') {\n              trackEvent({\n                category: MetaMetricsEventCategory.Keys,\n                event: MetaMetricsEventName.SrpViewsSrpQR,\n                properties: {\n                  key_type: MetaMetricsEventKeyType.Srp,\n                },\n              });\n            }\n          }}\n        >\n          <Tab\n            name={t('revealSeedWordsText')}\n            className=\"reveal-seed__tab\"\n            activeClassName=\"reveal-seed__active-tab\"\n            tabKey=\"text-seed\"\n          >\n            <Label marginTop={4}>{t('yourPrivateSeedPhrase')}</Label>\n            <ExportTextContainer\n              text={seedWords}\n              onClickCopy={() => {\n                trackEvent({\n                  category: MetaMetricsEventCategory.Keys,\n                  event: MetaMetricsEventName.KeyExportCopied,\n                  properties: {\n                    key_type: MetaMetricsEventKeyType.Srp,\n                    copy_method: 'clipboard',\n                  },\n                });\n                trackEvent({\n                  category: MetaMetricsEventCategory.Keys,\n                  event: MetaMetricsEventName.SrpCopiedToClipboard,\n                  properties: {\n                    key_type: MetaMetricsEventKeyType.Srp,\n                    copy_method: 'clipboard',\n                  },\n                });\n              }}\n            />\n          </Tab>\n          <Tab\n            name={t('revealSeedWordsQR')}\n            className=\"reveal-seed__tab\"\n            activeClassName=\"reveal-seed__active-tab\"\n            tabKey=\"qr-srp\"\n          >\n            <Box\n              display={Display.Flex}\n              justifyContent={JustifyContent.center}\n              alignItems={AlignItems.center}\n              paddingTop={4}\n              data-testid=\"qr-srp\"\n            >\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: renderQR().createTableTag(5, 15),\n                }}\n              />\n            </Box>\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  };\n\n  const renderPasswordPromptFooter = () => {\n    return (\n      <Box display={Display.Flex} marginTop=\"auto\" gap={4}>\n        <Button\n          width={BlockSize.Full}\n          size={Size.LG}\n          variant={BUTTON_VARIANT.SECONDARY}\n          onClick={() => {\n            trackEvent({\n              category: MetaMetricsEventCategory.Keys,\n              event: MetaMetricsEventName.KeyExportCanceled,\n              properties: {\n                key_type: MetaMetricsEventKeyType.Srp,\n              },\n            });\n            trackEvent({\n              category: MetaMetricsEventCategory.Keys,\n              event: MetaMetricsEventName.SrpRevealCancelled,\n              properties: {\n                key_type: MetaMetricsEventKeyType.Srp,\n              },\n            });\n            history.push(mostRecentOverviewPage);\n          }}\n        >\n          {t('cancel')}\n        </Button>\n        <Button\n          width={BlockSize.Full}\n          size={Size.LG}\n          onClick={(event) => {\n            trackEvent({\n              category: MetaMetricsEventCategory.Keys,\n              event: MetaMetricsEventName.KeyExportRequested,\n              properties: {\n                key_type: MetaMetricsEventKeyType.Srp,\n              },\n            });\n            trackEvent({\n              category: MetaMetricsEventCategory.Keys,\n              event: MetaMetricsEventName.SrpRevealNextClicked,\n              properties: {\n                key_type: MetaMetricsEventKeyType.Srp,\n              },\n            });\n            handleSubmit(event);\n          }}\n          disabled={password === ''}\n        >\n          {t('next')}\n        </Button>\n      </Box>\n    );\n  };\n\n  const renderRevealSeedFooter = () => {\n    return (\n      <Box marginTop=\"auto\">\n        <Button\n          variant={BUTTON_VARIANT.SECONDARY}\n          width={BlockSize.Full}\n          size={Size.LG}\n          onClick={() => {\n            trackEvent({\n              category: MetaMetricsEventCategory.Keys,\n              event: MetaMetricsEventName.SrpRevealCloseClicked,\n              properties: {\n                key_type: MetaMetricsEventKeyType.Srp,\n              },\n            });\n            history.push(mostRecentOverviewPage);\n          }}\n        >\n          {t('close')}\n        </Button>\n      </Box>\n    );\n  };\n\n  const renderContent = () => {\n    return screen === PASSWORD_PROMPT_SCREEN || !completedLongPress\n      ? renderPasswordPromptContent()\n      : renderRevealSeedContent();\n  };\n\n  const renderFooter = () => {\n    return screen === PASSWORD_PROMPT_SCREEN || !completedLongPress\n      ? renderPasswordPromptFooter()\n      : renderRevealSeedFooter();\n  };\n\n  return (\n    <Box\n      className=\"page-container\"\n      paddingTop={8}\n      paddingBottom={8}\n      paddingLeft={4}\n      paddingRight={4}\n      gap={4}\n    >\n      <Text variant={TextVariant.headingLg}>{t('secretRecoveryPhrase')}</Text>\n      <Text variant={TextVariant.bodyMd}>\n        {t('revealSeedWordsDescription1', [\n          <Button\n            key=\"srp-learn-srp\"\n            variant={BUTTON_VARIANT.LINK}\n            size={BUTTON_SIZES.INHERIT}\n            as=\"a\"\n            href={ZENDESK_URLS.SECRET_RECOVERY_PHRASE}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {t('revealSeedWordsSRPName')}\n          </Button>,\n          <Text\n            key=\"reveal-seed-word-part-3\"\n            variant={TextVariant.bodyMdBold}\n            as=\"strong\"\n          >\n            {t('revealSeedWordsDescription3')}\n          </Text>,\n        ])}\n      </Text>\n      <Text variant={TextVariant.bodyMd}>\n        {t('revealSeedWordsDescription2', [\n          <Button\n            key=\"srp-learn-more-non-custodial\"\n            variant={BUTTON_VARIANT.LINK}\n            size={BUTTON_SIZES.INHERIT}\n            as=\"a\"\n            href={ZENDESK_URLS.NON_CUSTODIAL_WALLET}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {t('revealSeedWordsNonCustodialWallet')}\n          </Button>,\n        ])}\n      </Text>\n      {renderWarning()}\n      {renderContent()}\n      {renderFooter()}\n      <HoldToRevealModal\n        isOpen={isShowingHoldModal}\n        onClose={() => {\n          trackEvent({\n            category: MetaMetricsEventCategory.Keys,\n            event: MetaMetricsEventName.SrpHoldToRevealCloseClicked,\n            properties: {\n              key_type: MetaMetricsEventKeyType.Srp,\n            },\n          });\n          setIsShowingHoldModal(false);\n        }}\n        onLongPressed={() => {\n          setCompletedLongPress(true);\n          setIsShowingHoldModal(false);\n          setScreen(REVEAL_SEED_SCREEN);\n        }}\n        holdToRevealType=\"SRP\"\n      />\n    </Box>\n  );\n}\n","export { default } from './lock.container';\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Loading from '../../components/ui/loading-screen';\nimport { DEFAULT_ROUTE } from '../../helpers/constants/routes';\n\nexport default class Lock extends PureComponent {\n  static propTypes = {\n    history: PropTypes.object,\n    isUnlocked: PropTypes.bool,\n    lockMetamask: PropTypes.func,\n  };\n\n  componentDidMount() {\n    const { lockMetamask, isUnlocked, history } = this.props;\n\n    if (isUnlocked) {\n      lockMetamask().then(() => history.push(DEFAULT_ROUTE));\n    } else {\n      history.replace(DEFAULT_ROUTE);\n    }\n  }\n\n  render() {\n    return <Loading />;\n  }\n}\n","import { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { lockMetamask } from '../../store/actions';\nimport Lock from './lock.component';\n\nconst mapStateToProps = (state) => {\n  const {\n    metamask: { isUnlocked },\n  } = state;\n\n  return {\n    isUnlocked,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    lockMetamask: () => dispatch(lockMetamask()),\n  };\n};\n\nexport default compose(\n  withRouter,\n  connect(mapStateToProps, mapDispatchToProps),\n)(Lock);\n","export { default } from './notification-details';\n","import React from 'react';\nimport type { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { Box } from '../../../components/component-library';\nimport {\n  Display,\n  FlexDirection,\n} from '../../../helpers/constants/design-system';\nimport type { NotificationComponent } from '../../notifications/notification-components/types/notifications/notifications';\n\ntype Notification = NotificationServicesController.Types.INotification;\n\ntype NotificationDetailsBodyProps = {\n  body: NotificationComponent['details']['body'];\n  notification: Notification;\n};\n\nexport const NotificationDetailsBody = ({\n  body,\n  notification,\n}: NotificationDetailsBodyProps) => {\n  return (\n    <Box\n      display={Display.Flex}\n      flexDirection={FlexDirection.Column}\n      padding={0}\n    >\n      {body.type === 'body_feature_announcement' && (\n        <>\n          <body.Image notification={notification} />\n          <body.Description notification={notification} />\n        </>\n      )}\n      {body.type === 'body_onchain_notification' && (\n        <>\n          {body.Image && <body.Image notification={notification} />}\n          {body.From && <body.From notification={notification} />}\n          {body.To && <body.To notification={notification} />}\n          {body.Account && <body.Account notification={notification} />}\n          {body.Asset && <body.Asset notification={notification} />}\n          {body.AssetReceived && (\n            <body.AssetReceived notification={notification} />\n          )}\n          {body.Status && <body.Status notification={notification} />}\n          {body.Network && <body.Network notification={notification} />}\n          {body.Rate && <body.Rate notification={notification} />}\n          {body.Provider && <body.Provider notification={notification} />}\n          {body.NetworkFee && <body.NetworkFee notification={notification} />}\n        </>\n      )}\n    </Box>\n  );\n};\n","import React from 'react';\nimport type { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { Box } from '../../../components/component-library';\nimport {\n  BlockSize,\n  Display,\n  FlexDirection,\n  JustifyContent,\n} from '../../../helpers/constants/design-system';\nimport type { NotificationComponent } from '../../notifications/notification-components/types/notifications/notifications';\n\ntype Notification = NotificationServicesController.Types.INotification;\n\ntype NotificationDetailsFooterProps = {\n  footer: NotificationComponent['footer'];\n  notification: Notification;\n};\n\nexport const NotificationDetailsFooter = ({\n  footer,\n  notification,\n}: NotificationDetailsFooterProps) => {\n  return (\n    <Box\n      width={BlockSize.Full}\n      display={Display.Flex}\n      flexDirection={FlexDirection.Row}\n      justifyContent={JustifyContent.spaceBetween}\n      padding={4}\n      gap={4}\n    >\n      {footer.type === 'footer_onchain_notification' && (\n        <>\n          <footer.ScanLink notification={notification} />\n        </>\n      )}\n      {footer.type === 'footer_feature_announcement' && (\n        <>\n          <footer.ExtensionLink notification={notification} />\n        </>\n      )}\n    </Box>\n  );\n};\n","import React from 'react';\nimport {\n  IconName,\n  ButtonIcon,\n  ButtonIconSize,\n  HeaderBase,\n} from '../../../components/component-library';\n\nexport const NotificationDetailsHeader = ({\n  children,\n  onClickBack,\n}: {\n  children: React.ReactNode;\n  onClickBack: () => void;\n}) => {\n  return (\n    <HeaderBase\n      padding={4}\n      startAccessory={\n        <ButtonIcon\n          ariaLabel=\"Back\"\n          iconName={IconName.ArrowLeft}\n          size={ButtonIconSize.Sm}\n          onClick={onClickBack}\n        />\n      }\n      endAccessory={null}\n    >\n      {children}\n    </HeaderBase>\n  );\n};\n","import React, { useCallback, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport type { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { Box } from '../../components/component-library';\nimport {\n  BlockSize,\n  Display,\n  FlexDirection,\n  JustifyContent,\n} from '../../helpers/constants/design-system';\nimport { NOTIFICATIONS_ROUTE } from '../../helpers/constants/routes';\nimport { NotificationsPage } from '../../components/multichain';\nimport { Content } from '../../components/multichain/pages/page';\nimport { useMarkNotificationAsRead } from '../../hooks/metamask-notifications/useNotifications';\nimport { getMetamaskNotificationById } from '../../selectors/metamask-notifications/metamask-notifications';\nimport {\n  NotificationComponents,\n  hasNotificationComponents,\n} from '../notifications/notification-components';\nimport { getExtractIdentifier } from './utils/utils';\nimport { NotificationDetailsHeader } from './notification-details-header/notification-details-header';\nimport { NotificationDetailsBody } from './notification-details-body/notification-details-body';\nimport { NotificationDetailsFooter } from './notification-details-footer/notification-details-footer';\n\ntype Notification = NotificationServicesController.Types.INotification;\n\nfunction useModalNavigation() {\n  const history = useHistory();\n\n  const redirectToNotifications = useCallback(() => {\n    history.push(NOTIFICATIONS_ROUTE);\n  }, [history]);\n\n  return {\n    redirectToNotifications,\n  };\n}\n\nfunction useNotificationByPath() {\n  const { pathname } = useLocation();\n  const id = getExtractIdentifier(pathname);\n  const notification = useSelector(getMetamaskNotificationById(id));\n\n  return {\n    notification,\n  };\n}\n\nfunction useEffectOnNotificationView(notificationData?: Notification) {\n  const { markNotificationAsRead } = useMarkNotificationAsRead();\n  useEffect(() => {\n    if (notificationData) {\n      markNotificationAsRead([\n        {\n          id: notificationData.id,\n          type: notificationData.type,\n          isRead: notificationData.isRead,\n        },\n      ]);\n    }\n  }, [markNotificationAsRead, notificationData]);\n}\n\nexport default function NotificationDetails() {\n  const { redirectToNotifications } = useModalNavigation();\n  const { notification } = useNotificationByPath();\n  useEffectOnNotificationView(notification);\n\n  // No Notification\n  if (!notification) {\n    redirectToNotifications();\n    return null;\n  }\n\n  // Invalid Notification\n  if (!hasNotificationComponents(notification.type)) {\n    redirectToNotifications();\n    return null;\n  }\n\n  const ncs = NotificationComponents[notification.type];\n\n  return (\n    <NotificationsPage>\n      <NotificationDetailsHeader onClickBack={redirectToNotifications}>\n        <ncs.details.title notification={notification} />\n      </NotificationDetailsHeader>\n      <Content padding={0}>\n        <Box\n          display={Display.Flex}\n          flexDirection={FlexDirection.Column}\n          gap={2}\n          width={BlockSize.Full}\n          height={BlockSize.Full}\n          justifyContent={JustifyContent.spaceBetween}\n        >\n          <NotificationDetailsBody\n            body={ncs.details.body}\n            notification={notification}\n          />\n          <NotificationDetailsFooter\n            footer={ncs.footer}\n            notification={notification}\n          />\n        </Box>\n      </Content>\n    </NotificationsPage>\n  );\n}\n","/**\n * Custom util to extract a specific identifier from the URL pathname.\n * Assumes the URL hash follows a structure like \"#/somePrefix/identifier\".\n * Handles undefined or non-string input gracefully by returning an empty string.\n *\n * @param pathname - The URL pathname to extract the identifier from.\n */\nexport function getExtractIdentifier(pathname: string | undefined): string {\n  if (typeof pathname !== 'string') {\n    return '';\n  }\n  const parts = pathname.split('/');\n  return parts.length > 2 ? parts[2] : '';\n}\n","export { default } from './notifications-settings';\n","import React, {\n  useEffect,\n  useState,\n  useMemo,\n  useCallback,\n  useContext,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { useI18nContext } from '../../hooks/useI18nContext';\nimport { MetaMetricsContext } from '../../contexts/metametrics';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../shared/constants/metametrics';\nimport {\n  useEnableNotifications,\n  useDisableNotifications,\n} from '../../hooks/metamask-notifications/useNotifications';\nimport {\n  selectIsMetamaskNotificationsEnabled,\n  getIsUpdatingMetamaskNotifications,\n} from '../../selectors/metamask-notifications/metamask-notifications';\nimport { selectIsProfileSyncingEnabled } from '../../selectors/metamask-notifications/profile-syncing';\nimport { useMetamaskNotificationsContext } from '../../contexts/metamask-notifications/metamask-notifications';\nimport { Box, Text } from '../../components/component-library';\nimport {\n  Display,\n  JustifyContent,\n  FlexDirection,\n  AlignItems,\n  TextVariant,\n  TextColor,\n} from '../../helpers/constants/design-system';\nimport {\n  NotificationsSettingsBox,\n  NotificationsSettingsType,\n} from '../../components/multichain';\n\nexport function NotificationsSettingsAllowNotifications({\n  loading,\n  setLoading,\n  disabled,\n}: {\n  loading: boolean;\n  setLoading: (loading: boolean) => void;\n  disabled: boolean;\n}) {\n  const t = useI18nContext();\n  const trackEvent = useContext(MetaMetricsContext);\n  const { listNotifications } = useMetamaskNotificationsContext();\n  const isMetamaskNotificationsEnabled = useSelector(\n    selectIsMetamaskNotificationsEnabled,\n  );\n  const [toggleValue, setToggleValue] = useState(\n    isMetamaskNotificationsEnabled,\n  );\n  const isUpdatingMetamaskNotifications = useSelector(\n    getIsUpdatingMetamaskNotifications,\n  );\n  const isProfileSyncingEnabled = useSelector(selectIsProfileSyncingEnabled);\n\n  const { enableNotifications, error: errorEnableNotifications } =\n    useEnableNotifications();\n  const { disableNotifications, error: errorDisableNotifications } =\n    useDisableNotifications();\n  const error = errorEnableNotifications || errorDisableNotifications;\n\n  useEffect(() => {\n    setLoading(isUpdatingMetamaskNotifications);\n  }, [isUpdatingMetamaskNotifications, setLoading]);\n\n  useEffect(() => {\n    setToggleValue(isMetamaskNotificationsEnabled);\n  }, [isMetamaskNotificationsEnabled]);\n\n  useEffect(() => {\n    if (isMetamaskNotificationsEnabled && !error) {\n      listNotifications();\n    }\n  }, [isMetamaskNotificationsEnabled, error, listNotifications]);\n\n  const toggleNotifications = useCallback(async () => {\n    setLoading(true);\n    if (isMetamaskNotificationsEnabled) {\n      await disableNotifications();\n      trackEvent({\n        category: MetaMetricsEventCategory.NotificationSettings,\n        event: MetaMetricsEventName.NotificationsSettingsUpdated,\n        properties: {\n          settings_type: 'notifications',\n          was_profile_syncing_on: isProfileSyncingEnabled,\n          old_value: true,\n          new_value: false,\n        },\n      });\n    } else {\n      await enableNotifications();\n      trackEvent({\n        category: MetaMetricsEventCategory.NotificationSettings,\n        event: MetaMetricsEventName.NotificationsSettingsUpdated,\n        properties: {\n          settings_type: 'notifications',\n          was_profile_syncing_on: isProfileSyncingEnabled,\n          old_value: false,\n          new_value: true,\n        },\n      });\n    }\n    setLoading(false);\n    setToggleValue(!toggleValue);\n  }, [\n    setLoading,\n    isMetamaskNotificationsEnabled,\n    disableNotifications,\n    enableNotifications,\n    toggleValue,\n  ]);\n\n  const privacyLink = useMemo(\n    () => (\n      <Text\n        as=\"a\"\n        href=\"https://support.metamask.io/privacy-and-security/profile-privacy\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        key=\"privacy-link\"\n        color={TextColor.infoDefault}\n      >\n        {t('notificationsSettingsPageAllowNotificationsLink')}\n      </Text>\n    ),\n    [t],\n  );\n\n  return (\n    <Box\n      display={Display.Flex}\n      justifyContent={JustifyContent.flexStart}\n      flexDirection={FlexDirection.Column}\n      alignItems={AlignItems.flexStart}\n      gap={4}\n      paddingLeft={8}\n      paddingRight={8}\n      paddingBottom={8}\n      data-testid=\"notifications-settings-allow-notifications\"\n    >\n      <NotificationsSettingsBox\n        value={toggleValue}\n        onToggle={toggleNotifications}\n        disabled={disabled}\n        loading={loading}\n      >\n        <NotificationsSettingsType title={t('allowNotifications')} />\n      </NotificationsSettingsBox>\n      <Text variant={TextVariant.bodyMd} color={TextColor.textAlternative}>\n        {t('notificationsSettingsPageAllowNotifications', [privacyLink])}\n      </Text>\n      {error && (\n        <Box>\n          <Text as=\"p\" color={TextColor.errorDefault}>\n            {isMetamaskNotificationsEnabled\n              ? t('turnOffMetamaskNotificationsError')\n              : t('turnOnMetamaskNotificationsError')}\n          </Text>\n        </Box>\n      )}\n    </Box>\n  );\n}\n","import React, { useState, useCallback, useContext } from 'react';\nimport { MetaMetricsContext } from '../../contexts/metametrics';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../shared/constants/metametrics';\nimport { useSwitchAccountNotificationsChange } from '../../hooks/metamask-notifications/useSwitchNotifications';\nimport {\n  NotificationsSettingsBox,\n  NotificationsSettingsAccount,\n} from '../../components/multichain';\nimport { useListNotifications } from '../../hooks/metamask-notifications/useNotifications';\n\ntype NotificationsSettingsPerAccountProps = {\n  address: string;\n  name: string;\n\n  isEnabled: boolean;\n  isLoading?: boolean;\n  disabledSwitch?: boolean;\n  refetchAccountSettings: () => Promise<void>;\n};\n\nfunction useUpdateAccountSetting(\n  address: string,\n  refetchAccountSettings: () => Promise<void>,\n) {\n  const { onChange: switchAccountNotifications, error } =\n    useSwitchAccountNotificationsChange();\n  const { listNotifications: refetch } = useListNotifications();\n\n  // Local states\n  const [loading, setLoading] = useState(false);\n\n  const toggleAccount = useCallback(\n    async (state: boolean) => {\n      setLoading(true);\n      try {\n        await switchAccountNotifications([address], state);\n        await refetchAccountSettings();\n        refetch();\n      } catch {\n        // Do nothing (we don't need to propagate this)\n      }\n      setLoading(false);\n    },\n    [address, refetch, refetchAccountSettings, switchAccountNotifications],\n  );\n\n  return { toggleAccount, loading, error };\n}\n\nexport const NotificationsSettingsPerAccount = ({\n  address,\n  name,\n  isEnabled,\n  isLoading,\n  disabledSwitch,\n  refetchAccountSettings,\n}: NotificationsSettingsPerAccountProps) => {\n  const trackEvent = useContext(MetaMetricsContext);\n\n  const {\n    toggleAccount,\n    loading: isUpdatingAccount,\n    error: accountError,\n  } = useUpdateAccountSetting(address, refetchAccountSettings);\n\n  const loading = isLoading || isUpdatingAccount;\n  const error = accountError;\n\n  const handleToggleAccountNotifications = useCallback(async () => {\n    trackEvent({\n      category: MetaMetricsEventCategory.NotificationSettings,\n      event: MetaMetricsEventName.NotificationsSettingsUpdated,\n      properties: {\n        settings_type: 'account_notifications',\n        old_value: isEnabled,\n        new_value: !isEnabled,\n      },\n    });\n    await toggleAccount(!isEnabled);\n  }, [address, isEnabled, toggleAccount, trackEvent]);\n\n  return (\n    <>\n      <NotificationsSettingsBox\n        value={isEnabled ?? false}\n        onToggle={handleToggleAccountNotifications}\n        key={address}\n        disabled={disabledSwitch}\n        loading={loading}\n        error={error}\n      >\n        <NotificationsSettingsAccount address={address} name={name} />\n      </NotificationsSettingsBox>\n    </>\n  );\n};\n","import React, { useState, useContext } from 'react';\nimport { useSelector } from 'react-redux';\nimport { MetaMetricsContext } from '../../contexts/metametrics';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../shared/constants/metametrics';\nimport { useI18nContext } from '../../hooks/useI18nContext';\nimport { useMetamaskNotificationsContext } from '../../contexts/metamask-notifications/metamask-notifications';\nimport { useSwitchFeatureAnnouncementsChange } from '../../hooks/metamask-notifications/useSwitchNotifications';\nimport { Box, IconName, Text } from '../../components/component-library';\nimport {\n  BlockSize,\n  BorderColor,\n  Display,\n  JustifyContent,\n  FlexDirection,\n  AlignItems,\n  TextVariant,\n  TextColor,\n} from '../../helpers/constants/design-system';\nimport {\n  NotificationsSettingsBox,\n  NotificationsSettingsType,\n} from '../../components/multichain';\nimport { selectIsFeatureAnnouncementsEnabled } from '../../selectors/metamask-notifications/metamask-notifications';\n\nexport function NotificationsSettingsTypes({\n  disabled,\n}: {\n  disabled: boolean;\n}) {\n  // Context\n  const t = useI18nContext();\n  const { listNotifications } = useMetamaskNotificationsContext();\n  const trackEvent = useContext(MetaMetricsContext);\n\n  // Selectors\n  const isFeatureAnnouncementsEnabled = useSelector(\n    selectIsFeatureAnnouncementsEnabled,\n  );\n\n  // Hooks\n  const {\n    onChange: onChangeFeatureAnnouncements,\n    error: errorFeatureAnnouncements,\n  } = useSwitchFeatureAnnouncementsChange();\n\n  // States\n  const [featureAnnouncementsEnabled, setFeatureAnnouncementsEnabled] =\n    useState<boolean>(isFeatureAnnouncementsEnabled);\n\n  const onToggleFeatureAnnouncements = async () => {\n    setFeatureAnnouncementsEnabled(!featureAnnouncementsEnabled);\n    try {\n      onChangeFeatureAnnouncements(!featureAnnouncementsEnabled);\n      trackEvent({\n        category: MetaMetricsEventCategory.NotificationSettings,\n        event: MetaMetricsEventName.NotificationsSettingsUpdated,\n        properties: {\n          settings_type: 'product_announcements',\n          old_value: featureAnnouncementsEnabled,\n          new_value: !featureAnnouncementsEnabled,\n        },\n      });\n      listNotifications();\n    } catch (error) {\n      setFeatureAnnouncementsEnabled(featureAnnouncementsEnabled);\n    }\n  };\n\n  return (\n    <>\n      <Box\n        paddingLeft={8}\n        paddingRight={8}\n        paddingBottom={4}\n        paddingTop={4}\n        data-testid=\"notifications-settings-per-types\"\n      >\n        <Text variant={TextVariant.bodyMd} color={TextColor.textDefault}>\n          {t('customizeYourNotifications')}\n        </Text>\n        <Text variant={TextVariant.bodySm} color={TextColor.textAlternative}>\n          {t('customizeYourNotificationsText')}\n        </Text>\n      </Box>\n      <Box\n        display={Display.Flex}\n        justifyContent={JustifyContent.flexStart}\n        flexDirection={FlexDirection.Column}\n        alignItems={AlignItems.flexStart}\n        gap={6}\n        paddingLeft={8}\n        paddingRight={8}\n        paddingBottom={4}\n      >\n        {/* Product announcements */}\n        <NotificationsSettingsBox\n          value={featureAnnouncementsEnabled}\n          onToggle={onToggleFeatureAnnouncements}\n          error={errorFeatureAnnouncements}\n          disabled={disabled}\n        >\n          <NotificationsSettingsType\n            icon={IconName.Star}\n            title={t('productAnnouncements')}\n          />\n        </NotificationsSettingsBox>\n      </Box>\n      <Box\n        borderColor={BorderColor.borderMuted}\n        width={BlockSize.Full}\n        style={{ height: '1px', borderBottomWidth: 0 }}\n      ></Box>\n    </>\n  );\n}\n","import React, { useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport type { InternalAccount } from '@metamask/keyring-api';\nimport { useI18nContext } from '../../hooks/useI18nContext';\nimport { NOTIFICATIONS_ROUTE } from '../../helpers/constants/routes';\nimport {\n  Box,\n  IconName,\n  Text,\n  ButtonIcon,\n  ButtonIconSize,\n} from '../../components/component-library';\nimport {\n  BlockSize,\n  BorderColor,\n  Display,\n  JustifyContent,\n  FlexDirection,\n  AlignItems,\n  TextVariant,\n  TextColor,\n} from '../../helpers/constants/design-system';\nimport { NotificationsPage } from '../../components/multichain';\nimport { Content, Header } from '../../components/multichain/pages/page';\nimport {\n  selectIsMetamaskNotificationsEnabled,\n  getIsUpdatingMetamaskNotifications,\n} from '../../selectors/metamask-notifications/metamask-notifications';\nimport { getInternalAccounts } from '../../selectors';\nimport { useAccountSettingsProps } from '../../hooks/metamask-notifications/useSwitchNotifications';\nimport { NotificationsSettingsAllowNotifications } from './notifications-settings-allow-notifications';\nimport { NotificationsSettingsTypes } from './notifications-settings-types';\nimport { NotificationsSettingsPerAccount } from './notifications-settings-per-account';\n\n// Define KeyringType interface\ntype KeyringType = {\n  type: string;\n};\n\n// Define AccountType interface\ntype AccountType = InternalAccount & {\n  balance: string;\n  keyring: KeyringType;\n  label: string;\n};\n\nexport default function NotificationsSettings() {\n  const history = useHistory();\n  const t = useI18nContext();\n\n  // Selectors\n  const isMetamaskNotificationsEnabled = useSelector(\n    selectIsMetamaskNotificationsEnabled,\n  );\n  const isUpdatingMetamaskNotifications = useSelector(\n    getIsUpdatingMetamaskNotifications,\n  );\n  const accounts: AccountType[] = useSelector(getInternalAccounts);\n\n  // States\n  const [loadingAllowNotifications, setLoadingAllowNotifications] =\n    useState<boolean>(isUpdatingMetamaskNotifications);\n\n  const accountAddresses = useMemo(\n    () => accounts.map((a) => a.address),\n    [accounts],\n  );\n\n  // Account Settings\n  const accountSettingsProps = useAccountSettingsProps(accountAddresses);\n  const updatingAccounts = accountSettingsProps.accountsBeingUpdated.length > 0;\n  const refetchAccountSettings = async () => {\n    await accountSettingsProps.update(accountAddresses);\n  };\n\n  return (\n    <NotificationsPage>\n      <Header\n        startAccessory={\n          <ButtonIcon\n            ariaLabel=\"Back\"\n            iconName={IconName.ArrowLeft}\n            size={ButtonIconSize.Sm}\n            onClick={() => history.push(NOTIFICATIONS_ROUTE)}\n          />\n        }\n        endAccessory={null}\n      >\n        {t('notifications')}\n      </Header>\n      <Content padding={0}>\n        {/* Allow notifications */}\n        <NotificationsSettingsAllowNotifications\n          loading={loadingAllowNotifications}\n          setLoading={setLoadingAllowNotifications}\n          data-testid=\"notifications-settings-allow-notifications\"\n          disabled={updatingAccounts}\n        />\n        <Box\n          borderColor={BorderColor.borderMuted}\n          width={BlockSize.Full}\n          style={{ height: '1px', borderBottomWidth: 0 }}\n        ></Box>\n\n        {isMetamaskNotificationsEnabled && (\n          <>\n            {/* Notifications settings per types */}\n            <NotificationsSettingsTypes\n              disabled={loadingAllowNotifications || updatingAccounts}\n            />\n\n            {/* Notifications settings per account */}\n            <>\n              <Box\n                paddingLeft={8}\n                paddingRight={8}\n                paddingBottom={4}\n                paddingTop={4}\n                data-testid=\"notifications-settings-per-account\"\n              >\n                <Text\n                  variant={TextVariant.bodyMd}\n                  color={TextColor.textDefault}\n                >\n                  {t('accountActivity')}\n                </Text>\n                <Text\n                  variant={TextVariant.bodySm}\n                  color={TextColor.textAlternative}\n                >\n                  {t('accountActivityText')}\n                </Text>\n              </Box>\n              <Box\n                display={Display.Flex}\n                justifyContent={JustifyContent.flexStart}\n                flexDirection={FlexDirection.Column}\n                alignItems={AlignItems.flexStart}\n                gap={6}\n                paddingLeft={8}\n                paddingRight={8}\n                paddingBottom={4}\n              >\n                {accounts.map((account) => (\n                  <NotificationsSettingsPerAccount\n                    key={account.id}\n                    address={account.address}\n                    name={account.metadata.name}\n                    disabledSwitch={\n                      accountSettingsProps.initialLoading || updatingAccounts\n                    }\n                    isLoading={accountSettingsProps.accountsBeingUpdated.includes(\n                      account.address,\n                    )}\n                    isEnabled={\n                      accountSettingsProps.data?.[\n                        account.address.toLowerCase()\n                      ] ?? false\n                    }\n                    refetchAccountSettings={refetchAccountSettings}\n                  />\n                ))}\n              </Box>\n            </>\n          </>\n        )}\n      </Content>\n    </NotificationsPage>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsMetamaskNotificationsFeatureSeen } from '../../selectors/metamask-notifications/metamask-notifications';\nimport { Tag } from '../../components/component-library';\nimport {\n  BackgroundColor,\n  BorderRadius,\n  BorderStyle,\n  TextColor,\n  TextVariant,\n} from '../../helpers/constants/design-system';\nimport { useI18nContext } from '../../hooks/useI18nContext';\n\nexport function NewFeatureTag() {\n  const t = useI18nContext();\n\n  const isMetamaskNotificationsFeatureSeen = useSelector(\n    selectIsMetamaskNotificationsFeatureSeen,\n  );\n\n  if (isMetamaskNotificationsFeatureSeen) {\n    return null;\n  }\n\n  return (\n    <Tag\n      backgroundColor={BackgroundColor.infoMuted}\n      borderStyle={BorderStyle.none}\n      borderRadius={BorderRadius.MD}\n      label={t('new')}\n      labelProps={{\n        color: TextColor.primaryDefault,\n        variant: TextVariant.bodySm,\n      }}\n      paddingLeft={2}\n      paddingRight={2}\n    />\n  );\n}\n","export { default } from './notifications';\n","import React from 'react';\nimport { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { CHAIN_IDS } from '../../../../../shared/constants/network';\nimport { t } from '../../../../../app/scripts/translate';\n\nimport { type ExtractedNotification, isOfTypeNodeGuard } from '../node-guard';\nimport type { NotificationComponent } from '../types/notifications/notifications';\n\nimport { shortenAddress } from '../../../../helpers/utils/util';\nimport { decimalToHex } from '../../../../../shared/modules/conversion.utils';\n\nimport {\n  createTextItems,\n  formatIsoDateString,\n  getNetworkDetailsByChainId,\n} from '../../../../helpers/utils/notification.util';\nimport {\n  TextVariant,\n  BackgroundColor,\n  TextColor,\n} from '../../../../helpers/constants/design-system';\n\nimport {\n  NotificationListItem,\n  NotificationDetailAddress,\n  NotificationDetailInfo,\n  NotificationDetailAsset,\n  NotificationDetailNetworkFee,\n  NotificationDetailBlockExplorerButton,\n  NotificationDetailTitle,\n  NotificationDetailCollection,\n  NotificationDetailNft,\n} from '../../../../components/multichain';\nimport { NotificationListItemIconType } from '../../../../components/multichain/notification-list-item-icon/notification-list-item-icon';\nimport {\n  BadgeWrapperPosition,\n  IconName,\n} from '../../../../components/component-library';\n\nconst { TRIGGER_TYPES } = NotificationServicesController.Constants;\n\ntype ERC1155Notification = ExtractedNotification<\n  | NotificationServicesController.Constants.TRIGGER_TYPES.ERC1155_RECEIVED\n  | NotificationServicesController.Constants.TRIGGER_TYPES.ERC1155_SENT\n>;\nconst isERC1155Notification = isOfTypeNodeGuard([\n  TRIGGER_TYPES.ERC1155_RECEIVED,\n  TRIGGER_TYPES.ERC1155_SENT,\n]);\n\nconst isSent = (n: ERC1155Notification) =>\n  n.type === TRIGGER_TYPES.ERC1155_SENT;\nconst title = (n: ERC1155Notification) =>\n  isSent(n)\n    ? t('notificationItemNFTSentTo')\n    : t('notificationItemNFTReceivedFrom');\n\nconst getTitle = (n: ERC1155Notification) => {\n  const address = shortenAddress(isSent(n) ? n.data.to : n.data.from);\n  const items = createTextItems([title(n) || '', address], TextVariant.bodySm);\n  return items;\n};\n\nconst getDescription = (n: ERC1155Notification) => {\n  const items = createTextItems(\n    [n.data.nft?.collection.name || ''],\n    TextVariant.bodyMd,\n  );\n  return items;\n};\n\nexport const components: NotificationComponent<ERC1155Notification> = {\n  guardFn: isERC1155Notification,\n  item: ({ notification, onClick }) => (\n    <NotificationListItem\n      id={notification.id}\n      isRead={notification.isRead}\n      icon={{\n        type: notification.data.nft?.image\n          ? NotificationListItemIconType.Nft\n          : NotificationListItemIconType.Token,\n        value: notification.data.nft?.image || 'http://foo.com/bar.png',\n        badge: {\n          icon: isSent(notification)\n            ? IconName.Arrow2UpRight\n            : IconName.Received,\n          position: BadgeWrapperPosition.bottomRight,\n        },\n      }}\n      title={getTitle(notification)}\n      description={getDescription(notification)}\n      createdAt={new Date(notification.createdAt)}\n      amount={notification.data.nft?.token_id || ''}\n      onClick={onClick}\n    />\n  ),\n  details: {\n    title: ({ notification }) => {\n      return (\n        <NotificationDetailTitle\n          title={`${\n            isSent(notification)\n              ? t('notificationItemSent')\n              : t('notificationItemReceived')\n          } NFT`}\n          date={formatIsoDateString(notification.createdAt)}\n        />\n      );\n    },\n    body: {\n      type: 'body_onchain_notification',\n      Image: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo, nativeCurrencyName } =\n          getNetworkDetailsByChainId(`0x${chainId}` as keyof typeof CHAIN_IDS);\n        return (\n          <NotificationDetailNft\n            networkSrc={nativeCurrencyLogo}\n            tokenId={notification.data.nft?.token_id || ''}\n            tokenName={notification.data.nft?.name || ''}\n            tokenSrc={notification.data.nft?.image || ''}\n            networkName={nativeCurrencyName}\n          />\n        );\n      },\n      From: ({ notification }) => (\n        <NotificationDetailAddress\n          side={`${t('notificationItemFrom')}${\n            isSent(notification) ? ` (${t('you')})` : ''\n          }`}\n          address={notification.data.from}\n        />\n      ),\n      To: ({ notification }) => (\n        <NotificationDetailAddress\n          side={`${t('notificationItemTo')}${\n            isSent(notification) ? '' : ` (${t('you')})`\n          }`}\n          address={notification.data.to}\n        />\n      ),\n      Status: () => (\n        <NotificationDetailInfo\n          icon={{\n            iconName: IconName.Check,\n            color: TextColor.successDefault,\n            backgroundColor: BackgroundColor.successMuted,\n          }}\n          label={t('notificationItemStatus') || ''}\n          detail={t('notificationItemConfirmed') || ''}\n        />\n      ),\n      Asset: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo } = getNetworkDetailsByChainId(\n          `0x${chainId}` as keyof typeof CHAIN_IDS,\n        );\n        return (\n          <NotificationDetailCollection\n            icon={{\n              src: notification.data.nft?.image || '',\n              badgeSrc: nativeCurrencyLogo,\n            }}\n            label={t('notificationItemCollection') || ''}\n            collection={`${notification.data.nft?.collection.name} (${notification.data.nft?.token_id})`}\n          />\n        );\n      },\n      Network: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo, nativeCurrencyName } =\n          getNetworkDetailsByChainId(`0x${chainId}` as keyof typeof CHAIN_IDS);\n\n        return (\n          <NotificationDetailAsset\n            icon={{\n              src: nativeCurrencyLogo,\n            }}\n            label={t('notificationDetailNetwork') || ''}\n            detail={nativeCurrencyName}\n          />\n        );\n      },\n      NetworkFee: ({ notification }) => {\n        return <NotificationDetailNetworkFee notification={notification} />;\n      },\n    },\n  },\n  footer: {\n    type: 'footer_onchain_notification',\n    ScanLink: ({ notification }) => {\n      return (\n        <NotificationDetailBlockExplorerButton\n          notification={notification}\n          chainId={notification.chain_id}\n          txHash={notification.tx_hash}\n          id={notification.id}\n        />\n      );\n    },\n  },\n};\n","import React from 'react';\nimport { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { t } from '../../../../../app/scripts/translate';\nimport { CHAIN_IDS } from '../../../../../shared/constants/network';\nimport { type ExtractedNotification, isOfTypeNodeGuard } from '../node-guard';\nimport type { NotificationComponent } from '../types/notifications/notifications';\nimport { NotificationListItemIconType } from '../../../../components/multichain/notification-list-item-icon/notification-list-item-icon';\n\nimport { shortenAddress } from '../../../../helpers/utils/util';\nimport { decimalToHex } from '../../../../../shared/modules/conversion.utils';\nimport {\n  createTextItems,\n  getAmount,\n  getUsdAmount,\n  formatIsoDateString,\n  getNetworkDetailsByChainId,\n} from '../../../../helpers/utils/notification.util';\n\nimport {\n  NotificationListItem,\n  NotificationDetailTitle,\n  NotificationDetailBlockExplorerButton,\n  NotificationDetailAddress,\n  NotificationDetailInfo,\n  NotificationDetailCopyButton,\n  NotificationDetailAsset,\n  NotificationDetailNetworkFee,\n} from '../../../../components/multichain';\nimport {\n  TextVariant,\n  BackgroundColor,\n  TextColor,\n} from '../../../../helpers/constants/design-system';\nimport {\n  BadgeWrapperPosition,\n  IconName,\n} from '../../../../components/component-library';\n\nconst { TRIGGER_TYPES } = NotificationServicesController.Constants;\n\ntype ERC20Notification = ExtractedNotification<\n  | NotificationServicesController.Constants.TRIGGER_TYPES.ERC20_RECEIVED\n  | NotificationServicesController.Constants.TRIGGER_TYPES.ERC20_SENT\n>;\n\nconst isERC20Notification = isOfTypeNodeGuard([\n  TRIGGER_TYPES.ERC20_RECEIVED,\n  TRIGGER_TYPES.ERC20_SENT,\n]);\n\nconst isSent = (n: ERC20Notification) => n.type === TRIGGER_TYPES.ERC20_SENT;\n\nconst title = (n: ERC20Notification) =>\n  isSent(n) ? t('notificationItemSentTo') : t('notificationItemReceivedFrom');\n\nconst getTitle = (n: ERC20Notification) => {\n  const address = shortenAddress(isSent(n) ? n.data.to : n.data.from);\n  const items = createTextItems([title(n) || '', address], TextVariant.bodySm);\n  return items;\n};\n\nconst getDescription = (n: ERC20Notification) => {\n  const items = createTextItems([n.data.token.name], TextVariant.bodyMd);\n  return items;\n};\n\nexport const components: NotificationComponent<ERC20Notification> = {\n  guardFn: isERC20Notification,\n  item: ({ notification, onClick }) => (\n    <NotificationListItem\n      id={notification.id}\n      isRead={notification.isRead}\n      icon={{\n        type: NotificationListItemIconType.Token,\n        value: notification.data.token.image,\n        badge: {\n          icon: isSent(notification)\n            ? IconName.Arrow2UpRight\n            : IconName.Received,\n          position: BadgeWrapperPosition.bottomRight,\n        },\n      }}\n      title={getTitle(notification)}\n      description={getDescription(notification)}\n      createdAt={new Date(notification.createdAt)}\n      amount={`${getAmount(\n        notification.data.token.amount,\n        notification.data.token.decimals,\n        {\n          shouldEllipse: true,\n        },\n      )} ${notification.data.token.symbol}`}\n      onClick={onClick}\n    />\n  ),\n  details: {\n    title: ({ notification }) => (\n      <NotificationDetailTitle\n        title={`${\n          isSent(notification)\n            ? t('notificationItemSent')\n            : t('notificationItemReceived')\n        } ${notification.data.token.symbol}`}\n        date={formatIsoDateString(notification.createdAt)}\n      />\n    ),\n    body: {\n      type: 'body_onchain_notification',\n      From: ({ notification }) => (\n        <NotificationDetailAddress\n          side={`${t('notificationItemFrom')}${\n            isSent(notification) ? ` (${t('you')})` : ''\n          }`}\n          address={notification.data.from}\n        />\n      ),\n      To: ({ notification }) => (\n        <NotificationDetailAddress\n          side={`${t('notificationItemTo')}${\n            isSent(notification) ? '' : ` (${t('you')})`\n          }`}\n          address={notification.data.to}\n        />\n      ),\n      Status: ({ notification }) => (\n        <NotificationDetailInfo\n          icon={{\n            iconName: IconName.Check,\n            color: TextColor.successDefault,\n            backgroundColor: BackgroundColor.successMuted,\n          }}\n          label={t('notificationItemStatus') || ''}\n          detail={t('notificationItemConfirmed') || ''}\n          action={\n            <NotificationDetailCopyButton\n              notification={notification}\n              text={notification.tx_hash}\n              displayText={t('notificationItemTransactionId') || ''}\n            />\n          }\n        />\n      ),\n      Asset: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo } = getNetworkDetailsByChainId(\n          `0x${chainId}` as keyof typeof CHAIN_IDS,\n        );\n        return (\n          <NotificationDetailAsset\n            icon={{\n              src: notification.data.token.image,\n              badge: {\n                src: nativeCurrencyLogo,\n                position: BadgeWrapperPosition.topRight,\n              },\n            }}\n            label={t('asset') || ''}\n            detail={notification.data.token.symbol}\n            fiatValue={`$${getUsdAmount(\n              notification.data.token.amount,\n              notification.data.token.decimals,\n              notification.data.token.usd,\n            )}`}\n            value={`${getAmount(\n              notification.data.token.amount,\n              notification.data.token.decimals,\n              {\n                shouldEllipse: true,\n              },\n            )} ${notification.data.token.symbol}`}\n          />\n        );\n      },\n      Network: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo, nativeCurrencyName } =\n          getNetworkDetailsByChainId(`0x${chainId}` as keyof typeof CHAIN_IDS);\n\n        return (\n          <NotificationDetailAsset\n            icon={{\n              src: nativeCurrencyLogo,\n            }}\n            label={t('notificationDetailNetwork') || ''}\n            detail={nativeCurrencyName}\n          />\n        );\n      },\n      NetworkFee: ({ notification }) => {\n        return <NotificationDetailNetworkFee notification={notification} />;\n      },\n    },\n  },\n  footer: {\n    type: 'footer_onchain_notification',\n    ScanLink: ({ notification }) => {\n      return (\n        <NotificationDetailBlockExplorerButton\n          notification={notification}\n          chainId={notification.chain_id}\n          txHash={notification.tx_hash}\n          id={notification.id}\n        />\n      );\n    },\n  },\n};\n","import React from 'react';\nimport { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { CHAIN_IDS } from '../../../../../shared/constants/network';\nimport { t } from '../../../../../app/scripts/translate';\n\nimport { type ExtractedNotification, isOfTypeNodeGuard } from '../node-guard';\nimport type { NotificationComponent } from '../types/notifications/notifications';\n\nimport { shortenAddress } from '../../../../helpers/utils/util';\nimport { decimalToHex } from '../../../../../shared/modules/conversion.utils';\n\nimport {\n  createTextItems,\n  formatIsoDateString,\n  getNetworkDetailsByChainId,\n} from '../../../../helpers/utils/notification.util';\nimport {\n  TextVariant,\n  BackgroundColor,\n  TextColor,\n} from '../../../../helpers/constants/design-system';\n\nimport {\n  NotificationListItem,\n  NotificationDetailAddress,\n  NotificationDetailInfo,\n  NotificationDetailAsset,\n  NotificationDetailNetworkFee,\n  NotificationDetailBlockExplorerButton,\n  NotificationDetailTitle,\n  NotificationDetailNft,\n  NotificationDetailCollection,\n} from '../../../../components/multichain';\nimport { NotificationListItemIconType } from '../../../../components/multichain/notification-list-item-icon/notification-list-item-icon';\nimport {\n  BadgeWrapperPosition,\n  IconName,\n} from '../../../../components/component-library';\n\nconst { TRIGGER_TYPES } = NotificationServicesController.Constants;\n\ntype ERC721Notification = ExtractedNotification<\n  | NotificationServicesController.Constants.TRIGGER_TYPES.ERC721_RECEIVED\n  | NotificationServicesController.Constants.TRIGGER_TYPES.ERC721_SENT\n>;\nconst isERC721Notification = isOfTypeNodeGuard([\n  TRIGGER_TYPES.ERC721_RECEIVED,\n  TRIGGER_TYPES.ERC721_SENT,\n]);\n\nconst isSent = (n: ERC721Notification) => n.type === TRIGGER_TYPES.ERC721_SENT;\nconst title = (n: ERC721Notification) =>\n  isSent(n)\n    ? t('notificationItemNFTSentTo')\n    : t('notificationItemNFTReceivedFrom');\n\nconst getTitle = (n: ERC721Notification) => {\n  const address = shortenAddress(isSent(n) ? n.data.to : n.data.from);\n  const items = createTextItems([title(n) || '', address], TextVariant.bodySm);\n  return items;\n};\n\nconst getDescription = (n: ERC721Notification) => {\n  const items = createTextItems(\n    [n.data.nft.collection.name],\n    TextVariant.bodyMd,\n  );\n  return items;\n};\n\nexport const components: NotificationComponent<ERC721Notification> = {\n  guardFn: isERC721Notification,\n  item: ({ notification, onClick }) => {\n    return (\n      <NotificationListItem\n        id={notification.id}\n        isRead={notification.isRead}\n        icon={{\n          type: NotificationListItemIconType.Nft,\n          value: notification.data.nft.image,\n          badge: {\n            icon: isSent(notification)\n              ? IconName.Arrow2UpRight\n              : IconName.Received,\n            position: BadgeWrapperPosition.bottomRight,\n          },\n        }}\n        title={getTitle(notification)}\n        description={getDescription(notification)}\n        createdAt={new Date(notification.createdAt)}\n        amount={`#${notification.data.nft.token_id}`}\n        onClick={onClick}\n      />\n    );\n  },\n  details: {\n    title: ({ notification }) => {\n      return (\n        <NotificationDetailTitle\n          title={`${\n            isSent(notification)\n              ? t('notificationItemSent')\n              : t('notificationItemReceived')\n          } NFT`}\n          date={formatIsoDateString(notification.createdAt)}\n        />\n      );\n    },\n    body: {\n      type: 'body_onchain_notification',\n      Image: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo, nativeCurrencyName } =\n          getNetworkDetailsByChainId(`0x${chainId}` as keyof typeof CHAIN_IDS);\n        return (\n          <NotificationDetailNft\n            networkSrc={nativeCurrencyLogo}\n            tokenId={notification.data.nft.token_id}\n            tokenName={notification.data.nft.name}\n            tokenSrc={notification.data.nft.image}\n            networkName={nativeCurrencyName}\n          />\n        );\n      },\n      From: ({ notification }) => (\n        <NotificationDetailAddress\n          side={`${t('notificationItemFrom')}${\n            isSent(notification) ? ` (${t('you')})` : ''\n          }`}\n          address={notification.data.from}\n        />\n      ),\n      To: ({ notification }) => (\n        <NotificationDetailAddress\n          side={`${t('notificationItemTo')}${\n            isSent(notification) ? '' : ` (${t('you')})`\n          }`}\n          address={notification.data.to}\n        />\n      ),\n      Status: () => (\n        <NotificationDetailInfo\n          icon={{\n            iconName: IconName.Check,\n            color: TextColor.successDefault,\n            backgroundColor: BackgroundColor.successMuted,\n          }}\n          label={t('notificationItemStatus') || ''}\n          detail={t('notificationItemConfirmed') || ''}\n        />\n      ),\n      Asset: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo } = getNetworkDetailsByChainId(\n          `0x${chainId}` as keyof typeof CHAIN_IDS,\n        );\n        return (\n          <NotificationDetailCollection\n            icon={{\n              src: notification.data.nft.image,\n              badgeSrc: nativeCurrencyLogo,\n            }}\n            label={t('notificationItemCollection') || ''}\n            collection={`${notification.data.nft.collection.name} (${notification.data.nft.token_id})`}\n          />\n        );\n      },\n      Network: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo, nativeCurrencyName } =\n          getNetworkDetailsByChainId(`0x${chainId}` as keyof typeof CHAIN_IDS);\n\n        return (\n          <NotificationDetailAsset\n            icon={{\n              src: nativeCurrencyLogo,\n            }}\n            label={t('notificationDetailNetwork') || ''}\n            detail={nativeCurrencyName}\n          />\n        );\n      },\n      NetworkFee: ({ notification }) => {\n        return <NotificationDetailNetworkFee notification={notification} />;\n      },\n    },\n  },\n  footer: {\n    type: 'footer_onchain_notification',\n    ScanLink: ({ notification }) => {\n      return (\n        <NotificationDetailBlockExplorerButton\n          notification={notification}\n          chainId={notification.chain_id}\n          txHash={notification.tx_hash}\n          id={notification.id}\n        />\n      );\n    },\n  },\n};\n","import React from 'react';\nimport { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { t } from '../../../../../app/scripts/translate';\nimport { CHAIN_IDS } from '../../../../../shared/constants/network';\nimport { type ExtractedNotification, isOfTypeNodeGuard } from '../node-guard';\nimport type { NotificationComponent } from '../types/notifications/notifications';\n\nimport { decimalToHex } from '../../../../../shared/modules/conversion.utils';\nimport { shortenAddress } from '../../../../helpers/utils/util';\nimport {\n  createTextItems,\n  formatAmount,\n  formatIsoDateString,\n  getNetworkDetailsByChainId,\n} from '../../../../helpers/utils/notification.util';\nimport {\n  TextVariant,\n  BackgroundColor,\n  TextColor,\n} from '../../../../helpers/constants/design-system';\n\nimport {\n  NotificationListItem,\n  NotificationDetailTitle,\n  NotificationDetailBlockExplorerButton,\n  NotificationDetailAddress,\n  NotificationDetailInfo,\n  NotificationDetailCopyButton,\n  NotificationDetailAsset,\n  NotificationDetailNetworkFee,\n} from '../../../../components/multichain';\nimport { NotificationListItemIconType } from '../../../../components/multichain/notification-list-item-icon/notification-list-item-icon';\nimport {\n  BadgeWrapperPosition,\n  IconName,\n} from '../../../../components/component-library';\n\nconst { TRIGGER_TYPES } = NotificationServicesController.Constants;\n\ntype ETHNotification = ExtractedNotification<\n  | NotificationServicesController.Constants.TRIGGER_TYPES.ETH_RECEIVED\n  | NotificationServicesController.Constants.TRIGGER_TYPES.ETH_SENT\n>;\nconst isETHNotification = isOfTypeNodeGuard([\n  TRIGGER_TYPES.ETH_RECEIVED,\n  TRIGGER_TYPES.ETH_SENT,\n]);\n\nconst isSent = (n: ETHNotification) => n.type === TRIGGER_TYPES.ETH_SENT;\n\nconst title = (n: ETHNotification) =>\n  isSent(n) ? t('notificationItemSentTo') : t('notificationItemReceivedFrom');\n\nconst getNativeCurrency = (n: ETHNotification) => {\n  const chainId = decimalToHex(n.chain_id);\n  const nativeCurrency = getNetworkDetailsByChainId(\n    `0x${chainId}` as keyof typeof CHAIN_IDS,\n  );\n  return nativeCurrency;\n};\n\nconst getTitle = (n: ETHNotification) => {\n  const address = shortenAddress(isSent(n) ? n.data.to : n.data.from);\n  const items = createTextItems([title(n) || '', address], TextVariant.bodySm);\n  return items;\n};\n\nconst getDescription = (n: ETHNotification) => {\n  const { nativeCurrencySymbol } = getNativeCurrency(n);\n  const items = createTextItems([nativeCurrencySymbol], TextVariant.bodyMd);\n  return items;\n};\n\nexport const components: NotificationComponent<ETHNotification> = {\n  guardFn: isETHNotification,\n  item: ({ notification, onClick }) => {\n    const { nativeCurrencySymbol, nativeCurrencyLogo } =\n      getNativeCurrency(notification);\n    return (\n      <NotificationListItem\n        id={notification.id}\n        isRead={notification.isRead}\n        icon={{\n          type: NotificationListItemIconType.Token,\n          value: nativeCurrencyLogo,\n          badge: {\n            icon: isSent(notification)\n              ? IconName.Arrow2UpRight\n              : IconName.Received,\n            position: BadgeWrapperPosition.bottomRight,\n          },\n        }}\n        title={getTitle(notification)}\n        description={getDescription(notification)}\n        createdAt={new Date(notification.createdAt)}\n        amount={`${formatAmount(parseFloat(notification.data.amount.eth), {\n          shouldEllipse: true,\n        })} ${nativeCurrencySymbol}`}\n        onClick={onClick}\n      />\n    );\n  },\n  details: {\n    title: ({ notification }) => {\n      const chainId = decimalToHex(notification.chain_id);\n      const { nativeCurrencySymbol } = getNetworkDetailsByChainId(\n        `0x${chainId}` as keyof typeof CHAIN_IDS,\n      );\n      return (\n        <NotificationDetailTitle\n          title={`${\n            isSent(notification)\n              ? t('notificationItemSent')\n              : t('notificationItemReceived')\n          } ${nativeCurrencySymbol}`}\n          date={formatIsoDateString(notification.createdAt)}\n        />\n      );\n    },\n    body: {\n      type: 'body_onchain_notification',\n      From: ({ notification }) => (\n        <NotificationDetailAddress\n          side={`${t('notificationItemFrom')}${\n            isSent(notification) ? ` (${t('you')})` : ''\n          }`}\n          address={notification.data.from}\n        />\n      ),\n      To: ({ notification }) => (\n        <NotificationDetailAddress\n          side={`${t('notificationItemTo')}${\n            isSent(notification) ? '' : ` (${t('you')})`\n          }`}\n          address={notification.data.to}\n        />\n      ),\n      Status: ({ notification }) => (\n        <NotificationDetailInfo\n          icon={{\n            iconName: IconName.Check,\n            color: TextColor.successDefault,\n            backgroundColor: BackgroundColor.successMuted,\n          }}\n          label={t('notificationItemStatus') || ''}\n          detail={t('notificationItemConfirmed') || ''}\n          action={\n            <NotificationDetailCopyButton\n              notification={notification}\n              text={notification.tx_hash}\n              displayText={t('notificationItemTransactionId') || ''}\n            />\n          }\n        />\n      ),\n      Asset: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo, nativeCurrencySymbol } =\n          getNetworkDetailsByChainId(`0x${chainId}` as keyof typeof CHAIN_IDS);\n        return (\n          <NotificationDetailAsset\n            icon={{\n              src: nativeCurrencyLogo,\n              badge: {\n                src: nativeCurrencyLogo,\n                position: BadgeWrapperPosition.topRight,\n              },\n            }}\n            label={t('asset') || ''}\n            detail={nativeCurrencySymbol}\n            fiatValue={`$${formatAmount(\n              parseFloat(notification.data.amount.usd),\n              {\n                shouldEllipse: true,\n              },\n            )}`}\n            value={`${formatAmount(parseFloat(notification.data.amount.eth), {\n              shouldEllipse: true,\n            })} ${nativeCurrencySymbol}`}\n          />\n        );\n      },\n      Network: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo, nativeCurrencyName } =\n          getNetworkDetailsByChainId(`0x${chainId}` as keyof typeof CHAIN_IDS);\n\n        return (\n          <NotificationDetailAsset\n            icon={{\n              src: nativeCurrencyLogo,\n            }}\n            label={t('notificationDetailNetwork') || ''}\n            detail={nativeCurrencyName}\n          />\n        );\n      },\n      NetworkFee: ({ notification }) => {\n        return <NotificationDetailNetworkFee notification={notification} />;\n      },\n    },\n  },\n  footer: {\n    type: 'footer_onchain_notification',\n    ScanLink: ({ notification }) => {\n      return (\n        <NotificationDetailBlockExplorerButton\n          notification={notification}\n          chainId={notification.chain_id}\n          txHash={notification.tx_hash}\n          id={notification.id}\n        />\n      );\n    },\n  },\n};\n","import React from 'react';\nimport { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { type ExtractedNotification, isOfTypeNodeGuard } from '../node-guard';\nimport type { NotificationComponent } from '../types/notifications/notifications';\nimport { NotificationListItemIconType } from '../../../../components/multichain/notification-list-item-icon/notification-list-item-icon';\n\nimport {\n  createTextItems,\n  formatIsoDateString,\n} from '../../../../helpers/utils/notification.util';\n\nimport {\n  Box,\n  ButtonVariant,\n  Text,\n} from '../../../../components/component-library';\nimport {\n  NotificationListItem,\n  NotificationDetailTitle,\n  NotificationDetailButton,\n} from '../../../../components/multichain';\nimport {\n  TextVariant,\n  Display,\n  JustifyContent,\n  BorderRadius,\n  BlockSize,\n} from '../../../../helpers/constants/design-system';\n\nconst { TRIGGER_TYPES } = NotificationServicesController.Constants;\n\ntype FeatureAnnouncementNotification =\n  ExtractedNotification<NotificationServicesController.Constants.TRIGGER_TYPES.FEATURES_ANNOUNCEMENT>;\nconst isFeatureAnnouncementNotification = isOfTypeNodeGuard([\n  TRIGGER_TYPES.FEATURES_ANNOUNCEMENT,\n]);\n\nconst getTitle = (n: FeatureAnnouncementNotification) => {\n  const items = createTextItems([n.data.title], TextVariant.bodySm);\n  return items;\n};\n\nconst getDescription = (n: FeatureAnnouncementNotification) => {\n  const items = createTextItems([n.data.shortDescription], TextVariant.bodyMd);\n  return items;\n};\n\nexport const components: NotificationComponent<FeatureAnnouncementNotification> =\n  {\n    guardFn: isFeatureAnnouncementNotification,\n    item: ({ notification, onClick }) => (\n      <NotificationListItem\n        id={notification.id}\n        isRead={notification.isRead}\n        icon={{\n          type: NotificationListItemIconType.Token,\n          value: './images/product-announcement-logo.svg',\n        }}\n        title={getTitle(notification)}\n        description={getDescription(notification)}\n        createdAt={new Date(notification.createdAt)}\n        onClick={onClick}\n      />\n    ),\n    details: {\n      title: ({ notification }) => (\n        <NotificationDetailTitle\n          title={notification.data.title}\n          date={formatIsoDateString(notification.createdAt)}\n        />\n      ),\n      body: {\n        type: 'body_feature_announcement',\n        Image: ({ notification }) => (\n          <Box\n            display={Display.Block}\n            width={BlockSize.Full}\n            paddingLeft={4}\n            paddingRight={4}\n            paddingBottom={4}\n          >\n            <Box\n              as=\"img\"\n              src={`https:${notification.data.image.url}?fm=jpg&fl=progressive&w=1000&q=80`}\n              alt={notification.data.title}\n              title={notification.data.title}\n              display={Display.Block}\n              justifyContent={JustifyContent.center}\n              borderRadius={BorderRadius.XL}\n              width={BlockSize.Full}\n            />\n          </Box>\n        ),\n        Description: ({ notification }) => (\n          <Box paddingLeft={4} paddingRight={4}>\n            <Text\n              variant={TextVariant.bodyMd}\n              dangerouslySetInnerHTML={{\n                __html: notification.data.longDescription,\n              }}\n            />\n          </Box>\n        ),\n      },\n    },\n    footer: {\n      type: 'footer_feature_announcement',\n      ExtensionLink: ({ notification }) =>\n        notification.data.extensionLink ? (\n          <NotificationDetailButton\n            notification={notification}\n            variant={ButtonVariant.Primary}\n            text={notification.data.extensionLink.extensionLinkText}\n            href={`/${notification.data.extensionLink.extensionLinkRoute}`}\n            id={notification.id}\n            endIconName={false}\n            isExternal={true}\n          />\n        ) : null,\n    },\n  };\n","import { NotificationServicesController } from '@metamask/notification-services-controller';\nimport type { NotificationComponent } from './types/notifications/notifications';\nimport { components as ERC20SentReceivedComponents } from './erc20-sent-received/erc20-sent-received';\nimport { components as ERC721SentReceivedComponents } from './erc721-sent-received/erc721-sent-received';\nimport { components as ERC1155SentReceivedComponents } from './erc1155-sent-received/erc1155-sent-received';\nimport { components as EthSentReceivedComponents } from './eth-sent-received/eth-sent-received';\nimport { components as FeatureAnnouncementComponents } from './feature-announcement/feature-announcement';\nimport { components as StakeComponents } from './stake/stake';\nimport { components as SwapCompletedComponents } from './swap-completed/swap-completed';\nimport { components as LidoWithdrawalRequestedComponents } from './lido-withdrawal-requested/lido-withdrawal-requested';\nimport { components as LidoStakeReadyToBeWithdrawnComponents } from './lido-stake-ready-to-be-withdrawn/lido-stake-ready-to-be-withdrawn';\n\nconst { TRIGGER_TYPES } = NotificationServicesController.Constants;\ntype TRIGGER_TYPES = NotificationServicesController.Constants.TRIGGER_TYPES;\n\n/**\n * Each notification component has a specific shape it follows.\n * however for interface consistency (and prevent intersections that cause `never` parameters), we are widening each notification component to a generic notification\n *\n * This does mean that you MUST check the guardFn before using a specific notification\n *\n * @param components - a specific set of notification components\n * @returns a generic set of notification component\n */\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst expandComponentsType = <C extends NotificationComponent<any>>(\n  components: C,\n) => components as NotificationComponent;\n\nexport const NotificationComponents = {\n  [TRIGGER_TYPES.ERC20_SENT]: expandComponentsType(ERC20SentReceivedComponents),\n  [TRIGGER_TYPES.ERC20_RECEIVED]: expandComponentsType(\n    ERC20SentReceivedComponents,\n  ),\n  [TRIGGER_TYPES.ERC721_SENT]: expandComponentsType(\n    ERC721SentReceivedComponents,\n  ),\n  [TRIGGER_TYPES.ERC721_RECEIVED]: expandComponentsType(\n    ERC721SentReceivedComponents,\n  ),\n  [TRIGGER_TYPES.ERC1155_SENT]: expandComponentsType(\n    ERC1155SentReceivedComponents,\n  ),\n  [TRIGGER_TYPES.ERC1155_RECEIVED]: expandComponentsType(\n    ERC1155SentReceivedComponents,\n  ),\n  [TRIGGER_TYPES.ETH_SENT]: expandComponentsType(EthSentReceivedComponents),\n  [TRIGGER_TYPES.ETH_RECEIVED]: expandComponentsType(EthSentReceivedComponents),\n  [TRIGGER_TYPES.FEATURES_ANNOUNCEMENT]: expandComponentsType(\n    FeatureAnnouncementComponents,\n  ),\n  [TRIGGER_TYPES.ROCKETPOOL_STAKE_COMPLETED]:\n    expandComponentsType(StakeComponents),\n  [TRIGGER_TYPES.ROCKETPOOL_UNSTAKE_COMPLETED]:\n    expandComponentsType(StakeComponents),\n  [TRIGGER_TYPES.LIDO_STAKE_COMPLETED]: expandComponentsType(StakeComponents),\n  [TRIGGER_TYPES.LIDO_WITHDRAWAL_COMPLETED]:\n    expandComponentsType(StakeComponents),\n  [TRIGGER_TYPES.LIDO_WITHDRAWAL_REQUESTED]: expandComponentsType(\n    LidoWithdrawalRequestedComponents,\n  ),\n  [TRIGGER_TYPES.METAMASK_SWAP_COMPLETED]: expandComponentsType(\n    SwapCompletedComponents,\n  ),\n  [TRIGGER_TYPES.LIDO_STAKE_READY_TO_BE_WITHDRAWN]: expandComponentsType(\n    LidoStakeReadyToBeWithdrawnComponents,\n  ),\n};\n\nexport const hasNotificationComponents = (\n  t: TRIGGER_TYPES,\n): t is keyof typeof NotificationComponents => t in NotificationComponents;\n","import React from 'react';\nimport { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { CHAIN_IDS } from '../../../../../shared/constants/network';\nimport { type ExtractedNotification, isOfTypeNodeGuard } from '../node-guard';\nimport type { NotificationComponent } from '../types/notifications/notifications';\nimport {\n  NotificationListItem,\n  NotificationDetailInfo,\n  NotificationDetailTitle,\n  NotificationDetailAsset,\n  NotificationDetailBlockExplorerButton,\n  NotificationDetailAddress,\n} from '../../../../components/multichain';\nimport { t } from '../../../../../app/scripts/translate';\nimport {\n  createTextItems,\n  formatAmount,\n  formatIsoDateString,\n  getNetworkDetailsByChainId,\n} from '../../../../helpers/utils/notification.util';\nimport {\n  TextVariant,\n  BackgroundColor,\n  TextColor,\n} from '../../../../helpers/constants/design-system';\nimport { NotificationListItemIconType } from '../../../../components/multichain/notification-list-item-icon/notification-list-item-icon';\nimport {\n  BadgeWrapperPosition,\n  IconName,\n} from '../../../../components/component-library';\nimport { decimalToHex } from '../../../../../shared/modules/conversion.utils';\n\nconst { TRIGGER_TYPES } = NotificationServicesController.Constants;\n\ntype LidoReadyWithDrawnNotification =\n  ExtractedNotification<NotificationServicesController.Constants.TRIGGER_TYPES.LIDO_STAKE_READY_TO_BE_WITHDRAWN>;\nconst isLidoReadyWithDrawnNotification = isOfTypeNodeGuard([\n  TRIGGER_TYPES.LIDO_STAKE_READY_TO_BE_WITHDRAWN,\n]);\n\nconst getDescription = (n: LidoReadyWithDrawnNotification) => {\n  const amount = formatAmount(parseFloat(n.data.staked_eth.amount), {\n    shouldEllipse: true,\n  });\n  const description =\n    // @ts-expect-error: Expected 0-1 arguments, but got an array\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    t('notificationItemLidoStakeReadyToBeWithdrawnMessage', [\n      `${amount} ${n.data.staked_eth.symbol}`,\n    ]) || '';\n  const items = createTextItems([description], TextVariant.bodyMd);\n  return items;\n};\n\nconst getTitle = () => {\n  const items = createTextItems(\n    [t('notificationItemLidoStakeReadyToBeWithdrawn') || ''],\n    TextVariant.bodySm,\n  );\n  return items;\n};\n\nexport const components: NotificationComponent<LidoReadyWithDrawnNotification> =\n  {\n    guardFn: isLidoReadyWithDrawnNotification,\n    item: ({ notification, onClick }) => {\n      return (\n        <NotificationListItem\n          id={notification.trigger_id}\n          isRead={notification.isRead}\n          icon={{\n            type: NotificationListItemIconType.Token,\n            value: notification.data.staked_eth.image,\n            badge: {\n              icon: IconName.Stake,\n              position: BadgeWrapperPosition.bottomRight,\n            },\n          }}\n          title={getTitle()}\n          description={getDescription(notification)}\n          createdAt={new Date(notification.createdAt)}\n          onClick={onClick}\n        />\n      );\n    },\n    details: {\n      title: ({ notification }) => (\n        <NotificationDetailTitle\n          title={t('notificationItemLidoStakeReadyToBeWithdrawn') || ''}\n          date={formatIsoDateString(notification.createdAt)}\n        />\n      ),\n      body: {\n        type: 'body_onchain_notification',\n        Account: ({ notification }) => {\n          if (!notification.address) {\n            return null;\n          }\n          return (\n            <NotificationDetailAddress\n              side={t('account') || ''}\n              address={notification.address}\n            />\n          );\n        },\n        Status: () => (\n          <NotificationDetailInfo\n            icon={{\n              iconName: IconName.Check,\n              color: TextColor.successDefault,\n              backgroundColor: BackgroundColor.successMuted,\n            }}\n            label={t('notificationItemStatus') || ''}\n            detail={t('notificationItemConfirmed') || ''}\n          />\n        ),\n        Asset: ({ notification }) => {\n          const chainId = decimalToHex(notification.chain_id);\n          const { nativeCurrencyLogo } = getNetworkDetailsByChainId(\n            `0x${chainId}` as keyof typeof CHAIN_IDS,\n          );\n          return (\n            <NotificationDetailAsset\n              icon={{\n                src: notification.data.staked_eth.image,\n                badge: {\n                  src: nativeCurrencyLogo,\n                  position: BadgeWrapperPosition.topRight,\n                },\n              }}\n              label={t('notificationItemLidoStakeReadyToBeWithdrawn') || ''}\n              detail={notification.data.staked_eth.symbol}\n              fiatValue={`$${formatAmount(\n                parseFloat(notification.data.staked_eth.usd),\n                { shouldEllipse: true },\n              )}`}\n              value={`${formatAmount(\n                parseFloat(notification.data.staked_eth.amount),\n                { shouldEllipse: true },\n              )} ${notification.data.staked_eth.symbol}`}\n            />\n          );\n        },\n        AssetReceived: ({ notification }) => {\n          const chainId = decimalToHex(notification.chain_id);\n          const { nativeCurrencyLogo } = getNetworkDetailsByChainId(\n            `0x${chainId}` as keyof typeof CHAIN_IDS,\n          );\n          return (\n            <NotificationDetailAsset\n              icon={{\n                src: notification.data.staked_eth.image,\n                badge: {\n                  src: nativeCurrencyLogo,\n                  position: BadgeWrapperPosition.topRight,\n                },\n              }}\n              label={t('notificationItemStakingProvider') || ''}\n              detail={notification.data.staked_eth.symbol}\n            />\n          );\n        },\n      },\n    },\n    footer: {\n      type: 'footer_onchain_notification',\n      ScanLink: ({ notification }) => {\n        return (\n          <NotificationDetailBlockExplorerButton\n            notification={notification}\n            chainId={notification.chain_id}\n            txHash={notification.tx_hash}\n            id={notification.id}\n          />\n        );\n      },\n    },\n  };\n","import React from 'react';\nimport { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { type ExtractedNotification, isOfTypeNodeGuard } from '../node-guard';\nimport type { NotificationComponent } from '../types/notifications/notifications';\nimport { NotificationListItemIconType } from '../../../../components/multichain/notification-list-item-icon/notification-list-item-icon';\n\nimport {\n  NotificationDetailAsset,\n  NotificationListItem,\n  NotificationDetailInfo,\n  NotificationDetailBlockExplorerButton,\n  NotificationDetailCopyButton,\n  NotificationDetailTitle,\n  NotificationDetailAddress,\n} from '../../../../components/multichain';\nimport {\n  createTextItems,\n  getAmount,\n  formatIsoDateString,\n  getNetworkDetailsByChainId,\n  getUsdAmount,\n} from '../../../../helpers/utils/notification.util';\nimport { t } from '../../../../../app/scripts/translate';\nimport {\n  TextVariant,\n  BackgroundColor,\n  TextColor,\n} from '../../../../helpers/constants/design-system';\n\nimport {\n  BadgeWrapperPosition,\n  IconName,\n} from '../../../../components/component-library';\nimport { decimalToHex } from '../../../../../shared/modules/conversion.utils';\nimport { CHAIN_IDS } from '../../../../../shared/constants/network';\n\nconst { TRIGGER_TYPES } = NotificationServicesController.Constants;\n\ntype LidoWithdrawalRequestedNotification =\n  ExtractedNotification<NotificationServicesController.Constants.TRIGGER_TYPES.LIDO_WITHDRAWAL_REQUESTED>;\nconst isLidoWithdrawalRequestedNotification = isOfTypeNodeGuard([\n  TRIGGER_TYPES.LIDO_WITHDRAWAL_REQUESTED,\n]);\n\nconst getTitle = () => {\n  const items = createTextItems(\n    [t('notificationItemUnStakingRequested') || ''],\n    TextVariant.bodySm,\n  );\n  return items;\n};\n\nconst getDescription = (n: LidoWithdrawalRequestedNotification) => {\n  const amount = getAmount(n.data.stake_in.amount, n.data.stake_in.decimals, {\n    shouldEllipse: true,\n  });\n  const description =\n    // @ts-expect-error: Expected 0-1 arguments, but got an array\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    t('notificationItemLidoWithdrawalRequestedMessage', [\n      `${amount} ${n.data.stake_in.symbol}`,\n    ]) || '';\n  const items = createTextItems([description], TextVariant.bodyMd);\n  return items;\n};\n\nexport const components: NotificationComponent<LidoWithdrawalRequestedNotification> =\n  {\n    guardFn: isLidoWithdrawalRequestedNotification,\n    item: ({ notification, onClick }) => {\n      return (\n        <NotificationListItem\n          id={notification.id}\n          isRead={notification.isRead}\n          icon={{\n            type: NotificationListItemIconType.Token,\n            value: notification.data.stake_in.image,\n            badge: {\n              icon: IconName.Stake,\n              position: BadgeWrapperPosition.bottomRight,\n            },\n          }}\n          title={getTitle()}\n          description={getDescription(notification)}\n          createdAt={new Date(notification.createdAt)}\n          amount={`${getAmount(\n            notification.data.stake_in.amount,\n            notification.data.stake_in.decimals,\n            { shouldEllipse: true },\n          )} ${notification.data.stake_in.symbol}`}\n          onClick={onClick}\n        />\n      );\n    },\n    details: {\n      title: ({ notification }) => {\n        return (\n          <NotificationDetailTitle\n            title={t('notificationItemUnStakingRequested') || ''}\n            date={formatIsoDateString(notification.createdAt)}\n          />\n        );\n      },\n      body: {\n        type: 'body_onchain_notification',\n        Account: ({ notification }) => {\n          if (!notification.address) {\n            return null;\n          }\n          return (\n            <NotificationDetailAddress\n              side={t('account') || ''}\n              address={notification.address}\n            />\n          );\n        },\n        Status: ({ notification }) => (\n          <NotificationDetailInfo\n            icon={{\n              iconName: IconName.Check,\n              color: TextColor.successDefault,\n              backgroundColor: BackgroundColor.successMuted,\n            }}\n            label={t('notificationItemStatus') || ''}\n            detail={t('notificationItemConfirmed') || ''}\n            action={\n              <NotificationDetailCopyButton\n                notification={notification}\n                text={notification.tx_hash}\n                displayText={t('notificationItemTransactionId') || ''}\n              />\n            }\n          />\n        ),\n        Asset: ({ notification }) => {\n          const chainId = decimalToHex(notification.chain_id);\n          const { nativeCurrencyLogo } = getNetworkDetailsByChainId(\n            `0x${chainId}` as keyof typeof CHAIN_IDS,\n          );\n          return (\n            <NotificationDetailAsset\n              icon={{\n                src: notification.data.stake_in.image,\n                badge: {\n                  src: nativeCurrencyLogo,\n                  position: BadgeWrapperPosition.topRight,\n                },\n              }}\n              label={t('notificationItemUnStakingRequested') || ''}\n              detail={notification.data.stake_in.symbol}\n              fiatValue={`$${getUsdAmount(\n                notification.data.stake_in.amount,\n                notification.data.stake_in.decimals,\n                notification.data.stake_in.usd,\n              )}`}\n              value={`${getAmount(\n                notification.data.stake_in.amount,\n                notification.data.stake_in.decimals,\n                { shouldEllipse: true },\n              )} ${notification.data.stake_in.symbol}`}\n            />\n          );\n        },\n        AssetReceived: ({ notification }) => {\n          const chainId = decimalToHex(notification.chain_id);\n          const { nativeCurrencyLogo } = getNetworkDetailsByChainId(\n            `0x${chainId}` as keyof typeof CHAIN_IDS,\n          );\n          return (\n            <NotificationDetailAsset\n              icon={{\n                src: notification.data.stake_in.image,\n                badge: {\n                  src: nativeCurrencyLogo,\n                  position: BadgeWrapperPosition.topRight,\n                },\n              }}\n              label={t('notificationItemStakingProvider') || ''}\n              detail=\"Lido-staked ETH\"\n            />\n          );\n        },\n      },\n    },\n    footer: {\n      type: 'footer_onchain_notification',\n      ScanLink: ({ notification }) => {\n        return (\n          <NotificationDetailBlockExplorerButton\n            notification={notification}\n            chainId={notification.chain_id}\n            txHash={notification.tx_hash}\n            id={notification.id}\n          />\n        );\n      },\n    },\n  };\n","import type { NotificationServicesController } from '@metamask/notification-services-controller';\n\ntype Notification = NotificationServicesController.Types.INotification;\n\nexport type ExtractedNotification<NodeType> = Extract<\n  Notification,\n  { type: NodeType }\n>;\n\nexport const isOfTypeNodeGuard =\n  <NodeType extends Notification['type']>(types: NodeType[]) =>\n  (n: Notification): n is ExtractedNotification<NodeType> =>\n    types.includes(n.type as NodeType);\n","import React, { useContext } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../../shared/constants/metametrics';\nimport { MetaMetricsContext } from '../../../../contexts/metametrics';\nimport { NotificationListItemSnap } from '../../../../components/multichain';\nimport type { SnapNotification } from '../../snap/types/types';\nimport { getSnapsMetadata } from '../../../../selectors';\nimport { markNotificationsAsRead } from '../../../../store/actions';\nimport { getSnapRoute, getSnapName } from '../../../../helpers/utils/util';\n\ntype SnapComponentProps = {\n  snapNotification: SnapNotification;\n};\n\nexport const SnapComponent = ({ snapNotification }: SnapComponentProps) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const trackEvent = useContext(MetaMetricsContext);\n\n  const snapsMetadata = useSelector(getSnapsMetadata);\n\n  const snapsNameGetter = getSnapName(snapsMetadata);\n\n  const handleSnapClick = () => {\n    dispatch(markNotificationsAsRead([snapNotification.id]));\n    trackEvent({\n      category: MetaMetricsEventCategory.NotificationInteraction,\n      event: MetaMetricsEventName.NotificationClicked,\n      properties: {\n        notification_id: snapNotification.id,\n        notification_type: snapNotification.type,\n        previously_read: snapNotification.isRead,\n      },\n    });\n  };\n\n  const handleSnapButton = () => {\n    dispatch(markNotificationsAsRead([snapNotification.id]));\n    trackEvent({\n      category: MetaMetricsEventCategory.NotificationInteraction,\n      event: MetaMetricsEventName.NotificationClicked,\n      properties: {\n        notification_id: snapNotification.id,\n        notification_type: snapNotification.type,\n        previously_read: snapNotification.isRead,\n      },\n    });\n    history.push(getSnapRoute(snapNotification.data.origin));\n  };\n\n  return (\n    <NotificationListItemSnap\n      id={snapNotification.id}\n      snapId={snapNotification.data.origin}\n      isRead={snapNotification.isRead}\n      createdAt={new Date(snapNotification.createdAt)}\n      title={{\n        items: [\n          {\n            text: snapsNameGetter(snapNotification.data.origin) || 'Snap',\n          },\n        ],\n      }}\n      snapMessage={snapNotification.data.message}\n      handleSnapClick={handleSnapClick}\n      handleSnapButton={handleSnapButton}\n    />\n  );\n};\n","import React from 'react';\nimport { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { t } from '../../../../../app/scripts/translate';\nimport { CHAIN_IDS } from '../../../../../shared/constants/network';\nimport { type ExtractedNotification, isOfTypeNodeGuard } from '../node-guard';\nimport type { NotificationComponent } from '../types/notifications/notifications';\n\nimport {\n  NotificationListItem,\n  NotificationDetailInfo,\n  NotificationDetailNetworkFee,\n  NotificationDetailBlockExplorerButton,\n  NotificationDetailTitle,\n  NotificationDetailAsset,\n  NotificationDetailCopyButton,\n  NotificationDetailAddress,\n} from '../../../../components/multichain';\nimport { NotificationListItemIconType } from '../../../../components/multichain/notification-list-item-icon/notification-list-item-icon';\nimport {\n  BadgeWrapperPosition,\n  IconName,\n} from '../../../../components/component-library';\n\nimport {\n  createTextItems,\n  getAmount,\n  formatIsoDateString,\n  getNetworkDetailsByChainId,\n  getUsdAmount,\n} from '../../../../helpers/utils/notification.util';\nimport { decimalToHex } from '../../../../../shared/modules/conversion.utils';\nimport {\n  TextVariant,\n  BackgroundColor,\n  TextColor,\n} from '../../../../helpers/constants/design-system';\n\nconst { TRIGGER_TYPES } = NotificationServicesController.Constants;\n\ntype StakeNotification = ExtractedNotification<\n  | NotificationServicesController.Constants.TRIGGER_TYPES.ROCKETPOOL_STAKE_COMPLETED\n  | NotificationServicesController.Constants.TRIGGER_TYPES.ROCKETPOOL_UNSTAKE_COMPLETED\n  | NotificationServicesController.Constants.TRIGGER_TYPES.LIDO_STAKE_COMPLETED\n  | NotificationServicesController.Constants.TRIGGER_TYPES.LIDO_WITHDRAWAL_COMPLETED\n>;\nconst isStakeNotification = isOfTypeNodeGuard([\n  TRIGGER_TYPES.ROCKETPOOL_STAKE_COMPLETED,\n  TRIGGER_TYPES.ROCKETPOOL_UNSTAKE_COMPLETED,\n  TRIGGER_TYPES.LIDO_STAKE_COMPLETED,\n  TRIGGER_TYPES.LIDO_WITHDRAWAL_COMPLETED,\n]);\n\nconst TITLE_MAP = {\n  [TRIGGER_TYPES.LIDO_STAKE_COMPLETED]: t('notificationItemStaked'),\n  [TRIGGER_TYPES.LIDO_WITHDRAWAL_COMPLETED]: t(\n    'notificationItemUnStakeCompleted',\n  ),\n  [TRIGGER_TYPES.ROCKETPOOL_STAKE_COMPLETED]: t(\n    'notificationItemStakeCompleted',\n  ),\n  [TRIGGER_TYPES.ROCKETPOOL_UNSTAKE_COMPLETED]: t(\n    'notificationItemUnStakeCompleted',\n  ),\n};\n\nconst DIRECTION_MAP = {\n  [TRIGGER_TYPES.ROCKETPOOL_STAKE_COMPLETED]: 'staked',\n  [TRIGGER_TYPES.ROCKETPOOL_UNSTAKE_COMPLETED]: 'unstaked',\n  [TRIGGER_TYPES.LIDO_STAKE_COMPLETED]: 'staked',\n  [TRIGGER_TYPES.LIDO_WITHDRAWAL_COMPLETED]: 'unstaked',\n} as const;\n\nconst STAKING_PROVIDER_MAP = {\n  [TRIGGER_TYPES.LIDO_STAKE_COMPLETED]: 'Lido-staked ETH',\n  [TRIGGER_TYPES.LIDO_WITHDRAWAL_COMPLETED]: 'Lido-staked ETH',\n  [TRIGGER_TYPES.ROCKETPOOL_STAKE_COMPLETED]: 'Rocket Pool-staked ETH',\n  [TRIGGER_TYPES.ROCKETPOOL_UNSTAKE_COMPLETED]: 'Rocket Pool-staked ETH',\n};\n\nconst getTitle = (n: StakeNotification) => {\n  const items = createTextItems([TITLE_MAP[n.type] || ''], TextVariant.bodySm);\n  return items;\n};\n\nconst getDescription = (n: StakeNotification) => {\n  const direction = DIRECTION_MAP[n.type];\n  const items = createTextItems(\n    [direction === 'staked' ? n.data.stake_out.symbol : n.data.stake_in.symbol],\n    TextVariant.bodyMd,\n  );\n  return items;\n};\n\nexport const components: NotificationComponent<StakeNotification> = {\n  guardFn: isStakeNotification,\n  item: ({ notification, onClick }) => {\n    const direction = DIRECTION_MAP[notification.type];\n    const stakingProp =\n      direction === 'staked'\n        ? notification.data.stake_in\n        : notification.data.stake_out;\n\n    const amount = getAmount(stakingProp.amount, stakingProp.decimals, {\n      shouldEllipse: true,\n    });\n    return (\n      <NotificationListItem\n        id={notification.id}\n        isRead={notification.isRead}\n        icon={{\n          type: NotificationListItemIconType.Token,\n          value: notification.data.stake_out.image,\n          badge: {\n            icon: IconName.Stake,\n            position: BadgeWrapperPosition.bottomRight,\n          },\n        }}\n        title={getTitle(notification)}\n        description={getDescription(notification)}\n        createdAt={new Date(notification.createdAt)}\n        amount={`${amount} ${\n          direction === 'staked'\n            ? notification.data.stake_in.symbol\n            : notification.data.stake_out.symbol\n        }`}\n        onClick={onClick}\n      />\n    );\n  },\n  details: {\n    title: ({ notification }) => {\n      const direction = DIRECTION_MAP[notification.type];\n      const title =\n        direction === 'staked'\n          ? `${t('notificationItemStaked')} ${\n              notification.data.stake_in.symbol\n            }`\n          : `${t('notificationItemUnStaked')} ${\n              notification.data.stake_in.symbol\n            }`;\n      return (\n        <NotificationDetailTitle\n          title={title}\n          date={formatIsoDateString(notification.createdAt)}\n        />\n      );\n    },\n    body: {\n      type: 'body_onchain_notification',\n      Account: ({ notification }) => {\n        if (!notification.address) {\n          return null;\n        }\n        return (\n          <NotificationDetailAddress\n            side={t('account') || ''}\n            address={notification.address}\n          />\n        );\n      },\n      Asset: ({ notification }) => {\n        const direction = DIRECTION_MAP[notification.type];\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo } = getNetworkDetailsByChainId(\n          `0x${chainId}` as keyof typeof CHAIN_IDS,\n        );\n        return (\n          <NotificationDetailAsset\n            icon={{\n              src: notification.data.stake_in.image,\n              badge: {\n                src: nativeCurrencyLogo,\n                position: BadgeWrapperPosition.topRight,\n              },\n            }}\n            label={\n              direction === 'staked'\n                ? t('notificationItemStaked') || ''\n                : t('notificationItemUnStaked') || ''\n            }\n            detail={notification.data.stake_in.symbol}\n            fiatValue={`$${getUsdAmount(\n              notification.data.stake_in.amount,\n              notification.data.stake_in.decimals,\n              notification.data.stake_in.usd,\n            )}`}\n            value={`${getAmount(\n              notification.data.stake_in.amount,\n              notification.data.stake_in.decimals,\n              { shouldEllipse: true },\n            )} ${notification.data.stake_in.symbol}`}\n          />\n        );\n      },\n      AssetReceived: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo } = getNetworkDetailsByChainId(\n          `0x${chainId}` as keyof typeof CHAIN_IDS,\n        );\n        return (\n          <NotificationDetailAsset\n            icon={{\n              src: notification.data.stake_out.image,\n              badge: {\n                src: nativeCurrencyLogo,\n                position: BadgeWrapperPosition.topRight,\n              },\n            }}\n            label={t('notificationItemReceived') || ''}\n            detail={notification.data.stake_out.symbol}\n            fiatValue={`$${getUsdAmount(\n              notification.data.stake_out.amount,\n              notification.data.stake_out.decimals,\n              notification.data.stake_out.usd,\n            )}`}\n            value={`${getAmount(\n              notification.data.stake_out.amount,\n              notification.data.stake_out.decimals,\n              { shouldEllipse: true },\n            )} ${notification.data.stake_out.symbol}`}\n          />\n        );\n      },\n      Status: ({ notification }) => (\n        <NotificationDetailInfo\n          icon={{\n            iconName: IconName.Check,\n            color: TextColor.successDefault,\n            backgroundColor: BackgroundColor.successMuted,\n          }}\n          label={t('notificationItemStatus') || ''}\n          detail={t('notificationItemConfirmed') || ''}\n          action={\n            <NotificationDetailCopyButton\n              notification={notification}\n              text={notification.tx_hash}\n              displayText={t('notificationItemTransactionId') || ''}\n            />\n          }\n        />\n      ),\n      Provider: ({ notification }) => {\n        const direction = DIRECTION_MAP[notification.type];\n        const provider = STAKING_PROVIDER_MAP[notification.type];\n\n        return (\n          <NotificationDetailAsset\n            icon={{\n              src: notification.data.stake_out.image,\n              badge: {\n                src:\n                  direction === 'staked'\n                    ? notification.data.stake_out.image\n                    : notification.data.stake_in.image,\n              },\n            }}\n            label={t('notificationItemStakingProvider') || ''}\n            detail={provider}\n          />\n        );\n      },\n      NetworkFee: ({ notification }) => {\n        return <NotificationDetailNetworkFee notification={notification} />;\n      },\n    },\n  },\n  footer: {\n    type: 'footer_onchain_notification',\n    ScanLink: ({ notification }) => {\n      return (\n        <NotificationDetailBlockExplorerButton\n          notification={notification}\n          chainId={notification.chain_id}\n          txHash={notification.tx_hash}\n          id={notification.id}\n        />\n      );\n    },\n  },\n};\n","import React from 'react';\nimport { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { type ExtractedNotification, isOfTypeNodeGuard } from '../node-guard';\nimport type { NotificationComponent } from '../types/notifications/notifications';\nimport { CHAIN_IDS } from '../../../../../shared/constants/network';\nimport { t } from '../../../../../app/scripts/translate';\n\nimport {\n  NotificationListItem,\n  NotificationDetailInfo,\n  NotificationDetailAsset,\n  NotificationDetailNetworkFee,\n  NotificationDetailBlockExplorerButton,\n  NotificationDetailTitle,\n  NotificationDetailCopyButton,\n  NotificationDetailAddress,\n} from '../../../../components/multichain';\nimport { NotificationListItemIconType } from '../../../../components/multichain/notification-list-item-icon/notification-list-item-icon';\nimport {\n  BadgeWrapperPosition,\n  IconName,\n} from '../../../../components/component-library';\n\nimport {\n  createTextItems,\n  getAmount,\n  formatIsoDateString,\n  getNetworkDetailsByChainId,\n  getUsdAmount,\n} from '../../../../helpers/utils/notification.util';\nimport { decimalToHex } from '../../../../../shared/modules/conversion.utils';\nimport {\n  TextVariant,\n  BackgroundColor,\n  TextColor,\n} from '../../../../helpers/constants/design-system';\n\nconst { TRIGGER_TYPES } = NotificationServicesController.Constants;\n\ntype SwapCompletedNotification =\n  ExtractedNotification<NotificationServicesController.Constants.TRIGGER_TYPES.METAMASK_SWAP_COMPLETED>;\nconst isSwapCompletedNotification = isOfTypeNodeGuard([\n  TRIGGER_TYPES.METAMASK_SWAP_COMPLETED,\n]);\n\nconst getTitle = (n: SwapCompletedNotification) => {\n  const items = createTextItems(\n    [\n      t('notificationItemSwapped') || '',\n      n.data.token_in.symbol,\n      t('notificationItemSwappedFor') || '',\n    ],\n    TextVariant.bodySm,\n  );\n  return items;\n};\n\nconst getDescription = (n: SwapCompletedNotification) => {\n  const items = createTextItems([n.data.token_out.symbol], TextVariant.bodyMd);\n  return items;\n};\n\nexport const components: NotificationComponent<SwapCompletedNotification> = {\n  guardFn: isSwapCompletedNotification,\n  item: ({ notification, onClick }) => {\n    return (\n      <NotificationListItem\n        id={notification.id}\n        isRead={notification.isRead}\n        icon={{\n          type: NotificationListItemIconType.Token,\n          value: notification.data.token_out.image,\n          badge: {\n            icon: IconName.SwapHorizontal,\n            position: BadgeWrapperPosition.bottomRight,\n          },\n        }}\n        title={getTitle(notification)}\n        description={getDescription(notification)}\n        createdAt={new Date(notification.createdAt)}\n        amount={`${getAmount(\n          notification.data.token_out.amount,\n          notification.data.token_out.decimals,\n          {\n            shouldEllipse: true,\n          },\n        )} ${notification.data.token_out.symbol}`}\n        onClick={onClick}\n      />\n    );\n  },\n  details: {\n    title: ({ notification }) => (\n      <NotificationDetailTitle\n        title={`${t('notificationItemSwapped') || ''} ${\n          notification.data.token_out.symbol\n        }`}\n        date={formatIsoDateString(notification.createdAt)}\n      />\n    ),\n    body: {\n      type: 'body_onchain_notification',\n      Account: ({ notification }) => {\n        if (!notification.address) {\n          return null;\n        }\n        return (\n          <NotificationDetailAddress\n            side={t('account') || ''}\n            address={notification.address}\n          />\n        );\n      },\n      Asset: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo } = getNetworkDetailsByChainId(\n          `0x${chainId}` as keyof typeof CHAIN_IDS,\n        );\n        return (\n          <NotificationDetailAsset\n            icon={{\n              src: notification.data.token_in.image,\n              badge: {\n                src: nativeCurrencyLogo,\n                position: BadgeWrapperPosition.topRight,\n              },\n            }}\n            label={t('notificationItemSwapped') || ''}\n            detail={notification.data.token_in.symbol}\n            fiatValue={`$${getUsdAmount(\n              notification.data.token_in.amount,\n              notification.data.token_in.decimals,\n              notification.data.token_in.usd,\n            )}`}\n            value={`${getAmount(\n              notification.data.token_in.amount,\n              notification.data.token_in.decimals,\n              { shouldEllipse: true },\n            )} ${notification.data.token_in.symbol}`}\n          />\n        );\n      },\n      AssetReceived: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyLogo } = getNetworkDetailsByChainId(\n          `0x${chainId}` as keyof typeof CHAIN_IDS,\n        );\n        return (\n          <NotificationDetailAsset\n            icon={{\n              src: notification.data.token_out.image,\n              badge: {\n                src: nativeCurrencyLogo,\n                position: BadgeWrapperPosition.topRight,\n              },\n            }}\n            label={t('notificationItemTo') || ''}\n            detail={notification.data.token_out.symbol}\n            fiatValue={`$${getUsdAmount(\n              notification.data.token_out.amount,\n              notification.data.token_out.decimals,\n              notification.data.token_out.usd,\n            )}`}\n            value={`${getAmount(\n              notification.data.token_out.amount,\n              notification.data.token_out.decimals,\n              { shouldEllipse: true },\n            )} ${notification.data.token_out.symbol}`}\n          />\n        );\n      },\n      Status: ({ notification }) => (\n        <NotificationDetailInfo\n          icon={{\n            iconName: IconName.Check,\n            color: TextColor.successDefault,\n            backgroundColor: BackgroundColor.successMuted,\n          }}\n          label={t('notificationItemStatus') || ''}\n          detail={t('notificationItemConfirmed') || ''}\n          action={\n            <NotificationDetailCopyButton\n              notification={notification}\n              text={notification.tx_hash}\n              displayText={t('notificationItemTransactionId') || ''}\n            />\n          }\n        />\n      ),\n      Network: ({ notification }) => {\n        const chainId = decimalToHex(notification.chain_id);\n        const { nativeCurrencyName, nativeCurrencyLogo } =\n          getNetworkDetailsByChainId(`0x${chainId}` as keyof typeof CHAIN_IDS);\n        return (\n          <NotificationDetailAsset\n            icon={{\n              src: nativeCurrencyLogo,\n            }}\n            label={t('notificationItemNetwork') || ''}\n            detail={nativeCurrencyName}\n          />\n        );\n      },\n      Rate: ({ notification }) => {\n        return (\n          <NotificationDetailInfo\n            icon={{\n              iconName: IconName.SwapHorizontal,\n              color: TextColor.infoDefault,\n              backgroundColor: BackgroundColor.infoMuted,\n            }}\n            label={t('notificationItemRate') || ''}\n            detail={`1 ${notification.data.token_out.symbol} ≈ ${(\n              1 / parseFloat(notification.data.rate)\n            ).toFixed(5)} ${notification.data.token_in.symbol}`}\n          />\n        );\n      },\n      NetworkFee: ({ notification }) => {\n        return <NotificationDetailNetworkFee notification={notification} />;\n      },\n    },\n  },\n  footer: {\n    type: 'footer_onchain_notification',\n    ScanLink: ({ notification }) => {\n      return (\n        <NotificationDetailBlockExplorerButton\n          notification={notification}\n          chainId={notification.chain_id}\n          txHash={notification.tx_hash}\n          id={notification.id}\n        />\n      );\n    },\n  },\n};\n","import React, { useContext, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { MetaMetricsContext } from '../../contexts/metametrics';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../shared/constants/metametrics';\nimport { Box } from '../../components/component-library';\nimport {\n  BlockSize,\n  Display,\n  FlexDirection,\n} from '../../helpers/constants/design-system';\nimport { NOTIFICATIONS_ROUTE } from '../../helpers/constants/routes';\nimport { useMarkNotificationAsRead } from '../../hooks/metamask-notifications/useNotifications';\nimport {\n  NotificationComponents,\n  hasNotificationComponents,\n} from './notification-components';\n\ntype Notification = NotificationServicesController.Types.INotification;\nconst { TRIGGER_TYPES } = NotificationServicesController.Constants;\n\nexport function NotificationsListItem({\n  notification,\n}: {\n  notification: Notification;\n}) {\n  const history = useHistory();\n  const trackEvent = useContext(MetaMetricsContext);\n\n  const { markNotificationAsRead } = useMarkNotificationAsRead();\n\n  const handleNotificationClick = useCallback(() => {\n    trackEvent({\n      category: MetaMetricsEventCategory.NotificationInteraction,\n      event: MetaMetricsEventName.NotificationClicked,\n      properties: {\n        notification_id: notification.id,\n        notification_type: notification.type,\n        ...(notification.type !== TRIGGER_TYPES.FEATURES_ANNOUNCEMENT && {\n          chain_id: notification?.chain_id,\n        }),\n        previously_read: notification.isRead,\n      },\n    });\n    markNotificationAsRead([\n      {\n        id: notification.id,\n        type: notification.type,\n        isRead: notification.isRead,\n      },\n    ]);\n    history.push(`${NOTIFICATIONS_ROUTE}/${notification.id}`);\n  }, [notification, markNotificationAsRead, history]);\n\n  if (!hasNotificationComponents(notification.type)) {\n    return null;\n  }\n  const ncs = NotificationComponents[notification.type];\n\n  return (\n    <Box\n      display={Display.Flex}\n      flexDirection={FlexDirection.Row}\n      width={BlockSize.Full}\n    >\n      <ncs.item notification={notification} onClick={handleNotificationClick} />\n    </Box>\n  );\n}\n","import React from 'react';\nimport {\n  Box,\n  IconName,\n  IconSize,\n  Text,\n  Icon,\n} from '../../components/component-library';\nimport {\n  BlockSize,\n  Display,\n  JustifyContent,\n  FlexDirection,\n  AlignItems,\n  TextVariant,\n  TextAlign,\n} from '../../helpers/constants/design-system';\n\ntype NotificationsPlaceholderProps = {\n  title: string;\n  text: string;\n};\n\nexport function NotificationsPlaceholder({\n  title,\n  text,\n}: NotificationsPlaceholderProps) {\n  return (\n    <Box\n      height={BlockSize.Full}\n      width={BlockSize.Full}\n      display={Display.Flex}\n      justifyContent={JustifyContent.center}\n      alignItems={AlignItems.center}\n      flexDirection={FlexDirection.Column}\n      gap={2}\n      data-testid=\"notifications-list-placeholder\"\n    >\n      <Icon name={IconName.Notification} size={IconSize.Xl} />\n      <Text variant={TextVariant.headingSm}>{title}</Text>\n      <Text variant={TextVariant.bodyMd} textAlign={TextAlign.Center}>\n        {text}\n      </Text>\n    </Box>\n  );\n}\n","import React, { useContext } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport type { NotificationServicesController } from '@metamask/notification-services-controller';\nimport { MetaMetricsContext } from '../../contexts/metametrics';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../shared/constants/metametrics';\nimport { useI18nContext } from '../../hooks/useI18nContext';\nimport { useMarkNotificationAsRead } from '../../hooks/metamask-notifications/useNotifications';\nimport { getUnreadNotifications } from '../../selectors';\nimport { markNotificationsAsRead } from '../../store/actions';\nimport { Box, Button, ButtonVariant } from '../../components/component-library';\nimport { BlockSize } from '../../helpers/constants/design-system';\nimport type { NotificationType } from './notifications';\nimport { SNAP } from './snap/types/types';\n\ntype Notification = NotificationServicesController.Types.INotification;\ntype MarkAsReadNotificationsParam =\n  NotificationServicesController.Types.MarkAsReadNotificationsParam;\n\nexport type NotificationsListReadAllButtonProps = {\n  notifications: NotificationType[];\n};\n\nexport const NotificationsListReadAllButton = ({\n  notifications,\n}: NotificationsListReadAllButtonProps) => {\n  const dispatch = useDispatch();\n  const t = useI18nContext();\n  const { markNotificationAsRead } = useMarkNotificationAsRead();\n  const trackEvent = useContext(MetaMetricsContext);\n  const unreadNotifications = useSelector(getUnreadNotifications);\n\n  const handleOnClick = () => {\n    let notificationsRead: MarkAsReadNotificationsParam = [];\n\n    if (notifications && notifications.length > 0) {\n      notificationsRead = notifications\n        .filter(\n          (notification): notification is Notification =>\n            (notification as Notification).id !== undefined &&\n            notification.type !== SNAP,\n        )\n        .map((notification: Notification) => ({\n          id: notification.id,\n          type: notification.type,\n          isRead: notification.isRead,\n        }));\n    }\n\n    trackEvent({\n      category: MetaMetricsEventCategory.NotificationInteraction,\n      event: MetaMetricsEventName.MarkAllNotificationsRead,\n    });\n\n    // Mark all metamask notifications as read\n    markNotificationAsRead(notificationsRead);\n\n    // Mark all snap notifications as read\n    const unreadNotificationIds = unreadNotifications.map(({ id }) => id);\n    dispatch(markNotificationsAsRead(unreadNotificationIds));\n  };\n\n  return (\n    <Box\n      paddingLeft={4}\n      paddingRight={4}\n      paddingTop={4}\n      className=\"notifications__list__read__all__button\"\n    >\n      <Button\n        onClick={handleOnClick}\n        variant={ButtonVariant.Primary}\n        width={BlockSize.Full}\n        data-testid=\"notifications-list-read-all-button\"\n      >\n        {t('notificationsMarkAllAsRead')}\n      </Button>\n    </Box>\n  );\n};\n"]}