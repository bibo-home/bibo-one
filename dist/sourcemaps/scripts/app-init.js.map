{"version":3,"sources":["scripts/node_modules/browser-pack/_prelude.js","scripts/app/scripts/app-init.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","scriptsLoadInitiated","chrome","globalThis","loadTimeLogs","tryImport","fileNames","startTime","Date","getTime","importScripts","endTime","push","name","value","children","console","error","importAllScripts","files","loadFile","fileName","startImportScriptsTime","now","self","document","split","forEach","log","addEventListener","runtime","onMessage","addListener","serviceWorker","state","async","scripting","registerContentScripts","id","matches","js","runAt","world","allFrames","err","warn","registerInPageContentScript"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,KAAAJ,EAAAI,GAAA,KAAAE,EAAA,mBAAAC,iBAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,MAAAI,EAAA,OAAAA,EAAAJ,GAAA,OAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,WAAAK,EAAAE,KAAA,mBAAAF,CAAA,KAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,SAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,MAAA,GAAAa,IAAAC,QAAAd,EAAAC,EAAAC,EAAAC,EAAA,QAAAD,EAAAG,GAAAS,OAAA,SAAAL,EAAA,mBAAAD,iBAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,CAAA,eAAAI,EAAAS,EAAAH,G,aCIA,IAAII,GAAuB,EAC3B,MAAMC,OAAEA,GAAWC,WAGbC,EAAe,GAErB,SAASC,KAAaC,GACpB,IACE,MAAMC,GAAY,IAAIC,MAAOC,UAE7BC,iBAAiBJ,GACjB,MAAMK,GAAU,IAAIH,MAAOC,UAS3B,OARAL,EAAaQ,KAAK,CAChBC,KAAMP,EAAU,GAChBQ,MAAOH,EAAUJ,EACjBQ,SAAU,GACVR,YACAI,aAGK,CACT,CAAE,MAAO3B,GACPgC,QAAQC,MAAMjC,EAChB,CAEA,OAAO,CACT,CAEA,SAASkC,IAEP,GAAIjB,EACF,OAEFA,GAAuB,EACvB,MAAMkB,EAAQ,GAGRC,EAAYC,IAIdF,EAAMP,KAAKS,EACb,EAGIC,EAAyBd,KAAKe,MAcpCH,EAAS,iCAIWI,KAAKC,UAErBL,EAAS,sBAGXA,EAAS,0BAKTA,EAAS,kCACTA,EAAS,+BACTA,EAAS,6BAUS,6TACSM,MAAM,KAC1BC,SAASN,GAAaD,EAASC,KAGxChB,KAAac,GAEgBX,KAAKe,MAGlCP,QAAQY,IACN,wCACGpB,KAAKe,MAAQD,GAA0B,IAqB9C,CAIAE,KAAKK,iBAAiB,UAAWX,GAWjChB,EAAO4B,QAAQC,UAAUC,aAAY,KACnCd,KACO,KAcwB,cAA7BM,KAAKS,cAAcC,OACrBhB,IAQkCiB,WAClC,UACQjC,EAAOkC,UAAUC,uBAAuB,CAC5C,CACEC,GAAI,SACJC,QAAS,CAAC,aAAc,aAAc,eACtCC,GAAI,CAAC,qBACLC,MAAO,iBACPC,MAAO,OACPC,WAAW,IAGjB,CAAE,MAAOC,GAQP5B,QAAQ6B,KAAK,sDAAsDD,IACrE,GAGFE,E","file":"../../metamask/scripts/app-init.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// This file is used only for manifest version 3\n\n// Represents if importAllScripts has been run\n// eslint-disable-next-line\nlet scriptsLoadInitiated = false;\nconst { chrome } = globalThis;\nconst testMode = process.env.IN_TEST;\n\nconst loadTimeLogs = [];\n// eslint-disable-next-line import/unambiguous\nfunction tryImport(...fileNames) {\n  try {\n    const startTime = new Date().getTime();\n    // eslint-disable-next-line\n    importScripts(...fileNames);\n    const endTime = new Date().getTime();\n    loadTimeLogs.push({\n      name: fileNames[0],\n      value: endTime - startTime,\n      children: [],\n      startTime,\n      endTime,\n    });\n\n    return true;\n  } catch (e) {\n    console.error(e);\n  }\n\n  return false;\n}\n\nfunction importAllScripts() {\n  // Bail if we've already imported scripts\n  if (scriptsLoadInitiated) {\n    return;\n  }\n  scriptsLoadInitiated = true;\n  const files = [];\n\n  // In testMode individual files are imported, this is to help capture load time stats\n  const loadFile = (fileName) => {\n    if (testMode) {\n      tryImport(fileName);\n    } else {\n      files.push(fileName);\n    }\n  };\n\n  const startImportScriptsTime = Date.now();\n\n  // value of useSnow below is dynamically replaced at build time with actual value\n  const useSnow = process.env.USE_SNOW;\n  if (typeof useSnow !== 'boolean') {\n    throw new Error('Missing USE_SNOW environment variable');\n  }\n\n  // value of applyLavaMoat below is dynamically replaced at build time with actual value\n  const applyLavaMoat = process.env.APPLY_LAVAMOAT;\n  if (typeof applyLavaMoat !== 'boolean') {\n    throw new Error('Missing APPLY_LAVAMOAT environment variable');\n  }\n\n  loadFile('../scripts/sentry-install.js');\n\n  if (useSnow) {\n    // eslint-disable-next-line no-undef\n    const isWorker = !self.document;\n    if (!isWorker) {\n      loadFile('../scripts/snow.js');\n    }\n\n    loadFile('../scripts/use-snow.js');\n  }\n\n  // Always apply LavaMoat in e2e test builds, so that we can capture initialization stats\n  if (testMode || applyLavaMoat) {\n    loadFile('../scripts/runtime-lavamoat.js');\n    loadFile('../scripts/lockdown-more.js');\n    loadFile('../scripts/policy-load.js');\n  } else {\n    loadFile('../scripts/init-globals.js');\n    loadFile('../scripts/lockdown-install.js');\n    loadFile('../scripts/lockdown-run.js');\n    loadFile('../scripts/lockdown-more.js');\n    loadFile('../scripts/runtime-cjs.js');\n  }\n\n  // This environment variable is set to a string of comma-separated relative file paths.\n  const rawFileList = process.env.FILE_NAMES;\n  const fileList = rawFileList.split(',');\n  fileList.forEach((fileName) => loadFile(fileName));\n\n  // Import all required resources\n  tryImport(...files);\n\n  const endImportScriptsTime = Date.now();\n\n  // for performance metrics/reference\n  console.log(\n    `SCRIPTS IMPORT COMPLETE in Seconds: ${\n      (Date.now() - startImportScriptsTime) / 1000\n    }`,\n  );\n\n  // In testMode load time logs are output to console\n  if (testMode) {\n    console.log(\n      `Time for each import: ${JSON.stringify(\n        {\n          name: 'Total',\n          children: loadTimeLogs,\n          startTime: startImportScriptsTime,\n          endTime: endImportScriptsTime,\n          value: endImportScriptsTime - startImportScriptsTime,\n          version: 1,\n        },\n        undefined,\n        '    ',\n      )}`,\n    );\n  }\n}\n\n// Ref: https://stackoverflow.com/questions/66406672/chrome-extension-mv3-modularize-service-worker-js-file\n// eslint-disable-next-line no-undef\nself.addEventListener('install', importAllScripts);\n\n/*\n * A keepalive message listener to prevent Service Worker getting shut down due to inactivity.\n * UI sends the message periodically, in a setInterval.\n * Chrome will revive the service worker if it was shut down, whenever a new message is sent, but only if a listener was defined here.\n *\n * chrome below needs to be replaced by cross-browser object,\n * but there is issue in importing webextension-polyfill into service worker.\n * chrome does seems to work in at-least all chromium based browsers\n */\nchrome.runtime.onMessage.addListener(() => {\n  importAllScripts();\n  return false;\n});\n\n/*\n * If the service worker is stopped and restarted, then the 'install' event will not occur\n * and the chrome.runtime.onMessage will only occur if it was a message that restarted the\n * the service worker. To ensure that importAllScripts is called, we need to call it in module\n * scope as below. To avoid having `importAllScripts()` called before installation, we only\n * call it if the serviceWorker state is 'activated'. More on service worker states here:\n * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state. Testing also shows\n * that whenever the already installed service worker is stopped and then restarted, the state\n * is 'activated'.\n */\n// eslint-disable-next-line no-undef\nif (self.serviceWorker.state === 'activated') {\n  importAllScripts();\n}\n\n/*\n * This content script is injected programmatically because\n * MAIN world injection does not work properly via manifest\n * https://bugs.chromium.org/p/chromium/issues/detail?id=634381\n */\nconst registerInPageContentScript = async () => {\n  try {\n    await chrome.scripting.registerContentScripts([\n      {\n        id: 'inpage',\n        matches: ['file://*/*', 'http://*/*', 'https://*/*'],\n        js: ['scripts/inpage.js'],\n        runAt: 'document_start',\n        world: 'MAIN',\n        allFrames: true,\n      },\n    ]);\n  } catch (err) {\n    /**\n     * An error occurs when app-init.js is reloaded. Attempts to avoid the duplicate script error:\n     * 1. registeringContentScripts inside runtime.onInstalled - This caused a race condition\n     *    in which the provider might not be loaded in time.\n     * 2. await chrome.scripting.getRegisteredContentScripts() to check for an existing\n     *    inpage script before registering - The provider is not loaded on time.\n     */\n    console.warn(`Dropped attempt to register inpage content script. ${err}`);\n  }\n};\n\nregisterInPageContentScript();\n"]}