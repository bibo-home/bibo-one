{"version":3,"sources":["node_modules/@metamask/snaps-execution-environments/dist/index.cjs","node_modules/@metamask/snaps-execution-environments/dist/proxy/ProxySnapExecutor.cjs","node_modules/@metamask/snaps-execution-environments/dist/proxy/index.cjs","node_modules/@metamask/snaps-execution-environments/package.json","offscreen/scripts/callback-processor.ts","offscreen/scripts/lattice.ts","offscreen/scripts/ledger.ts","offscreen/scripts/trezor.ts","offscreen/scripts/offscreen.ts"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__exportStar","exports","p","prototype","hasOwnProperty","call","value","require","_ProxySnapExecutor_instances","_ProxySnapExecutor_stream","_ProxySnapExecutor_frameUrl","_ProxySnapExecutor_onData","_ProxySnapExecutor_initializeJob","_ProxySnapExecutor_terminateJob","__classPrivateFieldSet","receiver","state","kind","f","TypeError","has","set","__classPrivateFieldGet","__importDefault","mod","default","ProxySnapExecutor","post_message_stream_1","package_json_1","snaps_utils_1","utils_1","IFRAME_URL","version","initialize","stream","frameUrl","constructor","add","jobs","on","bind","WeakMap","WeakSet","data","jobId","request","method","write","then","catch","error","logError","async","window","createWindow","jobStream","WindowPostMessageStream","name","target","targetWindow","targetOrigin","id","assert","iframe","document","getElementById","remove","destroy","module","description","repository","type","url","sideEffects","import","types","main","files","scripts","test","posttest","lint","clean","build","start","dependencies","nanoid","devDependencies","babelify","browserify","deepmerge","depcheck","esbuild","eslint","jest","lavamoat","prettier","rimraf","ses","terser","typescript","vite","webdriverio","yargs","engines","node","publishConfig","access","registry","CallbackProcessor","_defineProperty","Map","registerCallback","callback","currentMessageId","messageCallbacks","processCallback","messageId","delete","chrome","runtime","onMessage","addListener","msg","_sender","sendResponse","_offscreenCommunication","OffscreenCommunicationTarget","latticeOffscreen","browserTab","open","Error","openConnectorTab","params","listenInterval","setInterval","closed","clearInterval","addEventListener","event","origin","KnownOrigins","lattice","source","creds","JSON","parse","deviceID","password","result","err","Promise","resolve","createElement","src","allow","onload","ledger","contentWindow","action","LEDGER_KEYRING_IFRAME_CONNECTED_EVENT","sendMessage","OffscreenCommunicationEvents","ledgerDeviceConnect","payload","connected","callbackProcessor","ledgerOffscreen","success","iframeMsg","LEDGER_FRAME_TARGET","postMessage","setupMessageListeners","body","appendChild","_callbackProcessor","trezorOffscreen","TrezorAction","init","_connectWeb","DEVICE_EVENT","_event$payload$featur","DEVICE","CONNECT","features","model","extension","trezorDeviceConnect","env","dispose","getPublicKey","signTransaction","ethereumSignTransaction","signMessage","ethereumSignMessage","signTypedData","ethereumSignTypedData","e","r","t","_getRequireWildcardCache","n","__proto__","a","u","i","_interopRequireWildcard","_postMessageStream","_snapsExecutionEnvironments","_ledger","_interopRequireDefault","_trezor","_lattice","obj","parentStream","BrowserRuntimePostMessageStream","initializePostMessageStream","ledgerInitTimeout","_","reject","setTimeout","OFFSCREEN_LEDGER_INIT_TIMEOUT","race","console","extensionMain","isBooted","webdriverPresent","navigator","webdriver"],"mappings":"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","file":"../metamask/offscreen-0.js","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./proxy/index.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _ProxySnapExecutor_instances, _ProxySnapExecutor_stream, _ProxySnapExecutor_frameUrl, _ProxySnapExecutor_onData, _ProxySnapExecutor_initializeJob, _ProxySnapExecutor_terminateJob;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProxySnapExecutor = void 0;\nconst post_message_stream_1 = require(\"@metamask/post-message-stream\");\n// eslint-disable-next-line import/no-extraneous-dependencies\nconst package_json_1 = __importDefault(require(\"@metamask/snaps-execution-environments/package.json\"));\nconst snaps_utils_1 = require(\"@metamask/snaps-utils\");\nconst utils_1 = require(\"@metamask/utils\");\nconst IFRAME_URL = `https://execution.metamask.io/iframe/${package_json_1.default.version}/index.html`;\n/**\n * A \"proxy\" snap executor that uses a level of indirection to execute snaps.\n *\n * Useful for multiple execution environments.\n *\n * This is not a traditional snap executor, as it does not execute snaps itself.\n * Instead, it creates an iframe window for each snap execution, and sends the\n * snap execution request to the iframe window. The iframe window is responsible\n * for executing the snap.\n *\n * This executor is persisted between snap executions. The executor essentially\n * acts as a proxy between the client and the iframe execution environment.\n */\nclass ProxySnapExecutor {\n    /**\n     * Initialize the executor with the given stream. This is a wrapper around the\n     * constructor.\n     *\n     * @param stream - The stream to use for communication.\n     * @param frameUrl - An optional URL for the iframe to use.\n     * @returns The initialized executor.\n     */\n    static initialize(stream, frameUrl = IFRAME_URL) {\n        return new ProxySnapExecutor(stream, frameUrl);\n    }\n    constructor(stream, frameUrl) {\n        _ProxySnapExecutor_instances.add(this);\n        _ProxySnapExecutor_stream.set(this, void 0);\n        _ProxySnapExecutor_frameUrl.set(this, void 0);\n        this.jobs = {};\n        __classPrivateFieldSet(this, _ProxySnapExecutor_stream, stream, \"f\");\n        __classPrivateFieldGet(this, _ProxySnapExecutor_stream, \"f\").on('data', __classPrivateFieldGet(this, _ProxySnapExecutor_instances, \"m\", _ProxySnapExecutor_onData).bind(this));\n        __classPrivateFieldSet(this, _ProxySnapExecutor_frameUrl, frameUrl, \"f\");\n    }\n}\nexports.ProxySnapExecutor = ProxySnapExecutor;\n_ProxySnapExecutor_stream = new WeakMap(), _ProxySnapExecutor_frameUrl = new WeakMap(), _ProxySnapExecutor_instances = new WeakSet(), _ProxySnapExecutor_onData = function _ProxySnapExecutor_onData(data) {\n    const { jobId, data: request } = data;\n    if (!this.jobs[jobId]) {\n        // This ensures that a job is initialized before it is used. To avoid\n        // code duplication, we call the `#onData` method again, which will\n        // run the rest of the logic after initialization.\n        __classPrivateFieldGet(this, _ProxySnapExecutor_instances, \"m\", _ProxySnapExecutor_initializeJob).call(this, jobId)\n            .then(() => {\n            __classPrivateFieldGet(this, _ProxySnapExecutor_instances, \"m\", _ProxySnapExecutor_onData).call(this, data);\n        })\n            .catch((error) => {\n            (0, snaps_utils_1.logError)('[Worker] Error initializing job:', error);\n        });\n        return;\n    }\n    // This is a method specific to the `OffscreenSnapExecutor`, as the service\n    // itself does not have access to the iframes directly.\n    if (request.method === 'terminateJob') {\n        __classPrivateFieldGet(this, _ProxySnapExecutor_instances, \"m\", _ProxySnapExecutor_terminateJob).call(this, jobId);\n        return;\n    }\n    this.jobs[jobId].stream.write(request);\n}, _ProxySnapExecutor_initializeJob = \n/**\n * Create a new iframe and set up a stream to communicate with it.\n *\n * @param jobId - The job ID.\n * @returns The executor job object.\n */\nasync function _ProxySnapExecutor_initializeJob(jobId) {\n    const window = await (0, snaps_utils_1.createWindow)(__classPrivateFieldGet(this, _ProxySnapExecutor_frameUrl, \"f\"), jobId);\n    const jobStream = new post_message_stream_1.WindowPostMessageStream({\n        name: 'parent',\n        target: 'child',\n        targetWindow: window, // iframe's internal window\n        targetOrigin: '*',\n    });\n    // Write messages from the iframe to the parent, wrapped with the job ID.\n    jobStream.on('data', (data) => {\n        __classPrivateFieldGet(this, _ProxySnapExecutor_stream, \"f\").write({ data, jobId });\n    });\n    this.jobs[jobId] = { id: jobId, window, stream: jobStream };\n    return this.jobs[jobId];\n}, _ProxySnapExecutor_terminateJob = function _ProxySnapExecutor_terminateJob(jobId) {\n    (0, utils_1.assert)(this.jobs[jobId], `Job \"${jobId}\" not found.`);\n    const iframe = document.getElementById(jobId);\n    (0, utils_1.assert)(iframe, `Iframe with ID \"${jobId}\" not found.`);\n    iframe.remove();\n    this.jobs[jobId].stream.destroy();\n    delete this.jobs[jobId];\n};\n//# sourceMappingURL=ProxySnapExecutor.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./ProxySnapExecutor.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","module.exports={\n  \"name\": \"@metamask/snaps-execution-environments\",\n  \"version\": \"6.7.2\",\n  \"description\": \"Snap sandbox environments for executing SES javascript\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/MetaMask/snaps.git\"\n  },\n  \"sideEffects\": false,\n  \"exports\": {\n    \".\": {\n      \"import\": {\n        \"types\": \"./dist/index.d.mts\",\n        \"default\": \"./dist/index.mjs\"\n      },\n      \"require\": {\n        \"types\": \"./dist/index.d.cts\",\n        \"default\": \"./dist/index.cjs\"\n      }\n    },\n    \"./dist/browserify/node-process/bundle.js\": {\n      \"default\": \"./dist/browserify/node-process/bundle.js\"\n    },\n    \"./dist/browserify/node-thread/bundle.js\": {\n      \"default\": \"./dist/browserify/node-thread/bundle.js\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"main\": \"./dist/index.cjs\",\n  \"module\": \"./dist/index.mjs\",\n  \"types\": \"./dist/index.d.cts\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"test\": \"rimraf coverage && jest && yarn test:browser && yarn posttest\",\n    \"posttest\": \"ts-node scripts/coverage.ts && rimraf coverage/jest coverage/wdio\",\n    \"test:browser\": \"wdio run wdio.config.js\",\n    \"test:ci\": \"yarn test\",\n    \"test:watch\": \"jest --watch\",\n    \"lint:eslint\": \"eslint . --cache --ext js,ts,jsx,tsx\",\n    \"lint:misc\": \"prettier --no-error-on-unmatched-pattern --loglevel warn \\\"**/*.json\\\" \\\"**/*.md\\\" \\\"**/*.html\\\" \\\"!CHANGELOG.md\\\" --ignore-path ./.prettierignore\",\n    \"lint:fix\": \"yarn lint:eslint --fix && yarn lint:misc --write\",\n    \"lint:changelog\": \"../../scripts/validate-changelog.sh @metamask/snaps-execution-environments\",\n    \"lint\": \"yarn lint:eslint && yarn lint:misc --check && yarn lint:changelog && yarn lint:dependencies\",\n    \"clean\": \"rimraf '*.tsbuildinfo' 'dist' 'src/__GENERATED__/' 'coverage/*' '__test__/*'\",\n    \"build\": \"ts-bridge --project tsconfig.build.json --verbose --no-references && yarn build:lavamoat\",\n    \"build:lavamoat\": \"lavamoat scripts/build.js --policy lavamoat/build-system/policy.json  --policyOverride lavamoat/build-system/policy-override.json\",\n    \"build:lavamoat:policy\": \"yarn build:lavamoat --writeAutoPolicy && node scripts/build.js --writeAutoPolicy\",\n    \"auto-changelog-init\": \"auto-changelog init\",\n    \"publish:preview\": \"yarn npm publish --tag preview\",\n    \"lint:ci\": \"yarn lint\",\n    \"start\": \"node scripts/start.js\",\n    \"lint:dependencies\": \"depcheck\"\n  },\n  \"dependencies\": {\n    \"@metamask/json-rpc-engine\": \"^9.0.2\",\n    \"@metamask/object-multiplex\": \"^2.0.0\",\n    \"@metamask/post-message-stream\": \"^8.1.1\",\n    \"@metamask/providers\": \"^17.1.2\",\n    \"@metamask/rpc-errors\": \"^6.3.1\",\n    \"@metamask/snaps-sdk\": \"^6.5.0\",\n    \"@metamask/snaps-utils\": \"^8.1.1\",\n    \"@metamask/superstruct\": \"^3.1.0\",\n    \"@metamask/utils\": \"^9.2.1\",\n    \"nanoid\": \"^3.1.31\",\n    \"readable-stream\": \"^3.6.2\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.23.2\",\n    \"@babel/preset-env\": \"^7.23.2\",\n    \"@babel/preset-typescript\": \"^7.23.2\",\n    \"@esbuild-plugins/node-globals-polyfill\": \"^0.2.3\",\n    \"@esbuild-plugins/node-modules-polyfill\": \"^0.2.2\",\n    \"@lavamoat/allow-scripts\": \"^3.0.4\",\n    \"@lavamoat/lavapack\": \"^6.1.1\",\n    \"@lavamoat/lavatube\": \"^1.0.0\",\n    \"@metamask/auto-changelog\": \"^3.4.4\",\n    \"@metamask/eslint-config\": \"^12.1.0\",\n    \"@metamask/eslint-config-jest\": \"^12.1.0\",\n    \"@metamask/eslint-config-nodejs\": \"^12.1.0\",\n    \"@metamask/eslint-config-typescript\": \"^12.1.0\",\n    \"@swc/core\": \"1.3.78\",\n    \"@swc/jest\": \"^0.2.26\",\n    \"@ts-bridge/cli\": \"^0.5.1\",\n    \"@types/express\": \"^4.17.17\",\n    \"@types/jest\": \"^27.5.1\",\n    \"@types/node\": \"18.14.2\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.42.1\",\n    \"@typescript-eslint/parser\": \"^6.21.0\",\n    \"@wdio/browser-runner\": \"^8.19.0\",\n    \"@wdio/cli\": \"^8.19.0\",\n    \"@wdio/globals\": \"^8.19.0\",\n    \"@wdio/mocha-framework\": \"^8.19.0\",\n    \"@wdio/spec-reporter\": \"^8.19.0\",\n    \"@wdio/static-server-service\": \"^8.19.0\",\n    \"babel-plugin-tsconfig-paths-module-resolver\": \"^1.0.4\",\n    \"babelify\": \"^10.0.0\",\n    \"browserify\": \"^17.0.0\",\n    \"deepmerge\": \"^4.2.2\",\n    \"depcheck\": \"^1.4.7\",\n    \"esbuild\": \"^0.18.10\",\n    \"eslint\": \"^8.27.0\",\n    \"eslint-config-prettier\": \"^8.5.0\",\n    \"eslint-plugin-import\": \"^2.26.0\",\n    \"eslint-plugin-jest\": \"^27.1.5\",\n    \"eslint-plugin-jsdoc\": \"^41.1.2\",\n    \"eslint-plugin-n\": \"^15.7.0\",\n    \"eslint-plugin-prettier\": \"^4.2.1\",\n    \"eslint-plugin-promise\": \"^6.1.1\",\n    \"expect-webdriverio\": \"^4.4.1\",\n    \"istanbul-lib-coverage\": \"^3.2.0\",\n    \"istanbul-lib-report\": \"^3.0.0\",\n    \"istanbul-reports\": \"^3.1.5\",\n    \"jest\": \"^29.0.2\",\n    \"jest-environment-node\": \"^29.5.0\",\n    \"jest-fetch-mock\": \"^3.0.3\",\n    \"lavamoat\": \"^8.0.4\",\n    \"lavamoat-browserify\": \"^17.0.5\",\n    \"prettier\": \"^2.7.1\",\n    \"prettier-plugin-packagejson\": \"^2.2.11\",\n    \"rimraf\": \"^4.1.2\",\n    \"serve-handler\": \"^6.1.5\",\n    \"ses\": \"^1.1.0\",\n    \"terser\": \"^5.17.7\",\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"~5.3.3\",\n    \"vite\": \"^4.3.9\",\n    \"vite-tsconfig-paths\": \"^4.0.5\",\n    \"wdio-chromedriver-service\": \"^8.1.1\",\n    \"wdio-geckodriver-service\": \"^5.0.2\",\n    \"webdriverio\": \"^8.19.0\",\n    \"yargs\": \"^17.7.1\"\n  },\n  \"engines\": {\n    \"node\": \"^18.16 || >=20\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\",\n    \"registry\": \"https://registry.npmjs.org/\"\n  }\n}","/**\n * The ledger iframe from the ledger keyring library is embedded in the ledger\n * offscreen iframe that exists in the extension codebase. This class is used\n * to add an identifier to the message that will be returned in the response\n * from the postMessage call to the ledger keyring iframe. Using this method\n * allows for proper routing of the response to the correct callback. There is\n * an id incrementer that is used to generate a unique messageId for each\n * registered callback. a Callback is registered when the ledger-iframe\n * receives a message requesting data from the leddger device.\n */\nexport class CallbackProcessor {\n  currentMessageId = 0;\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  messageCallbacks = new Map<number, (response?: any) => void>();\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  registerCallback(callback: (response?: any) => void) {\n    this.currentMessageId += 1;\n    this.messageCallbacks.set(this.currentMessageId, callback);\n\n    return this.currentMessageId;\n  }\n\n  processCallback(data: { messageId: number }) {\n    if (this.messageCallbacks.has(data.messageId)) {\n      const callback = this.messageCallbacks.get(data.messageId);\n      // This if block should always be true given that we used the has method\n      // to check for the existence. However, typescript does not know that and\n      // rather than use a non-null assertion this is a safer way to handle it.\n      if (callback) {\n        // Delete the message callback as once its processed it should not\n        // receive additional data and can be gargabe collected.\n        this.messageCallbacks.delete(data.messageId);\n        return callback(data);\n      }\n    }\n    return null;\n  }\n}\n","import {\n  KnownOrigins,\n  OffscreenCommunicationTarget,\n} from '../../shared/constants/offscreen-communication';\n\nasync function openConnectorTab(url: string) {\n  const browserTab = window.open(url);\n  if (!browserTab) {\n    throw new Error('Failed to open Lattice connector.');\n  }\n\n  return browserTab;\n}\n\nexport default function init() {\n  /**\n   * The main element of the eth-lattice-keyring library that is impacted by MV3\n   * is the _openConnectorTab method which is responsible for opening a tab to\n   * the lattice connector. This method is called by the _getCreds method of the\n   * keyring. In the default keyring this would be attempted inside the service\n   * worker which has no DOM and therefore would fail. The solution is to split\n   * the functionality so that the openConnectorTab portion operates inside the\n   * offscreen document with its DOM. That is what this file is responsible for.\n   *\n   * When receiving a message from the service worker script targeting the\n   * lattice iframe, this listener will execute and open the new tab for\n   * connecting to the lattice device. The response from the lattice connector\n   * is then sent back to the offscreen bridge for lattice, which extends from\n   * the eth-lattice-keyring Keyring class.\n   */\n  chrome.runtime.onMessage.addListener((msg, _sender, sendResponse) => {\n    if (msg.target !== OffscreenCommunicationTarget.latticeOffscreen) {\n      return;\n    }\n\n    // Open the tab\n    openConnectorTab(msg.params.url).then((browserTab) => {\n      // Watch for the open window closing before creds are sent back\n      const listenInterval = setInterval(() => {\n        if (browserTab.closed) {\n          clearInterval(listenInterval);\n          sendResponse({\n            error: new Error('Lattice connector closed.'),\n          });\n        }\n      }, 500);\n\n      // On a Chromium browser we can just listen for a window message from the\n      // lattice tab (using the event.origin property). When we get that it'll be\n      // the response from the lattice connector with the deviceID and password.\n      // We can then forward that response to the lattice-offscreen-keyring's\n      // _getCreds method using sendResponse API from the chrome runtime.\n      window.addEventListener(\n        'message',\n        (event) => {\n          // Ensure origin\n          if (\n            event.origin !== KnownOrigins.lattice &&\n            event.source === browserTab\n          ) {\n            return;\n          }\n\n          try {\n            // Stop the listener\n            clearInterval(listenInterval);\n\n            // Parse and return creds\n            const creds = JSON.parse(event.data);\n            if (!creds.deviceID || !creds.password) {\n              sendResponse({\n                error: new Error('Invalid credentials returned from Lattice.'),\n              });\n            }\n            sendResponse({\n              result: creds,\n            });\n          } catch (err) {\n            sendResponse({\n              error: err,\n            });\n          }\n        },\n        false,\n      );\n    });\n\n    // eslint-disable-next-line consistent-return\n    return true;\n  });\n}\n","import {\n  LedgerAction,\n  OffscreenCommunicationEvents,\n  OffscreenCommunicationTarget,\n  KnownOrigins,\n} from '../../shared/constants/offscreen-communication';\nimport { CallbackProcessor } from './callback-processor';\n\nconst LEDGER_FRAME_TARGET = 'LEDGER-IFRAME';\n\n/**\n * The ledger keyring iframe will send this event name when the ledger is\n * connected to the iframe.\n */\nconst LEDGER_KEYRING_IFRAME_CONNECTED_EVENT = 'ledger-connection-event';\n\nconst callbackProcessor = new CallbackProcessor();\n\nfunction setupMessageListeners(iframe: HTMLIFrameElement) {\n  // This listener receives action responses from the live ledger iframe\n  // Then forwards the response to the offscreen bridge\n  window.addEventListener('message', ({ origin, data, source }) => {\n    if (origin !== KnownOrigins.ledger || source !== iframe.contentWindow) {\n      return;\n    }\n\n    if (data) {\n      if (data.action === LEDGER_KEYRING_IFRAME_CONNECTED_EVENT) {\n        chrome.runtime.sendMessage({\n          action: OffscreenCommunicationEvents.ledgerDeviceConnect,\n          payload: data.payload.connected,\n        });\n\n        return;\n      }\n\n      // Every message from the ledger iframe will have a messageId that was\n      // assigned to it by the callbackProcessor. This messageId is used by the\n      // callbackProcessor to trigger the appropriate callback from the\n      // initiating request.\n      callbackProcessor.processCallback(data);\n    }\n  });\n\n  // This listener received action messages from the offscreen bridge\n  // Then it forwards the message to the live ledger iframe\n  chrome.runtime.onMessage.addListener(\n    (\n      msg: {\n        target: string;\n        action: LedgerAction;\n        // TODO: Replace `any` with type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        params: any;\n      },\n      _sender,\n      sendResponse,\n    ) => {\n      if (msg.target !== OffscreenCommunicationTarget.ledgerOffscreen) {\n        return;\n      }\n\n      if (!iframe.contentWindow) {\n        const error = new Error('Ledger iframe not present');\n        sendResponse({\n          success: false,\n          payload: {\n            error,\n          },\n        });\n        return;\n      }\n\n      const messageId = callbackProcessor.registerCallback(sendResponse);\n      // The ledger action constants use the same values as the ledger keyring\n      // library expectations. That way we can just forward the message to the\n      // iframe and it will be handled by the ledger keyring library. We append\n      // the messageId which will be included in the response so that it can be\n      // routed accordingly through the callback-processor.\n      const iframeMsg = {\n        ...msg,\n        target: LEDGER_FRAME_TARGET,\n        messageId,\n      };\n\n      iframe.contentWindow.postMessage(iframeMsg, KnownOrigins.ledger);\n\n      // This keeps sendResponse function valid after return\n      // https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage\n      // eslint-disable-next-line consistent-return\n      return true;\n    },\n  );\n}\n\nexport default async function init() {\n  return new Promise<void>((resolve) => {\n    const iframe = document.createElement('iframe');\n    iframe.src = 'https://metamask.github.io/eth-ledger-bridge-keyring';\n    iframe.allow = 'hid';\n    iframe.onload = () => {\n      setupMessageListeners(iframe);\n      resolve();\n    };\n    document.body.appendChild(iframe);\n  });\n}\n","import TrezorConnectSDK, { DEVICE, DEVICE_EVENT } from '@trezor/connect-web';\nimport {\n  OffscreenCommunicationEvents,\n  OffscreenCommunicationTarget,\n  TrezorAction,\n} from '../../shared/constants/offscreen-communication';\n\n/**\n * This listener is used to listen for messages targeting the Trezor Offscreen\n * handler. Each package sent has an action that is used to determine what calls\n * to the Trezor Connect SDK should be made. The response is then sent back to\n * the sender of the message, which in this case will be the\n * TrezorOffscreenBridge.\n */\nexport default function init() {\n  chrome.runtime.onMessage.addListener(\n    (\n      msg: {\n        target: string;\n        action: TrezorAction;\n        // TODO: Replace `any` with type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        params: any;\n      },\n      _sender,\n      sendResponse,\n    ) => {\n      if (msg.target !== OffscreenCommunicationTarget.trezorOffscreen) {\n        return;\n      }\n\n      switch (msg.action) {\n        case TrezorAction.init:\n          TrezorConnectSDK.on(DEVICE_EVENT, (event) => {\n            if (event.type !== DEVICE.CONNECT) {\n              return;\n            }\n\n            if (event.payload.features?.model) {\n              chrome.runtime.sendMessage({\n                target: OffscreenCommunicationTarget.extension,\n                event: OffscreenCommunicationEvents.trezorDeviceConnect,\n                payload: event.payload.features.model,\n              });\n            }\n          });\n\n          TrezorConnectSDK.init({\n            ...msg.params,\n            env: 'web',\n          }).then(() => {\n            sendResponse();\n          });\n\n          break;\n\n        case TrezorAction.dispose:\n          // This removes the Trezor Connect iframe from the DOM\n          // This method is not well documented, but the code it calls can be seen\n          // here: https://github.com/trezor/connect/blob/dec4a56af8a65a6059fb5f63fa3c6690d2c37e00/src/js/iframe/builder.js#L181\n          TrezorConnectSDK.dispose();\n\n          sendResponse();\n\n          break;\n\n        case TrezorAction.getPublicKey:\n          TrezorConnectSDK.getPublicKey(msg.params).then((result) => {\n            sendResponse(result);\n          });\n\n          break;\n\n        case TrezorAction.signTransaction:\n          TrezorConnectSDK.ethereumSignTransaction(msg.params).then(\n            (result) => {\n              sendResponse(result);\n            },\n          );\n\n          break;\n\n        case TrezorAction.signMessage:\n          TrezorConnectSDK.ethereumSignMessage(msg.params).then((result) => {\n            sendResponse(result);\n          });\n\n          break;\n\n        case TrezorAction.signTypedData:\n          TrezorConnectSDK.ethereumSignTypedData(msg.params).then((result) => {\n            sendResponse(result);\n          });\n\n          break;\n\n        default:\n          sendResponse({\n            success: false,\n            payload: {\n              error: 'Trezor action not supported',\n            },\n          });\n      }\n\n      // This keeps sendResponse function valid after return\n      // https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage\n      // eslint-disable-next-line consistent-return\n      return true;\n    },\n  );\n}\n","import { BrowserRuntimePostMessageStream } from '@metamask/post-message-stream';\nimport { ProxySnapExecutor } from '@metamask/snaps-execution-environments';\nimport { isObject } from '@metamask/utils';\nimport {\n  OFFSCREEN_LEDGER_INIT_TIMEOUT,\n  OffscreenCommunicationEvents,\n  OffscreenCommunicationTarget,\n} from '../../shared/constants/offscreen-communication';\n\nimport initLedger from './ledger';\nimport initTrezor from './trezor';\nimport initLattice from './lattice';\n\n/**\n * Initialize a post message stream with the parent window that is initialized\n * in the metamask-controller (background/serivce worker) process. This will be\n * utilized by snaps for communication with snaps running in the offscreen\n * document.\n */\nfunction initializePostMessageStream() {\n  const parentStream = new BrowserRuntimePostMessageStream({\n    name: 'child',\n    target: 'parent',\n  });\n\n  ProxySnapExecutor.initialize(parentStream, './snaps/index.html');\n}\n\n/**\n * Initialize the ledger, trezor, and lattice keyring connections, and the\n * post message stream for the Snaps environment.\n */\nasync function init(): Promise<void> {\n  initializePostMessageStream();\n  initTrezor();\n  initLattice();\n\n  try {\n    const ledgerInitTimeout = new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(new Error('Ledger initialization timed out'));\n      }, OFFSCREEN_LEDGER_INIT_TIMEOUT);\n    });\n    await Promise.race([initLedger(), ledgerInitTimeout]);\n  } catch (error) {\n    console.error('Ledger initialization failed:', error);\n  }\n}\n\ninit().then(() => {\n  if (process.env.IN_TEST) {\n    chrome.runtime.onMessage.addListener((message) => {\n      if (\n        message &&\n        isObject(message) &&\n        message.event ===\n          OffscreenCommunicationEvents.metamaskBackgroundReady &&\n        message.target === OffscreenCommunicationTarget.extension\n      ) {\n        window.document?.documentElement?.classList?.add('controller-loaded');\n      }\n    });\n  }\n\n  chrome.runtime.sendMessage({\n    target: OffscreenCommunicationTarget.extensionMain,\n    isBooted: true,\n\n    // This message is being sent from the Offscreen Document to the Service Worker.\n    // The Service Worker has no way to query `navigator.webdriver`, so we send it here.\n    webdriverPresent: navigator.webdriver === true,\n  });\n});\n"]}