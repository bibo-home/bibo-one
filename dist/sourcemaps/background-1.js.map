{"version":3,"sources":["node_modules/@metamask/eth-ledger-bridge-keyring/dist/ledger-keyring.js","app/scripts/migrations/011.js","app/scripts/migrations/012.js","app/scripts/migrations/013.js","node_modules/@metamask/eth-snap-keyring/dist/CaseInsensitiveMap.js","node_modules/@metamask/eth-snap-keyring/dist/DeferredPromise.js","node_modules/@metamask/eth-snap-keyring/dist/KeyringSnapControllerClient.js","node_modules/@metamask/eth-snap-keyring/dist/SnapIdMap.js","node_modules/@metamask/eth-snap-keyring/dist/SnapKeyring.js","node_modules/@metamask/eth-snap-keyring/dist/index.js","node_modules/@metamask/eth-snap-keyring/dist/logger.js","node_modules/@metamask/eth-snap-keyring/dist/types.js","app/scripts/migrations/014.js","node_modules/@metamask/eth-snap-keyring/dist/util.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/index.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/md5-browser.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/native-browser.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/nil.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/parse.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/regex.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/rng-browser.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/sha1-browser.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/stringify.js","app/scripts/migrations/015.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/v1.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/v3.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/v35.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/v4.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/v5.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/validate.js","node_modules/@metamask/eth-snap-keyring/node_modules/uuid/dist/version.js","app/scripts/migrations/016.js","app/scripts/migrations/017.js","app/scripts/migrations/018.js","node_modules/@metamask/eth-trezor-keyring/dist/index.js","node_modules/@metamask/eth-trezor-keyring/dist/trezor-bridge.js","node_modules/@metamask/eth-trezor-keyring/dist/trezor-connect-bridge.js","app/scripts/migrations/019.js","node_modules/@metamask/eth-trezor-keyring/dist/trezor-keyring.js","app/scripts/migrations/020.js","app/scripts/migrations/021.js","app/scripts/migrations/022.js","node_modules/@metamask/json-rpc-middleware-stream/dist/chunk-CUV6EOT3.js","node_modules/@metamask/json-rpc-middleware-stream/dist/chunk-IDTAZSDC.js","node_modules/@metamask/json-rpc-middleware-stream/dist/index.js","app/scripts/migrations/023.js","app/scripts/migrations/024.js","app/scripts/migrations/025.js","app/scripts/migrations/026.js","app/scripts/migrations/027.js","app/scripts/migrations/028.js","app/scripts/migrations/029.js","node_modules/@metamask/logging-controller/dist/chunk-B6ES7RHK.js","app/scripts/controllers/decrypt-message.ts","app/scripts/migrations/030.js","node_modules/@metamask/logging-controller/dist/chunk-OL334B2K.js","node_modules/@metamask/logging-controller/dist/chunk-PUAQGX73.js","node_modules/@metamask/logging-controller/dist/chunk-UJIPPGP6.js","node_modules/@metamask/logging-controller/dist/index.js","node_modules/@metamask/message-manager/dist/chunk-4JJ4OG3I.js","node_modules/@metamask/message-manager/dist/chunk-4R6XDQI5.js","app/scripts/migrations/031.js","node_modules/@metamask/message-manager/dist/chunk-E3LTYZLZ.js","node_modules/@metamask/message-manager/dist/chunk-OPSXL77K.js","node_modules/@metamask/message-manager/dist/chunk-SNLKWYZE.js","node_modules/@metamask/message-manager/dist/chunk-VU4XI5EX.js","node_modules/@metamask/message-manager/dist/index.js","node_modules/@metamask/message-manager/node_modules/jsonschema/lib/attribute.js","node_modules/@metamask/message-manager/node_modules/jsonschema/lib/helpers.js","node_modules/@metamask/message-manager/node_modules/jsonschema/lib/index.js","node_modules/@metamask/message-manager/node_modules/jsonschema/lib/scan.js","node_modules/@metamask/message-manager/node_modules/jsonschema/lib/validator.js","app/scripts/migrations/032.js","node_modules/@metamask/message-signing-snap/dist/preinstalled-snap.json","app/scripts/migrations/033.js","app/scripts/migrations/034.js","app/scripts/migrations/035.js","app/scripts/migrations/036.js","app/scripts/migrations/037.js","app/scripts/migrations/038.js","app/scripts/migrations/039.js","app/scripts/controllers/encryption-public-key.ts","app/scripts/migrations/040.js","node_modules/@metamask/nonce-tracker/dist/NonceTracker.js","app/scripts/migrations/041.js","node_modules/@metamask/nonce-tracker/dist/index.js","node_modules/@metamask/nonce-tracker/node_modules/async-mutex/lib/Mutex.js","node_modules/@metamask/nonce-tracker/node_modules/async-mutex/lib/Semaphore.js","node_modules/@metamask/nonce-tracker/node_modules/async-mutex/lib/errors.js","node_modules/@metamask/nonce-tracker/node_modules/async-mutex/lib/index.js","node_modules/@metamask/nonce-tracker/node_modules/async-mutex/lib/tryAcquire.js","node_modules/@metamask/nonce-tracker/node_modules/async-mutex/lib/withTimeout.js","node_modules/@metamask/notification-controller/dist/chunk-DR374FE2.js","node_modules/@metamask/notification-controller/dist/index.js","node_modules/@metamask/notification-controller/node_modules/@metamask/base-controller/dist/chunk-FTHCJ6HY.js","app/scripts/migrations/042.js","node_modules/@metamask/notification-controller/node_modules/@metamask/base-controller/dist/chunk-G42723LG.js","node_modules/@metamask/notification-controller/node_modules/@metamask/base-controller/dist/chunk-IURK6TKD.js","node_modules/@metamask/notification-controller/node_modules/@metamask/base-controller/dist/chunk-UJFCPTF3.js","node_modules/@metamask/notification-controller/node_modules/@metamask/base-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/notification-controller/node_modules/@metamask/base-controller/dist/index.js","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/assert.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/base64.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/bytes.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/caip-types.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/checksum.cjs","app/scripts/migrations/043.js","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/coercers.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/collections.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/encryption-types.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/errors.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/hex.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/index.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/json.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/keyring.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/logging.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/misc.cjs","app/scripts/migrations/044.js","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/number.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/opaque.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/promise.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/time.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/transaction-types.cjs","node_modules/@metamask/notification-controller/node_modules/@metamask/utils/dist/versions.cjs","node_modules/@metamask/notification-controller/node_modules/nanoid/index.browser.cjs","node_modules/@metamask/notification-controller/node_modules/nanoid/url-alphabet/index.cjs","app/scripts/migrations/045.js","app/scripts/migrations/046.js","app/scripts/migrations/047.js","app/scripts/migrations/048.js","app/scripts/migrations/049.js","node_modules/@metamask/obs-store/dist/ComposedStore.js","node_modules/@metamask/obs-store/dist/MergedStore.js","node_modules/@metamask/obs-store/dist/ObservableStore.js","app/scripts/controllers/metametrics-data-deletion/metametrics-data-deletion.ts","app/scripts/migrations/050.js","node_modules/@metamask/obs-store/dist/asStream.js","node_modules/@metamask/obs-store/dist/index.js","node_modules/@metamask/obs-store/dist/transform.js","app/scripts/migrations/051.js","app/scripts/migrations/052.js","app/scripts/migrations/053.js","app/scripts/migrations/054.js","node_modules/@metamask/permission-log-controller/dist/chunk-7KORYHSJ.js","node_modules/@metamask/permission-log-controller/dist/chunk-WGNFIOME.js","node_modules/@metamask/permission-log-controller/dist/index.js","node_modules/@metamask/permission-log-controller/node_modules/@metamask/base-controller/dist/chunk-G42723LG.js","node_modules/@metamask/permission-log-controller/node_modules/@metamask/base-controller/dist/chunk-NINOM2XQ.js","app/scripts/migrations/055.js","node_modules/@metamask/permission-log-controller/node_modules/@metamask/base-controller/dist/chunk-UJFCPTF3.js","node_modules/@metamask/permission-log-controller/node_modules/@metamask/base-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/permission-log-controller/node_modules/@metamask/base-controller/dist/chunk-ZNOPSWMU.js","node_modules/@metamask/permission-log-controller/node_modules/@metamask/base-controller/dist/index.js","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/assert.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/base64.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/bytes.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/caip-types.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/checksum.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/coercers.cjs","app/scripts/migrations/056.js","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/collections.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/encryption-types.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/errors.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/hex.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/index.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/json.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/keyring.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/logging.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/misc.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/number.cjs","app/scripts/migrations/057.js","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/opaque.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/promise.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/time.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/transaction-types.cjs","node_modules/@metamask/permission-log-controller/node_modules/@metamask/utils/dist/versions.cjs","node_modules/@metamask/phishing-controller/dist/chunk-5NDIXQG5.js","node_modules/@metamask/phishing-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/phishing-controller/dist/chunk-ZAOBCAQT.js","node_modules/@metamask/phishing-controller/dist/index.js","app/scripts/migrations/058.js","app/scripts/migrations/059.js","node_modules/@metamask/ppom-validator/dist/index.js","node_modules/@metamask/ppom-validator/dist/ppom-controller.js","node_modules/@metamask/ppom-validator/dist/ppom-storage.js","node_modules/@metamask/ppom-validator/dist/util.js","app/scripts/controllers/metametrics.js","app/scripts/migrations/060.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/base-controller/dist/chunk-FTHCJ6HY.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/base-controller/dist/chunk-G42723LG.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/base-controller/dist/chunk-IURK6TKD.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/base-controller/dist/chunk-UJFCPTF3.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/base-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/base-controller/dist/index.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/controller-utils/dist/constants.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/controller-utils/dist/index.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/controller-utils/dist/logger.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/controller-utils/dist/siwe.js","app/scripts/migrations/061.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/controller-utils/dist/types.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/controller-utils/dist/util.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/assert.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/base64.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/bytes.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/caip-types.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/checksum.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/coercers.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/collections.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/encryption-types.cjs","app/scripts/migrations/062.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/errors.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/hex.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/index.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/json.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/keyring.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/logging.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/misc.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/number.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/opaque.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/promise.cjs","app/scripts/migrations/063.js","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/time.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/transaction-types.cjs","node_modules/@metamask/ppom-validator/node_modules/@metamask/utils/dist/versions.cjs","app/scripts/migrations/064.js","app/scripts/migrations/065.js","app/scripts/migrations/066.js","node_modules/@metamask/queued-request-controller/dist/chunk-5GMDEBVM.js","app/scripts/migrations/067.js","node_modules/@metamask/queued-request-controller/dist/chunk-VLAKOB6V.js","node_modules/@metamask/queued-request-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/queued-request-controller/dist/index.js","node_modules/@metamask/queued-request-controller/node_modules/@metamask/base-controller/dist/chunk-FTHCJ6HY.js","node_modules/@metamask/queued-request-controller/node_modules/@metamask/base-controller/dist/chunk-G42723LG.js","node_modules/@metamask/queued-request-controller/node_modules/@metamask/base-controller/dist/chunk-IURK6TKD.js","node_modules/@metamask/queued-request-controller/node_modules/@metamask/base-controller/dist/chunk-UJFCPTF3.js","node_modules/@metamask/queued-request-controller/node_modules/@metamask/base-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/queued-request-controller/node_modules/@metamask/base-controller/dist/index.js","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/assert.cjs","app/scripts/migrations/068.js","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/base64.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/bytes.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/caip-types.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/checksum.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/coercers.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/collections.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/encryption-types.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/errors.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/hex.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/index.cjs","app/scripts/migrations/069.js","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/json.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/keyring.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/logging.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/misc.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/number.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/opaque.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/promise.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/time.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/transaction-types.cjs","node_modules/@metamask/queued-request-controller/node_modules/@metamask/utils/dist/versions.cjs","app/scripts/controllers/network-order.ts","app/scripts/migrations/070.js","node_modules/@metamask/rate-limit-controller/dist/chunk-37GF32BR.js","node_modules/@metamask/rate-limit-controller/dist/index.js","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/base-controller/dist/chunk-FTHCJ6HY.js","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/base-controller/dist/chunk-G42723LG.js","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/base-controller/dist/chunk-IURK6TKD.js","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/base-controller/dist/chunk-UJFCPTF3.js","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/base-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/base-controller/dist/index.js","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/assert.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/base64.cjs","app/scripts/migrations/071.js","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/bytes.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/caip-types.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/checksum.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/coercers.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/collections.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/encryption-types.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/errors.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/hex.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/index.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/json.cjs","app/scripts/migrations/072.js","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/keyring.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/logging.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/misc.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/number.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/opaque.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/promise.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/time.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/transaction-types.cjs","node_modules/@metamask/rate-limit-controller/node_modules/@metamask/utils/dist/versions.cjs","app/scripts/migrations/073.js","app/scripts/migrations/074.js","node_modules/@metamask/selected-network-controller/dist/SelectedNetworkController.cjs","node_modules/@metamask/selected-network-controller/dist/SelectedNetworkMiddleware.cjs","node_modules/@metamask/selected-network-controller/dist/index.cjs","node_modules/@metamask/signature-controller/dist/chunk-XG24TXHN.js","app/scripts/migrations/075.js","node_modules/@metamask/signature-controller/dist/index.js","node_modules/@metamask/smart-transactions-controller/dist/SmartTransactionsController.js","node_modules/@metamask/smart-transactions-controller/dist/constants.js","node_modules/@metamask/smart-transactions-controller/dist/index.js"],"names":["_LedgerKeyring_instances","_LedgerKeyring_migrateAccountDetails","_LedgerKeyring_signTransaction","_LedgerKeyring_getPage","_LedgerKeyring_getAccountsBIP44","_LedgerKeyring_getAccountsLegacy","_LedgerKeyring_addressFromIndex","_LedgerKeyring_pathFromAddress","_LedgerKeyring_getPathForIndex","_LedgerKeyring_isLedgerLiveHdPath","_LedgerKeyring_toLedgerPath","_LedgerKeyring_hasPreviousTransactions","_LedgerKeyring_getApiUrl","__createBinding","this","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","__importDefault","default","exports","LedgerKeyring","rlp_1","require","tx_1","ethUtil","eth_sig_util_1","buffer_1","events_1","hdkey_1","pathBase","hdPathString","keyringType","NetworkApiUrls","EventEmitter","constructor","bridge","super","add","type","page","perPage","unlockedAccount","accounts","accountDetails","hdk","hdPath","paths","network","Mainnet","implementFullBIP44","Error","init","destroy","serialize","deserialize","opts","_a","_b","_c","_d","keys","Set","filter","account","toChecksumAddress","Promise","resolve","isUnlocked","Boolean","publicKey","isConnected","isDeviceConnected","setAccountToUnlock","index","parseInt","setHdPath","unlock","updateHdk","path","payload","getPublicKey","error","chainCode","Buffer","from","address","addAccounts","amount","reject","then","async","_","to","i","bip44","includes","slice","catch","getFirstPage","getNextPage","getPreviousPage","getAccounts","removeAccount","filteredAccounts","a","toLowerCase","length","attemptMakeApp","updateTransportMethod","transportType","signTransaction","tx","rawTxHex","getChainId","isOldStyleEthereumjsTx","bufferToHex","r","s","toString","messageToSign","getMessageToSign","isBuffer","RLP","encode","txData","toJSON","addHexPrefix","TransactionFactory","fromTxData","common","freeze","isFrozen","signMessage","withAccount","data","signPersonalMessage","message","unlockAccountByAddress","deviceSignMessage","stripHexPrefix","recoveryId","String","signature","addressSignedWith","recoverPersonalSignature","checksummedAddress","signTypedData","options","version","domain","types","primaryType","TypedDataUtils","sanitizeData","domainSeparatorHex","hashStruct","SignTypedDataVersion","V4","hashStructMessageHex","deviceSignTypedData","recoverTypedSignature","exportAccount","forgetDevice","WeakSet","accountIndexes","entries","forEach","key","console","log","handleSigning","deviceSignTransaction","newOrMutatedTx","verifySignature","increment","valid","push","balance","basePath","dkey","derive","publicToAddress","replace","apiUrl","response","window","fetch","parsedResponse","json","status","_lodash","migrate","originalVersionedData","versionedData","cloneDeep","meta","newState","TOSHash","isDisclaimerConfirmed","transformState","err","warn","stack","NoticeController","noticesList","notice","read","body","config","provider","CaseInsensitiveMap","util_1","Map","fromObject","obj","toObject","fromEntries","getOrThrow","name","throwError","set","delete","DeferredPromise","promise","_SnapControllerSender_snapId","_SnapControllerSender_origin","_SnapControllerSender_controller","_SnapControllerSender_handler","_KeyringSnapControllerClient_controller","__classPrivateFieldSet","KeyringSnapControllerClient","keyring_api_1","SnapControllerSender","controller","snapId","origin","handler","send","request","handleRequest","WeakMap","KeyringClient","withSnapId","getController","_SnapIdMap_map","SnapIdMap","InvalidSnapIdError","CaseInsensitiveMap_1","iterable","values","size","_SnapKeyring_instances","_SnapKeyring_snapClient","_SnapKeyring_accounts","_SnapKeyring_requests","_SnapKeyring_callbacks","_SnapKeyring_handleAccountCreated","_SnapKeyring_handleAccountUpdated","_SnapKeyring_handleAccountDeleted","_SnapKeyring_handleRequestApproved","_SnapKeyring_handleRequestRejected","_SnapKeyring_submitRequest","_SnapKeyring_hasMethod","_SnapKeyring_createRequestPromise","_SnapKeyring_submitSnapRequest","_SnapKeyring_handleSyncResponse","_SnapKeyring_handleAsyncResponse","_SnapKeyring_validateRedirectUrl","_SnapKeyring_resolveAddress","_SnapKeyring_getSnapMetadata","_SnapKeyring_getSnapAllowedOrigins","SnapKeyring","SNAP_KEYRING_TYPE","superstruct_1","utils_1","uuid_1","DeferredPromise_1","KeyringSnapControllerClient_1","logger_1","SnapIdMap_1","types_1","callbacks","handleKeyringSnapMessage","assert","SnapMessageStruct","method","KeyringEvent","AccountCreated","AccountUpdated","AccountDeleted","RequestApproved","RequestRejected","unique","map","getAccountsBySnapId","accountSnapId","transaction","_opts","chainId","toJson","bigIntToHex","signedTx","EthMethod","SignTransaction","params","toCaipChainId","KnownCaipNamespace","Eip155","mask","object","string","V1","SignTypedDataV1","V3","SignTypedDataV3","SignTypedDataV4","strictMask","EthBytesStruct","hash","Sign","PersonalSign","prepareUserOperation","transactions","context","PrepareUserOperation","expectSync","EthBaseUserOperationStruct","patchUserOperation","userOp","PatchUserOperation","EthUserOperationPatchStruct","signUserOperation","SignUserOperation","_address","id","deleteAccount","getAccountByAddress","listAccounts","find","accountAddress","equalsIgnoreCase","snap","metadata","importTime","keyring","AccountCreatedEventStruct","accountNameSuggestion","displayConfirmation","addressExists","addAccount","accepted","saveState","AccountUpdatedEventStruct","newAccount","oldAccount","AccountDeletedEventStruct","entry","RequestApprovedEventStruct","RequestRejectedEventStruct","requestId","v4","pending","redirect","url","methods","scope","projectLogger","submitRequest","redirectUser","URL","manifest","proposedName","enabled","initialPermissions","allowedOrigins","__exportStar","p","createModuleLogger","createProjectLogger","optional","union","array","JsonStruct","record","NetworkController","ensureDefined","struct","JSON","parse","stringify","b","_nil","_parse","_stringify","_v","_v2","_v3","_v4","_validate","_version","_interopRequireDefault","getOutputLength","inputLength8","safeAdd","x","y","lsw","md5cmn","q","t","num","cnt","md5ff","c","d","md5gg","md5hh","md5ii","_default","bytes","msg","unescape","encodeURIComponent","Uint8Array","charCodeAt","input","output","length32","hexTab","hex","charAt","md5ToHexEncodedArray","len","olda","oldb","oldc","oldd","wordsToMd5","length8","Uint32Array","bytesToWords","randomUUID","crypto","bind","uuid","arr","getRandomValues","rnds8","z","ROTL","n","K","H","Array","isArray","l","N","Math","ceil","M","j","pow","floor","W","e","T","unsafeStringify","byteToHex","offset","_transactionController","TransactionController","txMeta","TransactionStatus","failed","_rng","_nodeId","_clockseq","_lastMSecs","_lastNSecs","buf","node","clockseq","seedBytes","random","rng","msecs","Date","now","nsecs","dt","tl","tmh","_md","DNS","hashfunc","generateUUID","namespace","_namespace","str","stringToBytes","_native","rnds","_sha","_regex","test","submitted","retryCount","_fastJsonPatch","history","snapshot","shallow","snapshotFromTxMeta","newHistory","longHistory","previousState","note","compare","timestamp","generateHistoryEntry","TrezorConnectBridge","connect_web_1","trezorConnectInitiated","settings","on","DEVICE_EVENT","event","DEVICE","CONNECT","model","features","dispose","ethereumSignTransaction","ethereumSignMessage","ethereumSignTypedData","txList","highestConfirmedNonce","nonces","nonce","txParams","max","apply","getHighestNonce","confirmed","metamaskNetworkId","highestContinuousNonce","startPoint","highest","getHighestContinuousFrom","maxNonce","_TrezorKeyring_instances","_TrezorKeyring_getPage","_TrezorKeyring_signTransaction","_TrezorKeyring_normalize","_TrezorKeyring_addressFromIndex","_TrezorKeyring_pathFromAddress","TrezorKeyring","TREZOR_CONNECT_MANIFEST","connect_plugin_ethereum_1","ALLOWED_HD_PATHS","DELAY_BETWEEN_POPUPS","wait","ms","setTimeout","email","appUrl","getModel","lazyLoad","coin","success","Number","dataWithHashes","transformTypedData","domain_separator_hash","message_hash","assign","EIP712Domain","metamask_v4_compat","gasLimit","gasPrice","toBuffer","getSenderAddress","metamask","firstTimeInfo","date","BlacklistController","RecentBlocks","submittedTime","getTime","_safeeventemitter","_safeeventemitter2","_utils","_readablestream","createStreamMiddleware","idMap","stream","Duplex","objectMode","write","res","_encoding","streamWriteCallback","errorObj","hasProperty","notif","retryOnMessage","req","idMapObject","sendToStream","events","emit","processNotification","responseId","end","processResponse","_err","middleware","next","createEngineStream","engine","handle","_chunkIDTAZSDCjs","_chunkCUV6EOT3js","reverseTxList","reverse","stripping","txIndex","findIndex","rejected","dropped","splice","unapproved","_util","whiteList","gas","normalizedTxParams","normalizeTxParams","KeyringController","PreferencesController","walletNicknames","identities","reduce","tokens","accountTokens","identity","mainnet","_failTx","isApproved","approved","createdTime","LogType","LogType2","_events","_loglevel","_messageManager","_baseController","_controllerUtils","_metametrics","_hexstringUtils","_defineProperty","arg","hint","prim","Symbol","toPrimitive","_toPrimitive","_toPropertyKey","stateMetadata","unapprovedDecryptMsgs","persist","anonymous","unapprovedDecryptMsgCount","isEIP1024EncryptedMessage","isObject","getDefaultState","DecryptMessageController","BaseController","getState","metricsEvent","messenger","_getState","_metricsEvent","hub","_decryptMessageManager","DecryptMessageManager","messageParams","_requestApproval","_subscribeToMessageState","newMessages","messageCount","getUnapprovedMessagesCount","resetState","update","clearUnapproved","unapprovedMessages","unapprovedMessagesCount","newRequestDecryptMessage","addUnapprovedMessageAsync","decryptMessage","messageId","metamaskId","cleanMessageParams","approveMessage","_parseMessageData","rawMessage","messagingSystem","setMessageStatusAndResult","_acceptApproval","info","_cancelAbstractMessage","decryptMessageInline","setResult","cancelDecryptMessage","rejectMessage","_rejectApproval","rejectUnapproved","reason","getUnapprovedMessages","messageManager","category","MetaMetricsEventCategory","Messages","properties","action","updateState","subscribe","_migrateMessages","draftState","coreMessages","stateMessages","coreMessage","stateMessage","_migrateMessage","coreMessageData","rawSig","msgParams","ORIGIN_METAMASK","ApprovalType","EthDecrypt","stripped","buff","frequentRpcListDetail","rpc","isNaN","SigningMethod","SigningMethod2","SigningStage","SigningStage2","_generateId","generateId_fn","_chunkUJIPPGP6js","_basecontroller","_uuid","logs","defaultState","LoggingController","__privateAdd","registerActionHandler","newLog","__privateMethod","clear","v1","member","__accessCheck","_chunkPUAQGX73js","_chunkOL334B2Kjs","_chunkB6ES7RHKjs","_chunk4R6XDQI5js","_chunkE3LTYZLZjs","_controllerutils","PersonalMessageManager","AbstractMessageManager","arguments","addUnapprovedMessage","validateSignMessageData","ethereumSignInData","detectSIWE","updatedMessageParams","addRequestToMessageParams","normalizeMessageData","siwe","messageData","createUnapprovedMessage","addMessage","prepMessageForSigning","_metamaskId","messageParamsWithoutId","PersonalMessageManager_default","BaseControllerV1","securityProviderRequest","additionalFinishStatuses","getCurrentChainId","messages","initialize","securityAlertResponse","time","saveMessageList","emitUpdateBadge","setMessageStatus","getMessage","updateMessage","securityCheck","securityProviderResponse","securedMessage","getAllMessages","setMessageStatusApproved","setMessageStatusInProgress","setMessageStatusSigned","setMetadata","waitForFinishStatus","messageParamsWithId","messageName","once","AbstractMessageManager_default","vault","completedOnboarding","_ethsigutil","_jsonschema","hexRe","validateAddress","propertyName","isValidHexAddress","remove0x","match","add0x","bytesToHex","validateTypedSignMessageDataV1","typedSignatureHash","validateTypedSignMessageDataV3V4","currentChainId","validate","TYPED_MESSAGE_SCHEMA","errors","startsWith","activeChainId","validateEncryptionPublicKeyMessageData","validateDecryptedMessageData","TypedMessageManager","EthSignTypedData","setMessageStatusErrored","TypedMessageManager_default","EncryptionPublicKeyManager","EthGetEncryptionPublicKey","EncryptionPublicKeyManager_default","_chunkVU4XI5EXjs","_chunkSNLKWYZEjs","_chunk4JJ4OG3Ijs","_chunkOPSXL77Kjs","helpers","ValidatorResult","SchemaError","attribute","description","title","exclusiveMinimum","exclusiveMaximum","additionalItems","$schema","$ref","extends","validators","testSchemaNoThrow","instance","ctx","callback","schema","validateSchema","Function","testAdditionalProperty","property","additionalProperties","addError","argument","preValidateProperty","makeChild","importErrors","some","testType","list","anyOf","inner","nestedErrors","join","allOf","self","oneOf","count","prop","patternProperties","pattern","RegExp","minProperties","maxProperties","items","every","minimum","number","maximum","validateMultipleOfOrDivisbleBy","validationType","errorMessage","validationArgument","instanceDecimals","getDecimalPlaces","divisorDecimals","maxDecimals","multiplier","round","testArrays","deepCompareStrict","multipleOf","divisibleBy","required","format","disableFormat","isFormat","minLength","hsp","maxLength","minItems","maxItems","uniqueItems","dependencies","dep","childContext","propertyPath","not","disallow","notTypes","schemaId","module","uri","ValidationError","stringizer","detail","validatorType","captureStackTrace","SchemaContext","base","schemas","target","makeSuffix","FORMAT_REGEXPS","ipv6","color","hostname","alpha","alphanumeric","parseFloat","regex","style","phone","regexp","ipv4","validator","customFormats","deepMerger","dst","deepMerge","indexOf","copyist","src","copyistWithDeepMerge","concat","pathEncoder","aKeys","bKeys","objectGetPath","parts","split","shift","decodeURIComponent","encodePath","decimalPlaces","decimalParts","Validator","SchemaScanResult","scan","urilib","found","ref","scanSchema","baseuri","resolvedUri","ourBase","substring","scanArray","scanObject","definitions","unresolvedRefs","attributes","shouldResolve","addSchema","ourUri","addSubSchemaArray","addSubSchema","addSubSchemaObject","setSchemas","getSchema","urn","sch","switchSchema","schemaobj","schemaTraverser","superResolve","resolved","subctx","subschema","skipAttributes","ignoreProperties","validatorErr","allowUnknownAttributes","rewrite","parsed","fragment","document","substr","isFinite","integer","boolean","any","betaUI","featureFlags","completedUiMigration","repository","source","shasum","location","npm","filePath","iconPath","packageName","registry","snap_getEntropy","dapps","snaps","manifestVersion","files","removable","privacyMode","migratedPrivacyMode","seedWords","AddressBookController","ab","addressBook","chainIds","newAddressBook","isEns","normalizeEnsName","ABTestController","ABTestControllerState","abTests","fullScreenVsPopup","DAI_V1_CONTRACT_ADDRESS","DAI_V1_TOKEN_SYMBOL","SAI_TOKEN_SYMBOL","isOldDai","token","symbol","toChecksumHexAddress","networkTokens","tokensOnNetwork","_keyring","_app","unapprovedEncryptionPublicKeyMsgs","unapprovedEncryptionPublicKeyMsgCount","EncryptionPublicKeyController","getEncryptionPublicKey","getAccountKeyringType","_getEncryptionPublicKey","_getAccountKeyringType","_encryptionPublicKeyManager","unapprovedMsgCount","newRequestEncryptionPublicKey","KeyringType","ledger","trezor","lattice","qr","encryptionPublicKey","cancelEncryptionPublicKey","msgId","ProviderApprovalController","NonceTracker","assert_1","async_mutex_1","Web3Provider","blockTracker","getPendingTransactions","getConfirmedTransactions","lockMap","getGlobalLock","globalMutex","_lookupMutex","releaseLock","acquire","getNonceLock","_globalMutexFree","_takeMutex","networkNonceResult","_getNetworkNextNonce","highestLocallyConfirmed","_getHighestLocallyConfirmed","nextNetworkNonce","highestSuggested","pendingTxs","localNonceResult","_getHighestContinuousFrom","nonceDetails","local","nextNonce","isInteger","lockId","mutex","Mutex","blockNumber","getLatestBlock","baseCount","getTransactionCount","details","confirmedTransactions","_getHighestNonce","preferences","autoLockTimeLimit","autoLogoutTimeLimit","NonceTracker_1","tslib_1","Semaphore_1","cancelError","_semaphore","__awaiter","__generator","label","sent","runExclusive","isLocked","waitForUnlock","release","cancel","errors_1","Semaphore","_maxConcurrency","_cancelError","E_CANCELED","_queue","_waiters","_value","_this","locked","ticketPromise","_dispatch","trys","_currentReleaser","releaser","ticket","nextTicket","released","_resolveWaiters","waiter","E_ALREADY_LOCKED","E_TIMEOUT","tryAcquire","withTimeout","Mutex_1","withTimeout_1","tryAcquire_1","sync","alreadyAcquiredError","timeout","timeoutError","isTimeout","e_1","clearTimeout","_nanoid","notifications","NotificationController","show","ids","dismiss","markRead","nanoid","notification","createdDate","readDate","_chunkDR374FE2js","defaultConfig","disabled","internalConfig","internalState","internalListeners","initialState","initialConfig","configure","overwrite","fullUpdate","notify","listener","unsubscribe","cb","BaseControllerV1_default","AppStateController","connectedStatusPopoverHasBeenShown","_actions","_initialEventPayloadGetters","_eventPayloadCache","_chunkUJFCPTF3js","_chunkZ4BLTVTBjs","ControllerMessenger","actionType","__privateGet","unregisterActionHandler","clearActions","registerInitialEventPayload","eventType","getPayload","publish","subscribers","selector","previousValue","newValue","initialValue","clearEventSubscriptions","clearSubscriptions","getRestricted","allowedActions","allowedEvents","RestrictedControllerMessenger","controllerMessenger","_internalState","_immer","enablePatches","deriveStateFromMetadata","metadataProperty","derivedState","propertyMetadata","stateProperty","__privateSet","nextState","patches","inversePatches","produceWithPatches","applyPatches","getAnonymizedState","getPersistentState","_controllerMessenger","_controllerName","_allowedActions","_allowedEvents","_isAllowedEvent","isAllowedEvent_fn","_isAllowedAction","isAllowedAction_fn","_isInCurrentNamespace","isInCurrentNamespace_fn","getter","setter","_chunkFTHCJ6HYjs","_chunkIURK6TKDjs","_chunkG42723LGjs","assertExhaustive","assertStruct","AssertionError","getError","ErrorWrapper","fn","code","errorPrefix","getErrorMessage","getErrorMessageWithoutTrailingPeriod","_object","base64","paddingRequired","characterSet","letters","re","raw","createDataView","concatBytes","valueToBytes","base64ToBytes","numberToBytes","signedBigIntToBytes","bigIntToBytes","hexToBytes","bytesToBase64","bytesToString","bytesToNumber","bytesToSignedBigInt","bytesToBigInt","assertIsBytes","isBytes","base_1","hex_1","HEX_MINIMUM_NUMBER_CHARACTER","HEX_MAXIMUM_NUMBER_CHARACTER","HEX_CHARACTER_OFFSET","getPrecomputedHexValues","lookupTable","padStart","getPrecomputedHexValuesBuilder","hexadecimal","BigInt","assertIsHexString","strippedValue","normalizedValue","c1","c2","n1","n2","isSafeInteger","TextEncoder","byte","asIntN","bigint","MAX_SAFE_INTEGER","TextDecoder","decode","byteLength","bigIntFits","numberValue","asUintN","normalizedValues","buffer","byteOffset","DataView","parseCaipAccountId","parseCaipChainId","isCaipAccountAddress","isCaipAccountId","isCaipReference","isCaipNamespace","isCaipChainId","CaipAccountAddressStruct","CaipAccountIdStruct","CaipReferenceStruct","CaipNamespaceStruct","CaipChainIdStruct","CAIP_ACCOUNT_ADDRESS_REGEX","CAIP_ACCOUNT_ID_REGEX","CAIP_REFERENCE_REGEX","CAIP_NAMESPACE_REGEX","CAIP_CHAIN_ID_REGEX","is","caipChainId","exec","groups","reference","caipAccountId","chain","ChecksumStruct","base64_1","_state$PreferencesCon","currentAccountTab","createHex","createBytes","createBigInt","createNumber","bytes_1","NumberLikeStruct","StrictHexStruct","NumberCoercer","coerce","BigIntCoercer","BytesCoercer","HexCoercer","StructError","_FrozenMap_map","_FrozenSet_set","FrozenSet","FrozenMap","iterator","callbackfn","thisArg","_map","value2","_set","wrapError","isErrorWithStack","isErrorWithMessage","isErrorWithCode","pony_cause_1","misc_1","isNullOrUndefined","originalError","cause","ErrorWithCause","isValidChecksumAddress","getChecksumAddress","assertIsStrictHexString","isStrictHexString","isHexString","HexChecksumAddressStruct","HexAddressStruct","HexStruct","sha3_1","unPrefixed","unPrefixedHash","keccak_256","character","nibbleIndex","hashCharacter","toUpperCase","possibleChecksum","possibleAddress","getJsonRpcIdValidator","assertIsJsonRpcError","isJsonRpcError","assertIsJsonRpcFailure","isJsonRpcFailure","assertIsJsonRpcSuccess","isJsonRpcSuccess","assertIsJsonRpcResponse","isJsonRpcResponse","assertIsPendingJsonRpcResponse","isPendingJsonRpcResponse","JsonRpcResponseStruct","JsonRpcFailureStruct","JsonRpcSuccessStruct","PendingJsonRpcResponseStruct","assertIsJsonRpcRequest","isJsonRpcRequest","assertIsJsonRpcNotification","isJsonRpcNotification","JsonRpcNotificationStruct","JsonRpcRequestStruct","JsonRpcParamsStruct","JsonRpcErrorStruct","JsonRpcIdStruct","JsonRpcVersionStruct","jsonrpc2","getJsonSize","getSafeJson","isValidJson","UnsafeJsonStruct","exactOptional","hasOptional","branch","field","Struct","refiner","literal","define","lazy","propKey","propValue","nullable","jsonrpc","unknown","permitEmptyString","permitFractions","permitNull","globalLogger","projectName","extend","moduleName","calculateNumberSize","calculateStringSize","isASCII","isPlainObject","ESCAPE_CHARACTERS_REGEXP","JsonSize","getKnownPropertyNames","isNonEmptyArray","objectToCheck","getOwnPropertyNames","proto","getPrototypeOf","total","_state$AppStateContro","mkrMigrationReminderTimestamp","hexToBigInt","hexToNumber","numberToHex","createDeferredPromise","suppressUnhandledRejection","innerResolve","innerReject","_error","timeSince","inMilliseconds","Duration","assertIsNonNegativeInteger","isNonNegativeInteger","duration","satisfiesVersionRange","gtRange","gtVersion","assertIsSemVerRange","assertIsSemVerVersion","isValidSemVerRange","isValidSemVerVersion","VersionRangeStruct","VersionStruct","semver_1","refine","validRange","versionRange","range","version1","version2","gt","gtr","satisfies","includePrerelease","urlAlphabet","customRandom","alphabet","defaultSize","getRandom","LN2","step","customAlphabet","outdatedGateways","ipfsGateway","_state$TransactionCon","_state$NetworkControl","_state$NetworkControl2","_state$NetworkControl3","_state$CachedBalances","_state$AddressBookCon","_state$IncomingTransa","chainIdRegEx","_state$NetworkControl4","rpcUrl","rpcTarget","nickname","rpcPrefs","ticker","unshift","CachedBalancesController","cachedBalances","hexRegEx","networkKey","networkEntries","updateChainIds","chainIdKey","networkKeyEntries","newEntries","mergedEntry","_networkKeyEntries$ad","mergeAddressBookKeys","IncomingTransactionsController","incomingTxLastFetchedBlocksByNetwork","localhost","_accountTokens$accoun","_accountTokens$accoun2","localhostTokens","rpcTokens","localhostTokensMap","tokenArrayToMap","rpcTokensMap","mergedTokens","tokenAddress","mergeTokenArrays","metaMetricsId","participateInMetaMetrics","metaMetricsSendCount","MetaMetricsController","ComposedStore","ObservableStore_1","ObservableStore","children","_children","childKey","child","_addChild","updateFromChild","childValue","putState","MergedStore","_updateWholeState","childStates","safe_event_emitter_1","initState","_state","_putState","partialState","removeListener","_classPrivateFieldInitSpec","privateMap","_checkPrivateRedeclaration","privateCollection","_classPrivateFieldGet","descriptor","_classApplyDescriptorGet","_classExtractFieldDescriptor","_classPrivateFieldSet","_classApplyDescriptorSet","controllerName","metaMetricsDataDeletionId","metaMetricsDataDeletionTimestamp","metaMetricsDataDeletionStatus","_dataDeletionService","_getMetaMetricsId","_registerMessageHandlers","MetaMetricsDataDeletionController","dataDeletionService","getMetaMetricsId","privateSet","_classPrivateMethodGet","_registerMessageHandlers2","createMetaMetricsDataDeletionTask","deleteRegulateId","createDataDeletionRegulationTask","updateDataDeletionTaskStatus","deleteRegulationId","deletionStatus","fetchDeletionRegulationStatus","LEGACY_LOCAL_STORAGE_KEYS","_window$localStorage","localStorage","removeItem","storeAsStream","readable_stream_1","ObservableStoreStream","obsStore","resume","pipe","dest","_write","chunk","_read","_size","_destroy","storeTransformStream","syncTransformFn","Transform","transform","_network","_BUILT_IN_NETWORKS$ty","enumChainId","BUILT_IN_NETWORKS","accountHiddenTokens","newAccountTokens","newAccountHiddenTokens","NETWORK_TYPES","RPC","providerType","MAINNET","CHAIN_IDS","ropsten","rinkeby","GOERLI","kovan","incomingTransactions","TransactionType","retry","transactionCategory","incoming","isValidDecimals","decimals","validTokens","validTokensOnNetwork","CAVEAT_TYPES","restrictReturnedAccounts","LOG_METHOD_TYPES","LOG_METHOD_TYPES2","WALLET_PREFIX","LOG_IGNORE_METHODS","LOG_LIMIT","_restrictedMethods","_getAccountToTimeMap","getAccountToTimeMap_fn","_logRequest","logRequest_fn","_logResponse","logResponse_fn","_logPermissionsHistory","logPermissionsHistory_fn","_commitNewHistory","commitNewHistory_fn","_getRequestedMethods","getRequestedMethods_fn","_getAccountsFromPermission","getAccountsFromPermission_fn","_chunk7KORYHSJjs","permissionHistory","permissionActivityLog","PermissionLogController","restrictedMethods","updateAccountsHistory","eth_accounts","createMiddleware","isInternal","isEthRequestAccounts","activityEntry","requestedMethods","acc","methodType","requestTime","responseTime","newLogs","lastApproved","permission","parentCapability","oldOriginHistory","newOriginHistory","existingEthAccountsEntry","newEthAccountsEntry","caveats","caveat","_chunkWGNFIOMEjs","incomingTxLastFetchedBlockByChainId","mapKeys","_BUILT_IN_NETWORKS$ke","UNKNOWN_CHAIN_ID_KEY","networkId","_chunkNINOM2XQjs","_chunkZNOPSWMUjs","assetImages","_randomId","item","keyBy","PhishingDetectorResultType","PhishingDetectorResultType2","_configs","_legacyConfig","_check","check_fn","_sha256","_fastestlevenshtein","PhishingDetector","processConfigs","getDefaultPhishingDetectorConfig","allowlist","whitelist","blocklist","blacklist","c2DomainBlocklist","fuzzylist","tolerance","check","legacyType","isMaliciousC2Domain","urlString","fqdn","endsWith","domainToParts","allowlistMatch","matchPartsAgainstList","domainPartsToDomain","sha256Hash","ipfsCidMatch","cID","blocklistMatch","fuzzyForm","domainPartsToFuzzyForm","levenshteinMatched","targetParts","fuzzyTarget","distance","_detector","_stalelistRefreshInterval","_hotlistRefreshInterval","_c2DomainBlocklistRefreshInterval","_inProgressHotlistUpdate","_inProgressStalelistUpdate","_isProgressC2DomainBlocklistUpdate","registerMessageHandlers_fn","_updateStalelist","updateStalelist_fn","_updateHotlist","updateHotlist_fn","_updateC2DomainBlocklist","updateC2DomainBlocklist_fn","_queryConfig","queryConfig_fn","PHISHING_CONFIG_BASE_URL","METAMASK_STALELIST_FILE","METAMASK_HOTLIST_DIFF_FILE","CLIENT_SIDE_DETECION_BASE_URL","C2_DOMAIN_BLOCKLIST_ENDPOINT","STALELIST_REFRESH_INTERVAL","METAMASK_STALELIST_URL","METAMASK_HOTLIST_DIFF_URL","C2_DOMAIN_BLOCKLIST_URL","ListKeys","ListKeys2","ListNames","ListNames2","phishingListNameKeyMap","MetaMask","phishingListKeyNameMap","eth_phishing_detect_config","phishingLists","hotlistLastFetched","stalelistLastFetched","c2DomainBlocklistLastFetched","PhishingController","stalelistRefreshInterval","hotlistRefreshInterval","c2DomainBlocklistRefreshInterval","updatePhishingDetector","setStalelistRefreshInterval","interval","setHotlistRefreshInterval","setC2DomainBlocklistRefreshInterval","isStalelistOutOfDate","fetchTimeNow","isHotlistOutOfDate","isC2DomainBlocklistOutOfDate","maybeUpdateState","updateStalelist","updateHotlist","updateC2DomainBlocklist","punycodeOrigin","toASCII","getHostnameFromUrl","isBlockedRequest","bypass","stalelistResponse","hotlistDiffsResponse","c2DomainBlocklistResponse","stalelistPromise","c2DomainBlocklistPromise","all","lastUpdated","timeNow","metamaskListState","recentlyAdded","newMetaMaskListState","applyDiffs","lastDiffTimestamp","hotlistResponse","hotlist","newPhishingLists","phishingList","roundToNearestMinute","recentlyAddedC2Domains","recentlyRemovedC2Domains","recentlyRemoved","safelyExecute","cache","PhishingController_default","unixTimestamp","splitStringByPeriod","stringToSplit","periodIndex","listState","hotlistDiffs","listKey","diffsToApply","targetList","latestDiffTimestamp","listSets","isRemoval","targetListType","validateConfig","processDomainList","configs","domainParts","part","hashBuffer","sha256","C2_DOMAIN_BLOCKLIST_REFRESH_INTERVAL","HOTLIST_REFRESH_INTERVAL","_chunkZAOBCAQTjs","_chunk5NDIXQG5js","swapsWelcomeMessageHasBeenShown","nonceNetworkGroupedObject","groupBy","_tx$txParams","withoutOrphans","pickBy","group","PPOMController","NETWORK_CACHE_DURATION","ppom_controller_1","_PPOMController_instances","_PPOMController_ppom","_PPOMController_provider","_PPOMController_storage","_PPOMController_ppomMutex","_PPOMController_ppomProvider","_PPOMController_cdnBaseUrl","_PPOMController_providerRequestLimit","_PPOMController_providerRequests","_PPOMController_chainId","_PPOMController_securityAlertsEnabled","_PPOMController_providerRequestsCount","_PPOMController_blockaidPublicKey","_PPOMController_ppomInitialised","_PPOMController_nativeCrypto","_PPOMController_initialisePPOM","_PPOMController_resetToInactiveState","_PPOMController_onNetworkChange","_PPOMController_onPreferenceChange","_PPOMController_registerMessageHandlers","_PPOMController_subscribeMessageEvents","_PPOMController_resetPPOM","_PPOMController_initPPOMIfRequired","_PPOMController_updateVersionInfo","_PPOMController_checkFilePresentInStorage","_PPOMController_getAllFiles","_PPOMController_getFile","_PPOMController_getAPIResponse","_PPOMController_fetchVersionInfo","_PPOMController_fetchBlob","_PPOMController_jsonRpcRequest","_PPOMController_getPPOM","base_controller_1","controller_utils_1","rpc_errors_1","await_semaphore_1","ppom_storage_1","ALLOWED_PROVIDER_CALLS","stateMetaData","versionInfo","storageMetadata","versionInfoFileHeaders","headers","storageBackend","securityAlertsEnabled","onPreferencesChange","ppomProvider","cdnBaseUrl","providerRequestLimit","blockaidPublicKey","nativeCrypto","PPOMStorage","readMetadata","writeMetadata","usePPOM","chainIdForRequest","blockaidValidationSupportedForNetwork","use","ppom","providerRequestsCount","ppomInit","deleteAllFiles","networkControllerState","selectedNetworkClient","selectedNetworkClientId","configuration","preferenceControllerState","blockaidEnabled","onNetworkChange","free","versionInfoUpdated","syncMetadata","exp","fileVersionInfo","file","checksum","readFile","checkFilePath","fileUrl","constructURLHref","fileData","validateSignature","hashSignature","writeFile","timeoutFetch","cached","arrayBuffer","limitExceededError","PROVIDER_ERRORS","limitExceeded","JsonRpcError","methodNotSupportedError","methodNotSupported","createPayload","PPOM","new","_PPOMStorage_storageBackend","_PPOMStorage_readMetadata","_PPOMStorage_writeMetadata","syncedMetadata","fileMetadata","filesInDB","dir","IdGenerator","SUPPORTED_NETWORK_CHAINIDS","crypto_js_1","elliptic_1","json_rpc_random_id_1","EdDSA","eddsa","BSC","OPTIMISM","POLYGON","AVALANCHE","ARBITRUM","LINEA_MAINNET","BASE","SEPOLIA","OPBNB","ZKSYNC","SCROLL","BERACHAIN","METACHAIN_ONE","cid","useNative","hashString","createHash","digest","globalThis","subtle","SHA256","lib","WordArray","getHash","keyFromPublic","verify","href","_obsStore","_ethereumjsUtil","_nameController","_time","_mv","_alarms","_transaction","overrideAnonymousEventNames","TransactionMetaMetricsEvent","added","AnonymousTransactionMetaMetricsEvent","finalized","defaultCaptureException","buildUniqueMessageId","args","messageIdParts","uniqueIdentifier","actionId","isDuplicateAnonymizedEvent","generateRandomId","exceptionsToFilter","segment","preferencesStore","onNetworkDidChange","environment","extension","captureException","memoize","allNfts","chainNFTs","element","_captureException","prefState","locale","currentLocale","abandonedFragments","omitBy","fragments","segmentApiCalls","store","dataCollectionForMarketing","marketingCampaignCookieId","latestNonAnonymousEventTimestamp","eventsBeforeMetricsOptIn","traits","previousUserTraits","finalizeEventFragment","abandoned","isManifestV3","_submitSegmentAPICall","alarms","getAll","checkAlarmExists","METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM","delayInMinutes","periodInMinutes","onAlarm","addListener","alarmInfo","finalizeAbandonedFragments","setInterval","SECOND","generateMetaMetricsId","keccak","createEventFragment","successEvent","initialEvent","trackEvent","sensitiveProperties","referrer","revenue","currency","environmentType","getEventFragmentById","updateEventFragment","merge","eventName","failureEvent","identify","userTraits","allValidTraits","_buildValidTraits","_identify","updateExtensionUninstallUrl","query","mmi","env","av","queryString","URLSearchParams","runtime","setUninstallURL","setParticipateInMetaMetrics","existingMetaMetricsId","trackEventsAfterMetricsOptIn","clearEventsAfterMetricsOptIn","setMarketingCampaignCookieId","setDataCollectionForMarketing","trackPage","isOptInPath","idTrait","idValue","METAMETRICS_ANONYMOUS_ID","chain_id","environment_type","_buildContext","validatePayload","submitEvent","isOptIn","excludeMetaMetricsId","anonymousEventName","anonymousPayload","combinedProperties","_track","_buildEventPayload","handleMetaMaskStateUpdate","_buildUserTraitsObject","eventBeforeMetricsOptIn","addEventBeforeMetricsOptIn","prevState","updateTraits","newTraits","METAMETRICS_BACKGROUND_PAGE_OBJECT","app","userAgent","navigator","rawPayload","ENVIRONMENT_TYPE_BACKGROUND","omit","metamaskState","currentTraits","MetaMetricsUserTrait","AddressBookEntries","sum","InstallDateExt","LedgerConnectionType","ledgerTransportType","NetworksAdded","networkConfigurationsByChainId","networkConfiguration","NetworksWithoutTicker","nativeCurrency","NftAutodetectionEnabled","useNftDetection","NumberOfAccounts","internalAccounts","NumberOfNftCollections","_getAllUniqueNFTAddressesLength","NumberOfNfts","_getAllNFTsFlattened","NumberOfTokens","_getNumberOfTokens","OpenseaApiEnabled","openSeaEnabled","ThreeBoxEnabled","Theme","theme","TokenDetectionEnabled","useTokenDetection","UseNativeCurrencyAsPrimaryCurrency","useNativeCurrencyAsPrimaryCurrency","CurrentCurrency","currentCurrency","SecurityProviders","PetnameAddressCount","_getPetnameAddressCount","IsMetricsOptedIn","HasMarketingConsent","isEqual","updates","validTraits","_isValidTraitDate","toISOString","_isValidTrait","allNFTAddresses","nft","allTokens","accountsByChain","userId","_isValidTraitArray","metaMetricsIdOverride","matomoEvent","flushImmediately","idType","isSendFlow","legacy_event","safeError","flush","payloadDate","isValidDate","modifiedPayload","anonymousId","valueOf","_metamaskState$names","addressNames","names","NameType","ETHEREUM_ADDRESS","totalCount","addressEntry","_addressEntry$chainId","SUPPORT_NOTIFICATION_DATE","_state$NotificationCo","_notifications$SUPPOR","CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP","OPENSEA_PROXY_URL","TESTNET_TICKER_SYMBOLS","ASSET_TYPES","GWEI","ERC1155_TOKEN_RECEIVER_INTERFACE_ID","ERC1155_METADATA_URI_INTERFACE_ID","ERC1155_INTERFACE_ID","ERC721_ENUMERABLE_INTERFACE_ID","ERC721_METADATA_INTERFACE_ID","ERC721_INTERFACE_ID","ERC20","ERC1155","ERC721","MAX_SAFE_CHAIN_ID","GANACHE_CHAIN_ID","IPFS_DEFAULT_GATEWAY_URL","FALL_BACK_VS_CURRENCY","NATIVE","TOKEN","NFT","UNKNOWN","LINEA_GOERLI","NetworkType","goerli","ChainId","NetworksTicker","blockExplorerUrl","sepolia","BuiltInNetworkName","Goerli","Sepolia","LineaGoerli","LineaMainnet","aurora","Aurora","isValidSIWEOrigin","parseDomainParts","siwe_parser_1","msgHexToText","DEFAULT_PORTS_BY_PROTOCOL","originProtocol","parsedMessage","originParts","protocol","localeCompare","sensitivity","port","username","isSIWEMessage","ParsedMessage","currentTime","recoveryPhraseReminderHasBeenShown","recoveryPhraseReminderLastShown","isInfuraNetworkType","isNetworkType","InfuraNetworkType","val","_arguments","P","generator","fulfilled","done","convertHexToDecimal","fetchWithErrorHandling","handleFetch","successfulFetch","isSmartContractCode","safelyExecuteWithTimeout","toHex","fromHex","hexToText","hexToBN","getBuyURL","weiHexToGweiDec","gweiDecToWEIBN","fractionBN","BNToHex","isSafeChainId","ethjs_unit_1","bn_js_1","eth_ens_namehash_1","fast_deep_equal_1","constants_1","TIMEOUT_ERROR","inputHex","ok","decimalChainId","inputBn","targetBN","numerator","denominator","numBN","denomBN","mul","div","wholePart","decimalPart","toWei","decimalRoundingDigit","wei","hexWei","fromWei","networkCode","isBN","operation","logError","race","hexPrefixed","allowNonPrefixed","addressToCheck","isValidAddress","errorCodesToCatch","codesToCatch","includesErrorCodeToCatch","logOrRethrowError","ensName","normalized","normalize","trim","ethQuery","sendAsync","_state$PreferencesCon2","_state$PreferencesCon3","_state$PreferencesCon4","_state$PreferencesCon5","_state$PreferencesCon6","_state$PreferencesCon7","_state$PreferencesCon8","newAllTokens","tokensArray","newAllIgnoredTokens","ignoredTokensArray","TokensController","allIgnoredTokens","hiddenTokens","suggestedTokens","SENT_ETHER","simpleSend","txEvent","firstTimeFlowType","OnboardingController","_hardwareWallets","defaultTransportType","hid","LedgerTransportTypes","webhid","u2f","useLedgerLive","live","_originOfCurrentBatch","_requestQueue","_processingRequestCount","_shouldRequestSwitchNetwork","_clearPendingConfirmations","_showApprovalRequest","_flushQueueForOrigin","flushQueueForOrigin_fn","_processNextBatch","processNextBatch_fn","_switchNetworkIfNecessary","switchNetworkIfNecessary_fn","_updateQueuedRequestCount","updateQueuedRequestCount_fn","_waitForDequeue","waitForDequeue_fn","_selectednetworkcontroller","QueuedRequestControllerActionTypes","enqueueRequest","QueuedRequestControllerEventTypes","networkSwitched","stateChange","QueuedRequestController","shouldRequestSwitchNetwork","clearPendingConfirmations","showApprovalRequest","queuedRequestCount","requestNext","SelectedNetworkControllerEventTypes","patch","op","flushOrigin","processRequest","firstRequest","batch","nextEntry","networkSwitchError","originNetworkClientId","_bignumber","hexNumberIsGreaterThanZero","hexNumber","showTestNetworks","userIsCurrentlyOnATestNet","TEST_CHAINS","userHasMadeATestNetTransaction","userHasACachedBalanceOnATestnet","userHasUsedATestnet","_jsonrpcengine","_rpcerrors","createQueuedRequestMiddleware","useRequestQueue","shouldEnqueueRequest","createAsyncMiddleware","networkClientId","hasRequiredMetadata","serializeError","_chunk5GMDEBVMjs","_chunkVLAKOB6Vjs","PermissionsController","PermissionsMetadata","remainingState","domainMetadata","permissionsHistory","permissionsLog","PermissionController","getPermissionControllerState","SubjectMetadataController","getSubjectMetadataControllerState","domains","subjects","transformed","domainEntry","permissions","ethAccountsPermission","oldCaveat","newPermission","subjectMetadata","icon","extensionId","other","host","iconUrl","_permissionController","_state$SubjectMetadat","subjectType","SubjectType","Extension","Website","orderedNetworkList","NetworkOrderController","onNetworkControllerStateChange","newNetworks","updateNetworksList","_state$PermissionLogC","logEntry","requests","RateLimitController","rateLimitTimeout","rateLimitCount","implementations","isRateLimited","rpcErrors","recordRequest","implementation","api","previous","resetRequestCount","_chunk37GF32BRjs","AnnouncementController","announcements","knownMethodData","DEPRECATED_TEST_NET_CHAINIDS","DEPRECATED_TEST_NET_DETAILS","getRpcUrl","currentlyOnDeprecatedNetwork","deprecatedTestnetsOnWhichTheUserHasMadeATransaction","deprecatedTestnetsOnWhichTheUserHasCachedBalance","deprecatedTestnetsThatHaveBeenUsed","uniq","newFrequentRpcListDetail","rpcDetails","selectedNetworkChainId","_SelectedNetworkController_instances","_SelectedNetworkController_domainProxyMap","_SelectedNetworkController_useRequestQueuePreference","_SelectedNetworkController_registerMessageHandlers","_SelectedNetworkController_setNetworkClientIdForDomain","_SelectedNetworkController_unsetNetworkClientIdForDomain","_SelectedNetworkController_domainHasPermissions","_SelectedNetworkController_resetAllPermissionedDomains","SelectedNetworkController","SelectedNetworkControllerActionTypes","METAMASK_DOMAIN","swappable_obj_proxy_1","snapsPrefixes","getNetworkClientIdForDomain","setNetworkClientIdForDomain","useRequestQueuePreference","onPreferencesStateChange","domainProxyMap","networkClientIdToChainId","rpcEndpoints","networkClientIdForDomain","chainIdForDomain","updatedChainId","defaultNetworkClientId","defaultRpcEndpointIndex","prefix","metamaskSelectedNetworkClientId","getProviderAndBlockTracker","networkClient","networkProxy","createEventEmitterProxy","eventFilter","setTarget","globallySelectedNetworkClient","createSelectedNetworkMiddleware","SelectedNetworkController_1","SelectedNetworkMiddleware_1","_getAllState","_personalMessageManager","_typedMessageManager","_newUnsignedAbstractMessage","newUnsignedAbstractMessage_fn","_signPersonalMessage","signPersonalMessage_fn","_signTypedMessage","signTypedMessage_fn","_tryForEachMessageManager","tryForEachMessageManager_fn","_trySetDeferredSignSuccess","trySetDeferredSignSuccess_fn","_trySetMessageMetadata","trySetMessageMetadata_fn","_trySetDeferredSignError","trySetDeferredSignError_fn","_rejectUnapproved","rejectUnapproved_fn","_clearUnapproved","clearUnapproved_fn","_signAbstractMessage","signAbstractMessage_fn","_errorMessage","errorMessage_fn","cancelAbstractMessage_fn","_handleMessageManagerEvents","handleMessageManagerEvents_fn","subscribeToMessageState_fn","migrateMessages_fn","migrateMessage_fn","_getMessage","getMessage_fn","requestApproval_fn","_removeJsonData","removeJsonData_fn","_addLog","addLog_fn","_getSignTypeForLogger","getSignTypeForLogger_fn","_loggingcontroller","_messagemanager","_events2","unapprovedPersonalMsgs","unapprovedTypedMessages","unapprovedPersonalMsgCount","unapprovedTypedMessagesCount","SignatureController","getAllState","unapprovedPersonalMessagesCount","newUnsignedPersonalMessage","newUnsignedTypedMessage","signingOpts","signTypeForLogger","setDeferredSignSuccess","setMessageMetadata","setDeferredSignError","setTypedMessageInProgress","setPersonalMessageInProgress","approvalType","resultCallbacks","signaturePromise","Proposed","Rejected","signatureResult","Signed","cleanMsgParams","parseJsonData","finalMessageParams","callbackFn","messageManagers","manager","methodName","getSignature","deferSetAsSigned","clonedMsgParams","requestData","expectsResult","signingMethod","stage","signingData","EthSignLog","EthSignTypedDataV3","EthSignTypedDataV4","ThreeBoxController","_chunkXG24TXHNjs","_SmartTransactionsController_instances","_SmartTransactionsController_interval","_SmartTransactionsController_clientId","_SmartTransactionsController_chainId","_SmartTransactionsController_supportedChainIds","_SmartTransactionsController_getNonceLock","_SmartTransactionsController_ethQuery","_SmartTransactionsController_confirmExternalTransaction","_SmartTransactionsController_getRegularTransactions","_SmartTransactionsController_trackMetaMetricsEvent","_SmartTransactionsController_getMetaMetricsProps","_SmartTransactionsController_fetch","_SmartTransactionsController_updateSmartTransaction","_SmartTransactionsController_addMetaMetricsPropsToNewSmartTransaction","_SmartTransactionsController_createOrUpdateSmartTransaction","_SmartTransactionsController_doesTransactionNeedConfirmation","_SmartTransactionsController_confirmSmartTransaction","_SmartTransactionsController_getChainId","_SmartTransactionsController_getEthQuery","_SmartTransactionsController_getCurrentSmartTransactions","_SmartTransactionsController_wipeSmartTransactionsPerChainId","getDefaultSmartTransactionsControllerState","DEFAULT_INTERVAL","eth_query_1","polling_controller_1","transaction_controller_1","bignumber_js_1","cloneDeep_1","ETH_QUERY_ERROR_MSG","controllerMetadata","smartTransactionsState","smartTransactions","userOptIn","userOptInV2","fees","approvalTxFees","tradeTxFees","liveness","livenessByChainId","feesByChainId","SmartTransactionsController","StaticIntervalPollingController","clientId","InitialChainId","supportedChainIds","confirmExternalTransaction","trackMetaMetricsEvent","getTransactions","getMetaMetricsProps","setIntervalLength","initializeSmartTransactionsForChainId","checkPoll","currentState","_executePoll","updateSmartTransactions","currentSmartTransactions","pendingTransactions","isSmartTransactionPending","timeoutHandle","poll","stop","clearInterval","setOptInState","optInState","trackStxStatusChange","smartTransaction","prevSmartTransaction","updatedSmartTransaction","MetaMetricsEventName","StxStatusUpdated","Transactions","getSmartTransactionMetricsProperties","getSmartTransactionMetricsSensitiveProperties","isNewSmartTransaction","smartTransactionUuid","currentIndex","stx","updateSmartTransaction","transactionsToUpdate","fetchSmartTransactionsStatus","uuids","getAPIRequestURL","APIType","BATCH_STATUS","stxStatus","statusMetadata","calculateStatus","cancellable","isSmartTransactionCancellable","addNonceToTransaction","nonceLock","clearFees","getFees","tradeTx","approvalTx","unsignedTradeTransactionWithNonce","unsignedApprovalTransactionWithNonce","incrementNonceInHex","GET_FEES","txs","submitSignedTransactions","transactionMeta","signedTransactions","signedCanceledTransactions","SUBMIT_TRANSACTIONS","rawTxs","rawCancelTxs","preTxBalance","preTxBalanceBN","BigNumber","hexlify","submitTransactionResponse","txHash","getTxHash","SmartTransactionStatuses","PENDING","cancelSmartTransaction","CANCEL","fetchLiveness","LIVENESS","lastBlock","setStatusRefreshInterval","addressFrom","getSmartTransactionByMinedTxHash","minedHash","wipeSmartTransactions","ignoreNetwork","addressLowerCase","fetchOptions","isSafeDynamicKey","metaMetricsProps","accountHardwareType","accountType","deviceModel","cancelledNonceIndex","historifiedSmartTransaction","nextSmartTransactions","SUCCESS","REVERTED","currentSmartTransaction","nextSmartTransaction","foundTransaction","transactionReceipt","maxFeePerGas","maxPriorityFeePerGas","blockData","baseFeePerGas","updatedTxParams","originalTxMeta","replayHistory","StxConfirmed","StxConfirmationFailed","smartTransactionsForSelectedChain","newSmartTransactionsForSelectedChain","API_BASE_URL","SmartTransactionsController_1"],"mappings":"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","file":"../metamask/background-1.js","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _LedgerKeyring_instances, _LedgerKeyring_migrateAccountDetails, _LedgerKeyring_signTransaction, _LedgerKeyring_getPage, _LedgerKeyring_getAccountsBIP44, _LedgerKeyring_getAccountsLegacy, _LedgerKeyring_addressFromIndex, _LedgerKeyring_pathFromAddress, _LedgerKeyring_getPathForIndex, _LedgerKeyring_isLedgerLiveHdPath, _LedgerKeyring_toLedgerPath, _LedgerKeyring_hasPreviousTransactions, _LedgerKeyring_getApiUrl;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LedgerKeyring = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst tx_1 = require(\"@ethereumjs/tx\");\nconst ethUtil = __importStar(require(\"@ethereumjs/util\"));\nconst eth_sig_util_1 = require(\"@metamask/eth-sig-util\");\n// eslint-disable-next-line import/no-nodejs-modules\nconst buffer_1 = require(\"buffer\");\n// eslint-disable-next-line import/no-nodejs-modules\nconst events_1 = require(\"events\");\nconst hdkey_1 = __importDefault(require(\"hdkey\"));\nconst pathBase = 'm';\nconst hdPathString = `${pathBase}/44'/60'/0'`;\nconst keyringType = 'Ledger Hardware';\nconst MAX_INDEX = 1000;\nvar NetworkApiUrls;\n(function (NetworkApiUrls) {\n    NetworkApiUrls[\"Ropsten\"] = \"http://api-ropsten.etherscan.io\";\n    NetworkApiUrls[\"Kovan\"] = \"http://api-kovan.etherscan.io\";\n    NetworkApiUrls[\"Rinkeby\"] = \"https://api-rinkeby.etherscan.io\";\n    NetworkApiUrls[\"Mainnet\"] = \"https://api.etherscan.io\";\n})(NetworkApiUrls || (NetworkApiUrls = {}));\n/**\n * Check if the given transaction is made with ethereumjs-tx or @ethereumjs/tx\n *\n * Transactions built with older versions of ethereumjs-tx have a\n * getChainId method that newer versions do not.\n * Older versions are mutable\n * while newer versions default to being immutable.\n * Expected shape and type\n * of data for v, r and s differ (Buffer (old) vs BN (new)).\n *\n * @param tx - Transaction to check, instance of either ethereumjs-tx or @ethereumjs/tx.\n * @returns Returns `true` if tx is an old-style ethereumjs-tx transaction.\n */\nfunction isOldStyleEthereumjsTx(tx) {\n    return 'getChainId' in tx && typeof tx.getChainId === 'function';\n}\nclass LedgerKeyring extends events_1.EventEmitter {\n    constructor({ bridge }) {\n        super();\n        _LedgerKeyring_instances.add(this);\n        this.type = keyringType;\n        this.page = 0;\n        this.perPage = 5;\n        this.unlockedAccount = 0;\n        this.accounts = [];\n        this.accountDetails = {};\n        this.hdk = new hdkey_1.default();\n        this.hdPath = hdPathString;\n        this.paths = {};\n        this.network = NetworkApiUrls.Mainnet;\n        this.implementFullBIP44 = false;\n        if (!bridge) {\n            throw new Error('Bridge is a required dependency for the keyring');\n        }\n        this.bridge = bridge;\n    }\n    async init() {\n        return this.bridge.init();\n    }\n    async destroy() {\n        return this.bridge.destroy();\n    }\n    async serialize() {\n        return {\n            hdPath: this.hdPath,\n            accounts: this.accounts,\n            accountDetails: this.accountDetails,\n            implementFullBIP44: false,\n        };\n    }\n    async deserialize(opts = {}) {\n        var _a, _b, _c, _d;\n        this.hdPath = (_a = opts.hdPath) !== null && _a !== void 0 ? _a : hdPathString;\n        this.accounts = (_b = opts.accounts) !== null && _b !== void 0 ? _b : [];\n        this.accountDetails = (_c = opts.accountDetails) !== null && _c !== void 0 ? _c : {};\n        if (!opts.accountDetails) {\n            __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_migrateAccountDetails).call(this, opts);\n        }\n        this.implementFullBIP44 = (_d = opts.implementFullBIP44) !== null && _d !== void 0 ? _d : false;\n        const keys = new Set(Object.keys(this.accountDetails));\n        // Remove accounts that don't have corresponding account details\n        this.accounts = this.accounts.filter((account) => keys.has(ethUtil.toChecksumAddress(account)));\n        return Promise.resolve();\n    }\n    isUnlocked() {\n        var _a;\n        return Boolean((_a = this.hdk) === null || _a === void 0 ? void 0 : _a.publicKey);\n    }\n    isConnected() {\n        return this.bridge.isDeviceConnected;\n    }\n    setAccountToUnlock(index) {\n        this.unlockedAccount =\n            typeof index === 'number' ? index : parseInt(index, 10);\n    }\n    setHdPath(hdPath) {\n        // Reset HDKey if the path changes\n        if (this.hdPath !== hdPath) {\n            this.hdk = new hdkey_1.default();\n        }\n        this.hdPath = hdPath;\n    }\n    async unlock(hdPath, updateHdk = true) {\n        if (this.isUnlocked() && !hdPath) {\n            return 'already unlocked';\n        }\n        const path = hdPath ? __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_toLedgerPath).call(this, hdPath) : this.hdPath;\n        let payload;\n        try {\n            payload = await this.bridge.getPublicKey({\n                hdPath: path,\n            });\n        }\n        catch (error) {\n            throw error instanceof Error ? error : new Error('Unknown error');\n        }\n        if (updateHdk && payload.chainCode) {\n            this.hdk.publicKey = buffer_1.Buffer.from(payload.publicKey, 'hex');\n            this.hdk.chainCode = buffer_1.Buffer.from(payload.chainCode, 'hex');\n        }\n        return payload.address;\n    }\n    async addAccounts(amount = 1) {\n        return new Promise((resolve, reject) => {\n            this.unlock()\n                .then(async (_) => {\n                const from = this.unlockedAccount;\n                const to = from + amount;\n                for (let i = from; i < to; i++) {\n                    const path = __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_getPathForIndex).call(this, i);\n                    let address;\n                    if (__classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_isLedgerLiveHdPath).call(this)) {\n                        address = await this.unlock(path);\n                    }\n                    else {\n                        address = __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_addressFromIndex).call(this, pathBase, i);\n                    }\n                    this.accountDetails[ethUtil.toChecksumAddress(address)] = {\n                        // TODO: consider renaming this property, as the current name is misleading\n                        // It's currently used to represent whether an account uses the Ledger Live path.\n                        bip44: __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_isLedgerLiveHdPath).call(this),\n                        hdPath: path,\n                    };\n                    if (!this.accounts.includes(address)) {\n                        this.accounts = [...this.accounts, address];\n                    }\n                    this.page = 0;\n                }\n                resolve(this.accounts.slice());\n            })\n                .catch(reject);\n        });\n    }\n    async getFirstPage() {\n        this.page = 0;\n        return __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_getPage).call(this, 1);\n    }\n    async getNextPage() {\n        return __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_getPage).call(this, 1);\n    }\n    async getPreviousPage() {\n        return __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_getPage).call(this, -1);\n    }\n    async getAccounts() {\n        return Promise.resolve(this.accounts.slice());\n    }\n    removeAccount(address) {\n        const filteredAccounts = this.accounts.filter((a) => a.toLowerCase() !== address.toLowerCase());\n        if (filteredAccounts.length === this.accounts.length) {\n            throw new Error(`Address ${address} not found in this keyring`);\n        }\n        this.accounts = filteredAccounts;\n        delete this.accountDetails[ethUtil.toChecksumAddress(address)];\n    }\n    async attemptMakeApp() {\n        return this.bridge.attemptMakeApp();\n    }\n    async updateTransportMethod(transportType) {\n        return this.bridge.updateTransportMethod(transportType);\n    }\n    // tx is an instance of the ethereumjs-transaction class.\n    async signTransaction(address, tx) {\n        let rawTxHex;\n        // transactions built with older versions of ethereumjs-tx have a\n        // getChainId method that newer versions do not. Older versions are mutable\n        // while newer versions default to being immutable. Expected shape and type\n        // of data for v, r and s differ (Buffer (old) vs BN (new))\n        if (isOldStyleEthereumjsTx(tx)) {\n            // In this version of ethereumjs-tx we must add the chainId in hex format\n            // to the initial v value. The chainId must be included in the serialized\n            // transaction which is only communicated to ethereumjs-tx in this\n            // value. In newer versions the chainId is communicated via the 'Common'\n            // object.\n            // @ts-expect-error tx.v should be a Buffer but we are assigning a string\n            tx.v = ethUtil.bufferToHex(tx.getChainId());\n            // @ts-expect-error tx.r should be a Buffer but we are assigning a string\n            tx.r = '0x00';\n            // @ts-expect-error tx.s should be a Buffer but we are assigning a string\n            tx.s = '0x00';\n            rawTxHex = tx.serialize().toString('hex');\n            return __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_signTransaction).call(this, address, rawTxHex, (payload) => {\n                tx.v = buffer_1.Buffer.from(payload.v, 'hex');\n                tx.r = buffer_1.Buffer.from(payload.r, 'hex');\n                tx.s = buffer_1.Buffer.from(payload.s, 'hex');\n                return tx;\n            });\n        }\n        // The below `encode` call is only necessary for legacy transactions, as `getMessageToSign`\n        // calls `rlp.encode` internally for non-legacy transactions. As per the \"Transaction Execution\"\n        // section of the ethereum yellow paper, transactions need to be \"well-formed RLP, with no additional\n        // trailing bytes\".\n        // Note also that `getMessageToSign` will return valid RLP for all transaction types, whereas the\n        // `serialize` method will not for any transaction type except legacy. This is because `serialize` includes\n        // empty r, s and v values in the encoded rlp. This is why we use `getMessageToSign` here instead of `serialize`.\n        const messageToSign = tx.getMessageToSign(false);\n        rawTxHex = buffer_1.Buffer.isBuffer(messageToSign)\n            ? messageToSign.toString('hex')\n            : buffer_1.Buffer.from(rlp_1.RLP.encode(messageToSign)).toString('hex');\n        return __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_signTransaction).call(this, address, rawTxHex, (payload) => {\n            // Because tx will be immutable, first get a plain javascript object that\n            // represents the transaction. Using txData here as it aligns with the\n            // nomenclature of ethereumjs/tx.\n            const txData = tx.toJSON();\n            // The fromTxData utility expects a type to support transactions with a type other than 0\n            txData.type = tx.type;\n            // The fromTxData utility expects v,r and s to be hex prefixed\n            txData.v = ethUtil.addHexPrefix(payload.v);\n            txData.r = ethUtil.addHexPrefix(payload.r);\n            txData.s = ethUtil.addHexPrefix(payload.s);\n            // Adopt the 'common' option from the original transaction and set the\n            // returned object to be frozen if the original is frozen.\n            return tx_1.TransactionFactory.fromTxData(txData, {\n                common: tx.common,\n                freeze: Object.isFrozen(tx),\n            });\n        });\n    }\n    async signMessage(withAccount, data) {\n        return this.signPersonalMessage(withAccount, data);\n    }\n    // For personal_sign, we need to prefix the message:\n    async signPersonalMessage(withAccount, message) {\n        const hdPath = await this.unlockAccountByAddress(withAccount);\n        if (!hdPath) {\n            throw new Error('Ledger: Unknown error while signing message');\n        }\n        let payload;\n        try {\n            payload = await this.bridge.deviceSignMessage({\n                hdPath,\n                message: ethUtil.stripHexPrefix(message),\n            });\n        }\n        catch (error) {\n            throw error instanceof Error\n                ? error\n                : new Error('Ledger: Unknown error while signing message');\n        }\n        let recoveryId = parseInt(String(payload.v), 10).toString(16);\n        if (recoveryId.length < 2) {\n            recoveryId = `0${recoveryId}`;\n        }\n        const signature = `0x${payload.r}${payload.s}${recoveryId}`;\n        const addressSignedWith = (0, eth_sig_util_1.recoverPersonalSignature)({\n            data: message,\n            signature,\n        });\n        if (ethUtil.toChecksumAddress(addressSignedWith) !==\n            ethUtil.toChecksumAddress(withAccount)) {\n            throw new Error('Ledger: The signature doesnt match the right address');\n        }\n        return signature;\n    }\n    async unlockAccountByAddress(address) {\n        const checksummedAddress = ethUtil.toChecksumAddress(address);\n        const accountDetails = this.accountDetails[checksummedAddress];\n        if (!accountDetails) {\n            throw new Error(`Ledger: Account for address '${checksummedAddress}' not found`);\n        }\n        const { hdPath } = accountDetails;\n        const unlockedAddress = await this.unlock(hdPath, false);\n        // unlock resolves to the address for the given hdPath as reported by the ledger device\n        // if that address is not the requested address, then this account belongs to a different device or seed\n        if (unlockedAddress.toLowerCase() !== address.toLowerCase()) {\n            throw new Error(`Ledger: Account ${address} does not belong to the connected device`);\n        }\n        return hdPath;\n    }\n    async signTypedData(withAccount, data, options = {}) {\n        const isV4 = options.version === 'V4';\n        if (!isV4) {\n            throw new Error('Ledger: Only version 4 of typed data signing is supported');\n        }\n        const { domain, types, primaryType, message } = eth_sig_util_1.TypedDataUtils.sanitizeData(data);\n        const domainSeparatorHex = eth_sig_util_1.TypedDataUtils.hashStruct('EIP712Domain', domain, types, eth_sig_util_1.SignTypedDataVersion.V4).toString('hex');\n        const hashStructMessageHex = eth_sig_util_1.TypedDataUtils.hashStruct(primaryType.toString(), message, types, eth_sig_util_1.SignTypedDataVersion.V4).toString('hex');\n        const hdPath = await this.unlockAccountByAddress(withAccount);\n        if (!hdPath) {\n            throw new Error('Ledger: Unknown error while signing message');\n        }\n        let payload;\n        try {\n            payload = await this.bridge.deviceSignTypedData({\n                hdPath,\n                domainSeparatorHex,\n                hashStructMessageHex,\n            });\n        }\n        catch (error) {\n            throw error instanceof Error\n                ? error\n                : new Error('Ledger: Unknown error while signing message');\n        }\n        let recoveryId = parseInt(String(payload.v), 10).toString(16);\n        if (recoveryId.length < 2) {\n            recoveryId = `0${recoveryId}`;\n        }\n        const signature = `0x${payload.r}${payload.s}${recoveryId}`;\n        const addressSignedWith = (0, eth_sig_util_1.recoverTypedSignature)({\n            data,\n            signature,\n            version: eth_sig_util_1.SignTypedDataVersion.V4,\n        });\n        if (ethUtil.toChecksumAddress(addressSignedWith) !==\n            ethUtil.toChecksumAddress(withAccount)) {\n            throw new Error('Ledger: The signature doesnt match the right address');\n        }\n        return signature;\n    }\n    exportAccount() {\n        throw new Error('Not supported on this device');\n    }\n    forgetDevice() {\n        this.accounts = [];\n        this.page = 0;\n        this.unlockedAccount = 0;\n        this.paths = {};\n        this.accountDetails = {};\n        this.hdk = new hdkey_1.default();\n    }\n}\nexports.LedgerKeyring = LedgerKeyring;\n_LedgerKeyring_instances = new WeakSet(), _LedgerKeyring_migrateAccountDetails = function _LedgerKeyring_migrateAccountDetails(opts) {\n    if (__classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_isLedgerLiveHdPath).call(this) && opts.accountIndexes) {\n        for (const [account, index] of Object.entries(opts.accountIndexes)) {\n            this.accountDetails[account] = {\n                bip44: true,\n                hdPath: __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_getPathForIndex).call(this, index),\n            };\n        }\n    }\n    const keys = new Set(Object.keys(this.accountDetails));\n    // try to migrate non-LedgerLive accounts too\n    if (!__classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_isLedgerLiveHdPath).call(this)) {\n        this.accounts.forEach((account) => {\n            try {\n                const key = ethUtil.toChecksumAddress(account);\n                if (!keys.has(key)) {\n                    this.accountDetails[key] = {\n                        bip44: false,\n                        hdPath: __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_pathFromAddress).call(this, account),\n                    };\n                }\n            }\n            catch (error) {\n                console.log(`failed to migrate account ${account}`);\n            }\n        });\n    }\n}, _LedgerKeyring_signTransaction = async function _LedgerKeyring_signTransaction(address, rawTxHex, handleSigning) {\n    const hdPath = await this.unlockAccountByAddress(address);\n    if (!hdPath) {\n        throw new Error('Ledger: Unknown error while signing transaction');\n    }\n    let payload;\n    try {\n        payload = await this.bridge.deviceSignTransaction({\n            tx: rawTxHex,\n            hdPath,\n        });\n    }\n    catch (error) {\n        throw error instanceof Error\n            ? error\n            : new Error('Ledger: Unknown error while signing transaction');\n    }\n    const newOrMutatedTx = handleSigning(payload);\n    const valid = newOrMutatedTx.verifySignature();\n    if (valid) {\n        return newOrMutatedTx;\n    }\n    throw new Error('Ledger: The transaction signature is not valid');\n}, _LedgerKeyring_getPage = \n/* PRIVATE METHODS */\nasync function _LedgerKeyring_getPage(increment) {\n    this.page += increment;\n    if (this.page <= 0) {\n        this.page = 1;\n    }\n    const from = (this.page - 1) * this.perPage;\n    const to = from + this.perPage;\n    await this.unlock();\n    let accounts;\n    if (__classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_isLedgerLiveHdPath).call(this)) {\n        accounts = await __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_getAccountsBIP44).call(this, from, to);\n    }\n    else {\n        accounts = __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_getAccountsLegacy).call(this, from, to);\n    }\n    return accounts;\n}, _LedgerKeyring_getAccountsBIP44 = async function _LedgerKeyring_getAccountsBIP44(from, to) {\n    const accounts = [];\n    for (let i = from; i < to; i++) {\n        const path = __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_getPathForIndex).call(this, i);\n        const address = await this.unlock(path);\n        const valid = this.implementFullBIP44\n            ? await __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_hasPreviousTransactions).call(this, address)\n            : true;\n        accounts.push({\n            address,\n            balance: null,\n            index: i,\n        });\n        // PER BIP44\n        // \"Software should prevent a creation of an account if\n        // a previous account does not have a transaction history\n        // (meaning none of its addresses have been used before).\"\n        if (!valid) {\n            break;\n        }\n    }\n    return accounts;\n}, _LedgerKeyring_getAccountsLegacy = function _LedgerKeyring_getAccountsLegacy(from, to) {\n    const accounts = [];\n    for (let i = from; i < to; i++) {\n        const address = __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_addressFromIndex).call(this, pathBase, i);\n        accounts.push({\n            address,\n            balance: null,\n            index: i,\n        });\n        this.paths[ethUtil.toChecksumAddress(address)] = i;\n    }\n    return accounts;\n}, _LedgerKeyring_addressFromIndex = function _LedgerKeyring_addressFromIndex(basePath, i) {\n    const dkey = this.hdk.derive(`${basePath}/${i}`);\n    const address = ethUtil\n        .publicToAddress(dkey.publicKey, true)\n        .toString('hex');\n    return ethUtil.toChecksumAddress(`0x${address}`);\n}, _LedgerKeyring_pathFromAddress = function _LedgerKeyring_pathFromAddress(address) {\n    const checksummedAddress = ethUtil.toChecksumAddress(address);\n    let index = this.paths[checksummedAddress];\n    if (typeof index === 'undefined') {\n        for (let i = 0; i < MAX_INDEX; i++) {\n            if (checksummedAddress === __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_addressFromIndex).call(this, pathBase, i)) {\n                index = i;\n                break;\n            }\n        }\n    }\n    if (typeof index === 'undefined') {\n        throw new Error('Unknown address');\n    }\n    return __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_getPathForIndex).call(this, index);\n}, _LedgerKeyring_getPathForIndex = function _LedgerKeyring_getPathForIndex(index) {\n    // Check if the path is BIP 44 (Ledger Live)\n    return __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_isLedgerLiveHdPath).call(this)\n        ? `m/44'/60'/${index}'/0/0`\n        : `${this.hdPath}/${index}`;\n}, _LedgerKeyring_isLedgerLiveHdPath = function _LedgerKeyring_isLedgerLiveHdPath() {\n    return this.hdPath === `m/44'/60'/0'/0/0`;\n}, _LedgerKeyring_toLedgerPath = function _LedgerKeyring_toLedgerPath(path) {\n    return path.toString().replace('m/', '');\n}, _LedgerKeyring_hasPreviousTransactions = async function _LedgerKeyring_hasPreviousTransactions(address) {\n    const apiUrl = __classPrivateFieldGet(this, _LedgerKeyring_instances, \"m\", _LedgerKeyring_getApiUrl).call(this);\n    const response = await window.fetch(`${apiUrl}/api?module=account&action=txlist&address=${address}&tag=latest&page=1&offset=1`);\n    const parsedResponse = await response.json();\n    if (parsedResponse.status !== '0' && parsedResponse.result.length > 0) {\n        return true;\n    }\n    return false;\n}, _LedgerKeyring_getApiUrl = function _LedgerKeyring_getApiUrl() {\n    return this.network;\n};\nLedgerKeyring.type = keyringType;\n//# sourceMappingURL=ledger-keyring.js.map","/*\n\nThis migration removes the discaimer state from our app, which was integrated into our notices.\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 11;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  delete newState.TOSHash;\n  delete newState.isDisclaimerConfirmed;\n  return newState;\n}\n","/*\n\nThis migration modifies our notices to delete their body after being read.\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 12;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  newState.NoticeController.noticesList.forEach((notice) => {\n    if (notice.read) {\n      notice.body = '';\n    }\n  });\n  return newState;\n}\n","/*\n\nThis migration modifies the network config from ambiguous 'testnet' to explicit 'ropsten'\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 13;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { config } = newState;\n  if (config && config.provider) {\n    if (config.provider.type === 'testnet') {\n      newState.config.provider.type = 'ropsten';\n    }\n  }\n  return newState;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CaseInsensitiveMap = void 0;\nconst util_1 = require(\"./util\");\n/**\n * A case-insensitive map that stores key-value pairs.\n */\nclass CaseInsensitiveMap extends Map {\n    /**\n     * Create a new case-insensitive map from a plain object.\n     *\n     * @param obj - An object with entries to initialize the map with.\n     * @returns A new case-insensitive map with all entries from `obj`.\n     */\n    static fromObject(obj) {\n        return new CaseInsensitiveMap(Object.entries(obj));\n    }\n    /**\n     * Return a plain object with all entries from this map.\n     *\n     * @returns A plain object with all entries from this map.\n     */\n    toObject() {\n        return Object.fromEntries(this.entries());\n    }\n    /**\n     * Return the value associated to the given key, or `undefined` if the key is\n     * not found.\n     *\n     * @param key - The key to get the value for.\n     * @returns The value associated to the given key, or `undefined` if the key\n     * is not found.\n     */\n    get(key) {\n        return super.get(key.toLowerCase());\n    }\n    /**\n     * Return the value associated with the given key, or throw an error if the\n     * key is not found.\n     *\n     * @param key - The key to look up in the map.\n     * @param name - Optional name of the key to include in the error message.\n     * @returns The value associated with the given key.\n     */\n    getOrThrow(key, name = 'Key') {\n        return this.get(key) ?? (0, util_1.throwError)(`${name} '${key}' not found`);\n    }\n    /**\n     * Check whether the given key is present in the map.\n     *\n     * @param key - The key to check for.\n     * @returns `true` if the key is present in the map, `false` otherwise.\n     */\n    has(key) {\n        return super.has(key.toLowerCase());\n    }\n    /**\n     * Set the value for the given key. If the key already exists in the map, its\n     * value will be updated.\n     *\n     * The key is converted to lowercase before being stored in the map to ensure\n     * case-insensitivity.\n     *\n     * @param key - The key to set the value for.\n     * @param value - The value to set.\n     * @returns The map instance.\n     */\n    set(key, value) {\n        return super.set(key.toLowerCase(), value);\n    }\n    /**\n     * Delete the entry for the given key.\n     *\n     * @param key - The key to delete the entry for.\n     * @returns `true` if the entry was present in the map, `false` otherwise.\n     */\n    delete(key) {\n        return super.delete(key.toLowerCase());\n    }\n}\nexports.CaseInsensitiveMap = CaseInsensitiveMap;\n//# sourceMappingURL=CaseInsensitiveMap.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeferredPromise = void 0;\n/**\n * A deferred promise can be resolved by a caller different from the one who\n * created it.\n *\n * Example:\n * - \"A\" creates a deferred promise \"P\", adds it to a list, and awaits it\n * - \"B\" gets \"P\" from the list and resolves it\n * - \"A\" gets the resolved value\n */\nclass DeferredPromise {\n    constructor() {\n        this.resolve = undefined;\n        this.reject = undefined;\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        // This is a sanity check to make sure that the promise constructor\n        // actually set the `resolve` and `reject` functions.\n        /* istanbul ignore next */\n        if (!this.resolve || !this.reject) {\n            throw new Error('Promise constructor failed');\n        }\n    }\n}\nexports.DeferredPromise = DeferredPromise;\n//# sourceMappingURL=DeferredPromise.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SnapControllerSender_snapId, _SnapControllerSender_origin, _SnapControllerSender_controller, _SnapControllerSender_handler, _KeyringSnapControllerClient_controller;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyringSnapControllerClient = void 0;\nconst keyring_api_1 = require(\"@metamask/keyring-api\");\n/**\n * Implementation of the `Sender` interface that can be used to send requests\n * to a snap through a `SnapController`.\n */\nclass SnapControllerSender {\n    /**\n     * Create a new instance of `SnapControllerSender`.\n     *\n     * @param controller - The `SnapController` instance to send requests to.\n     * @param snapId - The ID of the snap to use.\n     * @param origin - The sender's origin.\n     * @param handler - The handler type.\n     */\n    constructor(controller, snapId, origin, handler) {\n        _SnapControllerSender_snapId.set(this, void 0);\n        _SnapControllerSender_origin.set(this, void 0);\n        _SnapControllerSender_controller.set(this, void 0);\n        _SnapControllerSender_handler.set(this, void 0);\n        __classPrivateFieldSet(this, _SnapControllerSender_controller, controller, \"f\");\n        __classPrivateFieldSet(this, _SnapControllerSender_snapId, snapId, \"f\");\n        __classPrivateFieldSet(this, _SnapControllerSender_origin, origin, \"f\");\n        __classPrivateFieldSet(this, _SnapControllerSender_handler, handler, \"f\");\n    }\n    /**\n     * Send a request to the snap and return the response.\n     *\n     * @param request - JSON-RPC request to send to the snap.\n     * @returns A promise that resolves to the response of the request.\n     */\n    async send(request) {\n        return __classPrivateFieldGet(this, _SnapControllerSender_controller, \"f\").handleRequest({\n            snapId: __classPrivateFieldGet(this, _SnapControllerSender_snapId, \"f\"),\n            origin: __classPrivateFieldGet(this, _SnapControllerSender_origin, \"f\"),\n            handler: __classPrivateFieldGet(this, _SnapControllerSender_handler, \"f\"),\n            request,\n        });\n    }\n}\n_SnapControllerSender_snapId = new WeakMap(), _SnapControllerSender_origin = new WeakMap(), _SnapControllerSender_controller = new WeakMap(), _SnapControllerSender_handler = new WeakMap();\n/**\n * A `KeyringClient` that allows the communication with a snap through the\n * `SnapController`.\n */\nclass KeyringSnapControllerClient extends keyring_api_1.KeyringClient {\n    /**\n     * Create a new instance of `KeyringSnapControllerClient`.\n     *\n     * The `handlerType` argument has a hard-coded default `string` value instead\n     * of a `HandlerType` value to prevent the `@metamask/snaps-utils` module\n     * from being required at runtime.\n     *\n     * @param args - Constructor arguments.\n     * @param args.controller - The `SnapController` instance to use.\n     * @param args.snapId - The ID of the snap to use (default: `'undefined'`).\n     * @param args.origin - The sender's origin (default: `'metamask'`).\n     * @param args.handler - The handler type (default: `'onKeyringRequest'`).\n     */\n    constructor({ controller, snapId = 'undefined', origin = 'metamask', handler = 'onKeyringRequest', }) {\n        super(new SnapControllerSender(controller, snapId, origin, handler));\n        _KeyringSnapControllerClient_controller.set(this, void 0);\n        __classPrivateFieldSet(this, _KeyringSnapControllerClient_controller, controller, \"f\");\n    }\n    /**\n     * Create a new instance of `KeyringSnapControllerClient` with the specified\n     * `snapId`.\n     *\n     * @param snapId - The ID of the snap to use in the new instance.\n     * @returns A new instance of `KeyringSnapControllerClient` with the\n     * specified snap ID.\n     */\n    withSnapId(snapId) {\n        return new KeyringSnapControllerClient({\n            controller: __classPrivateFieldGet(this, _KeyringSnapControllerClient_controller, \"f\"),\n            snapId,\n        });\n    }\n    /**\n     * Get the `SnapController` instance used by this client.\n     *\n     * @returns The `SnapController` instance used by this client.\n     */\n    getController() {\n        return __classPrivateFieldGet(this, _KeyringSnapControllerClient_controller, \"f\");\n    }\n}\nexports.KeyringSnapControllerClient = KeyringSnapControllerClient;\n_KeyringSnapControllerClient_controller = new WeakMap();\n//# sourceMappingURL=KeyringSnapControllerClient.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SnapIdMap_map;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SnapIdMap = exports.InvalidSnapIdError = void 0;\nconst CaseInsensitiveMap_1 = require(\"./CaseInsensitiveMap\");\n/**\n * Error thrown when an invalid Snap ID is encountered.\n */\nclass InvalidSnapIdError extends Error {\n    /**\n     * Creates an instance of `InvalidSnapIdError`.\n     *\n     * @param snapId - The invalid Snap ID.\n     * @param key - The key associated with the invalid Snap ID.\n     */\n    constructor(snapId, key) {\n        super(`Snap \"${snapId}\" is not allowed to set \"${key}\"`);\n        this.name = 'InvalidSnapIdError';\n        this.snapId = snapId;\n        this.key = key;\n    }\n}\nexports.InvalidSnapIdError = InvalidSnapIdError;\n/**\n * A map that associates a string key with a value that has a `snapId`\n * property. Note that the key is case-insensitive.\n *\n * The `snapId` property is used to ensure that only the Snap that added an\n * item to the map can modify or delete it.\n */\nclass SnapIdMap {\n    /**\n     * Creates a new `SnapIdMap` object.\n     *\n     * Example:\n     *\n     * ```ts\n     * const items = [\n     *   ['foo', { snapId: '1', name: 'foo' }],\n     *   ['bar', { snapId: '1', name: 'bar' }],\n     * ];\n     * const map = new SnapIdMap(items);\n     * ```\n     *\n     * @param iterable - An iterable object whose elements are key-value pairs.\n     * Each key-value pair will be added to the new map.\n     */\n    constructor(iterable) {\n        _SnapIdMap_map.set(this, void 0);\n        __classPrivateFieldSet(this, _SnapIdMap_map, new CaseInsensitiveMap_1.CaseInsensitiveMap(iterable), \"f\");\n    }\n    /**\n     * Returns a plain object with the same key-value pairs as this map.\n     *\n     * Example:\n     *\n     * ```ts\n     * const items = [\n     *   ['foo', { snapId: '1', name: 'foo' }],\n     *   ['bar', { snapId: '1', name: 'bar' }],\n     * ];\n     * const map = new SnapIdMap(items);\n     * map.toObject();\n     * // Returns\n     * // {\n     * //   foo: { snapId: '1', name: 'foo' },\n     * //   bar: { snapId: '1', name: 'bar' },\n     * // }\n     * ```\n     *\n     * @returns A plain object with the same key-value pairs as this map.\n     */\n    toObject() {\n        return __classPrivateFieldGet(this, _SnapIdMap_map, \"f\").toObject();\n    }\n    /**\n     * Returns a new `SnapIdMap` object from an plain object.\n     *\n     * Example:\n     *\n     * ```ts\n     * const obj = {\n     *   foo: { snapId: '1', name: 'foo' },\n     *   bar: { snapId: '1', name: 'bar' },\n     * };\n     * const map = SnapIdMap.fromObject(obj);\n     * ```\n     *\n     * @param obj - A plain object whose elements will be added to the new map.\n     * @returns A new `SnapIdMap` containing the elements of the given object.\n     */\n    static fromObject(obj) {\n        return new SnapIdMap(Object.entries(obj));\n    }\n    /**\n     * Gets a value from the map.\n     *\n     * If the given key is not present in the map or the Snap ID of the value is\n     * different from the given Snap ID, returns `undefined`.\n     *\n     * Example:\n     *\n     * ```ts\n     * const map = new SnapIdMap();\n     * map.set('foo', { snapId: '1', name: 'foo' });\n     * map.get('1', 'foo'); // Returns { snapId: '1', name: 'foo' }\n     * map.get('2', 'foo'); // Returns `undefined`\n     * map.get('1', 'bar'); // Returns `undefined`\n     * ```\n     *\n     * @param snapId - Snap ID present in the value to get.\n     * @param key - Key of the element to get.\n     * @returns The value associated with the given key and Snap ID.\n     */\n    get(snapId, key) {\n        const value = __classPrivateFieldGet(this, _SnapIdMap_map, \"f\").get(key);\n        return value?.snapId === snapId ? value : undefined;\n    }\n    /**\n     * Checks if a key is present in the map.\n     *\n     * If the given key is not present in the map or the Snap ID of the value is\n     * different from the given Snap ID, returns `false`.\n     *\n     * Example:\n     *\n     * ```ts\n     * const map = new SnapIdMap();\n     * map.set('foo', { snapId: '1', name: 'foo' });\n     * map.has('1', 'foo'); // Returns `true`\n     * map.has('2', 'foo'); // Returns `false`\n     * map.has('1', 'bar'); // Returns `false`\n     * ```\n     *\n     * @param snapId - Snap ID present in the value to check.\n     * @param key - Key of the element to check.\n     * @returns `true` if the key is present in the map and the Snap ID of the\n     * value is equal to the given Snap ID, `false` otherwise.\n     */\n    has(snapId, key) {\n        return this.get(snapId, key) !== undefined;\n    }\n    /**\n     * Deletes a key from the map.\n     *\n     * If the given key is not present in the map or the Snap IDs don't match,\n     * returns `false` and does nothing.\n     *\n     * Example:\n     *\n     * ```ts\n     * const map = new SnapIdMap();\n     * map.set('foo', { snapId: '1', name: 'foo' });\n     * map.delete('2', 'foo'); // Returns `false`\n     * map.delete('1', 'bar'); // Returns `false`\n     * map.delete('1', 'foo'); // Returns `true`\n     * ```\n     *\n     * @param snapId - Snap ID present in the value to delete.\n     * @param key - Key of the element to delete.\n     * @returns `true` if the key was present in the map and the Snap ID of the\n     * value was equal to the given Snap ID, `false` otherwise.\n     */\n    delete(snapId, key) {\n        return this.has(snapId, key) && __classPrivateFieldGet(this, _SnapIdMap_map, \"f\").delete(key);\n    }\n    /* eslint-disable jsdoc/check-indentation */\n    /**\n     * Adds or updates a key-value pair in the map.\n     *\n     * Note that this method has a different behavior from the `Map.set`.\n     *\n     * - If the given key is not already present in the map, this method adds the\n     *   key-value pair to the map.\n     *\n     * - If the given key is already present in the map and the Snap IDs match,\n     *   this method updates the value associated with the key.\n     *\n     * - However, if the given key is already present in the map but the Snap IDs\n     *   do not match, this method throws an error.\n     *\n     * @param key - Key of the element to add or update.\n     * @param value - Value of the element to add or update.\n     * @returns The map itself.\n     */\n    /* eslint-enable jsdoc/check-indentation */\n    set(key, value) {\n        // If the key is present in the map but isn't associated with the given\n        // Snap ID, it means that the item was added to the map by a different\n        // Snap. In this case, throw an error.\n        if (__classPrivateFieldGet(this, _SnapIdMap_map, \"f\").has(key) && !this.has(value.snapId, key)) {\n            throw new InvalidSnapIdError(value.snapId, key);\n        }\n        __classPrivateFieldGet(this, _SnapIdMap_map, \"f\").set(key, value);\n        return this;\n    }\n    /**\n     * Returns an iterable of the values in the map.\n     *\n     * Example:\n     *\n     * ```ts\n     * const map = new SnapIdMap([\n     *   ['foo', { snapId: '1', name: 'foo' }],\n     *   ['bar', { snapId: '1', name: 'bar' }],\n     * ]);\n     * const values = [...map.values()];\n     * // Returns\n     * // [\n     * //   { snapId: '1', name: 'foo' },\n     * //   { snapId: '1', name: 'bar' },\n     * // ]\n     * ```\n     *\n     * @returns An iterable of the values in the map.\n     */\n    values() {\n        return __classPrivateFieldGet(this, _SnapIdMap_map, \"f\").values();\n    }\n    /**\n     * Returns the number of key-value pairs in the map.\n     *\n     * @returns The number of key-value pairs in the map.\n     */\n    get size() {\n        return __classPrivateFieldGet(this, _SnapIdMap_map, \"f\").size;\n    }\n}\nexports.SnapIdMap = SnapIdMap;\n_SnapIdMap_map = new WeakMap();\n//# sourceMappingURL=SnapIdMap.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SnapKeyring_instances, _SnapKeyring_snapClient, _SnapKeyring_accounts, _SnapKeyring_requests, _SnapKeyring_callbacks, _SnapKeyring_handleAccountCreated, _SnapKeyring_handleAccountUpdated, _SnapKeyring_handleAccountDeleted, _SnapKeyring_handleRequestApproved, _SnapKeyring_handleRequestRejected, _SnapKeyring_submitRequest, _SnapKeyring_hasMethod, _SnapKeyring_createRequestPromise, _SnapKeyring_submitSnapRequest, _SnapKeyring_handleSyncResponse, _SnapKeyring_handleAsyncResponse, _SnapKeyring_validateRedirectUrl, _SnapKeyring_resolveAddress, _SnapKeyring_getSnapMetadata, _SnapKeyring_getSnapAllowedOrigins;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SnapKeyring = exports.SNAP_KEYRING_TYPE = void 0;\nconst tx_1 = require(\"@ethereumjs/tx\");\nconst eth_sig_util_1 = require(\"@metamask/eth-sig-util\");\nconst keyring_api_1 = require(\"@metamask/keyring-api\");\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst utils_1 = require(\"@metamask/utils\");\nconst events_1 = require(\"events\");\nconst uuid_1 = require(\"uuid\");\nconst DeferredPromise_1 = require(\"./DeferredPromise\");\nconst KeyringSnapControllerClient_1 = require(\"./KeyringSnapControllerClient\");\nconst logger_1 = require(\"./logger\");\nconst SnapIdMap_1 = require(\"./SnapIdMap\");\nconst types_1 = require(\"./types\");\nconst util_1 = require(\"./util\");\nexports.SNAP_KEYRING_TYPE = 'Snap Keyring';\n/**\n * Keyring bridge implementation to support Snaps.\n */\nclass SnapKeyring extends events_1.EventEmitter {\n    /**\n     * Create a new Snap keyring.\n     *\n     * @param controller - Snaps controller.\n     * @param callbacks - Callbacks used to interact with other components.\n     * @returns A new Snap keyring.\n     */\n    constructor(controller, callbacks) {\n        super();\n        _SnapKeyring_instances.add(this);\n        /**\n         * Client used to call the Snap keyring.\n         */\n        _SnapKeyring_snapClient.set(this, void 0);\n        /**\n         * Mapping between account IDs and an object that contains the associated\n         * account object and Snap ID.\n         */\n        _SnapKeyring_accounts.set(this, void 0);\n        /**\n         * Mapping between request IDs and their deferred promises.\n         */\n        _SnapKeyring_requests.set(this, void 0);\n        /**\n         * Callbacks used to interact with other components.\n         */\n        _SnapKeyring_callbacks.set(this, void 0);\n        this.type = SnapKeyring.type;\n        __classPrivateFieldSet(this, _SnapKeyring_snapClient, new KeyringSnapControllerClient_1.KeyringSnapControllerClient({ controller }), \"f\");\n        __classPrivateFieldSet(this, _SnapKeyring_requests, new SnapIdMap_1.SnapIdMap(), \"f\");\n        __classPrivateFieldSet(this, _SnapKeyring_accounts, new SnapIdMap_1.SnapIdMap(), \"f\");\n        __classPrivateFieldSet(this, _SnapKeyring_callbacks, callbacks, \"f\");\n    }\n    /**\n     * Handle a message from a Snap.\n     *\n     * @param snapId - ID of the Snap.\n     * @param message - Message sent by the Snap.\n     * @returns The execution result.\n     */\n    async handleKeyringSnapMessage(snapId, message) {\n        (0, superstruct_1.assert)(message, types_1.SnapMessageStruct);\n        switch (message.method) {\n            case keyring_api_1.KeyringEvent.AccountCreated: {\n                return __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_handleAccountCreated).call(this, snapId, message);\n            }\n            case keyring_api_1.KeyringEvent.AccountUpdated: {\n                return __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_handleAccountUpdated).call(this, snapId, message);\n            }\n            case keyring_api_1.KeyringEvent.AccountDeleted: {\n                return __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_handleAccountDeleted).call(this, snapId, message);\n            }\n            case keyring_api_1.KeyringEvent.RequestApproved: {\n                return __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_handleRequestApproved).call(this, snapId, message);\n            }\n            case keyring_api_1.KeyringEvent.RequestRejected: {\n                return __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_handleRequestRejected).call(this, snapId, message);\n            }\n            default:\n                throw new Error(`Method not supported: ${message.method}`);\n        }\n    }\n    /**\n     * Serialize the keyring state.\n     *\n     * @returns Serialized keyring state.\n     */\n    async serialize() {\n        return {\n            accounts: __classPrivateFieldGet(this, _SnapKeyring_accounts, \"f\").toObject(),\n        };\n    }\n    /**\n     * Deserialize the keyring state into this keyring.\n     *\n     * @param state - Serialized keyring state.\n     */\n    async deserialize(state) {\n        // If the state is undefined, it means that this is a new keyring, so we\n        // don't need to do anything.\n        if (state === undefined) {\n            return;\n        }\n        __classPrivateFieldSet(this, _SnapKeyring_accounts, SnapIdMap_1.SnapIdMap.fromObject(state.accounts), \"f\");\n    }\n    /**\n     * Get the addresses of the accounts in this keyring.\n     *\n     * @returns The addresses of the accounts in this keyring.\n     */\n    async getAccounts() {\n        return (0, util_1.unique)([...__classPrivateFieldGet(this, _SnapKeyring_accounts, \"f\").values()].map(({ account }) => account.address.toLowerCase()));\n    }\n    /**\n     * Get the addresses of the accounts associated with a given Snap.\n     *\n     * @param snapId - Snap ID to filter by.\n     * @returns The addresses of the accounts associated with the given Snap.\n     */\n    async getAccountsBySnapId(snapId) {\n        return (0, util_1.unique)([...__classPrivateFieldGet(this, _SnapKeyring_accounts, \"f\").values()]\n            .filter(({ snapId: accountSnapId }) => accountSnapId === snapId)\n            .map(({ account }) => account.address.toLowerCase()));\n    }\n    /**\n     * Sign a transaction.\n     *\n     * @param address - Sender's address.\n     * @param transaction - Transaction.\n     * @param _opts - Transaction options (not used).\n     */\n    async signTransaction(address, transaction, _opts = {}) {\n        const chainId = transaction.common.chainId();\n        const tx = (0, util_1.toJson)({\n            ...transaction.toJSON(),\n            from: address,\n            type: `0x${transaction.type.toString(16)}`,\n            chainId: (0, utils_1.bigIntToHex)(chainId),\n        });\n        const signedTx = await __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_submitRequest).call(this, {\n            address,\n            method: keyring_api_1.EthMethod.SignTransaction,\n            params: [tx],\n            chainId: (0, utils_1.toCaipChainId)(utils_1.KnownCaipNamespace.Eip155, `${chainId}`),\n        });\n        // ! It's *** CRITICAL *** that we mask the signature here, otherwise the\n        // ! Snap could overwrite the transaction.\n        const signature = (0, superstruct_1.mask)(signedTx, (0, superstruct_1.object)({\n            r: (0, superstruct_1.string)(),\n            s: (0, superstruct_1.string)(),\n            v: (0, superstruct_1.string)(),\n        }));\n        return tx_1.TransactionFactory.fromTxData({\n            ...tx,\n            r: signature.r,\n            s: signature.s,\n            v: signature.v,\n        });\n    }\n    /**\n     * Sign a typed data message.\n     *\n     * @param address - Signer's address.\n     * @param data - Data to sign.\n     * @param opts - Signing options.\n     * @returns The signature.\n     */\n    async signTypedData(address, data, opts = { version: eth_sig_util_1.SignTypedDataVersion.V1 }) {\n        const methods = {\n            [eth_sig_util_1.SignTypedDataVersion.V1]: keyring_api_1.EthMethod.SignTypedDataV1,\n            [eth_sig_util_1.SignTypedDataVersion.V3]: keyring_api_1.EthMethod.SignTypedDataV3,\n            [eth_sig_util_1.SignTypedDataVersion.V4]: keyring_api_1.EthMethod.SignTypedDataV4,\n        };\n        // Use 'V1' by default to match other keyring implementations. V1 will be\n        // used if the version is not specified or not supported.\n        const method = methods[opts.version] || keyring_api_1.EthMethod.SignTypedDataV1;\n        // Extract chain ID as if it was a typed message (as defined by EIP-712), if\n        // input is not a typed message, then chain ID will be undefined!\n        const chainId = data.domain?.chainId;\n        return (0, util_1.strictMask)(await __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_submitRequest).call(this, {\n            address,\n            method,\n            params: (0, util_1.toJson)([address, data]),\n            ...(chainId === undefined\n                ? {}\n                : {\n                    chainId: (0, utils_1.toCaipChainId)(utils_1.KnownCaipNamespace.Eip155, `${chainId}`),\n                }),\n        }), keyring_api_1.EthBytesStruct);\n    }\n    /**\n     * Sign a message.\n     *\n     * @param address - Signer's address.\n     * @param hash - Data to sign.\n     * @returns The signature.\n     */\n    async signMessage(address, hash) {\n        return (0, util_1.strictMask)(await __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_submitRequest).call(this, {\n            address,\n            method: keyring_api_1.EthMethod.Sign,\n            params: (0, util_1.toJson)([address, hash]),\n        }), keyring_api_1.EthBytesStruct);\n    }\n    /**\n     * Sign a personal message.\n     *\n     * Note: KeyringController says this should return a Buffer but it actually\n     * expects a string.\n     *\n     * @param address - Signer's address.\n     * @param data - Data to sign.\n     * @returns Promise of the signature.\n     */\n    async signPersonalMessage(address, data) {\n        return (0, util_1.strictMask)(await __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_submitRequest).call(this, {\n            address,\n            method: keyring_api_1.EthMethod.PersonalSign,\n            params: (0, util_1.toJson)([data, address]),\n        }), keyring_api_1.EthBytesStruct);\n    }\n    /**\n     * Convert a base transaction to a base UserOperation.\n     *\n     * @param address - Address of the sender.\n     * @param transactions - Base transactions to include in the UserOperation.\n     * @param context - Keyring execution context.\n     * @returns A pseudo-UserOperation that can be used to construct a real.\n     */\n    async prepareUserOperation(address, transactions, context) {\n        return (0, util_1.strictMask)(await __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_submitRequest).call(this, {\n            address,\n            method: keyring_api_1.EthMethod.PrepareUserOperation,\n            params: (0, util_1.toJson)(transactions),\n            expectSync: true,\n            // We assume the chain ID is already well formatted\n            chainId: (0, utils_1.toCaipChainId)(utils_1.KnownCaipNamespace.Eip155, context.chainId),\n        }), keyring_api_1.EthBaseUserOperationStruct);\n    }\n    /**\n     * Patches properties of a UserOperation. Currently, only the\n     * `paymasterAndData` can be patched.\n     *\n     * @param address - Address of the sender.\n     * @param userOp - UserOperation to patch.\n     * @param context - Keyring execution context.\n     * @returns A patch to apply to the UserOperation.\n     */\n    async patchUserOperation(address, userOp, context) {\n        return (0, util_1.strictMask)(await __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_submitRequest).call(this, {\n            address,\n            method: keyring_api_1.EthMethod.PatchUserOperation,\n            params: (0, util_1.toJson)([userOp]),\n            expectSync: true,\n            // We assume the chain ID is already well formatted\n            chainId: (0, utils_1.toCaipChainId)(utils_1.KnownCaipNamespace.Eip155, context.chainId),\n        }), keyring_api_1.EthUserOperationPatchStruct);\n    }\n    /**\n     * Signs an UserOperation.\n     *\n     * @param address - Address of the sender.\n     * @param userOp - UserOperation to sign.\n     * @param context - Leyring execution context.\n     * @returns The signature of the UserOperation.\n     */\n    async signUserOperation(address, userOp, context) {\n        return (0, util_1.strictMask)(await __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_submitRequest).call(this, {\n            address,\n            method: keyring_api_1.EthMethod.SignUserOperation,\n            params: (0, util_1.toJson)([userOp]),\n            // We assume the chain ID is already well formatted\n            chainId: (0, utils_1.toCaipChainId)(utils_1.KnownCaipNamespace.Eip155, context.chainId),\n        }), keyring_api_1.EthBytesStruct);\n    }\n    /**\n     * Gets the private data associated with the given address so\n     * that it may be exported.\n     *\n     * If this keyring contains duplicate public keys the first\n     * matching address is exported.\n     *\n     * Used by the UI to export an account.\n     *\n     * @param _address - Address of the account to export.\n     */\n    exportAccount(_address) {\n        throw new Error('Exporting accounts from snaps is not supported.');\n    }\n    /**\n     * Removes the account matching the given address.\n     *\n     * @param address - Address of the account to remove.\n     */\n    async removeAccount(address) {\n        const { account, snapId } = __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_resolveAddress).call(this, address);\n        // Always remove the account from the maps, even if the Snap is going to\n        // fail to delete it.\n        __classPrivateFieldGet(this, _SnapKeyring_accounts, \"f\").delete(snapId, account.id);\n        try {\n            await __classPrivateFieldGet(this, _SnapKeyring_snapClient, \"f\").withSnapId(snapId).deleteAccount(account.id);\n        }\n        catch (error) {\n            // If the Snap failed to delete the account, log the error and continue\n            // with the account deletion, otherwise the account will be stuck in the\n            // keyring.\n            console.error(`Account '${address}' may not have been removed from snap '${snapId}':`, error);\n        }\n    }\n    /**\n     * Return an internal account object for a given address.\n     *\n     * @param address - Address of the account to return.\n     * @returns An internal account object for the given address.\n     */\n    getAccountByAddress(address) {\n        const accounts = this.listAccounts();\n        return accounts.find(({ address: accountAddress }) => (0, util_1.equalsIgnoreCase)(accountAddress, address));\n    }\n    /**\n     * List all Snap keyring accounts.\n     *\n     * @returns An array containing all Snap keyring accounts.\n     */\n    listAccounts() {\n        return [...__classPrivateFieldGet(this, _SnapKeyring_accounts, \"f\").values()].map(({ account, snapId }) => {\n            const snap = __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_getSnapMetadata).call(this, snapId);\n            return {\n                ...account,\n                // TODO: Do not convert the address to lowercase.\n                //\n                // This is a workaround to support the current UI which expects the\n                // account address to be lowercase. This workaround should be removed\n                // once we migrated the UI to use the account ID instead of the account\n                // address.\n                address: account.address.toLowerCase(),\n                metadata: {\n                    name: '',\n                    importTime: 0,\n                    keyring: {\n                        type: this.type,\n                    },\n                    ...(snap !== undefined && { snap }),\n                },\n            };\n        });\n    }\n}\nexports.SnapKeyring = SnapKeyring;\n_SnapKeyring_snapClient = new WeakMap(), _SnapKeyring_accounts = new WeakMap(), _SnapKeyring_requests = new WeakMap(), _SnapKeyring_callbacks = new WeakMap(), _SnapKeyring_instances = new WeakSet(), _SnapKeyring_handleAccountCreated = \n/**\n * Handle an Account Created event from a Snap.\n *\n * @param snapId - Snap ID.\n * @param message - Event message.\n * @returns `null`.\n */\nasync function _SnapKeyring_handleAccountCreated(snapId, message) {\n    (0, superstruct_1.assert)(message, keyring_api_1.AccountCreatedEventStruct);\n    const { account, accountNameSuggestion, displayConfirmation } = message.params;\n    // The UI still uses the account address to identify accounts, so we need\n    // to block the creation of duplicate accounts for now to prevent accounts\n    // from being overwritten.\n    if (await __classPrivateFieldGet(this, _SnapKeyring_callbacks, \"f\").addressExists(account.address.toLowerCase())) {\n        throw new Error(`Account address '${account.address}' already exists`);\n    }\n    // A Snap could try to create an account with a different address but with\n    // an existing ID, so the above test only is not enough.\n    if (__classPrivateFieldGet(this, _SnapKeyring_accounts, \"f\").has(snapId, account.id)) {\n        throw new Error(`Account '${account.id}' already exists`);\n    }\n    await __classPrivateFieldGet(this, _SnapKeyring_callbacks, \"f\").addAccount(account.address.toLowerCase(), snapId, async (accepted) => {\n        if (accepted) {\n            __classPrivateFieldGet(this, _SnapKeyring_accounts, \"f\").set(account.id, { account, snapId });\n            await __classPrivateFieldGet(this, _SnapKeyring_callbacks, \"f\").saveState();\n        }\n    }, accountNameSuggestion, displayConfirmation);\n    return null;\n}, _SnapKeyring_handleAccountUpdated = \n/**\n * Handle an Account Updated event from a Snap.\n *\n * @param snapId - Snap ID.\n * @param message - Event message.\n * @returns `null`.\n */\nasync function _SnapKeyring_handleAccountUpdated(snapId, message) {\n    (0, superstruct_1.assert)(message, keyring_api_1.AccountUpdatedEventStruct);\n    const { account: newAccount } = message.params;\n    const { account: oldAccount } = __classPrivateFieldGet(this, _SnapKeyring_accounts, \"f\").get(snapId, newAccount.id) ??\n        (0, util_1.throwError)(`Account '${newAccount.id}' not found`);\n    // The address of the account cannot be changed. In the future, we will\n    // support changing the address of an account since it will be required to\n    // support UTXO-based chains.\n    if (!(0, util_1.equalsIgnoreCase)(oldAccount.address, newAccount.address)) {\n        throw new Error(`Cannot change address of account '${newAccount.id}'`);\n    }\n    __classPrivateFieldGet(this, _SnapKeyring_accounts, \"f\").set(newAccount.id, { account: newAccount, snapId });\n    await __classPrivateFieldGet(this, _SnapKeyring_callbacks, \"f\").saveState();\n    return null;\n}, _SnapKeyring_handleAccountDeleted = \n/**\n * Handle an Account Deleted event from a Snap.\n *\n * @param snapId - Snap ID.\n * @param message - Event message.\n * @returns `null`.\n */\nasync function _SnapKeyring_handleAccountDeleted(snapId, message) {\n    (0, superstruct_1.assert)(message, keyring_api_1.AccountDeletedEventStruct);\n    const { id } = message.params;\n    const entry = __classPrivateFieldGet(this, _SnapKeyring_accounts, \"f\").get(snapId, id);\n    // We can ignore the case where the account was already removed from the\n    // keyring, making the deletion idempotent.\n    //\n    // This happens when the keyring calls the Snap to delete an account, and\n    // the Snap calls the keyring back with an `AccountDeleted` event.\n    if (entry === undefined) {\n        return null;\n    }\n    // At this point we know that the account exists, so we can safely\n    // destructure it.\n    const { account: { address }, } = entry;\n    await __classPrivateFieldGet(this, _SnapKeyring_callbacks, \"f\").removeAccount(address.toLowerCase(), snapId, async (accepted) => {\n        if (accepted) {\n            await __classPrivateFieldGet(this, _SnapKeyring_callbacks, \"f\").saveState();\n        }\n    });\n    return null;\n}, _SnapKeyring_handleRequestApproved = \n/**\n * Handle an Request Approved event from a Snap.\n *\n * @param snapId - Snap ID.\n * @param message - Event message.\n * @returns `null`.\n */\nasync function _SnapKeyring_handleRequestApproved(snapId, message) {\n    (0, superstruct_1.assert)(message, keyring_api_1.RequestApprovedEventStruct);\n    const { id, result } = message.params;\n    const { promise } = __classPrivateFieldGet(this, _SnapKeyring_requests, \"f\").get(snapId, id) ?? (0, util_1.throwError)(`Request '${id}' not found`);\n    __classPrivateFieldGet(this, _SnapKeyring_requests, \"f\").delete(snapId, id);\n    promise.resolve(result);\n    return null;\n}, _SnapKeyring_handleRequestRejected = \n/**\n * Handle an Request Rejected event from a Snap.\n *\n * @param snapId - Snap ID.\n * @param message - Event message.\n * @returns `null`.\n */\nasync function _SnapKeyring_handleRequestRejected(snapId, message) {\n    (0, superstruct_1.assert)(message, keyring_api_1.RequestRejectedEventStruct);\n    const { id } = message.params;\n    const { promise } = __classPrivateFieldGet(this, _SnapKeyring_requests, \"f\").get(snapId, id) ?? (0, util_1.throwError)(`Request '${id}' not found`);\n    __classPrivateFieldGet(this, _SnapKeyring_requests, \"f\").delete(snapId, id);\n    promise.reject(new Error(`Request rejected by user or snap.`));\n    return null;\n}, _SnapKeyring_submitRequest = \n/**\n * Submit a request to a Snap.\n *\n * @param opts - Request options.\n * @param opts.address - Account address.\n * @param opts.method - Method to call.\n * @param opts.params - Method parameters.\n * @param opts.chainId - Selected chain ID (CAIP-2).\n * @param opts.expectSync - Whether the request should be synchronous.\n * @returns Promise that resolves to the result of the method call.\n */\nasync function _SnapKeyring_submitRequest({ address, method, params, chainId = '', expectSync = false, }) {\n    const { account, snapId } = __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_resolveAddress).call(this, address);\n    if (!__classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_hasMethod).call(this, account, method)) {\n        throw new Error(`Method '${method}' not supported for account ${account.address}`);\n    }\n    const requestId = (0, uuid_1.v4)();\n    // Create the promise before calling the Snap to prevent a race condition\n    // where the Snap responds before we have a chance to create it.\n    const promise = __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_createRequestPromise).call(this, requestId, snapId);\n    const response = await __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_submitSnapRequest).call(this, {\n        snapId,\n        requestId,\n        account,\n        method: method,\n        params,\n        chainId,\n    });\n    // Some methods, like the ones used to prepare and patch user operations,\n    // require the Snap to answer synchronously in order to work with the\n    // confirmation flow. This check lets the caller enforce this behavior.\n    if (expectSync && response.pending) {\n        throw new Error(`Request '${requestId}' to snap '${snapId}' is pending and expectSync is true.`);\n    }\n    // If the Snap answers synchronously, the promise must be removed from the\n    // map to prevent a leak.\n    if (!response.pending) {\n        return __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_handleSyncResponse).call(this, response, requestId, snapId);\n    }\n    // If the Snap answers asynchronously, we will inform the user with a redirect\n    if (response.redirect?.message || response.redirect?.url) {\n        await __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_handleAsyncResponse).call(this, response.redirect, snapId);\n    }\n    return promise.promise;\n}, _SnapKeyring_hasMethod = function _SnapKeyring_hasMethod(account, method) {\n    return account.methods.includes(method);\n}, _SnapKeyring_createRequestPromise = function _SnapKeyring_createRequestPromise(requestId, snapId) {\n    const promise = new DeferredPromise_1.DeferredPromise();\n    __classPrivateFieldGet(this, _SnapKeyring_requests, \"f\").set(requestId, { promise, snapId });\n    return promise;\n}, _SnapKeyring_submitSnapRequest = \n/**\n * Submits a request to a Snap.\n *\n * @param options - The options for the Snap request.\n * @param options.snapId - The Snap ID to submit the request to.\n * @param options.requestId - The unique identifier for the request.\n * @param options.account - The account to use for the request.\n * @param options.method - The Ethereum method to call.\n * @param options.params - The parameters to pass to the method, can be undefined.\n * @param options.chainId - The chain ID to use for the request, can be an empty string.\n * @returns A promise that resolves to the keyring response from the Snap.\n * @throws An error if the Snap fails to respond or if there's an issue with the request submission.\n */\nasync function _SnapKeyring_submitSnapRequest({ snapId, requestId, account, method, params, chainId, }) {\n    try {\n        const request = {\n            id: requestId,\n            scope: chainId,\n            account: account.id,\n            request: {\n                method,\n                ...(params !== undefined && { params }),\n            },\n        };\n        (0, logger_1.projectLogger)('Submit Snap request: ', request);\n        return await __classPrivateFieldGet(this, _SnapKeyring_snapClient, \"f\").withSnapId(snapId).submitRequest(request);\n    }\n    catch (error) {\n        (0, logger_1.projectLogger)('Snap Request failed: ', { requestId });\n        // If the Snap failed to respond, delete the promise to prevent a leak.\n        __classPrivateFieldGet(this, _SnapKeyring_requests, \"f\").delete(snapId, requestId);\n        throw error;\n    }\n}, _SnapKeyring_handleSyncResponse = function _SnapKeyring_handleSyncResponse(response, requestId, snapId) {\n    __classPrivateFieldGet(this, _SnapKeyring_requests, \"f\").delete(snapId, requestId);\n    return response.result;\n}, _SnapKeyring_handleAsyncResponse = \n/**\n * Handles the async redirect and response from a Snap. Validates the redirect URL and informs the user with a message and URL if provided.\n *\n * @param redirect - The redirect information including message and URL.\n * @param redirect.message - The message to show to the user if provided.\n * @param redirect.url - The URL to redirect the user to if provided.\n * @param snapId - The Snap ID associated with the request.\n * @throws An error if the redirect URL is not an allowed origin for the Snap.\n */\nasync function _SnapKeyring_handleAsyncResponse(redirect, snapId) {\n    const { message = '', url = '' } = redirect;\n    if (url) {\n        __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_validateRedirectUrl).call(this, url, snapId);\n    }\n    await __classPrivateFieldGet(this, _SnapKeyring_callbacks, \"f\").redirectUser(snapId, url, message);\n}, _SnapKeyring_validateRedirectUrl = function _SnapKeyring_validateRedirectUrl(url, snapId) {\n    const { origin } = new URL(url);\n    const snap = __classPrivateFieldGet(this, _SnapKeyring_snapClient, \"f\").getController().get(snapId);\n    if (!snap) {\n        throw new Error(`Snap '${snapId}' not found.`);\n    }\n    const allowedOrigins = __classPrivateFieldGet(this, _SnapKeyring_instances, \"m\", _SnapKeyring_getSnapAllowedOrigins).call(this, snap);\n    if (!allowedOrigins.includes(origin)) {\n        throw new Error(`Redirect URL domain '${origin}' is not an allowed origin by snap '${snapId}'`);\n    }\n}, _SnapKeyring_resolveAddress = function _SnapKeyring_resolveAddress(address) {\n    return ([...__classPrivateFieldGet(this, _SnapKeyring_accounts, \"f\").values()].find(({ account }) => (0, util_1.equalsIgnoreCase)(account.address, address)) ?? (0, util_1.throwError)(`Account '${address}' not found`));\n}, _SnapKeyring_getSnapMetadata = function _SnapKeyring_getSnapMetadata(snapId) {\n    const snap = __classPrivateFieldGet(this, _SnapKeyring_snapClient, \"f\").getController().get(snapId);\n    return snap\n        ? { id: snapId, name: snap.manifest.proposedName, enabled: snap.enabled }\n        : undefined;\n}, _SnapKeyring_getSnapAllowedOrigins = function _SnapKeyring_getSnapAllowedOrigins(snap) {\n    return (snap.manifest.initialPermissions['endowment:keyring']?.allowedOrigins ??\n        []);\n};\nSnapKeyring.type = exports.SNAP_KEYRING_TYPE;\n//# sourceMappingURL=SnapKeyring.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./types\"), exports);\n__exportStar(require(\"./SnapKeyring\"), exports);\n__exportStar(require(\"./KeyringSnapControllerClient\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n/* istanbul ignore file */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createModuleLogger = exports.projectLogger = void 0;\nconst utils_1 = require(\"@metamask/utils\");\nObject.defineProperty(exports, \"createModuleLogger\", { enumerable: true, get: function () { return utils_1.createModuleLogger; } });\nexports.projectLogger = (0, utils_1.createProjectLogger)('eth-snap-keyring');\n//# sourceMappingURL=logger.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SnapMessageStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst utils_1 = require(\"@metamask/utils\");\nexports.SnapMessageStruct = (0, superstruct_1.object)({\n    method: (0, superstruct_1.string)(),\n    params: (0, superstruct_1.optional)((0, superstruct_1.union)([(0, superstruct_1.array)(utils_1.JsonStruct), (0, superstruct_1.record)((0, superstruct_1.string)(), utils_1.JsonStruct)])),\n});\n//# sourceMappingURL=types.js.map","/*\n\nThis migration removes provider from config and moves it too NetworkController.\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 14;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  newState.NetworkController = {};\n  newState.NetworkController.provider = newState.config.provider;\n  delete newState.config.provider;\n  return newState;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.equalsIgnoreCase = exports.throwError = exports.ensureDefined = exports.toJson = exports.unique = exports.strictMask = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\n/**\n * Assert that a value is valid according to a struct.\n *\n * It is similar to superstruct's mask function, but it does not ignore extra\n * properties.\n *\n * @param value - Value to check.\n * @param struct - Struct to validate the value against.\n * @param message - Error message to throw if the value is not valid.\n * @returns The value if it is valid.\n */\nfunction strictMask(value, struct, message) {\n    (0, superstruct_1.assert)(value, struct, message);\n    return value;\n}\nexports.strictMask = strictMask;\n/**\n * Remove duplicate entries from an array.\n *\n * @param array - Array to remove duplicates from.\n * @returns Array with duplicates removed.\n */\nfunction unique(array) {\n    return [...new Set(array)];\n}\nexports.unique = unique;\n/**\n * Convert a value to a valid JSON object.\n *\n * The function chains JSON.stringify and JSON.parse to ensure that the result\n * is a valid JSON object. In objects, undefined values are removed, and in\n * arrays, they are replaced with null.\n *\n * @param value - Value to convert to JSON.\n * @returns JSON representation of the value.\n */\nfunction toJson(value) {\n    return JSON.parse(JSON.stringify(value));\n}\nexports.toJson = toJson;\n/**\n * Asserts that the given value is defined.\n *\n * @param value - Value to check.\n */\nfunction ensureDefined(value) {\n    if (value === undefined) {\n        throw new Error('Argument is undefined');\n    }\n}\nexports.ensureDefined = ensureDefined;\n/**\n * Helper function that throws an error.\n *\n * @param message - Error message to throw.\n */\nfunction throwError(message) {\n    throw new Error(message);\n}\nexports.throwError = throwError;\n/**\n * Compares two strings for equality, ignoring case.\n *\n * @param a - The first string to compare.\n * @param b - The second string to compare.\n * @returns `true` if the strings are equal, ignoring case. `false` otherwise.\n */\nfunction equalsIgnoreCase(a, b) {\n    return a.toLowerCase() === b.toLowerCase();\n}\nexports.equalsIgnoreCase = equalsIgnoreCase;\n//# sourceMappingURL=util.js.map","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function () {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return _parse.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function () {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function () {\n    return _version.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar _default = {\n  randomUUID\n};\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.unsafeStringify = unsafeStringify;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;","/*\n\nThis migration sets transactions with the 'Gave up submitting tx.' err message\nto a 'failed' stated\n\n*/\n\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport { cloneDeep } from 'lodash';\n\nconst version = 15;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = TransactionController;\n    newState.TransactionController.transactions = transactions.map((txMeta) => {\n      if (!txMeta.err) {\n        return txMeta;\n      } else if (txMeta.err.message === 'Gave up submitting tx.') {\n        txMeta.status = TransactionStatus.failed;\n      }\n      return txMeta;\n    });\n  }\n  return newState;\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.unsafeStringify)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.URL = exports.DNS = void 0;\nexports.default = v35;\n\nvar _stringify = require(\"./stringify.js\");\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.unsafeStringify)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _native = _interopRequireDefault(require(\"./native.js\"));\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (_native.default.randomUUID && !buf && !options) {\n    return _native.default.randomUUID();\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.unsafeStringify)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.slice(14, 15), 16);\n}\n\nvar _default = version;\nexports.default = _default;","/*\n\nThis migration sets transactions with the 'Gave up submitting tx.' err message\nto a 'failed' stated\n\n*/\n\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport { cloneDeep } from 'lodash';\n\nconst version = 16;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = newState.TransactionController;\n\n    newState.TransactionController.transactions = transactions.map((txMeta) => {\n      if (!txMeta.err) {\n        return txMeta;\n      }\n      if (\n        txMeta.err === 'transaction with the same hash was already imported.'\n      ) {\n        txMeta.status = TransactionStatus.submitted;\n        delete txMeta.err;\n      }\n      return txMeta;\n    });\n  }\n  return newState;\n}\n","/*\n\nThis migration sets transactions who were retried and marked as failed to submitted\n\n*/\n\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport { cloneDeep } from 'lodash';\n\nconst version = 17;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = newState.TransactionController;\n    newState.TransactionController.transactions = transactions.map((txMeta) => {\n      if (!txMeta.status === TransactionStatus.failed) {\n        return txMeta;\n      }\n      if (txMeta.retryCount > 0 && txMeta.retryCount < 2) {\n        txMeta.status = TransactionStatus.submitted;\n        delete txMeta.err;\n      }\n      return txMeta;\n    });\n  }\n  return newState;\n}\n","/*\n\nThis migration updates \"transaction state history\" to diffs style\n\n*/\n\nimport jsonDiffer from 'fast-json-patch';\nimport { cloneDeep } from 'lodash';\n\nconst version = 18;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = newState.TransactionController;\n    newState.TransactionController.transactions = transactions.map((txMeta) => {\n      // no history: initialize\n      if (!txMeta.history || txMeta.history.length === 0) {\n        const snapshot = snapshotFromTxMeta(txMeta);\n        txMeta.history = [snapshot];\n        return txMeta;\n      }\n      // has history: migrate\n      const newHistory = migrateFromSnapshotsToDiffs(txMeta.history)\n        // remove empty diffs\n        .filter((entry) => {\n          return !Array.isArray(entry) || entry.length > 0;\n        });\n      txMeta.history = newHistory;\n      return txMeta;\n    });\n  }\n  return newState;\n}\n\n/**\n * Snapshot {@code txMeta}\n *\n * @param {object} txMeta - the tx metadata object\n * @returns {object} a deep clone without history\n */\nfunction snapshotFromTxMeta(txMeta) {\n  const shallow = { ...txMeta };\n  delete shallow.history;\n  return cloneDeep(shallow);\n}\n\n/**\n * converts non-initial history entries into diffs\n *\n * @param {Array} longHistory\n * @returns {Array}\n */\nfunction migrateFromSnapshotsToDiffs(longHistory) {\n  return (\n    longHistory\n      // convert non-initial history entries into diffs\n      .map((entry, index) => {\n        if (index === 0) {\n          return entry;\n        }\n        return generateHistoryEntry(longHistory[index - 1], entry);\n      })\n  );\n}\n\n/**\n * Generates an array of history objects sense the previous state.\n * The object has the keys\n * op (the operation performed),\n * path (the key and if a nested object then each key will be separated with a `/`)\n * value\n * with the first entry having the note and a timestamp when the change took place\n *\n * @param {object} previousState - the previous state of the object\n * @param {object} newState - the update object\n * @param {string} [note] - a optional note for the state change\n * @returns {Array}\n */\nfunction generateHistoryEntry(previousState, newState, note) {\n  const entry = jsonDiffer.compare(previousState, newState);\n  // Add a note to the first op, since it breaks if we append it to the entry\n  if (entry[0]) {\n    if (note) {\n      entry[0].note = note;\n    }\n    entry[0].timestamp = Date.now();\n  }\n  return entry;\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./trezor-keyring\"), exports);\n__exportStar(require(\"./trezor-bridge\"), exports);\n__exportStar(require(\"./trezor-connect-bridge\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=trezor-bridge.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TrezorConnectBridge = void 0;\nconst connect_web_1 = __importStar(require(\"@trezor/connect-web\"));\nclass TrezorConnectBridge {\n    constructor() {\n        this.trezorConnectInitiated = false;\n    }\n    async init(settings) {\n        connect_web_1.default.on(connect_web_1.DEVICE_EVENT, (event) => {\n            var _a;\n            if (event.type !== connect_web_1.DEVICE.CONNECT) {\n                return;\n            }\n            this.model = (_a = event.payload.features) === null || _a === void 0 ? void 0 : _a.model;\n        });\n        if (this.trezorConnectInitiated) {\n            return;\n        }\n        await connect_web_1.default.init(settings);\n        this.trezorConnectInitiated = true;\n    }\n    dispose() {\n        // This removes the Trezor Connect iframe from the DOM\n        // This method is not well documented, but the code it calls can be seen\n        // here: https://github.com/trezor/connect/blob/dec4a56af8a65a6059fb5f63fa3c6690d2c37e00/src/js/iframe/builder.js#L181\n        connect_web_1.default.dispose();\n        return Promise.resolve();\n    }\n    getPublicKey(params) {\n        return connect_web_1.default.getPublicKey(params);\n    }\n    ethereumSignTransaction(params) {\n        return connect_web_1.default.ethereumSignTransaction(params);\n    }\n    ethereumSignMessage(params) {\n        return connect_web_1.default.ethereumSignMessage(params);\n    }\n    ethereumSignTypedData(params) {\n        return connect_web_1.default.ethereumSignTypedData(params);\n    }\n}\nexports.TrezorConnectBridge = TrezorConnectBridge;\n//# sourceMappingURL=trezor-connect-bridge.js.map","/*\n\nThis migration sets transactions as failed\nwhos nonce is too high\n\n*/\n\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport { cloneDeep } from 'lodash';\n\nconst version = 19;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = newState.TransactionController;\n\n    newState.TransactionController.transactions = transactions.map(\n      (txMeta, _, txList) => {\n        if (txMeta.status !== TransactionStatus.submitted) {\n          return txMeta;\n        }\n\n        const confirmedTxs = txList\n          .filter((tx) => tx.status === TransactionStatus.confirmed)\n          .filter((tx) => tx.txParams.from === txMeta.txParams.from)\n          .filter(\n            (tx) => tx.metamaskNetworkId.from === txMeta.metamaskNetworkId.from,\n          );\n        const highestConfirmedNonce = getHighestNonce(confirmedTxs);\n\n        const pendingTxs = txList\n          .filter((tx) => tx.status === TransactionStatus.submitted)\n          .filter((tx) => tx.txParams.from === txMeta.txParams.from)\n          .filter(\n            (tx) => tx.metamaskNetworkId.from === txMeta.metamaskNetworkId.from,\n          );\n        const highestContinuousNonce = getHighestContinuousFrom(\n          pendingTxs,\n          highestConfirmedNonce,\n        );\n\n        const maxNonce = Math.max(\n          highestContinuousNonce,\n          highestConfirmedNonce,\n        );\n\n        if (parseInt(txMeta.txParams.nonce, 16) > maxNonce + 1) {\n          txMeta.status = TransactionStatus.failed;\n          txMeta.err = {\n            message: 'nonce too high',\n            note: 'migration 019 custom error',\n          };\n        }\n        return txMeta;\n      },\n    );\n  }\n  return newState;\n}\n\nfunction getHighestContinuousFrom(txList, startPoint) {\n  const nonces = txList.map((txMeta) => {\n    const { nonce } = txMeta.txParams;\n    return parseInt(nonce, 16);\n  });\n\n  let highest = startPoint;\n  while (nonces.includes(highest)) {\n    highest += 1;\n  }\n\n  return highest;\n}\n\nfunction getHighestNonce(txList) {\n  const nonces = txList.map((txMeta) => {\n    const { nonce } = txMeta.txParams;\n    return parseInt(nonce || '0x0', 16);\n  });\n  const highestNonce = Math.max.apply(null, nonces);\n  return highestNonce;\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _TrezorKeyring_instances, _TrezorKeyring_getPage, _TrezorKeyring_signTransaction, _TrezorKeyring_normalize, _TrezorKeyring_addressFromIndex, _TrezorKeyring_pathFromAddress;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TrezorKeyring = exports.TREZOR_CONNECT_MANIFEST = void 0;\nconst events_1 = require(\"events\");\nconst ethUtil = __importStar(require(\"@ethereumjs/util\"));\nconst hdkey_1 = __importDefault(require(\"hdkey\"));\nconst tx_1 = require(\"@ethereumjs/tx\");\nconst connect_plugin_ethereum_1 = require(\"@trezor/connect-plugin-ethereum\");\nconst hdPathString = `m/44'/60'/0'/0`;\nconst SLIP0044TestnetPath = `m/44'/1'/0'/0`;\nconst legacyMewPath = `m/44'/60'/0'`;\nconst ALLOWED_HD_PATHS = {\n    [hdPathString]: true,\n    [legacyMewPath]: true,\n    [SLIP0044TestnetPath]: true,\n};\nconst keyringType = 'Trezor Hardware';\nconst pathBase = 'm';\nconst MAX_INDEX = 1000;\nconst DELAY_BETWEEN_POPUPS = 1000;\nexports.TREZOR_CONNECT_MANIFEST = {\n    email: 'support@metamask.io',\n    appUrl: 'https://metamask.io',\n};\nasync function wait(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n/**\n * Check if the given transaction is made with ethereumjs-tx or @ethereumjs/tx\n *\n * Transactions built with older versions of ethereumjs-tx have a\n * getChainId method that newer versions do not.\n * Older versions are mutable\n * while newer versions default to being immutable.\n * Expected shape and type\n * of data for v, r and s differ (Buffer (old) vs BN (new)).\n *\n * @param tx\n * @returns Returns `true` if tx is an old-style ethereumjs-tx transaction.\n */\nfunction isOldStyleEthereumjsTx(tx) {\n    return typeof tx.getChainId === 'function';\n}\nclass TrezorKeyring extends events_1.EventEmitter {\n    constructor({ bridge }) {\n        super();\n        _TrezorKeyring_instances.add(this);\n        this.type = keyringType;\n        this.accounts = [];\n        this.hdk = new hdkey_1.default();\n        this.hdPath = hdPathString;\n        this.page = 0;\n        this.perPage = 5;\n        this.unlockedAccount = 0;\n        this.paths = {};\n        if (!bridge) {\n            throw new Error('Bridge is a required dependency for the keyring');\n        }\n        this.bridge = bridge;\n    }\n    /**\n     * Gets the model, if known.\n     * This may be `undefined` if the model hasn't been loaded yet.\n     *\n     * @returns\n     */\n    getModel() {\n        return this.bridge.model;\n    }\n    init() {\n        return this.bridge.init({\n            manifest: exports.TREZOR_CONNECT_MANIFEST,\n            lazyLoad: true,\n        });\n    }\n    async destroy() {\n        return this.bridge.dispose();\n    }\n    async serialize() {\n        return Promise.resolve({\n            hdPath: this.hdPath,\n            accounts: this.accounts,\n            page: this.page,\n            paths: this.paths,\n            perPage: this.perPage,\n            unlockedAccount: this.unlockedAccount,\n        });\n    }\n    async deserialize(opts = {}) {\n        var _a, _b, _c, _d;\n        this.hdPath = (_a = opts.hdPath) !== null && _a !== void 0 ? _a : hdPathString;\n        this.accounts = (_b = opts.accounts) !== null && _b !== void 0 ? _b : [];\n        this.page = (_c = opts.page) !== null && _c !== void 0 ? _c : 0;\n        this.perPage = (_d = opts.perPage) !== null && _d !== void 0 ? _d : 5;\n        return Promise.resolve();\n    }\n    isUnlocked() {\n        var _a;\n        return Boolean((_a = this.hdk) === null || _a === void 0 ? void 0 : _a.publicKey);\n    }\n    async unlock() {\n        if (this.isUnlocked()) {\n            return Promise.resolve('already unlocked');\n        }\n        return new Promise((resolve, reject) => {\n            this.bridge\n                .getPublicKey({\n                path: this.hdPath,\n                coin: 'ETH',\n            })\n                .then((response) => {\n                var _a;\n                if (response.success) {\n                    this.hdk.publicKey = Buffer.from(response.payload.publicKey, 'hex');\n                    this.hdk.chainCode = Buffer.from(response.payload.chainCode, 'hex');\n                    resolve('just unlocked');\n                }\n                else {\n                    reject(new Error(((_a = response.payload) === null || _a === void 0 ? void 0 : _a.error) || 'Unknown error'));\n                }\n            })\n                .catch((e) => {\n                reject(new Error((e === null || e === void 0 ? void 0 : e.toString()) || 'Unknown error'));\n            });\n        });\n    }\n    setAccountToUnlock(index) {\n        this.unlockedAccount = parseInt(String(index), 10);\n    }\n    async addAccounts(n = 1) {\n        return new Promise((resolve, reject) => {\n            this.unlock()\n                .then((_) => {\n                const from = this.unlockedAccount;\n                const to = from + n;\n                for (let i = from; i < to; i++) {\n                    const address = __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_addressFromIndex).call(this, pathBase, i);\n                    if (!this.accounts.includes(address)) {\n                        this.accounts = [...this.accounts, address];\n                    }\n                    this.page = 0;\n                }\n                resolve(this.accounts);\n            })\n                .catch((e) => {\n                reject(e);\n            });\n        });\n    }\n    async getFirstPage() {\n        this.page = 0;\n        return __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_getPage).call(this, 1);\n    }\n    async getNextPage() {\n        return __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_getPage).call(this, 1);\n    }\n    async getPreviousPage() {\n        return __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_getPage).call(this, -1);\n    }\n    async getAccounts() {\n        return Promise.resolve(this.accounts.slice());\n    }\n    removeAccount(address) {\n        if (!this.accounts.map((a) => a.toLowerCase()).includes(address.toLowerCase())) {\n            throw new Error(`Address ${address} not found in this keyring`);\n        }\n        this.accounts = this.accounts.filter((a) => a.toLowerCase() !== address.toLowerCase());\n    }\n    /**\n     * Signs a transaction using Trezor.\n     *\n     * Accepts either an ethereumjs-tx or @ethereumjs/tx transaction, and returns\n     * the same type.\n     *\n     * @param address - Hex string address.\n     * @param tx - Instance of either new-style or old-style ethereumjs transaction.\n     * @returns The signed transaction, an instance of either new-style or old-style\n     * ethereumjs transaction.\n     */\n    async signTransaction(address, tx) {\n        if (isOldStyleEthereumjsTx(tx)) {\n            // In this version of ethereumjs-tx we must add the chainId in hex format\n            // to the initial v value. The chainId must be included in the serialized\n            // transaction which is only communicated to ethereumjs-tx in this\n            // value. In newer versions the chainId is communicated via the 'Common'\n            // object.\n            return __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_signTransaction).call(this, address, \n            // @types/ethereumjs-tx and old ethereumjs-tx versions document\n            // this function return value as Buffer, but the actual\n            // Transaction._chainId will always be a number.\n            // See https://github.com/ethereumjs/ethereumjs-tx/blob/v1.3.7/index.js#L126\n            tx.getChainId(), tx, (payload) => {\n                tx.v = Buffer.from(payload.v, 'hex');\n                tx.r = Buffer.from(payload.r, 'hex');\n                tx.s = Buffer.from(payload.s, 'hex');\n                return tx;\n            });\n        }\n        return __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_signTransaction).call(this, address, Number(tx.common.chainId()), tx, (payload) => {\n            // Because tx will be immutable, first get a plain javascript object that\n            // represents the transaction. Using txData here as it aligns with the\n            // nomenclature of ethereumjs/tx.\n            const txData = tx.toJSON();\n            // The fromTxData utility expects a type to support transactions with a type other than 0\n            txData.type = tx.type;\n            // The fromTxData utility expects v,r and s to be hex prefixed\n            txData.v = ethUtil.addHexPrefix(payload.v);\n            txData.r = ethUtil.addHexPrefix(payload.r);\n            txData.s = ethUtil.addHexPrefix(payload.s);\n            // Adopt the 'common' option from the original transaction and set the\n            // returned object to be frozen if the original is frozen.\n            return tx_1.TransactionFactory.fromTxData(txData, {\n                common: tx.common,\n                freeze: Object.isFrozen(tx),\n            });\n        });\n    }\n    async signMessage(withAccount, data) {\n        return this.signPersonalMessage(withAccount, data);\n    }\n    // For personal_sign, we need to prefix the message:\n    async signPersonalMessage(withAccount, message) {\n        return new Promise((resolve, reject) => {\n            this.unlock()\n                .then((status) => {\n                setTimeout(() => {\n                    this.bridge\n                        .ethereumSignMessage({\n                        path: __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_pathFromAddress).call(this, withAccount),\n                        message: ethUtil.stripHexPrefix(message),\n                        hex: true,\n                    })\n                        .then((response) => {\n                        var _a;\n                        if (response.success) {\n                            if (response.payload.address !==\n                                ethUtil.toChecksumAddress(withAccount)) {\n                                reject(new Error('signature doesnt match the right address'));\n                            }\n                            const signature = `0x${response.payload.signature}`;\n                            resolve(signature);\n                        }\n                        else {\n                            reject(new Error(((_a = response.payload) === null || _a === void 0 ? void 0 : _a.error) || 'Unknown error'));\n                        }\n                    })\n                        .catch((e) => {\n                        reject(new Error((e === null || e === void 0 ? void 0 : e.toString()) || 'Unknown error'));\n                    });\n                    // This is necessary to avoid popup collision\n                    // between the unlock & sign trezor popups\n                }, status === 'just unlocked' ? DELAY_BETWEEN_POPUPS : 0);\n            })\n                .catch((e) => {\n                reject(new Error((e === null || e === void 0 ? void 0 : e.toString()) || 'Unknown error'));\n            });\n        });\n    }\n    /**\n     * EIP-712 Sign Typed Data\n     */\n    async signTypedData(address, data, { version }) {\n        var _a, _b;\n        const dataWithHashes = (0, connect_plugin_ethereum_1.transformTypedData)(data, version === 'V4');\n        // set default values for signTypedData\n        // Trezor is stricter than @metamask/eth-sig-util in what it accepts\n        const { types, message = {}, domain = {}, primaryType, \n        // snake_case since Trezor uses Protobuf naming conventions here\n        domain_separator_hash, // eslint-disable-line camelcase\n        message_hash, // eslint-disable-line camelcase\n         } = dataWithHashes;\n        // This is necessary to avoid popup collision\n        // between the unlock & sign trezor popups\n        const status = await this.unlock();\n        await wait(status === 'just unlocked' ? DELAY_BETWEEN_POPUPS : 0);\n        const response = await this.bridge.ethereumSignTypedData({\n            path: __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_pathFromAddress).call(this, address),\n            data: {\n                types: Object.assign(Object.assign({}, types), { EIP712Domain: (_a = types.EIP712Domain) !== null && _a !== void 0 ? _a : [] }),\n                message,\n                domain,\n                primaryType,\n            },\n            metamask_v4_compat: true,\n            // Trezor 1 only supports blindly signing hashes\n            domain_separator_hash,\n            message_hash: message_hash !== null && message_hash !== void 0 ? message_hash : '', // eslint-disable-line camelcase\n        });\n        if (response.success) {\n            if (ethUtil.toChecksumAddress(address) !== response.payload.address) {\n                throw new Error('signature doesnt match the right address');\n            }\n            return response.payload.signature;\n        }\n        throw new Error(((_b = response.payload) === null || _b === void 0 ? void 0 : _b.error) || 'Unknown error');\n    }\n    async exportAccount() {\n        return Promise.reject(new Error('Not supported on this device'));\n    }\n    forgetDevice() {\n        this.accounts = [];\n        this.hdk = new hdkey_1.default();\n        this.page = 0;\n        this.unlockedAccount = 0;\n        this.paths = {};\n    }\n    /**\n     * Set the HD path to be used by the keyring. Only known supported HD paths are allowed.\n     *\n     * If the given HD path is already the current HD path, nothing happens. Otherwise the new HD\n     * path is set, and the wallet state is completely reset.\n     *\n     * @throws {Error] Throws if the HD path is not supported.\n     *\n     * @param hdPath - The HD path to set.\n     */\n    setHdPath(hdPath) {\n        if (!ALLOWED_HD_PATHS[hdPath]) {\n            throw new Error(`The setHdPath method does not support setting HD Path to ${hdPath}`);\n        }\n        // Reset HDKey if the path changes\n        if (this.hdPath !== hdPath) {\n            this.hdk = new hdkey_1.default();\n            this.accounts = [];\n            this.page = 0;\n            this.perPage = 5;\n            this.unlockedAccount = 0;\n            this.paths = {};\n        }\n        this.hdPath = hdPath;\n    }\n}\nexports.TrezorKeyring = TrezorKeyring;\n_TrezorKeyring_instances = new WeakSet(), _TrezorKeyring_getPage = async function _TrezorKeyring_getPage(increment) {\n    this.page += increment;\n    if (this.page <= 0) {\n        this.page = 1;\n    }\n    return new Promise((resolve, reject) => {\n        this.unlock()\n            .then((_) => {\n            const from = (this.page - 1) * this.perPage;\n            const to = from + this.perPage;\n            const accounts = [];\n            for (let i = from; i < to; i++) {\n                const address = __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_addressFromIndex).call(this, pathBase, i);\n                accounts.push({\n                    address,\n                    balance: null,\n                    index: i,\n                });\n                this.paths[ethUtil.toChecksumAddress(address)] = i;\n            }\n            resolve(accounts);\n        })\n            .catch((e) => {\n            reject(e);\n        });\n    });\n}, _TrezorKeyring_signTransaction = \n/**\n *\n * @param address - Hex string address.\n * @param chainId - Chain ID\n * @param tx - Instance of either new-style or old-style ethereumjs transaction.\n * @param handleSigning - Converts signed transaction\n * to the same new-style or old-style ethereumjs-tx.\n * @returns The signed transaction, an instance of either new-style or old-style\n * ethereumjs transaction.\n */\nasync function _TrezorKeyring_signTransaction(address, chainId, tx, handleSigning) {\n    var _a, _b;\n    let transaction;\n    if (isOldStyleEthereumjsTx(tx)) {\n        // legacy transaction from ethereumjs-tx package has no .toJSON() function,\n        // so we need to convert to hex-strings manually manually\n        transaction = {\n            to: __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_normalize).call(this, tx.to),\n            value: __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_normalize).call(this, tx.value),\n            data: __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_normalize).call(this, tx.data),\n            chainId,\n            nonce: __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_normalize).call(this, tx.nonce),\n            gasLimit: __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_normalize).call(this, tx.gasLimit),\n            gasPrice: __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_normalize).call(this, tx.gasPrice),\n        };\n    }\n    else {\n        // new-style transaction from @ethereumjs/tx package\n        // we can just copy tx.toJSON() for everything except chainId, which must be a number\n        transaction = Object.assign(Object.assign({}, tx.toJSON()), { chainId, to: __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_normalize).call(this, ethUtil.toBuffer(tx.to)) });\n    }\n    try {\n        const status = await this.unlock();\n        await wait(status === 'just unlocked' ? DELAY_BETWEEN_POPUPS : 0);\n        const response = await this.bridge.ethereumSignTransaction({\n            path: __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_pathFromAddress).call(this, address),\n            transaction,\n        });\n        if (response.success) {\n            const newOrMutatedTx = handleSigning(response.payload);\n            const addressSignedWith = ethUtil.toChecksumAddress(ethUtil.addHexPrefix(newOrMutatedTx.getSenderAddress().toString('hex')));\n            const correctAddress = ethUtil.toChecksumAddress(address);\n            if (addressSignedWith !== correctAddress) {\n                throw new Error(\"signature doesn't match the right address\");\n            }\n            return newOrMutatedTx;\n        }\n        throw new Error(((_a = response.payload) === null || _a === void 0 ? void 0 : _a.error) || 'Unknown error');\n    }\n    catch (e) {\n        throw new Error((_b = e === null || e === void 0 ? void 0 : e.toString()) !== null && _b !== void 0 ? _b : 'Unknown error');\n    }\n}, _TrezorKeyring_normalize = function _TrezorKeyring_normalize(buf) {\n    return ethUtil.bufferToHex(buf).toString();\n}, _TrezorKeyring_addressFromIndex = function _TrezorKeyring_addressFromIndex(basePath, i) {\n    const dkey = this.hdk.derive(`${basePath}/${i}`);\n    const address = ethUtil\n        .publicToAddress(dkey.publicKey, true)\n        .toString('hex');\n    return ethUtil.toChecksumAddress(`0x${address}`);\n}, _TrezorKeyring_pathFromAddress = function _TrezorKeyring_pathFromAddress(address) {\n    const checksummedAddress = ethUtil.toChecksumAddress(address);\n    let index = this.paths[checksummedAddress];\n    if (typeof index === 'undefined') {\n        for (let i = 0; i < MAX_INDEX; i++) {\n            if (checksummedAddress === __classPrivateFieldGet(this, _TrezorKeyring_instances, \"m\", _TrezorKeyring_addressFromIndex).call(this, pathBase, i)) {\n                index = i;\n                break;\n            }\n        }\n    }\n    if (typeof index === 'undefined') {\n        throw new Error('Unknown address');\n    }\n    return `${this.hdPath}/${index}`;\n};\nTrezorKeyring.type = keyringType;\n//# sourceMappingURL=trezor-keyring.js.map","/*\n\nThis migration ensures previous installations\nget a `firstTimeInfo` key on the metamask state,\nso that we can version notices in the future.\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 20;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  if ('metamask' in newState && !('firstTimeInfo' in newState.metamask)) {\n    newState.metamask.firstTimeInfo = {\n      version: '3.12.0',\n      date: Date.now(),\n    };\n  }\n  return newState;\n}\n","/*\n\nThis migration removes the BlackListController from disk state\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 21;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  delete newState.BlacklistController;\n  delete newState.RecentBlocks;\n  return newState;\n}\n","/*\n\nThis migration adds submittedTime to the txMeta if it is not their\n\n*/\n\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport { cloneDeep } from 'lodash';\n\nconst version = 22;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = newState.TransactionController;\n\n    newState.TransactionController.transactions = transactions.map((txMeta) => {\n      if (\n        txMeta.status !== TransactionStatus.submitted ||\n        txMeta.submittedTime\n      ) {\n        return txMeta;\n      }\n      txMeta.submittedTime = new Date().getTime();\n      return txMeta;\n    });\n  }\n  return newState;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/createStreamMiddleware.ts\nvar _safeeventemitter = require('@metamask/safe-event-emitter'); var _safeeventemitter2 = _interopRequireDefault(_safeeventemitter);\n\n\nvar _utils = require('@metamask/utils');\nvar _readablestream = require('readable-stream');\nfunction createStreamMiddleware(options = {}) {\n  const idMap = {};\n  const stream = new (0, _readablestream.Duplex)({\n    objectMode: true,\n    read: () => void 0,\n    write: processMessage\n  });\n  const events = new (0, _safeeventemitter2.default)();\n  const middleware = (req, res, next, end) => {\n    idMap[req.id] = { req, res, next, end };\n    sendToStream(req);\n  };\n  return { events, middleware, stream };\n  function sendToStream(req) {\n    stream.push(req);\n  }\n  function processMessage(res, _encoding, streamWriteCallback) {\n    let errorObj = null;\n    try {\n      const isNotification = !_utils.hasProperty.call(void 0, res, \"id\");\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      errorObj = _err;\n    }\n    streamWriteCallback(errorObj);\n  }\n  function processResponse(res) {\n    const { id: responseId } = res;\n    if (responseId === null) {\n      return;\n    }\n    const context = idMap[responseId];\n    if (!context) {\n      console.warn(`StreamMiddleware - Unknown response id \"${responseId}\"`);\n      return;\n    }\n    delete idMap[responseId];\n    Object.assign(context.res, res);\n    setTimeout(context.end);\n  }\n  function processNotification(notif) {\n    if (options?.retryOnMessage && notif.method === options.retryOnMessage) {\n      retryStuckRequests();\n    }\n    events.emit(\"notification\", notif);\n  }\n  function retryStuckRequests() {\n    Object.values(idMap).forEach(({ req, retryCount = 0 }) => {\n      if (!req.id) {\n        return;\n      }\n      if (retryCount >= 3) {\n        throw new Error(\n          `StreamMiddleware - Retry limit exceeded for request id \"${req.id}\"`\n        );\n      }\n      const idMapObject = idMap[req.id];\n      if (idMapObject) {\n        idMapObject.retryCount = retryCount + 1;\n      }\n      sendToStream(req);\n    });\n  }\n}\n\n\n\nexports.createStreamMiddleware = createStreamMiddleware;\n//# sourceMappingURL=chunk-CUV6EOT3.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/createEngineStream.ts\nvar _readablestream = require('readable-stream');\nfunction createEngineStream(opts) {\n  if (!opts?.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n  const { engine } = opts;\n  const stream = new (0, _readablestream.Duplex)({ objectMode: true, read: () => void 0, write });\n  if (engine.on) {\n    engine.on(\"notification\", (message) => {\n      stream.push(message);\n    });\n  }\n  return stream;\n  function write(req, _encoding, streamWriteCallback) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    streamWriteCallback();\n  }\n}\n\n\n\nexports.createEngineStream = createEngineStream;\n//# sourceMappingURL=chunk-IDTAZSDC.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkIDTAZSDCjs = require('./chunk-IDTAZSDC.js');\n\n\nvar _chunkCUV6EOT3js = require('./chunk-CUV6EOT3.js');\n\n\n\nexports.createEngineStream = _chunkIDTAZSDCjs.createEngineStream; exports.createStreamMiddleware = _chunkCUV6EOT3js.createStreamMiddleware;\n//# sourceMappingURL=index.js.map","/*\n\nThis migration removes transactions that are no longer usefull down to 40 total\n\n*/\n\nimport { cloneDeep } from 'lodash';\nimport { TransactionStatus } from '@metamask/transaction-controller';\n\nconst version = 23;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = newState.TransactionController;\n\n    if (transactions.length <= 40) {\n      return newState;\n    }\n\n    const reverseTxList = transactions.reverse();\n    let stripping = true;\n    while (reverseTxList.length > 40 && stripping) {\n      const txIndex = reverseTxList.findIndex((txMeta) => {\n        return (\n          txMeta.status === TransactionStatus.failed ||\n          txMeta.status === TransactionStatus.rejected ||\n          txMeta.status === TransactionStatus.confirmed ||\n          txMeta.status === TransactionStatus.dropped\n        );\n      });\n      if (txIndex < 0) {\n        stripping = false;\n      } else {\n        reverseTxList.splice(txIndex, 1);\n      }\n    }\n\n    newState.TransactionController.transactions = reverseTxList.reverse();\n  }\n  return newState;\n}\n","/*\n\nThis migration ensures that the from address in txParams is to lower case for\nall unapproved transactions\n\n*/\n\nimport { cloneDeep } from 'lodash';\nimport { TransactionStatus } from '@metamask/transaction-controller';\n\nconst version = 24;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  if (!newState.TransactionController) {\n    return newState;\n  }\n  const { transactions } = newState.TransactionController;\n  newState.TransactionController.transactions = transactions.map(\n    (txMeta, _) => {\n      if (\n        txMeta.status === TransactionStatus.unapproved &&\n        txMeta.txParams &&\n        txMeta.txParams.from\n      ) {\n        txMeta.txParams.from = txMeta.txParams.from.toLowerCase();\n      }\n      return txMeta;\n    },\n  );\n  return newState;\n}\n","// next version number\n/*\n\nnormalizes txParams on unconfirmed txs\n\n*/\nimport { cloneDeep } from 'lodash';\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport { addHexPrefix } from '../lib/util';\n\nconst version = 25;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n\n  if (newState.TransactionController) {\n    if (newState.TransactionController.transactions) {\n      const { transactions } = newState.TransactionController;\n      newState.TransactionController.transactions = transactions.map(\n        (txMeta) => {\n          if (txMeta.status !== TransactionStatus.unapproved) {\n            return txMeta;\n          }\n          txMeta.txParams = normalizeTxParams(txMeta.txParams);\n          return txMeta;\n        },\n      );\n    }\n  }\n\n  return newState;\n}\n\nfunction normalizeTxParams(txParams) {\n  // functions that handle normalizing of that key in txParams\n  const whiteList = {\n    from: (from) => addHexPrefix(from).toLowerCase(),\n    to: () => addHexPrefix(txParams.to).toLowerCase(),\n    nonce: (nonce) => addHexPrefix(nonce),\n    value: (value) => addHexPrefix(value),\n    data: (data) => addHexPrefix(data),\n    gas: (gas) => addHexPrefix(gas),\n    gasPrice: (gasPrice) => addHexPrefix(gasPrice),\n  };\n\n  // apply only keys in the whiteList\n  const normalizedTxParams = {};\n  Object.keys(whiteList).forEach((key) => {\n    if (txParams[key]) {\n      normalizedTxParams[key] = whiteList[key](txParams[key]);\n    }\n  });\n\n  return normalizedTxParams;\n}\n","/*\n\nThis migration moves the identities stored in the KeyringController\n into the PreferencesController\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 26;\n\nexport default {\n  version,\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      versionedData.data = transformState(state);\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n      return Promise.reject(err);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  if (!state.KeyringController || !state.PreferencesController) {\n    return state;\n  }\n\n  if (!state.KeyringController.walletNicknames) {\n    return state;\n  }\n\n  state.PreferencesController.identities = Object.keys(\n    state.KeyringController.walletNicknames,\n  ).reduce((identities, address) => {\n    identities[address] = {\n      name: state.KeyringController.walletNicknames[address],\n      address,\n    };\n    return identities;\n  }, {});\n  delete state.KeyringController.walletNicknames;\n  return state;\n}\n","// next version number\n/*\n\nnormalizes txParams on unconfirmed txs\n\n*/\nimport { cloneDeep } from 'lodash';\nimport { TransactionStatus } from '@metamask/transaction-controller';\n\nconst version = 27;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n\n  if (newState.TransactionController) {\n    if (newState.TransactionController.transactions) {\n      const { transactions } = newState.TransactionController;\n      newState.TransactionController.transactions = transactions.filter(\n        (txMeta) => txMeta.status !== TransactionStatus.rejected,\n      );\n    }\n  }\n\n  return newState;\n}\n","// next version number\n/*\n\nnormalizes txParams on unconfirmed txs\n\n*/\nimport { cloneDeep } from 'lodash';\n\nconst version = 28;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n\n  if (newState.PreferencesController) {\n    if (\n      newState.PreferencesController.tokens &&\n      newState.PreferencesController.identities\n    ) {\n      const { identities, tokens } = newState.PreferencesController;\n      newState.PreferencesController.accountTokens = {};\n      Object.keys(identities).forEach((identity) => {\n        newState.PreferencesController.accountTokens[identity] = {\n          mainnet: tokens,\n        };\n      });\n      newState.PreferencesController.tokens = [];\n    }\n  }\n\n  return newState;\n}\n","// next version number\nimport { TransactionStatus } from '@metamask/transaction-controller';\nimport failTxsThat from './fail-tx';\n\nconst version = 29;\n\n// time\nconst seconds = 1000;\nconst minutes = 60 * seconds;\nconst hours = 60 * minutes;\nconst unacceptableDelay = 12 * hours;\n\n/*\n\nnormalizes txParams on unconfirmed txs\n\n*/\n\nexport default {\n  version,\n\n  migrate: failTxsThat(\n    version,\n    'Stuck in approved state for too long.',\n    (txMeta) => {\n      const isApproved = txMeta.status === TransactionStatus.approved;\n      const createdTime = txMeta.submittedTime;\n      const now = Date.now();\n      return isApproved && now - createdTime > unacceptableDelay;\n    },\n  ),\n};\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/logTypes/LogType.ts\nvar LogType = /* @__PURE__ */ ((LogType2) => {\n  LogType2[\"GenericLog\"] = \"GenericLog\";\n  LogType2[\"EthSignLog\"] = \"EthSignLog\";\n  return LogType2;\n})(LogType || {});\n\n\n\nexports.LogType = LogType;\n//# sourceMappingURL=chunk-B6ES7RHK.js.map","import EventEmitter from 'events';\nimport log from 'loglevel';\nimport {\n  AbstractMessage,\n  AbstractMessageManager,\n  AbstractMessageParams,\n  AbstractMessageParamsMetamask,\n  MessageManagerState,\n  OriginalRequest,\n  DecryptMessageManager,\n  DecryptMessageParams,\n  DecryptMessageParamsMetamask,\n} from '@metamask/message-manager';\nimport {\n  BaseController,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport {\n  AcceptRequest,\n  AddApprovalRequest,\n  RejectRequest,\n} from '@metamask/approval-controller';\nimport { ApprovalType, ORIGIN_METAMASK } from '@metamask/controller-utils';\nimport { Patch } from 'immer';\nimport type { KeyringControllerDecryptMessageAction } from '@metamask/keyring-controller';\nimport { Eip1024EncryptedData, hasProperty, isObject } from '@metamask/utils';\nimport { MetaMetricsEventCategory } from '../../../shared/constants/metametrics';\nimport { stripHexPrefix } from '../../../shared/modules/hexstring-utils';\n\nconst controllerName = 'DecryptMessageController';\n\nconst stateMetadata = {\n  unapprovedDecryptMsgs: { persist: false, anonymous: false },\n  unapprovedDecryptMsgCount: { persist: false, anonymous: false },\n};\n\n/**\n * Type guard that checks for the presence of the required properties\n * for EIP-1024 encrypted data.\n *\n * See: https://eips.ethereum.org/EIPS/eip-1024\n *\n * @param message - The message to check.\n * @param message.from - The sender of the message.\n * @param message.data - The EIP-1024 encrypted data.\n * @returns Whether the message is an EIP-1024 encrypted message.\n */\nexport const isEIP1024EncryptedMessage = (message: {\n  from: string;\n  data: unknown;\n}): message is {\n  from: string;\n  data: Eip1024EncryptedData;\n} => {\n  if (\n    isObject(message.data) &&\n    hasProperty(message.data, 'version') &&\n    hasProperty(message.data, 'nonce') &&\n    hasProperty(message.data, 'ephemPublicKey') &&\n    hasProperty(message.data, 'ciphertext')\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const getDefaultState = () => ({\n  unapprovedDecryptMsgs: {},\n  unapprovedDecryptMsgCount: 0,\n});\n\nexport type CoreMessage = AbstractMessage & {\n  messageParams: AbstractMessageParams;\n};\n\nexport type StateMessage = Required<\n  Omit<\n    AbstractMessage,\n    'securityAlertResponse' | 'securityProviderResponse' | 'metadata' | 'error'\n  >\n>;\n\nexport type DecryptMessageControllerState = {\n  unapprovedDecryptMsgs: Record<string, StateMessage>;\n  unapprovedDecryptMsgCount: number;\n};\n\nexport type GetDecryptMessageState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => DecryptMessageControllerState;\n};\n\nexport type DecryptMessageStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [DecryptMessageControllerState, Patch[]];\n};\n\nexport type DecryptMessageControllerActions = GetDecryptMessageState;\n\nexport type DecryptMessageControllerEvents = DecryptMessageStateChange;\n\ntype AllowedActions =\n  | AddApprovalRequest\n  | AcceptRequest\n  | RejectRequest\n  | KeyringControllerDecryptMessageAction;\n\nexport type DecryptMessageControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  DecryptMessageControllerActions | AllowedActions,\n  DecryptMessageControllerEvents,\n  AllowedActions['type'],\n  never\n>;\n\nexport type DecryptMessageControllerOptions = {\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getState: () => any;\n  messenger: DecryptMessageControllerMessenger;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  metricsEvent: (payload: any, options?: any) => void;\n};\n\n/**\n * Controller for decrypt signing requests requiring user approval.\n */\nexport default class DecryptMessageController extends BaseController<\n  typeof controllerName,\n  DecryptMessageControllerState,\n  DecryptMessageControllerMessenger\n> {\n  hub: EventEmitter;\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _getState: () => any;\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _metricsEvent: (payload: any, options?: any) => void;\n\n  private _decryptMessageManager: DecryptMessageManager;\n\n  /**\n   * Construct a DecryptMessage controller.\n   *\n   * @param options - The controller options.\n   * @param options.getState - Callback to retrieve all user state.\n   * @param options.messenger - A reference to the messaging system.\n   * @param options.metricsEvent - A function for emitting a metric event.\n   */\n  constructor({\n    getState,\n    metricsEvent,\n    messenger,\n  }: DecryptMessageControllerOptions) {\n    super({\n      metadata: stateMetadata,\n      messenger,\n      name: controllerName,\n      state: getDefaultState(),\n    });\n    this._getState = getState;\n    this._metricsEvent = metricsEvent;\n\n    this.hub = new EventEmitter();\n\n    this._decryptMessageManager = new DecryptMessageManager(\n      undefined,\n      undefined,\n      undefined,\n      ['decrypted'],\n    );\n\n    this._decryptMessageManager.hub.on('updateBadge', () => {\n      this.hub.emit('updateBadge');\n    });\n\n    this._decryptMessageManager.hub.on(\n      'unapprovedMessage',\n      (messageParams: AbstractMessageParamsMetamask) => {\n        this._requestApproval(messageParams);\n      },\n    );\n\n    this._subscribeToMessageState(\n      this._decryptMessageManager,\n      (state, newMessages, messageCount) => {\n        state.unapprovedDecryptMsgs = newMessages;\n        state.unapprovedDecryptMsgCount = messageCount;\n      },\n    );\n  }\n\n  /**\n   * A getter for the number of 'unapproved' Messages in the DecryptMessageManager.\n   *\n   * @returns The number of 'unapproved' Messages in the DecryptMessageManager.\n   */\n  get unapprovedDecryptMsgCount(): number {\n    return this._decryptMessageManager.getUnapprovedMessagesCount();\n  }\n\n  /**\n   * Reset the controller state to the initial state.\n   */\n  resetState() {\n    this.update(() => getDefaultState());\n  }\n\n  /**\n   * Clears all unapproved messages from memory.\n   */\n  clearUnapproved() {\n    this._decryptMessageManager.update({\n      unapprovedMessages: {},\n      unapprovedMessagesCount: 0,\n    });\n  }\n\n  /**\n   * Called when a dapp uses the eth_decrypt method\n   *\n   * @param messageParams - The params passed to eth_decrypt.\n   * @param req - The original request, containing the origin.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async newRequestDecryptMessage(\n    messageParams: DecryptMessageParams,\n    req: OriginalRequest,\n  ): Promise<string> {\n    return this._decryptMessageManager.addUnapprovedMessageAsync(\n      messageParams,\n      req,\n    );\n  }\n\n  /**\n   * Signifies a user's approval to decrypt a message in queue.\n   * Triggers decrypt, and the callback function from newUnsignedDecryptMessage.\n   *\n   * @param messageParams - The params of the message to decrypt & return to the Dapp.\n   * @returns A full state update.\n   */\n  async decryptMessage(messageParams: DecryptMessageParamsMetamask) {\n    const messageId = messageParams.metamaskId as string;\n    try {\n      const cleanMessageParams =\n        await this._decryptMessageManager.approveMessage(messageParams);\n\n      cleanMessageParams.data = this._parseMessageData(cleanMessageParams.data);\n      if (!isEIP1024EncryptedMessage(cleanMessageParams)) {\n        throw new Error('Invalid encrypted data.');\n      }\n\n      const rawMessage = await this.messagingSystem.call(\n        'KeyringController:decryptMessage',\n        cleanMessageParams,\n      );\n\n      this._decryptMessageManager.setMessageStatusAndResult(\n        messageId,\n        rawMessage,\n        'decrypted',\n      );\n      this._acceptApproval(messageId);\n    } catch (error) {\n      log.info('MetaMaskController - eth_decrypt failed.', error);\n      this._cancelAbstractMessage(this._decryptMessageManager, messageId);\n      throw error;\n    }\n    return this._getState();\n  }\n\n  /**\n   * Only decrypt message and don't touch transaction state\n   *\n   * @param messageParams - The params of the message to decrypt.\n   * @returns A full state update.\n   */\n  async decryptMessageInline(messageParams: DecryptMessageParamsMetamask) {\n    const messageId = messageParams.metamaskId as string;\n    messageParams.data = this._parseMessageData(messageParams.data);\n    if (!isEIP1024EncryptedMessage(messageParams)) {\n      throw new Error('Invalid encrypted data.');\n    }\n    const rawMessage = await this.messagingSystem.call(\n      'KeyringController:decryptMessage',\n      messageParams,\n    );\n\n    this._decryptMessageManager.setResult(messageId, rawMessage);\n\n    return this._getState();\n  }\n\n  /**\n   * Used to cancel a eth_decrypt type message.\n   *\n   * @param messageId - The ID of the message to cancel.\n   * @returns A full state update.\n   */\n  cancelDecryptMessage(messageId: string) {\n    this._decryptMessageManager.rejectMessage(messageId);\n    this._rejectApproval(messageId);\n    return this._getState();\n  }\n\n  /**\n   * Reject all unapproved messages of any type.\n   *\n   * @param reason - A message to indicate why.\n   */\n  rejectUnapproved(reason?: string) {\n    Object.keys(this._decryptMessageManager.getUnapprovedMessages()).forEach(\n      (messageId) => {\n        this._cancelAbstractMessage(\n          this._decryptMessageManager,\n          messageId,\n          reason,\n        );\n      },\n    );\n  }\n\n  private _acceptApproval(messageId: string) {\n    this.messagingSystem.call('ApprovalController:acceptRequest', messageId);\n  }\n\n  private _cancelAbstractMessage(\n    messageManager: AbstractMessageManager<\n      AbstractMessage,\n      AbstractMessageParams,\n      AbstractMessageParamsMetamask\n    >,\n    messageId: string,\n    reason?: string,\n  ) {\n    if (reason) {\n      this._metricsEvent({\n        event: reason,\n        category: MetaMetricsEventCategory.Messages,\n        properties: {\n          action: 'Decrypt Message Request',\n        },\n      });\n    }\n\n    messageManager.rejectMessage(messageId);\n    this._rejectApproval(messageId);\n\n    return this._getState();\n  }\n\n  private _subscribeToMessageState(\n    messageManager: AbstractMessageManager<\n      AbstractMessage,\n      AbstractMessageParams,\n      AbstractMessageParamsMetamask\n    >,\n    updateState: (\n      state: DecryptMessageControllerState,\n      newMessages: Record<string, StateMessage>,\n      messageCount: number,\n    ) => void,\n  ) {\n    messageManager.subscribe((state: MessageManagerState<AbstractMessage>) => {\n      const newMessages = this._migrateMessages(\n        // TODO: Replace `any` with type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        state.unapprovedMessages as any,\n      );\n      this.update((draftState) => {\n        updateState(draftState, newMessages, state.unapprovedMessagesCount);\n      });\n    });\n  }\n\n  private _migrateMessages(\n    coreMessages: Record<string, CoreMessage>,\n  ): Record<string, StateMessage> {\n    const stateMessages: Record<string, StateMessage> = {};\n\n    for (const messageId of Object.keys(coreMessages)) {\n      const coreMessage = coreMessages[messageId];\n      const stateMessage = this._migrateMessage(coreMessage);\n      stateMessages[messageId] = stateMessage;\n    }\n\n    return stateMessages;\n  }\n\n  private _migrateMessage(coreMessage: CoreMessage): StateMessage {\n    const { messageParams, ...coreMessageData } = coreMessage;\n\n    const stateMessage = {\n      ...coreMessageData,\n      rawSig: coreMessage.rawSig as string,\n      msgParams: messageParams,\n      origin: messageParams.origin,\n    };\n\n    return stateMessage;\n  }\n\n  private _requestApproval(messageParams: AbstractMessageParamsMetamask) {\n    const id = messageParams.metamaskId as string;\n    const origin = messageParams.origin || ORIGIN_METAMASK;\n    try {\n      this.messagingSystem.call(\n        'ApprovalController:addRequest',\n        {\n          id,\n          origin,\n          type: ApprovalType.EthDecrypt,\n        },\n        true,\n      );\n    } catch (error) {\n      log.info('Error adding request to approval controller', error);\n    }\n  }\n\n  private _parseMessageData(data: string) {\n    const stripped = stripHexPrefix(data);\n    const buff = Buffer.from(stripped, 'hex');\n    return JSON.parse(buff.toString('utf8'));\n  }\n\n  private _rejectApproval(messageId: string) {\n    try {\n      this.messagingSystem.call(\n        'ApprovalController:rejectRequest',\n        messageId,\n        'Cancel',\n      );\n    } catch (error) {\n      log.info('Error rejecting request to approval controller', error);\n    }\n  }\n}\n","// next version number\n/*\n\nremoves invalid chaids from preferences and networkController for custom rpcs\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 30;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  if (state.PreferencesController) {\n    const { frequentRpcListDetail } = newState.PreferencesController;\n    if (frequentRpcListDetail) {\n      frequentRpcListDetail.forEach((rpc, index) => {\n        // eslint-disable-next-line radix\n        if (Boolean(rpc.chainId) && Number.isNaN(parseInt(rpc.chainId))) {\n          delete frequentRpcListDetail[index].chainId;\n        }\n      });\n      newState.PreferencesController.frequentRpcListDetail =\n        frequentRpcListDetail;\n    }\n  }\n  if (state.NetworkController) {\n    if (\n      newState.NetworkController.network &&\n      // eslint-disable-next-line radix\n      Number.isNaN(parseInt(newState.NetworkController.network))\n    ) {\n      delete newState.NetworkController.network;\n    }\n\n    if (\n      newState.NetworkController.provider &&\n      newState.NetworkController.provider.chainId &&\n      // eslint-disable-next-line radix\n      Number.isNaN(parseInt(newState.NetworkController.provider.chainId))\n    ) {\n      delete newState.NetworkController.provider.chainId;\n    }\n  }\n\n  return newState;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/logTypes/EthSignLog.ts\nvar SigningMethod = /* @__PURE__ */ ((SigningMethod2) => {\n  SigningMethod2[\"PersonalSign\"] = \"personal_sign\";\n  SigningMethod2[\"EthSignTypedData\"] = \"eth_signTypedData\";\n  SigningMethod2[\"EthSignTypedDataV3\"] = \"eth_signTypedData_v3\";\n  SigningMethod2[\"EthSignTypedDataV4\"] = \"eth_signTypedData_v4\";\n  return SigningMethod2;\n})(SigningMethod || {});\nvar SigningStage = /* @__PURE__ */ ((SigningStage2) => {\n  SigningStage2[\"Proposed\"] = \"proposed\";\n  SigningStage2[\"Rejected\"] = \"rejected\";\n  SigningStage2[\"Signed\"] = \"signed\";\n  return SigningStage2;\n})(SigningStage || {});\n\n\n\n\nexports.SigningMethod = SigningMethod; exports.SigningStage = SigningStage;\n//# sourceMappingURL=chunk-OL334B2K.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\nvar _chunkUJIPPGP6js = require('./chunk-UJIPPGP6.js');\n\n// src/LoggingController.ts\nvar _basecontroller = require('@metamask/base-controller');\nvar _uuid = require('uuid');\nvar name = \"LoggingController\";\nvar metadata = {\n  logs: { persist: true, anonymous: false }\n};\nvar defaultState = {\n  logs: {}\n};\nvar _generateId, generateId_fn;\nvar LoggingController = class extends _basecontroller.BaseController {\n  /**\n   * Creates a LoggingController instance.\n   *\n   * @param options - Constructor options\n   * @param options.messenger - An instance of the ControllerMessenger\n   * @param options.state - Initial state to set on this controller.\n   */\n  constructor({\n    messenger,\n    state\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: {\n        ...defaultState,\n        ...state\n      }\n    });\n    /**\n     * Method to generate a randomId and ensures no collision with existing ids.\n     *\n     * We may want to end up using a hashing mechanism to make ids deterministic\n     * by the *data* passed in, and then make each key an array of logs that\n     * match that id.\n     *\n     * @returns unique id\n     */\n    _chunkUJIPPGP6js.__privateAdd.call(void 0, this, _generateId);\n    this.messagingSystem.registerActionHandler(\n      `${name}:add`,\n      (log) => this.add(log)\n    );\n  }\n  /**\n   * Add log to the state.\n   *\n   * @param log - Log to add to the controller\n   */\n  add(log) {\n    const newLog = {\n      id: _chunkUJIPPGP6js.__privateMethod.call(void 0, this, _generateId, generateId_fn).call(this),\n      timestamp: Date.now(),\n      log\n    };\n    this.update((state) => {\n      state.logs[newLog.id] = newLog;\n    });\n  }\n  /**\n   * Removes all log entries.\n   */\n  clear() {\n    this.update((state) => {\n      state.logs = {};\n    });\n  }\n};\n_generateId = new WeakSet();\ngenerateId_fn = function() {\n  let id = _uuid.v1.call(void 0, );\n  while (id in this.state.logs) {\n    id = _uuid.v1.call(void 0, );\n  }\n  return id;\n};\n\n\n\nexports.LoggingController = LoggingController;\n//# sourceMappingURL=chunk-PUAQGX73.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\nexports.__privateAdd = __privateAdd; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-UJIPPGP6.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkPUAQGX73js = require('./chunk-PUAQGX73.js');\nrequire('./chunk-PMCRFQY3.js');\n\n\n\nvar _chunkOL334B2Kjs = require('./chunk-OL334B2K.js');\nrequire('./chunk-JUURNM6C.js');\n\n\nvar _chunkB6ES7RHKjs = require('./chunk-B6ES7RHK.js');\nrequire('./chunk-UJIPPGP6.js');\n\n\n\n\n\nexports.LogType = _chunkB6ES7RHKjs.LogType; exports.LoggingController = _chunkPUAQGX73js.LoggingController; exports.SigningMethod = _chunkOL334B2Kjs.SigningMethod; exports.SigningStage = _chunkOL334B2Kjs.SigningStage;\n//# sourceMappingURL=index.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunk4R6XDQI5js = require('./chunk-4R6XDQI5.js');\n\n\n\nvar _chunkE3LTYZLZjs = require('./chunk-E3LTYZLZ.js');\n\n// src/PersonalMessageManager.ts\nvar _controllerutils = require('@metamask/controller-utils');\nvar PersonalMessageManager = class extends _chunk4R6XDQI5js.AbstractMessageManager {\n  constructor() {\n    super(...arguments);\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"PersonalMessageManager\";\n  }\n  /**\n   * Creates a new Message with an 'unapproved' status using the passed messageParams.\n   * this.addMessage is called to add the new Message to this.messages, and to save the\n   * unapproved Messages.\n   *\n   * @param messageParams - The params for the personal_sign call to be made after the message\n   * is approved.\n   * @param req - The original request object possibly containing the origin.\n   * @returns The id of the newly created message.\n   */\n  async addUnapprovedMessage(messageParams, req) {\n    _chunkE3LTYZLZjs.validateSignMessageData.call(void 0, messageParams);\n    const ethereumSignInData = _controllerutils.detectSIWE.call(void 0, messageParams);\n    const updatedMessageParams = this.addRequestToMessageParams(\n      messageParams,\n      req\n    );\n    updatedMessageParams.data = _chunkE3LTYZLZjs.normalizeMessageData.call(void 0, messageParams.data);\n    updatedMessageParams.siwe = ethereumSignInData;\n    const messageData = this.createUnapprovedMessage(\n      updatedMessageParams,\n      _controllerutils.ApprovalType.PersonalSign,\n      req\n    );\n    const messageId = messageData.id;\n    await this.addMessage(messageData);\n    this.hub.emit(`unapprovedMessage`, {\n      ...updatedMessageParams,\n      metamaskId: messageId\n    });\n    return messageId;\n  }\n  /**\n   * Removes the metamaskId property from passed messageParams and returns a promise which\n   * resolves the updated messageParams.\n   *\n   * @param messageParams - The messageParams to modify.\n   * @returns Promise resolving to the messageParams with the metamaskId property removed.\n   */\n  prepMessageForSigning(messageParams) {\n    const { metamaskId: _metamaskId, ...messageParamsWithoutId } = messageParams;\n    return Promise.resolve(messageParamsWithoutId);\n  }\n};\nvar PersonalMessageManager_default = PersonalMessageManager;\n\n\n\n\nexports.PersonalMessageManager = PersonalMessageManager; exports.PersonalMessageManager_default = PersonalMessageManager_default;\n//# sourceMappingURL=chunk-4JJ4OG3I.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/AbstractMessageManager.ts\nvar _basecontroller = require('@metamask/base-controller');\nvar _events = require('events');\nvar _uuid = require('uuid');\nvar AbstractMessageManager = class extends _basecontroller.BaseControllerV1 {\n  /**\n   * Creates an AbstractMessageManager instance.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   * @param securityProviderRequest - A function for verifying a message, whether it is malicious or not.\n   * @param additionalFinishStatuses - Optional list of statuses that are accepted to emit a finished event.\n   * @param getCurrentChainId - Optional function to get the current chainId.\n   */\n  constructor(config, state, securityProviderRequest, additionalFinishStatuses, getCurrentChainId) {\n    super(config, state);\n    /**\n     * EventEmitter instance used to listen to specific message events\n     */\n    this.hub = new (0, _events.EventEmitter)();\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"AbstractMessageManager\";\n    this.defaultState = {\n      unapprovedMessages: {},\n      unapprovedMessagesCount: 0\n    };\n    this.messages = [];\n    this.securityProviderRequest = securityProviderRequest;\n    this.additionalFinishStatuses = additionalFinishStatuses ?? [];\n    this.getCurrentChainId = getCurrentChainId;\n    this.initialize();\n  }\n  /**\n   * Adds request props to the messsage params and returns a new messageParams object.\n   * @param messageParams - The messageParams to add the request props to.\n   * @param req - The original request object.\n   * @returns The messageParams with the request props added.\n   */\n  addRequestToMessageParams(messageParams, req) {\n    const updatedMessageParams = {\n      ...messageParams\n    };\n    if (req) {\n      updatedMessageParams.requestId = req.id;\n      updatedMessageParams.origin = req.origin;\n    }\n    return updatedMessageParams;\n  }\n  /**\n   * Creates a new Message with a random id and an 'unapproved' status.\n   * @param messageParams - The messageParams to add the request props to.\n   * @param type - The approval type of the message.\n   * @param req - The original request object.\n   * @returns The new unapproved message for a specified type.\n   */\n  createUnapprovedMessage(messageParams, type, req) {\n    const messageId = _uuid.v1.call(void 0, );\n    return {\n      id: messageId,\n      messageParams,\n      securityAlertResponse: req?.securityAlertResponse,\n      status: \"unapproved\",\n      time: Date.now(),\n      type\n    };\n  }\n  /**\n   * Saves the unapproved messages, and their count to state.\n   *\n   * @param emitUpdateBadge - Whether to emit the updateBadge event.\n   */\n  saveMessageList(emitUpdateBadge = true) {\n    const unapprovedMessages = this.getUnapprovedMessages();\n    const unapprovedMessagesCount = this.getUnapprovedMessagesCount();\n    this.update({ unapprovedMessages, unapprovedMessagesCount });\n    if (emitUpdateBadge) {\n      this.hub.emit(\"updateBadge\");\n    }\n  }\n  /**\n   * Updates the status of a Message in this.messages.\n   *\n   * @param messageId - The id of the Message to update.\n   * @param status - The new status of the Message.\n   */\n  setMessageStatus(messageId, status) {\n    const message = this.getMessage(messageId);\n    if (!message) {\n      throw new Error(`${this.name}: Message not found for id: ${messageId}.`);\n    }\n    message.status = status;\n    this.updateMessage(message);\n    this.hub.emit(`${messageId}:${status}`, message);\n    if (status === \"rejected\" || status === \"signed\" || status === \"errored\" || this.additionalFinishStatuses.includes(status)) {\n      this.hub.emit(`${messageId}:finished`, message);\n    }\n  }\n  /**\n   * Sets a Message in this.messages to the passed Message if the ids are equal.\n   * Then saves the unapprovedMessage list to storage.\n   *\n   * @param message - A Message that will replace an existing Message (with the id) in this.messages.\n   * @param emitUpdateBadge - Whether to emit the updateBadge event.\n   */\n  updateMessage(message, emitUpdateBadge = true) {\n    const index = this.messages.findIndex((msg) => message.id === msg.id);\n    if (index !== -1) {\n      this.messages[index] = message;\n    }\n    this.saveMessageList(emitUpdateBadge);\n  }\n  /**\n   * Verifies a message is malicious or not by checking it against a security provider.\n   *\n   * @param message - The message to verify.\n   * @returns A promise that resolves to a secured message with additional security provider response data.\n   */\n  async securityCheck(message) {\n    if (this.securityProviderRequest) {\n      const securityProviderResponse = await this.securityProviderRequest(\n        message,\n        message.type\n      );\n      return {\n        ...message,\n        securityProviderResponse\n      };\n    }\n    return message;\n  }\n  /**\n   * A getter for the number of 'unapproved' Messages in this.messages.\n   *\n   * @returns The number of 'unapproved' Messages in this.messages.\n   */\n  getUnapprovedMessagesCount() {\n    return Object.keys(this.getUnapprovedMessages()).length;\n  }\n  /**\n   * A getter for the 'unapproved' Messages in state messages.\n   *\n   * @returns An index of Message ids to Messages, for all 'unapproved' Messages in this.messages.\n   */\n  getUnapprovedMessages() {\n    return this.messages.filter((message) => message.status === \"unapproved\").reduce((result, message) => {\n      result[message.id] = message;\n      return result;\n    }, {});\n  }\n  /**\n   * Adds a passed Message to this.messages, and calls this.saveMessageList() to save\n   * the unapproved Messages from that list to this.messages.\n   *\n   * @param message - The Message to add to this.messages.\n   */\n  async addMessage(message) {\n    const securedMessage = await this.securityCheck(message);\n    this.messages.push(securedMessage);\n    this.saveMessageList();\n  }\n  /**\n   * Returns a specified Message.\n   *\n   * @param messageId - The id of the Message to get.\n   * @returns The Message with the id that matches the passed messageId, or undefined\n   * if no Message has that id.\n   */\n  getMessage(messageId) {\n    return this.messages.find((message) => message.id === messageId);\n  }\n  /**\n   * Returns all the messages.\n   *\n   * @returns An array of messages.\n   */\n  getAllMessages() {\n    return this.messages;\n  }\n  /**\n   * Approves a Message. Sets the message status via a call to this.setMessageStatusApproved,\n   * and returns a promise with any the message params modified for proper signing.\n   *\n   * @param messageParams - The messageParams to be used when signing method is called,\n   * plus data added by MetaMask.\n   * @returns Promise resolving to the messageParams with the metamaskId property removed.\n   */\n  approveMessage(messageParams) {\n    this.setMessageStatusApproved(messageParams.metamaskId);\n    return this.prepMessageForSigning(messageParams);\n  }\n  /**\n   * Sets a Message status to 'approved' via a call to this.setMessageStatus.\n   *\n   * @param messageId - The id of the Message to approve.\n   */\n  setMessageStatusApproved(messageId) {\n    this.setMessageStatus(messageId, \"approved\");\n  }\n  /**\n   * Sets message status to inProgress in order to allow users to use extension\n   * while waiting for a custodian signature.\n   *\n   * @param messageId - The id of the message to set to inProgress\n   */\n  setMessageStatusInProgress(messageId) {\n    this.setMessageStatus(messageId, \"inProgress\");\n  }\n  /**\n   * Sets a Message status to 'signed' via a call to this.setMessageStatus and updates\n   * that Message in this.messages by adding the raw signature data of the signature\n   * request to the Message.\n   *\n   * @param messageId - The id of the Message to sign.\n   * @param rawSig - The raw data of the signature request.\n   */\n  setMessageStatusSigned(messageId, rawSig) {\n    this.setMessageStatusAndResult(messageId, rawSig, \"signed\");\n  }\n  /**\n   * Sets the message via a call to this.setResult and updates status of the message.\n   *\n   * @param messageId - The id of the Message to sign.\n   * @param rawSig - The data to update rawSig in the message.\n   * @param status - The new message status.\n   */\n  setMessageStatusAndResult(messageId, rawSig, status) {\n    this.setResult(messageId, rawSig);\n    this.setMessageStatus(messageId, status);\n  }\n  /**\n   * Sets the message result.\n   *\n   * @param messageId - The id of the Message to sign.\n   * @param result - The data to update result in the message.\n   */\n  setResult(messageId, result) {\n    const message = this.getMessage(messageId);\n    if (!message) {\n      return;\n    }\n    message.rawSig = result;\n    this.updateMessage(message, false);\n  }\n  /**\n   * Sets the messsage metadata\n   *\n   * @param messageId - The id of the Message to update\n   * @param metadata - The data with which to replace the metadata property in the message\n   */\n  setMetadata(messageId, metadata) {\n    const message = this.getMessage(messageId);\n    if (!message) {\n      throw new Error(`${this.name}: Message not found for id: ${messageId}.`);\n    }\n    message.metadata = metadata;\n    this.updateMessage(message, false);\n  }\n  /**\n   * Sets a Message status to 'rejected' via a call to this.setMessageStatus.\n   *\n   * @param messageId - The id of the Message to reject.\n   */\n  rejectMessage(messageId) {\n    this.setMessageStatus(messageId, \"rejected\");\n  }\n  /**\n   * Creates a promise which will resolve or reject when the message process is finished.\n   *\n   * @param messageParamsWithId - The params for the personal_sign call to be made after the message is approved.\n   * @param messageName - The name of the message\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async waitForFinishStatus(messageParamsWithId, messageName) {\n    const { metamaskId: messageId, ...messageParams } = messageParamsWithId;\n    return new Promise((resolve, reject) => {\n      this.hub.once(`${messageId}:finished`, (data) => {\n        switch (data.status) {\n          case \"signed\":\n            return resolve(data.rawSig);\n          case \"rejected\":\n            return reject(\n              new Error(\n                `MetaMask ${messageName} Signature: User denied message signature.`\n              )\n            );\n          case \"errored\":\n            return reject(\n              // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n              // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n              new Error(`MetaMask ${messageName} Signature: ${data.error}`)\n            );\n          default:\n            return reject(\n              new Error(\n                `MetaMask ${messageName} Signature: Unknown problem: ${JSON.stringify(\n                  messageParams\n                )}`\n              )\n            );\n        }\n      });\n    });\n  }\n};\nvar AbstractMessageManager_default = AbstractMessageManager;\n\n\n\n\nexports.AbstractMessageManager = AbstractMessageManager; exports.AbstractMessageManager_default = AbstractMessageManager_default;\n//# sourceMappingURL=chunk-4R6XDQI5.js.map","// next version number\nimport { cloneDeep } from 'lodash';\n\nconst version = 31;\n\n/*\n * The purpose of this migration is to properly set the completedOnboarding flag based on the state\n * of the KeyringController.\n */\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { KeyringController, PreferencesController } = state;\n\n  if (KeyringController && PreferencesController) {\n    const { vault } = KeyringController;\n    PreferencesController.completedOnboarding = Boolean(vault);\n  }\n\n  return state;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/utils.ts\nvar _controllerutils = require('@metamask/controller-utils');\n\n\n\nvar _ethsigutil = require('@metamask/eth-sig-util');\nvar _utils = require('@metamask/utils');\nvar _jsonschema = require('jsonschema');\nvar hexRe = /^[0-9A-Fa-f]+$/gu;\nfunction validateAddress(address, propertyName) {\n  if (!address || typeof address !== \"string\" || !_controllerutils.isValidHexAddress.call(void 0, address)) {\n    throw new Error(\n      `Invalid \"${propertyName}\" address: ${address} must be a valid string.`\n    );\n  }\n}\nfunction normalizeMessageData(data) {\n  try {\n    const stripped = _utils.remove0x.call(void 0, data);\n    if (stripped.match(hexRe)) {\n      return _utils.add0x.call(void 0, stripped);\n    }\n  } catch (e) {\n  }\n  return _utils.bytesToHex.call(void 0, Buffer.from(data, \"utf8\"));\n}\nfunction validateSignMessageData(messageData) {\n  const { from, data } = messageData;\n  validateAddress(from, \"from\");\n  if (!data || typeof data !== \"string\") {\n    throw new Error(`Invalid message \"data\": ${data} must be a valid string.`);\n  }\n}\nfunction validateTypedSignMessageDataV1(messageData) {\n  validateAddress(messageData.from, \"from\");\n  if (!messageData.data || !Array.isArray(messageData.data)) {\n    throw new Error(\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      `Invalid message \"data\": ${messageData.data} must be a valid array.`\n    );\n  }\n  try {\n    _ethsigutil.typedSignatureHash.call(void 0, messageData.data);\n  } catch (e) {\n    throw new Error(`Expected EIP712 typed data.`);\n  }\n}\nfunction validateTypedSignMessageDataV3V4(messageData, currentChainId) {\n  validateAddress(messageData.from, \"from\");\n  if (!messageData.data || Array.isArray(messageData.data) || typeof messageData.data !== \"object\" && typeof messageData.data !== \"string\") {\n    throw new Error(\n      `Invalid message \"data\": Must be a valid string or object.`\n    );\n  }\n  let data;\n  if (typeof messageData.data === \"object\") {\n    data = messageData.data;\n  } else {\n    try {\n      data = JSON.parse(messageData.data);\n    } catch (e) {\n      throw new Error(\"Data must be passed as a valid JSON string.\");\n    }\n  }\n  const validation = _jsonschema.validate.call(void 0, data, _ethsigutil.TYPED_MESSAGE_SCHEMA);\n  if (validation.errors.length > 0) {\n    throw new Error(\n      \"Data must conform to EIP-712 schema. See https://git.io/fNtcx.\"\n    );\n  }\n  if (!currentChainId) {\n    throw new Error(\"Current chainId cannot be null or undefined.\");\n  }\n  let { chainId } = data.domain;\n  if (chainId) {\n    if (typeof chainId === \"string\") {\n      chainId = parseInt(chainId, chainId.startsWith(\"0x\") ? 16 : 10);\n    }\n    const activeChainId = parseInt(currentChainId, 16);\n    if (Number.isNaN(activeChainId)) {\n      throw new Error(\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        `Cannot sign messages for chainId \"${chainId}\", because MetaMask is switching networks.`\n      );\n    }\n    if (chainId !== activeChainId) {\n      throw new Error(\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`\n      );\n    }\n  }\n}\nfunction validateEncryptionPublicKeyMessageData(messageData) {\n  const { from } = messageData;\n  validateAddress(from, \"from\");\n}\nfunction validateDecryptedMessageData(messageData) {\n  const { from } = messageData;\n  validateAddress(from, \"from\");\n}\n\n\n\n\n\n\n\n\nexports.normalizeMessageData = normalizeMessageData; exports.validateSignMessageData = validateSignMessageData; exports.validateTypedSignMessageDataV1 = validateTypedSignMessageDataV1; exports.validateTypedSignMessageDataV3V4 = validateTypedSignMessageDataV3V4; exports.validateEncryptionPublicKeyMessageData = validateEncryptionPublicKeyMessageData; exports.validateDecryptedMessageData = validateDecryptedMessageData;\n//# sourceMappingURL=chunk-E3LTYZLZ.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunk4R6XDQI5js = require('./chunk-4R6XDQI5.js');\n\n\n\nvar _chunkE3LTYZLZjs = require('./chunk-E3LTYZLZ.js');\n\n// src/TypedMessageManager.ts\nvar _controllerutils = require('@metamask/controller-utils');\nvar TypedMessageManager = class extends _chunk4R6XDQI5js.AbstractMessageManager {\n  constructor() {\n    super(...arguments);\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"TypedMessageManager\";\n  }\n  /**\n   * Creates a new TypedMessage with an 'unapproved' status using the passed messageParams.\n   * this.addMessage is called to add the new TypedMessage to this.messages, and to save the\n   * unapproved TypedMessages.\n   *\n   * @param messageParams - The params for the 'eth_signTypedData' call to be made after the message\n   * is approved.\n   * @param req - The original request object possibly containing the origin.\n   * @param version - Compatibility version EIP712.\n   * @returns The id of the newly created TypedMessage.\n   */\n  async addUnapprovedMessage(messageParams, req, version) {\n    if (version === \"V1\") {\n      _chunkE3LTYZLZjs.validateTypedSignMessageDataV1.call(void 0, messageParams);\n    }\n    if (version === \"V3\" || version === \"V4\") {\n      const currentChainId = this.getCurrentChainId?.();\n      _chunkE3LTYZLZjs.validateTypedSignMessageDataV3V4.call(void 0, messageParams, currentChainId);\n    }\n    if (typeof messageParams.data !== \"string\" && (version === \"V3\" || version === \"V4\")) {\n      messageParams.data = JSON.stringify(messageParams.data);\n    }\n    const updatedMessageParams = this.addRequestToMessageParams(\n      messageParams,\n      req\n    );\n    const messageData = this.createUnapprovedMessage(\n      updatedMessageParams,\n      _controllerutils.ApprovalType.EthSignTypedData,\n      req\n    );\n    const messageId = messageData.id;\n    await this.addMessage(messageData);\n    this.hub.emit(`unapprovedMessage`, {\n      ...messageParams,\n      metamaskId: messageId,\n      version\n    });\n    return messageId;\n  }\n  /**\n   * Sets a TypedMessage status to 'errored' via a call to this.setMessageStatus.\n   *\n   * @param messageId - The id of the TypedMessage to error.\n   * @param error - The error to be included in TypedMessage.\n   */\n  setMessageStatusErrored(messageId, error) {\n    const message = this.getMessage(messageId);\n    if (!message) {\n      return;\n    }\n    message.error = error;\n    this.updateMessage(message);\n    this.setMessageStatus(messageId, \"errored\");\n  }\n  /**\n   * Removes the metamaskId and version properties from passed messageParams and returns a promise which\n   * resolves the updated messageParams.\n   *\n   * @param messageParams - The messageParams to modify.\n   * @returns Promise resolving to the messageParams with the metamaskId and version properties removed.\n   */\n  prepMessageForSigning(messageParams) {\n    const {\n      metamaskId: _metamaskId,\n      version: _version,\n      ...messageParamsWithoutId\n    } = messageParams;\n    return Promise.resolve(messageParamsWithoutId);\n  }\n};\nvar TypedMessageManager_default = TypedMessageManager;\n\n\n\n\nexports.TypedMessageManager = TypedMessageManager; exports.TypedMessageManager_default = TypedMessageManager_default;\n//# sourceMappingURL=chunk-OPSXL77K.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunk4R6XDQI5js = require('./chunk-4R6XDQI5.js');\n\n\nvar _chunkE3LTYZLZjs = require('./chunk-E3LTYZLZ.js');\n\n// src/EncryptionPublicKeyManager.ts\nvar _controllerutils = require('@metamask/controller-utils');\nvar EncryptionPublicKeyManager = class extends _chunk4R6XDQI5js.AbstractMessageManager {\n  constructor() {\n    super(...arguments);\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"EncryptionPublicKeyManager\";\n  }\n  /**\n   * Creates a new Message with an 'unapproved' status using the passed messageParams.\n   * this.addMessage is called to add the new Message to this.messages, and to save the unapproved Messages.\n   *\n   * @param messageParams - The params for the eth_getEncryptionPublicKey call to be made after the message is approved.\n   * @param req - The original request object possibly containing the origin.\n   * @returns Promise resolving to the raw data of the request.\n   */\n  async addUnapprovedMessageAsync(messageParams, req) {\n    _chunkE3LTYZLZjs.validateEncryptionPublicKeyMessageData.call(void 0, messageParams);\n    const messageId = await this.addUnapprovedMessage(messageParams, req);\n    return new Promise((resolve, reject) => {\n      this.hub.once(`${messageId}:finished`, (data) => {\n        switch (data.status) {\n          case \"received\":\n            return resolve(data.rawSig);\n          case \"rejected\":\n            return reject(\n              new Error(\n                \"MetaMask EncryptionPublicKey: User denied message EncryptionPublicKey.\"\n              )\n            );\n          default:\n            return reject(\n              new Error(\n                `MetaMask EncryptionPublicKey: Unknown problem: ${JSON.stringify(\n                  messageParams\n                )}`\n              )\n            );\n        }\n      });\n    });\n  }\n  /**\n   * Creates a new Message with an 'unapproved' status using the passed messageParams.\n   * this.addMessage is called to add the new Message to this.messages, and to save the\n   * unapproved Messages.\n   *\n   * @param messageParams - The params for the eth_getEncryptionPublicKey call to be made after the message\n   * is approved.\n   * @param req - The original request object possibly containing the origin.\n   * @returns The id of the newly created message.\n   */\n  async addUnapprovedMessage(messageParams, req) {\n    const updatedMessageParams = this.addRequestToMessageParams(\n      messageParams,\n      req\n    );\n    const messageData = this.createUnapprovedMessage(\n      updatedMessageParams,\n      _controllerutils.ApprovalType.EthGetEncryptionPublicKey,\n      req\n    );\n    const messageId = messageData.id;\n    await this.addMessage(messageData);\n    this.hub.emit(`unapprovedMessage`, {\n      ...updatedMessageParams,\n      metamaskId: messageId\n    });\n    return messageId;\n  }\n  /**\n   * Removes the metamaskId property from passed messageParams and returns a promise which\n   * resolves the updated messageParams.\n   *\n   * @param messageParams - The messageParams to modify.\n   * @returns Promise resolving to the messageParams with the metamaskId property removed.\n   */\n  prepMessageForSigning(messageParams) {\n    delete messageParams.metamaskId;\n    return Promise.resolve({ from: messageParams.data });\n  }\n};\nvar EncryptionPublicKeyManager_default = EncryptionPublicKeyManager;\n\n\n\n\nexports.EncryptionPublicKeyManager = EncryptionPublicKeyManager; exports.EncryptionPublicKeyManager_default = EncryptionPublicKeyManager_default;\n//# sourceMappingURL=chunk-SNLKWYZE.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunk4R6XDQI5js = require('./chunk-4R6XDQI5.js');\n\n\n\nvar _chunkE3LTYZLZjs = require('./chunk-E3LTYZLZ.js');\n\n// src/DecryptMessageManager.ts\nvar _controllerutils = require('@metamask/controller-utils');\nvar DecryptMessageManager = class extends _chunk4R6XDQI5js.AbstractMessageManager {\n  constructor() {\n    super(...arguments);\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"DecryptMessageManager\";\n  }\n  /**\n   * Creates a new Message with an 'unapproved' status using the passed messageParams.\n   * this.addMessage is called to add the new Message to this.messages, and to save the unapproved Messages.\n   *\n   * @param messageParams - The params for the personal_sign call to be made after the message is approved.\n   * @param req - The original request object possibly containing the origin.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async addUnapprovedMessageAsync(messageParams, req) {\n    _chunkE3LTYZLZjs.validateDecryptedMessageData.call(void 0, messageParams);\n    const messageId = await this.addUnapprovedMessage(messageParams, req);\n    return new Promise((resolve, reject) => {\n      this.hub.once(`${messageId}:finished`, (data) => {\n        switch (data.status) {\n          case \"decrypted\":\n            return resolve(data.rawSig);\n          case \"rejected\":\n            return reject(\n              new Error(\n                \"MetaMask DecryptMessage: User denied message decryption.\"\n              )\n            );\n          case \"errored\":\n            return reject(\n              new Error(\n                \"MetaMask DecryptMessage: This message cannot be decrypted.\"\n              )\n            );\n          default:\n            return reject(\n              new Error(\n                `MetaMask DecryptMessage: Unknown problem: ${JSON.stringify(\n                  messageParams\n                )}`\n              )\n            );\n        }\n      });\n    });\n  }\n  /**\n   * Creates a new Message with an 'unapproved' status using the passed messageParams.\n   * this.addMessage is called to add the new Message to this.messages, and to save the\n   * unapproved Messages.\n   *\n   * @param messageParams - The params for the personal_sign call to be made after the message\n   * is approved.\n   * @param req - The original request object possibly containing the origin.\n   * @returns The id of the newly created message.\n   */\n  async addUnapprovedMessage(messageParams, req) {\n    const updatedMessageParams = this.addRequestToMessageParams(\n      messageParams,\n      req\n    );\n    messageParams.data = _chunkE3LTYZLZjs.normalizeMessageData.call(void 0, messageParams.data);\n    const messageData = this.createUnapprovedMessage(\n      updatedMessageParams,\n      _controllerutils.ApprovalType.EthDecrypt,\n      req\n    );\n    const messageId = messageData.id;\n    await this.addMessage(messageData);\n    this.hub.emit(`unapprovedMessage`, {\n      ...updatedMessageParams,\n      metamaskId: messageId\n    });\n    return messageId;\n  }\n  /**\n   * Removes the metamaskId property from passed messageParams and returns a promise which\n   * resolves the updated messageParams.\n   *\n   * @param messageParams - The messageParams to modify.\n   * @returns Promise resolving to the messageParams with the metamaskId property removed.\n   */\n  prepMessageForSigning(messageParams) {\n    delete messageParams.metamaskId;\n    return Promise.resolve(messageParams);\n  }\n};\n\n\n\nexports.DecryptMessageManager = DecryptMessageManager;\n//# sourceMappingURL=chunk-VU4XI5EX.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkVU4XI5EXjs = require('./chunk-VU4XI5EX.js');\n\n\nvar _chunkSNLKWYZEjs = require('./chunk-SNLKWYZE.js');\n\n\nvar _chunk4JJ4OG3Ijs = require('./chunk-4JJ4OG3I.js');\n\n\nvar _chunkOPSXL77Kjs = require('./chunk-OPSXL77K.js');\n\n\nvar _chunk4R6XDQI5js = require('./chunk-4R6XDQI5.js');\nrequire('./chunk-E3LTYZLZ.js');\n\n\n\n\n\n\nexports.AbstractMessageManager = _chunk4R6XDQI5js.AbstractMessageManager; exports.DecryptMessageManager = _chunkVU4XI5EXjs.DecryptMessageManager; exports.EncryptionPublicKeyManager = _chunkSNLKWYZEjs.EncryptionPublicKeyManager; exports.PersonalMessageManager = _chunk4JJ4OG3Ijs.PersonalMessageManager; exports.TypedMessageManager = _chunkOPSXL77Kjs.TypedMessageManager;\n//# sourceMappingURL=index.js.map","'use strict';\n\nvar helpers = require('./helpers');\n\n/** @type ValidatorResult */\nvar ValidatorResult = helpers.ValidatorResult;\n/** @type SchemaError */\nvar SchemaError = helpers.SchemaError;\n\nvar attribute = {};\n\nattribute.ignoreProperties = {\n  // informative properties\n  'id': true,\n  'default': true,\n  'description': true,\n  'title': true,\n  // arguments to other properties\n  'exclusiveMinimum': true,\n  'exclusiveMaximum': true,\n  'additionalItems': true,\n  // special-handled properties\n  '$schema': true,\n  '$ref': true,\n  'extends': true\n};\n\n/**\n * @name validators\n */\nvar validators = attribute.validators = {};\n\n/**\n * Validates whether the instance if of a certain type\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */\nvalidators.type = function validateType (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var types = Array.isArray(schema.type) ? schema.type : [schema.type];\n  if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {\n    var list = types.map(function (v) {\n      return v.id && ('<' + v.id + '>') || (v+'');\n    });\n    result.addError({\n      name: 'type',\n      argument: list,\n      message: \"is not of a type(s) \" + list,\n    });\n  }\n  return result;\n};\n\nfunction testSchemaNoThrow(instance, options, ctx, callback, schema){\n  var throwError = options.throwError;\n  options.throwError = false;\n  var res = this.validateSchema(instance, schema, options, ctx);\n  options.throwError = throwError;\n\n  if (! res.valid && callback instanceof Function) {\n    callback(res);\n  }\n  return res.valid;\n}\n\n/**\n * Validates whether the instance matches some of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {ValidatorResult|null}\n */\nvalidators.anyOf = function validateAnyOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var inner = new ValidatorResult(instance, schema, options, ctx);\n  if (!Array.isArray(schema.anyOf)){\n    throw new SchemaError(\"anyOf must be an array\");\n  }\n  if (!schema.anyOf.some(\n    testSchemaNoThrow.bind(\n      this, instance, options, ctx, function(res){inner.importErrors(res);}\n      ))) {\n    var list = schema.anyOf.map(function (v, i) {\n      return (v.id && ('<' + v.id + '>')) || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n    });\n    if (options.nestedErrors) {\n      result.importErrors(inner);\n    }\n    result.addError({\n      name: 'anyOf',\n      argument: list,\n      message: \"is not any of \" + list.join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance matches every given schema\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.allOf = function validateAllOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema.allOf)){\n    throw new SchemaError(\"allOf must be an array\");\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var self = this;\n  schema.allOf.forEach(function(v, i){\n    var valid = self.validateSchema(instance, v, options, ctx);\n    if(!valid.valid){\n      var msg = (v.id && ('<' + v.id + '>')) || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n      result.addError({\n        name: 'allOf',\n        argument: { id: msg, length: valid.errors.length, valid: valid },\n        message: 'does not match allOf schema ' + msg + ' with ' + valid.errors.length + ' error[s]:',\n      });\n      result.importErrors(valid);\n    }\n  });\n  return result;\n};\n\n/**\n * Validates whether the instance matches exactly one of the given schemas\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null}\n */\nvalidators.oneOf = function validateOneOf (instance, schema, options, ctx) {\n  // Ignore undefined instances\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema.oneOf)){\n    throw new SchemaError(\"oneOf must be an array\");\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var inner = new ValidatorResult(instance, schema, options, ctx);\n  var count = schema.oneOf.filter(\n    testSchemaNoThrow.bind(\n      this, instance, options, ctx, function(res) {inner.importErrors(res);}\n      ) ).length;\n  var list = schema.oneOf.map(function (v, i) {\n    return (v.id && ('<' + v.id + '>')) || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';\n  });\n  if (count!==1) {\n    if (options.nestedErrors) {\n      result.importErrors(inner);\n    }\n    result.addError({\n      name: 'oneOf',\n      argument: list,\n      message: \"is not exactly one from \" + list.join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates properties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.properties = function validateProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var properties = schema.properties || {};\n  for (var property in properties) {\n    if (typeof options.preValidateProperty == 'function') {\n      options.preValidateProperty(instance, property, properties[property], options, ctx);\n    }\n\n    var prop = Object.hasOwnProperty.call(instance, property) ? instance[property] : undefined;\n    var res = this.validateSchema(prop, properties[property], options, ctx.makeChild(properties[property], property));\n    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n    result.importErrors(res);\n  }\n  return result;\n};\n\n/**\n * Test a specific property within in instance against the additionalProperties schema attribute\n * This ignores properties with definitions in the properties schema attribute, but no other attributes.\n * If too many more types of property-existance tests pop up they may need their own class of tests (like `type` has)\n * @private\n * @return {boolean}\n */\nfunction testAdditionalProperty (instance, schema, options, ctx, property, result) {\n  if(!this.types.object(instance)) return;\n  if (schema.properties && schema.properties[property] !== undefined) {\n    return;\n  }\n  if (schema.additionalProperties === false) {\n    result.addError({\n      name: 'additionalProperties',\n      argument: property,\n      message: \"additionalProperty \" + JSON.stringify(property) + \" exists in instance when not allowed\",\n    });\n  } else {\n    var additionalProperties = schema.additionalProperties || {};\n\n    if (typeof options.preValidateProperty == 'function') {\n      options.preValidateProperty(instance, property, additionalProperties, options, ctx);\n    }\n\n    var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));\n    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n    result.importErrors(res);\n  }\n}\n\n/**\n * Validates patternProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.patternProperties = function validatePatternProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var patternProperties = schema.patternProperties || {};\n\n  for (var property in instance) {\n    var test = true;\n    for (var pattern in patternProperties) {\n      var expr = new RegExp(pattern);\n      if (!expr.test(property)) {\n        continue;\n      }\n      test = false;\n\n      if (typeof options.preValidateProperty == 'function') {\n        options.preValidateProperty(instance, property, patternProperties[pattern], options, ctx);\n      }\n\n      var res = this.validateSchema(instance[property], patternProperties[pattern], options, ctx.makeChild(patternProperties[pattern], property));\n      if(res.instance !== result.instance[property]) result.instance[property] = res.instance;\n      result.importErrors(res);\n    }\n    if (test) {\n      testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Validates additionalProperties\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.additionalProperties = function validateAdditionalProperties (instance, schema, options, ctx) {\n  if(!this.types.object(instance)) return;\n  // if patternProperties is defined then we'll test when that one is called instead\n  if (schema.patternProperties) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  for (var property in instance) {\n    testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minProperties = function validateMinProperties (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var keys = Object.keys(instance);\n  if (!(keys.length >= schema.minProperties)) {\n    result.addError({\n      name: 'minProperties',\n      argument: schema.minProperties,\n      message: \"does not meet minimum property length of \" + schema.minProperties,\n    })\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxProperties = function validateMaxProperties (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var keys = Object.keys(instance);\n  if (!(keys.length <= schema.maxProperties)) {\n    result.addError({\n      name: 'maxProperties',\n      argument: schema.maxProperties,\n      message: \"does not meet maximum property length of \" + schema.maxProperties,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates items when instance is an array\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.items = function validateItems (instance, schema, options, ctx) {\n  var self = this;\n  if (!this.types.array(instance)) return;\n  if (!schema.items) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  instance.every(function (value, i) {\n    var items = Array.isArray(schema.items) ? (schema.items[i] || schema.additionalItems) : schema.items;\n    if (items === undefined) {\n      return true;\n    }\n    if (items === false) {\n      result.addError({\n        name: 'items',\n        message: \"additionalItems not permitted\",\n      });\n      return false;\n    }\n    var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));\n    if(res.instance !== result.instance[i]) result.instance[i] = res.instance;\n    result.importErrors(res);\n    return true;\n  });\n  return result;\n};\n\n/**\n * Validates minimum and exclusiveMinimum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minimum = function validateMinimum (instance, schema, options, ctx) {\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var valid = true;\n  if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {\n    valid = instance > schema.minimum;\n  } else {\n    valid = instance >= schema.minimum;\n  }\n  if (!valid) {\n    result.addError({\n      name: 'minimum',\n      argument: schema.minimum,\n      message: \"must have a minimum value of \" + schema.minimum,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates maximum and exclusiveMaximum when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maximum = function validateMaximum (instance, schema, options, ctx) {\n  if (!this.types.number(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var valid;\n  if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {\n    valid = instance < schema.maximum;\n  } else {\n    valid = instance <= schema.maximum;\n  }\n  if (!valid) {\n    result.addError({\n      name: 'maximum',\n      argument: schema.maximum,\n      message: \"must have a maximum value of \" + schema.maximum,\n    });\n  }\n  return result;\n};\n\n/**\n * Perform validation for multipleOf and divisibleBy, which are essentially the same.\n * @param instance\n * @param schema\n * @param validationType\n * @param errorMessage\n * @returns {String|null}\n */\nvar validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy (instance, schema, options, ctx, validationType, errorMessage) {\n  if (!this.types.number(instance)) return;\n\n  var validationArgument = schema[validationType];\n  if (validationArgument == 0) {\n    throw new SchemaError(validationType + \" cannot be zero\");\n  }\n\n  var result = new ValidatorResult(instance, schema, options, ctx);\n\n  var instanceDecimals = helpers.getDecimalPlaces(instance);\n  var divisorDecimals = helpers.getDecimalPlaces(validationArgument);\n\n  var maxDecimals = Math.max(instanceDecimals , divisorDecimals);\n  var multiplier = Math.pow(10, maxDecimals);\n\n  if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {\n    result.addError({\n      name: validationType,\n      argument:  validationArgument,\n      message: errorMessage + JSON.stringify(validationArgument)\n    });\n  }\n\n  return result;\n};\n\n/**\n * Validates divisibleBy when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.multipleOf = function validateMultipleOf (instance, schema, options, ctx) {\n return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"multipleOf\", \"is not a multiple of (divisible by) \");\n};\n\n/**\n * Validates multipleOf when the type of the instance value is a number.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.divisibleBy = function validateDivisibleBy (instance, schema, options, ctx) {\n  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, \"divisibleBy\", \"is not divisible by (multiple of) \");\n};\n\n/**\n * Validates whether the instance value is present.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.required = function validateRequired (instance, schema, options, ctx) {\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (instance === undefined && schema.required === true) {\n    // A boolean form is implemented for reverse-compatability with schemas written against older drafts\n    result.addError({\n      name: 'required',\n      message: \"is required\"\n    });\n  } else if (this.types.object(instance) && Array.isArray(schema.required)) {\n    schema.required.forEach(function(n){\n      if(instance[n]===undefined){\n        result.addError({\n          name: 'required',\n          argument: n,\n          message: \"requires property \" + JSON.stringify(n),\n        });\n      }\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value matches the regular expression, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.pattern = function validatePattern (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!instance.match(schema.pattern)) {\n    result.addError({\n      name: 'pattern',\n      argument: schema.pattern,\n      message: \"does not match pattern \" + JSON.stringify(schema.pattern),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is of a certain defined format or a custom\n * format.\n * The following formats are supported for string types:\n *   - date-time\n *   - date\n *   - time\n *   - ip-address\n *   - ipv6\n *   - uri\n *   - color\n *   - host-name\n *   - alpha\n *   - alpha-numeric\n *   - utc-millisec\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {String|null}\n */\nvalidators.format = function validateFormat (instance, schema, options, ctx) {\n  if (instance===undefined) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {\n    result.addError({\n      name: 'format',\n      argument: schema.format,\n      message: \"does not conform to the \" + JSON.stringify(schema.format) + \" format\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at least of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minLength = function validateMinLength (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n  var length = instance.length - (hsp ? hsp.length : 0);\n  if (!(length >= schema.minLength)) {\n    result.addError({\n      name: 'minLength',\n      argument: schema.minLength,\n      message: \"does not meet minimum length of \" + schema.minLength,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is at most of a certain length, when the instance value is a string.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxLength = function validateMaxLength (instance, schema, options, ctx) {\n  if (!this.types.string(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  // TODO if this was already computed in \"minLength\", use that value instead of re-computing\n  var hsp = instance.match(/[\\uDC00-\\uDFFF]/g);\n  var length = instance.length - (hsp ? hsp.length : 0);\n  if (!(length <= schema.maxLength)) {\n    result.addError({\n      name: 'maxLength',\n      argument: schema.maxLength,\n      message: \"does not meet maximum length of \" + schema.maxLength,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether instance contains at least a minimum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.minItems = function validateMinItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!(instance.length >= schema.minItems)) {\n    result.addError({\n      name: 'minItems',\n      argument: schema.minItems,\n      message: \"does not meet minimum length of \" + schema.minItems,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether instance contains no more than a maximum number of items, when the instance is an Array.\n * @param instance\n * @param schema\n * @return {String|null}\n */\nvalidators.maxItems = function validateMaxItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!(instance.length <= schema.maxItems)) {\n    result.addError({\n      name: 'maxItems',\n      argument: schema.maxItems,\n      message: \"does not meet maximum length of \" + schema.maxItems,\n    });\n  }\n  return result;\n};\n\n/**\n * Validates that every item in an instance array is unique, when instance is an array\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {String|null|ValidatorResult}\n */\nvalidators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  function testArrays (v, i, a) {\n    for (var j = i + 1; j < a.length; j++) if (helpers.deepCompareStrict(v, a[j])) {\n      return false;\n    }\n    return true;\n  }\n  if (!instance.every(testArrays)) {\n    result.addError({\n      name: 'uniqueItems',\n      message: \"contains duplicate item\",\n    });\n  }\n  return result;\n};\n\n/**\n * Deep compares arrays for duplicates\n * @param v\n * @param i\n * @param a\n * @private\n * @return {boolean}\n */\nfunction testArrays (v, i, a) {\n  var j, len = a.length;\n  for (j = i + 1, len; j < len; j++) {\n    if (helpers.deepCompareStrict(v, a[j])) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Validates whether there are no duplicates, when the instance is an Array.\n * @param instance\n * @return {String|null}\n */\nvalidators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {\n  if (!this.types.array(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!instance.every(testArrays)) {\n    result.addError({\n      name: 'uniqueItems',\n      message: \"contains duplicate item\",\n    });\n  }\n  return result;\n};\n\n/**\n * Validate for the presence of dependency properties, if the instance is an object.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */\nvalidators.dependencies = function validateDependencies (instance, schema, options, ctx) {\n  if (!this.types.object(instance)) return;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  for (var property in schema.dependencies) {\n    if (instance[property] === undefined) {\n      continue;\n    }\n    var dep = schema.dependencies[property];\n    var childContext = ctx.makeChild(dep, property);\n    if (typeof dep == 'string') {\n      dep = [dep];\n    }\n    if (Array.isArray(dep)) {\n      dep.forEach(function (prop) {\n        if (instance[prop] === undefined) {\n          result.addError({\n            // FIXME there's two different \"dependencies\" errors here with slightly different outputs\n            // Can we make these the same? Or should we create different error types?\n            name: 'dependencies',\n            argument: childContext.propertyPath,\n            message: \"property \" + prop + \" not found, required by \" + childContext.propertyPath,\n          });\n        }\n      });\n    } else {\n      var res = this.validateSchema(instance, dep, options, childContext);\n      if(result.instance !== res.instance) result.instance = res.instance;\n      if (res && res.errors.length) {\n        result.addError({\n          name: 'dependencies',\n          argument: childContext.propertyPath,\n          message: \"does not meet dependency required by \" + childContext.propertyPath,\n        });\n        result.importErrors(res);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance value is one of the enumerated values.\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */\nvalidators['enum'] = function validateEnum (instance, schema, options, ctx) {\n  if (instance === undefined) {\n    return null;\n  }\n  if (!Array.isArray(schema['enum'])) {\n    throw new SchemaError(\"enum expects an array\", schema);\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!schema['enum'].some(helpers.deepCompareStrict.bind(null, instance))) {\n    result.addError({\n      name: 'enum',\n      argument: schema['enum'],\n      message: \"is not one of enum values: \" + schema['enum'].map(String).join(','),\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance exactly matches a given value\n *\n * @param instance\n * @param schema\n * @return {ValidatorResult|null}\n */\nvalidators['const'] = function validateEnum (instance, schema, options, ctx) {\n  if (instance === undefined) {\n    return null;\n  }\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  if (!helpers.deepCompareStrict(schema['const'], instance)) {\n    result.addError({\n      name: 'const',\n      argument: schema['const'],\n      message: \"does not exactly match expected constant: \" + schema['const'],\n    });\n  }\n  return result;\n};\n\n/**\n * Validates whether the instance if of a prohibited type.\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @return {null|ValidatorResult}\n */\nvalidators.not = validators.disallow = function validateNot (instance, schema, options, ctx) {\n  var self = this;\n  if(instance===undefined) return null;\n  var result = new ValidatorResult(instance, schema, options, ctx);\n  var notTypes = schema.not || schema.disallow;\n  if(!notTypes) return null;\n  if(!Array.isArray(notTypes)) notTypes=[notTypes];\n  notTypes.forEach(function (type) {\n    if (self.testType(instance, schema, options, ctx, type)) {\n      var schemaId = type && type.id && ('<' + type.id + '>') || type;\n      result.addError({\n        name: 'not',\n        argument: schemaId,\n        message: \"is of prohibited type \" + schemaId,\n      });\n    }\n  });\n  return result;\n};\n\nmodule.exports = attribute;\n","'use strict';\n\nvar uri = require('url');\n\nvar ValidationError = exports.ValidationError = function ValidationError (message, instance, schema, propertyPath, name, argument) {\n  if (propertyPath) {\n    this.property = propertyPath;\n  }\n  if (message) {\n    this.message = message;\n  }\n  if (schema) {\n    if (schema.id) {\n      this.schema = schema.id;\n    } else {\n      this.schema = schema;\n    }\n  }\n  if (instance) {\n    this.instance = instance;\n  }\n  this.name = name;\n  this.argument = argument;\n  this.stack = this.toString();\n};\n\nValidationError.prototype.toString = function toString() {\n  return this.property + ' ' + this.message;\n};\n\nvar ValidatorResult = exports.ValidatorResult = function ValidatorResult(instance, schema, options, ctx) {\n  this.instance = instance;\n  this.schema = schema;\n  this.propertyPath = ctx.propertyPath;\n  this.errors = [];\n  this.throwError = options && options.throwError;\n  this.disableFormat = options && options.disableFormat === true;\n};\n\nValidatorResult.prototype.addError = function addError(detail) {\n  var err;\n  if (typeof detail == 'string') {\n    err = new ValidationError(detail, this.instance, this.schema, this.propertyPath);\n  } else {\n    if (!detail) throw new Error('Missing error detail');\n    if (!detail.message) throw new Error('Missing error message');\n    if (!detail.name) throw new Error('Missing validator type');\n    err = new ValidationError(detail.message, this.instance, this.schema, this.propertyPath, detail.name, detail.argument);\n  }\n\n  if (this.throwError) {\n    throw err;\n  }\n  this.errors.push(err);\n  return err;\n};\n\nValidatorResult.prototype.importErrors = function importErrors(res) {\n  if (typeof res == 'string' || (res && res.validatorType)) {\n    this.addError(res);\n  } else if (res && res.errors) {\n    Array.prototype.push.apply(this.errors, res.errors);\n  }\n};\n\nfunction stringizer (v,i){\n  return i+': '+v.toString()+'\\n';\n}\nValidatorResult.prototype.toString = function toString(res) {\n  return this.errors.map(stringizer).join('');\n};\n\nObject.defineProperty(ValidatorResult.prototype, \"valid\", { get: function() {\n  return !this.errors.length;\n} });\n\n/**\n * Describes a problem with a Schema which prevents validation of an instance\n * @name SchemaError\n * @constructor\n */\nvar SchemaError = exports.SchemaError = function SchemaError (msg, schema) {\n  this.message = msg;\n  this.schema = schema;\n  Error.call(this, msg);\n  Error.captureStackTrace(this, SchemaError);\n};\nSchemaError.prototype = Object.create(Error.prototype,\n  { constructor: {value: SchemaError, enumerable: false}\n  , name: {value: 'SchemaError', enumerable: false}\n  });\n\nvar SchemaContext = exports.SchemaContext = function SchemaContext (schema, options, propertyPath, base, schemas) {\n  this.schema = schema;\n  this.options = options;\n  this.propertyPath = propertyPath;\n  this.base = base;\n  this.schemas = schemas;\n};\n\nSchemaContext.prototype.resolve = function resolve (target) {\n  return uri.resolve(this.base, target);\n};\n\nSchemaContext.prototype.makeChild = function makeChild(schema, propertyName){\n  var propertyPath = (propertyName===undefined) ? this.propertyPath : this.propertyPath+makeSuffix(propertyName);\n  var base = uri.resolve(this.base, schema.id||'');\n  var ctx = new SchemaContext(schema, this.options, propertyPath, base, Object.create(this.schemas));\n  if(schema.id && !ctx.schemas[base]){\n    ctx.schemas[base] = schema;\n  }\n  return ctx;\n}\n\nvar FORMAT_REGEXPS = exports.FORMAT_REGEXPS = {\n  'date-time': /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\\.\\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,\n  'date': /^\\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,\n  'time': /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,\n\n  'email': /^(?:[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/,\n  'ip-address': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n  'ipv6': /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n  'uri': /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\\s]*$/,\n\n  'color': /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/,\n\n  // hostname regex from: http://stackoverflow.com/a/1420225/5628\n  'hostname': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n  'host-name': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\\.?$/,\n\n  'alpha': /^[a-zA-Z]+$/,\n  'alphanumeric': /^[a-zA-Z0-9]+$/,\n  'utc-millisec': function (input) {\n    return (typeof input === 'string') && parseFloat(input) === parseInt(input, 10) && !isNaN(input);\n  },\n  'regex': function (input) {\n    var result = true;\n    try {\n      new RegExp(input);\n    } catch (e) {\n      result = false;\n    }\n    return result;\n  },\n  'style': /\\s*(.+?):\\s*([^;]+);?/g,\n  'phone': /^\\+(?:[0-9] ?){6,14}[0-9]$/\n};\n\nFORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;\nFORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS['ip-address'];\n\nexports.isFormat = function isFormat (input, format, validator) {\n  if (typeof input === 'string' && FORMAT_REGEXPS[format] !== undefined) {\n    if (FORMAT_REGEXPS[format] instanceof RegExp) {\n      return FORMAT_REGEXPS[format].test(input);\n    }\n    if (typeof FORMAT_REGEXPS[format] === 'function') {\n      return FORMAT_REGEXPS[format](input);\n    }\n  } else if (validator && validator.customFormats &&\n      typeof validator.customFormats[format] === 'function') {\n    return validator.customFormats[format](input);\n  }\n  return true;\n};\n\nvar makeSuffix = exports.makeSuffix = function makeSuffix (key) {\n  key = key.toString();\n  // This function could be capable of outputting valid a ECMAScript string, but the\n  // resulting code for testing which form to use would be tens of thousands of characters long\n  // That means this will use the name form for some illegal forms\n  if (!key.match(/[.\\s\\[\\]]/) && !key.match(/^[\\d]/)) {\n    return '.' + key;\n  }\n  if (key.match(/^\\d+$/)) {\n    return '[' + key + ']';\n  }\n  return '[' + JSON.stringify(key) + ']';\n};\n\nexports.deepCompareStrict = function deepCompareStrict (a, b) {\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (a instanceof Array) {\n    if (!(b instanceof Array)) {\n      return false;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    return a.every(function (v, i) {\n      return deepCompareStrict(a[i], b[i]);\n    });\n  }\n  if (typeof a === 'object') {\n    if (!a || !b) {\n      return a === b;\n    }\n    var aKeys = Object.keys(a);\n    var bKeys = Object.keys(b);\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n    return aKeys.every(function (v) {\n      return deepCompareStrict(a[v], b[v]);\n    });\n  }\n  return a === b;\n};\n\nfunction deepMerger (target, dst, e, i) {\n  if (typeof e === 'object') {\n    dst[i] = deepMerge(target[i], e)\n  } else {\n    if (target.indexOf(e) === -1) {\n      dst.push(e)\n    }\n  }\n}\n\nfunction copyist (src, dst, key) {\n  dst[key] = src[key];\n}\n\nfunction copyistWithDeepMerge (target, src, dst, key) {\n  if (typeof src[key] !== 'object' || !src[key]) {\n    dst[key] = src[key];\n  }\n  else {\n    if (!target[key]) {\n      dst[key] = src[key];\n    } else {\n      dst[key] = deepMerge(target[key], src[key])\n    }\n  }\n}\n\nfunction deepMerge (target, src) {\n  var array = Array.isArray(src);\n  var dst = array && [] || {};\n\n  if (array) {\n    target = target || [];\n    dst = dst.concat(target);\n    src.forEach(deepMerger.bind(null, target, dst));\n  } else {\n    if (target && typeof target === 'object') {\n      Object.keys(target).forEach(copyist.bind(null, target, dst));\n    }\n    Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));\n  }\n\n  return dst;\n};\n\nmodule.exports.deepMerge = deepMerge;\n\n/**\n * Validates instance against the provided schema\n * Implements URI+JSON Pointer encoding, e.g. \"%7e\"=\"~0\"=>\"~\", \"~1\"=\"%2f\"=>\"/\"\n * @param o\n * @param s The path to walk o along\n * @return any\n */\nexports.objectGetPath = function objectGetPath(o, s) {\n  var parts = s.split('/').slice(1);\n  var k;\n  while (typeof (k=parts.shift()) == 'string') {\n    var n = decodeURIComponent(k.replace(/~0/,'~').replace(/~1/g,'/'));\n    if (!(n in o)) return;\n    o = o[n];\n  }\n  return o;\n};\n\nfunction pathEncoder (v) {\n  return '/'+encodeURIComponent(v).replace(/~/g,'%7E');\n}\n/**\n * Accept an Array of property names and return a JSON Pointer URI fragment\n * @param Array a\n * @return {String}\n */\nexports.encodePath = function encodePointer(a){\n\t// ~ must be encoded explicitly because hacks\n\t// the slash is encoded by encodeURIComponent\n\treturn a.map(pathEncoder).join('');\n};\n\n\n/**\n * Calculate the number of decimal places a number uses\n * We need this to get correct results out of multipleOf and divisibleBy\n * when either figure is has decimal places, due to IEEE-754 float issues.\n * @param number\n * @returns {number}\n */\nexports.getDecimalPlaces = function getDecimalPlaces(number) {\n\n  var decimalPlaces = 0;\n  if (isNaN(number)) return decimalPlaces;\n\n  if (typeof number !== 'number') {\n    number = Number(number);\n  }\n\n  var parts = number.toString().split('e');\n  if (parts.length === 2) {\n    if (parts[1][0] !== '-') {\n      return decimalPlaces;\n    } else {\n      decimalPlaces = Number(parts[1].slice(1));\n    }\n  }\n\n  var decimalParts = parts[0].split('.');\n  if (decimalParts.length === 2) {\n    decimalPlaces += decimalParts[1].length;\n  }\n\n  return decimalPlaces;\n};\n\n","'use strict';\n\nvar Validator = module.exports.Validator = require('./validator');\n\nmodule.exports.ValidatorResult = require('./helpers').ValidatorResult;\nmodule.exports.ValidationError = require('./helpers').ValidationError;\nmodule.exports.SchemaError = require('./helpers').SchemaError;\nmodule.exports.SchemaScanResult = require('./scan').SchemaScanResult;\nmodule.exports.scan = require('./scan').scan;\n\nmodule.exports.validate = function (instance, schema, options) {\n  var v = new Validator();\n  return v.validate(instance, schema, options);\n};\n","\nvar urilib = require('url');\nvar helpers = require('./helpers');\n\nmodule.exports.SchemaScanResult = SchemaScanResult;\nfunction SchemaScanResult(found, ref){\n  this.id = found;\n  this.ref = ref;\n}\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param string uri\n * @param object schema\n * @return {Object}\n */\nmodule.exports.scan = function scan(base, schema){\n  function scanSchema(baseuri, schema){\n    if(!schema || typeof schema!='object') return;\n    // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined\n    if(schema.$ref){\n      var resolvedUri = urilib.resolve(baseuri, schema.$ref);\n      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri]+1 : 0;\n      return;\n    }\n    var ourBase = schema.id ? urilib.resolve(baseuri, schema.id) : baseuri;\n    if (ourBase) {\n      // If there's no fragment, append an empty one\n      if(ourBase.indexOf('#')<0) ourBase += '#';\n      if(found[ourBase]){\n        if(!helpers.deepCompareStrict(found[ourBase], schema)){\n          throw new Error('Schema <'+schema+'> already exists with different definition');\n        }\n        return found[ourBase];\n      }\n      found[ourBase] = schema;\n      // strip trailing fragment\n      if(ourBase[ourBase.length-1]=='#'){\n        found[ourBase.substring(0, ourBase.length-1)] = schema;\n      }\n    }\n    scanArray(ourBase+'/items', ((schema.items instanceof Array)?schema.items:[schema.items]));\n    scanArray(ourBase+'/extends', ((schema.extends instanceof Array)?schema.extends:[schema.extends]));\n    scanSchema(ourBase+'/additionalItems', schema.additionalItems);\n    scanObject(ourBase+'/properties', schema.properties);\n    scanSchema(ourBase+'/additionalProperties', schema.additionalProperties);\n    scanObject(ourBase+'/definitions', schema.definitions);\n    scanObject(ourBase+'/patternProperties', schema.patternProperties);\n    scanObject(ourBase+'/dependencies', schema.dependencies);\n    scanArray(ourBase+'/disallow', schema.disallow);\n    scanArray(ourBase+'/allOf', schema.allOf);\n    scanArray(ourBase+'/anyOf', schema.anyOf);\n    scanArray(ourBase+'/oneOf', schema.oneOf);\n    scanSchema(ourBase+'/not', schema.not);\n  }\n  function scanArray(baseuri, schemas){\n    if(!(schemas instanceof Array)) return;\n    for(var i=0; i<schemas.length; i++){\n      scanSchema(baseuri+'/'+i, schemas[i]);\n    }\n  }\n  function scanObject(baseuri, schemas){\n    if(!schemas || typeof schemas!='object') return;\n    for(var p in schemas){\n      scanSchema(baseuri+'/'+p, schemas[p]);\n    }\n  }\n\n  var found = {};\n  var ref = {};\n  var schemaUri = base;\n  scanSchema(base, schema);\n  return new SchemaScanResult(found, ref);\n}\n","'use strict';\n\nvar urilib = require('url');\n\nvar attribute = require('./attribute');\nvar helpers = require('./helpers');\nvar scanSchema = require('./scan').scan;\nvar ValidatorResult = helpers.ValidatorResult;\nvar SchemaError = helpers.SchemaError;\nvar SchemaContext = helpers.SchemaContext;\n//var anonymousBase = 'vnd.jsonschema:///';\nvar anonymousBase = '/';\n\n/**\n * Creates a new Validator object\n * @name Validator\n * @constructor\n */\nvar Validator = function Validator () {\n  // Allow a validator instance to override global custom formats or to have their\n  // own custom formats.\n  this.customFormats = Object.create(Validator.prototype.customFormats);\n  this.schemas = {};\n  this.unresolvedRefs = [];\n\n  // Use Object.create to make this extensible without Validator instances stepping on each other's toes.\n  this.types = Object.create(types);\n  this.attributes = Object.create(attribute.validators);\n};\n\n// Allow formats to be registered globally.\nValidator.prototype.customFormats = {};\n\n// Hint at the presence of a property\nValidator.prototype.schemas = null;\nValidator.prototype.types = null;\nValidator.prototype.attributes = null;\nValidator.prototype.unresolvedRefs = null;\n\n/**\n * Adds a schema with a certain urn to the Validator instance.\n * @param schema\n * @param urn\n * @return {Object}\n */\nValidator.prototype.addSchema = function addSchema (schema, base) {\n  var self = this;\n  if (!schema) {\n    return null;\n  }\n  var scan = scanSchema(base||anonymousBase, schema);\n  var ourUri = base || schema.id;\n  for(var uri in scan.id){\n    this.schemas[uri] = scan.id[uri];\n  }\n  for(var uri in scan.ref){\n    this.unresolvedRefs.push(uri);\n  }\n  this.unresolvedRefs = this.unresolvedRefs.filter(function(uri){\n    return typeof self.schemas[uri]==='undefined';\n  });\n  return this.schemas[ourUri];\n};\n\nValidator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {\n  if(!(schemas instanceof Array)) return;\n  for(var i=0; i<schemas.length; i++){\n    this.addSubSchema(baseuri, schemas[i]);\n  }\n};\n\nValidator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {\n  if(!schemas || typeof schemas!='object') return;\n  for(var p in schemas){\n    this.addSubSchema(baseuri, schemas[p]);\n  }\n};\n\n\n\n/**\n * Sets all the schemas of the Validator instance.\n * @param schemas\n */\nValidator.prototype.setSchemas = function setSchemas (schemas) {\n  this.schemas = schemas;\n};\n\n/**\n * Returns the schema of a certain urn\n * @param urn\n */\nValidator.prototype.getSchema = function getSchema (urn) {\n  return this.schemas[urn];\n};\n\n/**\n * Validates instance against the provided schema\n * @param instance\n * @param schema\n * @param [options]\n * @param [ctx]\n * @return {Array}\n */\nValidator.prototype.validate = function validate (instance, schema, options, ctx) {\n  if (!options) {\n    options = {};\n  }\n  var propertyName = options.propertyName || 'instance';\n  // This will work so long as the function at uri.resolve() will resolve a relative URI to a relative URI\n  var base = urilib.resolve(options.base||anonymousBase, schema.id||'');\n  if(!ctx){\n    ctx = new SchemaContext(schema, options, propertyName, base, Object.create(this.schemas));\n    if (!ctx.schemas[base]) {\n      ctx.schemas[base] = schema;\n    }\n    var found = scanSchema(base, schema);\n    for(var n in found.id){\n      var sch = found.id[n];\n      ctx.schemas[n] = sch;\n    }\n  }\n  if (schema) {\n    var result = this.validateSchema(instance, schema, options, ctx);\n    if (!result) {\n      throw new Error('Result undefined');\n    }\n    return result;\n  }\n  throw new SchemaError('no schema specified', schema);\n};\n\n/**\n* @param Object schema\n* @return mixed schema uri or false\n*/\nfunction shouldResolve(schema) {\n  var ref = (typeof schema === 'string') ? schema : schema.$ref;\n  if (typeof ref=='string') return ref;\n  return false;\n}\n\n/**\n * Validates an instance against the schema (the actual work horse)\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @private\n * @return {ValidatorResult}\n */\nValidator.prototype.validateSchema = function validateSchema (instance, schema, options, ctx) {\n  var result = new ValidatorResult(instance, schema, options, ctx);\n\n    // Support for the true/false schemas\n  if(typeof schema==='boolean') {\n    if(schema===true){\n      // `true` is always valid\n      schema = {};\n    }else if(schema===false){\n      // `false` is always invalid\n      schema = {type: []};\n    }\n  }else if(!schema){\n    // This might be a string\n    throw new Error(\"schema is undefined\");\n  }\n\n  if (schema['extends']) {\n    if (schema['extends'] instanceof Array) {\n      var schemaobj = {schema: schema, ctx: ctx};\n      schema['extends'].forEach(this.schemaTraverser.bind(this, schemaobj));\n      schema = schemaobj.schema;\n      schemaobj.schema = null;\n      schemaobj.ctx = null;\n      schemaobj = null;\n    } else {\n      schema = helpers.deepMerge(schema, this.superResolve(schema['extends'], ctx));\n    }\n  }\n\n  // If passed a string argument, load that schema URI\n  var switchSchema;\n  if (switchSchema = shouldResolve(schema)) {\n    var resolved = this.resolve(schema, switchSchema, ctx);\n    var subctx = new SchemaContext(resolved.subschema, options, ctx.propertyPath, resolved.switchSchema, ctx.schemas);\n    return this.validateSchema(instance, resolved.subschema, options, subctx);\n  }\n\n  var skipAttributes = options && options.skipAttributes || [];\n  // Validate each schema attribute against the instance\n  for (var key in schema) {\n    if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {\n      var validatorErr = null;\n      var validator = this.attributes[key];\n      if (validator) {\n        validatorErr = validator.call(this, instance, schema, options, ctx);\n      } else if (options.allowUnknownAttributes === false) {\n        // This represents an error with the schema itself, not an invalid instance\n        throw new SchemaError(\"Unsupported attribute: \" + key, schema);\n      }\n      if (validatorErr) {\n        result.importErrors(validatorErr);\n      }\n    }\n  }\n\n  if (typeof options.rewrite == 'function') {\n    var value = options.rewrite.call(this, instance, schema, options, ctx);\n    result.instance = value;\n  }\n  return result;\n};\n\n/**\n* @private\n* @param Object schema\n* @param SchemaContext ctx\n* @returns Object schema or resolved schema\n*/\nValidator.prototype.schemaTraverser = function schemaTraverser (schemaobj, s) {\n  schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));\n}\n\n/**\n* @private\n* @param Object schema\n* @param SchemaContext ctx\n* @returns Object schema or resolved schema\n*/\nValidator.prototype.superResolve = function superResolve (schema, ctx) {\n  var ref;\n  if(ref = shouldResolve(schema)) {\n    return this.resolve(schema, ref, ctx).subschema;\n  }\n  return schema;\n}\n\n/**\n* @private\n* @param Object schema\n* @param Object switchSchema\n* @param SchemaContext ctx\n* @return Object resolved schemas {subschema:String, switchSchema: String}\n* @throws SchemaError\n*/\nValidator.prototype.resolve = function resolve (schema, switchSchema, ctx) {\n  switchSchema = ctx.resolve(switchSchema);\n  // First see if the schema exists under the provided URI\n  if (ctx.schemas[switchSchema]) {\n    return {subschema: ctx.schemas[switchSchema], switchSchema: switchSchema};\n  }\n  // Else try walking the property pointer\n  var parsed = urilib.parse(switchSchema);\n  var fragment = parsed && parsed.hash;\n  var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);\n  if (!document || !ctx.schemas[document]) {\n    throw new SchemaError(\"no such schema <\" + switchSchema + \">\", schema);\n  }\n  var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));\n  if(subschema===undefined){\n    throw new SchemaError(\"no such schema \" + fragment + \" located in <\" + document + \">\", schema);\n  }\n  return {subschema: subschema, switchSchema: switchSchema};\n};\n\n/**\n * Tests whether the instance if of a certain type.\n * @private\n * @param instance\n * @param schema\n * @param options\n * @param ctx\n * @param type\n * @return {boolean}\n */\nValidator.prototype.testType = function validateType (instance, schema, options, ctx, type) {\n  if (typeof this.types[type] == 'function') {\n    return this.types[type].call(this, instance);\n  }\n  if (type && typeof type == 'object') {\n    var res = this.validateSchema(instance, type, options, ctx);\n    return res === undefined || !(res && res.errors.length);\n  }\n  // Undefined or properties not on the list are acceptable, same as not being defined\n  return true;\n};\n\nvar types = Validator.prototype.types = {};\ntypes.string = function testString (instance) {\n  return typeof instance == 'string';\n};\ntypes.number = function testNumber (instance) {\n  // isFinite returns false for NaN, Infinity, and -Infinity\n  return typeof instance == 'number' && isFinite(instance);\n};\ntypes.integer = function testInteger (instance) {\n  return (typeof instance == 'number') && instance % 1 === 0;\n};\ntypes.boolean = function testBoolean (instance) {\n  return typeof instance == 'boolean';\n};\ntypes.array = function testArray (instance) {\n  return Array.isArray(instance);\n};\ntypes['null'] = function testNull (instance) {\n  return instance === null;\n};\ntypes.date = function testDate (instance) {\n  return instance instanceof Date;\n};\ntypes.any = function testAny (instance) {\n  return true;\n};\ntypes.object = function testObject (instance) {\n  // TODO: fix this - see #15\n  return instance && (typeof instance) === 'object' && !(instance instanceof Array) && !(instance instanceof Date);\n};\n\nmodule.exports = Validator;\n","import { cloneDeep } from 'lodash';\n\nconst version = 32;\n\n/**\n * The purpose of this migration is to set the {@code completedUiMigration} flag based on the user's UI preferences\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { PreferencesController } = state;\n\n  if (PreferencesController) {\n    const { betaUI } = PreferencesController.featureFlags || {};\n    // Users who have been using the \"beta\" UI are considered to have completed the migration\n    // as they'll see no difference in this version\n    PreferencesController.completedUiMigration = betaUI;\n  }\n\n  return state;\n}\n","module.exports={\"snapId\":\"npm:@metamask/message-signing-snap\",\"manifest\":{\"version\":\"0.3.3\",\"description\":\"Automatic message signing of MetaMask tagged messages\",\"proposedName\":\"MetaMask Message Signing Snap\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/MetaMask/message-signing-snap.git\"},\"source\":{\"shasum\":\"ol44wik35znt/n3Z7GGyXjh+J0M00yDM7YZOYQegA7I=\",\"location\":{\"npm\":{\"filePath\":\"dist/bundle.js\",\"iconPath\":\"images/icon.svg\",\"packageName\":\"@metamask/message-signing-snap\",\"registry\":\"https://registry.npmjs.org/\"}}},\"initialPermissions\":{\"snap_getEntropy\":{},\"endowment:rpc\":{\"dapps\":true,\"snaps\":false}},\"manifestVersion\":\"0.1\"},\"files\":[{\"path\":\"images/icon.svg\",\"value\":\"<svg width=\\\"500\\\" height=\\\"500\\\" viewBox=\\\"0 0 500 500\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n<rect width=\\\"500\\\" height=\\\"500\\\" fill=\\\"black\\\"/>\\n<g filter=\\\"url(#filter0_f_8_91)\\\">\\n<path d=\\\"M249.444 373.519C249.444 373.519 364.118 343.192 364.118 257.188L378.333 248.251L364.118 239.314L378.333 230.378L364.118 221.441V203.568V185.695V149.948V114.202L301.639 132.596C267.566 142.628 231.323 142.628 197.25 132.596L134.771 114.202V149.948V167.821V185.695V203.568V221.441L120.556 230.378L134.771 239.314L120.556 248.251L134.771 257.188C134.771 343.192 249.444 373.519 249.444 373.519Z\\\" fill=\\\"#F1CA77\\\"/>\\n</g>\\n<path d=\\\"M249.445 406.215C249.445 406.215 364.118 348.879 364.118 262.874L378.333 253.937L364.118 245.001L378.333 236.064L364.118 227.127V209.254V191.381V155.634V119.888L249.445 162.179L134.771 119.888V155.634V173.508V191.381V209.254V227.127L120.556 236.064L134.771 245.001L120.556 253.937L134.771 262.874C134.771 348.879 249.445 406.215 249.445 406.215Z\\\" fill=\\\"#233447\\\"/>\\n<path d=\\\"M249.445 399.107C249.445 399.107 364.118 348.879 364.118 262.874L378.333 253.937L364.118 245.001L378.333 236.064L364.118 227.127V209.254V191.381V155.634V119.888L249.445 162.179L134.771 119.888V155.634V173.508V191.381V209.254V227.127L120.556 236.064L134.771 245.001L120.556 253.937L134.771 262.874C134.771 348.879 249.445 399.107 249.445 399.107Z\\\" fill=\\\"#123AF0\\\"/>\\n<path d=\\\"M249.445 392C249.445 392 364.118 348.879 364.118 262.874L378.333 253.937L364.118 245.001L378.333 236.064L364.118 227.127V209.254V191.381V155.634V119.888L249.445 162.179L134.771 119.888V155.634V173.508V191.381V209.254V227.127L120.556 236.064L134.771 245.001L120.556 253.937L134.771 262.874C134.771 348.879 249.445 392 249.445 392Z\\\" fill=\\\"#CD6116\\\"/>\\n<path d=\\\"M249.445 382.049C249.445 382.049 364.118 348.879 364.118 262.874L378.333 253.937L364.118 245.001L378.333 236.064L364.118 227.127V209.254V191.381V155.634V119.888L249.445 162.179L134.771 119.888V155.634V173.508V191.381V209.254V227.127L120.556 236.064L134.771 245.001L120.556 253.937L134.771 262.874C134.771 348.879 249.445 382.049 249.445 382.049Z\\\" fill=\\\"#E4751F\\\"/>\\n<path d=\\\"M249.445 370.676C249.445 370.676 364.118 348.879 364.118 262.874L378.333 253.937L364.118 245.001L378.333 236.064L364.118 227.127V209.254V191.381V155.634V119.888L249.445 162.179L134.771 119.888V155.634V173.508V191.381V209.254V227.127L120.556 236.064L134.771 245.001L120.556 253.937L134.771 262.874C134.771 348.879 249.445 370.676 249.445 370.676Z\\\" fill=\\\"#F6851B\\\"/>\\n<path d=\\\"M249.445 352.196C249.445 352.196 364.118 348.879 364.118 262.874L378.333 253.937L364.118 245.001L378.333 236.064L364.118 227.127V209.254V191.381V155.634V119.888C290.105 147.184 208.784 147.184 134.771 119.888V155.634V173.508V191.381V209.254V227.127L120.556 236.064L134.771 245.001L120.556 253.937L134.771 262.874C134.771 348.879 249.445 352.196 249.445 352.196Z\\\" fill=\\\"url(#paint0_linear_8_91)\\\"/>\\n<defs>\\n<filter id=\\\"filter0_f_8_91\\\" x=\\\"94.9674\\\" y=\\\"88.6133\\\" width=\\\"308.954\\\" height=\\\"310.494\\\" filterUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\">\\n<feFlood flood-opacity=\\\"0\\\" result=\\\"BackgroundImageFix\\\"/>\\n<feBlend mode=\\\"normal\\\" in=\\\"SourceGraphic\\\" in2=\\\"BackgroundImageFix\\\" result=\\\"shape\\\"/>\\n<feGaussianBlur stdDeviation=\\\"12.7941\\\" result=\\\"effect1_foregroundBlur_8_91\\\"/>\\n</filter>\\n<linearGradient id=\\\"paint0_linear_8_91\\\" x1=\\\"144.012\\\" y1=\\\"132.09\\\" x2=\\\"425.482\\\" y2=\\\"446.967\\\" gradientUnits=\\\"userSpaceOnUse\\\">\\n<stop stop-color=\\\"#F1CA77\\\"/>\\n<stop offset=\\\"1\\\" stop-color=\\\"#F6851B\\\"/>\\n</linearGradient>\\n</defs>\\n</svg>\\n\"},{\"path\":\"dist/bundle.js\",\"value\":\"(()=>{var e={526:(e,t)=>{\\\"use strict\\\";t.byteLength=function(e){var t=a(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,s=a(e),o=s[0],u=s[1],c=new i(function(e,t,r){return 3*(t+r)/4-r}(0,o,u)),d=0,f=u>0?o-4:o;for(r=0;r<f;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],c[d++]=t>>16&255,c[d++]=t>>8&255,c[d++]=255&t;2===u&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,c[d++]=255&t);1===u&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,c[d++]=t>>8&255,c[d++]=255&t);return c},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,s=[],o=16383,a=0,c=n-i;a<c;a+=o)s.push(u(e,a,a+o>c?c:a+o));1===i?(t=e[n-1],s.push(r[t>>2]+r[t<<4&63]+\\\"==\\\")):2===i&&(t=(e[n-2]<<8)+e[n-1],s.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+\\\"=\\\"));return s.join(\\\"\\\")};for(var r=[],n=[],i=\\\"undefined\\\"!=typeof Uint8Array?Uint8Array:Array,s=\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\",o=0;o<64;++o)r[o]=s[o],n[s.charCodeAt(o)]=o;function a(e){var t=e.length;if(t%4>0)throw new Error(\\\"Invalid string. Length must be a multiple of 4\\\");var r=e.indexOf(\\\"=\\\");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function u(e,t,n){for(var i,s,o=[],a=t;a<n;a+=3)i=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),o.push(r[(s=i)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return o.join(\\\"\\\")}n[\\\"-\\\".charCodeAt(0)]=62,n[\\\"_\\\".charCodeAt(0)]=63},287:(e,t,r)=>{\\\"use strict\\\";const n=r(526),i=r(251),s=\\\"function\\\"==typeof Symbol&&\\\"function\\\"==typeof Symbol.for?Symbol.for(\\\"nodejs.util.inspect.custom\\\"):null;t.hp=u,t.IS=50;const o=2147483647;function a(e){if(e>o)throw new RangeError('The value \\\"'+e+'\\\" is invalid for option \\\"size\\\"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,u.prototype),t}function u(e,t,r){if(\\\"number\\\"==typeof e){if(\\\"string\\\"==typeof t)throw new TypeError('The \\\"string\\\" argument must be of type string. Received type number');return f(e)}return c(e,t,r)}function c(e,t,r){if(\\\"string\\\"==typeof e)return function(e,t){\\\"string\\\"==typeof t&&\\\"\\\"!==t||(t=\\\"utf8\\\");if(!u.isEncoding(t))throw new TypeError(\\\"Unknown encoding: \\\"+t);const r=0|y(e,t);let n=a(r);const i=n.write(e,t);i!==r&&(n=n.slice(0,i));return n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(J(e,Uint8Array)){const t=new Uint8Array(e);return h(t.buffer,t.byteOffset,t.byteLength)}return l(e)}(e);if(null==e)throw new TypeError(\\\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \\\"+typeof e);if(J(e,ArrayBuffer)||e&&J(e.buffer,ArrayBuffer))return h(e,t,r);if(\\\"undefined\\\"!=typeof SharedArrayBuffer&&(J(e,SharedArrayBuffer)||e&&J(e.buffer,SharedArrayBuffer)))return h(e,t,r);if(\\\"number\\\"==typeof e)throw new TypeError('The \\\"value\\\" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return u.from(n,t,r);const i=function(e){if(u.isBuffer(e)){const t=0|p(e.length),r=a(t);return 0===r.length||e.copy(r,0,0,t),r}if(void 0!==e.length)return\\\"number\\\"!=typeof e.length||G(e.length)?a(0):l(e);if(\\\"Buffer\\\"===e.type&&Array.isArray(e.data))return l(e.data)}(e);if(i)return i;if(\\\"undefined\\\"!=typeof Symbol&&null!=Symbol.toPrimitive&&\\\"function\\\"==typeof e[Symbol.toPrimitive])return u.from(e[Symbol.toPrimitive](\\\"string\\\"),t,r);throw new TypeError(\\\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \\\"+typeof e)}function d(e){if(\\\"number\\\"!=typeof e)throw new TypeError('\\\"size\\\" argument must be of type number');if(e<0)throw new RangeError('The value \\\"'+e+'\\\" is invalid for option \\\"size\\\"')}function f(e){return d(e),a(e<0?0:0|p(e))}function l(e){const t=e.length<0?0:0|p(e.length),r=a(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function h(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('\\\"offset\\\" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('\\\"length\\\" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,u.prototype),n}function p(e){if(e>=o)throw new RangeError(\\\"Attempt to allocate Buffer larger than maximum size: 0x\\\"+o.toString(16)+\\\" bytes\\\");return 0|e}function y(e,t){if(u.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||J(e,ArrayBuffer))return e.byteLength;if(\\\"string\\\"!=typeof e)throw new TypeError('The \\\"string\\\" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(t){case\\\"ascii\\\":case\\\"latin1\\\":case\\\"binary\\\":return r;case\\\"utf8\\\":case\\\"utf-8\\\":return H(e).length;case\\\"ucs2\\\":case\\\"ucs-2\\\":case\\\"utf16le\\\":case\\\"utf-16le\\\":return 2*r;case\\\"hex\\\":return r>>>1;case\\\"base64\\\":return K(e).length;default:if(i)return n?-1:H(e).length;t=(\\\"\\\"+t).toLowerCase(),i=!0}}function m(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return\\\"\\\";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return\\\"\\\";if((r>>>=0)<=(t>>>=0))return\\\"\\\";for(e||(e=\\\"utf8\\\");;)switch(e){case\\\"hex\\\":return T(this,t,r);case\\\"utf8\\\":case\\\"utf-8\\\":return A(this,t,r);case\\\"ascii\\\":return B(this,t,r);case\\\"latin1\\\":case\\\"binary\\\":return S(this,t,r);case\\\"base64\\\":return I(this,t,r);case\\\"ucs2\\\":case\\\"ucs-2\\\":case\\\"utf16le\\\":case\\\"utf-16le\\\":return N(this,t,r);default:if(n)throw new TypeError(\\\"Unknown encoding: \\\"+e);e=(e+\\\"\\\").toLowerCase(),n=!0}}function g(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function v(e,t,r,n,i){if(0===e.length)return-1;if(\\\"string\\\"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),G(r=+r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if(\\\"string\\\"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:w(e,t,r,n,i);if(\\\"number\\\"==typeof t)return t&=255,\\\"function\\\"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):w(e,[t],r,n,i);throw new TypeError(\\\"val must be string, number or Buffer\\\")}function w(e,t,r,n,i){let s,o=1,a=e.length,u=t.length;if(void 0!==n&&(\\\"ucs2\\\"===(n=String(n).toLowerCase())||\\\"ucs-2\\\"===n||\\\"utf16le\\\"===n||\\\"utf-16le\\\"===n)){if(e.length<2||t.length<2)return-1;o=2,a/=2,u/=2,r/=2}function c(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(i){let n=-1;for(s=r;s<a;s++)if(c(e,s)===c(t,-1===n?0:s-n)){if(-1===n&&(n=s),s-n+1===u)return n*o}else-1!==n&&(s-=s-n),n=-1}else for(r+u>a&&(r=a-u),s=r;s>=0;s--){let r=!0;for(let n=0;n<u;n++)if(c(e,s+n)!==c(t,n)){r=!1;break}if(r)return s}return-1}function b(e,t,r,n){r=Number(r)||0;const i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;const s=t.length;let o;for(n>s/2&&(n=s/2),o=0;o<n;++o){const n=parseInt(t.substr(2*o,2),16);if(G(n))return o;e[r+o]=n}return o}function _(e,t,r,n){return W(H(t,e.length-r),e,r,n)}function E(e,t,r,n){return W(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function x(e,t,r,n){return W(K(t),e,r,n)}function k(e,t,r,n){return W(function(e,t){let r,n,i;const s=[];for(let o=0;o<e.length&&!((t-=2)<0);++o)r=e.charCodeAt(o),n=r>>8,i=r%256,s.push(i),s.push(n);return s}(t,e.length-r),e,r,n)}function I(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function A(e,t,r){r=Math.min(e.length,r);const n=[];let i=t;for(;i<r;){const t=e[i];let s=null,o=t>239?4:t>223?3:t>191?2:1;if(i+o<=r){let r,n,a,u;switch(o){case 1:t<128&&(s=t);break;case 2:r=e[i+1],128==(192&r)&&(u=(31&t)<<6|63&r,u>127&&(s=u));break;case 3:r=e[i+1],n=e[i+2],128==(192&r)&&128==(192&n)&&(u=(15&t)<<12|(63&r)<<6|63&n,u>2047&&(u<55296||u>57343)&&(s=u));break;case 4:r=e[i+1],n=e[i+2],a=e[i+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(u=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a,u>65535&&u<1114112&&(s=u))}}null===s?(s=65533,o=1):s>65535&&(s-=65536,n.push(s>>>10&1023|55296),s=56320|1023&s),n.push(s),i+=o}return function(e){const t=e.length;if(t<=O)return String.fromCharCode.apply(String,e);let r=\\\"\\\",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=O));return r}(n)}u.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),u.TYPED_ARRAY_SUPPORT||\\\"undefined\\\"==typeof console||\\\"function\\\"!=typeof console.error||console.error(\\\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\\\"),Object.defineProperty(u.prototype,\\\"parent\\\",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,\\\"offset\\\",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(e,t,r){return c(e,t,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(e,t,r){return function(e,t,r){return d(e),e<=0?a(e):void 0!==t?\\\"string\\\"==typeof r?a(e).fill(t,r):a(e).fill(t):a(e)}(e,t,r)},u.allocUnsafe=function(e){return f(e)},u.allocUnsafeSlow=function(e){return f(e)},u.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==u.prototype},u.compare=function(e,t){if(J(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),J(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError('The \\\"buf1\\\", \\\"buf2\\\" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let i=0,s=Math.min(r,n);i<s;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case\\\"hex\\\":case\\\"utf8\\\":case\\\"utf-8\\\":case\\\"ascii\\\":case\\\"latin1\\\":case\\\"binary\\\":case\\\"base64\\\":case\\\"ucs2\\\":case\\\"ucs-2\\\":case\\\"utf16le\\\":case\\\"utf-16le\\\":return!0;default:return!1}},u.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('\\\"list\\\" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=u.allocUnsafe(t);let i=0;for(r=0;r<e.length;++r){let t=e[r];if(J(t,Uint8Array))i+t.length>n.length?(u.isBuffer(t)||(t=u.from(t)),t.copy(n,i)):Uint8Array.prototype.set.call(n,t,i);else{if(!u.isBuffer(t))throw new TypeError('\\\"list\\\" argument must be an Array of Buffers');t.copy(n,i)}i+=t.length}return n},u.byteLength=y,u.prototype._isBuffer=!0,u.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError(\\\"Buffer size must be a multiple of 16-bits\\\");for(let t=0;t<e;t+=2)g(this,t,t+1);return this},u.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError(\\\"Buffer size must be a multiple of 32-bits\\\");for(let t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},u.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError(\\\"Buffer size must be a multiple of 64-bits\\\");for(let t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},u.prototype.toString=function(){const e=this.length;return 0===e?\\\"\\\":0===arguments.length?A(this,0,e):m.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError(\\\"Argument must be a Buffer\\\");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){let e=\\\"\\\";const r=t.IS;return e=this.toString(\\\"hex\\\",0,r).replace(/(.{2})/g,\\\"$1 \\\").trim(),this.length>r&&(e+=\\\" ... \\\"),\\\"<Buffer \\\"+e+\\\">\\\"},s&&(u.prototype[s]=u.prototype.inspect),u.prototype.compare=function(e,t,r,n,i){if(J(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(e))throw new TypeError('The \\\"target\\\" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError(\\\"out of range index\\\");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;let s=(i>>>=0)-(n>>>=0),o=(r>>>=0)-(t>>>=0);const a=Math.min(s,o),c=this.slice(n,i),d=e.slice(t,r);for(let e=0;e<a;++e)if(c[e]!==d[e]){s=c[e],o=d[e];break}return s<o?-1:o<s?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return v(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return v(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n=\\\"utf8\\\",r=this.length,t=0;else if(void 0===r&&\\\"string\\\"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error(\\\"Buffer.write(string, encoding, offset[, length]) is no longer supported\\\");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n=\\\"utf8\\\")):(n=r,r=void 0)}const i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError(\\\"Attempt to write outside buffer bounds\\\");n||(n=\\\"utf8\\\");let s=!1;for(;;)switch(n){case\\\"hex\\\":return b(this,e,t,r);case\\\"utf8\\\":case\\\"utf-8\\\":return _(this,e,t,r);case\\\"ascii\\\":case\\\"latin1\\\":case\\\"binary\\\":return E(this,e,t,r);case\\\"base64\\\":return x(this,e,t,r);case\\\"ucs2\\\":case\\\"ucs-2\\\":case\\\"utf16le\\\":case\\\"utf-16le\\\":return k(this,e,t,r);default:if(s)throw new TypeError(\\\"Unknown encoding: \\\"+n);n=(\\\"\\\"+n).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:\\\"Buffer\\\",data:Array.prototype.slice.call(this._arr||this,0)}};const O=4096;function B(e,t,r){let n=\\\"\\\";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function S(e,t,r){let n=\\\"\\\";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function T(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let i=\\\"\\\";for(let n=t;n<r;++n)i+=Y[e[n]];return i}function N(e,t,r){const n=e.slice(t,r);let i=\\\"\\\";for(let e=0;e<n.length-1;e+=2)i+=String.fromCharCode(n[e]+256*n[e+1]);return i}function R(e,t,r){if(e%1!=0||e<0)throw new RangeError(\\\"offset is not uint\\\");if(e+t>r)throw new RangeError(\\\"Trying to access beyond buffer length\\\")}function Z(e,t,r,n,i,s){if(!u.isBuffer(e))throw new TypeError('\\\"buffer\\\" argument must be a Buffer instance');if(t>i||t<s)throw new RangeError('\\\"value\\\" argument is out of bounds');if(r+n>e.length)throw new RangeError(\\\"Index out of range\\\")}function C(e,t,r,n,i){F(t,n,i,e,r,7);let s=Number(t&BigInt(4294967295));e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,r}function j(e,t,r,n,i){F(t,n,i,e,r,7);let s=Number(t&BigInt(4294967295));e[r+7]=s,s>>=8,e[r+6]=s,s>>=8,e[r+5]=s,s>>=8,e[r+4]=s;let o=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=o,o>>=8,e[r+2]=o,o>>=8,e[r+1]=o,o>>=8,e[r]=o,r+8}function U(e,t,r,n,i,s){if(r+n>e.length)throw new RangeError(\\\"Index out of range\\\");if(r<0)throw new RangeError(\\\"Index out of range\\\")}function P(e,t,r,n,s){return t=+t,r>>>=0,s||U(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function L(e,t,r,n,s){return t=+t,r>>>=0,s||U(e,0,r,8),i.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||R(e,t,this.length);let n=this[e],i=1,s=0;for(;++s<t&&(i*=256);)n+=this[e+s]*i;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||R(e,t,this.length);let n=this[e+--t],i=1;for(;t>0&&(i*=256);)n+=this[e+--t]*i;return n},u.prototype.readUint8=u.prototype.readUInt8=function(e,t){return e>>>=0,t||R(e,1,this.length),this[e]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(e,t){return e>>>=0,t||R(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(e,t){return e>>>=0,t||R(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(e,t){return e>>>=0,t||R(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(e,t){return e>>>=0,t||R(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readBigUInt64LE=X((function(e){q(e>>>=0,\\\"offset\\\");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||D(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,i=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),u.prototype.readBigUInt64BE=X((function(e){q(e>>>=0,\\\"offset\\\");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||D(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],i=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),u.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||R(e,t,this.length);let n=this[e],i=1,s=0;for(;++s<t&&(i*=256);)n+=this[e+s]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||R(e,t,this.length);let n=t,i=1,s=this[e+--n];for(;n>0&&(i*=256);)s+=this[e+--n]*i;return i*=128,s>=i&&(s-=Math.pow(2,8*t)),s},u.prototype.readInt8=function(e,t){return e>>>=0,t||R(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){e>>>=0,t||R(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){e>>>=0,t||R(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return e>>>=0,t||R(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return e>>>=0,t||R(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readBigInt64LE=X((function(e){q(e>>>=0,\\\"offset\\\");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||D(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),u.prototype.readBigInt64BE=X((function(e){q(e>>>=0,\\\"offset\\\");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||D(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),u.prototype.readFloatLE=function(e,t){return e>>>=0,t||R(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return e>>>=0,t||R(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return e>>>=0,t||R(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return e>>>=0,t||R(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){Z(this,e,t,r,Math.pow(2,8*r)-1,0)}let i=1,s=0;for(this[t]=255&e;++s<r&&(i*=256);)this[t+s]=e/i&255;return t+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){Z(this,e,t,r,Math.pow(2,8*r)-1,0)}let i=r-1,s=1;for(this[t+i]=255&e;--i>=0&&(s*=256);)this[t+i]=e/s&255;return t+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||Z(this,e,t,1,255,0),this[t]=255&e,t+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||Z(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||Z(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||Z(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||Z(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigUInt64LE=X((function(e,t=0){return C(this,e,t,BigInt(0),BigInt(\\\"0xffffffffffffffff\\\"))})),u.prototype.writeBigUInt64BE=X((function(e,t=0){return j(this,e,t,BigInt(0),BigInt(\\\"0xffffffffffffffff\\\"))})),u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);Z(this,e,t,r,n-1,-n)}let i=0,s=1,o=0;for(this[t]=255&e;++i<r&&(s*=256);)e<0&&0===o&&0!==this[t+i-1]&&(o=1),this[t+i]=(e/s|0)-o&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);Z(this,e,t,r,n-1,-n)}let i=r-1,s=1,o=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===o&&0!==this[t+i+1]&&(o=1),this[t+i]=(e/s|0)-o&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||Z(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||Z(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||Z(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||Z(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||Z(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigInt64LE=X((function(e,t=0){return C(this,e,t,-BigInt(\\\"0x8000000000000000\\\"),BigInt(\\\"0x7fffffffffffffff\\\"))})),u.prototype.writeBigInt64BE=X((function(e,t=0){return j(this,e,t,-BigInt(\\\"0x8000000000000000\\\"),BigInt(\\\"0x7fffffffffffffff\\\"))})),u.prototype.writeFloatLE=function(e,t,r){return P(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return P(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return L(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return L(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(!u.isBuffer(e))throw new TypeError(\\\"argument should be a Buffer\\\");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError(\\\"targetStart out of bounds\\\");if(r<0||r>=this.length)throw new RangeError(\\\"Index out of range\\\");if(n<0)throw new RangeError(\\\"sourceEnd out of bounds\\\");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const i=n-r;return this===e&&\\\"function\\\"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),i},u.prototype.fill=function(e,t,r,n){if(\\\"string\\\"==typeof e){if(\\\"string\\\"==typeof t?(n=t,t=0,r=this.length):\\\"string\\\"==typeof r&&(n=r,r=this.length),void 0!==n&&\\\"string\\\"!=typeof n)throw new TypeError(\\\"encoding must be a string\\\");if(\\\"string\\\"==typeof n&&!u.isEncoding(n))throw new TypeError(\\\"Unknown encoding: \\\"+n);if(1===e.length){const t=e.charCodeAt(0);(\\\"utf8\\\"===n&&t<128||\\\"latin1\\\"===n)&&(e=t)}}else\\\"number\\\"==typeof e?e&=255:\\\"boolean\\\"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError(\\\"Out of range index\\\");if(r<=t)return this;let i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),\\\"number\\\"==typeof e)for(i=t;i<r;++i)this[i]=e;else{const s=u.isBuffer(e)?e:u.from(e,n),o=s.length;if(0===o)throw new TypeError('The value \\\"'+e+'\\\" is invalid for argument \\\"value\\\"');for(i=0;i<r-t;++i)this[i+t]=s[i%o]}return this};const $={};function M(e,t,r){$[e]=class extends r{constructor(){super(),Object.defineProperty(this,\\\"message\\\",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,\\\"code\\\",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function z(e){let t=\\\"\\\",r=e.length;const n=\\\"-\\\"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function F(e,t,r,n,i,s){if(e>r||e<t){const n=\\\"bigint\\\"==typeof t?\\\"n\\\":\\\"\\\";let i;throw i=s>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(s+1)}${n}`:`>= -(2${n} ** ${8*(s+1)-1}${n}) and < 2 ** ${8*(s+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new $.ERR_OUT_OF_RANGE(\\\"value\\\",i,e)}!function(e,t,r){q(t,\\\"offset\\\"),void 0!==e[t]&&void 0!==e[t+r]||D(t,e.length-(r+1))}(n,i,s)}function q(e,t){if(\\\"number\\\"!=typeof e)throw new $.ERR_INVALID_ARG_TYPE(t,\\\"number\\\",e)}function D(e,t,r){if(Math.floor(e)!==e)throw q(e,r),new $.ERR_OUT_OF_RANGE(r||\\\"offset\\\",\\\"an integer\\\",e);if(t<0)throw new $.ERR_BUFFER_OUT_OF_BOUNDS;throw new $.ERR_OUT_OF_RANGE(r||\\\"offset\\\",`>= ${r?1:0} and <= ${t}`,e)}M(\\\"ERR_BUFFER_OUT_OF_BOUNDS\\\",(function(e){return e?`${e} is outside of buffer bounds`:\\\"Attempt to access memory outside buffer bounds\\\"}),RangeError),M(\\\"ERR_INVALID_ARG_TYPE\\\",(function(e,t){return`The \\\"${e}\\\" argument must be of type number. Received type ${typeof t}`}),TypeError),M(\\\"ERR_OUT_OF_RANGE\\\",(function(e,t,r){let n=`The value of \\\"${e}\\\" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=z(String(r)):\\\"bigint\\\"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=z(i)),i+=\\\"n\\\"),n+=` It must be ${t}. Received ${i}`,n}),RangeError);const V=/[^+/0-9A-Za-z-_]/g;function H(e,t){let r;t=t||1/0;const n=e.length;let i=null;const s=[];for(let o=0;o<n;++o){if(r=e.charCodeAt(o),r>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&s.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&s.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&s.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;s.push(r)}else if(r<2048){if((t-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error(\\\"Invalid code point\\\");if((t-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function K(e){return n.toByteArray(function(e){if((e=(e=e.split(\\\"=\\\")[0]).trim().replace(V,\\\"\\\")).length<2)return\\\"\\\";for(;e.length%4!=0;)e+=\\\"=\\\";return e}(e))}function W(e,t,r,n){let i;for(i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function J(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function G(e){return e!=e}const Y=function(){const e=\\\"0123456789abcdef\\\",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)t[n+i]=e[r]+e[i]}return t}();function X(e){return\\\"undefined\\\"==typeof BigInt?Q:e}function Q(){throw new Error(\\\"BigInt not supported\\\")}},463:e=>{e.exports=o,o.default=o,o.stable=d,o.stableStringify=d;var t=\\\"[...]\\\",r=\\\"[Circular]\\\",n=[],i=[];function s(){return{depthLimit:Number.MAX_SAFE_INTEGER,edgesLimit:Number.MAX_SAFE_INTEGER}}function o(e,t,r,o){var a;void 0===o&&(o=s()),u(e,\\\"\\\",0,[],void 0,0,o);try{a=0===i.length?JSON.stringify(e,t,r):JSON.stringify(e,l(t),r)}catch(e){return JSON.stringify(\\\"[unable to serialize, circular reference is too complex to analyze]\\\")}finally{for(;0!==n.length;){var c=n.pop();4===c.length?Object.defineProperty(c[0],c[1],c[3]):c[0][c[1]]=c[2]}}return a}function a(e,t,r,s){var o=Object.getOwnPropertyDescriptor(s,r);void 0!==o.get?o.configurable?(Object.defineProperty(s,r,{value:e}),n.push([s,r,t,o])):i.push([t,r,e]):(s[r]=e,n.push([s,r,t]))}function u(e,n,i,s,o,c,d){var f;if(c+=1,\\\"object\\\"==typeof e&&null!==e){for(f=0;f<s.length;f++)if(s[f]===e)return void a(r,e,n,o);if(void 0!==d.depthLimit&&c>d.depthLimit)return void a(t,e,n,o);if(void 0!==d.edgesLimit&&i+1>d.edgesLimit)return void a(t,e,n,o);if(s.push(e),Array.isArray(e))for(f=0;f<e.length;f++)u(e[f],f,f,s,e,c,d);else{var l=Object.keys(e);for(f=0;f<l.length;f++){var h=l[f];u(e[h],h,f,s,e,c,d)}}s.pop()}}function c(e,t){return e<t?-1:e>t?1:0}function d(e,t,r,o){void 0===o&&(o=s());var a,u=f(e,\\\"\\\",0,[],void 0,0,o)||e;try{a=0===i.length?JSON.stringify(u,t,r):JSON.stringify(u,l(t),r)}catch(e){return JSON.stringify(\\\"[unable to serialize, circular reference is too complex to analyze]\\\")}finally{for(;0!==n.length;){var c=n.pop();4===c.length?Object.defineProperty(c[0],c[1],c[3]):c[0][c[1]]=c[2]}}return a}function f(e,i,s,o,u,d,l){var h;if(d+=1,\\\"object\\\"==typeof e&&null!==e){for(h=0;h<o.length;h++)if(o[h]===e)return void a(r,e,i,u);try{if(\\\"function\\\"==typeof e.toJSON)return}catch(e){return}if(void 0!==l.depthLimit&&d>l.depthLimit)return void a(t,e,i,u);if(void 0!==l.edgesLimit&&s+1>l.edgesLimit)return void a(t,e,i,u);if(o.push(e),Array.isArray(e))for(h=0;h<e.length;h++)f(e[h],h,h,o,e,d,l);else{var p={},y=Object.keys(e).sort(c);for(h=0;h<y.length;h++){var m=y[h];f(e[m],m,h,o,e,d,l),p[m]=e[m]}if(void 0===u)return p;n.push([u,i,e]),u[i]=p}o.pop()}}function l(e){return e=void 0!==e?e:function(e,t){return t},function(t,r){if(i.length>0)for(var n=0;n<i.length;n++){var s=i[n];if(s[1]===t&&s[0]===r){r=s[2],i.splice(n,1);break}}return e.call(this,t,r)}}},251:(e,t)=>{t.read=function(e,t,r,n,i){var s,o,a=8*i-n-1,u=(1<<a)-1,c=u>>1,d=-7,f=r?i-1:0,l=r?-1:1,h=e[t+f];for(f+=l,s=h&(1<<-d)-1,h>>=-d,d+=a;d>0;s=256*s+e[t+f],f+=l,d-=8);for(o=s&(1<<-d)-1,s>>=-d,d+=n;d>0;o=256*o+e[t+f],f+=l,d-=8);if(0===s)s=1-c;else{if(s===u)return o?NaN:1/0*(h?-1:1);o+=Math.pow(2,n),s-=c}return(h?-1:1)*o*Math.pow(2,s-n)},t.write=function(e,t,r,n,i,s){var o,a,u,c=8*s-i-1,d=(1<<c)-1,f=d>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=n?0:s-1,p=n?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,o=d):(o=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-o))<1&&(o--,u*=2),(t+=o+f>=1?l/u:l*Math.pow(2,1-f))*u>=2&&(o++,u/=2),o+f>=d?(a=0,o=d):o+f>=1?(a=(t*u-1)*Math.pow(2,i),o+=f):(a=t*Math.pow(2,f-1)*Math.pow(2,i),o=0));i>=8;e[r+h]=255&a,h+=p,a/=256,i-=8);for(o=o<<i|a,c+=i;c>0;e[r+h]=255&o,h+=p,o/=256,c-=8);e[r+h-p]|=128*y}}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,r),s.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(e,\\\"__esModule\\\",{value:!0})};var n={};(()=>{\\\"use strict\\\";r.r(n),r.d(n,{onRpcRequest:()=>Gn});var e={};r.r(e),r.d(e,{DO:()=>Ur,OG:()=>Jr,My:()=>Lr,bytesToNumberBE:()=>qr,lX:()=>Dr,Id:()=>Wr,fg:()=>Xr,qj:()=>Kr,hexToBytes:()=>Fr,aY:()=>jr,lq:()=>Vr,z:()=>Hr,Q5:()=>en});var t={invalidInput:-32e3,resourceNotFound:-32001,resourceUnavailable:-32002,transactionRejected:-32003,methodNotSupported:-32004,limitExceeded:-32005,parse:-32700,invalidRequest:-32600,methodNotFound:-32601,invalidParams:-32602,internal:-32603},i={\\\"-32700\\\":{standard:\\\"JSON RPC 2.0\\\",message:\\\"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\\\"},\\\"-32600\\\":{standard:\\\"JSON RPC 2.0\\\",message:\\\"The JSON sent is not a valid Request object.\\\"},\\\"-32601\\\":{standard:\\\"JSON RPC 2.0\\\",message:\\\"The method does not exist / is not available.\\\"},\\\"-32602\\\":{standard:\\\"JSON RPC 2.0\\\",message:\\\"Invalid method parameter(s).\\\"},\\\"-32603\\\":{standard:\\\"JSON RPC 2.0\\\",message:\\\"Internal JSON-RPC error.\\\"},\\\"-32000\\\":{standard:\\\"EIP-1474\\\",message:\\\"Invalid input.\\\"},\\\"-32001\\\":{standard:\\\"EIP-1474\\\",message:\\\"Resource not found.\\\"},\\\"-32002\\\":{standard:\\\"EIP-1474\\\",message:\\\"Resource unavailable.\\\"},\\\"-32003\\\":{standard:\\\"EIP-1474\\\",message:\\\"Transaction rejected.\\\"},\\\"-32004\\\":{standard:\\\"EIP-1474\\\",message:\\\"Method not supported.\\\"},\\\"-32005\\\":{standard:\\\"EIP-1474\\\",message:\\\"Request limit exceeded.\\\"},4001:{standard:\\\"EIP-1193\\\",message:\\\"User rejected the request.\\\"},4100:{standard:\\\"EIP-1193\\\",message:\\\"The requested account and/or method has not been authorized by the user.\\\"},4200:{standard:\\\"EIP-1193\\\",message:\\\"The requested method is not supported by this Ethereum provider.\\\"},4900:{standard:\\\"EIP-1193\\\",message:\\\"The provider is disconnected from all chains.\\\"},4901:{standard:\\\"EIP-1193\\\",message:\\\"The provider is disconnected from the specified chain.\\\"}};function s(e){return Boolean(e)&&\\\"object\\\"==typeof e&&!Array.isArray(e)}var o=(e,t)=>Object.hasOwnProperty.call(e,t);var a,u=((a=u||{})[a.Null=4]=\\\"Null\\\",a[a.Comma=1]=\\\"Comma\\\",a[a.Wrapper=1]=\\\"Wrapper\\\",a[a.True=4]=\\\"True\\\",a[a.False=5]=\\\"False\\\",a[a.Quote=1]=\\\"Quote\\\",a[a.Colon=1]=\\\"Colon\\\",a[a.Date=24]=\\\"Date\\\",a);Error;class c extends TypeError{constructor(e,t){let r;const{message:n,explanation:i,...s}=e,{path:o}=e,a=0===o.length?n:`At path: ${o.join(\\\".\\\")} -- ${n}`;super(i??a),null!=i&&(this.cause=a),Object.assign(this,s),this.name=this.constructor.name,this.failures=()=>r??(r=[e,...t()])}}function d(e){return\\\"object\\\"==typeof e&&null!=e}function f(e){return\\\"symbol\\\"==typeof e?e.toString():\\\"string\\\"==typeof e?JSON.stringify(e):`${e}`}function l(e,t,r,n){if(!0===e)return;!1===e?e={}:\\\"string\\\"==typeof e&&(e={message:e});const{path:i,branch:s}=t,{type:o}=r,{refinement:a,message:u=`Expected a value of type \\\\`${o}\\\\`${a?` with refinement \\\\`${a}\\\\``:\\\"\\\"}, but received: \\\\`${f(n)}\\\\``}=e;return{value:n,type:o,refinement:a,key:i[i.length-1],path:i,branch:s,...e,message:u}}function*h(e,t,r,n){var i;d(i=e)&&\\\"function\\\"==typeof i[Symbol.iterator]||(e=[e]);for(const i of e){const e=l(i,t,r,n);e&&(yield e)}}function*p(e,t,r={}){const{path:n=[],branch:i=[e],coerce:s=!1,mask:o=!1}=r,a={path:n,branch:i};if(s&&(e=t.coercer(e,a),o&&\\\"type\\\"!==t.type&&d(t.schema)&&d(e)&&!Array.isArray(e)))for(const r in e)void 0===t.schema[r]&&delete e[r];let u=\\\"valid\\\";for(const n of t.validator(e,a))n.explanation=r.message,u=\\\"not_valid\\\",yield[n,void 0];for(let[c,f,l]of t.entries(e,a)){const t=p(f,l,{path:void 0===c?n:[...n,c],branch:void 0===c?i:[...i,f],coerce:s,mask:o,message:r.message});for(const r of t)r[0]?(u=null!=r[0].refinement?\\\"not_refined\\\":\\\"not_valid\\\",yield[r[0],void 0]):s&&(f=r[1],void 0===c?e=f:e instanceof Map?e.set(c,f):e instanceof Set?e.add(f):d(e)&&(void 0!==f||c in e)&&(e[c]=f))}if(\\\"not_valid\\\"!==u)for(const n of t.refiner(e,a))n.explanation=r.message,u=\\\"not_refined\\\",yield[n,void 0];\\\"valid\\\"===u&&(yield[void 0,e])}class y{constructor(e){const{type:t,schema:r,validator:n,refiner:i,coercer:s=(e=>e),entries:o=function*(){}}=e;this.type=t,this.schema=r,this.entries=o,this.coercer=s,this.validator=n?(e,t)=>h(n(e,t),t,this,e):()=>[],this.refiner=i?(e,t)=>h(i(e,t),t,this,e):()=>[]}assert(e,t){return m(e,this,t)}create(e,t){return g(e,this,t)}is(e){return v(e,this)}mask(e,t){return function(e,t,r){const n=w(e,t,{coerce:!0,mask:!0,message:r});if(n[0])throw n[0];return n[1]}(e,this,t)}validate(e,t={}){return w(e,this,t)}}function m(e,t,r){const n=w(e,t,{message:r});if(n[0])throw n[0]}function g(e,t,r){const n=w(e,t,{coerce:!0,message:r});if(n[0])throw n[0];return n[1]}function v(e,t){return!w(e,t)[0]}function w(e,t,r={}){const n=p(e,t,r),i=function(e){const{done:t,value:r}=e.next();return t?void 0:r}(n);if(i[0]){return[new c(i[0],(function*(){for(const e of n)e[0]&&(yield e[0])})),void 0]}return[void 0,i[1]]}function b(e,t){return new y({type:e,schema:null,validator:t})}function _(e){let t;return new y({type:\\\"lazy\\\",schema:null,*entries(r,n){t??(t=e()),yield*t.entries(r,n)},validator:(r,n)=>(t??(t=e()),t.validator(r,n)),coercer:(r,n)=>(t??(t=e()),t.coercer(r,n)),refiner:(r,n)=>(t??(t=e()),t.refiner(r,n))})}function E(e){return new y({type:\\\"array\\\",schema:e,*entries(t){if(e&&Array.isArray(t))for(const[r,n]of t.entries())yield[r,n,e]},coercer:e=>Array.isArray(e)?e.slice():e,validator:e=>Array.isArray(e)||`Expected an array value, but received: ${f(e)}`})}function x(e){const t=f(e),r=typeof e;return new y({type:\\\"literal\\\",schema:\\\"string\\\"===r||\\\"number\\\"===r||\\\"boolean\\\"===r?e:null,validator:r=>r===e||`Expected the literal \\\\`${t}\\\\`, but received: ${f(r)}`})}function k(){return b(\\\"never\\\",(()=>!1))}function I(){return b(\\\"number\\\",(e=>\\\"number\\\"==typeof e&&!isNaN(e)||`Expected a number, but received: ${f(e)}`))}function A(e){const t=e?Object.keys(e):[],r=k();return new y({type:\\\"object\\\",schema:e||null,*entries(n){if(e&&d(n)){const i=new Set(Object.keys(n));for(const r of t)i.delete(r),yield[r,n[r],e[r]];for(const e of i)yield[e,n[e],r]}},validator:e=>d(e)||`Expected an object, but received: ${f(e)}`,coercer:e=>d(e)?{...e}:e})}function O(e){return new y({...e,validator:(t,r)=>void 0===t||e.validator(t,r),refiner:(t,r)=>void 0===t||e.refiner(t,r)})}function B(e,t){return new y({type:\\\"record\\\",schema:null,*entries(r){if(d(r))for(const n in r){const i=r[n];yield[n,n,e],yield[n,i,t]}},validator:e=>d(e)||`Expected an object, but received: ${f(e)}`})}function S(){return b(\\\"string\\\",(e=>\\\"string\\\"==typeof e||`Expected a string, but received: ${f(e)}`))}function T(e){const t=e.map((e=>e.type)).join(\\\" | \\\");return new y({type:\\\"union\\\",schema:null,coercer(t){for(const r of e){const[e,n]=r.validate(t,{coerce:!0});if(!e)return n}return t},validator(r,n){const i=[];for(const t of e){const[...e]=p(r,t,n),[s]=e;if(!s[0])return[];for(const[t]of e)t&&i.push(t)}return[`Expected the value to satisfy a union of \\\\`${t}\\\\`, but received: ${f(r)}`,...i]}})}function N(){return b(\\\"unknown\\\",(()=>!0))}function R(e,t,r){return new y({...e,coercer:(n,i)=>v(n,t)?e.coercer(r(n,i),i):e.coercer(n,i)})}function Z(e,t){return C(e,\\\"pattern\\\",(r=>t.test(r)||`Expected a ${e.type} matching \\\\`/${t.source}/\\\\` but received \\\"${r}\\\"`))}function C(e,t,r){return new y({...e,*refiner(n,i){yield*e.refiner(n,i);const s=h(r(n,i),i,e,n);for(const e of s)yield{...e,refinement:t}}})}function j(e){return function(e){return function(e){return\\\"object\\\"==typeof e&&null!==e&&\\\"message\\\"in e}(e)&&\\\"string\\\"==typeof e.message?e.message:null==e?\\\"\\\":String(e)}(e).replace(/\\\\.$/u,\\\"\\\")}function U(e,t){return r=e,Boolean(\\\"string\\\"==typeof r?.prototype?.constructor?.name)?new e({message:t}):e({message:t});var r}var P=class extends Error{constructor(e){super(e.message),this.code=\\\"ERR_ASSERTION\\\"}};var L=e=>A(e);function $({path:e,branch:t}){const r=e[e.length-1];return o(t[t.length-2],r)}function M(e){return new y({...e,type:`optional ${e.type}`,validator:(t,r)=>!$(r)||e.validator(t,r),refiner:(t,r)=>!$(r)||e.refiner(t,r)})}var z=T([x(null),b(\\\"boolean\\\",(e=>\\\"boolean\\\"==typeof e)),b(\\\"finite number\\\",(e=>v(e,I())&&Number.isFinite(e))),S(),E(_((()=>z))),B(S(),_((()=>z)))]),F=R(z,b(\\\"any\\\",(()=>!0)),(e=>(function(e,t,r=\\\"Assertion failed\\\",n=P){try{m(e,t)}catch(e){throw U(n,`${r}: ${j(e)}.`)}}(e,z),JSON.parse(JSON.stringify(e,((e,t)=>{if(\\\"__proto__\\\"!==e&&\\\"constructor\\\"!==e)return t}))))));function q(e){try{return function(e){g(e,F)}(e),!0}catch{return!1}}var D=x(\\\"2.0\\\"),V=function(e){return new y({...e,validator:(t,r)=>null===t||e.validator(t,r),refiner:(t,r)=>null===t||e.refiner(t,r)})}(T([I(),S()])),H=L({code:b(\\\"integer\\\",(e=>\\\"number\\\"==typeof e&&!isNaN(e)&&Number.isInteger(e)||`Expected an integer, but received: ${f(e)}`)),message:S(),data:M(F),stack:M(S())}),K=T([B(S(),F),E(F)]);L({id:V,jsonrpc:D,method:S(),params:M(K)}),L({jsonrpc:D,method:S(),params:M(K)});A({id:V,jsonrpc:D,result:O(N()),error:O(H)});var W=L({id:V,jsonrpc:D,result:F}),J=L({id:V,jsonrpc:D,error:H});T([W,J]);var G=t.internal,Y=\\\"Unspecified error message. This is a bug, please report it.\\\",X=(Q(G),\\\"Unspecified server error.\\\");function Q(e,t=Y){if(function(e){return Number.isInteger(e)}(e)){const t=e.toString();if(o(i,t))return i[t].message;if(function(e){return e>=-32099&&e<=-32e3}(e))return X}return t}function ee(e){return Array.isArray(e)?e.map((e=>q(e)?e:s(e)?te(e):null)):s(e)?te(e):q(e)?e:null}function te(e){return Object.getOwnPropertyNames(e).reduce(((t,r)=>{const n=e[r];return q(n)&&(t[r]=n),t}),{})}var re=r(463),ne=class extends Error{constructor(e,t,r){if(!Number.isInteger(e))throw new Error('\\\"code\\\" must be an integer.');if(!t||\\\"string\\\"!=typeof t)throw new Error('\\\"message\\\" must be a non-empty string.');super(t),this.code=e,void 0!==r&&(this.data=r)}serialize(){const e={code:this.code,message:this.message};return void 0!==this.data&&(e.data=this.data,function(e){if(\\\"object\\\"!=typeof e||null===e)return!1;try{let t=e;for(;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}catch(e){return!1}}(this.data)&&(e.data.cause=ee(this.data.cause))),this.stack&&(e.stack=this.stack),e}toString(){return re(this.serialize(),ie,2)}};function ie(e,t){if(\\\"[Circular]\\\"!==t)return t}var se,oe,ae=e=>ce(t.invalidParams,e),ue=e=>ce(t.methodNotFound,e);function ce(e,t){const[r,n]=de(t);return new ne(e,r??Q(e),n)}function de(e){if(e){if(\\\"string\\\"==typeof e)return[e];if(\\\"object\\\"==typeof e&&!Array.isArray(e)){const{message:t,data:r}=e;if(t&&\\\"string\\\"!=typeof t)throw new Error(\\\"Must specify string message.\\\");return[t??void 0,r]}}return[]}!function(e){e.assertEqual=e=>e,e.assertIs=function(e){},e.assertNever=function(e){throw new Error},e.arrayToEnum=e=>{const t={};for(const r of e)t[r]=r;return t},e.getValidEnumValues=t=>{const r=e.objectKeys(t).filter((e=>\\\"number\\\"!=typeof t[t[e]])),n={};for(const e of r)n[e]=t[e];return e.objectValues(n)},e.objectValues=t=>e.objectKeys(t).map((function(e){return t[e]})),e.objectKeys=\\\"function\\\"==typeof Object.keys?e=>Object.keys(e):e=>{const t=[];for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return t},e.find=(e,t)=>{for(const r of e)if(t(r))return r},e.isInteger=\\\"function\\\"==typeof Number.isInteger?e=>Number.isInteger(e):e=>\\\"number\\\"==typeof e&&isFinite(e)&&Math.floor(e)===e,e.joinValues=function(e,t=\\\" | \\\"){return e.map((e=>\\\"string\\\"==typeof e?`'${e}'`:e)).join(t)},e.jsonStringifyReplacer=(e,t)=>\\\"bigint\\\"==typeof t?t.toString():t}(se||(se={})),function(e){e.mergeShapes=(e,t)=>({...e,...t})}(oe||(oe={}));const fe=se.arrayToEnum([\\\"string\\\",\\\"nan\\\",\\\"number\\\",\\\"integer\\\",\\\"float\\\",\\\"boolean\\\",\\\"date\\\",\\\"bigint\\\",\\\"symbol\\\",\\\"function\\\",\\\"undefined\\\",\\\"null\\\",\\\"array\\\",\\\"object\\\",\\\"unknown\\\",\\\"promise\\\",\\\"void\\\",\\\"never\\\",\\\"map\\\",\\\"set\\\"]),le=e=>{switch(typeof e){case\\\"undefined\\\":return fe.undefined;case\\\"string\\\":return fe.string;case\\\"number\\\":return isNaN(e)?fe.nan:fe.number;case\\\"boolean\\\":return fe.boolean;case\\\"function\\\":return fe.function;case\\\"bigint\\\":return fe.bigint;case\\\"symbol\\\":return fe.symbol;case\\\"object\\\":return Array.isArray(e)?fe.array:null===e?fe.null:e.then&&\\\"function\\\"==typeof e.then&&e.catch&&\\\"function\\\"==typeof e.catch?fe.promise:\\\"undefined\\\"!=typeof Map&&e instanceof Map?fe.map:\\\"undefined\\\"!=typeof Set&&e instanceof Set?fe.set:\\\"undefined\\\"!=typeof Date&&e instanceof Date?fe.date:fe.object;default:return fe.unknown}},he=se.arrayToEnum([\\\"invalid_type\\\",\\\"invalid_literal\\\",\\\"custom\\\",\\\"invalid_union\\\",\\\"invalid_union_discriminator\\\",\\\"invalid_enum_value\\\",\\\"unrecognized_keys\\\",\\\"invalid_arguments\\\",\\\"invalid_return_type\\\",\\\"invalid_date\\\",\\\"invalid_string\\\",\\\"too_small\\\",\\\"too_big\\\",\\\"invalid_intersection_types\\\",\\\"not_multiple_of\\\",\\\"not_finite\\\"]);class pe extends Error{constructor(e){super(),this.issues=[],this.addIssue=e=>{this.issues=[...this.issues,e]},this.addIssues=(e=[])=>{this.issues=[...this.issues,...e]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name=\\\"ZodError\\\",this.issues=e}get errors(){return this.issues}format(e){const t=e||function(e){return e.message},r={_errors:[]},n=e=>{for(const i of e.issues)if(\\\"invalid_union\\\"===i.code)i.unionErrors.map(n);else if(\\\"invalid_return_type\\\"===i.code)n(i.returnTypeError);else if(\\\"invalid_arguments\\\"===i.code)n(i.argumentsError);else if(0===i.path.length)r._errors.push(t(i));else{let e=r,n=0;for(;n<i.path.length;){const r=i.path[n];n===i.path.length-1?(e[r]=e[r]||{_errors:[]},e[r]._errors.push(t(i))):e[r]=e[r]||{_errors:[]},e=e[r],n++}}};return n(this),r}toString(){return this.message}get message(){return JSON.stringify(this.issues,se.jsonStringifyReplacer,2)}get isEmpty(){return 0===this.issues.length}flatten(e=(e=>e.message)){const t={},r=[];for(const n of this.issues)n.path.length>0?(t[n.path[0]]=t[n.path[0]]||[],t[n.path[0]].push(e(n))):r.push(e(n));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}}pe.create=e=>new pe(e);const ye=(e,t)=>{let r;switch(e.code){case he.invalid_type:r=e.received===fe.undefined?\\\"Required\\\":`Expected ${e.expected}, received ${e.received}`;break;case he.invalid_literal:r=`Invalid literal value, expected ${JSON.stringify(e.expected,se.jsonStringifyReplacer)}`;break;case he.unrecognized_keys:r=`Unrecognized key(s) in object: ${se.joinValues(e.keys,\\\", \\\")}`;break;case he.invalid_union:r=\\\"Invalid input\\\";break;case he.invalid_union_discriminator:r=`Invalid discriminator value. Expected ${se.joinValues(e.options)}`;break;case he.invalid_enum_value:r=`Invalid enum value. Expected ${se.joinValues(e.options)}, received '${e.received}'`;break;case he.invalid_arguments:r=\\\"Invalid function arguments\\\";break;case he.invalid_return_type:r=\\\"Invalid function return type\\\";break;case he.invalid_date:r=\\\"Invalid date\\\";break;case he.invalid_string:\\\"object\\\"==typeof e.validation?\\\"includes\\\"in e.validation?(r=`Invalid input: must include \\\"${e.validation.includes}\\\"`,\\\"number\\\"==typeof e.validation.position&&(r=`${r} at one or more positions greater than or equal to ${e.validation.position}`)):\\\"startsWith\\\"in e.validation?r=`Invalid input: must start with \\\"${e.validation.startsWith}\\\"`:\\\"endsWith\\\"in e.validation?r=`Invalid input: must end with \\\"${e.validation.endsWith}\\\"`:se.assertNever(e.validation):r=\\\"regex\\\"!==e.validation?`Invalid ${e.validation}`:\\\"Invalid\\\";break;case he.too_small:r=\\\"array\\\"===e.type?`Array must contain ${e.exact?\\\"exactly\\\":e.inclusive?\\\"at least\\\":\\\"more than\\\"} ${e.minimum} element(s)`:\\\"string\\\"===e.type?`String must contain ${e.exact?\\\"exactly\\\":e.inclusive?\\\"at least\\\":\\\"over\\\"} ${e.minimum} character(s)`:\\\"number\\\"===e.type?`Number must be ${e.exact?\\\"exactly equal to \\\":e.inclusive?\\\"greater than or equal to \\\":\\\"greater than \\\"}${e.minimum}`:\\\"date\\\"===e.type?`Date must be ${e.exact?\\\"exactly equal to \\\":e.inclusive?\\\"greater than or equal to \\\":\\\"greater than \\\"}${new Date(Number(e.minimum))}`:\\\"Invalid input\\\";break;case he.too_big:r=\\\"array\\\"===e.type?`Array must contain ${e.exact?\\\"exactly\\\":e.inclusive?\\\"at most\\\":\\\"less than\\\"} ${e.maximum} element(s)`:\\\"string\\\"===e.type?`String must contain ${e.exact?\\\"exactly\\\":e.inclusive?\\\"at most\\\":\\\"under\\\"} ${e.maximum} character(s)`:\\\"number\\\"===e.type?`Number must be ${e.exact?\\\"exactly\\\":e.inclusive?\\\"less than or equal to\\\":\\\"less than\\\"} ${e.maximum}`:\\\"bigint\\\"===e.type?`BigInt must be ${e.exact?\\\"exactly\\\":e.inclusive?\\\"less than or equal to\\\":\\\"less than\\\"} ${e.maximum}`:\\\"date\\\"===e.type?`Date must be ${e.exact?\\\"exactly\\\":e.inclusive?\\\"smaller than or equal to\\\":\\\"smaller than\\\"} ${new Date(Number(e.maximum))}`:\\\"Invalid input\\\";break;case he.custom:r=\\\"Invalid input\\\";break;case he.invalid_intersection_types:r=\\\"Intersection results could not be merged\\\";break;case he.not_multiple_of:r=`Number must be a multiple of ${e.multipleOf}`;break;case he.not_finite:r=\\\"Number must be finite\\\";break;default:r=t.defaultError,se.assertNever(e)}return{message:r}};let me=ye;function ge(){return me}const ve=e=>{const{data:t,path:r,errorMaps:n,issueData:i}=e,s=[...r,...i.path||[]],o={...i,path:s};let a=\\\"\\\";const u=n.filter((e=>!!e)).slice().reverse();for(const e of u)a=e(o,{data:t,defaultError:a}).message;return{...i,path:s,message:i.message||a}};function we(e,t){const r=ve({issueData:t,data:e.data,path:e.path,errorMaps:[e.common.contextualErrorMap,e.schemaErrorMap,ge(),ye].filter((e=>!!e))});e.common.issues.push(r)}class be{constructor(){this.value=\\\"valid\\\"}dirty(){\\\"valid\\\"===this.value&&(this.value=\\\"dirty\\\")}abort(){\\\"aborted\\\"!==this.value&&(this.value=\\\"aborted\\\")}static mergeArray(e,t){const r=[];for(const n of t){if(\\\"aborted\\\"===n.status)return _e;\\\"dirty\\\"===n.status&&e.dirty(),r.push(n.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,t){const r=[];for(const e of t)r.push({key:await e.key,value:await e.value});return be.mergeObjectSync(e,r)}static mergeObjectSync(e,t){const r={};for(const n of t){const{key:t,value:i}=n;if(\\\"aborted\\\"===t.status)return _e;if(\\\"aborted\\\"===i.status)return _e;\\\"dirty\\\"===t.status&&e.dirty(),\\\"dirty\\\"===i.status&&e.dirty(),\\\"__proto__\\\"===t.value||void 0===i.value&&!n.alwaysSet||(r[t.value]=i.value)}return{status:e.value,value:r}}}const _e=Object.freeze({status:\\\"aborted\\\"}),Ee=e=>({status:\\\"dirty\\\",value:e}),xe=e=>({status:\\\"valid\\\",value:e}),ke=e=>\\\"aborted\\\"===e.status,Ie=e=>\\\"dirty\\\"===e.status,Ae=e=>\\\"valid\\\"===e.status,Oe=e=>\\\"undefined\\\"!=typeof Promise&&e instanceof Promise;var Be;!function(e){e.errToObj=e=>\\\"string\\\"==typeof e?{message:e}:e||{},e.toString=e=>\\\"string\\\"==typeof e?e:null==e?void 0:e.message}(Be||(Be={}));class Se{constructor(e,t,r,n){this._cachedPath=[],this.parent=e,this.data=t,this._path=r,this._key=n}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const Te=(e,t)=>{if(Ae(t))return{success:!0,data:t.value};if(!e.common.issues.length)throw new Error(\\\"Validation failed but no issues detected.\\\");return{success:!1,get error(){if(this._error)return this._error;const t=new pe(e.common.issues);return this._error=t,this._error}}};function Ne(e){if(!e)return{};const{errorMap:t,invalid_type_error:r,required_error:n,description:i}=e;if(t&&(r||n))throw new Error('Can\\\\'t use \\\"invalid_type_error\\\" or \\\"required_error\\\" in conjunction with custom error map.');if(t)return{errorMap:t,description:i};return{errorMap:(e,t)=>\\\"invalid_type\\\"!==e.code?{message:t.defaultError}:void 0===t.data?{message:null!=n?n:t.defaultError}:{message:null!=r?r:t.defaultError},description:i}}class Re{constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this)}get description(){return this._def.description}_getType(e){return le(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:le(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new be,ctx:{common:e.parent.common,data:e.data,parsedType:le(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(Oe(t))throw new Error(\\\"Synchronous parse encountered promise.\\\");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const r=this.safeParse(e,t);if(r.success)return r.data;throw r.error}safeParse(e,t){var r;const n={common:{issues:[],async:null!==(r=null==t?void 0:t.async)&&void 0!==r&&r,contextualErrorMap:null==t?void 0:t.errorMap},path:(null==t?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:le(e)},i=this._parseSync({data:e,path:n.path,parent:n});return Te(n,i)}async parseAsync(e,t){const r=await this.safeParseAsync(e,t);if(r.success)return r.data;throw r.error}async safeParseAsync(e,t){const r={common:{issues:[],contextualErrorMap:null==t?void 0:t.errorMap,async:!0},path:(null==t?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:le(e)},n=this._parse({data:e,path:r.path,parent:r}),i=await(Oe(n)?n:Promise.resolve(n));return Te(r,i)}refine(e,t){const r=e=>\\\"string\\\"==typeof t||void 0===t?{message:t}:\\\"function\\\"==typeof t?t(e):t;return this._refinement(((t,n)=>{const i=e(t),s=()=>n.addIssue({code:he.custom,...r(t)});return\\\"undefined\\\"!=typeof Promise&&i instanceof Promise?i.then((e=>!!e||(s(),!1))):!!i||(s(),!1)}))}refinement(e,t){return this._refinement(((r,n)=>!!e(r)||(n.addIssue(\\\"function\\\"==typeof t?t(r,n):t),!1)))}_refinement(e){return new wt({schema:this,typeName:Nt.ZodEffects,effect:{type:\\\"refinement\\\",refinement:e}})}superRefine(e){return this._refinement(e)}optional(){return bt.create(this,this._def)}nullable(){return _t.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return et.create(this,this._def)}promise(){return vt.create(this,this._def)}or(e){return nt.create([this,e],this._def)}and(e){return at.create(this,e,this._def)}transform(e){return new wt({...Ne(this._def),schema:this,typeName:Nt.ZodEffects,effect:{type:\\\"transform\\\",transform:e}})}default(e){const t=\\\"function\\\"==typeof e?e:()=>e;return new Et({...Ne(this._def),innerType:this,defaultValue:t,typeName:Nt.ZodDefault})}brand(){return new At({typeName:Nt.ZodBranded,type:this,...Ne(this._def)})}catch(e){const t=\\\"function\\\"==typeof e?e:()=>e;return new xt({...Ne(this._def),innerType:this,catchValue:t,typeName:Nt.ZodCatch})}describe(e){return new(0,this.constructor)({...this._def,description:e})}pipe(e){return Ot.create(this,e)}readonly(){return Bt.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const Ze=/^c[^\\\\s-]{8,}$/i,Ce=/^[a-z][a-z0-9]*$/,je=/^[0-9A-HJKMNP-TV-Z]{26}$/,Ue=/^[0-9a-fA-F]{8}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{4}\\\\b-[0-9a-fA-F]{12}$/i,Pe=/^(?!\\\\.)(?!.*\\\\.\\\\.)([A-Z0-9_+-\\\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\\\-]*\\\\.)+[A-Z]{2,}$/i;let Le;const $e=/^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/,Me=/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;class ze extends Re{_parse(e){this._def.coerce&&(e.data=String(e.data));if(this._getType(e)!==fe.string){const t=this._getOrReturnCtx(e);return we(t,{code:he.invalid_type,expected:fe.string,received:t.parsedType}),_e}const t=new be;let r;for(const o of this._def.checks)if(\\\"min\\\"===o.kind)e.data.length<o.value&&(r=this._getOrReturnCtx(e,r),we(r,{code:he.too_small,minimum:o.value,type:\\\"string\\\",inclusive:!0,exact:!1,message:o.message}),t.dirty());else if(\\\"max\\\"===o.kind)e.data.length>o.value&&(r=this._getOrReturnCtx(e,r),we(r,{code:he.too_big,maximum:o.value,type:\\\"string\\\",inclusive:!0,exact:!1,message:o.message}),t.dirty());else if(\\\"length\\\"===o.kind){const n=e.data.length>o.value,i=e.data.length<o.value;(n||i)&&(r=this._getOrReturnCtx(e,r),n?we(r,{code:he.too_big,maximum:o.value,type:\\\"string\\\",inclusive:!0,exact:!0,message:o.message}):i&&we(r,{code:he.too_small,minimum:o.value,type:\\\"string\\\",inclusive:!0,exact:!0,message:o.message}),t.dirty())}else if(\\\"email\\\"===o.kind)Pe.test(e.data)||(r=this._getOrReturnCtx(e,r),we(r,{validation:\\\"email\\\",code:he.invalid_string,message:o.message}),t.dirty());else if(\\\"emoji\\\"===o.kind)Le||(Le=new RegExp(\\\"^(\\\\\\\\p{Extended_Pictographic}|\\\\\\\\p{Emoji_Component})+$\\\",\\\"u\\\")),Le.test(e.data)||(r=this._getOrReturnCtx(e,r),we(r,{validation:\\\"emoji\\\",code:he.invalid_string,message:o.message}),t.dirty());else if(\\\"uuid\\\"===o.kind)Ue.test(e.data)||(r=this._getOrReturnCtx(e,r),we(r,{validation:\\\"uuid\\\",code:he.invalid_string,message:o.message}),t.dirty());else if(\\\"cuid\\\"===o.kind)Ze.test(e.data)||(r=this._getOrReturnCtx(e,r),we(r,{validation:\\\"cuid\\\",code:he.invalid_string,message:o.message}),t.dirty());else if(\\\"cuid2\\\"===o.kind)Ce.test(e.data)||(r=this._getOrReturnCtx(e,r),we(r,{validation:\\\"cuid2\\\",code:he.invalid_string,message:o.message}),t.dirty());else if(\\\"ulid\\\"===o.kind)je.test(e.data)||(r=this._getOrReturnCtx(e,r),we(r,{validation:\\\"ulid\\\",code:he.invalid_string,message:o.message}),t.dirty());else if(\\\"url\\\"===o.kind)try{new URL(e.data)}catch(n){r=this._getOrReturnCtx(e,r),we(r,{validation:\\\"url\\\",code:he.invalid_string,message:o.message}),t.dirty()}else if(\\\"regex\\\"===o.kind){o.regex.lastIndex=0;o.regex.test(e.data)||(r=this._getOrReturnCtx(e,r),we(r,{validation:\\\"regex\\\",code:he.invalid_string,message:o.message}),t.dirty())}else if(\\\"trim\\\"===o.kind)e.data=e.data.trim();else if(\\\"includes\\\"===o.kind)e.data.includes(o.value,o.position)||(r=this._getOrReturnCtx(e,r),we(r,{code:he.invalid_string,validation:{includes:o.value,position:o.position},message:o.message}),t.dirty());else if(\\\"toLowerCase\\\"===o.kind)e.data=e.data.toLowerCase();else if(\\\"toUpperCase\\\"===o.kind)e.data=e.data.toUpperCase();else if(\\\"startsWith\\\"===o.kind)e.data.startsWith(o.value)||(r=this._getOrReturnCtx(e,r),we(r,{code:he.invalid_string,validation:{startsWith:o.value},message:o.message}),t.dirty());else if(\\\"endsWith\\\"===o.kind)e.data.endsWith(o.value)||(r=this._getOrReturnCtx(e,r),we(r,{code:he.invalid_string,validation:{endsWith:o.value},message:o.message}),t.dirty());else if(\\\"datetime\\\"===o.kind){((s=o).precision?s.offset?new RegExp(`^\\\\\\\\d{4}-\\\\\\\\d{2}-\\\\\\\\d{2}T\\\\\\\\d{2}:\\\\\\\\d{2}:\\\\\\\\d{2}\\\\\\\\.\\\\\\\\d{${s.precision}}(([+-]\\\\\\\\d{2}(:?\\\\\\\\d{2})?)|Z)$`):new RegExp(`^\\\\\\\\d{4}-\\\\\\\\d{2}-\\\\\\\\d{2}T\\\\\\\\d{2}:\\\\\\\\d{2}:\\\\\\\\d{2}\\\\\\\\.\\\\\\\\d{${s.precision}}Z$`):0===s.precision?s.offset?new RegExp(\\\"^\\\\\\\\d{4}-\\\\\\\\d{2}-\\\\\\\\d{2}T\\\\\\\\d{2}:\\\\\\\\d{2}:\\\\\\\\d{2}(([+-]\\\\\\\\d{2}(:?\\\\\\\\d{2})?)|Z)$\\\"):new RegExp(\\\"^\\\\\\\\d{4}-\\\\\\\\d{2}-\\\\\\\\d{2}T\\\\\\\\d{2}:\\\\\\\\d{2}:\\\\\\\\d{2}Z$\\\"):s.offset?new RegExp(\\\"^\\\\\\\\d{4}-\\\\\\\\d{2}-\\\\\\\\d{2}T\\\\\\\\d{2}:\\\\\\\\d{2}:\\\\\\\\d{2}(\\\\\\\\.\\\\\\\\d+)?(([+-]\\\\\\\\d{2}(:?\\\\\\\\d{2})?)|Z)$\\\"):new RegExp(\\\"^\\\\\\\\d{4}-\\\\\\\\d{2}-\\\\\\\\d{2}T\\\\\\\\d{2}:\\\\\\\\d{2}:\\\\\\\\d{2}(\\\\\\\\.\\\\\\\\d+)?Z$\\\")).test(e.data)||(r=this._getOrReturnCtx(e,r),we(r,{code:he.invalid_string,validation:\\\"datetime\\\",message:o.message}),t.dirty())}else\\\"ip\\\"===o.kind?(n=e.data,(\\\"v4\\\"!==(i=o.version)&&i||!$e.test(n))&&(\\\"v6\\\"!==i&&i||!Me.test(n))&&(r=this._getOrReturnCtx(e,r),we(r,{validation:\\\"ip\\\",code:he.invalid_string,message:o.message}),t.dirty())):se.assertNever(o);var n,i,s;return{status:t.value,value:e.data}}_regex(e,t,r){return this.refinement((t=>e.test(t)),{validation:t,code:he.invalid_string,...Be.errToObj(r)})}_addCheck(e){return new ze({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:\\\"email\\\",...Be.errToObj(e)})}url(e){return this._addCheck({kind:\\\"url\\\",...Be.errToObj(e)})}emoji(e){return this._addCheck({kind:\\\"emoji\\\",...Be.errToObj(e)})}uuid(e){return this._addCheck({kind:\\\"uuid\\\",...Be.errToObj(e)})}cuid(e){return this._addCheck({kind:\\\"cuid\\\",...Be.errToObj(e)})}cuid2(e){return this._addCheck({kind:\\\"cuid2\\\",...Be.errToObj(e)})}ulid(e){return this._addCheck({kind:\\\"ulid\\\",...Be.errToObj(e)})}ip(e){return this._addCheck({kind:\\\"ip\\\",...Be.errToObj(e)})}datetime(e){var t;return\\\"string\\\"==typeof e?this._addCheck({kind:\\\"datetime\\\",precision:null,offset:!1,message:e}):this._addCheck({kind:\\\"datetime\\\",precision:void 0===(null==e?void 0:e.precision)?null:null==e?void 0:e.precision,offset:null!==(t=null==e?void 0:e.offset)&&void 0!==t&&t,...Be.errToObj(null==e?void 0:e.message)})}regex(e,t){return this._addCheck({kind:\\\"regex\\\",regex:e,...Be.errToObj(t)})}includes(e,t){return this._addCheck({kind:\\\"includes\\\",value:e,position:null==t?void 0:t.position,...Be.errToObj(null==t?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:\\\"startsWith\\\",value:e,...Be.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:\\\"endsWith\\\",value:e,...Be.errToObj(t)})}min(e,t){return this._addCheck({kind:\\\"min\\\",value:e,...Be.errToObj(t)})}max(e,t){return this._addCheck({kind:\\\"max\\\",value:e,...Be.errToObj(t)})}length(e,t){return this._addCheck({kind:\\\"length\\\",value:e,...Be.errToObj(t)})}nonempty(e){return this.min(1,Be.errToObj(e))}trim(){return new ze({...this._def,checks:[...this._def.checks,{kind:\\\"trim\\\"}]})}toLowerCase(){return new ze({...this._def,checks:[...this._def.checks,{kind:\\\"toLowerCase\\\"}]})}toUpperCase(){return new ze({...this._def,checks:[...this._def.checks,{kind:\\\"toUpperCase\\\"}]})}get isDatetime(){return!!this._def.checks.find((e=>\\\"datetime\\\"===e.kind))}get isEmail(){return!!this._def.checks.find((e=>\\\"email\\\"===e.kind))}get isURL(){return!!this._def.checks.find((e=>\\\"url\\\"===e.kind))}get isEmoji(){return!!this._def.checks.find((e=>\\\"emoji\\\"===e.kind))}get isUUID(){return!!this._def.checks.find((e=>\\\"uuid\\\"===e.kind))}get isCUID(){return!!this._def.checks.find((e=>\\\"cuid\\\"===e.kind))}get isCUID2(){return!!this._def.checks.find((e=>\\\"cuid2\\\"===e.kind))}get isULID(){return!!this._def.checks.find((e=>\\\"ulid\\\"===e.kind))}get isIP(){return!!this._def.checks.find((e=>\\\"ip\\\"===e.kind))}get minLength(){let e=null;for(const t of this._def.checks)\\\"min\\\"===t.kind&&(null===e||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)\\\"max\\\"===t.kind&&(null===e||t.value<e)&&(e=t.value);return e}}function Fe(e,t){const r=(e.toString().split(\\\".\\\")[1]||\\\"\\\").length,n=(t.toString().split(\\\".\\\")[1]||\\\"\\\").length,i=r>n?r:n;return parseInt(e.toFixed(i).replace(\\\".\\\",\\\"\\\"))%parseInt(t.toFixed(i).replace(\\\".\\\",\\\"\\\"))/Math.pow(10,i)}ze.create=e=>{var t;return new ze({checks:[],typeName:Nt.ZodString,coerce:null!==(t=null==e?void 0:e.coerce)&&void 0!==t&&t,...Ne(e)})};class qe extends Re{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){this._def.coerce&&(e.data=Number(e.data));if(this._getType(e)!==fe.number){const t=this._getOrReturnCtx(e);return we(t,{code:he.invalid_type,expected:fe.number,received:t.parsedType}),_e}let t;const r=new be;for(const n of this._def.checks)if(\\\"int\\\"===n.kind)se.isInteger(e.data)||(t=this._getOrReturnCtx(e,t),we(t,{code:he.invalid_type,expected:\\\"integer\\\",received:\\\"float\\\",message:n.message}),r.dirty());else if(\\\"min\\\"===n.kind){(n.inclusive?e.data<n.value:e.data<=n.value)&&(t=this._getOrReturnCtx(e,t),we(t,{code:he.too_small,minimum:n.value,type:\\\"number\\\",inclusive:n.inclusive,exact:!1,message:n.message}),r.dirty())}else if(\\\"max\\\"===n.kind){(n.inclusive?e.data>n.value:e.data>=n.value)&&(t=this._getOrReturnCtx(e,t),we(t,{code:he.too_big,maximum:n.value,type:\\\"number\\\",inclusive:n.inclusive,exact:!1,message:n.message}),r.dirty())}else\\\"multipleOf\\\"===n.kind?0!==Fe(e.data,n.value)&&(t=this._getOrReturnCtx(e,t),we(t,{code:he.not_multiple_of,multipleOf:n.value,message:n.message}),r.dirty()):\\\"finite\\\"===n.kind?Number.isFinite(e.data)||(t=this._getOrReturnCtx(e,t),we(t,{code:he.not_finite,message:n.message}),r.dirty()):se.assertNever(n);return{status:r.value,value:e.data}}gte(e,t){return this.setLimit(\\\"min\\\",e,!0,Be.toString(t))}gt(e,t){return this.setLimit(\\\"min\\\",e,!1,Be.toString(t))}lte(e,t){return this.setLimit(\\\"max\\\",e,!0,Be.toString(t))}lt(e,t){return this.setLimit(\\\"max\\\",e,!1,Be.toString(t))}setLimit(e,t,r,n){return new qe({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:Be.toString(n)}]})}_addCheck(e){return new qe({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:\\\"int\\\",message:Be.toString(e)})}positive(e){return this._addCheck({kind:\\\"min\\\",value:0,inclusive:!1,message:Be.toString(e)})}negative(e){return this._addCheck({kind:\\\"max\\\",value:0,inclusive:!1,message:Be.toString(e)})}nonpositive(e){return this._addCheck({kind:\\\"max\\\",value:0,inclusive:!0,message:Be.toString(e)})}nonnegative(e){return this._addCheck({kind:\\\"min\\\",value:0,inclusive:!0,message:Be.toString(e)})}multipleOf(e,t){return this._addCheck({kind:\\\"multipleOf\\\",value:e,message:Be.toString(t)})}finite(e){return this._addCheck({kind:\\\"finite\\\",message:Be.toString(e)})}safe(e){return this._addCheck({kind:\\\"min\\\",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:Be.toString(e)})._addCheck({kind:\\\"max\\\",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:Be.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)\\\"min\\\"===t.kind&&(null===e||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)\\\"max\\\"===t.kind&&(null===e||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find((e=>\\\"int\\\"===e.kind||\\\"multipleOf\\\"===e.kind&&se.isInteger(e.value)))}get isFinite(){let e=null,t=null;for(const r of this._def.checks){if(\\\"finite\\\"===r.kind||\\\"int\\\"===r.kind||\\\"multipleOf\\\"===r.kind)return!0;\\\"min\\\"===r.kind?(null===t||r.value>t)&&(t=r.value):\\\"max\\\"===r.kind&&(null===e||r.value<e)&&(e=r.value)}return Number.isFinite(t)&&Number.isFinite(e)}}qe.create=e=>new qe({checks:[],typeName:Nt.ZodNumber,coerce:(null==e?void 0:e.coerce)||!1,...Ne(e)});class De extends Re{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){this._def.coerce&&(e.data=BigInt(e.data));if(this._getType(e)!==fe.bigint){const t=this._getOrReturnCtx(e);return we(t,{code:he.invalid_type,expected:fe.bigint,received:t.parsedType}),_e}let t;const r=new be;for(const n of this._def.checks)if(\\\"min\\\"===n.kind){(n.inclusive?e.data<n.value:e.data<=n.value)&&(t=this._getOrReturnCtx(e,t),we(t,{code:he.too_small,type:\\\"bigint\\\",minimum:n.value,inclusive:n.inclusive,message:n.message}),r.dirty())}else if(\\\"max\\\"===n.kind){(n.inclusive?e.data>n.value:e.data>=n.value)&&(t=this._getOrReturnCtx(e,t),we(t,{code:he.too_big,type:\\\"bigint\\\",maximum:n.value,inclusive:n.inclusive,message:n.message}),r.dirty())}else\\\"multipleOf\\\"===n.kind?e.data%n.value!==BigInt(0)&&(t=this._getOrReturnCtx(e,t),we(t,{code:he.not_multiple_of,multipleOf:n.value,message:n.message}),r.dirty()):se.assertNever(n);return{status:r.value,value:e.data}}gte(e,t){return this.setLimit(\\\"min\\\",e,!0,Be.toString(t))}gt(e,t){return this.setLimit(\\\"min\\\",e,!1,Be.toString(t))}lte(e,t){return this.setLimit(\\\"max\\\",e,!0,Be.toString(t))}lt(e,t){return this.setLimit(\\\"max\\\",e,!1,Be.toString(t))}setLimit(e,t,r,n){return new De({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:Be.toString(n)}]})}_addCheck(e){return new De({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:\\\"min\\\",value:BigInt(0),inclusive:!1,message:Be.toString(e)})}negative(e){return this._addCheck({kind:\\\"max\\\",value:BigInt(0),inclusive:!1,message:Be.toString(e)})}nonpositive(e){return this._addCheck({kind:\\\"max\\\",value:BigInt(0),inclusive:!0,message:Be.toString(e)})}nonnegative(e){return this._addCheck({kind:\\\"min\\\",value:BigInt(0),inclusive:!0,message:Be.toString(e)})}multipleOf(e,t){return this._addCheck({kind:\\\"multipleOf\\\",value:e,message:Be.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)\\\"min\\\"===t.kind&&(null===e||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)\\\"max\\\"===t.kind&&(null===e||t.value<e)&&(e=t.value);return e}}De.create=e=>{var t;return new De({checks:[],typeName:Nt.ZodBigInt,coerce:null!==(t=null==e?void 0:e.coerce)&&void 0!==t&&t,...Ne(e)})};class Ve extends Re{_parse(e){this._def.coerce&&(e.data=Boolean(e.data));if(this._getType(e)!==fe.boolean){const t=this._getOrReturnCtx(e);return we(t,{code:he.invalid_type,expected:fe.boolean,received:t.parsedType}),_e}return xe(e.data)}}Ve.create=e=>new Ve({typeName:Nt.ZodBoolean,coerce:(null==e?void 0:e.coerce)||!1,...Ne(e)});class He extends Re{_parse(e){this._def.coerce&&(e.data=new Date(e.data));if(this._getType(e)!==fe.date){const t=this._getOrReturnCtx(e);return we(t,{code:he.invalid_type,expected:fe.date,received:t.parsedType}),_e}if(isNaN(e.data.getTime())){return we(this._getOrReturnCtx(e),{code:he.invalid_date}),_e}const t=new be;let r;for(const n of this._def.checks)\\\"min\\\"===n.kind?e.data.getTime()<n.value&&(r=this._getOrReturnCtx(e,r),we(r,{code:he.too_small,message:n.message,inclusive:!0,exact:!1,minimum:n.value,type:\\\"date\\\"}),t.dirty()):\\\"max\\\"===n.kind?e.data.getTime()>n.value&&(r=this._getOrReturnCtx(e,r),we(r,{code:he.too_big,message:n.message,inclusive:!0,exact:!1,maximum:n.value,type:\\\"date\\\"}),t.dirty()):se.assertNever(n);return{status:t.value,value:new Date(e.data.getTime())}}_addCheck(e){return new He({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:\\\"min\\\",value:e.getTime(),message:Be.toString(t)})}max(e,t){return this._addCheck({kind:\\\"max\\\",value:e.getTime(),message:Be.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)\\\"min\\\"===t.kind&&(null===e||t.value>e)&&(e=t.value);return null!=e?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)\\\"max\\\"===t.kind&&(null===e||t.value<e)&&(e=t.value);return null!=e?new Date(e):null}}He.create=e=>new He({checks:[],coerce:(null==e?void 0:e.coerce)||!1,typeName:Nt.ZodDate,...Ne(e)});class Ke extends Re{_parse(e){if(this._getType(e)!==fe.symbol){const t=this._getOrReturnCtx(e);return we(t,{code:he.invalid_type,expected:fe.symbol,received:t.parsedType}),_e}return xe(e.data)}}Ke.create=e=>new Ke({typeName:Nt.ZodSymbol,...Ne(e)});class We extends Re{_parse(e){if(this._getType(e)!==fe.undefined){const t=this._getOrReturnCtx(e);return we(t,{code:he.invalid_type,expected:fe.undefined,received:t.parsedType}),_e}return xe(e.data)}}We.create=e=>new We({typeName:Nt.ZodUndefined,...Ne(e)});class Je extends Re{_parse(e){if(this._getType(e)!==fe.null){const t=this._getOrReturnCtx(e);return we(t,{code:he.invalid_type,expected:fe.null,received:t.parsedType}),_e}return xe(e.data)}}Je.create=e=>new Je({typeName:Nt.ZodNull,...Ne(e)});class Ge extends Re{constructor(){super(...arguments),this._any=!0}_parse(e){return xe(e.data)}}Ge.create=e=>new Ge({typeName:Nt.ZodAny,...Ne(e)});class Ye extends Re{constructor(){super(...arguments),this._unknown=!0}_parse(e){return xe(e.data)}}Ye.create=e=>new Ye({typeName:Nt.ZodUnknown,...Ne(e)});class Xe extends Re{_parse(e){const t=this._getOrReturnCtx(e);return we(t,{code:he.invalid_type,expected:fe.never,received:t.parsedType}),_e}}Xe.create=e=>new Xe({typeName:Nt.ZodNever,...Ne(e)});class Qe extends Re{_parse(e){if(this._getType(e)!==fe.undefined){const t=this._getOrReturnCtx(e);return we(t,{code:he.invalid_type,expected:fe.void,received:t.parsedType}),_e}return xe(e.data)}}Qe.create=e=>new Qe({typeName:Nt.ZodVoid,...Ne(e)});class et extends Re{_parse(e){const{ctx:t,status:r}=this._processInputParams(e),n=this._def;if(t.parsedType!==fe.array)return we(t,{code:he.invalid_type,expected:fe.array,received:t.parsedType}),_e;if(null!==n.exactLength){const e=t.data.length>n.exactLength.value,i=t.data.length<n.exactLength.value;(e||i)&&(we(t,{code:e?he.too_big:he.too_small,minimum:i?n.exactLength.value:void 0,maximum:e?n.exactLength.value:void 0,type:\\\"array\\\",inclusive:!0,exact:!0,message:n.exactLength.message}),r.dirty())}if(null!==n.minLength&&t.data.length<n.minLength.value&&(we(t,{code:he.too_small,minimum:n.minLength.value,type:\\\"array\\\",inclusive:!0,exact:!1,message:n.minLength.message}),r.dirty()),null!==n.maxLength&&t.data.length>n.maxLength.value&&(we(t,{code:he.too_big,maximum:n.maxLength.value,type:\\\"array\\\",inclusive:!0,exact:!1,message:n.maxLength.message}),r.dirty()),t.common.async)return Promise.all([...t.data].map(((e,r)=>n.type._parseAsync(new Se(t,e,t.path,r))))).then((e=>be.mergeArray(r,e)));const i=[...t.data].map(((e,r)=>n.type._parseSync(new Se(t,e,t.path,r))));return be.mergeArray(r,i)}get element(){return this._def.type}min(e,t){return new et({...this._def,minLength:{value:e,message:Be.toString(t)}})}max(e,t){return new et({...this._def,maxLength:{value:e,message:Be.toString(t)}})}length(e,t){return new et({...this._def,exactLength:{value:e,message:Be.toString(t)}})}nonempty(e){return this.min(1,e)}}function tt(e){if(e instanceof rt){const t={};for(const r in e.shape){const n=e.shape[r];t[r]=bt.create(tt(n))}return new rt({...e._def,shape:()=>t})}return e instanceof et?new et({...e._def,type:tt(e.element)}):e instanceof bt?bt.create(tt(e.unwrap())):e instanceof _t?_t.create(tt(e.unwrap())):e instanceof ut?ut.create(e.items.map((e=>tt(e)))):e}et.create=(e,t)=>new et({type:e,minLength:null,maxLength:null,exactLength:null,typeName:Nt.ZodArray,...Ne(t)});class rt extends Re{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(null!==this._cached)return this._cached;const e=this._def.shape(),t=se.objectKeys(e);return this._cached={shape:e,keys:t}}_parse(e){if(this._getType(e)!==fe.object){const t=this._getOrReturnCtx(e);return we(t,{code:he.invalid_type,expected:fe.object,received:t.parsedType}),_e}const{status:t,ctx:r}=this._processInputParams(e),{shape:n,keys:i}=this._getCached(),s=[];if(!(this._def.catchall instanceof Xe&&\\\"strip\\\"===this._def.unknownKeys))for(const e in r.data)i.includes(e)||s.push(e);const o=[];for(const e of i){const t=n[e],i=r.data[e];o.push({key:{status:\\\"valid\\\",value:e},value:t._parse(new Se(r,i,r.path,e)),alwaysSet:e in r.data})}if(this._def.catchall instanceof Xe){const e=this._def.unknownKeys;if(\\\"passthrough\\\"===e)for(const e of s)o.push({key:{status:\\\"valid\\\",value:e},value:{status:\\\"valid\\\",value:r.data[e]}});else if(\\\"strict\\\"===e)s.length>0&&(we(r,{code:he.unrecognized_keys,keys:s}),t.dirty());else if(\\\"strip\\\"!==e)throw new Error(\\\"Internal ZodObject error: invalid unknownKeys value.\\\")}else{const e=this._def.catchall;for(const t of s){const n=r.data[t];o.push({key:{status:\\\"valid\\\",value:t},value:e._parse(new Se(r,n,r.path,t)),alwaysSet:t in r.data})}}return r.common.async?Promise.resolve().then((async()=>{const e=[];for(const t of o){const r=await t.key;e.push({key:r,value:await t.value,alwaysSet:t.alwaysSet})}return e})).then((e=>be.mergeObjectSync(t,e))):be.mergeObjectSync(t,o)}get shape(){return this._def.shape()}strict(e){return Be.errToObj,new rt({...this._def,unknownKeys:\\\"strict\\\",...void 0!==e?{errorMap:(t,r)=>{var n,i,s,o;const a=null!==(s=null===(i=(n=this._def).errorMap)||void 0===i?void 0:i.call(n,t,r).message)&&void 0!==s?s:r.defaultError;return\\\"unrecognized_keys\\\"===t.code?{message:null!==(o=Be.errToObj(e).message)&&void 0!==o?o:a}:{message:a}}}:{}})}strip(){return new rt({...this._def,unknownKeys:\\\"strip\\\"})}passthrough(){return new rt({...this._def,unknownKeys:\\\"passthrough\\\"})}extend(e){return new rt({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new rt({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:Nt.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new rt({...this._def,catchall:e})}pick(e){const t={};return se.objectKeys(e).forEach((r=>{e[r]&&this.shape[r]&&(t[r]=this.shape[r])})),new rt({...this._def,shape:()=>t})}omit(e){const t={};return se.objectKeys(this.shape).forEach((r=>{e[r]||(t[r]=this.shape[r])})),new rt({...this._def,shape:()=>t})}deepPartial(){return tt(this)}partial(e){const t={};return se.objectKeys(this.shape).forEach((r=>{const n=this.shape[r];e&&!e[r]?t[r]=n:t[r]=n.optional()})),new rt({...this._def,shape:()=>t})}required(e){const t={};return se.objectKeys(this.shape).forEach((r=>{if(e&&!e[r])t[r]=this.shape[r];else{let e=this.shape[r];for(;e instanceof bt;)e=e._def.innerType;t[r]=e}})),new rt({...this._def,shape:()=>t})}keyof(){return yt(se.objectKeys(this.shape))}}rt.create=(e,t)=>new rt({shape:()=>e,unknownKeys:\\\"strip\\\",catchall:Xe.create(),typeName:Nt.ZodObject,...Ne(t)}),rt.strictCreate=(e,t)=>new rt({shape:()=>e,unknownKeys:\\\"strict\\\",catchall:Xe.create(),typeName:Nt.ZodObject,...Ne(t)}),rt.lazycreate=(e,t)=>new rt({shape:e,unknownKeys:\\\"strip\\\",catchall:Xe.create(),typeName:Nt.ZodObject,...Ne(t)});class nt extends Re{_parse(e){const{ctx:t}=this._processInputParams(e),r=this._def.options;if(t.common.async)return Promise.all(r.map((async e=>{const r={...t,common:{...t.common,issues:[]},parent:null};return{result:await e._parseAsync({data:t.data,path:t.path,parent:r}),ctx:r}}))).then((function(e){for(const t of e)if(\\\"valid\\\"===t.result.status)return t.result;for(const r of e)if(\\\"dirty\\\"===r.result.status)return t.common.issues.push(...r.ctx.common.issues),r.result;const r=e.map((e=>new pe(e.ctx.common.issues)));return we(t,{code:he.invalid_union,unionErrors:r}),_e}));{let e;const n=[];for(const i of r){const r={...t,common:{...t.common,issues:[]},parent:null},s=i._parseSync({data:t.data,path:t.path,parent:r});if(\\\"valid\\\"===s.status)return s;\\\"dirty\\\"!==s.status||e||(e={result:s,ctx:r}),r.common.issues.length&&n.push(r.common.issues)}if(e)return t.common.issues.push(...e.ctx.common.issues),e.result;const i=n.map((e=>new pe(e)));return we(t,{code:he.invalid_union,unionErrors:i}),_e}}get options(){return this._def.options}}nt.create=(e,t)=>new nt({options:e,typeName:Nt.ZodUnion,...Ne(t)});const it=e=>e instanceof ht?it(e.schema):e instanceof wt?it(e.innerType()):e instanceof pt?[e.value]:e instanceof mt?e.options:e instanceof gt?Object.keys(e.enum):e instanceof Et?it(e._def.innerType):e instanceof We?[void 0]:e instanceof Je?[null]:null;class st extends Re{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==fe.object)return we(t,{code:he.invalid_type,expected:fe.object,received:t.parsedType}),_e;const r=this.discriminator,n=t.data[r],i=this.optionsMap.get(n);return i?t.common.async?i._parseAsync({data:t.data,path:t.path,parent:t}):i._parseSync({data:t.data,path:t.path,parent:t}):(we(t,{code:he.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),_e)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,r){const n=new Map;for(const r of t){const t=it(r.shape[e]);if(!t)throw new Error(`A discriminator value for key \\\\`${e}\\\\` could not be extracted from all schema options`);for(const i of t){if(n.has(i))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(i)}`);n.set(i,r)}}return new st({typeName:Nt.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:n,...Ne(r)})}}function ot(e,t){const r=le(e),n=le(t);if(e===t)return{valid:!0,data:e};if(r===fe.object&&n===fe.object){const r=se.objectKeys(t),n=se.objectKeys(e).filter((e=>-1!==r.indexOf(e))),i={...e,...t};for(const r of n){const n=ot(e[r],t[r]);if(!n.valid)return{valid:!1};i[r]=n.data}return{valid:!0,data:i}}if(r===fe.array&&n===fe.array){if(e.length!==t.length)return{valid:!1};const r=[];for(let n=0;n<e.length;n++){const i=ot(e[n],t[n]);if(!i.valid)return{valid:!1};r.push(i.data)}return{valid:!0,data:r}}return r===fe.date&&n===fe.date&&+e==+t?{valid:!0,data:e}:{valid:!1}}class at extends Re{_parse(e){const{status:t,ctx:r}=this._processInputParams(e),n=(e,n)=>{if(ke(e)||ke(n))return _e;const i=ot(e.value,n.value);return i.valid?((Ie(e)||Ie(n))&&t.dirty(),{status:t.value,value:i.data}):(we(r,{code:he.invalid_intersection_types}),_e)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then((([e,t])=>n(e,t))):n(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}at.create=(e,t,r)=>new at({left:e,right:t,typeName:Nt.ZodIntersection,...Ne(r)});class ut extends Re{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==fe.array)return we(r,{code:he.invalid_type,expected:fe.array,received:r.parsedType}),_e;if(r.data.length<this._def.items.length)return we(r,{code:he.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:\\\"array\\\"}),_e;!this._def.rest&&r.data.length>this._def.items.length&&(we(r,{code:he.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:\\\"array\\\"}),t.dirty());const n=[...r.data].map(((e,t)=>{const n=this._def.items[t]||this._def.rest;return n?n._parse(new Se(r,e,r.path,t)):null})).filter((e=>!!e));return r.common.async?Promise.all(n).then((e=>be.mergeArray(t,e))):be.mergeArray(t,n)}get items(){return this._def.items}rest(e){return new ut({...this._def,rest:e})}}ut.create=(e,t)=>{if(!Array.isArray(e))throw new Error(\\\"You must pass an array of schemas to z.tuple([ ... ])\\\");return new ut({items:e,typeName:Nt.ZodTuple,rest:null,...Ne(t)})};class ct extends Re{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==fe.object)return we(r,{code:he.invalid_type,expected:fe.object,received:r.parsedType}),_e;const n=[],i=this._def.keyType,s=this._def.valueType;for(const e in r.data)n.push({key:i._parse(new Se(r,e,r.path,e)),value:s._parse(new Se(r,r.data[e],r.path,e))});return r.common.async?be.mergeObjectAsync(t,n):be.mergeObjectSync(t,n)}get element(){return this._def.valueType}static create(e,t,r){return new ct(t instanceof Re?{keyType:e,valueType:t,typeName:Nt.ZodRecord,...Ne(r)}:{keyType:ze.create(),valueType:e,typeName:Nt.ZodRecord,...Ne(t)})}}class dt extends Re{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==fe.map)return we(r,{code:he.invalid_type,expected:fe.map,received:r.parsedType}),_e;const n=this._def.keyType,i=this._def.valueType,s=[...r.data.entries()].map((([e,t],s)=>({key:n._parse(new Se(r,e,r.path,[s,\\\"key\\\"])),value:i._parse(new Se(r,t,r.path,[s,\\\"value\\\"]))})));if(r.common.async){const e=new Map;return Promise.resolve().then((async()=>{for(const r of s){const n=await r.key,i=await r.value;if(\\\"aborted\\\"===n.status||\\\"aborted\\\"===i.status)return _e;\\\"dirty\\\"!==n.status&&\\\"dirty\\\"!==i.status||t.dirty(),e.set(n.value,i.value)}return{status:t.value,value:e}}))}{const e=new Map;for(const r of s){const n=r.key,i=r.value;if(\\\"aborted\\\"===n.status||\\\"aborted\\\"===i.status)return _e;\\\"dirty\\\"!==n.status&&\\\"dirty\\\"!==i.status||t.dirty(),e.set(n.value,i.value)}return{status:t.value,value:e}}}}dt.create=(e,t,r)=>new dt({valueType:t,keyType:e,typeName:Nt.ZodMap,...Ne(r)});class ft extends Re{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==fe.set)return we(r,{code:he.invalid_type,expected:fe.set,received:r.parsedType}),_e;const n=this._def;null!==n.minSize&&r.data.size<n.minSize.value&&(we(r,{code:he.too_small,minimum:n.minSize.value,type:\\\"set\\\",inclusive:!0,exact:!1,message:n.minSize.message}),t.dirty()),null!==n.maxSize&&r.data.size>n.maxSize.value&&(we(r,{code:he.too_big,maximum:n.maxSize.value,type:\\\"set\\\",inclusive:!0,exact:!1,message:n.maxSize.message}),t.dirty());const i=this._def.valueType;function s(e){const r=new Set;for(const n of e){if(\\\"aborted\\\"===n.status)return _e;\\\"dirty\\\"===n.status&&t.dirty(),r.add(n.value)}return{status:t.value,value:r}}const o=[...r.data.values()].map(((e,t)=>i._parse(new Se(r,e,r.path,t))));return r.common.async?Promise.all(o).then((e=>s(e))):s(o)}min(e,t){return new ft({...this._def,minSize:{value:e,message:Be.toString(t)}})}max(e,t){return new ft({...this._def,maxSize:{value:e,message:Be.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}ft.create=(e,t)=>new ft({valueType:e,minSize:null,maxSize:null,typeName:Nt.ZodSet,...Ne(t)});class lt extends Re{constructor(){super(...arguments),this.validate=this.implement}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==fe.function)return we(t,{code:he.invalid_type,expected:fe.function,received:t.parsedType}),_e;function r(e,r){return ve({data:e,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,ge(),ye].filter((e=>!!e)),issueData:{code:he.invalid_arguments,argumentsError:r}})}function n(e,r){return ve({data:e,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,ge(),ye].filter((e=>!!e)),issueData:{code:he.invalid_return_type,returnTypeError:r}})}const i={errorMap:t.common.contextualErrorMap},s=t.data;if(this._def.returns instanceof vt){const e=this;return xe((async function(...t){const o=new pe([]),a=await e._def.args.parseAsync(t,i).catch((e=>{throw o.addIssue(r(t,e)),o})),u=await Reflect.apply(s,this,a);return await e._def.returns._def.type.parseAsync(u,i).catch((e=>{throw o.addIssue(n(u,e)),o}))}))}{const e=this;return xe((function(...t){const o=e._def.args.safeParse(t,i);if(!o.success)throw new pe([r(t,o.error)]);const a=Reflect.apply(s,this,o.data),u=e._def.returns.safeParse(a,i);if(!u.success)throw new pe([n(a,u.error)]);return u.data}))}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...e){return new lt({...this._def,args:ut.create(e).rest(Ye.create())})}returns(e){return new lt({...this._def,returns:e})}implement(e){return this.parse(e)}strictImplement(e){return this.parse(e)}static create(e,t,r){return new lt({args:e||ut.create([]).rest(Ye.create()),returns:t||Ye.create(),typeName:Nt.ZodFunction,...Ne(r)})}}class ht extends Re{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}ht.create=(e,t)=>new ht({getter:e,typeName:Nt.ZodLazy,...Ne(t)});class pt extends Re{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return we(t,{received:t.data,code:he.invalid_literal,expected:this._def.value}),_e}return{status:\\\"valid\\\",value:e.data}}get value(){return this._def.value}}function yt(e,t){return new mt({values:e,typeName:Nt.ZodEnum,...Ne(t)})}pt.create=(e,t)=>new pt({value:e,typeName:Nt.ZodLiteral,...Ne(t)});class mt extends Re{_parse(e){if(\\\"string\\\"!=typeof e.data){const t=this._getOrReturnCtx(e),r=this._def.values;return we(t,{expected:se.joinValues(r),received:t.parsedType,code:he.invalid_type}),_e}if(-1===this._def.values.indexOf(e.data)){const t=this._getOrReturnCtx(e),r=this._def.values;return we(t,{received:t.data,code:he.invalid_enum_value,options:r}),_e}return xe(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e){return mt.create(e)}exclude(e){return mt.create(this.options.filter((t=>!e.includes(t))))}}mt.create=yt;class gt extends Re{_parse(e){const t=se.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==fe.string&&r.parsedType!==fe.number){const e=se.objectValues(t);return we(r,{expected:se.joinValues(e),received:r.parsedType,code:he.invalid_type}),_e}if(-1===t.indexOf(e.data)){const e=se.objectValues(t);return we(r,{received:r.data,code:he.invalid_enum_value,options:e}),_e}return xe(e.data)}get enum(){return this._def.values}}gt.create=(e,t)=>new gt({values:e,typeName:Nt.ZodNativeEnum,...Ne(t)});class vt extends Re{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==fe.promise&&!1===t.common.async)return we(t,{code:he.invalid_type,expected:fe.promise,received:t.parsedType}),_e;const r=t.parsedType===fe.promise?t.data:Promise.resolve(t.data);return xe(r.then((e=>this._def.type.parseAsync(e,{path:t.path,errorMap:t.common.contextualErrorMap}))))}}vt.create=(e,t)=>new vt({type:e,typeName:Nt.ZodPromise,...Ne(t)});class wt extends Re{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===Nt.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:r}=this._processInputParams(e),n=this._def.effect||null,i={addIssue:e=>{we(r,e),e.fatal?t.abort():t.dirty()},get path(){return r.path}};if(i.addIssue=i.addIssue.bind(i),\\\"preprocess\\\"===n.type){const e=n.transform(r.data,i);return r.common.issues.length?{status:\\\"dirty\\\",value:r.data}:r.common.async?Promise.resolve(e).then((e=>this._def.schema._parseAsync({data:e,path:r.path,parent:r}))):this._def.schema._parseSync({data:e,path:r.path,parent:r})}if(\\\"refinement\\\"===n.type){const e=e=>{const t=n.refinement(e,i);if(r.common.async)return Promise.resolve(t);if(t instanceof Promise)throw new Error(\\\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\\\");return e};if(!1===r.common.async){const n=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return\\\"aborted\\\"===n.status?_e:(\\\"dirty\\\"===n.status&&t.dirty(),e(n.value),{status:t.value,value:n.value})}return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then((r=>\\\"aborted\\\"===r.status?_e:(\\\"dirty\\\"===r.status&&t.dirty(),e(r.value).then((()=>({status:t.value,value:r.value}))))))}if(\\\"transform\\\"===n.type){if(!1===r.common.async){const e=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!Ae(e))return e;const s=n.transform(e.value,i);if(s instanceof Promise)throw new Error(\\\"Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.\\\");return{status:t.value,value:s}}return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then((e=>Ae(e)?Promise.resolve(n.transform(e.value,i)).then((e=>({status:t.value,value:e}))):e))}se.assertNever(n)}}wt.create=(e,t,r)=>new wt({schema:e,typeName:Nt.ZodEffects,effect:t,...Ne(r)}),wt.createWithPreprocess=(e,t,r)=>new wt({schema:t,effect:{type:\\\"preprocess\\\",transform:e},typeName:Nt.ZodEffects,...Ne(r)});class bt extends Re{_parse(e){return this._getType(e)===fe.undefined?xe(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}bt.create=(e,t)=>new bt({innerType:e,typeName:Nt.ZodOptional,...Ne(t)});class _t extends Re{_parse(e){return this._getType(e)===fe.null?xe(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}_t.create=(e,t)=>new _t({innerType:e,typeName:Nt.ZodNullable,...Ne(t)});class Et extends Re{_parse(e){const{ctx:t}=this._processInputParams(e);let r=t.data;return t.parsedType===fe.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}Et.create=(e,t)=>new Et({innerType:e,typeName:Nt.ZodDefault,defaultValue:\\\"function\\\"==typeof t.default?t.default:()=>t.default,...Ne(t)});class xt extends Re{_parse(e){const{ctx:t}=this._processInputParams(e),r={...t,common:{...t.common,issues:[]}},n=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return Oe(n)?n.then((e=>({status:\\\"valid\\\",value:\\\"valid\\\"===e.status?e.value:this._def.catchValue({get error(){return new pe(r.common.issues)},input:r.data})}))):{status:\\\"valid\\\",value:\\\"valid\\\"===n.status?n.value:this._def.catchValue({get error(){return new pe(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}xt.create=(e,t)=>new xt({innerType:e,typeName:Nt.ZodCatch,catchValue:\\\"function\\\"==typeof t.catch?t.catch:()=>t.catch,...Ne(t)});class kt extends Re{_parse(e){if(this._getType(e)!==fe.nan){const t=this._getOrReturnCtx(e);return we(t,{code:he.invalid_type,expected:fe.nan,received:t.parsedType}),_e}return{status:\\\"valid\\\",value:e.data}}}kt.create=e=>new kt({typeName:Nt.ZodNaN,...Ne(e)});const It=Symbol(\\\"zod_brand\\\");class At extends Re{_parse(e){const{ctx:t}=this._processInputParams(e),r=t.data;return this._def.type._parse({data:r,path:t.path,parent:t})}unwrap(){return this._def.type}}class Ot extends Re{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.common.async){return(async()=>{const e=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return\\\"aborted\\\"===e.status?_e:\\\"dirty\\\"===e.status?(t.dirty(),Ee(e.value)):this._def.out._parseAsync({data:e.value,path:r.path,parent:r})})()}{const e=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return\\\"aborted\\\"===e.status?_e:\\\"dirty\\\"===e.status?(t.dirty(),{status:\\\"dirty\\\",value:e.value}):this._def.out._parseSync({data:e.value,path:r.path,parent:r})}}static create(e,t){return new Ot({in:e,out:t,typeName:Nt.ZodPipeline})}}class Bt extends Re{_parse(e){const t=this._def.innerType._parse(e);return Ae(t)&&(t.value=Object.freeze(t.value)),t}}Bt.create=(e,t)=>new Bt({innerType:e,typeName:Nt.ZodReadonly,...Ne(t)});const St=(e,t={},r)=>e?Ge.create().superRefine(((n,i)=>{var s,o;if(!e(n)){const e=\\\"function\\\"==typeof t?t(n):\\\"string\\\"==typeof t?{message:t}:t,a=null===(o=null!==(s=e.fatal)&&void 0!==s?s:r)||void 0===o||o,u=\\\"string\\\"==typeof e?{message:e}:e;i.addIssue({code:\\\"custom\\\",...u,fatal:a})}})):Ge.create(),Tt={object:rt.lazycreate};var Nt;!function(e){e.ZodString=\\\"ZodString\\\",e.ZodNumber=\\\"ZodNumber\\\",e.ZodNaN=\\\"ZodNaN\\\",e.ZodBigInt=\\\"ZodBigInt\\\",e.ZodBoolean=\\\"ZodBoolean\\\",e.ZodDate=\\\"ZodDate\\\",e.ZodSymbol=\\\"ZodSymbol\\\",e.ZodUndefined=\\\"ZodUndefined\\\",e.ZodNull=\\\"ZodNull\\\",e.ZodAny=\\\"ZodAny\\\",e.ZodUnknown=\\\"ZodUnknown\\\",e.ZodNever=\\\"ZodNever\\\",e.ZodVoid=\\\"ZodVoid\\\",e.ZodArray=\\\"ZodArray\\\",e.ZodObject=\\\"ZodObject\\\",e.ZodUnion=\\\"ZodUnion\\\",e.ZodDiscriminatedUnion=\\\"ZodDiscriminatedUnion\\\",e.ZodIntersection=\\\"ZodIntersection\\\",e.ZodTuple=\\\"ZodTuple\\\",e.ZodRecord=\\\"ZodRecord\\\",e.ZodMap=\\\"ZodMap\\\",e.ZodSet=\\\"ZodSet\\\",e.ZodFunction=\\\"ZodFunction\\\",e.ZodLazy=\\\"ZodLazy\\\",e.ZodLiteral=\\\"ZodLiteral\\\",e.ZodEnum=\\\"ZodEnum\\\",e.ZodEffects=\\\"ZodEffects\\\",e.ZodNativeEnum=\\\"ZodNativeEnum\\\",e.ZodOptional=\\\"ZodOptional\\\",e.ZodNullable=\\\"ZodNullable\\\",e.ZodDefault=\\\"ZodDefault\\\",e.ZodCatch=\\\"ZodCatch\\\",e.ZodPromise=\\\"ZodPromise\\\",e.ZodBranded=\\\"ZodBranded\\\",e.ZodPipeline=\\\"ZodPipeline\\\",e.ZodReadonly=\\\"ZodReadonly\\\"}(Nt||(Nt={}));const Rt=ze.create,Zt=qe.create,Ct=kt.create,jt=De.create,Ut=Ve.create,Pt=He.create,Lt=Ke.create,$t=We.create,Mt=Je.create,zt=Ge.create,Ft=Ye.create,qt=Xe.create,Dt=Qe.create,Vt=et.create,Ht=rt.create,Kt=rt.strictCreate,Wt=nt.create,Jt=st.create,Gt=at.create,Yt=ut.create,Xt=ct.create,Qt=dt.create,er=ft.create,tr=lt.create,rr=ht.create,nr=pt.create,ir=mt.create,sr=gt.create,or=vt.create,ar=wt.create,ur=bt.create,cr=_t.create,dr=wt.createWithPreprocess,fr=Ot.create,lr={string:e=>ze.create({...e,coerce:!0}),number:e=>qe.create({...e,coerce:!0}),boolean:e=>Ve.create({...e,coerce:!0}),bigint:e=>De.create({...e,coerce:!0}),date:e=>He.create({...e,coerce:!0})},hr=_e;var pr=Object.freeze({__proto__:null,defaultErrorMap:ye,setErrorMap:function(e){me=e},getErrorMap:ge,makeIssue:ve,EMPTY_PATH:[],addIssueToContext:we,ParseStatus:be,INVALID:_e,DIRTY:Ee,OK:xe,isAborted:ke,isDirty:Ie,isValid:Ae,isAsync:Oe,get util(){return se},get objectUtil(){return oe},ZodParsedType:fe,getParsedType:le,ZodType:Re,ZodString:ze,ZodNumber:qe,ZodBigInt:De,ZodBoolean:Ve,ZodDate:He,ZodSymbol:Ke,ZodUndefined:We,ZodNull:Je,ZodAny:Ge,ZodUnknown:Ye,ZodNever:Xe,ZodVoid:Qe,ZodArray:et,ZodObject:rt,ZodUnion:nt,ZodDiscriminatedUnion:st,ZodIntersection:at,ZodTuple:ut,ZodRecord:ct,ZodMap:dt,ZodSet:ft,ZodFunction:lt,ZodLazy:ht,ZodLiteral:pt,ZodEnum:mt,ZodNativeEnum:gt,ZodPromise:vt,ZodEffects:wt,ZodTransformer:wt,ZodOptional:bt,ZodNullable:_t,ZodDefault:Et,ZodCatch:xt,ZodNaN:kt,BRAND:It,ZodBranded:At,ZodPipeline:Ot,ZodReadonly:Bt,custom:St,Schema:Re,ZodSchema:Re,late:Tt,get ZodFirstPartyTypeKind(){return Nt},coerce:lr,any:zt,array:Vt,bigint:jt,boolean:Ut,date:Pt,discriminatedUnion:Jt,effect:ar,enum:ir,function:tr,instanceof:(e,t={message:`Input not instance of ${e.name}`})=>St((t=>t instanceof e),t),intersection:Gt,lazy:rr,literal:nr,map:Qt,nan:Ct,nativeEnum:sr,never:qt,null:Mt,nullable:cr,number:Zt,object:Ht,oboolean:()=>Ut().optional(),onumber:()=>Zt().optional(),optional:ur,ostring:()=>Rt().optional(),pipeline:fr,preprocess:dr,promise:or,record:Xt,set:er,strictObject:Kt,string:Rt,symbol:Lt,transformer:ar,tuple:Yt,undefined:$t,union:Wt,unknown:Ft,void:Dt,NEVER:hr,ZodIssueCode:he,quotelessJson:e=>JSON.stringify(e,null,2).replace(/\\\"([^\\\"]+)\\\":/g,\\\"$1:\\\"),ZodError:pe});function yr(e){if(!Number.isSafeInteger(e)||e<0)throw new Error(`positive integer expected, not ${e}`)}function mr(e,...t){if(!((r=e)instanceof Uint8Array||null!=r&&\\\"object\\\"==typeof r&&\\\"Uint8Array\\\"===r.constructor.name))throw new Error(\\\"Uint8Array expected\\\");var r;if(t.length>0&&!t.includes(e.length))throw new Error(`Uint8Array expected of length ${t}, not of length=${e.length}`)}function gr(e){if(\\\"function\\\"!=typeof e||\\\"function\\\"!=typeof e.create)throw new Error(\\\"Hash should be wrapped by utils.wrapConstructor\\\");yr(e.outputLen),yr(e.blockLen)}function vr(e,t=!0){if(e.destroyed)throw new Error(\\\"Hash instance has been destroyed\\\");if(t&&e.finished)throw new Error(\\\"Hash#digest() has already been called\\\")}function wr(e,t){mr(e);const r=t.outputLen;if(e.length<r)throw new Error(`digestInto() expects output buffer of length at least ${r}`)}const br=\\\"object\\\"==typeof globalThis&&\\\"crypto\\\"in globalThis?globalThis.crypto:void 0;const _r=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),Er=(e,t)=>e<<32-t|e>>>t;new Uint8Array(new Uint32Array([287454020]).buffer)[0];Array.from({length:256},((e,t)=>t.toString(16).padStart(2,\\\"0\\\")));function xr(e){return\\\"string\\\"==typeof e&&(e=function(e){if(\\\"string\\\"!=typeof e)throw new Error(\\\"utf8ToBytes expected string, got \\\"+typeof e);return new Uint8Array((new TextEncoder).encode(e))}(e)),mr(e),e}class kr{clone(){return this._cloneInto()}}function Ir(e=32){if(br&&\\\"function\\\"==typeof br.getRandomValues)return br.getRandomValues(new Uint8Array(e));throw new Error(\\\"crypto.getRandomValues must be defined\\\")}const Ar=(e,t,r)=>e&t^e&r^t&r;class Or extends kr{constructor(e,t,r,n){super(),this.blockLen=e,this.outputLen=t,this.padOffset=r,this.isLE=n,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(e),this.view=_r(this.buffer)}update(e){vr(this);const{view:t,buffer:r,blockLen:n}=this,i=(e=xr(e)).length;for(let s=0;s<i;){const o=Math.min(n-this.pos,i-s);if(o!==n)r.set(e.subarray(s,s+o),this.pos),this.pos+=o,s+=o,this.pos===n&&(this.process(t,0),this.pos=0);else{const t=_r(e);for(;n<=i-s;s+=n)this.process(t,s)}}return this.length+=e.length,this.roundClean(),this}digestInto(e){vr(this),wr(e,this),this.finished=!0;const{buffer:t,view:r,blockLen:n,isLE:i}=this;let{pos:s}=this;t[s++]=128,this.buffer.subarray(s).fill(0),this.padOffset>n-s&&(this.process(r,0),s=0);for(let e=s;e<n;e++)t[e]=0;!function(e,t,r,n){if(\\\"function\\\"==typeof e.setBigUint64)return e.setBigUint64(t,r,n);const i=BigInt(32),s=BigInt(4294967295),o=Number(r>>i&s),a=Number(r&s),u=n?4:0,c=n?0:4;e.setUint32(t+u,o,n),e.setUint32(t+c,a,n)}(r,n-8,BigInt(8*this.length),i),this.process(r,0);const o=_r(e),a=this.outputLen;if(a%4)throw new Error(\\\"_sha2: outputLen should be aligned to 32bit\\\");const u=a/4,c=this.get();if(u>c.length)throw new Error(\\\"_sha2: outputLen bigger than state\\\");for(let e=0;e<u;e++)o.setUint32(4*e,c[e],i)}digest(){const{buffer:e,outputLen:t}=this;this.digestInto(e);const r=e.slice(0,t);return this.destroy(),r}_cloneInto(e){e||(e=new this.constructor),e.set(...this.get());const{blockLen:t,buffer:r,length:n,finished:i,destroyed:s,pos:o}=this;return e.length=n,e.pos=o,e.finished=i,e.destroyed=s,n%t&&e.buffer.set(r),e}}const Br=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),Sr=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),Tr=new Uint32Array(64);class Nr extends Or{constructor(){super(64,32,8,!1),this.A=0|Sr[0],this.B=0|Sr[1],this.C=0|Sr[2],this.D=0|Sr[3],this.E=0|Sr[4],this.F=0|Sr[5],this.G=0|Sr[6],this.H=0|Sr[7]}get(){const{A:e,B:t,C:r,D:n,E:i,F:s,G:o,H:a}=this;return[e,t,r,n,i,s,o,a]}set(e,t,r,n,i,s,o,a){this.A=0|e,this.B=0|t,this.C=0|r,this.D=0|n,this.E=0|i,this.F=0|s,this.G=0|o,this.H=0|a}process(e,t){for(let r=0;r<16;r++,t+=4)Tr[r]=e.getUint32(t,!1);for(let e=16;e<64;e++){const t=Tr[e-15],r=Tr[e-2],n=Er(t,7)^Er(t,18)^t>>>3,i=Er(r,17)^Er(r,19)^r>>>10;Tr[e]=i+Tr[e-7]+n+Tr[e-16]|0}let{A:r,B:n,C:i,D:s,E:o,F:a,G:u,H:c}=this;for(let e=0;e<64;e++){const t=c+(Er(o,6)^Er(o,11)^Er(o,25))+((d=o)&a^~d&u)+Br[e]+Tr[e]|0,f=(Er(r,2)^Er(r,13)^Er(r,22))+Ar(r,n,i)|0;c=u,u=a,a=o,o=s+t|0,s=i,i=n,n=r,r=t+f|0}var d;r=r+this.A|0,n=n+this.B|0,i=i+this.C|0,s=s+this.D|0,o=o+this.E|0,a=a+this.F|0,u=u+this.G|0,c=c+this.H|0,this.set(r,n,i,s,o,a,u,c)}roundClean(){Tr.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const Rr=function(e){const t=t=>e().update(xr(t)).digest(),r=e();return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=()=>e(),t}((()=>new Nr)),Zr=(BigInt(0),BigInt(1)),Cr=BigInt(2);function jr(e){return e instanceof Uint8Array||null!=e&&\\\"object\\\"==typeof e&&\\\"Uint8Array\\\"===e.constructor.name}function Ur(e){if(!jr(e))throw new Error(\\\"Uint8Array expected\\\")}const Pr=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,\\\"0\\\")));function Lr(e){Ur(e);let t=\\\"\\\";for(let r=0;r<e.length;r++)t+=Pr[e[r]];return t}function $r(e){if(\\\"string\\\"!=typeof e)throw new Error(\\\"hex string expected, got \\\"+typeof e);return BigInt(\\\"\\\"===e?\\\"0\\\":`0x${e}`)}const Mr={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function zr(e){return e>=Mr._0&&e<=Mr._9?e-Mr._0:e>=Mr._A&&e<=Mr._F?e-(Mr._A-10):e>=Mr._a&&e<=Mr._f?e-(Mr._a-10):void 0}function Fr(e){if(\\\"string\\\"!=typeof e)throw new Error(\\\"hex string expected, got \\\"+typeof e);const t=e.length,r=t/2;if(t%2)throw new Error(\\\"padded hex string expected, got unpadded hex of length \\\"+t);const n=new Uint8Array(r);for(let t=0,i=0;t<r;t++,i+=2){const r=zr(e.charCodeAt(i)),s=zr(e.charCodeAt(i+1));if(void 0===r||void 0===s){const t=e[i]+e[i+1];throw new Error('hex string expected, got non-hex character \\\"'+t+'\\\" at index '+i)}n[t]=16*r+s}return n}function qr(e){return $r(Lr(e))}function Dr(e){return Ur(e),$r(Lr(Uint8Array.from(e).reverse()))}function Vr(e,t){return Fr(e.toString(16).padStart(2*t,\\\"0\\\"))}function Hr(e,t){return Vr(e,t).reverse()}function Kr(e,t,r){let n;if(\\\"string\\\"==typeof t)try{n=Fr(t)}catch(r){throw new Error(`${e} must be valid hex string, got \\\"${t}\\\". Cause: ${r}`)}else{if(!jr(t))throw new Error(`${e} must be hex string or Uint8Array`);n=Uint8Array.from(t)}const i=n.length;if(\\\"number\\\"==typeof r&&i!==r)throw new Error(`${e} expected ${r} bytes, got ${i}`);return n}function Wr(...e){let t=0;for(let r=0;r<e.length;r++){const n=e[r];Ur(n),t+=n.length}const r=new Uint8Array(t);for(let t=0,n=0;t<e.length;t++){const i=e[t];r.set(i,n),n+=i.length}return r}const Jr=e=>(Cr<<BigInt(e-1))-Zr,Gr=e=>new Uint8Array(e),Yr=e=>Uint8Array.from(e);function Xr(e,t,r){if(\\\"number\\\"!=typeof e||e<2)throw new Error(\\\"hashLen must be a number\\\");if(\\\"number\\\"!=typeof t||t<2)throw new Error(\\\"qByteLen must be a number\\\");if(\\\"function\\\"!=typeof r)throw new Error(\\\"hmacFn must be a function\\\");let n=Gr(e),i=Gr(e),s=0;const o=()=>{n.fill(1),i.fill(0),s=0},a=(...e)=>r(i,n,...e),u=(e=Gr())=>{i=a(Yr([0]),e),n=a(),0!==e.length&&(i=a(Yr([1]),e),n=a())},c=()=>{if(s++>=1e3)throw new Error(\\\"drbg: tried 1000 values\\\");let e=0;const r=[];for(;e<t;){n=a();const t=n.slice();r.push(t),e+=n.length}return Wr(...r)};return(e,t)=>{let r;for(o(),u(e);!(r=t(c()));)u();return o(),r}}const Qr={bigint:e=>\\\"bigint\\\"==typeof e,function:e=>\\\"function\\\"==typeof e,boolean:e=>\\\"boolean\\\"==typeof e,string:e=>\\\"string\\\"==typeof e,stringOrUint8Array:e=>\\\"string\\\"==typeof e||jr(e),isSafeInteger:e=>Number.isSafeInteger(e),array:e=>Array.isArray(e),field:(e,t)=>t.Fp.isValid(e),hash:e=>\\\"function\\\"==typeof e&&Number.isSafeInteger(e.outputLen)};function en(e,t,r={}){const n=(t,r,n)=>{const i=Qr[r];if(\\\"function\\\"!=typeof i)throw new Error(`Invalid validator \\\"${r}\\\", expected function`);const s=e[t];if(!(n&&void 0===s||i(s,e)))throw new Error(`Invalid param ${String(t)}=${s} (${typeof s}), expected ${r}`)};for(const[e,r]of Object.entries(t))n(e,r,!1);for(const[e,t]of Object.entries(r))n(e,t,!0);return e}const tn=BigInt(0),rn=BigInt(1),nn=BigInt(2),sn=BigInt(3),on=BigInt(4),an=BigInt(5),un=BigInt(8);BigInt(9),BigInt(16);function cn(e,t){const r=e%t;return r>=tn?r:t+r}function dn(e,t,r){if(r<=tn||t<tn)throw new Error(\\\"Expected power/modulo > 0\\\");if(r===rn)return tn;let n=rn;for(;t>tn;)t&rn&&(n=n*e%r),e=e*e%r,t>>=rn;return n}function fn(e,t,r){let n=e;for(;t-- >tn;)n*=n,n%=r;return n}function ln(e,t){if(e===tn||t<=tn)throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);let r=cn(e,t),n=t,i=tn,s=rn,o=rn,a=tn;for(;r!==tn;){const e=n/r,t=n%r,u=i-o*e,c=s-a*e;n=r,r=t,i=o,s=a,o=u,a=c}if(n!==rn)throw new Error(\\\"invert: does not exist\\\");return cn(i,t)}function hn(e){if(e%on===sn){const t=(e+rn)/on;return function(e,r){const n=e.pow(r,t);if(!e.eql(e.sqr(n),r))throw new Error(\\\"Cannot find square root\\\");return n}}if(e%un===an){const t=(e-an)/un;return function(e,r){const n=e.mul(r,nn),i=e.pow(n,t),s=e.mul(r,i),o=e.mul(e.mul(s,nn),i),a=e.mul(s,e.sub(o,e.ONE));if(!e.eql(e.sqr(a),r))throw new Error(\\\"Cannot find square root\\\");return a}}return function(e){const t=(e-rn)/nn;let r,n,i;for(r=e-rn,n=0;r%nn===tn;r/=nn,n++);for(i=nn;i<e&&dn(i,t,e)!==e-rn;i++);if(1===n){const t=(e+rn)/on;return function(e,r){const n=e.pow(r,t);if(!e.eql(e.sqr(n),r))throw new Error(\\\"Cannot find square root\\\");return n}}const s=(r+rn)/nn;return function(e,o){if(e.pow(o,t)===e.neg(e.ONE))throw new Error(\\\"Cannot find square root\\\");let a=n,u=e.pow(e.mul(e.ONE,i),r),c=e.pow(o,s),d=e.pow(o,r);for(;!e.eql(d,e.ONE);){if(e.eql(d,e.ZERO))return e.ZERO;let t=1;for(let r=e.sqr(d);t<a&&!e.eql(r,e.ONE);t++)r=e.sqr(r);const r=e.pow(u,rn<<BigInt(a-t-1));u=e.sqr(r),c=e.mul(c,r),d=e.mul(d,u),a=t}return c}}(e)}const pn=[\\\"create\\\",\\\"isValid\\\",\\\"is0\\\",\\\"neg\\\",\\\"inv\\\",\\\"sqrt\\\",\\\"sqr\\\",\\\"eql\\\",\\\"add\\\",\\\"sub\\\",\\\"mul\\\",\\\"pow\\\",\\\"div\\\",\\\"addN\\\",\\\"subN\\\",\\\"mulN\\\",\\\"sqrN\\\"];function yn(e,t){const r=void 0!==t?t:e.toString(2).length;return{nBitLength:r,nByteLength:Math.ceil(r/8)}}function mn(e){if(\\\"bigint\\\"!=typeof e)throw new Error(\\\"field order must be bigint\\\");const t=e.toString(2).length;return Math.ceil(t/8)}function gn(e){const t=mn(e);return t+Math.ceil(t/2)}class vn extends kr{constructor(e,t){super(),this.finished=!1,this.destroyed=!1,gr(e);const r=xr(t);if(this.iHash=e.create(),\\\"function\\\"!=typeof this.iHash.update)throw new Error(\\\"Expected instance of class which extends utils.Hash\\\");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const n=this.blockLen,i=new Uint8Array(n);i.set(r.length>n?e.create().update(r).digest():r);for(let e=0;e<i.length;e++)i[e]^=54;this.iHash.update(i),this.oHash=e.create();for(let e=0;e<i.length;e++)i[e]^=106;this.oHash.update(i),i.fill(0)}update(e){return vr(this),this.iHash.update(e),this}digestInto(e){vr(this),mr(e,this.outputLen),this.finished=!0,this.iHash.digestInto(e),this.oHash.update(e),this.oHash.digestInto(e),this.destroy()}digest(){const e=new Uint8Array(this.oHash.outputLen);return this.digestInto(e),e}_cloneInto(e){e||(e=Object.create(Object.getPrototypeOf(this),{}));const{oHash:t,iHash:r,finished:n,destroyed:i,blockLen:s,outputLen:o}=this;return e.finished=n,e.destroyed=i,e.blockLen=s,e.outputLen=o,e.oHash=t._cloneInto(e.oHash),e.iHash=r._cloneInto(e.iHash),e}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const wn=(e,t,r)=>new vn(e,t).update(r).digest();wn.create=(e,t)=>new vn(e,t);const bn=BigInt(0),_n=BigInt(1);function En(e){return function(e){const t=pn.reduce(((e,t)=>(e[t]=\\\"function\\\",e)),{ORDER:\\\"bigint\\\",MASK:\\\"bigint\\\",BYTES:\\\"isSafeInteger\\\",BITS:\\\"isSafeInteger\\\"});en(e,t)}(e.Fp),en(e,{n:\\\"bigint\\\",h:\\\"bigint\\\",Gx:\\\"field\\\",Gy:\\\"field\\\"},{nBitLength:\\\"isSafeInteger\\\",nByteLength:\\\"isSafeInteger\\\"}),Object.freeze({...yn(e.n,e.nBitLength),...e,p:e.Fp.ORDER})}const{bytesToNumberBE:xn,hexToBytes:kn}=e,In={Err:class extends Error{constructor(e=\\\"\\\"){super(e)}},_parseInt(e){const{Err:t}=In;if(e.length<2||2!==e[0])throw new t(\\\"Invalid signature integer tag\\\");const r=e[1],n=e.subarray(2,r+2);if(!r||n.length!==r)throw new t(\\\"Invalid signature integer: wrong length\\\");if(128&n[0])throw new t(\\\"Invalid signature integer: negative\\\");if(0===n[0]&&!(128&n[1]))throw new t(\\\"Invalid signature integer: unnecessary leading zero\\\");return{d:xn(n),l:e.subarray(r+2)}},toSig(e){const{Err:t}=In,r=\\\"string\\\"==typeof e?kn(e):e;Ur(r);let n=r.length;if(n<2||48!=r[0])throw new t(\\\"Invalid signature tag\\\");if(r[1]!==n-2)throw new t(\\\"Invalid signature: incorrect length\\\");const{d:i,l:s}=In._parseInt(r.subarray(2)),{d:o,l:a}=In._parseInt(s);if(a.length)throw new t(\\\"Invalid signature: left bytes after parsing\\\");return{r:i,s:o}},hexFromSig(e){const t=e=>8&Number.parseInt(e[0],16)?\\\"00\\\"+e:e,r=e=>{const t=e.toString(16);return 1&t.length?`0${t}`:t},n=t(r(e.s)),i=t(r(e.r)),s=n.length/2,o=i.length/2,a=r(s),u=r(o);return`30${r(o+s+4)}02${u}${i}02${a}${n}`}},An=BigInt(0),On=BigInt(1),Bn=(BigInt(2),BigInt(3));BigInt(4);function Sn(e){const t=function(e){const t=En(e);en(t,{a:\\\"field\\\",b:\\\"field\\\"},{allowedPrivateKeyLengths:\\\"array\\\",wrapPrivateKey:\\\"boolean\\\",isTorsionFree:\\\"function\\\",clearCofactor:\\\"function\\\",allowInfinityPoint:\\\"boolean\\\",fromBytes:\\\"function\\\",toBytes:\\\"function\\\"});const{endo:r,Fp:n,a:i}=t;if(r){if(!n.eql(i,n.ZERO))throw new Error(\\\"Endomorphism can only be defined for Koblitz curves that have a=0\\\");if(\\\"object\\\"!=typeof r||\\\"bigint\\\"!=typeof r.beta||\\\"function\\\"!=typeof r.splitScalar)throw new Error(\\\"Expected endomorphism with beta: bigint and splitScalar: function\\\")}return Object.freeze({...t})}(e),{Fp:r}=t,n=t.toBytes||((e,t,n)=>{const i=t.toAffine();return Wr(Uint8Array.from([4]),r.toBytes(i.x),r.toBytes(i.y))}),i=t.fromBytes||(e=>{const t=e.subarray(1);return{x:r.fromBytes(t.subarray(0,r.BYTES)),y:r.fromBytes(t.subarray(r.BYTES,2*r.BYTES))}});function s(e){const{a:n,b:i}=t,s=r.sqr(e),o=r.mul(s,e);return r.add(r.add(o,r.mul(e,n)),i)}if(!r.eql(r.sqr(t.Gy),s(t.Gx)))throw new Error(\\\"bad generator point: equation left != right\\\");function o(e){return\\\"bigint\\\"==typeof e&&An<e&&e<t.n}function a(e){if(!o(e))throw new Error(\\\"Expected valid bigint: 0 < bigint < curve.n\\\")}function u(e){const{allowedPrivateKeyLengths:r,nByteLength:n,wrapPrivateKey:i,n:s}=t;if(r&&\\\"bigint\\\"!=typeof e){if(jr(e)&&(e=Lr(e)),\\\"string\\\"!=typeof e||!r.includes(e.length))throw new Error(\\\"Invalid key\\\");e=e.padStart(2*n,\\\"0\\\")}let o;try{o=\\\"bigint\\\"==typeof e?e:qr(Kr(\\\"private key\\\",e,n))}catch(t){throw new Error(`private key must be ${n} bytes, hex or bigint, not ${typeof e}`)}return i&&(o=cn(o,s)),a(o),o}const c=new Map;function d(e){if(!(e instanceof f))throw new Error(\\\"ProjectivePoint expected\\\")}class f{constructor(e,t,n){if(this.px=e,this.py=t,this.pz=n,null==e||!r.isValid(e))throw new Error(\\\"x required\\\");if(null==t||!r.isValid(t))throw new Error(\\\"y required\\\");if(null==n||!r.isValid(n))throw new Error(\\\"z required\\\")}static fromAffine(e){const{x:t,y:n}=e||{};if(!e||!r.isValid(t)||!r.isValid(n))throw new Error(\\\"invalid affine point\\\");if(e instanceof f)throw new Error(\\\"projective point not allowed\\\");const i=e=>r.eql(e,r.ZERO);return i(t)&&i(n)?f.ZERO:new f(t,n,r.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(e){const t=r.invertBatch(e.map((e=>e.pz)));return e.map(((e,r)=>e.toAffine(t[r]))).map(f.fromAffine)}static fromHex(e){const t=f.fromAffine(i(Kr(\\\"pointHex\\\",e)));return t.assertValidity(),t}static fromPrivateKey(e){return f.BASE.multiply(u(e))}_setWindowSize(e){this._WINDOW_SIZE=e,c.delete(this)}assertValidity(){if(this.is0()){if(t.allowInfinityPoint&&!r.is0(this.py))return;throw new Error(\\\"bad point: ZERO\\\")}const{x:e,y:n}=this.toAffine();if(!r.isValid(e)||!r.isValid(n))throw new Error(\\\"bad point: x or y not FE\\\");const i=r.sqr(n),o=s(e);if(!r.eql(i,o))throw new Error(\\\"bad point: equation left != right\\\");if(!this.isTorsionFree())throw new Error(\\\"bad point: not in prime-order subgroup\\\")}hasEvenY(){const{y:e}=this.toAffine();if(r.isOdd)return!r.isOdd(e);throw new Error(\\\"Field doesn't support isOdd\\\")}equals(e){d(e);const{px:t,py:n,pz:i}=this,{px:s,py:o,pz:a}=e,u=r.eql(r.mul(t,a),r.mul(s,i)),c=r.eql(r.mul(n,a),r.mul(o,i));return u&&c}negate(){return new f(this.px,r.neg(this.py),this.pz)}double(){const{a:e,b:n}=t,i=r.mul(n,Bn),{px:s,py:o,pz:a}=this;let u=r.ZERO,c=r.ZERO,d=r.ZERO,l=r.mul(s,s),h=r.mul(o,o),p=r.mul(a,a),y=r.mul(s,o);return y=r.add(y,y),d=r.mul(s,a),d=r.add(d,d),u=r.mul(e,d),c=r.mul(i,p),c=r.add(u,c),u=r.sub(h,c),c=r.add(h,c),c=r.mul(u,c),u=r.mul(y,u),d=r.mul(i,d),p=r.mul(e,p),y=r.sub(l,p),y=r.mul(e,y),y=r.add(y,d),d=r.add(l,l),l=r.add(d,l),l=r.add(l,p),l=r.mul(l,y),c=r.add(c,l),p=r.mul(o,a),p=r.add(p,p),l=r.mul(p,y),u=r.sub(u,l),d=r.mul(p,h),d=r.add(d,d),d=r.add(d,d),new f(u,c,d)}add(e){d(e);const{px:n,py:i,pz:s}=this,{px:o,py:a,pz:u}=e;let c=r.ZERO,l=r.ZERO,h=r.ZERO;const p=t.a,y=r.mul(t.b,Bn);let m=r.mul(n,o),g=r.mul(i,a),v=r.mul(s,u),w=r.add(n,i),b=r.add(o,a);w=r.mul(w,b),b=r.add(m,g),w=r.sub(w,b),b=r.add(n,s);let _=r.add(o,u);return b=r.mul(b,_),_=r.add(m,v),b=r.sub(b,_),_=r.add(i,s),c=r.add(a,u),_=r.mul(_,c),c=r.add(g,v),_=r.sub(_,c),h=r.mul(p,b),c=r.mul(y,v),h=r.add(c,h),c=r.sub(g,h),h=r.add(g,h),l=r.mul(c,h),g=r.add(m,m),g=r.add(g,m),v=r.mul(p,v),b=r.mul(y,b),g=r.add(g,v),v=r.sub(m,v),v=r.mul(p,v),b=r.add(b,v),m=r.mul(g,b),l=r.add(l,m),m=r.mul(_,b),c=r.mul(w,c),c=r.sub(c,m),m=r.mul(w,g),h=r.mul(_,h),h=r.add(h,m),new f(c,l,h)}subtract(e){return this.add(e.negate())}is0(){return this.equals(f.ZERO)}wNAF(e){return h.wNAFCached(this,c,e,(e=>{const t=r.invertBatch(e.map((e=>e.pz)));return e.map(((e,r)=>e.toAffine(t[r]))).map(f.fromAffine)}))}multiplyUnsafe(e){const n=f.ZERO;if(e===An)return n;if(a(e),e===On)return this;const{endo:i}=t;if(!i)return h.unsafeLadder(this,e);let{k1neg:s,k1:o,k2neg:u,k2:c}=i.splitScalar(e),d=n,l=n,p=this;for(;o>An||c>An;)o&On&&(d=d.add(p)),c&On&&(l=l.add(p)),p=p.double(),o>>=On,c>>=On;return s&&(d=d.negate()),u&&(l=l.negate()),l=new f(r.mul(l.px,i.beta),l.py,l.pz),d.add(l)}multiply(e){a(e);let n,i,s=e;const{endo:o}=t;if(o){const{k1neg:e,k1:t,k2neg:a,k2:u}=o.splitScalar(s);let{p:c,f:d}=this.wNAF(t),{p:l,f:p}=this.wNAF(u);c=h.constTimeNegate(e,c),l=h.constTimeNegate(a,l),l=new f(r.mul(l.px,o.beta),l.py,l.pz),n=c.add(l),i=d.add(p)}else{const{p:e,f:t}=this.wNAF(s);n=e,i=t}return f.normalizeZ([n,i])[0]}multiplyAndAddUnsafe(e,t,r){const n=f.BASE,i=(e,t)=>t!==An&&t!==On&&e.equals(n)?e.multiply(t):e.multiplyUnsafe(t),s=i(this,t).add(i(e,r));return s.is0()?void 0:s}toAffine(e){const{px:t,py:n,pz:i}=this,s=this.is0();null==e&&(e=s?r.ONE:r.inv(i));const o=r.mul(t,e),a=r.mul(n,e),u=r.mul(i,e);if(s)return{x:r.ZERO,y:r.ZERO};if(!r.eql(u,r.ONE))throw new Error(\\\"invZ was invalid\\\");return{x:o,y:a}}isTorsionFree(){const{h:e,isTorsionFree:r}=t;if(e===On)return!0;if(r)return r(f,this);throw new Error(\\\"isTorsionFree() has not been declared for the elliptic curve\\\")}clearCofactor(){const{h:e,clearCofactor:r}=t;return e===On?this:r?r(f,this):this.multiplyUnsafe(t.h)}toRawBytes(e=!0){return this.assertValidity(),n(f,this,e)}toHex(e=!0){return Lr(this.toRawBytes(e))}}f.BASE=new f(t.Gx,t.Gy,r.ONE),f.ZERO=new f(r.ZERO,r.ONE,r.ZERO);const l=t.nBitLength,h=function(e,t){const r=(e,t)=>{const r=t.negate();return e?r:t},n=e=>({windows:Math.ceil(t/e)+1,windowSize:2**(e-1)});return{constTimeNegate:r,unsafeLadder(t,r){let n=e.ZERO,i=t;for(;r>bn;)r&_n&&(n=n.add(i)),i=i.double(),r>>=_n;return n},precomputeWindow(e,t){const{windows:r,windowSize:i}=n(t),s=[];let o=e,a=o;for(let e=0;e<r;e++){a=o,s.push(a);for(let e=1;e<i;e++)a=a.add(o),s.push(a);o=a.double()}return s},wNAF(t,i,s){const{windows:o,windowSize:a}=n(t);let u=e.ZERO,c=e.BASE;const d=BigInt(2**t-1),f=2**t,l=BigInt(t);for(let e=0;e<o;e++){const t=e*a;let n=Number(s&d);s>>=l,n>a&&(n-=f,s+=_n);const o=t,h=t+Math.abs(n)-1,p=e%2!=0,y=n<0;0===n?c=c.add(r(p,i[o])):u=u.add(r(y,i[h]))}return{p:u,f:c}},wNAFCached(e,t,r,n){const i=e._WINDOW_SIZE||1;let s=t.get(e);return s||(s=this.precomputeWindow(e,i),1!==i&&t.set(e,n(s))),this.wNAF(i,s,r)}}}(f,t.endo?Math.ceil(l/2):l);return{CURVE:t,ProjectivePoint:f,normPrivateKeyToScalar:u,weierstrassEquation:s,isWithinCurveOrder:o}}function Tn(e){const t=function(e){const t=En(e);return en(t,{hash:\\\"hash\\\",hmac:\\\"function\\\",randomBytes:\\\"function\\\"},{bits2int:\\\"function\\\",bits2int_modN:\\\"function\\\",lowS:\\\"boolean\\\"}),Object.freeze({lowS:!0,...t})}(e),{Fp:r,n}=t,i=r.BYTES+1,s=2*r.BYTES+1;function o(e){return cn(e,n)}function a(e){return ln(e,n)}const{ProjectivePoint:u,normPrivateKeyToScalar:c,weierstrassEquation:d,isWithinCurveOrder:f}=Sn({...t,toBytes(e,t,n){const i=t.toAffine(),s=r.toBytes(i.x),o=Wr;return n?o(Uint8Array.from([t.hasEvenY()?2:3]),s):o(Uint8Array.from([4]),s,r.toBytes(i.y))},fromBytes(e){const t=e.length,n=e[0],o=e.subarray(1);if(t!==i||2!==n&&3!==n){if(t===s&&4===n){return{x:r.fromBytes(o.subarray(0,r.BYTES)),y:r.fromBytes(o.subarray(r.BYTES,2*r.BYTES))}}throw new Error(`Point of length ${t} was invalid. Expected ${i} compressed bytes or ${s} uncompressed bytes`)}{const e=qr(o);if(!(An<(a=e)&&a<r.ORDER))throw new Error(\\\"Point is not on curve\\\");const t=d(e);let i;try{i=r.sqrt(t)}catch(e){const t=e instanceof Error?\\\": \\\"+e.message:\\\"\\\";throw new Error(\\\"Point is not on curve\\\"+t)}return!(1&~n)!==((i&On)===On)&&(i=r.neg(i)),{x:e,y:i}}var a}}),l=e=>Lr(Vr(e,t.nByteLength));function h(e){return e>n>>On}const p=(e,t,r)=>qr(e.slice(t,r));class y{constructor(e,t,r){this.r=e,this.s=t,this.recovery=r,this.assertValidity()}static fromCompact(e){const r=t.nByteLength;return e=Kr(\\\"compactSignature\\\",e,2*r),new y(p(e,0,r),p(e,r,2*r))}static fromDER(e){const{r:t,s:r}=In.toSig(Kr(\\\"DER\\\",e));return new y(t,r)}assertValidity(){if(!f(this.r))throw new Error(\\\"r must be 0 < r < CURVE.n\\\");if(!f(this.s))throw new Error(\\\"s must be 0 < s < CURVE.n\\\")}addRecoveryBit(e){return new y(this.r,this.s,e)}recoverPublicKey(e){const{r:n,s:i,recovery:s}=this,c=w(Kr(\\\"msgHash\\\",e));if(null==s||![0,1,2,3].includes(s))throw new Error(\\\"recovery id invalid\\\");const d=2===s||3===s?n+t.n:n;if(d>=r.ORDER)throw new Error(\\\"recovery id 2 or 3 invalid\\\");const f=1&s?\\\"03\\\":\\\"02\\\",h=u.fromHex(f+l(d)),p=a(d),y=o(-c*p),m=o(i*p),g=u.BASE.multiplyAndAddUnsafe(h,y,m);if(!g)throw new Error(\\\"point at infinify\\\");return g.assertValidity(),g}hasHighS(){return h(this.s)}normalizeS(){return this.hasHighS()?new y(this.r,o(-this.s),this.recovery):this}toDERRawBytes(){return Fr(this.toDERHex())}toDERHex(){return In.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return Fr(this.toCompactHex())}toCompactHex(){return l(this.r)+l(this.s)}}const m={isValidPrivateKey(e){try{return c(e),!0}catch(e){return!1}},normPrivateKeyToScalar:c,randomPrivateKey:()=>{const e=gn(t.n);return function(e,t,r=!1){const n=e.length,i=mn(t),s=gn(t);if(n<16||n<s||n>1024)throw new Error(`expected ${s}-1024 bytes of input, got ${n}`);const o=cn(r?qr(e):Dr(e),t-rn)+rn;return r?Hr(o,i):Vr(o,i)}(t.randomBytes(e),t.n)},precompute:(e=8,t=u.BASE)=>(t._setWindowSize(e),t.multiply(BigInt(3)),t)};function g(e){const t=jr(e),r=\\\"string\\\"==typeof e,n=(t||r)&&e.length;return t?n===i||n===s:r?n===2*i||n===2*s:e instanceof u}const v=t.bits2int||function(e){const r=qr(e),n=8*e.length-t.nBitLength;return n>0?r>>BigInt(n):r},w=t.bits2int_modN||function(e){return o(v(e))},b=Jr(t.nBitLength);function _(e){if(\\\"bigint\\\"!=typeof e)throw new Error(\\\"bigint expected\\\");if(!(An<=e&&e<b))throw new Error(`bigint expected < 2^${t.nBitLength}`);return Vr(e,t.nByteLength)}function E(e,n,i=x){if([\\\"recovered\\\",\\\"canonical\\\"].some((e=>e in i)))throw new Error(\\\"sign() legacy options not supported\\\");const{hash:s,randomBytes:d}=t;let{lowS:l,prehash:p,extraEntropy:m}=i;null==l&&(l=!0),e=Kr(\\\"msgHash\\\",e),p&&(e=Kr(\\\"prehashed msgHash\\\",s(e)));const g=w(e),b=c(n),E=[_(b),_(g)];if(null!=m&&!1!==m){const e=!0===m?d(r.BYTES):m;E.push(Kr(\\\"extraEntropy\\\",e))}const k=Wr(...E),I=g;return{seed:k,k2sig:function(e){const t=v(e);if(!f(t))return;const r=a(t),n=u.BASE.multiply(t).toAffine(),i=o(n.x);if(i===An)return;const s=o(r*o(I+i*b));if(s===An)return;let c=(n.x===i?0:2)|Number(n.y&On),d=s;return l&&h(s)&&(d=function(e){return h(e)?o(-e):e}(s),c^=1),new y(i,d,c)}}}const x={lowS:t.lowS,prehash:!1},k={lowS:t.lowS,prehash:!1};return u.BASE._setWindowSize(8),{CURVE:t,getPublicKey:function(e,t=!0){return u.fromPrivateKey(e).toRawBytes(t)},getSharedSecret:function(e,t,r=!0){if(g(e))throw new Error(\\\"first arg must be private key\\\");if(!g(t))throw new Error(\\\"second arg must be public key\\\");return u.fromHex(t).multiply(c(e)).toRawBytes(r)},sign:function(e,r,n=x){const{seed:i,k2sig:s}=E(e,r,n),o=t;return Xr(o.hash.outputLen,o.nByteLength,o.hmac)(i,s)},verify:function(e,r,n,i=k){const s=e;if(r=Kr(\\\"msgHash\\\",r),n=Kr(\\\"publicKey\\\",n),\\\"strict\\\"in i)throw new Error(\\\"options.strict was renamed to lowS\\\");const{lowS:c,prehash:d}=i;let f,l;try{if(\\\"string\\\"==typeof s||jr(s))try{f=y.fromDER(s)}catch(e){if(!(e instanceof In.Err))throw e;f=y.fromCompact(s)}else{if(\\\"object\\\"!=typeof s||\\\"bigint\\\"!=typeof s.r||\\\"bigint\\\"!=typeof s.s)throw new Error(\\\"PARSE\\\");{const{r:e,s:t}=s;f=new y(e,t)}}l=u.fromHex(n)}catch(e){if(\\\"PARSE\\\"===e.message)throw new Error(\\\"signature must be Signature instance, Uint8Array or hex string\\\");return!1}if(c&&f.hasHighS())return!1;d&&(r=t.hash(r));const{r:h,s:p}=f,m=w(r),g=a(p),v=o(m*g),b=o(h*g),_=u.BASE.multiplyAndAddUnsafe(l,v,b)?.toAffine();return!!_&&o(_.x)===h},ProjectivePoint:u,Signature:y,utils:m}}function Nn(e){return{hash:e,hmac:(t,...r)=>wn(e,t,function(...e){let t=0;for(let r=0;r<e.length;r++){const n=e[r];mr(n),t+=n.length}const r=new Uint8Array(t);for(let t=0,n=0;t<e.length;t++){const i=e[t];r.set(i,n),n+=i.length}return r}(...r)),randomBytes:Ir}}const Rn=BigInt(\\\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\\\"),Zn=BigInt(\\\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\\\"),Cn=BigInt(1),jn=BigInt(2),Un=(e,t)=>(e+t/jn)/t;function Pn(e){const t=Rn,r=BigInt(3),n=BigInt(6),i=BigInt(11),s=BigInt(22),o=BigInt(23),a=BigInt(44),u=BigInt(88),c=e*e*e%t,d=c*c*e%t,f=fn(d,r,t)*d%t,l=fn(f,r,t)*d%t,h=fn(l,jn,t)*c%t,p=fn(h,i,t)*h%t,y=fn(p,s,t)*p%t,m=fn(y,a,t)*y%t,g=fn(m,u,t)*m%t,v=fn(g,a,t)*y%t,w=fn(v,r,t)*d%t,b=fn(w,o,t)*p%t,_=fn(b,n,t)*c%t,E=fn(_,jn,t);if(!Ln.eql(Ln.sqr(E),e))throw new Error(\\\"Cannot find square root\\\");return E}const Ln=function(e,t,r=!1,n={}){if(e<=tn)throw new Error(`Expected Field ORDER > 0, got ${e}`);const{nBitLength:i,nByteLength:s}=yn(e,t);if(s>2048)throw new Error(\\\"Field lengths over 2048 bytes are not supported\\\");const o=hn(e),a=Object.freeze({ORDER:e,BITS:i,BYTES:s,MASK:Jr(i),ZERO:tn,ONE:rn,create:t=>cn(t,e),isValid:t=>{if(\\\"bigint\\\"!=typeof t)throw new Error(\\\"Invalid field element: expected bigint, got \\\"+typeof t);return tn<=t&&t<e},is0:e=>e===tn,isOdd:e=>(e&rn)===rn,neg:t=>cn(-t,e),eql:(e,t)=>e===t,sqr:t=>cn(t*t,e),add:(t,r)=>cn(t+r,e),sub:(t,r)=>cn(t-r,e),mul:(t,r)=>cn(t*r,e),pow:(e,t)=>function(e,t,r){if(r<tn)throw new Error(\\\"Expected power > 0\\\");if(r===tn)return e.ONE;if(r===rn)return t;let n=e.ONE,i=t;for(;r>tn;)r&rn&&(n=e.mul(n,i)),i=e.sqr(i),r>>=rn;return n}(a,e,t),div:(t,r)=>cn(t*ln(r,e),e),sqrN:e=>e*e,addN:(e,t)=>e+t,subN:(e,t)=>e-t,mulN:(e,t)=>e*t,inv:t=>ln(t,e),sqrt:n.sqrt||(e=>o(a,e)),invertBatch:e=>function(e,t){const r=new Array(t.length),n=t.reduce(((t,n,i)=>e.is0(n)?t:(r[i]=t,e.mul(t,n))),e.ONE),i=e.inv(n);return t.reduceRight(((t,n,i)=>e.is0(n)?t:(r[i]=e.mul(t,r[i]),e.mul(t,n))),i),r}(a,e),cmov:(e,t,r)=>r?t:e,toBytes:e=>r?Hr(e,s):Vr(e,s),fromBytes:e=>{if(e.length!==s)throw new Error(`Fp.fromBytes: expected ${s}, got ${e.length}`);return r?Dr(e):qr(e)}});return Object.freeze(a)}(Rn,void 0,void 0,{sqrt:Pn}),$n=function(e,t){const r=t=>Tn({...e,...Nn(t)});return Object.freeze({...r(t),create:r})}({a:BigInt(0),b:BigInt(7),Fp:Ln,n:Zn,Gx:BigInt(\\\"55066263022277343669578718895168534326250603453777594175500187360389116729240\\\"),Gy:BigInt(\\\"32670510020758816978083085130507043184471273380659243275938904335757337482424\\\"),h:BigInt(1),lowS:!0,endo:{beta:BigInt(\\\"0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\\\"),splitScalar:e=>{const t=Zn,r=BigInt(\\\"0x3086d221a7d46bcde86c90e49284eb15\\\"),n=-Cn*BigInt(\\\"0xe4437ed6010e88286f547fa90abfe4c3\\\"),i=BigInt(\\\"0x114ca50f7a8e2f3f657c1108d9d44cfd8\\\"),s=r,o=BigInt(\\\"0x100000000000000000000000000000000\\\"),a=Un(s*e,t),u=Un(-n*e,t);let c=cn(e-a*r-u*i,t),d=cn(-a*n-u*s,t);const f=c>o,l=d>o;if(f&&(c=t-c),l&&(d=t-d),c>o||d>o)throw new Error(\\\"splitScalar: Endomorphism failed, k=\\\"+e);return{k1neg:f,k1:c,k2neg:l,k2:d}}}},Rr);BigInt(0);$n.ProjectivePoint;r(287).hp;!function(){const e=[]}();Z(S(),/^(?:0x)?[0-9a-f]+$/iu),Z(S(),/^0x[0-9a-f]+$/iu),Z(S(),/^0x[0-9a-f]{40}$/u),Z(S(),/^0x[0-9a-fA-F]{40}$/u);function Mn(e){return e.startsWith(\\\"0x\\\")||e.startsWith(\\\"0X\\\")?e.substring(2):e}function zn(e,...t){if(!((r=e)instanceof Uint8Array||null!=r&&\\\"object\\\"==typeof r&&\\\"Uint8Array\\\"===r.constructor.name))throw new Error(\\\"Uint8Array expected\\\");var r;if(t.length>0&&!t.includes(e.length))throw new Error(`Uint8Array expected of length ${t}, not of length=${e.length}`)}if(!(68===new Uint8Array(new Uint32Array([287454020]).buffer)[0]))throw new Error(\\\"Non little-endian hardware is not supported\\\");const Fn=Array.from({length:256},((e,t)=>t.toString(16).padStart(2,\\\"0\\\")));function qn(e){zn(e);let t=\\\"\\\";for(let r=0;r<e.length;r++)t+=Fn[e[r]];return t}const Dn={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function Vn(e){return e>=Dn._0&&e<=Dn._9?e-Dn._0:e>=Dn._A&&e<=Dn._F?e-(Dn._A-10):e>=Dn._a&&e<=Dn._f?e-(Dn._a-10):void 0}function Hn(e){if(\\\"string\\\"!=typeof e)throw new Error(\\\"hex string expected, got \\\"+typeof e);const t=e.length,r=t/2;if(t%2)throw new Error(\\\"padded hex string expected, got unpadded hex of length \\\"+t);const n=new Uint8Array(r);for(let t=0,i=0;t<r;t++,i+=2){const r=Vn(e.charCodeAt(i)),s=Vn(e.charCodeAt(i+1));if(void 0===r||void 0===s){const t=e[i]+e[i+1];throw new Error('hex string expected, got non-hex character \\\"'+t+'\\\" at index '+i)}n[t]=16*r+s}return n}async function Kn(){const e=await async function(){return await snap.request({method:\\\"snap_getEntropy\\\",params:{version:1}})}();return Hn(Mn(e))}async function Wn(){const e=await Kn();return function(e){return`0x${qn(e)}`}($n.getPublicKey(e))}const Jn=pr.object({message:pr.string().startsWith(\\\"metamask:\\\")});const Gn=async({request:e})=>{switch(e.method){case\\\"getPublicKey\\\":return Wn();case\\\"signMessage\\\":{const{params:t}=e;!function(e){try{Jn.parse(e)}catch{throw ae({message:\\\"`signMessage`, must take a `message` parameter that must begin with `metamask:`\\\"})}}(t);const{message:r}=t;return await async function(e){const t=await Kn(),r=Rr(e);return`0x${$n.sign(r,t).toCompactHex()}`}(r)}default:throw ue({data:{method:e.method}})}}})();var i=exports;for(var s in n)i[s]=n[s];n.__esModule&&Object.defineProperty(i,\\\"__esModule\\\",{value:!0})})();\"}],\"removable\":false}","// next version number\n/*\n\nCleans up notices and assocated notice controller code\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 33;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  // transform state here\n  if (state.NoticeController) {\n    delete newState.NoticeController;\n  }\n  return newState;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 34;\n\n/**\n * The purpose of this migration is to enable the {@code privacyMode} feature flag and set the user as being migrated\n * if it was {@code false}.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { PreferencesController } = state;\n\n  if (PreferencesController) {\n    const featureFlags = PreferencesController.featureFlags || {};\n\n    if (\n      !featureFlags.privacyMode &&\n      typeof PreferencesController.migratedPrivacyMode === 'undefined'\n    ) {\n      // Mark the state has being migrated and enable Privacy Mode\n      PreferencesController.migratedPrivacyMode = true;\n      featureFlags.privacyMode = true;\n    }\n  }\n\n  return state;\n}\n","// next version number\n/*\n\nRemoves the deprecated 'seedWords' state\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 35;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    versionedData.data = transformState(versionedData.data);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (\n    state.PreferencesController &&\n    state.PreferencesController.seedWords !== undefined\n  ) {\n    delete state.PreferencesController.seedWords;\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 36;\n\n/**\n * The purpose of this migration is to remove the {@code privacyMode} feature flag.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { PreferencesController } = state;\n\n  if (PreferencesController) {\n    const featureFlags = PreferencesController.featureFlags || {};\n\n    if (typeof featureFlags.privacyMode !== 'undefined') {\n      delete featureFlags.privacyMode;\n    }\n  }\n\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport { normalizeEnsName } from '@metamask/controller-utils';\n\nconst version = 37;\n\n/**\n * The purpose of this migration is to update the address book state\n * to the new schema with chainId as a key.\n * and to add the isEns flag to all entries\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state.AddressBookController) {\n    const ab = state.AddressBookController.addressBook;\n\n    const chainIds = new Set();\n    const newAddressBook = {};\n\n    // add all of the chainIds to a set\n    Object.values(ab).forEach((v) => {\n      chainIds.add(v.chainId);\n    });\n\n    // fill the chainId object with the entries with the matching chainId\n    for (const id of chainIds.values()) {\n      // make an empty object entry for each chainId\n      newAddressBook[id] = {};\n      for (const address in ab) {\n        if (ab[address].chainId === id) {\n          ab[address].isEns = false;\n          if (normalizeEnsName(ab[address].name)) {\n            ab[address].isEns = true;\n          }\n          newAddressBook[id][address] = ab[address];\n        }\n      }\n    }\n\n    state.AddressBookController.addressBook = newAddressBook;\n  }\n\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 38;\n\n/**\n * The purpose of this migration is to assign all users to a test group for the fullScreenVsPopup a/b test\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { ABTestController: ABTestControllerState = {} } = state;\n  const { abTests = {} } = ABTestControllerState;\n\n  if (abTests.fullScreenVsPopup) {\n    return state;\n  }\n\n  return {\n    ...state,\n    ABTestController: {\n      ...ABTestControllerState,\n      abTests: {\n        ...abTests,\n        fullScreenVsPopup: 'control',\n      },\n    },\n  };\n}\n","import { cloneDeep } from 'lodash';\nimport { toChecksumHexAddress } from '../../../shared/modules/hexstring-utils';\n\nconst version = 39;\n\nconst DAI_V1_CONTRACT_ADDRESS = '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359';\nconst DAI_V1_TOKEN_SYMBOL = 'DAI';\nconst SAI_TOKEN_SYMBOL = 'SAI';\n\nfunction isOldDai(token = {}) {\n  return (\n    token &&\n    typeof token === 'object' &&\n    token.symbol === DAI_V1_TOKEN_SYMBOL &&\n    toChecksumHexAddress(token.address) === DAI_V1_CONTRACT_ADDRESS\n  );\n}\n\n/**\n * This migration renames the Dai token to Sai.\n *\n * As of 2019-11-18 Dai is now called Sai (refs https://git.io/JeooP) to facilitate\n * Maker's upgrade to Multi-Collateral Dai and this migration renames the token\n * at the old address.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { PreferencesController } = state;\n\n  if (PreferencesController) {\n    const tokens = PreferencesController.tokens || [];\n    if (Array.isArray(tokens)) {\n      for (const token of tokens) {\n        if (isOldDai(token)) {\n          token.symbol = SAI_TOKEN_SYMBOL;\n        }\n      }\n    }\n\n    const accountTokens = PreferencesController.accountTokens || {};\n    if (accountTokens && typeof accountTokens === 'object') {\n      for (const address of Object.keys(accountTokens)) {\n        const networkTokens = accountTokens[address];\n        if (networkTokens && typeof networkTokens === 'object') {\n          for (const network of Object.keys(networkTokens)) {\n            const tokensOnNetwork = networkTokens[network];\n            if (Array.isArray(tokensOnNetwork)) {\n              for (const token of tokensOnNetwork) {\n                if (isOldDai(token)) {\n                  token.symbol = SAI_TOKEN_SYMBOL;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return state;\n}\n","import EventEmitter from 'events';\nimport log from 'loglevel';\nimport {\n  EncryptionPublicKeyManager,\n  EncryptionPublicKeyParamsMetamask,\n  AbstractMessageManager,\n  AbstractMessage,\n  MessageManagerState,\n  AbstractMessageParams,\n  AbstractMessageParamsMetamask,\n  OriginalRequest,\n} from '@metamask/message-manager';\nimport {\n  BaseController,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { Patch } from 'immer';\nimport {\n  AcceptRequest,\n  AddApprovalRequest,\n  RejectRequest,\n} from '@metamask/approval-controller';\nimport { MetaMetricsEventCategory } from '../../../shared/constants/metametrics';\nimport { KeyringType } from '../../../shared/constants/keyring';\nimport { ORIGIN_METAMASK } from '../../../shared/constants/app';\n\nconst controllerName = 'EncryptionPublicKeyController';\nconst methodNameGetEncryptionPublicKey = 'eth_getEncryptionPublicKey';\n\nconst stateMetadata = {\n  unapprovedEncryptionPublicKeyMsgs: { persist: false, anonymous: false },\n  unapprovedEncryptionPublicKeyMsgCount: { persist: false, anonymous: false },\n};\n\nconst getDefaultState = () => ({\n  unapprovedEncryptionPublicKeyMsgs: {},\n  unapprovedEncryptionPublicKeyMsgCount: 0,\n});\n\nexport type CoreMessage = AbstractMessage & {\n  messageParams: AbstractMessageParams;\n};\n\nexport type StateMessage = Required<\n  Omit<\n    AbstractMessage,\n    'securityAlertResponse' | 'securityProviderResponse' | 'metadata' | 'error'\n  >\n> & {\n  msgParams: string;\n};\n\nexport type EncryptionPublicKeyControllerState = {\n  unapprovedEncryptionPublicKeyMsgs: Record<string, StateMessage>;\n  unapprovedEncryptionPublicKeyMsgCount: number;\n};\n\nexport type GetEncryptionPublicKeyState = {\n  type: `${typeof controllerName}:getState`;\n  handler: () => EncryptionPublicKeyControllerState;\n};\n\nexport type EncryptionPublicKeyStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [EncryptionPublicKeyControllerState, Patch[]];\n};\n\nexport type EncryptionPublicKeyControllerActions = GetEncryptionPublicKeyState;\n\nexport type EncryptionPublicKeyControllerEvents =\n  EncryptionPublicKeyStateChange;\n\ntype AllowedActions = AddApprovalRequest | AcceptRequest | RejectRequest;\n\nexport type EncryptionPublicKeyControllerMessenger =\n  RestrictedControllerMessenger<\n    typeof controllerName,\n    EncryptionPublicKeyControllerActions | AllowedActions,\n    EncryptionPublicKeyControllerEvents,\n    AllowedActions['type'],\n    never\n  >;\n\nexport type EncryptionPublicKeyControllerOptions = {\n  messenger: EncryptionPublicKeyControllerMessenger;\n  getEncryptionPublicKey: (address: string) => Promise<string>;\n  getAccountKeyringType: (account: string) => Promise<string>;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getState: () => any;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  metricsEvent: (payload: any, options?: any) => void;\n};\n\n/**\n * Controller for requesting encryption public key requests requiring user approval.\n */\nexport default class EncryptionPublicKeyController extends BaseController<\n  typeof controllerName,\n  EncryptionPublicKeyControllerState,\n  EncryptionPublicKeyControllerMessenger\n> {\n  hub: EventEmitter;\n\n  private _getEncryptionPublicKey: (address: string) => Promise<string>;\n\n  private _getAccountKeyringType: (account: string) => Promise<string>;\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _getState: () => any;\n\n  private _encryptionPublicKeyManager: EncryptionPublicKeyManager;\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _metricsEvent: (payload: any, options?: any) => void;\n\n  /**\n   * Construct a EncryptionPublicKey controller.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The restricted controller messenger for the EncryptionPublicKey controller.\n   * @param options.getEncryptionPublicKey - Callback to get the keyring encryption public key.\n   * @param options.getAccountKeyringType - Callback to get the keyring type.\n   * @param options.getState - Callback to retrieve all user state.\n   * @param options.metricsEvent - A function for emitting a metric event.\n   */\n  constructor({\n    messenger,\n    getEncryptionPublicKey,\n    getAccountKeyringType,\n    getState,\n    metricsEvent,\n  }: EncryptionPublicKeyControllerOptions) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: getDefaultState(),\n    });\n\n    this._getEncryptionPublicKey = getEncryptionPublicKey;\n    this._getAccountKeyringType = getAccountKeyringType;\n    this._getState = getState;\n    this._metricsEvent = metricsEvent;\n\n    this.hub = new EventEmitter();\n    this._encryptionPublicKeyManager = new EncryptionPublicKeyManager(\n      undefined,\n      undefined,\n      undefined,\n      ['received'],\n    );\n\n    this._encryptionPublicKeyManager.hub.on('updateBadge', () => {\n      this.hub.emit('updateBadge');\n    });\n\n    this._encryptionPublicKeyManager.hub.on(\n      'unapprovedMessage',\n      (msgParams: AbstractMessageParamsMetamask) => {\n        this._requestApproval(msgParams, methodNameGetEncryptionPublicKey);\n      },\n    );\n\n    this._subscribeToMessageState(\n      this._encryptionPublicKeyManager,\n      (state, newMessages, messageCount) => {\n        state.unapprovedEncryptionPublicKeyMsgs = newMessages;\n        state.unapprovedEncryptionPublicKeyMsgCount = messageCount;\n      },\n    );\n  }\n\n  /**\n   * A getter for the number of 'unapproved' Messages in this.messages\n   *\n   * @returns The number of 'unapproved' Messages in this.messages\n   */\n  get unapprovedMsgCount(): number {\n    return this._encryptionPublicKeyManager.getUnapprovedMessagesCount();\n  }\n\n  /**\n   * Reset the controller state to the initial state.\n   */\n  resetState() {\n    this.update(() => getDefaultState());\n  }\n\n  /**\n   * Called when a Dapp uses the eth_getEncryptionPublicKey method, to request user approval.\n   *\n   * @param address - The address from the encryption public key will be extracted.\n   * @param [req] - The original request, containing the origin.\n   */\n  async newRequestEncryptionPublicKey(\n    address: string,\n    req: OriginalRequest,\n  ): Promise<string> {\n    const keyringType = await this._getAccountKeyringType(address);\n\n    switch (keyringType) {\n      case KeyringType.ledger: {\n        return new Promise((_, reject) => {\n          reject(\n            new Error('Ledger does not support eth_getEncryptionPublicKey.'),\n          );\n        });\n      }\n\n      case KeyringType.trezor: {\n        return new Promise((_, reject) => {\n          reject(\n            new Error('Trezor does not support eth_getEncryptionPublicKey.'),\n          );\n        });\n      }\n\n      case KeyringType.lattice: {\n        return new Promise((_, reject) => {\n          reject(\n            new Error('Lattice does not support eth_getEncryptionPublicKey.'),\n          );\n        });\n      }\n\n      case KeyringType.qr: {\n        return Promise.reject(\n          new Error('QR hardware does not support eth_getEncryptionPublicKey.'),\n        );\n      }\n\n      default: {\n        return this._encryptionPublicKeyManager.addUnapprovedMessageAsync(\n          { from: address },\n          req,\n        );\n      }\n    }\n  }\n\n  /**\n   * Signifies a user's approval to receiving encryption public key in queue.\n   *\n   * @param msgParams - The params of the message to receive & return to the Dapp.\n   * @returns A full state update.\n   */\n  async encryptionPublicKey(msgParams: EncryptionPublicKeyParamsMetamask) {\n    log.info('MetaMaskController - encryptionPublicKey');\n    const messageId = msgParams.metamaskId as string;\n    // sets the status op the message to 'approved'\n    // and removes the metamaskId for decryption\n    try {\n      const cleanMessageParams =\n        await this._encryptionPublicKeyManager.approveMessage(msgParams);\n\n      // EncryptionPublicKey message\n      const publicKey = await this._getEncryptionPublicKey(\n        cleanMessageParams.from,\n      );\n\n      // tells the listener that the message has been processed\n      // and can be returned to the dapp\n      this._encryptionPublicKeyManager.setMessageStatusAndResult(\n        messageId,\n        publicKey,\n        'received',\n      );\n\n      this._acceptApproval(messageId);\n\n      return this._getState();\n    } catch (error) {\n      log.info(\n        'MetaMaskController - eth_getEncryptionPublicKey failed.',\n        error,\n      );\n      this._cancelAbstractMessage(this._encryptionPublicKeyManager, messageId);\n      throw error;\n    }\n  }\n\n  /**\n   * Used to cancel a message submitted via eth_getEncryptionPublicKey.\n   *\n   * @param msgId - The id of the message to cancel.\n   */\n  cancelEncryptionPublicKey(msgId: string) {\n    return this._cancelAbstractMessage(this._encryptionPublicKeyManager, msgId);\n  }\n\n  /**\n   * Reject all unapproved messages of any type.\n   *\n   * @param reason - A message to indicate why.\n   */\n  rejectUnapproved(reason?: string) {\n    Object.keys(\n      this._encryptionPublicKeyManager.getUnapprovedMessages(),\n    ).forEach((messageId) => {\n      this._cancelAbstractMessage(\n        this._encryptionPublicKeyManager,\n        messageId,\n        reason,\n      );\n    });\n  }\n\n  /**\n   * Clears all unapproved messages from memory.\n   */\n  clearUnapproved() {\n    this._encryptionPublicKeyManager.update({\n      unapprovedMessages: {},\n      unapprovedMessagesCount: 0,\n    });\n  }\n\n  private _cancelAbstractMessage(\n    messageManager: AbstractMessageManager<\n      AbstractMessage,\n      AbstractMessageParams,\n      AbstractMessageParamsMetamask\n    >,\n    messageId: string,\n    reason?: string,\n  ) {\n    if (reason) {\n      this._metricsEvent({\n        event: reason,\n        category: MetaMetricsEventCategory.Messages,\n        properties: {\n          action: 'Encryption public key Request',\n        },\n      });\n    }\n\n    messageManager.rejectMessage(messageId);\n    this._rejectApproval(messageId);\n\n    return this._getState();\n  }\n\n  private _subscribeToMessageState(\n    messageManager: AbstractMessageManager<\n      AbstractMessage,\n      AbstractMessageParams,\n      AbstractMessageParamsMetamask\n    >,\n    updateState: (\n      state: EncryptionPublicKeyControllerState,\n      newMessages: Record<string, StateMessage>,\n      messageCount: number,\n    ) => void,\n  ) {\n    messageManager.subscribe((state: MessageManagerState<AbstractMessage>) => {\n      const newMessages = this._migrateMessages(\n        // TODO: Replace `any` with type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        state.unapprovedMessages as any,\n      );\n      this.update((draftState) => {\n        updateState(draftState, newMessages, state.unapprovedMessagesCount);\n      });\n    });\n  }\n\n  private _migrateMessages(\n    coreMessages: Record<string, CoreMessage>,\n  ): Record<string, StateMessage> {\n    const stateMessages: Record<string, StateMessage> = {};\n\n    for (const messageId of Object.keys(coreMessages)) {\n      const coreMessage = coreMessages[messageId];\n      const stateMessage = this._migrateMessage(coreMessage);\n      stateMessages[messageId] = stateMessage;\n    }\n\n    return stateMessages;\n  }\n\n  private _migrateMessage(coreMessage: CoreMessage): StateMessage {\n    const { messageParams, ...coreMessageData } = coreMessage;\n\n    // Core message managers use messageParams but frontend uses msgParams with lots of references\n    const stateMessage = {\n      ...coreMessageData,\n      rawSig: coreMessage.rawSig as string,\n      msgParams: messageParams.from,\n      origin: messageParams.origin,\n    };\n\n    return stateMessage;\n  }\n\n  private _requestApproval(\n    msgParams: AbstractMessageParamsMetamask,\n    type: string,\n  ) {\n    const id = msgParams.metamaskId as string;\n    const origin = msgParams.origin || ORIGIN_METAMASK;\n\n    this.messagingSystem\n      .call(\n        'ApprovalController:addRequest',\n        {\n          id,\n          origin,\n          type,\n        },\n        true,\n      )\n      .catch(() => {\n        // Intentionally ignored as promise not currently used\n      });\n  }\n\n  private _acceptApproval(messageId: string) {\n    this.messagingSystem.call('ApprovalController:acceptRequest', messageId);\n  }\n\n  private _rejectApproval(messageId: string) {\n    this.messagingSystem.call(\n      'ApprovalController:rejectRequest',\n      messageId,\n      'Cancel',\n    );\n  }\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 40;\n\n/**\n * Site connections are now managed by the PermissionsController, and the\n * ProviderApprovalController is removed. This migration deletes all\n * ProviderApprovalController state.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  delete state.ProviderApprovalController;\n  return state;\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NonceTracker = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst async_mutex_1 = require(\"async-mutex\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\nconst { Web3Provider } = require('@ethersproject/providers');\nclass NonceTracker {\n    constructor(opts) {\n        this.provider = opts.provider;\n        this.blockTracker = opts.blockTracker;\n        this.getPendingTransactions = opts.getPendingTransactions;\n        this.getConfirmedTransactions = opts.getConfirmedTransactions;\n        this.lockMap = {};\n    }\n    /**\n     * @returns Promise<{ releaseLock: VoidFunction }> with the key releaseLock (the global mutex)\n     */\n    async getGlobalLock() {\n        const globalMutex = this._lookupMutex('global');\n        // await global mutex free\n        const releaseLock = await globalMutex.acquire();\n        return { releaseLock };\n    }\n    /**\n     * this will return an object with the `nextNonce` `nonceDetails`, and the releaseLock\n     * Note: releaseLock must be called after adding a signed tx to pending transactions (or discarding).\n     *\n     * @param address - the hex string for the address whose nonce we are calculating\n     * @returns {Promise<NonceLock>}\n     */\n    async getNonceLock(address) {\n        // await global mutex free\n        await this._globalMutexFree();\n        // await lock free, then take lock\n        const releaseLock = await this._takeMutex(address);\n        try {\n            // evaluate multiple nextNonce strategies\n            const networkNonceResult = await this._getNetworkNextNonce(address);\n            const highestLocallyConfirmed = this._getHighestLocallyConfirmed(address);\n            const nextNetworkNonce = networkNonceResult.nonce;\n            const highestSuggested = Math.max(nextNetworkNonce, highestLocallyConfirmed);\n            const pendingTxs = this.getPendingTransactions(address);\n            const localNonceResult = this._getHighestContinuousFrom(pendingTxs, highestSuggested);\n            const nonceDetails = {\n                params: {\n                    highestLocallyConfirmed,\n                    nextNetworkNonce,\n                    highestSuggested,\n                },\n                local: localNonceResult,\n                network: networkNonceResult,\n            };\n            const nextNonce = Math.max(networkNonceResult.nonce, localNonceResult.nonce);\n            assert_1.default(Number.isInteger(nextNonce), `nonce-tracker - nextNonce is not an integer - got: (${typeof nextNonce}) \"${nextNonce}\"`);\n            // return nonce and release cb\n            return { nextNonce, nonceDetails, releaseLock };\n        }\n        catch (err) {\n            // release lock if we encounter an error\n            releaseLock();\n            throw err;\n        }\n    }\n    async _globalMutexFree() {\n        const globalMutex = this._lookupMutex('global');\n        const releaseLock = await globalMutex.acquire();\n        releaseLock();\n    }\n    async _takeMutex(lockId) {\n        const mutex = this._lookupMutex(lockId);\n        const releaseLock = await mutex.acquire();\n        return releaseLock;\n    }\n    _lookupMutex(lockId) {\n        let mutex = this.lockMap[lockId];\n        if (!mutex) {\n            mutex = new async_mutex_1.Mutex();\n            this.lockMap[lockId] = mutex;\n        }\n        return mutex;\n    }\n    /**\n     * Function returns the nonce details from teh network based on the latest block\n     * and eth_getTransactionCount method\n     *\n     * @param address - the hex string for the address whose nonce we are calculating\n     * @returns {Promise<NetworkNextNonce>}\n     */\n    async _getNetworkNextNonce(address) {\n        // calculate next nonce\n        // we need to make sure our base count\n        // and pending count are from the same block\n        const blockNumber = await this.blockTracker.getLatestBlock();\n        const baseCount = await new Web3Provider(this.provider).getTransactionCount(address, blockNumber);\n        assert_1.default(Number.isInteger(baseCount), `nonce-tracker - baseCount is not an integer - got: (${typeof baseCount}) \"${baseCount}\"`);\n        return {\n            name: 'network',\n            nonce: baseCount,\n            details: { blockNumber, baseCount },\n        };\n    }\n    /**\n     * Function returns the highest of the confirmed transaction from the address.\n     *\n     * @param address - the hex string for the address whose nonce we are calculating\n     */\n    _getHighestLocallyConfirmed(address) {\n        const confirmedTransactions = this.getConfirmedTransactions(address);\n        const highest = this._getHighestNonce(confirmedTransactions);\n        return Number.isInteger(highest) ? highest + 1 : 0;\n    }\n    /**\n     * Function returns highest nonce value from the transcation list provided\n     *\n     * @param txList - list of transactions\n     */\n    _getHighestNonce(txList) {\n        const nonces = txList.map((txMeta) => {\n            const { nonce } = txMeta.txParams;\n            assert_1.default(typeof nonce === 'string', 'nonces should be hex strings');\n            return parseInt(nonce, 16);\n        });\n        const highestNonce = Math.max.apply(null, nonces);\n        return highestNonce;\n    }\n    /**\n     * Function return the nonce value higher than the highest nonce value from the transaction list\n     * starting from startPoint\n     *\n     * @param txList - {array} - list of txMeta's\n     * @param startPoint - {number} - the highest known locally confirmed nonce\n     */\n    _getHighestContinuousFrom(txList, startPoint) {\n        const nonces = txList.map((txMeta) => {\n            const { nonce } = txMeta.txParams;\n            assert_1.default(typeof nonce === 'string', 'nonces should be hex strings');\n            return parseInt(nonce, 16);\n        });\n        let highest = startPoint;\n        while (nonces.includes(highest)) {\n            highest += 1;\n        }\n        return { name: 'local', nonce: highest, details: { startPoint, highest } };\n    }\n}\nexports.NonceTracker = NonceTracker;\n//# sourceMappingURL=NonceTracker.js.map","import { cloneDeep } from 'lodash';\n\nconst version = 41;\n\n/**\n * PreferencesController.autoLogoutTimeLimit -> autoLockTimeLimit\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state.PreferencesController && state.PreferencesController.preferences) {\n    state.PreferencesController.preferences.autoLockTimeLimit =\n      state.PreferencesController.preferences.autoLogoutTimeLimit;\n    delete state.PreferencesController.preferences.autoLogoutTimeLimit;\n  }\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NonceTracker = void 0;\nvar NonceTracker_1 = require(\"./NonceTracker\");\nObject.defineProperty(exports, \"NonceTracker\", { enumerable: true, get: function () { return NonceTracker_1.NonceTracker; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Semaphore_1 = require(\"./Semaphore\");\nvar Mutex = /** @class */ (function () {\n    function Mutex(cancelError) {\n        this._semaphore = new Semaphore_1.default(1, cancelError);\n    }\n    Mutex.prototype.acquire = function () {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n            var _a, releaser;\n            return (0, tslib_1.__generator)(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this._semaphore.acquire()];\n                    case 1:\n                        _a = _b.sent(), releaser = _a[1];\n                        return [2 /*return*/, releaser];\n                }\n            });\n        });\n    };\n    Mutex.prototype.runExclusive = function (callback) {\n        return this._semaphore.runExclusive(function () { return callback(); });\n    };\n    Mutex.prototype.isLocked = function () {\n        return this._semaphore.isLocked();\n    };\n    Mutex.prototype.waitForUnlock = function () {\n        return this._semaphore.waitForUnlock();\n    };\n    /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n    Mutex.prototype.release = function () {\n        this._semaphore.release();\n    };\n    Mutex.prototype.cancel = function () {\n        return this._semaphore.cancel();\n    };\n    return Mutex;\n}());\nexports.default = Mutex;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar errors_1 = require(\"./errors\");\nvar Semaphore = /** @class */ (function () {\n    function Semaphore(_maxConcurrency, _cancelError) {\n        if (_cancelError === void 0) { _cancelError = errors_1.E_CANCELED; }\n        this._maxConcurrency = _maxConcurrency;\n        this._cancelError = _cancelError;\n        this._queue = [];\n        this._waiters = [];\n        if (_maxConcurrency <= 0) {\n            throw new Error('semaphore must be initialized to a positive value');\n        }\n        this._value = _maxConcurrency;\n    }\n    Semaphore.prototype.acquire = function () {\n        var _this = this;\n        var locked = this.isLocked();\n        var ticketPromise = new Promise(function (resolve, reject) {\n            return _this._queue.push({ resolve: resolve, reject: reject });\n        });\n        if (!locked)\n            this._dispatch();\n        return ticketPromise;\n    };\n    Semaphore.prototype.runExclusive = function (callback) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n            var _a, value, release;\n            return (0, tslib_1.__generator)(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.acquire()];\n                    case 1:\n                        _a = _b.sent(), value = _a[0], release = _a[1];\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, , 4, 5]);\n                        return [4 /*yield*/, callback(value)];\n                    case 3: return [2 /*return*/, _b.sent()];\n                    case 4:\n                        release();\n                        return [7 /*endfinally*/];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Semaphore.prototype.waitForUnlock = function () {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n            var waitPromise;\n            var _this = this;\n            return (0, tslib_1.__generator)(this, function (_a) {\n                if (!this.isLocked()) {\n                    return [2 /*return*/, Promise.resolve()];\n                }\n                waitPromise = new Promise(function (resolve) { return _this._waiters.push({ resolve: resolve }); });\n                return [2 /*return*/, waitPromise];\n            });\n        });\n    };\n    Semaphore.prototype.isLocked = function () {\n        return this._value <= 0;\n    };\n    /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n    Semaphore.prototype.release = function () {\n        if (this._maxConcurrency > 1) {\n            throw new Error('this method is unavailable on semaphores with concurrency > 1; use the scoped release returned by acquire instead');\n        }\n        if (this._currentReleaser) {\n            var releaser = this._currentReleaser;\n            this._currentReleaser = undefined;\n            releaser();\n        }\n    };\n    Semaphore.prototype.cancel = function () {\n        var _this = this;\n        this._queue.forEach(function (ticket) { return ticket.reject(_this._cancelError); });\n        this._queue = [];\n    };\n    Semaphore.prototype._dispatch = function () {\n        var _this = this;\n        var nextTicket = this._queue.shift();\n        if (!nextTicket)\n            return;\n        var released = false;\n        this._currentReleaser = function () {\n            if (released)\n                return;\n            released = true;\n            _this._value++;\n            _this._resolveWaiters();\n            _this._dispatch();\n        };\n        nextTicket.resolve([this._value--, this._currentReleaser]);\n    };\n    Semaphore.prototype._resolveWaiters = function () {\n        this._waiters.forEach(function (waiter) { return waiter.resolve(); });\n        this._waiters = [];\n    };\n    return Semaphore;\n}());\nexports.default = Semaphore;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.E_CANCELED = exports.E_ALREADY_LOCKED = exports.E_TIMEOUT = void 0;\nexports.E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nexports.E_ALREADY_LOCKED = new Error('mutex already locked');\nexports.E_CANCELED = new Error('request for lock canceled');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tryAcquire = exports.withTimeout = exports.Semaphore = exports.Mutex = void 0;\nvar tslib_1 = require(\"tslib\");\nvar Mutex_1 = require(\"./Mutex\");\nObject.defineProperty(exports, \"Mutex\", { enumerable: true, get: function () { return Mutex_1.default; } });\nvar Semaphore_1 = require(\"./Semaphore\");\nObject.defineProperty(exports, \"Semaphore\", { enumerable: true, get: function () { return Semaphore_1.default; } });\nvar withTimeout_1 = require(\"./withTimeout\");\nObject.defineProperty(exports, \"withTimeout\", { enumerable: true, get: function () { return withTimeout_1.withTimeout; } });\nvar tryAcquire_1 = require(\"./tryAcquire\");\nObject.defineProperty(exports, \"tryAcquire\", { enumerable: true, get: function () { return tryAcquire_1.tryAcquire; } });\n(0, tslib_1.__exportStar)(require(\"./errors\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tryAcquire = void 0;\nvar errors_1 = require(\"./errors\");\nvar withTimeout_1 = require(\"./withTimeout\");\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError) {\n    if (alreadyAcquiredError === void 0) { alreadyAcquiredError = errors_1.E_ALREADY_LOCKED; }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (0, withTimeout_1.withTimeout)(sync, 0, alreadyAcquiredError);\n}\nexports.tryAcquire = tryAcquire;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.withTimeout = void 0;\nvar tslib_1 = require(\"tslib\");\nvar errors_1 = require(\"./errors\");\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction withTimeout(sync, timeout, timeoutError) {\n    var _this = this;\n    if (timeoutError === void 0) { timeoutError = errors_1.E_TIMEOUT; }\n    return {\n        acquire: function () {\n            return new Promise(function (resolve, reject) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {\n                var isTimeout, handle, ticket, release, e_1;\n                return (0, tslib_1.__generator)(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            isTimeout = false;\n                            handle = setTimeout(function () {\n                                isTimeout = true;\n                                reject(timeoutError);\n                            }, timeout);\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, sync.acquire()];\n                        case 2:\n                            ticket = _a.sent();\n                            if (isTimeout) {\n                                release = Array.isArray(ticket) ? ticket[1] : ticket;\n                                release();\n                            }\n                            else {\n                                clearTimeout(handle);\n                                resolve(ticket);\n                            }\n                            return [3 /*break*/, 4];\n                        case 3:\n                            e_1 = _a.sent();\n                            if (!isTimeout) {\n                                clearTimeout(handle);\n                                reject(e_1);\n                            }\n                            return [3 /*break*/, 4];\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            }); });\n        },\n        runExclusive: function (callback) {\n            return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n                var release, ticket;\n                return (0, tslib_1.__generator)(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            release = function () { return undefined; };\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, , 7, 8]);\n                            return [4 /*yield*/, this.acquire()];\n                        case 2:\n                            ticket = _a.sent();\n                            if (!Array.isArray(ticket)) return [3 /*break*/, 4];\n                            release = ticket[1];\n                            return [4 /*yield*/, callback(ticket[0])];\n                        case 3: return [2 /*return*/, _a.sent()];\n                        case 4:\n                            release = ticket;\n                            return [4 /*yield*/, callback()];\n                        case 5: return [2 /*return*/, _a.sent()];\n                        case 6: return [3 /*break*/, 8];\n                        case 7:\n                            release();\n                            return [7 /*endfinally*/];\n                        case 8: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n        /** @deprecated Deprecated in 0.3.0, will be removed in 0.4.0. Use runExclusive instead. */\n        release: function () {\n            sync.release();\n        },\n        cancel: function () {\n            return sync.cancel();\n        },\n        waitForUnlock: function () { return sync.waitForUnlock(); },\n        isLocked: function () { return sync.isLocked(); },\n    };\n}\nexports.withTimeout = withTimeout;\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/NotificationController.ts\nvar _basecontroller = require('@metamask/base-controller');\nvar _utils = require('@metamask/utils');\nvar _nanoid = require('nanoid');\nvar name = \"NotificationController\";\nvar metadata = {\n  notifications: { persist: true, anonymous: false }\n};\nvar defaultState = {\n  notifications: {}\n};\nvar NotificationController = class extends _basecontroller.BaseController {\n  /**\n   * Creates a NotificationController instance.\n   *\n   * @param options - Constructor options.\n   * @param options.messenger - A reference to the messaging system.\n   * @param options.state - Initial state to set on this controller.\n   */\n  constructor({\n    messenger,\n    state\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state }\n    });\n    this.messagingSystem.registerActionHandler(\n      `${name}:show`,\n      (origin, message) => this.show(origin, message)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${name}:dismiss`,\n      (ids) => this.dismiss(ids)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${name}:markRead`,\n      (ids) => this.markRead(ids)\n    );\n    this.messagingSystem.registerActionHandler(\n      `${name}:clear`,\n      () => this.clear()\n    );\n  }\n  /**\n   * Shows a notification.\n   *\n   * @param origin - The origin trying to send a notification\n   * @param message - A message to show on the notification\n   */\n  show(origin, message) {\n    const id = _nanoid.nanoid.call(void 0, );\n    const notification = {\n      id,\n      origin,\n      createdDate: Date.now(),\n      readDate: null,\n      message\n    };\n    this.update((state) => {\n      state.notifications[id] = notification;\n    });\n  }\n  /**\n   * Dimisses a list of notifications.\n   *\n   * @param ids - A list of notification IDs\n   */\n  dismiss(ids) {\n    this.update((state) => {\n      for (const id of ids) {\n        if (_utils.hasProperty.call(void 0, state.notifications, id)) {\n          delete state.notifications[id];\n        }\n      }\n    });\n  }\n  /**\n   * Marks a list of notifications as read.\n   *\n   * @param ids - A list of notification IDs\n   */\n  markRead(ids) {\n    this.update((state) => {\n      for (const id of ids) {\n        if (_utils.hasProperty.call(void 0, state.notifications, id)) {\n          state.notifications[id].readDate = Date.now();\n        }\n      }\n    });\n  }\n  /**\n   * Clears the state of the controller, removing all notifications.\n   *\n   */\n  clear() {\n    this.update(() => {\n      return { ...defaultState };\n    });\n  }\n};\n\n\n\nexports.NotificationController = NotificationController;\n//# sourceMappingURL=chunk-DR374FE2.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkDR374FE2js = require('./chunk-DR374FE2.js');\n\n\nexports.NotificationController = _chunkDR374FE2js.NotificationController;\n//# sourceMappingURL=index.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/BaseControllerV1.ts\nvar BaseControllerV1 = class {\n  /**\n   * Creates a BaseControllerV1 instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config = {}, state = {}) {\n    /**\n     * Default options used to configure this controller\n     */\n    this.defaultConfig = {};\n    /**\n     * Default state set on this controller\n     */\n    this.defaultState = {};\n    /**\n     * Determines if listeners are notified of state changes\n     */\n    this.disabled = false;\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"BaseController\";\n    this.internalConfig = this.defaultConfig;\n    this.internalState = this.defaultState;\n    this.internalListeners = [];\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns This controller instance.\n   */\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n  /**\n   * Retrieves current controller configuration options.\n   *\n   * @returns The current configuration.\n   */\n  get config() {\n    return this.internalConfig;\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return this.internalState;\n  }\n  /**\n   * Updates controller configuration.\n   *\n   * @param config - New configuration options.\n   * @param overwrite - Overwrite config instead of merging.\n   * @param fullUpdate - Boolean that defines if the update is partial or not.\n   */\n  configure(config, overwrite = false, fullUpdate = true) {\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key of Object.keys(this.internalConfig)) {\n        const value = this.internalConfig[key];\n        if (value !== void 0) {\n          this[key] = value;\n        }\n      }\n    } else {\n      for (const key of Object.keys(config)) {\n        if (this.internalConfig[key] !== void 0) {\n          const value = config[key];\n          this.internalConfig[key] = value;\n          this[key] = value;\n        }\n      }\n    }\n  }\n  /**\n   * Notifies all subscribed listeners of current state.\n   */\n  notify() {\n    if (this.disabled) {\n      return;\n    }\n    this.internalListeners.forEach((listener) => {\n      listener(this.internalState);\n    });\n  }\n  /**\n   * Adds new listener to be notified of state changes.\n   *\n   * @param listener - The callback triggered when state changes.\n   */\n  subscribe(listener) {\n    this.internalListeners.push(listener);\n  }\n  /**\n   * Removes existing listener from receiving state changes.\n   *\n   * @param listener - The callback to remove.\n   * @returns `true` if a listener is found and unsubscribed.\n   */\n  unsubscribe(listener) {\n    const index = this.internalListeners.findIndex((cb) => listener === cb);\n    index > -1 && this.internalListeners.splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Updates controller state.\n   *\n   * @param state - The new state.\n   * @param overwrite - Overwrite state instead of merging.\n   */\n  update(state, overwrite = false) {\n    this.internalState = overwrite ? Object.assign({}, state) : Object.assign({}, this.internalState, state);\n    this.notify();\n  }\n};\nvar BaseControllerV1_default = BaseControllerV1;\n\n\n\n\nexports.BaseControllerV1 = BaseControllerV1; exports.BaseControllerV1_default = BaseControllerV1_default;\n//# sourceMappingURL=chunk-FTHCJ6HY.js.map","import { cloneDeep } from 'lodash';\n\nconst version = 42;\n\n/**\n * Initialize `connectedStatusPopoverHasBeenShown` to `false` if it hasn't yet been set,\n * so that existing users are introduced to the new connected status indicator\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state.AppStateController) {\n    state.AppStateController.connectedStatusPopoverHasBeenShown = false;\n  } else {\n    state.AppStateController = {\n      connectedStatusPopoverHasBeenShown: false,\n    };\n  }\n  return state;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/ControllerMessenger.ts\nvar _actions, _events, _initialEventPayloadGetters, _eventPayloadCache;\nvar ControllerMessenger = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _actions, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _events, /* @__PURE__ */ new Map());\n    /**\n     * A map of functions for getting the initial event payload.\n     *\n     * Used only for events that represent state changes.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _initialEventPayloadGetters, /* @__PURE__ */ new Map());\n    /**\n     * A cache of selector return values for their respective handlers.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _eventPayloadCache, /* @__PURE__ */ new Map());\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw when a handler has been registered for this action type already.\n   * @template ActionType - A type union of Action type strings.\n   */\n  registerActionHandler(actionType, handler) {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).has(actionType)) {\n      throw new Error(\n        `A handler for ${actionType} has already been registered`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).set(actionType, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @template ActionType - A type union of Action type strings.\n   */\n  unregisterActionHandler(actionType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).delete(actionType);\n  }\n  /**\n   * Unregister all action handlers.\n   *\n   * This prevents all actions from being called.\n   */\n  clearActions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).clear();\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    const handler = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).get(actionType);\n    if (!handler) {\n      throw new Error(`A handler for ${actionType} has not been registered`);\n    }\n    return handler(...params);\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).set(eventType, getPayload);\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * Note that this method should never throw directly. Any errors from\n   * subscribers are captured and re-thrown in a timeout handler.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @template EventType - A type union of Event type strings.\n   */\n  publish(eventType, ...payload) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (subscribers) {\n      for (const [handler, selector] of subscribers.entries()) {\n        try {\n          if (selector) {\n            const previousValue = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).get(handler);\n            const newValue = selector(...payload);\n            if (newValue !== previousValue) {\n              _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, newValue);\n              handler(newValue, previousValue);\n            }\n          } else {\n            handler(...payload);\n          }\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          });\n        }\n      }\n    }\n  }\n  subscribe(eventType, handler, selector) {\n    let subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers) {\n      subscribers = /* @__PURE__ */ new Map();\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).set(eventType, subscribers);\n    }\n    subscribers.set(handler, selector);\n    if (selector) {\n      const getPayload = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).get(eventType);\n      if (getPayload) {\n        const initialValue = selector(...getPayload());\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, initialValue);\n      }\n    }\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw when the given event handler is not registered for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  unsubscribe(eventType, handler) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers || !subscribers.has(handler)) {\n      throw new Error(`Subscription not found for event: ${eventType}`);\n    }\n    const selector = subscribers.get(handler);\n    if (selector) {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).delete(handler);\n    }\n    subscribers.delete(handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  clearEventSubscriptions(eventType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).delete(eventType);\n  }\n  /**\n   * Clear all subscriptions.\n   *\n   * This will remove all subscribed handlers for all events.\n   */\n  clearSubscriptions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).clear();\n  }\n  /**\n   * Get a restricted controller messenger\n   *\n   * Returns a wrapper around the controller messenger instance that restricts access to actions\n   * and events. The provided allowlists grant the ability to call the listed actions and subscribe\n   * to the listed events. The \"name\" provided grants ownership of any actions and events under\n   * that namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - Controller messenger options.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   * @template Namespace - The namespace for this messenger. Typically this is the name of the controller or\n   * module that this messenger has been created for. The authority to publish events and register\n   * actions under this namespace is granted to this restricted messenger instance.\n   * @template AllowedAction - A type union of the 'type' string for any allowed actions.\n   * This must not include internal actions that are in the messenger's namespace.\n   * @template AllowedEvent - A type union of the 'type' string for any allowed events.\n   * This must not include internal events that are in the messenger's namespace.\n   * @returns The restricted controller messenger.\n   */\n  getRestricted({\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    return new (0, _chunkUJFCPTF3js.RestrictedControllerMessenger)({\n      controllerMessenger: this,\n      name,\n      allowedActions,\n      allowedEvents\n    });\n  }\n};\n_actions = new WeakMap();\n_events = new WeakMap();\n_initialEventPayloadGetters = new WeakMap();\n_eventPayloadCache = new WeakMap();\n\n\n\nexports.ControllerMessenger = ControllerMessenger;\n//# sourceMappingURL=chunk-G42723LG.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/BaseControllerV2.ts\nvar _immer = require('immer');\n_immer.enablePatches.call(void 0, );\nvar _internalState;\nvar BaseController = class {\n  /**\n   * Creates a BaseController instance.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - Controller messaging system.\n   * @param options.metadata - ControllerState metadata, describing how to \"anonymize\" the state, and which\n   * parts should be persisted.\n   * @param options.name - The name of the controller, used as a namespace for events and actions.\n   * @param options.state - Initial controller state.\n   */\n  constructor({\n    messenger,\n    metadata,\n    name,\n    state\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _internalState, void 0);\n    this.messagingSystem = messenger;\n    this.name = name;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, _immer.freeze.call(void 0, state, true));\n    this.metadata = metadata;\n    this.messagingSystem.registerActionHandler(\n      `${name}:getState`,\n      () => this.state\n    );\n    this.messagingSystem.registerInitialEventPayload({\n      eventType: `${name}:stateChange`,\n      getPayload: () => [this.state, []]\n    });\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState);\n  }\n  set state(_) {\n    throw new Error(\n      `Controller state cannot be directly mutated; use 'update' method instead.`\n    );\n  }\n  /**\n   * Updates controller state. Accepts a callback that is passed a draft copy\n   * of the controller state. If a value is returned, it is set as the new\n   * state. Otherwise, any changes made within that callback to the draft are\n   * applied to the controller state.\n   *\n   * @param callback - Callback for updating state, passed a draft state\n   * object. Return a new state object or mutate the draft to update state.\n   * @returns An object that has the next state, patches applied in the update and inverse patches to\n   * rollback the update.\n   */\n  update(callback) {\n    const [nextState, patches, inversePatches] = _immer.produceWithPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), callback);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n    return { nextState, patches, inversePatches };\n  }\n  /**\n   * Applies immer patches to the current state. The patches come from the\n   * update function itself and can either be normal or inverse patches.\n   *\n   * @param patches - An array of immer patches that are to be applied to make\n   * or undo changes.\n   */\n  applyPatches(patches) {\n    const nextState = _immer.applyPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), patches);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n  }\n  /**\n   * Prepares the controller for garbage collection. This should be extended\n   * by any subclasses to clean up any additional connections or events.\n   *\n   * The only cleanup performed here is to remove listeners. While technically\n   * this is not required to ensure this instance is garbage collected, it at\n   * least ensures this instance won't be responsible for preventing the\n   * listeners from being garbage collected.\n   */\n  destroy() {\n    this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`);\n  }\n};\n_internalState = new WeakMap();\nfunction getAnonymizedState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"anonymous\");\n}\nfunction getPersistentState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"persist\");\n}\nfunction deriveStateFromMetadata(state, metadata, metadataProperty) {\n  return Object.keys(state).reduce((derivedState, key) => {\n    try {\n      const stateMetadata = metadata[key];\n      if (!stateMetadata) {\n        throw new Error(`No metadata found for '${String(key)}'`);\n      }\n      const propertyMetadata = stateMetadata[metadataProperty];\n      const stateProperty = state[key];\n      if (typeof propertyMetadata === \"function\") {\n        derivedState[key] = propertyMetadata(stateProperty);\n      } else if (propertyMetadata) {\n        derivedState[key] = stateProperty;\n      }\n      return derivedState;\n    } catch (error) {\n      setTimeout(() => {\n        throw error;\n      });\n      return derivedState;\n    }\n  }, {});\n}\n\n\n\n\n\nexports.BaseController = BaseController; exports.getAnonymizedState = getAnonymizedState; exports.getPersistentState = getPersistentState;\n//# sourceMappingURL=chunk-IURK6TKD.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/RestrictedControllerMessenger.ts\nvar _controllerMessenger, _controllerName, _allowedActions, _allowedEvents, _isAllowedEvent, isAllowedEvent_fn, _isAllowedAction, isAllowedAction_fn, _isInCurrentNamespace, isInCurrentNamespace_fn;\nvar RestrictedControllerMessenger = class {\n  /**\n   * Constructs a restricted controller messenger\n   *\n   * The provided allowlists grant the ability to call the listed actions and subscribe to the\n   * listed events. The \"name\" provided grants ownership of any actions and events under that\n   * namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - The controller options.\n   * @param options.controllerMessenger - The controller messenger instance that is being wrapped.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   */\n  constructor({\n    controllerMessenger,\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    /**\n     * Determine whether the given event type is allowed. Event types are\n     * allowed if they are in the current namespace or on the list of\n     * allowed events.\n     *\n     * @param eventType - The event type to check.\n     * @returns Whether the event type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedEvent);\n    /**\n     * Determine whether the given action type is allowed. Action types\n     * are allowed if they are in the current namespace or on the list of\n     * allowed actions.\n     *\n     * @param actionType - The action type to check.\n     * @returns Whether the action type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedAction);\n    /**\n     * Determine whether the given name is within the current namespace.\n     *\n     * @param name - The name to check\n     * @returns Whether the name is within the current namespace\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isInCurrentNamespace);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerMessenger, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerName, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedActions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedEvents, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerMessenger, controllerMessenger);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerName, name);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedActions, allowedActions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedEvents, allowedEvents);\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * The action type this handler is registered under *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw if an action handler that is not in the current namespace is being registered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  registerActionHandler(action, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed registering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerActionHandler(action, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * The action type being unregistered *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unique identifier for this action.\n   * @throws Will throw if an action handler that is not in the current namespace is being unregistered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  unregisterActionHandler(action) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed unregistering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unregisterActionHandler(action);\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * The action type being called must be on the action allowlist.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of allowed Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedAction, isAllowedAction_fn).call(this, actionType)) {\n      throw new Error(`Action missing from allow list: ${actionType}`);\n    }\n    const response = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).call(\n      actionType,\n      ...params\n    );\n    return response;\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * The event type *must* be in the current namespace\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerInitialEventPayload({\n      eventType,\n      getPayload\n    });\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * The event type being published *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @throws Will throw if an event that is not in the current namespace is being published.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  publish(event, ...payload) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).publish(event, ...payload);\n  }\n  subscribe(event, handler, selector) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    if (selector) {\n      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler, selector);\n    }\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler);\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * The event type being unsubscribed to must be on the event allowlist.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw if the given event is not an allowed event for this controller messenger.\n   * @template EventType - A type union of allowed Event type strings.\n   */\n  unsubscribe(event, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unsubscribe(event, handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * The event type being cleared *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @throws Will throw if a subscription for an event that is not in the current namespace is being cleared.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  clearEventSubscriptions(event) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed clearing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).clearEventSubscriptions(event);\n  }\n};\n_controllerMessenger = new WeakMap();\n_controllerName = new WeakMap();\n_allowedActions = new WeakMap();\n_allowedEvents = new WeakMap();\n_isAllowedEvent = new WeakSet();\nisAllowedEvent_fn = function(eventType) {\n  const allowedEvents = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedEvents);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType) || allowedEvents !== null && allowedEvents.includes(eventType);\n};\n_isAllowedAction = new WeakSet();\nisAllowedAction_fn = function(actionType) {\n  const allowedActions = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedActions);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, actionType) || allowedActions !== null && allowedActions.includes(actionType);\n};\n_isInCurrentNamespace = new WeakSet();\nisInCurrentNamespace_fn = function(name) {\n  return name.startsWith(`${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:`);\n};\n\n\n\nexports.RestrictedControllerMessenger = RestrictedControllerMessenger;\n//# sourceMappingURL=chunk-UJFCPTF3.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkFTHCJ6HYjs = require('./chunk-FTHCJ6HY.js');\n\n\n\n\nvar _chunkIURK6TKDjs = require('./chunk-IURK6TKD.js');\n\n\nvar _chunkG42723LGjs = require('./chunk-G42723LG.js');\n\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\n\n\nexports.BaseController = _chunkIURK6TKDjs.BaseController; exports.BaseControllerV1 = _chunkFTHCJ6HYjs.BaseControllerV1; exports.ControllerMessenger = _chunkG42723LGjs.ControllerMessenger; exports.RestrictedControllerMessenger = _chunkUJFCPTF3js.RestrictedControllerMessenger; exports.getAnonymizedState = _chunkIURK6TKDjs.getAnonymizedState; exports.getPersistentState = _chunkIURK6TKDjs.getPersistentState;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst errors_1 = require(\"./errors.cjs\");\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(fn) {\n    /* istanbul ignore next */\n    return Boolean(typeof fn?.prototype?.constructor?.name === 'string');\n}\n/**\n * Attempts to obtain the message from a possible error object. If it is\n * possible to do so, any trailing period will be removed from the message;\n * otherwise an empty string is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The message without any trailing period if `error` is an object\n * with a `message` property; the string version of `error` without any trailing\n * period if it is not `undefined` or `null`; otherwise an empty string.\n */\nfunction getErrorMessageWithoutTrailingPeriod(error) {\n    // We'll add our own period.\n    return (0, errors_1.getErrorMessage)(error).replace(/\\.$/u, '');\n}\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper, message) {\n    if (isConstructable(ErrorWrapper)) {\n        return new ErrorWrapper({\n            message,\n        });\n    }\n    return ErrorWrapper({\n        message,\n    });\n}\n/**\n * The default error class that is thrown if an assertion fails.\n */\nclass AssertionError extends Error {\n    constructor(options) {\n        super(options.message);\n        this.code = 'ERR_ASSERTION';\n    }\n}\nexports.AssertionError = AssertionError;\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nfunction assert(value, message = 'Assertion failed.', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    if (!value) {\n        if (message instanceof Error) {\n            throw message;\n        }\n        throw getError(ErrorWrapper, message);\n    }\n}\nexports.assert = assert;\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nfunction assertStruct(value, struct, errorPrefix = 'Assertion failed', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    try {\n        (0, superstruct_1.assert)(value, struct);\n    }\n    catch (error) {\n        throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessageWithoutTrailingPeriod(error)}.`);\n    }\n}\nexports.assertStruct = assertStruct;\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nfunction assertExhaustive(_object) {\n    throw new Error('Invalid branch reached. Should be detected during compilation.');\n}\nexports.assertExhaustive = assertExhaustive;\n//# sourceMappingURL=assert.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base64 = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nconst base64 = (struct, options = {}) => {\n    const paddingRequired = options.paddingRequired ?? false;\n    const characterSet = options.characterSet ?? 'base64';\n    let letters;\n    if (characterSet === 'base64') {\n        letters = String.raw `[A-Za-z0-9+\\/]`;\n    }\n    else {\n        (0, assert_1.assert)(characterSet === 'base64url');\n        letters = String.raw `[-_A-Za-z0-9]`;\n    }\n    let re;\n    if (paddingRequired) {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    else {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64;\n//# sourceMappingURL=base64.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDataView = exports.concatBytes = exports.valueToBytes = exports.base64ToBytes = exports.stringToBytes = exports.numberToBytes = exports.signedBigIntToBytes = exports.bigIntToBytes = exports.hexToBytes = exports.bytesToBase64 = exports.bytesToString = exports.bytesToNumber = exports.bytesToSignedBigInt = exports.bytesToBigInt = exports.bytesToHex = exports.assertIsBytes = exports.isBytes = void 0;\nconst base_1 = require(\"@scure/base\");\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n// '0'.charCodeAt(0) === 48\nconst HEX_MINIMUM_NUMBER_CHARACTER = 48;\n// '9'.charCodeAt(0) === 57\nconst HEX_MAXIMUM_NUMBER_CHARACTER = 58;\nconst HEX_CHARACTER_OFFSET = 87;\n/**\n * Memoized function that returns an array to be used as a lookup table for\n * converting bytes to hexadecimal values.\n *\n * The array is created lazily and then cached for future use. The benefit of\n * this approach is that the performance of converting bytes to hex is much\n * better than if we were to call `toString(16)` on each byte.\n *\n * The downside is that the array is created once and then never garbage\n * collected. This is not a problem in practice because the array is only 256\n * elements long.\n *\n * @returns A function that returns the lookup table.\n */\nfunction getPrecomputedHexValuesBuilder() {\n    // To avoid issues with tree shaking, we need to use a function to return the\n    // array. This is because the array is only used in the `bytesToHex` function\n    // and if we were to use a global variable, the array might be removed by the\n    // tree shaker.\n    const lookupTable = [];\n    return () => {\n        if (lookupTable.length === 0) {\n            for (let i = 0; i < 256; i++) {\n                lookupTable.push(i.toString(16).padStart(2, '0'));\n            }\n        }\n        return lookupTable;\n    };\n}\n/**\n * Function implementation of the {@link getPrecomputedHexValuesBuilder}\n * function.\n */\nconst getPrecomputedHexValues = getPrecomputedHexValuesBuilder();\n/**\n * Check if a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @returns Whether the value is a `Uint8Array`.\n */\nfunction isBytes(value) {\n    return value instanceof Uint8Array;\n}\nexports.isBytes = isBytes;\n/**\n * Assert that a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @throws If the value is not a `Uint8Array`.\n */\nfunction assertIsBytes(value) {\n    (0, assert_1.assert)(isBytes(value), 'Value must be a Uint8Array.');\n}\nexports.assertIsBytes = assertIsBytes;\n/**\n * Convert a `Uint8Array` to a hexadecimal string.\n *\n * @param bytes - The bytes to convert to a hexadecimal string.\n * @returns The hexadecimal string.\n */\nfunction bytesToHex(bytes) {\n    assertIsBytes(bytes);\n    if (bytes.length === 0) {\n        return '0x';\n    }\n    const lookupTable = getPrecomputedHexValues();\n    const hexadecimal = new Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        hexadecimal[i] = lookupTable[bytes[i]];\n    }\n    return (0, hex_1.add0x)(hexadecimal.join(''));\n}\nexports.bytesToHex = bytesToHex;\n/**\n * Convert a `Uint8Array` to a `bigint`.\n *\n * To convert a `Uint8Array` to a `number` instead, use {@link bytesToNumber}.\n * To convert a two's complement encoded `Uint8Array` to a `bigint`, use\n * {@link bytesToSignedBigInt}.\n *\n * @param bytes - The bytes to convert to a `bigint`.\n * @returns The `bigint`.\n */\nfunction bytesToBigInt(bytes) {\n    assertIsBytes(bytes);\n    const hexadecimal = bytesToHex(bytes);\n    return BigInt(hexadecimal);\n}\nexports.bytesToBigInt = bytesToBigInt;\n/**\n * Convert a `Uint8Array` to a signed `bigint`. This assumes that the bytes are\n * encoded in two's complement.\n *\n * To convert a `Uint8Array` to an unsigned `bigint` instead, use\n * {@link bytesToBigInt}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param bytes - The bytes to convert to a signed `bigint`.\n * @returns The signed `bigint`.\n */\nfunction bytesToSignedBigInt(bytes) {\n    assertIsBytes(bytes);\n    let value = BigInt(0);\n    for (const byte of bytes) {\n        // eslint-disable-next-line no-bitwise\n        value = (value << BigInt(8)) + BigInt(byte);\n    }\n    return BigInt.asIntN(bytes.length * 8, value);\n}\nexports.bytesToSignedBigInt = bytesToSignedBigInt;\n/**\n * Convert a `Uint8Array` to a `number`.\n *\n * To convert a `Uint8Array` to a `bigint` instead, use {@link bytesToBigInt}.\n *\n * @param bytes - The bytes to convert to a number.\n * @returns The number.\n * @throws If the resulting number is not a safe integer.\n */\nfunction bytesToNumber(bytes) {\n    assertIsBytes(bytes);\n    const bigint = bytesToBigInt(bytes);\n    (0, assert_1.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), 'Number is not a safe integer. Use `bytesToBigInt` instead.');\n    return Number(bigint);\n}\nexports.bytesToNumber = bytesToNumber;\n/**\n * Convert a UTF-8 encoded `Uint8Array` to a `string`.\n *\n * @param bytes - The bytes to convert to a string.\n * @returns The string.\n */\nfunction bytesToString(bytes) {\n    assertIsBytes(bytes);\n    return new TextDecoder().decode(bytes);\n}\nexports.bytesToString = bytesToString;\n/**\n * Convert a `Uint8Array` to a base64 encoded string.\n *\n * @param bytes - The bytes to convert to a base64 encoded string.\n * @returns The base64 encoded string.\n */\nfunction bytesToBase64(bytes) {\n    assertIsBytes(bytes);\n    return base_1.base64.encode(bytes);\n}\nexports.bytesToBase64 = bytesToBase64;\n/**\n * Convert a hexadecimal string to a `Uint8Array`. The string can optionally be\n * prefixed with `0x`. It accepts even and odd length strings.\n *\n * If the value is \"0x\", an empty `Uint8Array` is returned.\n *\n * @param value - The hexadecimal string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction hexToBytes(value) {\n    // \"0x\" is often used as empty byte array.\n    if (value?.toLowerCase?.() === '0x') {\n        return new Uint8Array();\n    }\n    (0, hex_1.assertIsHexString)(value);\n    // Remove the `0x` prefix if it exists, and pad the string to have an even\n    // number of characters.\n    const strippedValue = (0, hex_1.remove0x)(value).toLowerCase();\n    const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;\n    const bytes = new Uint8Array(normalizedValue.length / 2);\n    for (let i = 0; i < bytes.length; i++) {\n        // While this is not the prettiest way to convert a hexadecimal string to a\n        // `Uint8Array`, it is a lot faster than using `parseInt` to convert each\n        // character.\n        const c1 = normalizedValue.charCodeAt(i * 2);\n        const c2 = normalizedValue.charCodeAt(i * 2 + 1);\n        const n1 = c1 -\n            (c1 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        const n2 = c2 -\n            (c2 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        bytes[i] = n1 * 16 + n2;\n    }\n    return bytes;\n}\nexports.hexToBytes = hexToBytes;\n/**\n * Convert a `bigint` to a `Uint8Array`.\n *\n * This assumes that the `bigint` is an unsigned integer. To convert a signed\n * `bigint` instead, use {@link signedBigIntToBytes}.\n *\n * @param value - The bigint to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction bigIntToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= BigInt(0), 'Value must be a non-negative bigint.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * Check if a `bigint` fits in a certain number of bytes.\n *\n * @param value - The `bigint` to check.\n * @param bytes - The number of bytes.\n * @returns Whether the `bigint` fits in the number of bytes.\n */\nfunction bigIntFits(value, bytes) {\n    (0, assert_1.assert)(bytes > 0);\n    /* eslint-disable no-bitwise */\n    const mask = value >> BigInt(31);\n    return !(((~value & mask) + (value & ~mask)) >> BigInt(bytes * 8 + ~0));\n    /* eslint-enable no-bitwise */\n}\n/**\n * Convert a signed `bigint` to a `Uint8Array`. This uses two's complement\n * encoding to represent negative numbers.\n *\n * To convert an unsigned `bigint` to a `Uint8Array` instead, use\n * {@link bigIntToBytes}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param value - The number to convert to bytes.\n * @param byteLength - The length of the resulting `Uint8Array`. If the number\n * is larger than the maximum value that can be represented by the given length,\n * an error is thrown.\n * @returns The bytes as `Uint8Array`.\n */\nfunction signedBigIntToBytes(value, byteLength) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(typeof byteLength === 'number', 'Byte length must be a number.');\n    (0, assert_1.assert)(byteLength > 0, 'Byte length must be greater than 0.');\n    (0, assert_1.assert)(bigIntFits(value, byteLength), 'Byte length is too small to represent the given value.');\n    // ESLint doesn't like mutating function parameters, so to avoid having to\n    // disable the rule, we create a new variable.\n    let numberValue = value;\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0; i < bytes.length; i++) {\n        bytes[i] = Number(BigInt.asUintN(8, numberValue));\n        // eslint-disable-next-line no-bitwise\n        numberValue >>= BigInt(8);\n    }\n    return bytes.reverse();\n}\nexports.signedBigIntToBytes = signedBigIntToBytes;\n/**\n * Convert a `number` to a `Uint8Array`.\n *\n * @param value - The number to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n * @throws If the number is not a safe integer.\n */\nfunction numberToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToBytes` instead.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.numberToBytes = numberToBytes;\n/**\n * Convert a `string` to a UTF-8 encoded `Uint8Array`.\n *\n * @param value - The string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction stringToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return new TextEncoder().encode(value);\n}\nexports.stringToBytes = stringToBytes;\n/**\n * Convert a base64 encoded string to a `Uint8Array`.\n *\n * @param value - The base64 encoded string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction base64ToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return base_1.base64.decode(value);\n}\nexports.base64ToBytes = base64ToBytes;\n/**\n * Convert a byte-like value to a `Uint8Array`. The value can be a `Uint8Array`,\n * a `bigint`, a `number`, or a `string`.\n *\n * This will attempt to guess the type of the value based on its type and\n * contents. For more control over the conversion, use the more specific\n * conversion functions, such as {@link hexToBytes} or {@link stringToBytes}.\n *\n * If the value is a `string`, and it is prefixed with `0x`, it will be\n * interpreted as a hexadecimal string. Otherwise, it will be interpreted as a\n * UTF-8 string. To convert a hexadecimal string to bytes without interpreting\n * it as a UTF-8 string, use {@link hexToBytes} instead.\n *\n * If the value is a `bigint`, it is assumed to be unsigned. To convert a signed\n * `bigint` to bytes, use {@link signedBigIntToBytes} instead.\n *\n * If the value is a `Uint8Array`, it will be returned as-is.\n *\n * @param value - The value to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction valueToBytes(value) {\n    if (typeof value === 'bigint') {\n        return bigIntToBytes(value);\n    }\n    if (typeof value === 'number') {\n        return numberToBytes(value);\n    }\n    if (typeof value === 'string') {\n        if (value.startsWith('0x')) {\n            return hexToBytes(value);\n        }\n        return stringToBytes(value);\n    }\n    if (isBytes(value)) {\n        return value;\n    }\n    throw new TypeError(`Unsupported value type: \"${typeof value}\".`);\n}\nexports.valueToBytes = valueToBytes;\n/**\n * Concatenate multiple byte-like values into a single `Uint8Array`. The values\n * can be `Uint8Array`, `bigint`, `number`, or `string`. This uses\n * {@link valueToBytes} under the hood to convert each value to bytes. Refer to\n * the documentation of that function for more information.\n *\n * @param values - The values to concatenate.\n * @returns The concatenated bytes as `Uint8Array`.\n */\nfunction concatBytes(values) {\n    const normalizedValues = new Array(values.length);\n    let byteLength = 0;\n    for (let i = 0; i < values.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const value = valueToBytes(values[i]);\n        normalizedValues[i] = value;\n        byteLength += value.length;\n    }\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0, offset = 0; i < normalizedValues.length; i++) {\n        // While we could simply spread the values into an array and use\n        // `Uint8Array.from`, that is a lot slower than using `Uint8Array.set`.\n        bytes.set(normalizedValues[i], offset);\n        offset += normalizedValues[i].length;\n    }\n    return bytes;\n}\nexports.concatBytes = concatBytes;\n/**\n * Create a {@link DataView} from a {@link Uint8Array}. This is a convenience\n * function that avoids having to create a {@link DataView} manually, which\n * requires passing the `byteOffset` and `byteLength` parameters every time.\n *\n * Not passing the `byteOffset` and `byteLength` parameters can result in\n * unexpected behavior when the {@link Uint8Array} is a view of a larger\n * {@link ArrayBuffer}, e.g., when using {@link Uint8Array.subarray}.\n *\n * This function also supports Node.js {@link Buffer}s.\n *\n * @example\n * ```typescript\n * const bytes = new Uint8Array([1, 2, 3]);\n *\n * // This is equivalent to:\n * // const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n * const dataView = createDataView(bytes);\n * ```\n * @param bytes - The bytes to create the {@link DataView} from.\n * @returns The {@link DataView}.\n */\nfunction createDataView(bytes) {\n    // To maintain compatibility with Node.js, we need to check if the bytes are\n    // a Buffer. If so, we need to slice the buffer to get the underlying\n    // ArrayBuffer.\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof Buffer !== 'undefined' && bytes instanceof Buffer) {\n        const buffer = bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n        return new DataView(buffer);\n    }\n    return new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n}\nexports.createDataView = createDataView;\n//# sourceMappingURL=bytes.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCaipChainId = exports.parseCaipAccountId = exports.parseCaipChainId = exports.isCaipAccountAddress = exports.isCaipAccountId = exports.isCaipReference = exports.isCaipNamespace = exports.isCaipChainId = exports.KnownCaipNamespace = exports.CaipAccountAddressStruct = exports.CaipAccountIdStruct = exports.CaipReferenceStruct = exports.CaipNamespaceStruct = exports.CaipChainIdStruct = exports.CAIP_ACCOUNT_ADDRESS_REGEX = exports.CAIP_ACCOUNT_ID_REGEX = exports.CAIP_REFERENCE_REGEX = exports.CAIP_NAMESPACE_REGEX = exports.CAIP_CHAIN_ID_REGEX = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nexports.CAIP_CHAIN_ID_REGEX = /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u;\nexports.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u;\nexports.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u;\nexports.CAIP_ACCOUNT_ID_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u;\nexports.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u;\n/**\n * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.\n */\nexports.CaipChainIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_CHAIN_ID_REGEX);\n/**\n * A CAIP-2 namespace, i.e., the first part of a CAIP chain ID.\n */\nexports.CaipNamespaceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_NAMESPACE_REGEX);\n/**\n * A CAIP-2 reference, i.e., the second part of a CAIP chain ID.\n */\nexports.CaipReferenceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_REFERENCE_REGEX);\n/**\n * A CAIP-10 account ID, i.e., a human-readable namespace, reference, and account address.\n */\nexports.CaipAccountIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ID_REGEX);\n/**\n * A CAIP-10 account address, i.e., the third part of the CAIP account ID.\n */\nexports.CaipAccountAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ADDRESS_REGEX);\n/** Known CAIP namespaces. */\nvar KnownCaipNamespace;\n(function (KnownCaipNamespace) {\n    /** EIP-155 compatible chains. */\n    KnownCaipNamespace[\"Eip155\"] = \"eip155\";\n})(KnownCaipNamespace = exports.KnownCaipNamespace || (exports.KnownCaipNamespace = {}));\n/**\n * Check if the given value is a {@link CaipChainId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipChainId}.\n */\nfunction isCaipChainId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipChainIdStruct);\n}\nexports.isCaipChainId = isCaipChainId;\n/**\n * Check if the given value is a {@link CaipNamespace}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipNamespace}.\n */\nfunction isCaipNamespace(value) {\n    return (0, superstruct_1.is)(value, exports.CaipNamespaceStruct);\n}\nexports.isCaipNamespace = isCaipNamespace;\n/**\n * Check if the given value is a {@link CaipReference}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipReference}.\n */\nfunction isCaipReference(value) {\n    return (0, superstruct_1.is)(value, exports.CaipReferenceStruct);\n}\nexports.isCaipReference = isCaipReference;\n/**\n * Check if the given value is a {@link CaipAccountId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipAccountId}.\n */\nfunction isCaipAccountId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountIdStruct);\n}\nexports.isCaipAccountId = isCaipAccountId;\n/**\n * Check if a value is a {@link CaipAccountAddress}.\n *\n * @param value - The value to validate.\n * @returns True if the value is a valid {@link CaipAccountAddress}.\n */\nfunction isCaipAccountAddress(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountAddressStruct);\n}\nexports.isCaipAccountAddress = isCaipAccountAddress;\n/**\n * Parse a CAIP-2 chain ID to an object containing the namespace and reference.\n * This validates the CAIP-2 chain ID before parsing it.\n *\n * @param caipChainId - The CAIP-2 chain ID to validate and parse.\n * @returns The parsed CAIP-2 chain ID.\n */\nfunction parseCaipChainId(caipChainId) {\n    const match = exports.CAIP_CHAIN_ID_REGEX.exec(caipChainId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP chain ID.');\n    }\n    return {\n        namespace: match.groups.namespace,\n        reference: match.groups.reference,\n    };\n}\nexports.parseCaipChainId = parseCaipChainId;\n/**\n * Parse an CAIP-10 account ID to an object containing the chain ID, parsed chain ID, and account address.\n * This validates the CAIP-10 account ID before parsing it.\n *\n * @param caipAccountId - The CAIP-10 account ID to validate and parse.\n * @returns The parsed CAIP-10 account ID.\n */\nfunction parseCaipAccountId(caipAccountId) {\n    const match = exports.CAIP_ACCOUNT_ID_REGEX.exec(caipAccountId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP account ID.');\n    }\n    return {\n        address: match.groups.accountAddress,\n        chainId: match.groups.chainId,\n        chain: {\n            namespace: match.groups.namespace,\n            reference: match.groups.reference,\n        },\n    };\n}\nexports.parseCaipAccountId = parseCaipAccountId;\n/**\n * Chain ID as defined per the CAIP-2\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md}.\n *\n * It defines a way to uniquely identify any blockchain in a human-readable\n * way.\n *\n * @param namespace - The standard (ecosystem) of similar blockchains.\n * @param reference - Identify of a blockchain within a given namespace.\n * @throws {@link Error}\n * This exception is thrown if the inputs does not comply with the CAIP-2\n * syntax specification\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md#syntax}.\n * @returns A CAIP chain ID.\n */\nfunction toCaipChainId(namespace, reference) {\n    if (!isCaipNamespace(namespace)) {\n        throw new Error(`Invalid \"namespace\", must match: ${exports.CAIP_NAMESPACE_REGEX.toString()}`);\n    }\n    if (!isCaipReference(reference)) {\n        throw new Error(`Invalid \"reference\", must match: ${exports.CAIP_REFERENCE_REGEX.toString()}`);\n    }\n    return `${namespace}:${reference}`;\n}\nexports.toCaipChainId = toCaipChainId;\n//# sourceMappingURL=caip-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChecksumStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst base64_1 = require(\"./base64.cjs\");\nexports.ChecksumStruct = (0, superstruct_1.size)((0, base64_1.base64)((0, superstruct_1.string)(), { paddingRequired: true }), 44, 44);\n//# sourceMappingURL=checksum.cjs.map","import { cloneDeep } from 'lodash';\n\nconst version = 43;\n\n/**\n * Remove unused 'currentAccountTab' state\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state?.PreferencesController?.currentAccountTab) {\n    delete state.PreferencesController.currentAccountTab;\n  }\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\nconst NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1.StrictHexStruct]);\nconst NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);\nconst BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);\nconst BytesLikeStruct = (0, superstruct_1.union)([hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);\nconst BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1.StrictHexStruct]), bytes_1.hexToBytes);\nconst HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nfunction createNumber(value) {\n    try {\n        const result = (0, superstruct_1.create)(value, NumberCoercer);\n        (0, assert_1.assert)(Number.isFinite(result), `Expected a number-like value, got \"${value}\".`);\n        return result;\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${value}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createNumber = createNumber;\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nfunction createBigInt(value) {\n    try {\n        // The `BigInt` constructor throws if the value is not a number-like value.\n        // There is no need to validate the value manually.\n        return (0, superstruct_1.create)(value, BigIntCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBigInt = createBigInt;\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nfunction createBytes(value) {\n    if (typeof value === 'string' && value.toLowerCase() === '0x') {\n        return new Uint8Array();\n    }\n    try {\n        return (0, superstruct_1.create)(value, BytesCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBytes = createBytes;\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nfunction createHex(value) {\n    if ((value instanceof Uint8Array && value.length === 0) ||\n        (typeof value === 'string' && value.toLowerCase() === '0x')) {\n        return '0x';\n    }\n    try {\n        return (0, superstruct_1.create)(value, HexCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createHex = createHex;\n//# sourceMappingURL=coercers.cjs.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _FrozenMap_map, _FrozenSet_set;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FrozenSet = exports.FrozenMap = void 0;\n/**\n * A {@link ReadonlyMap} that cannot be modified after instantiation.\n * The implementation uses an inner map hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this map.\n */\nclass FrozenMap {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").size;\n    }\n    [(_FrozenMap_map = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\")[Symbol.iterator]();\n    }\n    constructor(entries) {\n        _FrozenMap_map.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner map.\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").forEach((value, key, _map) => callbackfn.call(thisArg, value, key, this));\n    }\n    get(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").get(key);\n    }\n    has(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").has(key);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").values();\n    }\n    toString() {\n        return `FrozenMap(${this.size}) {${this.size > 0\n            ? ` ${[...this.entries()]\n                .map(([key, value]) => `${String(key)} => ${String(value)}`)\n                .join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenMap = FrozenMap;\n/**\n * A {@link ReadonlySet} that cannot be modified after instantiation.\n * The implementation uses an inner set hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this set.\n */\nclass FrozenSet {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").size;\n    }\n    [(_FrozenSet_set = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\")[Symbol.iterator]();\n    }\n    constructor(values) {\n        _FrozenSet_set.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner set.\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));\n    }\n    has(value) {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").has(value);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").values();\n    }\n    toString() {\n        return `FrozenSet(${this.size}) {${this.size > 0\n            ? ` ${[...this.values()].map((member) => String(member)).join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenSet = FrozenSet;\nObject.freeze(FrozenMap);\nObject.freeze(FrozenMap.prototype);\nObject.freeze(FrozenSet);\nObject.freeze(FrozenSet.prototype);\n//# sourceMappingURL=collections.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=encryption-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapError = exports.getErrorMessage = exports.isErrorWithStack = exports.isErrorWithMessage = exports.isErrorWithCode = void 0;\nconst pony_cause_1 = require(\"pony-cause\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * Type guard for determining whether the given value is an instance of Error.\n * For errors generated via `fs.promises`, `error instanceof Error` won't work,\n * so we have to come up with another way of testing.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isError(error) {\n    return (error instanceof Error ||\n        ((0, misc_1.isObject)(error) && error.constructor.name === 'Error'));\n}\n/**\n * Type guard for determining whether the given value is an error object with a\n * `code` property such as the type of error that Node throws for filesystem\n * operations, etc.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithCode(error) {\n    return typeof error === 'object' && error !== null && 'code' in error;\n}\nexports.isErrorWithCode = isErrorWithCode;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithMessage(error) {\n    return typeof error === 'object' && error !== null && 'message' in error;\n}\nexports.isErrorWithMessage = isErrorWithMessage;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `stack` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithStack(error) {\n    return typeof error === 'object' && error !== null && 'stack' in error;\n}\nexports.isErrorWithStack = isErrorWithStack;\n/**\n * Attempts to obtain the message from a possible error object, defaulting to an\n * empty string if it is impossible to do so.\n *\n * @param error - The possible error to get the message from.\n * @returns The message if `error` is an object with a `message` property;\n * the string version of `error` if it is not `undefined` or `null`; otherwise\n * an empty string.\n */\nfunction getErrorMessage(error) {\n    if (isErrorWithMessage(error) && typeof error.message === 'string') {\n        return error.message;\n    }\n    if ((0, misc_1.isNullOrUndefined)(error)) {\n        return '';\n    }\n    return String(error);\n}\nexports.getErrorMessage = getErrorMessage;\n/**\n * Builds a new error object, linking it to the original error via the `cause`\n * property if it is an Error.\n *\n * This function is useful to reframe error messages in general, but is\n * _critical_ when interacting with any of Node's filesystem functions as\n * provided via `fs.promises`, because these do not produce stack traces in the\n * case of an I/O error (see <https://github.com/nodejs/node/issues/30944>).\n *\n * @param originalError - The error to be wrapped (something throwable).\n * @param message - The desired message of the new error.\n * @returns A new error object.\n */\nfunction wrapError(originalError, message) {\n    if (isError(originalError)) {\n        let error;\n        if (Error.length === 2) {\n            // for some reason `tsserver` is not complaining that the\n            // Error constructor doesn't support a second argument in the editor,\n            // but `tsc` does. Error causes are not supported by our current tsc target (ES2020, we need ES2022 to make this work)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new Error(message, { cause: originalError });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new pony_cause_1.ErrorWithCause(message, { cause: originalError });\n        }\n        if (isErrorWithCode(originalError)) {\n            error.code = originalError.code;\n        }\n        return error;\n    }\n    if (message.length > 0) {\n        return new Error(`${String(originalError)}: ${message}`);\n    }\n    return new Error(String(originalError));\n}\nexports.wrapError = wrapError;\n//# sourceMappingURL=errors.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.remove0x = exports.add0x = exports.isValidChecksumAddress = exports.getChecksumAddress = exports.isValidHexAddress = exports.assertIsStrictHexString = exports.assertIsHexString = exports.isStrictHexString = exports.isHexString = exports.HexChecksumAddressStruct = exports.HexAddressStruct = exports.StrictHexStruct = exports.HexStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nexports.HexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^(?:0x)?[0-9a-f]+$/iu);\nexports.StrictHexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]+$/iu);\nexports.HexAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]{40}$/u);\nexports.HexChecksumAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-fA-F]{40}$/u);\n/**\n * Check if a string is a valid hex string.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isHexString(value) {\n    return (0, superstruct_1.is)(value, exports.HexStruct);\n}\nexports.isHexString = isHexString;\n/**\n * Strictly check if a string is a valid hex string. A valid hex string must\n * start with the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isStrictHexString(value) {\n    return (0, superstruct_1.is)(value, exports.StrictHexStruct);\n}\nexports.isStrictHexString = isStrictHexString;\n/**\n * Assert that a value is a valid hex string.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsHexString(value) {\n    (0, assert_1.assert)(isHexString(value), 'Value must be a hexadecimal string.');\n}\nexports.assertIsHexString = assertIsHexString;\n/**\n * Assert that a value is a valid hex string. A valid hex string must start with\n * the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsStrictHexString(value) {\n    (0, assert_1.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with \"0x\".');\n}\nexports.assertIsStrictHexString = assertIsStrictHexString;\n/**\n * Validate that the passed prefixed hex string is an all-lowercase\n * hex address, or a valid mixed-case checksum address.\n *\n * @param possibleAddress - Input parameter to check against.\n * @returns Whether or not the input is a valid hex address.\n */\nfunction isValidHexAddress(possibleAddress) {\n    return ((0, superstruct_1.is)(possibleAddress, exports.HexAddressStruct) ||\n        isValidChecksumAddress(possibleAddress));\n}\nexports.isValidHexAddress = isValidHexAddress;\n/**\n * Encode a passed hex string as an ERC-55 mixed-case checksum address.\n *\n * @param address - The hex address to encode.\n * @returns The address encoded according to ERC-55.\n * @see https://eips.ethereum.org/EIPS/eip-55\n */\nfunction getChecksumAddress(address) {\n    (0, assert_1.assert)((0, superstruct_1.is)(address, exports.HexChecksumAddressStruct), 'Invalid hex address.');\n    const unPrefixed = remove0x(address.toLowerCase());\n    const unPrefixedHash = remove0x((0, bytes_1.bytesToHex)((0, sha3_1.keccak_256)(unPrefixed)));\n    return `0x${unPrefixed\n        .split('')\n        .map((character, nibbleIndex) => {\n        const hashCharacter = unPrefixedHash[nibbleIndex];\n        (0, assert_1.assert)((0, superstruct_1.is)(hashCharacter, (0, superstruct_1.string)()), 'Hash shorter than address.');\n        return parseInt(hashCharacter, 16) > 7\n            ? character.toUpperCase()\n            : character;\n    })\n        .join('')}`;\n}\nexports.getChecksumAddress = getChecksumAddress;\n/**\n * Validate that the passed hex string is a valid ERC-55 mixed-case\n * checksum address.\n *\n * @param possibleChecksum - The hex address to check.\n * @returns True if the address is a checksum address.\n */\nfunction isValidChecksumAddress(possibleChecksum) {\n    if (!(0, superstruct_1.is)(possibleChecksum, exports.HexChecksumAddressStruct)) {\n        return false;\n    }\n    return getChecksumAddress(possibleChecksum) === possibleChecksum;\n}\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Add the `0x`-prefix to a hexadecimal string. If the string already has the\n * prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to add the prefix to.\n * @returns The prefixed hexadecimal string.\n */\nfunction add0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x')) {\n        return hexadecimal;\n    }\n    if (hexadecimal.startsWith('0X')) {\n        return `0x${hexadecimal.substring(2)}`;\n    }\n    return `0x${hexadecimal}`;\n}\nexports.add0x = add0x;\n/**\n * Remove the `0x`-prefix from a hexadecimal string. If the string doesn't have\n * the prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to remove the prefix from.\n * @returns The un-prefixed hexadecimal string.\n */\nfunction remove0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x') || hexadecimal.startsWith('0X')) {\n        return hexadecimal.substring(2);\n    }\n    return hexadecimal;\n}\nexports.remove0x = remove0x;\n//# sourceMappingURL=hex.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./assert.cjs\"), exports);\n__exportStar(require(\"./base64.cjs\"), exports);\n__exportStar(require(\"./bytes.cjs\"), exports);\n__exportStar(require(\"./caip-types.cjs\"), exports);\n__exportStar(require(\"./checksum.cjs\"), exports);\n__exportStar(require(\"./coercers.cjs\"), exports);\n__exportStar(require(\"./collections.cjs\"), exports);\n__exportStar(require(\"./encryption-types.cjs\"), exports);\n__exportStar(require(\"./errors.cjs\"), exports);\n__exportStar(require(\"./hex.cjs\"), exports);\n__exportStar(require(\"./json.cjs\"), exports);\n__exportStar(require(\"./keyring.cjs\"), exports);\n__exportStar(require(\"./logging.cjs\"), exports);\n__exportStar(require(\"./misc.cjs\"), exports);\n__exportStar(require(\"./number.cjs\"), exports);\n__exportStar(require(\"./opaque.cjs\"), exports);\n__exportStar(require(\"./promise.cjs\"), exports);\n__exportStar(require(\"./time.cjs\"), exports);\n__exportStar(require(\"./transaction-types.cjs\"), exports);\n__exportStar(require(\"./versions.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.getJsonSize = exports.getSafeJson = exports.isValidJson = exports.JsonStruct = exports.UnsafeJsonStruct = exports.exactOptional = exports.object = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * A struct to check if the given value is a valid object, with support for\n * {@link exactOptional} types.\n *\n * @param schema - The schema of the object.\n * @returns A struct to check if the given value is an object.\n */\nconst object = (schema) => \n// The type is slightly different from a regular object struct, because we\n// want to make properties with `undefined` in their type optional, but not\n// `undefined` itself. This means that we need a type cast.\n(0, superstruct_1.object)(schema);\nexports.object = object;\n/**\n * Check the last field of a path is present.\n *\n * @param context - The context to check.\n * @param context.path - The path to check.\n * @param context.branch - The branch to check.\n * @returns Whether the last field of a path is present.\n */\nfunction hasOptional({ path, branch }) {\n    const field = path[path.length - 1];\n    return (0, misc_1.hasProperty)(branch[branch.length - 2], field);\n}\n/**\n * A struct which allows the property of an object to be absent, or to be present\n * as long as it's valid and not set to `undefined`.\n *\n * This struct should be used in conjunction with the {@link object} from this\n * library, to get proper type inference.\n *\n * @param struct - The struct to check the value against, if present.\n * @returns A struct to check if the given value is valid, or not present.\n * @example\n * ```ts\n * const struct = object({\n *   foo: exactOptional(string()),\n *   bar: exactOptional(number()),\n *   baz: optional(boolean()),\n *   qux: unknown(),\n * });\n *\n * type Type = Infer<typeof struct>;\n * // Type is equivalent to:\n * // {\n * //   foo?: string;\n * //   bar?: number;\n * //   baz?: boolean | undefined;\n * //   qux: unknown;\n * // }\n * ```\n */\nfunction exactOptional(struct) {\n    return new superstruct_1.Struct({\n        ...struct,\n        type: `optional ${struct.type}`,\n        validator: (value, context) => !hasOptional(context) || struct.validator(value, context),\n        refiner: (value, context) => !hasOptional(context) || struct.refiner(value, context),\n    });\n}\nexports.exactOptional = exactOptional;\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () => (0, superstruct_1.define)('finite number', (value) => {\n    return (0, superstruct_1.is)(value, (0, superstruct_1.number)()) && Number.isFinite(value);\n});\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexports.UnsafeJsonStruct = (0, superstruct_1.union)([\n    (0, superstruct_1.literal)(null),\n    (0, superstruct_1.boolean)(),\n    finiteNumber(),\n    (0, superstruct_1.string)(),\n    (0, superstruct_1.array)((0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n    (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n]);\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexports.JsonStruct = (0, superstruct_1.coerce)(exports.UnsafeJsonStruct, (0, superstruct_1.any)(), (value) => {\n    (0, assert_1.assertStruct)(value, exports.UnsafeJsonStruct);\n    return JSON.parse(JSON.stringify(value, (propKey, propValue) => {\n        // Strip __proto__ and constructor properties to prevent prototype pollution.\n        if (propKey === '__proto__' || propKey === 'constructor') {\n            return undefined;\n        }\n        return propValue;\n    }));\n});\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nfunction isValidJson(value) {\n    try {\n        getSafeJson(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexports.isValidJson = isValidJson;\n/**\n * Validate and return sanitized JSON.\n *\n * Note:\n * This function uses sanitized JsonStruct for validation\n * that applies stringify and then parse of a value provided\n * to ensure that there are no getters which can have side effects\n * that can cause security issues.\n *\n * @param value - JSON structure to be processed.\n * @returns Sanitized JSON structure.\n */\nfunction getSafeJson(value) {\n    return (0, superstruct_1.create)(value, exports.JsonStruct);\n}\nexports.getSafeJson = getSafeJson;\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nfunction getJsonSize(value) {\n    (0, assert_1.assertStruct)(value, exports.JsonStruct, 'Invalid JSON value');\n    const json = JSON.stringify(value);\n    return new TextEncoder().encode(json).byteLength;\n}\nexports.getJsonSize = getJsonSize;\n/**\n * The string '2.0'.\n */\nexports.jsonrpc2 = '2.0';\nexports.JsonRpcVersionStruct = (0, superstruct_1.literal)(exports.jsonrpc2);\nexports.JsonRpcIdStruct = (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.string)()]));\nexports.JsonRpcErrorStruct = (0, exports.object)({\n    code: (0, superstruct_1.integer)(),\n    message: (0, superstruct_1.string)(),\n    data: exactOptional(exports.JsonStruct),\n    stack: exactOptional((0, superstruct_1.string)()),\n});\nexports.JsonRpcParamsStruct = (0, superstruct_1.union)([(0, superstruct_1.record)((0, superstruct_1.string)(), exports.JsonStruct), (0, superstruct_1.array)(exports.JsonStruct)]);\nexports.JsonRpcRequestStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\nexports.JsonRpcNotificationStruct = (0, exports.object)({\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nfunction isJsonRpcNotification(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcNotificationStruct);\n}\nexports.isJsonRpcNotification = isJsonRpcNotification;\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nfunction assertIsJsonRpcNotification(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcNotificationStruct, 'Invalid JSON-RPC notification', ErrorWrapper);\n}\nexports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nfunction isJsonRpcRequest(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcRequestStruct);\n}\nexports.isJsonRpcRequest = isJsonRpcRequest;\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nfunction assertIsJsonRpcRequest(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcRequestStruct, 'Invalid JSON-RPC request', ErrorWrapper);\n}\nexports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;\nexports.PendingJsonRpcResponseStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: (0, superstruct_1.optional)((0, superstruct_1.unknown)()),\n    error: (0, superstruct_1.optional)(exports.JsonRpcErrorStruct),\n});\nexports.JsonRpcSuccessStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: exports.JsonStruct,\n});\nexports.JsonRpcFailureStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    error: exports.JsonRpcErrorStruct,\n});\nexports.JsonRpcResponseStruct = (0, superstruct_1.union)([\n    exports.JsonRpcSuccessStruct,\n    exports.JsonRpcFailureStruct,\n]);\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nfunction isPendingJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.PendingJsonRpcResponseStruct);\n}\nexports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nfunction assertIsPendingJsonRpcResponse(response, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(response, exports.PendingJsonRpcResponseStruct, 'Invalid pending JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nfunction isJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.JsonRpcResponseStruct);\n}\nexports.isJsonRpcResponse = isJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nfunction assertIsJsonRpcResponse(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcResponseStruct, 'Invalid JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nfunction isJsonRpcSuccess(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcSuccessStruct);\n}\nexports.isJsonRpcSuccess = isJsonRpcSuccess;\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nfunction assertIsJsonRpcSuccess(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcSuccessStruct, 'Invalid JSON-RPC success response', ErrorWrapper);\n}\nexports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nfunction isJsonRpcFailure(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcFailureStruct);\n}\nexports.isJsonRpcFailure = isJsonRpcFailure;\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nfunction assertIsJsonRpcFailure(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcFailureStruct, 'Invalid JSON-RPC failure response', ErrorWrapper);\n}\nexports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nfunction isJsonRpcError(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcErrorStruct);\n}\nexports.isJsonRpcError = isJsonRpcError;\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nfunction assertIsJsonRpcError(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcErrorStruct, 'Invalid JSON-RPC error', ErrorWrapper);\n}\nexports.assertIsJsonRpcError = assertIsJsonRpcError;\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nfunction getJsonRpcIdValidator(options) {\n    const { permitEmptyString, permitFractions, permitNull } = {\n        permitEmptyString: true,\n        permitFractions: false,\n        permitNull: true,\n        ...options,\n    };\n    /**\n     * Type guard for {@link JsonRpcId}.\n     *\n     * @param id - The JSON-RPC ID value to check.\n     * @returns Whether the given ID is valid per the options given to the\n     * factory.\n     */\n    const isValidJsonRpcId = (id) => {\n        return Boolean((typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n            (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n            (permitNull && id === null));\n    };\n    return isValidJsonRpcId;\n}\nexports.getJsonRpcIdValidator = getJsonRpcIdValidator;\n//# sourceMappingURL=json.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=keyring.cjs.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createModuleLogger = exports.createProjectLogger = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst globalLogger = (0, debug_1.default)('metamask');\n/**\n * Creates a logger via the `debug` library whose log messages will be tagged\n * using the name of your project. By default, such messages will be\n * suppressed, but you can reveal them by setting the `DEBUG` environment\n * variable to `metamask:<projectName>`. You can also set this variable to\n * `metamask:*` if you want to see log messages from all MetaMask projects that\n * are also using this function to create their loggers.\n *\n * @param projectName - The name of your project. This should be the name of\n * your NPM package if you're developing one.\n * @returns An instance of `debug`.\n */\nfunction createProjectLogger(projectName) {\n    return globalLogger.extend(projectName);\n}\nexports.createProjectLogger = createProjectLogger;\n/**\n * Creates a logger via the `debug` library which is derived from the logger for\n * the whole project whose log messages will be tagged using the name of your\n * module. By default, such messages will be suppressed, but you can reveal them\n * by setting the `DEBUG` environment variable to\n * `metamask:<projectName>:<moduleName>`. You can also set this variable to\n * `metamask:<projectName>:*` if you want to see log messages from the project,\n * or `metamask:*` if you want to see log messages from all MetaMask projects.\n *\n * @param projectLogger - The logger created via {@link createProjectLogger}.\n * @param moduleName - The name of your module. You could use the name of the\n * file where you're using this logger or some other name.\n * @returns An instance of `debug`.\n */\nfunction createModuleLogger(projectLogger, moduleName) {\n    return projectLogger.extend(moduleName);\n}\nexports.createModuleLogger = createModuleLogger;\n//# sourceMappingURL=logging.cjs.map","\"use strict\";\n//\n// Types\n//\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.getKnownPropertyNames = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;\n//\n// Type Guards\n//\n/**\n * A {@link NonEmptyArray} type guard.\n *\n * @template Element - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Type guard for \"nullishness\".\n *\n * @param value - Any value.\n * @returns `true` if the value is null or undefined, `false` otherwise.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nfunction isObject(value) {\n    return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\nexports.isObject = isObject;\n//\n// Other utility functions\n//\n/**\n * A type guard for ensuring an object has a property.\n *\n * @param objectToCheck - The object to check.\n * @param name - The property name to check for.\n * @returns Whether the specified object has an own property with the specified\n * name, regardless of whether it is enumerable or not.\n */\nconst hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);\nexports.hasProperty = hasProperty;\n/**\n * `Object.getOwnPropertyNames()` is intentionally generic: it returns the\n * immediate property names of an object, but it cannot make guarantees about\n * the contents of that object, so the type of the property names is merely\n * `string[]`. While this is technically accurate, it is also unnecessary if we\n * have an object with a type that we own (such as an enum).\n *\n * @param object - The plain object.\n * @returns The own property names of the object which are assigned a type\n * derived from the object itself.\n */\nfunction getKnownPropertyNames(object) {\n    return Object.getOwnPropertyNames(object);\n}\nexports.getKnownPropertyNames = getKnownPropertyNames;\n/**\n * Predefined sizes (in Bytes) of specific parts of JSON structure.\n */\nvar JsonSize;\n(function (JsonSize) {\n    JsonSize[JsonSize[\"Null\"] = 4] = \"Null\";\n    JsonSize[JsonSize[\"Comma\"] = 1] = \"Comma\";\n    JsonSize[JsonSize[\"Wrapper\"] = 1] = \"Wrapper\";\n    JsonSize[JsonSize[\"True\"] = 4] = \"True\";\n    JsonSize[JsonSize[\"False\"] = 5] = \"False\";\n    JsonSize[JsonSize[\"Quote\"] = 1] = \"Quote\";\n    JsonSize[JsonSize[\"Colon\"] = 1] = \"Colon\";\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    JsonSize[JsonSize[\"Date\"] = 24] = \"Date\";\n})(JsonSize = exports.JsonSize || (exports.JsonSize = {}));\n/**\n * Regular expression with pattern matching for (special) escaped characters.\n */\nexports.ESCAPE_CHARACTERS_REGEXP = /\"|\\\\|\\n|\\r|\\t/gu;\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nfunction isPlainObject(value) {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n    try {\n        let proto = value;\n        while (Object.getPrototypeOf(proto) !== null) {\n            proto = Object.getPrototypeOf(proto);\n        }\n        return Object.getPrototypeOf(value) === proto;\n    }\n    catch (_) {\n        return false;\n    }\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Check if character is ASCII.\n *\n * @param character - Character.\n * @returns True if a character code is ASCII, false if not.\n */\nfunction isASCII(character) {\n    return character.charCodeAt(0) <= 127;\n}\nexports.isASCII = isASCII;\n/**\n * Calculate string size.\n *\n * @param value - String value to calculate size.\n * @returns Number of bytes used to store whole string value.\n */\nfunction calculateStringSize(value) {\n    const size = value.split('').reduce((total, character) => {\n        if (isASCII(character)) {\n            return total + 1;\n        }\n        return total + 2;\n    }, 0);\n    // Also detect characters that need backslash escape\n    return size + (value.match(exports.ESCAPE_CHARACTERS_REGEXP) ?? []).length;\n}\nexports.calculateStringSize = calculateStringSize;\n/**\n * Calculate size of a number ofter JSON serialization.\n *\n * @param value - Number value to calculate size.\n * @returns Number of bytes used to store whole number in JSON.\n */\nfunction calculateNumberSize(value) {\n    return value.toString().length;\n}\nexports.calculateNumberSize = calculateNumberSize;\n//# sourceMappingURL=misc.cjs.map","import { cloneDeep } from 'lodash';\n\nconst version = 44;\n\n/**\n * Remove unused 'mkrMigrationReminderTimestamp' state from the `AppStateController`\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (\n    typeof state?.AppStateController?.mkrMigrationReminderTimestamp !==\n    'undefined'\n  ) {\n    delete state.AppStateController.mkrMigrationReminderTimestamp;\n  }\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexToBigInt = exports.hexToNumber = exports.bigIntToHex = exports.numberToHex = void 0;\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n/**\n * Convert a number to a hexadecimal string. This verifies that the number is a\n * non-negative safe integer.\n *\n * To convert a `bigint` to a hexadecimal string instead, use\n * {@link bigIntToHex}.\n *\n * @example\n * ```typescript\n * numberToHex(0); // '0x0'\n * numberToHex(1); // '0x1'\n * numberToHex(16); // '0x10'\n * ```\n * @param value - The number to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the number is not a non-negative safe integer.\n */\nconst numberToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToHex` instead.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.numberToHex = numberToHex;\n/**\n * Convert a `bigint` to a hexadecimal string. This verifies that the `bigint`\n * is a non-negative integer.\n *\n * To convert a number to a hexadecimal string instead, use {@link numberToHex}.\n *\n * @example\n * ```typescript\n * bigIntToHex(0n); // '0x0'\n * bigIntToHex(1n); // '0x1'\n * bigIntToHex(16n); // '0x10'\n * ```\n * @param value - The `bigint` to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the `bigint` is not a non-negative integer.\n */\nconst bigIntToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative bigint.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert a hexadecimal string to a number. This verifies that the string is a\n * valid hex string, and that the resulting number is a safe integer. Both\n * \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a `bigint` instead, use\n * {@link hexToBigInt}.\n *\n * @example\n * ```typescript\n * hexToNumber('0x0'); // 0\n * hexToNumber('0x1'); // 1\n * hexToNumber('0x10'); // 16\n * ```\n * @param value - The hexadecimal string to convert to a number.\n * @returns The number.\n * @throws If the value is not a valid hexadecimal string, or if the resulting\n * number is not a safe integer.\n */\nconst hexToNumber = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // `parseInt` accepts values without the \"0x\"-prefix, whereas `Number` does\n    // not. Using this is slightly faster than `Number(add0x(value))`.\n    const numberValue = parseInt(value, 16);\n    (0, assert_1.assert)(Number.isSafeInteger(numberValue), 'Value is not a safe integer. Use `hexToBigInt` instead.');\n    return numberValue;\n};\nexports.hexToNumber = hexToNumber;\n/**\n * Convert a hexadecimal string to a `bigint`. This verifies that the string is\n * a valid hex string. Both \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a number instead, use {@link hexToNumber}.\n *\n * @example\n * ```typescript\n * hexToBigInt('0x0'); // 0n\n * hexToBigInt('0x1'); // 1n\n * hexToBigInt('0x10'); // 16n\n * ```\n * @param value - The hexadecimal string to convert to a `bigint`.\n * @returns The `bigint`.\n * @throws If the value is not a valid hexadecimal string.\n */\nconst hexToBigInt = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // The `BigInt` constructor requires the \"0x\"-prefix to parse a hex string.\n    return BigInt((0, hex_1.add0x)(value));\n};\nexports.hexToBigInt = hexToBigInt;\n//# sourceMappingURL=number.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=opaque.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDeferredPromise = void 0;\n/**\n * Create a defered Promise.\n *\n * If the Promise is rejected prior to a handler being added, this can result in an\n * `UnhandledPromiseRejection` error. Optionally this can be suppressed with the\n * `suppressUnhandledRejection` flag, as it's common to belatedly handle deferred Promises, or to\n * ignore them if they're no longer relevant (e.g. related to a cancelled request).\n *\n * However, be very careful that you have handled the Promise if you do this. Suppressing these\n * errors is dangerous, they exist for good reason. An unhandled rejection can hide errors, making\n * debugging extremely difficult. They should only be suppressed if you're confident that the\n * Promise is always handled correctly, in both the success and failure cases.\n *\n * @param args - The arguments.\n * @param args.suppressUnhandledRejection - This option adds an empty error handler\n * to the Promise to suppress the UnhandledPromiseRejection error. This can be\n * useful if the deferred Promise is sometimes intentionally not used.\n * @returns A deferred Promise.\n * @template Result - The result type of the Promise.\n */\nfunction createDeferredPromise({ suppressUnhandledRejection = false, } = {}) {\n    let resolve;\n    let reject;\n    const promise = new Promise((innerResolve, innerReject) => {\n        resolve = innerResolve;\n        reject = innerReject;\n    });\n    if (suppressUnhandledRejection) {\n        promise.catch((_error) => {\n            // This handler is used to suppress the UnhandledPromiseRejection error\n        });\n    }\n    // @ts-expect-error We know that these are assigned, but TypeScript doesn't\n    return { promise, resolve, reject };\n}\nexports.createDeferredPromise = createDeferredPromise;\n//# sourceMappingURL=promise.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */\nvar Duration;\n(function (Duration) {\n    /**\n     * A millisecond.\n     */\n    Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n    /**\n     * A second, in milliseconds.\n     */\n    Duration[Duration[\"Second\"] = 1000] = \"Second\";\n    /**\n     * A minute, in milliseconds.\n     */\n    Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n    /**\n     * An hour, in milliseconds.\n     */\n    Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n    /**\n     * A day, in milliseconds.\n     */\n    Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n    /**\n     * A week, in milliseconds.\n     */\n    Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n    /**\n     * A year, in milliseconds.\n     */\n    Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = (number) => Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name) => {\n    if (!isNonNegativeInteger(number)) {\n        throw new Error(`\"${name}\" must be a non-negative integer. Received: \"${number}\".`);\n    }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nfunction inMilliseconds(count, duration) {\n    assertIsNonNegativeInteger(count, 'count');\n    return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n    assertIsNonNegativeInteger(timestamp, 'timestamp');\n    return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;\n//# sourceMappingURL=time.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=transaction-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst semver_1 = require(\"semver\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * A struct for validating a version string.\n */\nexports.VersionStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version', (value) => {\n    if ((0, semver_1.valid)(value) === null) {\n        return `Expected SemVer version, got \"${value}\"`;\n    }\n    return true;\n});\nexports.VersionRangeStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version range', (value) => {\n    if ((0, semver_1.validRange)(value) === null) {\n        return `Expected SemVer range, got \"${value}\"`;\n    }\n    return true;\n});\n/**\n * Checks whether a SemVer version is valid.\n *\n * @param version - A potential version.\n * @returns `true` if the version is valid, and `false` otherwise.\n */\nfunction isValidSemVerVersion(version) {\n    return (0, superstruct_1.is)(version, exports.VersionStruct);\n}\nexports.isValidSemVerVersion = isValidSemVerVersion;\n/**\n * Checks whether a SemVer version range is valid.\n *\n * @param versionRange - A potential version range.\n * @returns `true` if the version range is valid, and `false` otherwise.\n */\nfunction isValidSemVerRange(versionRange) {\n    return (0, superstruct_1.is)(versionRange, exports.VersionRangeStruct);\n}\nexports.isValidSemVerRange = isValidSemVerRange;\n/**\n * Asserts that a value is a valid concrete SemVer version.\n *\n * @param version - A potential SemVer concrete version.\n */\nfunction assertIsSemVerVersion(version) {\n    (0, assert_1.assertStruct)(version, exports.VersionStruct);\n}\nexports.assertIsSemVerVersion = assertIsSemVerVersion;\n/**\n * Asserts that a value is a valid SemVer range.\n *\n * @param range - A potential SemVer range.\n */\nfunction assertIsSemVerRange(range) {\n    (0, assert_1.assertStruct)(range, exports.VersionRangeStruct);\n}\nexports.assertIsSemVerRange = assertIsSemVerRange;\n/**\n * Checks whether a SemVer version is greater than another.\n *\n * @param version1 - The left-hand version.\n * @param version2 - The right-hand version.\n * @returns `version1 > version2`.\n */\nfunction gtVersion(version1, version2) {\n    return (0, semver_1.gt)(version1, version2);\n}\nexports.gtVersion = gtVersion;\n/**\n * Checks whether a SemVer version is greater than all possibilities in a range.\n *\n * @param version - A SemvVer version.\n * @param range - The range to check against.\n * @returns `version > range`.\n */\nfunction gtRange(version, range) {\n    return (0, semver_1.gtr)(version, range);\n}\nexports.gtRange = gtRange;\n/**\n * Returns whether a SemVer version satisfies a SemVer range.\n *\n * @param version - The SemVer version to check.\n * @param versionRange - The SemVer version range to check against.\n * @returns Whether the version satisfied the version range.\n */\nfunction satisfiesVersionRange(version, versionRange) {\n    return (0, semver_1.satisfies)(version, versionRange, {\n        includePrerelease: true,\n    });\n}\nexports.satisfiesVersionRange = satisfiesVersionRange;\n//# sourceMappingURL=versions.cjs.map","let { urlAlphabet } = require('./url-alphabet/index.cjs')\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nmodule.exports = { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nmodule.exports = { urlAlphabet }\n","import { cloneDeep } from 'lodash';\n\nconst version = 45;\n\n/**\n * Replaces {@code PreferencesController.ipfsGateway} with 'dweb.link' if set\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nconst outdatedGateways = ['ipfs.io', 'ipfs.dweb.link'];\n\nfunction transformState(state) {\n  if (outdatedGateways.includes(state?.PreferencesController?.ipfsGateway)) {\n    state.PreferencesController.ipfsGateway = 'dweb.link';\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 46;\n\n/**\n * Delete {@code ABTestController} state\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (typeof state?.ABTestController !== 'undefined') {\n    delete state.ABTestController;\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 47;\n\n/**\n * Stringify the `metamaskNetworkId` property of all transactions\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const transactions = state?.TransactionController?.transactions;\n  if (Array.isArray(transactions)) {\n    transactions.forEach((transaction) => {\n      if (typeof transaction.metamaskNetworkId === 'number') {\n        transaction.metamaskNetworkId =\n          transaction.metamaskNetworkId.toString();\n      }\n    });\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 48;\n\n/**\n * 1.  Delete NetworkController.settings\n * 2a. Migrate NetworkController.provider to Rinkeby if set to type 'rpc' or\n *     'localhost'.\n * 2b. Re-key provider.rpcTarget to provider.rpcUrl\n * 3.  Add localhost network to frequentRpcListDetail.\n * 4.  Delete CachedBalancesController.cachedBalances\n * 5.  Convert transactions metamaskNetworkId to decimal if they are hex\n * 6.  Convert address book keys from decimal to hex\n * 7.  Delete localhost key in IncomingTransactionsController\n * 8.  Merge 'localhost' tokens into 'rpc' tokens\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nconst hexRegEx = /^0x[0-9a-f]+$/iu;\nconst chainIdRegEx = /^0x[1-9a-f]+[0-9a-f]*$/iu;\n\nfunction transformState(state = {}) {\n  // 1. Delete NetworkController.settings\n  delete state.NetworkController?.settings;\n\n  // 2. Migrate NetworkController.provider to Rinkeby or rename rpcTarget key\n  const provider = state.NetworkController?.provider || {};\n  const isCustomRpcWithInvalidChainId =\n    provider.type === 'rpc' &&\n    (typeof provider.chainId !== 'string' ||\n      !chainIdRegEx.test(provider.chainId));\n  if (isCustomRpcWithInvalidChainId || provider.type === 'localhost') {\n    state.NetworkController.provider = {\n      type: 'rinkeby',\n      rpcUrl: '',\n      chainId: '0x4',\n      nickname: '',\n      rpcPrefs: {},\n      ticker: 'ETH',\n    };\n  } else if (state.NetworkController?.provider) {\n    if ('rpcTarget' in state.NetworkController.provider) {\n      const rpcUrl = state.NetworkController.provider.rpcTarget;\n      state.NetworkController.provider.rpcUrl = rpcUrl;\n    }\n    delete state.NetworkController?.provider?.rpcTarget;\n  }\n\n  // 3.  Add localhost network to frequentRpcListDetail.\n  if (!state.PreferencesController) {\n    state.PreferencesController = {};\n  }\n  if (!state.PreferencesController.frequentRpcListDetail) {\n    state.PreferencesController.frequentRpcListDetail = [];\n  }\n  state.PreferencesController.frequentRpcListDetail.unshift({\n    rpcUrl: 'http://localhost:8545',\n    chainId: '0x539',\n    ticker: 'ETH',\n    nickname: 'Localhost 8545',\n    rpcPrefs: {},\n  });\n\n  // 4.  Delete CachedBalancesController.cachedBalances\n  delete state.CachedBalancesController?.cachedBalances;\n\n  // 5.  Convert transactions metamaskNetworkId to decimal if they are hex\n  const transactions = state.TransactionController?.transactions;\n  if (Array.isArray(transactions)) {\n    transactions.forEach((transaction) => {\n      const metamaskNetworkId = transaction?.metamaskNetworkId;\n      if (\n        typeof metamaskNetworkId === 'string' &&\n        hexRegEx.test(metamaskNetworkId)\n      ) {\n        transaction.metamaskNetworkId = parseInt(\n          metamaskNetworkId,\n          16,\n        ).toString(10);\n      }\n    });\n  }\n\n  // 6.  Convert address book keys from decimal to hex\n  const addressBook = state.AddressBookController?.addressBook || {};\n  Object.keys(addressBook).forEach((networkKey) => {\n    if (/^\\d+$/iu.test(networkKey)) {\n      const chainId = `0x${parseInt(networkKey, 10).toString(16)}`;\n      updateChainIds(addressBook[networkKey], chainId);\n\n      if (addressBook[chainId]) {\n        mergeAddressBookKeys(addressBook, networkKey, chainId);\n      } else {\n        addressBook[chainId] = addressBook[networkKey];\n      }\n      delete addressBook[networkKey];\n    }\n  });\n\n  // 7.  Delete localhost key in IncomingTransactionsController\n  delete state.IncomingTransactionsController\n    ?.incomingTxLastFetchedBlocksByNetwork?.localhost;\n\n  // 8.  Merge 'localhost' tokens into 'rpc' tokens\n  const accountTokens = state.PreferencesController?.accountTokens;\n  if (accountTokens) {\n    Object.keys(accountTokens).forEach((account) => {\n      const localhostTokens = accountTokens[account]?.localhost || [];\n\n      if (localhostTokens.length > 0) {\n        const rpcTokens = accountTokens[account].rpc || [];\n\n        if (rpcTokens.length > 0) {\n          accountTokens[account].rpc = mergeTokenArrays(\n            localhostTokens,\n            rpcTokens,\n          );\n        } else {\n          accountTokens[account].rpc = localhostTokens;\n        }\n      }\n      delete accountTokens[account]?.localhost;\n    });\n  }\n\n  return state;\n}\n\n/**\n * Merges the two given keys for the given address book in place.\n *\n * @param addressBook\n * @param networkKey\n * @param chainIdKey\n */\nfunction mergeAddressBookKeys(addressBook, networkKey, chainIdKey) {\n  const networkKeyEntries = addressBook[networkKey] || {};\n  // For the new entries, start by copying the existing entries for the chainId\n  const newEntries = { ...addressBook[chainIdKey] };\n\n  // For each address of the old/networkId key entries\n  Object.keys(networkKeyEntries).forEach((address) => {\n    if (newEntries[address] && typeof newEntries[address] === 'object') {\n      const mergedEntry = {};\n\n      // Collect all keys from both entries and merge the corresponding chainId\n      // entry with the networkId entry\n      new Set([\n        ...Object.keys(newEntries[address]),\n        ...Object.keys(networkKeyEntries[address] || {}),\n      ]).forEach((key) => {\n        // Use non-empty value for the current key, if any\n        mergedEntry[key] =\n          newEntries[address][key] || networkKeyEntries[address]?.[key] || '';\n      });\n\n      newEntries[address] = mergedEntry;\n    } else if (\n      networkKeyEntries[address] &&\n      typeof networkKeyEntries[address] === 'object'\n    ) {\n      // If there is no corresponding chainId entry, just use the networkId entry\n      // directly\n      newEntries[address] = networkKeyEntries[address];\n    }\n  });\n\n  addressBook[chainIdKey] = newEntries;\n}\n\n/**\n * Updates the chainId key values to the given chainId in place for all values\n * of the given networkEntries object.\n *\n * @param networkEntries\n * @param chainId\n */\nfunction updateChainIds(networkEntries, chainId) {\n  Object.values(networkEntries).forEach((entry) => {\n    if (entry && typeof entry === 'object') {\n      entry.chainId = chainId;\n    }\n  });\n}\n\n/**\n * Merges the two given, non-empty arrays of token objects and returns a new\n * array.\n *\n * @param localhostTokens\n * @param rpcTokens\n * @returns {Array<object>}\n */\nfunction mergeTokenArrays(localhostTokens, rpcTokens) {\n  const localhostTokensMap = tokenArrayToMap(localhostTokens);\n  const rpcTokensMap = tokenArrayToMap(rpcTokens);\n\n  const mergedTokens = [];\n  new Set([\n    ...Object.keys(localhostTokensMap),\n    ...Object.keys(rpcTokensMap),\n  ]).forEach((tokenAddress) => {\n    mergedTokens.push({\n      ...localhostTokensMap[tokenAddress],\n      ...rpcTokensMap[tokenAddress],\n    });\n  });\n\n  return mergedTokens;\n\n  function tokenArrayToMap(array) {\n    return array.reduce((map, token) => {\n      if (token?.address && typeof token?.address === 'string') {\n        map[token.address] = token;\n      }\n      return map;\n    }, {});\n  }\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 49;\n\n/**\n * Migrate metaMetrics state to the new MetaMetrics controller\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state = {}) {\n  if (state.PreferencesController) {\n    const { metaMetricsId, participateInMetaMetrics, metaMetricsSendCount } =\n      state.PreferencesController;\n    state.MetaMetricsController = state.MetaMetricsController ?? {};\n\n    if (metaMetricsId !== undefined) {\n      state.MetaMetricsController.metaMetricsId = metaMetricsId;\n      delete state.PreferencesController.metaMetricsId;\n    }\n\n    if (participateInMetaMetrics !== undefined) {\n      state.MetaMetricsController.participateInMetaMetrics =\n        participateInMetaMetrics;\n      delete state.PreferencesController.participateInMetaMetrics;\n    }\n\n    if (metaMetricsSendCount !== undefined) {\n      state.MetaMetricsController.metaMetricsSendCount = metaMetricsSendCount;\n      delete state.PreferencesController.metaMetricsSendCount;\n    }\n  }\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ComposedStore = void 0;\nconst ObservableStore_1 = require(\"./ObservableStore\");\nclass ComposedStore extends ObservableStore_1.ObservableStore {\n    constructor(children) {\n        // Typecast: Preserve existing behavior\n        super({});\n        // subscribe to children\n        this._children = children || {};\n        Object.keys(this._children).forEach((childKey) => {\n            const child = this._children[childKey];\n            this._addChild(childKey, child);\n        });\n    }\n    _addChild(childKey, child) {\n        const updateFromChild = (childValue) => {\n            const state = this.getState();\n            state[childKey] = childValue;\n            this.putState(state);\n        };\n        child.subscribe(updateFromChild);\n        updateFromChild(child.getState());\n    }\n}\nexports.ComposedStore = ComposedStore;\n//# sourceMappingURL=ComposedStore.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MergedStore = void 0;\nconst ObservableStore_1 = require(\"./ObservableStore\");\nclass MergedStore extends ObservableStore_1.ObservableStore {\n    constructor(children = []) {\n        // Typecast: Preserve existing behavior\n        super({});\n        this._children = children;\n        // subscribe to children\n        children.forEach((child) => this._addChild(child));\n        this._updateWholeState();\n    }\n    _addChild(child) {\n        child.subscribe(() => this._updateWholeState());\n    }\n    _updateWholeState() {\n        const childStates = this._children.map((child) => child.getState());\n        // apply shallow merge over states\n        const state = Object.assign({}, ...childStates);\n        this.putState(state);\n    }\n}\nexports.MergedStore = MergedStore;\n//# sourceMappingURL=MergedStore.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ObservableStore = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nclass ObservableStore extends safe_event_emitter_1.default {\n    constructor(initState) {\n        super();\n        if (initState === undefined) {\n            // Typecast/default state: Preserve existing behavior\n            this._state = {};\n        }\n        else {\n            this._state = initState;\n        }\n    }\n    // wrapper around internal getState\n    getState() {\n        return this._getState();\n    }\n    // wrapper around internal putState\n    putState(newState) {\n        this._putState(newState);\n        this.emit('update', newState);\n    }\n    updateState(partialState) {\n        // if non-null object, merge\n        if (partialState && typeof partialState === 'object') {\n            const state = this.getState();\n            this.putState(Object.assign(Object.assign({}, state), partialState));\n            // if not object, use new value\n        }\n        else {\n            this.putState(partialState);\n        }\n    }\n    // subscribe to changes\n    subscribe(handler) {\n        this.on('update', handler);\n    }\n    // unsubscribe to changes\n    unsubscribe(handler) {\n        this.removeListener('update', handler);\n    }\n    //\n    // private\n    //\n    // read from persistence\n    _getState() {\n        return this._state;\n    }\n    // write to persistence\n    _putState(newState) {\n        this._state = newState;\n    }\n}\nexports.ObservableStore = ObservableStore;\n//# sourceMappingURL=ObservableStore.js.map","import {\n  BaseController,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { PublicInterface } from '@metamask/utils';\nimport type { DataDeletionService } from '../../services/data-deletion-service';\nimport { DeleteRegulationStatus } from '../../../../shared/constants/metametrics';\n\n// Unique name for the controller\nconst controllerName = 'MetaMetricsDataDeletionController';\n\n/**\n * Timestamp at which regulation response is returned.\n */\nexport type DataDeleteTimestamp = number;\n/**\n * Regulation Id retuned while creating a delete regulation.\n */\nexport type DataDeleteRegulationId = string | null;\n\n/**\n * MetaMetricsDataDeletionController controller state\n * metaMetricsDataDeletionId - Regulation Id retuned while creating a delete regulation.\n * metaMetricsDataDeletionTimestamp - Timestamp at which the most recent regulation is created/requested for.\n * metaMetricsDataDeletionStatus - Status of the current delete regulation.\n */\nexport type MetaMetricsDataDeletionState = {\n  metaMetricsDataDeletionId: DataDeleteRegulationId;\n  metaMetricsDataDeletionTimestamp: DataDeleteTimestamp;\n  metaMetricsDataDeletionStatus?: DeleteRegulationStatus;\n};\n\nconst getDefaultState = (): MetaMetricsDataDeletionState => {\n  return {\n    metaMetricsDataDeletionId: null,\n    metaMetricsDataDeletionTimestamp: 0,\n  };\n};\n\n// Metadata for the controller state\nconst metadata = {\n  metaMetricsDataDeletionId: {\n    persist: true,\n    anonymous: true,\n  },\n  metaMetricsDataDeletionTimestamp: {\n    persist: true,\n    anonymous: true,\n  },\n  metaMetricsDataDeletionStatus: {\n    persist: true,\n    anonymous: true,\n  },\n};\n\n// Describes the action creating the delete regulation task\nexport type CreateMetaMetricsDataDeletionTaskAction = {\n  type: `${typeof controllerName}:createMetaMetricsDataDeletionTask`;\n  handler: MetaMetricsDataDeletionController['createMetaMetricsDataDeletionTask'];\n};\n\n// Describes the action to check the existing regulation status\nexport type UpdateDataDeletionTaskStatusAction = {\n  type: `${typeof controllerName}:updateDataDeletionTaskStatus`;\n  handler: MetaMetricsDataDeletionController['updateDataDeletionTaskStatus'];\n};\n\n// Union of all possible actions for the messenger\nexport type MetaMetricsDataDeletionControllerMessengerActions =\n  | CreateMetaMetricsDataDeletionTaskAction\n  | UpdateDataDeletionTaskStatusAction;\n\n// Type for the messenger of MetaMetricsDataDeletionController\nexport type MetaMetricsDataDeletionControllerMessenger =\n  RestrictedControllerMessenger<\n    typeof controllerName,\n    MetaMetricsDataDeletionControllerMessengerActions,\n    never,\n    never,\n    never\n  >;\n\n/**\n * Controller responsible for maintaining\n * state related to Metametrics data deletion\n */\nexport class MetaMetricsDataDeletionController extends BaseController<\n  typeof controllerName,\n  MetaMetricsDataDeletionState,\n  MetaMetricsDataDeletionControllerMessenger\n> {\n  #dataDeletionService: PublicInterface<DataDeletionService>;\n\n  #getMetaMetricsId: () => string | null;\n\n  /**\n   * Creates a MetaMetricsDataDeletionController instance.\n   *\n   * @param args - The arguments to this function.\n   * @param args.dataDeletionService - The service used for deleting data.\n   * @param args.messenger - Messenger used to communicate with BaseV2 controller.\n   * @param args.state - Initial state to set on this controller.\n   * @param args.getMetaMetricsId - A function that returns the current MetaMetrics ID.\n   */\n  constructor({\n    dataDeletionService,\n    messenger,\n    state,\n    getMetaMetricsId,\n  }: {\n    dataDeletionService: PublicInterface<DataDeletionService>;\n    messenger: MetaMetricsDataDeletionControllerMessenger;\n    state?: Partial<MetaMetricsDataDeletionState>;\n    getMetaMetricsId: () => string | null;\n  }) {\n    // Call the constructor of BaseControllerV2\n    super({\n      messenger,\n      metadata,\n      name: controllerName,\n      state: { ...getDefaultState(), ...state },\n    });\n    this.#getMetaMetricsId = getMetaMetricsId;\n    this.#dataDeletionService = dataDeletionService;\n    this.#registerMessageHandlers();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system\n   * actions.\n   */\n  #registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:createMetaMetricsDataDeletionTask`,\n      this.createMetaMetricsDataDeletionTask.bind(this),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateDataDeletionTaskStatus`,\n      this.updateDataDeletionTaskStatus.bind(this),\n    );\n  }\n\n  /**\n   * Creating the delete regulation using source regulation\n   *\n   */\n  async createMetaMetricsDataDeletionTask(): Promise<void> {\n    const metaMetricsId = this.#getMetaMetricsId();\n    if (!metaMetricsId) {\n      throw new Error('MetaMetrics ID not found');\n    }\n\n    const deleteRegulateId =\n      await this.#dataDeletionService.createDataDeletionRegulationTask(\n        metaMetricsId,\n      );\n    this.update((state) => {\n      state.metaMetricsDataDeletionId = deleteRegulateId ?? null;\n      state.metaMetricsDataDeletionTimestamp = Date.now();\n    });\n    await this.updateDataDeletionTaskStatus();\n  }\n\n  /**\n   * To check the status of the current delete regulation.\n   */\n  async updateDataDeletionTaskStatus(): Promise<void> {\n    const deleteRegulationId = this.state.metaMetricsDataDeletionId;\n    if (!deleteRegulationId) {\n      throw new Error('Delete Regulation id not found');\n    }\n\n    const deletionStatus =\n      await this.#dataDeletionService.fetchDeletionRegulationStatus(\n        deleteRegulationId,\n      );\n\n    this.update((state) => {\n      state.metaMetricsDataDeletionStatus = deletionStatus ?? undefined;\n    });\n  }\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 50;\n\nconst LEGACY_LOCAL_STORAGE_KEYS = [\n  'METASWAP_GAS_PRICE_ESTIMATES_LAST_RETRIEVED',\n  'METASWAP_GAS_PRICE_ESTIMATES',\n  'cachedFetch',\n  'BASIC_PRICE_ESTIMATES_LAST_RETRIEVED',\n  'BASIC_PRICE_ESTIMATES',\n  'BASIC_GAS_AND_TIME_API_ESTIMATES',\n  'BASIC_GAS_AND_TIME_API_ESTIMATES_LAST_RETRIEVED',\n  'GAS_API_ESTIMATES_LAST_RETRIEVED',\n  'GAS_API_ESTIMATES',\n];\n\n/**\n * Migrate metaMetrics state to the new MetaMetrics controller\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n\n    LEGACY_LOCAL_STORAGE_KEYS.forEach((key) =>\n      window.localStorage?.removeItem(key),\n    );\n\n    return versionedData;\n  },\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeAsStream = void 0;\nconst readable_stream_1 = require(\"readable-stream\");\nclass ObservableStoreStream extends readable_stream_1.Duplex {\n    constructor(obsStore) {\n        super({\n            // pass values, not serializations\n            objectMode: true,\n        });\n        // dont buffer outgoing updates\n        this.resume();\n        // save handler so we can unsubscribe later\n        this.handler = (state) => this.push(state);\n        // subscribe to obsStore changes\n        this.obsStore = obsStore;\n        this.obsStore.subscribe(this.handler);\n    }\n    // emit current state on new destination\n    pipe(dest, options) {\n        const result = super.pipe(dest, options);\n        dest.write(this.obsStore.getState());\n        return result;\n    }\n    // write from incoming stream to state\n    _write(chunk, _encoding, callback) {\n        this.obsStore.putState(chunk);\n        callback();\n    }\n    // noop - outgoing stream is asking us if we have data we arent giving it\n    _read(_size) {\n        return undefined;\n    }\n    // unsubscribe from event emitter\n    _destroy(err, callback) {\n        this.obsStore.unsubscribe(this.handler);\n        super._destroy(err, callback);\n    }\n}\nfunction storeAsStream(obsStore) {\n    return new ObservableStoreStream(obsStore);\n}\nexports.storeAsStream = storeAsStream;\n//# sourceMappingURL=asStream.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./asStream\"), exports);\n__exportStar(require(\"./ComposedStore\"), exports);\n__exportStar(require(\"./MergedStore\"), exports);\n__exportStar(require(\"./ObservableStore\"), exports);\n__exportStar(require(\"./transform\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeTransformStream = void 0;\nconst readable_stream_1 = require(\"readable-stream\");\nfunction storeTransformStream(syncTransformFn) {\n    const t = new readable_stream_1.Transform({\n        objectMode: true,\n        transform: (state, _encoding, cb) => {\n            try {\n                const newState = syncTransformFn(state);\n                cb(undefined, newState);\n                return undefined;\n            }\n            catch (err) {\n                cb(err);\n                return undefined;\n            }\n        },\n    });\n    return t;\n}\nexports.storeTransformStream = storeTransformStream;\n//# sourceMappingURL=transform.js.map","import { cloneDeep } from 'lodash';\nimport { BUILT_IN_NETWORKS } from '../../../shared/constants/network';\n\nconst version = 51;\n\n/**\n * Set the chainId in the Network Controller provider data for all infura networks\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { chainId, type } = state?.NetworkController?.provider || {};\n  const enumChainId = BUILT_IN_NETWORKS[type]?.chainId;\n\n  if (enumChainId && chainId !== enumChainId) {\n    state.NetworkController.provider.chainId = enumChainId;\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport { CHAIN_IDS, NETWORK_TYPES } from '../../../shared/constants/network';\n\nconst version = 52;\n\n/**\n * Migrate tokens in Preferences to be keyed by chainId instead of\n * providerType. To prevent breaking user's MetaMask and selected\n * tokens, this migration copies the RPC entry into *every* custom RPC\n * chainId.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state = {}) {\n  if (state.PreferencesController) {\n    const { accountTokens, accountHiddenTokens, frequentRpcListDetail } =\n      state.PreferencesController;\n\n    const newAccountTokens = {};\n    const newAccountHiddenTokens = {};\n\n    if (accountTokens && Object.keys(accountTokens).length > 0) {\n      for (const address of Object.keys(accountTokens)) {\n        newAccountTokens[address] = {};\n        if (accountTokens[address][NETWORK_TYPES.RPC]) {\n          frequentRpcListDetail.forEach((detail) => {\n            newAccountTokens[address][detail.chainId] =\n              accountTokens[address][NETWORK_TYPES.RPC];\n          });\n        }\n        for (const providerType of Object.keys(accountTokens[address])) {\n          switch (providerType) {\n            case NETWORK_TYPES.MAINNET:\n              newAccountTokens[address][CHAIN_IDS.MAINNET] =\n                accountTokens[address][NETWORK_TYPES.MAINNET];\n              break;\n            case 'ropsten':\n              newAccountTokens[address]['0x3'] = accountTokens[address].ropsten;\n              break;\n            case 'rinkeby':\n              newAccountTokens[address]['0x4'] = accountTokens[address].rinkeby;\n              break;\n            case NETWORK_TYPES.GOERLI:\n              newAccountTokens[address][CHAIN_IDS.GOERLI] =\n                accountTokens[address][NETWORK_TYPES.GOERLI];\n              break;\n            case 'kovan':\n              newAccountTokens[address]['0x2a'] = accountTokens[address].kovan;\n              break;\n            default:\n              break;\n          }\n        }\n      }\n      state.PreferencesController.accountTokens = newAccountTokens;\n    }\n\n    if (accountHiddenTokens && Object.keys(accountHiddenTokens).length > 0) {\n      for (const address of Object.keys(accountHiddenTokens)) {\n        newAccountHiddenTokens[address] = {};\n        if (accountHiddenTokens[address][NETWORK_TYPES.RPC]) {\n          frequentRpcListDetail.forEach((detail) => {\n            newAccountHiddenTokens[address][detail.chainId] =\n              accountHiddenTokens[address][NETWORK_TYPES.RPC];\n          });\n        }\n        for (const providerType of Object.keys(accountHiddenTokens[address])) {\n          switch (providerType) {\n            case NETWORK_TYPES.MAINNET:\n              newAccountHiddenTokens[address][CHAIN_IDS.MAINNET] =\n                accountHiddenTokens[address][NETWORK_TYPES.MAINNET];\n              break;\n            case 'ropsten':\n              newAccountHiddenTokens[address]['0x3'] =\n                accountHiddenTokens[address].ropsten;\n              break;\n            case 'rinkeby':\n              newAccountHiddenTokens[address]['0x4'] =\n                accountHiddenTokens[address].rinkeby;\n              break;\n            case NETWORK_TYPES.GOERLI:\n              newAccountHiddenTokens[address][CHAIN_IDS.GOERLI] =\n                accountHiddenTokens[address][NETWORK_TYPES.GOERLI];\n              break;\n            case 'kovan':\n              newAccountHiddenTokens[address]['0x2a'] =\n                accountHiddenTokens[address].kovan;\n              break;\n            default:\n              break;\n          }\n        }\n      }\n      state.PreferencesController.accountHiddenTokens = newAccountHiddenTokens;\n    }\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport { TransactionType } from '@metamask/transaction-controller';\n\nconst version = 53;\n\n/**\n * Deprecate transactionCategory and consolidate on 'type'\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const transactions = state?.TransactionController?.transactions;\n  const incomingTransactions =\n    state?.IncomingTransactionsController?.incomingTransactions;\n  if (Array.isArray(transactions)) {\n    transactions.forEach((transaction) => {\n      if (transaction) {\n        if (\n          transaction.type !== TransactionType.retry &&\n          transaction.type !== TransactionType.cancel\n        ) {\n          transaction.type = transaction.transactionCategory;\n        }\n        delete transaction.transactionCategory;\n      }\n    });\n  }\n  if (incomingTransactions) {\n    const incomingTransactionsEntries = Object.entries(incomingTransactions);\n    incomingTransactionsEntries.forEach(([key, transaction]) => {\n      if (transaction) {\n        delete transaction.transactionCategory;\n        state.IncomingTransactionsController.incomingTransactions[key] = {\n          ...transaction,\n          type: TransactionType.incoming,\n        };\n      }\n    });\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 54;\n\nfunction isValidDecimals(decimals) {\n  return (\n    typeof decimals === 'number' ||\n    (typeof decimals === 'string' && decimals.match(/^(0x)?\\d+$/u))\n  );\n}\n\n/**\n * Migrates preference tokens with decimals typed as string to number.\n * It also removes any tokens with corrupted or inconvertible decimal values.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n\n  if (!newState.PreferencesController) {\n    return newState;\n  }\n\n  const tokens = newState.PreferencesController.tokens || [];\n  // Filter out any tokens with corrupted decimal values\n  const validTokens = tokens.filter(({ decimals }) =>\n    isValidDecimals(decimals),\n  );\n  for (const token of validTokens) {\n    // In the case of a decimal value type string, convert to a number.\n    if (typeof token.decimals === 'string') {\n      // eslint-disable-next-line radix\n      token.decimals = parseInt(token.decimals);\n    }\n  }\n  newState.PreferencesController.tokens = validTokens;\n\n  const { accountTokens } = newState.PreferencesController;\n  if (accountTokens && typeof accountTokens === 'object') {\n    for (const address of Object.keys(accountTokens)) {\n      const networkTokens = accountTokens[address];\n      if (networkTokens && typeof networkTokens === 'object') {\n        for (const network of Object.keys(networkTokens)) {\n          const tokensOnNetwork = networkTokens[network] || [];\n          // Filter out any tokens with corrupted decimal values\n          const validTokensOnNetwork = tokensOnNetwork.filter(({ decimals }) =>\n            isValidDecimals(decimals),\n          );\n          // In the case of a decimal value type string, convert to a number.\n          for (const token of validTokensOnNetwork) {\n            if (typeof token.decimals === 'string') {\n              // eslint-disable-next-line radix\n              token.decimals = parseInt(token.decimals);\n            }\n          }\n          networkTokens[network] = validTokensOnNetwork;\n        }\n      }\n    }\n  }\n  newState.PreferencesController.accountTokens = accountTokens;\n\n  return newState;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/enums.ts\nvar WALLET_PREFIX = \"wallet_\";\nvar CAVEAT_TYPES = Object.freeze({\n  restrictReturnedAccounts: \"restrictReturnedAccounts\"\n});\nvar LOG_IGNORE_METHODS = [\n  \"wallet_registerOnboarding\",\n  \"wallet_watchAsset\"\n];\nvar LOG_METHOD_TYPES = /* @__PURE__ */ ((LOG_METHOD_TYPES2) => {\n  LOG_METHOD_TYPES2[\"restricted\"] = \"restricted\";\n  LOG_METHOD_TYPES2[\"internal\"] = \"internal\";\n  return LOG_METHOD_TYPES2;\n})(LOG_METHOD_TYPES || {});\nvar LOG_LIMIT = 100;\n\n\n\n\n\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod; exports.WALLET_PREFIX = WALLET_PREFIX; exports.CAVEAT_TYPES = CAVEAT_TYPES; exports.LOG_IGNORE_METHODS = LOG_IGNORE_METHODS; exports.LOG_METHOD_TYPES = LOG_METHOD_TYPES; exports.LOG_LIMIT = LOG_LIMIT;\n//# sourceMappingURL=chunk-7KORYHSJ.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\n\n\n\n\nvar _chunk7KORYHSJjs = require('./chunk-7KORYHSJ.js');\n\n// src/PermissionLogController.ts\n\n\nvar _basecontroller = require('@metamask/base-controller');\n\n\nvar _utils = require('@metamask/utils');\nvar defaultState = {\n  permissionHistory: {},\n  permissionActivityLog: []\n};\nvar name = \"PermissionLogController\";\nvar _restrictedMethods, _getAccountToTimeMap, getAccountToTimeMap_fn, _logRequest, logRequest_fn, _logResponse, logResponse_fn, _logPermissionsHistory, logPermissionsHistory_fn, _commitNewHistory, commitNewHistory_fn, _getRequestedMethods, getRequestedMethods_fn, _getAccountsFromPermission, getAccountsFromPermission_fn;\nvar PermissionLogController = class extends _basecontroller.BaseController {\n  constructor({\n    messenger,\n    restrictedMethods,\n    state\n  }) {\n    super({\n      messenger,\n      name,\n      metadata: {\n        permissionHistory: {\n          persist: true,\n          anonymous: false\n        },\n        permissionActivityLog: {\n          persist: true,\n          anonymous: false\n        }\n      },\n      state: { ...defaultState, ...state }\n    });\n    /**\n     * Get a map from account addresses to the given time.\n     *\n     * @param accounts - An array of addresses.\n     * @param time - A time, e.g. Date.now().\n     * @returns A string:number map of addresses to time.\n     */\n    _chunk7KORYHSJjs.__privateAdd.call(void 0, this, _getAccountToTimeMap);\n    /**\n     * Creates and commits an activity log entry, without response data.\n     *\n     * @param request - The request object.\n     * @param isInternal - Whether the request is internal.\n     * @returns new added activity entry\n     */\n    _chunk7KORYHSJjs.__privateAdd.call(void 0, this, _logRequest);\n    /**\n     * Adds response data to an existing activity log entry.\n     * Entry assumed already committed (i.e., in the log).\n     *\n     * @param entry - The entry to add a response to.\n     * @param response - The response object.\n     * @param time - Output from Date.now()\n     */\n    _chunk7KORYHSJjs.__privateAdd.call(void 0, this, _logResponse);\n    /**\n     * Create new permissions history log entries, if any, and commit them.\n     *\n     * @param requestedMethods - The method names corresponding to the requested permissions.\n     * @param origin - The origin of the permissions request.\n     * @param result - The permissions request response.result.\n     * @param time - The time of the request, i.e. Date.now().\n     * @param isEthRequestAccounts - Whether the permissions request was 'eth_requestAccounts'.\n     */\n    _chunk7KORYHSJjs.__privateAdd.call(void 0, this, _logPermissionsHistory);\n    /**\n     * Commit new entries to the permissions history log.\n     * Merges the history for the given origin, overwriting existing entries\n     * with the same key (permission name).\n     *\n     * @param origin - The requesting origin.\n     * @param newEntries - The new entries to commit.\n     */\n    _chunk7KORYHSJjs.__privateAdd.call(void 0, this, _commitNewHistory);\n    /**\n     * Get all requested methods from a permissions request.\n     *\n     * @param request - The request object.\n     * @returns The names of the requested permissions.\n     */\n    _chunk7KORYHSJjs.__privateAdd.call(void 0, this, _getRequestedMethods);\n    /**\n     * Get the permitted accounts from an eth_accounts permissions object.\n     * Returns an empty array if the permission is not eth_accounts.\n     *\n     * @param permission - The permissions object.\n     * @param permission.parentCapability - The permissions parentCapability.\n     * @param permission.caveats - The permissions caveats.\n     * @returns The permitted accounts.\n     */\n    _chunk7KORYHSJjs.__privateAdd.call(void 0, this, _getAccountsFromPermission);\n    _chunk7KORYHSJjs.__privateAdd.call(void 0, this, _restrictedMethods, void 0);\n    _chunk7KORYHSJjs.__privateSet.call(void 0, this, _restrictedMethods, restrictedMethods);\n  }\n  /**\n   * Updates the exposed account history for the given origin.\n   * Sets the 'last seen' time to Date.now() for the given accounts.\n   * Does **not** update the 'lastApproved' time for the permission itself.\n   * Returns if the accounts array is empty.\n   *\n   * @param origin - The origin that the accounts are exposed to.\n   * @param accounts - The accounts.\n   */\n  updateAccountsHistory(origin, accounts) {\n    if (accounts.length === 0) {\n      return;\n    }\n    const newEntries = {\n      eth_accounts: {\n        accounts: _chunk7KORYHSJjs.__privateMethod.call(void 0, this, _getAccountToTimeMap, getAccountToTimeMap_fn).call(this, accounts, Date.now())\n      }\n    };\n    _chunk7KORYHSJjs.__privateMethod.call(void 0, this, _commitNewHistory, commitNewHistory_fn).call(this, origin, newEntries);\n  }\n  /**\n   * Create a permissions log middleware. Records permissions activity and history:\n   *\n   * Activity: requests and responses for restricted and most wallet_ methods.\n   *\n   * History: for each origin, the last time a permission was granted, including\n   * which accounts were exposed, if any.\n   *\n   * @returns The permissions log middleware.\n   */\n  createMiddleware() {\n    return (req, res, next) => {\n      const { origin, method } = req;\n      const isInternal = method.startsWith(_chunk7KORYHSJjs.WALLET_PREFIX);\n      const isEthRequestAccounts = method === \"eth_requestAccounts\";\n      if (!_chunk7KORYHSJjs.LOG_IGNORE_METHODS.includes(method) && (isInternal || _chunk7KORYHSJjs.__privateGet.call(void 0, this, _restrictedMethods).has(method)) || isEthRequestAccounts) {\n        const activityEntry = _chunk7KORYHSJjs.__privateMethod.call(void 0, this, _logRequest, logRequest_fn).call(this, req, isInternal);\n        const requestedMethods = _chunk7KORYHSJjs.__privateMethod.call(void 0, this, _getRequestedMethods, getRequestedMethods_fn).call(this, req);\n        next((cb) => {\n          const time = Date.now();\n          _chunk7KORYHSJjs.__privateMethod.call(void 0, this, _logResponse, logResponse_fn).call(this, activityEntry, res, time);\n          if (requestedMethods && !res.error && res.result && origin) {\n            _chunk7KORYHSJjs.__privateMethod.call(void 0, this, _logPermissionsHistory, logPermissionsHistory_fn).call(this, requestedMethods, origin, res.result, time, isEthRequestAccounts);\n          }\n          cb();\n        });\n        return;\n      }\n      next();\n    };\n  }\n};\n_restrictedMethods = new WeakMap();\n_getAccountToTimeMap = new WeakSet();\ngetAccountToTimeMap_fn = function(accounts, time) {\n  return accounts.reduce(\n    (acc, account) => ({\n      ...acc,\n      [account]: time\n    }),\n    {}\n  );\n};\n_logRequest = new WeakSet();\nlogRequest_fn = function(request, isInternal) {\n  const activityEntry = {\n    id: request.id,\n    method: request.method,\n    methodType: isInternal ? \"internal\" /* internal */ : \"restricted\" /* restricted */,\n    origin: request.origin,\n    requestTime: Date.now(),\n    responseTime: null,\n    success: null\n  };\n  this.update((state) => {\n    const newLogs = [...state.permissionActivityLog, activityEntry];\n    state.permissionActivityLog = // remove oldest log if exceeding size limit\n    newLogs.length > _chunk7KORYHSJjs.LOG_LIMIT ? newLogs.slice(1) : newLogs;\n  });\n  return activityEntry;\n};\n_logResponse = new WeakSet();\nlogResponse_fn = function(entry, response, time) {\n  if (!entry || !response) {\n    return;\n  }\n  this.update((state) => {\n    state.permissionActivityLog = state.permissionActivityLog.map((log) => {\n      if (log.id === entry.id) {\n        return {\n          ...log,\n          success: _utils.hasProperty.call(void 0, response, \"result\"),\n          responseTime: time\n        };\n      }\n      return log;\n    });\n  });\n};\n_logPermissionsHistory = new WeakSet();\nlogPermissionsHistory_fn = function(requestedMethods, origin, result, time, isEthRequestAccounts) {\n  let newEntries;\n  if (isEthRequestAccounts) {\n    const accounts = result;\n    newEntries = {\n      eth_accounts: {\n        accounts: _chunk7KORYHSJjs.__privateMethod.call(void 0, this, _getAccountToTimeMap, getAccountToTimeMap_fn).call(this, accounts, time),\n        lastApproved: time\n      }\n    };\n  } else {\n    const permissions = result;\n    newEntries = permissions.reduce((acc, permission) => {\n      const method = permission.parentCapability;\n      if (!requestedMethods.includes(method)) {\n        return acc;\n      }\n      if (method === \"eth_accounts\") {\n        const accounts = _chunk7KORYHSJjs.__privateMethod.call(void 0, this, _getAccountsFromPermission, getAccountsFromPermission_fn).call(this, permission);\n        return {\n          ...acc,\n          [method]: {\n            lastApproved: time,\n            accounts: _chunk7KORYHSJjs.__privateMethod.call(void 0, this, _getAccountToTimeMap, getAccountToTimeMap_fn).call(this, accounts, time)\n          }\n        };\n      }\n      return {\n        ...acc,\n        [method]: {\n          lastApproved: time\n        }\n      };\n    }, {});\n  }\n  if (Object.keys(newEntries).length > 0) {\n    _chunk7KORYHSJjs.__privateMethod.call(void 0, this, _commitNewHistory, commitNewHistory_fn).call(this, origin, newEntries);\n  }\n};\n_commitNewHistory = new WeakSet();\ncommitNewHistory_fn = function(origin, newEntries) {\n  const { permissionHistory } = this.state;\n  const oldOriginHistory = permissionHistory[origin] ?? {};\n  const newOriginHistory = {\n    ...oldOriginHistory,\n    ...newEntries\n  };\n  const existingEthAccountsEntry = oldOriginHistory.eth_accounts;\n  const newEthAccountsEntry = newEntries.eth_accounts;\n  if (existingEthAccountsEntry && newEthAccountsEntry) {\n    const lastApproved = newEthAccountsEntry.lastApproved ?? existingEthAccountsEntry.lastApproved;\n    newOriginHistory.eth_accounts = {\n      lastApproved,\n      accounts: {\n        ...existingEthAccountsEntry.accounts,\n        ...newEthAccountsEntry.accounts\n      }\n    };\n  }\n  this.update((state) => {\n    state.permissionHistory = {\n      ...permissionHistory,\n      [origin]: newOriginHistory\n    };\n  });\n};\n_getRequestedMethods = new WeakSet();\ngetRequestedMethods_fn = function(request) {\n  const { method, params } = request;\n  if (method === \"eth_requestAccounts\") {\n    return [\"eth_accounts\"];\n  } else if (method === `${_chunk7KORYHSJjs.WALLET_PREFIX}requestPermissions` && params && Array.isArray(params) && params[0] && typeof params[0] === \"object\" && !Array.isArray(params[0])) {\n    return Object.keys(params[0]);\n  }\n  return null;\n};\n_getAccountsFromPermission = new WeakSet();\ngetAccountsFromPermission_fn = function(permission) {\n  if (permission.parentCapability !== \"eth_accounts\" || !permission.caveats) {\n    return [];\n  }\n  const accounts = /* @__PURE__ */ new Set();\n  for (const caveat of permission.caveats) {\n    if (caveat.type === _chunk7KORYHSJjs.CAVEAT_TYPES.restrictReturnedAccounts && Array.isArray(caveat.value)) {\n      for (const value of caveat.value) {\n        accounts.add(value);\n      }\n    }\n  }\n  return [...accounts];\n};\n\n\n\nexports.PermissionLogController = PermissionLogController;\n//# sourceMappingURL=chunk-WGNFIOME.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkWGNFIOMEjs = require('./chunk-WGNFIOME.js');\nrequire('./chunk-7KORYHSJ.js');\n\n\nexports.PermissionLogController = _chunkWGNFIOMEjs.PermissionLogController;\n//# sourceMappingURL=index.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/ControllerMessenger.ts\nvar _actions, _events, _initialEventPayloadGetters, _eventPayloadCache;\nvar ControllerMessenger = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _actions, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _events, /* @__PURE__ */ new Map());\n    /**\n     * A map of functions for getting the initial event payload.\n     *\n     * Used only for events that represent state changes.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _initialEventPayloadGetters, /* @__PURE__ */ new Map());\n    /**\n     * A cache of selector return values for their respective handlers.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _eventPayloadCache, /* @__PURE__ */ new Map());\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw when a handler has been registered for this action type already.\n   * @template ActionType - A type union of Action type strings.\n   */\n  registerActionHandler(actionType, handler) {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).has(actionType)) {\n      throw new Error(\n        `A handler for ${actionType} has already been registered`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).set(actionType, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @template ActionType - A type union of Action type strings.\n   */\n  unregisterActionHandler(actionType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).delete(actionType);\n  }\n  /**\n   * Unregister all action handlers.\n   *\n   * This prevents all actions from being called.\n   */\n  clearActions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).clear();\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    const handler = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).get(actionType);\n    if (!handler) {\n      throw new Error(`A handler for ${actionType} has not been registered`);\n    }\n    return handler(...params);\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).set(eventType, getPayload);\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * Note that this method should never throw directly. Any errors from\n   * subscribers are captured and re-thrown in a timeout handler.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @template EventType - A type union of Event type strings.\n   */\n  publish(eventType, ...payload) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (subscribers) {\n      for (const [handler, selector] of subscribers.entries()) {\n        try {\n          if (selector) {\n            const previousValue = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).get(handler);\n            const newValue = selector(...payload);\n            if (newValue !== previousValue) {\n              _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, newValue);\n              handler(newValue, previousValue);\n            }\n          } else {\n            handler(...payload);\n          }\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          });\n        }\n      }\n    }\n  }\n  subscribe(eventType, handler, selector) {\n    let subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers) {\n      subscribers = /* @__PURE__ */ new Map();\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).set(eventType, subscribers);\n    }\n    subscribers.set(handler, selector);\n    if (selector) {\n      const getPayload = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).get(eventType);\n      if (getPayload) {\n        const initialValue = selector(...getPayload());\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, initialValue);\n      }\n    }\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw when the given event handler is not registered for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  unsubscribe(eventType, handler) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers || !subscribers.has(handler)) {\n      throw new Error(`Subscription not found for event: ${eventType}`);\n    }\n    const selector = subscribers.get(handler);\n    if (selector) {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).delete(handler);\n    }\n    subscribers.delete(handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  clearEventSubscriptions(eventType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).delete(eventType);\n  }\n  /**\n   * Clear all subscriptions.\n   *\n   * This will remove all subscribed handlers for all events.\n   */\n  clearSubscriptions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).clear();\n  }\n  /**\n   * Get a restricted controller messenger\n   *\n   * Returns a wrapper around the controller messenger instance that restricts access to actions\n   * and events. The provided allowlists grant the ability to call the listed actions and subscribe\n   * to the listed events. The \"name\" provided grants ownership of any actions and events under\n   * that namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - Controller messenger options.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   * @template Namespace - The namespace for this messenger. Typically this is the name of the controller or\n   * module that this messenger has been created for. The authority to publish events and register\n   * actions under this namespace is granted to this restricted messenger instance.\n   * @template AllowedAction - A type union of the 'type' string for any allowed actions.\n   * This must not include internal actions that are in the messenger's namespace.\n   * @template AllowedEvent - A type union of the 'type' string for any allowed events.\n   * This must not include internal events that are in the messenger's namespace.\n   * @returns The restricted controller messenger.\n   */\n  getRestricted({\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    return new (0, _chunkUJFCPTF3js.RestrictedControllerMessenger)({\n      controllerMessenger: this,\n      name,\n      allowedActions,\n      allowedEvents\n    });\n  }\n};\n_actions = new WeakMap();\n_events = new WeakMap();\n_initialEventPayloadGetters = new WeakMap();\n_eventPayloadCache = new WeakMap();\n\n\n\nexports.ControllerMessenger = ControllerMessenger;\n//# sourceMappingURL=chunk-G42723LG.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/BaseControllerV1.ts\nvar BaseControllerV1 = class {\n  /**\n   * Creates a BaseControllerV1 instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config = {}, state = {}) {\n    /**\n     * Default options used to configure this controller\n     */\n    this.defaultConfig = {};\n    /**\n     * Default state set on this controller\n     */\n    this.defaultState = {};\n    /**\n     * Determines if listeners are notified of state changes\n     */\n    this.disabled = false;\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"BaseController\";\n    this.internalConfig = this.defaultConfig;\n    this.internalState = this.defaultState;\n    this.internalListeners = [];\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns This controller instance.\n   */\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n  /**\n   * Retrieves current controller configuration options.\n   *\n   * @returns The current configuration.\n   */\n  get config() {\n    return this.internalConfig;\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return this.internalState;\n  }\n  /**\n   * Updates controller configuration.\n   *\n   * @param config - New configuration options.\n   * @param overwrite - Overwrite config instead of merging.\n   * @param fullUpdate - Boolean that defines if the update is partial or not.\n   */\n  configure(config, overwrite = false, fullUpdate = true) {\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key of Object.keys(this.internalConfig)) {\n        const value = this.internalConfig[key];\n        if (value !== void 0) {\n          this[key] = value;\n        }\n      }\n    } else {\n      for (const key of Object.keys(config)) {\n        if (this.internalConfig[key] !== void 0) {\n          const value = config[key];\n          this.internalConfig[key] = value;\n          this[key] = value;\n        }\n      }\n    }\n  }\n  /**\n   * Notifies all subscribed listeners of current state.\n   */\n  notify() {\n    if (this.disabled) {\n      return;\n    }\n    this.internalListeners.forEach((listener) => {\n      listener(this.internalState);\n    });\n  }\n  /**\n   * Adds new listener to be notified of state changes.\n   *\n   * @param listener - The callback triggered when state changes.\n   */\n  subscribe(listener) {\n    this.internalListeners.push(listener);\n  }\n  /**\n   * Removes existing listener from receiving state changes.\n   *\n   * @param listener - The callback to remove.\n   * @returns `true` if a listener is found and unsubscribed.\n   */\n  unsubscribe(listener) {\n    const index = this.internalListeners.findIndex((cb) => listener === cb);\n    index > -1 && this.internalListeners.splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Updates controller state.\n   *\n   * @param state - The new state.\n   * @param overwrite - Overwrite state instead of merging.\n   */\n  update(state, overwrite = false) {\n    this.internalState = overwrite ? Object.assign({}, state) : Object.assign({}, this.internalState, state);\n    this.notify();\n  }\n};\nvar BaseControllerV1_default = BaseControllerV1;\n\n\n\n\nexports.BaseControllerV1 = BaseControllerV1; exports.BaseControllerV1_default = BaseControllerV1_default;\n//# sourceMappingURL=chunk-NINOM2XQ.js.map","import { cloneDeep, mapKeys } from 'lodash';\nimport { BUILT_IN_NETWORKS } from '../../../shared/constants/network';\n\nconst version = 55;\n\n/**\n * replace 'incomingTxLastFetchedBlocksByNetwork' with 'incomingTxLastFetchedBlockByChainId'\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nconst UNKNOWN_CHAIN_ID_KEY = 'UNKNOWN';\n\nBUILT_IN_NETWORKS.rinkeby = {\n  networkId: '4',\n  chainId: '0x4',\n  ticker: 'ETH',\n};\nBUILT_IN_NETWORKS.ropsten = {\n  networkId: '3',\n  chainId: '0x3',\n  ticker: 'ETH',\n};\nBUILT_IN_NETWORKS.kovan = {\n  networkId: '42',\n  chainId: '0x2a',\n  ticker: 'ETH',\n};\n\nfunction transformState(state) {\n  if (\n    state?.IncomingTransactionsController?.incomingTxLastFetchedBlocksByNetwork\n  ) {\n    state.IncomingTransactionsController.incomingTxLastFetchedBlockByChainId =\n      mapKeys(\n        state.IncomingTransactionsController\n          .incomingTxLastFetchedBlocksByNetwork,\n        // using optional chaining in case user's state has fetched blocks for\n        // RPC network types (which don't map to a single chainId). This should\n        // not be possible, but it's safer\n        (_, key) => BUILT_IN_NETWORKS[key]?.chainId ?? UNKNOWN_CHAIN_ID_KEY,\n      );\n    // Now that mainnet and test net last fetched blocks are keyed by their\n    // respective chainIds, we can safely delete anything we had for custom\n    // networks. Any custom network that shares a chainId with one of the\n    // aforementioned networks will use the value stored by chainId.\n    delete state.IncomingTransactionsController\n      .incomingTxLastFetchedBlockByChainId[UNKNOWN_CHAIN_ID_KEY];\n    delete state.IncomingTransactionsController\n      .incomingTxLastFetchedBlocksByNetwork;\n  }\n  return state;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/RestrictedControllerMessenger.ts\nvar _controllerMessenger, _controllerName, _allowedActions, _allowedEvents, _isAllowedEvent, isAllowedEvent_fn, _isAllowedAction, isAllowedAction_fn, _isInCurrentNamespace, isInCurrentNamespace_fn;\nvar RestrictedControllerMessenger = class {\n  /**\n   * Constructs a restricted controller messenger\n   *\n   * The provided allowlists grant the ability to call the listed actions and subscribe to the\n   * listed events. The \"name\" provided grants ownership of any actions and events under that\n   * namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - The controller options.\n   * @param options.controllerMessenger - The controller messenger instance that is being wrapped.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   */\n  constructor({\n    controllerMessenger,\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    /**\n     * Determine whether the given event type is allowed. Event types are\n     * allowed if they are in the current namespace or on the list of\n     * allowed events.\n     *\n     * @param eventType - The event type to check.\n     * @returns Whether the event type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedEvent);\n    /**\n     * Determine whether the given action type is allowed. Action types\n     * are allowed if they are in the current namespace or on the list of\n     * allowed actions.\n     *\n     * @param actionType - The action type to check.\n     * @returns Whether the action type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedAction);\n    /**\n     * Determine whether the given name is within the current namespace.\n     *\n     * @param name - The name to check\n     * @returns Whether the name is within the current namespace\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isInCurrentNamespace);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerMessenger, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerName, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedActions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedEvents, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerMessenger, controllerMessenger);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerName, name);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedActions, allowedActions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedEvents, allowedEvents);\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * The action type this handler is registered under *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw if an action handler that is not in the current namespace is being registered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  registerActionHandler(action, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed registering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerActionHandler(action, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * The action type being unregistered *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unique identifier for this action.\n   * @throws Will throw if an action handler that is not in the current namespace is being unregistered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  unregisterActionHandler(action) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed unregistering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unregisterActionHandler(action);\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * The action type being called must be on the action allowlist.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of allowed Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedAction, isAllowedAction_fn).call(this, actionType)) {\n      throw new Error(`Action missing from allow list: ${actionType}`);\n    }\n    const response = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).call(\n      actionType,\n      ...params\n    );\n    return response;\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * The event type *must* be in the current namespace\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerInitialEventPayload({\n      eventType,\n      getPayload\n    });\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * The event type being published *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @throws Will throw if an event that is not in the current namespace is being published.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  publish(event, ...payload) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).publish(event, ...payload);\n  }\n  subscribe(event, handler, selector) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    if (selector) {\n      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler, selector);\n    }\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler);\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * The event type being unsubscribed to must be on the event allowlist.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw if the given event is not an allowed event for this controller messenger.\n   * @template EventType - A type union of allowed Event type strings.\n   */\n  unsubscribe(event, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unsubscribe(event, handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * The event type being cleared *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @throws Will throw if a subscription for an event that is not in the current namespace is being cleared.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  clearEventSubscriptions(event) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed clearing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).clearEventSubscriptions(event);\n  }\n};\n_controllerMessenger = new WeakMap();\n_controllerName = new WeakMap();\n_allowedActions = new WeakMap();\n_allowedEvents = new WeakMap();\n_isAllowedEvent = new WeakSet();\nisAllowedEvent_fn = function(eventType) {\n  const allowedEvents = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedEvents);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType) || allowedEvents !== null && allowedEvents.includes(eventType);\n};\n_isAllowedAction = new WeakSet();\nisAllowedAction_fn = function(actionType) {\n  const allowedActions = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedActions);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, actionType) || allowedActions !== null && allowedActions.includes(actionType);\n};\n_isInCurrentNamespace = new WeakSet();\nisInCurrentNamespace_fn = function(name) {\n  return name.startsWith(`${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:`);\n};\n\n\n\nexports.RestrictedControllerMessenger = RestrictedControllerMessenger;\n//# sourceMappingURL=chunk-UJFCPTF3.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/BaseControllerV2.ts\nvar _immer = require('immer');\n_immer.enablePatches.call(void 0, );\nvar _internalState;\nvar BaseController = class {\n  /**\n   * Creates a BaseController instance.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - Controller messaging system.\n   * @param options.metadata - ControllerState metadata, describing how to \"anonymize\" the state, and which\n   * parts should be persisted.\n   * @param options.name - The name of the controller, used as a namespace for events and actions.\n   * @param options.state - Initial controller state.\n   */\n  constructor({\n    messenger,\n    metadata,\n    name,\n    state\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _internalState, void 0);\n    this.messagingSystem = messenger;\n    this.name = name;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, _immer.freeze.call(void 0, state, true));\n    this.metadata = metadata;\n    this.messagingSystem.registerActionHandler(\n      `${name}:getState`,\n      () => this.state\n    );\n    this.messagingSystem.registerInitialEventPayload({\n      eventType: `${name}:stateChange`,\n      getPayload: () => [this.state, []]\n    });\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState);\n  }\n  set state(_) {\n    throw new Error(\n      `Controller state cannot be directly mutated; use 'update' method instead.`\n    );\n  }\n  /**\n   * Updates controller state. Accepts a callback that is passed a draft copy\n   * of the controller state. If a value is returned, it is set as the new\n   * state. Otherwise, any changes made within that callback to the draft are\n   * applied to the controller state.\n   *\n   * @param callback - Callback for updating state, passed a draft state\n   * object. Return a new state object or mutate the draft to update state.\n   * @returns An object that has the next state, patches applied in the update and inverse patches to\n   * rollback the update.\n   */\n  update(callback) {\n    const [nextState, patches, inversePatches] = _immer.produceWithPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), callback);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n    return { nextState, patches, inversePatches };\n  }\n  /**\n   * Applies immer patches to the current state. The patches come from the\n   * update function itself and can either be normal or inverse patches.\n   *\n   * @param patches - An array of immer patches that are to be applied to make\n   * or undo changes.\n   */\n  applyPatches(patches) {\n    const nextState = _immer.applyPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), patches);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n  }\n  /**\n   * Prepares the controller for garbage collection. This should be extended\n   * by any subclasses to clean up any additional connections or events.\n   *\n   * The only cleanup performed here is to remove listeners. While technically\n   * this is not required to ensure this instance is garbage collected, it at\n   * least ensures this instance won't be responsible for preventing the\n   * listeners from being garbage collected.\n   */\n  destroy() {\n    this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`);\n  }\n};\n_internalState = new WeakMap();\nfunction getAnonymizedState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"anonymous\");\n}\nfunction getPersistentState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"persist\");\n}\nfunction deriveStateFromMetadata(state, metadata, metadataProperty) {\n  return Object.keys(state).reduce((derivedState, key) => {\n    try {\n      const stateMetadata = metadata[key];\n      if (!stateMetadata) {\n        throw new Error(`No metadata found for '${String(key)}'`);\n      }\n      const propertyMetadata = stateMetadata[metadataProperty];\n      const stateProperty = state[key];\n      if (typeof propertyMetadata === \"function\") {\n        derivedState[key] = propertyMetadata(stateProperty);\n      } else if (propertyMetadata) {\n        derivedState[key] = stateProperty;\n      }\n      return derivedState;\n    } catch (error) {\n      setTimeout(() => {\n        throw error;\n      });\n      return derivedState;\n    }\n  }, {});\n}\n\n\n\n\n\nexports.BaseController = BaseController; exports.getAnonymizedState = getAnonymizedState; exports.getPersistentState = getPersistentState;\n//# sourceMappingURL=chunk-ZNOPSWMU.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkNINOM2XQjs = require('./chunk-NINOM2XQ.js');\n\n\n\n\nvar _chunkZNOPSWMUjs = require('./chunk-ZNOPSWMU.js');\n\n\nvar _chunkG42723LGjs = require('./chunk-G42723LG.js');\n\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\n\n\nexports.BaseController = _chunkZNOPSWMUjs.BaseController; exports.BaseControllerV1 = _chunkNINOM2XQjs.BaseControllerV1; exports.ControllerMessenger = _chunkG42723LGjs.ControllerMessenger; exports.RestrictedControllerMessenger = _chunkUJFCPTF3js.RestrictedControllerMessenger; exports.getAnonymizedState = _chunkZNOPSWMUjs.getAnonymizedState; exports.getPersistentState = _chunkZNOPSWMUjs.getPersistentState;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst errors_1 = require(\"./errors.cjs\");\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(fn) {\n    /* istanbul ignore next */\n    return Boolean(typeof fn?.prototype?.constructor?.name === 'string');\n}\n/**\n * Attempts to obtain the message from a possible error object. If it is\n * possible to do so, any trailing period will be removed from the message;\n * otherwise an empty string is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The message without any trailing period if `error` is an object\n * with a `message` property; the string version of `error` without any trailing\n * period if it is not `undefined` or `null`; otherwise an empty string.\n */\nfunction getErrorMessageWithoutTrailingPeriod(error) {\n    // We'll add our own period.\n    return (0, errors_1.getErrorMessage)(error).replace(/\\.$/u, '');\n}\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper, message) {\n    if (isConstructable(ErrorWrapper)) {\n        return new ErrorWrapper({\n            message,\n        });\n    }\n    return ErrorWrapper({\n        message,\n    });\n}\n/**\n * The default error class that is thrown if an assertion fails.\n */\nclass AssertionError extends Error {\n    constructor(options) {\n        super(options.message);\n        this.code = 'ERR_ASSERTION';\n    }\n}\nexports.AssertionError = AssertionError;\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nfunction assert(value, message = 'Assertion failed.', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    if (!value) {\n        if (message instanceof Error) {\n            throw message;\n        }\n        throw getError(ErrorWrapper, message);\n    }\n}\nexports.assert = assert;\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nfunction assertStruct(value, struct, errorPrefix = 'Assertion failed', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    try {\n        (0, superstruct_1.assert)(value, struct);\n    }\n    catch (error) {\n        throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessageWithoutTrailingPeriod(error)}.`);\n    }\n}\nexports.assertStruct = assertStruct;\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nfunction assertExhaustive(_object) {\n    throw new Error('Invalid branch reached. Should be detected during compilation.');\n}\nexports.assertExhaustive = assertExhaustive;\n//# sourceMappingURL=assert.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base64 = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nconst base64 = (struct, options = {}) => {\n    const paddingRequired = options.paddingRequired ?? false;\n    const characterSet = options.characterSet ?? 'base64';\n    let letters;\n    if (characterSet === 'base64') {\n        letters = String.raw `[A-Za-z0-9+\\/]`;\n    }\n    else {\n        (0, assert_1.assert)(characterSet === 'base64url');\n        letters = String.raw `[-_A-Za-z0-9]`;\n    }\n    let re;\n    if (paddingRequired) {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    else {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64;\n//# sourceMappingURL=base64.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDataView = exports.concatBytes = exports.valueToBytes = exports.base64ToBytes = exports.stringToBytes = exports.numberToBytes = exports.signedBigIntToBytes = exports.bigIntToBytes = exports.hexToBytes = exports.bytesToBase64 = exports.bytesToString = exports.bytesToNumber = exports.bytesToSignedBigInt = exports.bytesToBigInt = exports.bytesToHex = exports.assertIsBytes = exports.isBytes = void 0;\nconst base_1 = require(\"@scure/base\");\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n// '0'.charCodeAt(0) === 48\nconst HEX_MINIMUM_NUMBER_CHARACTER = 48;\n// '9'.charCodeAt(0) === 57\nconst HEX_MAXIMUM_NUMBER_CHARACTER = 58;\nconst HEX_CHARACTER_OFFSET = 87;\n/**\n * Memoized function that returns an array to be used as a lookup table for\n * converting bytes to hexadecimal values.\n *\n * The array is created lazily and then cached for future use. The benefit of\n * this approach is that the performance of converting bytes to hex is much\n * better than if we were to call `toString(16)` on each byte.\n *\n * The downside is that the array is created once and then never garbage\n * collected. This is not a problem in practice because the array is only 256\n * elements long.\n *\n * @returns A function that returns the lookup table.\n */\nfunction getPrecomputedHexValuesBuilder() {\n    // To avoid issues with tree shaking, we need to use a function to return the\n    // array. This is because the array is only used in the `bytesToHex` function\n    // and if we were to use a global variable, the array might be removed by the\n    // tree shaker.\n    const lookupTable = [];\n    return () => {\n        if (lookupTable.length === 0) {\n            for (let i = 0; i < 256; i++) {\n                lookupTable.push(i.toString(16).padStart(2, '0'));\n            }\n        }\n        return lookupTable;\n    };\n}\n/**\n * Function implementation of the {@link getPrecomputedHexValuesBuilder}\n * function.\n */\nconst getPrecomputedHexValues = getPrecomputedHexValuesBuilder();\n/**\n * Check if a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @returns Whether the value is a `Uint8Array`.\n */\nfunction isBytes(value) {\n    return value instanceof Uint8Array;\n}\nexports.isBytes = isBytes;\n/**\n * Assert that a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @throws If the value is not a `Uint8Array`.\n */\nfunction assertIsBytes(value) {\n    (0, assert_1.assert)(isBytes(value), 'Value must be a Uint8Array.');\n}\nexports.assertIsBytes = assertIsBytes;\n/**\n * Convert a `Uint8Array` to a hexadecimal string.\n *\n * @param bytes - The bytes to convert to a hexadecimal string.\n * @returns The hexadecimal string.\n */\nfunction bytesToHex(bytes) {\n    assertIsBytes(bytes);\n    if (bytes.length === 0) {\n        return '0x';\n    }\n    const lookupTable = getPrecomputedHexValues();\n    const hexadecimal = new Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        hexadecimal[i] = lookupTable[bytes[i]];\n    }\n    return (0, hex_1.add0x)(hexadecimal.join(''));\n}\nexports.bytesToHex = bytesToHex;\n/**\n * Convert a `Uint8Array` to a `bigint`.\n *\n * To convert a `Uint8Array` to a `number` instead, use {@link bytesToNumber}.\n * To convert a two's complement encoded `Uint8Array` to a `bigint`, use\n * {@link bytesToSignedBigInt}.\n *\n * @param bytes - The bytes to convert to a `bigint`.\n * @returns The `bigint`.\n */\nfunction bytesToBigInt(bytes) {\n    assertIsBytes(bytes);\n    const hexadecimal = bytesToHex(bytes);\n    return BigInt(hexadecimal);\n}\nexports.bytesToBigInt = bytesToBigInt;\n/**\n * Convert a `Uint8Array` to a signed `bigint`. This assumes that the bytes are\n * encoded in two's complement.\n *\n * To convert a `Uint8Array` to an unsigned `bigint` instead, use\n * {@link bytesToBigInt}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param bytes - The bytes to convert to a signed `bigint`.\n * @returns The signed `bigint`.\n */\nfunction bytesToSignedBigInt(bytes) {\n    assertIsBytes(bytes);\n    let value = BigInt(0);\n    for (const byte of bytes) {\n        // eslint-disable-next-line no-bitwise\n        value = (value << BigInt(8)) + BigInt(byte);\n    }\n    return BigInt.asIntN(bytes.length * 8, value);\n}\nexports.bytesToSignedBigInt = bytesToSignedBigInt;\n/**\n * Convert a `Uint8Array` to a `number`.\n *\n * To convert a `Uint8Array` to a `bigint` instead, use {@link bytesToBigInt}.\n *\n * @param bytes - The bytes to convert to a number.\n * @returns The number.\n * @throws If the resulting number is not a safe integer.\n */\nfunction bytesToNumber(bytes) {\n    assertIsBytes(bytes);\n    const bigint = bytesToBigInt(bytes);\n    (0, assert_1.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), 'Number is not a safe integer. Use `bytesToBigInt` instead.');\n    return Number(bigint);\n}\nexports.bytesToNumber = bytesToNumber;\n/**\n * Convert a UTF-8 encoded `Uint8Array` to a `string`.\n *\n * @param bytes - The bytes to convert to a string.\n * @returns The string.\n */\nfunction bytesToString(bytes) {\n    assertIsBytes(bytes);\n    return new TextDecoder().decode(bytes);\n}\nexports.bytesToString = bytesToString;\n/**\n * Convert a `Uint8Array` to a base64 encoded string.\n *\n * @param bytes - The bytes to convert to a base64 encoded string.\n * @returns The base64 encoded string.\n */\nfunction bytesToBase64(bytes) {\n    assertIsBytes(bytes);\n    return base_1.base64.encode(bytes);\n}\nexports.bytesToBase64 = bytesToBase64;\n/**\n * Convert a hexadecimal string to a `Uint8Array`. The string can optionally be\n * prefixed with `0x`. It accepts even and odd length strings.\n *\n * If the value is \"0x\", an empty `Uint8Array` is returned.\n *\n * @param value - The hexadecimal string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction hexToBytes(value) {\n    // \"0x\" is often used as empty byte array.\n    if (value?.toLowerCase?.() === '0x') {\n        return new Uint8Array();\n    }\n    (0, hex_1.assertIsHexString)(value);\n    // Remove the `0x` prefix if it exists, and pad the string to have an even\n    // number of characters.\n    const strippedValue = (0, hex_1.remove0x)(value).toLowerCase();\n    const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;\n    const bytes = new Uint8Array(normalizedValue.length / 2);\n    for (let i = 0; i < bytes.length; i++) {\n        // While this is not the prettiest way to convert a hexadecimal string to a\n        // `Uint8Array`, it is a lot faster than using `parseInt` to convert each\n        // character.\n        const c1 = normalizedValue.charCodeAt(i * 2);\n        const c2 = normalizedValue.charCodeAt(i * 2 + 1);\n        const n1 = c1 -\n            (c1 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        const n2 = c2 -\n            (c2 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        bytes[i] = n1 * 16 + n2;\n    }\n    return bytes;\n}\nexports.hexToBytes = hexToBytes;\n/**\n * Convert a `bigint` to a `Uint8Array`.\n *\n * This assumes that the `bigint` is an unsigned integer. To convert a signed\n * `bigint` instead, use {@link signedBigIntToBytes}.\n *\n * @param value - The bigint to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction bigIntToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= BigInt(0), 'Value must be a non-negative bigint.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * Check if a `bigint` fits in a certain number of bytes.\n *\n * @param value - The `bigint` to check.\n * @param bytes - The number of bytes.\n * @returns Whether the `bigint` fits in the number of bytes.\n */\nfunction bigIntFits(value, bytes) {\n    (0, assert_1.assert)(bytes > 0);\n    /* eslint-disable no-bitwise */\n    const mask = value >> BigInt(31);\n    return !(((~value & mask) + (value & ~mask)) >> BigInt(bytes * 8 + ~0));\n    /* eslint-enable no-bitwise */\n}\n/**\n * Convert a signed `bigint` to a `Uint8Array`. This uses two's complement\n * encoding to represent negative numbers.\n *\n * To convert an unsigned `bigint` to a `Uint8Array` instead, use\n * {@link bigIntToBytes}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param value - The number to convert to bytes.\n * @param byteLength - The length of the resulting `Uint8Array`. If the number\n * is larger than the maximum value that can be represented by the given length,\n * an error is thrown.\n * @returns The bytes as `Uint8Array`.\n */\nfunction signedBigIntToBytes(value, byteLength) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(typeof byteLength === 'number', 'Byte length must be a number.');\n    (0, assert_1.assert)(byteLength > 0, 'Byte length must be greater than 0.');\n    (0, assert_1.assert)(bigIntFits(value, byteLength), 'Byte length is too small to represent the given value.');\n    // ESLint doesn't like mutating function parameters, so to avoid having to\n    // disable the rule, we create a new variable.\n    let numberValue = value;\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0; i < bytes.length; i++) {\n        bytes[i] = Number(BigInt.asUintN(8, numberValue));\n        // eslint-disable-next-line no-bitwise\n        numberValue >>= BigInt(8);\n    }\n    return bytes.reverse();\n}\nexports.signedBigIntToBytes = signedBigIntToBytes;\n/**\n * Convert a `number` to a `Uint8Array`.\n *\n * @param value - The number to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n * @throws If the number is not a safe integer.\n */\nfunction numberToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToBytes` instead.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.numberToBytes = numberToBytes;\n/**\n * Convert a `string` to a UTF-8 encoded `Uint8Array`.\n *\n * @param value - The string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction stringToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return new TextEncoder().encode(value);\n}\nexports.stringToBytes = stringToBytes;\n/**\n * Convert a base64 encoded string to a `Uint8Array`.\n *\n * @param value - The base64 encoded string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction base64ToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return base_1.base64.decode(value);\n}\nexports.base64ToBytes = base64ToBytes;\n/**\n * Convert a byte-like value to a `Uint8Array`. The value can be a `Uint8Array`,\n * a `bigint`, a `number`, or a `string`.\n *\n * This will attempt to guess the type of the value based on its type and\n * contents. For more control over the conversion, use the more specific\n * conversion functions, such as {@link hexToBytes} or {@link stringToBytes}.\n *\n * If the value is a `string`, and it is prefixed with `0x`, it will be\n * interpreted as a hexadecimal string. Otherwise, it will be interpreted as a\n * UTF-8 string. To convert a hexadecimal string to bytes without interpreting\n * it as a UTF-8 string, use {@link hexToBytes} instead.\n *\n * If the value is a `bigint`, it is assumed to be unsigned. To convert a signed\n * `bigint` to bytes, use {@link signedBigIntToBytes} instead.\n *\n * If the value is a `Uint8Array`, it will be returned as-is.\n *\n * @param value - The value to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction valueToBytes(value) {\n    if (typeof value === 'bigint') {\n        return bigIntToBytes(value);\n    }\n    if (typeof value === 'number') {\n        return numberToBytes(value);\n    }\n    if (typeof value === 'string') {\n        if (value.startsWith('0x')) {\n            return hexToBytes(value);\n        }\n        return stringToBytes(value);\n    }\n    if (isBytes(value)) {\n        return value;\n    }\n    throw new TypeError(`Unsupported value type: \"${typeof value}\".`);\n}\nexports.valueToBytes = valueToBytes;\n/**\n * Concatenate multiple byte-like values into a single `Uint8Array`. The values\n * can be `Uint8Array`, `bigint`, `number`, or `string`. This uses\n * {@link valueToBytes} under the hood to convert each value to bytes. Refer to\n * the documentation of that function for more information.\n *\n * @param values - The values to concatenate.\n * @returns The concatenated bytes as `Uint8Array`.\n */\nfunction concatBytes(values) {\n    const normalizedValues = new Array(values.length);\n    let byteLength = 0;\n    for (let i = 0; i < values.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const value = valueToBytes(values[i]);\n        normalizedValues[i] = value;\n        byteLength += value.length;\n    }\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0, offset = 0; i < normalizedValues.length; i++) {\n        // While we could simply spread the values into an array and use\n        // `Uint8Array.from`, that is a lot slower than using `Uint8Array.set`.\n        bytes.set(normalizedValues[i], offset);\n        offset += normalizedValues[i].length;\n    }\n    return bytes;\n}\nexports.concatBytes = concatBytes;\n/**\n * Create a {@link DataView} from a {@link Uint8Array}. This is a convenience\n * function that avoids having to create a {@link DataView} manually, which\n * requires passing the `byteOffset` and `byteLength` parameters every time.\n *\n * Not passing the `byteOffset` and `byteLength` parameters can result in\n * unexpected behavior when the {@link Uint8Array} is a view of a larger\n * {@link ArrayBuffer}, e.g., when using {@link Uint8Array.subarray}.\n *\n * This function also supports Node.js {@link Buffer}s.\n *\n * @example\n * ```typescript\n * const bytes = new Uint8Array([1, 2, 3]);\n *\n * // This is equivalent to:\n * // const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n * const dataView = createDataView(bytes);\n * ```\n * @param bytes - The bytes to create the {@link DataView} from.\n * @returns The {@link DataView}.\n */\nfunction createDataView(bytes) {\n    // To maintain compatibility with Node.js, we need to check if the bytes are\n    // a Buffer. If so, we need to slice the buffer to get the underlying\n    // ArrayBuffer.\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof Buffer !== 'undefined' && bytes instanceof Buffer) {\n        const buffer = bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n        return new DataView(buffer);\n    }\n    return new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n}\nexports.createDataView = createDataView;\n//# sourceMappingURL=bytes.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCaipChainId = exports.parseCaipAccountId = exports.parseCaipChainId = exports.isCaipAccountAddress = exports.isCaipAccountId = exports.isCaipReference = exports.isCaipNamespace = exports.isCaipChainId = exports.KnownCaipNamespace = exports.CaipAccountAddressStruct = exports.CaipAccountIdStruct = exports.CaipReferenceStruct = exports.CaipNamespaceStruct = exports.CaipChainIdStruct = exports.CAIP_ACCOUNT_ADDRESS_REGEX = exports.CAIP_ACCOUNT_ID_REGEX = exports.CAIP_REFERENCE_REGEX = exports.CAIP_NAMESPACE_REGEX = exports.CAIP_CHAIN_ID_REGEX = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nexports.CAIP_CHAIN_ID_REGEX = /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u;\nexports.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u;\nexports.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u;\nexports.CAIP_ACCOUNT_ID_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u;\nexports.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u;\n/**\n * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.\n */\nexports.CaipChainIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_CHAIN_ID_REGEX);\n/**\n * A CAIP-2 namespace, i.e., the first part of a CAIP chain ID.\n */\nexports.CaipNamespaceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_NAMESPACE_REGEX);\n/**\n * A CAIP-2 reference, i.e., the second part of a CAIP chain ID.\n */\nexports.CaipReferenceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_REFERENCE_REGEX);\n/**\n * A CAIP-10 account ID, i.e., a human-readable namespace, reference, and account address.\n */\nexports.CaipAccountIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ID_REGEX);\n/**\n * A CAIP-10 account address, i.e., the third part of the CAIP account ID.\n */\nexports.CaipAccountAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ADDRESS_REGEX);\n/** Known CAIP namespaces. */\nvar KnownCaipNamespace;\n(function (KnownCaipNamespace) {\n    /** EIP-155 compatible chains. */\n    KnownCaipNamespace[\"Eip155\"] = \"eip155\";\n})(KnownCaipNamespace = exports.KnownCaipNamespace || (exports.KnownCaipNamespace = {}));\n/**\n * Check if the given value is a {@link CaipChainId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipChainId}.\n */\nfunction isCaipChainId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipChainIdStruct);\n}\nexports.isCaipChainId = isCaipChainId;\n/**\n * Check if the given value is a {@link CaipNamespace}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipNamespace}.\n */\nfunction isCaipNamespace(value) {\n    return (0, superstruct_1.is)(value, exports.CaipNamespaceStruct);\n}\nexports.isCaipNamespace = isCaipNamespace;\n/**\n * Check if the given value is a {@link CaipReference}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipReference}.\n */\nfunction isCaipReference(value) {\n    return (0, superstruct_1.is)(value, exports.CaipReferenceStruct);\n}\nexports.isCaipReference = isCaipReference;\n/**\n * Check if the given value is a {@link CaipAccountId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipAccountId}.\n */\nfunction isCaipAccountId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountIdStruct);\n}\nexports.isCaipAccountId = isCaipAccountId;\n/**\n * Check if a value is a {@link CaipAccountAddress}.\n *\n * @param value - The value to validate.\n * @returns True if the value is a valid {@link CaipAccountAddress}.\n */\nfunction isCaipAccountAddress(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountAddressStruct);\n}\nexports.isCaipAccountAddress = isCaipAccountAddress;\n/**\n * Parse a CAIP-2 chain ID to an object containing the namespace and reference.\n * This validates the CAIP-2 chain ID before parsing it.\n *\n * @param caipChainId - The CAIP-2 chain ID to validate and parse.\n * @returns The parsed CAIP-2 chain ID.\n */\nfunction parseCaipChainId(caipChainId) {\n    const match = exports.CAIP_CHAIN_ID_REGEX.exec(caipChainId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP chain ID.');\n    }\n    return {\n        namespace: match.groups.namespace,\n        reference: match.groups.reference,\n    };\n}\nexports.parseCaipChainId = parseCaipChainId;\n/**\n * Parse an CAIP-10 account ID to an object containing the chain ID, parsed chain ID, and account address.\n * This validates the CAIP-10 account ID before parsing it.\n *\n * @param caipAccountId - The CAIP-10 account ID to validate and parse.\n * @returns The parsed CAIP-10 account ID.\n */\nfunction parseCaipAccountId(caipAccountId) {\n    const match = exports.CAIP_ACCOUNT_ID_REGEX.exec(caipAccountId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP account ID.');\n    }\n    return {\n        address: match.groups.accountAddress,\n        chainId: match.groups.chainId,\n        chain: {\n            namespace: match.groups.namespace,\n            reference: match.groups.reference,\n        },\n    };\n}\nexports.parseCaipAccountId = parseCaipAccountId;\n/**\n * Chain ID as defined per the CAIP-2\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md}.\n *\n * It defines a way to uniquely identify any blockchain in a human-readable\n * way.\n *\n * @param namespace - The standard (ecosystem) of similar blockchains.\n * @param reference - Identify of a blockchain within a given namespace.\n * @throws {@link Error}\n * This exception is thrown if the inputs does not comply with the CAIP-2\n * syntax specification\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md#syntax}.\n * @returns A CAIP chain ID.\n */\nfunction toCaipChainId(namespace, reference) {\n    if (!isCaipNamespace(namespace)) {\n        throw new Error(`Invalid \"namespace\", must match: ${exports.CAIP_NAMESPACE_REGEX.toString()}`);\n    }\n    if (!isCaipReference(reference)) {\n        throw new Error(`Invalid \"reference\", must match: ${exports.CAIP_REFERENCE_REGEX.toString()}`);\n    }\n    return `${namespace}:${reference}`;\n}\nexports.toCaipChainId = toCaipChainId;\n//# sourceMappingURL=caip-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChecksumStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst base64_1 = require(\"./base64.cjs\");\nexports.ChecksumStruct = (0, superstruct_1.size)((0, base64_1.base64)((0, superstruct_1.string)(), { paddingRequired: true }), 44, 44);\n//# sourceMappingURL=checksum.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\nconst NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1.StrictHexStruct]);\nconst NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);\nconst BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);\nconst BytesLikeStruct = (0, superstruct_1.union)([hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);\nconst BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1.StrictHexStruct]), bytes_1.hexToBytes);\nconst HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nfunction createNumber(value) {\n    try {\n        const result = (0, superstruct_1.create)(value, NumberCoercer);\n        (0, assert_1.assert)(Number.isFinite(result), `Expected a number-like value, got \"${value}\".`);\n        return result;\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${value}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createNumber = createNumber;\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nfunction createBigInt(value) {\n    try {\n        // The `BigInt` constructor throws if the value is not a number-like value.\n        // There is no need to validate the value manually.\n        return (0, superstruct_1.create)(value, BigIntCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBigInt = createBigInt;\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nfunction createBytes(value) {\n    if (typeof value === 'string' && value.toLowerCase() === '0x') {\n        return new Uint8Array();\n    }\n    try {\n        return (0, superstruct_1.create)(value, BytesCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBytes = createBytes;\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nfunction createHex(value) {\n    if ((value instanceof Uint8Array && value.length === 0) ||\n        (typeof value === 'string' && value.toLowerCase() === '0x')) {\n        return '0x';\n    }\n    try {\n        return (0, superstruct_1.create)(value, HexCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createHex = createHex;\n//# sourceMappingURL=coercers.cjs.map","import { cloneDeep } from 'lodash';\n\nconst version = 56;\n\n/**\n * Remove tokens that don't have an address due to\n * lack of previous addToken validation.  Also removes\n * an unwanted, undefined image property\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n\n    const { PreferencesController } = versionedData.data;\n\n    if (Array.isArray(PreferencesController?.tokens)) {\n      PreferencesController.tokens = PreferencesController.tokens.filter(\n        ({ address }) => address,\n      );\n    }\n\n    if (\n      PreferencesController?.accountTokens &&\n      typeof PreferencesController.accountTokens === 'object'\n    ) {\n      Object.keys(PreferencesController.accountTokens).forEach((account) => {\n        const chains = Object.keys(\n          PreferencesController.accountTokens[account],\n        );\n        chains.forEach((chain) => {\n          PreferencesController.accountTokens[account][chain] =\n            PreferencesController.accountTokens[account][chain].filter(\n              ({ address }) => address,\n            );\n        });\n      });\n    }\n\n    if (\n      PreferencesController?.assetImages &&\n      'undefined' in PreferencesController.assetImages\n    ) {\n      delete PreferencesController.assetImages.undefined;\n    }\n\n    return versionedData;\n  },\n};\n","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _FrozenMap_map, _FrozenSet_set;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FrozenSet = exports.FrozenMap = void 0;\n/**\n * A {@link ReadonlyMap} that cannot be modified after instantiation.\n * The implementation uses an inner map hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this map.\n */\nclass FrozenMap {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").size;\n    }\n    [(_FrozenMap_map = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\")[Symbol.iterator]();\n    }\n    constructor(entries) {\n        _FrozenMap_map.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner map.\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").forEach((value, key, _map) => callbackfn.call(thisArg, value, key, this));\n    }\n    get(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").get(key);\n    }\n    has(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").has(key);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").values();\n    }\n    toString() {\n        return `FrozenMap(${this.size}) {${this.size > 0\n            ? ` ${[...this.entries()]\n                .map(([key, value]) => `${String(key)} => ${String(value)}`)\n                .join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenMap = FrozenMap;\n/**\n * A {@link ReadonlySet} that cannot be modified after instantiation.\n * The implementation uses an inner set hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this set.\n */\nclass FrozenSet {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").size;\n    }\n    [(_FrozenSet_set = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\")[Symbol.iterator]();\n    }\n    constructor(values) {\n        _FrozenSet_set.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner set.\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));\n    }\n    has(value) {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").has(value);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").values();\n    }\n    toString() {\n        return `FrozenSet(${this.size}) {${this.size > 0\n            ? ` ${[...this.values()].map((member) => String(member)).join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenSet = FrozenSet;\nObject.freeze(FrozenMap);\nObject.freeze(FrozenMap.prototype);\nObject.freeze(FrozenSet);\nObject.freeze(FrozenSet.prototype);\n//# sourceMappingURL=collections.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=encryption-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapError = exports.getErrorMessage = exports.isErrorWithStack = exports.isErrorWithMessage = exports.isErrorWithCode = void 0;\nconst pony_cause_1 = require(\"pony-cause\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * Type guard for determining whether the given value is an instance of Error.\n * For errors generated via `fs.promises`, `error instanceof Error` won't work,\n * so we have to come up with another way of testing.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isError(error) {\n    return (error instanceof Error ||\n        ((0, misc_1.isObject)(error) && error.constructor.name === 'Error'));\n}\n/**\n * Type guard for determining whether the given value is an error object with a\n * `code` property such as the type of error that Node throws for filesystem\n * operations, etc.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithCode(error) {\n    return typeof error === 'object' && error !== null && 'code' in error;\n}\nexports.isErrorWithCode = isErrorWithCode;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithMessage(error) {\n    return typeof error === 'object' && error !== null && 'message' in error;\n}\nexports.isErrorWithMessage = isErrorWithMessage;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `stack` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithStack(error) {\n    return typeof error === 'object' && error !== null && 'stack' in error;\n}\nexports.isErrorWithStack = isErrorWithStack;\n/**\n * Attempts to obtain the message from a possible error object, defaulting to an\n * empty string if it is impossible to do so.\n *\n * @param error - The possible error to get the message from.\n * @returns The message if `error` is an object with a `message` property;\n * the string version of `error` if it is not `undefined` or `null`; otherwise\n * an empty string.\n */\nfunction getErrorMessage(error) {\n    if (isErrorWithMessage(error) && typeof error.message === 'string') {\n        return error.message;\n    }\n    if ((0, misc_1.isNullOrUndefined)(error)) {\n        return '';\n    }\n    return String(error);\n}\nexports.getErrorMessage = getErrorMessage;\n/**\n * Builds a new error object, linking it to the original error via the `cause`\n * property if it is an Error.\n *\n * This function is useful to reframe error messages in general, but is\n * _critical_ when interacting with any of Node's filesystem functions as\n * provided via `fs.promises`, because these do not produce stack traces in the\n * case of an I/O error (see <https://github.com/nodejs/node/issues/30944>).\n *\n * @param originalError - The error to be wrapped (something throwable).\n * @param message - The desired message of the new error.\n * @returns A new error object.\n */\nfunction wrapError(originalError, message) {\n    if (isError(originalError)) {\n        let error;\n        if (Error.length === 2) {\n            // for some reason `tsserver` is not complaining that the\n            // Error constructor doesn't support a second argument in the editor,\n            // but `tsc` does. Error causes are not supported by our current tsc target (ES2020, we need ES2022 to make this work)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new Error(message, { cause: originalError });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new pony_cause_1.ErrorWithCause(message, { cause: originalError });\n        }\n        if (isErrorWithCode(originalError)) {\n            error.code = originalError.code;\n        }\n        return error;\n    }\n    if (message.length > 0) {\n        return new Error(`${String(originalError)}: ${message}`);\n    }\n    return new Error(String(originalError));\n}\nexports.wrapError = wrapError;\n//# sourceMappingURL=errors.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.remove0x = exports.add0x = exports.isValidChecksumAddress = exports.getChecksumAddress = exports.isValidHexAddress = exports.assertIsStrictHexString = exports.assertIsHexString = exports.isStrictHexString = exports.isHexString = exports.HexChecksumAddressStruct = exports.HexAddressStruct = exports.StrictHexStruct = exports.HexStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nexports.HexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^(?:0x)?[0-9a-f]+$/iu);\nexports.StrictHexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]+$/iu);\nexports.HexAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]{40}$/u);\nexports.HexChecksumAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-fA-F]{40}$/u);\n/**\n * Check if a string is a valid hex string.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isHexString(value) {\n    return (0, superstruct_1.is)(value, exports.HexStruct);\n}\nexports.isHexString = isHexString;\n/**\n * Strictly check if a string is a valid hex string. A valid hex string must\n * start with the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isStrictHexString(value) {\n    return (0, superstruct_1.is)(value, exports.StrictHexStruct);\n}\nexports.isStrictHexString = isStrictHexString;\n/**\n * Assert that a value is a valid hex string.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsHexString(value) {\n    (0, assert_1.assert)(isHexString(value), 'Value must be a hexadecimal string.');\n}\nexports.assertIsHexString = assertIsHexString;\n/**\n * Assert that a value is a valid hex string. A valid hex string must start with\n * the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsStrictHexString(value) {\n    (0, assert_1.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with \"0x\".');\n}\nexports.assertIsStrictHexString = assertIsStrictHexString;\n/**\n * Validate that the passed prefixed hex string is an all-lowercase\n * hex address, or a valid mixed-case checksum address.\n *\n * @param possibleAddress - Input parameter to check against.\n * @returns Whether or not the input is a valid hex address.\n */\nfunction isValidHexAddress(possibleAddress) {\n    return ((0, superstruct_1.is)(possibleAddress, exports.HexAddressStruct) ||\n        isValidChecksumAddress(possibleAddress));\n}\nexports.isValidHexAddress = isValidHexAddress;\n/**\n * Encode a passed hex string as an ERC-55 mixed-case checksum address.\n *\n * @param address - The hex address to encode.\n * @returns The address encoded according to ERC-55.\n * @see https://eips.ethereum.org/EIPS/eip-55\n */\nfunction getChecksumAddress(address) {\n    (0, assert_1.assert)((0, superstruct_1.is)(address, exports.HexChecksumAddressStruct), 'Invalid hex address.');\n    const unPrefixed = remove0x(address.toLowerCase());\n    const unPrefixedHash = remove0x((0, bytes_1.bytesToHex)((0, sha3_1.keccak_256)(unPrefixed)));\n    return `0x${unPrefixed\n        .split('')\n        .map((character, nibbleIndex) => {\n        const hashCharacter = unPrefixedHash[nibbleIndex];\n        (0, assert_1.assert)((0, superstruct_1.is)(hashCharacter, (0, superstruct_1.string)()), 'Hash shorter than address.');\n        return parseInt(hashCharacter, 16) > 7\n            ? character.toUpperCase()\n            : character;\n    })\n        .join('')}`;\n}\nexports.getChecksumAddress = getChecksumAddress;\n/**\n * Validate that the passed hex string is a valid ERC-55 mixed-case\n * checksum address.\n *\n * @param possibleChecksum - The hex address to check.\n * @returns True if the address is a checksum address.\n */\nfunction isValidChecksumAddress(possibleChecksum) {\n    if (!(0, superstruct_1.is)(possibleChecksum, exports.HexChecksumAddressStruct)) {\n        return false;\n    }\n    return getChecksumAddress(possibleChecksum) === possibleChecksum;\n}\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Add the `0x`-prefix to a hexadecimal string. If the string already has the\n * prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to add the prefix to.\n * @returns The prefixed hexadecimal string.\n */\nfunction add0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x')) {\n        return hexadecimal;\n    }\n    if (hexadecimal.startsWith('0X')) {\n        return `0x${hexadecimal.substring(2)}`;\n    }\n    return `0x${hexadecimal}`;\n}\nexports.add0x = add0x;\n/**\n * Remove the `0x`-prefix from a hexadecimal string. If the string doesn't have\n * the prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to remove the prefix from.\n * @returns The un-prefixed hexadecimal string.\n */\nfunction remove0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x') || hexadecimal.startsWith('0X')) {\n        return hexadecimal.substring(2);\n    }\n    return hexadecimal;\n}\nexports.remove0x = remove0x;\n//# sourceMappingURL=hex.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./assert.cjs\"), exports);\n__exportStar(require(\"./base64.cjs\"), exports);\n__exportStar(require(\"./bytes.cjs\"), exports);\n__exportStar(require(\"./caip-types.cjs\"), exports);\n__exportStar(require(\"./checksum.cjs\"), exports);\n__exportStar(require(\"./coercers.cjs\"), exports);\n__exportStar(require(\"./collections.cjs\"), exports);\n__exportStar(require(\"./encryption-types.cjs\"), exports);\n__exportStar(require(\"./errors.cjs\"), exports);\n__exportStar(require(\"./hex.cjs\"), exports);\n__exportStar(require(\"./json.cjs\"), exports);\n__exportStar(require(\"./keyring.cjs\"), exports);\n__exportStar(require(\"./logging.cjs\"), exports);\n__exportStar(require(\"./misc.cjs\"), exports);\n__exportStar(require(\"./number.cjs\"), exports);\n__exportStar(require(\"./opaque.cjs\"), exports);\n__exportStar(require(\"./promise.cjs\"), exports);\n__exportStar(require(\"./time.cjs\"), exports);\n__exportStar(require(\"./transaction-types.cjs\"), exports);\n__exportStar(require(\"./versions.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.getJsonSize = exports.getSafeJson = exports.isValidJson = exports.JsonStruct = exports.UnsafeJsonStruct = exports.exactOptional = exports.object = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * A struct to check if the given value is a valid object, with support for\n * {@link exactOptional} types.\n *\n * @param schema - The schema of the object.\n * @returns A struct to check if the given value is an object.\n */\nconst object = (schema) => \n// The type is slightly different from a regular object struct, because we\n// want to make properties with `undefined` in their type optional, but not\n// `undefined` itself. This means that we need a type cast.\n(0, superstruct_1.object)(schema);\nexports.object = object;\n/**\n * Check the last field of a path is present.\n *\n * @param context - The context to check.\n * @param context.path - The path to check.\n * @param context.branch - The branch to check.\n * @returns Whether the last field of a path is present.\n */\nfunction hasOptional({ path, branch }) {\n    const field = path[path.length - 1];\n    return (0, misc_1.hasProperty)(branch[branch.length - 2], field);\n}\n/**\n * A struct which allows the property of an object to be absent, or to be present\n * as long as it's valid and not set to `undefined`.\n *\n * This struct should be used in conjunction with the {@link object} from this\n * library, to get proper type inference.\n *\n * @param struct - The struct to check the value against, if present.\n * @returns A struct to check if the given value is valid, or not present.\n * @example\n * ```ts\n * const struct = object({\n *   foo: exactOptional(string()),\n *   bar: exactOptional(number()),\n *   baz: optional(boolean()),\n *   qux: unknown(),\n * });\n *\n * type Type = Infer<typeof struct>;\n * // Type is equivalent to:\n * // {\n * //   foo?: string;\n * //   bar?: number;\n * //   baz?: boolean | undefined;\n * //   qux: unknown;\n * // }\n * ```\n */\nfunction exactOptional(struct) {\n    return new superstruct_1.Struct({\n        ...struct,\n        type: `optional ${struct.type}`,\n        validator: (value, context) => !hasOptional(context) || struct.validator(value, context),\n        refiner: (value, context) => !hasOptional(context) || struct.refiner(value, context),\n    });\n}\nexports.exactOptional = exactOptional;\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () => (0, superstruct_1.define)('finite number', (value) => {\n    return (0, superstruct_1.is)(value, (0, superstruct_1.number)()) && Number.isFinite(value);\n});\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexports.UnsafeJsonStruct = (0, superstruct_1.union)([\n    (0, superstruct_1.literal)(null),\n    (0, superstruct_1.boolean)(),\n    finiteNumber(),\n    (0, superstruct_1.string)(),\n    (0, superstruct_1.array)((0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n    (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n]);\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexports.JsonStruct = (0, superstruct_1.coerce)(exports.UnsafeJsonStruct, (0, superstruct_1.any)(), (value) => {\n    (0, assert_1.assertStruct)(value, exports.UnsafeJsonStruct);\n    return JSON.parse(JSON.stringify(value, (propKey, propValue) => {\n        // Strip __proto__ and constructor properties to prevent prototype pollution.\n        if (propKey === '__proto__' || propKey === 'constructor') {\n            return undefined;\n        }\n        return propValue;\n    }));\n});\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nfunction isValidJson(value) {\n    try {\n        getSafeJson(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexports.isValidJson = isValidJson;\n/**\n * Validate and return sanitized JSON.\n *\n * Note:\n * This function uses sanitized JsonStruct for validation\n * that applies stringify and then parse of a value provided\n * to ensure that there are no getters which can have side effects\n * that can cause security issues.\n *\n * @param value - JSON structure to be processed.\n * @returns Sanitized JSON structure.\n */\nfunction getSafeJson(value) {\n    return (0, superstruct_1.create)(value, exports.JsonStruct);\n}\nexports.getSafeJson = getSafeJson;\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nfunction getJsonSize(value) {\n    (0, assert_1.assertStruct)(value, exports.JsonStruct, 'Invalid JSON value');\n    const json = JSON.stringify(value);\n    return new TextEncoder().encode(json).byteLength;\n}\nexports.getJsonSize = getJsonSize;\n/**\n * The string '2.0'.\n */\nexports.jsonrpc2 = '2.0';\nexports.JsonRpcVersionStruct = (0, superstruct_1.literal)(exports.jsonrpc2);\nexports.JsonRpcIdStruct = (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.string)()]));\nexports.JsonRpcErrorStruct = (0, exports.object)({\n    code: (0, superstruct_1.integer)(),\n    message: (0, superstruct_1.string)(),\n    data: exactOptional(exports.JsonStruct),\n    stack: exactOptional((0, superstruct_1.string)()),\n});\nexports.JsonRpcParamsStruct = (0, superstruct_1.union)([(0, superstruct_1.record)((0, superstruct_1.string)(), exports.JsonStruct), (0, superstruct_1.array)(exports.JsonStruct)]);\nexports.JsonRpcRequestStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\nexports.JsonRpcNotificationStruct = (0, exports.object)({\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nfunction isJsonRpcNotification(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcNotificationStruct);\n}\nexports.isJsonRpcNotification = isJsonRpcNotification;\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nfunction assertIsJsonRpcNotification(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcNotificationStruct, 'Invalid JSON-RPC notification', ErrorWrapper);\n}\nexports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nfunction isJsonRpcRequest(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcRequestStruct);\n}\nexports.isJsonRpcRequest = isJsonRpcRequest;\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nfunction assertIsJsonRpcRequest(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcRequestStruct, 'Invalid JSON-RPC request', ErrorWrapper);\n}\nexports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;\nexports.PendingJsonRpcResponseStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: (0, superstruct_1.optional)((0, superstruct_1.unknown)()),\n    error: (0, superstruct_1.optional)(exports.JsonRpcErrorStruct),\n});\nexports.JsonRpcSuccessStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: exports.JsonStruct,\n});\nexports.JsonRpcFailureStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    error: exports.JsonRpcErrorStruct,\n});\nexports.JsonRpcResponseStruct = (0, superstruct_1.union)([\n    exports.JsonRpcSuccessStruct,\n    exports.JsonRpcFailureStruct,\n]);\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nfunction isPendingJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.PendingJsonRpcResponseStruct);\n}\nexports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nfunction assertIsPendingJsonRpcResponse(response, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(response, exports.PendingJsonRpcResponseStruct, 'Invalid pending JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nfunction isJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.JsonRpcResponseStruct);\n}\nexports.isJsonRpcResponse = isJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nfunction assertIsJsonRpcResponse(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcResponseStruct, 'Invalid JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nfunction isJsonRpcSuccess(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcSuccessStruct);\n}\nexports.isJsonRpcSuccess = isJsonRpcSuccess;\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nfunction assertIsJsonRpcSuccess(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcSuccessStruct, 'Invalid JSON-RPC success response', ErrorWrapper);\n}\nexports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nfunction isJsonRpcFailure(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcFailureStruct);\n}\nexports.isJsonRpcFailure = isJsonRpcFailure;\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nfunction assertIsJsonRpcFailure(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcFailureStruct, 'Invalid JSON-RPC failure response', ErrorWrapper);\n}\nexports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nfunction isJsonRpcError(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcErrorStruct);\n}\nexports.isJsonRpcError = isJsonRpcError;\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nfunction assertIsJsonRpcError(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcErrorStruct, 'Invalid JSON-RPC error', ErrorWrapper);\n}\nexports.assertIsJsonRpcError = assertIsJsonRpcError;\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nfunction getJsonRpcIdValidator(options) {\n    const { permitEmptyString, permitFractions, permitNull } = {\n        permitEmptyString: true,\n        permitFractions: false,\n        permitNull: true,\n        ...options,\n    };\n    /**\n     * Type guard for {@link JsonRpcId}.\n     *\n     * @param id - The JSON-RPC ID value to check.\n     * @returns Whether the given ID is valid per the options given to the\n     * factory.\n     */\n    const isValidJsonRpcId = (id) => {\n        return Boolean((typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n            (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n            (permitNull && id === null));\n    };\n    return isValidJsonRpcId;\n}\nexports.getJsonRpcIdValidator = getJsonRpcIdValidator;\n//# sourceMappingURL=json.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=keyring.cjs.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createModuleLogger = exports.createProjectLogger = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst globalLogger = (0, debug_1.default)('metamask');\n/**\n * Creates a logger via the `debug` library whose log messages will be tagged\n * using the name of your project. By default, such messages will be\n * suppressed, but you can reveal them by setting the `DEBUG` environment\n * variable to `metamask:<projectName>`. You can also set this variable to\n * `metamask:*` if you want to see log messages from all MetaMask projects that\n * are also using this function to create their loggers.\n *\n * @param projectName - The name of your project. This should be the name of\n * your NPM package if you're developing one.\n * @returns An instance of `debug`.\n */\nfunction createProjectLogger(projectName) {\n    return globalLogger.extend(projectName);\n}\nexports.createProjectLogger = createProjectLogger;\n/**\n * Creates a logger via the `debug` library which is derived from the logger for\n * the whole project whose log messages will be tagged using the name of your\n * module. By default, such messages will be suppressed, but you can reveal them\n * by setting the `DEBUG` environment variable to\n * `metamask:<projectName>:<moduleName>`. You can also set this variable to\n * `metamask:<projectName>:*` if you want to see log messages from the project,\n * or `metamask:*` if you want to see log messages from all MetaMask projects.\n *\n * @param projectLogger - The logger created via {@link createProjectLogger}.\n * @param moduleName - The name of your module. You could use the name of the\n * file where you're using this logger or some other name.\n * @returns An instance of `debug`.\n */\nfunction createModuleLogger(projectLogger, moduleName) {\n    return projectLogger.extend(moduleName);\n}\nexports.createModuleLogger = createModuleLogger;\n//# sourceMappingURL=logging.cjs.map","\"use strict\";\n//\n// Types\n//\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.getKnownPropertyNames = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;\n//\n// Type Guards\n//\n/**\n * A {@link NonEmptyArray} type guard.\n *\n * @template Element - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Type guard for \"nullishness\".\n *\n * @param value - Any value.\n * @returns `true` if the value is null or undefined, `false` otherwise.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nfunction isObject(value) {\n    return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\nexports.isObject = isObject;\n//\n// Other utility functions\n//\n/**\n * A type guard for ensuring an object has a property.\n *\n * @param objectToCheck - The object to check.\n * @param name - The property name to check for.\n * @returns Whether the specified object has an own property with the specified\n * name, regardless of whether it is enumerable or not.\n */\nconst hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);\nexports.hasProperty = hasProperty;\n/**\n * `Object.getOwnPropertyNames()` is intentionally generic: it returns the\n * immediate property names of an object, but it cannot make guarantees about\n * the contents of that object, so the type of the property names is merely\n * `string[]`. While this is technically accurate, it is also unnecessary if we\n * have an object with a type that we own (such as an enum).\n *\n * @param object - The plain object.\n * @returns The own property names of the object which are assigned a type\n * derived from the object itself.\n */\nfunction getKnownPropertyNames(object) {\n    return Object.getOwnPropertyNames(object);\n}\nexports.getKnownPropertyNames = getKnownPropertyNames;\n/**\n * Predefined sizes (in Bytes) of specific parts of JSON structure.\n */\nvar JsonSize;\n(function (JsonSize) {\n    JsonSize[JsonSize[\"Null\"] = 4] = \"Null\";\n    JsonSize[JsonSize[\"Comma\"] = 1] = \"Comma\";\n    JsonSize[JsonSize[\"Wrapper\"] = 1] = \"Wrapper\";\n    JsonSize[JsonSize[\"True\"] = 4] = \"True\";\n    JsonSize[JsonSize[\"False\"] = 5] = \"False\";\n    JsonSize[JsonSize[\"Quote\"] = 1] = \"Quote\";\n    JsonSize[JsonSize[\"Colon\"] = 1] = \"Colon\";\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    JsonSize[JsonSize[\"Date\"] = 24] = \"Date\";\n})(JsonSize = exports.JsonSize || (exports.JsonSize = {}));\n/**\n * Regular expression with pattern matching for (special) escaped characters.\n */\nexports.ESCAPE_CHARACTERS_REGEXP = /\"|\\\\|\\n|\\r|\\t/gu;\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nfunction isPlainObject(value) {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n    try {\n        let proto = value;\n        while (Object.getPrototypeOf(proto) !== null) {\n            proto = Object.getPrototypeOf(proto);\n        }\n        return Object.getPrototypeOf(value) === proto;\n    }\n    catch (_) {\n        return false;\n    }\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Check if character is ASCII.\n *\n * @param character - Character.\n * @returns True if a character code is ASCII, false if not.\n */\nfunction isASCII(character) {\n    return character.charCodeAt(0) <= 127;\n}\nexports.isASCII = isASCII;\n/**\n * Calculate string size.\n *\n * @param value - String value to calculate size.\n * @returns Number of bytes used to store whole string value.\n */\nfunction calculateStringSize(value) {\n    const size = value.split('').reduce((total, character) => {\n        if (isASCII(character)) {\n            return total + 1;\n        }\n        return total + 2;\n    }, 0);\n    // Also detect characters that need backslash escape\n    return size + (value.match(exports.ESCAPE_CHARACTERS_REGEXP) ?? []).length;\n}\nexports.calculateStringSize = calculateStringSize;\n/**\n * Calculate size of a number ofter JSON serialization.\n *\n * @param value - Number value to calculate size.\n * @returns Number of bytes used to store whole number in JSON.\n */\nfunction calculateNumberSize(value) {\n    return value.toString().length;\n}\nexports.calculateNumberSize = calculateNumberSize;\n//# sourceMappingURL=misc.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexToBigInt = exports.hexToNumber = exports.bigIntToHex = exports.numberToHex = void 0;\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n/**\n * Convert a number to a hexadecimal string. This verifies that the number is a\n * non-negative safe integer.\n *\n * To convert a `bigint` to a hexadecimal string instead, use\n * {@link bigIntToHex}.\n *\n * @example\n * ```typescript\n * numberToHex(0); // '0x0'\n * numberToHex(1); // '0x1'\n * numberToHex(16); // '0x10'\n * ```\n * @param value - The number to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the number is not a non-negative safe integer.\n */\nconst numberToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToHex` instead.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.numberToHex = numberToHex;\n/**\n * Convert a `bigint` to a hexadecimal string. This verifies that the `bigint`\n * is a non-negative integer.\n *\n * To convert a number to a hexadecimal string instead, use {@link numberToHex}.\n *\n * @example\n * ```typescript\n * bigIntToHex(0n); // '0x0'\n * bigIntToHex(1n); // '0x1'\n * bigIntToHex(16n); // '0x10'\n * ```\n * @param value - The `bigint` to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the `bigint` is not a non-negative integer.\n */\nconst bigIntToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative bigint.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert a hexadecimal string to a number. This verifies that the string is a\n * valid hex string, and that the resulting number is a safe integer. Both\n * \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a `bigint` instead, use\n * {@link hexToBigInt}.\n *\n * @example\n * ```typescript\n * hexToNumber('0x0'); // 0\n * hexToNumber('0x1'); // 1\n * hexToNumber('0x10'); // 16\n * ```\n * @param value - The hexadecimal string to convert to a number.\n * @returns The number.\n * @throws If the value is not a valid hexadecimal string, or if the resulting\n * number is not a safe integer.\n */\nconst hexToNumber = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // `parseInt` accepts values without the \"0x\"-prefix, whereas `Number` does\n    // not. Using this is slightly faster than `Number(add0x(value))`.\n    const numberValue = parseInt(value, 16);\n    (0, assert_1.assert)(Number.isSafeInteger(numberValue), 'Value is not a safe integer. Use `hexToBigInt` instead.');\n    return numberValue;\n};\nexports.hexToNumber = hexToNumber;\n/**\n * Convert a hexadecimal string to a `bigint`. This verifies that the string is\n * a valid hex string. Both \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a number instead, use {@link hexToNumber}.\n *\n * @example\n * ```typescript\n * hexToBigInt('0x0'); // 0n\n * hexToBigInt('0x1'); // 1n\n * hexToBigInt('0x10'); // 16n\n * ```\n * @param value - The hexadecimal string to convert to a `bigint`.\n * @returns The `bigint`.\n * @throws If the value is not a valid hexadecimal string.\n */\nconst hexToBigInt = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // The `BigInt` constructor requires the \"0x\"-prefix to parse a hex string.\n    return BigInt((0, hex_1.add0x)(value));\n};\nexports.hexToBigInt = hexToBigInt;\n//# sourceMappingURL=number.cjs.map","import { cloneDeep, keyBy } from 'lodash';\nimport createId from '../../../shared/modules/random-id';\n\nconst version = 57;\n\n/**\n * replace 'incomingTxLastFetchedBlocksByNetwork' with 'incomingTxLastFetchedBlockByChainId'\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (\n    state?.TransactionController?.transactions &&\n    Array.isArray(state.TransactionController.transactions) &&\n    !state.TransactionController.transactions.some(\n      (item) =>\n        typeof item !== 'object' || typeof item.txParams === 'undefined',\n    )\n  ) {\n    state.TransactionController.transactions = keyBy(\n      state.TransactionController.transactions,\n      // In case for some reason any of a user's transactions do not have an id\n      // generate a new one for the transaction.\n      (tx) => {\n        if (typeof tx.id === 'undefined' || tx.id === null) {\n          // This mutates the item in the array, so will result in a change to\n          // the state.\n          tx.id = createId();\n        }\n        return tx.id;\n      },\n    );\n  }\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=opaque.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDeferredPromise = void 0;\n/**\n * Create a defered Promise.\n *\n * If the Promise is rejected prior to a handler being added, this can result in an\n * `UnhandledPromiseRejection` error. Optionally this can be suppressed with the\n * `suppressUnhandledRejection` flag, as it's common to belatedly handle deferred Promises, or to\n * ignore them if they're no longer relevant (e.g. related to a cancelled request).\n *\n * However, be very careful that you have handled the Promise if you do this. Suppressing these\n * errors is dangerous, they exist for good reason. An unhandled rejection can hide errors, making\n * debugging extremely difficult. They should only be suppressed if you're confident that the\n * Promise is always handled correctly, in both the success and failure cases.\n *\n * @param args - The arguments.\n * @param args.suppressUnhandledRejection - This option adds an empty error handler\n * to the Promise to suppress the UnhandledPromiseRejection error. This can be\n * useful if the deferred Promise is sometimes intentionally not used.\n * @returns A deferred Promise.\n * @template Result - The result type of the Promise.\n */\nfunction createDeferredPromise({ suppressUnhandledRejection = false, } = {}) {\n    let resolve;\n    let reject;\n    const promise = new Promise((innerResolve, innerReject) => {\n        resolve = innerResolve;\n        reject = innerReject;\n    });\n    if (suppressUnhandledRejection) {\n        promise.catch((_error) => {\n            // This handler is used to suppress the UnhandledPromiseRejection error\n        });\n    }\n    // @ts-expect-error We know that these are assigned, but TypeScript doesn't\n    return { promise, resolve, reject };\n}\nexports.createDeferredPromise = createDeferredPromise;\n//# sourceMappingURL=promise.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */\nvar Duration;\n(function (Duration) {\n    /**\n     * A millisecond.\n     */\n    Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n    /**\n     * A second, in milliseconds.\n     */\n    Duration[Duration[\"Second\"] = 1000] = \"Second\";\n    /**\n     * A minute, in milliseconds.\n     */\n    Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n    /**\n     * An hour, in milliseconds.\n     */\n    Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n    /**\n     * A day, in milliseconds.\n     */\n    Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n    /**\n     * A week, in milliseconds.\n     */\n    Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n    /**\n     * A year, in milliseconds.\n     */\n    Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = (number) => Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name) => {\n    if (!isNonNegativeInteger(number)) {\n        throw new Error(`\"${name}\" must be a non-negative integer. Received: \"${number}\".`);\n    }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nfunction inMilliseconds(count, duration) {\n    assertIsNonNegativeInteger(count, 'count');\n    return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n    assertIsNonNegativeInteger(timestamp, 'timestamp');\n    return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;\n//# sourceMappingURL=time.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=transaction-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst semver_1 = require(\"semver\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * A struct for validating a version string.\n */\nexports.VersionStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version', (value) => {\n    if ((0, semver_1.valid)(value) === null) {\n        return `Expected SemVer version, got \"${value}\"`;\n    }\n    return true;\n});\nexports.VersionRangeStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version range', (value) => {\n    if ((0, semver_1.validRange)(value) === null) {\n        return `Expected SemVer range, got \"${value}\"`;\n    }\n    return true;\n});\n/**\n * Checks whether a SemVer version is valid.\n *\n * @param version - A potential version.\n * @returns `true` if the version is valid, and `false` otherwise.\n */\nfunction isValidSemVerVersion(version) {\n    return (0, superstruct_1.is)(version, exports.VersionStruct);\n}\nexports.isValidSemVerVersion = isValidSemVerVersion;\n/**\n * Checks whether a SemVer version range is valid.\n *\n * @param versionRange - A potential version range.\n * @returns `true` if the version range is valid, and `false` otherwise.\n */\nfunction isValidSemVerRange(versionRange) {\n    return (0, superstruct_1.is)(versionRange, exports.VersionRangeStruct);\n}\nexports.isValidSemVerRange = isValidSemVerRange;\n/**\n * Asserts that a value is a valid concrete SemVer version.\n *\n * @param version - A potential SemVer concrete version.\n */\nfunction assertIsSemVerVersion(version) {\n    (0, assert_1.assertStruct)(version, exports.VersionStruct);\n}\nexports.assertIsSemVerVersion = assertIsSemVerVersion;\n/**\n * Asserts that a value is a valid SemVer range.\n *\n * @param range - A potential SemVer range.\n */\nfunction assertIsSemVerRange(range) {\n    (0, assert_1.assertStruct)(range, exports.VersionRangeStruct);\n}\nexports.assertIsSemVerRange = assertIsSemVerRange;\n/**\n * Checks whether a SemVer version is greater than another.\n *\n * @param version1 - The left-hand version.\n * @param version2 - The right-hand version.\n * @returns `version1 > version2`.\n */\nfunction gtVersion(version1, version2) {\n    return (0, semver_1.gt)(version1, version2);\n}\nexports.gtVersion = gtVersion;\n/**\n * Checks whether a SemVer version is greater than all possibilities in a range.\n *\n * @param version - A SemvVer version.\n * @param range - The range to check against.\n * @returns `version > range`.\n */\nfunction gtRange(version, range) {\n    return (0, semver_1.gtr)(version, range);\n}\nexports.gtRange = gtRange;\n/**\n * Returns whether a SemVer version satisfies a SemVer range.\n *\n * @param version - The SemVer version to check.\n * @param versionRange - The SemVer version range to check against.\n * @returns Whether the version satisfied the version range.\n */\nfunction satisfiesVersionRange(version, versionRange) {\n    return (0, semver_1.satisfies)(version, versionRange, {\n        includePrerelease: true,\n    });\n}\nexports.satisfiesVersionRange = satisfiesVersionRange;\n//# sourceMappingURL=versions.cjs.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/types.ts\nvar PhishingDetectorResultType = /* @__PURE__ */ ((PhishingDetectorResultType2) => {\n  PhishingDetectorResultType2[\"All\"] = \"all\";\n  PhishingDetectorResultType2[\"Fuzzy\"] = \"fuzzy\";\n  PhishingDetectorResultType2[\"Blocklist\"] = \"blocklist\";\n  PhishingDetectorResultType2[\"Allowlist\"] = \"allowlist\";\n  PhishingDetectorResultType2[\"Blacklist\"] = \"blacklist\";\n  PhishingDetectorResultType2[\"Whitelist\"] = \"whitelist\";\n  PhishingDetectorResultType2[\"C2DomainBlocklist\"] = \"c2DomainBlocklist\";\n  return PhishingDetectorResultType2;\n})(PhishingDetectorResultType || {});\n\n\n\nexports.PhishingDetectorResultType = PhishingDetectorResultType;\n//# sourceMappingURL=chunk-5NDIXQG5.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/utils.ts\nvar _utils = require('@noble/hashes/utils');\nvar _sha256 = require('ethereum-cryptography/sha256');\n\n// src/PhishingController.ts\nvar _basecontroller = require('@metamask/base-controller');\nvar _controllerutils = require('@metamask/controller-utils');\nvar _ = require('punycode/');\n\n// src/PhishingDetector.ts\nvar _fastestlevenshtein = require('fastest-levenshtein');\nvar _configs, _legacyConfig, _check, check_fn;\nvar PhishingDetector = class {\n  /**\n   * Construct a phishing detector, which can check whether origins are known\n   * to be malicious or similar to common phishing targets.\n   *\n   * A list of configurations is accepted. Each origin checked is processed\n   * using each configuration in sequence, so the order defines which\n   * configurations take precedence.\n   *\n   * @param opts - Phishing detection options\n   */\n  constructor(opts) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _check);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _configs, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _legacyConfig, void 0);\n    if (Array.isArray(opts)) {\n      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _configs, processConfigs(opts));\n      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _legacyConfig, false);\n    } else {\n      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _configs, [\n        getDefaultPhishingDetectorConfig({\n          allowlist: opts.whitelist,\n          blocklist: opts.blacklist,\n          c2DomainBlocklist: opts.c2DomainBlocklist,\n          fuzzylist: opts.fuzzylist,\n          tolerance: opts.tolerance\n        })\n      ]);\n      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _legacyConfig, true);\n    }\n  }\n  /**\n   * Check if a url is known to be malicious or similar to a common phishing\n   * target. This will check the hostname and IPFS CID that is sometimes\n   * located in the path.\n   *\n   * @param url - The url to check.\n   * @returns The result of the check.\n   */\n  check(url) {\n    const result = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _check, check_fn).call(this, url);\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _legacyConfig)) {\n      let legacyType = result.type;\n      if (legacyType === \"allowlist\" /* Allowlist */) {\n        legacyType = \"whitelist\" /* Whitelist */;\n      } else if (legacyType === \"blocklist\" /* Blocklist */) {\n        legacyType = \"blacklist\" /* Blacklist */;\n      }\n      return {\n        match: result.match,\n        result: result.result,\n        type: legacyType\n      };\n    }\n    return result;\n  }\n  /**\n   * Checks if a URL is blocked against the hashed request blocklist.\n   * This is done by hashing the URL's hostname and checking it against the hashed request blocklist.\n   *\n   *\n   * @param urlString - The URL to check.\n   * @returns An object indicating if the URL is blocked and relevant metadata.\n   */\n  isMaliciousC2Domain(urlString) {\n    let hostname;\n    try {\n      hostname = new URL(urlString).hostname;\n    } catch (error) {\n      return {\n        result: false,\n        type: \"c2DomainBlocklist\" /* C2DomainBlocklist */\n      };\n    }\n    const fqdn = hostname.endsWith(\".\") ? hostname.slice(0, -1) : hostname;\n    const source = domainToParts(fqdn);\n    for (const { allowlist, name, version } of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _configs)) {\n      const allowlistMatch = matchPartsAgainstList(source, allowlist);\n      if (allowlistMatch) {\n        const match = domainPartsToDomain(allowlistMatch);\n        return {\n          match,\n          name,\n          result: false,\n          type: \"allowlist\" /* Allowlist */,\n          version: version === void 0 ? version : String(version)\n        };\n      }\n    }\n    for (const { c2DomainBlocklist, name, version } of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _configs)) {\n      const hash = sha256Hash(hostname.toLowerCase());\n      const blocked = c2DomainBlocklist?.includes(hash) ?? false;\n      if (blocked) {\n        return {\n          name,\n          result: true,\n          type: \"c2DomainBlocklist\" /* C2DomainBlocklist */,\n          version: version === void 0 ? version : String(version)\n        };\n      }\n    }\n    return {\n      result: false,\n      type: \"c2DomainBlocklist\" /* C2DomainBlocklist */\n    };\n  }\n};\n_configs = new WeakMap();\n_legacyConfig = new WeakMap();\n_check = new WeakSet();\ncheck_fn = function(url) {\n  const ipfsCidMatch = url.match(ipfsCidRegex());\n  if (ipfsCidMatch !== null) {\n    const cID = ipfsCidMatch[0];\n    for (const { blocklist, name, version } of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _configs)) {\n      const blocklistMatch = blocklist.filter((entries) => entries.length === 1).find((entries) => {\n        return entries[0] === cID;\n      });\n      if (blocklistMatch) {\n        return {\n          name,\n          match: cID,\n          result: true,\n          type: \"blocklist\" /* Blocklist */,\n          version: version === void 0 ? version : String(version)\n        };\n      }\n    }\n  }\n  let domain;\n  try {\n    domain = new URL(url).hostname;\n  } catch (error) {\n    return {\n      result: false,\n      type: \"all\" /* All */\n    };\n  }\n  const fqdn = domain.endsWith(\".\") ? domain.slice(0, -1) : domain;\n  const source = domainToParts(fqdn);\n  for (const { allowlist, name, version } of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _configs)) {\n    const allowlistMatch = matchPartsAgainstList(source, allowlist);\n    if (allowlistMatch) {\n      const match = domainPartsToDomain(allowlistMatch);\n      return {\n        match,\n        name,\n        result: false,\n        type: \"allowlist\" /* Allowlist */,\n        version: version === void 0 ? version : String(version)\n      };\n    }\n  }\n  for (const { blocklist, fuzzylist, name, tolerance, version } of _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _configs)) {\n    const blocklistMatch = matchPartsAgainstList(source, blocklist);\n    if (blocklistMatch) {\n      const match = domainPartsToDomain(blocklistMatch);\n      return {\n        match,\n        name,\n        result: true,\n        type: \"blocklist\" /* Blocklist */,\n        version: version === void 0 ? version : String(version)\n      };\n    }\n    if (tolerance > 0) {\n      let fuzzyForm = domainPartsToFuzzyForm(source);\n      fuzzyForm = fuzzyForm.replace(/^www\\./u, \"\");\n      const levenshteinMatched = fuzzylist.find((targetParts) => {\n        const fuzzyTarget = domainPartsToFuzzyForm(targetParts);\n        const dist = _fastestlevenshtein.distance.call(void 0, fuzzyForm, fuzzyTarget);\n        return dist <= tolerance;\n      });\n      if (levenshteinMatched) {\n        const match = domainPartsToDomain(levenshteinMatched);\n        return {\n          name,\n          match,\n          result: true,\n          type: \"fuzzy\" /* Fuzzy */,\n          version: version === void 0 ? version : String(version)\n        };\n      }\n    }\n  }\n  return { result: false, type: \"all\" /* All */ };\n};\nfunction ipfsCidRegex() {\n  const reg = \"Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,}\";\n  return new RegExp(reg, \"u\");\n}\n\n// src/PhishingController.ts\nvar PHISHING_CONFIG_BASE_URL = \"https://phishing-detection.api.cx.metamask.io\";\nvar METAMASK_STALELIST_FILE = \"/v1/stalelist\";\nvar METAMASK_HOTLIST_DIFF_FILE = \"/v1/diffsSince\";\nvar CLIENT_SIDE_DETECION_BASE_URL = \"https://client-side-detection.api.cx.metamask.io\";\nvar C2_DOMAIN_BLOCKLIST_ENDPOINT = \"/v1/request-blocklist\";\nvar C2_DOMAIN_BLOCKLIST_REFRESH_INTERVAL = 15 * 60;\nvar HOTLIST_REFRESH_INTERVAL = 5 * 60;\nvar STALELIST_REFRESH_INTERVAL = 30 * 24 * 60 * 60;\nvar METAMASK_STALELIST_URL = `${PHISHING_CONFIG_BASE_URL}${METAMASK_STALELIST_FILE}`;\nvar METAMASK_HOTLIST_DIFF_URL = `${PHISHING_CONFIG_BASE_URL}${METAMASK_HOTLIST_DIFF_FILE}`;\nvar C2_DOMAIN_BLOCKLIST_URL = `${CLIENT_SIDE_DETECION_BASE_URL}${C2_DOMAIN_BLOCKLIST_ENDPOINT}`;\nvar ListKeys = /* @__PURE__ */ ((ListKeys2) => {\n  ListKeys2[\"EthPhishingDetectConfig\"] = \"eth_phishing_detect_config\";\n  return ListKeys2;\n})(ListKeys || {});\nvar ListNames = /* @__PURE__ */ ((ListNames2) => {\n  ListNames2[\"MetaMask\"] = \"MetaMask\";\n  return ListNames2;\n})(ListNames || {});\nvar phishingListNameKeyMap = {\n  [\"MetaMask\" /* MetaMask */]: \"eth_phishing_detect_config\" /* EthPhishingDetectConfig */\n};\nvar phishingListKeyNameMap = {\n  [\"eth_phishing_detect_config\" /* EthPhishingDetectConfig */]: \"MetaMask\" /* MetaMask */\n};\nvar controllerName = \"PhishingController\";\nvar metadata = {\n  phishingLists: { persist: true, anonymous: false },\n  whitelist: { persist: true, anonymous: false },\n  hotlistLastFetched: { persist: true, anonymous: false },\n  stalelistLastFetched: { persist: true, anonymous: false },\n  c2DomainBlocklistLastFetched: { persist: true, anonymous: false }\n};\nvar getDefaultState = () => {\n  return {\n    phishingLists: [],\n    whitelist: [],\n    hotlistLastFetched: 0,\n    stalelistLastFetched: 0,\n    c2DomainBlocklistLastFetched: 0\n  };\n};\nvar _detector, _stalelistRefreshInterval, _hotlistRefreshInterval, _c2DomainBlocklistRefreshInterval, _inProgressHotlistUpdate, _inProgressStalelistUpdate, _isProgressC2DomainBlocklistUpdate, _registerMessageHandlers, registerMessageHandlers_fn, _updateStalelist, updateStalelist_fn, _updateHotlist, updateHotlist_fn, _updateC2DomainBlocklist, updateC2DomainBlocklist_fn, _queryConfig, queryConfig_fn;\nvar PhishingController = class extends _basecontroller.BaseController {\n  /**\n   * Construct a Phishing Controller.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param config.stalelistRefreshInterval - Polling interval used to fetch stale list.\n   * @param config.hotlistRefreshInterval - Polling interval used to fetch hotlist diff list.\n   * @param config.c2DomainBlocklistRefreshInterval - Polling interval used to fetch c2 domain blocklist.\n   * @param config.messenger - The controller restricted messenger.\n   * @param config.state - Initial state to set on this controller.\n   */\n  constructor({\n    stalelistRefreshInterval = STALELIST_REFRESH_INTERVAL,\n    hotlistRefreshInterval = HOTLIST_REFRESH_INTERVAL,\n    c2DomainBlocklistRefreshInterval = C2_DOMAIN_BLOCKLIST_REFRESH_INTERVAL,\n    messenger,\n    state = {}\n  }) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultState(),\n        ...state\n      }\n    });\n    /**\n     * Constructor helper for registering this controller's messaging system\n     * actions.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _registerMessageHandlers);\n    /**\n     * Update the stalelist configuration.\n     *\n     * This should only be called from the `updateStalelist` function, which is a wrapper around\n     * this function that prevents redundant configuration updates.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateStalelist);\n    /**\n     * Update the stalelist configuration.\n     *\n     * This should only be called from the `updateStalelist` function, which is a wrapper around\n     * this function that prevents redundant configuration updates.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateHotlist);\n    /**\n     * Update the C2 domain blocklist.\n     *\n     * This should only be called from the `updateC2DomainBlocklist` function, which is a wrapper around\n     * this function that prevents redundant configuration updates.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateC2DomainBlocklist);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _queryConfig);\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _detector, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _stalelistRefreshInterval, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _hotlistRefreshInterval, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _c2DomainBlocklistRefreshInterval, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _inProgressHotlistUpdate, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _inProgressStalelistUpdate, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isProgressC2DomainBlocklistUpdate, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _stalelistRefreshInterval, stalelistRefreshInterval);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _hotlistRefreshInterval, hotlistRefreshInterval);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _c2DomainBlocklistRefreshInterval, c2DomainBlocklistRefreshInterval);\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _registerMessageHandlers, registerMessageHandlers_fn).call(this);\n    this.updatePhishingDetector();\n  }\n  /**\n   * Updates this.detector with an instance of PhishingDetector using the current state.\n   */\n  updatePhishingDetector() {\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _detector, new PhishingDetector(this.state.phishingLists));\n  }\n  /**\n   * Set the interval at which the stale phishing list will be refetched.\n   * Fetching will only occur on the next call to test/bypass.\n   * For immediate update to the phishing list, call {@link updateStalelist} directly.\n   *\n   * @param interval - the new interval, in ms.\n   */\n  setStalelistRefreshInterval(interval) {\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _stalelistRefreshInterval, interval);\n  }\n  /**\n   * Set the interval at which the hot list will be refetched.\n   * Fetching will only occur on the next call to test/bypass.\n   * For immediate update to the phishing list, call {@link updateHotlist} directly.\n   *\n   * @param interval - the new interval, in ms.\n   */\n  setHotlistRefreshInterval(interval) {\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _hotlistRefreshInterval, interval);\n  }\n  /**\n   * Set the interval at which the C2 domain blocklist will be refetched.\n   * Fetching will only occur on the next call to test/bypass.\n   * For immediate update to the phishing list, call {@link updateHotlist} directly.\n   *\n   * @param interval - the new interval, in ms.\n   */\n  setC2DomainBlocklistRefreshInterval(interval) {\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _c2DomainBlocklistRefreshInterval, interval);\n  }\n  /**\n   * Determine if an update to the stalelist configuration is needed.\n   *\n   * @returns Whether an update is needed\n   */\n  isStalelistOutOfDate() {\n    return fetchTimeNow() - this.state.stalelistLastFetched >= _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _stalelistRefreshInterval);\n  }\n  /**\n   * Determine if an update to the hotlist configuration is needed.\n   *\n   * @returns Whether an update is needed\n   */\n  isHotlistOutOfDate() {\n    return fetchTimeNow() - this.state.hotlistLastFetched >= _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _hotlistRefreshInterval);\n  }\n  /**\n   * Determine if an update to the C2 domain blocklist is needed.\n   *\n   * @returns Whether an update is needed\n   */\n  isC2DomainBlocklistOutOfDate() {\n    return fetchTimeNow() - this.state.c2DomainBlocklistLastFetched >= _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _c2DomainBlocklistRefreshInterval);\n  }\n  /**\n   * Conditionally update the phishing configuration.\n   *\n   * If the stalelist configuration is out of date, this function will call `updateStalelist`\n   * to update the configuration. This will automatically grab the hotlist,\n   * so it isn't necessary to continue on to download the hotlist and the c2 domain blocklist.\n   *\n   */\n  async maybeUpdateState() {\n    const staleListOutOfDate = this.isStalelistOutOfDate();\n    if (staleListOutOfDate) {\n      await this.updateStalelist();\n      return;\n    }\n    const hotlistOutOfDate = this.isHotlistOutOfDate();\n    if (hotlistOutOfDate) {\n      await this.updateHotlist();\n    }\n    const c2DomainBlocklistOutOfDate = this.isC2DomainBlocklistOutOfDate();\n    if (c2DomainBlocklistOutOfDate) {\n      await this.updateC2DomainBlocklist();\n    }\n  }\n  /**\n   * Determines if a given origin is unapproved.\n   *\n   * It is strongly recommended that you call {@link maybeUpdateState} before calling this,\n   * to check whether the phishing configuration is up-to-date. It will be updated if necessary\n   * by calling {@link updateStalelist} or {@link updateHotlist}.\n   *\n   * @param origin - Domain origin of a website.\n   * @returns Whether the origin is an unapproved origin.\n   */\n  test(origin) {\n    const punycodeOrigin = _.toASCII.call(void 0, origin);\n    const hostname = getHostnameFromUrl(punycodeOrigin);\n    if (this.state.whitelist.includes(hostname || punycodeOrigin)) {\n      return { result: false, type: \"all\" /* All */ };\n    }\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _detector).check(punycodeOrigin);\n  }\n  /**\n   * Checks if a request URL's domain is blocked against the request blocklist.\n   *\n   * This method is used to determine if a specific request URL is associated with a malicious\n   * command and control (C2) domain. The URL's hostname is hashed and checked against a configured\n   * blocklist of known malicious domains.\n   *\n   * @param origin - The full request URL to be checked.\n   * @returns An object indicating whether the URL's domain is blocked and relevant metadata.\n   */\n  isBlockedRequest(origin) {\n    const punycodeOrigin = _.toASCII.call(void 0, origin);\n    const hostname = getHostnameFromUrl(punycodeOrigin);\n    if (this.state.whitelist.includes(hostname || punycodeOrigin)) {\n      return { result: false, type: \"all\" /* All */ };\n    }\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _detector).isMaliciousC2Domain(punycodeOrigin);\n  }\n  /**\n   * Temporarily marks a given origin as approved.\n   *\n   * @param origin - The origin to mark as approved.\n   */\n  bypass(origin) {\n    const punycodeOrigin = _.toASCII.call(void 0, origin);\n    const hostname = getHostnameFromUrl(punycodeOrigin);\n    const { whitelist } = this.state;\n    if (whitelist.includes(hostname || punycodeOrigin)) {\n      return;\n    }\n    this.update((draftState) => {\n      draftState.whitelist.push(hostname || punycodeOrigin);\n    });\n  }\n  /**\n   * Update the C2 domain blocklist.\n   *\n   * If an update is in progress, no additional update will be made. Instead this will wait until\n   * the in-progress update has finished.\n   */\n  async updateC2DomainBlocklist() {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isProgressC2DomainBlocklistUpdate)) {\n      await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isProgressC2DomainBlocklistUpdate);\n      return;\n    }\n    try {\n      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isProgressC2DomainBlocklistUpdate, _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateC2DomainBlocklist, updateC2DomainBlocklist_fn).call(this));\n      await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _isProgressC2DomainBlocklistUpdate);\n    } finally {\n      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _isProgressC2DomainBlocklistUpdate, void 0);\n    }\n  }\n  /**\n   * Update the hotlist.\n   *\n   * If an update is in progress, no additional update will be made. Instead this will wait until\n   * the in-progress update has finished.\n   */\n  async updateHotlist() {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _inProgressHotlistUpdate)) {\n      await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _inProgressHotlistUpdate);\n      return;\n    }\n    try {\n      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _inProgressHotlistUpdate, _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateHotlist, updateHotlist_fn).call(this));\n      await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _inProgressHotlistUpdate);\n    } finally {\n      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _inProgressHotlistUpdate, void 0);\n    }\n  }\n  /**\n   * Update the stalelist.\n   *\n   * If an update is in progress, no additional update will be made. Instead this will wait until\n   * the in-progress update has finished.\n   */\n  async updateStalelist() {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _inProgressStalelistUpdate)) {\n      await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _inProgressStalelistUpdate);\n      return;\n    }\n    try {\n      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _inProgressStalelistUpdate, _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateStalelist, updateStalelist_fn).call(this));\n      await _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _inProgressStalelistUpdate);\n    } finally {\n      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _inProgressStalelistUpdate, void 0);\n    }\n  }\n};\n_detector = new WeakMap();\n_stalelistRefreshInterval = new WeakMap();\n_hotlistRefreshInterval = new WeakMap();\n_c2DomainBlocklistRefreshInterval = new WeakMap();\n_inProgressHotlistUpdate = new WeakMap();\n_inProgressStalelistUpdate = new WeakMap();\n_isProgressC2DomainBlocklistUpdate = new WeakMap();\n_registerMessageHandlers = new WeakSet();\nregisterMessageHandlers_fn = function() {\n  this.messagingSystem.registerActionHandler(\n    `${controllerName}:maybeUpdateState`,\n    this.maybeUpdateState.bind(this)\n  );\n  this.messagingSystem.registerActionHandler(\n    `${controllerName}:testOrigin`,\n    this.test.bind(this)\n  );\n};\n_updateStalelist = new WeakSet();\nupdateStalelist_fn = async function() {\n  let stalelistResponse = null;\n  let hotlistDiffsResponse = null;\n  let c2DomainBlocklistResponse = null;\n  try {\n    const stalelistPromise = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _queryConfig, queryConfig_fn).call(this, METAMASK_STALELIST_URL);\n    const c2DomainBlocklistPromise = _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _queryConfig, queryConfig_fn).call(this, C2_DOMAIN_BLOCKLIST_URL);\n    [stalelistResponse, c2DomainBlocklistResponse] = await Promise.all([\n      stalelistPromise,\n      c2DomainBlocklistPromise\n    ]);\n    if (stalelistResponse?.data && stalelistResponse.data.lastUpdated > 0) {\n      hotlistDiffsResponse = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _queryConfig, queryConfig_fn).call(this, `${METAMASK_HOTLIST_DIFF_URL}/${stalelistResponse.data.lastUpdated}`);\n    }\n  } finally {\n    const timeNow = fetchTimeNow();\n    this.update((draftState) => {\n      draftState.stalelistLastFetched = timeNow;\n      draftState.hotlistLastFetched = timeNow;\n      draftState.c2DomainBlocklistLastFetched = timeNow;\n    });\n  }\n  if (!stalelistResponse || !hotlistDiffsResponse) {\n    return;\n  }\n  const { eth_phishing_detect_config, ...partialState } = stalelistResponse.data;\n  const metamaskListState = {\n    ...eth_phishing_detect_config,\n    ...partialState,\n    c2DomainBlocklist: c2DomainBlocklistResponse ? c2DomainBlocklistResponse.recentlyAdded : [],\n    name: phishingListKeyNameMap.eth_phishing_detect_config\n  };\n  const newMetaMaskListState = applyDiffs(\n    metamaskListState,\n    hotlistDiffsResponse.data,\n    \"eth_phishing_detect_config\" /* EthPhishingDetectConfig */\n  );\n  this.update((draftState) => {\n    draftState.phishingLists = [newMetaMaskListState];\n  });\n  this.updatePhishingDetector();\n};\n_updateHotlist = new WeakSet();\nupdateHotlist_fn = async function() {\n  const lastDiffTimestamp = Math.max(\n    ...this.state.phishingLists.map(({ lastUpdated }) => lastUpdated)\n  );\n  let hotlistResponse;\n  try {\n    hotlistResponse = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _queryConfig, queryConfig_fn).call(this, `${METAMASK_HOTLIST_DIFF_URL}/${lastDiffTimestamp}`);\n  } finally {\n    this.update((draftState) => {\n      draftState.hotlistLastFetched = fetchTimeNow();\n    });\n  }\n  if (!hotlistResponse?.data) {\n    return;\n  }\n  const hotlist = hotlistResponse.data;\n  const newPhishingLists = this.state.phishingLists.map((phishingList) => {\n    const updatedList = applyDiffs(\n      phishingList,\n      hotlist,\n      phishingListNameKeyMap[phishingList.name],\n      [],\n      []\n    );\n    return updatedList;\n  });\n  this.update((draftState) => {\n    draftState.phishingLists = newPhishingLists;\n  });\n  this.updatePhishingDetector();\n};\n_updateC2DomainBlocklist = new WeakSet();\nupdateC2DomainBlocklist_fn = async function() {\n  let c2DomainBlocklistResponse = null;\n  try {\n    c2DomainBlocklistResponse = await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _queryConfig, queryConfig_fn).call(this, `${C2_DOMAIN_BLOCKLIST_URL}?timestamp=${roundToNearestMinute(\n      this.state.c2DomainBlocklistLastFetched\n    )}`);\n  } finally {\n    this.update((draftState) => {\n      draftState.c2DomainBlocklistLastFetched = fetchTimeNow();\n    });\n  }\n  if (!c2DomainBlocklistResponse) {\n    return;\n  }\n  const recentlyAddedC2Domains = c2DomainBlocklistResponse.recentlyAdded;\n  const recentlyRemovedC2Domains = c2DomainBlocklistResponse.recentlyRemoved;\n  const newPhishingLists = this.state.phishingLists.map((phishingList) => {\n    const updatedList = applyDiffs(\n      phishingList,\n      [],\n      phishingListNameKeyMap[phishingList.name],\n      recentlyAddedC2Domains,\n      recentlyRemovedC2Domains\n    );\n    return updatedList;\n  });\n  this.update((draftState) => {\n    draftState.phishingLists = newPhishingLists;\n  });\n  this.updatePhishingDetector();\n};\n_queryConfig = new WeakSet();\nqueryConfig_fn = async function(input) {\n  const response = await _controllerutils.safelyExecute.call(void 0, \n    () => fetch(input, { cache: \"no-cache\" }),\n    true\n  );\n  switch (response?.status) {\n    case 200: {\n      return await response.json();\n    }\n    default: {\n      return null;\n    }\n  }\n};\nvar PhishingController_default = PhishingController;\n\n// src/utils.ts\nvar DEFAULT_TOLERANCE = 3;\nvar fetchTimeNow = () => Math.round(Date.now() / 1e3);\nfunction roundToNearestMinute(unixTimestamp) {\n  return Math.floor(unixTimestamp / 60) * 60;\n}\nvar splitStringByPeriod = (stringToSplit) => {\n  const periodIndex = stringToSplit.indexOf(\".\");\n  return [\n    stringToSplit.slice(0, periodIndex),\n    stringToSplit.slice(periodIndex + 1)\n  ];\n};\nvar applyDiffs = (listState, hotlistDiffs, listKey, recentlyAddedC2Domains = [], recentlyRemovedC2Domains = []) => {\n  const diffsToApply = hotlistDiffs.filter(\n    ({ timestamp, targetList }) => timestamp > listState.lastUpdated && splitStringByPeriod(targetList)[0] === listKey\n  );\n  let latestDiffTimestamp = listState.lastUpdated;\n  const listSets = {\n    allowlist: new Set(listState.allowlist),\n    blocklist: new Set(listState.blocklist),\n    fuzzylist: new Set(listState.fuzzylist),\n    c2DomainBlocklist: new Set(listState.c2DomainBlocklist)\n  };\n  for (const { isRemoval, targetList, url, timestamp } of diffsToApply) {\n    const targetListType = splitStringByPeriod(targetList)[1];\n    if (timestamp > latestDiffTimestamp) {\n      latestDiffTimestamp = timestamp;\n    }\n    if (isRemoval) {\n      listSets[targetListType].delete(url);\n    } else {\n      listSets[targetListType].add(url);\n    }\n  }\n  if (listKey === \"eth_phishing_detect_config\" /* EthPhishingDetectConfig */) {\n    for (const hash of recentlyAddedC2Domains) {\n      listSets.c2DomainBlocklist.add(hash);\n    }\n    for (const hash of recentlyRemovedC2Domains) {\n      listSets.c2DomainBlocklist.delete(hash);\n    }\n  }\n  return {\n    c2DomainBlocklist: Array.from(listSets.c2DomainBlocklist),\n    allowlist: Array.from(listSets.allowlist),\n    blocklist: Array.from(listSets.blocklist),\n    fuzzylist: Array.from(listSets.fuzzylist),\n    version: listState.version,\n    name: phishingListKeyNameMap[listKey],\n    tolerance: listState.tolerance,\n    lastUpdated: latestDiffTimestamp\n  };\n};\nfunction validateConfig(config) {\n  if (config === null || typeof config !== \"object\") {\n    throw new Error(\"Invalid config\");\n  }\n  if (\"tolerance\" in config && !(\"fuzzylist\" in config)) {\n    throw new Error(\"Fuzzylist tolerance provided without fuzzylist\");\n  }\n  if (\"name\" in config && (typeof config.name !== \"string\" || config.name === \"\")) {\n    throw new Error(\"Invalid config parameter: 'name'\");\n  }\n  if (\"version\" in config && (![\"number\", \"string\"].includes(typeof config.version) || config.version === \"\")) {\n    throw new Error(\"Invalid config parameter: 'version'\");\n  }\n}\nvar domainToParts = (domain) => {\n  try {\n    return domain.split(\".\").reverse();\n  } catch (e) {\n    throw new Error(JSON.stringify(domain));\n  }\n};\nvar processDomainList = (list) => {\n  return list.map(domainToParts);\n};\nvar getDefaultPhishingDetectorConfig = ({\n  allowlist = [],\n  blocklist = [],\n  fuzzylist = [],\n  tolerance = DEFAULT_TOLERANCE\n}) => ({\n  allowlist: processDomainList(allowlist),\n  blocklist: processDomainList(blocklist),\n  fuzzylist: processDomainList(fuzzylist),\n  tolerance\n});\nvar processConfigs = (configs = []) => {\n  return configs.map((config) => {\n    validateConfig(config);\n    return { ...config, ...getDefaultPhishingDetectorConfig(config) };\n  });\n};\nvar domainPartsToDomain = (domainParts) => {\n  return domainParts.slice().reverse().join(\".\");\n};\nvar domainPartsToFuzzyForm = (domainParts) => {\n  return domainParts.slice(1).reverse().join(\".\");\n};\nvar matchPartsAgainstList = (source, list) => {\n  return list.find((target) => {\n    if (target.length > source.length) {\n      return false;\n    }\n    return target.every((part, index) => source[index] === part);\n  });\n};\nvar sha256Hash = (hostname) => {\n  const hashBuffer = _sha256.sha256.call(void 0, new TextEncoder().encode(hostname.toLowerCase()));\n  return _utils.bytesToHex.call(void 0, hashBuffer);\n};\nvar getHostnameFromUrl = (url) => {\n  let hostname;\n  try {\n    hostname = new URL(url).hostname;\n  } catch (error) {\n    return null;\n  }\n  return hostname;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexports.fetchTimeNow = fetchTimeNow; exports.roundToNearestMinute = roundToNearestMinute; exports.applyDiffs = applyDiffs; exports.validateConfig = validateConfig; exports.domainToParts = domainToParts; exports.processDomainList = processDomainList; exports.getDefaultPhishingDetectorConfig = getDefaultPhishingDetectorConfig; exports.processConfigs = processConfigs; exports.domainPartsToDomain = domainPartsToDomain; exports.domainPartsToFuzzyForm = domainPartsToFuzzyForm; exports.matchPartsAgainstList = matchPartsAgainstList; exports.sha256Hash = sha256Hash; exports.getHostnameFromUrl = getHostnameFromUrl; exports.PhishingDetector = PhishingDetector; exports.PHISHING_CONFIG_BASE_URL = PHISHING_CONFIG_BASE_URL; exports.METAMASK_STALELIST_FILE = METAMASK_STALELIST_FILE; exports.METAMASK_HOTLIST_DIFF_FILE = METAMASK_HOTLIST_DIFF_FILE; exports.CLIENT_SIDE_DETECION_BASE_URL = CLIENT_SIDE_DETECION_BASE_URL; exports.C2_DOMAIN_BLOCKLIST_ENDPOINT = C2_DOMAIN_BLOCKLIST_ENDPOINT; exports.C2_DOMAIN_BLOCKLIST_REFRESH_INTERVAL = C2_DOMAIN_BLOCKLIST_REFRESH_INTERVAL; exports.HOTLIST_REFRESH_INTERVAL = HOTLIST_REFRESH_INTERVAL; exports.STALELIST_REFRESH_INTERVAL = STALELIST_REFRESH_INTERVAL; exports.METAMASK_STALELIST_URL = METAMASK_STALELIST_URL; exports.METAMASK_HOTLIST_DIFF_URL = METAMASK_HOTLIST_DIFF_URL; exports.C2_DOMAIN_BLOCKLIST_URL = C2_DOMAIN_BLOCKLIST_URL; exports.ListKeys = ListKeys; exports.ListNames = ListNames; exports.phishingListKeyNameMap = phishingListKeyNameMap; exports.PhishingController = PhishingController; exports.PhishingController_default = PhishingController_default;\n//# sourceMappingURL=chunk-ZAOBCAQT.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _chunkZAOBCAQTjs = require('./chunk-ZAOBCAQT.js');\n\n\nvar _chunk5NDIXQG5js = require('./chunk-5NDIXQG5.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexports.C2_DOMAIN_BLOCKLIST_ENDPOINT = _chunkZAOBCAQTjs.C2_DOMAIN_BLOCKLIST_ENDPOINT; exports.C2_DOMAIN_BLOCKLIST_REFRESH_INTERVAL = _chunkZAOBCAQTjs.C2_DOMAIN_BLOCKLIST_REFRESH_INTERVAL; exports.C2_DOMAIN_BLOCKLIST_URL = _chunkZAOBCAQTjs.C2_DOMAIN_BLOCKLIST_URL; exports.CLIENT_SIDE_DETECION_BASE_URL = _chunkZAOBCAQTjs.CLIENT_SIDE_DETECION_BASE_URL; exports.HOTLIST_REFRESH_INTERVAL = _chunkZAOBCAQTjs.HOTLIST_REFRESH_INTERVAL; exports.ListKeys = _chunkZAOBCAQTjs.ListKeys; exports.ListNames = _chunkZAOBCAQTjs.ListNames; exports.METAMASK_HOTLIST_DIFF_FILE = _chunkZAOBCAQTjs.METAMASK_HOTLIST_DIFF_FILE; exports.METAMASK_HOTLIST_DIFF_URL = _chunkZAOBCAQTjs.METAMASK_HOTLIST_DIFF_URL; exports.METAMASK_STALELIST_FILE = _chunkZAOBCAQTjs.METAMASK_STALELIST_FILE; exports.METAMASK_STALELIST_URL = _chunkZAOBCAQTjs.METAMASK_STALELIST_URL; exports.PHISHING_CONFIG_BASE_URL = _chunkZAOBCAQTjs.PHISHING_CONFIG_BASE_URL; exports.PhishingController = _chunkZAOBCAQTjs.PhishingController; exports.PhishingDetector = _chunkZAOBCAQTjs.PhishingDetector; exports.PhishingDetectorResultType = _chunk5NDIXQG5js.PhishingDetectorResultType; exports.STALELIST_REFRESH_INTERVAL = _chunkZAOBCAQTjs.STALELIST_REFRESH_INTERVAL; exports.phishingListKeyNameMap = _chunkZAOBCAQTjs.phishingListKeyNameMap;\n//# sourceMappingURL=index.js.map","import { cloneDeep } from 'lodash';\n\nconst version = 58;\n\n/**\n * Deletes the swapsWelcomeMessageHasBeenShown property from state\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  delete state.AppStateController?.swapsWelcomeMessageHasBeenShown;\n\n  return state;\n}\n","import {\n  cloneDeep,\n  concat,\n  groupBy,\n  keyBy,\n  pickBy,\n  isPlainObject,\n} from 'lodash';\nimport { TransactionType } from '@metamask/transaction-controller';\n\nconst version = 59;\n\n/**\n * Removes orphaned cancel and retry transactions that no longer have the\n * original transaction in state, which results in bugs.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const transactions = state?.TransactionController?.transactions;\n  if (isPlainObject(transactions)) {\n    const nonceNetworkGroupedObject = groupBy(\n      Object.values(transactions),\n      (tx) => {\n        return `${tx.txParams?.nonce}-${tx.chainId ?? tx.metamaskNetworkId}`;\n      },\n    );\n\n    const withoutOrphans = pickBy(nonceNetworkGroupedObject, (group) => {\n      return group.some(\n        (tx) =>\n          tx.type !== TransactionType.cancel &&\n          tx.type !== TransactionType.retry,\n      );\n    });\n    state.TransactionController.transactions = keyBy(\n      concat(...Object.values(withoutOrphans)),\n      (tx) => tx.id,\n    );\n  }\n\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PPOMController = exports.NETWORK_CACHE_DURATION = void 0;\nvar ppom_controller_1 = require(\"./ppom-controller\");\nObject.defineProperty(exports, \"NETWORK_CACHE_DURATION\", { enumerable: true, get: function () { return ppom_controller_1.NETWORK_CACHE_DURATION; } });\nObject.defineProperty(exports, \"PPOMController\", { enumerable: true, get: function () { return ppom_controller_1.PPOMController; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _PPOMController_instances, _PPOMController_ppom, _PPOMController_provider, _PPOMController_storage, _PPOMController_ppomMutex, _PPOMController_ppomProvider, _PPOMController_cdnBaseUrl, _PPOMController_providerRequestLimit, _PPOMController_providerRequests, _PPOMController_chainId, _PPOMController_securityAlertsEnabled, _PPOMController_providerRequestsCount, _PPOMController_blockaidPublicKey, _PPOMController_ppomInitialised, _PPOMController_nativeCrypto, _PPOMController_initialisePPOM, _PPOMController_resetToInactiveState, _PPOMController_onNetworkChange, _PPOMController_onPreferenceChange, _PPOMController_registerMessageHandlers, _PPOMController_subscribeMessageEvents, _PPOMController_resetPPOM, _PPOMController_initPPOMIfRequired, _PPOMController_updateVersionInfo, _PPOMController_checkFilePresentInStorage, _PPOMController_getAllFiles, _PPOMController_getFile, _PPOMController_getAPIResponse, _PPOMController_fetchVersionInfo, _PPOMController_fetchBlob, _PPOMController_jsonRpcRequest, _PPOMController_getPPOM;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PPOMController = exports.NETWORK_CACHE_DURATION = void 0;\nconst base_controller_1 = require(\"@metamask/base-controller\");\nconst controller_utils_1 = require(\"@metamask/controller-utils\");\nconst rpc_errors_1 = require(\"@metamask/rpc-errors\");\nconst await_semaphore_1 = require(\"await-semaphore\");\nconst ppom_storage_1 = require(\"./ppom-storage\");\nconst util_1 = require(\"./util\");\nconst PROVIDER_REQUEST_LIMIT = 300;\nexports.NETWORK_CACHE_DURATION = 1000 * 60 * 60 * 24 * 7;\n// The following methods on provider are allowed to PPOM\nconst ALLOWED_PROVIDER_CALLS = [\n    'eth_call',\n    'eth_blockNumber',\n    'eth_createAccessList',\n    'eth_getLogs',\n    'eth_getFilterLogs',\n    'eth_getTransactionByHash',\n    'eth_chainId',\n    'eth_getBlockByHash',\n    'eth_getBlockByNumber',\n    'eth_getCode',\n    'eth_getStorageAt',\n    'eth_getBalance',\n    'eth_getTransactionCount',\n    'trace_call',\n    'trace_callMany',\n    'debug_traceCall',\n    'trace_filter',\n];\nconst stateMetaData = {\n    versionInfo: { persist: true, anonymous: false },\n    storageMetadata: { persist: true, anonymous: false },\n};\nconst PPOM_VERSION_FILE_NAME = 'ppom_version.json';\nconst controllerName = 'PPOMController';\nconst versionInfoFileHeaders = {\n    headers: {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        'Content-Type': 'application/json',\n    },\n};\n/**\n * PPOMController\n * Controller responsible for managing the PPOM\n *\n * @property config - The controller configuration\n * @property state - The controller state\n * @property storage - The controller storage\n * @property ppom - The PPOM instance\n * @property provider - The provider used to create the PPOM instance\n */\nclass PPOMController extends base_controller_1.BaseController {\n    /**\n     * Creates a PPOMController instance.\n     *\n     * @param options - Constructor options.\n     * @param options.chainId - ChainId of the selected network.\n     * @param options.messenger - Controller messenger.\n     * @param options.provider - The provider used to create the PPOM instance.\n     * @param options.storageBackend - The storage backend to use for storing PPOM data.\n     * @param options.securityAlertsEnabled - True if user has enabled preference for blockaid security check.\n     * @param options.onPreferencesChange - Callback invoked when user changes preferences.\n     * @param options.ppomProvider - Object wrapping PPOM.\n     * @param options.cdnBaseUrl - Base URL for the CDN.\n     * @param options.providerRequestLimit - Limit of number of requests that can be sent to provider per transaction.\n     * @param options.dataUpdateDuration - Duration after which data is fetched again.\n     * @param options.fileFetchScheduleDuration - Duration after which next data file is fetched.\n     * @param options.state - Initial state of the controller.\n     * @param options.blockaidPublicKey - Public key of blockaid for verifying signatures of data files.\n     * @param options.nativeCrypto - Native implementation of crypto hashing function.\n     * This is useful to leverage faster native crypto implementation on devices.\n     * @returns The PPOMController instance.\n     */\n    constructor({ chainId, messenger, provider, storageBackend, securityAlertsEnabled, onPreferencesChange, ppomProvider, cdnBaseUrl, providerRequestLimit, state, blockaidPublicKey, nativeCrypto, }) {\n        const initialState = {\n            versionInfo: state?.versionInfo ?? [],\n            storageMetadata: state?.storageMetadata ?? [],\n        };\n        super({\n            name: controllerName,\n            metadata: stateMetaData,\n            messenger,\n            state: initialState,\n        });\n        _PPOMController_instances.add(this);\n        _PPOMController_ppom.set(this, void 0);\n        _PPOMController_provider.set(this, void 0);\n        _PPOMController_storage.set(this, void 0);\n        /*\n         * This mutex is used to prevent concurrent usage of the PPOM instance\n         * and protect the PPOM instance from being used while it is being initialized/updated\n         */\n        _PPOMController_ppomMutex.set(this, void 0);\n        _PPOMController_ppomProvider.set(this, void 0);\n        // base URL of the CDN\n        _PPOMController_cdnBaseUrl.set(this, void 0);\n        // Limit of number of requests ppom can send to the provider per transaction\n        _PPOMController_providerRequestLimit.set(this, void 0);\n        // Number of requests sent to provider by ppom for current transaction\n        _PPOMController_providerRequests.set(this, 0);\n        // id of current chain selected\n        _PPOMController_chainId.set(this, void 0);\n        // true if user has enabled preference for blockaid security check\n        _PPOMController_securityAlertsEnabled.set(this, void 0);\n        // Map of count of each provider request call\n        _PPOMController_providerRequestsCount.set(this, {});\n        _PPOMController_blockaidPublicKey.set(this, void 0);\n        _PPOMController_ppomInitialised.set(this, false);\n        _PPOMController_nativeCrypto.set(this, undefined);\n        __classPrivateFieldSet(this, _PPOMController_chainId, (0, util_1.addHexPrefix)(chainId), \"f\");\n        __classPrivateFieldSet(this, _PPOMController_provider, provider, \"f\");\n        __classPrivateFieldSet(this, _PPOMController_ppomProvider, ppomProvider, \"f\");\n        __classPrivateFieldSet(this, _PPOMController_storage, new ppom_storage_1.PPOMStorage({\n            storageBackend,\n            readMetadata: () => {\n                return [...this.state.storageMetadata];\n            },\n            writeMetadata: (metadata) => {\n                this.update((draftState) => {\n                    draftState.storageMetadata = metadata;\n                });\n            },\n        }), \"f\");\n        __classPrivateFieldSet(this, _PPOMController_ppomMutex, new await_semaphore_1.Mutex(), \"f\");\n        __classPrivateFieldSet(this, _PPOMController_cdnBaseUrl, cdnBaseUrl, \"f\");\n        __classPrivateFieldSet(this, _PPOMController_providerRequestLimit, providerRequestLimit ?? PROVIDER_REQUEST_LIMIT, \"f\");\n        __classPrivateFieldSet(this, _PPOMController_securityAlertsEnabled, securityAlertsEnabled, \"f\");\n        __classPrivateFieldSet(this, _PPOMController_blockaidPublicKey, blockaidPublicKey, \"f\");\n        __classPrivateFieldSet(this, _PPOMController_nativeCrypto, nativeCrypto, \"f\");\n        // enable / disable PPOM validations as user changes preferences\n        onPreferencesChange(__classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_onPreferenceChange).bind(this));\n        // register message handlers\n        __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_registerMessageHandlers).call(this);\n        // subscribe to events\n        __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_subscribeMessageEvents).call(this);\n    }\n    /**\n     * Use the PPOM.\n     * This function receives a callback that will be called with the PPOM.\n     *\n     * @param callback - Callback to be invoked with PPOM.\n     * @param chainId - ChainId of confirmation.\n     */\n    async usePPOM(callback, chainId) {\n        const chainIdForRequest = chainId ?? __classPrivateFieldGet(this, _PPOMController_chainId, \"f\");\n        if (!__classPrivateFieldGet(this, _PPOMController_securityAlertsEnabled, \"f\")) {\n            throw Error('User has securityAlertsEnabled set to false');\n        }\n        if (!(0, util_1.blockaidValidationSupportedForNetwork)(chainIdForRequest)) {\n            throw Error(`Blockaid validation not available on network with chainId: ${chainIdForRequest}`);\n        }\n        return await __classPrivateFieldGet(this, _PPOMController_ppomMutex, \"f\").use(async () => {\n            const ppom = await __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_initPPOMIfRequired).call(this, chainIdForRequest);\n            __classPrivateFieldSet(this, _PPOMController_providerRequests, 0, \"f\");\n            __classPrivateFieldSet(this, _PPOMController_providerRequestsCount, {}, \"f\");\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const result = await callback(ppom);\n            return {\n                ...result,\n                // we are destructuring the object below as this will be used outside the controller\n                // we want to avoid possibility of outside code changing an instance variable.\n                providerRequestsCount: { ...__classPrivateFieldGet(this, _PPOMController_providerRequestsCount, \"f\") },\n            };\n        });\n    }\n}\nexports.PPOMController = PPOMController;\n_PPOMController_ppom = new WeakMap(), _PPOMController_provider = new WeakMap(), _PPOMController_storage = new WeakMap(), _PPOMController_ppomMutex = new WeakMap(), _PPOMController_ppomProvider = new WeakMap(), _PPOMController_cdnBaseUrl = new WeakMap(), _PPOMController_providerRequestLimit = new WeakMap(), _PPOMController_providerRequests = new WeakMap(), _PPOMController_chainId = new WeakMap(), _PPOMController_securityAlertsEnabled = new WeakMap(), _PPOMController_providerRequestsCount = new WeakMap(), _PPOMController_blockaidPublicKey = new WeakMap(), _PPOMController_ppomInitialised = new WeakMap(), _PPOMController_nativeCrypto = new WeakMap(), _PPOMController_instances = new WeakSet(), _PPOMController_initialisePPOM = \n/*\n * Initialise PPOM loading wasm file.\n * This is done only if user has enabled preference for PPOM Validation.\n * Initialisation is done as soon as controller is constructed\n * or as user enables preference for blockaid validation.\n */\nasync function _PPOMController_initialisePPOM() {\n    if (__classPrivateFieldGet(this, _PPOMController_securityAlertsEnabled, \"f\") && !__classPrivateFieldGet(this, _PPOMController_ppomInitialised, \"f\")) {\n        const { ppomInit } = __classPrivateFieldGet(this, _PPOMController_ppomProvider, \"f\");\n        await ppomInit('./ppom_bg.wasm');\n        __classPrivateFieldSet(this, _PPOMController_ppomInitialised, true, \"f\");\n    }\n}, _PPOMController_resetToInactiveState = function _PPOMController_resetToInactiveState() {\n    __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_resetPPOM).call(this).catch((error) => {\n        console.error(`Error in resetting ppom: ${error.message}`);\n    });\n    const { storageMetadata } = this.state;\n    this.update((draftState) => {\n        draftState.versionInfo = [];\n        draftState.storageMetadata = [];\n    });\n    __classPrivateFieldGet(this, _PPOMController_storage, \"f\").deleteAllFiles(storageMetadata).catch((error) => {\n        console.error(`Error in deleting files: ${error.message}`);\n    });\n}, _PPOMController_onNetworkChange = function _PPOMController_onNetworkChange(networkControllerState) {\n    const selectedNetworkClient = this.messagingSystem.call('NetworkController:getNetworkClientById', networkControllerState.selectedNetworkClientId);\n    const { chainId } = selectedNetworkClient.configuration;\n    const id = (0, util_1.addHexPrefix)(chainId);\n    if (id === __classPrivateFieldGet(this, _PPOMController_chainId, \"f\")) {\n        return;\n    }\n    __classPrivateFieldSet(this, _PPOMController_chainId, id, \"f\");\n    __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_resetPPOM).call(this).catch((error) => {\n        console.error(`Error in resetting ppom: ${error.message}`);\n    });\n}, _PPOMController_onPreferenceChange = function _PPOMController_onPreferenceChange(\n// TOOD: Replace with `PreferencesState` from `@metamask/preferences-controller`\npreferenceControllerState) {\n    const blockaidEnabled = preferenceControllerState.securityAlertsEnabled;\n    if (blockaidEnabled === __classPrivateFieldGet(this, _PPOMController_securityAlertsEnabled, \"f\")) {\n        return;\n    }\n    __classPrivateFieldSet(this, _PPOMController_securityAlertsEnabled, blockaidEnabled, \"f\");\n    if (!blockaidEnabled) {\n        __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_resetToInactiveState).call(this);\n    }\n}, _PPOMController_registerMessageHandlers = function _PPOMController_registerMessageHandlers() {\n    this.messagingSystem.registerActionHandler(`${controllerName}:usePPOM`, this.usePPOM.bind(this));\n}, _PPOMController_subscribeMessageEvents = function _PPOMController_subscribeMessageEvents() {\n    const onNetworkChange = __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_onNetworkChange).bind(this);\n    this.messagingSystem.subscribe('NetworkController:networkDidChange', onNetworkChange);\n}, _PPOMController_resetPPOM = \n/*\n * The function resets PPOM.\n */\nasync function _PPOMController_resetPPOM() {\n    await __classPrivateFieldGet(this, _PPOMController_ppomMutex, \"f\").use(async () => {\n        if (__classPrivateFieldGet(this, _PPOMController_ppom, \"f\")) {\n            __classPrivateFieldGet(this, _PPOMController_ppom, \"f\").free();\n            __classPrivateFieldSet(this, _PPOMController_ppom, undefined, \"f\");\n        }\n    });\n}, _PPOMController_initPPOMIfRequired = \n/*\n * The function will initialise PPOM for the network if required.\n */\nasync function _PPOMController_initPPOMIfRequired(chainId) {\n    const versionInfoUpdated = await __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_updateVersionInfo).call(this);\n    let ppom;\n    if (__classPrivateFieldGet(this, _PPOMController_ppom, \"f\") === undefined || versionInfoUpdated) {\n        ppom = await __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_getPPOM).call(this, chainId);\n        if (__classPrivateFieldGet(this, _PPOMController_chainId, \"f\") === chainId) {\n            if (__classPrivateFieldGet(this, _PPOMController_ppom, \"f\")) {\n                __classPrivateFieldGet(this, _PPOMController_ppom, \"f\").free();\n            }\n            __classPrivateFieldSet(this, _PPOMController_ppom, ppom, \"f\");\n        }\n        __classPrivateFieldGet(this, _PPOMController_storage, \"f\").syncMetadata(this.state.versionInfo).catch((exp) => {\n            console.error(`Error while trying to sync metadata: ${exp.message}`);\n        });\n    }\n    return ppom;\n}, _PPOMController_updateVersionInfo = \n/*\n * Fetch the version info from the CDN and update the version info in state.\n * Function returns true if update is available for versionInfo.\n */\nasync function _PPOMController_updateVersionInfo() {\n    const versionInfo = await __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_fetchVersionInfo).call(this);\n    if (versionInfo) {\n        this.update((draftState) => {\n            draftState.versionInfo = versionInfo;\n        });\n        return true;\n    }\n    return false;\n}, _PPOMController_checkFilePresentInStorage = function _PPOMController_checkFilePresentInStorage(storageMetadata, fileVersionInfo) {\n    return storageMetadata.find((file) => file.name === fileVersionInfo.name &&\n        file.chainId === fileVersionInfo.chainId &&\n        file.version === fileVersionInfo.version &&\n        file.checksum === fileVersionInfo.checksum);\n}, _PPOMController_getAllFiles = \n/*\n *\n * Get all files listed in versionInfo passed.\n */\nasync function _PPOMController_getAllFiles(versionInfo) {\n    const files = await Promise.all(versionInfo.map(async (file) => {\n        let data;\n        try {\n            data = await __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_getFile).call(this, file);\n        }\n        catch (exp) {\n            console.error(`Error in getting file ${file.filePath}: ${exp.message}`);\n        }\n        if (data) {\n            return [file.name, new Uint8Array(data)];\n        }\n        return undefined;\n    }));\n    return files?.filter((data) => data?.[1] !== undefined);\n}, _PPOMController_getFile = \n/*\n * Gets a single file from CDN and write to the storage.\n */\nasync function _PPOMController_getFile(fileVersionInfo) {\n    const { storageMetadata } = this.state;\n    // do not fetch file if the storage version is latest\n    if (__classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_checkFilePresentInStorage).call(this, storageMetadata, fileVersionInfo)) {\n        try {\n            return await __classPrivateFieldGet(this, _PPOMController_storage, \"f\").readFile(fileVersionInfo.name, fileVersionInfo.chainId);\n        }\n        catch (error) {\n            console.error(`Error in reading file: ${error.message}`);\n        }\n    }\n    // validate file path for valid characters\n    (0, util_1.checkFilePath)(fileVersionInfo.filePath);\n    const fileUrl = (0, util_1.constructURLHref)(__classPrivateFieldGet(this, _PPOMController_cdnBaseUrl, \"f\"), fileVersionInfo.filePath);\n    const fileData = await __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_fetchBlob).call(this, fileUrl);\n    await (0, util_1.validateSignature)(fileData, fileVersionInfo.hashSignature, __classPrivateFieldGet(this, _PPOMController_blockaidPublicKey, \"f\"), fileVersionInfo.filePath, __classPrivateFieldGet(this, _PPOMController_nativeCrypto, \"f\"));\n    await __classPrivateFieldGet(this, _PPOMController_storage, \"f\")\n        .writeFile({\n        data: fileData,\n        ...fileVersionInfo,\n    })\n        .catch((error) => {\n        console.error(`Error in writing file: ${error.message}`);\n    });\n    return fileData;\n}, _PPOMController_getAPIResponse = \n/*\n * Generic method to fetch file from CDN.\n */\nasync function _PPOMController_getAPIResponse(url, options = {}, method = 'GET') {\n    const response = await (0, controller_utils_1.safelyExecute)(async () => (0, controller_utils_1.timeoutFetch)(url, {\n        method,\n        cache: 'no-cache',\n        redirect: 'error',\n        ...options,\n    }, 10000), true);\n    const cached = response?.status === 304;\n    if (!response?.status || response?.status < 200 || response?.status > 399) {\n        throw new Error(`Failed to fetch file with url: ${url}`);\n    }\n    return { cached, response };\n}, _PPOMController_fetchVersionInfo = \n/*\n * Fetch the version info from the PPOM cdn.\n */\nasync function _PPOMController_fetchVersionInfo() {\n    const url = (0, util_1.constructURLHref)(__classPrivateFieldGet(this, _PPOMController_cdnBaseUrl, \"f\"), PPOM_VERSION_FILE_NAME);\n    const { cached, response } = await __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_getAPIResponse).call(this, url, {\n        headers: versionInfoFileHeaders,\n    });\n    if (cached && this.state.versionInfo?.length) {\n        return undefined;\n    }\n    return response.json();\n}, _PPOMController_fetchBlob = \n/*\n * Fetch the blob file from the PPOM cdn.\n */\nasync function _PPOMController_fetchBlob(url) {\n    const { response } = await __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_getAPIResponse).call(this, url);\n    return await response.arrayBuffer();\n}, _PPOMController_jsonRpcRequest = \n/*\n * Send a JSON RPC request to the provider.\n * This method is used by the PPOM to make requests to the provider.\n */\nasync function _PPOMController_jsonRpcRequest(method, params) {\n    // Resolve with error if number of requests from PPOM to provider exceeds the limit for the current transaction\n    if (__classPrivateFieldGet(this, _PPOMController_providerRequests, \"f\") > __classPrivateFieldGet(this, _PPOMController_providerRequestLimit, \"f\")) {\n        const limitExceededError = util_1.PROVIDER_ERRORS.limitExceeded();\n        throw new rpc_errors_1.JsonRpcError(limitExceededError.code, limitExceededError.message);\n    }\n    __classPrivateFieldSet(this, _PPOMController_providerRequests, __classPrivateFieldGet(this, _PPOMController_providerRequests, \"f\") + 1, \"f\");\n    // Resolve with error if the provider method called by PPOM is not allowed for PPOM\n    if (!ALLOWED_PROVIDER_CALLS.includes(method)) {\n        const methodNotSupportedError = util_1.PROVIDER_ERRORS.methodNotSupported();\n        throw new rpc_errors_1.JsonRpcError(methodNotSupportedError.code, methodNotSupportedError.message);\n    }\n    __classPrivateFieldGet(this, _PPOMController_providerRequestsCount, \"f\")[method] = __classPrivateFieldGet(this, _PPOMController_providerRequestsCount, \"f\")[method]\n        ? Number(__classPrivateFieldGet(this, _PPOMController_providerRequestsCount, \"f\")[method]) + 1\n        : 1;\n    const payload = (0, util_1.createPayload)(method, params);\n    const result = await __classPrivateFieldGet(this, _PPOMController_provider, \"f\").request(payload);\n    return { jsonrpc: '2.0', id: payload.id, result };\n}, _PPOMController_getPPOM = \n/*\n * This function can be called to initialise PPOM or re-initilise it,\n * when new files are required to be passed to it.\n *\n * It will load the data files from storage and pass data files and wasm file to ppom.\n */\nasync function _PPOMController_getPPOM(chainId) {\n    // PPOM initialisation in contructor fails for react native\n    // thus it is added here to prevent validation from failing.\n    await __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_initialisePPOM).call(this);\n    const versionInfo = this.state.versionInfo.filter(({ chainId: id }) => id === chainId);\n    // The following code throw error if no data files are found for the chainId.\n    // This check has been put in place after suggestion of security team.\n    // If we want to disable ppom validation on all instances of Metamask,\n    // this can be achieved by returning empty data from version file.\n    if (versionInfo?.length === undefined || versionInfo?.length === 0) {\n        throw new Error(`Aborting initialising PPOM as no files are found for the network with chainId: ${chainId}`);\n    }\n    // Get all the files for  the chainId\n    const files = await __classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_getAllFiles).call(this, versionInfo);\n    if (files?.length !== versionInfo?.length) {\n        throw new Error(`Aborting initialising PPOM as not all files could not be downloaded for the network with chainId: ${chainId}`);\n    }\n    const { PPOM } = __classPrivateFieldGet(this, _PPOMController_ppomProvider, \"f\");\n    return PPOM.new(__classPrivateFieldGet(this, _PPOMController_instances, \"m\", _PPOMController_jsonRpcRequest).bind(this), files);\n};\n//# sourceMappingURL=ppom-controller.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _PPOMStorage_storageBackend, _PPOMStorage_readMetadata, _PPOMStorage_writeMetadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PPOMStorage = void 0;\n/**\n * @class PPOMStorage\n * This class is responsible for managing the local storage\n * It provides the following functionalities:\n * 1. Sync the metadata with the version info from the cdn\n * 2. Read a file from the local storage\n * 3. Write a file to the local storage\n *\n * It also validates the checksum of the file when reading and writing in order to\n * detect corrupted files or files that are not up to date\n */\nclass PPOMStorage {\n    /**\n     * Creates a PPOMStorage instance.\n     *\n     * @param options - The options passed to the function.\n     * @param options.storageBackend - The storage backend to use for the local storage.\n     * @param options.readMetadata - A function to read the metadata from the local storage.\n     * @param options.writeMetadata - A function to write the metadata to the local storage.\n     */\n    constructor({ storageBackend, readMetadata, writeMetadata, }) {\n        _PPOMStorage_storageBackend.set(this, void 0);\n        _PPOMStorage_readMetadata.set(this, void 0);\n        _PPOMStorage_writeMetadata.set(this, void 0);\n        __classPrivateFieldSet(this, _PPOMStorage_storageBackend, storageBackend, \"f\");\n        __classPrivateFieldSet(this, _PPOMStorage_readMetadata, readMetadata, \"f\");\n        __classPrivateFieldSet(this, _PPOMStorage_writeMetadata, writeMetadata, \"f\");\n    }\n    /**\n     * Sync the metadata with the version info from the cdn.\n     * 1. Remove the files that are not readable (e.g. corrupted or deleted).\n     * 2. Remove the files that are not in the cdn anymore.\n     * 3. Remove the files that are not up to date in the cdn.\n     * 4. Remove the files that are not in the local storage from the metadata.\n     * 5. Delete the files that are not in the metadata from the local storage.\n     *\n     * @param versionInfo - Version information of metadata files.\n     */\n    async syncMetadata(versionInfo) {\n        const metadata = __classPrivateFieldGet(this, _PPOMStorage_readMetadata, \"f\").call(this);\n        const syncedMetadata = [];\n        for (const fileMetadata of metadata) {\n            // check if the file is readable (e.g. corrupted or deleted)\n            try {\n                await this.readFile(fileMetadata.name, fileMetadata.chainId);\n            }\n            catch (exp) {\n                console.error('Error: ', exp);\n                continue;\n            }\n            // check if the file exits and up to date in the storage\n            if (!versionInfo.find((file) => file.name === fileMetadata.name &&\n                file.chainId === fileMetadata.chainId &&\n                file.version === fileMetadata.version &&\n                file.checksum === fileMetadata.checksum)) {\n                continue;\n            }\n            syncedMetadata.push(fileMetadata);\n        }\n        const filesInDB = await __classPrivateFieldGet(this, _PPOMStorage_storageBackend, \"f\").dir();\n        for (const { name, chainId } of filesInDB) {\n            if (!syncedMetadata.find((file) => file.name === name && file.chainId === chainId)) {\n                await __classPrivateFieldGet(this, _PPOMStorage_storageBackend, \"f\").delete({ name, chainId });\n            }\n        }\n        __classPrivateFieldGet(this, _PPOMStorage_writeMetadata, \"f\").call(this, syncedMetadata);\n        return syncedMetadata;\n    }\n    /**\n     * Delete all files in storage.\n     *\n     * @param metadata - List of all files in storage.\n     */\n    async deleteAllFiles(metadata) {\n        for (const fileMetadata of metadata) {\n            const { name, chainId } = fileMetadata;\n            try {\n                await __classPrivateFieldGet(this, _PPOMStorage_storageBackend, \"f\").delete({ name, chainId });\n            }\n            catch (exp) {\n                console.error(`Error in deleting file: ${name}, ${chainId}`, exp);\n            }\n        }\n    }\n    /**\n     * Read the file from the local storage.\n     * 1. Check if the file exists in the local storage.\n     * 2. Check if the file exists in the metadata.\n     *\n     * @param name - Name assigned to storage.\n     * @param chainId - ChainId for which file is queried.\n     */\n    async readFile(name, chainId) {\n        const metadata = __classPrivateFieldGet(this, _PPOMStorage_readMetadata, \"f\").call(this);\n        const fileMetadata = metadata.find((file) => file.name === name && file.chainId === chainId);\n        if (!fileMetadata) {\n            throw new Error(`File metadata (${name}, ${chainId}) not found`);\n        }\n        const data = await __classPrivateFieldGet(this, _PPOMStorage_storageBackend, \"f\").read({ name, chainId }, fileMetadata.checksum);\n        if (!data) {\n            throw new Error(`Storage File (${name}, ${chainId}) not found`);\n        }\n        return data;\n    }\n    /**\n     * Write the file to the local storage.\n     * 1. Write the file to the local storage.\n     * 2. Update the metadata.\n     *\n     * @param options - Object passed to write to storage.\n     * @param options.data - File data to be written.\n     * @param options.name - Name to be assigned to the storage.\n     * @param options.chainId - Current ChainId.\n     * @param options.version - Version of file.\n     * @param options.checksum - Checksum of file.\n     */\n    async writeFile({ data, name, chainId, version, checksum, }) {\n        await __classPrivateFieldGet(this, _PPOMStorage_storageBackend, \"f\").write({ name, chainId }, data, checksum);\n        const metadata = __classPrivateFieldGet(this, _PPOMStorage_readMetadata, \"f\").call(this);\n        const fileMetadata = metadata.find((file) => file.name === name && file.chainId === chainId);\n        if (fileMetadata) {\n            fileMetadata.version = version;\n            fileMetadata.checksum = checksum;\n        }\n        else {\n            metadata.push({ name, chainId, version, checksum });\n        }\n        __classPrivateFieldGet(this, _PPOMStorage_writeMetadata, \"f\").call(this, metadata);\n    }\n}\nexports.PPOMStorage = PPOMStorage;\n_PPOMStorage_storageBackend = new WeakMap(), _PPOMStorage_readMetadata = new WeakMap(), _PPOMStorage_writeMetadata = new WeakMap();\n//# sourceMappingURL=ppom-storage.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkFilePath = exports.addHexPrefix = exports.constructURLHref = exports.validateSignature = exports.PROVIDER_ERRORS = exports.createPayload = exports.IdGenerator = exports.blockaidValidationSupportedForNetwork = exports.SUPPORTED_NETWORK_CHAINIDS = void 0;\nconst crypto_js_1 = __importStar(require(\"crypto-js\"));\nconst elliptic_1 = __importDefault(require(\"elliptic\"));\nconst json_rpc_random_id_1 = __importDefault(require(\"json-rpc-random-id\"));\nconst EdDSA = elliptic_1.default.eddsa;\nconst URL_PREFIX = 'https://';\nexports.SUPPORTED_NETWORK_CHAINIDS = {\n    MAINNET: '0x1',\n    BSC: '0x38',\n    OPTIMISM: '0xa',\n    POLYGON: '0x89',\n    AVALANCHE: '0xa86a',\n    ARBITRUM: '0xa4b1',\n    LINEA_MAINNET: '0xe708',\n    BASE: '0x2105',\n    SEPOLIA: '0xaa36a7',\n    OPBNB: '0xcc',\n    ZKSYNC: '0x144',\n    SCROLL: '0x82750',\n    BERACHAIN: '0x138d4',\n    METACHAIN_ONE: '0x1b6e6',\n};\nconst blockaidValidationSupportedForNetwork = (chainId) => {\n    return Object.values(exports.SUPPORTED_NETWORK_CHAINIDS).some((cid) => cid === chainId);\n};\nexports.blockaidValidationSupportedForNetwork = blockaidValidationSupportedForNetwork;\nexports.IdGenerator = (0, json_rpc_random_id_1.default)();\nconst createPayload = (method, params) => ({\n    id: (0, exports.IdGenerator)(),\n    jsonrpc: '2.0',\n    method,\n    params: params ?? [],\n});\nexports.createPayload = createPayload;\nexports.PROVIDER_ERRORS = {\n    limitExceeded: () => ({ code: -32005, message: 'Limit exceeded' }),\n    methodNotSupported: () => ({\n        code: -32601,\n        message: 'Method not supported',\n    }),\n};\nconst getHash = async (data, nativeCrypto, useNative = true) => {\n    if (nativeCrypto) {\n        return nativeCrypto.createHash('sha256').update(data).digest('hex');\n    }\n    if ('crypto' in globalThis &&\n        typeof globalThis.crypto === 'object' &&\n        globalThis.crypto.subtle?.digest &&\n        useNative) {\n        const hashBuffer = await globalThis.crypto.subtle.digest('SHA-256', data);\n        const hashArray = Array.from(new Uint8Array(hashBuffer));\n        const hash = hashArray\n            .map((item) => item.toString(16).padStart(2, '0'))\n            .join('');\n        return hash;\n    }\n    return (0, crypto_js_1.SHA256)(crypto_js_1.default.lib.WordArray.create(data)).toString();\n};\n// useNative argument is added for testing purpose, without it test cases are breaking in Node-20 and above\n// Reason being that in node 20 crypto is always present in globalThis\n// and it is not possible to reset it due to security reasons\nconst validateSignature = async (data, hashSignature, key, filePath, nativeCrypto, useNative) => {\n    const hashString = await getHash(data, nativeCrypto, useNative);\n    // const hashString = hash.toString();\n    const ec = new EdDSA('ed25519');\n    const ecKey = ec.keyFromPublic(key);\n    // eslint-disable-next-line no-restricted-globals\n    const result = ecKey.verify(Buffer.from(hashString), hashSignature);\n    if (!result) {\n        throw Error(`Signature verification failed for file path: ${filePath}`);\n    }\n};\nexports.validateSignature = validateSignature;\nconst constructURLHref = (base, path) => new URL(`${URL_PREFIX}${base}/${path}`\n    .replace(/https:\\/\\/https:\\/\\//gu, 'https://')\n    .replace(/\\/\\//gu, '/')).href;\nexports.constructURLHref = constructURLHref;\nconst addHexPrefix = (str) => {\n    if (typeof str !== 'string' || str.match(/^-?0x/u)) {\n        return str;\n    }\n    if (str.match(/^-?0X/u)) {\n        return str.replace('0X', '0x');\n    }\n    return `0x${parseInt(str, 10).toString(16)}`;\n};\nexports.addHexPrefix = addHexPrefix;\n/*\n * The function check to ensure that file path can contain only alphanumeric\n * characters and a dot character (.) or slash (/).\n */\nconst checkFilePath = (filePath) => {\n    const filePathRegex = /^[\\w./]+$/u;\n    if (!filePath.match(filePathRegex)) {\n        throw new Error(`Invalid file path for data file: ${filePath}`);\n    }\n};\nexports.checkFilePath = checkFilePath;\n//# sourceMappingURL=util.js.map","import {\n  isEqual,\n  memoize,\n  merge,\n  omit,\n  omitBy,\n  pickBy,\n  size,\n  sum,\n} from 'lodash';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { bufferToHex, keccak } from 'ethereumjs-util';\nimport { v4 as uuidv4 } from 'uuid';\nimport { NameType } from '@metamask/name-controller';\nimport { ENVIRONMENT_TYPE_BACKGROUND } from '../../../shared/constants/app';\nimport {\n  METAMETRICS_ANONYMOUS_ID,\n  METAMETRICS_BACKGROUND_PAGE_OBJECT,\n  MetaMetricsUserTrait,\n} from '../../../shared/constants/metametrics';\nimport { SECOND } from '../../../shared/constants/time';\nimport { isManifestV3 } from '../../../shared/modules/mv3.utils';\nimport { METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM } from '../../../shared/constants/alarms';\nimport { checkAlarmExists, generateRandomId, isValidDate } from '../lib/util';\nimport {\n  AnonymousTransactionMetaMetricsEvent,\n  TransactionMetaMetricsEvent,\n} from '../../../shared/constants/transaction';\n\nconst EXTENSION_UNINSTALL_URL = 'https://metamask.io/uninstalled';\n\nexport const overrideAnonymousEventNames = {\n  [TransactionMetaMetricsEvent.added]:\n    AnonymousTransactionMetaMetricsEvent.added,\n  [TransactionMetaMetricsEvent.approved]:\n    AnonymousTransactionMetaMetricsEvent.approved,\n  [TransactionMetaMetricsEvent.finalized]:\n    AnonymousTransactionMetaMetricsEvent.finalized,\n  [TransactionMetaMetricsEvent.rejected]:\n    AnonymousTransactionMetaMetricsEvent.rejected,\n  [TransactionMetaMetricsEvent.submitted]:\n    AnonymousTransactionMetaMetricsEvent.submitted,\n};\n\nconst defaultCaptureException = (err) => {\n  // throw error on clean stack so its captured by platform integrations (eg sentry)\n  // but does not interrupt the call stack\n  setTimeout(() => {\n    throw err;\n  });\n};\n\n// The function is used to build a unique messageId for segment messages\n// It uses actionId and uniqueIdentifier from event if present\nconst buildUniqueMessageId = (args) => {\n  const messageIdParts = [];\n  if (args.uniqueIdentifier) {\n    messageIdParts.push(args.uniqueIdentifier);\n  }\n  if (args.actionId) {\n    messageIdParts.push(args.actionId);\n  }\n  if (messageIdParts.length && args.isDuplicateAnonymizedEvent) {\n    messageIdParts.push('0x000');\n  }\n  if (messageIdParts.length) {\n    return messageIdParts.join('-');\n  }\n  return generateRandomId();\n};\n\nconst exceptionsToFilter = {\n  [`You must pass either an \"anonymousId\" or a \"userId\".`]: true,\n};\n\n/**\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsContext} MetaMetricsContext\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsEventPayload} MetaMetricsEventPayload\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsEventOptions} MetaMetricsEventOptions\n * @typedef {import('../../../shared/constants/metametrics').SegmentEventPayload} SegmentEventPayload\n * @typedef {import('../../../shared/constants/metametrics').SegmentInterface} SegmentInterface\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsPagePayload} MetaMetricsPagePayload\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsPageOptions} MetaMetricsPageOptions\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsEventFragment} MetaMetricsEventFragment\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsTraits} MetaMetricsTraits\n */\n\n/**\n * @typedef {object} MetaMetricsControllerState\n * @property {string} [metaMetricsId] - The user's metaMetricsId that will be\n *  attached to all non-anonymized event payloads\n * @property {boolean} [participateInMetaMetrics] - The user's preference for\n *  participating in the MetaMetrics analytics program. This setting controls\n *  whether or not events are tracked\n *  @property {boolean} [latestNonAnonymousEventTimestamp] - The timestamp at which last non anonymous event is tracked.\n * @property {{[string]: MetaMetricsEventFragment}} [fragments] - Object keyed\n *  by UUID with stored fragments as values.\n * @property {Array} [eventsBeforeMetricsOptIn] - Array of queued events added before\n *  a user opts into metrics.\n * @property {object} [traits] - Traits that are not derived from other state keys.\n * @property {Record<string any>} [previousUserTraits] - The user traits the last\n *  time they were computed.\n */\n\nexport default class MetaMetricsController {\n  /**\n   * @param {object} options\n   * @param {object} options.segment - an instance of analytics for tracking\n   *  events that conform to the new MetaMetrics tracking plan.\n   * @param {object} options.preferencesStore - The preferences controller store, used\n   *  to access and subscribe to preferences that will be attached to events\n   * @param {Function} options.onNetworkDidChange - Used to attach a listener to the\n   *  networkDidChange event emitted by the networkController\n   * @param {Function} options.getCurrentChainId - Gets the current chain id from the\n   *  network controller\n   * @param {string} options.version - The version of the extension\n   * @param {string} options.environment - The environment the extension is running in\n   * @param {string} options.extension - webextension-polyfill\n   * @param {MetaMetricsControllerState} options.initState - State to initialized with\n   * @param options.captureException\n   */\n  constructor({\n    segment,\n    preferencesStore,\n    onNetworkDidChange,\n    getCurrentChainId,\n    version,\n    environment,\n    initState,\n    extension,\n    captureException = defaultCaptureException,\n  }) {\n    this._captureException = (err) => {\n      // This is a temporary measure. Currently there are errors flooding sentry due to a problem in how we are tracking anonymousId\n      // We intend on removing this as soon as we understand how to correctly solve that problem.\n      if (!exceptionsToFilter[err.message]) {\n        captureException(err);\n      }\n    };\n    const prefState = preferencesStore.getState();\n    this.chainId = getCurrentChainId();\n    this.locale = prefState.currentLocale.replace('_', '-');\n    this.version =\n      environment === 'production' ? version : `${version}-${environment}`;\n    this.extension = extension;\n    this.environment = environment;\n\n\n    const abandonedFragments = omitBy(initState?.fragments, 'persist');\n    const segmentApiCalls = initState?.segmentApiCalls || {};\n\n    this.store = new ObservableStore({\n      participateInMetaMetrics: null,\n      metaMetricsId: null,\n      dataCollectionForMarketing: null,\n      marketingCampaignCookieId: null,\n      latestNonAnonymousEventTimestamp: 0,\n      eventsBeforeMetricsOptIn: [],\n      traits: {},\n      previousUserTraits: {},\n      ...initState,\n      fragments: {\n        ...initState?.fragments,\n      },\n      segmentApiCalls: {\n        ...segmentApiCalls,\n      },\n    });\n\n    preferencesStore.subscribe(({ currentLocale }) => {\n      this.locale = currentLocale.replace('_', '-');\n    });\n\n    onNetworkDidChange(() => {\n      this.chainId = getCurrentChainId();\n    });\n    this.segment = segment;\n\n    // Track abandoned fragments that weren't properly cleaned up.\n    // Abandoned fragments are those that were stored in persistent memory\n    // and are available at controller instance creation, but do not have the\n    // 'persist' flag set. This means anytime the extension is unlocked, any\n    // fragments that are not marked as persistent will be purged and the\n    // failure event will be emitted.\n    Object.values(abandonedFragments).forEach((fragment) => {\n      this.finalizeEventFragment(fragment.id, { abandoned: true });\n    });\n\n    // Code below submits any pending segmentApiCalls to Segment if/when the controller is re-instantiated\n    if (isManifestV3) {\n      Object.values(segmentApiCalls).forEach(({ eventType, payload }) => {\n        try {\n          this._submitSegmentAPICall(eventType, payload);\n        } catch (error) {\n          this._captureException(error);\n        }\n      });\n    }\n\n    // Close out event fragments that were created but not progressed. An\n    // interval is used to routinely check if a fragment has not been updated\n    // within the fragment's timeout window. When creating a new event fragment\n    // a timeout can be specified that will cause an abandoned event to be\n    // tracked if the event isn't progressed within that amount of time.\n    if (isManifestV3) {\n      /* eslint-disable no-undef */\n      this.extension.alarms.getAll().then((alarms) => {\n        const hasAlarm = checkAlarmExists(\n          alarms,\n          METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM,\n        );\n\n        if (!hasAlarm) {\n          this.extension.alarms.create(\n            METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM,\n            {\n              delayInMinutes: 1,\n              periodInMinutes: 1,\n            },\n          );\n        }\n      });\n      this.extension.alarms.onAlarm.addListener((alarmInfo) => {\n        if (alarmInfo.name === METAMETRICS_FINALIZE_EVENT_FRAGMENT_ALARM) {\n          this.finalizeAbandonedFragments();\n        }\n      });\n    } else {\n      setInterval(() => {\n        this.finalizeAbandonedFragments();\n      }, SECOND * 30);\n    }\n  }\n\n  finalizeAbandonedFragments() {\n    Object.values(this.store.getState().fragments).forEach((fragment) => {\n      if (\n        fragment.timeout &&\n        Date.now() - fragment.lastUpdated / 1000 > fragment.timeout\n      ) {\n        this.finalizeEventFragment(fragment.id, { abandoned: true });\n      }\n    });\n  }\n\n  generateMetaMetricsId() {\n    return bufferToHex(\n      keccak(\n        Buffer.from(\n          String(Date.now()) +\n            String(Math.round(Math.random() * Number.MAX_SAFE_INTEGER)),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Create an event fragment in state and returns the event fragment object.\n   *\n   * @param {MetaMetricsEventFragment} options - Fragment settings and properties\n   *  to initiate the fragment with.\n   * @returns {MetaMetricsEventFragment}\n   */\n  createEventFragment(options) {\n    if (!options.successEvent || !options.category) {\n      throw new Error(\n        `Must specify success event and category. Success event was: ${\n          options.event\n        }. Category was: ${options.category}. Payload keys were: ${Object.keys(\n          options,\n        )}. ${\n          typeof options.properties === 'object'\n            ? `Payload property keys were: ${Object.keys(options.properties)}`\n            : ''\n        }`,\n      );\n    }\n\n    const { fragments } = this.store.getState();\n\n    const id = options.uniqueIdentifier ?? uuidv4();\n    const fragment = {\n      id,\n      ...options,\n      lastUpdated: Date.now(),\n    };\n    this.store.updateState({\n      fragments: {\n        ...fragments,\n        [id]: fragment,\n      },\n    });\n\n    if (options.initialEvent) {\n      this.trackEvent({\n        event: fragment.initialEvent,\n        category: fragment.category,\n        properties: fragment.properties,\n        sensitiveProperties: fragment.sensitiveProperties,\n        page: fragment.page,\n        referrer: fragment.referrer,\n        revenue: fragment.revenue,\n        value: fragment.value,\n        currency: fragment.currency,\n        environmentType: fragment.environmentType,\n        actionId: options.actionId,\n        uniqueIdentifier: options.uniqueIdentifier,\n      });\n    }\n\n    return fragment;\n  }\n\n  /**\n   * Returns the fragment stored in memory with provided id or undefined if it\n   * does not exist.\n   *\n   * @param {string} id - id of fragment to retrieve\n   * @returns {[MetaMetricsEventFragment]}\n   */\n  getEventFragmentById(id) {\n    const { fragments } = this.store.getState();\n\n    const fragment = fragments[id];\n\n    return fragment;\n  }\n\n  /**\n   * Updates an event fragment in state\n   *\n   * @param {string} id - The fragment id to update\n   * @param {Partial<MetaMetricsEventFragment>} payload - Fragment settings and\n   *  properties to initiate the fragment with.\n   */\n  updateEventFragment(id, payload) {\n    const { fragments } = this.store.getState();\n\n    const fragment = fragments[id];\n\n    if (!fragment) {\n      throw new Error(`Event fragment with id ${id} does not exist.`);\n    }\n\n    this.store.updateState({\n      fragments: {\n        ...fragments,\n        [id]: merge(fragments[id], {\n          ...payload,\n          lastUpdated: Date.now(),\n        }),\n      },\n    });\n  }\n\n  /**\n   * @typedef {object} MetaMetricsFinalizeEventFragmentOptions\n   * @property {boolean} [abandoned = false] - if true track the failure\n   * event instead of the success event\n   * @property {MetaMetricsContext.page} [page] - page the final event\n   * occurred on. This will override whatever is set on the fragment\n   * @property {MetaMetricsContext.referrer} [referrer] - Dapp that\n   * originated the fragment. This is for fallback only, the fragment referrer\n   * property will take precedence.\n   */\n\n  /**\n   * Finalizes a fragment, tracking either a success event or failure Event\n   * and then removes the fragment from state.\n   *\n   * @param {string} id - UUID of the event fragment to be closed\n   * @param {MetaMetricsFinalizeEventFragmentOptions} options\n   */\n  finalizeEventFragment(id, { abandoned = false, page, referrer } = {}) {\n    const fragment = this.store.getState().fragments[id];\n    if (!fragment) {\n      throw new Error(`Funnel with id ${id} does not exist.`);\n    }\n\n    const eventName = abandoned ? fragment.failureEvent : fragment.successEvent;\n\n    this.trackEvent({\n      event: eventName,\n      category: fragment.category,\n      properties: fragment.properties,\n      sensitiveProperties: fragment.sensitiveProperties,\n      page: page ?? fragment.page,\n      referrer: fragment.referrer ?? referrer,\n      revenue: fragment.revenue,\n      value: fragment.value,\n      currency: fragment.currency,\n      environmentType: fragment.environmentType,\n      actionId: fragment.actionId,\n      // We append success or failure to the unique-identifier so that the\n      // messageId can still be idempotent, but so that it differs from the\n      // initial event fired. The initial event was preventing new events from\n      // making it to mixpanel because they were using the same unique ID as\n      // the events processed in other parts of the fragment lifecycle.\n      uniqueIdentifier: fragment.uniqueIdentifier\n        ? `${fragment.uniqueIdentifier}-${abandoned ? 'failure' : 'success'}`\n        : undefined,\n    });\n    const { fragments } = this.store.getState();\n    delete fragments[id];\n    this.store.updateState({ fragments });\n  }\n\n  /**\n   * Calls this._identify with validated metaMetricsId and user traits if user is participating\n   * in the MetaMetrics analytics program\n   *\n   * @param {object} userTraits\n   */\n  identify(userTraits) {\n    const { metaMetricsId, participateInMetaMetrics } = this.state;\n\n    if (!participateInMetaMetrics || !metaMetricsId || !userTraits) {\n      return;\n    }\n    if (typeof userTraits !== 'object') {\n      console.warn(\n        `MetaMetricsController#identify: userTraits parameter must be an object. Received type: ${typeof userTraits}`,\n      );\n      return;\n    }\n\n    const allValidTraits = this._buildValidTraits(userTraits);\n\n    this._identify(allValidTraits);\n  }\n\n  // It sets an uninstall URL (\"Sorry to see you go!\" page),\n  // which is opened if a user uninstalls the extension.\n  updateExtensionUninstallUrl(participateInMetaMetrics, metaMetricsId) {\n    const query = {};\n    if (participateInMetaMetrics) {\n      // We only want to track these things if a user opted into metrics.\n      query.mmi = Buffer.from(metaMetricsId).toString('base64');\n      query.env = this.environment;\n      query.av = this.version;\n    }\n    const queryString = new URLSearchParams(query);\n\n    // this.extension not currently defined in tests\n    if (this.extension && this.extension.runtime) {\n      this.extension.runtime.setUninstallURL(\n        `${EXTENSION_UNINSTALL_URL}?${queryString}`,\n      );\n    }\n  }\n\n  /**\n   * Setter for the `participateInMetaMetrics` property\n   *\n   * @param {boolean} participateInMetaMetrics - Whether or not the user wants\n   *  to participate in MetaMetrics\n   * @returns {Promise<string|null>} the string of the new metametrics id, or null\n   *  if not set\n   */\n  async setParticipateInMetaMetrics(participateInMetaMetrics) {\n    const { metaMetricsId: existingMetaMetricsId } = this.state;\n\n    const metaMetricsId =\n      participateInMetaMetrics && !existingMetaMetricsId\n        ? this.generateMetaMetricsId()\n        : existingMetaMetricsId;\n\n    this.store.updateState({ participateInMetaMetrics, metaMetricsId });\n\n    if (participateInMetaMetrics) {\n      this.trackEventsAfterMetricsOptIn();\n      this.clearEventsAfterMetricsOptIn();\n    } else if (this.state.marketingCampaignCookieId) {\n      this.setMarketingCampaignCookieId(null);\n    }\n\n    ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n    this.updateExtensionUninstallUrl(participateInMetaMetrics, metaMetricsId);\n    ///: END:ONLY_INCLUDE_IF\n\n    return metaMetricsId;\n  }\n\n  setDataCollectionForMarketing(dataCollectionForMarketing) {\n    const { metaMetricsId } = this.state;\n\n    this.store.updateState({ dataCollectionForMarketing });\n\n    if (!dataCollectionForMarketing && this.state.marketingCampaignCookieId) {\n      this.setMarketingCampaignCookieId(null);\n    }\n\n    return metaMetricsId;\n  }\n\n  setMarketingCampaignCookieId(marketingCampaignCookieId) {\n    this.store.updateState({ marketingCampaignCookieId });\n  }\n\n  get state() {\n    return this.store.getState();\n  }\n\n  /**\n   * track a page view with Segment\n   *\n   * @param {MetaMetricsPagePayload} payload - details of the page viewed\n   * @param {MetaMetricsPageOptions} [options] - options for handling the page\n   *  view\n   */\n  trackPage(\n    { name, params, environmentType, page, referrer, actionId },\n    options,\n  ) {\n    try {\n      if (this.state.participateInMetaMetrics === false) {\n        return;\n      }\n\n      if (\n        this.state.participateInMetaMetrics === null &&\n        !options?.isOptInPath\n      ) {\n        return;\n      }\n      const { metaMetricsId } = this.state;\n      const idTrait = metaMetricsId ? 'userId' : 'anonymousId';\n      const idValue = metaMetricsId ?? METAMETRICS_ANONYMOUS_ID;\n      this._submitSegmentAPICall('page', {\n        messageId: buildUniqueMessageId({ actionId }),\n        [idTrait]: idValue,\n        name,\n        properties: {\n          params,\n          locale: this.locale,\n          chain_id: this.chainId,\n          environment_type: environmentType,\n        },\n        context: this._buildContext(referrer, page),\n      });\n    } catch (err) {\n      this._captureException(err);\n    }\n  }\n\n  /**\n   * submits a metametrics event, not waiting for it to complete or allowing its error to bubble up\n   *\n   * @param {MetaMetricsEventPayload} payload - details of the event\n   * @param {MetaMetricsEventOptions} [options] - options for handling/routing the event\n   */\n  trackEvent(payload, options) {\n    // validation is not caught and handled\n    this.validatePayload(payload);\n    this.submitEvent(payload, options).catch((err) =>\n      this._captureException(err),\n    );\n  }\n\n  /**\n   * submits (or queues for submission) a metametrics event, performing necessary payload manipulation and\n   * routing the event to the appropriate segment source. Will split events\n   * with sensitiveProperties into two events, tracking the sensitiveProperties\n   * with the anonymousId only.\n   *\n   * @param {MetaMetricsEventPayload} payload - details of the event\n   * @param {MetaMetricsEventOptions} [options] - options for handling/routing the event\n   * @returns {Promise<void>}\n   */\n  async submitEvent(payload, options) {\n    this.validatePayload(payload);\n\n    if (!this.state.participateInMetaMetrics && !options?.isOptIn) {\n      return;\n    }\n\n    // We might track multiple events if sensitiveProperties is included, this array will hold\n    // the promises returned from this._track.\n    const events = [];\n\n    if (payload.sensitiveProperties) {\n      // sensitiveProperties will only be tracked using the anonymousId property and generic id\n      // If the event options already specify to exclude the metaMetricsId we throw an error as\n      // a signal to the developer that the event was implemented incorrectly\n      if (options?.excludeMetaMetricsId === true) {\n        throw new Error(\n          'sensitiveProperties was specified in an event payload that also set the excludeMetaMetricsId flag',\n        );\n      }\n\n      // change anonymous event names\n      const anonymousEventName =\n        overrideAnonymousEventNames[`${payload.event}`];\n      const anonymousPayload = {\n        ...payload,\n        event: anonymousEventName ?? payload.event,\n      };\n\n      const combinedProperties = merge(\n        anonymousPayload.sensitiveProperties,\n        anonymousPayload.properties,\n      );\n\n      events.push(\n        this._track(\n          this._buildEventPayload({\n            ...anonymousPayload,\n            properties: combinedProperties,\n            isDuplicateAnonymizedEvent: true,\n          }),\n          { ...options, excludeMetaMetricsId: true },\n        ),\n      );\n    }\n\n    events.push(this._track(this._buildEventPayload(payload), options));\n\n    await Promise.all(events);\n  }\n\n  /**\n   * validates a metametrics event\n   *\n   * @param {MetaMetricsEventPayload} payload - details of the event\n   */\n  validatePayload(payload) {\n    // event and category are required fields for all payloads\n    if (!payload.event || !payload.category) {\n      throw new Error(\n        `Must specify event and category. Event was: ${\n          payload.event\n        }. Category was: ${payload.category}. Payload keys were: ${Object.keys(\n          payload,\n        )}. ${\n          typeof payload.properties === 'object'\n            ? `Payload property keys were: ${Object.keys(payload.properties)}`\n            : ''\n        }`,\n      );\n    }\n  }\n\n  handleMetaMaskStateUpdate(newState) {\n    const userTraits = this._buildUserTraitsObject(newState);\n    if (userTraits) {\n      this.identify(userTraits);\n    }\n  }\n\n  // Track all queued events after a user opted into metrics.\n  trackEventsAfterMetricsOptIn() {\n    const { eventsBeforeMetricsOptIn } = this.store.getState();\n    eventsBeforeMetricsOptIn.forEach((eventBeforeMetricsOptIn) => {\n      this.trackEvent(eventBeforeMetricsOptIn);\n    });\n  }\n\n  // Once we track queued events after a user opts into metrics, we want to clear the event queue.\n  clearEventsAfterMetricsOptIn() {\n    this.store.updateState({\n      eventsBeforeMetricsOptIn: [],\n    });\n  }\n\n  // It adds an event into a queue, which is only tracked if a user opts into metrics.\n  addEventBeforeMetricsOptIn(event) {\n    const prevState = this.store.getState().eventsBeforeMetricsOptIn;\n    this.store.updateState({\n      eventsBeforeMetricsOptIn: [...prevState, event],\n    });\n  }\n\n  // Add or update traits for tracking.\n  updateTraits(newTraits) {\n    const { traits } = this.store.getState();\n    this.store.updateState({\n      traits: { ...traits, ...newTraits },\n    });\n  }\n\n  // Retrieve (or generate if doesn't exist) the client metametrics id\n  getMetaMetricsId() {\n    let { metaMetricsId } = this.state;\n    if (!metaMetricsId) {\n      metaMetricsId = this.generateMetaMetricsId();\n      this.store.updateState({ metaMetricsId });\n    }\n    return metaMetricsId;\n  }\n\n  /** PRIVATE METHODS */\n\n  /**\n   * Build the context object to attach to page and track events.\n   *\n   * @private\n   * @param {Pick<MetaMetricsContext, 'referrer'>} [referrer] - dapp origin that initialized\n   *  the notification window.\n   * @param {Pick<MetaMetricsContext, 'page'>} [page] - page object describing the current\n   *  view of the extension. Defaults to the background-process object.\n   * @returns {MetaMetricsContext}\n   */\n  _buildContext(referrer, page = METAMETRICS_BACKGROUND_PAGE_OBJECT) {\n\n    return {\n      app: {\n        name: 'MetaMask Extension',\n        version: this.version,\n      },\n      userAgent: window.navigator.userAgent,\n      page,\n      referrer,\n      marketingCampaignCookieId: this.state.marketingCampaignCookieId,\n    };\n  }\n\n  /**\n   * Build's the event payload, processing all fields into a format that can be\n   * fed to Segment's track method\n   *\n   * @private\n   * @param {\n   *  Omit<MetaMetricsEventPayload, 'sensitiveProperties'>\n   * } rawPayload - raw payload provided to trackEvent\n   * @returns {SegmentEventPayload} formatted event payload for segment\n   */\n  _buildEventPayload(rawPayload) {\n    const {\n      event,\n      properties,\n      revenue,\n      value,\n      currency,\n      category,\n      page,\n      referrer,\n      environmentType = ENVIRONMENT_TYPE_BACKGROUND,\n    } = rawPayload;\n\n\n    return {\n      event,\n      messageId: buildUniqueMessageId(rawPayload),\n      properties: {\n        // These values are omitted from properties because they have special meaning\n        // in segment. https://segment.com/docs/connections/spec/track/#properties.\n        // to avoid accidentally using these inappropriately, you must add them as top\n        // level properties on the event payload. We also exclude locale to prevent consumers\n        // from overwriting this context level property. We track it as a property\n        // because not all destinations map locale from context.\n        ...omit(properties, ['revenue', 'locale', 'currency', 'value']),\n        revenue,\n        value,\n        currency,\n        category,\n        locale: this.locale,\n        chain_id: properties?.chain_id ?? this.chainId,\n        environment_type: environmentType,\n      },\n      context: this._buildContext(referrer, page),\n    };\n  }\n\n  /**\n   * This method generates the MetaMetrics user traits object, omitting any\n   * traits that have not changed since the last invocation of this method.\n   *\n   * @param {object} metamaskState - Full metamask state object.\n   * @returns {MetaMetricsTraits | null} traits that have changed since last update\n   */\n  _buildUserTraitsObject(metamaskState) {\n    const { traits, previousUserTraits } = this.store.getState();\n\n    /** @type {MetaMetricsTraits} */\n    const currentTraits = {\n      [MetaMetricsUserTrait.AddressBookEntries]: sum(\n        Object.values(metamaskState.addressBook).map(size),\n      ),\n      [MetaMetricsUserTrait.InstallDateExt]:\n        traits[MetaMetricsUserTrait.InstallDateExt] || '',\n      [MetaMetricsUserTrait.LedgerConnectionType]:\n        metamaskState.ledgerTransportType,\n      [MetaMetricsUserTrait.NetworksAdded]: Object.values(\n        metamaskState.networkConfigurationsByChainId,\n      ).map((networkConfiguration) => networkConfiguration.chainId),\n      [MetaMetricsUserTrait.NetworksWithoutTicker]: Object.values(\n        metamaskState.networkConfigurationsByChainId,\n      )\n        .filter(({ nativeCurrency }) => !nativeCurrency)\n        .map(({ chainId }) => chainId),\n      [MetaMetricsUserTrait.NftAutodetectionEnabled]:\n        metamaskState.useNftDetection,\n      [MetaMetricsUserTrait.NumberOfAccounts]: Object.values(\n        metamaskState.internalAccounts.accounts,\n      ).length,\n      [MetaMetricsUserTrait.NumberOfNftCollections]:\n        this._getAllUniqueNFTAddressesLength(metamaskState.allNfts),\n      [MetaMetricsUserTrait.NumberOfNfts]: this._getAllNFTsFlattened(\n        metamaskState.allNfts,\n      ).length,\n      [MetaMetricsUserTrait.NumberOfTokens]:\n        this._getNumberOfTokens(metamaskState),\n      [MetaMetricsUserTrait.OpenseaApiEnabled]: metamaskState.openSeaEnabled,\n      [MetaMetricsUserTrait.ThreeBoxEnabled]: false, // deprecated, hard-coded as false\n      [MetaMetricsUserTrait.Theme]: metamaskState.theme || 'default',\n      [MetaMetricsUserTrait.TokenDetectionEnabled]:\n        metamaskState.useTokenDetection,\n      [MetaMetricsUserTrait.UseNativeCurrencyAsPrimaryCurrency]:\n        metamaskState.useNativeCurrencyAsPrimaryCurrency,\n      [MetaMetricsUserTrait.CurrentCurrency]: metamaskState.currentCurrency,\n      [MetaMetricsUserTrait.SecurityProviders]:\n        metamaskState.securityAlertsEnabled ? ['blockaid'] : [],\n      [MetaMetricsUserTrait.PetnameAddressCount]:\n        this._getPetnameAddressCount(metamaskState),\n      [MetaMetricsUserTrait.IsMetricsOptedIn]:\n        metamaskState.participateInMetaMetrics,\n      [MetaMetricsUserTrait.HasMarketingConsent]:\n        metamaskState.dataCollectionForMarketing,\n    };\n\n    if (!previousUserTraits) {\n      this.store.updateState({ previousUserTraits: currentTraits });\n      return currentTraits;\n    }\n\n    if (previousUserTraits && !isEqual(previousUserTraits, currentTraits)) {\n      const updates = pickBy(\n        currentTraits,\n        (v, k) => !isEqual(previousUserTraits[k], v),\n      );\n      this.store.updateState({ previousUserTraits: currentTraits });\n      return updates;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns a new object of all valid user traits. For dates, we transform them into ISO-8601 timestamp strings.\n   *\n   * @see {@link https://segment.com/docs/connections/spec/common/#timestamps}\n   * @param {object} userTraits\n   * @returns {object}\n   */\n  _buildValidTraits(userTraits) {\n    return Object.entries(userTraits).reduce((validTraits, [key, value]) => {\n      if (this._isValidTraitDate(value)) {\n        validTraits[key] = value.toISOString();\n      } else if (this._isValidTrait(value)) {\n        validTraits[key] = value;\n      } else {\n        console.warn(\n          `MetaMetricsController: \"${key}\" value is not a valid trait type`,\n        );\n      }\n      return validTraits;\n    }, {});\n  }\n\n  /**\n   * Returns an array of all of the NFTs the user\n   * possesses across all networks and accounts.\n   *\n   * @param {object} allNfts\n   * @returns {[]}\n   */\n  _getAllNFTsFlattened = memoize((allNfts = {}) => {\n    return Object.values(allNfts).reduce((result, chainNFTs) => {\n      return result.concat(...Object.values(chainNFTs));\n    }, []);\n  });\n\n  /**\n   * Returns the number of unique NFT addresses the user\n   * possesses across all networks and accounts.\n   *\n   * @param {object} allNfts\n   * @returns {number}\n   */\n  _getAllUniqueNFTAddressesLength(allNfts = {}) {\n    const allNFTAddresses = this._getAllNFTsFlattened(allNfts).map(\n      (nft) => nft.address,\n    );\n    const uniqueAddresses = new Set(allNFTAddresses);\n    return uniqueAddresses.size;\n  }\n\n  /**\n   * @param {object} metamaskState\n   * @returns number of unique token addresses\n   */\n  _getNumberOfTokens(metamaskState) {\n    return Object.values(metamaskState.allTokens).reduce(\n      (result, accountsByChain) => {\n        return result + sum(Object.values(accountsByChain).map(size));\n      },\n      0,\n    );\n  }\n\n  /**\n   * Calls segment.identify with given user traits\n   *\n   * @see {@link https://segment.com/docs/connections/sources/catalog/libraries/server/node/#identify}\n   * @private\n   * @param {object} userTraits\n   */\n  _identify(userTraits) {\n    const { metaMetricsId } = this.state;\n\n    if (!userTraits || Object.keys(userTraits).length === 0) {\n      console.warn('MetaMetricsController#_identify: No userTraits found');\n      return;\n    }\n\n    try {\n      this._submitSegmentAPICall('identify', {\n        userId: metaMetricsId,\n        traits: userTraits,\n      });\n    } catch (err) {\n      this._captureException(err);\n    }\n  }\n\n  /**\n   * Validates the trait value. Segment accepts any data type. We are adding validation here to\n   * support data types for our Segment destination(s) e.g. MixPanel\n   *\n   * @param {*} value\n   * @returns {boolean}\n   */\n  _isValidTrait(value) {\n    const type = typeof value;\n\n    return (\n      type === 'string' ||\n      type === 'boolean' ||\n      type === 'number' ||\n      this._isValidTraitArray(value) ||\n      this._isValidTraitDate(value)\n    );\n  }\n\n  /**\n   * Segment accepts any data type value. We have special logic to validate arrays.\n   *\n   * @param {*} value\n   * @returns {boolean}\n   */\n  _isValidTraitArray = (value) => {\n    return (\n      Array.isArray(value) &&\n      (value.every((element) => {\n        return typeof element === 'string';\n      }) ||\n        value.every((element) => {\n          return typeof element === 'boolean';\n        }) ||\n        value.every((element) => {\n          return typeof element === 'number';\n        }))\n    );\n  };\n\n  /**\n   * Returns true if the value is an accepted date type\n   *\n   * @param {*} value\n   * @returns {boolean}\n   */\n  _isValidTraitDate = (value) => {\n    return Object.prototype.toString.call(value) === '[object Date]';\n  };\n\n  /**\n   * Perform validation on the payload and update the id type to use before\n   * sending to Segment. Also examines the options to route and handle the\n   * event appropriately.\n   *\n   * @private\n   * @param {SegmentEventPayload} payload - properties to attach to event\n   * @param {MetaMetricsEventOptions} [options] - options for routing and\n   *  handling the event\n   * @returns {Promise<void>}\n   */\n  _track(payload, options) {\n    const {\n      isOptIn,\n      metaMetricsId: metaMetricsIdOverride,\n      matomoEvent,\n      flushImmediately,\n    } = options || {};\n    let idType = 'userId';\n    let idValue = this.state.metaMetricsId;\n    let excludeMetaMetricsId = options?.excludeMetaMetricsId ?? false;\n    // This is carried over from the old implementation, and will likely need\n    // to be updated to work with the new tracking plan. I think we should use\n    // a config setting for this instead of trying to match the event name\n    const isSendFlow = Boolean(payload.event.match(/^send|^confirm/iu));\n    // do not filter if excludeMetaMetricsId is explicitly set to false\n    if (options?.excludeMetaMetricsId !== false && isSendFlow) {\n      excludeMetaMetricsId = true;\n    }\n    // If we are tracking sensitive data we will always use the anonymousId\n    // property as well as our METAMETRICS_ANONYMOUS_ID. This prevents us from\n    // associating potentially identifiable information with a specific id.\n    // During the opt in flow we will track all events, but do so with the\n    // anonymous id. The one exception to that rule is after the user opts in\n    // to MetaMetrics. When that happens we receive back the user's new\n    // MetaMetrics id before it is fully persisted to state. To avoid a race\n    // condition we explicitly pass the new id to the track method. In that\n    // case we will track the opt in event to the user's id. In all other cases\n    // we use the metaMetricsId from state.\n    if (excludeMetaMetricsId || (isOptIn && !metaMetricsIdOverride)) {\n      idType = 'anonymousId';\n      idValue = METAMETRICS_ANONYMOUS_ID;\n    } else if (isOptIn && metaMetricsIdOverride) {\n      idValue = metaMetricsIdOverride;\n    }\n    payload[idType] = idValue;\n\n    // If this is an event on the old matomo schema, add a key to the payload\n    // to designate it as such\n    if (matomoEvent === true) {\n      payload.properties.legacy_event = true;\n    }\n\n    // Promises will only resolve when the event is sent to segment. For any\n    // event that relies on this promise being fulfilled before performing UI\n    // updates, or otherwise delaying user interaction, supply the\n    // 'flushImmediately' flag to the trackEvent method.\n    return new Promise((resolve, reject) => {\n      const callback = (err) => {\n        if (err) {\n          // The error that segment gives us has some manipulation done to it\n          // that seemingly breaks with lockdown enabled. Creating a new error\n          // here prevents the system from freezing when the network request to\n          // segment fails for any reason.\n          const safeError = new Error(err.message);\n          safeError.stack = err.stack;\n          return reject(safeError);\n        }\n        return resolve();\n      };\n\n      this._submitSegmentAPICall('track', payload, callback);\n      if (flushImmediately) {\n        this.segment.flush();\n      }\n    });\n  }\n\n  // Method below submits the request to analytics SDK.\n  // It will also add event to controller store\n  // and pass a callback to remove it from store once request is submitted to segment\n  // Saving segmentApiCalls in controller store in MV3 ensures that events are tracked\n  // even if service worker terminates before events are submiteed to segment.\n  _submitSegmentAPICall(eventType, payload, callback) {\n    const {\n      metaMetricsId,\n      participateInMetaMetrics,\n      latestNonAnonymousEventTimestamp,\n    } = this.state;\n    if (!participateInMetaMetrics || !metaMetricsId) {\n      return;\n    }\n\n    const messageId = payload.messageId || generateRandomId();\n    let timestamp = new Date();\n    if (payload.timestamp) {\n      const payloadDate = new Date(payload.timestamp);\n      if (isValidDate(payloadDate)) {\n        timestamp = payloadDate;\n      }\n    }\n    const modifiedPayload = { ...payload, messageId, timestamp };\n    this.store.updateState({\n      ...this.store.getState(),\n      latestNonAnonymousEventTimestamp:\n        modifiedPayload.anonymousId === METAMETRICS_ANONYMOUS_ID\n          ? latestNonAnonymousEventTimestamp\n          : timestamp.valueOf(),\n      segmentApiCalls: {\n        ...this.store.getState().segmentApiCalls,\n        [messageId]: {\n          eventType,\n          payload: {\n            ...modifiedPayload,\n            timestamp: modifiedPayload.timestamp.toString(),\n          },\n        },\n      },\n    });\n    const modifiedCallback = (result) => {\n      const { segmentApiCalls } = this.store.getState();\n      delete segmentApiCalls[messageId];\n      this.store.updateState({\n        segmentApiCalls,\n      });\n      return callback?.(result);\n    };\n    this.segment[eventType](modifiedPayload, modifiedCallback);\n  }\n\n  /**\n   * Returns the total number of Ethereum addresses with saved petnames,\n   * including all chain ID variations.\n   *\n   * @param {object} metamaskState\n   * @returns {number}\n   */\n  _getPetnameAddressCount(metamaskState) {\n    const addressNames = metamaskState.names?.[NameType.ETHEREUM_ADDRESS] ?? {};\n\n    return Object.keys(addressNames).reduce((totalCount, address) => {\n      const addressEntry = addressNames[address];\n\n      const addressNameCount = Object.keys(addressEntry).reduce(\n        (count, chainId) => {\n          const hasName = Boolean(addressEntry[chainId].name?.length);\n          return count + (hasName ? 1 : 0);\n        },\n        0,\n      );\n\n      return totalCount + addressNameCount;\n    }, 0);\n  }\n}\n","import { cloneDeep, isPlainObject } from 'lodash';\n\nconst version = 60;\nconst SUPPORT_NOTIFICATION_KEY = 2;\nconst SUPPORT_NOTIFICATION_DATE = '2020-08-31';\n\n/**\n * Removes the support survey notification\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const notifications = state?.NotificationController?.notifications;\n  if (isPlainObject(notifications)) {\n    if (\n      notifications[SUPPORT_NOTIFICATION_KEY]?.date ===\n      SUPPORT_NOTIFICATION_DATE\n    ) {\n      delete state.NotificationController.notifications[\n        SUPPORT_NOTIFICATION_KEY\n      ];\n    }\n  }\n  return state;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/BaseControllerV1.ts\nvar BaseControllerV1 = class {\n  /**\n   * Creates a BaseControllerV1 instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config = {}, state = {}) {\n    /**\n     * Default options used to configure this controller\n     */\n    this.defaultConfig = {};\n    /**\n     * Default state set on this controller\n     */\n    this.defaultState = {};\n    /**\n     * Determines if listeners are notified of state changes\n     */\n    this.disabled = false;\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"BaseController\";\n    this.internalConfig = this.defaultConfig;\n    this.internalState = this.defaultState;\n    this.internalListeners = [];\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns This controller instance.\n   */\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n  /**\n   * Retrieves current controller configuration options.\n   *\n   * @returns The current configuration.\n   */\n  get config() {\n    return this.internalConfig;\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return this.internalState;\n  }\n  /**\n   * Updates controller configuration.\n   *\n   * @param config - New configuration options.\n   * @param overwrite - Overwrite config instead of merging.\n   * @param fullUpdate - Boolean that defines if the update is partial or not.\n   */\n  configure(config, overwrite = false, fullUpdate = true) {\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key of Object.keys(this.internalConfig)) {\n        const value = this.internalConfig[key];\n        if (value !== void 0) {\n          this[key] = value;\n        }\n      }\n    } else {\n      for (const key of Object.keys(config)) {\n        if (this.internalConfig[key] !== void 0) {\n          const value = config[key];\n          this.internalConfig[key] = value;\n          this[key] = value;\n        }\n      }\n    }\n  }\n  /**\n   * Notifies all subscribed listeners of current state.\n   */\n  notify() {\n    if (this.disabled) {\n      return;\n    }\n    this.internalListeners.forEach((listener) => {\n      listener(this.internalState);\n    });\n  }\n  /**\n   * Adds new listener to be notified of state changes.\n   *\n   * @param listener - The callback triggered when state changes.\n   */\n  subscribe(listener) {\n    this.internalListeners.push(listener);\n  }\n  /**\n   * Removes existing listener from receiving state changes.\n   *\n   * @param listener - The callback to remove.\n   * @returns `true` if a listener is found and unsubscribed.\n   */\n  unsubscribe(listener) {\n    const index = this.internalListeners.findIndex((cb) => listener === cb);\n    index > -1 && this.internalListeners.splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Updates controller state.\n   *\n   * @param state - The new state.\n   * @param overwrite - Overwrite state instead of merging.\n   */\n  update(state, overwrite = false) {\n    this.internalState = overwrite ? Object.assign({}, state) : Object.assign({}, this.internalState, state);\n    this.notify();\n  }\n};\nvar BaseControllerV1_default = BaseControllerV1;\n\n\n\n\nexports.BaseControllerV1 = BaseControllerV1; exports.BaseControllerV1_default = BaseControllerV1_default;\n//# sourceMappingURL=chunk-FTHCJ6HY.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/ControllerMessenger.ts\nvar _actions, _events, _initialEventPayloadGetters, _eventPayloadCache;\nvar ControllerMessenger = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _actions, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _events, /* @__PURE__ */ new Map());\n    /**\n     * A map of functions for getting the initial event payload.\n     *\n     * Used only for events that represent state changes.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _initialEventPayloadGetters, /* @__PURE__ */ new Map());\n    /**\n     * A cache of selector return values for their respective handlers.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _eventPayloadCache, /* @__PURE__ */ new Map());\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw when a handler has been registered for this action type already.\n   * @template ActionType - A type union of Action type strings.\n   */\n  registerActionHandler(actionType, handler) {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).has(actionType)) {\n      throw new Error(\n        `A handler for ${actionType} has already been registered`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).set(actionType, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @template ActionType - A type union of Action type strings.\n   */\n  unregisterActionHandler(actionType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).delete(actionType);\n  }\n  /**\n   * Unregister all action handlers.\n   *\n   * This prevents all actions from being called.\n   */\n  clearActions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).clear();\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    const handler = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).get(actionType);\n    if (!handler) {\n      throw new Error(`A handler for ${actionType} has not been registered`);\n    }\n    return handler(...params);\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).set(eventType, getPayload);\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * Note that this method should never throw directly. Any errors from\n   * subscribers are captured and re-thrown in a timeout handler.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @template EventType - A type union of Event type strings.\n   */\n  publish(eventType, ...payload) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (subscribers) {\n      for (const [handler, selector] of subscribers.entries()) {\n        try {\n          if (selector) {\n            const previousValue = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).get(handler);\n            const newValue = selector(...payload);\n            if (newValue !== previousValue) {\n              _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, newValue);\n              handler(newValue, previousValue);\n            }\n          } else {\n            handler(...payload);\n          }\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          });\n        }\n      }\n    }\n  }\n  subscribe(eventType, handler, selector) {\n    let subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers) {\n      subscribers = /* @__PURE__ */ new Map();\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).set(eventType, subscribers);\n    }\n    subscribers.set(handler, selector);\n    if (selector) {\n      const getPayload = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).get(eventType);\n      if (getPayload) {\n        const initialValue = selector(...getPayload());\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, initialValue);\n      }\n    }\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw when the given event handler is not registered for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  unsubscribe(eventType, handler) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers || !subscribers.has(handler)) {\n      throw new Error(`Subscription not found for event: ${eventType}`);\n    }\n    const selector = subscribers.get(handler);\n    if (selector) {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).delete(handler);\n    }\n    subscribers.delete(handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  clearEventSubscriptions(eventType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).delete(eventType);\n  }\n  /**\n   * Clear all subscriptions.\n   *\n   * This will remove all subscribed handlers for all events.\n   */\n  clearSubscriptions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).clear();\n  }\n  /**\n   * Get a restricted controller messenger\n   *\n   * Returns a wrapper around the controller messenger instance that restricts access to actions\n   * and events. The provided allowlists grant the ability to call the listed actions and subscribe\n   * to the listed events. The \"name\" provided grants ownership of any actions and events under\n   * that namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - Controller messenger options.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   * @template Namespace - The namespace for this messenger. Typically this is the name of the controller or\n   * module that this messenger has been created for. The authority to publish events and register\n   * actions under this namespace is granted to this restricted messenger instance.\n   * @template AllowedAction - A type union of the 'type' string for any allowed actions.\n   * This must not include internal actions that are in the messenger's namespace.\n   * @template AllowedEvent - A type union of the 'type' string for any allowed events.\n   * This must not include internal events that are in the messenger's namespace.\n   * @returns The restricted controller messenger.\n   */\n  getRestricted({\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    return new (0, _chunkUJFCPTF3js.RestrictedControllerMessenger)({\n      controllerMessenger: this,\n      name,\n      allowedActions,\n      allowedEvents\n    });\n  }\n};\n_actions = new WeakMap();\n_events = new WeakMap();\n_initialEventPayloadGetters = new WeakMap();\n_eventPayloadCache = new WeakMap();\n\n\n\nexports.ControllerMessenger = ControllerMessenger;\n//# sourceMappingURL=chunk-G42723LG.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/BaseControllerV2.ts\nvar _immer = require('immer');\n_immer.enablePatches.call(void 0, );\nvar _internalState;\nvar BaseController = class {\n  /**\n   * Creates a BaseController instance.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - Controller messaging system.\n   * @param options.metadata - ControllerState metadata, describing how to \"anonymize\" the state, and which\n   * parts should be persisted.\n   * @param options.name - The name of the controller, used as a namespace for events and actions.\n   * @param options.state - Initial controller state.\n   */\n  constructor({\n    messenger,\n    metadata,\n    name,\n    state\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _internalState, void 0);\n    this.messagingSystem = messenger;\n    this.name = name;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, _immer.freeze.call(void 0, state, true));\n    this.metadata = metadata;\n    this.messagingSystem.registerActionHandler(\n      `${name}:getState`,\n      () => this.state\n    );\n    this.messagingSystem.registerInitialEventPayload({\n      eventType: `${name}:stateChange`,\n      getPayload: () => [this.state, []]\n    });\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState);\n  }\n  set state(_) {\n    throw new Error(\n      `Controller state cannot be directly mutated; use 'update' method instead.`\n    );\n  }\n  /**\n   * Updates controller state. Accepts a callback that is passed a draft copy\n   * of the controller state. If a value is returned, it is set as the new\n   * state. Otherwise, any changes made within that callback to the draft are\n   * applied to the controller state.\n   *\n   * @param callback - Callback for updating state, passed a draft state\n   * object. Return a new state object or mutate the draft to update state.\n   * @returns An object that has the next state, patches applied in the update and inverse patches to\n   * rollback the update.\n   */\n  update(callback) {\n    const [nextState, patches, inversePatches] = _immer.produceWithPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), callback);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n    return { nextState, patches, inversePatches };\n  }\n  /**\n   * Applies immer patches to the current state. The patches come from the\n   * update function itself and can either be normal or inverse patches.\n   *\n   * @param patches - An array of immer patches that are to be applied to make\n   * or undo changes.\n   */\n  applyPatches(patches) {\n    const nextState = _immer.applyPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), patches);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n  }\n  /**\n   * Prepares the controller for garbage collection. This should be extended\n   * by any subclasses to clean up any additional connections or events.\n   *\n   * The only cleanup performed here is to remove listeners. While technically\n   * this is not required to ensure this instance is garbage collected, it at\n   * least ensures this instance won't be responsible for preventing the\n   * listeners from being garbage collected.\n   */\n  destroy() {\n    this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`);\n  }\n};\n_internalState = new WeakMap();\nfunction getAnonymizedState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"anonymous\");\n}\nfunction getPersistentState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"persist\");\n}\nfunction deriveStateFromMetadata(state, metadata, metadataProperty) {\n  return Object.keys(state).reduce((derivedState, key) => {\n    try {\n      const stateMetadata = metadata[key];\n      if (!stateMetadata) {\n        throw new Error(`No metadata found for '${String(key)}'`);\n      }\n      const propertyMetadata = stateMetadata[metadataProperty];\n      const stateProperty = state[key];\n      if (typeof propertyMetadata === \"function\") {\n        derivedState[key] = propertyMetadata(stateProperty);\n      } else if (propertyMetadata) {\n        derivedState[key] = stateProperty;\n      }\n      return derivedState;\n    } catch (error) {\n      setTimeout(() => {\n        throw error;\n      });\n      return derivedState;\n    }\n  }, {});\n}\n\n\n\n\n\nexports.BaseController = BaseController; exports.getAnonymizedState = getAnonymizedState; exports.getPersistentState = getPersistentState;\n//# sourceMappingURL=chunk-IURK6TKD.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/RestrictedControllerMessenger.ts\nvar _controllerMessenger, _controllerName, _allowedActions, _allowedEvents, _isAllowedEvent, isAllowedEvent_fn, _isAllowedAction, isAllowedAction_fn, _isInCurrentNamespace, isInCurrentNamespace_fn;\nvar RestrictedControllerMessenger = class {\n  /**\n   * Constructs a restricted controller messenger\n   *\n   * The provided allowlists grant the ability to call the listed actions and subscribe to the\n   * listed events. The \"name\" provided grants ownership of any actions and events under that\n   * namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - The controller options.\n   * @param options.controllerMessenger - The controller messenger instance that is being wrapped.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   */\n  constructor({\n    controllerMessenger,\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    /**\n     * Determine whether the given event type is allowed. Event types are\n     * allowed if they are in the current namespace or on the list of\n     * allowed events.\n     *\n     * @param eventType - The event type to check.\n     * @returns Whether the event type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedEvent);\n    /**\n     * Determine whether the given action type is allowed. Action types\n     * are allowed if they are in the current namespace or on the list of\n     * allowed actions.\n     *\n     * @param actionType - The action type to check.\n     * @returns Whether the action type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedAction);\n    /**\n     * Determine whether the given name is within the current namespace.\n     *\n     * @param name - The name to check\n     * @returns Whether the name is within the current namespace\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isInCurrentNamespace);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerMessenger, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerName, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedActions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedEvents, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerMessenger, controllerMessenger);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerName, name);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedActions, allowedActions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedEvents, allowedEvents);\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * The action type this handler is registered under *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw if an action handler that is not in the current namespace is being registered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  registerActionHandler(action, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed registering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerActionHandler(action, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * The action type being unregistered *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unique identifier for this action.\n   * @throws Will throw if an action handler that is not in the current namespace is being unregistered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  unregisterActionHandler(action) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed unregistering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unregisterActionHandler(action);\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * The action type being called must be on the action allowlist.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of allowed Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedAction, isAllowedAction_fn).call(this, actionType)) {\n      throw new Error(`Action missing from allow list: ${actionType}`);\n    }\n    const response = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).call(\n      actionType,\n      ...params\n    );\n    return response;\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * The event type *must* be in the current namespace\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerInitialEventPayload({\n      eventType,\n      getPayload\n    });\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * The event type being published *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @throws Will throw if an event that is not in the current namespace is being published.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  publish(event, ...payload) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).publish(event, ...payload);\n  }\n  subscribe(event, handler, selector) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    if (selector) {\n      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler, selector);\n    }\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler);\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * The event type being unsubscribed to must be on the event allowlist.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw if the given event is not an allowed event for this controller messenger.\n   * @template EventType - A type union of allowed Event type strings.\n   */\n  unsubscribe(event, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unsubscribe(event, handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * The event type being cleared *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @throws Will throw if a subscription for an event that is not in the current namespace is being cleared.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  clearEventSubscriptions(event) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed clearing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).clearEventSubscriptions(event);\n  }\n};\n_controllerMessenger = new WeakMap();\n_controllerName = new WeakMap();\n_allowedActions = new WeakMap();\n_allowedEvents = new WeakMap();\n_isAllowedEvent = new WeakSet();\nisAllowedEvent_fn = function(eventType) {\n  const allowedEvents = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedEvents);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType) || allowedEvents !== null && allowedEvents.includes(eventType);\n};\n_isAllowedAction = new WeakSet();\nisAllowedAction_fn = function(actionType) {\n  const allowedActions = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedActions);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, actionType) || allowedActions !== null && allowedActions.includes(actionType);\n};\n_isInCurrentNamespace = new WeakSet();\nisInCurrentNamespace_fn = function(name) {\n  return name.startsWith(`${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:`);\n};\n\n\n\nexports.RestrictedControllerMessenger = RestrictedControllerMessenger;\n//# sourceMappingURL=chunk-UJFCPTF3.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkFTHCJ6HYjs = require('./chunk-FTHCJ6HY.js');\n\n\n\n\nvar _chunkIURK6TKDjs = require('./chunk-IURK6TKD.js');\n\n\nvar _chunkG42723LGjs = require('./chunk-G42723LG.js');\n\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\n\n\nexports.BaseController = _chunkIURK6TKDjs.BaseController; exports.BaseControllerV1 = _chunkFTHCJ6HYjs.BaseControllerV1; exports.ControllerMessenger = _chunkG42723LGjs.ControllerMessenger; exports.RestrictedControllerMessenger = _chunkUJFCPTF3js.RestrictedControllerMessenger; exports.getAnonymizedState = _chunkIURK6TKDjs.getAnonymizedState; exports.getPersistentState = _chunkIURK6TKDjs.getPersistentState;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP = exports.ApprovalType = exports.ORIGIN_METAMASK = exports.OPENSEA_PROXY_URL = exports.BUILT_IN_NETWORKS = exports.TESTNET_TICKER_SYMBOLS = exports.ASSET_TYPES = exports.GWEI = exports.ERC1155_TOKEN_RECEIVER_INTERFACE_ID = exports.ERC1155_METADATA_URI_INTERFACE_ID = exports.ERC1155_INTERFACE_ID = exports.ERC721_ENUMERABLE_INTERFACE_ID = exports.ERC721_METADATA_INTERFACE_ID = exports.ERC721_INTERFACE_ID = exports.ERC20 = exports.ERC1155 = exports.ERC721 = exports.MAX_SAFE_CHAIN_ID = exports.GANACHE_CHAIN_ID = exports.IPFS_DEFAULT_GATEWAY_URL = exports.FALL_BACK_VS_CURRENCY = exports.RPC = void 0;\nconst types_1 = require(\"./types\");\nexports.RPC = 'rpc';\nexports.FALL_BACK_VS_CURRENCY = 'ETH';\nexports.IPFS_DEFAULT_GATEWAY_URL = 'https://cloudflare-ipfs.com/ipfs/';\n// NETWORKS ID\n// `toHex` not invoked to avoid cyclic dependency\nexports.GANACHE_CHAIN_ID = '0x539'; // toHex(1337)\n/**\n * The largest possible chain ID we can handle.\n * Explanation: https://gist.github.com/rekmarks/a47bd5f2525936c4b8eee31a16345553\n */\nexports.MAX_SAFE_CHAIN_ID = 4503599627370476;\n// TOKEN STANDARDS\nexports.ERC721 = 'ERC721';\nexports.ERC1155 = 'ERC1155';\nexports.ERC20 = 'ERC20';\n// TOKEN INTERFACE IDS\nexports.ERC721_INTERFACE_ID = '0x80ac58cd';\nexports.ERC721_METADATA_INTERFACE_ID = '0x5b5e139f';\nexports.ERC721_ENUMERABLE_INTERFACE_ID = '0x780e9d63';\nexports.ERC1155_INTERFACE_ID = '0xd9b67a26';\nexports.ERC1155_METADATA_URI_INTERFACE_ID = '0x0e89341c';\nexports.ERC1155_TOKEN_RECEIVER_INTERFACE_ID = '0x4e2312e0';\n// UNITS\nexports.GWEI = 'gwei';\n// ASSET TYPES\nexports.ASSET_TYPES = {\n    NATIVE: 'NATIVE',\n    TOKEN: 'TOKEN',\n    NFT: 'NFT',\n    UNKNOWN: 'UNKNOWN',\n};\n// TICKER SYMBOLS\nexports.TESTNET_TICKER_SYMBOLS = {\n    GOERLI: 'GoerliETH',\n    SEPOLIA: 'SepoliaETH',\n    LINEA_GOERLI: 'LineaETH',\n};\n/**\n * Map of all build-in Infura networks to their network, ticker and chain IDs.\n */\nexports.BUILT_IN_NETWORKS = {\n    [types_1.NetworkType.goerli]: {\n        chainId: types_1.ChainId.goerli,\n        ticker: types_1.NetworksTicker.goerli,\n        rpcPrefs: {\n            blockExplorerUrl: `https://${types_1.NetworkType.goerli}.etherscan.io`,\n        },\n    },\n    [types_1.NetworkType.sepolia]: {\n        chainId: types_1.ChainId.sepolia,\n        ticker: types_1.NetworksTicker.sepolia,\n        rpcPrefs: {\n            blockExplorerUrl: `https://${types_1.NetworkType.sepolia}.etherscan.io`,\n        },\n    },\n    [types_1.NetworkType.mainnet]: {\n        chainId: types_1.ChainId.mainnet,\n        ticker: types_1.NetworksTicker.mainnet,\n        rpcPrefs: {\n            blockExplorerUrl: 'https://etherscan.io',\n        },\n    },\n    [types_1.NetworkType['linea-goerli']]: {\n        chainId: types_1.ChainId['linea-goerli'],\n        ticker: types_1.NetworksTicker['linea-goerli'],\n        rpcPrefs: {\n            blockExplorerUrl: 'https://goerli.lineascan.build',\n        },\n    },\n    [types_1.NetworkType['linea-mainnet']]: {\n        chainId: types_1.ChainId['linea-mainnet'],\n        ticker: types_1.NetworksTicker['linea-mainnet'],\n        rpcPrefs: {\n            blockExplorerUrl: 'https://lineascan.build',\n        },\n    },\n    [types_1.NetworkType.rpc]: {\n        chainId: undefined,\n        blockExplorerUrl: undefined,\n        ticker: undefined,\n        rpcPrefs: undefined,\n    },\n};\n// APIs\nexports.OPENSEA_PROXY_URL = 'https://proxy.metafi.codefi.network/opensea/v1/api/v2';\n// Default origin for controllers\nexports.ORIGIN_METAMASK = 'metamask';\n/**\n * Approval request types for various operations.\n * These types are used by different controllers to create and manage\n * approval requests consistently.\n */\nvar ApprovalType;\n(function (ApprovalType) {\n    ApprovalType[\"AddEthereumChain\"] = \"wallet_addEthereumChain\";\n    ApprovalType[\"ConnectAccounts\"] = \"connect_accounts\";\n    ApprovalType[\"EthDecrypt\"] = \"eth_decrypt\";\n    ApprovalType[\"EthGetEncryptionPublicKey\"] = \"eth_getEncryptionPublicKey\";\n    ApprovalType[\"EthSign\"] = \"eth_sign\";\n    ApprovalType[\"EthSignTypedData\"] = \"eth_signTypedData\";\n    ApprovalType[\"PersonalSign\"] = \"personal_sign\";\n    ApprovalType[\"ResultError\"] = \"result_error\";\n    ApprovalType[\"ResultSuccess\"] = \"result_success\";\n    ApprovalType[\"SnapDialogAlert\"] = \"snap_dialog:alert\";\n    ApprovalType[\"SnapDialogConfirmation\"] = \"snap_dialog:confirmation\";\n    ApprovalType[\"SnapDialogPrompt\"] = \"snap_dialog:prompt\";\n    ApprovalType[\"SwitchEthereumChain\"] = \"wallet_switchEthereumChain\";\n    ApprovalType[\"Transaction\"] = \"transaction\";\n    ApprovalType[\"Unlock\"] = \"unlock\";\n    ApprovalType[\"WalletConnect\"] = \"wallet_connect\";\n    ApprovalType[\"WalletRequestPermissions\"] = \"wallet_requestPermissions\";\n    ApprovalType[\"WatchAsset\"] = \"wallet_watchAsset\";\n})(ApprovalType = exports.ApprovalType || (exports.ApprovalType = {}));\nexports.CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP = {\n    [types_1.ChainId.goerli]: types_1.BuiltInNetworkName.Goerli,\n    [types_1.ChainId.sepolia]: types_1.BuiltInNetworkName.Sepolia,\n    [types_1.ChainId.mainnet]: types_1.BuiltInNetworkName.Mainnet,\n    [types_1.ChainId['linea-goerli']]: types_1.BuiltInNetworkName.LineaGoerli,\n    [types_1.ChainId['linea-mainnet']]: types_1.BuiltInNetworkName.LineaMainnet,\n    [types_1.ChainId.aurora]: types_1.BuiltInNetworkName.Aurora,\n};\n//# sourceMappingURL=constants.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./constants\"), exports);\n__exportStar(require(\"./util\"), exports);\n__exportStar(require(\"./types\"), exports);\n__exportStar(require(\"./siwe\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createModuleLogger = exports.projectLogger = void 0;\nconst utils_1 = require(\"@metamask/utils\");\nObject.defineProperty(exports, \"createModuleLogger\", { enumerable: true, get: function () { return utils_1.createModuleLogger; } });\nexports.projectLogger = (0, utils_1.createProjectLogger)('controller-utils');\n//# sourceMappingURL=logger.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.detectSIWE = exports.isValidSIWEOrigin = exports.parseDomainParts = void 0;\nconst utils_1 = require(\"@metamask/utils\");\nconst siwe_parser_1 = require(\"@spruceid/siwe-parser\");\nconst logger_1 = require(\"./logger\");\nconst log = (0, logger_1.createModuleLogger)(logger_1.projectLogger, 'detect-siwe');\n/**\n * This function strips the hex prefix from a string if it has one.\n * If the input is not a string, return it unmodified.\n *\n * @param str - The string to check\n * @returns The string without the hex prefix\n */\nfunction safeStripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return (0, utils_1.remove0x)(str);\n}\n/**\n * This function converts a hex string to text if it's not a 32 byte hex string.\n *\n * @param hex - The hex string to convert to text\n * @returns The text representation of the hex string\n */\nfunction msgHexToText(hex) {\n    try {\n        const stripped = safeStripHexPrefix(hex);\n        const buff = Buffer.from(stripped, 'hex');\n        return buff.length === 32 ? hex : buff.toString('utf8');\n    }\n    catch (e) {\n        log(e);\n        return hex;\n    }\n}\nconst DEFAULT_PORTS_BY_PROTOCOL = {\n    'http:': '80',\n    'https:': '443',\n};\n/**\n * Parses parts from RFC 3986 authority from EIP-4361 `domain` field.\n *\n * @param domain - input string\n * @param originProtocol - implied protocol from origin\n * @returns parsed parts\n */\nconst parseDomainParts = (domain, originProtocol) => {\n    if (domain.match(/^[^/:]*:\\/\\//u)) {\n        return new URL(domain);\n    }\n    return new URL(`${originProtocol}//${domain}`);\n};\nexports.parseDomainParts = parseDomainParts;\n/**\n * Validates origin of a Sign-In With Ethereum (SIWE)(EIP-4361) request.\n * As per spec:\n * hostname must match.\n * port and username must match iff specified.\n * Protocol binding and full same-origin are currently not performed.\n *\n * @param req - Signature request\n * @returns true if origin matches domain; false otherwise\n */\nconst isValidSIWEOrigin = (req) => {\n    var _a;\n    try {\n        const { origin, siwe } = req;\n        // origin = scheme://[user[:password]@]domain[:port]\n        // origin is supplied by environment and must match domain claim in message\n        if (!origin || !((_a = siwe === null || siwe === void 0 ? void 0 : siwe.parsedMessage) === null || _a === void 0 ? void 0 : _a.domain)) {\n            return false;\n        }\n        const originParts = new URL(origin);\n        const domainParts = (0, exports.parseDomainParts)(siwe.parsedMessage.domain, originParts.protocol);\n        if (domainParts.hostname.localeCompare(originParts.hostname, undefined, {\n            sensitivity: 'accent',\n        }) !== 0) {\n            return false;\n        }\n        if (domainParts.port !== '' && domainParts.port !== originParts.port) {\n            // If origin port is not specified, protocol default is implied\n            return (originParts.port === '' &&\n                domainParts.port === DEFAULT_PORTS_BY_PROTOCOL[originParts.protocol]);\n        }\n        if (domainParts.username !== '' &&\n            domainParts.username !== originParts.username) {\n            return false;\n        }\n        return true;\n    }\n    catch (e) {\n        log(e);\n        return false;\n    }\n};\nexports.isValidSIWEOrigin = isValidSIWEOrigin;\n/**\n * This function intercepts a sign message, detects if it's a\n * Sign-In With Ethereum (SIWE)(EIP-4361) message, and returns an object with\n * relevant SIWE data.\n *\n * {@see {@link https://eips.ethereum.org/EIPS/eip-4361}}\n *\n * @param msgParams - The params of the message to sign\n * @param msgParams.data - The data of the message to sign\n * @returns An object with the relevant SIWE data\n */\nconst detectSIWE = (msgParams) => {\n    try {\n        const { data } = msgParams;\n        const message = msgHexToText(data);\n        const parsedMessage = new siwe_parser_1.ParsedMessage(message);\n        return {\n            isSIWEMessage: true,\n            parsedMessage,\n        };\n    }\n    catch (error) {\n        // ignore error, it's not a valid SIWE message\n        return {\n            isSIWEMessage: false,\n            parsedMessage: null,\n        };\n    }\n};\nexports.detectSIWE = detectSIWE;\n//# sourceMappingURL=siwe.js.map","import { cloneDeep } from 'lodash';\n\nconst version = 61;\n\n/**\n * Initialize attributes related to recovery seed phrase reminder\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const currentTime = new Date().getTime();\n  if (state.AppStateController) {\n    state.AppStateController.recoveryPhraseReminderHasBeenShown = false;\n    state.AppStateController.recoveryPhraseReminderLastShown = currentTime;\n  } else {\n    state.AppStateController = {\n      recoveryPhraseReminderHasBeenShown: false,\n      recoveryPhraseReminderLastShown: currentTime,\n    };\n  }\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NetworksTicker = exports.ChainId = exports.BuiltInNetworkName = exports.isInfuraNetworkType = exports.isNetworkType = exports.NetworkType = exports.InfuraNetworkType = void 0;\n/**\n * The names of built-in Infura networks\n */\nexports.InfuraNetworkType = {\n    mainnet: 'mainnet',\n    goerli: 'goerli',\n    sepolia: 'sepolia',\n    'linea-goerli': 'linea-goerli',\n    'linea-mainnet': 'linea-mainnet',\n};\n/**\n * The \"network type\"; either the name of a built-in network, or \"rpc\" for custom networks.\n */\nexports.NetworkType = Object.assign(Object.assign({}, exports.InfuraNetworkType), { rpc: 'rpc' });\n/**\n * A helper to determine whether a given input is NetworkType.\n *\n * @param val - the value to check whether it is NetworkType or not.\n * @returns boolean indicating whether or not the argument is NetworkType.\n */\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isNetworkType(val) {\n    return Object.values(exports.NetworkType).includes(val);\n}\nexports.isNetworkType = isNetworkType;\n/**\n * A type guard to determine whether the input is an InfuraNetworkType.\n *\n * @param value - The value to check.\n * @returns True if the given value is within the InfuraNetworkType enum,\n * false otherwise.\n */\nfunction isInfuraNetworkType(value) {\n    const infuraNetworkTypes = Object.keys(exports.InfuraNetworkType);\n    return infuraNetworkTypes.includes(value);\n}\nexports.isInfuraNetworkType = isInfuraNetworkType;\n/**\n * Names of networks built into the wallet.\n *\n * This includes both Infura and non-Infura networks.\n */\nvar BuiltInNetworkName;\n(function (BuiltInNetworkName) {\n    BuiltInNetworkName[\"Mainnet\"] = \"mainnet\";\n    BuiltInNetworkName[\"Goerli\"] = \"goerli\";\n    BuiltInNetworkName[\"Sepolia\"] = \"sepolia\";\n    BuiltInNetworkName[\"LineaGoerli\"] = \"linea-goerli\";\n    BuiltInNetworkName[\"LineaMainnet\"] = \"linea-mainnet\";\n    BuiltInNetworkName[\"Aurora\"] = \"aurora\";\n})(BuiltInNetworkName = exports.BuiltInNetworkName || (exports.BuiltInNetworkName = {}));\n/**\n * Decimal string chain IDs of built-in networks, by name.\n *\n * `toHex` not invoked to avoid cyclic dependency\n */\nexports.ChainId = {\n    [BuiltInNetworkName.Mainnet]: '0x1',\n    [BuiltInNetworkName.Goerli]: '0x5',\n    [BuiltInNetworkName.Sepolia]: '0xaa36a7',\n    [BuiltInNetworkName.Aurora]: '0x4e454152',\n    [BuiltInNetworkName.LineaGoerli]: '0xe704',\n    [BuiltInNetworkName.LineaMainnet]: '0xe708', // toHex(59144)\n};\nvar NetworksTicker;\n(function (NetworksTicker) {\n    NetworksTicker[\"mainnet\"] = \"ETH\";\n    NetworksTicker[\"goerli\"] = \"GoerliETH\";\n    NetworksTicker[\"sepolia\"] = \"SepoliaETH\";\n    NetworksTicker[\"linea-goerli\"] = \"LineaETH\";\n    NetworksTicker[\"linea-mainnet\"] = \"ETH\";\n    NetworksTicker[\"rpc\"] = \"\";\n})(NetworksTicker = exports.NetworksTicker || (exports.NetworksTicker = {}));\n//# sourceMappingURL=types.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isValidJson = exports.isNonEmptyArray = exports.isPlainObject = exports.convertHexToDecimal = exports.query = exports.normalizeEnsName = exports.timeoutFetch = exports.fetchWithErrorHandling = exports.handleFetch = exports.successfulFetch = exports.isSmartContractCode = exports.isValidHexAddress = exports.toChecksumHexAddress = exports.safelyExecuteWithTimeout = exports.safelyExecute = exports.toHex = exports.fromHex = exports.hexToText = exports.hexToBN = exports.getBuyURL = exports.weiHexToGweiDec = exports.gweiDecToWEIBN = exports.fractionBN = exports.BNToHex = exports.isSafeChainId = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst ethjs_unit_1 = require(\"@metamask/ethjs-unit\");\nconst utils_1 = require(\"@metamask/utils\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst eth_ens_namehash_1 = __importDefault(require(\"eth-ens-namehash\"));\nconst fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\nconst constants_1 = require(\"./constants\");\nconst TIMEOUT_ERROR = new Error('timeout');\n/**\n * Checks whether the given number primitive chain ID is safe.\n * Because some cryptographic libraries we use expect the chain ID to be a\n * number primitive, it must not exceed a certain size.\n *\n * @param chainId - The chain ID to check for safety.\n * @returns Whether the given chain ID is safe.\n */\nfunction isSafeChainId(chainId) {\n    if (!(0, utils_1.isHexString)(chainId)) {\n        return false;\n    }\n    const decimalChainId = Number.parseInt(chainId, (0, utils_1.isStrictHexString)(chainId) ? 16 : 10);\n    return (Number.isSafeInteger(decimalChainId) &&\n        decimalChainId > 0 &&\n        decimalChainId <= constants_1.MAX_SAFE_CHAIN_ID);\n}\nexports.isSafeChainId = isSafeChainId;\n/**\n * Converts a BN object to a hex string with a '0x' prefix.\n *\n * @param inputBn - BN instance to convert to a hex string.\n * @returns A '0x'-prefixed hex string.\n */\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction BNToHex(inputBn) {\n    return (0, utils_1.add0x)(inputBn.toString(16));\n}\nexports.BNToHex = BNToHex;\n/**\n * Used to multiply a BN by a fraction.\n *\n * @param targetBN - Number to multiply by a fraction.\n * @param numerator - Numerator of the fraction multiplier.\n * @param denominator - Denominator of the fraction multiplier.\n * @returns Product of the multiplication.\n */\nfunction fractionBN(\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntargetBN, numerator, denominator) {\n    const numBN = new bn_js_1.default(numerator);\n    const denomBN = new bn_js_1.default(denominator);\n    return targetBN.mul(numBN).div(denomBN);\n}\nexports.fractionBN = fractionBN;\n/**\n * Used to convert a base-10 number from GWEI to WEI. Can handle numbers with decimal parts.\n *\n * @param n - The base 10 number to convert to WEI.\n * @returns The number in WEI, as a BN.\n */\nfunction gweiDecToWEIBN(n) {\n    if (Number.isNaN(n)) {\n        return new bn_js_1.default(0);\n    }\n    const parts = n.toString().split('.');\n    const wholePart = parts[0] || '0';\n    let decimalPart = parts[1] || '';\n    if (!decimalPart) {\n        return (0, ethjs_unit_1.toWei)(wholePart, 'gwei');\n    }\n    if (decimalPart.length <= 9) {\n        return (0, ethjs_unit_1.toWei)(`${wholePart}.${decimalPart}`, 'gwei');\n    }\n    const decimalPartToRemove = decimalPart.slice(9);\n    const decimalRoundingDigit = decimalPartToRemove[0];\n    decimalPart = decimalPart.slice(0, 9);\n    let wei = (0, ethjs_unit_1.toWei)(`${wholePart}.${decimalPart}`, 'gwei');\n    if (Number(decimalRoundingDigit) >= 5) {\n        wei = wei.add(new bn_js_1.default(1));\n    }\n    return wei;\n}\nexports.gweiDecToWEIBN = gweiDecToWEIBN;\n/**\n * Used to convert values from wei hex format to dec gwei format.\n *\n * @param hex - The value in hex wei.\n * @returns The value in dec gwei as string.\n */\nfunction weiHexToGweiDec(hex) {\n    const hexWei = new bn_js_1.default((0, utils_1.remove0x)(hex), 16);\n    return (0, ethjs_unit_1.fromWei)(hexWei, 'gwei');\n}\nexports.weiHexToGweiDec = weiHexToGweiDec;\n/**\n * Return a URL that can be used to obtain ETH for a given network.\n *\n * @param networkCode - Network code of desired network.\n * @param address - Address to deposit obtained ETH.\n * @param amount - How much ETH is desired.\n * @returns URL to buy ETH based on network.\n */\nfunction getBuyURL(networkCode = '1', address, amount = 5) {\n    switch (networkCode) {\n        case '1':\n            return `https://buy.coinbase.com/?code=9ec56d01-7e81-5017-930c-513daa27bb6a&amount=${amount}&address=${address}&crypto_currency=ETH`;\n        case '5':\n            return 'https://goerli-faucet.slock.it/';\n        case '11155111':\n            return 'https://sepoliafaucet.net/';\n        default:\n            return undefined;\n    }\n}\nexports.getBuyURL = getBuyURL;\n/**\n * Converts a hex string to a BN object.\n *\n * @param inputHex - Number represented as a hex string.\n * @returns A BN instance.\n */\nfunction hexToBN(inputHex) {\n    return inputHex ? new bn_js_1.default((0, utils_1.remove0x)(inputHex), 16) : new bn_js_1.default(0);\n}\nexports.hexToBN = hexToBN;\n/**\n * A helper function that converts hex data to human readable string.\n *\n * @param hex - The hex string to convert to string.\n * @returns A human readable string conversion.\n */\nfunction hexToText(hex) {\n    try {\n        const stripped = (0, utils_1.remove0x)(hex);\n        const buff = Buffer.from(stripped, 'hex');\n        return buff.toString('utf8');\n    }\n    catch (e) {\n        /* istanbul ignore next */\n        return hex;\n    }\n}\nexports.hexToText = hexToText;\n/**\n * Parses a hex string and converts it into a number that can be operated on in a bignum-safe,\n * base-10 way.\n *\n * @param value - A base-16 number encoded as a string.\n * @returns The number as a BN object in base-16 mode.\n */\nfunction fromHex(value) {\n    if (bn_js_1.default.isBN(value)) {\n        return value;\n    }\n    return new bn_js_1.default(hexToBN(value).toString(10));\n}\nexports.fromHex = fromHex;\n/**\n * Converts an integer to a hexadecimal representation.\n *\n * @param value - An integer, an integer encoded as a base-10 string, or a BN.\n * @returns The integer encoded as a hex string.\n */\nfunction toHex(value) {\n    if (typeof value === 'string' && (0, utils_1.isStrictHexString)(value)) {\n        return value;\n    }\n    const hexString = bn_js_1.default.isBN(value)\n        ? value.toString(16)\n        : new bn_js_1.default(value.toString(), 10).toString(16);\n    return `0x${hexString}`;\n}\nexports.toHex = toHex;\n/**\n * Execute and return an asynchronous operation without throwing errors.\n *\n * @param operation - Function returning a Promise.\n * @param logError - Determines if the error should be logged.\n * @template Result - Type of the result of the async operation\n * @returns Promise resolving to the result of the async operation.\n */\nfunction safelyExecute(operation, logError = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            return yield operation();\n        }\n        catch (error) {\n            /* istanbul ignore next */\n            if (logError) {\n                console.error(error);\n            }\n            return undefined;\n        }\n    });\n}\nexports.safelyExecute = safelyExecute;\n/**\n * Execute and return an asynchronous operation with a timeout.\n *\n * @param operation - Function returning a Promise.\n * @param logError - Determines if the error should be logged.\n * @param timeout - Timeout to fail the operation.\n * @template Result - Type of the result of the async operation\n * @returns Promise resolving to the result of the async operation.\n */\nfunction safelyExecuteWithTimeout(operation, logError = false, timeout = 500) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            return yield Promise.race([\n                operation(),\n                new Promise((_, reject) => setTimeout(() => {\n                    reject(TIMEOUT_ERROR);\n                }, timeout)),\n            ]);\n        }\n        catch (error) {\n            /* istanbul ignore next */\n            if (logError) {\n                console.error(error);\n            }\n            return undefined;\n        }\n    });\n}\nexports.safelyExecuteWithTimeout = safelyExecuteWithTimeout;\n/**\n * Convert an address to a checksummed hexidecimal address.\n *\n * @param address - The address to convert.\n * @returns A 0x-prefixed hexidecimal checksummed address, if address is valid. Otherwise original input 0x-prefixe, if address is valid. Otherwise original input 0x-prefixed.\n */\nfunction toChecksumHexAddress(address) {\n    const hexPrefixed = (0, utils_1.add0x)(address);\n    if (!(0, utils_1.isHexString)(hexPrefixed)) {\n        // Version 5.1 of ethereumjs-utils would have returned '0xY' for input 'y'\n        // but we shouldn't waste effort trying to change case on a clearly invalid\n        // string. Instead just return the hex prefixed original string which most\n        // closely mimics the original behavior.\n        return hexPrefixed;\n    }\n    return (0, util_1.toChecksumAddress)(hexPrefixed);\n}\nexports.toChecksumHexAddress = toChecksumHexAddress;\n/**\n * Validates that the input is a hex address. This utility method is a thin\n * wrapper around @metamask/utils.isValidHexAddress, with the exception that it\n * by default will return true for hex strings that are otherwise valid\n * hex addresses, but are not prefixed with `0x`.\n *\n * @param possibleAddress - Input parameter to check against.\n * @param options - The validation options.\n * @param options.allowNonPrefixed - If true will allow addresses without `0x` prefix.`\n * @returns Whether or not the input is a valid hex address.\n */\nfunction isValidHexAddress(possibleAddress, { allowNonPrefixed = true } = {}) {\n    const addressToCheck = allowNonPrefixed\n        ? (0, utils_1.add0x)(possibleAddress)\n        : possibleAddress;\n    if (!(0, utils_1.isStrictHexString)(addressToCheck)) {\n        return false;\n    }\n    return (0, util_1.isValidAddress)(addressToCheck);\n}\nexports.isValidHexAddress = isValidHexAddress;\n/**\n * Returns whether the given code corresponds to a smart contract.\n *\n * @param code - The potential smart contract code.\n * @returns Whether the code was smart contract code or not.\n */\nfunction isSmartContractCode(code) {\n    /* istanbul ignore if */\n    if (!code) {\n        return false;\n    }\n    // Geth will return '0x', and ganache-core v2.2.1 will return '0x0'\n    const smartContractCode = code !== '0x' && code !== '0x0';\n    return smartContractCode;\n}\nexports.isSmartContractCode = isSmartContractCode;\n/**\n * Execute fetch and verify that the response was successful.\n *\n * @param request - Request information.\n * @param options - Fetch options.\n * @returns The fetch response.\n */\nfunction successfulFetch(request, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield fetch(request, options);\n        if (!response.ok) {\n            throw new Error(`Fetch failed with status '${response.status}' for request '${String(request)}'`);\n        }\n        return response;\n    });\n}\nexports.successfulFetch = successfulFetch;\n/**\n * Execute fetch and return object response.\n *\n * @param request - The request information.\n * @param options - The fetch options.\n * @returns The fetch response JSON data.\n */\nfunction handleFetch(request, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield successfulFetch(request, options);\n        const object = yield response.json();\n        return object;\n    });\n}\nexports.handleFetch = handleFetch;\n/**\n * Execute fetch and return object response, log if known error thrown, otherwise rethrow error.\n *\n * @param request - the request options object\n * @param request.url - The request url to query.\n * @param request.options - The fetch options.\n * @param request.timeout - Timeout to fail request\n * @param request.errorCodesToCatch - array of error codes for errors we want to catch in a particular context\n * @returns The fetch response JSON data or undefined (if error occurs).\n */\nfunction fetchWithErrorHandling({ url, options, timeout, errorCodesToCatch, }) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let result;\n        try {\n            if (timeout) {\n                result = Promise.race([\n                    yield handleFetch(url, options),\n                    new Promise((_, reject) => setTimeout(() => {\n                        reject(TIMEOUT_ERROR);\n                    }, timeout)),\n                ]);\n            }\n            else {\n                result = yield handleFetch(url, options);\n            }\n        }\n        catch (e) {\n            logOrRethrowError(e, errorCodesToCatch);\n        }\n        return result;\n    });\n}\nexports.fetchWithErrorHandling = fetchWithErrorHandling;\n/**\n * Fetch that fails after timeout.\n *\n * @param url - Url to fetch.\n * @param options - Options to send with the request.\n * @param timeout - Timeout to fail request.\n * @returns Promise resolving the request.\n */\nfunction timeoutFetch(url, options, timeout = 500) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return Promise.race([\n            successfulFetch(url, options),\n            new Promise((_, reject) => setTimeout(() => {\n                reject(TIMEOUT_ERROR);\n            }, timeout)),\n        ]);\n    });\n}\nexports.timeoutFetch = timeoutFetch;\n/**\n * Normalizes the given ENS name.\n *\n * @param ensName - The ENS name.\n * @returns The normalized ENS name string.\n */\nfunction normalizeEnsName(ensName) {\n    if (ensName && typeof ensName === 'string') {\n        try {\n            const normalized = eth_ens_namehash_1.default.normalize(ensName.trim());\n            // this regex is only sufficient with the above call to ensNamehash.normalize\n            // TODO: change 7 in regex to 3 when shorter ENS domains are live\n            if (normalized.match(/^(([\\w\\d-]+)\\.)*[\\w\\d-]{7,}\\.(eth|test)$/u)) {\n                return normalized;\n            }\n        }\n        catch (_) {\n            // do nothing\n        }\n    }\n    return null;\n}\nexports.normalizeEnsName = normalizeEnsName;\n/**\n * Wrapper method to handle EthQuery requests.\n *\n * @param ethQuery - EthQuery object initialized with a provider.\n * @param method - Method to request.\n * @param args - Arguments to send.\n * @returns Promise resolving the request.\n */\nfunction query(ethQuery, method, \n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nargs = []) {\n    return new Promise((resolve, reject) => {\n        const cb = (error, result) => {\n            if (error) {\n                reject(error);\n                return;\n            }\n            resolve(result);\n        };\n        // Using `in` rather than `hasProperty` so that we look up the prototype\n        // chain for the method.\n        if (method in ethQuery && typeof ethQuery[method] === 'function') {\n            ethQuery[method](...args, cb);\n        }\n        else {\n            ethQuery.sendAsync({ method, params: args }, cb);\n        }\n    });\n}\nexports.query = query;\n/**\n * Converts valid hex strings to decimal numbers, and handles unexpected arg types.\n *\n * @param value - a string that is either a hexadecimal with `0x` prefix or a decimal string.\n * @returns a decimal number.\n */\nconst convertHexToDecimal = (value = '0x0') => {\n    if ((0, utils_1.isStrictHexString)(value)) {\n        return parseInt(value, 16);\n    }\n    return Number(value) ? Number(value) : 0;\n};\nexports.convertHexToDecimal = convertHexToDecimal;\n/**\n * Determines whether a value is a \"plain\" object.\n *\n * @param value - A value to check\n * @returns True if the passed value is a plain object\n */\nfunction isPlainObject(value) {\n    return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Type guard for {@link NonEmptyArray}.\n *\n * @template T - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Type guard for {@link Json}.\n *\n * @param value - The value to check.\n * @returns Whether the value is valid JSON.\n */\nfunction isValidJson(value) {\n    try {\n        return (0, fast_deep_equal_1.default)(value, JSON.parse(JSON.stringify(value)));\n    }\n    catch (_) {\n        return false;\n    }\n}\nexports.isValidJson = isValidJson;\n/**\n * Utility method to log if error is a common fetch error and otherwise rethrow it.\n *\n * @param error - Caught error that we should either rethrow or log to console\n * @param codesToCatch - array of error codes for errors we want to catch and log in a particular context\n */\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction logOrRethrowError(error, codesToCatch = []) {\n    var _a;\n    if (!error) {\n        return;\n    }\n    const includesErrorCodeToCatch = codesToCatch.some((code) => { var _a; return (_a = error.message) === null || _a === void 0 ? void 0 : _a.includes(`Fetch failed with status '${code}'`); });\n    if (error instanceof Error &&\n        (includesErrorCodeToCatch ||\n            ((_a = error.message) === null || _a === void 0 ? void 0 : _a.includes('Failed to fetch')) ||\n            error === TIMEOUT_ERROR)) {\n        console.error(error);\n    }\n    else {\n        throw error;\n    }\n}\n//# sourceMappingURL=util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst errors_1 = require(\"./errors.cjs\");\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(fn) {\n    /* istanbul ignore next */\n    return Boolean(typeof fn?.prototype?.constructor?.name === 'string');\n}\n/**\n * Attempts to obtain the message from a possible error object. If it is\n * possible to do so, any trailing period will be removed from the message;\n * otherwise an empty string is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The message without any trailing period if `error` is an object\n * with a `message` property; the string version of `error` without any trailing\n * period if it is not `undefined` or `null`; otherwise an empty string.\n */\nfunction getErrorMessageWithoutTrailingPeriod(error) {\n    // We'll add our own period.\n    return (0, errors_1.getErrorMessage)(error).replace(/\\.$/u, '');\n}\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper, message) {\n    if (isConstructable(ErrorWrapper)) {\n        return new ErrorWrapper({\n            message,\n        });\n    }\n    return ErrorWrapper({\n        message,\n    });\n}\n/**\n * The default error class that is thrown if an assertion fails.\n */\nclass AssertionError extends Error {\n    constructor(options) {\n        super(options.message);\n        this.code = 'ERR_ASSERTION';\n    }\n}\nexports.AssertionError = AssertionError;\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nfunction assert(value, message = 'Assertion failed.', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    if (!value) {\n        if (message instanceof Error) {\n            throw message;\n        }\n        throw getError(ErrorWrapper, message);\n    }\n}\nexports.assert = assert;\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nfunction assertStruct(value, struct, errorPrefix = 'Assertion failed', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    try {\n        (0, superstruct_1.assert)(value, struct);\n    }\n    catch (error) {\n        throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessageWithoutTrailingPeriod(error)}.`);\n    }\n}\nexports.assertStruct = assertStruct;\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nfunction assertExhaustive(_object) {\n    throw new Error('Invalid branch reached. Should be detected during compilation.');\n}\nexports.assertExhaustive = assertExhaustive;\n//# sourceMappingURL=assert.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base64 = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nconst base64 = (struct, options = {}) => {\n    const paddingRequired = options.paddingRequired ?? false;\n    const characterSet = options.characterSet ?? 'base64';\n    let letters;\n    if (characterSet === 'base64') {\n        letters = String.raw `[A-Za-z0-9+\\/]`;\n    }\n    else {\n        (0, assert_1.assert)(characterSet === 'base64url');\n        letters = String.raw `[-_A-Za-z0-9]`;\n    }\n    let re;\n    if (paddingRequired) {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    else {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64;\n//# sourceMappingURL=base64.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDataView = exports.concatBytes = exports.valueToBytes = exports.base64ToBytes = exports.stringToBytes = exports.numberToBytes = exports.signedBigIntToBytes = exports.bigIntToBytes = exports.hexToBytes = exports.bytesToBase64 = exports.bytesToString = exports.bytesToNumber = exports.bytesToSignedBigInt = exports.bytesToBigInt = exports.bytesToHex = exports.assertIsBytes = exports.isBytes = void 0;\nconst base_1 = require(\"@scure/base\");\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n// '0'.charCodeAt(0) === 48\nconst HEX_MINIMUM_NUMBER_CHARACTER = 48;\n// '9'.charCodeAt(0) === 57\nconst HEX_MAXIMUM_NUMBER_CHARACTER = 58;\nconst HEX_CHARACTER_OFFSET = 87;\n/**\n * Memoized function that returns an array to be used as a lookup table for\n * converting bytes to hexadecimal values.\n *\n * The array is created lazily and then cached for future use. The benefit of\n * this approach is that the performance of converting bytes to hex is much\n * better than if we were to call `toString(16)` on each byte.\n *\n * The downside is that the array is created once and then never garbage\n * collected. This is not a problem in practice because the array is only 256\n * elements long.\n *\n * @returns A function that returns the lookup table.\n */\nfunction getPrecomputedHexValuesBuilder() {\n    // To avoid issues with tree shaking, we need to use a function to return the\n    // array. This is because the array is only used in the `bytesToHex` function\n    // and if we were to use a global variable, the array might be removed by the\n    // tree shaker.\n    const lookupTable = [];\n    return () => {\n        if (lookupTable.length === 0) {\n            for (let i = 0; i < 256; i++) {\n                lookupTable.push(i.toString(16).padStart(2, '0'));\n            }\n        }\n        return lookupTable;\n    };\n}\n/**\n * Function implementation of the {@link getPrecomputedHexValuesBuilder}\n * function.\n */\nconst getPrecomputedHexValues = getPrecomputedHexValuesBuilder();\n/**\n * Check if a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @returns Whether the value is a `Uint8Array`.\n */\nfunction isBytes(value) {\n    return value instanceof Uint8Array;\n}\nexports.isBytes = isBytes;\n/**\n * Assert that a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @throws If the value is not a `Uint8Array`.\n */\nfunction assertIsBytes(value) {\n    (0, assert_1.assert)(isBytes(value), 'Value must be a Uint8Array.');\n}\nexports.assertIsBytes = assertIsBytes;\n/**\n * Convert a `Uint8Array` to a hexadecimal string.\n *\n * @param bytes - The bytes to convert to a hexadecimal string.\n * @returns The hexadecimal string.\n */\nfunction bytesToHex(bytes) {\n    assertIsBytes(bytes);\n    if (bytes.length === 0) {\n        return '0x';\n    }\n    const lookupTable = getPrecomputedHexValues();\n    const hexadecimal = new Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        hexadecimal[i] = lookupTable[bytes[i]];\n    }\n    return (0, hex_1.add0x)(hexadecimal.join(''));\n}\nexports.bytesToHex = bytesToHex;\n/**\n * Convert a `Uint8Array` to a `bigint`.\n *\n * To convert a `Uint8Array` to a `number` instead, use {@link bytesToNumber}.\n * To convert a two's complement encoded `Uint8Array` to a `bigint`, use\n * {@link bytesToSignedBigInt}.\n *\n * @param bytes - The bytes to convert to a `bigint`.\n * @returns The `bigint`.\n */\nfunction bytesToBigInt(bytes) {\n    assertIsBytes(bytes);\n    const hexadecimal = bytesToHex(bytes);\n    return BigInt(hexadecimal);\n}\nexports.bytesToBigInt = bytesToBigInt;\n/**\n * Convert a `Uint8Array` to a signed `bigint`. This assumes that the bytes are\n * encoded in two's complement.\n *\n * To convert a `Uint8Array` to an unsigned `bigint` instead, use\n * {@link bytesToBigInt}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param bytes - The bytes to convert to a signed `bigint`.\n * @returns The signed `bigint`.\n */\nfunction bytesToSignedBigInt(bytes) {\n    assertIsBytes(bytes);\n    let value = BigInt(0);\n    for (const byte of bytes) {\n        // eslint-disable-next-line no-bitwise\n        value = (value << BigInt(8)) + BigInt(byte);\n    }\n    return BigInt.asIntN(bytes.length * 8, value);\n}\nexports.bytesToSignedBigInt = bytesToSignedBigInt;\n/**\n * Convert a `Uint8Array` to a `number`.\n *\n * To convert a `Uint8Array` to a `bigint` instead, use {@link bytesToBigInt}.\n *\n * @param bytes - The bytes to convert to a number.\n * @returns The number.\n * @throws If the resulting number is not a safe integer.\n */\nfunction bytesToNumber(bytes) {\n    assertIsBytes(bytes);\n    const bigint = bytesToBigInt(bytes);\n    (0, assert_1.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), 'Number is not a safe integer. Use `bytesToBigInt` instead.');\n    return Number(bigint);\n}\nexports.bytesToNumber = bytesToNumber;\n/**\n * Convert a UTF-8 encoded `Uint8Array` to a `string`.\n *\n * @param bytes - The bytes to convert to a string.\n * @returns The string.\n */\nfunction bytesToString(bytes) {\n    assertIsBytes(bytes);\n    return new TextDecoder().decode(bytes);\n}\nexports.bytesToString = bytesToString;\n/**\n * Convert a `Uint8Array` to a base64 encoded string.\n *\n * @param bytes - The bytes to convert to a base64 encoded string.\n * @returns The base64 encoded string.\n */\nfunction bytesToBase64(bytes) {\n    assertIsBytes(bytes);\n    return base_1.base64.encode(bytes);\n}\nexports.bytesToBase64 = bytesToBase64;\n/**\n * Convert a hexadecimal string to a `Uint8Array`. The string can optionally be\n * prefixed with `0x`. It accepts even and odd length strings.\n *\n * If the value is \"0x\", an empty `Uint8Array` is returned.\n *\n * @param value - The hexadecimal string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction hexToBytes(value) {\n    // \"0x\" is often used as empty byte array.\n    if (value?.toLowerCase?.() === '0x') {\n        return new Uint8Array();\n    }\n    (0, hex_1.assertIsHexString)(value);\n    // Remove the `0x` prefix if it exists, and pad the string to have an even\n    // number of characters.\n    const strippedValue = (0, hex_1.remove0x)(value).toLowerCase();\n    const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;\n    const bytes = new Uint8Array(normalizedValue.length / 2);\n    for (let i = 0; i < bytes.length; i++) {\n        // While this is not the prettiest way to convert a hexadecimal string to a\n        // `Uint8Array`, it is a lot faster than using `parseInt` to convert each\n        // character.\n        const c1 = normalizedValue.charCodeAt(i * 2);\n        const c2 = normalizedValue.charCodeAt(i * 2 + 1);\n        const n1 = c1 -\n            (c1 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        const n2 = c2 -\n            (c2 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        bytes[i] = n1 * 16 + n2;\n    }\n    return bytes;\n}\nexports.hexToBytes = hexToBytes;\n/**\n * Convert a `bigint` to a `Uint8Array`.\n *\n * This assumes that the `bigint` is an unsigned integer. To convert a signed\n * `bigint` instead, use {@link signedBigIntToBytes}.\n *\n * @param value - The bigint to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction bigIntToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= BigInt(0), 'Value must be a non-negative bigint.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * Check if a `bigint` fits in a certain number of bytes.\n *\n * @param value - The `bigint` to check.\n * @param bytes - The number of bytes.\n * @returns Whether the `bigint` fits in the number of bytes.\n */\nfunction bigIntFits(value, bytes) {\n    (0, assert_1.assert)(bytes > 0);\n    /* eslint-disable no-bitwise */\n    const mask = value >> BigInt(31);\n    return !(((~value & mask) + (value & ~mask)) >> BigInt(bytes * 8 + ~0));\n    /* eslint-enable no-bitwise */\n}\n/**\n * Convert a signed `bigint` to a `Uint8Array`. This uses two's complement\n * encoding to represent negative numbers.\n *\n * To convert an unsigned `bigint` to a `Uint8Array` instead, use\n * {@link bigIntToBytes}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param value - The number to convert to bytes.\n * @param byteLength - The length of the resulting `Uint8Array`. If the number\n * is larger than the maximum value that can be represented by the given length,\n * an error is thrown.\n * @returns The bytes as `Uint8Array`.\n */\nfunction signedBigIntToBytes(value, byteLength) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(typeof byteLength === 'number', 'Byte length must be a number.');\n    (0, assert_1.assert)(byteLength > 0, 'Byte length must be greater than 0.');\n    (0, assert_1.assert)(bigIntFits(value, byteLength), 'Byte length is too small to represent the given value.');\n    // ESLint doesn't like mutating function parameters, so to avoid having to\n    // disable the rule, we create a new variable.\n    let numberValue = value;\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0; i < bytes.length; i++) {\n        bytes[i] = Number(BigInt.asUintN(8, numberValue));\n        // eslint-disable-next-line no-bitwise\n        numberValue >>= BigInt(8);\n    }\n    return bytes.reverse();\n}\nexports.signedBigIntToBytes = signedBigIntToBytes;\n/**\n * Convert a `number` to a `Uint8Array`.\n *\n * @param value - The number to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n * @throws If the number is not a safe integer.\n */\nfunction numberToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToBytes` instead.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.numberToBytes = numberToBytes;\n/**\n * Convert a `string` to a UTF-8 encoded `Uint8Array`.\n *\n * @param value - The string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction stringToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return new TextEncoder().encode(value);\n}\nexports.stringToBytes = stringToBytes;\n/**\n * Convert a base64 encoded string to a `Uint8Array`.\n *\n * @param value - The base64 encoded string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction base64ToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return base_1.base64.decode(value);\n}\nexports.base64ToBytes = base64ToBytes;\n/**\n * Convert a byte-like value to a `Uint8Array`. The value can be a `Uint8Array`,\n * a `bigint`, a `number`, or a `string`.\n *\n * This will attempt to guess the type of the value based on its type and\n * contents. For more control over the conversion, use the more specific\n * conversion functions, such as {@link hexToBytes} or {@link stringToBytes}.\n *\n * If the value is a `string`, and it is prefixed with `0x`, it will be\n * interpreted as a hexadecimal string. Otherwise, it will be interpreted as a\n * UTF-8 string. To convert a hexadecimal string to bytes without interpreting\n * it as a UTF-8 string, use {@link hexToBytes} instead.\n *\n * If the value is a `bigint`, it is assumed to be unsigned. To convert a signed\n * `bigint` to bytes, use {@link signedBigIntToBytes} instead.\n *\n * If the value is a `Uint8Array`, it will be returned as-is.\n *\n * @param value - The value to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction valueToBytes(value) {\n    if (typeof value === 'bigint') {\n        return bigIntToBytes(value);\n    }\n    if (typeof value === 'number') {\n        return numberToBytes(value);\n    }\n    if (typeof value === 'string') {\n        if (value.startsWith('0x')) {\n            return hexToBytes(value);\n        }\n        return stringToBytes(value);\n    }\n    if (isBytes(value)) {\n        return value;\n    }\n    throw new TypeError(`Unsupported value type: \"${typeof value}\".`);\n}\nexports.valueToBytes = valueToBytes;\n/**\n * Concatenate multiple byte-like values into a single `Uint8Array`. The values\n * can be `Uint8Array`, `bigint`, `number`, or `string`. This uses\n * {@link valueToBytes} under the hood to convert each value to bytes. Refer to\n * the documentation of that function for more information.\n *\n * @param values - The values to concatenate.\n * @returns The concatenated bytes as `Uint8Array`.\n */\nfunction concatBytes(values) {\n    const normalizedValues = new Array(values.length);\n    let byteLength = 0;\n    for (let i = 0; i < values.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const value = valueToBytes(values[i]);\n        normalizedValues[i] = value;\n        byteLength += value.length;\n    }\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0, offset = 0; i < normalizedValues.length; i++) {\n        // While we could simply spread the values into an array and use\n        // `Uint8Array.from`, that is a lot slower than using `Uint8Array.set`.\n        bytes.set(normalizedValues[i], offset);\n        offset += normalizedValues[i].length;\n    }\n    return bytes;\n}\nexports.concatBytes = concatBytes;\n/**\n * Create a {@link DataView} from a {@link Uint8Array}. This is a convenience\n * function that avoids having to create a {@link DataView} manually, which\n * requires passing the `byteOffset` and `byteLength` parameters every time.\n *\n * Not passing the `byteOffset` and `byteLength` parameters can result in\n * unexpected behavior when the {@link Uint8Array} is a view of a larger\n * {@link ArrayBuffer}, e.g., when using {@link Uint8Array.subarray}.\n *\n * This function also supports Node.js {@link Buffer}s.\n *\n * @example\n * ```typescript\n * const bytes = new Uint8Array([1, 2, 3]);\n *\n * // This is equivalent to:\n * // const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n * const dataView = createDataView(bytes);\n * ```\n * @param bytes - The bytes to create the {@link DataView} from.\n * @returns The {@link DataView}.\n */\nfunction createDataView(bytes) {\n    // To maintain compatibility with Node.js, we need to check if the bytes are\n    // a Buffer. If so, we need to slice the buffer to get the underlying\n    // ArrayBuffer.\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof Buffer !== 'undefined' && bytes instanceof Buffer) {\n        const buffer = bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n        return new DataView(buffer);\n    }\n    return new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n}\nexports.createDataView = createDataView;\n//# sourceMappingURL=bytes.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCaipChainId = exports.parseCaipAccountId = exports.parseCaipChainId = exports.isCaipAccountAddress = exports.isCaipAccountId = exports.isCaipReference = exports.isCaipNamespace = exports.isCaipChainId = exports.KnownCaipNamespace = exports.CaipAccountAddressStruct = exports.CaipAccountIdStruct = exports.CaipReferenceStruct = exports.CaipNamespaceStruct = exports.CaipChainIdStruct = exports.CAIP_ACCOUNT_ADDRESS_REGEX = exports.CAIP_ACCOUNT_ID_REGEX = exports.CAIP_REFERENCE_REGEX = exports.CAIP_NAMESPACE_REGEX = exports.CAIP_CHAIN_ID_REGEX = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nexports.CAIP_CHAIN_ID_REGEX = /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u;\nexports.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u;\nexports.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u;\nexports.CAIP_ACCOUNT_ID_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u;\nexports.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u;\n/**\n * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.\n */\nexports.CaipChainIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_CHAIN_ID_REGEX);\n/**\n * A CAIP-2 namespace, i.e., the first part of a CAIP chain ID.\n */\nexports.CaipNamespaceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_NAMESPACE_REGEX);\n/**\n * A CAIP-2 reference, i.e., the second part of a CAIP chain ID.\n */\nexports.CaipReferenceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_REFERENCE_REGEX);\n/**\n * A CAIP-10 account ID, i.e., a human-readable namespace, reference, and account address.\n */\nexports.CaipAccountIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ID_REGEX);\n/**\n * A CAIP-10 account address, i.e., the third part of the CAIP account ID.\n */\nexports.CaipAccountAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ADDRESS_REGEX);\n/** Known CAIP namespaces. */\nvar KnownCaipNamespace;\n(function (KnownCaipNamespace) {\n    /** EIP-155 compatible chains. */\n    KnownCaipNamespace[\"Eip155\"] = \"eip155\";\n})(KnownCaipNamespace = exports.KnownCaipNamespace || (exports.KnownCaipNamespace = {}));\n/**\n * Check if the given value is a {@link CaipChainId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipChainId}.\n */\nfunction isCaipChainId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipChainIdStruct);\n}\nexports.isCaipChainId = isCaipChainId;\n/**\n * Check if the given value is a {@link CaipNamespace}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipNamespace}.\n */\nfunction isCaipNamespace(value) {\n    return (0, superstruct_1.is)(value, exports.CaipNamespaceStruct);\n}\nexports.isCaipNamespace = isCaipNamespace;\n/**\n * Check if the given value is a {@link CaipReference}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipReference}.\n */\nfunction isCaipReference(value) {\n    return (0, superstruct_1.is)(value, exports.CaipReferenceStruct);\n}\nexports.isCaipReference = isCaipReference;\n/**\n * Check if the given value is a {@link CaipAccountId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipAccountId}.\n */\nfunction isCaipAccountId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountIdStruct);\n}\nexports.isCaipAccountId = isCaipAccountId;\n/**\n * Check if a value is a {@link CaipAccountAddress}.\n *\n * @param value - The value to validate.\n * @returns True if the value is a valid {@link CaipAccountAddress}.\n */\nfunction isCaipAccountAddress(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountAddressStruct);\n}\nexports.isCaipAccountAddress = isCaipAccountAddress;\n/**\n * Parse a CAIP-2 chain ID to an object containing the namespace and reference.\n * This validates the CAIP-2 chain ID before parsing it.\n *\n * @param caipChainId - The CAIP-2 chain ID to validate and parse.\n * @returns The parsed CAIP-2 chain ID.\n */\nfunction parseCaipChainId(caipChainId) {\n    const match = exports.CAIP_CHAIN_ID_REGEX.exec(caipChainId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP chain ID.');\n    }\n    return {\n        namespace: match.groups.namespace,\n        reference: match.groups.reference,\n    };\n}\nexports.parseCaipChainId = parseCaipChainId;\n/**\n * Parse an CAIP-10 account ID to an object containing the chain ID, parsed chain ID, and account address.\n * This validates the CAIP-10 account ID before parsing it.\n *\n * @param caipAccountId - The CAIP-10 account ID to validate and parse.\n * @returns The parsed CAIP-10 account ID.\n */\nfunction parseCaipAccountId(caipAccountId) {\n    const match = exports.CAIP_ACCOUNT_ID_REGEX.exec(caipAccountId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP account ID.');\n    }\n    return {\n        address: match.groups.accountAddress,\n        chainId: match.groups.chainId,\n        chain: {\n            namespace: match.groups.namespace,\n            reference: match.groups.reference,\n        },\n    };\n}\nexports.parseCaipAccountId = parseCaipAccountId;\n/**\n * Chain ID as defined per the CAIP-2\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md}.\n *\n * It defines a way to uniquely identify any blockchain in a human-readable\n * way.\n *\n * @param namespace - The standard (ecosystem) of similar blockchains.\n * @param reference - Identify of a blockchain within a given namespace.\n * @throws {@link Error}\n * This exception is thrown if the inputs does not comply with the CAIP-2\n * syntax specification\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md#syntax}.\n * @returns A CAIP chain ID.\n */\nfunction toCaipChainId(namespace, reference) {\n    if (!isCaipNamespace(namespace)) {\n        throw new Error(`Invalid \"namespace\", must match: ${exports.CAIP_NAMESPACE_REGEX.toString()}`);\n    }\n    if (!isCaipReference(reference)) {\n        throw new Error(`Invalid \"reference\", must match: ${exports.CAIP_REFERENCE_REGEX.toString()}`);\n    }\n    return `${namespace}:${reference}`;\n}\nexports.toCaipChainId = toCaipChainId;\n//# sourceMappingURL=caip-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChecksumStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst base64_1 = require(\"./base64.cjs\");\nexports.ChecksumStruct = (0, superstruct_1.size)((0, base64_1.base64)((0, superstruct_1.string)(), { paddingRequired: true }), 44, 44);\n//# sourceMappingURL=checksum.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\nconst NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1.StrictHexStruct]);\nconst NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);\nconst BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);\nconst BytesLikeStruct = (0, superstruct_1.union)([hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);\nconst BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1.StrictHexStruct]), bytes_1.hexToBytes);\nconst HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nfunction createNumber(value) {\n    try {\n        const result = (0, superstruct_1.create)(value, NumberCoercer);\n        (0, assert_1.assert)(Number.isFinite(result), `Expected a number-like value, got \"${value}\".`);\n        return result;\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${value}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createNumber = createNumber;\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nfunction createBigInt(value) {\n    try {\n        // The `BigInt` constructor throws if the value is not a number-like value.\n        // There is no need to validate the value manually.\n        return (0, superstruct_1.create)(value, BigIntCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBigInt = createBigInt;\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nfunction createBytes(value) {\n    if (typeof value === 'string' && value.toLowerCase() === '0x') {\n        return new Uint8Array();\n    }\n    try {\n        return (0, superstruct_1.create)(value, BytesCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBytes = createBytes;\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nfunction createHex(value) {\n    if ((value instanceof Uint8Array && value.length === 0) ||\n        (typeof value === 'string' && value.toLowerCase() === '0x')) {\n        return '0x';\n    }\n    try {\n        return (0, superstruct_1.create)(value, HexCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createHex = createHex;\n//# sourceMappingURL=coercers.cjs.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _FrozenMap_map, _FrozenSet_set;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FrozenSet = exports.FrozenMap = void 0;\n/**\n * A {@link ReadonlyMap} that cannot be modified after instantiation.\n * The implementation uses an inner map hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this map.\n */\nclass FrozenMap {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").size;\n    }\n    [(_FrozenMap_map = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\")[Symbol.iterator]();\n    }\n    constructor(entries) {\n        _FrozenMap_map.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner map.\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").forEach((value, key, _map) => callbackfn.call(thisArg, value, key, this));\n    }\n    get(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").get(key);\n    }\n    has(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").has(key);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").values();\n    }\n    toString() {\n        return `FrozenMap(${this.size}) {${this.size > 0\n            ? ` ${[...this.entries()]\n                .map(([key, value]) => `${String(key)} => ${String(value)}`)\n                .join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenMap = FrozenMap;\n/**\n * A {@link ReadonlySet} that cannot be modified after instantiation.\n * The implementation uses an inner set hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this set.\n */\nclass FrozenSet {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").size;\n    }\n    [(_FrozenSet_set = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\")[Symbol.iterator]();\n    }\n    constructor(values) {\n        _FrozenSet_set.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner set.\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));\n    }\n    has(value) {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").has(value);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").values();\n    }\n    toString() {\n        return `FrozenSet(${this.size}) {${this.size > 0\n            ? ` ${[...this.values()].map((member) => String(member)).join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenSet = FrozenSet;\nObject.freeze(FrozenMap);\nObject.freeze(FrozenMap.prototype);\nObject.freeze(FrozenSet);\nObject.freeze(FrozenSet.prototype);\n//# sourceMappingURL=collections.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=encryption-types.cjs.map","import { cloneDeep } from 'lodash';\n\nconst version = 62;\n\n/**\n * Removes metaMetricsSendCount from MetaMetrics controller\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state.MetaMetricsController) {\n    const { metaMetricsSendCount } = state.MetaMetricsController;\n    if (metaMetricsSendCount !== undefined) {\n      delete state.MetaMetricsController.metaMetricsSendCount;\n    }\n  }\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapError = exports.getErrorMessage = exports.isErrorWithStack = exports.isErrorWithMessage = exports.isErrorWithCode = void 0;\nconst pony_cause_1 = require(\"pony-cause\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * Type guard for determining whether the given value is an instance of Error.\n * For errors generated via `fs.promises`, `error instanceof Error` won't work,\n * so we have to come up with another way of testing.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isError(error) {\n    return (error instanceof Error ||\n        ((0, misc_1.isObject)(error) && error.constructor.name === 'Error'));\n}\n/**\n * Type guard for determining whether the given value is an error object with a\n * `code` property such as the type of error that Node throws for filesystem\n * operations, etc.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithCode(error) {\n    return typeof error === 'object' && error !== null && 'code' in error;\n}\nexports.isErrorWithCode = isErrorWithCode;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithMessage(error) {\n    return typeof error === 'object' && error !== null && 'message' in error;\n}\nexports.isErrorWithMessage = isErrorWithMessage;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `stack` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithStack(error) {\n    return typeof error === 'object' && error !== null && 'stack' in error;\n}\nexports.isErrorWithStack = isErrorWithStack;\n/**\n * Attempts to obtain the message from a possible error object, defaulting to an\n * empty string if it is impossible to do so.\n *\n * @param error - The possible error to get the message from.\n * @returns The message if `error` is an object with a `message` property;\n * the string version of `error` if it is not `undefined` or `null`; otherwise\n * an empty string.\n */\nfunction getErrorMessage(error) {\n    if (isErrorWithMessage(error) && typeof error.message === 'string') {\n        return error.message;\n    }\n    if ((0, misc_1.isNullOrUndefined)(error)) {\n        return '';\n    }\n    return String(error);\n}\nexports.getErrorMessage = getErrorMessage;\n/**\n * Builds a new error object, linking it to the original error via the `cause`\n * property if it is an Error.\n *\n * This function is useful to reframe error messages in general, but is\n * _critical_ when interacting with any of Node's filesystem functions as\n * provided via `fs.promises`, because these do not produce stack traces in the\n * case of an I/O error (see <https://github.com/nodejs/node/issues/30944>).\n *\n * @param originalError - The error to be wrapped (something throwable).\n * @param message - The desired message of the new error.\n * @returns A new error object.\n */\nfunction wrapError(originalError, message) {\n    if (isError(originalError)) {\n        let error;\n        if (Error.length === 2) {\n            // for some reason `tsserver` is not complaining that the\n            // Error constructor doesn't support a second argument in the editor,\n            // but `tsc` does. Error causes are not supported by our current tsc target (ES2020, we need ES2022 to make this work)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new Error(message, { cause: originalError });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new pony_cause_1.ErrorWithCause(message, { cause: originalError });\n        }\n        if (isErrorWithCode(originalError)) {\n            error.code = originalError.code;\n        }\n        return error;\n    }\n    if (message.length > 0) {\n        return new Error(`${String(originalError)}: ${message}`);\n    }\n    return new Error(String(originalError));\n}\nexports.wrapError = wrapError;\n//# sourceMappingURL=errors.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.remove0x = exports.add0x = exports.isValidChecksumAddress = exports.getChecksumAddress = exports.isValidHexAddress = exports.assertIsStrictHexString = exports.assertIsHexString = exports.isStrictHexString = exports.isHexString = exports.HexChecksumAddressStruct = exports.HexAddressStruct = exports.StrictHexStruct = exports.HexStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nexports.HexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^(?:0x)?[0-9a-f]+$/iu);\nexports.StrictHexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]+$/iu);\nexports.HexAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]{40}$/u);\nexports.HexChecksumAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-fA-F]{40}$/u);\n/**\n * Check if a string is a valid hex string.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isHexString(value) {\n    return (0, superstruct_1.is)(value, exports.HexStruct);\n}\nexports.isHexString = isHexString;\n/**\n * Strictly check if a string is a valid hex string. A valid hex string must\n * start with the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isStrictHexString(value) {\n    return (0, superstruct_1.is)(value, exports.StrictHexStruct);\n}\nexports.isStrictHexString = isStrictHexString;\n/**\n * Assert that a value is a valid hex string.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsHexString(value) {\n    (0, assert_1.assert)(isHexString(value), 'Value must be a hexadecimal string.');\n}\nexports.assertIsHexString = assertIsHexString;\n/**\n * Assert that a value is a valid hex string. A valid hex string must start with\n * the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsStrictHexString(value) {\n    (0, assert_1.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with \"0x\".');\n}\nexports.assertIsStrictHexString = assertIsStrictHexString;\n/**\n * Validate that the passed prefixed hex string is an all-lowercase\n * hex address, or a valid mixed-case checksum address.\n *\n * @param possibleAddress - Input parameter to check against.\n * @returns Whether or not the input is a valid hex address.\n */\nfunction isValidHexAddress(possibleAddress) {\n    return ((0, superstruct_1.is)(possibleAddress, exports.HexAddressStruct) ||\n        isValidChecksumAddress(possibleAddress));\n}\nexports.isValidHexAddress = isValidHexAddress;\n/**\n * Encode a passed hex string as an ERC-55 mixed-case checksum address.\n *\n * @param address - The hex address to encode.\n * @returns The address encoded according to ERC-55.\n * @see https://eips.ethereum.org/EIPS/eip-55\n */\nfunction getChecksumAddress(address) {\n    (0, assert_1.assert)((0, superstruct_1.is)(address, exports.HexChecksumAddressStruct), 'Invalid hex address.');\n    const unPrefixed = remove0x(address.toLowerCase());\n    const unPrefixedHash = remove0x((0, bytes_1.bytesToHex)((0, sha3_1.keccak_256)(unPrefixed)));\n    return `0x${unPrefixed\n        .split('')\n        .map((character, nibbleIndex) => {\n        const hashCharacter = unPrefixedHash[nibbleIndex];\n        (0, assert_1.assert)((0, superstruct_1.is)(hashCharacter, (0, superstruct_1.string)()), 'Hash shorter than address.');\n        return parseInt(hashCharacter, 16) > 7\n            ? character.toUpperCase()\n            : character;\n    })\n        .join('')}`;\n}\nexports.getChecksumAddress = getChecksumAddress;\n/**\n * Validate that the passed hex string is a valid ERC-55 mixed-case\n * checksum address.\n *\n * @param possibleChecksum - The hex address to check.\n * @returns True if the address is a checksum address.\n */\nfunction isValidChecksumAddress(possibleChecksum) {\n    if (!(0, superstruct_1.is)(possibleChecksum, exports.HexChecksumAddressStruct)) {\n        return false;\n    }\n    return getChecksumAddress(possibleChecksum) === possibleChecksum;\n}\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Add the `0x`-prefix to a hexadecimal string. If the string already has the\n * prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to add the prefix to.\n * @returns The prefixed hexadecimal string.\n */\nfunction add0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x')) {\n        return hexadecimal;\n    }\n    if (hexadecimal.startsWith('0X')) {\n        return `0x${hexadecimal.substring(2)}`;\n    }\n    return `0x${hexadecimal}`;\n}\nexports.add0x = add0x;\n/**\n * Remove the `0x`-prefix from a hexadecimal string. If the string doesn't have\n * the prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to remove the prefix from.\n * @returns The un-prefixed hexadecimal string.\n */\nfunction remove0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x') || hexadecimal.startsWith('0X')) {\n        return hexadecimal.substring(2);\n    }\n    return hexadecimal;\n}\nexports.remove0x = remove0x;\n//# sourceMappingURL=hex.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./assert.cjs\"), exports);\n__exportStar(require(\"./base64.cjs\"), exports);\n__exportStar(require(\"./bytes.cjs\"), exports);\n__exportStar(require(\"./caip-types.cjs\"), exports);\n__exportStar(require(\"./checksum.cjs\"), exports);\n__exportStar(require(\"./coercers.cjs\"), exports);\n__exportStar(require(\"./collections.cjs\"), exports);\n__exportStar(require(\"./encryption-types.cjs\"), exports);\n__exportStar(require(\"./errors.cjs\"), exports);\n__exportStar(require(\"./hex.cjs\"), exports);\n__exportStar(require(\"./json.cjs\"), exports);\n__exportStar(require(\"./keyring.cjs\"), exports);\n__exportStar(require(\"./logging.cjs\"), exports);\n__exportStar(require(\"./misc.cjs\"), exports);\n__exportStar(require(\"./number.cjs\"), exports);\n__exportStar(require(\"./opaque.cjs\"), exports);\n__exportStar(require(\"./promise.cjs\"), exports);\n__exportStar(require(\"./time.cjs\"), exports);\n__exportStar(require(\"./transaction-types.cjs\"), exports);\n__exportStar(require(\"./versions.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.getJsonSize = exports.getSafeJson = exports.isValidJson = exports.JsonStruct = exports.UnsafeJsonStruct = exports.exactOptional = exports.object = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * A struct to check if the given value is a valid object, with support for\n * {@link exactOptional} types.\n *\n * @param schema - The schema of the object.\n * @returns A struct to check if the given value is an object.\n */\nconst object = (schema) => \n// The type is slightly different from a regular object struct, because we\n// want to make properties with `undefined` in their type optional, but not\n// `undefined` itself. This means that we need a type cast.\n(0, superstruct_1.object)(schema);\nexports.object = object;\n/**\n * Check the last field of a path is present.\n *\n * @param context - The context to check.\n * @param context.path - The path to check.\n * @param context.branch - The branch to check.\n * @returns Whether the last field of a path is present.\n */\nfunction hasOptional({ path, branch }) {\n    const field = path[path.length - 1];\n    return (0, misc_1.hasProperty)(branch[branch.length - 2], field);\n}\n/**\n * A struct which allows the property of an object to be absent, or to be present\n * as long as it's valid and not set to `undefined`.\n *\n * This struct should be used in conjunction with the {@link object} from this\n * library, to get proper type inference.\n *\n * @param struct - The struct to check the value against, if present.\n * @returns A struct to check if the given value is valid, or not present.\n * @example\n * ```ts\n * const struct = object({\n *   foo: exactOptional(string()),\n *   bar: exactOptional(number()),\n *   baz: optional(boolean()),\n *   qux: unknown(),\n * });\n *\n * type Type = Infer<typeof struct>;\n * // Type is equivalent to:\n * // {\n * //   foo?: string;\n * //   bar?: number;\n * //   baz?: boolean | undefined;\n * //   qux: unknown;\n * // }\n * ```\n */\nfunction exactOptional(struct) {\n    return new superstruct_1.Struct({\n        ...struct,\n        type: `optional ${struct.type}`,\n        validator: (value, context) => !hasOptional(context) || struct.validator(value, context),\n        refiner: (value, context) => !hasOptional(context) || struct.refiner(value, context),\n    });\n}\nexports.exactOptional = exactOptional;\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () => (0, superstruct_1.define)('finite number', (value) => {\n    return (0, superstruct_1.is)(value, (0, superstruct_1.number)()) && Number.isFinite(value);\n});\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexports.UnsafeJsonStruct = (0, superstruct_1.union)([\n    (0, superstruct_1.literal)(null),\n    (0, superstruct_1.boolean)(),\n    finiteNumber(),\n    (0, superstruct_1.string)(),\n    (0, superstruct_1.array)((0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n    (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n]);\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexports.JsonStruct = (0, superstruct_1.coerce)(exports.UnsafeJsonStruct, (0, superstruct_1.any)(), (value) => {\n    (0, assert_1.assertStruct)(value, exports.UnsafeJsonStruct);\n    return JSON.parse(JSON.stringify(value, (propKey, propValue) => {\n        // Strip __proto__ and constructor properties to prevent prototype pollution.\n        if (propKey === '__proto__' || propKey === 'constructor') {\n            return undefined;\n        }\n        return propValue;\n    }));\n});\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nfunction isValidJson(value) {\n    try {\n        getSafeJson(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexports.isValidJson = isValidJson;\n/**\n * Validate and return sanitized JSON.\n *\n * Note:\n * This function uses sanitized JsonStruct for validation\n * that applies stringify and then parse of a value provided\n * to ensure that there are no getters which can have side effects\n * that can cause security issues.\n *\n * @param value - JSON structure to be processed.\n * @returns Sanitized JSON structure.\n */\nfunction getSafeJson(value) {\n    return (0, superstruct_1.create)(value, exports.JsonStruct);\n}\nexports.getSafeJson = getSafeJson;\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nfunction getJsonSize(value) {\n    (0, assert_1.assertStruct)(value, exports.JsonStruct, 'Invalid JSON value');\n    const json = JSON.stringify(value);\n    return new TextEncoder().encode(json).byteLength;\n}\nexports.getJsonSize = getJsonSize;\n/**\n * The string '2.0'.\n */\nexports.jsonrpc2 = '2.0';\nexports.JsonRpcVersionStruct = (0, superstruct_1.literal)(exports.jsonrpc2);\nexports.JsonRpcIdStruct = (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.string)()]));\nexports.JsonRpcErrorStruct = (0, exports.object)({\n    code: (0, superstruct_1.integer)(),\n    message: (0, superstruct_1.string)(),\n    data: exactOptional(exports.JsonStruct),\n    stack: exactOptional((0, superstruct_1.string)()),\n});\nexports.JsonRpcParamsStruct = (0, superstruct_1.union)([(0, superstruct_1.record)((0, superstruct_1.string)(), exports.JsonStruct), (0, superstruct_1.array)(exports.JsonStruct)]);\nexports.JsonRpcRequestStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\nexports.JsonRpcNotificationStruct = (0, exports.object)({\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nfunction isJsonRpcNotification(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcNotificationStruct);\n}\nexports.isJsonRpcNotification = isJsonRpcNotification;\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nfunction assertIsJsonRpcNotification(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcNotificationStruct, 'Invalid JSON-RPC notification', ErrorWrapper);\n}\nexports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nfunction isJsonRpcRequest(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcRequestStruct);\n}\nexports.isJsonRpcRequest = isJsonRpcRequest;\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nfunction assertIsJsonRpcRequest(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcRequestStruct, 'Invalid JSON-RPC request', ErrorWrapper);\n}\nexports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;\nexports.PendingJsonRpcResponseStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: (0, superstruct_1.optional)((0, superstruct_1.unknown)()),\n    error: (0, superstruct_1.optional)(exports.JsonRpcErrorStruct),\n});\nexports.JsonRpcSuccessStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: exports.JsonStruct,\n});\nexports.JsonRpcFailureStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    error: exports.JsonRpcErrorStruct,\n});\nexports.JsonRpcResponseStruct = (0, superstruct_1.union)([\n    exports.JsonRpcSuccessStruct,\n    exports.JsonRpcFailureStruct,\n]);\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nfunction isPendingJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.PendingJsonRpcResponseStruct);\n}\nexports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nfunction assertIsPendingJsonRpcResponse(response, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(response, exports.PendingJsonRpcResponseStruct, 'Invalid pending JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nfunction isJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.JsonRpcResponseStruct);\n}\nexports.isJsonRpcResponse = isJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nfunction assertIsJsonRpcResponse(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcResponseStruct, 'Invalid JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nfunction isJsonRpcSuccess(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcSuccessStruct);\n}\nexports.isJsonRpcSuccess = isJsonRpcSuccess;\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nfunction assertIsJsonRpcSuccess(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcSuccessStruct, 'Invalid JSON-RPC success response', ErrorWrapper);\n}\nexports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nfunction isJsonRpcFailure(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcFailureStruct);\n}\nexports.isJsonRpcFailure = isJsonRpcFailure;\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nfunction assertIsJsonRpcFailure(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcFailureStruct, 'Invalid JSON-RPC failure response', ErrorWrapper);\n}\nexports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nfunction isJsonRpcError(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcErrorStruct);\n}\nexports.isJsonRpcError = isJsonRpcError;\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nfunction assertIsJsonRpcError(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcErrorStruct, 'Invalid JSON-RPC error', ErrorWrapper);\n}\nexports.assertIsJsonRpcError = assertIsJsonRpcError;\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nfunction getJsonRpcIdValidator(options) {\n    const { permitEmptyString, permitFractions, permitNull } = {\n        permitEmptyString: true,\n        permitFractions: false,\n        permitNull: true,\n        ...options,\n    };\n    /**\n     * Type guard for {@link JsonRpcId}.\n     *\n     * @param id - The JSON-RPC ID value to check.\n     * @returns Whether the given ID is valid per the options given to the\n     * factory.\n     */\n    const isValidJsonRpcId = (id) => {\n        return Boolean((typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n            (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n            (permitNull && id === null));\n    };\n    return isValidJsonRpcId;\n}\nexports.getJsonRpcIdValidator = getJsonRpcIdValidator;\n//# sourceMappingURL=json.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=keyring.cjs.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createModuleLogger = exports.createProjectLogger = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst globalLogger = (0, debug_1.default)('metamask');\n/**\n * Creates a logger via the `debug` library whose log messages will be tagged\n * using the name of your project. By default, such messages will be\n * suppressed, but you can reveal them by setting the `DEBUG` environment\n * variable to `metamask:<projectName>`. You can also set this variable to\n * `metamask:*` if you want to see log messages from all MetaMask projects that\n * are also using this function to create their loggers.\n *\n * @param projectName - The name of your project. This should be the name of\n * your NPM package if you're developing one.\n * @returns An instance of `debug`.\n */\nfunction createProjectLogger(projectName) {\n    return globalLogger.extend(projectName);\n}\nexports.createProjectLogger = createProjectLogger;\n/**\n * Creates a logger via the `debug` library which is derived from the logger for\n * the whole project whose log messages will be tagged using the name of your\n * module. By default, such messages will be suppressed, but you can reveal them\n * by setting the `DEBUG` environment variable to\n * `metamask:<projectName>:<moduleName>`. You can also set this variable to\n * `metamask:<projectName>:*` if you want to see log messages from the project,\n * or `metamask:*` if you want to see log messages from all MetaMask projects.\n *\n * @param projectLogger - The logger created via {@link createProjectLogger}.\n * @param moduleName - The name of your module. You could use the name of the\n * file where you're using this logger or some other name.\n * @returns An instance of `debug`.\n */\nfunction createModuleLogger(projectLogger, moduleName) {\n    return projectLogger.extend(moduleName);\n}\nexports.createModuleLogger = createModuleLogger;\n//# sourceMappingURL=logging.cjs.map","\"use strict\";\n//\n// Types\n//\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.getKnownPropertyNames = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;\n//\n// Type Guards\n//\n/**\n * A {@link NonEmptyArray} type guard.\n *\n * @template Element - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Type guard for \"nullishness\".\n *\n * @param value - Any value.\n * @returns `true` if the value is null or undefined, `false` otherwise.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nfunction isObject(value) {\n    return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\nexports.isObject = isObject;\n//\n// Other utility functions\n//\n/**\n * A type guard for ensuring an object has a property.\n *\n * @param objectToCheck - The object to check.\n * @param name - The property name to check for.\n * @returns Whether the specified object has an own property with the specified\n * name, regardless of whether it is enumerable or not.\n */\nconst hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);\nexports.hasProperty = hasProperty;\n/**\n * `Object.getOwnPropertyNames()` is intentionally generic: it returns the\n * immediate property names of an object, but it cannot make guarantees about\n * the contents of that object, so the type of the property names is merely\n * `string[]`. While this is technically accurate, it is also unnecessary if we\n * have an object with a type that we own (such as an enum).\n *\n * @param object - The plain object.\n * @returns The own property names of the object which are assigned a type\n * derived from the object itself.\n */\nfunction getKnownPropertyNames(object) {\n    return Object.getOwnPropertyNames(object);\n}\nexports.getKnownPropertyNames = getKnownPropertyNames;\n/**\n * Predefined sizes (in Bytes) of specific parts of JSON structure.\n */\nvar JsonSize;\n(function (JsonSize) {\n    JsonSize[JsonSize[\"Null\"] = 4] = \"Null\";\n    JsonSize[JsonSize[\"Comma\"] = 1] = \"Comma\";\n    JsonSize[JsonSize[\"Wrapper\"] = 1] = \"Wrapper\";\n    JsonSize[JsonSize[\"True\"] = 4] = \"True\";\n    JsonSize[JsonSize[\"False\"] = 5] = \"False\";\n    JsonSize[JsonSize[\"Quote\"] = 1] = \"Quote\";\n    JsonSize[JsonSize[\"Colon\"] = 1] = \"Colon\";\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    JsonSize[JsonSize[\"Date\"] = 24] = \"Date\";\n})(JsonSize = exports.JsonSize || (exports.JsonSize = {}));\n/**\n * Regular expression with pattern matching for (special) escaped characters.\n */\nexports.ESCAPE_CHARACTERS_REGEXP = /\"|\\\\|\\n|\\r|\\t/gu;\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nfunction isPlainObject(value) {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n    try {\n        let proto = value;\n        while (Object.getPrototypeOf(proto) !== null) {\n            proto = Object.getPrototypeOf(proto);\n        }\n        return Object.getPrototypeOf(value) === proto;\n    }\n    catch (_) {\n        return false;\n    }\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Check if character is ASCII.\n *\n * @param character - Character.\n * @returns True if a character code is ASCII, false if not.\n */\nfunction isASCII(character) {\n    return character.charCodeAt(0) <= 127;\n}\nexports.isASCII = isASCII;\n/**\n * Calculate string size.\n *\n * @param value - String value to calculate size.\n * @returns Number of bytes used to store whole string value.\n */\nfunction calculateStringSize(value) {\n    const size = value.split('').reduce((total, character) => {\n        if (isASCII(character)) {\n            return total + 1;\n        }\n        return total + 2;\n    }, 0);\n    // Also detect characters that need backslash escape\n    return size + (value.match(exports.ESCAPE_CHARACTERS_REGEXP) ?? []).length;\n}\nexports.calculateStringSize = calculateStringSize;\n/**\n * Calculate size of a number ofter JSON serialization.\n *\n * @param value - Number value to calculate size.\n * @returns Number of bytes used to store whole number in JSON.\n */\nfunction calculateNumberSize(value) {\n    return value.toString().length;\n}\nexports.calculateNumberSize = calculateNumberSize;\n//# sourceMappingURL=misc.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexToBigInt = exports.hexToNumber = exports.bigIntToHex = exports.numberToHex = void 0;\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n/**\n * Convert a number to a hexadecimal string. This verifies that the number is a\n * non-negative safe integer.\n *\n * To convert a `bigint` to a hexadecimal string instead, use\n * {@link bigIntToHex}.\n *\n * @example\n * ```typescript\n * numberToHex(0); // '0x0'\n * numberToHex(1); // '0x1'\n * numberToHex(16); // '0x10'\n * ```\n * @param value - The number to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the number is not a non-negative safe integer.\n */\nconst numberToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToHex` instead.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.numberToHex = numberToHex;\n/**\n * Convert a `bigint` to a hexadecimal string. This verifies that the `bigint`\n * is a non-negative integer.\n *\n * To convert a number to a hexadecimal string instead, use {@link numberToHex}.\n *\n * @example\n * ```typescript\n * bigIntToHex(0n); // '0x0'\n * bigIntToHex(1n); // '0x1'\n * bigIntToHex(16n); // '0x10'\n * ```\n * @param value - The `bigint` to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the `bigint` is not a non-negative integer.\n */\nconst bigIntToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative bigint.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert a hexadecimal string to a number. This verifies that the string is a\n * valid hex string, and that the resulting number is a safe integer. Both\n * \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a `bigint` instead, use\n * {@link hexToBigInt}.\n *\n * @example\n * ```typescript\n * hexToNumber('0x0'); // 0\n * hexToNumber('0x1'); // 1\n * hexToNumber('0x10'); // 16\n * ```\n * @param value - The hexadecimal string to convert to a number.\n * @returns The number.\n * @throws If the value is not a valid hexadecimal string, or if the resulting\n * number is not a safe integer.\n */\nconst hexToNumber = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // `parseInt` accepts values without the \"0x\"-prefix, whereas `Number` does\n    // not. Using this is slightly faster than `Number(add0x(value))`.\n    const numberValue = parseInt(value, 16);\n    (0, assert_1.assert)(Number.isSafeInteger(numberValue), 'Value is not a safe integer. Use `hexToBigInt` instead.');\n    return numberValue;\n};\nexports.hexToNumber = hexToNumber;\n/**\n * Convert a hexadecimal string to a `bigint`. This verifies that the string is\n * a valid hex string. Both \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a number instead, use {@link hexToNumber}.\n *\n * @example\n * ```typescript\n * hexToBigInt('0x0'); // 0n\n * hexToBigInt('0x1'); // 1n\n * hexToBigInt('0x10'); // 16n\n * ```\n * @param value - The hexadecimal string to convert to a `bigint`.\n * @returns The `bigint`.\n * @throws If the value is not a valid hexadecimal string.\n */\nconst hexToBigInt = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // The `BigInt` constructor requires the \"0x\"-prefix to parse a hex string.\n    return BigInt((0, hex_1.add0x)(value));\n};\nexports.hexToBigInt = hexToBigInt;\n//# sourceMappingURL=number.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=opaque.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDeferredPromise = void 0;\n/**\n * Create a defered Promise.\n *\n * If the Promise is rejected prior to a handler being added, this can result in an\n * `UnhandledPromiseRejection` error. Optionally this can be suppressed with the\n * `suppressUnhandledRejection` flag, as it's common to belatedly handle deferred Promises, or to\n * ignore them if they're no longer relevant (e.g. related to a cancelled request).\n *\n * However, be very careful that you have handled the Promise if you do this. Suppressing these\n * errors is dangerous, they exist for good reason. An unhandled rejection can hide errors, making\n * debugging extremely difficult. They should only be suppressed if you're confident that the\n * Promise is always handled correctly, in both the success and failure cases.\n *\n * @param args - The arguments.\n * @param args.suppressUnhandledRejection - This option adds an empty error handler\n * to the Promise to suppress the UnhandledPromiseRejection error. This can be\n * useful if the deferred Promise is sometimes intentionally not used.\n * @returns A deferred Promise.\n * @template Result - The result type of the Promise.\n */\nfunction createDeferredPromise({ suppressUnhandledRejection = false, } = {}) {\n    let resolve;\n    let reject;\n    const promise = new Promise((innerResolve, innerReject) => {\n        resolve = innerResolve;\n        reject = innerReject;\n    });\n    if (suppressUnhandledRejection) {\n        promise.catch((_error) => {\n            // This handler is used to suppress the UnhandledPromiseRejection error\n        });\n    }\n    // @ts-expect-error We know that these are assigned, but TypeScript doesn't\n    return { promise, resolve, reject };\n}\nexports.createDeferredPromise = createDeferredPromise;\n//# sourceMappingURL=promise.cjs.map","import { cloneDeep } from 'lodash';\n\nconst version = 63;\n\n/**\n * Moves token state from preferences controller to TokensController\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const accountTokens = state?.PreferencesController?.accountTokens;\n  const accountHiddenTokens = state?.PreferencesController?.accountHiddenTokens;\n\n  const newAllTokens = {};\n  if (accountTokens) {\n    Object.keys(accountTokens).forEach((accountAddress) => {\n      Object.keys(accountTokens[accountAddress]).forEach((chainId) => {\n        const tokensArray = accountTokens[accountAddress][chainId];\n        if (newAllTokens[chainId] === undefined) {\n          newAllTokens[chainId] = { [accountAddress]: tokensArray };\n        } else {\n          newAllTokens[chainId] = {\n            ...newAllTokens[chainId],\n            [accountAddress]: tokensArray,\n          };\n        }\n      });\n    });\n  }\n\n  const newAllIgnoredTokens = {};\n  if (accountHiddenTokens) {\n    Object.keys(accountHiddenTokens).forEach((accountAddress) => {\n      Object.keys(accountHiddenTokens[accountAddress]).forEach((chainId) => {\n        const ignoredTokensArray = accountHiddenTokens[accountAddress][chainId];\n        if (newAllIgnoredTokens[chainId] === undefined) {\n          newAllIgnoredTokens[chainId] = {\n            [accountAddress]: ignoredTokensArray,\n          };\n        } else {\n          newAllIgnoredTokens[chainId] = {\n            ...newAllIgnoredTokens[chainId],\n            [accountAddress]: ignoredTokensArray,\n          };\n        }\n      });\n    });\n  }\n\n  if (state.TokensController) {\n    state.TokensController.allTokens = newAllTokens;\n    state.TokensController.allIgnoredTokens = newAllIgnoredTokens;\n  } else {\n    state.TokensController = {\n      allTokens: newAllTokens,\n      allIgnoredTokens: newAllIgnoredTokens,\n    };\n  }\n\n  delete state?.PreferencesController?.accountHiddenTokens;\n  delete state?.PreferencesController?.accountTokens;\n  delete state?.PreferencesController?.assetImages;\n  delete state?.PreferencesController?.hiddenTokens;\n  delete state?.PreferencesController?.tokens;\n  delete state?.PreferencesController?.suggestedTokens;\n\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */\nvar Duration;\n(function (Duration) {\n    /**\n     * A millisecond.\n     */\n    Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n    /**\n     * A second, in milliseconds.\n     */\n    Duration[Duration[\"Second\"] = 1000] = \"Second\";\n    /**\n     * A minute, in milliseconds.\n     */\n    Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n    /**\n     * An hour, in milliseconds.\n     */\n    Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n    /**\n     * A day, in milliseconds.\n     */\n    Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n    /**\n     * A week, in milliseconds.\n     */\n    Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n    /**\n     * A year, in milliseconds.\n     */\n    Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = (number) => Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name) => {\n    if (!isNonNegativeInteger(number)) {\n        throw new Error(`\"${name}\" must be a non-negative integer. Received: \"${number}\".`);\n    }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nfunction inMilliseconds(count, duration) {\n    assertIsNonNegativeInteger(count, 'count');\n    return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n    assertIsNonNegativeInteger(timestamp, 'timestamp');\n    return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;\n//# sourceMappingURL=time.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=transaction-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst semver_1 = require(\"semver\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * A struct for validating a version string.\n */\nexports.VersionStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version', (value) => {\n    if ((0, semver_1.valid)(value) === null) {\n        return `Expected SemVer version, got \"${value}\"`;\n    }\n    return true;\n});\nexports.VersionRangeStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version range', (value) => {\n    if ((0, semver_1.validRange)(value) === null) {\n        return `Expected SemVer range, got \"${value}\"`;\n    }\n    return true;\n});\n/**\n * Checks whether a SemVer version is valid.\n *\n * @param version - A potential version.\n * @returns `true` if the version is valid, and `false` otherwise.\n */\nfunction isValidSemVerVersion(version) {\n    return (0, superstruct_1.is)(version, exports.VersionStruct);\n}\nexports.isValidSemVerVersion = isValidSemVerVersion;\n/**\n * Checks whether a SemVer version range is valid.\n *\n * @param versionRange - A potential version range.\n * @returns `true` if the version range is valid, and `false` otherwise.\n */\nfunction isValidSemVerRange(versionRange) {\n    return (0, superstruct_1.is)(versionRange, exports.VersionRangeStruct);\n}\nexports.isValidSemVerRange = isValidSemVerRange;\n/**\n * Asserts that a value is a valid concrete SemVer version.\n *\n * @param version - A potential SemVer concrete version.\n */\nfunction assertIsSemVerVersion(version) {\n    (0, assert_1.assertStruct)(version, exports.VersionStruct);\n}\nexports.assertIsSemVerVersion = assertIsSemVerVersion;\n/**\n * Asserts that a value is a valid SemVer range.\n *\n * @param range - A potential SemVer range.\n */\nfunction assertIsSemVerRange(range) {\n    (0, assert_1.assertStruct)(range, exports.VersionRangeStruct);\n}\nexports.assertIsSemVerRange = assertIsSemVerRange;\n/**\n * Checks whether a SemVer version is greater than another.\n *\n * @param version1 - The left-hand version.\n * @param version2 - The right-hand version.\n * @returns `version1 > version2`.\n */\nfunction gtVersion(version1, version2) {\n    return (0, semver_1.gt)(version1, version2);\n}\nexports.gtVersion = gtVersion;\n/**\n * Checks whether a SemVer version is greater than all possibilities in a range.\n *\n * @param version - A SemvVer version.\n * @param range - The range to check against.\n * @returns `version > range`.\n */\nfunction gtRange(version, range) {\n    return (0, semver_1.gtr)(version, range);\n}\nexports.gtRange = gtRange;\n/**\n * Returns whether a SemVer version satisfies a SemVer range.\n *\n * @param version - The SemVer version to check.\n * @param versionRange - The SemVer version range to check against.\n * @returns Whether the version satisfied the version range.\n */\nfunction satisfiesVersionRange(version, versionRange) {\n    return (0, semver_1.satisfies)(version, versionRange, {\n        includePrerelease: true,\n    });\n}\nexports.satisfiesVersionRange = satisfiesVersionRange;\n//# sourceMappingURL=versions.cjs.map","import { cloneDeep, isPlainObject } from 'lodash';\nimport { TransactionType } from '@metamask/transaction-controller';\n\nconst version = 64;\n\nconst SENT_ETHER = 'sentEther'; // the legacy transaction type being replaced in this migration with TransactionType.simpleSend\n\n/**\n * Removes metaMetricsSendCount from MetaMetrics controller\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const transactions = state?.TransactionController?.transactions;\n  if (isPlainObject(transactions)) {\n    for (const tx of Object.values(transactions)) {\n      if (tx.type === SENT_ETHER) {\n        tx.type = TransactionType.simpleSend;\n      }\n      if (tx.history) {\n        tx.history.map((txEvent) => {\n          if (txEvent.type && txEvent.type === SENT_ETHER) {\n            txEvent.type = TransactionType.simpleSend;\n          }\n          return txEvent;\n        });\n      }\n    }\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 65;\n\n/**\n * Removes metaMetricsSendCount from MetaMetrics controller\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state.PreferencesController) {\n    const { completedOnboarding, firstTimeFlowType } =\n      state.PreferencesController;\n    state.OnboardingController = state.OnboardingController ?? {};\n\n    if (completedOnboarding !== undefined) {\n      state.OnboardingController.completedOnboarding = completedOnboarding;\n      delete state.PreferencesController.completedOnboarding;\n    }\n    if (firstTimeFlowType !== undefined) {\n      state.OnboardingController.firstTimeFlowType = firstTimeFlowType;\n      delete state.PreferencesController.firstTimeFlowType;\n    }\n  }\n\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport { LedgerTransportTypes } from '../../../shared/constants/hardware-wallets';\n\nconst version = 66;\n\n/**\n * Changes the useLedgerLive boolean property to the ledgerTransportType enum\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const defaultTransportType = window.navigator.hid\n    ? LedgerTransportTypes.webhid\n    : LedgerTransportTypes.u2f;\n  const useLedgerLive = Boolean(state.PreferencesController?.useLedgerLive);\n  const newState = {\n    ...state,\n    PreferencesController: {\n      ...state?.PreferencesController,\n      ledgerTransportType: useLedgerLive\n        ? LedgerTransportTypes.live\n        : defaultTransportType,\n    },\n  };\n  delete newState.PreferencesController.useLedgerLive;\n  return newState;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/QueuedRequestController.ts\nvar _basecontroller = require('@metamask/base-controller');\nvar _selectednetworkcontroller = require('@metamask/selected-network-controller');\nvar _utils = require('@metamask/utils');\nvar controllerName = \"QueuedRequestController\";\nvar QueuedRequestControllerActionTypes = {\n  enqueueRequest: `${controllerName}:enqueueRequest`,\n  getState: `${controllerName}:getState`\n};\nvar QueuedRequestControllerEventTypes = {\n  networkSwitched: `${controllerName}:networkSwitched`,\n  stateChange: `${controllerName}:stateChange`\n};\nvar _originOfCurrentBatch, _requestQueue, _processingRequestCount, _shouldRequestSwitchNetwork, _clearPendingConfirmations, _showApprovalRequest, _registerMessageHandlers, registerMessageHandlers_fn, _flushQueueForOrigin, flushQueueForOrigin_fn, _processNextBatch, processNextBatch_fn, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn, _updateQueuedRequestCount, updateQueuedRequestCount_fn, _waitForDequeue, waitForDequeue_fn;\nvar QueuedRequestController = class extends _basecontroller.BaseController {\n  /**\n   * Construct a QueuedRequestController.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - The restricted controller messenger that facilitates communication with other controllers.\n   * @param options.shouldRequestSwitchNetwork - A function that returns if a request requires the globally selected network to match the dapp selected network.\n   * @param options.clearPendingConfirmations - A function that will clear all the pending confirmations.\n   * @param options.showApprovalRequest - A function for opening the UI such that\n   * the existing request can be displayed to the user.\n   */\n  constructor({\n    messenger,\n    shouldRequestSwitchNetwork,\n    clearPendingConfirmations,\n    showApprovalRequest\n  }) {\n    super({\n      name: controllerName,\n      metadata: {\n        queuedRequestCount: {\n          anonymous: true,\n          persist: false\n        }\n      },\n      messenger,\n      state: { queuedRequestCount: 0 }\n    });\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _registerMessageHandlers);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _flushQueueForOrigin);\n    /**\n     * Process the next batch of requests.\n     *\n     * This will trigger the next batch of requests with matching origins to be processed. Each\n     * request in the batch is dequeued one at a time, in chronological order, but they all get\n     * processed in parallel.\n     *\n     * This should be called after a batch of requests has finished processing, if the queue is non-\n     * empty.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _processNextBatch);\n    /**\n     * Switch the globally selected network client to match the network\n     * client of the current batch.\n     *\n     * @throws Throws an error if the current selected `networkClientId` or the\n     * `networkClientId` on the request are invalid.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _switchNetworkIfNecessary);\n    /**\n     * Update the queued request count.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _updateQueuedRequestCount);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _waitForDequeue);\n    /**\n     * The origin of the current batch of requests being processed, or `undefined` if there are no\n     * requests currently being processed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _originOfCurrentBatch, void 0);\n    /**\n     * The list of all queued requests, in chronological order.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _requestQueue, []);\n    /**\n     * The number of requests currently being processed.\n     *\n     * Note that this does not include queued requests, just those being actively processed (i.e.\n     * those in the \"current batch\").\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _processingRequestCount, 0);\n    /**\n     * This is a function that returns true if a request requires the globally selected\n     * network to match the dapp selected network before being processed. These can\n     * be for UI/UX reasons where the currently selected network is displayed\n     * in the confirmation even though it will be submitted on the correct\n     * network for the dapp. It could also be that a method expects the\n     * globally selected network to match some value in the request params itself.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _shouldRequestSwitchNetwork, void 0);\n    /**\n     * This is a function that clears all pending confirmations across\n     * several controllers that may handle them.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _clearPendingConfirmations, void 0);\n    /**\n     * This is a function that makes the confirmation notification view\n     * become visible and focused to the user\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _showApprovalRequest, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _shouldRequestSwitchNetwork, shouldRequestSwitchNetwork);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _clearPendingConfirmations, clearPendingConfirmations);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _showApprovalRequest, showApprovalRequest);\n    _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _registerMessageHandlers, registerMessageHandlers_fn).call(this);\n  }\n  /**\n   * Enqueue a request to be processed in a batch with other requests from the same origin.\n   *\n   * We process requests one origin at a time, so that requests from different origins do not get\n   * interwoven, and so that we can ensure that the globally selected network matches the dapp-\n   * selected network.\n   *\n   * Requests get processed in order of insertion, even across origins/batches. All requests get\n   * processed even in the event of preceding requests failing.\n   *\n   * @param request - The JSON-RPC request to process.\n   * @param requestNext - A function representing the next steps for processing this request.\n   * @returns A promise that resolves when the given request has been fully processed.\n   */\n  async enqueueRequest(request, requestNext) {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch) === void 0) {\n      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _originOfCurrentBatch, request.origin);\n    }\n    try {\n      if (this.state.queuedRequestCount > 0 || _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch) !== request.origin) {\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _showApprovalRequest).call(this);\n        await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _waitForDequeue, waitForDequeue_fn).call(this, request.origin);\n      } else if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _shouldRequestSwitchNetwork).call(this, request)) {\n        await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn).call(this);\n      }\n      _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _processingRequestCount, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _processingRequestCount) + 1);\n      try {\n        await requestNext();\n      } finally {\n        _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _processingRequestCount, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _processingRequestCount) - 1);\n      }\n      return void 0;\n    } finally {\n      if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _processingRequestCount) === 0) {\n        _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _originOfCurrentBatch, void 0);\n        if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).length > 0) {\n          _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _processNextBatch, processNextBatch_fn).call(this);\n        }\n      }\n    }\n  }\n};\n_originOfCurrentBatch = new WeakMap();\n_requestQueue = new WeakMap();\n_processingRequestCount = new WeakMap();\n_shouldRequestSwitchNetwork = new WeakMap();\n_clearPendingConfirmations = new WeakMap();\n_showApprovalRequest = new WeakMap();\n_registerMessageHandlers = new WeakSet();\nregisterMessageHandlers_fn = function() {\n  this.messagingSystem.registerActionHandler(\n    `${controllerName}:enqueueRequest`,\n    this.enqueueRequest.bind(this)\n  );\n  this.messagingSystem.subscribe(\n    _selectednetworkcontroller.SelectedNetworkControllerEventTypes.stateChange,\n    (_, patch) => {\n      patch.forEach(({ op, path }) => {\n        if (path.length === 2 && path[0] === \"domains\" && typeof path[1] === \"string\") {\n          const origin = path[1];\n          _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _flushQueueForOrigin, flushQueueForOrigin_fn).call(this, origin);\n          if (op === \"remove\" && origin === _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch)) {\n            _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _clearPendingConfirmations).call(this);\n          }\n        }\n      });\n    }\n  );\n};\n_flushQueueForOrigin = new WeakSet();\nflushQueueForOrigin_fn = function(flushOrigin) {\n  _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).filter(({ origin }) => origin === flushOrigin).forEach(({ processRequest }) => {\n    processRequest(\n      new Error(\n        \"The request has been rejected due to a change in selected network. Please verify the selected network and retry the request.\"\n      )\n    );\n  });\n  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _requestQueue, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).filter(\n    ({ origin }) => origin !== flushOrigin\n  ));\n};\n_processNextBatch = new WeakSet();\nprocessNextBatch_fn = async function() {\n  const firstRequest = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).shift();\n  _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _originOfCurrentBatch, firstRequest.origin);\n  const batch = [firstRequest.processRequest];\n  while (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue)[0]?.origin === _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch)) {\n    const nextEntry = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).shift();\n    batch.push(nextEntry.processRequest);\n  }\n  let networkSwitchError;\n  try {\n    await _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _switchNetworkIfNecessary, switchNetworkIfNecessary_fn).call(this);\n  } catch (error) {\n    networkSwitchError = error;\n  }\n  for (const processRequest of batch) {\n    processRequest(networkSwitchError);\n  }\n  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateQueuedRequestCount, updateQueuedRequestCount_fn).call(this);\n};\n_switchNetworkIfNecessary = new WeakSet();\nswitchNetworkIfNecessary_fn = async function() {\n  if (!_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch)) {\n    throw new Error(\"Current batch origin must be initialized first\");\n  }\n  const originNetworkClientId = this.messagingSystem.call(\n    \"SelectedNetworkController:getNetworkClientIdForDomain\",\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _originOfCurrentBatch)\n  );\n  const { selectedNetworkClientId } = this.messagingSystem.call(\n    \"NetworkController:getState\"\n  );\n  if (originNetworkClientId === selectedNetworkClientId) {\n    return;\n  }\n  await this.messagingSystem.call(\n    \"NetworkController:setActiveNetwork\",\n    originNetworkClientId\n  );\n  this.messagingSystem.publish(\n    \"QueuedRequestController:networkSwitched\",\n    originNetworkClientId\n  );\n};\n_updateQueuedRequestCount = new WeakSet();\nupdateQueuedRequestCount_fn = function() {\n  this.update((state) => {\n    state.queuedRequestCount = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).length;\n  });\n};\n_waitForDequeue = new WeakSet();\nwaitForDequeue_fn = async function(origin) {\n  const { promise, reject, resolve } = _utils.createDeferredPromise.call(void 0, {\n    suppressUnhandledRejection: true\n  });\n  _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _requestQueue).push({\n    origin,\n    processRequest: (error) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve();\n      }\n    }\n  });\n  _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _updateQueuedRequestCount, updateQueuedRequestCount_fn).call(this);\n  return promise;\n};\n\n\n\n\n\n\nexports.controllerName = controllerName; exports.QueuedRequestControllerActionTypes = QueuedRequestControllerActionTypes; exports.QueuedRequestControllerEventTypes = QueuedRequestControllerEventTypes; exports.QueuedRequestController = QueuedRequestController;\n//# sourceMappingURL=chunk-5GMDEBVM.js.map","import { cloneDeep } from 'lodash';\nimport BigNumber from 'bignumber.js';\nimport { TEST_CHAINS } from '../../../shared/constants/network';\n\nconst hexNumberIsGreaterThanZero = (hexNumber) =>\n  new BigNumber(hexNumber || '0x0', 16).gt(0);\n\nconst version = 67;\n\n/**\n * Sets the showTestNetworks property to true if it was false or undefined, and there is evidence\n * that the user has used a test net\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const PreferencesController = state?.PreferencesController || {};\n  const preferences = PreferencesController.preferences || {};\n\n  if (preferences.showTestNetworks) {\n    return state;\n  }\n\n  const transactions = state?.TransactionController?.transactions || {};\n  const provider = state.NetworkController?.provider || {};\n  const cachedBalances = state.CachedBalancesController?.cachedBalances || {};\n\n  const userIsCurrentlyOnATestNet = TEST_CHAINS.includes(provider?.chainId);\n  const userHasMadeATestNetTransaction = Object.values(transactions).some(\n    ({ chainId }) => TEST_CHAINS.includes(chainId),\n  );\n  const userHasACachedBalanceOnATestnet = TEST_CHAINS.some((chainId) => {\n    const cachedBalancesForChain = Object.values(cachedBalances[chainId] || {});\n    const userHasABalanceGreaterThanZeroOnThisChain =\n      cachedBalancesForChain.some(hexNumberIsGreaterThanZero);\n    return userHasABalanceGreaterThanZeroOnThisChain;\n  });\n  const userHasUsedATestnet =\n    userIsCurrentlyOnATestNet ||\n    userHasMadeATestNetTransaction ||\n    userHasACachedBalanceOnATestnet;\n\n  const newState = {\n    ...state,\n    PreferencesController: {\n      ...PreferencesController,\n      preferences: {\n        ...preferences,\n        showTestNetworks: userHasUsedATestnet,\n      },\n    },\n  };\n\n  return newState;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/QueuedRequestMiddleware.ts\nvar _jsonrpcengine = require('@metamask/json-rpc-engine');\nvar _rpcerrors = require('@metamask/rpc-errors');\nfunction hasRequiredMetadata(request) {\n  if (!request.origin) {\n    throw new Error(\"Request object is lacking an 'origin'\");\n  } else if (typeof request.origin !== \"string\") {\n    throw new Error(\n      `Request object has an invalid origin of type '${typeof request.origin}'`\n    );\n  } else if (!request.networkClientId) {\n    throw new Error(\"Request object is lacking a 'networkClientId'\");\n  } else if (typeof request.networkClientId !== \"string\") {\n    throw new Error(\n      `Request object has an invalid networkClientId of type '${typeof request.networkClientId}'`\n    );\n  }\n}\nvar createQueuedRequestMiddleware = ({\n  enqueueRequest,\n  useRequestQueue,\n  shouldEnqueueRequest\n}) => {\n  return _jsonrpcengine.createAsyncMiddleware.call(void 0, async (req, res, next) => {\n    hasRequiredMetadata(req);\n    if (!useRequestQueue() || !shouldEnqueueRequest(req)) {\n      return await next();\n    }\n    try {\n      await enqueueRequest(req, next);\n    } catch (error) {\n      res.error = _rpcerrors.serializeError.call(void 0, error);\n    }\n    return void 0;\n  });\n};\n\n\n\nexports.createQueuedRequestMiddleware = createQueuedRequestMiddleware;\n//# sourceMappingURL=chunk-VLAKOB6V.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _chunk5GMDEBVMjs = require('./chunk-5GMDEBVM.js');\n\n\nvar _chunkVLAKOB6Vjs = require('./chunk-VLAKOB6V.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\nexports.QueuedRequestController = _chunk5GMDEBVMjs.QueuedRequestController; exports.QueuedRequestControllerActionTypes = _chunk5GMDEBVMjs.QueuedRequestControllerActionTypes; exports.QueuedRequestControllerEventTypes = _chunk5GMDEBVMjs.QueuedRequestControllerEventTypes; exports.createQueuedRequestMiddleware = _chunkVLAKOB6Vjs.createQueuedRequestMiddleware;\n//# sourceMappingURL=index.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/BaseControllerV1.ts\nvar BaseControllerV1 = class {\n  /**\n   * Creates a BaseControllerV1 instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config = {}, state = {}) {\n    /**\n     * Default options used to configure this controller\n     */\n    this.defaultConfig = {};\n    /**\n     * Default state set on this controller\n     */\n    this.defaultState = {};\n    /**\n     * Determines if listeners are notified of state changes\n     */\n    this.disabled = false;\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"BaseController\";\n    this.internalConfig = this.defaultConfig;\n    this.internalState = this.defaultState;\n    this.internalListeners = [];\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns This controller instance.\n   */\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n  /**\n   * Retrieves current controller configuration options.\n   *\n   * @returns The current configuration.\n   */\n  get config() {\n    return this.internalConfig;\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return this.internalState;\n  }\n  /**\n   * Updates controller configuration.\n   *\n   * @param config - New configuration options.\n   * @param overwrite - Overwrite config instead of merging.\n   * @param fullUpdate - Boolean that defines if the update is partial or not.\n   */\n  configure(config, overwrite = false, fullUpdate = true) {\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key of Object.keys(this.internalConfig)) {\n        const value = this.internalConfig[key];\n        if (value !== void 0) {\n          this[key] = value;\n        }\n      }\n    } else {\n      for (const key of Object.keys(config)) {\n        if (this.internalConfig[key] !== void 0) {\n          const value = config[key];\n          this.internalConfig[key] = value;\n          this[key] = value;\n        }\n      }\n    }\n  }\n  /**\n   * Notifies all subscribed listeners of current state.\n   */\n  notify() {\n    if (this.disabled) {\n      return;\n    }\n    this.internalListeners.forEach((listener) => {\n      listener(this.internalState);\n    });\n  }\n  /**\n   * Adds new listener to be notified of state changes.\n   *\n   * @param listener - The callback triggered when state changes.\n   */\n  subscribe(listener) {\n    this.internalListeners.push(listener);\n  }\n  /**\n   * Removes existing listener from receiving state changes.\n   *\n   * @param listener - The callback to remove.\n   * @returns `true` if a listener is found and unsubscribed.\n   */\n  unsubscribe(listener) {\n    const index = this.internalListeners.findIndex((cb) => listener === cb);\n    index > -1 && this.internalListeners.splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Updates controller state.\n   *\n   * @param state - The new state.\n   * @param overwrite - Overwrite state instead of merging.\n   */\n  update(state, overwrite = false) {\n    this.internalState = overwrite ? Object.assign({}, state) : Object.assign({}, this.internalState, state);\n    this.notify();\n  }\n};\nvar BaseControllerV1_default = BaseControllerV1;\n\n\n\n\nexports.BaseControllerV1 = BaseControllerV1; exports.BaseControllerV1_default = BaseControllerV1_default;\n//# sourceMappingURL=chunk-FTHCJ6HY.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/ControllerMessenger.ts\nvar _actions, _events, _initialEventPayloadGetters, _eventPayloadCache;\nvar ControllerMessenger = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _actions, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _events, /* @__PURE__ */ new Map());\n    /**\n     * A map of functions for getting the initial event payload.\n     *\n     * Used only for events that represent state changes.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _initialEventPayloadGetters, /* @__PURE__ */ new Map());\n    /**\n     * A cache of selector return values for their respective handlers.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _eventPayloadCache, /* @__PURE__ */ new Map());\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw when a handler has been registered for this action type already.\n   * @template ActionType - A type union of Action type strings.\n   */\n  registerActionHandler(actionType, handler) {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).has(actionType)) {\n      throw new Error(\n        `A handler for ${actionType} has already been registered`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).set(actionType, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @template ActionType - A type union of Action type strings.\n   */\n  unregisterActionHandler(actionType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).delete(actionType);\n  }\n  /**\n   * Unregister all action handlers.\n   *\n   * This prevents all actions from being called.\n   */\n  clearActions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).clear();\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    const handler = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).get(actionType);\n    if (!handler) {\n      throw new Error(`A handler for ${actionType} has not been registered`);\n    }\n    return handler(...params);\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).set(eventType, getPayload);\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * Note that this method should never throw directly. Any errors from\n   * subscribers are captured and re-thrown in a timeout handler.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @template EventType - A type union of Event type strings.\n   */\n  publish(eventType, ...payload) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (subscribers) {\n      for (const [handler, selector] of subscribers.entries()) {\n        try {\n          if (selector) {\n            const previousValue = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).get(handler);\n            const newValue = selector(...payload);\n            if (newValue !== previousValue) {\n              _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, newValue);\n              handler(newValue, previousValue);\n            }\n          } else {\n            handler(...payload);\n          }\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          });\n        }\n      }\n    }\n  }\n  subscribe(eventType, handler, selector) {\n    let subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers) {\n      subscribers = /* @__PURE__ */ new Map();\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).set(eventType, subscribers);\n    }\n    subscribers.set(handler, selector);\n    if (selector) {\n      const getPayload = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).get(eventType);\n      if (getPayload) {\n        const initialValue = selector(...getPayload());\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, initialValue);\n      }\n    }\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw when the given event handler is not registered for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  unsubscribe(eventType, handler) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers || !subscribers.has(handler)) {\n      throw new Error(`Subscription not found for event: ${eventType}`);\n    }\n    const selector = subscribers.get(handler);\n    if (selector) {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).delete(handler);\n    }\n    subscribers.delete(handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  clearEventSubscriptions(eventType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).delete(eventType);\n  }\n  /**\n   * Clear all subscriptions.\n   *\n   * This will remove all subscribed handlers for all events.\n   */\n  clearSubscriptions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).clear();\n  }\n  /**\n   * Get a restricted controller messenger\n   *\n   * Returns a wrapper around the controller messenger instance that restricts access to actions\n   * and events. The provided allowlists grant the ability to call the listed actions and subscribe\n   * to the listed events. The \"name\" provided grants ownership of any actions and events under\n   * that namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - Controller messenger options.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   * @template Namespace - The namespace for this messenger. Typically this is the name of the controller or\n   * module that this messenger has been created for. The authority to publish events and register\n   * actions under this namespace is granted to this restricted messenger instance.\n   * @template AllowedAction - A type union of the 'type' string for any allowed actions.\n   * This must not include internal actions that are in the messenger's namespace.\n   * @template AllowedEvent - A type union of the 'type' string for any allowed events.\n   * This must not include internal events that are in the messenger's namespace.\n   * @returns The restricted controller messenger.\n   */\n  getRestricted({\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    return new (0, _chunkUJFCPTF3js.RestrictedControllerMessenger)({\n      controllerMessenger: this,\n      name,\n      allowedActions,\n      allowedEvents\n    });\n  }\n};\n_actions = new WeakMap();\n_events = new WeakMap();\n_initialEventPayloadGetters = new WeakMap();\n_eventPayloadCache = new WeakMap();\n\n\n\nexports.ControllerMessenger = ControllerMessenger;\n//# sourceMappingURL=chunk-G42723LG.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/BaseControllerV2.ts\nvar _immer = require('immer');\n_immer.enablePatches.call(void 0, );\nvar _internalState;\nvar BaseController = class {\n  /**\n   * Creates a BaseController instance.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - Controller messaging system.\n   * @param options.metadata - ControllerState metadata, describing how to \"anonymize\" the state, and which\n   * parts should be persisted.\n   * @param options.name - The name of the controller, used as a namespace for events and actions.\n   * @param options.state - Initial controller state.\n   */\n  constructor({\n    messenger,\n    metadata,\n    name,\n    state\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _internalState, void 0);\n    this.messagingSystem = messenger;\n    this.name = name;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, _immer.freeze.call(void 0, state, true));\n    this.metadata = metadata;\n    this.messagingSystem.registerActionHandler(\n      `${name}:getState`,\n      () => this.state\n    );\n    this.messagingSystem.registerInitialEventPayload({\n      eventType: `${name}:stateChange`,\n      getPayload: () => [this.state, []]\n    });\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState);\n  }\n  set state(_) {\n    throw new Error(\n      `Controller state cannot be directly mutated; use 'update' method instead.`\n    );\n  }\n  /**\n   * Updates controller state. Accepts a callback that is passed a draft copy\n   * of the controller state. If a value is returned, it is set as the new\n   * state. Otherwise, any changes made within that callback to the draft are\n   * applied to the controller state.\n   *\n   * @param callback - Callback for updating state, passed a draft state\n   * object. Return a new state object or mutate the draft to update state.\n   * @returns An object that has the next state, patches applied in the update and inverse patches to\n   * rollback the update.\n   */\n  update(callback) {\n    const [nextState, patches, inversePatches] = _immer.produceWithPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), callback);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n    return { nextState, patches, inversePatches };\n  }\n  /**\n   * Applies immer patches to the current state. The patches come from the\n   * update function itself and can either be normal or inverse patches.\n   *\n   * @param patches - An array of immer patches that are to be applied to make\n   * or undo changes.\n   */\n  applyPatches(patches) {\n    const nextState = _immer.applyPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), patches);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n  }\n  /**\n   * Prepares the controller for garbage collection. This should be extended\n   * by any subclasses to clean up any additional connections or events.\n   *\n   * The only cleanup performed here is to remove listeners. While technically\n   * this is not required to ensure this instance is garbage collected, it at\n   * least ensures this instance won't be responsible for preventing the\n   * listeners from being garbage collected.\n   */\n  destroy() {\n    this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`);\n  }\n};\n_internalState = new WeakMap();\nfunction getAnonymizedState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"anonymous\");\n}\nfunction getPersistentState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"persist\");\n}\nfunction deriveStateFromMetadata(state, metadata, metadataProperty) {\n  return Object.keys(state).reduce((derivedState, key) => {\n    try {\n      const stateMetadata = metadata[key];\n      if (!stateMetadata) {\n        throw new Error(`No metadata found for '${String(key)}'`);\n      }\n      const propertyMetadata = stateMetadata[metadataProperty];\n      const stateProperty = state[key];\n      if (typeof propertyMetadata === \"function\") {\n        derivedState[key] = propertyMetadata(stateProperty);\n      } else if (propertyMetadata) {\n        derivedState[key] = stateProperty;\n      }\n      return derivedState;\n    } catch (error) {\n      setTimeout(() => {\n        throw error;\n      });\n      return derivedState;\n    }\n  }, {});\n}\n\n\n\n\n\nexports.BaseController = BaseController; exports.getAnonymizedState = getAnonymizedState; exports.getPersistentState = getPersistentState;\n//# sourceMappingURL=chunk-IURK6TKD.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/RestrictedControllerMessenger.ts\nvar _controllerMessenger, _controllerName, _allowedActions, _allowedEvents, _isAllowedEvent, isAllowedEvent_fn, _isAllowedAction, isAllowedAction_fn, _isInCurrentNamespace, isInCurrentNamespace_fn;\nvar RestrictedControllerMessenger = class {\n  /**\n   * Constructs a restricted controller messenger\n   *\n   * The provided allowlists grant the ability to call the listed actions and subscribe to the\n   * listed events. The \"name\" provided grants ownership of any actions and events under that\n   * namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - The controller options.\n   * @param options.controllerMessenger - The controller messenger instance that is being wrapped.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   */\n  constructor({\n    controllerMessenger,\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    /**\n     * Determine whether the given event type is allowed. Event types are\n     * allowed if they are in the current namespace or on the list of\n     * allowed events.\n     *\n     * @param eventType - The event type to check.\n     * @returns Whether the event type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedEvent);\n    /**\n     * Determine whether the given action type is allowed. Action types\n     * are allowed if they are in the current namespace or on the list of\n     * allowed actions.\n     *\n     * @param actionType - The action type to check.\n     * @returns Whether the action type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedAction);\n    /**\n     * Determine whether the given name is within the current namespace.\n     *\n     * @param name - The name to check\n     * @returns Whether the name is within the current namespace\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isInCurrentNamespace);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerMessenger, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerName, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedActions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedEvents, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerMessenger, controllerMessenger);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerName, name);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedActions, allowedActions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedEvents, allowedEvents);\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * The action type this handler is registered under *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw if an action handler that is not in the current namespace is being registered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  registerActionHandler(action, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed registering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerActionHandler(action, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * The action type being unregistered *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unique identifier for this action.\n   * @throws Will throw if an action handler that is not in the current namespace is being unregistered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  unregisterActionHandler(action) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed unregistering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unregisterActionHandler(action);\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * The action type being called must be on the action allowlist.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of allowed Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedAction, isAllowedAction_fn).call(this, actionType)) {\n      throw new Error(`Action missing from allow list: ${actionType}`);\n    }\n    const response = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).call(\n      actionType,\n      ...params\n    );\n    return response;\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * The event type *must* be in the current namespace\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerInitialEventPayload({\n      eventType,\n      getPayload\n    });\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * The event type being published *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @throws Will throw if an event that is not in the current namespace is being published.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  publish(event, ...payload) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).publish(event, ...payload);\n  }\n  subscribe(event, handler, selector) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    if (selector) {\n      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler, selector);\n    }\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler);\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * The event type being unsubscribed to must be on the event allowlist.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw if the given event is not an allowed event for this controller messenger.\n   * @template EventType - A type union of allowed Event type strings.\n   */\n  unsubscribe(event, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unsubscribe(event, handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * The event type being cleared *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @throws Will throw if a subscription for an event that is not in the current namespace is being cleared.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  clearEventSubscriptions(event) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed clearing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).clearEventSubscriptions(event);\n  }\n};\n_controllerMessenger = new WeakMap();\n_controllerName = new WeakMap();\n_allowedActions = new WeakMap();\n_allowedEvents = new WeakMap();\n_isAllowedEvent = new WeakSet();\nisAllowedEvent_fn = function(eventType) {\n  const allowedEvents = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedEvents);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType) || allowedEvents !== null && allowedEvents.includes(eventType);\n};\n_isAllowedAction = new WeakSet();\nisAllowedAction_fn = function(actionType) {\n  const allowedActions = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedActions);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, actionType) || allowedActions !== null && allowedActions.includes(actionType);\n};\n_isInCurrentNamespace = new WeakSet();\nisInCurrentNamespace_fn = function(name) {\n  return name.startsWith(`${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:`);\n};\n\n\n\nexports.RestrictedControllerMessenger = RestrictedControllerMessenger;\n//# sourceMappingURL=chunk-UJFCPTF3.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkFTHCJ6HYjs = require('./chunk-FTHCJ6HY.js');\n\n\n\n\nvar _chunkIURK6TKDjs = require('./chunk-IURK6TKD.js');\n\n\nvar _chunkG42723LGjs = require('./chunk-G42723LG.js');\n\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\n\n\nexports.BaseController = _chunkIURK6TKDjs.BaseController; exports.BaseControllerV1 = _chunkFTHCJ6HYjs.BaseControllerV1; exports.ControllerMessenger = _chunkG42723LGjs.ControllerMessenger; exports.RestrictedControllerMessenger = _chunkUJFCPTF3js.RestrictedControllerMessenger; exports.getAnonymizedState = _chunkIURK6TKDjs.getAnonymizedState; exports.getPersistentState = _chunkIURK6TKDjs.getPersistentState;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst errors_1 = require(\"./errors.cjs\");\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(fn) {\n    /* istanbul ignore next */\n    return Boolean(typeof fn?.prototype?.constructor?.name === 'string');\n}\n/**\n * Attempts to obtain the message from a possible error object. If it is\n * possible to do so, any trailing period will be removed from the message;\n * otherwise an empty string is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The message without any trailing period if `error` is an object\n * with a `message` property; the string version of `error` without any trailing\n * period if it is not `undefined` or `null`; otherwise an empty string.\n */\nfunction getErrorMessageWithoutTrailingPeriod(error) {\n    // We'll add our own period.\n    return (0, errors_1.getErrorMessage)(error).replace(/\\.$/u, '');\n}\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper, message) {\n    if (isConstructable(ErrorWrapper)) {\n        return new ErrorWrapper({\n            message,\n        });\n    }\n    return ErrorWrapper({\n        message,\n    });\n}\n/**\n * The default error class that is thrown if an assertion fails.\n */\nclass AssertionError extends Error {\n    constructor(options) {\n        super(options.message);\n        this.code = 'ERR_ASSERTION';\n    }\n}\nexports.AssertionError = AssertionError;\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nfunction assert(value, message = 'Assertion failed.', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    if (!value) {\n        if (message instanceof Error) {\n            throw message;\n        }\n        throw getError(ErrorWrapper, message);\n    }\n}\nexports.assert = assert;\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nfunction assertStruct(value, struct, errorPrefix = 'Assertion failed', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    try {\n        (0, superstruct_1.assert)(value, struct);\n    }\n    catch (error) {\n        throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessageWithoutTrailingPeriod(error)}.`);\n    }\n}\nexports.assertStruct = assertStruct;\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nfunction assertExhaustive(_object) {\n    throw new Error('Invalid branch reached. Should be detected during compilation.');\n}\nexports.assertExhaustive = assertExhaustive;\n//# sourceMappingURL=assert.cjs.map","import { cloneDeep } from 'lodash';\n\nconst version = 68;\n\n/**\n * Transforms the PermissionsController and PermissionsMetadata substates\n * to match the new permission system.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const {\n    PermissionsController = {},\n    PermissionsMetadata = {},\n    ...remainingState\n  } = state;\n\n  const {\n    domainMetadata = {},\n    permissionsHistory = {},\n    permissionsLog = [],\n  } = PermissionsMetadata;\n\n  return {\n    ...remainingState,\n    PermissionController: getPermissionControllerState(PermissionsController),\n    PermissionLogController: {\n      permissionActivityLog: permissionsLog,\n      permissionHistory: permissionsHistory,\n    },\n    SubjectMetadataController:\n      getSubjectMetadataControllerState(domainMetadata),\n  };\n}\n\nfunction getPermissionControllerState(PermissionsController) {\n  const { domains = {} } = PermissionsController;\n\n  /**\n   * Example existing domain entry. Every existing domain will have a single\n   * eth_accounts permission, which simplifies the transform.\n   *\n   * 'https://metamask.github.io': {\n   *   permissions: [\n   *     {\n   *       '@context': ['https://github.com/MetaMask/rpc-cap'],\n   *       'caveats': [\n   *         {\n   *           name: 'primaryAccountOnly',\n   *           type: 'limitResponseLength',\n   *           value: 1,\n   *         },\n   *         {\n   *           name: 'exposedAccounts',\n   *           type: 'filterResponse',\n   *           value: ['0x0c97a5c81e50a02ff8be73cc3f0a0569e61f4ed8'],\n   *         },\n   *       ],\n   *       'date': 1616006369498,\n   *       'id': '3d0bdc27-e8e4-4fb0-a24b-340d61f6a3fa',\n   *       'invoker': 'https://metamask.github.io',\n   *       'parentCapability': 'eth_accounts',\n   *     },\n   *   ],\n   * },\n   */\n\n  const ETH_ACCOUNTS = 'eth_accounts';\n  const NEW_CAVEAT_TYPE = 'restrictReturnedAccounts';\n  const OLD_CAVEAT_NAME = 'exposedAccounts';\n\n  const subjects = Object.entries(domains).reduce(\n    (transformed, [origin, domainEntry]) => {\n      const {\n        permissions: [ethAccountsPermission],\n      } = domainEntry;\n\n      // There are two caveats for each eth_accounts permission, but we only\n      // need the value of one of them in the new permission system.\n      const oldCaveat = ethAccountsPermission.caveats.find(\n        (caveat) => caveat.name === OLD_CAVEAT_NAME,\n      );\n\n      const newPermission = {\n        ...ethAccountsPermission,\n        caveats: [{ type: NEW_CAVEAT_TYPE, value: oldCaveat.value }],\n      };\n\n      // We never used this, and just omit it in the new system.\n      delete newPermission['@context'];\n\n      transformed[origin] = {\n        origin,\n        permissions: {\n          [ETH_ACCOUNTS]: newPermission,\n        },\n      };\n      return transformed;\n    },\n    {},\n  );\n\n  return {\n    subjects,\n  };\n}\n\nfunction getSubjectMetadataControllerState(domainMetadata) {\n  /**\n   * Example existing domainMetadata entry.\n   *\n   * \"https://www.youtube.com\": {\n   *   \"host\": \"www.youtube.com\",\n   *   \"icon\": null,\n   *   \"lastUpdated\": 1637697914908,\n   *   \"name\": \"YouTube\"\n   * }\n   */\n\n  const subjectMetadata = Object.entries(domainMetadata).reduce(\n    (transformed, [origin, metadata]) => {\n      const {\n        name = null,\n        icon = null,\n        extensionId = null,\n        ...other\n      } = metadata;\n\n      // We're getting rid of these.\n      delete other.lastUpdated;\n      delete other.host;\n\n      if (origin) {\n        transformed[origin] = {\n          name,\n          iconUrl: icon,\n          extensionId,\n          ...other,\n          origin,\n        };\n      }\n      return transformed;\n    },\n    {},\n  );\n\n  return {\n    subjectMetadata,\n  };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base64 = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nconst base64 = (struct, options = {}) => {\n    const paddingRequired = options.paddingRequired ?? false;\n    const characterSet = options.characterSet ?? 'base64';\n    let letters;\n    if (characterSet === 'base64') {\n        letters = String.raw `[A-Za-z0-9+\\/]`;\n    }\n    else {\n        (0, assert_1.assert)(characterSet === 'base64url');\n        letters = String.raw `[-_A-Za-z0-9]`;\n    }\n    let re;\n    if (paddingRequired) {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    else {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64;\n//# sourceMappingURL=base64.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDataView = exports.concatBytes = exports.valueToBytes = exports.base64ToBytes = exports.stringToBytes = exports.numberToBytes = exports.signedBigIntToBytes = exports.bigIntToBytes = exports.hexToBytes = exports.bytesToBase64 = exports.bytesToString = exports.bytesToNumber = exports.bytesToSignedBigInt = exports.bytesToBigInt = exports.bytesToHex = exports.assertIsBytes = exports.isBytes = void 0;\nconst base_1 = require(\"@scure/base\");\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n// '0'.charCodeAt(0) === 48\nconst HEX_MINIMUM_NUMBER_CHARACTER = 48;\n// '9'.charCodeAt(0) === 57\nconst HEX_MAXIMUM_NUMBER_CHARACTER = 58;\nconst HEX_CHARACTER_OFFSET = 87;\n/**\n * Memoized function that returns an array to be used as a lookup table for\n * converting bytes to hexadecimal values.\n *\n * The array is created lazily and then cached for future use. The benefit of\n * this approach is that the performance of converting bytes to hex is much\n * better than if we were to call `toString(16)` on each byte.\n *\n * The downside is that the array is created once and then never garbage\n * collected. This is not a problem in practice because the array is only 256\n * elements long.\n *\n * @returns A function that returns the lookup table.\n */\nfunction getPrecomputedHexValuesBuilder() {\n    // To avoid issues with tree shaking, we need to use a function to return the\n    // array. This is because the array is only used in the `bytesToHex` function\n    // and if we were to use a global variable, the array might be removed by the\n    // tree shaker.\n    const lookupTable = [];\n    return () => {\n        if (lookupTable.length === 0) {\n            for (let i = 0; i < 256; i++) {\n                lookupTable.push(i.toString(16).padStart(2, '0'));\n            }\n        }\n        return lookupTable;\n    };\n}\n/**\n * Function implementation of the {@link getPrecomputedHexValuesBuilder}\n * function.\n */\nconst getPrecomputedHexValues = getPrecomputedHexValuesBuilder();\n/**\n * Check if a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @returns Whether the value is a `Uint8Array`.\n */\nfunction isBytes(value) {\n    return value instanceof Uint8Array;\n}\nexports.isBytes = isBytes;\n/**\n * Assert that a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @throws If the value is not a `Uint8Array`.\n */\nfunction assertIsBytes(value) {\n    (0, assert_1.assert)(isBytes(value), 'Value must be a Uint8Array.');\n}\nexports.assertIsBytes = assertIsBytes;\n/**\n * Convert a `Uint8Array` to a hexadecimal string.\n *\n * @param bytes - The bytes to convert to a hexadecimal string.\n * @returns The hexadecimal string.\n */\nfunction bytesToHex(bytes) {\n    assertIsBytes(bytes);\n    if (bytes.length === 0) {\n        return '0x';\n    }\n    const lookupTable = getPrecomputedHexValues();\n    const hexadecimal = new Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        hexadecimal[i] = lookupTable[bytes[i]];\n    }\n    return (0, hex_1.add0x)(hexadecimal.join(''));\n}\nexports.bytesToHex = bytesToHex;\n/**\n * Convert a `Uint8Array` to a `bigint`.\n *\n * To convert a `Uint8Array` to a `number` instead, use {@link bytesToNumber}.\n * To convert a two's complement encoded `Uint8Array` to a `bigint`, use\n * {@link bytesToSignedBigInt}.\n *\n * @param bytes - The bytes to convert to a `bigint`.\n * @returns The `bigint`.\n */\nfunction bytesToBigInt(bytes) {\n    assertIsBytes(bytes);\n    const hexadecimal = bytesToHex(bytes);\n    return BigInt(hexadecimal);\n}\nexports.bytesToBigInt = bytesToBigInt;\n/**\n * Convert a `Uint8Array` to a signed `bigint`. This assumes that the bytes are\n * encoded in two's complement.\n *\n * To convert a `Uint8Array` to an unsigned `bigint` instead, use\n * {@link bytesToBigInt}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param bytes - The bytes to convert to a signed `bigint`.\n * @returns The signed `bigint`.\n */\nfunction bytesToSignedBigInt(bytes) {\n    assertIsBytes(bytes);\n    let value = BigInt(0);\n    for (const byte of bytes) {\n        // eslint-disable-next-line no-bitwise\n        value = (value << BigInt(8)) + BigInt(byte);\n    }\n    return BigInt.asIntN(bytes.length * 8, value);\n}\nexports.bytesToSignedBigInt = bytesToSignedBigInt;\n/**\n * Convert a `Uint8Array` to a `number`.\n *\n * To convert a `Uint8Array` to a `bigint` instead, use {@link bytesToBigInt}.\n *\n * @param bytes - The bytes to convert to a number.\n * @returns The number.\n * @throws If the resulting number is not a safe integer.\n */\nfunction bytesToNumber(bytes) {\n    assertIsBytes(bytes);\n    const bigint = bytesToBigInt(bytes);\n    (0, assert_1.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), 'Number is not a safe integer. Use `bytesToBigInt` instead.');\n    return Number(bigint);\n}\nexports.bytesToNumber = bytesToNumber;\n/**\n * Convert a UTF-8 encoded `Uint8Array` to a `string`.\n *\n * @param bytes - The bytes to convert to a string.\n * @returns The string.\n */\nfunction bytesToString(bytes) {\n    assertIsBytes(bytes);\n    return new TextDecoder().decode(bytes);\n}\nexports.bytesToString = bytesToString;\n/**\n * Convert a `Uint8Array` to a base64 encoded string.\n *\n * @param bytes - The bytes to convert to a base64 encoded string.\n * @returns The base64 encoded string.\n */\nfunction bytesToBase64(bytes) {\n    assertIsBytes(bytes);\n    return base_1.base64.encode(bytes);\n}\nexports.bytesToBase64 = bytesToBase64;\n/**\n * Convert a hexadecimal string to a `Uint8Array`. The string can optionally be\n * prefixed with `0x`. It accepts even and odd length strings.\n *\n * If the value is \"0x\", an empty `Uint8Array` is returned.\n *\n * @param value - The hexadecimal string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction hexToBytes(value) {\n    // \"0x\" is often used as empty byte array.\n    if (value?.toLowerCase?.() === '0x') {\n        return new Uint8Array();\n    }\n    (0, hex_1.assertIsHexString)(value);\n    // Remove the `0x` prefix if it exists, and pad the string to have an even\n    // number of characters.\n    const strippedValue = (0, hex_1.remove0x)(value).toLowerCase();\n    const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;\n    const bytes = new Uint8Array(normalizedValue.length / 2);\n    for (let i = 0; i < bytes.length; i++) {\n        // While this is not the prettiest way to convert a hexadecimal string to a\n        // `Uint8Array`, it is a lot faster than using `parseInt` to convert each\n        // character.\n        const c1 = normalizedValue.charCodeAt(i * 2);\n        const c2 = normalizedValue.charCodeAt(i * 2 + 1);\n        const n1 = c1 -\n            (c1 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        const n2 = c2 -\n            (c2 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        bytes[i] = n1 * 16 + n2;\n    }\n    return bytes;\n}\nexports.hexToBytes = hexToBytes;\n/**\n * Convert a `bigint` to a `Uint8Array`.\n *\n * This assumes that the `bigint` is an unsigned integer. To convert a signed\n * `bigint` instead, use {@link signedBigIntToBytes}.\n *\n * @param value - The bigint to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction bigIntToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= BigInt(0), 'Value must be a non-negative bigint.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * Check if a `bigint` fits in a certain number of bytes.\n *\n * @param value - The `bigint` to check.\n * @param bytes - The number of bytes.\n * @returns Whether the `bigint` fits in the number of bytes.\n */\nfunction bigIntFits(value, bytes) {\n    (0, assert_1.assert)(bytes > 0);\n    /* eslint-disable no-bitwise */\n    const mask = value >> BigInt(31);\n    return !(((~value & mask) + (value & ~mask)) >> BigInt(bytes * 8 + ~0));\n    /* eslint-enable no-bitwise */\n}\n/**\n * Convert a signed `bigint` to a `Uint8Array`. This uses two's complement\n * encoding to represent negative numbers.\n *\n * To convert an unsigned `bigint` to a `Uint8Array` instead, use\n * {@link bigIntToBytes}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param value - The number to convert to bytes.\n * @param byteLength - The length of the resulting `Uint8Array`. If the number\n * is larger than the maximum value that can be represented by the given length,\n * an error is thrown.\n * @returns The bytes as `Uint8Array`.\n */\nfunction signedBigIntToBytes(value, byteLength) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(typeof byteLength === 'number', 'Byte length must be a number.');\n    (0, assert_1.assert)(byteLength > 0, 'Byte length must be greater than 0.');\n    (0, assert_1.assert)(bigIntFits(value, byteLength), 'Byte length is too small to represent the given value.');\n    // ESLint doesn't like mutating function parameters, so to avoid having to\n    // disable the rule, we create a new variable.\n    let numberValue = value;\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0; i < bytes.length; i++) {\n        bytes[i] = Number(BigInt.asUintN(8, numberValue));\n        // eslint-disable-next-line no-bitwise\n        numberValue >>= BigInt(8);\n    }\n    return bytes.reverse();\n}\nexports.signedBigIntToBytes = signedBigIntToBytes;\n/**\n * Convert a `number` to a `Uint8Array`.\n *\n * @param value - The number to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n * @throws If the number is not a safe integer.\n */\nfunction numberToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToBytes` instead.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.numberToBytes = numberToBytes;\n/**\n * Convert a `string` to a UTF-8 encoded `Uint8Array`.\n *\n * @param value - The string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction stringToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return new TextEncoder().encode(value);\n}\nexports.stringToBytes = stringToBytes;\n/**\n * Convert a base64 encoded string to a `Uint8Array`.\n *\n * @param value - The base64 encoded string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction base64ToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return base_1.base64.decode(value);\n}\nexports.base64ToBytes = base64ToBytes;\n/**\n * Convert a byte-like value to a `Uint8Array`. The value can be a `Uint8Array`,\n * a `bigint`, a `number`, or a `string`.\n *\n * This will attempt to guess the type of the value based on its type and\n * contents. For more control over the conversion, use the more specific\n * conversion functions, such as {@link hexToBytes} or {@link stringToBytes}.\n *\n * If the value is a `string`, and it is prefixed with `0x`, it will be\n * interpreted as a hexadecimal string. Otherwise, it will be interpreted as a\n * UTF-8 string. To convert a hexadecimal string to bytes without interpreting\n * it as a UTF-8 string, use {@link hexToBytes} instead.\n *\n * If the value is a `bigint`, it is assumed to be unsigned. To convert a signed\n * `bigint` to bytes, use {@link signedBigIntToBytes} instead.\n *\n * If the value is a `Uint8Array`, it will be returned as-is.\n *\n * @param value - The value to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction valueToBytes(value) {\n    if (typeof value === 'bigint') {\n        return bigIntToBytes(value);\n    }\n    if (typeof value === 'number') {\n        return numberToBytes(value);\n    }\n    if (typeof value === 'string') {\n        if (value.startsWith('0x')) {\n            return hexToBytes(value);\n        }\n        return stringToBytes(value);\n    }\n    if (isBytes(value)) {\n        return value;\n    }\n    throw new TypeError(`Unsupported value type: \"${typeof value}\".`);\n}\nexports.valueToBytes = valueToBytes;\n/**\n * Concatenate multiple byte-like values into a single `Uint8Array`. The values\n * can be `Uint8Array`, `bigint`, `number`, or `string`. This uses\n * {@link valueToBytes} under the hood to convert each value to bytes. Refer to\n * the documentation of that function for more information.\n *\n * @param values - The values to concatenate.\n * @returns The concatenated bytes as `Uint8Array`.\n */\nfunction concatBytes(values) {\n    const normalizedValues = new Array(values.length);\n    let byteLength = 0;\n    for (let i = 0; i < values.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const value = valueToBytes(values[i]);\n        normalizedValues[i] = value;\n        byteLength += value.length;\n    }\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0, offset = 0; i < normalizedValues.length; i++) {\n        // While we could simply spread the values into an array and use\n        // `Uint8Array.from`, that is a lot slower than using `Uint8Array.set`.\n        bytes.set(normalizedValues[i], offset);\n        offset += normalizedValues[i].length;\n    }\n    return bytes;\n}\nexports.concatBytes = concatBytes;\n/**\n * Create a {@link DataView} from a {@link Uint8Array}. This is a convenience\n * function that avoids having to create a {@link DataView} manually, which\n * requires passing the `byteOffset` and `byteLength` parameters every time.\n *\n * Not passing the `byteOffset` and `byteLength` parameters can result in\n * unexpected behavior when the {@link Uint8Array} is a view of a larger\n * {@link ArrayBuffer}, e.g., when using {@link Uint8Array.subarray}.\n *\n * This function also supports Node.js {@link Buffer}s.\n *\n * @example\n * ```typescript\n * const bytes = new Uint8Array([1, 2, 3]);\n *\n * // This is equivalent to:\n * // const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n * const dataView = createDataView(bytes);\n * ```\n * @param bytes - The bytes to create the {@link DataView} from.\n * @returns The {@link DataView}.\n */\nfunction createDataView(bytes) {\n    // To maintain compatibility with Node.js, we need to check if the bytes are\n    // a Buffer. If so, we need to slice the buffer to get the underlying\n    // ArrayBuffer.\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof Buffer !== 'undefined' && bytes instanceof Buffer) {\n        const buffer = bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n        return new DataView(buffer);\n    }\n    return new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n}\nexports.createDataView = createDataView;\n//# sourceMappingURL=bytes.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCaipChainId = exports.parseCaipAccountId = exports.parseCaipChainId = exports.isCaipAccountAddress = exports.isCaipAccountId = exports.isCaipReference = exports.isCaipNamespace = exports.isCaipChainId = exports.KnownCaipNamespace = exports.CaipAccountAddressStruct = exports.CaipAccountIdStruct = exports.CaipReferenceStruct = exports.CaipNamespaceStruct = exports.CaipChainIdStruct = exports.CAIP_ACCOUNT_ADDRESS_REGEX = exports.CAIP_ACCOUNT_ID_REGEX = exports.CAIP_REFERENCE_REGEX = exports.CAIP_NAMESPACE_REGEX = exports.CAIP_CHAIN_ID_REGEX = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nexports.CAIP_CHAIN_ID_REGEX = /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u;\nexports.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u;\nexports.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u;\nexports.CAIP_ACCOUNT_ID_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u;\nexports.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u;\n/**\n * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.\n */\nexports.CaipChainIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_CHAIN_ID_REGEX);\n/**\n * A CAIP-2 namespace, i.e., the first part of a CAIP chain ID.\n */\nexports.CaipNamespaceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_NAMESPACE_REGEX);\n/**\n * A CAIP-2 reference, i.e., the second part of a CAIP chain ID.\n */\nexports.CaipReferenceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_REFERENCE_REGEX);\n/**\n * A CAIP-10 account ID, i.e., a human-readable namespace, reference, and account address.\n */\nexports.CaipAccountIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ID_REGEX);\n/**\n * A CAIP-10 account address, i.e., the third part of the CAIP account ID.\n */\nexports.CaipAccountAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ADDRESS_REGEX);\n/** Known CAIP namespaces. */\nvar KnownCaipNamespace;\n(function (KnownCaipNamespace) {\n    /** EIP-155 compatible chains. */\n    KnownCaipNamespace[\"Eip155\"] = \"eip155\";\n})(KnownCaipNamespace = exports.KnownCaipNamespace || (exports.KnownCaipNamespace = {}));\n/**\n * Check if the given value is a {@link CaipChainId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipChainId}.\n */\nfunction isCaipChainId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipChainIdStruct);\n}\nexports.isCaipChainId = isCaipChainId;\n/**\n * Check if the given value is a {@link CaipNamespace}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipNamespace}.\n */\nfunction isCaipNamespace(value) {\n    return (0, superstruct_1.is)(value, exports.CaipNamespaceStruct);\n}\nexports.isCaipNamespace = isCaipNamespace;\n/**\n * Check if the given value is a {@link CaipReference}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipReference}.\n */\nfunction isCaipReference(value) {\n    return (0, superstruct_1.is)(value, exports.CaipReferenceStruct);\n}\nexports.isCaipReference = isCaipReference;\n/**\n * Check if the given value is a {@link CaipAccountId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipAccountId}.\n */\nfunction isCaipAccountId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountIdStruct);\n}\nexports.isCaipAccountId = isCaipAccountId;\n/**\n * Check if a value is a {@link CaipAccountAddress}.\n *\n * @param value - The value to validate.\n * @returns True if the value is a valid {@link CaipAccountAddress}.\n */\nfunction isCaipAccountAddress(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountAddressStruct);\n}\nexports.isCaipAccountAddress = isCaipAccountAddress;\n/**\n * Parse a CAIP-2 chain ID to an object containing the namespace and reference.\n * This validates the CAIP-2 chain ID before parsing it.\n *\n * @param caipChainId - The CAIP-2 chain ID to validate and parse.\n * @returns The parsed CAIP-2 chain ID.\n */\nfunction parseCaipChainId(caipChainId) {\n    const match = exports.CAIP_CHAIN_ID_REGEX.exec(caipChainId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP chain ID.');\n    }\n    return {\n        namespace: match.groups.namespace,\n        reference: match.groups.reference,\n    };\n}\nexports.parseCaipChainId = parseCaipChainId;\n/**\n * Parse an CAIP-10 account ID to an object containing the chain ID, parsed chain ID, and account address.\n * This validates the CAIP-10 account ID before parsing it.\n *\n * @param caipAccountId - The CAIP-10 account ID to validate and parse.\n * @returns The parsed CAIP-10 account ID.\n */\nfunction parseCaipAccountId(caipAccountId) {\n    const match = exports.CAIP_ACCOUNT_ID_REGEX.exec(caipAccountId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP account ID.');\n    }\n    return {\n        address: match.groups.accountAddress,\n        chainId: match.groups.chainId,\n        chain: {\n            namespace: match.groups.namespace,\n            reference: match.groups.reference,\n        },\n    };\n}\nexports.parseCaipAccountId = parseCaipAccountId;\n/**\n * Chain ID as defined per the CAIP-2\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md}.\n *\n * It defines a way to uniquely identify any blockchain in a human-readable\n * way.\n *\n * @param namespace - The standard (ecosystem) of similar blockchains.\n * @param reference - Identify of a blockchain within a given namespace.\n * @throws {@link Error}\n * This exception is thrown if the inputs does not comply with the CAIP-2\n * syntax specification\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md#syntax}.\n * @returns A CAIP chain ID.\n */\nfunction toCaipChainId(namespace, reference) {\n    if (!isCaipNamespace(namespace)) {\n        throw new Error(`Invalid \"namespace\", must match: ${exports.CAIP_NAMESPACE_REGEX.toString()}`);\n    }\n    if (!isCaipReference(reference)) {\n        throw new Error(`Invalid \"reference\", must match: ${exports.CAIP_REFERENCE_REGEX.toString()}`);\n    }\n    return `${namespace}:${reference}`;\n}\nexports.toCaipChainId = toCaipChainId;\n//# sourceMappingURL=caip-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChecksumStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst base64_1 = require(\"./base64.cjs\");\nexports.ChecksumStruct = (0, superstruct_1.size)((0, base64_1.base64)((0, superstruct_1.string)(), { paddingRequired: true }), 44, 44);\n//# sourceMappingURL=checksum.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\nconst NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1.StrictHexStruct]);\nconst NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);\nconst BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);\nconst BytesLikeStruct = (0, superstruct_1.union)([hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);\nconst BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1.StrictHexStruct]), bytes_1.hexToBytes);\nconst HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nfunction createNumber(value) {\n    try {\n        const result = (0, superstruct_1.create)(value, NumberCoercer);\n        (0, assert_1.assert)(Number.isFinite(result), `Expected a number-like value, got \"${value}\".`);\n        return result;\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${value}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createNumber = createNumber;\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nfunction createBigInt(value) {\n    try {\n        // The `BigInt` constructor throws if the value is not a number-like value.\n        // There is no need to validate the value manually.\n        return (0, superstruct_1.create)(value, BigIntCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBigInt = createBigInt;\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nfunction createBytes(value) {\n    if (typeof value === 'string' && value.toLowerCase() === '0x') {\n        return new Uint8Array();\n    }\n    try {\n        return (0, superstruct_1.create)(value, BytesCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBytes = createBytes;\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nfunction createHex(value) {\n    if ((value instanceof Uint8Array && value.length === 0) ||\n        (typeof value === 'string' && value.toLowerCase() === '0x')) {\n        return '0x';\n    }\n    try {\n        return (0, superstruct_1.create)(value, HexCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createHex = createHex;\n//# sourceMappingURL=coercers.cjs.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _FrozenMap_map, _FrozenSet_set;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FrozenSet = exports.FrozenMap = void 0;\n/**\n * A {@link ReadonlyMap} that cannot be modified after instantiation.\n * The implementation uses an inner map hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this map.\n */\nclass FrozenMap {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").size;\n    }\n    [(_FrozenMap_map = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\")[Symbol.iterator]();\n    }\n    constructor(entries) {\n        _FrozenMap_map.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner map.\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").forEach((value, key, _map) => callbackfn.call(thisArg, value, key, this));\n    }\n    get(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").get(key);\n    }\n    has(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").has(key);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").values();\n    }\n    toString() {\n        return `FrozenMap(${this.size}) {${this.size > 0\n            ? ` ${[...this.entries()]\n                .map(([key, value]) => `${String(key)} => ${String(value)}`)\n                .join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenMap = FrozenMap;\n/**\n * A {@link ReadonlySet} that cannot be modified after instantiation.\n * The implementation uses an inner set hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this set.\n */\nclass FrozenSet {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").size;\n    }\n    [(_FrozenSet_set = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\")[Symbol.iterator]();\n    }\n    constructor(values) {\n        _FrozenSet_set.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner set.\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));\n    }\n    has(value) {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").has(value);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").values();\n    }\n    toString() {\n        return `FrozenSet(${this.size}) {${this.size > 0\n            ? ` ${[...this.values()].map((member) => String(member)).join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenSet = FrozenSet;\nObject.freeze(FrozenMap);\nObject.freeze(FrozenMap.prototype);\nObject.freeze(FrozenSet);\nObject.freeze(FrozenSet.prototype);\n//# sourceMappingURL=collections.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=encryption-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapError = exports.getErrorMessage = exports.isErrorWithStack = exports.isErrorWithMessage = exports.isErrorWithCode = void 0;\nconst pony_cause_1 = require(\"pony-cause\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * Type guard for determining whether the given value is an instance of Error.\n * For errors generated via `fs.promises`, `error instanceof Error` won't work,\n * so we have to come up with another way of testing.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isError(error) {\n    return (error instanceof Error ||\n        ((0, misc_1.isObject)(error) && error.constructor.name === 'Error'));\n}\n/**\n * Type guard for determining whether the given value is an error object with a\n * `code` property such as the type of error that Node throws for filesystem\n * operations, etc.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithCode(error) {\n    return typeof error === 'object' && error !== null && 'code' in error;\n}\nexports.isErrorWithCode = isErrorWithCode;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithMessage(error) {\n    return typeof error === 'object' && error !== null && 'message' in error;\n}\nexports.isErrorWithMessage = isErrorWithMessage;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `stack` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithStack(error) {\n    return typeof error === 'object' && error !== null && 'stack' in error;\n}\nexports.isErrorWithStack = isErrorWithStack;\n/**\n * Attempts to obtain the message from a possible error object, defaulting to an\n * empty string if it is impossible to do so.\n *\n * @param error - The possible error to get the message from.\n * @returns The message if `error` is an object with a `message` property;\n * the string version of `error` if it is not `undefined` or `null`; otherwise\n * an empty string.\n */\nfunction getErrorMessage(error) {\n    if (isErrorWithMessage(error) && typeof error.message === 'string') {\n        return error.message;\n    }\n    if ((0, misc_1.isNullOrUndefined)(error)) {\n        return '';\n    }\n    return String(error);\n}\nexports.getErrorMessage = getErrorMessage;\n/**\n * Builds a new error object, linking it to the original error via the `cause`\n * property if it is an Error.\n *\n * This function is useful to reframe error messages in general, but is\n * _critical_ when interacting with any of Node's filesystem functions as\n * provided via `fs.promises`, because these do not produce stack traces in the\n * case of an I/O error (see <https://github.com/nodejs/node/issues/30944>).\n *\n * @param originalError - The error to be wrapped (something throwable).\n * @param message - The desired message of the new error.\n * @returns A new error object.\n */\nfunction wrapError(originalError, message) {\n    if (isError(originalError)) {\n        let error;\n        if (Error.length === 2) {\n            // for some reason `tsserver` is not complaining that the\n            // Error constructor doesn't support a second argument in the editor,\n            // but `tsc` does. Error causes are not supported by our current tsc target (ES2020, we need ES2022 to make this work)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new Error(message, { cause: originalError });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new pony_cause_1.ErrorWithCause(message, { cause: originalError });\n        }\n        if (isErrorWithCode(originalError)) {\n            error.code = originalError.code;\n        }\n        return error;\n    }\n    if (message.length > 0) {\n        return new Error(`${String(originalError)}: ${message}`);\n    }\n    return new Error(String(originalError));\n}\nexports.wrapError = wrapError;\n//# sourceMappingURL=errors.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.remove0x = exports.add0x = exports.isValidChecksumAddress = exports.getChecksumAddress = exports.isValidHexAddress = exports.assertIsStrictHexString = exports.assertIsHexString = exports.isStrictHexString = exports.isHexString = exports.HexChecksumAddressStruct = exports.HexAddressStruct = exports.StrictHexStruct = exports.HexStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nexports.HexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^(?:0x)?[0-9a-f]+$/iu);\nexports.StrictHexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]+$/iu);\nexports.HexAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]{40}$/u);\nexports.HexChecksumAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-fA-F]{40}$/u);\n/**\n * Check if a string is a valid hex string.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isHexString(value) {\n    return (0, superstruct_1.is)(value, exports.HexStruct);\n}\nexports.isHexString = isHexString;\n/**\n * Strictly check if a string is a valid hex string. A valid hex string must\n * start with the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isStrictHexString(value) {\n    return (0, superstruct_1.is)(value, exports.StrictHexStruct);\n}\nexports.isStrictHexString = isStrictHexString;\n/**\n * Assert that a value is a valid hex string.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsHexString(value) {\n    (0, assert_1.assert)(isHexString(value), 'Value must be a hexadecimal string.');\n}\nexports.assertIsHexString = assertIsHexString;\n/**\n * Assert that a value is a valid hex string. A valid hex string must start with\n * the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsStrictHexString(value) {\n    (0, assert_1.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with \"0x\".');\n}\nexports.assertIsStrictHexString = assertIsStrictHexString;\n/**\n * Validate that the passed prefixed hex string is an all-lowercase\n * hex address, or a valid mixed-case checksum address.\n *\n * @param possibleAddress - Input parameter to check against.\n * @returns Whether or not the input is a valid hex address.\n */\nfunction isValidHexAddress(possibleAddress) {\n    return ((0, superstruct_1.is)(possibleAddress, exports.HexAddressStruct) ||\n        isValidChecksumAddress(possibleAddress));\n}\nexports.isValidHexAddress = isValidHexAddress;\n/**\n * Encode a passed hex string as an ERC-55 mixed-case checksum address.\n *\n * @param address - The hex address to encode.\n * @returns The address encoded according to ERC-55.\n * @see https://eips.ethereum.org/EIPS/eip-55\n */\nfunction getChecksumAddress(address) {\n    (0, assert_1.assert)((0, superstruct_1.is)(address, exports.HexChecksumAddressStruct), 'Invalid hex address.');\n    const unPrefixed = remove0x(address.toLowerCase());\n    const unPrefixedHash = remove0x((0, bytes_1.bytesToHex)((0, sha3_1.keccak_256)(unPrefixed)));\n    return `0x${unPrefixed\n        .split('')\n        .map((character, nibbleIndex) => {\n        const hashCharacter = unPrefixedHash[nibbleIndex];\n        (0, assert_1.assert)((0, superstruct_1.is)(hashCharacter, (0, superstruct_1.string)()), 'Hash shorter than address.');\n        return parseInt(hashCharacter, 16) > 7\n            ? character.toUpperCase()\n            : character;\n    })\n        .join('')}`;\n}\nexports.getChecksumAddress = getChecksumAddress;\n/**\n * Validate that the passed hex string is a valid ERC-55 mixed-case\n * checksum address.\n *\n * @param possibleChecksum - The hex address to check.\n * @returns True if the address is a checksum address.\n */\nfunction isValidChecksumAddress(possibleChecksum) {\n    if (!(0, superstruct_1.is)(possibleChecksum, exports.HexChecksumAddressStruct)) {\n        return false;\n    }\n    return getChecksumAddress(possibleChecksum) === possibleChecksum;\n}\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Add the `0x`-prefix to a hexadecimal string. If the string already has the\n * prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to add the prefix to.\n * @returns The prefixed hexadecimal string.\n */\nfunction add0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x')) {\n        return hexadecimal;\n    }\n    if (hexadecimal.startsWith('0X')) {\n        return `0x${hexadecimal.substring(2)}`;\n    }\n    return `0x${hexadecimal}`;\n}\nexports.add0x = add0x;\n/**\n * Remove the `0x`-prefix from a hexadecimal string. If the string doesn't have\n * the prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to remove the prefix from.\n * @returns The un-prefixed hexadecimal string.\n */\nfunction remove0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x') || hexadecimal.startsWith('0X')) {\n        return hexadecimal.substring(2);\n    }\n    return hexadecimal;\n}\nexports.remove0x = remove0x;\n//# sourceMappingURL=hex.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./assert.cjs\"), exports);\n__exportStar(require(\"./base64.cjs\"), exports);\n__exportStar(require(\"./bytes.cjs\"), exports);\n__exportStar(require(\"./caip-types.cjs\"), exports);\n__exportStar(require(\"./checksum.cjs\"), exports);\n__exportStar(require(\"./coercers.cjs\"), exports);\n__exportStar(require(\"./collections.cjs\"), exports);\n__exportStar(require(\"./encryption-types.cjs\"), exports);\n__exportStar(require(\"./errors.cjs\"), exports);\n__exportStar(require(\"./hex.cjs\"), exports);\n__exportStar(require(\"./json.cjs\"), exports);\n__exportStar(require(\"./keyring.cjs\"), exports);\n__exportStar(require(\"./logging.cjs\"), exports);\n__exportStar(require(\"./misc.cjs\"), exports);\n__exportStar(require(\"./number.cjs\"), exports);\n__exportStar(require(\"./opaque.cjs\"), exports);\n__exportStar(require(\"./promise.cjs\"), exports);\n__exportStar(require(\"./time.cjs\"), exports);\n__exportStar(require(\"./transaction-types.cjs\"), exports);\n__exportStar(require(\"./versions.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","import { SubjectType } from '@metamask/permission-controller';\nimport { cloneDeep } from 'lodash';\n\nconst version = 69;\n\n/**\n * Adds the `subjectType` property to all subject metadata.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (typeof state?.SubjectMetadataController?.subjectMetadata === 'object') {\n    const {\n      SubjectMetadataController: { subjectMetadata },\n    } = state;\n\n    // mutate SubjectMetadataController.subjectMetadata in place\n    Object.values(subjectMetadata).forEach((metadata) => {\n      if (\n        metadata &&\n        typeof metadata === 'object' &&\n        !Array.isArray(metadata)\n      ) {\n        metadata.subjectType = metadata.extensionId\n          ? SubjectType.Extension\n          : SubjectType.Website;\n      }\n    });\n  }\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.getJsonSize = exports.getSafeJson = exports.isValidJson = exports.JsonStruct = exports.UnsafeJsonStruct = exports.exactOptional = exports.object = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * A struct to check if the given value is a valid object, with support for\n * {@link exactOptional} types.\n *\n * @param schema - The schema of the object.\n * @returns A struct to check if the given value is an object.\n */\nconst object = (schema) => \n// The type is slightly different from a regular object struct, because we\n// want to make properties with `undefined` in their type optional, but not\n// `undefined` itself. This means that we need a type cast.\n(0, superstruct_1.object)(schema);\nexports.object = object;\n/**\n * Check the last field of a path is present.\n *\n * @param context - The context to check.\n * @param context.path - The path to check.\n * @param context.branch - The branch to check.\n * @returns Whether the last field of a path is present.\n */\nfunction hasOptional({ path, branch }) {\n    const field = path[path.length - 1];\n    return (0, misc_1.hasProperty)(branch[branch.length - 2], field);\n}\n/**\n * A struct which allows the property of an object to be absent, or to be present\n * as long as it's valid and not set to `undefined`.\n *\n * This struct should be used in conjunction with the {@link object} from this\n * library, to get proper type inference.\n *\n * @param struct - The struct to check the value against, if present.\n * @returns A struct to check if the given value is valid, or not present.\n * @example\n * ```ts\n * const struct = object({\n *   foo: exactOptional(string()),\n *   bar: exactOptional(number()),\n *   baz: optional(boolean()),\n *   qux: unknown(),\n * });\n *\n * type Type = Infer<typeof struct>;\n * // Type is equivalent to:\n * // {\n * //   foo?: string;\n * //   bar?: number;\n * //   baz?: boolean | undefined;\n * //   qux: unknown;\n * // }\n * ```\n */\nfunction exactOptional(struct) {\n    return new superstruct_1.Struct({\n        ...struct,\n        type: `optional ${struct.type}`,\n        validator: (value, context) => !hasOptional(context) || struct.validator(value, context),\n        refiner: (value, context) => !hasOptional(context) || struct.refiner(value, context),\n    });\n}\nexports.exactOptional = exactOptional;\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () => (0, superstruct_1.define)('finite number', (value) => {\n    return (0, superstruct_1.is)(value, (0, superstruct_1.number)()) && Number.isFinite(value);\n});\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexports.UnsafeJsonStruct = (0, superstruct_1.union)([\n    (0, superstruct_1.literal)(null),\n    (0, superstruct_1.boolean)(),\n    finiteNumber(),\n    (0, superstruct_1.string)(),\n    (0, superstruct_1.array)((0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n    (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n]);\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexports.JsonStruct = (0, superstruct_1.coerce)(exports.UnsafeJsonStruct, (0, superstruct_1.any)(), (value) => {\n    (0, assert_1.assertStruct)(value, exports.UnsafeJsonStruct);\n    return JSON.parse(JSON.stringify(value, (propKey, propValue) => {\n        // Strip __proto__ and constructor properties to prevent prototype pollution.\n        if (propKey === '__proto__' || propKey === 'constructor') {\n            return undefined;\n        }\n        return propValue;\n    }));\n});\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nfunction isValidJson(value) {\n    try {\n        getSafeJson(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexports.isValidJson = isValidJson;\n/**\n * Validate and return sanitized JSON.\n *\n * Note:\n * This function uses sanitized JsonStruct for validation\n * that applies stringify and then parse of a value provided\n * to ensure that there are no getters which can have side effects\n * that can cause security issues.\n *\n * @param value - JSON structure to be processed.\n * @returns Sanitized JSON structure.\n */\nfunction getSafeJson(value) {\n    return (0, superstruct_1.create)(value, exports.JsonStruct);\n}\nexports.getSafeJson = getSafeJson;\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nfunction getJsonSize(value) {\n    (0, assert_1.assertStruct)(value, exports.JsonStruct, 'Invalid JSON value');\n    const json = JSON.stringify(value);\n    return new TextEncoder().encode(json).byteLength;\n}\nexports.getJsonSize = getJsonSize;\n/**\n * The string '2.0'.\n */\nexports.jsonrpc2 = '2.0';\nexports.JsonRpcVersionStruct = (0, superstruct_1.literal)(exports.jsonrpc2);\nexports.JsonRpcIdStruct = (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.string)()]));\nexports.JsonRpcErrorStruct = (0, exports.object)({\n    code: (0, superstruct_1.integer)(),\n    message: (0, superstruct_1.string)(),\n    data: exactOptional(exports.JsonStruct),\n    stack: exactOptional((0, superstruct_1.string)()),\n});\nexports.JsonRpcParamsStruct = (0, superstruct_1.union)([(0, superstruct_1.record)((0, superstruct_1.string)(), exports.JsonStruct), (0, superstruct_1.array)(exports.JsonStruct)]);\nexports.JsonRpcRequestStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\nexports.JsonRpcNotificationStruct = (0, exports.object)({\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nfunction isJsonRpcNotification(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcNotificationStruct);\n}\nexports.isJsonRpcNotification = isJsonRpcNotification;\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nfunction assertIsJsonRpcNotification(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcNotificationStruct, 'Invalid JSON-RPC notification', ErrorWrapper);\n}\nexports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nfunction isJsonRpcRequest(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcRequestStruct);\n}\nexports.isJsonRpcRequest = isJsonRpcRequest;\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nfunction assertIsJsonRpcRequest(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcRequestStruct, 'Invalid JSON-RPC request', ErrorWrapper);\n}\nexports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;\nexports.PendingJsonRpcResponseStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: (0, superstruct_1.optional)((0, superstruct_1.unknown)()),\n    error: (0, superstruct_1.optional)(exports.JsonRpcErrorStruct),\n});\nexports.JsonRpcSuccessStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: exports.JsonStruct,\n});\nexports.JsonRpcFailureStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    error: exports.JsonRpcErrorStruct,\n});\nexports.JsonRpcResponseStruct = (0, superstruct_1.union)([\n    exports.JsonRpcSuccessStruct,\n    exports.JsonRpcFailureStruct,\n]);\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nfunction isPendingJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.PendingJsonRpcResponseStruct);\n}\nexports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nfunction assertIsPendingJsonRpcResponse(response, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(response, exports.PendingJsonRpcResponseStruct, 'Invalid pending JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nfunction isJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.JsonRpcResponseStruct);\n}\nexports.isJsonRpcResponse = isJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nfunction assertIsJsonRpcResponse(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcResponseStruct, 'Invalid JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nfunction isJsonRpcSuccess(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcSuccessStruct);\n}\nexports.isJsonRpcSuccess = isJsonRpcSuccess;\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nfunction assertIsJsonRpcSuccess(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcSuccessStruct, 'Invalid JSON-RPC success response', ErrorWrapper);\n}\nexports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nfunction isJsonRpcFailure(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcFailureStruct);\n}\nexports.isJsonRpcFailure = isJsonRpcFailure;\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nfunction assertIsJsonRpcFailure(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcFailureStruct, 'Invalid JSON-RPC failure response', ErrorWrapper);\n}\nexports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nfunction isJsonRpcError(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcErrorStruct);\n}\nexports.isJsonRpcError = isJsonRpcError;\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nfunction assertIsJsonRpcError(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcErrorStruct, 'Invalid JSON-RPC error', ErrorWrapper);\n}\nexports.assertIsJsonRpcError = assertIsJsonRpcError;\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nfunction getJsonRpcIdValidator(options) {\n    const { permitEmptyString, permitFractions, permitNull } = {\n        permitEmptyString: true,\n        permitFractions: false,\n        permitNull: true,\n        ...options,\n    };\n    /**\n     * Type guard for {@link JsonRpcId}.\n     *\n     * @param id - The JSON-RPC ID value to check.\n     * @returns Whether the given ID is valid per the options given to the\n     * factory.\n     */\n    const isValidJsonRpcId = (id) => {\n        return Boolean((typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n            (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n            (permitNull && id === null));\n    };\n    return isValidJsonRpcId;\n}\nexports.getJsonRpcIdValidator = getJsonRpcIdValidator;\n//# sourceMappingURL=json.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=keyring.cjs.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createModuleLogger = exports.createProjectLogger = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst globalLogger = (0, debug_1.default)('metamask');\n/**\n * Creates a logger via the `debug` library whose log messages will be tagged\n * using the name of your project. By default, such messages will be\n * suppressed, but you can reveal them by setting the `DEBUG` environment\n * variable to `metamask:<projectName>`. You can also set this variable to\n * `metamask:*` if you want to see log messages from all MetaMask projects that\n * are also using this function to create their loggers.\n *\n * @param projectName - The name of your project. This should be the name of\n * your NPM package if you're developing one.\n * @returns An instance of `debug`.\n */\nfunction createProjectLogger(projectName) {\n    return globalLogger.extend(projectName);\n}\nexports.createProjectLogger = createProjectLogger;\n/**\n * Creates a logger via the `debug` library which is derived from the logger for\n * the whole project whose log messages will be tagged using the name of your\n * module. By default, such messages will be suppressed, but you can reveal them\n * by setting the `DEBUG` environment variable to\n * `metamask:<projectName>:<moduleName>`. You can also set this variable to\n * `metamask:<projectName>:*` if you want to see log messages from the project,\n * or `metamask:*` if you want to see log messages from all MetaMask projects.\n *\n * @param projectLogger - The logger created via {@link createProjectLogger}.\n * @param moduleName - The name of your module. You could use the name of the\n * file where you're using this logger or some other name.\n * @returns An instance of `debug`.\n */\nfunction createModuleLogger(projectLogger, moduleName) {\n    return projectLogger.extend(moduleName);\n}\nexports.createModuleLogger = createModuleLogger;\n//# sourceMappingURL=logging.cjs.map","\"use strict\";\n//\n// Types\n//\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.getKnownPropertyNames = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;\n//\n// Type Guards\n//\n/**\n * A {@link NonEmptyArray} type guard.\n *\n * @template Element - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Type guard for \"nullishness\".\n *\n * @param value - Any value.\n * @returns `true` if the value is null or undefined, `false` otherwise.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nfunction isObject(value) {\n    return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\nexports.isObject = isObject;\n//\n// Other utility functions\n//\n/**\n * A type guard for ensuring an object has a property.\n *\n * @param objectToCheck - The object to check.\n * @param name - The property name to check for.\n * @returns Whether the specified object has an own property with the specified\n * name, regardless of whether it is enumerable or not.\n */\nconst hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);\nexports.hasProperty = hasProperty;\n/**\n * `Object.getOwnPropertyNames()` is intentionally generic: it returns the\n * immediate property names of an object, but it cannot make guarantees about\n * the contents of that object, so the type of the property names is merely\n * `string[]`. While this is technically accurate, it is also unnecessary if we\n * have an object with a type that we own (such as an enum).\n *\n * @param object - The plain object.\n * @returns The own property names of the object which are assigned a type\n * derived from the object itself.\n */\nfunction getKnownPropertyNames(object) {\n    return Object.getOwnPropertyNames(object);\n}\nexports.getKnownPropertyNames = getKnownPropertyNames;\n/**\n * Predefined sizes (in Bytes) of specific parts of JSON structure.\n */\nvar JsonSize;\n(function (JsonSize) {\n    JsonSize[JsonSize[\"Null\"] = 4] = \"Null\";\n    JsonSize[JsonSize[\"Comma\"] = 1] = \"Comma\";\n    JsonSize[JsonSize[\"Wrapper\"] = 1] = \"Wrapper\";\n    JsonSize[JsonSize[\"True\"] = 4] = \"True\";\n    JsonSize[JsonSize[\"False\"] = 5] = \"False\";\n    JsonSize[JsonSize[\"Quote\"] = 1] = \"Quote\";\n    JsonSize[JsonSize[\"Colon\"] = 1] = \"Colon\";\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    JsonSize[JsonSize[\"Date\"] = 24] = \"Date\";\n})(JsonSize = exports.JsonSize || (exports.JsonSize = {}));\n/**\n * Regular expression with pattern matching for (special) escaped characters.\n */\nexports.ESCAPE_CHARACTERS_REGEXP = /\"|\\\\|\\n|\\r|\\t/gu;\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nfunction isPlainObject(value) {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n    try {\n        let proto = value;\n        while (Object.getPrototypeOf(proto) !== null) {\n            proto = Object.getPrototypeOf(proto);\n        }\n        return Object.getPrototypeOf(value) === proto;\n    }\n    catch (_) {\n        return false;\n    }\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Check if character is ASCII.\n *\n * @param character - Character.\n * @returns True if a character code is ASCII, false if not.\n */\nfunction isASCII(character) {\n    return character.charCodeAt(0) <= 127;\n}\nexports.isASCII = isASCII;\n/**\n * Calculate string size.\n *\n * @param value - String value to calculate size.\n * @returns Number of bytes used to store whole string value.\n */\nfunction calculateStringSize(value) {\n    const size = value.split('').reduce((total, character) => {\n        if (isASCII(character)) {\n            return total + 1;\n        }\n        return total + 2;\n    }, 0);\n    // Also detect characters that need backslash escape\n    return size + (value.match(exports.ESCAPE_CHARACTERS_REGEXP) ?? []).length;\n}\nexports.calculateStringSize = calculateStringSize;\n/**\n * Calculate size of a number ofter JSON serialization.\n *\n * @param value - Number value to calculate size.\n * @returns Number of bytes used to store whole number in JSON.\n */\nfunction calculateNumberSize(value) {\n    return value.toString().length;\n}\nexports.calculateNumberSize = calculateNumberSize;\n//# sourceMappingURL=misc.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexToBigInt = exports.hexToNumber = exports.bigIntToHex = exports.numberToHex = void 0;\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n/**\n * Convert a number to a hexadecimal string. This verifies that the number is a\n * non-negative safe integer.\n *\n * To convert a `bigint` to a hexadecimal string instead, use\n * {@link bigIntToHex}.\n *\n * @example\n * ```typescript\n * numberToHex(0); // '0x0'\n * numberToHex(1); // '0x1'\n * numberToHex(16); // '0x10'\n * ```\n * @param value - The number to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the number is not a non-negative safe integer.\n */\nconst numberToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToHex` instead.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.numberToHex = numberToHex;\n/**\n * Convert a `bigint` to a hexadecimal string. This verifies that the `bigint`\n * is a non-negative integer.\n *\n * To convert a number to a hexadecimal string instead, use {@link numberToHex}.\n *\n * @example\n * ```typescript\n * bigIntToHex(0n); // '0x0'\n * bigIntToHex(1n); // '0x1'\n * bigIntToHex(16n); // '0x10'\n * ```\n * @param value - The `bigint` to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the `bigint` is not a non-negative integer.\n */\nconst bigIntToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative bigint.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert a hexadecimal string to a number. This verifies that the string is a\n * valid hex string, and that the resulting number is a safe integer. Both\n * \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a `bigint` instead, use\n * {@link hexToBigInt}.\n *\n * @example\n * ```typescript\n * hexToNumber('0x0'); // 0\n * hexToNumber('0x1'); // 1\n * hexToNumber('0x10'); // 16\n * ```\n * @param value - The hexadecimal string to convert to a number.\n * @returns The number.\n * @throws If the value is not a valid hexadecimal string, or if the resulting\n * number is not a safe integer.\n */\nconst hexToNumber = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // `parseInt` accepts values without the \"0x\"-prefix, whereas `Number` does\n    // not. Using this is slightly faster than `Number(add0x(value))`.\n    const numberValue = parseInt(value, 16);\n    (0, assert_1.assert)(Number.isSafeInteger(numberValue), 'Value is not a safe integer. Use `hexToBigInt` instead.');\n    return numberValue;\n};\nexports.hexToNumber = hexToNumber;\n/**\n * Convert a hexadecimal string to a `bigint`. This verifies that the string is\n * a valid hex string. Both \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a number instead, use {@link hexToNumber}.\n *\n * @example\n * ```typescript\n * hexToBigInt('0x0'); // 0n\n * hexToBigInt('0x1'); // 1n\n * hexToBigInt('0x10'); // 16n\n * ```\n * @param value - The hexadecimal string to convert to a `bigint`.\n * @returns The `bigint`.\n * @throws If the value is not a valid hexadecimal string.\n */\nconst hexToBigInt = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // The `BigInt` constructor requires the \"0x\"-prefix to parse a hex string.\n    return BigInt((0, hex_1.add0x)(value));\n};\nexports.hexToBigInt = hexToBigInt;\n//# sourceMappingURL=number.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=opaque.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDeferredPromise = void 0;\n/**\n * Create a defered Promise.\n *\n * If the Promise is rejected prior to a handler being added, this can result in an\n * `UnhandledPromiseRejection` error. Optionally this can be suppressed with the\n * `suppressUnhandledRejection` flag, as it's common to belatedly handle deferred Promises, or to\n * ignore them if they're no longer relevant (e.g. related to a cancelled request).\n *\n * However, be very careful that you have handled the Promise if you do this. Suppressing these\n * errors is dangerous, they exist for good reason. An unhandled rejection can hide errors, making\n * debugging extremely difficult. They should only be suppressed if you're confident that the\n * Promise is always handled correctly, in both the success and failure cases.\n *\n * @param args - The arguments.\n * @param args.suppressUnhandledRejection - This option adds an empty error handler\n * to the Promise to suppress the UnhandledPromiseRejection error. This can be\n * useful if the deferred Promise is sometimes intentionally not used.\n * @returns A deferred Promise.\n * @template Result - The result type of the Promise.\n */\nfunction createDeferredPromise({ suppressUnhandledRejection = false, } = {}) {\n    let resolve;\n    let reject;\n    const promise = new Promise((innerResolve, innerReject) => {\n        resolve = innerResolve;\n        reject = innerReject;\n    });\n    if (suppressUnhandledRejection) {\n        promise.catch((_error) => {\n            // This handler is used to suppress the UnhandledPromiseRejection error\n        });\n    }\n    // @ts-expect-error We know that these are assigned, but TypeScript doesn't\n    return { promise, resolve, reject };\n}\nexports.createDeferredPromise = createDeferredPromise;\n//# sourceMappingURL=promise.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */\nvar Duration;\n(function (Duration) {\n    /**\n     * A millisecond.\n     */\n    Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n    /**\n     * A second, in milliseconds.\n     */\n    Duration[Duration[\"Second\"] = 1000] = \"Second\";\n    /**\n     * A minute, in milliseconds.\n     */\n    Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n    /**\n     * An hour, in milliseconds.\n     */\n    Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n    /**\n     * A day, in milliseconds.\n     */\n    Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n    /**\n     * A week, in milliseconds.\n     */\n    Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n    /**\n     * A year, in milliseconds.\n     */\n    Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = (number) => Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name) => {\n    if (!isNonNegativeInteger(number)) {\n        throw new Error(`\"${name}\" must be a non-negative integer. Received: \"${number}\".`);\n    }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nfunction inMilliseconds(count, duration) {\n    assertIsNonNegativeInteger(count, 'count');\n    return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n    assertIsNonNegativeInteger(timestamp, 'timestamp');\n    return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;\n//# sourceMappingURL=time.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=transaction-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst semver_1 = require(\"semver\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * A struct for validating a version string.\n */\nexports.VersionStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version', (value) => {\n    if ((0, semver_1.valid)(value) === null) {\n        return `Expected SemVer version, got \"${value}\"`;\n    }\n    return true;\n});\nexports.VersionRangeStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version range', (value) => {\n    if ((0, semver_1.validRange)(value) === null) {\n        return `Expected SemVer range, got \"${value}\"`;\n    }\n    return true;\n});\n/**\n * Checks whether a SemVer version is valid.\n *\n * @param version - A potential version.\n * @returns `true` if the version is valid, and `false` otherwise.\n */\nfunction isValidSemVerVersion(version) {\n    return (0, superstruct_1.is)(version, exports.VersionStruct);\n}\nexports.isValidSemVerVersion = isValidSemVerVersion;\n/**\n * Checks whether a SemVer version range is valid.\n *\n * @param versionRange - A potential version range.\n * @returns `true` if the version range is valid, and `false` otherwise.\n */\nfunction isValidSemVerRange(versionRange) {\n    return (0, superstruct_1.is)(versionRange, exports.VersionRangeStruct);\n}\nexports.isValidSemVerRange = isValidSemVerRange;\n/**\n * Asserts that a value is a valid concrete SemVer version.\n *\n * @param version - A potential SemVer concrete version.\n */\nfunction assertIsSemVerVersion(version) {\n    (0, assert_1.assertStruct)(version, exports.VersionStruct);\n}\nexports.assertIsSemVerVersion = assertIsSemVerVersion;\n/**\n * Asserts that a value is a valid SemVer range.\n *\n * @param range - A potential SemVer range.\n */\nfunction assertIsSemVerRange(range) {\n    (0, assert_1.assertStruct)(range, exports.VersionRangeStruct);\n}\nexports.assertIsSemVerRange = assertIsSemVerRange;\n/**\n * Checks whether a SemVer version is greater than another.\n *\n * @param version1 - The left-hand version.\n * @param version2 - The right-hand version.\n * @returns `version1 > version2`.\n */\nfunction gtVersion(version1, version2) {\n    return (0, semver_1.gt)(version1, version2);\n}\nexports.gtVersion = gtVersion;\n/**\n * Checks whether a SemVer version is greater than all possibilities in a range.\n *\n * @param version - A SemvVer version.\n * @param range - The range to check against.\n * @returns `version > range`.\n */\nfunction gtRange(version, range) {\n    return (0, semver_1.gtr)(version, range);\n}\nexports.gtRange = gtRange;\n/**\n * Returns whether a SemVer version satisfies a SemVer range.\n *\n * @param version - The SemVer version to check.\n * @param versionRange - The SemVer version range to check against.\n * @returns Whether the version satisfied the version range.\n */\nfunction satisfiesVersionRange(version, versionRange) {\n    return (0, semver_1.satisfies)(version, versionRange, {\n        includePrerelease: true,\n    });\n}\nexports.satisfiesVersionRange = satisfiesVersionRange;\n//# sourceMappingURL=versions.cjs.map","import {\n  BaseController,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport {\n  NetworkControllerStateChangeEvent,\n  NetworkState,\n} from '@metamask/network-controller';\nimport { Hex } from '@metamask/utils';\nimport type { Patch } from 'immer';\nimport { TEST_CHAINS } from '../../../shared/constants/network';\n\n// Unique name for the controller\nconst controllerName = 'NetworkOrderController';\n\n/**\n * Information about an ordered network.\n */\nexport type NetworksInfo = {\n  networkId: Hex; // The network's chain id\n};\n\n// State shape for NetworkOrderController\nexport type NetworkOrderControllerState = {\n  orderedNetworkList: NetworksInfo[];\n};\n\n// Describes the structure of a state change event\nexport type NetworkOrderStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [NetworkOrderControllerState, Patch[]];\n};\n\n// Describes the action for updating the networks list\nexport type NetworkOrderControllerupdateNetworksListAction = {\n  type: `${typeof controllerName}:updateNetworksList`;\n  handler: NetworkOrderController['updateNetworksList'];\n};\n\n// Union of all possible actions for the messenger\nexport type NetworkOrderControllerMessengerActions =\n  NetworkOrderControllerupdateNetworksListAction;\n\n// Type for the messenger of NetworkOrderController\nexport type NetworkOrderControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  NetworkOrderControllerMessengerActions,\n  NetworkOrderStateChange | NetworkControllerStateChangeEvent,\n  never,\n  NetworkOrderStateChange['type'] | NetworkControllerStateChangeEvent['type']\n>;\n\n// Default state for the controller\nconst defaultState: NetworkOrderControllerState = {\n  orderedNetworkList: [],\n};\n\n// Metadata for the controller state\nconst metadata = {\n  orderedNetworkList: {\n    persist: true,\n    anonymous: true,\n  },\n};\n\n/**\n * Controller that updates the order of the network list.\n * This controller subscribes to network state changes and ensures\n * that the network list is updated based on the latest network configurations.\n */\nexport class NetworkOrderController extends BaseController<\n  typeof controllerName,\n  NetworkOrderControllerState,\n  NetworkOrderControllerMessenger\n> {\n  /**\n   * Creates a NetworkOrderController instance.\n   *\n   * @param args - The arguments to this function.\n   * @param args.messenger - Messenger used to communicate with BaseV2 controller.\n   * @param args.state - Initial state to set on this controller.\n   */\n  constructor({\n    messenger,\n    state,\n  }: {\n    messenger: NetworkOrderControllerMessenger;\n    state?: NetworkOrderControllerState;\n  }) {\n    // Call the constructor of BaseControllerV2\n    super({\n      messenger,\n      metadata,\n      name: controllerName,\n      state: { ...defaultState, ...state },\n    });\n\n    // Subscribe to network state changes\n    this.messagingSystem.subscribe(\n      'NetworkController:stateChange',\n      (networkControllerState) => {\n        this.onNetworkControllerStateChange(networkControllerState);\n      },\n    );\n  }\n\n  /**\n   * Handles the state change of the network controller and updates the networks list.\n   *\n   * @param networkControllerState - The state of the network controller.\n   * @param networkControllerState.networkConfigurationsByChainId\n   */\n  onNetworkControllerStateChange({\n    networkConfigurationsByChainId,\n  }: NetworkState) {\n    this.update((state) => {\n      // Filter out testnets, which are in the state but not orderable\n      const chainIds = Object.keys(networkConfigurationsByChainId).filter(\n        (chainId) =>\n          !TEST_CHAINS.includes(chainId as (typeof TEST_CHAINS)[number]),\n      ) as Hex[];\n\n      const newNetworks = chainIds\n        .filter(\n          (chainId) =>\n            !state.orderedNetworkList.some(\n              ({ networkId }) => networkId === chainId,\n            ),\n        )\n        .map((chainId) => ({ networkId: chainId }));\n\n      state.orderedNetworkList = state.orderedNetworkList\n        // Filter out deleted networks\n        .filter(({ networkId }) => chainIds.includes(networkId))\n        // Append new networks to the end\n        .concat(newNetworks);\n    });\n  }\n\n  /**\n   * Updates the networks list in the state with the provided list of networks.\n   *\n   * @param networkList - The list of networks to update in the state.\n   */\n\n  updateNetworksList(chainIds: Hex[]) {\n    this.update((state) => {\n      state.orderedNetworkList = chainIds.map((chainId) => ({\n        networkId: chainId,\n      }));\n    });\n  }\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 70;\n\n/**\n * Removes the `request` and `response` properties from\n * `PermissionLogController.permissionActivityLog` objects.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (Array.isArray(state?.PermissionLogController?.permissionActivityLog)) {\n    const {\n      PermissionLogController: { permissionActivityLog },\n    } = state;\n\n    // mutate activity log entries in place\n    permissionActivityLog.forEach((logEntry) => {\n      if (\n        logEntry &&\n        typeof logEntry === 'object' &&\n        !Array.isArray(logEntry)\n      ) {\n        delete logEntry.request;\n        delete logEntry.response;\n      }\n    });\n  }\n  return state;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/RateLimitController.ts\nvar _basecontroller = require('@metamask/base-controller');\nvar _rpcerrors = require('@metamask/rpc-errors');\nvar _utils = require('@metamask/utils');\nvar name = \"RateLimitController\";\nvar metadata = {\n  requests: { persist: false, anonymous: false }\n};\nvar RateLimitController = class extends _basecontroller.BaseController {\n  /**\n   * Creates a RateLimitController instance.\n   *\n   * @param options - Constructor options.\n   * @param options.messenger - A reference to the messaging system.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.implementations - Mapping from API type to API implementation.\n   * @param options.rateLimitTimeout - The time window in which the rate limit is applied (in ms).\n   * @param options.rateLimitCount - The amount of calls an origin can make in the rate limit time window.\n   */\n  constructor({\n    rateLimitTimeout = 5e3,\n    rateLimitCount = 1,\n    messenger,\n    state,\n    implementations\n  }) {\n    const defaultState = {\n      requests: _utils.getKnownPropertyNames.call(void 0, implementations).reduce((acc, key) => ({ ...acc, [key]: {} }), {})\n    };\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...defaultState, ...state }\n    });\n    this.implementations = implementations;\n    this.rateLimitTimeout = rateLimitTimeout;\n    this.rateLimitCount = rateLimitCount;\n    this.messagingSystem.registerActionHandler(\n      `${name}:call`,\n      (origin, type, ...args) => this.call(origin, type, ...args)\n    );\n  }\n  /**\n   * Calls an API if the requesting origin is not rate-limited.\n   *\n   * @param origin - The requesting origin.\n   * @param type - The type of API call to make.\n   * @param args - Arguments for the API call.\n   */\n  async call(origin, type, ...args) {\n    if (this.isRateLimited(type, origin)) {\n      throw _rpcerrors.rpcErrors.limitExceeded({\n        message: `\"${type.toString()}\" is currently rate-limited. Please try again later.`\n      });\n    }\n    this.recordRequest(type, origin);\n    const implementation = this.implementations[type].method;\n    if (!implementation) {\n      throw new Error(\"Invalid api type\");\n    }\n    return implementation(...args);\n  }\n  /**\n   * Checks whether an origin is rate limited for the a specific API.\n   *\n   * @param api - The API the origin is trying to access.\n   * @param origin - The origin trying to access the API.\n   * @returns `true` if rate-limited, and `false` otherwise.\n   */\n  isRateLimited(api, origin) {\n    const rateLimitCount = this.implementations[api].rateLimitCount ?? this.rateLimitCount;\n    return this.state.requests[api][origin] >= rateLimitCount;\n  }\n  /**\n   * Records that an origin has made a request to call an API, for rate-limiting purposes.\n   *\n   * @param api - The API the origin is trying to access.\n   * @param origin - The origin trying to access the API.\n   */\n  recordRequest(api, origin) {\n    const rateLimitTimeout = this.implementations[api].rateLimitTimeout ?? this.rateLimitTimeout;\n    const previous = this.state.requests[api][origin] ?? 0;\n    this.update((state) => {\n      if (previous === 0) {\n        setTimeout(() => this.resetRequestCount(api, origin), rateLimitTimeout);\n      }\n      Object.assign(state, {\n        requests: {\n          ...state.requests,\n          [api]: { [origin]: previous + 1 }\n        }\n      });\n    });\n  }\n  /**\n   * Resets the request count for a given origin and API combination, for rate-limiting purposes.\n   *\n   * @param api - The API in question.\n   * @param origin - The origin in question.\n   */\n  resetRequestCount(api, origin) {\n    this.update((state) => {\n      Object.assign(state, {\n        requests: {\n          ...state.requests,\n          [api]: { [origin]: 0 }\n        }\n      });\n    });\n  }\n};\n\n\n\nexports.RateLimitController = RateLimitController;\n//# sourceMappingURL=chunk-37GF32BR.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunk37GF32BRjs = require('./chunk-37GF32BR.js');\n\n\nexports.RateLimitController = _chunk37GF32BRjs.RateLimitController;\n//# sourceMappingURL=index.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/BaseControllerV1.ts\nvar BaseControllerV1 = class {\n  /**\n   * Creates a BaseControllerV1 instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config = {}, state = {}) {\n    /**\n     * Default options used to configure this controller\n     */\n    this.defaultConfig = {};\n    /**\n     * Default state set on this controller\n     */\n    this.defaultState = {};\n    /**\n     * Determines if listeners are notified of state changes\n     */\n    this.disabled = false;\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"BaseController\";\n    this.internalConfig = this.defaultConfig;\n    this.internalState = this.defaultState;\n    this.internalListeners = [];\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns This controller instance.\n   */\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n  /**\n   * Retrieves current controller configuration options.\n   *\n   * @returns The current configuration.\n   */\n  get config() {\n    return this.internalConfig;\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return this.internalState;\n  }\n  /**\n   * Updates controller configuration.\n   *\n   * @param config - New configuration options.\n   * @param overwrite - Overwrite config instead of merging.\n   * @param fullUpdate - Boolean that defines if the update is partial or not.\n   */\n  configure(config, overwrite = false, fullUpdate = true) {\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key of Object.keys(this.internalConfig)) {\n        const value = this.internalConfig[key];\n        if (value !== void 0) {\n          this[key] = value;\n        }\n      }\n    } else {\n      for (const key of Object.keys(config)) {\n        if (this.internalConfig[key] !== void 0) {\n          const value = config[key];\n          this.internalConfig[key] = value;\n          this[key] = value;\n        }\n      }\n    }\n  }\n  /**\n   * Notifies all subscribed listeners of current state.\n   */\n  notify() {\n    if (this.disabled) {\n      return;\n    }\n    this.internalListeners.forEach((listener) => {\n      listener(this.internalState);\n    });\n  }\n  /**\n   * Adds new listener to be notified of state changes.\n   *\n   * @param listener - The callback triggered when state changes.\n   */\n  subscribe(listener) {\n    this.internalListeners.push(listener);\n  }\n  /**\n   * Removes existing listener from receiving state changes.\n   *\n   * @param listener - The callback to remove.\n   * @returns `true` if a listener is found and unsubscribed.\n   */\n  unsubscribe(listener) {\n    const index = this.internalListeners.findIndex((cb) => listener === cb);\n    index > -1 && this.internalListeners.splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Updates controller state.\n   *\n   * @param state - The new state.\n   * @param overwrite - Overwrite state instead of merging.\n   */\n  update(state, overwrite = false) {\n    this.internalState = overwrite ? Object.assign({}, state) : Object.assign({}, this.internalState, state);\n    this.notify();\n  }\n};\nvar BaseControllerV1_default = BaseControllerV1;\n\n\n\n\nexports.BaseControllerV1 = BaseControllerV1; exports.BaseControllerV1_default = BaseControllerV1_default;\n//# sourceMappingURL=chunk-FTHCJ6HY.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/ControllerMessenger.ts\nvar _actions, _events, _initialEventPayloadGetters, _eventPayloadCache;\nvar ControllerMessenger = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _actions, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _events, /* @__PURE__ */ new Map());\n    /**\n     * A map of functions for getting the initial event payload.\n     *\n     * Used only for events that represent state changes.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _initialEventPayloadGetters, /* @__PURE__ */ new Map());\n    /**\n     * A cache of selector return values for their respective handlers.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _eventPayloadCache, /* @__PURE__ */ new Map());\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw when a handler has been registered for this action type already.\n   * @template ActionType - A type union of Action type strings.\n   */\n  registerActionHandler(actionType, handler) {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).has(actionType)) {\n      throw new Error(\n        `A handler for ${actionType} has already been registered`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).set(actionType, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @template ActionType - A type union of Action type strings.\n   */\n  unregisterActionHandler(actionType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).delete(actionType);\n  }\n  /**\n   * Unregister all action handlers.\n   *\n   * This prevents all actions from being called.\n   */\n  clearActions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).clear();\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    const handler = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).get(actionType);\n    if (!handler) {\n      throw new Error(`A handler for ${actionType} has not been registered`);\n    }\n    return handler(...params);\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).set(eventType, getPayload);\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * Note that this method should never throw directly. Any errors from\n   * subscribers are captured and re-thrown in a timeout handler.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @template EventType - A type union of Event type strings.\n   */\n  publish(eventType, ...payload) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (subscribers) {\n      for (const [handler, selector] of subscribers.entries()) {\n        try {\n          if (selector) {\n            const previousValue = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).get(handler);\n            const newValue = selector(...payload);\n            if (newValue !== previousValue) {\n              _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, newValue);\n              handler(newValue, previousValue);\n            }\n          } else {\n            handler(...payload);\n          }\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          });\n        }\n      }\n    }\n  }\n  subscribe(eventType, handler, selector) {\n    let subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers) {\n      subscribers = /* @__PURE__ */ new Map();\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).set(eventType, subscribers);\n    }\n    subscribers.set(handler, selector);\n    if (selector) {\n      const getPayload = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).get(eventType);\n      if (getPayload) {\n        const initialValue = selector(...getPayload());\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, initialValue);\n      }\n    }\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw when the given event handler is not registered for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  unsubscribe(eventType, handler) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers || !subscribers.has(handler)) {\n      throw new Error(`Subscription not found for event: ${eventType}`);\n    }\n    const selector = subscribers.get(handler);\n    if (selector) {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).delete(handler);\n    }\n    subscribers.delete(handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  clearEventSubscriptions(eventType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).delete(eventType);\n  }\n  /**\n   * Clear all subscriptions.\n   *\n   * This will remove all subscribed handlers for all events.\n   */\n  clearSubscriptions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).clear();\n  }\n  /**\n   * Get a restricted controller messenger\n   *\n   * Returns a wrapper around the controller messenger instance that restricts access to actions\n   * and events. The provided allowlists grant the ability to call the listed actions and subscribe\n   * to the listed events. The \"name\" provided grants ownership of any actions and events under\n   * that namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - Controller messenger options.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   * @template Namespace - The namespace for this messenger. Typically this is the name of the controller or\n   * module that this messenger has been created for. The authority to publish events and register\n   * actions under this namespace is granted to this restricted messenger instance.\n   * @template AllowedAction - A type union of the 'type' string for any allowed actions.\n   * This must not include internal actions that are in the messenger's namespace.\n   * @template AllowedEvent - A type union of the 'type' string for any allowed events.\n   * This must not include internal events that are in the messenger's namespace.\n   * @returns The restricted controller messenger.\n   */\n  getRestricted({\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    return new (0, _chunkUJFCPTF3js.RestrictedControllerMessenger)({\n      controllerMessenger: this,\n      name,\n      allowedActions,\n      allowedEvents\n    });\n  }\n};\n_actions = new WeakMap();\n_events = new WeakMap();\n_initialEventPayloadGetters = new WeakMap();\n_eventPayloadCache = new WeakMap();\n\n\n\nexports.ControllerMessenger = ControllerMessenger;\n//# sourceMappingURL=chunk-G42723LG.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/BaseControllerV2.ts\nvar _immer = require('immer');\n_immer.enablePatches.call(void 0, );\nvar _internalState;\nvar BaseController = class {\n  /**\n   * Creates a BaseController instance.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - Controller messaging system.\n   * @param options.metadata - ControllerState metadata, describing how to \"anonymize\" the state, and which\n   * parts should be persisted.\n   * @param options.name - The name of the controller, used as a namespace for events and actions.\n   * @param options.state - Initial controller state.\n   */\n  constructor({\n    messenger,\n    metadata,\n    name,\n    state\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _internalState, void 0);\n    this.messagingSystem = messenger;\n    this.name = name;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, _immer.freeze.call(void 0, state, true));\n    this.metadata = metadata;\n    this.messagingSystem.registerActionHandler(\n      `${name}:getState`,\n      () => this.state\n    );\n    this.messagingSystem.registerInitialEventPayload({\n      eventType: `${name}:stateChange`,\n      getPayload: () => [this.state, []]\n    });\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState);\n  }\n  set state(_) {\n    throw new Error(\n      `Controller state cannot be directly mutated; use 'update' method instead.`\n    );\n  }\n  /**\n   * Updates controller state. Accepts a callback that is passed a draft copy\n   * of the controller state. If a value is returned, it is set as the new\n   * state. Otherwise, any changes made within that callback to the draft are\n   * applied to the controller state.\n   *\n   * @param callback - Callback for updating state, passed a draft state\n   * object. Return a new state object or mutate the draft to update state.\n   * @returns An object that has the next state, patches applied in the update and inverse patches to\n   * rollback the update.\n   */\n  update(callback) {\n    const [nextState, patches, inversePatches] = _immer.produceWithPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), callback);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n    return { nextState, patches, inversePatches };\n  }\n  /**\n   * Applies immer patches to the current state. The patches come from the\n   * update function itself and can either be normal or inverse patches.\n   *\n   * @param patches - An array of immer patches that are to be applied to make\n   * or undo changes.\n   */\n  applyPatches(patches) {\n    const nextState = _immer.applyPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), patches);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n  }\n  /**\n   * Prepares the controller for garbage collection. This should be extended\n   * by any subclasses to clean up any additional connections or events.\n   *\n   * The only cleanup performed here is to remove listeners. While technically\n   * this is not required to ensure this instance is garbage collected, it at\n   * least ensures this instance won't be responsible for preventing the\n   * listeners from being garbage collected.\n   */\n  destroy() {\n    this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`);\n  }\n};\n_internalState = new WeakMap();\nfunction getAnonymizedState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"anonymous\");\n}\nfunction getPersistentState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"persist\");\n}\nfunction deriveStateFromMetadata(state, metadata, metadataProperty) {\n  return Object.keys(state).reduce((derivedState, key) => {\n    try {\n      const stateMetadata = metadata[key];\n      if (!stateMetadata) {\n        throw new Error(`No metadata found for '${String(key)}'`);\n      }\n      const propertyMetadata = stateMetadata[metadataProperty];\n      const stateProperty = state[key];\n      if (typeof propertyMetadata === \"function\") {\n        derivedState[key] = propertyMetadata(stateProperty);\n      } else if (propertyMetadata) {\n        derivedState[key] = stateProperty;\n      }\n      return derivedState;\n    } catch (error) {\n      setTimeout(() => {\n        throw error;\n      });\n      return derivedState;\n    }\n  }, {});\n}\n\n\n\n\n\nexports.BaseController = BaseController; exports.getAnonymizedState = getAnonymizedState; exports.getPersistentState = getPersistentState;\n//# sourceMappingURL=chunk-IURK6TKD.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/RestrictedControllerMessenger.ts\nvar _controllerMessenger, _controllerName, _allowedActions, _allowedEvents, _isAllowedEvent, isAllowedEvent_fn, _isAllowedAction, isAllowedAction_fn, _isInCurrentNamespace, isInCurrentNamespace_fn;\nvar RestrictedControllerMessenger = class {\n  /**\n   * Constructs a restricted controller messenger\n   *\n   * The provided allowlists grant the ability to call the listed actions and subscribe to the\n   * listed events. The \"name\" provided grants ownership of any actions and events under that\n   * namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - The controller options.\n   * @param options.controllerMessenger - The controller messenger instance that is being wrapped.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   */\n  constructor({\n    controllerMessenger,\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    /**\n     * Determine whether the given event type is allowed. Event types are\n     * allowed if they are in the current namespace or on the list of\n     * allowed events.\n     *\n     * @param eventType - The event type to check.\n     * @returns Whether the event type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedEvent);\n    /**\n     * Determine whether the given action type is allowed. Action types\n     * are allowed if they are in the current namespace or on the list of\n     * allowed actions.\n     *\n     * @param actionType - The action type to check.\n     * @returns Whether the action type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedAction);\n    /**\n     * Determine whether the given name is within the current namespace.\n     *\n     * @param name - The name to check\n     * @returns Whether the name is within the current namespace\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isInCurrentNamespace);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerMessenger, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerName, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedActions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedEvents, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerMessenger, controllerMessenger);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerName, name);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedActions, allowedActions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedEvents, allowedEvents);\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * The action type this handler is registered under *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw if an action handler that is not in the current namespace is being registered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  registerActionHandler(action, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed registering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerActionHandler(action, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * The action type being unregistered *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unique identifier for this action.\n   * @throws Will throw if an action handler that is not in the current namespace is being unregistered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  unregisterActionHandler(action) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed unregistering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unregisterActionHandler(action);\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * The action type being called must be on the action allowlist.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of allowed Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedAction, isAllowedAction_fn).call(this, actionType)) {\n      throw new Error(`Action missing from allow list: ${actionType}`);\n    }\n    const response = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).call(\n      actionType,\n      ...params\n    );\n    return response;\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * The event type *must* be in the current namespace\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerInitialEventPayload({\n      eventType,\n      getPayload\n    });\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * The event type being published *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @throws Will throw if an event that is not in the current namespace is being published.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  publish(event, ...payload) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).publish(event, ...payload);\n  }\n  subscribe(event, handler, selector) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    if (selector) {\n      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler, selector);\n    }\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler);\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * The event type being unsubscribed to must be on the event allowlist.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw if the given event is not an allowed event for this controller messenger.\n   * @template EventType - A type union of allowed Event type strings.\n   */\n  unsubscribe(event, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unsubscribe(event, handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * The event type being cleared *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @throws Will throw if a subscription for an event that is not in the current namespace is being cleared.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  clearEventSubscriptions(event) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed clearing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).clearEventSubscriptions(event);\n  }\n};\n_controllerMessenger = new WeakMap();\n_controllerName = new WeakMap();\n_allowedActions = new WeakMap();\n_allowedEvents = new WeakMap();\n_isAllowedEvent = new WeakSet();\nisAllowedEvent_fn = function(eventType) {\n  const allowedEvents = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedEvents);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType) || allowedEvents !== null && allowedEvents.includes(eventType);\n};\n_isAllowedAction = new WeakSet();\nisAllowedAction_fn = function(actionType) {\n  const allowedActions = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedActions);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, actionType) || allowedActions !== null && allowedActions.includes(actionType);\n};\n_isInCurrentNamespace = new WeakSet();\nisInCurrentNamespace_fn = function(name) {\n  return name.startsWith(`${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:`);\n};\n\n\n\nexports.RestrictedControllerMessenger = RestrictedControllerMessenger;\n//# sourceMappingURL=chunk-UJFCPTF3.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkFTHCJ6HYjs = require('./chunk-FTHCJ6HY.js');\n\n\n\n\nvar _chunkIURK6TKDjs = require('./chunk-IURK6TKD.js');\n\n\nvar _chunkG42723LGjs = require('./chunk-G42723LG.js');\n\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\n\n\nexports.BaseController = _chunkIURK6TKDjs.BaseController; exports.BaseControllerV1 = _chunkFTHCJ6HYjs.BaseControllerV1; exports.ControllerMessenger = _chunkG42723LGjs.ControllerMessenger; exports.RestrictedControllerMessenger = _chunkUJFCPTF3js.RestrictedControllerMessenger; exports.getAnonymizedState = _chunkIURK6TKDjs.getAnonymizedState; exports.getPersistentState = _chunkIURK6TKDjs.getPersistentState;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst errors_1 = require(\"./errors.cjs\");\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(fn) {\n    /* istanbul ignore next */\n    return Boolean(typeof fn?.prototype?.constructor?.name === 'string');\n}\n/**\n * Attempts to obtain the message from a possible error object. If it is\n * possible to do so, any trailing period will be removed from the message;\n * otherwise an empty string is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The message without any trailing period if `error` is an object\n * with a `message` property; the string version of `error` without any trailing\n * period if it is not `undefined` or `null`; otherwise an empty string.\n */\nfunction getErrorMessageWithoutTrailingPeriod(error) {\n    // We'll add our own period.\n    return (0, errors_1.getErrorMessage)(error).replace(/\\.$/u, '');\n}\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper, message) {\n    if (isConstructable(ErrorWrapper)) {\n        return new ErrorWrapper({\n            message,\n        });\n    }\n    return ErrorWrapper({\n        message,\n    });\n}\n/**\n * The default error class that is thrown if an assertion fails.\n */\nclass AssertionError extends Error {\n    constructor(options) {\n        super(options.message);\n        this.code = 'ERR_ASSERTION';\n    }\n}\nexports.AssertionError = AssertionError;\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nfunction assert(value, message = 'Assertion failed.', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    if (!value) {\n        if (message instanceof Error) {\n            throw message;\n        }\n        throw getError(ErrorWrapper, message);\n    }\n}\nexports.assert = assert;\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nfunction assertStruct(value, struct, errorPrefix = 'Assertion failed', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    try {\n        (0, superstruct_1.assert)(value, struct);\n    }\n    catch (error) {\n        throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessageWithoutTrailingPeriod(error)}.`);\n    }\n}\nexports.assertStruct = assertStruct;\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nfunction assertExhaustive(_object) {\n    throw new Error('Invalid branch reached. Should be detected during compilation.');\n}\nexports.assertExhaustive = assertExhaustive;\n//# sourceMappingURL=assert.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base64 = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nconst base64 = (struct, options = {}) => {\n    const paddingRequired = options.paddingRequired ?? false;\n    const characterSet = options.characterSet ?? 'base64';\n    let letters;\n    if (characterSet === 'base64') {\n        letters = String.raw `[A-Za-z0-9+\\/]`;\n    }\n    else {\n        (0, assert_1.assert)(characterSet === 'base64url');\n        letters = String.raw `[-_A-Za-z0-9]`;\n    }\n    let re;\n    if (paddingRequired) {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    else {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64;\n//# sourceMappingURL=base64.cjs.map","import { cloneDeep } from 'lodash';\n\nconst version = 71;\n\n/**\n * Renames NotificationController to AnnouncementController\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state.NotificationController) {\n    state.AnnouncementController = {\n      announcements: state.NotificationController.notifications,\n    };\n    delete state.NotificationController;\n  }\n  return state;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDataView = exports.concatBytes = exports.valueToBytes = exports.base64ToBytes = exports.stringToBytes = exports.numberToBytes = exports.signedBigIntToBytes = exports.bigIntToBytes = exports.hexToBytes = exports.bytesToBase64 = exports.bytesToString = exports.bytesToNumber = exports.bytesToSignedBigInt = exports.bytesToBigInt = exports.bytesToHex = exports.assertIsBytes = exports.isBytes = void 0;\nconst base_1 = require(\"@scure/base\");\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n// '0'.charCodeAt(0) === 48\nconst HEX_MINIMUM_NUMBER_CHARACTER = 48;\n// '9'.charCodeAt(0) === 57\nconst HEX_MAXIMUM_NUMBER_CHARACTER = 58;\nconst HEX_CHARACTER_OFFSET = 87;\n/**\n * Memoized function that returns an array to be used as a lookup table for\n * converting bytes to hexadecimal values.\n *\n * The array is created lazily and then cached for future use. The benefit of\n * this approach is that the performance of converting bytes to hex is much\n * better than if we were to call `toString(16)` on each byte.\n *\n * The downside is that the array is created once and then never garbage\n * collected. This is not a problem in practice because the array is only 256\n * elements long.\n *\n * @returns A function that returns the lookup table.\n */\nfunction getPrecomputedHexValuesBuilder() {\n    // To avoid issues with tree shaking, we need to use a function to return the\n    // array. This is because the array is only used in the `bytesToHex` function\n    // and if we were to use a global variable, the array might be removed by the\n    // tree shaker.\n    const lookupTable = [];\n    return () => {\n        if (lookupTable.length === 0) {\n            for (let i = 0; i < 256; i++) {\n                lookupTable.push(i.toString(16).padStart(2, '0'));\n            }\n        }\n        return lookupTable;\n    };\n}\n/**\n * Function implementation of the {@link getPrecomputedHexValuesBuilder}\n * function.\n */\nconst getPrecomputedHexValues = getPrecomputedHexValuesBuilder();\n/**\n * Check if a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @returns Whether the value is a `Uint8Array`.\n */\nfunction isBytes(value) {\n    return value instanceof Uint8Array;\n}\nexports.isBytes = isBytes;\n/**\n * Assert that a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @throws If the value is not a `Uint8Array`.\n */\nfunction assertIsBytes(value) {\n    (0, assert_1.assert)(isBytes(value), 'Value must be a Uint8Array.');\n}\nexports.assertIsBytes = assertIsBytes;\n/**\n * Convert a `Uint8Array` to a hexadecimal string.\n *\n * @param bytes - The bytes to convert to a hexadecimal string.\n * @returns The hexadecimal string.\n */\nfunction bytesToHex(bytes) {\n    assertIsBytes(bytes);\n    if (bytes.length === 0) {\n        return '0x';\n    }\n    const lookupTable = getPrecomputedHexValues();\n    const hexadecimal = new Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        hexadecimal[i] = lookupTable[bytes[i]];\n    }\n    return (0, hex_1.add0x)(hexadecimal.join(''));\n}\nexports.bytesToHex = bytesToHex;\n/**\n * Convert a `Uint8Array` to a `bigint`.\n *\n * To convert a `Uint8Array` to a `number` instead, use {@link bytesToNumber}.\n * To convert a two's complement encoded `Uint8Array` to a `bigint`, use\n * {@link bytesToSignedBigInt}.\n *\n * @param bytes - The bytes to convert to a `bigint`.\n * @returns The `bigint`.\n */\nfunction bytesToBigInt(bytes) {\n    assertIsBytes(bytes);\n    const hexadecimal = bytesToHex(bytes);\n    return BigInt(hexadecimal);\n}\nexports.bytesToBigInt = bytesToBigInt;\n/**\n * Convert a `Uint8Array` to a signed `bigint`. This assumes that the bytes are\n * encoded in two's complement.\n *\n * To convert a `Uint8Array` to an unsigned `bigint` instead, use\n * {@link bytesToBigInt}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param bytes - The bytes to convert to a signed `bigint`.\n * @returns The signed `bigint`.\n */\nfunction bytesToSignedBigInt(bytes) {\n    assertIsBytes(bytes);\n    let value = BigInt(0);\n    for (const byte of bytes) {\n        // eslint-disable-next-line no-bitwise\n        value = (value << BigInt(8)) + BigInt(byte);\n    }\n    return BigInt.asIntN(bytes.length * 8, value);\n}\nexports.bytesToSignedBigInt = bytesToSignedBigInt;\n/**\n * Convert a `Uint8Array` to a `number`.\n *\n * To convert a `Uint8Array` to a `bigint` instead, use {@link bytesToBigInt}.\n *\n * @param bytes - The bytes to convert to a number.\n * @returns The number.\n * @throws If the resulting number is not a safe integer.\n */\nfunction bytesToNumber(bytes) {\n    assertIsBytes(bytes);\n    const bigint = bytesToBigInt(bytes);\n    (0, assert_1.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), 'Number is not a safe integer. Use `bytesToBigInt` instead.');\n    return Number(bigint);\n}\nexports.bytesToNumber = bytesToNumber;\n/**\n * Convert a UTF-8 encoded `Uint8Array` to a `string`.\n *\n * @param bytes - The bytes to convert to a string.\n * @returns The string.\n */\nfunction bytesToString(bytes) {\n    assertIsBytes(bytes);\n    return new TextDecoder().decode(bytes);\n}\nexports.bytesToString = bytesToString;\n/**\n * Convert a `Uint8Array` to a base64 encoded string.\n *\n * @param bytes - The bytes to convert to a base64 encoded string.\n * @returns The base64 encoded string.\n */\nfunction bytesToBase64(bytes) {\n    assertIsBytes(bytes);\n    return base_1.base64.encode(bytes);\n}\nexports.bytesToBase64 = bytesToBase64;\n/**\n * Convert a hexadecimal string to a `Uint8Array`. The string can optionally be\n * prefixed with `0x`. It accepts even and odd length strings.\n *\n * If the value is \"0x\", an empty `Uint8Array` is returned.\n *\n * @param value - The hexadecimal string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction hexToBytes(value) {\n    // \"0x\" is often used as empty byte array.\n    if (value?.toLowerCase?.() === '0x') {\n        return new Uint8Array();\n    }\n    (0, hex_1.assertIsHexString)(value);\n    // Remove the `0x` prefix if it exists, and pad the string to have an even\n    // number of characters.\n    const strippedValue = (0, hex_1.remove0x)(value).toLowerCase();\n    const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;\n    const bytes = new Uint8Array(normalizedValue.length / 2);\n    for (let i = 0; i < bytes.length; i++) {\n        // While this is not the prettiest way to convert a hexadecimal string to a\n        // `Uint8Array`, it is a lot faster than using `parseInt` to convert each\n        // character.\n        const c1 = normalizedValue.charCodeAt(i * 2);\n        const c2 = normalizedValue.charCodeAt(i * 2 + 1);\n        const n1 = c1 -\n            (c1 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        const n2 = c2 -\n            (c2 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        bytes[i] = n1 * 16 + n2;\n    }\n    return bytes;\n}\nexports.hexToBytes = hexToBytes;\n/**\n * Convert a `bigint` to a `Uint8Array`.\n *\n * This assumes that the `bigint` is an unsigned integer. To convert a signed\n * `bigint` instead, use {@link signedBigIntToBytes}.\n *\n * @param value - The bigint to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction bigIntToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= BigInt(0), 'Value must be a non-negative bigint.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * Check if a `bigint` fits in a certain number of bytes.\n *\n * @param value - The `bigint` to check.\n * @param bytes - The number of bytes.\n * @returns Whether the `bigint` fits in the number of bytes.\n */\nfunction bigIntFits(value, bytes) {\n    (0, assert_1.assert)(bytes > 0);\n    /* eslint-disable no-bitwise */\n    const mask = value >> BigInt(31);\n    return !(((~value & mask) + (value & ~mask)) >> BigInt(bytes * 8 + ~0));\n    /* eslint-enable no-bitwise */\n}\n/**\n * Convert a signed `bigint` to a `Uint8Array`. This uses two's complement\n * encoding to represent negative numbers.\n *\n * To convert an unsigned `bigint` to a `Uint8Array` instead, use\n * {@link bigIntToBytes}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param value - The number to convert to bytes.\n * @param byteLength - The length of the resulting `Uint8Array`. If the number\n * is larger than the maximum value that can be represented by the given length,\n * an error is thrown.\n * @returns The bytes as `Uint8Array`.\n */\nfunction signedBigIntToBytes(value, byteLength) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(typeof byteLength === 'number', 'Byte length must be a number.');\n    (0, assert_1.assert)(byteLength > 0, 'Byte length must be greater than 0.');\n    (0, assert_1.assert)(bigIntFits(value, byteLength), 'Byte length is too small to represent the given value.');\n    // ESLint doesn't like mutating function parameters, so to avoid having to\n    // disable the rule, we create a new variable.\n    let numberValue = value;\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0; i < bytes.length; i++) {\n        bytes[i] = Number(BigInt.asUintN(8, numberValue));\n        // eslint-disable-next-line no-bitwise\n        numberValue >>= BigInt(8);\n    }\n    return bytes.reverse();\n}\nexports.signedBigIntToBytes = signedBigIntToBytes;\n/**\n * Convert a `number` to a `Uint8Array`.\n *\n * @param value - The number to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n * @throws If the number is not a safe integer.\n */\nfunction numberToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToBytes` instead.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.numberToBytes = numberToBytes;\n/**\n * Convert a `string` to a UTF-8 encoded `Uint8Array`.\n *\n * @param value - The string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction stringToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return new TextEncoder().encode(value);\n}\nexports.stringToBytes = stringToBytes;\n/**\n * Convert a base64 encoded string to a `Uint8Array`.\n *\n * @param value - The base64 encoded string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction base64ToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return base_1.base64.decode(value);\n}\nexports.base64ToBytes = base64ToBytes;\n/**\n * Convert a byte-like value to a `Uint8Array`. The value can be a `Uint8Array`,\n * a `bigint`, a `number`, or a `string`.\n *\n * This will attempt to guess the type of the value based on its type and\n * contents. For more control over the conversion, use the more specific\n * conversion functions, such as {@link hexToBytes} or {@link stringToBytes}.\n *\n * If the value is a `string`, and it is prefixed with `0x`, it will be\n * interpreted as a hexadecimal string. Otherwise, it will be interpreted as a\n * UTF-8 string. To convert a hexadecimal string to bytes without interpreting\n * it as a UTF-8 string, use {@link hexToBytes} instead.\n *\n * If the value is a `bigint`, it is assumed to be unsigned. To convert a signed\n * `bigint` to bytes, use {@link signedBigIntToBytes} instead.\n *\n * If the value is a `Uint8Array`, it will be returned as-is.\n *\n * @param value - The value to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction valueToBytes(value) {\n    if (typeof value === 'bigint') {\n        return bigIntToBytes(value);\n    }\n    if (typeof value === 'number') {\n        return numberToBytes(value);\n    }\n    if (typeof value === 'string') {\n        if (value.startsWith('0x')) {\n            return hexToBytes(value);\n        }\n        return stringToBytes(value);\n    }\n    if (isBytes(value)) {\n        return value;\n    }\n    throw new TypeError(`Unsupported value type: \"${typeof value}\".`);\n}\nexports.valueToBytes = valueToBytes;\n/**\n * Concatenate multiple byte-like values into a single `Uint8Array`. The values\n * can be `Uint8Array`, `bigint`, `number`, or `string`. This uses\n * {@link valueToBytes} under the hood to convert each value to bytes. Refer to\n * the documentation of that function for more information.\n *\n * @param values - The values to concatenate.\n * @returns The concatenated bytes as `Uint8Array`.\n */\nfunction concatBytes(values) {\n    const normalizedValues = new Array(values.length);\n    let byteLength = 0;\n    for (let i = 0; i < values.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const value = valueToBytes(values[i]);\n        normalizedValues[i] = value;\n        byteLength += value.length;\n    }\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0, offset = 0; i < normalizedValues.length; i++) {\n        // While we could simply spread the values into an array and use\n        // `Uint8Array.from`, that is a lot slower than using `Uint8Array.set`.\n        bytes.set(normalizedValues[i], offset);\n        offset += normalizedValues[i].length;\n    }\n    return bytes;\n}\nexports.concatBytes = concatBytes;\n/**\n * Create a {@link DataView} from a {@link Uint8Array}. This is a convenience\n * function that avoids having to create a {@link DataView} manually, which\n * requires passing the `byteOffset` and `byteLength` parameters every time.\n *\n * Not passing the `byteOffset` and `byteLength` parameters can result in\n * unexpected behavior when the {@link Uint8Array} is a view of a larger\n * {@link ArrayBuffer}, e.g., when using {@link Uint8Array.subarray}.\n *\n * This function also supports Node.js {@link Buffer}s.\n *\n * @example\n * ```typescript\n * const bytes = new Uint8Array([1, 2, 3]);\n *\n * // This is equivalent to:\n * // const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n * const dataView = createDataView(bytes);\n * ```\n * @param bytes - The bytes to create the {@link DataView} from.\n * @returns The {@link DataView}.\n */\nfunction createDataView(bytes) {\n    // To maintain compatibility with Node.js, we need to check if the bytes are\n    // a Buffer. If so, we need to slice the buffer to get the underlying\n    // ArrayBuffer.\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof Buffer !== 'undefined' && bytes instanceof Buffer) {\n        const buffer = bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n        return new DataView(buffer);\n    }\n    return new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n}\nexports.createDataView = createDataView;\n//# sourceMappingURL=bytes.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCaipChainId = exports.parseCaipAccountId = exports.parseCaipChainId = exports.isCaipAccountAddress = exports.isCaipAccountId = exports.isCaipReference = exports.isCaipNamespace = exports.isCaipChainId = exports.KnownCaipNamespace = exports.CaipAccountAddressStruct = exports.CaipAccountIdStruct = exports.CaipReferenceStruct = exports.CaipNamespaceStruct = exports.CaipChainIdStruct = exports.CAIP_ACCOUNT_ADDRESS_REGEX = exports.CAIP_ACCOUNT_ID_REGEX = exports.CAIP_REFERENCE_REGEX = exports.CAIP_NAMESPACE_REGEX = exports.CAIP_CHAIN_ID_REGEX = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nexports.CAIP_CHAIN_ID_REGEX = /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u;\nexports.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u;\nexports.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u;\nexports.CAIP_ACCOUNT_ID_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u;\nexports.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u;\n/**\n * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.\n */\nexports.CaipChainIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_CHAIN_ID_REGEX);\n/**\n * A CAIP-2 namespace, i.e., the first part of a CAIP chain ID.\n */\nexports.CaipNamespaceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_NAMESPACE_REGEX);\n/**\n * A CAIP-2 reference, i.e., the second part of a CAIP chain ID.\n */\nexports.CaipReferenceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_REFERENCE_REGEX);\n/**\n * A CAIP-10 account ID, i.e., a human-readable namespace, reference, and account address.\n */\nexports.CaipAccountIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ID_REGEX);\n/**\n * A CAIP-10 account address, i.e., the third part of the CAIP account ID.\n */\nexports.CaipAccountAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ADDRESS_REGEX);\n/** Known CAIP namespaces. */\nvar KnownCaipNamespace;\n(function (KnownCaipNamespace) {\n    /** EIP-155 compatible chains. */\n    KnownCaipNamespace[\"Eip155\"] = \"eip155\";\n})(KnownCaipNamespace = exports.KnownCaipNamespace || (exports.KnownCaipNamespace = {}));\n/**\n * Check if the given value is a {@link CaipChainId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipChainId}.\n */\nfunction isCaipChainId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipChainIdStruct);\n}\nexports.isCaipChainId = isCaipChainId;\n/**\n * Check if the given value is a {@link CaipNamespace}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipNamespace}.\n */\nfunction isCaipNamespace(value) {\n    return (0, superstruct_1.is)(value, exports.CaipNamespaceStruct);\n}\nexports.isCaipNamespace = isCaipNamespace;\n/**\n * Check if the given value is a {@link CaipReference}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipReference}.\n */\nfunction isCaipReference(value) {\n    return (0, superstruct_1.is)(value, exports.CaipReferenceStruct);\n}\nexports.isCaipReference = isCaipReference;\n/**\n * Check if the given value is a {@link CaipAccountId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipAccountId}.\n */\nfunction isCaipAccountId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountIdStruct);\n}\nexports.isCaipAccountId = isCaipAccountId;\n/**\n * Check if a value is a {@link CaipAccountAddress}.\n *\n * @param value - The value to validate.\n * @returns True if the value is a valid {@link CaipAccountAddress}.\n */\nfunction isCaipAccountAddress(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountAddressStruct);\n}\nexports.isCaipAccountAddress = isCaipAccountAddress;\n/**\n * Parse a CAIP-2 chain ID to an object containing the namespace and reference.\n * This validates the CAIP-2 chain ID before parsing it.\n *\n * @param caipChainId - The CAIP-2 chain ID to validate and parse.\n * @returns The parsed CAIP-2 chain ID.\n */\nfunction parseCaipChainId(caipChainId) {\n    const match = exports.CAIP_CHAIN_ID_REGEX.exec(caipChainId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP chain ID.');\n    }\n    return {\n        namespace: match.groups.namespace,\n        reference: match.groups.reference,\n    };\n}\nexports.parseCaipChainId = parseCaipChainId;\n/**\n * Parse an CAIP-10 account ID to an object containing the chain ID, parsed chain ID, and account address.\n * This validates the CAIP-10 account ID before parsing it.\n *\n * @param caipAccountId - The CAIP-10 account ID to validate and parse.\n * @returns The parsed CAIP-10 account ID.\n */\nfunction parseCaipAccountId(caipAccountId) {\n    const match = exports.CAIP_ACCOUNT_ID_REGEX.exec(caipAccountId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP account ID.');\n    }\n    return {\n        address: match.groups.accountAddress,\n        chainId: match.groups.chainId,\n        chain: {\n            namespace: match.groups.namespace,\n            reference: match.groups.reference,\n        },\n    };\n}\nexports.parseCaipAccountId = parseCaipAccountId;\n/**\n * Chain ID as defined per the CAIP-2\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md}.\n *\n * It defines a way to uniquely identify any blockchain in a human-readable\n * way.\n *\n * @param namespace - The standard (ecosystem) of similar blockchains.\n * @param reference - Identify of a blockchain within a given namespace.\n * @throws {@link Error}\n * This exception is thrown if the inputs does not comply with the CAIP-2\n * syntax specification\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md#syntax}.\n * @returns A CAIP chain ID.\n */\nfunction toCaipChainId(namespace, reference) {\n    if (!isCaipNamespace(namespace)) {\n        throw new Error(`Invalid \"namespace\", must match: ${exports.CAIP_NAMESPACE_REGEX.toString()}`);\n    }\n    if (!isCaipReference(reference)) {\n        throw new Error(`Invalid \"reference\", must match: ${exports.CAIP_REFERENCE_REGEX.toString()}`);\n    }\n    return `${namespace}:${reference}`;\n}\nexports.toCaipChainId = toCaipChainId;\n//# sourceMappingURL=caip-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChecksumStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst base64_1 = require(\"./base64.cjs\");\nexports.ChecksumStruct = (0, superstruct_1.size)((0, base64_1.base64)((0, superstruct_1.string)(), { paddingRequired: true }), 44, 44);\n//# sourceMappingURL=checksum.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\nconst NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1.StrictHexStruct]);\nconst NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);\nconst BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);\nconst BytesLikeStruct = (0, superstruct_1.union)([hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);\nconst BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1.StrictHexStruct]), bytes_1.hexToBytes);\nconst HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nfunction createNumber(value) {\n    try {\n        const result = (0, superstruct_1.create)(value, NumberCoercer);\n        (0, assert_1.assert)(Number.isFinite(result), `Expected a number-like value, got \"${value}\".`);\n        return result;\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${value}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createNumber = createNumber;\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nfunction createBigInt(value) {\n    try {\n        // The `BigInt` constructor throws if the value is not a number-like value.\n        // There is no need to validate the value manually.\n        return (0, superstruct_1.create)(value, BigIntCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBigInt = createBigInt;\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nfunction createBytes(value) {\n    if (typeof value === 'string' && value.toLowerCase() === '0x') {\n        return new Uint8Array();\n    }\n    try {\n        return (0, superstruct_1.create)(value, BytesCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBytes = createBytes;\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nfunction createHex(value) {\n    if ((value instanceof Uint8Array && value.length === 0) ||\n        (typeof value === 'string' && value.toLowerCase() === '0x')) {\n        return '0x';\n    }\n    try {\n        return (0, superstruct_1.create)(value, HexCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createHex = createHex;\n//# sourceMappingURL=coercers.cjs.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _FrozenMap_map, _FrozenSet_set;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FrozenSet = exports.FrozenMap = void 0;\n/**\n * A {@link ReadonlyMap} that cannot be modified after instantiation.\n * The implementation uses an inner map hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this map.\n */\nclass FrozenMap {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").size;\n    }\n    [(_FrozenMap_map = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\")[Symbol.iterator]();\n    }\n    constructor(entries) {\n        _FrozenMap_map.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner map.\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").forEach((value, key, _map) => callbackfn.call(thisArg, value, key, this));\n    }\n    get(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").get(key);\n    }\n    has(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").has(key);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").values();\n    }\n    toString() {\n        return `FrozenMap(${this.size}) {${this.size > 0\n            ? ` ${[...this.entries()]\n                .map(([key, value]) => `${String(key)} => ${String(value)}`)\n                .join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenMap = FrozenMap;\n/**\n * A {@link ReadonlySet} that cannot be modified after instantiation.\n * The implementation uses an inner set hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this set.\n */\nclass FrozenSet {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").size;\n    }\n    [(_FrozenSet_set = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\")[Symbol.iterator]();\n    }\n    constructor(values) {\n        _FrozenSet_set.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner set.\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));\n    }\n    has(value) {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").has(value);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").values();\n    }\n    toString() {\n        return `FrozenSet(${this.size}) {${this.size > 0\n            ? ` ${[...this.values()].map((member) => String(member)).join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenSet = FrozenSet;\nObject.freeze(FrozenMap);\nObject.freeze(FrozenMap.prototype);\nObject.freeze(FrozenSet);\nObject.freeze(FrozenSet.prototype);\n//# sourceMappingURL=collections.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=encryption-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapError = exports.getErrorMessage = exports.isErrorWithStack = exports.isErrorWithMessage = exports.isErrorWithCode = void 0;\nconst pony_cause_1 = require(\"pony-cause\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * Type guard for determining whether the given value is an instance of Error.\n * For errors generated via `fs.promises`, `error instanceof Error` won't work,\n * so we have to come up with another way of testing.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isError(error) {\n    return (error instanceof Error ||\n        ((0, misc_1.isObject)(error) && error.constructor.name === 'Error'));\n}\n/**\n * Type guard for determining whether the given value is an error object with a\n * `code` property such as the type of error that Node throws for filesystem\n * operations, etc.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithCode(error) {\n    return typeof error === 'object' && error !== null && 'code' in error;\n}\nexports.isErrorWithCode = isErrorWithCode;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithMessage(error) {\n    return typeof error === 'object' && error !== null && 'message' in error;\n}\nexports.isErrorWithMessage = isErrorWithMessage;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `stack` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithStack(error) {\n    return typeof error === 'object' && error !== null && 'stack' in error;\n}\nexports.isErrorWithStack = isErrorWithStack;\n/**\n * Attempts to obtain the message from a possible error object, defaulting to an\n * empty string if it is impossible to do so.\n *\n * @param error - The possible error to get the message from.\n * @returns The message if `error` is an object with a `message` property;\n * the string version of `error` if it is not `undefined` or `null`; otherwise\n * an empty string.\n */\nfunction getErrorMessage(error) {\n    if (isErrorWithMessage(error) && typeof error.message === 'string') {\n        return error.message;\n    }\n    if ((0, misc_1.isNullOrUndefined)(error)) {\n        return '';\n    }\n    return String(error);\n}\nexports.getErrorMessage = getErrorMessage;\n/**\n * Builds a new error object, linking it to the original error via the `cause`\n * property if it is an Error.\n *\n * This function is useful to reframe error messages in general, but is\n * _critical_ when interacting with any of Node's filesystem functions as\n * provided via `fs.promises`, because these do not produce stack traces in the\n * case of an I/O error (see <https://github.com/nodejs/node/issues/30944>).\n *\n * @param originalError - The error to be wrapped (something throwable).\n * @param message - The desired message of the new error.\n * @returns A new error object.\n */\nfunction wrapError(originalError, message) {\n    if (isError(originalError)) {\n        let error;\n        if (Error.length === 2) {\n            // for some reason `tsserver` is not complaining that the\n            // Error constructor doesn't support a second argument in the editor,\n            // but `tsc` does. Error causes are not supported by our current tsc target (ES2020, we need ES2022 to make this work)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new Error(message, { cause: originalError });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new pony_cause_1.ErrorWithCause(message, { cause: originalError });\n        }\n        if (isErrorWithCode(originalError)) {\n            error.code = originalError.code;\n        }\n        return error;\n    }\n    if (message.length > 0) {\n        return new Error(`${String(originalError)}: ${message}`);\n    }\n    return new Error(String(originalError));\n}\nexports.wrapError = wrapError;\n//# sourceMappingURL=errors.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.remove0x = exports.add0x = exports.isValidChecksumAddress = exports.getChecksumAddress = exports.isValidHexAddress = exports.assertIsStrictHexString = exports.assertIsHexString = exports.isStrictHexString = exports.isHexString = exports.HexChecksumAddressStruct = exports.HexAddressStruct = exports.StrictHexStruct = exports.HexStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nexports.HexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^(?:0x)?[0-9a-f]+$/iu);\nexports.StrictHexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]+$/iu);\nexports.HexAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]{40}$/u);\nexports.HexChecksumAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-fA-F]{40}$/u);\n/**\n * Check if a string is a valid hex string.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isHexString(value) {\n    return (0, superstruct_1.is)(value, exports.HexStruct);\n}\nexports.isHexString = isHexString;\n/**\n * Strictly check if a string is a valid hex string. A valid hex string must\n * start with the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isStrictHexString(value) {\n    return (0, superstruct_1.is)(value, exports.StrictHexStruct);\n}\nexports.isStrictHexString = isStrictHexString;\n/**\n * Assert that a value is a valid hex string.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsHexString(value) {\n    (0, assert_1.assert)(isHexString(value), 'Value must be a hexadecimal string.');\n}\nexports.assertIsHexString = assertIsHexString;\n/**\n * Assert that a value is a valid hex string. A valid hex string must start with\n * the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsStrictHexString(value) {\n    (0, assert_1.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with \"0x\".');\n}\nexports.assertIsStrictHexString = assertIsStrictHexString;\n/**\n * Validate that the passed prefixed hex string is an all-lowercase\n * hex address, or a valid mixed-case checksum address.\n *\n * @param possibleAddress - Input parameter to check against.\n * @returns Whether or not the input is a valid hex address.\n */\nfunction isValidHexAddress(possibleAddress) {\n    return ((0, superstruct_1.is)(possibleAddress, exports.HexAddressStruct) ||\n        isValidChecksumAddress(possibleAddress));\n}\nexports.isValidHexAddress = isValidHexAddress;\n/**\n * Encode a passed hex string as an ERC-55 mixed-case checksum address.\n *\n * @param address - The hex address to encode.\n * @returns The address encoded according to ERC-55.\n * @see https://eips.ethereum.org/EIPS/eip-55\n */\nfunction getChecksumAddress(address) {\n    (0, assert_1.assert)((0, superstruct_1.is)(address, exports.HexChecksumAddressStruct), 'Invalid hex address.');\n    const unPrefixed = remove0x(address.toLowerCase());\n    const unPrefixedHash = remove0x((0, bytes_1.bytesToHex)((0, sha3_1.keccak_256)(unPrefixed)));\n    return `0x${unPrefixed\n        .split('')\n        .map((character, nibbleIndex) => {\n        const hashCharacter = unPrefixedHash[nibbleIndex];\n        (0, assert_1.assert)((0, superstruct_1.is)(hashCharacter, (0, superstruct_1.string)()), 'Hash shorter than address.');\n        return parseInt(hashCharacter, 16) > 7\n            ? character.toUpperCase()\n            : character;\n    })\n        .join('')}`;\n}\nexports.getChecksumAddress = getChecksumAddress;\n/**\n * Validate that the passed hex string is a valid ERC-55 mixed-case\n * checksum address.\n *\n * @param possibleChecksum - The hex address to check.\n * @returns True if the address is a checksum address.\n */\nfunction isValidChecksumAddress(possibleChecksum) {\n    if (!(0, superstruct_1.is)(possibleChecksum, exports.HexChecksumAddressStruct)) {\n        return false;\n    }\n    return getChecksumAddress(possibleChecksum) === possibleChecksum;\n}\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Add the `0x`-prefix to a hexadecimal string. If the string already has the\n * prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to add the prefix to.\n * @returns The prefixed hexadecimal string.\n */\nfunction add0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x')) {\n        return hexadecimal;\n    }\n    if (hexadecimal.startsWith('0X')) {\n        return `0x${hexadecimal.substring(2)}`;\n    }\n    return `0x${hexadecimal}`;\n}\nexports.add0x = add0x;\n/**\n * Remove the `0x`-prefix from a hexadecimal string. If the string doesn't have\n * the prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to remove the prefix from.\n * @returns The un-prefixed hexadecimal string.\n */\nfunction remove0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x') || hexadecimal.startsWith('0X')) {\n        return hexadecimal.substring(2);\n    }\n    return hexadecimal;\n}\nexports.remove0x = remove0x;\n//# sourceMappingURL=hex.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./assert.cjs\"), exports);\n__exportStar(require(\"./base64.cjs\"), exports);\n__exportStar(require(\"./bytes.cjs\"), exports);\n__exportStar(require(\"./caip-types.cjs\"), exports);\n__exportStar(require(\"./checksum.cjs\"), exports);\n__exportStar(require(\"./coercers.cjs\"), exports);\n__exportStar(require(\"./collections.cjs\"), exports);\n__exportStar(require(\"./encryption-types.cjs\"), exports);\n__exportStar(require(\"./errors.cjs\"), exports);\n__exportStar(require(\"./hex.cjs\"), exports);\n__exportStar(require(\"./json.cjs\"), exports);\n__exportStar(require(\"./keyring.cjs\"), exports);\n__exportStar(require(\"./logging.cjs\"), exports);\n__exportStar(require(\"./misc.cjs\"), exports);\n__exportStar(require(\"./number.cjs\"), exports);\n__exportStar(require(\"./opaque.cjs\"), exports);\n__exportStar(require(\"./promise.cjs\"), exports);\n__exportStar(require(\"./time.cjs\"), exports);\n__exportStar(require(\"./transaction-types.cjs\"), exports);\n__exportStar(require(\"./versions.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.getJsonSize = exports.getSafeJson = exports.isValidJson = exports.JsonStruct = exports.UnsafeJsonStruct = exports.exactOptional = exports.object = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * A struct to check if the given value is a valid object, with support for\n * {@link exactOptional} types.\n *\n * @param schema - The schema of the object.\n * @returns A struct to check if the given value is an object.\n */\nconst object = (schema) => \n// The type is slightly different from a regular object struct, because we\n// want to make properties with `undefined` in their type optional, but not\n// `undefined` itself. This means that we need a type cast.\n(0, superstruct_1.object)(schema);\nexports.object = object;\n/**\n * Check the last field of a path is present.\n *\n * @param context - The context to check.\n * @param context.path - The path to check.\n * @param context.branch - The branch to check.\n * @returns Whether the last field of a path is present.\n */\nfunction hasOptional({ path, branch }) {\n    const field = path[path.length - 1];\n    return (0, misc_1.hasProperty)(branch[branch.length - 2], field);\n}\n/**\n * A struct which allows the property of an object to be absent, or to be present\n * as long as it's valid and not set to `undefined`.\n *\n * This struct should be used in conjunction with the {@link object} from this\n * library, to get proper type inference.\n *\n * @param struct - The struct to check the value against, if present.\n * @returns A struct to check if the given value is valid, or not present.\n * @example\n * ```ts\n * const struct = object({\n *   foo: exactOptional(string()),\n *   bar: exactOptional(number()),\n *   baz: optional(boolean()),\n *   qux: unknown(),\n * });\n *\n * type Type = Infer<typeof struct>;\n * // Type is equivalent to:\n * // {\n * //   foo?: string;\n * //   bar?: number;\n * //   baz?: boolean | undefined;\n * //   qux: unknown;\n * // }\n * ```\n */\nfunction exactOptional(struct) {\n    return new superstruct_1.Struct({\n        ...struct,\n        type: `optional ${struct.type}`,\n        validator: (value, context) => !hasOptional(context) || struct.validator(value, context),\n        refiner: (value, context) => !hasOptional(context) || struct.refiner(value, context),\n    });\n}\nexports.exactOptional = exactOptional;\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () => (0, superstruct_1.define)('finite number', (value) => {\n    return (0, superstruct_1.is)(value, (0, superstruct_1.number)()) && Number.isFinite(value);\n});\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexports.UnsafeJsonStruct = (0, superstruct_1.union)([\n    (0, superstruct_1.literal)(null),\n    (0, superstruct_1.boolean)(),\n    finiteNumber(),\n    (0, superstruct_1.string)(),\n    (0, superstruct_1.array)((0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n    (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n]);\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexports.JsonStruct = (0, superstruct_1.coerce)(exports.UnsafeJsonStruct, (0, superstruct_1.any)(), (value) => {\n    (0, assert_1.assertStruct)(value, exports.UnsafeJsonStruct);\n    return JSON.parse(JSON.stringify(value, (propKey, propValue) => {\n        // Strip __proto__ and constructor properties to prevent prototype pollution.\n        if (propKey === '__proto__' || propKey === 'constructor') {\n            return undefined;\n        }\n        return propValue;\n    }));\n});\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nfunction isValidJson(value) {\n    try {\n        getSafeJson(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexports.isValidJson = isValidJson;\n/**\n * Validate and return sanitized JSON.\n *\n * Note:\n * This function uses sanitized JsonStruct for validation\n * that applies stringify and then parse of a value provided\n * to ensure that there are no getters which can have side effects\n * that can cause security issues.\n *\n * @param value - JSON structure to be processed.\n * @returns Sanitized JSON structure.\n */\nfunction getSafeJson(value) {\n    return (0, superstruct_1.create)(value, exports.JsonStruct);\n}\nexports.getSafeJson = getSafeJson;\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nfunction getJsonSize(value) {\n    (0, assert_1.assertStruct)(value, exports.JsonStruct, 'Invalid JSON value');\n    const json = JSON.stringify(value);\n    return new TextEncoder().encode(json).byteLength;\n}\nexports.getJsonSize = getJsonSize;\n/**\n * The string '2.0'.\n */\nexports.jsonrpc2 = '2.0';\nexports.JsonRpcVersionStruct = (0, superstruct_1.literal)(exports.jsonrpc2);\nexports.JsonRpcIdStruct = (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.string)()]));\nexports.JsonRpcErrorStruct = (0, exports.object)({\n    code: (0, superstruct_1.integer)(),\n    message: (0, superstruct_1.string)(),\n    data: exactOptional(exports.JsonStruct),\n    stack: exactOptional((0, superstruct_1.string)()),\n});\nexports.JsonRpcParamsStruct = (0, superstruct_1.union)([(0, superstruct_1.record)((0, superstruct_1.string)(), exports.JsonStruct), (0, superstruct_1.array)(exports.JsonStruct)]);\nexports.JsonRpcRequestStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\nexports.JsonRpcNotificationStruct = (0, exports.object)({\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nfunction isJsonRpcNotification(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcNotificationStruct);\n}\nexports.isJsonRpcNotification = isJsonRpcNotification;\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nfunction assertIsJsonRpcNotification(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcNotificationStruct, 'Invalid JSON-RPC notification', ErrorWrapper);\n}\nexports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nfunction isJsonRpcRequest(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcRequestStruct);\n}\nexports.isJsonRpcRequest = isJsonRpcRequest;\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nfunction assertIsJsonRpcRequest(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcRequestStruct, 'Invalid JSON-RPC request', ErrorWrapper);\n}\nexports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;\nexports.PendingJsonRpcResponseStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: (0, superstruct_1.optional)((0, superstruct_1.unknown)()),\n    error: (0, superstruct_1.optional)(exports.JsonRpcErrorStruct),\n});\nexports.JsonRpcSuccessStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: exports.JsonStruct,\n});\nexports.JsonRpcFailureStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    error: exports.JsonRpcErrorStruct,\n});\nexports.JsonRpcResponseStruct = (0, superstruct_1.union)([\n    exports.JsonRpcSuccessStruct,\n    exports.JsonRpcFailureStruct,\n]);\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nfunction isPendingJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.PendingJsonRpcResponseStruct);\n}\nexports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nfunction assertIsPendingJsonRpcResponse(response, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(response, exports.PendingJsonRpcResponseStruct, 'Invalid pending JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nfunction isJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.JsonRpcResponseStruct);\n}\nexports.isJsonRpcResponse = isJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nfunction assertIsJsonRpcResponse(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcResponseStruct, 'Invalid JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nfunction isJsonRpcSuccess(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcSuccessStruct);\n}\nexports.isJsonRpcSuccess = isJsonRpcSuccess;\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nfunction assertIsJsonRpcSuccess(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcSuccessStruct, 'Invalid JSON-RPC success response', ErrorWrapper);\n}\nexports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nfunction isJsonRpcFailure(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcFailureStruct);\n}\nexports.isJsonRpcFailure = isJsonRpcFailure;\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nfunction assertIsJsonRpcFailure(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcFailureStruct, 'Invalid JSON-RPC failure response', ErrorWrapper);\n}\nexports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nfunction isJsonRpcError(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcErrorStruct);\n}\nexports.isJsonRpcError = isJsonRpcError;\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nfunction assertIsJsonRpcError(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcErrorStruct, 'Invalid JSON-RPC error', ErrorWrapper);\n}\nexports.assertIsJsonRpcError = assertIsJsonRpcError;\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nfunction getJsonRpcIdValidator(options) {\n    const { permitEmptyString, permitFractions, permitNull } = {\n        permitEmptyString: true,\n        permitFractions: false,\n        permitNull: true,\n        ...options,\n    };\n    /**\n     * Type guard for {@link JsonRpcId}.\n     *\n     * @param id - The JSON-RPC ID value to check.\n     * @returns Whether the given ID is valid per the options given to the\n     * factory.\n     */\n    const isValidJsonRpcId = (id) => {\n        return Boolean((typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n            (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n            (permitNull && id === null));\n    };\n    return isValidJsonRpcId;\n}\nexports.getJsonRpcIdValidator = getJsonRpcIdValidator;\n//# sourceMappingURL=json.cjs.map","import { cloneDeep } from 'lodash';\n\nconst version = 72;\n\n/**\n * Should empty the `knownMethodData` object in PreferencesController\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const PreferencesController = state?.PreferencesController || {};\n\n  return {\n    ...state,\n    PreferencesController: {\n      ...PreferencesController,\n      knownMethodData: {},\n    },\n  };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=keyring.cjs.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createModuleLogger = exports.createProjectLogger = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst globalLogger = (0, debug_1.default)('metamask');\n/**\n * Creates a logger via the `debug` library whose log messages will be tagged\n * using the name of your project. By default, such messages will be\n * suppressed, but you can reveal them by setting the `DEBUG` environment\n * variable to `metamask:<projectName>`. You can also set this variable to\n * `metamask:*` if you want to see log messages from all MetaMask projects that\n * are also using this function to create their loggers.\n *\n * @param projectName - The name of your project. This should be the name of\n * your NPM package if you're developing one.\n * @returns An instance of `debug`.\n */\nfunction createProjectLogger(projectName) {\n    return globalLogger.extend(projectName);\n}\nexports.createProjectLogger = createProjectLogger;\n/**\n * Creates a logger via the `debug` library which is derived from the logger for\n * the whole project whose log messages will be tagged using the name of your\n * module. By default, such messages will be suppressed, but you can reveal them\n * by setting the `DEBUG` environment variable to\n * `metamask:<projectName>:<moduleName>`. You can also set this variable to\n * `metamask:<projectName>:*` if you want to see log messages from the project,\n * or `metamask:*` if you want to see log messages from all MetaMask projects.\n *\n * @param projectLogger - The logger created via {@link createProjectLogger}.\n * @param moduleName - The name of your module. You could use the name of the\n * file where you're using this logger or some other name.\n * @returns An instance of `debug`.\n */\nfunction createModuleLogger(projectLogger, moduleName) {\n    return projectLogger.extend(moduleName);\n}\nexports.createModuleLogger = createModuleLogger;\n//# sourceMappingURL=logging.cjs.map","\"use strict\";\n//\n// Types\n//\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.getKnownPropertyNames = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;\n//\n// Type Guards\n//\n/**\n * A {@link NonEmptyArray} type guard.\n *\n * @template Element - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Type guard for \"nullishness\".\n *\n * @param value - Any value.\n * @returns `true` if the value is null or undefined, `false` otherwise.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nfunction isObject(value) {\n    return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\nexports.isObject = isObject;\n//\n// Other utility functions\n//\n/**\n * A type guard for ensuring an object has a property.\n *\n * @param objectToCheck - The object to check.\n * @param name - The property name to check for.\n * @returns Whether the specified object has an own property with the specified\n * name, regardless of whether it is enumerable or not.\n */\nconst hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);\nexports.hasProperty = hasProperty;\n/**\n * `Object.getOwnPropertyNames()` is intentionally generic: it returns the\n * immediate property names of an object, but it cannot make guarantees about\n * the contents of that object, so the type of the property names is merely\n * `string[]`. While this is technically accurate, it is also unnecessary if we\n * have an object with a type that we own (such as an enum).\n *\n * @param object - The plain object.\n * @returns The own property names of the object which are assigned a type\n * derived from the object itself.\n */\nfunction getKnownPropertyNames(object) {\n    return Object.getOwnPropertyNames(object);\n}\nexports.getKnownPropertyNames = getKnownPropertyNames;\n/**\n * Predefined sizes (in Bytes) of specific parts of JSON structure.\n */\nvar JsonSize;\n(function (JsonSize) {\n    JsonSize[JsonSize[\"Null\"] = 4] = \"Null\";\n    JsonSize[JsonSize[\"Comma\"] = 1] = \"Comma\";\n    JsonSize[JsonSize[\"Wrapper\"] = 1] = \"Wrapper\";\n    JsonSize[JsonSize[\"True\"] = 4] = \"True\";\n    JsonSize[JsonSize[\"False\"] = 5] = \"False\";\n    JsonSize[JsonSize[\"Quote\"] = 1] = \"Quote\";\n    JsonSize[JsonSize[\"Colon\"] = 1] = \"Colon\";\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    JsonSize[JsonSize[\"Date\"] = 24] = \"Date\";\n})(JsonSize = exports.JsonSize || (exports.JsonSize = {}));\n/**\n * Regular expression with pattern matching for (special) escaped characters.\n */\nexports.ESCAPE_CHARACTERS_REGEXP = /\"|\\\\|\\n|\\r|\\t/gu;\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nfunction isPlainObject(value) {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n    try {\n        let proto = value;\n        while (Object.getPrototypeOf(proto) !== null) {\n            proto = Object.getPrototypeOf(proto);\n        }\n        return Object.getPrototypeOf(value) === proto;\n    }\n    catch (_) {\n        return false;\n    }\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Check if character is ASCII.\n *\n * @param character - Character.\n * @returns True if a character code is ASCII, false if not.\n */\nfunction isASCII(character) {\n    return character.charCodeAt(0) <= 127;\n}\nexports.isASCII = isASCII;\n/**\n * Calculate string size.\n *\n * @param value - String value to calculate size.\n * @returns Number of bytes used to store whole string value.\n */\nfunction calculateStringSize(value) {\n    const size = value.split('').reduce((total, character) => {\n        if (isASCII(character)) {\n            return total + 1;\n        }\n        return total + 2;\n    }, 0);\n    // Also detect characters that need backslash escape\n    return size + (value.match(exports.ESCAPE_CHARACTERS_REGEXP) ?? []).length;\n}\nexports.calculateStringSize = calculateStringSize;\n/**\n * Calculate size of a number ofter JSON serialization.\n *\n * @param value - Number value to calculate size.\n * @returns Number of bytes used to store whole number in JSON.\n */\nfunction calculateNumberSize(value) {\n    return value.toString().length;\n}\nexports.calculateNumberSize = calculateNumberSize;\n//# sourceMappingURL=misc.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexToBigInt = exports.hexToNumber = exports.bigIntToHex = exports.numberToHex = void 0;\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n/**\n * Convert a number to a hexadecimal string. This verifies that the number is a\n * non-negative safe integer.\n *\n * To convert a `bigint` to a hexadecimal string instead, use\n * {@link bigIntToHex}.\n *\n * @example\n * ```typescript\n * numberToHex(0); // '0x0'\n * numberToHex(1); // '0x1'\n * numberToHex(16); // '0x10'\n * ```\n * @param value - The number to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the number is not a non-negative safe integer.\n */\nconst numberToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToHex` instead.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.numberToHex = numberToHex;\n/**\n * Convert a `bigint` to a hexadecimal string. This verifies that the `bigint`\n * is a non-negative integer.\n *\n * To convert a number to a hexadecimal string instead, use {@link numberToHex}.\n *\n * @example\n * ```typescript\n * bigIntToHex(0n); // '0x0'\n * bigIntToHex(1n); // '0x1'\n * bigIntToHex(16n); // '0x10'\n * ```\n * @param value - The `bigint` to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the `bigint` is not a non-negative integer.\n */\nconst bigIntToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative bigint.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert a hexadecimal string to a number. This verifies that the string is a\n * valid hex string, and that the resulting number is a safe integer. Both\n * \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a `bigint` instead, use\n * {@link hexToBigInt}.\n *\n * @example\n * ```typescript\n * hexToNumber('0x0'); // 0\n * hexToNumber('0x1'); // 1\n * hexToNumber('0x10'); // 16\n * ```\n * @param value - The hexadecimal string to convert to a number.\n * @returns The number.\n * @throws If the value is not a valid hexadecimal string, or if the resulting\n * number is not a safe integer.\n */\nconst hexToNumber = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // `parseInt` accepts values without the \"0x\"-prefix, whereas `Number` does\n    // not. Using this is slightly faster than `Number(add0x(value))`.\n    const numberValue = parseInt(value, 16);\n    (0, assert_1.assert)(Number.isSafeInteger(numberValue), 'Value is not a safe integer. Use `hexToBigInt` instead.');\n    return numberValue;\n};\nexports.hexToNumber = hexToNumber;\n/**\n * Convert a hexadecimal string to a `bigint`. This verifies that the string is\n * a valid hex string. Both \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a number instead, use {@link hexToNumber}.\n *\n * @example\n * ```typescript\n * hexToBigInt('0x0'); // 0n\n * hexToBigInt('0x1'); // 1n\n * hexToBigInt('0x10'); // 16n\n * ```\n * @param value - The hexadecimal string to convert to a `bigint`.\n * @returns The `bigint`.\n * @throws If the value is not a valid hexadecimal string.\n */\nconst hexToBigInt = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // The `BigInt` constructor requires the \"0x\"-prefix to parse a hex string.\n    return BigInt((0, hex_1.add0x)(value));\n};\nexports.hexToBigInt = hexToBigInt;\n//# sourceMappingURL=number.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=opaque.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDeferredPromise = void 0;\n/**\n * Create a defered Promise.\n *\n * If the Promise is rejected prior to a handler being added, this can result in an\n * `UnhandledPromiseRejection` error. Optionally this can be suppressed with the\n * `suppressUnhandledRejection` flag, as it's common to belatedly handle deferred Promises, or to\n * ignore them if they're no longer relevant (e.g. related to a cancelled request).\n *\n * However, be very careful that you have handled the Promise if you do this. Suppressing these\n * errors is dangerous, they exist for good reason. An unhandled rejection can hide errors, making\n * debugging extremely difficult. They should only be suppressed if you're confident that the\n * Promise is always handled correctly, in both the success and failure cases.\n *\n * @param args - The arguments.\n * @param args.suppressUnhandledRejection - This option adds an empty error handler\n * to the Promise to suppress the UnhandledPromiseRejection error. This can be\n * useful if the deferred Promise is sometimes intentionally not used.\n * @returns A deferred Promise.\n * @template Result - The result type of the Promise.\n */\nfunction createDeferredPromise({ suppressUnhandledRejection = false, } = {}) {\n    let resolve;\n    let reject;\n    const promise = new Promise((innerResolve, innerReject) => {\n        resolve = innerResolve;\n        reject = innerReject;\n    });\n    if (suppressUnhandledRejection) {\n        promise.catch((_error) => {\n            // This handler is used to suppress the UnhandledPromiseRejection error\n        });\n    }\n    // @ts-expect-error We know that these are assigned, but TypeScript doesn't\n    return { promise, resolve, reject };\n}\nexports.createDeferredPromise = createDeferredPromise;\n//# sourceMappingURL=promise.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */\nvar Duration;\n(function (Duration) {\n    /**\n     * A millisecond.\n     */\n    Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n    /**\n     * A second, in milliseconds.\n     */\n    Duration[Duration[\"Second\"] = 1000] = \"Second\";\n    /**\n     * A minute, in milliseconds.\n     */\n    Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n    /**\n     * An hour, in milliseconds.\n     */\n    Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n    /**\n     * A day, in milliseconds.\n     */\n    Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n    /**\n     * A week, in milliseconds.\n     */\n    Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n    /**\n     * A year, in milliseconds.\n     */\n    Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = (number) => Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name) => {\n    if (!isNonNegativeInteger(number)) {\n        throw new Error(`\"${name}\" must be a non-negative integer. Received: \"${number}\".`);\n    }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nfunction inMilliseconds(count, duration) {\n    assertIsNonNegativeInteger(count, 'count');\n    return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n    assertIsNonNegativeInteger(timestamp, 'timestamp');\n    return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;\n//# sourceMappingURL=time.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=transaction-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst semver_1 = require(\"semver\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * A struct for validating a version string.\n */\nexports.VersionStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version', (value) => {\n    if ((0, semver_1.valid)(value) === null) {\n        return `Expected SemVer version, got \"${value}\"`;\n    }\n    return true;\n});\nexports.VersionRangeStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version range', (value) => {\n    if ((0, semver_1.validRange)(value) === null) {\n        return `Expected SemVer range, got \"${value}\"`;\n    }\n    return true;\n});\n/**\n * Checks whether a SemVer version is valid.\n *\n * @param version - A potential version.\n * @returns `true` if the version is valid, and `false` otherwise.\n */\nfunction isValidSemVerVersion(version) {\n    return (0, superstruct_1.is)(version, exports.VersionStruct);\n}\nexports.isValidSemVerVersion = isValidSemVerVersion;\n/**\n * Checks whether a SemVer version range is valid.\n *\n * @param versionRange - A potential version range.\n * @returns `true` if the version range is valid, and `false` otherwise.\n */\nfunction isValidSemVerRange(versionRange) {\n    return (0, superstruct_1.is)(versionRange, exports.VersionRangeStruct);\n}\nexports.isValidSemVerRange = isValidSemVerRange;\n/**\n * Asserts that a value is a valid concrete SemVer version.\n *\n * @param version - A potential SemVer concrete version.\n */\nfunction assertIsSemVerVersion(version) {\n    (0, assert_1.assertStruct)(version, exports.VersionStruct);\n}\nexports.assertIsSemVerVersion = assertIsSemVerVersion;\n/**\n * Asserts that a value is a valid SemVer range.\n *\n * @param range - A potential SemVer range.\n */\nfunction assertIsSemVerRange(range) {\n    (0, assert_1.assertStruct)(range, exports.VersionRangeStruct);\n}\nexports.assertIsSemVerRange = assertIsSemVerRange;\n/**\n * Checks whether a SemVer version is greater than another.\n *\n * @param version1 - The left-hand version.\n * @param version2 - The right-hand version.\n * @returns `version1 > version2`.\n */\nfunction gtVersion(version1, version2) {\n    return (0, semver_1.gt)(version1, version2);\n}\nexports.gtVersion = gtVersion;\n/**\n * Checks whether a SemVer version is greater than all possibilities in a range.\n *\n * @param version - A SemvVer version.\n * @param range - The range to check against.\n * @returns `version > range`.\n */\nfunction gtRange(version, range) {\n    return (0, semver_1.gtr)(version, range);\n}\nexports.gtRange = gtRange;\n/**\n * Returns whether a SemVer version satisfies a SemVer range.\n *\n * @param version - The SemVer version to check.\n * @param versionRange - The SemVer version range to check against.\n * @returns Whether the version satisfied the version range.\n */\nfunction satisfiesVersionRange(version, versionRange) {\n    return (0, semver_1.satisfies)(version, versionRange, {\n        includePrerelease: true,\n    });\n}\nexports.satisfiesVersionRange = satisfiesVersionRange;\n//# sourceMappingURL=versions.cjs.map","import { cloneDeep } from 'lodash';\n\nconst version = 73;\n\n/**\n * Should empty the `knownMethodData` object in PreferencesController\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const PreferencesController = state?.PreferencesController || {};\n\n  return {\n    ...state,\n    PreferencesController: {\n      ...PreferencesController,\n      knownMethodData: {},\n    },\n  };\n}\n","import { cloneDeep, uniq } from 'lodash';\nimport BigNumber from 'bignumber.js';\nimport { getRpcUrl } from '../../../shared/constants/network';\n\nconst version = 74;\n\nconst hexNumberIsGreaterThanZero = (hexNumber) =>\n  new BigNumber(hexNumber || '0x0', 16).gt(0);\n\nconst DEPRECATED_TEST_NET_CHAINIDS = ['0x3', '0x2a', '0x4'];\nconst DEPRECATED_TEST_NET_DETAILS = {\n  '0x3': {\n    rpcUrl: getRpcUrl({ network: 'ropsten' }),\n    nickname: 'Ropsten',\n    ticker: 'RopstenETH',\n  },\n  '0x2a': {\n    rpcUrl: getRpcUrl({ network: 'kovan' }),\n    nickname: 'Kovan',\n    ticker: 'KovanETH',\n  },\n  '0x4': {\n    rpcUrl: getRpcUrl({ network: 'rinkeby' }),\n    nickname: 'Rinkeby',\n    ticker: 'RinkebyETH',\n  },\n};\n\n/**\n * Migrates the user default but deprecated testnet networks to custom networks, and\n * if the current network is one such network, updates the network provider details so that it\n * will work as a custom rpc\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const PreferencesController = state?.PreferencesController || {};\n  const preferences = PreferencesController.preferences || {};\n  const NetworkController = state?.NetworkController || {};\n  const provider = NetworkController?.provider || {};\n\n  const currentlyOnDeprecatedNetwork = DEPRECATED_TEST_NET_CHAINIDS.filter(\n    (chainId) => chainId === provider?.chainId,\n  );\n\n  // If the user does not want to see test networks, and if the user is not on a deprecated test network, then\n  // no need to migrate the test network data to a custom network\n  if (\n    !preferences.showTestNetworks &&\n    currentlyOnDeprecatedNetwork.length === 0\n  ) {\n    return state;\n  }\n\n  const transactions = state?.TransactionController?.transactions || {};\n  const cachedBalances = state.CachedBalancesController?.cachedBalances || {};\n\n  const deprecatedTestnetsOnWhichTheUserHasMadeATransaction = Object.values(\n    transactions,\n  )\n    .filter(({ chainId }) => DEPRECATED_TEST_NET_CHAINIDS.includes(chainId))\n    .map(({ chainId }) => chainId);\n  const deprecatedTestnetsOnWhichTheUserHasCachedBalance =\n    DEPRECATED_TEST_NET_CHAINIDS.filter((chainId) => {\n      const cachedBalancesForChain = Object.values(\n        cachedBalances[chainId] || {},\n      );\n      const userHasABalanceGreaterThanZeroOnThisChain =\n        cachedBalancesForChain.some(hexNumberIsGreaterThanZero);\n      return userHasABalanceGreaterThanZeroOnThisChain;\n    });\n  const deprecatedTestnetsThatHaveBeenUsed = uniq([\n    ...deprecatedTestnetsOnWhichTheUserHasCachedBalance,\n    ...deprecatedTestnetsOnWhichTheUserHasMadeATransaction,\n    ...currentlyOnDeprecatedNetwork,\n  ]);\n\n  const newFrequentRpcListDetail =\n    PreferencesController.frequentRpcListDetail ?? [];\n\n  deprecatedTestnetsThatHaveBeenUsed.forEach((chainId) => {\n    if (\n      !newFrequentRpcListDetail.find(\n        (rpcDetails) => rpcDetails.chainId === chainId,\n      )\n    ) {\n      newFrequentRpcListDetail.unshift({\n        rpcUrl: DEPRECATED_TEST_NET_DETAILS[chainId].rpcUrl,\n        chainId,\n        ticker: DEPRECATED_TEST_NET_DETAILS[chainId].ticker,\n        nickname: DEPRECATED_TEST_NET_DETAILS[chainId].nickname,\n        rpcPrefs: {},\n      });\n    }\n  });\n\n  if (newFrequentRpcListDetail.length) {\n    PreferencesController.frequentRpcListDetail = newFrequentRpcListDetail;\n  }\n\n  if (currentlyOnDeprecatedNetwork.length) {\n    const selectedNetworkChainId = currentlyOnDeprecatedNetwork[0];\n    NetworkController.provider = {\n      ...NetworkController.provider,\n      type: 'rpc',\n      rpcUrl: DEPRECATED_TEST_NET_DETAILS[selectedNetworkChainId].rpcUrl,\n      chainId: selectedNetworkChainId,\n      nickname: DEPRECATED_TEST_NET_DETAILS[selectedNetworkChainId].nickname,\n      ticker: DEPRECATED_TEST_NET_DETAILS[selectedNetworkChainId].ticker,\n    };\n  }\n\n  return {\n    ...state,\n    PreferencesController: {\n      ...PreferencesController,\n    },\n    NetworkController: {\n      ...NetworkController,\n    },\n  };\n}\n","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SelectedNetworkController_instances, _SelectedNetworkController_domainProxyMap, _SelectedNetworkController_useRequestQueuePreference, _SelectedNetworkController_registerMessageHandlers, _SelectedNetworkController_setNetworkClientIdForDomain, _SelectedNetworkController_unsetNetworkClientIdForDomain, _SelectedNetworkController_domainHasPermissions, _SelectedNetworkController_resetAllPermissionedDomains;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SelectedNetworkController = exports.SelectedNetworkControllerEventTypes = exports.SelectedNetworkControllerActionTypes = exports.METAMASK_DOMAIN = exports.controllerName = void 0;\nconst base_controller_1 = require(\"@metamask/base-controller\");\nconst swappable_obj_proxy_1 = require(\"@metamask/swappable-obj-proxy\");\nexports.controllerName = 'SelectedNetworkController';\nconst stateMetadata = {\n    domains: { persist: true, anonymous: false },\n};\nconst getDefaultState = () => ({ domains: {} });\n// npm and local are currently the only valid prefixes for snap domains\n// TODO: eventually we maybe want to pull this in from snaps-utils to ensure it stays in sync\n// For now it seems like overkill to add a dependency for this one constant\n// https://github.com/MetaMask/snaps/blob/2beee7803bfe9e540788a3558b546b9f55dc3cb4/packages/snaps-utils/src/types.ts#L120\nconst snapsPrefixes = ['npm:', 'local:'];\nexports.METAMASK_DOMAIN = 'metamask';\nexports.SelectedNetworkControllerActionTypes = {\n    getState: `${exports.controllerName}:getState`,\n    getNetworkClientIdForDomain: `${exports.controllerName}:getNetworkClientIdForDomain`,\n    setNetworkClientIdForDomain: `${exports.controllerName}:setNetworkClientIdForDomain`,\n};\nexports.SelectedNetworkControllerEventTypes = {\n    stateChange: `${exports.controllerName}:stateChange`,\n};\n/**\n * Controller for getting and setting the network for a particular domain.\n */\nclass SelectedNetworkController extends base_controller_1.BaseController {\n    /**\n     * Construct a SelectedNetworkController controller.\n     *\n     * @param options - The controller options.\n     * @param options.messenger - The restricted controller messenger for the EncryptionPublicKey controller.\n     * @param options.state - The controllers initial state.\n     * @param options.useRequestQueuePreference - A boolean indicating whether to use the request queue preference.\n     * @param options.onPreferencesStateChange - A callback that is called when the preference state changes.\n     * @param options.domainProxyMap - A map for storing domain-specific proxies that are held in memory only during use.\n     */\n    constructor({ messenger, state = getDefaultState(), useRequestQueuePreference, onPreferencesStateChange, domainProxyMap, }) {\n        super({\n            name: exports.controllerName,\n            metadata: stateMetadata,\n            messenger,\n            state,\n        });\n        _SelectedNetworkController_instances.add(this);\n        _SelectedNetworkController_domainProxyMap.set(this, void 0);\n        _SelectedNetworkController_useRequestQueuePreference.set(this, void 0);\n        __classPrivateFieldSet(this, _SelectedNetworkController_useRequestQueuePreference, useRequestQueuePreference, \"f\");\n        __classPrivateFieldSet(this, _SelectedNetworkController_domainProxyMap, domainProxyMap, \"f\");\n        __classPrivateFieldGet(this, _SelectedNetworkController_instances, \"m\", _SelectedNetworkController_registerMessageHandlers).call(this);\n        // this is fetching all the dapp permissions from the PermissionsController and looking for any domains that are not in domains state in this controller. Then we take any missing domains and add them to state here, setting it with the globally selected networkClientId (fetched from the NetworkController)\n        this.messagingSystem\n            .call('PermissionController:getSubjectNames')\n            .filter((domain) => this.state.domains[domain] === undefined)\n            .forEach((domain) => this.setNetworkClientIdForDomain(domain, this.messagingSystem.call('NetworkController:getState')\n            .selectedNetworkClientId));\n        this.messagingSystem.subscribe('PermissionController:stateChange', (_, patches) => {\n            patches.forEach(({ op, path }) => {\n                const isChangingSubject = path[0] === 'subjects' && path[1] !== undefined;\n                if (isChangingSubject && typeof path[1] === 'string') {\n                    const domain = path[1];\n                    if (op === 'add' && this.state.domains[domain] === undefined) {\n                        this.setNetworkClientIdForDomain(domain, this.messagingSystem.call('NetworkController:getState')\n                            .selectedNetworkClientId);\n                    }\n                    else if (op === 'remove' &&\n                        this.state.domains[domain] !== undefined) {\n                        __classPrivateFieldGet(this, _SelectedNetworkController_instances, \"m\", _SelectedNetworkController_unsetNetworkClientIdForDomain).call(this, domain);\n                    }\n                }\n            });\n        });\n        this.messagingSystem.subscribe('NetworkController:stateChange', ({ selectedNetworkClientId, networkConfigurationsByChainId }, patches) => {\n            const patch = patches.find(({ op, path }) => (op === 'replace' || op === 'remove') &&\n                path[0] === 'networkConfigurationsByChainId');\n            if (patch) {\n                const networkClientIdToChainId = Object.values(networkConfigurationsByChainId).reduce((acc, network) => {\n                    network.rpcEndpoints.forEach(({ networkClientId }) => (acc[networkClientId] = network.chainId));\n                    return acc;\n                }, {});\n                Object.entries(this.state.domains).forEach(([domain, networkClientIdForDomain]) => {\n                    const chainIdForDomain = networkClientIdToChainId[networkClientIdForDomain];\n                    if (patch.op === 'remove' && !chainIdForDomain) {\n                        // If the network was removed, fall back to the globally selected network\n                        this.setNetworkClientIdForDomain(domain, selectedNetworkClientId);\n                    }\n                    else if (patch.op === 'replace') {\n                        // If the network was updated, redirect to the network's default endpoint\n                        const updatedChainId = patch.path[1];\n                        if (!chainIdForDomain || chainIdForDomain === updatedChainId) {\n                            const network = networkConfigurationsByChainId[updatedChainId];\n                            const { networkClientId: defaultNetworkClientId } = network.rpcEndpoints[network.defaultRpcEndpointIndex];\n                            if (networkClientIdForDomain !== defaultNetworkClientId) {\n                                this.setNetworkClientIdForDomain(domain, defaultNetworkClientId);\n                            }\n                        }\n                    }\n                });\n            }\n        });\n        onPreferencesStateChange(({ useRequestQueue }) => {\n            if (__classPrivateFieldGet(this, _SelectedNetworkController_useRequestQueuePreference, \"f\") !== useRequestQueue) {\n                if (!useRequestQueue) {\n                    // Loop through all domains and points each domain's proxy\n                    // to the NetworkController's own proxy of the globally selected networkClient\n                    Object.keys(this.state.domains).forEach((domain) => {\n                        __classPrivateFieldGet(this, _SelectedNetworkController_instances, \"m\", _SelectedNetworkController_unsetNetworkClientIdForDomain).call(this, domain);\n                    });\n                }\n                else {\n                    __classPrivateFieldGet(this, _SelectedNetworkController_instances, \"m\", _SelectedNetworkController_resetAllPermissionedDomains).call(this);\n                }\n                __classPrivateFieldSet(this, _SelectedNetworkController_useRequestQueuePreference, useRequestQueue, \"f\");\n            }\n        });\n    }\n    setNetworkClientIdForDomain(domain, networkClientId) {\n        if (!__classPrivateFieldGet(this, _SelectedNetworkController_useRequestQueuePreference, \"f\")) {\n            return;\n        }\n        if (domain === exports.METAMASK_DOMAIN) {\n            throw new Error(`NetworkClientId for domain \"${exports.METAMASK_DOMAIN}\" cannot be set on the SelectedNetworkController`);\n        }\n        if (snapsPrefixes.some((prefix) => domain.startsWith(prefix))) {\n            return;\n        }\n        if (!__classPrivateFieldGet(this, _SelectedNetworkController_instances, \"m\", _SelectedNetworkController_domainHasPermissions).call(this, domain)) {\n            throw new Error('NetworkClientId for domain cannot be called with a domain that has not yet been granted permissions');\n        }\n        __classPrivateFieldGet(this, _SelectedNetworkController_instances, \"m\", _SelectedNetworkController_setNetworkClientIdForDomain).call(this, domain, networkClientId);\n    }\n    getNetworkClientIdForDomain(domain) {\n        const { selectedNetworkClientId: metamaskSelectedNetworkClientId } = this.messagingSystem.call('NetworkController:getState');\n        if (!__classPrivateFieldGet(this, _SelectedNetworkController_useRequestQueuePreference, \"f\")) {\n            return metamaskSelectedNetworkClientId;\n        }\n        return this.state.domains[domain] ?? metamaskSelectedNetworkClientId;\n    }\n    /**\n     * Accesses the provider and block tracker for the currently selected network.\n     *\n     * @param domain - the domain for the provider\n     * @returns The proxy and block tracker proxies.\n     */\n    getProviderAndBlockTracker(domain) {\n        // If the domain is 'metamask' or a snap, return the NetworkController's globally selected network client proxy\n        if (domain === exports.METAMASK_DOMAIN ||\n            snapsPrefixes.some((prefix) => domain.startsWith(prefix))) {\n            const networkClient = this.messagingSystem.call('NetworkController:getSelectedNetworkClient');\n            if (networkClient === undefined) {\n                throw new Error('Selected network not initialized');\n            }\n            return networkClient;\n        }\n        let networkProxy = __classPrivateFieldGet(this, _SelectedNetworkController_domainProxyMap, \"f\").get(domain);\n        if (networkProxy === undefined) {\n            let networkClient;\n            if (__classPrivateFieldGet(this, _SelectedNetworkController_useRequestQueuePreference, \"f\") &&\n                __classPrivateFieldGet(this, _SelectedNetworkController_instances, \"m\", _SelectedNetworkController_domainHasPermissions).call(this, domain)) {\n                const networkClientId = this.getNetworkClientIdForDomain(domain);\n                networkClient = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId);\n            }\n            else {\n                networkClient = this.messagingSystem.call('NetworkController:getSelectedNetworkClient');\n                if (networkClient === undefined) {\n                    throw new Error('Selected network not initialized');\n                }\n            }\n            networkProxy = {\n                provider: (0, swappable_obj_proxy_1.createEventEmitterProxy)(networkClient.provider),\n                blockTracker: (0, swappable_obj_proxy_1.createEventEmitterProxy)(networkClient.blockTracker, {\n                    eventFilter: 'skipInternal',\n                }),\n            };\n            __classPrivateFieldGet(this, _SelectedNetworkController_domainProxyMap, \"f\").set(domain, networkProxy);\n        }\n        return networkProxy;\n    }\n}\nexports.SelectedNetworkController = SelectedNetworkController;\n_SelectedNetworkController_domainProxyMap = new WeakMap(), _SelectedNetworkController_useRequestQueuePreference = new WeakMap(), _SelectedNetworkController_instances = new WeakSet(), _SelectedNetworkController_registerMessageHandlers = function _SelectedNetworkController_registerMessageHandlers() {\n    this.messagingSystem.registerActionHandler(exports.SelectedNetworkControllerActionTypes.getNetworkClientIdForDomain, this.getNetworkClientIdForDomain.bind(this));\n    this.messagingSystem.registerActionHandler(exports.SelectedNetworkControllerActionTypes.setNetworkClientIdForDomain, this.setNetworkClientIdForDomain.bind(this));\n}, _SelectedNetworkController_setNetworkClientIdForDomain = function _SelectedNetworkController_setNetworkClientIdForDomain(domain, networkClientId) {\n    const networkClient = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId);\n    const networkProxy = this.getProviderAndBlockTracker(domain);\n    networkProxy.provider.setTarget(networkClient.provider);\n    networkProxy.blockTracker.setTarget(networkClient.blockTracker);\n    this.update((state) => {\n        state.domains[domain] = networkClientId;\n    });\n}, _SelectedNetworkController_unsetNetworkClientIdForDomain = function _SelectedNetworkController_unsetNetworkClientIdForDomain(domain) {\n    const globallySelectedNetworkClient = this.messagingSystem.call('NetworkController:getSelectedNetworkClient');\n    const networkProxy = __classPrivateFieldGet(this, _SelectedNetworkController_domainProxyMap, \"f\").get(domain);\n    if (networkProxy && globallySelectedNetworkClient) {\n        networkProxy.provider.setTarget(globallySelectedNetworkClient.provider);\n        networkProxy.blockTracker.setTarget(globallySelectedNetworkClient.blockTracker);\n    }\n    else if (networkProxy) {\n        __classPrivateFieldGet(this, _SelectedNetworkController_domainProxyMap, \"f\").delete(domain);\n    }\n    this.update((state) => {\n        delete state.domains[domain];\n    });\n}, _SelectedNetworkController_domainHasPermissions = function _SelectedNetworkController_domainHasPermissions(domain) {\n    return this.messagingSystem.call('PermissionController:hasPermissions', domain);\n}, _SelectedNetworkController_resetAllPermissionedDomains = function _SelectedNetworkController_resetAllPermissionedDomains() {\n    __classPrivateFieldGet(this, _SelectedNetworkController_domainProxyMap, \"f\").forEach((_, domain) => {\n        const { selectedNetworkClientId } = this.messagingSystem.call('NetworkController:getState');\n        // can't use public setNetworkClientIdForDomain because it will throw an error\n        // rather than simply skip if the domain doesn't have permissions which can happen\n        // in this case since proxies are added for each site the user visits\n        if (__classPrivateFieldGet(this, _SelectedNetworkController_instances, \"m\", _SelectedNetworkController_domainHasPermissions).call(this, domain)) {\n            __classPrivateFieldGet(this, _SelectedNetworkController_instances, \"m\", _SelectedNetworkController_setNetworkClientIdForDomain).call(this, domain, selectedNetworkClientId);\n        }\n    });\n};\n//# sourceMappingURL=SelectedNetworkController.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createSelectedNetworkMiddleware = void 0;\nconst SelectedNetworkController_1 = require(\"./SelectedNetworkController.cjs\");\nconst createSelectedNetworkMiddleware = (messenger) => {\n    const getNetworkClientIdForDomain = (origin) => messenger.call(SelectedNetworkController_1.SelectedNetworkControllerActionTypes.getNetworkClientIdForDomain, origin);\n    return (req, _, next) => {\n        if (!req.origin) {\n            throw new Error(\"Request object is lacking an 'origin'\");\n        }\n        req.networkClientId = getNetworkClientIdForDomain(req.origin);\n        return next();\n    };\n};\nexports.createSelectedNetworkMiddleware = createSelectedNetworkMiddleware;\n//# sourceMappingURL=SelectedNetworkMiddleware.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createSelectedNetworkMiddleware = exports.METAMASK_DOMAIN = exports.SelectedNetworkController = exports.SelectedNetworkControllerEventTypes = exports.SelectedNetworkControllerActionTypes = void 0;\nvar SelectedNetworkController_1 = require(\"./SelectedNetworkController.cjs\");\nObject.defineProperty(exports, \"SelectedNetworkControllerActionTypes\", { enumerable: true, get: function () { return SelectedNetworkController_1.SelectedNetworkControllerActionTypes; } });\nObject.defineProperty(exports, \"SelectedNetworkControllerEventTypes\", { enumerable: true, get: function () { return SelectedNetworkController_1.SelectedNetworkControllerEventTypes; } });\nObject.defineProperty(exports, \"SelectedNetworkController\", { enumerable: true, get: function () { return SelectedNetworkController_1.SelectedNetworkController; } });\nObject.defineProperty(exports, \"METAMASK_DOMAIN\", { enumerable: true, get: function () { return SelectedNetworkController_1.METAMASK_DOMAIN; } });\nvar SelectedNetworkMiddleware_1 = require(\"./SelectedNetworkMiddleware.cjs\");\nObject.defineProperty(exports, \"createSelectedNetworkMiddleware\", { enumerable: true, get: function () { return SelectedNetworkMiddleware_1.createSelectedNetworkMiddleware; } });\n//# sourceMappingURL=index.cjs.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/SignatureController.ts\nvar _basecontroller = require('@metamask/base-controller');\nvar _controllerutils = require('@metamask/controller-utils');\n\n\n\n\nvar _loggingcontroller = require('@metamask/logging-controller');\n\n\n\nvar _messagemanager = require('@metamask/message-manager');\nvar _events = require('events'); var _events2 = _interopRequireDefault(_events);\nvar _lodash = require('lodash');\nvar controllerName = \"SignatureController\";\nvar stateMetadata = {\n  unapprovedPersonalMsgs: { persist: false, anonymous: false },\n  unapprovedTypedMessages: { persist: false, anonymous: false },\n  unapprovedPersonalMsgCount: { persist: false, anonymous: false },\n  unapprovedTypedMessagesCount: { persist: false, anonymous: false }\n};\nvar getDefaultState = () => ({\n  unapprovedPersonalMsgs: {},\n  unapprovedTypedMessages: {},\n  unapprovedPersonalMsgCount: 0,\n  unapprovedTypedMessagesCount: 0\n});\nvar _getAllState, _personalMessageManager, _typedMessageManager, _newUnsignedAbstractMessage, newUnsignedAbstractMessage_fn, _signPersonalMessage, signPersonalMessage_fn, _signTypedMessage, signTypedMessage_fn, _tryForEachMessageManager, tryForEachMessageManager_fn, _trySetDeferredSignSuccess, trySetDeferredSignSuccess_fn, _trySetMessageMetadata, trySetMessageMetadata_fn, _trySetDeferredSignError, trySetDeferredSignError_fn, _rejectUnapproved, rejectUnapproved_fn, _clearUnapproved, clearUnapproved_fn, _signAbstractMessage, signAbstractMessage_fn, _errorMessage, errorMessage_fn, _cancelAbstractMessage, cancelAbstractMessage_fn, _handleMessageManagerEvents, handleMessageManagerEvents_fn, _subscribeToMessageState, subscribeToMessageState_fn, _migrateMessages, migrateMessages_fn, _migrateMessage, migrateMessage_fn, _getMessage, getMessage_fn, _requestApproval, requestApproval_fn, _removeJsonData, removeJsonData_fn, _addLog, addLog_fn, _getSignTypeForLogger, getSignTypeForLogger_fn;\nvar SignatureController = class extends _basecontroller.BaseController {\n  /**\n   * Construct a Sign controller.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The restricted controller messenger for the sign controller.\n   * @param options.getAllState - Callback to retrieve all user state.\n   * @param options.securityProviderRequest - A function for verifying a message, whether it is malicious or not.\n   * @param options.getCurrentChainId - A function for retrieving the current chainId.\n   */\n  constructor({\n    messenger,\n    getAllState,\n    securityProviderRequest,\n    getCurrentChainId\n  }) {\n    super({\n      name: controllerName,\n      metadata: stateMetadata,\n      messenger,\n      state: getDefaultState()\n    });\n    __privateAdd(this, _newUnsignedAbstractMessage);\n    /**\n     * Signifies a user's approval to sign a personal_sign message in queue.\n     * Triggers signing, and the callback function from newUnsignedPersonalMessage.\n     *\n     * @param msgParams - The params of the message to sign & return to the Dapp.\n     * @returns Signature result from signing.\n     */\n    __privateAdd(this, _signPersonalMessage);\n    /**\n     * The method for a user approving a call to eth_signTypedData, per EIP 712.\n     * Triggers the callback in newUnsignedTypedMessage.\n     *\n     * @param msgParams - The params passed to eth_signTypedData.\n     * @param opts - The options for the method.\n     * @param opts.parseJsonData - Whether to parse JSON data before calling the KeyringController.\n     * @returns Signature result from signing.\n     */\n    __privateAdd(this, _signTypedMessage);\n    __privateAdd(this, _tryForEachMessageManager);\n    __privateAdd(this, _trySetDeferredSignSuccess);\n    __privateAdd(this, _trySetMessageMetadata);\n    __privateAdd(this, _trySetDeferredSignError);\n    __privateAdd(this, _rejectUnapproved);\n    __privateAdd(this, _clearUnapproved);\n    __privateAdd(this, _signAbstractMessage);\n    __privateAdd(this, _errorMessage);\n    __privateAdd(this, _cancelAbstractMessage);\n    __privateAdd(this, _handleMessageManagerEvents);\n    __privateAdd(this, _subscribeToMessageState);\n    __privateAdd(this, _migrateMessages);\n    __privateAdd(this, _migrateMessage);\n    __privateAdd(this, _getMessage);\n    __privateAdd(this, _requestApproval);\n    __privateAdd(this, _removeJsonData);\n    __privateAdd(this, _addLog);\n    __privateAdd(this, _getSignTypeForLogger);\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    __privateAdd(this, _getAllState, void 0);\n    __privateAdd(this, _personalMessageManager, void 0);\n    __privateAdd(this, _typedMessageManager, void 0);\n    __privateSet(this, _getAllState, getAllState);\n    this.hub = new (0, _events2.default)();\n    __privateSet(this, _personalMessageManager, new (0, _messagemanager.PersonalMessageManager)(\n      void 0,\n      void 0,\n      securityProviderRequest\n    ));\n    __privateSet(this, _typedMessageManager, new (0, _messagemanager.TypedMessageManager)(\n      void 0,\n      void 0,\n      securityProviderRequest,\n      void 0,\n      getCurrentChainId\n    ));\n    __privateMethod(this, _handleMessageManagerEvents, handleMessageManagerEvents_fn).call(this, __privateGet(this, _personalMessageManager), \"unapprovedPersonalMessage\");\n    __privateMethod(this, _handleMessageManagerEvents, handleMessageManagerEvents_fn).call(this, __privateGet(this, _typedMessageManager), \"unapprovedTypedMessage\");\n    __privateMethod(this, _subscribeToMessageState, subscribeToMessageState_fn).call(this, __privateGet(this, _personalMessageManager), (state, newMessages, messageCount) => {\n      state.unapprovedPersonalMsgs = newMessages;\n      state.unapprovedPersonalMsgCount = messageCount;\n    });\n    __privateMethod(this, _subscribeToMessageState, subscribeToMessageState_fn).call(this, __privateGet(this, _typedMessageManager), (state, newMessages, messageCount) => {\n      state.unapprovedTypedMessages = newMessages;\n      state.unapprovedTypedMessagesCount = messageCount;\n    });\n  }\n  /**\n   * A getter for the number of 'unapproved' PersonalMessages in this.messages.\n   *\n   * @returns The number of 'unapproved' PersonalMessages in this.messages\n   */\n  get unapprovedPersonalMessagesCount() {\n    return __privateGet(this, _personalMessageManager).getUnapprovedMessagesCount();\n  }\n  /**\n   * A getter for the number of 'unapproved' TypedMessages in this.messages.\n   *\n   * @returns The number of 'unapproved' TypedMessages in this.messages\n   */\n  get unapprovedTypedMessagesCount() {\n    return __privateGet(this, _typedMessageManager).getUnapprovedMessagesCount();\n  }\n  /**\n   * A getter for returning all messages.\n   *\n   * @returns The object containing all messages.\n   */\n  get messages() {\n    const messages = [\n      ...__privateGet(this, _typedMessageManager).getAllMessages(),\n      ...__privateGet(this, _personalMessageManager).getAllMessages()\n    ];\n    const messagesObject = messages.reduce((acc, message) => {\n      acc[message.id] = message;\n      return acc;\n    }, {});\n    return messagesObject;\n  }\n  /**\n   * Reset the controller state to the initial state.\n   */\n  resetState() {\n    this.update(() => getDefaultState());\n  }\n  /**\n   * Reject all unapproved messages of any type.\n   *\n   * @param reason - A message to indicate why.\n   */\n  rejectUnapproved(reason) {\n    __privateMethod(this, _rejectUnapproved, rejectUnapproved_fn).call(this, __privateGet(this, _personalMessageManager), reason);\n    __privateMethod(this, _rejectUnapproved, rejectUnapproved_fn).call(this, __privateGet(this, _typedMessageManager), reason);\n  }\n  /**\n   * Clears all unapproved messages from memory.\n   */\n  clearUnapproved() {\n    __privateMethod(this, _clearUnapproved, clearUnapproved_fn).call(this, __privateGet(this, _personalMessageManager));\n    __privateMethod(this, _clearUnapproved, clearUnapproved_fn).call(this, __privateGet(this, _typedMessageManager));\n  }\n  /**\n   * Called when a dapp uses the personal_sign method.\n   *\n   * We currently define personal_sign mostly for legacy Dapps.\n   *\n   * @param messageParams - The params of the message to sign & return to the Dapp.\n   * @param req - The original request, containing the origin.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async newUnsignedPersonalMessage(messageParams, req) {\n    return __privateMethod(this, _newUnsignedAbstractMessage, newUnsignedAbstractMessage_fn).call(\n      this,\n      __privateGet(this, _personalMessageManager),\n      _controllerutils.ApprovalType.PersonalSign,\n      _loggingcontroller.SigningMethod.PersonalSign,\n      \"Personal Message\",\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      __privateMethod(this, _signPersonalMessage, signPersonalMessage_fn).bind(this),\n      messageParams,\n      req\n    );\n  }\n  /**\n   * Called when a dapp uses the eth_signTypedData method, per EIP 712.\n   *\n   * @param messageParams - The params passed to eth_signTypedData.\n   * @param req - The original request, containing the origin.\n   * @param version - The version indicating the format of the typed data.\n   * @param signingOpts - An options bag for signing.\n   * @param signingOpts.parseJsonData - Whether to parse the JSON before signing.\n   * @returns Promise resolving to the raw data of the signature request.\n   */\n  async newUnsignedTypedMessage(messageParams, req, version, signingOpts) {\n    const signTypeForLogger = __privateMethod(this, _getSignTypeForLogger, getSignTypeForLogger_fn).call(this, version);\n    return __privateMethod(this, _newUnsignedAbstractMessage, newUnsignedAbstractMessage_fn).call(\n      this,\n      __privateGet(this, _typedMessageManager),\n      _controllerutils.ApprovalType.EthSignTypedData,\n      signTypeForLogger,\n      \"Typed Message\",\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      __privateMethod(this, _signTypedMessage, signTypedMessage_fn).bind(this),\n      messageParams,\n      req,\n      version,\n      signingOpts\n    );\n  }\n  /**\n   * Called to update the message status as signed.\n   *\n   * @param messageId - The id of the Message to update.\n   * @param signature - The data to update the message with.\n   */\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setDeferredSignSuccess(messageId, signature) {\n    __privateMethod(this, _tryForEachMessageManager, tryForEachMessageManager_fn).call(this, __privateMethod(this, _trySetDeferredSignSuccess, trySetDeferredSignSuccess_fn), messageId, signature);\n  }\n  /**\n   * Called when the message metadata needs to be updated.\n   *\n   * @param messageId - The id of the message to update.\n   * @param metadata - The data to update the metadata property in the message.\n   */\n  setMessageMetadata(messageId, metadata) {\n    __privateMethod(this, _tryForEachMessageManager, tryForEachMessageManager_fn).call(this, __privateMethod(this, _trySetMessageMetadata, trySetMessageMetadata_fn), messageId, metadata);\n  }\n  /**\n   * Called to cancel a signing message.\n   *\n   * @param messageId - The id of the Message to update.\n   */\n  setDeferredSignError(messageId) {\n    __privateMethod(this, _tryForEachMessageManager, tryForEachMessageManager_fn).call(this, __privateMethod(this, _trySetDeferredSignError, trySetDeferredSignError_fn), messageId);\n  }\n  setTypedMessageInProgress(messageId) {\n    __privateGet(this, _typedMessageManager).setMessageStatusInProgress(messageId);\n  }\n  setPersonalMessageInProgress(messageId) {\n    __privateGet(this, _personalMessageManager).setMessageStatusInProgress(messageId);\n  }\n};\n_getAllState = new WeakMap();\n_personalMessageManager = new WeakMap();\n_typedMessageManager = new WeakMap();\n_newUnsignedAbstractMessage = new WeakSet();\nnewUnsignedAbstractMessage_fn = async function(messageManager, approvalType, signTypeForLogger, messageName, signMessage, messageParams, req, version, signingOpts) {\n  let resultCallbacks;\n  try {\n    const messageId = await messageManager.addUnapprovedMessage(\n      messageParams,\n      req,\n      version\n    );\n    const messageParamsWithId = {\n      ...messageParams,\n      metamaskId: messageId,\n      ...version && { version }\n    };\n    const signaturePromise = messageManager.waitForFinishStatus(\n      messageParamsWithId,\n      messageName\n    );\n    try {\n      __privateMethod(this, _addLog, addLog_fn).call(this, signTypeForLogger, _loggingcontroller.SigningStage.Proposed, messageParamsWithId);\n      const acceptResult = await __privateMethod(this, _requestApproval, requestApproval_fn).call(this, messageParamsWithId, approvalType);\n      resultCallbacks = acceptResult.resultCallbacks;\n    } catch (error) {\n      __privateMethod(this, _addLog, addLog_fn).call(this, signTypeForLogger, _loggingcontroller.SigningStage.Rejected, messageParamsWithId);\n      __privateMethod(this, _cancelAbstractMessage, cancelAbstractMessage_fn).call(this, messageManager, messageId);\n      throw error;\n    }\n    await signMessage(messageParamsWithId, signingOpts);\n    const signatureResult = await signaturePromise;\n    __privateMethod(this, _addLog, addLog_fn).call(this, signTypeForLogger, _loggingcontroller.SigningStage.Signed, messageParamsWithId);\n    resultCallbacks?.success(signatureResult);\n    return signatureResult;\n  } catch (error) {\n    resultCallbacks?.error(error);\n    throw error;\n  }\n};\n_signPersonalMessage = new WeakSet();\nsignPersonalMessage_fn = async function(msgParams) {\n  return await __privateMethod(this, _signAbstractMessage, signAbstractMessage_fn).call(this, __privateGet(this, _personalMessageManager), _controllerutils.ApprovalType.PersonalSign, msgParams, async (cleanMsgParams) => await this.messagingSystem.call(\n    \"KeyringController:signPersonalMessage\",\n    cleanMsgParams\n  ));\n};\n_signTypedMessage = new WeakSet();\nsignTypedMessage_fn = async function(msgParams, opts = { parseJsonData: true }) {\n  const { version } = msgParams;\n  return await __privateMethod(this, _signAbstractMessage, signAbstractMessage_fn).call(this, __privateGet(this, _typedMessageManager), _controllerutils.ApprovalType.EthSignTypedData, msgParams, async (cleanMsgParams) => {\n    const finalMessageParams = opts.parseJsonData ? __privateMethod(this, _removeJsonData, removeJsonData_fn).call(this, cleanMsgParams, version) : cleanMsgParams;\n    return await this.messagingSystem.call(\n      \"KeyringController:signTypedMessage\",\n      finalMessageParams,\n      version\n    );\n  });\n};\n_tryForEachMessageManager = new WeakSet();\ntryForEachMessageManager_fn = function(callbackFn, ...args) {\n  const messageManagers = [\n    __privateGet(this, _personalMessageManager),\n    __privateGet(this, _typedMessageManager)\n  ];\n  for (const manager of messageManagers) {\n    if (callbackFn(manager, ...args)) {\n      return true;\n    }\n  }\n  throw new Error(\"Message not found\");\n};\n_trySetDeferredSignSuccess = new WeakSet();\ntrySetDeferredSignSuccess_fn = function(messageManager, messageId, signature) {\n  try {\n    messageManager.setMessageStatusSigned(messageId, signature);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n_trySetMessageMetadata = new WeakSet();\ntrySetMessageMetadata_fn = function(messageManager, messageId, metadata) {\n  try {\n    messageManager.setMetadata(messageId, metadata);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n_trySetDeferredSignError = new WeakSet();\ntrySetDeferredSignError_fn = function(messageManager, messageId) {\n  try {\n    messageManager.rejectMessage(messageId);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n_rejectUnapproved = new WeakSet();\nrejectUnapproved_fn = function(messageManager, reason) {\n  Object.keys(messageManager.getUnapprovedMessages()).forEach((messageId) => {\n    __privateMethod(this, _cancelAbstractMessage, cancelAbstractMessage_fn).call(this, messageManager, messageId, reason);\n  });\n};\n_clearUnapproved = new WeakSet();\nclearUnapproved_fn = function(messageManager) {\n  messageManager.update({\n    unapprovedMessages: {},\n    unapprovedMessagesCount: 0\n  });\n};\n_signAbstractMessage = new WeakSet();\nsignAbstractMessage_fn = async function(messageManager, methodName, msgParams, getSignature) {\n  console.info(`MetaMaskController - ${methodName}`);\n  const messageId = msgParams.metamaskId;\n  try {\n    const cleanMessageParams = await messageManager.approveMessage(msgParams);\n    try {\n      const signature = await getSignature(cleanMessageParams);\n      this.hub.emit(`${methodName}:signed`, { signature, messageId });\n      if (!cleanMessageParams.deferSetAsSigned) {\n        messageManager.setMessageStatusSigned(messageId, signature);\n      }\n      return signature;\n    } catch (error) {\n      this.hub.emit(`${messageId}:signError`, { error });\n      throw error;\n    }\n  } catch (error) {\n    console.info(`MetaMaskController - ${methodName} failed.`, error);\n    __privateMethod(this, _errorMessage, errorMessage_fn).call(this, messageManager, messageId, error.message);\n    throw error;\n  }\n};\n_errorMessage = new WeakSet();\nerrorMessage_fn = function(messageManager, messageId, error) {\n  if (messageManager instanceof _messagemanager.TypedMessageManager) {\n    messageManager.setMessageStatusErrored(messageId, error);\n  } else {\n    __privateMethod(this, _cancelAbstractMessage, cancelAbstractMessage_fn).call(this, messageManager, messageId);\n  }\n};\n_cancelAbstractMessage = new WeakSet();\ncancelAbstractMessage_fn = function(messageManager, messageId, reason) {\n  if (reason) {\n    const message = __privateMethod(this, _getMessage, getMessage_fn).call(this, messageId);\n    this.hub.emit(\"cancelWithReason\", { message, reason });\n  }\n  messageManager.rejectMessage(messageId);\n};\n_handleMessageManagerEvents = new WeakSet();\nhandleMessageManagerEvents_fn = function(messageManager, eventName) {\n  messageManager.hub.on(\"updateBadge\", () => {\n    this.hub.emit(\"updateBadge\");\n  });\n  messageManager.hub.on(\n    \"unapprovedMessage\",\n    (msgParams) => {\n      this.hub.emit(eventName, msgParams);\n    }\n  );\n};\n_subscribeToMessageState = new WeakSet();\nsubscribeToMessageState_fn = function(messageManager, updateState) {\n  messageManager.subscribe((state) => {\n    const newMessages = __privateMethod(this, _migrateMessages, migrateMessages_fn).call(\n      this,\n      // TODO: Replace `any` with type\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      state.unapprovedMessages\n    );\n    this.update(() => {\n      const newState = { ...this.state };\n      updateState(newState, newMessages, state.unapprovedMessagesCount);\n      return newState;\n    });\n  });\n};\n_migrateMessages = new WeakSet();\nmigrateMessages_fn = function(coreMessages) {\n  const stateMessages = {};\n  for (const messageId of Object.keys(coreMessages)) {\n    const coreMessage = coreMessages[messageId];\n    const stateMessage = __privateMethod(this, _migrateMessage, migrateMessage_fn).call(this, coreMessage);\n    stateMessages[messageId] = stateMessage;\n  }\n  return stateMessages;\n};\n_migrateMessage = new WeakSet();\nmigrateMessage_fn = function(coreMessage) {\n  const { messageParams, ...coreMessageData } = coreMessage;\n  const stateMessage = {\n    ...coreMessageData,\n    msgParams: messageParams\n  };\n  return stateMessage;\n};\n_getMessage = new WeakSet();\ngetMessage_fn = function(messageId) {\n  return {\n    ...this.state.unapprovedPersonalMsgs,\n    ...this.state.unapprovedTypedMessages\n  }[messageId];\n};\n_requestApproval = new WeakSet();\nrequestApproval_fn = async function(msgParams, type) {\n  const id = msgParams.metamaskId;\n  const origin = msgParams.origin || _controllerutils.ORIGIN_METAMASK;\n  const clonedMsgParams = _lodash.cloneDeep.call(void 0, msgParams);\n  return await this.messagingSystem.call(\n    \"ApprovalController:addRequest\",\n    {\n      id,\n      origin,\n      type,\n      requestData: clonedMsgParams,\n      expectsResult: true\n    },\n    true\n  );\n};\n_removeJsonData = new WeakSet();\nremoveJsonData_fn = function(messageParams, version) {\n  if (version === \"V1\" || typeof messageParams.data !== \"string\") {\n    return messageParams;\n  }\n  return {\n    ...messageParams,\n    data: JSON.parse(messageParams.data)\n  };\n};\n_addLog = new WeakSet();\naddLog_fn = function(signingMethod, stage, signingData) {\n  this.messagingSystem.call(\"LoggingController:add\", {\n    type: _loggingcontroller.LogType.EthSignLog,\n    data: {\n      signingMethod,\n      stage,\n      signingData\n    }\n  });\n};\n_getSignTypeForLogger = new WeakSet();\ngetSignTypeForLogger_fn = function(version) {\n  let signTypeForLogger = _loggingcontroller.SigningMethod.EthSignTypedData;\n  if (version === \"V3\") {\n    signTypeForLogger = _loggingcontroller.SigningMethod.EthSignTypedDataV3;\n  } else if (version === \"V4\") {\n    signTypeForLogger = _loggingcontroller.SigningMethod.EthSignTypedDataV4;\n  }\n  return signTypeForLogger;\n};\n\n\n\nexports.SignatureController = SignatureController;\n//# sourceMappingURL=chunk-XG24TXHN.js.map","import { cloneDeep } from 'lodash';\n\nconst version = 75;\n\n/**\n * Delete the ThreeBoxController.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  delete state.ThreeBoxController;\n  return state;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkXG24TXHNjs = require('./chunk-XG24TXHN.js');\n\n\nexports.SignatureController = _chunkXG24TXHNjs.SignatureController;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _SmartTransactionsController_instances, _SmartTransactionsController_interval, _SmartTransactionsController_clientId, _SmartTransactionsController_chainId, _SmartTransactionsController_supportedChainIds, _SmartTransactionsController_getNonceLock, _SmartTransactionsController_ethQuery, _SmartTransactionsController_confirmExternalTransaction, _SmartTransactionsController_getRegularTransactions, _SmartTransactionsController_trackMetaMetricsEvent, _SmartTransactionsController_getMetaMetricsProps, _SmartTransactionsController_fetch, _SmartTransactionsController_updateSmartTransaction, _SmartTransactionsController_addMetaMetricsPropsToNewSmartTransaction, _SmartTransactionsController_createOrUpdateSmartTransaction, _SmartTransactionsController_doesTransactionNeedConfirmation, _SmartTransactionsController_confirmSmartTransaction, _SmartTransactionsController_getChainId, _SmartTransactionsController_getEthQuery, _SmartTransactionsController_getCurrentSmartTransactions, _SmartTransactionsController_wipeSmartTransactionsPerChainId;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDefaultSmartTransactionsControllerState = exports.DEFAULT_INTERVAL = void 0;\nconst bytes_1 = require(\"@ethersproject/bytes\");\nconst controller_utils_1 = require(\"@metamask/controller-utils\");\nconst eth_query_1 = __importDefault(require(\"@metamask/eth-query\"));\nconst polling_controller_1 = require(\"@metamask/polling-controller\");\nconst transaction_controller_1 = require(\"@metamask/transaction-controller\");\nconst bignumber_js_1 = require(\"bignumber.js\");\nconst cloneDeep_1 = __importDefault(require(\"lodash/cloneDeep\"));\nconst constants_1 = require(\"./constants\");\nconst types_1 = require(\"./types\");\nconst utils_1 = require(\"./utils\");\nconst SECOND = 1000;\nexports.DEFAULT_INTERVAL = SECOND * 5;\nconst DEFAULT_CLIENT_ID = 'default';\nconst ETH_QUERY_ERROR_MSG = '`ethQuery` is not defined on SmartTransactionsController';\n/**\n * The name of the {@link SmartTransactionsController}\n */\nconst controllerName = 'SmartTransactionsController';\nconst controllerMetadata = {\n    smartTransactionsState: {\n        persist: false,\n        anonymous: true,\n    },\n};\n/**\n * Get the default {@link SmartTransactionsController} state.\n *\n * @returns The default {@link SmartTransactionsController} state.\n */\nfunction getDefaultSmartTransactionsControllerState() {\n    return {\n        smartTransactionsState: {\n            smartTransactions: {},\n            userOptIn: null,\n            userOptInV2: null,\n            fees: {\n                approvalTxFees: null,\n                tradeTxFees: null,\n            },\n            liveness: true,\n            livenessByChainId: {\n                [controller_utils_1.ChainId.mainnet]: true,\n                [controller_utils_1.ChainId.sepolia]: true,\n            },\n            feesByChainId: {\n                [controller_utils_1.ChainId.mainnet]: {\n                    approvalTxFees: null,\n                    tradeTxFees: null,\n                },\n                [controller_utils_1.ChainId.sepolia]: {\n                    approvalTxFees: null,\n                    tradeTxFees: null,\n                },\n            },\n        },\n    };\n}\nexports.getDefaultSmartTransactionsControllerState = getDefaultSmartTransactionsControllerState;\nclass SmartTransactionsController extends polling_controller_1.StaticIntervalPollingController {\n    constructor({ interval = exports.DEFAULT_INTERVAL, clientId = DEFAULT_CLIENT_ID, chainId: InitialChainId = controller_utils_1.ChainId.mainnet, supportedChainIds = [controller_utils_1.ChainId.mainnet, controller_utils_1.ChainId.sepolia], getNonceLock, confirmExternalTransaction, trackMetaMetricsEvent, state = {}, messenger, getTransactions, getMetaMetricsProps, }) {\n        super({\n            name: controllerName,\n            metadata: controllerMetadata,\n            messenger,\n            state: Object.assign(Object.assign({}, getDefaultSmartTransactionsControllerState()), state),\n        });\n        _SmartTransactionsController_instances.add(this);\n        _SmartTransactionsController_interval.set(this, void 0);\n        _SmartTransactionsController_clientId.set(this, void 0);\n        _SmartTransactionsController_chainId.set(this, void 0);\n        _SmartTransactionsController_supportedChainIds.set(this, void 0);\n        _SmartTransactionsController_getNonceLock.set(this, void 0);\n        _SmartTransactionsController_ethQuery.set(this, void 0);\n        _SmartTransactionsController_confirmExternalTransaction.set(this, void 0);\n        _SmartTransactionsController_getRegularTransactions.set(this, void 0);\n        _SmartTransactionsController_trackMetaMetricsEvent.set(this, void 0);\n        _SmartTransactionsController_getMetaMetricsProps.set(this, void 0);\n        __classPrivateFieldSet(this, _SmartTransactionsController_interval, interval, \"f\");\n        __classPrivateFieldSet(this, _SmartTransactionsController_clientId, clientId, \"f\");\n        __classPrivateFieldSet(this, _SmartTransactionsController_chainId, InitialChainId, \"f\");\n        __classPrivateFieldSet(this, _SmartTransactionsController_supportedChainIds, supportedChainIds, \"f\");\n        this.setIntervalLength(interval);\n        __classPrivateFieldSet(this, _SmartTransactionsController_getNonceLock, getNonceLock, \"f\");\n        __classPrivateFieldSet(this, _SmartTransactionsController_ethQuery, undefined, \"f\");\n        __classPrivateFieldSet(this, _SmartTransactionsController_confirmExternalTransaction, confirmExternalTransaction, \"f\");\n        __classPrivateFieldSet(this, _SmartTransactionsController_getRegularTransactions, getTransactions, \"f\");\n        __classPrivateFieldSet(this, _SmartTransactionsController_trackMetaMetricsEvent, trackMetaMetricsEvent, \"f\");\n        __classPrivateFieldSet(this, _SmartTransactionsController_getMetaMetricsProps, getMetaMetricsProps, \"f\");\n        this.initializeSmartTransactionsForChainId();\n        this.messagingSystem.subscribe('NetworkController:stateChange', ({ selectedNetworkClientId }) => {\n            const { configuration: { chainId }, provider, } = this.messagingSystem.call('NetworkController:getNetworkClientById', selectedNetworkClientId);\n            __classPrivateFieldSet(this, _SmartTransactionsController_chainId, chainId, \"f\");\n            __classPrivateFieldSet(this, _SmartTransactionsController_ethQuery, new eth_query_1.default(provider), \"f\");\n            this.initializeSmartTransactionsForChainId();\n            this.checkPoll(this.state);\n        });\n        this.messagingSystem.subscribe(`${controllerName}:stateChange`, (currentState) => this.checkPoll(currentState));\n    }\n    async _executePoll(networkClientId) {\n        // if this is going to be truly UI driven polling we shouldn't really reach here\n        // with a networkClientId that is not supported, but for now I'll add a check in case\n        // wondering if we should add some kind of predicate to the polling controller to check whether\n        // we should poll or not\n        const chainId = __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_getChainId).call(this, { networkClientId });\n        if (!__classPrivateFieldGet(this, _SmartTransactionsController_supportedChainIds, \"f\").includes(chainId)) {\n            return Promise.resolve();\n        }\n        return this.updateSmartTransactions({ networkClientId });\n    }\n    checkPoll({ smartTransactionsState: { smartTransactions }, }) {\n        const currentSmartTransactions = smartTransactions[__classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\")];\n        const pendingTransactions = currentSmartTransactions === null || currentSmartTransactions === void 0 ? void 0 : currentSmartTransactions.filter(utils_1.isSmartTransactionPending);\n        if (!this.timeoutHandle && (pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length) > 0) {\n            this.poll();\n        }\n        else if (this.timeoutHandle && (pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length) === 0) {\n            this.stop();\n        }\n    }\n    initializeSmartTransactionsForChainId() {\n        if (__classPrivateFieldGet(this, _SmartTransactionsController_supportedChainIds, \"f\").includes(__classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\"))) {\n            this.update((state) => {\n                var _a;\n                state.smartTransactionsState.smartTransactions[__classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\")] =\n                    (_a = state.smartTransactionsState.smartTransactions[__classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\")]) !== null && _a !== void 0 ? _a : [];\n            });\n        }\n    }\n    async poll(interval) {\n        if (interval) {\n            __classPrivateFieldSet(this, _SmartTransactionsController_interval, interval, \"f\");\n        }\n        this.timeoutHandle && clearInterval(this.timeoutHandle);\n        if (!__classPrivateFieldGet(this, _SmartTransactionsController_supportedChainIds, \"f\").includes(__classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\"))) {\n            return;\n        }\n        this.timeoutHandle = setInterval(() => {\n            (0, controller_utils_1.safelyExecute)(async () => this.updateSmartTransactions());\n        }, __classPrivateFieldGet(this, _SmartTransactionsController_interval, \"f\"));\n        await (0, controller_utils_1.safelyExecute)(async () => this.updateSmartTransactions());\n    }\n    async stop() {\n        this.timeoutHandle && clearInterval(this.timeoutHandle);\n        this.timeoutHandle = undefined;\n    }\n    setOptInState(optInState) {\n        this.update((state) => {\n            state.smartTransactionsState.userOptInV2 = optInState;\n        });\n    }\n    trackStxStatusChange(smartTransaction, prevSmartTransaction) {\n        let updatedSmartTransaction = (0, cloneDeep_1.default)(smartTransaction);\n        updatedSmartTransaction = Object.assign(Object.assign({}, (0, cloneDeep_1.default)(prevSmartTransaction)), updatedSmartTransaction);\n        if (updatedSmartTransaction.status === (prevSmartTransaction === null || prevSmartTransaction === void 0 ? void 0 : prevSmartTransaction.status)) {\n            return; // If status hasn't changed, don't track it again.\n        }\n        __classPrivateFieldGet(this, _SmartTransactionsController_trackMetaMetricsEvent, \"f\").call(this, {\n            event: constants_1.MetaMetricsEventName.StxStatusUpdated,\n            category: constants_1.MetaMetricsEventCategory.Transactions,\n            properties: (0, utils_1.getSmartTransactionMetricsProperties)(updatedSmartTransaction),\n            sensitiveProperties: (0, utils_1.getSmartTransactionMetricsSensitiveProperties)(updatedSmartTransaction),\n        });\n    }\n    isNewSmartTransaction(smartTransactionUuid) {\n        const { smartTransactionsState: { smartTransactions }, } = this.state;\n        const currentSmartTransactions = smartTransactions[__classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\")];\n        const currentIndex = currentSmartTransactions === null || currentSmartTransactions === void 0 ? void 0 : currentSmartTransactions.findIndex((stx) => stx.uuid === smartTransactionUuid);\n        return currentIndex === -1 || currentIndex === undefined;\n    }\n    updateSmartTransaction(smartTransaction, { networkClientId } = {}) {\n        let ethQuery = __classPrivateFieldGet(this, _SmartTransactionsController_ethQuery, \"f\");\n        let chainId = __classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\");\n        if (networkClientId) {\n            const { configuration, provider } = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId);\n            chainId = configuration.chainId;\n            ethQuery = new eth_query_1.default(provider);\n        }\n        __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_createOrUpdateSmartTransaction).call(this, smartTransaction, {\n            chainId,\n            ethQuery,\n        });\n    }\n    async updateSmartTransactions({ networkClientId, } = {}) {\n        const { smartTransactionsState: { smartTransactions }, } = this.state;\n        const chainId = __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_getChainId).call(this, { networkClientId });\n        const smartTransactionsForChainId = smartTransactions[chainId];\n        const transactionsToUpdate = smartTransactionsForChainId\n            .filter(utils_1.isSmartTransactionPending)\n            .map((smartTransaction) => smartTransaction.uuid);\n        if (transactionsToUpdate.length > 0) {\n            this.fetchSmartTransactionsStatus(transactionsToUpdate, {\n                networkClientId,\n            });\n        }\n    }\n    // ! Ask backend API to accept list of uuids as params\n    async fetchSmartTransactionsStatus(uuids, { networkClientId } = {}) {\n        const params = new URLSearchParams({\n            uuids: uuids.join(','),\n        });\n        const chainId = __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_getChainId).call(this, { networkClientId });\n        const ethQuery = __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_getEthQuery).call(this, { networkClientId });\n        const url = `${(0, utils_1.getAPIRequestURL)(types_1.APIType.BATCH_STATUS, chainId)}?${params.toString()}`;\n        const data = (await __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_fetch).call(this, url));\n        for (const [uuid, stxStatus] of Object.entries(data)) {\n            const smartTransaction = {\n                statusMetadata: stxStatus,\n                status: (0, utils_1.calculateStatus)(stxStatus),\n                cancellable: (0, utils_1.isSmartTransactionCancellable)(stxStatus),\n                uuid,\n            };\n            await __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_createOrUpdateSmartTransaction).call(this, smartTransaction, {\n                chainId,\n                ethQuery,\n            });\n        }\n        return data;\n    }\n    async addNonceToTransaction(transaction) {\n        const nonceLock = await __classPrivateFieldGet(this, _SmartTransactionsController_getNonceLock, \"f\").call(this, transaction.from);\n        const nonce = nonceLock.nextNonce;\n        nonceLock.releaseLock();\n        return Object.assign(Object.assign({}, transaction), { nonce: `0x${nonce.toString(16)}` });\n    }\n    clearFees() {\n        const fees = {\n            approvalTxFees: null,\n            tradeTxFees: null,\n        };\n        this.update((state) => {\n            state.smartTransactionsState.fees = fees;\n        });\n        return fees;\n    }\n    async getFees(tradeTx, approvalTx, { networkClientId } = {}) {\n        const chainId = __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_getChainId).call(this, { networkClientId });\n        const transactions = [];\n        let unsignedTradeTransactionWithNonce;\n        if (approvalTx) {\n            const unsignedApprovalTransactionWithNonce = await this.addNonceToTransaction(approvalTx);\n            transactions.push(unsignedApprovalTransactionWithNonce);\n            unsignedTradeTransactionWithNonce = Object.assign(Object.assign({}, tradeTx), { \n                // If there is an approval tx, the trade tx's nonce is increased by 1.\n                nonce: (0, utils_1.incrementNonceInHex)(unsignedApprovalTransactionWithNonce.nonce) });\n        }\n        else if (tradeTx.nonce) {\n            unsignedTradeTransactionWithNonce = tradeTx;\n        }\n        else {\n            unsignedTradeTransactionWithNonce = await this.addNonceToTransaction(tradeTx);\n        }\n        transactions.push(unsignedTradeTransactionWithNonce);\n        const data = await __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_fetch).call(this, (0, utils_1.getAPIRequestURL)(types_1.APIType.GET_FEES, chainId), {\n            method: 'POST',\n            body: JSON.stringify({\n                txs: transactions,\n            }),\n        });\n        let approvalTxFees;\n        let tradeTxFees;\n        if (approvalTx) {\n            approvalTxFees = data === null || data === void 0 ? void 0 : data.txs[0];\n            tradeTxFees = data === null || data === void 0 ? void 0 : data.txs[1];\n        }\n        else {\n            approvalTxFees = null;\n            tradeTxFees = data === null || data === void 0 ? void 0 : data.txs[0];\n        }\n        this.update((state) => {\n            if (chainId === __classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\")) {\n                state.smartTransactionsState.fees = {\n                    approvalTxFees,\n                    tradeTxFees,\n                };\n            }\n            state.smartTransactionsState.feesByChainId[chainId] = {\n                approvalTxFees,\n                tradeTxFees,\n            };\n        });\n        return {\n            approvalTxFees,\n            tradeTxFees,\n        };\n    }\n    // * After this successful call client must add a nonce representative to\n    // * transaction controller external transactions list\n    async submitSignedTransactions({ transactionMeta, txParams, signedTransactions, signedCanceledTransactions, networkClientId, }) {\n        var _a, _b;\n        const chainId = __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_getChainId).call(this, { networkClientId });\n        const ethQuery = __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_getEthQuery).call(this, { networkClientId });\n        const data = await __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_fetch).call(this, (0, utils_1.getAPIRequestURL)(types_1.APIType.SUBMIT_TRANSACTIONS, chainId), {\n            method: 'POST',\n            body: JSON.stringify({\n                rawTxs: signedTransactions,\n                rawCancelTxs: signedCanceledTransactions,\n            }),\n        });\n        const time = Date.now();\n        let preTxBalance;\n        try {\n            const preTxBalanceBN = await (0, controller_utils_1.query)(ethQuery, 'getBalance', [\n                txParams === null || txParams === void 0 ? void 0 : txParams.from,\n            ]);\n            preTxBalance = new bignumber_js_1.BigNumber(preTxBalanceBN).toString(16);\n        }\n        catch (error) {\n            console.error('provider error', error);\n        }\n        const requiresNonce = txParams && !txParams.nonce;\n        let nonce;\n        let nonceLock;\n        let nonceDetails = {};\n        if (requiresNonce) {\n            nonceLock = await __classPrivateFieldGet(this, _SmartTransactionsController_getNonceLock, \"f\").call(this, txParams.from);\n            nonce = (0, bytes_1.hexlify)(nonceLock.nextNonce);\n            nonceDetails = nonceLock.nonceDetails;\n            (_a = txParams.nonce) !== null && _a !== void 0 ? _a : (txParams.nonce = nonce);\n        }\n        const submitTransactionResponse = Object.assign(Object.assign({}, data), { txHash: (0, utils_1.getTxHash)(signedTransactions[0]) });\n        try {\n            await __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_createOrUpdateSmartTransaction).call(this, {\n                chainId,\n                nonceDetails,\n                preTxBalance,\n                status: types_1.SmartTransactionStatuses.PENDING,\n                time,\n                txParams,\n                uuid: submitTransactionResponse.uuid,\n                txHash: submitTransactionResponse.txHash,\n                cancellable: true,\n                type: (_b = transactionMeta === null || transactionMeta === void 0 ? void 0 : transactionMeta.type) !== null && _b !== void 0 ? _b : 'swap',\n            }, { chainId, ethQuery });\n        }\n        finally {\n            nonceLock === null || nonceLock === void 0 ? void 0 : nonceLock.releaseLock();\n        }\n        return submitTransactionResponse;\n    }\n    // TODO: This should return if the cancellation was on chain or not (for nonce management)\n    // After this successful call client must update nonce representative\n    // in transaction controller external transactions list\n    async cancelSmartTransaction(uuid, { networkClientId, } = {}) {\n        const chainId = __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_getChainId).call(this, { networkClientId });\n        await __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_fetch).call(this, (0, utils_1.getAPIRequestURL)(types_1.APIType.CANCEL, chainId), {\n            method: 'POST',\n            body: JSON.stringify({ uuid }),\n        });\n    }\n    async fetchLiveness({ networkClientId, } = {}) {\n        const chainId = __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_getChainId).call(this, { networkClientId });\n        let liveness = false;\n        try {\n            const response = await __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_fetch).call(this, (0, utils_1.getAPIRequestURL)(types_1.APIType.LIVENESS, chainId));\n            liveness = Boolean(response.lastBlock);\n        }\n        catch (error) {\n            console.log('\"fetchLiveness\" API call failed');\n        }\n        this.update((state) => {\n            if (chainId === __classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\")) {\n                state.smartTransactionsState.liveness = liveness;\n            }\n            state.smartTransactionsState.livenessByChainId[chainId] = liveness;\n        });\n        return liveness;\n    }\n    async setStatusRefreshInterval(interval) {\n        if (interval !== __classPrivateFieldGet(this, _SmartTransactionsController_interval, \"f\")) {\n            __classPrivateFieldSet(this, _SmartTransactionsController_interval, interval, \"f\");\n        }\n    }\n    getTransactions({ addressFrom, status, }) {\n        const currentSmartTransactions = __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_getCurrentSmartTransactions).call(this);\n        return currentSmartTransactions.filter((stx) => {\n            var _a;\n            return stx.status === status && ((_a = stx.txParams) === null || _a === void 0 ? void 0 : _a.from) === addressFrom;\n        });\n    }\n    getSmartTransactionByMinedTxHash(txHash) {\n        if (!txHash) {\n            return undefined;\n        }\n        const currentSmartTransactions = __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_getCurrentSmartTransactions).call(this);\n        return currentSmartTransactions.find((smartTransaction) => {\n            var _a, _b;\n            return (((_b = (_a = smartTransaction.statusMetadata) === null || _a === void 0 ? void 0 : _a.minedHash) === null || _b === void 0 ? void 0 : _b.toLowerCase()) ===\n                txHash.toLowerCase());\n        });\n    }\n    wipeSmartTransactions({ address, ignoreNetwork, }) {\n        if (!address) {\n            return;\n        }\n        const addressLowerCase = address.toLowerCase();\n        if (ignoreNetwork) {\n            const { smartTransactionsState: { smartTransactions }, } = this.state;\n            Object.keys(smartTransactions).forEach((chainId) => {\n                __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_wipeSmartTransactionsPerChainId).call(this, {\n                    chainId,\n                    addressLowerCase,\n                });\n            });\n        }\n        else {\n            __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_wipeSmartTransactionsPerChainId).call(this, {\n                chainId: __classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\"),\n                addressLowerCase,\n            });\n        }\n    }\n}\nexports.default = SmartTransactionsController;\n_SmartTransactionsController_interval = new WeakMap(), _SmartTransactionsController_clientId = new WeakMap(), _SmartTransactionsController_chainId = new WeakMap(), _SmartTransactionsController_supportedChainIds = new WeakMap(), _SmartTransactionsController_getNonceLock = new WeakMap(), _SmartTransactionsController_ethQuery = new WeakMap(), _SmartTransactionsController_confirmExternalTransaction = new WeakMap(), _SmartTransactionsController_getRegularTransactions = new WeakMap(), _SmartTransactionsController_trackMetaMetricsEvent = new WeakMap(), _SmartTransactionsController_getMetaMetricsProps = new WeakMap(), _SmartTransactionsController_instances = new WeakSet(), _SmartTransactionsController_fetch = \n/* istanbul ignore next */\nasync function _SmartTransactionsController_fetch(request, options) {\n    const fetchOptions = Object.assign(Object.assign({}, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, (__classPrivateFieldGet(this, _SmartTransactionsController_clientId, \"f\") && { 'X-Client-Id': __classPrivateFieldGet(this, _SmartTransactionsController_clientId, \"f\") })) });\n    return (0, utils_1.handleFetch)(request, fetchOptions);\n}, _SmartTransactionsController_updateSmartTransaction = function _SmartTransactionsController_updateSmartTransaction(smartTransaction, { chainId = __classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\"), }) {\n    var _a;\n    const { smartTransactionsState: { smartTransactions }, } = this.state;\n    const currentSmartTransactions = (_a = smartTransactions[chainId]) !== null && _a !== void 0 ? _a : [];\n    const currentIndex = currentSmartTransactions === null || currentSmartTransactions === void 0 ? void 0 : currentSmartTransactions.findIndex((stx) => stx.uuid === smartTransaction.uuid);\n    if (currentIndex === -1) {\n        return; // Smart transaction not found, don't update anything.\n    }\n    if (!(0, controller_utils_1.isSafeDynamicKey)(chainId)) {\n        return;\n    }\n    this.update((state) => {\n        state.smartTransactionsState.smartTransactions[chainId][currentIndex] = Object.assign(Object.assign({}, state.smartTransactionsState.smartTransactions[chainId][currentIndex]), smartTransaction);\n    });\n}, _SmartTransactionsController_addMetaMetricsPropsToNewSmartTransaction = async function _SmartTransactionsController_addMetaMetricsPropsToNewSmartTransaction(smartTransaction) {\n    const metaMetricsProps = await __classPrivateFieldGet(this, _SmartTransactionsController_getMetaMetricsProps, \"f\").call(this);\n    smartTransaction.accountHardwareType =\n        metaMetricsProps === null || metaMetricsProps === void 0 ? void 0 : metaMetricsProps.accountHardwareType;\n    smartTransaction.accountType = metaMetricsProps === null || metaMetricsProps === void 0 ? void 0 : metaMetricsProps.accountType;\n    smartTransaction.deviceModel = metaMetricsProps === null || metaMetricsProps === void 0 ? void 0 : metaMetricsProps.deviceModel;\n}, _SmartTransactionsController_createOrUpdateSmartTransaction = async function _SmartTransactionsController_createOrUpdateSmartTransaction(smartTransaction, { chainId = __classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\"), ethQuery = __classPrivateFieldGet(this, _SmartTransactionsController_ethQuery, \"f\"), }) {\n    var _a;\n    const { smartTransactionsState: { smartTransactions }, } = this.state;\n    const currentSmartTransactions = (_a = smartTransactions[chainId]) !== null && _a !== void 0 ? _a : [];\n    const currentIndex = currentSmartTransactions === null || currentSmartTransactions === void 0 ? void 0 : currentSmartTransactions.findIndex((stx) => stx.uuid === smartTransaction.uuid);\n    const isNewSmartTransaction = this.isNewSmartTransaction(smartTransaction.uuid);\n    if (__classPrivateFieldGet(this, _SmartTransactionsController_ethQuery, \"f\") === undefined) {\n        throw new Error(ETH_QUERY_ERROR_MSG);\n    }\n    if (isNewSmartTransaction) {\n        await __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_addMetaMetricsPropsToNewSmartTransaction).call(this, smartTransaction);\n    }\n    this.trackStxStatusChange(smartTransaction, isNewSmartTransaction\n        ? undefined\n        : currentSmartTransactions[currentIndex]);\n    if (isNewSmartTransaction) {\n        // add smart transaction\n        const cancelledNonceIndex = currentSmartTransactions === null || currentSmartTransactions === void 0 ? void 0 : currentSmartTransactions.findIndex((stx) => {\n            var _a, _b, _c;\n            return ((_a = stx.txParams) === null || _a === void 0 ? void 0 : _a.nonce) === ((_b = smartTransaction.txParams) === null || _b === void 0 ? void 0 : _b.nonce) &&\n                ((_c = stx.status) === null || _c === void 0 ? void 0 : _c.startsWith('cancelled'));\n        });\n        const snapshot = (0, cloneDeep_1.default)(smartTransaction);\n        const history = [snapshot];\n        const historifiedSmartTransaction = Object.assign(Object.assign({}, smartTransaction), { history });\n        const nextSmartTransactions = cancelledNonceIndex > -1\n            ? currentSmartTransactions\n                .slice(0, cancelledNonceIndex)\n                .concat(currentSmartTransactions.slice(cancelledNonceIndex + 1))\n                .concat(historifiedSmartTransaction)\n            : currentSmartTransactions.concat(historifiedSmartTransaction);\n        this.update((state) => {\n            state.smartTransactionsState.smartTransactions[__classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\")] =\n                nextSmartTransactions;\n        });\n        return;\n    }\n    // We have to emit this event here, because then a txHash is returned to the TransactionController once it's available\n    // and the #doesTransactionNeedConfirmation function will work properly, since it will find the txHash in the regular transactions list.\n    this.messagingSystem.publish(`SmartTransactionsController:smartTransaction`, smartTransaction);\n    if ((smartTransaction.status === types_1.SmartTransactionStatuses.SUCCESS ||\n        smartTransaction.status === types_1.SmartTransactionStatuses.REVERTED) &&\n        !smartTransaction.confirmed) {\n        // confirm smart transaction\n        const currentSmartTransaction = currentSmartTransactions[currentIndex];\n        const nextSmartTransaction = Object.assign(Object.assign({}, currentSmartTransaction), smartTransaction);\n        await __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_confirmSmartTransaction).call(this, nextSmartTransaction, {\n            chainId,\n            ethQuery,\n        });\n    }\n    else {\n        __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_updateSmartTransaction).call(this, smartTransaction, {\n            chainId,\n        });\n    }\n}, _SmartTransactionsController_doesTransactionNeedConfirmation = function _SmartTransactionsController_doesTransactionNeedConfirmation(txHash) {\n    if (!txHash) {\n        return true;\n    }\n    const transactions = __classPrivateFieldGet(this, _SmartTransactionsController_getRegularTransactions, \"f\").call(this);\n    const foundTransaction = transactions === null || transactions === void 0 ? void 0 : transactions.find((tx) => {\n        var _a;\n        return ((_a = tx.hash) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === txHash.toLowerCase();\n    });\n    if (!foundTransaction) {\n        return true;\n    }\n    // If a found transaction is either confirmed or submitted, it doesn't need confirmation from the STX controller.\n    // When it's in the submitted state, the TransactionController checks its status and confirms it,\n    // so no need to confirm it again here.\n    return ![transaction_controller_1.TransactionStatus.confirmed, transaction_controller_1.TransactionStatus.submitted].includes(foundTransaction.status);\n}, _SmartTransactionsController_confirmSmartTransaction = async function _SmartTransactionsController_confirmSmartTransaction(smartTransaction, { chainId = __classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\"), ethQuery = __classPrivateFieldGet(this, _SmartTransactionsController_ethQuery, \"f\"), }) {\n    var _a;\n    if (ethQuery === undefined) {\n        throw new Error(ETH_QUERY_ERROR_MSG);\n    }\n    const txHash = (_a = smartTransaction.statusMetadata) === null || _a === void 0 ? void 0 : _a.minedHash;\n    try {\n        const transactionReceipt = await (0, controller_utils_1.query)(ethQuery, 'getTransactionReceipt', [txHash]);\n        const transaction = await (0, controller_utils_1.query)(ethQuery, 'getTransactionByHash', [txHash]);\n        const maxFeePerGas = transaction === null || transaction === void 0 ? void 0 : transaction.maxFeePerGas;\n        const maxPriorityFeePerGas = transaction === null || transaction === void 0 ? void 0 : transaction.maxPriorityFeePerGas;\n        if (transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockNumber) {\n            const blockData = await (0, controller_utils_1.query)(ethQuery, 'getBlockByNumber', [transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockNumber, false]);\n            const baseFeePerGas = blockData === null || blockData === void 0 ? void 0 : blockData.baseFeePerGas;\n            const updatedTxParams = Object.assign(Object.assign({}, smartTransaction.txParams), { maxFeePerGas,\n                maxPriorityFeePerGas });\n            // call confirmExternalTransaction\n            const originalTxMeta = Object.assign(Object.assign({}, smartTransaction), { id: smartTransaction.uuid, status: transaction_controller_1.TransactionStatus.confirmed, hash: txHash, txParams: updatedTxParams });\n            // create txMeta snapshot for history\n            const snapshot = (0, utils_1.snapshotFromTxMeta)(originalTxMeta);\n            // recover previous tx state obj\n            const previousState = (0, utils_1.replayHistory)(originalTxMeta.history);\n            // generate history entry and add to history\n            const entry = (0, utils_1.generateHistoryEntry)(previousState, snapshot, 'txStateManager: setting status to confirmed');\n            const txMeta = entry.length > 0\n                ? Object.assign(Object.assign({}, originalTxMeta), { history: originalTxMeta.history.concat(entry) }) : originalTxMeta;\n            if (__classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_doesTransactionNeedConfirmation).call(this, txHash)) {\n                __classPrivateFieldGet(this, _SmartTransactionsController_confirmExternalTransaction, \"f\").call(this, \n                // TODO: Replace 'as' assertion with correct typing for `txMeta`\n                txMeta, transactionReceipt, \n                // TODO: Replace 'as' assertion with correct typing for `baseFeePerGas`\n                baseFeePerGas);\n            }\n            __classPrivateFieldGet(this, _SmartTransactionsController_trackMetaMetricsEvent, \"f\").call(this, {\n                event: constants_1.MetaMetricsEventName.StxConfirmed,\n                category: constants_1.MetaMetricsEventCategory.Transactions,\n                properties: (0, utils_1.getSmartTransactionMetricsProperties)(smartTransaction),\n                sensitiveProperties: (0, utils_1.getSmartTransactionMetricsSensitiveProperties)(smartTransaction),\n            });\n            __classPrivateFieldGet(this, _SmartTransactionsController_instances, \"m\", _SmartTransactionsController_updateSmartTransaction).call(this, Object.assign(Object.assign({}, smartTransaction), { confirmed: true }), {\n                chainId,\n            });\n        }\n    }\n    catch (error) {\n        __classPrivateFieldGet(this, _SmartTransactionsController_trackMetaMetricsEvent, \"f\").call(this, {\n            event: constants_1.MetaMetricsEventName.StxConfirmationFailed,\n            category: constants_1.MetaMetricsEventCategory.Transactions,\n        });\n        console.error('confirm error', error);\n    }\n}, _SmartTransactionsController_getChainId = function _SmartTransactionsController_getChainId({ networkClientId, } = {}) {\n    if (networkClientId) {\n        return this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;\n    }\n    return __classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\");\n}, _SmartTransactionsController_getEthQuery = function _SmartTransactionsController_getEthQuery({ networkClientId, } = {}) {\n    if (networkClientId) {\n        const { provider } = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId);\n        return new eth_query_1.default(provider);\n    }\n    if (__classPrivateFieldGet(this, _SmartTransactionsController_ethQuery, \"f\") === undefined) {\n        throw new Error(ETH_QUERY_ERROR_MSG);\n    }\n    return __classPrivateFieldGet(this, _SmartTransactionsController_ethQuery, \"f\");\n}, _SmartTransactionsController_getCurrentSmartTransactions = function _SmartTransactionsController_getCurrentSmartTransactions() {\n    const { smartTransactionsState: { smartTransactions }, } = this.state;\n    const currentSmartTransactions = smartTransactions === null || smartTransactions === void 0 ? void 0 : smartTransactions[__classPrivateFieldGet(this, _SmartTransactionsController_chainId, \"f\")];\n    if (!currentSmartTransactions || currentSmartTransactions.length === 0) {\n        return [];\n    }\n    return currentSmartTransactions;\n}, _SmartTransactionsController_wipeSmartTransactionsPerChainId = function _SmartTransactionsController_wipeSmartTransactionsPerChainId({ chainId, addressLowerCase, }) {\n    const { smartTransactionsState: { smartTransactions }, } = this.state;\n    const smartTransactionsForSelectedChain = smartTransactions === null || smartTransactions === void 0 ? void 0 : smartTransactions[chainId];\n    if (!smartTransactionsForSelectedChain ||\n        smartTransactionsForSelectedChain.length === 0) {\n        return;\n    }\n    const newSmartTransactionsForSelectedChain = smartTransactionsForSelectedChain.filter((smartTransaction) => { var _a; return ((_a = smartTransaction.txParams) === null || _a === void 0 ? void 0 : _a.from) !== addressLowerCase; });\n    this.update((state) => {\n        state.smartTransactionsState.smartTransactions[chainId] =\n            newSmartTransactionsForSelectedChain;\n    });\n};\n//# sourceMappingURL=SmartTransactionsController.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MetaMetricsEventCategory = exports.MetaMetricsEventName = exports.API_BASE_URL = void 0;\nexports.API_BASE_URL = 'https://transaction.api.cx.metamask.io';\nvar MetaMetricsEventName;\n(function (MetaMetricsEventName) {\n    MetaMetricsEventName[\"StxStatusUpdated\"] = \"STX Status Updated\";\n    MetaMetricsEventName[\"StxConfirmed\"] = \"STX Confirmed\";\n    MetaMetricsEventName[\"StxConfirmationFailed\"] = \"STX Confirmation Failed\";\n})(MetaMetricsEventName = exports.MetaMetricsEventName || (exports.MetaMetricsEventName = {}));\nvar MetaMetricsEventCategory;\n(function (MetaMetricsEventCategory) {\n    MetaMetricsEventCategory[\"Transactions\"] = \"Transactions\";\n})(MetaMetricsEventCategory = exports.MetaMetricsEventCategory || (exports.MetaMetricsEventCategory = {}));\n//# sourceMappingURL=constants.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = void 0;\nvar SmartTransactionsController_1 = require(\"./SmartTransactionsController\");\nObject.defineProperty(exports, \"default\", { enumerable: true, get: function () { return __importDefault(SmartTransactionsController_1).default; } });\n//# sourceMappingURL=index.js.map"]}