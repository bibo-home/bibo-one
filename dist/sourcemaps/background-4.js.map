{"version":3,"sources":["node_modules/eth-lattice-keyring/node_modules/ethereum-cryptography/node_modules/@noble/hashes/_sha2.js","node_modules/eth-lattice-keyring/node_modules/ethereum-cryptography/node_modules/@noble/hashes/_u64.js","node_modules/eth-lattice-keyring/node_modules/ethereum-cryptography/node_modules/@noble/hashes/cryptoBrowser.js","node_modules/eth-lattice-keyring/node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha256.js","node_modules/@chainsafe/ssz/lib/view/arrayBasic.js","node_modules/eth-lattice-keyring/node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha3.js","node_modules/eth-lattice-keyring/node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js","node_modules/eth-lattice-keyring/node_modules/ethereum-cryptography/sha256.js","node_modules/eth-lattice-keyring/node_modules/ethereum-cryptography/utils.js","node_modules/eth-lattice-keyring/node_modules/rlp/dist/index.js","node_modules/@chainsafe/ssz/lib/view/arrayComposite.js","node_modules/ethereum-cryptography/random.js","node_modules/ethereum-cryptography/sha256.js","node_modules/@chainsafe/ssz/lib/view/bitArray.js","node_modules/@chainsafe/ssz/lib/view/container.js","node_modules/@chainsafe/ssz/lib/view/containerNodeStruct.js","node_modules/@chainsafe/ssz/lib/view/listBasic.js","node_modules/@chainsafe/ssz/lib/view/listComposite.js","node_modules/@chainsafe/ssz/lib/viewDU/abstract.js","node_modules/@chainsafe/ssz/lib/viewDU/arrayBasic.js","app/scripts/fixtures/generate-wallet-state.js","node_modules/@chainsafe/ssz/lib/viewDU/arrayComposite.js","node_modules/@chainsafe/ssz/lib/viewDU/bitArray.js","node_modules/@chainsafe/ssz/lib/viewDU/container.js","node_modules/@chainsafe/ssz/lib/viewDU/containerNodeStruct.js","node_modules/fast-fifo/fixed-size.js","node_modules/fast-fifo/index.js","node_modules/@chainsafe/ssz/lib/viewDU/listBasic.js","node_modules/@chainsafe/ssz/lib/viewDU/listComposite.js","node_modules/fastest-levenshtein/mod.js","node_modules/@ensdomains/content-hash/node_modules/multibase/src/base.js","node_modules/@ensdomains/content-hash/node_modules/multibase/src/constants.js","node_modules/get-npm-tarball-url/lib/index.js","node_modules/@ensdomains/content-hash/node_modules/multibase/src/index.js","node_modules/gridplus-sdk/dist/api/addressTags.js","node_modules/gridplus-sdk/dist/api/addresses.js","node_modules/gridplus-sdk/dist/api/index.js","node_modules/gridplus-sdk/dist/api/signing.js","app/scripts/fixtures/with-address-book.js","node_modules/@ensdomains/content-hash/node_modules/multibase/src/rfc4648.js","node_modules/gridplus-sdk/dist/api/state.js","node_modules/gridplus-sdk/dist/api/utilities.js","node_modules/gridplus-sdk/dist/bitcoin.js","node_modules/gridplus-sdk/dist/calldata/evm.js","node_modules/gridplus-sdk/dist/calldata/index.js","node_modules/gridplus-sdk/dist/client.js","node_modules/gridplus-sdk/dist/constants.js","node_modules/gridplus-sdk/dist/ethereum.js","node_modules/gridplus-sdk/dist/functions/addKvRecords.js","node_modules/gridplus-sdk/dist/functions/connect.js","node_modules/@ensdomains/content-hash/node_modules/multibase/src/util.js","node_modules/gridplus-sdk/dist/functions/fetchActiveWallet.js","node_modules/gridplus-sdk/dist/functions/fetchEncData.js","node_modules/gridplus-sdk/dist/functions/getAddresses.js","node_modules/gridplus-sdk/dist/functions/getKvRecords.js","node_modules/gridplus-sdk/dist/functions/index.js","node_modules/gridplus-sdk/dist/functions/pair.js","node_modules/gridplus-sdk/dist/functions/removeKvRecords.js","node_modules/gridplus-sdk/dist/functions/sign.js","node_modules/gridplus-sdk/dist/genericSigning.js","node_modules/gridplus-sdk/dist/index.js","node_modules/@ensdomains/content-hash/node_modules/multihashes/src/constants.js","node_modules/gridplus-sdk/dist/protocol/index.js","node_modules/gridplus-sdk/dist/protocol/latticeConstants.js","node_modules/gridplus-sdk/dist/protocol/secureMessages.js","node_modules/gridplus-sdk/dist/shared/errors.js","node_modules/gridplus-sdk/dist/shared/functions.js","node_modules/gridplus-sdk/dist/shared/predicates.js","node_modules/gridplus-sdk/dist/shared/utilities.js","node_modules/gridplus-sdk/dist/shared/validators.js","node_modules/gridplus-sdk/dist/util.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/chains/goerli.json","node_modules/@ensdomains/content-hash/node_modules/multihashes/src/index.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/chains/mainnet.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/chains/rinkeby.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/chains/ropsten.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/chains/sepolia.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/common.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/1153.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/1559.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/2315.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/2537.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/2565.json","node_modules/@ensdomains/content-hash/node_modules/varint/decode.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/2718.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/2929.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/2930.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/3074.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/3198.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/3529.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/3540.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/3541.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/3554.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/3607.json","node_modules/@ensdomains/content-hash/node_modules/varint/encode.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/3651.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/3670.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/3675.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/3855.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/3860.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/4345.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/4399.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/4844.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/4895.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/5133.json","node_modules/@ensdomains/content-hash/node_modules/varint/index.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/eips/index.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/enums.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/arrowGlacier.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/berlin.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/byzantium.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/chainstart.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/constantinople.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/dao.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/grayGlacier.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/homestead.json","node_modules/@ensdomains/content-hash/node_modules/varint/length.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/index.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/istanbul.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/london.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/merge.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/mergeForkIdTransition.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/muirGlacier.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/petersburg.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/shanghai.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/sharding.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/spuriousDragon.json","node_modules/@ensdomains/content-hash/src/helpers.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/hardforks/tangerineWhistle.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/index.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/types.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/common/dist/utils.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/baseTransaction.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/constants.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/eip1559Transaction.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/eip2930Transaction.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/eip4844Transaction.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/fromRpc.js","node_modules/@ensdomains/content-hash/src/index.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/index.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/kzg/kzg.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/legacyTransaction.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/transactionFactory.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/types.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/util.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/dist/utils/blobHelpers.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/chains/goerli.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/chains/mainnet.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/chains/rinkeby.json","app/scripts/fixtures/with-app-state.js","node_modules/@ensdomains/content-hash/src/profiles.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/chains/ropsten.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/chains/sepolia.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/common.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/1153.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/1559.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/2315.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/2537.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/2565.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/2718.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/2929.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/2930.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/3074.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/3198.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/3529.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/3540.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/3541.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/3554.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/3607.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/3651.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/3670.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/3675.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/3855.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/3860.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/4345.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/4399.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/4844.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/4895.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/5133.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/eips/index.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/enums.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/arrowGlacier.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/berlin.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/byzantium.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/chainstart.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/constantinople.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/dao.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/grayGlacier.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/homestead.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/index.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/istanbul.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/london.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/merge.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/mergeForkIdTransition.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/muirGlacier.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/petersburg.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/shanghai.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/sharding.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/spuriousDragon.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/hardforks/tangerineWhistle.json","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/index.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/types.js","node_modules/gridplus-sdk/node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/dist/utils.js","node_modules/gridplus-sdk/node_modules/bignumber.js/bignumber.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/curve/base.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/curve/edwards.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/curve/index.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/curve/mont.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/curve/short.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/curves.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/ec/index.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/ec/key.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/ec/signature.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/eddsa/index.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/eddsa/key.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/eddsa/signature.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js","node_modules/gridplus-sdk/node_modules/elliptic/lib/elliptic/utils.js","node_modules/gridplus-sdk/node_modules/elliptic/package.json","node_modules/gridplus-sdk/node_modules/ethereum-cryptography/keccak.js","node_modules/gridplus-sdk/node_modules/ethereum-cryptography/node_modules/@noble/hashes/_assert.js","node_modules/gridplus-sdk/node_modules/ethereum-cryptography/node_modules/@noble/hashes/_sha2.js","node_modules/gridplus-sdk/node_modules/ethereum-cryptography/node_modules/@noble/hashes/_u64.js","node_modules/gridplus-sdk/node_modules/ethereum-cryptography/node_modules/@noble/hashes/cryptoBrowser.js","node_modules/gridplus-sdk/node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha256.js","node_modules/gridplus-sdk/node_modules/ethereum-cryptography/node_modules/@noble/hashes/sha3.js","node_modules/gridplus-sdk/node_modules/ethereum-cryptography/node_modules/@noble/hashes/utils.js","node_modules/gridplus-sdk/node_modules/ethereum-cryptography/sha256.js","node_modules/gridplus-sdk/node_modules/ethereum-cryptography/utils.js","node_modules/gridplus-sdk/node_modules/rlp/dist/index.js","node_modules/gridplus-sdk/node_modules/secp256k1/elliptic.js","node_modules/gridplus-sdk/node_modules/secp256k1/lib/elliptic.js","node_modules/gridplus-sdk/node_modules/secp256k1/lib/index.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/curve/base.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/curve/edwards.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/curve/index.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/curve/mont.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/curve/short.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/curves.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/ec/index.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/ec/key.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/ec/signature.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/eddsa/index.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/eddsa/key.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/eddsa/signature.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/lib/elliptic/utils.js","node_modules/gridplus-sdk/node_modules/secp256k1/node_modules/elliptic/package.json","node_modules/gridplus-sdk/node_modules/uuid/dist/index.js","app/scripts/fixtures/with-confirmed-transactions.js","node_modules/gridplus-sdk/node_modules/uuid/dist/md5-browser.js","node_modules/gridplus-sdk/node_modules/uuid/dist/native-browser.js","node_modules/gridplus-sdk/node_modules/uuid/dist/nil.js","node_modules/gridplus-sdk/node_modules/uuid/dist/parse.js","node_modules/gridplus-sdk/node_modules/uuid/dist/regex.js","node_modules/gridplus-sdk/node_modules/uuid/dist/rng-browser.js","node_modules/gridplus-sdk/node_modules/uuid/dist/sha1-browser.js","node_modules/gridplus-sdk/node_modules/uuid/dist/stringify.js","node_modules/gridplus-sdk/node_modules/uuid/dist/v1.js","node_modules/gridplus-sdk/node_modules/uuid/dist/v3.js","node_modules/gridplus-sdk/node_modules/uuid/dist/v35.js","node_modules/gridplus-sdk/node_modules/uuid/dist/v4.js","node_modules/gridplus-sdk/node_modules/uuid/dist/v5.js","node_modules/gridplus-sdk/node_modules/uuid/dist/validate.js","node_modules/gridplus-sdk/node_modules/uuid/dist/version.js","node_modules/is-retry-allowed/index.js","node_modules/iso-url/index.js","node_modules/iso-url/src/relative.js","node_modules/iso-url/src/url-browser.js","node_modules/join-component/index.js","node_modules/js-base64/base64.js","node_modules/json-rpc-engine/dist/JsonRpcEngine.js","node_modules/json-rpc-engine/dist/createAsyncMiddleware.js","node_modules/json-rpc-engine/dist/createScaffoldMiddleware.js","node_modules/json-rpc-engine/dist/getUniqueId.js","node_modules/json-rpc-engine/dist/idRemapMiddleware.js","node_modules/json-rpc-engine/dist/index.js","node_modules/json-rpc-engine/dist/mergeMiddleware.js","node_modules/json-rpc-engine/node_modules/@metamask/safe-event-emitter/index.js","node_modules/json-rpc-middleware-stream/dist/createEngineStream.js","node_modules/json-rpc-middleware-stream/dist/createStreamMiddleware.js","node_modules/json-rpc-middleware-stream/dist/index.js","app/scripts/fixtures/with-erc20-tokens.js","node_modules/lodash/_arrayEach.js","node_modules/lodash/_assignValue.js","node_modules/lodash/_baseAssign.js","node_modules/lodash/_baseAssignIn.js","node_modules/lodash/_baseAssignValue.js","node_modules/lodash/_baseClone.js","node_modules/lodash/_baseCreate.js","node_modules/lodash/_baseInRange.js","node_modules/lodash/_baseIsMap.js","node_modules/lodash/_baseIsSet.js","node_modules/lodash/_baseKeysIn.js","node_modules/lodash/_baseTrim.js","node_modules/lodash/_cloneArrayBuffer.js","node_modules/lodash/_cloneBuffer.js","node_modules/lodash/_cloneDataView.js","node_modules/lodash/_cloneRegExp.js","node_modules/lodash/_cloneSymbol.js","node_modules/lodash/_cloneTypedArray.js","node_modules/lodash/_copyArray.js","node_modules/lodash/_copyObject.js","node_modules/lodash/_copySymbols.js","node_modules/lodash/_copySymbolsIn.js","node_modules/lodash/_defineProperty.js","node_modules/lodash/_getAllKeysIn.js","node_modules/lodash/_getPrototype.js","node_modules/lodash/_getSymbolsIn.js","node_modules/lodash/_initCloneArray.js","node_modules/lodash/_initCloneByTag.js","node_modules/lodash/_initCloneObject.js","app/scripts/fixtures/with-networks.js","node_modules/lodash/_nativeKeysIn.js"],"names":["Object","defineProperty","exports","value","SHA2","_assert_js_1","require","utils_js_1","Hash","constructor","blockLen","outputLen","padOffset","isLE","super","this","finished","length","pos","destroyed","buffer","Uint8Array","view","createView","update","data","default","exists","len","toBytes","take","Math","min","set","subarray","process","dataView","roundClean","digestInto","out","output","fill","i","byteOffset","setBigUint64","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","oview","get","forEach","v","digest","res","slice","destroy","_cloneInto","to","add","toBig","split","fromBig","U32_MASK64","n","le","lst","Ah","Uint32Array","Al","Bh","Bl","u64","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","crypto","node","undefined","web","self","sha256","_sha2_js_1","Maj","a","b","c","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","wrapConstructor","ArrayBasicTreeView","persistent_merkle_tree_1","abstract_1","TreeView","type","tree","tree_getLength","rootNode","index","chunkIndex","floor","itemsPerChunk","leafNode","getNodeAtDepth","depth","elementType","tree_getFromPackedNode","Error","clone","tree_setToPackedNode","setNodeAtDepth","getAll","chunksNode","tree_getChunksNode","chunkCount","ceil","leafNodes","getNodesAtDepth","chunkDepth","values","Array","lenFullNodes","remainder","shake256","shake128","keccak_512","keccak_384","keccak_256","keccak_224","sha3_512","sha3_384","sha3_256","sha3_224","Keccak","keccakP","_u64_js_1","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","push","t","j","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","shift","PI","suffix","enableXOF","posOut","number","state","state32","u32","keccak","finish","writeInto","bytes","bufferOut","xofInto","xof","gen","genShake","wrapConstructorWithOpts","opts","dkLen","randomBytes","checkOpts","concatBytes","utf8ToBytes","asyncLoop","nextTick","hexToBytes","bytesToHex","u8","crypto_1","arr","byteLength","DataView","word","hexes","from","toString","padStart","uint8a","hex","TypeError","array","hexByte","byte","parseInt","isNaN","str","TextEncoder","encode","async","iters","tick","cb","ts","Date","now","diff","arrays","every","reduce","result","pad","defaults","obj","prototype","call","assign","hashConstructor","hashC","message","tmp","create","hashCons","msg","bytesLength","getRandomValues","sha256_1","utils_1","wrapHash","__importDefault","mod","__esModule","equalsBytes","bytesToUtf8","toHex","assertBytes","assertBool","_assert_1","bool","utils_2","enumerable","TextDecoder","decode","sliced","startsWith","substring","hash","webCrypto","nodeRequire","module","bind","input","isArray","buf","encodeLength","inputBuf","safeSlice","start","end","decodeLength","parseHexByte","hexLength","numberToHex","firstByte","stream","decoded","_decode","llength","innerRemainder","d","totalLength","utils","cachedHexes","_v","utf","integer","isHexPrefixed","RLP","ArrayCompositeTreeView","gindex","toGindexBitstring","subtree","getSubtree","getView","getReadonly","Tree","getNode","commitView","getAllReadonly","nodes","views","getAllReadonlyValues","tree_toValue","getRandomBytesSync","getRandomBytes","BitArrayTreeView","bitArray","uint8Array","bitLen","bitIndex","bit","value_toTree","mergeOrWith","bitArray2","intersectValues","getTrueBitIndexes","getSingleTrueBit","toBoolArray","getContainerTreeViewClass","basic_1","composite_1","ContainerTreeView","CustomContainerTreeView","fieldsEntries","fieldName","fieldType","isBasicType","configurable","tree_getFromNode","tree_setToNode","isCompositeType","typeName","writable","branchNodeStruct_1","isBasic","newNodeValue","BranchNodeStruct","toView","toValueFromView","ListBasicTreeView","arrayBasic_1","limit","tree_setLength","LeafNode","fromZero","ListCompositeTreeView","arrayComposite_1","TreeViewDU","hashTreeRoot","commit","serialize","dontTransferCache","getViewDU","cache","clearCache","ArrayBasicTreeViewDU","_rootNode","nodesChanged","Set","dirtyLength","_length","nodesPopulated","nodeChanged","has","nodesPrev","size","indexes","keys","sort","newChunksNode","setNodesAtDepth","tree_setChunksNode","clear","fixtureBuilder","_fixtureBuilder","inputChainId","vault","accounts","encodedSeedPhrase","password","keyringControllerMessenger","_baseController","ControllerMessenger","getRestricted","name","krCtrl","_keyringController","KeyringController","encryptor","_encryptorFactory","encryptorFactory","messenger","seedPhraseAsBuffer","Buffer","_convertMnemonicToWordlistIndices","mnemonic","indices","map","_english","wordlist","indexOf","Uint16Array","createNewVaultAndRestore","account","keyrings","FIXTURES_CONFIG","withAccounts","newAccount","addNewAccount","generateVaultAndAccount","_defaultFixture","E2E_SRP","withAccountsController","console","log","internalAccounts","selectedAccount","id","address","metadata","lastSelected","keyring","options","methods","generateAccountsControllerState","withAddressBookController","numEntries","withContacts","_withAddressBook","withAddressBook","generateAddressBookControllerState","withAnnouncementController","_notifications","UI_NOTIFICATIONS","acc","val","isShown","generateAnnouncementControllerState","withAppStateController","_withAppState","FIXTURES_APP_STATE","withKeyringController","defaultFixture","generateKeyringControllerState","withNetworkController","defaultNetworkState","NetworkController","networkConfigurations","networksMetadata","sepolia","EIPS","status","selectedNetworkClientId","withNetworks","_withNetworks","FIXTURES_NETWORKS","generateNetworkControllerState","withNotificationServicesController","notifications","withUnreadNotifications","_withUnreadNotifications","generateNotificationControllerState","withPreferencesController","preferencesControllerState","withPreferences","_withPreferences","FIXTURES_PREFERENCES","identities","lostIdentities","generatePreferencesControllerState","withTokensController","tokens","_withErc20Tokens","FIXTURES_ERC20_TOKENS","withErc20Tokens","network","allTokens","myAccount","generateTokensControllerState","withTransactionController","transactions","withConfirmedTransactions","_withConfirmedTransactions","generateTransactionControllerState","fixture","ArrayCompositeTreeViewDU","viewsChanged","Map","caches","viewChanged","isViewMutable","populateAllNodes","commitViewDU","cacheOfViewDU","nodesChangedSorted","entry","BitArrayTreeViewDU","_bitArray","getContainerTreeViewDUClass","ContainerTreeViewDU","CustomContainerTreeViewDU","valueChanged","toViewDU","toValueFromViewDU","hwm","mask","top","btm","next","last","peek","isEmpty","FixedFIFO","head","tail","prev","ListBasicTreeViewDU","zeroNode","ListCompositeTreeViewDU","sliceTo","treeZeroAfterIndex","newLength","newRootNode","distance","closest","peq","m","pv","mv","sc","charCodeAt","eq","xv","myers_32","mhc","phc","hsize","vsize","mv_1","pv_1","start_1","vlen_1","k","pb","mh","xh","mb","ph","vlen","score","myers_x","min_distance","Infinity","min_index","dist","code","implementation","alphabet","codeBuf","engine","string","char","baseX","Base","rfc4648","decodeText","encodeText","constants","names","tupple","codes","pkgName","pkgVersion","registry","endsWith","getScopelessName","version","plusPos","removeBuildMetadataFromVersion","asBuffer","encoding","nameOrCode","enc","validEncode","alloc","concat","ArrayBuffer","isView","prefix","includes","toLowerCase","isEncoded","err","encodingFromData","freeze","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","e","rejected","done","then","apply","__generator","body","f","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","op","pop","removeAddressTags","fetchAddressTags","addAddressTags","constants_1","utilities_1","tags","records","_a","tag","key","queue","client","addKvRecords","_b","MAX_ADDR","addressTags","remainingToFetch","fetched","_c","getKvRecords","total","ids","removeKvRecords","__assign","arguments","p","hasOwnProperty","fetchLedgerLegacyAddresses","fetchLedgerLiveAddresses","fetchSolanaAddresses","fetchBtcWrappedSegwitAddresses","fetchBtCSegwitAddresses","fetchBtcLegacyAddresses","fetchAddresses","overrides","getAddresses","startPath","DEFAULT_ETH_DERIVATION","addrs","addr","startPathIndex","getStartPath","BTC_LEGACY_DERIVATION","BTC_SEGWIT_DERIVATION","BTC_WRAPPED_SEGWIT_DERIVATION","SOLANA_DERIVATION","addresses","_loop_1","LEDGER_LIVE_DERIVATION","all","_loop_2","LEDGER_LEGACY_DERIVATION","__createBinding","o","k2","desc","getOwnPropertyDescriptor","__exportStar","fetchActiveWallets","pair","connect","setup","getClient","utilities_2","deviceId","pairingCode","fetchActiveWallet","signSolanaTx","signBtcWrappedSegwitTx","signBtcSegwitTx","signBtcLegacyTx","signMessage","sign","__1","payload","tx","signerPath","curveType","Constants","SIGNING","CURVES","SECP256K1","hashType","HASHES","KECCAK256","encodingType","ENCODINGS","EVM","protocol","currency","CURRENCIES","ETH_MSG","isEIP712Payload","ED25519","NONE","SOLANA","_network","generateRandomAddress","random","networks","CHAIN_IDS","MAINNET","SEPOLIA","addressBook","chainId","isEns","memo","bitsPerChar","bits","written","SyntaxError","setFunctionQueue","getFunctionQueue","setLoadClient","loadClient","setSaveClient","saveClient","fn","functionQueue","client_1","state_1","getStoredClient","setStoredClient","privKey","client_2","deviceId_1","buildSaveClientFn","buildLoadClientFn","Utils","generateAppSecret","Client","isPaired","getStateData","getDeviceId","ephemeralPub","catch","returnValue","clientData","encodedData","encodeClientData","stateData","decodeClientData","defaultStartPath","addressIndex","pathIndex","bech32_1","bs58check_1","ripemd_1","sha_1","protocol_1","DEFAULT_SIGHASH_BUFFER","PURPOSES","BIP_CONSTANTS","COINS","OP","ZERO","HASH160","DUP","EQUAL","EQUALVERIFY","CHECKSIG","SEGWIT_NATIVE_V0_PREFIX","SEGWIT_NATIVE_V0_TESTNET_PREFIX","FMT_SEGWIT_NATIVE_V0","FMT_SEGWIT_NATIVE_V0_TESTNET","base","addition","getU32LE","writeUInt32LE","getVarInt","writeUInt8","writeUInt16LE","writeUInt64LE","off","preBuf","nStr","reverse","copy","decodeAddress","versionByte","pkh","bech32Dec","bech32","words","isP2wpsh","fromWords","getAddressFormat","path","purpose","coin","BTC_SEGWIT","BTC","BTC_TESTNET","BTC_WRAPPED_SEGWIT","BTC_LEGACY","getScriptType","buildBitcoinTxRequest","prevOuts","recipient","changePath","fee","changeFmt","dec","inputSum","scriptType","isBuffer","txHash","schema","LatticeSignSchema","bitcoin","origData","changeData","serializeTx","inputs","outputs","lockTime","useWitness","w","needsWitness","numInputs","redeemScript","pubkey","shaHash","pubkeyhash","ripemd160","buildRedeemScript","redeemScriptLen","sliceLen","sig","sigLen","pubkeyLen","buildSig","emptyScript","sequence","numOutputs","script","buildP2shLockingScript","buildP2pkhLockingScript","buildLockingScript","scriptLen","sigs","pubkeys","witnessSlice","witness","buildWitness","getBitcoinAddress","bech32Prefix","bech32Version","toWords","unshift","replaceNestedDefs","getNestedCalldata","parseCanonicalName","parseSolidityJSONABI","js_sha3_1","abi_1","abi","coerceSig","match","filter","item","find","getFuncSig","parseDef","canonicalName","def","paramStart","BAD_CANONICAL_ERR","paramDef","typeStr","popTypeStrFromCanonical","parseTypeStr","parsedParamDef","parseParamDef","calldata","possibleNestedDefs","defParams","strParams","getParamStrNames","couldBeNestedDef","AbiCoder","paramData","isBytesType","nestedDefIsPossible_1","isBytesArrItem","nestedParamDatum","isBytesItem","paramDataBuf","keccak256","strNames","param","EVM_TYPES","nested","join","subName","isTuple","getTupleName","parseBasicTypeStr","szBytes","typeIdx","arraySzs","typeStrLessArr","typeStrArr","getArraySzs","paramArr","subType","found","arrStart","typeStrNum","recursed","nameStr","flatParam","baseType","szIdx","szBits","getParamTypeInfo","getFlatParam","components","recursed_1","parsedDef","numTuples","szs","t1","openIdx","t2","closeIdx","t3","withArr","brackets","addedFirstBracket","canBreak","nestedDefs","isArrItem","isItem","defs","CALLDATA","evm_1","parsers","processors","index_1","functions_1","validators_1","util_1","baseUrl","timeout","retryCount","skipRetryOnWrongWallet","BASE_URL","activeWallets","DEFAULT_ACTIVE_WALLETS","getP256KeyPair","retryWrapper","buildRetryWrapper","unpackAndApplyStateData","getPubKeyBytes","getAppName","derive","getPublic","toArray","_ephemeralPub","validateEphemeralPub","pairingSecret","flag","_d","cachedData","nextCode","caseSensitive","_e","fetchEncryptedData","params","fetchEncData","getActiveWallet","external","uid","EMPTY_WALLET_UID","equals","internal","hasActiveWallet","resetActiveWallets","packStateData","getFwConstants","getFwVersionConst","fwVersion","getFwVersion","fix","minor","major","mutate","url","_f","_g","capabilities","JSON","stringify","warn","unpacked","parse","internalWallet","externalWallet","ephemeralPubBytes","fwVersionBytes","privKeyBytes","getP256KeyPairFromPub","PUBLIC","ETH_ABI_LATTICE_FW_TYPE_MAP","MAX_CHAIN_ID_BYTES","HANDLE_LARGER_CHAIN_ID","HARDENED_OFFSET","VERSION_BYTE","REQUEST_TYPE_BYTE","signingSchema","ethMsgProtocol","addressSizes","EXTERNAL_NETWORKS_BY_CHAIN_ID_URL","NETWORKS_BY_CHAIN_ID","ASCII_REGEX","EXTERNAL","latticeConstants_1","GET_ADDR_FLAGS","SECP256K1_PUB","LatticeGetAddressesFlag","secp256k1Pubkey","ED25519_PUB","ed25519Pubkey","BLS12_381_G1_PUB","bls12_381Pubkey","LatticeSignHash","none","LatticeSignCurve","secp256k1","ed25519","BLS12_381_G2","bls12_381","LatticeSignEncoding","solana","evm","ETH_DEPOSIT","eth_deposit","BLS_DST","BLS_DST_NUL","LatticeSignBlsDst","NUL","BLS_DST_POP","POP","ENC_DATA","SCHEMAS","BLS_KEYSTORE_EIP2335_PBKDF_V4","LatticeEncDataSchema","eip2335","ETH_CONSENSUS_SPEC","NETWORKS","MAINNET_GENESIS","networkName","forkVersion","validatorsRoot","DOMAINS","DEPOSIT","VOLUNTARY_EXIT","ETH","BTC_TRANSFER","ETH_TRANSFER","ERC20_TRANSFER","EXTRA_DATA","GENERAL_SIGNING","EIP712_ABI_LATTICE_FW_TYPE_MAP","uint8","uint16","uint24","uint32","uint40","uint48","uint56","uint64","uint72","uint80","uint88","uint96","uint104","uint112","uint120","uint128","uint136","uint144","uint152","uint160","uint168","uint176","uint184","uint192","uint200","uint208","uint216","uint224","uint232","uint240","uint248","uint256","int8","int16","int24","int32","int40","int48","int56","int64","int72","int80","int88","int96","int104","int112","int120","int128","int136","int144","int152","int160","int168","int176","int184","int192","int200","int208","int216","int224","int232","int240","int248","int256","uint","bytes1","bytes2","bytes3","bytes4","bytes5","bytes6","bytes7","bytes8","bytes9","bytes10","bytes11","bytes12","bytes13","bytes14","bytes15","bytes16","bytes17","bytes18","bytes19","bytes20","bytes21","bytes22","bytes23","bytes24","bytes25","bytes26","bytes27","bytes28","bytes29","bytes30","bytes31","bytes32","tuple1","tuple2","tuple3","tuple4","tuple5","tuple6","tuple7","tuple8","tuple9","tuple10","tuple11","tuple12","tuple13","tuple14","tuple15","tuple16","tuple17","SIGN_PERSONAL","enumIdx","TYPED_DATA","rawDataMaxLen","typeCodes","extraDataFrameSz","extraDataMaxFrames","genericSigning","gte","exp","legacy","reqMaxDataSz","ethMaxGasPrice","addrFlagsAllowed","ethMaxDataSz","ethMaxMsgSz","eip712MaxTypeParams","varAddrPathSzAllowed","eip712Supported","prehashAllowed","ethMsgPreHashAllowed","allowedEthTxTypes","personalSignHeaderSz","kvActionsAllowed","kvKeyMaxStrSz","kvValMaxStrSz","kvActionMaxNum","kvRemoveMaxNum","allowBtcLegacyAndSegwitAddrs","contractDeployKey","abiCategorySz","abiMaxRmv","baseReqSz","baseDataSz","hashTypes","curveTypes","encodingTypes","getAddressFlags","maxDecoderBufSz","calldataDecoding","reserved","maxSz","apiRoute","common_1","tx_1","bignumber_js_1","borc_1","eth_eip712_util_browser_1","rlp_1","secp256k1_1","stripZeros","first","addRecoveryParam","hashBuf","txData","hash_2","r","fixLen","rs","ecdsaRecover","pubToAddrStr","getRecoveryParam","pub","useEIP155","ensureHexBuffer","plus","chainIdBuf","getChainIdBuf","chainIdBN","times","chainIds","mainnet","roptsten","rinkeby","kovan","goerli","isValidChainIdHexNumStr","writeUInt32BE","getExtraData","fwConstants","MAX_BASE_MSG_SZ","EXTRA_DATA_ALLOWED","extraDataPayloads","maxSzAllowed","splitFrames","frame","szLE","parseEIP712Msg","types","forJSParser","isArrayType","singularType","isCustomType","parseEIP712Item","nBytes","Encoder","semanticTypes","get_personal_sign_prefix","L","get_rlp_encoded_preimage","rawTx","txType","buildEthereumMsgRequest","req","ethereumMsg","VAR_PATH_SZ","signerPathBuf","buildSignerPathBuf","displayHex","test","isAsciiStr","fwConst","prehash","buildPersonalSignRequest","primaryType","domain","shouldPrehash","TypedDataUtils","buildEIP712Request","validateEthereumMsgResponse","signer","encoded","buildEthereumTxRequest","eip155","MAX_BASE_DATA_SZ","isDeployment","eip1559IsAllowed","eip2930IsAllowed","isEip1559","isEip2930","chainID","chainUsesEIP155","chainIdBytes","nonceBytes","nonce","gasPriceBytes","gasLimitBytes","gasLimit","toRlpElem","valueBytes","dataBytes","maxPriorityFeePerGasBytes","maxFeePerGasBytes","maxPriorityFeePerGas","maxFeePerGas","gasPrice","PREHASH_FROM_ACCESS_LIST_1","accessList_1","accessList","listItem","storageKeys","txReqPayload","chainIdBufSz","readUInt8","PREHASH_UNSUPPORTED","extraDataPayloads_1","dataSz","chainIdExtraSz","dataToCopy","totalSz","writeUInt16BE","ethereum","buildEthRawTx","newSig","newRawTx","rlpEncodedWithSig","sigWithV","hashTransaction","serializedTx","ethConvertLegacyToGenericReq","common","Common","custom","hardfork","Hardfork","London","eips","chain","Chain","Mainnet","TransactionFactory","fromTxData","getMessageToSign","encodeAddKvRecordsRequest","validateAddKvRequest","sharedSecret","decryptedData","newEphemeralPub","validateConnectedClient","encryptedSecureRequest","requestType","LatticeSecureEncryptedRequestType","validateKvRecords","entries","_key","_val","validateKvRecord","String","decodeConnectResponse","validateConnectRequest","predicates_1","respPayloadData","connectSecureRequest","publicKey","doesFetchWalletsOnLoad","validateDeviceId","validateKey","validateBaseUrl","response","ProtocolConstants","pairingStatus","paired","encWalletData","getSharedSecret","decWalletData","aes256_decrypt","parseWallets","textDecoder","textEncoder","text","decodeFetchActiveWalletResponse","validActiveWallets","getWallets","validateActiveWallets","readUInt32BE","decodeFetchEncData","encodeFetchEncDataRequest","validateFetchEncDataRequest","uuid_1","ENC_DATA_ERR_STR","ENC_DATA_RESP_SZ","CIPHERTEXT","SALT","CHECKSUM","PUBKEY","activeWallet","validateWallet","validateStartPath","walletUID","respData","expectedSz","readUInt32LE","iterations","cipherText","salt","checksum","iv","formatEIP2335ExportData","resp","uuid","v4","getPathStr","kdf","function","dklen","prf","cipher","decodeGetAddressesResponse","encodeGetAddressesRequest","validateGetAddressesRequest","bitwise_1","_startPath","_n","_flag","wallet","validateNAddresses","validateIsUInt4","isValidAssetPath","sz","val_1","flagVal","flagBits","nibble","read","countBits","write","arePubkeys","respDataLength","msgSizes","secure","encrypted","pubBytes","addrBytes","addrStrLen","decodeGetKvRecordsResponse","encodeGetKvRecordsRequest","validateGetKvRequest","_type","_start","nTotal","nFetched","keySz","valSz","encodePairRequest","appName","finalizePairing","pubKeyBytes","nameBuf","derSig","toPaddedDER","encodeRemoveKvRecordsRequest","validateRemoveKvRequest","_ids","decodeSignResponse","encodeSignRequest","hash_js_1","bitcoin_1","ethereum_1","genericSigning_1","requestData","isGeneric","hasExtraPayloads","buildTransaction","request","reqPayload","extraData","btcRequest","changeVersion","changePubKeyHash","changeRecipient","sigStart","sigEnd","pubStart","pubEnd","preSerializedData","preImageTxHash","txHashPre","parseDER","validatedSig","parseGenericSigningResponse","ethAddr","getEncodedPayload","buildGenericSigningMsgRequest","decoder","omitPubkey","blsDst","encodedPayload","payloadBuf","origPayloadBuf","payloadDataSz","maxExpandedSz","existsIn","hasDecoder","decoderFits","decoderBuf","idx","blsDstBuf","didPrehash","payloadData","generic","parsed","compression","vBn","getV","toArrayLike","allowedEncodings","Calldata","identity","sha1","blake3","md4","md5","bmt","x11","LatticeResponseCode","LatticeMsgType","LatticeProtocolVersion","LatticeSecureMsgType","aesIv","notPaired","responseMsg","success","invalidMsg","unsupportedVersion","deviceBusy","userTimeout","userDeclined","pairFailed","pairDisabled","permissionDisabled","internalError","gceTimeout","wrongWallet","deviceLocked","disabled","already","invalidEphemId","header","encryptedData","serializeSecureRequestMsg","msgId","secureRequestType","payloadLen","isValidConnectPayloadDataSz","isValidEncryptedPayloadDataSz","msgSz","v1","decryptEncryptedLatticeResponseData","encPayloadData","decData","checksumOffset","validChecksum","validSz","serPayloadData","serializeSecureRequestConnectPayloadData","requestDataSize","preEncryptedData","preEncryptedDataChecksum","_encryptedData","aes256_encrypt","ephemeralId","getEphemeralId","serializeSecureRequestEncryptedPayloadData","extendStatics","__extends","setPrototypeOf","__proto__","__","LatticeResponseError","_super","responseCode","errorMessage","_this","buildLatticeResponseErrorMessage","errors_1","shouldUseEVMLegacyConverter","fetchWithTimeout","method","headers","validateRequestError","json","parseLattice1Response","retries","isDeviceBusy","ms","setTimeout","isWrongWallet","isInvalidEphemeralId","isFWSupported","LE","walletData","versionSupported","_major","_minor","_fix","pathStr","isValid4ByteResponse","isValidBlockExplorerResponse","validateSharedSecret","validateFwVersion","validateFwConstants","validateUrl","validateAppName","isEmpty_1","isUInt4","URL","errno","results","__asyncValues","asyncIterator","__values","settle","fetchCalldataDecoder","selectDefFrom4byteABI","ec","aes_js_1","bn_js_1","crc_32_1","elliptic_1","inRange_1","isInteger_1","_1","EC","protoVer","msgType","readUInt16BE","errMsg","toDER","allowedPurposes","allowedCoins","frameSz","frames","zeroIsNull","isNumber","bn","toFixed","isBase10NumStr","aesCbc","ModeOfOperation","cbc","paddedData","padding","pkcs7","encrypt","decrypt","sigBuf","rLen","sLen","priv","keyFromPrivate","keyFromPublic","allowFormatChars","extraChars","some","fetchExternalNetworkForChainId","err_1","fetch","abiData","selector","created_at","getTime","text_signature","fetchAndCache","responseClone","err_2","globalThis","Request","open","ok","put","error","fetchSupportedChainData","supportedChain","buildUrlForSupportedChainAndAddress","fetch4byteData","encodeDef","postProcessDef","e_1","e_2","nestedCalldata","_h","_j","e_2_1","_k","_l","e_1_1","_m","possNestedDefs","possNestedDefs_1","possNestedDefs_1_1","e_3","e_4","_nestedDefs","shouldInclude","d_1","d_1_1","_nestedSelector","_nestedAbi","_nestedDef","e_4_1","nestedSelector","nestedAbi","nestedDef","e_3_1","_data","_chainId","recurse","isHexString","cachedNetwork","parsedAbi","def_1","err_5","err_6","controller","timeoutId","AbortController","abort","signal","clearTimeout","deviceIdBuffer","passwordBuffer","appNameBuffer","preImage","legacyTxArray","BN","fromSerializedData","supports","Capability","EIP155ReplayProtection","toNumber","recovery","recovery0","recovery1","pubkeyStr","recovery0Str","recovery1Str","muln","addn","networkId","defaultHardfork","consensus","algorithm","clique","period","epoch","comment","genesis","timestamp","difficulty","hardforks","block","forkHash","ttd","bootstrapNodes","ip","port","location","dnsNetworks","multibase","varint","validate","multihash","toHexString","fromHexString","toB58String","fromB58String","isValidCode","hashfn","coerceCode","isAppCode","ethash","events_1","ropsten","eips_1","enums_1","hardforks_1","EventEmitter","_eips","_customChains","customChains","_chainParams","setChain","DEFAULT_HARDFORK","Merge","HARDFORK_CHANGES","hf","_hardfork","setHardfork","setEIPs","chainParamsOrName","baseChain","standardChainParams","_getChainParams","CustomChain","PolygonMainnet","PolygonMumbai","ArbitrumRinkebyTestnet","ArbitrumOne","xDaiChain","OptimisticKovan","Berlin","OptimisticEthereum","fromGethGenesis","genesisJson","genesisHash","mergeForkIdPostMerge","genesisParams","parseGethGenesis","setForkHashes","isSupportedChainId","initializedChains","_getInitializedChains","Boolean","required","existing","hfChanges","emit","getHardforkByBlockNumber","blockNumber","td","toType","TypeOutput","hfs","mergeIndex","findIndex","hfIndex","hfStartIndex","max","setHardforkByBlockNumber","_getHardfork","eip","EIPs","minHF","gteHardfork","requiredEIPs","elem","isActivatedEIP","topic","paramByEIP","paramByHardfork","hfEIPs","valueEIP","eipParams","paramByBlock","hardforkIsActiveOnBlock","hfBlock","hardforkBlock","activeOnBlock","hardforkGteHardfork","hardfork1","hardfork2","posHf1","posHf2","hardforkTimestamp","eipBlock","hardforkTTD","isHardforkBlock","nextHardforkBlockOrTimestamp","currHfTimeOrBlock","nextHf","hfTimeOrBlock","nextHfBlock","nextHardforkBlock","isNextHardforkBlock","_calcForkHash","hfBuffer","prevBlockOrTime","blockOrTime","hfBlockBuffer","inputBuffer","intToBuffer","hardforkForForkHash","resArray","chainName","consensusType","consensusAlgorithm","consensusConfig","getPrototypeOf","removeAllListeners","chains","minimumHardfork","gasConfig","gasPrices","tstore","tload","vm","pow","baseFeeMaxChangeDenominator","elasticityMultiplier","initialBaseFee","beginsub","returnsub","jumpsub","Bls12381G1AddGas","Bls12381G1MulGas","Bls12381G2AddGas","Bls12381G2MulGas","Bls12381PairingBaseGas","Bls12381PairingPerPairGas","Bls12381MapG1Gas","Bls12381MapG2Gas","Bls12381MultiExpGasDiscount","modexpGquaddivisor","counter","RangeError","REST","MSB","coldsload","coldaccountaccess","warmstorageread","sstoreCleanGasEIP2200","sstoreNoopGasEIP2200","sstoreDirtyGasEIP2200","sstoreInitRefundEIP2200","sstoreCleanRefundEIP2200","callcode","delegatecall","staticcall","balance","extcodesize","extcodecopy","extcodehash","sload","sstore","accessListStorageKeyCost","accessListAddressCost","auth","authcall","authcallValueTransfer","basefee","maxRefundQuotient","selfdestructRefund","sstoreClearRefundEIP2200","difficultyBombDelay","num","oldOffset","INT","MSBALL","push0","initCodeWordCost","maxInitCodeSize","dataGasPerBlob","targetDataGasPerBlock","maxDataGasPerBlock","dataGasPriceUpdateFraction","simpleGasPerBlob","minDataGasPrice","kzgPointEvaluationGasPrecompilePrice","datahash","sharding","blobCommitmentVersionKzg","fieldElementsPerBlob","encodingLength","ConsensusAlgorithm","ConsensusType","ecAdd","ecMul","ecPairing","ecPairingWord","revert","returndatasize","returndatacopy","minerReward","minGasLimit","gasLimitBoundDivisor","tierStep","expByte","sha3","sha3Word","sstoreSet","sstoreReset","sstoreRefund","jumpdest","logData","logTopic","callStipend","callValueTransfer","callNewAccount","memory","quadCoeffDiv","createData","txCreation","txDataZero","txDataNonZero","ecRecover","sha256Word","ripemd160Word","identityWord","stop","mul","sub","div","sdiv","smod","addmod","mulmod","signextend","lt","gt","slt","sgt","iszero","and","or","xor","not","origin","caller","callvalue","calldataload","calldatasize","calldatacopy","codesize","codecopy","gasprice","blockhash","coinbase","gaslimit","mload","mstore","mstore8","jump","jumpi","pc","msize","gas","dup","swap","invalid","selfdestruct","stackLimit","callCreateDepth","maxExtraDataSize","minimumDifficulty","difficultyBoundDivisor","durationLimit","epochDuration","timebombPeriod","netSstoreNoopGas","netSstoreInitGas","netSstoreCleanGas","netSstoreDirtyGas","netSstoreClearRefund","netSstoreResetRefund","netSstoreResetClearRefund","shl","shr","sar","create2","N1","N2","N3","N4","N5","N6","N7","N8","N9","chainstart","homestead","dao","tangerineWhistle","spuriousDragon","byzantium","constantinople","petersburg","istanbul","muirGlacier","berlin","london","shanghai","arrowGlacier","grayGlacier","mergeForkIdTransition","merge","shardingFork","blake2Round","sstoreSentryGasEIP2200","sstoreInitGasEIP2200","chainid","selfbalance","casper","maxCodeSize","CID","cidForWeb","ipfsHash","cid","toV1","dnsLabel","b36","cidV0ToV1Base32","parseGethParams","config","mixHash","baseFeePerGas","genesisTimestamp","intToHex","stripHexPrefix","formatNonce","eip155Block","eip158Block","blockperiodseconds","epochlength","forkMap","Homestead","Dao","TangerineWhistle","SpuriousDragon","Byzantium","Constantinople","Petersburg","Istanbul","MuirGlacier","MergeForkIdTransition","postMerge","Shanghai","isTimestamp","ShardingForkDev","forkMapRev","configHardforkNames","nameBlock","fork","terminalTotalDifficulty","mergeConfig","postMergeIndex","splice","latestHardfork","Chainstart","field","BaseTransaction","types_1","dataFee","activeCapabilities","DEFAULT_CHAIN","bufferToBigInt","toBuffer","txOptions","toB","vB","rB","sB","Address","_validateCannotExceedMaxInteger","capability","stringError","errors","getBaseFee","isSigned","verifySignature","_validateYParity","_errorMsg","_validateHighS","SECP256K1_ORDER_DIV_2","txFee","getDataFee","toCreationAddress","txCreationFee","cost","dataLength","getSenderPublicKey","unpadBuffer","getSenderAddress","publicToAddress","privateKey","hackApplied","msgHash","ecsign","_processSignature","_getCommon","chainIdBigInt","cannotEqual","MAX_UINT64","MAX_INTEGER","_validateNotArray","txDataKeys","_getSharedErrorPostfix","bufferToHex","postfix","BYTES_PER_FIELD_ELEMENT","FIELD_ELEMENTS_PER_BLOB","MAX_TX_WRAP_KZG_COMMITMENTS","LIMIT_BLOBS_PER_TX","MAX_VERSIONED_HASHES_LIST_SIZE","MAX_ACCESS_LIST_SIZE","MAX_CALLDATA_SIZE","FeeMarketEIP1559Transaction","keccak_1","baseTransaction_1","util_2","TRANSACTION_TYPE_BUFFER","accessListData","AccessLists","getAccessListData","AccessListJSON","verifyAccessList","checkMaxInitCodeSize","fromSerializedTx","serialized","arrToBufArr","fromValuesArray","validateNoLeadingZeroes","getDataFeeEIP2930","isFrozen","getUpfrontCost","baseFee","prio","maxBase","raw","bigIntToUnpaddedBuffer","bufArrToArr","hashMessage","getMessageToVerifySignature","ecrecover","toJSON","accessListJSON","getAccessListJSON","bigIntToHex","errorStr","AccessListEIP2930Transaction","BlobEIP4844Transaction","ssz_1","kzg_1","blobHelpers_1","maxFeePerDataGas","versionedHashes","vh","blobs","blob","kzgCommitments","commitment","aggregateKzgProof","kzgProof","minimalFromNetworkWrapper","fromSerializedBlobTxNetworkWrapper","wrapper","BlobNetworkTransactionWrapper","deserialize","decodedTx","commitments","kzg","verifyAggregateKzgProof","computedVersionedHash","computeVersionedHash","byteArrayEquals","validateBlobTransactionNetworkWrapper","blobVersionedHashes","blobKzgs","kzgAggregatedProof","accessListItem","fromString","el","signature","yParity","SignedBlobTransactionType","toValue","sszEncodedTx","serializeNetworkWrapper","blobArrays","serializedTxWrapper","blobTxToNetworkWrapperDataFormat","_hashMessage","unsignedHash","BlobTransactionType","numBlobs","normalizeTxParams","_txParams","txParams","setLengthLeft","multiC","multiH","hexStringToBuffer","profiles","helpers","contentHash","codec","getCodec","rmPrefix","profile","fromIpfs","fromSkylink","skylink","fromSwarm","swarmHash","fromArweave","arweave","encodedValue","addPrefix","Transaction","initKZG","eip1559Transaction_1","eip2930Transaction_1","eip4844Transaction_1","legacyTransaction_1","transactionFactory_1","kzgNotLoaded","freeTrustedSetup","loadTrustedSetup","blobToKzgCommitment","computeAggregateKzgProof","verifyKzgProof","kzgLib","trustedSetupPath","meetsEIP155","chainIdDoubled","_validateTxV","_getMessageToSign","numSub","providers_1","fromRpc_1","fromBlockBodyData","fromEthersProvider","provider","prov","JsonRpcProvider","send","normedTx","KZGProofType","KZGCommitmentType","ECDSASignatureType","AccessTupleType","AddressType","isAccessList","isAccessListBuffer","Bytes20","ByteVectorType","Bytes32","Bytes48","Uint64","UintBigintType","Uint256","firstItem","ContainerType","ListCompositeType","UnionType","NoneType","ByteListType","BooleanType","bufferAccessList","newAccessList","addressBuffer","storageItems","jsonItem","storageSlots","storageSlot","JSONItem","slot","slots","commitmentsToVersionedHashes","blobsToCommitments","getBlobs","USEFUL_BYTES_PER_BLOB","get_blob","chunk","blobs_len","pdata","datalen","get_padded","blobCommitmentVersion","hashes","showProductTour","base64","isCryptographicIPNS","encodes","skynet","toUint8Array","swarm","ipfs","ipns","utf8","decodes","hexMultiHash","fromUint8Array","globalObject","BigNumber","isNumeric","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","z","compare","xc","yc","intCheck","isOdd","toExponential","charAt","toFixedPoint","zs","configObject","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","ALPHABET","alphabetHasNormalDecimalDigits","caseChanged","isNum","_isBigNumber","replace","search","DEBUG","toUpperCase","format","rm","c0","ne","maxOrMin","args","normalise","sd","ni","rd","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","minimum","dp","rand","sum","decimal","toBaseOut","baseIn","baseOut","arrL","callerIsToString","multiply","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","integerValue","isEqualTo","isFinite","isGreaterThan","isGreaterThanOrEqualTo","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","n0","n1","toPrecision","define","amd","window","elliptic","curve","curves","eddsa","getNAF","getJSF","assert","BaseCurve","conf","red","prime","mont","zero","toRed","one","two","pointFromJSON","gRed","_wnafT1","_wnafT2","_wnafT3","_wnafT4","_bitLength","bitLength","adjustCount","cmpn","redN","_maxwellTrick","BasePoint","precomputed","point","_fixedNafMul","doubles","_getDoubles","naf","I","nafW","repr","jpoint","mixedAdd","points","neg","toP","_wnafMul","nafPoints","_getNAFPoints","wnd","dblp","_wnafMulAdd","defW","coeffs","jacobianResult","wndWidth","comb","toJ","redNeg","jsf","ja","jb","decodePoint","pointFromX","encodeCompressed","_encode","compact","getX","getY","isEven","precompute","power","beta","_getBeta","_hasDoubles","dbl","inherits","EdwardsCurve","twisted","mOneA","extended","umod","c2","redSqr","dd","redAdd","fromRed","oneC","Point","zOne","redMul","redInvm","_mulA","_mulC","odd","x2","rhs","redSub","lhs","y2","redSqrt","pointFromY","isInfinity","normalize","fromJSON","inspect","_extDbl","redIAdd","redISub","nx","ny","nt","nz","_projDbl","_extAdd","_projAdd","mulAdd","k1","jmulAdd","zi","other","eqXToP","rx","iadd","short","edwards","MontCurve","i4","a24","aa","bb","diffAdd","da","iushrn","andln","jumlAdd","ShortCurve","tinv","zeroA","threeA","endo","_getEndomorphism","_endoWnafT1","_endoWnafT2","isRed","inf","forceRed","JPoint","modn","lambda","betas","_getEndoRoots","lambdas","basis","vec","_getEndoBasis","ntinv","a0","b0","a1","b1","a2","b2","prevR","aprxSqrt","ushrn","u","x1","y1","len1","sqr","negative","_endoSplit","v2","c1","divRound","q1","q2","ax","_endoWnafMulAdd","npoints","ncoeffs","ineg","pre","endoMul","obj2point","ys1","dyinv","_precompute","negate","zinv","zinv2","ay","pz2","z2","u1","u2","s2","h2","h3","jx","jy","jz","jz4","jyd","jx2","jyd2","jyd4","dny","_zeroDbl","_threeDbl","_dbl","xx","yy","yyyy","yyyy8","c8","delta","gamma","alpha","beta4","beta8","ggamma8","jy2","jxd4","jyd8","trpl","zz","mm","ee","yyu4","kbase","z3","pz3","PresetCurve","defineCurve","sha384","sha512","HmacDRBG","KeyPair","Signature","nh","keyPair","fromPrivate","fromPublic","genKeyPair","drbg","pers","persEnc","entropy","hmacStrength","entropyEnc","ns2","generate","iaddn","_truncateToN","truncOnly","bkey","getPrivate","ns1","iter","kp","kpX","invm","recoveryParam","canonical","verify","sinv","recoverPubKey","isYOdd","isSecondKey","rInv","getKeyRecoveryParam","Q","Qprime","_importPrivate","privEnc","_importPublic","pubEnc","reason","_importDER","Position","place","getLength","initial","octetLen","rmPadding","constructLength","octets","LN2","rlen","slen","backHalf","parseBytes","EDDSA","pointClass","secret","keyFromSecret","hashInt","messagePrefix","Rencoded","encodePoint","s_","S","makeSignature","SG","intFromLE","fromSecret","lastIx","normed","xIsOdd","encodeInt","decodeInt","isPoint","cachedProperty","_secret","_pub","_pubBytes","privBytes","getSecret","_R","_S","_Rencoded","_Sencoded","Sencoded","minAssert","minUtils","zero2","ws","isubn","m8","m14","m24","computer","description","main","files","scripts","lint","unit","repository","keywords","author","license","bugs","homepage","devDependencies","brfs","coveralls","eslint","grunt","mocha","dependencies","brorand","keccak512","keccak384","keccak224","sha3_1","isSafeInteger","lengths","instance","checkFinished","ecparams","loadPublicKey","xbuf","redIMul","loadCompressedPublicKey","ybuf","x3","loadUncompressedPublicKey","savePublicKey","contextRandomize","privateKeyVerify","seckey","privateKeyNegate","privateKeyTweakAdd","tweak","isub","tweaked","privateKeyTweakMul","imul","publicKeyVerify","publicKeyCreate","publicKeyConvert","publicKeyNegate","publicKeyCombine","pairs","publicKeyTweakAdd","publicKeyTweakMul","signatureNormalize","signatureExport","sigR","sigS","lenR","posR","lenS","posS","outputlen","signatureImport","ecdsaSign","noncefn","_noncefn","recid","ecdsaVerify","msg32","sigObj","sigr","ecdh","scalar","cond","isUint8Array","isCompressed","toTypeString","getAssertedOutput","seed","compressed","_nil","_parse","_stringify","_v2","_v3","_v4","_validate","_version","_interopRequireDefault","_uuid","transaction","dappSuggestedGasFees","history","loadingDefaults","time","note","tokenBalanceChanges","simulationData","getOutputLength","inputLength8","safeAdd","lsw","md5cmn","cnt","md5ff","md5gg","md5hh","md5ii","_default","unescape","encodeURIComponent","length32","hexTab","md5ToHexEncodedArray","olda","oldb","oldc","oldd","wordsToMd5","length8","bytesToWords","randomUUID","rnds8","ROTL","K","N","M","W","T","unsafeStringify","byteToHex","_rng","_nodeId","_clockseq","_lastMSecs","_lastNSecs","clockseq","seedBytes","rng","msecs","nsecs","dt","tl","tmh","_md","DNS","hashfunc","generateUUID","namespace","_namespace","stringToBytes","_native","rnds","_sha","_regex","denyList","URLWithLegacySupport","URLSearchParams","defaultBase","relative","protocolMap","defaultProtocol","urlParsed","host","pathname","username","query","hostname","href","searchParams","createObjectURL","revokeObjectURL","userPass","sep","global","factory","_Base64","Base64","gBase64","noConflict","Meteor","VERSION","_hasatob","atob","_hasbtoa","btoa","_hasBuffer","_TD","_TE","b64chs","b64tab","tab","b64re","_fromCC","fromCharCode","_U8Afrom","it","_mkUriSafe","src","m0","_tidyB64","btoaPolyfill","bin","asc","_btoa","_fromUint8Array","u8a","strs","urlsafe","cb_utob","cc","re_utob","utob","encodeURI","re_btou","cb_btou","cccc","btou","atobPolyfill","u24","r1","r2","_atob","_toUint8Array","_unURI","_noEnum","extendString","_add","extendUint8Array","fromBase64","toBase64","encodeURL","isValid","extendBuiltins","JsonRpcEngine","safe_event_emitter_1","eth_rpc_errors_1","_middleware","middleware","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","middlewareError","isComplete","returnHandlers","_runAllMiddleware","_runReturnHandlers","handlerCallback","reqs","responses","_err","callerReq","EthereumRpcError","errorCodes","rpc","invalidRequest","jsonrpc","_processRequest","_error","serializeError","_checkForCompletion","middlewareStack","_runMiddleware","returnHandler","jsonify","handlers","handler","createAsyncMiddleware","asyncMiddleware","resolveNextPromise","nextPromise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","createScaffoldMiddleware","getUniqueId","idCounter","createIdRemapMiddleware","getUniqueId_1","_end","originalId","newId","mergeMiddleware","JsonRpcEngine_1","safeApply","context","Reflect","SafeEventEmitter","doError","events","_events","er","listeners","arrayClone","readable_stream_1","Duplex","objectMode","_encoding","streamWriteCallback","on","idMap","errorObj","notif","retryOnMessage","sendToStream","processNotification","responseId","processResponse","createStreamMiddleware","createEngineStream","createEngineStream_1","createStreamMiddleware_1","_TOKENS","symbol","decimals","image","isERC721","aggregators","ignoredTokens","detectedTokens","allIgnoredTokens","allDetectedTokens","iteratee","baseAssignValue","object","objValue","copyObject","source","keysIn","Stack","arrayEach","assignValue","baseAssign","baseAssignIn","cloneBuffer","copyArray","copySymbols","copySymbolsIn","getAllKeys","getAllKeysIn","getTag","initCloneArray","initCloneByTag","initCloneObject","isMap","isObject","isSet","argsTag","funcTag","objectTag","cloneableTags","baseClone","bitmask","customizer","stack","isDeep","isFlat","isFull","isArr","isFunc","stacked","subValue","props","objectCreate","baseCreate","proto","nativeMax","nativeMin","isObjectLike","isPrototype","nativeKeysIn","isProto","trimmedEndIndex","reTrimStart","arrayBuffer","root","freeExports","nodeType","freeModule","allocUnsafe","cloneArrayBuffer","reFlags","regexp","exec","lastIndex","symbolProto","symbolValueOf","typedArray","isNew","newValue","getSymbols","getSymbolsIn","getNative","func","baseGetAllKeys","getPrototype","overArg","arrayPush","stubArray","getOwnPropertySymbols","cloneDataView","cloneRegExp","cloneSymbol","cloneTypedArray","Ctor","providerConfig","rpcPrefs","blockExplorerUrl","ticker","networkConfigurationId","nickname","rpcUrl","optimism","imageUrl","polygon","binance","gnosis","arbitrum","avalanche","celo","zkSync","localhost"],"mappings":"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A,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,mBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,mBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,oBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,oBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAC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gCACAlxB,IAAA,oCACAmxB,QAAA,CACAC,UAAA,aACA5c,SAAA,SACA6c,WAAA,EACAhd,MAAA,qBACAqL,UAAA,gPAEA4R,UAAA,CACA,CACA54C,KAAA,aACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,mBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,aACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,WACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,QACAC,SAAA,cAEA,CACA,+IACA94C,KAAA,QACA+4C,IAAA,WACAF,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,wBACA64C,MAAA,KACAC,SAAA,MAEA,CACA94C,KAAA,WACA64C,MAAA,KACAC,SAAA,OAGAE,eAAA,CACA,CACAC,GAAA,eACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,uBAEA,CACAS,GAAA,eACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,uBAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,uBAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,uBAEA,CACAS,GAAA,cACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,gCAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,8BAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,8BAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,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T,QAAA,CACAmb,KAAA,UACA0V,QAAA,EACAuiC,UAAA,EACAC,gBAAA,QACAC,UAAA,CACA3qD,KAAA,MACA4qD,UAAA,SACA6B,OAAA,IAEAzB,QAAA,0BACAlxB,IAAA,wBACAmxB,QAAA,CACA3c,SAAA,IACA6c,WAAA,YACAhd,MAAA,qBACAqL,UAAA,sEAEA4R,UAAA,CACA,CACA54C,KAAA,aACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,MACAC,SAAA,cAEA,CACA94C,KAAA,MACA64C,MAAA,MACAC,SAAA,cAEA,CACA94C,KAAA,mBACA64C,MAAA,OACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,OACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,MACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,MACAC,SAAA,cAEA,CACA94C,KAAA,aACA64C,MAAA,MACAC,SAAA,cAEA,CACA94C,KAAA,WACA64C,MAAA,OACAC,SAAA,cAEA,CACA94C,KAAA,cACA64C,MAAA,KACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,eACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,cACA64C,MAAA,OACAC,SAAA,cAEA,CACA,yIACA94C,KAAA,QACA+4C,IAAA,0BACAF,MAAA,SACAC,SAAA,cAEA,CACA94C,KAAA,wBACA64C,MAAA,KACAC,SAAA,MAEA,CACA94C,KAAA,WACA64C,MAAA,KACAC,SAAA,OAGAE,eAAA,CACA,CACAC,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,qBACAX,QAAA,mCAEA,CACAS,GAAA,cACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,gBACAX,QAAA,8BAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,gBACAX,QAAA,8BAEA,CACAS,GAAA,iBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,mBACAX,QAAA,iCAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,oBACAX,QAAA,oCAEA,CACAS,GAAA,kBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,kBACAX,QAAA,kCAEA,CACAS,GAAA,iBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,iBACAX,QAAA,iCAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,aACAX,QAAA,8BAGAY,YAAA,CACA,4F,wRCtKAjhD,EAAAtT,QAAA,CACAmb,KAAA,UACA0V,QAAA,EACAuiC,UAAA,EACAC,gBAAA,SACAC,UAAA,CACA3qD,KAAA,MACA4qD,UAAA,SACAC,OAAA,CACAC,OAAA,GACAC,MAAA,MAGAC,QAAA,mBACAlxB,IAAA,yBACAmxB,QAAA,CACAC,UAAA,aACA5c,SAAA,KACA6c,WAAA,EACAhd,MAAA,qBACAqL,UAAA,gUAEA4R,UAAA,CACA,CACA54C,KAAA,aACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,mBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,aACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,WACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,QACA64C,MAAA,KACAC,SAAA,MAEA,CACA94C,KAAA,WACA64C,MAAA,KACAC,SAAA,OAGAE,eAAA,CACA,CACAC,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,MAEA,CACAS,GAAA,eACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,UAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,WAGAY,YAAA,CACA,4F,wRC5GAjhD,EAAAtT,QAAA,CACAmb,KAAA,UACA0V,QAAA,EACAuiC,UAAA,EACAC,gBAAA,QACAC,UAAA,CACA3qD,KAAA,MACA4qD,UAAA,SACA6B,OAAA,IAEAzB,QAAA,mBACAlxB,IAAA,sCACAmxB,QAAA,CACA3c,SAAA,SACA6c,WAAA,QACAhd,MAAA,qBACAqL,UAAA,sEAEA4R,UAAA,CACA,CACA54C,KAAA,aACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,mBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,GACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,KACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,MACAC,SAAA,cAEA,CACA94C,KAAA,aACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,WACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,cACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,SACAC,SAAA,cAEA,CACA,oFACA94C,KAAA,QACA+4C,IAAA,oBACAF,MAAA,KACAC,SAAA,cAEA,CACA94C,KAAA,wBACA64C,MAAA,KACAC,SAAA,MAEA,CACA94C,KAAA,WACA64C,MAAA,KACAC,SAAA,OAGAE,eAAA,CACA,CACAC,GAAA,cACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,iBAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,mBAEA,CACAS,GAAA,iBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,UAEA,CACAS,GAAA,iBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,UAGAY,YAAA,CACA,4F,wRC3HAjhD,EAAAtT,QAAA,CACAmb,KAAA,UACA0V,QAAA,SACAuiC,UAAA,SACAC,gBAAA,QACAC,UAAA,CACA3qD,KAAA,MACA4qD,UAAA,SACA6B,OAAA,IAEAzB,QAAA,sCACAlxB,IAAA,qDACAmxB,QAAA,CACAC,UAAA,aACA5c,SAAA,IACA6c,WAAA,OACAhd,MAAA,qBACAqL,UAAA,sEAEA4R,UAAA,CACA,CACA54C,KAAA,aACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,mBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,aACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,WACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,cACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,EACAC,SAAA,cAEA,CACA,gJACA94C,KAAA,QACA+4C,IAAA,oBACAF,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,wBACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,WACA64C,MAAA,KACAH,UAAA,aACAI,SAAA,eAGAE,eAAA,CACA,CACAC,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,QAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,QAEA,CACAS,GAAA,iBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,MAEA,CACAS,GAAA,eACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,aAGAY,YAAA,CACA,4F,4jBC5HAz0D,OAAAC,eAAAC,E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A,cACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,gCAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,8BAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,8BAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,+BAGAY,YAAA,CACA,2F,kUCvJAjhD,EAAAtT,QAAA,CACAmb,KAAA,UACA0V,QAAA,EACAuiC,UAAA,EACAC,gBAAA,QACAC,UAAA,CACA3qD,KAAA,MACA4qD,UAAA,SACA6B,OAAA,IAEAzB,QAAA,0BACAlxB,IAAA,wBACAmxB,QAAA,CACA3c,SAAA,IACA6c,WAAA,YACAhd,MAAA,qBACAqL,UAAA,sEAEA4R,UAAA,CACA,CACA54C,KAAA,aACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,MACAC,SAAA,cAEA,CACA94C,KAAA,MACA64C,MAAA,MACAC,SAAA,cAEA,CACA94C,KAAA,mBACA64C,MAAA,OACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,OACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,MACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,MACAC,SAAA,cAEA,CACA94C,KAAA,aACA64C,MAAA,MACAC,SAAA,cAEA,CACA94C,KAAA,WACA64C,MAAA,OACAC,SAAA,cAEA,CACA94C,KAAA,cACA64C,MAAA,KACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,eACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,cACA64C,MAAA,OACAC,SAAA,cAEA,CACA,yIACA94C,KAAA,QACA+4C,IAAA,0BACAF,MAAA,SACAC,SAAA,cAEA,CACA94C,KAAA,wBACA64C,MAAA,KACAC,SAAA,MAEA,CACA94C,KAAA,WACA64C,MAAA,KACAH,UAAA,aACAI,SAAA,eAGAE,eAAA,CACA,CACAC,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,qBACAX,QAAA,mCAEA,CACAS,GAAA,cACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,gBACAX,QAAA,8BAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,gBACAX,QAAA,wBAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,mBACAX,QAAA,yBAGAY,YAAA,CACA,4F,mUC3IAjhD,EAAAtT,QAAA,CACAmb,KAAA,UACA0V,QAAA,EACAuiC,UAAA,EACAC,gBAAA,SACAC,UAAA,CACA3qD,KAAA,MACA4qD,UAAA,SACAC,OAAA,CACAC,OAAA,GACAC,MAAA,MAGAC,QAAA,mBACAlxB,IAAA,yBACAmxB,QAAA,CACAC,UAAA,aACA5c,SAAA,KACA6c,WAAA,EACAhd,MAAA,qBACAqL,UAAA,gUAEA4R,UAAA,CACA,CACA54C,KAAA,aACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,mBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,aACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,WACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,QACA64C,MAAA,KACAC,SAAA,MAEA,CACA94C,KAAA,WACA64C,MAAA,KACAC,SAAA,OAGAE,eAAA,CACA,CACAC,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,MAEA,CACAS,GAAA,eACAC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AAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,SACAC,SAAA,cAEA,CACA,oFACA94C,KAAA,QACA+4C,IAAA,oBACAF,MAAA,KACAC,SAAA,cAEA,CACA94C,KAAA,wBACA64C,MAAA,KACAC,SAAA,MAEA,CACA94C,KAAA,WACA64C,MAAA,KACAC,SAAA,OAGAE,eAAA,CACA,CACAC,GAAA,cACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,iBAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,mBAEA,CACAS,GAAA,iBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,UAEA,CACAS,GAAA,iBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,UAGAY,YAAA,CACA,4F,mUC3HAjhD,EAAAtT,QAAA,CACAmb,KAAA,UACA0V,QAAA,SACAuiC,UAAA,SACAC,gBAAA,QACAC,UAAA,CACA3qD,KAAA,MACA4qD,UAAA,SACA6B,OAAA,IAEAzB,QAAA,sCACAlxB,IAAA,qDACAmxB,QAAA,CACAC,UAAA,aACA5c,SAAA,IACA6c,WAAA,OACAhd,MAAA,qBACAqL,UAAA,sEAEA4R,UAAA,CACA,CACA54C,KAAA,aACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,mBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,YACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,iBACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,aACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,WACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,cACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,EACAC,SAAA,cAEA,CACA94C,KAAA,SACA64C,MAAA,EACAC,SAAA,cAEA,CACA,gJACA94C,KAAA,QACA+4C,IAAA,oBACAF,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,wBACA64C,MAAA,QACAC,SAAA,cAEA,CACA94C,KAAA,WACA64C,MAAA,KACAH,UAAA,aACAI,SAAA,eAGAE,eAAA,CACA,CACAC,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,QAEA,CACAS,GAAA,gBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,QAEA,CACAS,GAAA,iBACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,MAEA,CACAS,GAAA,eACAC,KAAA,MACAj3C,GAAA,mIACAk3C,SAAA,GACAX,QAAA,aAGAY,YAAA,CACA,4F,umBC5HAz0D,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IACAD,EAAAm5C,YAAA,EACA,MAAAxZ,EAAAv/B,EAAA,oBACAurD,EAAAvrD,EAAA,UACAi1D,EAAAj1D,EAAA,UACA+yC,EAAA/yC,EAAA,wBACA2yC,EAAA3yC,EAAA,yBACA6yC,EAAA7yC,EAAA,yBACAk1D,EAAAl1D,EAAA,yBACAgf,EAAAhf,EAAA,yBACAm1D,EAAAn1D,EAAA,UACAo1D,EAAAp1D,EAAA,WACAq1D,EAAAr1D,EAAA,eACA4R,EAAA5R,EAAA,WASA,MAAA+4C,UAAAkc,EAAAK,aACA,WAAAn1D,CAAA8N,GACAzN,QACAC,KAAA80D,MAAA,GACA90D,KAAA+0D,cAAAvnD,EAAAwnD,cAAA,GACAh1D,KAAAi1D,aAAAj1D,KAAAk1D,SAAA1nD,EAAAorC,OACA54C,KAAAm1D,iBAAAn1D,KAAAi1D,aAAAzC,iBAAAmC,EAAAlc,SAAA2c,MAEAp1D,KAAAq1D,iBAAAr1D,KAAAkzD,YAAA/3C,KAAAm6C,GAAA,CACAA,EAAAh7C,KACAs6C,EAAA1B,UAAAoC,EAAAh7C,SAEAta,KAAAu1D,UAAAv1D,KAAAm1D,iBACA3nD,EAAAgrC,WAAA7yC,WACA3F,KAAAw1D,YAAAhoD,EAAAgrC,UAEAhrC,EAAAmrC,MACA34C,KAAAy1D,QAAAjoD,EAAAmrC,KAEA,CAyBA,aAAAJ,CAAAmd,EAAAloD,EAAA,IACA,MAAAmoD,EAAAnoD,EAAAmoD,WAAA,UACAC,EAAA,IAAAtd,EAAAud,gBAAAF,IAEA,GADAC,EAAA,oBACA,iBAAAF,EACA,WAAApd,EAAA,CACAM,MAAA,IACAgd,KACAF,MAEAloD,IAIA,GAAAkoD,IAAAf,EAAAmB,YAAAC,eACA,OAAAzd,EAAAC,OAAA,CACAj+B,KAAAq6C,EAAAmB,YAAAC,eACA/lC,QAAA,IACAuiC,UAAA,KACA/kD,GAEA,GAAAkoD,IAAAf,EAAAmB,YAAAE,cACA,OAAA1d,EAAAC,OAAA,CACAj+B,KAAAq6C,EAAAmB,YAAAE,cACAhmC,QAAA,MACAuiC,UAAA,OACA/kD,GAEA,GAAAkoD,IAAAf,EAAAmB,YAAAG,uBACA,OAAA3d,EAAAC,OAAA,CACAj+B,KAAAq6C,EAAAmB,YAAAG,uBACAjmC,QAAA,OACAuiC,UAAA,QACA/kD,GAEA,GAAAkoD,IAAAf,EAAAmB,YAAAI,YACA,OAAA5d,EAAAC,OAAA,CACAj+B,KAAAq6C,EAAAmB,YAAAI,YACAlmC,QAAA,MACAuiC,UAAA,OACA/kD,GAEA,GAAAkoD,IAAAf,EAAAmB,YAAAK,UACA,OAAA7d,EAAAC,OAAA,CACAj+B,KAAAq6C,EAAAmB,YAAAK,UACAnmC,QAAA,IACAuiC,UAAA,KACA/kD,GAEA,GAAAkoD,IAAAf,EAAAmB,YAAAM,gBACA,OAAA9d,EAAAC,OAAA,CACAj+B,KAAAq6C,EAAAmB,YAAAM,gBACApmC,QAAA,GACAuiC,UAAA,IAGA,CAAA/Z,SAAAmc,EAAAlc,SAAA4d,UAAA7oD,IAEA,GAAAkoD,IAAAf,EAAAmB,YAAAQ,mBACA,OAAAhe,EAAAC,OAAA,CACAj+B,KAAAq6C,EAAAmB,YAAAQ,mBACAtmC,QAAA,GACAuiC,UAAA,IAGA,CAAA/Z,SAAAmc,EAAAlc,SAAA4d,UAAA7oD,IAEA,UAAA7E,MAAA,gBAAA+sD,kBAEA,CAOA,sBAAAa,CAAAC,GAAA5d,QAAAD,OAAA8d,cAAAje,WAAAke,yBACA,MAAAC,GAAA,EAAAxlD,EAAAylD,kBAAAJ,EAAA5d,EAAA8d,GACAre,EAAA,IAAAC,EAAA,CACAM,MAAA+d,EAAAr8C,MAAA,SACA06C,aAAA,CAAA2B,GACAhe,OACAH,YAAAme,EAAAne,WAKA,OAHAie,IAAA9wD,WACA0yC,EAAAwe,cAAAJ,GAEApe,CACA,CAMA,yBAAAye,CAAA9mC,GACA,MAAA+mC,EAAA/2D,KAAAg3D,wBACA,OAAAC,QAAAF,EAAA,MAAA/mC,EAAAthB,YACA,CACA,sBAAAmnD,CAAAjd,EAAAoc,GACA,MAAA+B,EAAA/2D,KAAAg3D,sBAAAhC,GACA,oBAAApc,GAAA,iBAAAA,EAAA,CAEA,GADAA,IAAAlqC,WACAqoD,EAAA,MAAAne,GAAA,CAEA,OAAAme,EADAA,EAAA,MAAAne,GAEA,CACA,UAAAjwC,MAAA,iBAAAiwC,kBACA,CACA,GAAAme,EAAAne,KAAAjzC,UACA,OAAAoxD,EAAAne,GAEA,UAAAjwC,MAAA,mBAAAiwC,kBACA,CAOA,QAAAsc,CAAAtc,GACA,oBAAAA,GAAA,iBAAAA,GAAA,iBAAAA,EACA54C,KAAAi1D,aAAA3c,EAAAud,gBAAAjd,EAAA54C,KAAA+0D,mBAEA,qBAAAnc,EAaA,UAAAjwC,MAAA,sBAbA,CACA,GAAA3I,KAAA+0D,cAAA70D,OAAA,EACA,UAAAyI,MAAA,0FAEA,MAAAuuD,EAAA,qDACA,UAAAx7B,KAAAw7B,EACA,KAAAx7B,KAAAkd,GACA,UAAAjwC,MAAA,qCAAA+yB,KAGA17B,KAAAi1D,aAAArc,CACA,CAGA,CACA,UAAA0c,KAAAt1D,KAAAkzD,YACA,GAAAoC,EAAAnC,QAAAxtD,UACA,UAAAgD,MAAA,+CAGA,OAAA3I,KAAAi1D,YACA,CAKA,WAAAO,CAAAhd,GACA,IAAA2e,GAAA,EACA,UAAAC,KAAAp3D,KAAAq1D,iBACA+B,EAAA,KAAA5e,IACAx4C,KAAAu1D,YAAA/c,IACAx4C,KAAAu1D,UAAA/c,EACAx4C,KAAAq3D,KAAA,kBAAA7e,IAEA2e,GAAA,GAGA,IAAAA,EACA,UAAAxuD,MAAA,sBAAA6vC,kBAEA,CAcA,wBAAA8e,CAAAC,EAAAC,EAAAxE,GACAuE,GAAA,EAAAz4B,EAAA24B,QAAAF,EAAAz4B,EAAA44B,WAAA31D,QACAy1D,GAAA,EAAA14B,EAAA24B,QAAAD,EAAA14B,EAAA44B,WAAA31D,QACAixD,GAAA,EAAAl0B,EAAA24B,QAAAzE,EAAAl0B,EAAA44B,WAAAx1D,QAEA,MAAAy1D,EAAA33D,KAAAkzD,YAAAv5B,QAAA27B,GAAA,OAAAA,EAAAnC,OAAA,OAAAmC,EAAAjC,KAAAiC,EAAAjC,MAAA1tD,WAAA2vD,EAAAtC,YAAArtD,YACAiyD,EAAAD,EAAAE,WAAAvC,GAAA,OAAAA,EAAAjC,KAAAiC,EAAAjC,MAAA1tD,YAIA,GAHAgyD,EACA90D,MAAA+0D,EAAA,GACAC,WAAAvC,GAAA,OAAAA,EAAAjC,KAAAiC,EAAAjC,MAAA1tD,aACA,EACA,MAAAgD,MAAA,0DAMA,IAAAmvD,EAAAH,EAAAE,WAAAvC,GAAA,OAAAA,EAAAnC,OAAAmC,EAAAnC,MAAAoE,GACAvE,IAAArtD,WAAAzD,OAAAozD,EAAAtC,eACA,QAAA8E,EAEAA,EAAAH,EAAAz3D,YAEA,OAAA43D,EAGA,MAAAnvD,MAAA,8CAGA,GAAAqqD,IAAArtD,UAAA,CAKAmyD,GAJAH,EACA90D,MAAA,EAAAi1D,GACAtjC,UACAqjC,WAAAvC,GAAA,OAAAA,EAAAnC,OAAAmC,EAAAjC,MAAA1tD,WAEA,CAKA,GAHAmyD,GAAA,EAGA,OAAAH,EAAAG,GAAA3E,OAAAwE,EAAAG,GAAA9E,YAAArtD,WAEA6xD,IAAA7xD,WAAA,OAAA6xD,GAAAz1D,OAAA41D,EAAAG,GAAAzE,KAAAmE,KAEAM,GAAA,QAIA,GAAAF,GAAA,GAAAJ,IAAA7xD,WAAA,OAAA6xD,EAAA,CACA,GAAAM,GAAAF,GAAA71D,OAAA41D,EAAAC,GAAAvE,KAAAmE,EACA,MAAA7uD,MAAA,+EAEA,GAAAmvD,EAAAF,GAAA71D,OAAA41D,EAAAC,GAAAvE,MAAAmE,EACA,MAAA7uD,MAAA,8EAEA,CAEA,MAAAovD,EAAAD,EAGA,KAAAA,EAAAH,EAAAz3D,OAAA,IAEAy3D,EAAAG,GAAA3E,QAAAwE,EAAAG,EAAA,GAAA3E,OACAwE,EAAAG,GAAA9E,YAAA2E,EAAAG,EAAA,GAAA9E,WAHA8E,KAOA,GAAA9E,EAAA,CAIA,GAHA2E,EACA90D,MAAA,EAAAk1D,GACA9nD,QAAA,CAAAuN,EAAA83C,IAAAt0D,KAAAg3D,IAAA91D,OAAAozD,EAAAtC,WAAA,KAAAx1C,IAAA,GACAw1C,EACA,MAAArqD,MAAA,4EAKA,GAHAgvD,EACA90D,MAAAi1D,EAAA,GACA7nD,QAAA,CAAAuN,EAAA83C,IAAAt0D,KAAAC,IAAAiB,OAAAozD,EAAAtC,cAAAx1C,IAAAw1C,GACAA,EACA,MAAArqD,MAAA,uEAEA,CAEA,OADAgvD,EAAAG,GACAx9C,IACA,CAcA,wBAAA29C,CAAAV,EAAAC,EAAAxE,GACA,MAAAxa,EAAAx4C,KAAAs3D,yBAAAC,EAAAC,EAAAxE,GAEA,OADAhzD,KAAAw1D,YAAAhd,GACAA,CACA,CAMA,YAAA0f,CAAA1f,GACA,MAAAmf,EAAA33D,KAAAkzD,YACA,UAAAoC,KAAAqC,EACA,GAAArC,EAAA,OAAA9c,EACA,OAAA8c,EAEA,WACA,CAKA,OAAAG,CAAA9c,EAAA,IACA,UAAAwf,KAAAxf,EAAA,CACA,KAAAwf,KAAAzD,EAAA0D,MACA,UAAAzvD,MAAA,GAAAwvD,mBAEA,MAAAE,EAAAr4D,KAAAs4D,YAAA5D,EAAA0D,KAAAD,GAAA,iBACA,IAAAE,EACA,UAAA1vD,MAAA,GAAAwvD,qCAAAn4D,KAAAw4C,gCAAA6f,KAEA,GAAA3D,EAAA0D,KAAAD,GAAAI,eAAA5yD,UACA,UAAA6yD,KAAA9D,EAAA0D,KAAAD,GAAAI,aACA,IAAA5f,EAAAxxB,SAAAqxC,KAAAx4D,KAAAy4D,eAAAD,GACA,UAAA7vD,MAAA,GAAAwvD,kBAAAK,yCAIA,CACAx4D,KAAA80D,MAAAnc,CACA,CAYA,KAAAjd,CAAAg9B,EAAAp+C,GAGA,IAAAlb,EACA,UAAA+4D,KAAAn4D,KAAA80D,MAEA,GADA11D,EAAAY,KAAA24D,WAAAD,EAAAp+C,EAAA69C,GACA/4D,IAAAuG,UACA,OAAAvG,EAEA,OAAAY,KAAA44D,gBAAAF,EAAAp+C,EAAAta,KAAAu1D,UACA,CAQA,eAAAqD,CAAAF,EAAAp+C,EAAAk+B,GACA,IAAAp5C,EAAA,KACA,UAAAg4D,KAAAp3D,KAAAq1D,iBAAA,CAEA,YAAA+B,EAAA,IACA,MAAAyB,EAAAzB,EAAA,QACA,UAAAe,KAAAU,EAAA,CACA,MAAAC,EAAA94D,KAAA24D,WAAAD,EAAAp+C,EAAA69C,GACA/4D,EAAA,iBAAA05D,IAAA15D,CACA,CAEA,KACA,CACA,GAAAg4D,EAAA,GAAAsB,KAAA/yD,UACA,UAAAgD,MAAA,SAAA+vD,iBAEAtB,EAAA,GAAAsB,GAAAp+C,KAAA3U,YACAvG,EAAAg4D,EAAA,GAAAsB,GAAAp+C,GAAA5X,EAEA,CACA,GAAA00D,EAAA,KAAA5e,EACA,KACA,CACA,OAAAz2C,OAAA3C,GAAA,EACA,CAQA,UAAAu5D,CAAAD,EAAAp+C,EAAA69C,GACA,KAAAA,KAAAzD,EAAA0D,MACA,UAAAzvD,MAAA,GAAAwvD,mBAEA,MAAAY,EAAArE,EAAA0D,KAAAD,GACA,KAAAO,KAAAK,GACA,UAAApwD,MAAA,SAAA+vD,iBAEA,GAAAK,EAAAL,GAAAp+C,KAAA3U,UACA,OAAAA,UAEA,MAAAvG,EAAA25D,EAAAL,GAAAp+C,GAAA5X,EACA,OAAAX,OAAA3C,EACA,CAUA,YAAA45D,CAAAN,EAAAp+C,EAAAi9C,EAAAC,EAAAxE,GACA,MAAAxa,EAAAx4C,KAAAs3D,yBAAAC,EAAAC,EAAAxE,GACA,OAAAhzD,KAAA44D,gBAAAF,EAAAp+C,EAAAk+B,EACA,CAUA,cAAAigB,CAAAN,GACA,GAAAn4D,KAAA24C,OAAAxxB,SAAAgxC,GACA,SAEA,UAAAf,KAAAp3D,KAAAq1D,iBAAA,CACA,MAAAC,EAAA8B,EAAA,GACA,GAAAp3D,KAAAs4D,YAAAhD,EAAA,gBAAAA,GACAA,EAAA,KAAAnuC,SAAAgxC,GACA,QAGA,CACA,QACA,CAOA,uBAAAc,CAAAzgB,EAAA+e,GACAA,GAAA,EAAAz4B,EAAA24B,QAAAF,EAAAz4B,EAAA44B,WAAA31D,QACAy2C,KAAAx4C,KAAAu1D,UACA,MAAA2D,EAAAl5D,KAAAm5D,cAAA3gB,GACA,uBAAA0gB,OAAAn3D,OAAA,IAAAw1D,GAAA2B,CAIA,CAMA,aAAAE,CAAA7B,GACA,OAAAv3D,KAAAi5D,wBAAA,KAAA1B,EACA,CAQA,mBAAA8B,CAAAC,EAAAC,GACAD,KAAAt5D,KAAAu1D,UACA,MAAArC,EAAAlzD,KAAAkzD,YACA,IAAAsG,GAAA,EAAAC,GAAA,EACAvxD,EAAA,EACA,UAAAotD,KAAApC,EACAoC,EAAA,OAAAgE,IACAE,EAAAtxD,GACAotD,EAAA,OAAAiE,IACAE,EAAAvxD,GACAA,GAAA,EAEA,OAAAsxD,GAAAC,IAAA,IAAAA,CACA,CAMA,WAAAnB,CAAA9f,GACA,OAAAx4C,KAAAq5D,oBAAA,KAAA7gB,EACA,CAMA,aAAA2gB,CAAA3gB,GACAA,KAAAx4C,KAAAu1D,UACA,MAAApC,EAAAnzD,KAAAk4D,aAAA1f,IAAA,MACA,OAAA2a,IAAAxtD,WAAA,OAAAwtD,EACA,KAEApxD,OAAAoxD,EACA,CACA,iBAAAuG,CAAAlhB,GACAA,KAAAx4C,KAAAu1D,UACA,MAAAvC,EAAAhzD,KAAAk4D,aAAA1f,IAAA,UACA,OAAAwa,IAAArtD,WAAA,OAAAqtD,EACA,KAEAjxD,OAAAixD,EACA,CAMA,QAAA2G,CAAAxB,GACA,UAAAf,KAAAp3D,KAAAq1D,iBAAA,CACA,MAAAC,EAAA8B,EAAA,GACA,YAAA9B,GAEAA,EAAA,KAAAnuC,SAAAgxC,GACA,OAAAn4D,KAAAm5D,cAAA/B,EAAA,GAGA,CACA,WACA,CAMA,WAAAwC,CAAAphB,GACAA,KAAAx4C,KAAAu1D,UACA,MAAAlC,EAAArzD,KAAAk4D,aAAA1f,IAAA,IACA,OAAA6a,IAAA1tD,WAAA,OAAA0tD,EACA,KAEAtxD,OAAAsxD,EACA,CAQA,eAAAwG,CAAAtC,EAAA/e,GACA+e,GAAA,EAAAz4B,EAAA24B,QAAAF,EAAAz4B,EAAA44B,WAAA31D,QACAy2C,KAAAx4C,KAAAu1D,UACA,MAAApC,EAAAnzD,KAAAm5D,cAAA3gB,GACA,uBAAA2a,OAAApxD,OAAA,IAAAoxD,IAAAoE,CACA,CAMA,4BAAAuC,CAAAthB,GACAA,KAAAx4C,KAAAu1D,UACA,MAAAoC,EAAA33D,KAAAkzD,YACA,IAAA4E,EAAAH,EAAAE,WAAAvC,KAAAh7C,OAAAk+B,IAOA,GAJAA,IAAAmc,EAAAlc,SAAA2c,QACA0C,GAAA,GAGAA,EAAA,EACA,YAEA,IAAAiC,EAAApC,EAAAG,GAAA9E,WAAA2E,EAAAG,GAAA3E,MACA4G,EACA,OAAAA,OAAAp0D,UACAzD,OAAA63D,GACA,KACA,MAAAC,EAAArC,EAAA90D,MAAAi1D,EAAA,GAAAj+B,MAAAy7B,IACA,IAAA2E,EAAA3E,EAAAtC,WAAAsC,EAAAnC,MAGA,OAFA8G,EACA,OAAAA,OAAAt0D,UAAAzD,OAAA+3D,GAAA,KACA3E,EAAAh7C,OAAAq6C,EAAAlc,SAAA2c,OACA,OAAA6E,GACAA,IAAAt0D,WACAs0D,IAAAF,CAAA,IAGA,GAAAC,IAAAr0D,UACA,YAEA,MAAAu0D,EAAAF,EAAAhH,WAAAgH,EAAA7G,MACA,cAAA+G,OAAAv0D,UACA,KAEA5D,OAAAm4D,EACA,CAOA,iBAAAC,CAAA3hB,GACAA,KAAAx4C,KAAAu1D,UACA,IAAA2D,EAAAl5D,KAAAm5D,cAAA3gB,GAGA,UAAA0gB,GAAA1gB,IAAAmc,EAAAlc,SAAA2c,MAAA,CACA,MAAAuC,EAAA33D,KAAAkzD,YACA0E,EAAAD,EAAAE,WAAAvC,GAAA,OAAAA,EAAAjC,KAAAiC,EAAAjC,MAAA1tD,YACA,GAAAiyD,EAAA,EACA,MAAAjvD,MAAA,yCAEAuwD,EAAAl5D,KAAAm5D,cAAAxB,EAAAC,EAAA,GAAAt9C,KACA,CACA,UAAA4+C,EACA,YAYA,OANAl5D,KAAAkzD,YAAAjjD,QAAA,CAAAuN,EAAA83C,KAEA,MAAAnC,EAAApxD,OAAA,OAAAuzD,EAAAnC,OAAAmC,EAAAjC,MAAA1tD,WAAA,OAAA2vD,EAAAjC,IAAA,EAAAiC,EAAAnC,OAEA,OAAAA,EAAA+F,GAAA,OAAA17C,EAAA21C,EAAA31C,CAAA,GACA,KAEA,CAQA,mBAAA48C,CAAA7C,EAAA/e,GACA+e,GAAA,EAAAz4B,EAAA24B,QAAAF,EAAAz4B,EAAA44B,WAAA31D,QACAy2C,KAAAx4C,KAAAu1D,UACA,MAAA4E,EAAAn6D,KAAAm6D,kBAAA3hB,GACA,cAAA2hB,OAAA5C,CACA,CAOA,aAAA8C,CAAA7hB,EAAAie,GACA,IAAA6D,EAAAv/C,EAAA+L,MAAA,GACAyzC,EAAA,EACA,UAAAjF,KAAAt1D,KAAAkzD,YAAA,CACA,MAAAC,QAAAH,YAAA14C,QAAAg7C,EAGA,IAAAkF,EAAAxH,GAAAG,EAKA,GAJAqH,EAAA,OAAAA,EAAAt4D,OAAAs4D,GAAA,KAIA,iBAAAA,GACA,IAAAA,GACAA,IAAAD,GACAjgD,IAAAq6C,EAAAlc,SAAA2c,MAAA,CACA,MAAAqF,EAAA1/C,EAAAtM,KAAA+rD,EAAA9rD,SAAA,IAAAC,SAAA,eACA2rD,EAAAv/C,EAAAgM,OAAA,CAAAuzC,EAAAG,IACAF,EAAAC,CACA,CACA,GAAAlF,EAAAh7C,OAAAk+B,EACA,KACA,CACA,MAAAkiB,EAAA3/C,EAAAgM,OAAA,CAAA0vC,EAAA6D,IAIA,YADA,EAAAx7B,EAAA67B,cAAA,EAAA7P,EAAAj4C,KAAA6nD,KAAA,GAAAhsD,SAAA,QAEA,CAMA,QAAA0kD,CAAA5a,EAAAie,GACAje,KAAAx4C,KAAAu1D,UACA,MAAA70D,EAAAV,KAAAk4D,aAAA1f,GACA,UAAA93C,GACA,OAAAA,GAAAyyD,OAAAzyD,GAAAsyD,YAAArtD,WAAAjF,GAAA2yD,MAAA1tD,UAAA,CAEA,UAAAgD,MADA,wDAEA,CACA,UAAAjI,GAAA0yD,UAAA1yD,GAAA0yD,WAAAztD,UACA,OAAAjF,EAAA0yD,SAEA,IAAAqD,EACA,UAAA9tD,MAAA,iDACA,OAAA3I,KAAAq6D,cAAA7hB,EAAAie,EACA,CAMA,mBAAAmE,CAAAxH,GACA,MAAAyH,EAAA76D,KAAAkzD,YAAAv5B,QAAA27B,GACAA,EAAAlC,eAEA,OAAAyH,EAAA36D,QAAA,EAAA26D,IAAA36D,OAAA,OACA,CAMA,aAAA22D,CAAAJ,GACA,UAAAnB,KAAAt1D,KAAAkzD,YAAA,CACA,MAAAsH,EAAAlF,EAAAtC,WAAAsC,EAAAnC,MACA,OAAAmC,EAAAlC,UAAAkC,EAAAlC,WAAAztD,YACA,OAAA60D,OAAA70D,iBAAA,IAAA2vD,EAAAjC,MACAiC,EAAAlC,SAAApzD,KAAAozD,SAAAkC,EAAAh7C,KAAAm8C,GAEA,CACA,CAKA,OAAA1D,GACA,OAAA/yD,KAAAi1D,aAAAlC,OACA,CAKA,SAAAG,GACA,OAAAlzD,KAAAi1D,aAAA/B,SACA,CAKA,cAAAI,GACA,OAAAtzD,KAAAi1D,aAAA3B,cACA,CAKA,WAAAI,GACA,OAAA1zD,KAAAi1D,aAAAvB,WACA,CAKA,QAAAlb,GACA,OAAAx4C,KAAAu1D,SACA,CAKA,OAAAvlC,GACA,OAAAjuB,OAAA/B,KAAAi1D,aAAAjlC,QACA,CAKA,SAAA8qC,GACA,OAAA96D,KAAAi1D,aAAA36C,IACA,CAKA,SAAAi4C,GACA,OAAAxwD,OAAA/B,KAAAi1D,aAAA1C,UACA,CAKA,IAAA5Z,GACA,OAAA34C,KAAA80D,KACA,CAOA,aAAAiG,GACA,MAAAviB,EAAAx4C,KAAAw4C,WACA,IAAAp5C,EACA,UAAAg4D,KAAAp3D,KAAAq1D,iBAIA,GAHA,cAAA+B,EAAA,KACAh4D,EAAAg4D,EAAA,mBAEAA,EAAA,KAAA5e,EACA,MAEA,OAAAp5C,GAAAY,KAAAi1D,aAAA,cACA,CAUA,kBAAA+F,GACA,MAAAxiB,EAAAx4C,KAAAw4C,WACA,IAAAp5C,EACA,UAAAg4D,KAAAp3D,KAAAq1D,iBAIA,GAHA,cAAA+B,EAAA,KACAh4D,EAAAg4D,EAAA,wBAEAA,EAAA,KAAA5e,EACA,MAEA,OAAAp5C,GAAAY,KAAAi1D,aAAA,mBACA,CAcA,eAAAgG,GACA,MAAAziB,EAAAx4C,KAAAw4C,WACA,IAAAp5C,EACA,UAAAg4D,KAAAp3D,KAAAq1D,iBAKA,GAJA,cAAA+B,EAAA,KAEAh4D,EAAAg4D,EAAA,aAAAA,EAAA,yBAEAA,EAAA,KAAA5e,EACA,MAEA,OAAAp5C,GAAAY,KAAAi1D,aAAA,UAAAj1D,KAAAg7D,uBAAA,EACA,CAIA,IAAAvmC,GACA,MAAAA,EAAAx1B,OAAAuR,OAAAvR,OAAA4R,OAAA5R,OAAAi8D,eAAAl7D,aAEA,OADAy0B,EAAA0mC,qBACA1mC,CACA,CACA,4BAAAuiC,CAAAhC,GACA,MAAAlvC,EAAA,GACA,UAAAxL,EAAAiC,KAAAtd,OAAA26C,QAAA+a,EAAA9b,OACA/yB,EAAAvJ,GAAAjC,EAAA8M,cAEA,MAAAg0C,EAAA,CAAAlpB,UAAAuiB,UAAAriB,UAAAE,SAAA/zB,WACA,GAAAy2C,EACA,UAAApc,KAAAoc,EAAA,CACA,MAAA16C,QAAAs+B,EACA9yB,EAAA8yB,EAAA5oB,QAAAthB,YAAA4L,EACA8gD,EAAA9gD,GAAAs+B,CACA,CAGA,OADAwiB,EAAAt1C,QACAs1C,CACA,EAEAj8D,EAAAm5C,Q,sWCn6BA7lC,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,oBACAlxB,IAAA,0CACAnjB,OAAA,SACA48C,gBAAA,aACA9C,aAAA,GACA+C,UAAA,GACAC,UAAA,CACAC,OAAA,CACA94D,EAAA,IACAmR,EAAA,iCAEA4nD,MAAA,CACA/4D,EAAA,IACAmR,EAAA,iCAGA6nD,GAAA,GACAC,IAAA,G,8TCpBAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,sCACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,SACA9C,aAAA,OACA+C,UAAA,CACAM,4BAAA,CACAl5D,EAAA,EACAmR,EAAA,uCAEAgoD,qBAAA,CACAn5D,EAAA,EACAmR,EAAA,uCAEAioD,eAAA,CACAp5D,EAAA,IACAmR,EAAA,4CAGA0nD,UAAA,GACAG,GAAA,GACAC,IAAA,G,8TCxBAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,iCACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,WACAC,UAAA,GACAC,UAAA,CACAQ,SAAA,CACAr5D,EAAA,EACAmR,EAAA,mCAEAmoD,UAAA,CACAt5D,EAAA,EACAmR,EAAA,oCAEAooD,QAAA,CACAv5D,EAAA,GACAmR,EAAA,mCAGA6nD,GAAA,GACAC,IAAA,G,8TCvBAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,wBACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,aACAC,UAAA,GACAC,UAAA,CACAW,iBAAA,CACAx5D,EAAA,IACAmR,EAAA,8DAEAsoD,iBAAA,CACAz5D,EAAA,KACAmR,EAAA,oEAEAuoD,iBAAA,CACA15D,EAAA,KACAmR,EAAA,8DAEAwoD,iBAAA,CACA35D,EAAA,KACAmR,EAAA,oEAEAyoD,uBAAA,CACA55D,EAAA,MACAmR,EAAA,4CAEA0oD,0BAAA,CACA75D,EAAA,KACAmR,EAAA,gDAEA2oD,iBAAA,CACA95D,EAAA,KACAmR,EAAA,iDAEA4oD,iBAAA,CACA/5D,EAAA,KACAmR,EAAA,iDAEA6oD,4BAAA,CACAhmR,EAAA,0FAGA6nD,GAAA,GACAC,IAAA,G,8TChLAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,kBACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,YACAC,UAAA,GACAC,UAAA,CACAoB,mBAAA,CACAj6D,EAAA,EACAmR,EAAA,4DAGA6nD,GAAA,GACAC,IAAA,G,8TCfAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACAw4C,QAAA,6BACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,aACAC,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,G,8TCTAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACAw4C,QAAA,8CACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,aACAC,UAAA,GACAC,UAAA,CACAyB,UAAA,CACAt6D,EAAA,KACAmR,EAAA,iFAEAopD,kBAAA,CACAv6D,EAAA,KACAmR,EAAA,mEAEAqpD,gBAAA,CACAx6D,EAAA,IACAmR,EAAA,0EAEAspD,sBAAA,CACAz6D,EAAA,KACAmR,EAAA,mEAEAupD,qBAAA,CACA16D,EAAA,IACAmR,EAAA,yDAEAwpD,sBAAA,CACA36D,EAAA,IACAmR,EAAA,yDAEAypD,wBAAA,CACA56D,EAAA,MACAmR,EAAA,sEAEA0pD,yBAAA,CACA76D,EAAA,KACAmR,EAAA,0EAEAtD,KAAA,CACA7N,EAAA,EACAmR,EAAA,+BAEA2pD,SAAA,CACA96D,EAAA,EACAmR,EAAA,mCAEA4pD,aAAA,CACA/6D,EAAA,EACAmR,EAAA,uCAEA6pD,WAAA,CACAh7D,EAAA,EACAmR,EAAA,qCAEA8pD,QAAA,CACAj7D,EAAA,EACAmR,EAAA,kCAEA+pD,YAAA,CACAl7D,EAAA,EACAmR,EAAA,sCAEAgqD,YAAA,CACAn7D,EAAA,EACAmR,EAAA,sCAEAiqD,YAAA,CACAp7D,EAAA,EACAmR,EAAA,sCAEAkqD,MAAA,CACAr7D,EAAA,EACAmR,EAAA,gCAEAmqD,OAAA,CACAt7D,EAAA,EACAmR,EAAA,kCAGA6nD,GAAA,GACAC,IAAA,G,8TClFAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACAw4C,QAAA,wBACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,WACA9C,aAAA,YACA+C,UAAA,GACAC,UAAA,CACA0C,yBAAA,CACAv7D,EAAA,KACAmR,EAAA,0DAEAqqD,sBAAA,CACAx7D,EAAA,KACAmR,EAAA,2DAGA6nD,GAAA,GACAC,IAAA,G,8TCnBAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,4BACAlxB,IAAA,0CACAnjB,OAAA,SACA48C,gBAAA,SACAC,UAAA,GACAC,UAAA,CACA4C,KAAA,CACAz7D,EAAA,KACAmR,EAAA,+BAEAuqD,SAAA,CACA17D,EAAA,EACAmR,EAAA,mCAEAwqD,sBAAA,CACA37D,EAAA,KACAmR,EAAA,sDAGA6nD,GAAA,GACAC,IAAA,G,8TCvBAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,iBACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,SACAC,UAAA,GACAC,UAAA,CACA+C,QAAA,CACA57D,EAAA,EACAmR,EAAA,mCAGA6nD,GAAA,GACAC,IAAA,G,8TCfAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACAw4C,QAAA,uBACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,SACA9C,aAAA,OACA+C,UAAA,CACAiD,kBAAA,CACA77D,EAAA,EACAmR,EAAA,8FAGA0nD,UAAA,CACAiD,mBAAA,CACA97D,EAAA,EACAmR,EAAA,+CAEA4qD,yBAAA,CACA/7D,EAAA,KACAmR,EAAA,+EAGA6nD,GAAA,GACAC,IAAA,G,8TCxBAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,6BACAlxB,IAAA,0CACAnjB,OAAA,SACA48C,gBAAA,SACA9C,aAAA,OACA+C,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,G,8TCXAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACAw4C,QAAA,mDACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,SACA9C,aAAA,GACA+C,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,G,8TCVAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACAw4C,QAAA,uBACAlxB,IAAA,6CACAnjB,OAAA,QACA48C,gBAAA,cACA9C,aAAA,GACA+C,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,CACA+C,oBAAA,CACAh8D,EAAA,KACAmR,EAAA,2D,8TCbApB,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,sDACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,aACA9C,aAAA,GACA+C,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,G,8TCXAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,gBACAlxB,IAAA,0CACAnjB,OAAA,SACA48C,gBAAA,SACA9C,aAAA,OACA+C,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,G,8TCXAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,wBACAlxB,IAAA,0CACAnjB,OAAA,SACA48C,gBAAA,SACA9C,aAAA,OACA+C,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,G,8TCXAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,sCACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,SACA9C,aAAA,GACA+C,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,G,8TCXAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,oBACAlxB,IAAA,0CACAnjB,OAAA,SACA48C,gBAAA,aACA9C,aAAA,GACA+C,UAAA,GACAC,UAAA,CACAwD,MAAA,CACAr8D,EAAA,EACAmR,EAAA,iCAGA6nD,GAAA,GACAC,IAAA,G,8TChBAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,2BACAlxB,IAAA,0CACAnjB,OAAA,SACA48C,gBAAA,iBACA9C,aAAA,GACA+C,UAAA,GACAC,UAAA,CACAyD,iBAAA,CACAt8D,EAAA,EACAmR,EAAA,6EAGA6nD,GAAA,CACAuD,gBAAA,CACAv8D,EAAA,MACAmR,EAAA,mEAGA8nD,IAAA,G,8TCrBAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,qCACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,SACAC,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,CACA+C,oBAAA,CACAh8D,EAAA,MACAmR,EAAA,2D,8TCbApB,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,6CACAlxB,IAAA,0CACAnjB,OAAA,SACA48C,gBAAA,SACA9C,aAAA,GACA+C,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,G,8TCXAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,0BACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,QACA9C,aAAA,sBACA+C,UAAA,CACA4D,eAAA,CACAx8D,EAAA,OACAmR,EAAA,sCAEAsrD,sBAAA,CACAz8D,EAAA,OACAmR,EAAA,0CAEAurD,mBAAA,CACA18D,EAAA,OACAmR,EAAA,wCAEAwrD,2BAAA,CACA38D,EAAA,QACAmR,EAAA,8EAGA0nD,UAAA,CACA+D,iBAAA,CACA58D,EAAA,KACAmR,EAAA,mCAEA0rD,gBAAA,CACA78D,EAAA,EACAmR,EAAA,gCAEA2rD,qCAAA,CACA98D,EAAA,IACAmR,EAAA,2DAEA4rD,SAAA,CACA/8D,EAAA,EACAmR,EAAA,oCAGA6rD,SAAA,CACAC,yBAAA,CACAj9D,EAAA,EACAmR,EAAA,6DAEA+rD,qBAAA,CACAl9D,EAAA,KACAmR,EAAA,kDAGA6nD,GAAA,GACAC,IAAA,G,8TCvDAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,8CACAlxB,IAAA,0CACAnjB,OAAA,SACA48C,gBAAA,QACA9C,aAAA,GACA+C,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,G,8TCXAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACA5N,OAAA,KACAomD,QAAA,iDACAlxB,IAAA,0CACAnjB,OAAA,QACA48C,gBAAA,cACAC,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,CACA+C,oBAAA,CACAh8D,EAAA,MACAmR,EAAA,2D,wxBCZA5U,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IACAD,EAAAi5D,UAAA,EACAj5D,EAAAi5D,KAAA,CACA,KAAA74D,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,eACA,KAAAA,EAAA,e,6TC3BAN,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IACAD,EAAA22D,YAAA32D,EAAA2gE,mBAAA3gE,EAAA4gE,cAAA5gE,EAAAs5C,SAAAt5C,EAAA05C,WAAA,EAEA,SAAAA,GACAA,IAAA,qBACAA,IAAA,qBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,2BACA,CANA,CAMA15C,EAAA05C,QAAA15C,EAAA05C,MAAA,KAEA,SAAAJ,GACAA,EAAA,wBACAA,EAAA,sBACAA,EAAA,UACAA,EAAA,oCACAA,EAAA,gCACAA,EAAA,sBACAA,EAAA,gCACAA,EAAA,wBACAA,EAAA,oBACAA,EAAA,0BACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,4BACAA,EAAA,0BACAA,EAAA,8CACAA,EAAA,cACAA,EAAA,oBACAA,EAAA,8BACA,CAnBA,CAmBAt5C,EAAAs5C,WAAAt5C,EAAAs5C,SAAA,KAEA,SAAAsnB,GACAA,EAAA,mBACAA,EAAA,kBACAA,EAAA,sBACA,CAJA,CAIA5gE,EAAA4gE,gBAAA5gE,EAAA4gE,cAAA,KAEA,SAAAD,GACAA,EAAA,gBACAA,EAAA,gBACAA,EAAA,eACA,CAJA,CAIA3gE,EAAA2gE,qBAAA3gE,EAAA2gE,mBAAA,KAEA,SAAAhK,GAMAA,EAAA,iCAMAA,EAAA,+BAMAA,EAAA,kDAMAA,EAAA,2BAMAA,EAAA,wBAMAA,EAAA,mCAMAA,EAAA,wCACA,CA3CA,CA2CA32D,EAAA22D,cAAA32D,EAAA22D,YAAA,I,wTCxFArjD,EAAAtT,QAAA,CACAmb,KAAA,eACAw4C,QAAA,kCACAlxB,IAAA,6GACAnjB,OAAA,QACAk6B,KAAA,OACA2iB,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,G,2UCTAlpD,EAAAtT,QAAA,CACAmb,KAAA,SACAw4C,QAAA,0DACAlxB,IAAA,0CACAnjB,OAAA,QACAk6B,KAAA,sB,qUCLAlmC,EAAAtT,QAAA,CACAmb,KAAA,YACAw4C,QAAA,yEACAlxB,IAAA,yCACAnjB,OAAA,QACA68C,UAAA,GACAC,UAAA,CACAoB,mBAAA,CACAj6D,EAAA,GACAmR,EAAA,2DAEAmsD,MAAA,CACAt9D,EAAA,IACAmR,EAAA,2CAEAosD,MAAA,CACAv9D,EAAA,IACAmR,EAAA,iDAEAqsD,UAAA,CACAx9D,EAAA,IACAmR,EAAA,+CAEAssD,cAAA,CACAz9D,EAAA,IACAmR,EAAA,6DAEAusD,OAAA,CACA19D,EAAA,EACAmR,EAAA,iCAEA6pD,WAAA,CACAh7D,EAAA,IACAmR,EAAA,qCAEAwsD,eAAA,CACA39D,EAAA,EACAmR,EAAA,yCAEAysD,eAAA,CACA59D,EAAA,EACAmR,EAAA,0CAGA6nD,GAAA,GACAC,IAAA,CACA4E,YAAA,CACA79D,EAAA,sBACAmR,EAAA,sDAEA6qD,oBAAA,CACAh8D,EAAA,IACAmR,EAAA,2D,wUCpDApB,EAAAtT,QAAA,CACAmb,KAAA,aACAw4C,QAAA,mCACAlxB,IAAA,GACAnjB,OAAA,GACA68C,UAAA,CACAkF,YAAA,CACA99D,EAAA,IACAmR,EAAA,qCAEA4sD,qBAAA,CACA/9D,EAAA,KACAmR,EAAA,mEAEA0qD,kBAAA,CACA77D,EAAA,EACAmR,EAAA,8FAGA0nD,UAAA,CACA1nC,KAAA,CACAnxB,EAAA,EACAmR,EAAA,0DAEA6sD,SAAA,CACAh+D,EAAA,kBACAmR,EAAA,+CAEAu6B,IAAA,CACA1rC,EAAA,GACAmR,EAAA,8BAEA8sD,QAAA,CACAj+D,EAAA,GACAmR,EAAA,wDAEA+sD,KAAA,CACAl+D,EAAA,GACAmR,EAAA,+BAEAgtD,SAAA,CACAn+D,EAAA,EACAmR,EAAA,8CAEAkqD,MAAA,CACAr7D,EAAA,GACAmR,EAAA,gCAEAitD,UAAA,CACAp+D,EAAA,IACAmR,EAAA,+DAEAktD,YAAA,CACAr+D,EAAA,IACAmR,EAAA,uEAEAmtD,aAAA,CACAt+D,EAAA,KACAmR,EAAA,6DAEAotD,SAAA,CACAv+D,EAAA,EACAmR,EAAA,mCAEAuI,IAAA,CACA1Z,EAAA,IACAmR,EAAA,8BAEAqtD,QAAA,CACAx+D,EAAA,EACAmR,EAAA,uCAEAstD,SAAA,CACAz+D,EAAA,IACAmR,EAAA,+HAEAhD,OAAA,CACAnO,EAAA,KACAmR,EAAA,iCAEAtD,KAAA,CACA7N,EAAA,GACAmR,EAAA,+BAEAutD,YAAA,CACA1+D,EAAA,KACAmR,EAAA,uCAEAwtD,kBAAA,CACA3+D,EAAA,IACAmR,EAAA,qDAEAytD,eAAA,CACA5+D,EAAA,KACAmR,EAAA,iEAEA2qD,mBAAA,CACA97D,EAAA,KACAmR,EAAA,+CAEA0tD,OAAA,CACA7+D,EAAA,EACAmR,EAAA,0JAEA2tD,aAAA,CACA9+D,EAAA,IACAmR,EAAA,kEAEA4tD,WAAA,CACA/+D,EAAA,IACAmR,EAAA,IAEAsa,GAAA,CACAzrB,EAAA,KACAmR,EAAA,4EAEA6tD,WAAA,CACAh/D,EAAA,KACAmR,EAAA,0CAEA8tD,WAAA,CACAj/D,EAAA,EACAmR,EAAA,wHAEA+tD,cAAA,CACAl/D,EAAA,GACAmR,EAAA,iIAEA4gB,KAAA,CACA/xB,EAAA,EACAmR,EAAA,0GAEAguD,UAAA,CACAn/D,EAAA,IACAmR,EAAA,IAEA/N,OAAA,CACApD,EAAA,GACAmR,EAAA,IAEAiuD,WAAA,CACAp/D,EAAA,GACAmR,EAAA,IAEA2jB,UAAA,CACA90B,EAAA,IACAmR,EAAA,IAEAkuD,cAAA,CACAr/D,EAAA,IACAmR,EAAA,IAEAmwC,SAAA,CACAthD,EAAA,GACAmR,EAAA,IAEAmuD,aAAA,CACAt/D,EAAA,EACAmR,EAAA,IAEAouD,KAAA,CACAv/D,EAAA,EACAmR,EAAA,+BAEA5Q,IAAA,CACAP,EAAA,EACAmR,EAAA,8BAEAquD,IAAA,CACAx/D,EAAA,EACAmR,EAAA,8BAEAsuD,IAAA,CACAz/D,EAAA,EACAmR,EAAA,8BAEAuuD,IAAA,CACA1/D,EAAA,EACAmR,EAAA,8BAEAwuD,KAAA,CACA3/D,EAAA,EACAmR,EAAA,+BAEAvC,IAAA,CACA5O,EAAA,EACAmR,EAAA,8BAEAyuD,KAAA,CACA5/D,EAAA,EACAmR,EAAA,+BAEA0uD,OAAA,CACA7/D,EAAA,EACAmR,EAAA,iCAEA2uD,OAAA,CACA9/D,EAAA,EACAmR,EAAA,iCAEA4uD,WAAA,CACA//D,EAAA,EACAmR,EAAA,qCAEA6uD,GAAA,CACAhgE,EAAA,EACAmR,EAAA,6BAEA8uD,GAAA,CACAjgE,EAAA,EACAmR,EAAA,6BAEA+uD,IAAA,CACAlgE,EAAA,EACAmR,EAAA,8BAEAgvD,IAAA,CACAngE,EAAA,EACAmR,EAAA,8BAEA4P,GAAA,CACA/gB,EAAA,EACAmR,EAAA,6BAEAivD,OAAA,CACApgE,EAAA,EACAmR,EAAA,iCAEAkvD,IAAA,CACArgE,EAAA,EACAmR,EAAA,8BAEAmvD,GAAA,CACAtgE,EAAA,EACAmR,EAAA,6BAEAovD,IAAA,CACAvgE,EAAA,EACAmR,EAAA,8BAEAqvD,IAAA,CACAxgE,EAAA,EACAmR,EAAA,8BAEA5E,KAAA,CACAvM,EAAA,EACAmR,EAAA,+BAEA2I,QAAA,CACA9Z,EAAA,EACAmR,EAAA,kCAEA8pD,QAAA,CACAj7D,EAAA,GACAmR,EAAA,kCAEAsvD,OAAA,CACAzgE,EAAA,EACAmR,EAAA,iCAEAuvD,OAAA,CACA1gE,EAAA,EACAmR,EAAA,iCAEAwvD,UAAA,CACA3gE,EAAA,EACAmR,EAAA,oCAEAyvD,aAAA,CACA5gE,EAAA,EACAmR,EAAA,uCAEA0vD,aAAA,CACA7gE,EAAA,EACAmR,EAAA,uCAEA2vD,aAAA,CACA9gE,EAAA,EACAmR,EAAA,uCAEA4vD,SAAA,CACA/gE,EAAA,EACAmR,EAAA,mCAEA6vD,SAAA,CACAhhE,EAAA,EACAmR,EAAA,mCAEA8vD,SAAA,CACAjhE,EAAA,EACAmR,EAAA,mCAEA+pD,YAAA,CACAl7D,EAAA,GACAmR,EAAA,sCAEAgqD,YAAA,CACAn7D,EAAA,GACAmR,EAAA,sCAEA+vD,UAAA,CACAlhE,EAAA,GACAmR,EAAA,oCAEAgwD,SAAA,CACAnhE,EAAA,EACAmR,EAAA,mCAEAm/C,UAAA,CACAtwD,EAAA,EACAmR,EAAA,oCAEAnH,OAAA,CACAhK,EAAA,EACAmR,EAAA,iCAEAo/C,WAAA,CACAvwD,EAAA,EACAmR,EAAA,qCAEAiwD,SAAA,CACAphE,EAAA,EACAmR,EAAA,mCAEA0V,IAAA,CACA7mB,EAAA,EACAmR,EAAA,8BAEAkwD,MAAA,CACArhE,EAAA,EACAmR,EAAA,gCAEAmwD,OAAA,CACAthE,EAAA,EACAmR,EAAA,iCAEAowD,QAAA,CACAvhE,EAAA,EACAmR,EAAA,kCAEAmqD,OAAA,CACAt7D,EAAA,EACAmR,EAAA,iCAEAqwD,KAAA,CACAxhE,EAAA,EACAmR,EAAA,+BAEAswD,MAAA,CACAzhE,EAAA,GACAmR,EAAA,gCAEAuwD,GAAA,CACA1hE,EAAA,EACAmR,EAAA,6BAEAwwD,MAAA,CACA3hE,EAAA,EACAmR,EAAA,gCAEAywD,IAAA,CACA5hE,EAAA,EACAmR,EAAA,8BAEAxI,KAAA,CACA3I,EAAA,EACAmR,EAAA,+BAEA0wD,IAAA,CACA7hE,EAAA,EACAmR,EAAA,8BAEA2wD,KAAA,CACA9hE,EAAA,EACAmR,EAAA,+BAEA2pD,SAAA,CACA96D,EAAA,GACAmR,EAAA,mCAEAsV,OAAA,CACAzmB,EAAA,EACAmR,EAAA,iCAEA4wD,QAAA,CACA/hE,EAAA,EACAmR,EAAA,kCAEA6wD,aAAA,CACAhiE,EAAA,EACAmR,EAAA,wCAGA6nD,GAAA,CACAiJ,WAAA,CACAjiE,EAAA,KACAmR,EAAA,oCAEA+wD,gBAAA,CACAliE,EAAA,KACAmR,EAAA,sCAEAgxD,iBAAA,CACAniE,EAAA,GACAmR,EAAA,iDAGA8nD,IAAA,CACAmJ,kBAAA,CACApiE,EAAA,OACAmR,EAAA,+CAEAkxD,uBAAA,CACAriE,EAAA,KACAmR,EAAA,wEAEAmxD,cAAA,CACAtiE,EAAA,GACAmR,EAAA,4GAEAoxD,cAAA,CACAviE,EAAA,IACAmR,EAAA,yCAEAqxD,eAAA,CACAxiE,EAAA,IACAmR,EAAA,0CAEA0sD,YAAA,CACA79D,EAAA,sBACAmR,EAAA,sDAEA6qD,oBAAA,CACAh8D,EAAA,EACAmR,EAAA,2D,yUClbApB,EAAAtT,QAAA,CACAmb,KAAA,iBACAw4C,QAAA,sEACAlxB,IAAA,0CACAnjB,OAAA,QACA68C,UAAA,GACAC,UAAA,CACA4J,iBAAA,CACAziE,EAAA,IACAmR,EAAA,yDAEAuxD,iBAAA,CACA1iE,EAAA,IACAmR,EAAA,6CAEAwxD,kBAAA,CACA3iE,EAAA,IACAmR,EAAA,iDAEAyxD,kBAAA,CACA5iE,EAAA,IACAmR,EAAA,wCAEA0xD,qBAAA,CACA7iE,EAAA,KACAmR,EAAA,8EAEA2xD,qBAAA,CACA9iE,EAAA,KACAmR,EAAA,0EAEA4xD,0BAAA,CACA/iE,EAAA,MACAmR,EAAA,sEAEA6xD,IAAA,CACAhjE,EAAA,EACAmR,EAAA,8BAEA8xD,IAAA,CACAjjE,EAAA,EACAmR,EAAA,8BAEA+xD,IAAA,CACAljE,EAAA,EACAmR,EAAA,8BAEAiqD,YAAA,CACAp7D,EAAA,IACAmR,EAAA,sCAEAgyD,QAAA,CACAnjE,EAAA,KACAmR,EAAA,mCAGA6nD,GAAA,GACAC,IAAA,CACA4E,YAAA,CACA79D,EAAA,sBACAmR,EAAA,uDAEA6qD,oBAAA,CACAh8D,EAAA,IACAmR,EAAA,2D,6UChEApB,EAAAtT,QAAA,CACAmb,KAAA,MACAw4C,QAAA,sBACAlxB,IAAA,yCACAnjB,OAAA,QACA68C,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,G,kUCRAlpD,EAAAtT,QAAA,CACAmb,KAAA,cACAw4C,QAAA,qDACAlxB,IAAA,4GACAnjB,OAAA,QACAk6B,KAAA,OACA2iB,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,G,0UCTAlpD,EAAAtT,QAAA,CACAmb,KAAA,YACAw4C,QAAA,uDACAlxB,IAAA,yCACAnjB,OAAA,QACA68C,UAAA,GACAC,UAAA,CACAkC,aAAA,CACA/6D,EAAA,GACAmR,EAAA,wCAGA6nD,GAAA,GACAC,IAAA,G,0wBCZA18D,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IACAD,EAAA+zD,eAAA,EACA/zD,EAAA+zD,UAAA,CACAqT,WAAAhnE,EAAA,qBACAinE,UAAAjnE,EAAA,oBACAknE,IAAAlnE,EAAA,cACAmnE,iBAAAnnE,EAAA,2BACAonE,eAAApnE,EAAA,yBACAqnE,UAAArnE,EAAA,oBACAsnE,eAAAtnE,EAAA,yBACAunE,WAAAvnE,EAAA,qBACAwnE,SAAAxnE,EAAA,mBACAynE,YAAAznE,EAAA,sBACA0nE,OAAA1nE,EAAA,iBACA2nE,OAAA3nE,EAAA,iBACA4nE,SAAA5nE,EAAA,mBACA6nE,aAAA7nE,EAAA,uBACA8nE,YAAA9nE,EAAA,sBACA+nE,sBAAA/nE,EAAA,gCACAgoE,MAAAhoE,EAAA,gBACAioE,aAAAjoE,EAAA,mB,kUCrBAkT,EAAAtT,QAAA,CACAmb,KAAA,WACAw4C,QAAA,2EACAlxB,IAAA,0CACAnjB,OAAA,QACA68C,UAAA,GACAC,UAAA,CACAkM,YAAA,CACA/kE,EAAA,EACAmR,EAAA,kDAEAmsD,MAAA,CACAt9D,EAAA,IACAmR,EAAA,2CAEAosD,MAAA,CACAv9D,EAAA,IACAmR,EAAA,iDAEAqsD,UAAA,CACAx9D,EAAA,KACAmR,EAAA,+CAEAssD,cAAA,CACAz9D,EAAA,KACAmR,EAAA,6DAEA+tD,cAAA,CACAl/D,EAAA,GACAmR,EAAA,iIAEA6zD,uBAAA,CACAhlE,EAAA,KACAmR,EAAA,uEAEAupD,qBAAA,CACA16D,EAAA,IACAmR,EAAA,yDAEAwpD,sBAAA,CACA36D,EAAA,IACAmR,EAAA,yDAEA8zD,qBAAA,CACAjlE,EAAA,IACAmR,EAAA,yDAEAypD,wBAAA,CACA56D,EAAA,MACAmR,EAAA,sEAEAspD,sBAAA,CACAz6D,EAAA,IACAmR,EAAA,mEAEA0pD,yBAAA,CACA76D,EAAA,KACAmR,EAAA,0EAEA4qD,yBAAA,CACA/7D,EAAA,KACAmR,EAAA,8EAEA8pD,QAAA,CACAj7D,EAAA,IACAmR,EAAA,kCAEAiqD,YAAA,CACAp7D,EAAA,IACAmR,EAAA,sCAEA+zD,QAAA,CACAllE,EAAA,EACAmR,EAAA,kCAEAg0D,YAAA,CACAnlE,EAAA,EACAmR,EAAA,sCAEAkqD,MAAA,CACAr7D,EAAA,IACAmR,EAAA,iCAGA6nD,GAAA,GACAC,IAAA,G,uUCrFAlpD,EAAAtT,QAAA,CACAmb,KAAA,SACAw4C,QAAA,sDACAlxB,IAAA,mGACAnjB,OAAA,QACAk6B,KAAA,sB,qUCLAlmC,EAAAtT,QAAA,CACAmb,KAAA,QACAw4C,QAAA,gEACAlxB,IAAA,qGACAnjB,OAAA,QACAg0C,UAAA,CACA3qD,KAAA,MACA4qD,UAAA,SACAoV,OAAA,IAEAnvB,KAAA,Y,oUCVAlmC,EAAAtT,QAAA,CACAmb,KAAA,wBACAw4C,QAAA,sDACAlxB,IAAA,0CACAnjB,OAAA,QACAk6B,KAAA,G,oVCLAlmC,EAAAtT,QAAA,CACAmb,KAAA,cACAw4C,QAAA,kCACAlxB,IAAA,0CACAnjB,OAAA,QACA68C,UAAA,GACAC,UAAA,GACAG,GAAA,GACAC,IAAA,CACA+C,oBAAA,CACAh8D,EAAA,IACAmR,EAAA,2D,0UCXApB,EAAAtT,QAAA,CACAmb,KAAA,aACAw4C,QAAA,0FACAlxB,IAAA,0CACAnjB,OAAA,QACA68C,UAAA,GACAC,UAAA,CACA4J,iBAAA,CACAziE,EAAA,KACAmR,EAAA,0BAEAuxD,iBAAA,CACA1iE,EAAA,KACAmR,EAAA,0BAEAwxD,kBAAA,CACA3iE,EAAA,KACAmR,EAAA,0BAEAyxD,kBAAA,CACA5iE,EAAA,KACAmR,EAAA,0BAEA0xD,qBAAA,CACA7iE,EAAA,KACAmR,EAAA,0BAEA2xD,qBAAA,CACA9iE,EAAA,KACAmR,EAAA,0BAEA4xD,0BAAA,CACA/iE,EAAA,KACAmR,EAAA,2BAGA6nD,GAAA,GACAC,IAAA,G,yUCrCAlpD,EAAAtT,QAAA,CACAmb,KAAA,WACAw4C,QAAA,gHACAlxB,IAAA,wGACAnjB,OAAA,QACAk6B,KAAA,sB,uUCLAlmC,EAAAtT,QAAA,CACAmb,KAAA,eACAw4C,QAAA,0EACAlxB,IAAA,0CACAnjB,OAAA,eACAk6B,KAAA,O,uUCLAlmC,EAAAtT,QAAA,CACAmb,KAAA,iBACAw4C,QAAA,qHACAlxB,IAAA,yCACAnjB,OAAA,QACA68C,UAAA,GACAC,UAAA,CACAoF,QAAA,CACAj+D,EAAA,GACAmR,EAAA,yDAGA6nD,GAAA,CACAqM,YAAA,CACArlE,EAAA,MACAmR,EAAA,oCAGA8nD,IAAA,G,6UClBAlpD,EAAAtT,QAAA,CACAmb,KAAA,mBACAw4C,QAAA,yDACAlxB,IAAA,yCACAnjB,OAAA,QACA68C,UAAA,GACAC,UAAA,CACAwC,MAAA,CACAr7D,EAAA,IACAmR,EAAA,4BAEAtD,KAAA,CACA7N,EAAA,IACAmR,EAAA,sDAEA+pD,YAAA,CACAl7D,EAAA,IACAmR,EAAA,sCAEAgqD,YAAA,CACAn7D,EAAA,IACAmR,EAAA,sCAEA8pD,QAAA,CACAj7D,EAAA,IACAmR,EAAA,kCAEA4pD,aAAA,CACA/6D,EAAA,IACAmR,EAAA,uCAEA2pD,SAAA,CACA96D,EAAA,IACAmR,EAAA,mCAEA6wD,aAAA,CACAhiE,EAAA,IACAmR,EAAA,wCAGA6nD,GAAA,GACAC,IAAA,G,2YCxCA,IAAA/uC,EAAA5sB,WAAA4sB,kBAAA3tB,OAAA4R,OAAA,SAAAgc,EAAAzJ,EAAAgB,EAAA0I,GACAA,IAAAnnB,YAAAmnB,EAAA1I,GACA,IAAA2I,EAAA9tB,OAAA+tB,yBAAA5J,EAAAgB,GACA2I,KAAA,QAAAA,GAAA3J,EAAA7R,WAAAwb,EAAA7V,UAAA6V,EAAAlW,gBACAkW,EAAA,CAAA/a,YAAA,EAAAxP,IAAA,kBAAA4gB,EAAAgB,EAAA,IAEAnlB,OAAAC,eAAA2tB,EAAAC,EAAAC,EACA,WAAAF,EAAAzJ,EAAAgB,EAAA0I,GACAA,IAAAnnB,YAAAmnB,EAAA1I,GACAyI,EAAAC,GAAA1J,EAAAgB,EACA,GACA6I,EAAAjtB,WAAAitB,cAAA,SAAA7J,EAAAjkB,GACA,QAAA8rB,KAAA7H,EAAA,YAAA6H,GAAAhsB,OAAAqR,UAAA4a,eAAA3a,KAAApR,EAAA8rB,IAAA2B,EAAAztB,EAAAikB,EAAA6H,EACA,EACAhsB,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IACA6tB,EAAA1tB,EAAA,YAAAJ,GACA8tB,EAAA1tB,EAAA,WAAAJ,GACA8tB,EAAA1tB,EAAA,WAAAJ,GACA8tB,EAAA1tB,EAAA,WAAAJ,E,wTClBAF,OAAAC,eAAAC,EAAA,cAAAC,OAAA,G,6VCAAH,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IACAD,EAAAy3D,sBAAA,EACA,MAAA93B,EAAAv/B,EAAA,oBACAo1D,EAAAp1D,EAAA,WAuBA,SAAAipE,EAAA/f,EAAAiO,GAAA,GACA,MAAAp8C,OAAAmuD,SAAAxV,aAAAyV,UAAAtyB,WAAAytB,WAAA8E,iBAAAlgB,EACA,IAAAnH,YAAA0R,YAAA/c,SAAAwS,EACA,MAAAmgB,EAAA1mE,OAAA8wD,IACAhjC,WAAAy4C,EAeA,GAbA,KAAAnnB,IACAA,EAAA,OAGA,EAAAxiB,EAAA1qB,eAAA4+C,KACAA,GAAA,EAAAl0B,EAAA+pC,UAAA35D,SAAA8jD,KAGA,KAAA/c,EAAA/1C,SACA+1C,EAhCA,SAAAA,GACA,OAAAA,GAAA,QAAAA,GAGA,EAAAnX,EAAA1qB,eAAA6hC,GACA,QAAAnX,EAAAgqC,gBAAA7yB,GAAAtnC,SAAA,QAEA,KAAAsnC,EAAAtnC,SAAA,QALA,oBAMA,CAwBAo6D,CAAA9yB,IAIAwyB,EAAAO,cAAAP,EAAAQ,YACA,UAAAtgE,MAAA,gKAEA,MAAA83B,EAAA,CACAnmB,OACA0V,UACAuiC,UAAAviC,EACA+iC,QAAA,CACAC,YACA5c,SAAAlnC,SAAAknC,GACA6c,WAAA/jD,SAAA+jD,GACAhd,QACAqL,YACAonB,UACA7E,WACA8E,iBAEAnwB,SAAA7yC,UACAutD,UAAA,GACAI,eAAA,GACAb,UAAAgW,EAAA9V,SAAAhtD,UACA,CACAmC,KAAA,MACA4qD,UAAA,SACAC,OAAA,CAIAC,OAAA6V,EAAA9V,OAAAC,QAAA6V,EAAA9V,OAAAuW,mBACArW,MAAA4V,EAAA9V,OAAAE,OAAA4V,EAAA9V,OAAAwW,cAGA,CACArhE,KAAA,MACA4qD,UAAA,SACA6B,OAAA,KAGA6U,EAAA,CACA,CAAAzU,EAAAlc,SAAA4wB,WAAA,CAAA/uD,KAAA,kBACA,CAAAq6C,EAAAlc,SAAA6wB,KAAA,CAAAhvD,KAAA,gBACA,CAAAq6C,EAAAlc,SAAA8wB,kBAAA,CAAAjvD,KAAA,eACA,CAAAq6C,EAAAlc,SAAA+wB,gBAAA,CAAAlvD,KAAA,eACA,CAAAq6C,EAAAlc,SAAAgxB,WAAA,CAAAnvD,KAAA,kBACA,CAAAq6C,EAAAlc,SAAAixB,gBAAA,CAAApvD,KAAA,uBACA,CAAAq6C,EAAAlc,SAAAkxB,YAAA,CAAArvD,KAAA,mBACA,CAAAq6C,EAAAlc,SAAAmxB,UAAA,CAAAtvD,KAAA,iBACA,CAAAq6C,EAAAlc,SAAAoxB,aAAA,CAAAvvD,KAAA,oBACA,CAAAq6C,EAAAlc,SAAA4d,QAAA,CAAA/7C,KAAA,eACA,CAAAq6C,EAAAlc,SAAAC,QAAA,CAAAp+B,KAAA,eACA,CAAAq6C,EAAAlc,SAAAqxB,uBAAA,CAAAxvD,KAAA,iBAAAyvD,UAAArT,GACA,CAAA/B,EAAAlc,SAAAuxB,UAAA,CAAA1vD,KAAA,eAAAyvD,WAAA,EAAAE,aAAA,GACA,CAAAtV,EAAAlc,SAAAyxB,iBAAA,CAAA5vD,KAAA,mBAAAyvD,WAAA,EAAAE,aAAA,IAGAE,EAAAlrE,OAAAoa,KAAA+vD,GAAAn5D,QAAA,CAAAuN,EAAAg7C,KACAh7C,EAAA4rD,EAAA5Q,GAAAl+C,MAAAk+C,EACAh7C,IACA,IACA4sD,EAAAnrE,OAAAoa,KAAAovD,GAAA9uC,QAAA1P,GAAAkgD,EAAAlgD,KAAAtkB,WAAA8iE,EAAAx+C,KAAAtkB,WAAA,OAAA8iE,EAAAx+C,KAkBA,GAjBAwW,EAAAyyB,UAAAkX,EACAjvD,KAAAkvD,IAAA,CACA/vD,KAAA6vD,EAAAE,GACAlX,OAAA,IAAAiW,EAAAe,EAAAE,IAAAJ,aAAA,iBAAAxB,EAAA4B,GACA,KACA5B,EAAA4B,GACArX,WAAA,IAAAoW,EAAAe,EAAAE,IAAAJ,aAAA,iBAAAxB,EAAA4B,GACA5B,EAAA4B,GACA1kE,cAEAg0B,QAAA2wC,GAAA,OAAAA,EAAAnX,OAAAmX,EAAAtX,YAAArtD,YACA86B,EAAAyyB,UAAA55C,MAAA,SAAArT,EAAAC,GACA,OAAAD,EAAAktD,OAAAruC,WAAA5e,EAAAitD,OAAAruC,SACA,IACA2b,EAAAyyB,UAAA55C,MAAA,SAAArT,EAAAC,GACA,OAAAD,EAAA+sD,WAAA4V,IAAA1iE,EAAA8sD,WAAA4V,EACA,IACAH,EAAA8B,0BAAA5kE,UAAA,CAMA,MAAA6kE,EAAA,CACAlwD,KAAAq6C,EAAAlc,SAAA2c,MACA/B,IAAAoV,EAAA8B,wBACApX,MAAA,MAGAsX,EAAAhqC,EAAAyyB,UAAA2E,WAAAvC,IAAA,IAAA8T,EAAA9T,EAAAh7C,OAAAyvD,aACA,IAAAU,EACAhqC,EAAAyyB,UAAAwX,OAAAD,EAAA,EAAAD,GAGA/pC,EAAAyyB,UAAA7nD,KAAAm/D,EAEA,CACA,MAAAG,EAAAlqC,EAAAyyB,UAAAhzD,OAAA,EAAAugC,EAAAyyB,UAAArwD,OAAA,MAAA8C,UAGA,OAFA86B,EAAA+X,SAAAmyB,GAAArwD,KACAmmB,EAAAyyB,UAAAj6B,QAAA,CAAA3e,KAAAq6C,EAAAlc,SAAAmyB,WAAAzX,MAAA,IACA1yB,CACA,CAqBAthC,EAAAy3D,iBAdA,SAAAnO,EAAAnuC,EAAAo8C,GACA,IACA,8CAAAxJ,MAAA2d,UAAApiB,KACA,UAAA9/C,MAAA,wDAKA,OAHA2R,IAAA3U,YACA8iD,EAAAnuC,QAEAkuD,EAAA/f,EAAAiO,EACA,CACA,MAAAvuC,GACA,UAAAxf,MAAA,kCAAAwf,EAAAxX,UACA,CACA,C,yTCvKA,SAAAspE,GAmDA,IAAAC,EACAC,EAAA,6CACAC,EAAAp5E,KAAAmI,KACAkxE,EAAAr5E,KAAAoH,MAEAkyE,EAAA,qBACAC,EAAAD,EAAA,yDAEAE,EAAA,KACAC,EAAA,GACAC,EAAA,iBAEAC,EAAA,2DACAC,EAAA,IAKAC,EAAA,IAqpFA,SAAAC,EAAAx3E,GACA,IAAA3B,EAAA,EAAA2B,EACA,OAAAA,EAAA,GAAAA,IAAA3B,MAAA,CACA,CAIA,SAAAo5E,EAAA90E,GAMA,IALA,IAAAjC,EAAAg3E,EACAr5E,EAAA,EACA4J,EAAAtF,EAAA/F,OACAixC,EAAAlrC,EAAA,MAEAtE,EAAA4J,GAAA,CAGA,IAFAvH,EAAAiC,EAAAtE,KAAA,GACAq5E,EAAAP,EAAAz2E,EAAA9D,OACA86E,IAAAh3E,EAAA,IAAAA,GACAmtC,GAAAntC,CACA,CAGA,IAAAuH,EAAA4lC,EAAAjxC,OAAA,KAAAixC,EAAA3tB,aAAAjY,KAEA,OAAA4lC,EAAAtuC,MAAA,EAAA0I,EAAA,KACA,CAIA,SAAA0vE,EAAA9vE,EAAAC,GACA,IAAAnF,EAAAC,EACAg1E,EAAA/vE,EAAAhF,EACAg1E,EAAA/vE,EAAAjF,EACAxE,EAAAwJ,EAAAnH,EACAuH,EAAAH,EAAApH,EACAogB,EAAAjZ,EAAAgd,EACA9lB,EAAA+I,EAAA+c,EAGA,IAAAxmB,IAAA4J,EAAA,YAMA,GAJAtF,EAAAi1E,MAAA,GACAh1E,EAAAi1E,MAAA,GAGAl1E,GAAAC,EAAA,OAAAD,EAAAC,EAAA,GAAAqF,EAAA5J,EAGA,GAAAA,GAAA4J,EAAA,OAAA5J,EAMA,GAJAsE,EAAAtE,EAAA,EACAuE,EAAAke,GAAA/hB,GAGA64E,IAAAC,EAAA,OAAAj1E,EAAA,GAAAg1E,EAAAj1E,EAAA,KAGA,IAAAC,EAAA,OAAAke,EAAA/hB,EAAA4D,EAAA,KAKA,IAHAsF,GAAA6Y,EAAA82D,EAAAh7E,SAAAmC,EAAA84E,EAAAj7E,QAAAkkB,EAAA/hB,EAGAV,EAAA,EAAAA,EAAA4J,EAAA5J,IAAA,GAAAu5E,EAAAv5E,IAAAw5E,EAAAx5E,GAAA,OAAAu5E,EAAAv5E,GAAAw5E,EAAAx5E,GAAAsE,EAAA,KAGA,OAAAme,GAAA/hB,EAAA,EAAA+hB,EAAA/hB,EAAA4D,EAAA,IACA,CAMA,SAAAm1E,EAAA93E,EAAArC,EAAA+2D,EAAA19C,GACA,GAAAhX,EAAArC,GAAAqC,EAAA00D,GAAA10D,IAAA+2E,EAAA/2E,GACA,MAAAqF,MACA2xE,GAAAhgE,GAAA,8BAAAhX,EACAA,EAAArC,GAAAqC,EAAA00D,EAAA,sCACA,6BAAAhe,OAAA12C,GAEA,CAIA,SAAA+3E,EAAA/3E,GACA,IAAA8gB,EAAA9gB,EAAA6C,EAAAjG,OAAA,EACA,OAAA46E,EAAAx3E,EAAA6kB,EAAAsyD,IAAAr2D,GAAA9gB,EAAA6C,EAAAie,GAAA,IACA,CAGA,SAAAk3D,EAAAlsE,EAAA+Y,GACA,OAAA/Y,EAAAlP,OAAA,EAAAkP,EAAAmsE,OAAA,OAAAnsE,EAAAvM,MAAA,GAAAuM,IACA+Y,EAAA,YAAAA,CACA,CAGA,SAAAqzD,EAAApsE,EAAA+Y,EAAA6yD,GACA,IAAAn6E,EAAA46E,EAGA,GAAAtzD,EAAA,GAGA,IAAAszD,EAAAT,EAAA,MAAA7yD,EAAAszD,GAAAT,GACA5rE,EAAAqsE,EAAArsE,CAGA,MAIA,KAAA+Y,GAHAtnB,EAAAuO,EAAAlP,QAGA,CACA,IAAAu7E,EAAAT,EAAA7yD,GAAAtnB,IAAAsnB,EAAAszD,GAAAT,GACA5rE,GAAAqsE,CACA,MAAAtzD,EAAAtnB,IACAuO,IAAAvM,MAAA,EAAAslB,GAAA,IAAA/Y,EAAAvM,MAAAslB,IAIA,OAAA/Y,CACA,CAMA8qE,EA3wFA,SAAAtxE,EAAA8yE,GACA,IAAAtZ,EAAAuZ,EAAAC,EA4kBAC,EAMAC,EAoqBAC,EACAC,EACAC,EACAC,EACAC,EAzvCAv0D,EAAAsyD,EAAA5pE,UAAA,CAAA5Q,YAAAw6E,EAAAxrE,SAAA,KAAA0tE,QAAA,MACAC,EAAA,IAAAnC,EAAA,GAUAoC,EAAA,GAaAC,EAAA,EAMAC,GAAA,EAIAC,EAAA,GAMAC,GAAA,IAKAC,EAAA,IAGAC,GAAA,EAkBAC,EAAA,EAIAC,EAAA,EAGAC,EAAA,CACA71D,OAAA,GACA81D,UAAA,EACAC,mBAAA,EACAC,eAAA,IACAC,iBAAA,IACAC,kBAAA,EACAC,uBAAA,IACA9wE,OAAA,IAMA+wE,EAAA,uCACAC,GAAA,EAgBA,SAAArD,EAAAx3E,EAAAwD,GACA,IAAAif,EAAAhf,EAAAq3E,EAAAr1D,EAAAxmB,EAAA87E,EAAA58E,EAAAuO,EACAjE,EAAAnL,KAGA,KAAAmL,aAAA+uE,GAAA,WAAAA,EAAAx3E,EAAAwD,GAEA,SAAAA,EAAA,CAEA,GAAAxD,IAAA,IAAAA,EAAAg7E,aAYA,OAXAvyE,EAAAnH,EAAAtB,EAAAsB,QAEAtB,EAAAyD,GAAAzD,EAAAylB,EAAAw0D,EACAxxE,EAAAhF,EAAAgF,EAAAgd,EAAA,KACAzlB,EAAAylB,EAAAu0D,EACAvxE,EAAAhF,EAAA,CAAAgF,EAAAgd,EAAA,IAEAhd,EAAAgd,EAAAzlB,EAAAylB,EACAhd,EAAAhF,EAAAzD,EAAAyD,EAAAtD,UAMA,IAAA46E,EAAA,iBAAA/6E,IAAA,EAAAA,GAAA,GAMA,GAHAyI,EAAAnH,EAAA,EAAAtB,EAAA,GAAAA,MAAA,KAGAA,QAAA,CACA,IAAAylB,EAAA,EAAAxmB,EAAAe,EAAAf,GAAA,GAAAA,GAAA,GAAAwmB,KASA,YAPAA,EAAAw0D,EACAxxE,EAAAhF,EAAAgF,EAAAgd,EAAA,MAEAhd,EAAAgd,IACAhd,EAAAhF,EAAA,CAAAzD,IAIA,CAEA0M,EAAA4qC,OAAAt3C,EACA,MAEA,IAAAy3E,EAAA3lC,KAAAplC,EAAA4qC,OAAAt3C,IAAA,OAAAk5E,EAAAzwE,EAAAiE,EAAAquE,GAEAtyE,EAAAnH,EAAA,IAAAoL,EAAAoU,WAAA,IAAApU,IAAAvM,MAAA,QACA,EAGAslB,EAAA/Y,EAAAkM,QAAA,WAAAlM,IAAAuuE,QAAA,UAGAh8E,EAAAyN,EAAAwuE,OAAA,UAGAz1D,EAAA,IAAAA,EAAAxmB,GACAwmB,IAAA/Y,EAAAvM,MAAAlB,EAAA,GACAyN,IAAAiD,UAAA,EAAA1Q,IACAwmB,EAAA,IAGAA,EAAA/Y,EAAAlP,OAGA,MAOA,GAJAk7E,EAAAl1E,EAAA,EAAAo3E,EAAAp9E,OAAA,QAIA,IAAAgG,GAAAq3E,EAEA,OAAAtyE,EADAE,EAAA,IAAA+uE,EAAAx3E,GACA45E,EAAAnxE,EAAAgd,EAAA,EAAAo0D,GAKA,GAFAntE,EAAA4qC,OAAAt3C,GAEA+6E,EAAA,iBAAA/6E,EAAA,CAGA,KAAAA,GAAA,SAAAk5E,EAAAzwE,EAAAiE,EAAAquE,EAAAv3E,GAKA,GAHAiF,EAAAnH,EAAA,EAAAtB,EAAA,GAAA0M,IAAAvM,MAAA,SAGAq3E,EAAA2D,OAAAzuE,EAAAuuE,QAAA,gBAAAz9E,OAAA,GACA,MAAAyI,MACA4xE,EAAA73E,EAEA,MACAyI,EAAAnH,EAAA,KAAAoL,EAAAoU,WAAA,IAAApU,IAAAvM,MAAA,SAQA,IALAsiB,EAAAm4D,EAAAz6E,MAAA,EAAAqD,GACAiiB,EAAAxmB,EAAA,EAIAd,EAAAuO,EAAAlP,OAAAyB,EAAAd,EAAAc,IACA,GAAAwjB,EAAA7J,QAAAnV,EAAAiJ,EAAAmsE,OAAA55E,IAAA,GACA,QAAAwE,GAGA,GAAAxE,EAAAwmB,EAAA,CACAA,EAAAtnB,EACA,QACA,OACA,IAAA28E,IAGApuE,KAAA0uE,gBAAA1uE,IAAAgY,gBACAhY,KAAAgY,gBAAAhY,IAAA0uE,gBAAA,CACAN,GAAA,EACA77E,GAAA,EACAwmB,EAAA,EACA,QACA,CAGA,OAAAyzD,EAAAzwE,EAAA6uC,OAAAt3C,GAAA+6E,EAAAv3E,EACA,CAIAu3E,GAAA,GAIAt1D,GAHA/Y,EAAAusE,EAAAvsE,EAAAlJ,EAAA,GAAAiF,EAAAnH,IAGAsX,QAAA,SAAAlM,IAAAuuE,QAAA,QACAx1D,EAAA/Y,EAAAlP,MACA,CAGA,IAAAyB,EAAA,OAAAyN,EAAAoU,WAAA7hB,QAGA,IAAAd,EAAAuO,EAAAlP,OAAA,KAAAkP,EAAAoU,aAAA3iB,KAEA,GAAAuO,IAAAvM,MAAAlB,IAAAd,GAAA,CAIA,GAHAA,GAAAc,EAGA87E,GAAAvD,EAAA2D,OACAh9E,EAAA,KAAA6B,EAAAg4E,GAAAh4E,IAAA23E,EAAA33E,IACA,MAAAiG,MACA4xE,EAAApvE,EAAAnH,EAAAtB,GAIA,IAAAylB,IAAAxmB,EAAA,GAAAg7E,EAGAxxE,EAAAhF,EAAAgF,EAAAgd,EAAA,UAGA,GAAAA,EAAAu0D,EAGAvxE,EAAAhF,EAAA,CAAAgF,EAAAgd,EAAA,OACA,CAWA,GAVAhd,EAAAgd,IACAhd,EAAAhF,EAAA,GAMAxE,GAAAwmB,EAAA,GAAAsyD,EACAtyD,EAAA,IAAAxmB,GAAA84E,GAEA94E,EAAAd,EAAA,CAGA,IAFAc,GAAAwJ,EAAAhF,EAAAkF,MAAA+D,EAAAvM,MAAA,EAAAlB,IAEAd,GAAA45E,EAAA94E,EAAAd,GACAsK,EAAAhF,EAAAkF,MAAA+D,EAAAvM,MAAAlB,KAAA84E,IAGA94E,EAAA84E,GAAArrE,IAAAvM,MAAAlB,IAAAzB,MACA,MACAyB,GAAAd,EAGA,KAAAc,IAAAyN,GAAA,KACAjE,EAAAhF,EAAAkF,MAAA+D,EACA,CACA,MAGAjE,EAAAhF,EAAA,CAAAgF,EAAAgd,EAAA,EAEA,CA21BA,SAAA41D,EAAAz6E,EAAA3B,EAAAq8E,EAAAzhE,GACA,IAAA0hE,EAAA91D,EAAA+1D,EAAAr9E,EAAAuO,EAKA,GAHA,MAAA4uE,IAAAzB,EACAnB,EAAA4C,EAAA,MAEA16E,EAAA6C,EAAA,OAAA7C,EAAAoL,WAKA,GAHAuvE,EAAA36E,EAAA6C,EAAA,GACA+3E,EAAA56E,EAAA6kB,EAEA,MAAAxmB,EACAyN,EAAA2rE,EAAAz3E,EAAA6C,GACAiJ,EAAA,GAAAmN,GAAA,GAAAA,IAAA2hE,GAAA1B,GAAA0B,GAAAzB,GACAnB,EAAAlsE,EAAA8uE,GACA1C,EAAApsE,EAAA8uE,EAAA,UAeA,GAVA/1D,GAHA7kB,EAAA2H,EAAA,IAAAivE,EAAA52E,GAAA3B,EAAAq8E,IAGA71D,EAGAtnB,GADAuO,EAAA2rE,EAAAz3E,EAAA6C,IACAjG,OAOA,GAAAqc,GAAA,GAAAA,IAAA5a,GAAAwmB,MAAAq0D,GAAA,CAGA,KAAA37E,EAAAc,EAAAyN,GAAA,IAAAvO,KACAuO,EAAAksE,EAAAlsE,EAAA+Y,EAGA,MAKA,GAJAxmB,GAAAu8E,EACA9uE,EAAAosE,EAAApsE,EAAA+Y,EAAA,KAGAA,EAAA,EAAAtnB,GACA,KAAAc,EAAA,MAAAyN,GAAA,IAAAzN,IAAAyN,GAAA,WAGA,IADAzN,GAAAwmB,EAAAtnB,GACA,EAEA,IADAsnB,EAAA,GAAAtnB,IAAAuO,GAAA,KACAzN,IAAAyN,GAAA,KAMA,OAAA9L,EAAAU,EAAA,GAAAi6E,EAAA,IAAA7uE,GACA,CAKA,SAAA+uE,EAAAC,EAAA96E,GAKA,IAJA,IAAA8gB,EAAAhZ,EACAzJ,EAAA,EACAwJ,EAAA,IAAA+uE,EAAAkE,EAAA,IAEAz8E,EAAAy8E,EAAAl+E,OAAAyB,OACAyJ,EAAA,IAAA8uE,EAAAkE,EAAAz8E,KACAqC,IAAAogB,EAAA62D,EAAA9vE,EAAAC,MAAA9H,GAAA,IAAA8gB,GAAAjZ,EAAAnH,IAAAV,KACA6H,EAAAC,GAIA,OAAAD,CACA,CAOA,SAAAkzE,EAAA/6E,EAAA6C,EAAAgiB,GAKA,IAJA,IAAAxmB,EAAA,EACA4J,EAAApF,EAAAjG,QAGAiG,IAAAoF,GAAApF,EAAAojB,OAGA,IAAAhe,EAAApF,EAAA,GAAAoF,GAAA,GAAAA,GAAA,GAAA5J,KAkBA,OAfAwmB,EAAAxmB,EAAAwmB,EAAAsyD,EAAA,GAAAkC,EAGAr5E,EAAA6C,EAAA7C,EAAA6kB,EAAA,KAGAA,EAAAu0D,EAGAp5E,EAAA6C,EAAA,CAAA7C,EAAA6kB,EAAA,IAEA7kB,EAAA6kB,IACA7kB,EAAA6C,KAGA7C,CACA,CAyDA,SAAA2H,EAAAE,EAAAmzE,EAAAN,EAAA7sC,GACA,IAAAt9B,EAAAlS,EAAA4J,EAAA6Y,EAAA9gB,EAAAi7E,EAAAC,EACAtD,EAAA/vE,EAAAhF,EACAs4E,EAAA9D,EAGA,GAAAO,EAAA,CAQA15E,EAAA,CAGA,IAAAqS,EAAA,EAAAuQ,EAAA82D,EAAA,GAAA92D,GAAA,GAAAA,GAAA,GAAAvQ,KAIA,IAHAlS,EAAA28E,EAAAzqE,GAGA,EACAlS,GAAA84E,EACAlvE,EAAA+yE,EACAh7E,EAAA43E,EAAAqD,EAAA,GAGAC,EAAAnE,EAAA/2E,EAAAm7E,EAAA5qE,EAAAtI,EAAA,YAIA,IAFAgzE,EAAAnE,GAAAz4E,EAAA,GAAA84E,KAEAS,EAAAh7E,OAAA,CAEA,IAAAixC,EASA,MAAA3vC,EANA,KAAA05E,EAAAh7E,QAAAq+E,EAAArD,EAAA7vE,KAAA,IACA/H,EAAAk7E,EAAA,EACA3qE,EAAA,EAEAtI,GADA5J,GAAA84E,GACAA,EAAA,CAIA,MAIA,IAHAn3E,EAAA8gB,EAAA82D,EAAAqD,GAGA1qE,EAAA,EAAAuQ,GAAA,GAAAA,GAAA,GAAAvQ,KAUA2qE,GAHAjzE,GAJA5J,GAAA84E,GAIAA,EAAA5mE,GAGA,IAAAwmE,EAAA/2E,EAAAm7E,EAAA5qE,EAAAtI,EAAA,MACA,CAkBA,GAfA4lC,KAAAmtC,EAAA,GAKA,MAAApD,EAAAqD,EAAA,KAAAhzE,EAAA,EAAAjI,IAAAm7E,EAAA5qE,EAAAtI,EAAA,IAEA4lC,EAAA6sC,EAAA,GACAQ,GAAArtC,KAAA,GAAA6sC,OAAA7yE,EAAAnH,EAAA,QACAw6E,EAAA,MAAAA,IAAA,GAAAR,GAAA7sC,GAAA,GAAA6sC,IAGAr8E,EAAA,EAAA4J,EAAA,EAAAjI,EAAAm7E,EAAA5qE,EAAAtI,GAAA,EAAA2vE,EAAAqD,EAAA,UACAP,IAAA7yE,EAAAnH,EAAA,QAEAs6E,EAAA,IAAApD,EAAA,GAiBA,OAhBAA,EAAAh7E,OAAA,EAEAixC,GAGAmtC,GAAAnzE,EAAAgd,EAAA,EAGA+yD,EAAA,GAAAuD,GAAAhE,EAAA6D,EAAA7D,MACAtvE,EAAAgd,GAAAm2D,GAAA,GAIApD,EAAA,GAAA/vE,EAAAgd,EAAA,EAGAhd,EAkBA,GAdA,GAAAxJ,GACAu5E,EAAAh7E,OAAAq+E,EACAn6D,EAAA,EACAm6D,MAEArD,EAAAh7E,OAAAq+E,EAAA,EACAn6D,EAAAq6D,EAAAhE,EAAA94E,GAIAu5E,EAAAqD,GAAAhzE,EAAA,EAAA8uE,EAAA/2E,EAAAm7E,EAAA5qE,EAAAtI,GAAAkzE,EAAAlzE,IAAA6Y,EAAA,GAIA+sB,EAEA,QAGA,MAAAotC,EAAA,CAGA,IAAA58E,EAAA,EAAA4J,EAAA2vE,EAAA,GAAA3vE,GAAA,GAAAA,GAAA,GAAA5J,KAEA,IADA4J,EAAA2vE,EAAA,IAAA92D,EACAA,EAAA,EAAA7Y,GAAA,GAAAA,GAAA,GAAA6Y,KAGAziB,GAAAyiB,IACAjZ,EAAAgd,IACA+yD,EAAA,IAAAV,IAAAU,EAAA,OAGA,KACA,CAEA,GADAA,EAAAqD,IAAAn6D,EACA82D,EAAAqD,IAAA/D,EAAA,MACAU,EAAAqD,KAAA,EACAn6D,EAAA,CAEA,CAIA,IAAAziB,EAAAu5E,EAAAh7E,OAAA,IAAAg7E,IAAAv5E,GAAAu5E,EAAA3xD,OACA,CAGApe,EAAAgd,EAAAw0D,EACAxxE,EAAAhF,EAAAgF,EAAAgd,EAAA,KAGAhd,EAAAgd,EAAAu0D,IACAvxE,EAAAhF,EAAA,CAAAgF,EAAAgd,EAAA,GAEA,CAEA,OAAAhd,CACA,CAGA,SAAAixE,EAAA94E,GACA,IAAA8L,EACA+Y,EAAA7kB,EAAA6kB,EAEA,cAAAA,EAAA7kB,EAAAoL,YAEAU,EAAA2rE,EAAAz3E,EAAA6C,GAEAiJ,EAAA+Y,GAAAq0D,GAAAr0D,GAAAs0D,EACAnB,EAAAlsE,EAAA+Y,GACAqzD,EAAApsE,EAAA+Y,EAAA,KAEA7kB,EAAAU,EAAA,MAAAoL,IACA,CA+qCA,OAn1EA8qE,EAAAtxE,QAEAsxE,EAAAwE,SAAA,EACAxE,EAAAyE,WAAA,EACAzE,EAAA0E,WAAA,EACA1E,EAAA2E,YAAA,EACA3E,EAAA4E,cAAA,EACA5E,EAAA6E,gBAAA,EACA7E,EAAA8E,gBAAA,EACA9E,EAAA+E,gBAAA,EACA/E,EAAAgF,iBAAA,EACAhF,EAAAiF,OAAA,EAqCAjF,EAAAzR,OAAAyR,EAAAh5E,IAAA,SAAAmP,GACA,IAAA4a,EAAAvoB,EAEA,SAAA2N,EAAA,CAEA,oBAAAA,EA4HA,MAAA1H,MACA2xE,EAAA,oBAAAjqE,GAvFA,GAlCAA,EAAA6a,eAAAD,EAAA,oBAEAmwD,EADA14E,EAAA2N,EAAA4a,GACA,EAAA4vD,EAAA5vD,GACAqxD,EAAA55E,GAKA2N,EAAA6a,eAAAD,EAAA,mBAEAmwD,EADA14E,EAAA2N,EAAA4a,GACA,IAAAA,GACAsxD,EAAA75E,GAOA2N,EAAA6a,eAAAD,EAAA,qBACAvoB,EAAA2N,EAAA4a,KACAvoB,EAAA6mB,KACA6xD,EAAA14E,EAAA,IAAAm4E,EAAA,EAAA5vD,GACAmwD,EAAA14E,EAAA,KAAAm4E,EAAA5vD,GACAuxD,EAAA95E,EAAA,GACA+5E,EAAA/5E,EAAA,KAEA04E,EAAA14E,GAAAm4E,IAAA5vD,GACAuxD,IAAAC,EAAA/5E,EAAA,GAAAA,OAOA2N,EAAA6a,eAAAD,EAAA,SAEA,IADAvoB,EAAA2N,EAAA4a,KACAvoB,EAAA6mB,IACA6xD,EAAA14E,EAAA,IAAAm4E,GAAA,EAAA5vD,GACAmwD,EAAA14E,EAAA,KAAAm4E,EAAA5vD,GACAyxD,EAAAh6E,EAAA,GACAi6E,EAAAj6E,EAAA,OACA,CAEA,GADA04E,EAAA14E,GAAAm4E,IAAA5vD,IACAvoB,EAGA,MAAAiG,MACA2xE,EAAArvD,EAAA,oBAAAvoB,GAHAg6E,IAAAC,EAAAj6E,EAAA,GAAAA,IAKA,CAMA,GAAA2N,EAAA6a,eAAAD,EAAA,WAEA,IADAvoB,EAAA2N,EAAA4a,QACAvoB,EAcA,MAAAiG,MACA2xE,EAAArvD,EAAA,uBAAAvoB,GAdA,GAAAA,EAAA,CACA,uBAAA+C,kBACAA,OAAAwL,kBAAAxL,OAAAiI,YAIA,MADAkvE,GAAAl6E,EACAiG,MACA2xE,EAAA,sBAJAsC,EAAAl6E,CAMA,MACAk6E,EAAAl6E,CAMA,CAoBA,GAhBA2N,EAAA6a,eAAAD,EAAA,iBAEAmwD,EADA14E,EAAA2N,EAAA4a,GACA,IAAAA,GACA4xD,EAAAn6E,GAKA2N,EAAA6a,eAAAD,EAAA,mBAEAmwD,EADA14E,EAAA2N,EAAA4a,GACA,EAAA4vD,EAAA5vD,GACA6xD,EAAAp6E,GAKA2N,EAAA6a,eAAAD,EAAA,WAEA,oBADAvoB,EAAA2N,EAAA4a,IAEA,MAAAtiB,MACA2xE,EAAArvD,EAAA,mBAAAvoB,GAFAq6E,EAAAr6E,CAGA,CAIA,GAAA2N,EAAA6a,eAAAD,EAAA,aAKA,oBAJAvoB,EAAA2N,EAAA4a,KAIA,wBAAAupB,KAAA9xC,GAIA,MAAAiG,MACA2xE,EAAArvD,EAAA,aAAAvoB,GAJA66E,EAAA,cAAA76E,EAAAG,MAAA,MACAy6E,EAAA56E,CAKA,CAQA,CAEA,OACA45E,iBACAC,gBACA6C,eAAA,CAAA5C,EAAAC,GACA4C,MAAA,CAAA3C,EAAAC,GACAC,SACAC,cACAC,gBACAC,SACAO,WAEA,EAYApD,EAAAoF,YAAA,SAAA58E,GACA,IAAAA,IAAA,IAAAA,EAAAg7E,aAAA,SACA,IAAAxD,EAAA2D,MAAA,SAEA,IAAAl8E,EAAA2B,EACA6C,EAAAzD,EAAAyD,EACAgiB,EAAAzlB,EAAAylB,EACAnkB,EAAAtB,EAAAsB,EAEAxC,EAAA,wBAAAkN,SAAA6B,KAAApK,IAEA,QAAAnC,IAAA,IAAAA,IAAAmkB,IAAA0yD,GAAA1yD,GAAA0yD,GAAA1yD,IAAAkyD,EAAAlyD,GAAA,CAGA,OAAAhiB,EAAA,IACA,OAAAgiB,GAAA,IAAAhiB,EAAAjG,OAAA,SACA,MAAAsB,CACA,CAQA,IALAG,GAAAwmB,EAAA,GAAAsyD,GACA,IAAA94E,GAAA84E,GAIAzgC,OAAA7zC,EAAA,IAAAjG,QAAAyB,EAAA,CAEA,IAAAA,EAAA,EAAAA,EAAAwE,EAAAjG,OAAAyB,IAEA,IADA2B,EAAA6C,EAAAxE,IACA,GAAA2B,GAAAk3E,GAAAl3E,IAAA+2E,EAAA/2E,GAAA,MAAA9B,EAIA,OAAA8B,EAAA,QACA,CACA,OAGA,UAAA6C,GAAA,OAAAgiB,IAAA,OAAAnkB,GAAA,IAAAA,IAAA,IAAAA,GACA,SAGA,MAAA2E,MACA2xE,EAAA,sBAAA53E,EACA,EAQAw3E,EAAAqF,QAAArF,EAAAliB,IAAA,WACA,OAAAmmB,EAAAnzD,WAAA,EACA,EAQAkvD,EAAAsF,QAAAtF,EAAAj5E,IAAA,WACA,OAAAk9E,EAAAnzD,UAAA,EACA,EAaAkvD,EAAAxqD,QACAmsD,EAAA,iBAMAC,EAAA96E,KAAA0uB,SAAAmsD,EAAA,QACA,kBAAAxB,EAAAr5E,KAAA0uB,SAAAmsD,EAAA,EACA,sCAAA76E,KAAA0uB,SAAA,IACA,QAAA1uB,KAAA0uB,SAAA,IAEA,SAAA+vD,GACA,IAAAx5E,EAAAC,EAAAiiB,EAAA/D,EAAA1hB,EACAf,EAAA,EACAwE,EAAA,GACAu5E,EAAA,IAAAxF,EAAAmC,GAOA,GALA,MAAAoD,IAAAnD,EACAlB,EAAAqE,EAAA,EAAA5E,GAEAz2D,EAAAg2D,EAAAqF,EAAAhF,GAEAmC,EAGA,GAAAn3E,OAAAwL,gBAAA,CAIA,IAFAhL,EAAAR,OAAAwL,gBAAA,IAAAvN,YAAA0gB,GAAA,IAEAziB,EAAAyiB,IAQA1hB,EAAA,OAAAuD,EAAAtE,IAAAsE,EAAAtE,EAAA,WAMA,MACAuE,EAAAT,OAAAwL,gBAAA,IAAAvN,YAAA,IACAuC,EAAAtE,GAAAuE,EAAA,GACAD,EAAAtE,EAAA,GAAAuE,EAAA,KAKAC,EAAAkF,KAAA3I,EAAA,MACAf,GAAA,GAGAA,EAAAyiB,EAAA,CAGA,UAAA3e,OAAAiI,YA2BA,MADAkvE,GAAA,EACAj0E,MACA2xE,EAAA,sBAvBA,IAFAr0E,EAAAR,OAAAiI,YAAA0W,GAAA,GAEAziB,EAAAyiB,IAMA1hB,EAAA,oBAAAuD,EAAAtE,IAAA,cAAAsE,EAAAtE,EAAA,GACA,WAAAsE,EAAAtE,EAAA,YAAAsE,EAAAtE,EAAA,IACAsE,EAAAtE,EAAA,SAAAsE,EAAAtE,EAAA,OAAAsE,EAAAtE,EAAA,KAEA,KACA8D,OAAAiI,YAAA,GAAA+mB,KAAAxuB,EAAAtE,IAIAwE,EAAAkF,KAAA3I,EAAA,MACAf,GAAA,GAGAA,EAAAyiB,EAAA,CAKA,CAIA,IAAAw4D,EAEA,KAAAj7E,EAAAyiB,IACA1hB,EAAAo5E,KACA,OAAA31E,EAAAxE,KAAAe,EAAA,MAcA,IAVA0hB,EAAAje,IAAAxE,GACA89E,GAAAhF,EAGAr2D,GAAAq7D,IACA/8E,EAAAi4E,EAAAF,EAAAgF,GACAt5E,EAAAxE,GAAA04E,EAAAj2D,EAAA1hB,MAIA,IAAAyD,EAAAxE,GAAAwE,EAAAojB,MAAA5nB,KAGA,GAAAA,EAAA,EACAwE,EAAA,CAAAgiB,EAAA,OACA,CAGA,IAAAA,GAAA,MAAAhiB,EAAA,GAAAA,EAAAukE,OAAA,KAAAviD,GAAAsyD,GAGA,IAAA94E,EAAA,EAAAe,EAAAyD,EAAA,GAAAzD,GAAA,GAAAA,GAAA,GAAAf,KAGAA,EAAA84E,IAAAtyD,GAAAsyD,EAAA94E,EACA,CAIA,OAFA+9E,EAAAv3D,IACAu3D,EAAAv5E,IACAu5E,CACA,GASAxF,EAAAyF,IAAA,WAIA,IAHA,IAAAh+E,EAAA,EACAy8E,EAAApzD,UACA20D,EAAA,IAAAzF,EAAAkE,EAAA,IACAz8E,EAAAy8E,EAAAl+E,QAAAy/E,IAAA/tC,KAAAwsC,EAAAz8E,MACA,OAAAg+E,CACA,EAOAhE,EAAA,WACA,IAAAiE,EAAA,aAOA,SAAAC,EAAAzwE,EAAA0wE,EAAAC,EAAA56D,GAOA,IANA,IAAA5Z,EAEAy0E,EADA5xE,EAAA,IAEAzM,EAAA,EACAd,EAAAuO,EAAAlP,OAEAyB,EAAAd,GAAA,CACA,IAAAm/E,EAAA5xE,EAAAlO,OAAA8/E,IAAA5xE,EAAA4xE,IAAAF,GAIA,IAFA1xE,EAAA,IAAA+W,EAAA7J,QAAAlM,EAAAmsE,OAAA55E,MAEA4J,EAAA,EAAAA,EAAA6C,EAAAlO,OAAAqL,IAEA6C,EAAA7C,GAAAw0E,EAAA,IACA,MAAA3xE,EAAA7C,EAAA,KAAA6C,EAAA7C,EAAA,MACA6C,EAAA7C,EAAA,IAAA6C,EAAA7C,GAAAw0E,EAAA,EACA3xE,EAAA7C,IAAAw0E,EAGA,CAEA,OAAA3xE,EAAAomB,SACA,CAKA,gBAAAplB,EAAA0wE,EAAAC,EAAA/xD,EAAAiyD,GACA,IAAA96D,EAAAtR,EAAAsU,EAAA/D,EAAA+sB,EAAAhmC,EAAA+vE,EAAA9vE,EACAzJ,EAAAyN,EAAAkM,QAAA,KACAmkE,EAAAnD,EACA0B,EAAAzB,EA+BA,IA5BA56E,GAAA,IACAyiB,EAAA04D,EAGAA,EAAA,EACA1tE,IAAAuuE,QAAA,QAEAxyE,GADAC,EAAA,IAAA8uE,EAAA4F,IACAnkB,IAAAvsD,EAAAlP,OAAAyB,GACAm7E,EAAA14D,EAKAhZ,EAAAjF,EAAA05E,EAAArE,EAAAT,EAAA5vE,EAAAhF,GAAAgF,EAAAgd,EAAA,KACA,GAAA43D,EAAAH,GACAx0E,EAAA+c,EAAA/c,EAAAjF,EAAAjG,QAUAioB,EAAA/D,GALA82D,EAAA2E,EAAAzwE,EAAA0wE,EAAAC,EAAAE,GACA96D,EAAAm4D,EAAAsC,IACAz6D,EAAAy6D,EAAAtC,KAGAp9E,OAGA,GAAAg7E,IAAA92D,GAAA82D,EAAA3xD,OAGA,IAAA2xD,EAAA,UAAA/1D,EAAAo2D,OAAA,GAqCA,GAlCA55E,EAAA,IACAwmB,GAEAhd,EAAAhF,EAAA+0E,EACA/vE,EAAAgd,IAGAhd,EAAAnH,EAAAgqB,EAEAktD,GADA/vE,EAAAi3D,EAAAj3D,EAAAC,EAAAq0E,EAAAzB,EAAA+B,IACA55E,EACAgrC,EAAAhmC,EAAAgmC,EACAhpB,EAAAhd,EAAAgd,GASAxmB,EAAAu5E,EAHArnE,EAAAsU,EAAAs3D,EAAA,GAOAr7D,EAAA27D,EAAA,EACA5uC,KAAAt9B,EAAA,SAAAqnE,EAAArnE,EAAA,GAEAs9B,EAAA6sC,EAAA,SAAAr8E,GAAAwvC,KAAA,GAAA6sC,OAAA7yE,EAAAnH,EAAA,QACArC,EAAAyiB,GAAAziB,GAAAyiB,IAAA,GAAA45D,GAAA7sC,GAAA,GAAA6sC,GAAA,EAAA9C,EAAArnE,EAAA,IACAmqE,IAAA7yE,EAAAnH,EAAA,QAKA6P,EAAA,IAAAqnE,EAAA,GAGA9rE,EAAA+hC,EAAAqqC,EAAAr2D,EAAAo2D,OAAA,IAAAkE,EAAAt6D,EAAAo2D,OAAA,IAAAp2D,EAAAo2D,OAAA,OACA,CAMA,GAHAL,EAAAh7E,OAAA2T,EAGAs9B,EAGA,MAAA4uC,IAAA7E,IAAArnE,GAAAksE,GACA7E,EAAArnE,GAAA,EAEAA,MACAsU,EACA+yD,EAAA,IAAAn0D,OAAAm0D,IAMA,IAAA92D,EAAA82D,EAAAh7E,QAAAg7E,IAAA92D,KAGA,IAAAziB,EAAA,EAAAyN,EAAA,GAAAzN,GAAAyiB,EAAAhV,GAAA+V,EAAAo2D,OAAAL,EAAAv5E,OAGAyN,EAAAosE,EAAApsE,EAAA+Y,EAAAhD,EAAAo2D,OAAA,GACA,CAGA,OAAAnsE,CACA,CACA,CAnJA,GAuJAgzD,EAAA,WAGA,SAAA8d,EAAA/0E,EAAAiZ,EAAAyP,GACA,IAAAzQ,EAAA+8D,EAAAC,EAAAC,EACAC,EAAA,EACA3+E,EAAAwJ,EAAAjL,OACAqgF,EAAAn8D,EAAAw2D,EACA4F,EAAAp8D,EAAAw2D,EAAA,EAEA,IAAAzvE,IAAAtI,QAAAlB,KAKA2+E,IADAH,EAAAI,GAHAH,EAAAj1E,EAAAxJ,GAAAi5E,IAEAx3D,EAAAo9D,EAAAJ,GADAC,EAAAl1E,EAAAxJ,GAAAi5E,EAAA,GACA2F,GACA3F,IAAA0F,GACAzsD,EAAA,IAAAzQ,EAAAw3D,EAAA,GAAA4F,EAAAH,EACAl1E,EAAAxJ,GAAAw+E,EAAAtsD,EAKA,OAFAysD,IAAAn1E,EAAA,CAAAm1E,GAAAv5D,OAAA5b,IAEAA,CACA,CAEA,SAAA8vE,EAAAh1E,EAAAC,EAAAu6E,EAAAC,GACA,IAAA/+E,EAAAg/E,EAEA,GAAAF,GAAAC,EACAC,EAAAF,EAAAC,EAAA,UAGA,IAAA/+E,EAAAg/E,EAAA,EAAAh/E,EAAA8+E,EAAA9+E,IAEA,GAAAsE,EAAAtE,IAAAuE,EAAAvE,GAAA,CACAg/E,EAAA16E,EAAAtE,GAAAuE,EAAAvE,GAAA,KACA,KACA,CAIA,OAAAg/E,CACA,CAEA,SAAAC,EAAA36E,EAAAC,EAAAu6E,EAAA5sD,GAIA,IAHA,IAAAlyB,EAAA,EAGA8+E,KACAx6E,EAAAw6E,IAAA9+E,EACAA,EAAAsE,EAAAw6E,GAAAv6E,EAAAu6E,GAAA,IACAx6E,EAAAw6E,GAAA9+E,EAAAkyB,EAAA5tB,EAAAw6E,GAAAv6E,EAAAu6E,GAIA,MAAAx6E,EAAA,IAAAA,EAAA/F,OAAA,EAAA+F,EAAAykE,OAAA,MACA,CAGA,gBAAAv/D,EAAAC,EAAAq0E,EAAAzB,EAAAnqD,GACA,IAAA8sD,EAAAx4D,EAAAxmB,EAAAk/E,EAAAv9E,EAAAw9E,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EACAz9E,EAAAmH,EAAAnH,GAAAoH,EAAApH,EAAA,KACAk3E,EAAA/vE,EAAAhF,EACAg1E,EAAA/vE,EAAAjF,EAGA,KAAA+0E,KAAA,IAAAC,KAAA,IAEA,WAAAjB,EAGA/uE,EAAAnH,GAAAoH,EAAApH,IAAAk3E,GAAAC,GAAAD,EAAA,IAAAC,EAAA,GAAAA,GAGAD,GAAA,GAAAA,EAAA,KAAAC,EAAA,EAAAn3E,IAAA,EAHA09E,KAoBA,IAZAT,GADAD,EAAA,IAAA9G,EAAAl2E,IACAmC,EAAA,GAEAnC,EAAAy7E,GADAt3D,EAAAhd,EAAAgd,EAAA/c,EAAA+c,GACA,EAEA0L,IACAA,EAAA2mD,EACAryD,EAAA2yD,EAAA3vE,EAAAgd,EAAAsyD,GAAAK,EAAA1vE,EAAA+c,EAAAsyD,GACAz2E,IAAAy2E,EAAA,GAKA94E,EAAA,EAAAw5E,EAAAx5E,KAAAu5E,EAAAv5E,IAAA,GAAAA,KAIA,GAFAw5E,EAAAx5E,IAAAu5E,EAAAv5E,IAAA,IAAAwmB,IAEAnkB,EAAA,EACAi9E,EAAA51E,KAAA,GACAw1E,GAAA,MACA,CAwBA,IAvBAS,EAAApG,EAAAh7E,OACAshF,EAAArG,EAAAj7E,OACAyB,EAAA,EACAqC,GAAA,GAIAV,EAAA+2E,EAAAxmD,GAAAsnD,EAAA,QAIA,IACAA,EAAA+E,EAAA/E,EAAA73E,EAAAuwB,GACAqnD,EAAAgF,EAAAhF,EAAA53E,EAAAuwB,GACA2tD,EAAArG,EAAAj7E,OACAohF,EAAApG,EAAAh7E,QAGAmhF,EAAAG,EAEAL,GADAD,EAAAhG,EAAAr4E,MAAA,EAAA2+E,IACAthF,OAGAihF,EAAAK,EAAAN,EAAAC,KAAA,GACAM,EAAAtG,EAAAt4E,QACA4+E,EAAA,IAAA16D,OAAA06D,GACAF,EAAApG,EAAA,GACAA,EAAA,IAAAtnD,EAAA,GAAA0tD,IAIA,GAOA,GANAj+E,EAAA,GAGAq9E,EAAA1F,EAAAE,EAAA+F,EAAAM,EAAAL,IAGA,GAqBA,GAjBAC,EAAAF,EAAA,GACAM,GAAAL,IAAAC,IAAAvtD,GAAAqtD,EAAA,SAGA59E,EAAA+2E,EAAA+G,EAAAG,IAaA,EAcA,IAXAj+E,GAAAuwB,IAAAvwB,EAAAuwB,EAAA,GAIAktD,GADAD,EAAAZ,EAAA/E,EAAA73E,EAAAuwB,IACA3zB,OACAihF,EAAAD,EAAAhhF,OAMA,GAAA+6E,EAAA6F,EAAAI,EAAAH,EAAAI,IACA79E,IAGAs9E,EAAAE,EAAAU,EAAAT,EAAAU,EAAAtG,EAAA4F,EAAAltD,GACAktD,EAAAD,EAAA5gF,OACAygF,EAAA,OAQA,GAAAr9E,IAGAq9E,EAAAr9E,EAAA,GAKAy9E,GADAD,EAAA3F,EAAAt4E,SACA3C,OAUA,GAPA6gF,EAAAI,IAAAL,EAAA,IAAA/5D,OAAA+5D,IAGAF,EAAAM,EAAAJ,EAAAK,EAAAttD,GACAstD,EAAAD,EAAAhhF,QAGA,GAAAygF,EAMA,KAAA1F,EAAAE,EAAA+F,EAAAM,EAAAL,GAAA,GACA79E,IAGAs9E,EAAAM,EAAAM,EAAAL,EAAAM,EAAAtG,EAAAgG,EAAAttD,GACAstD,EAAAD,EAAAhhF,MAGA,UAAAygF,IACAr9E,IACA49E,EAAA,KAIAD,EAAAt/E,KAAA2B,EAGA49E,EAAA,GACAA,EAAAC,KAAAjG,EAAAmG,IAAA,GAEAH,EAAA,CAAAhG,EAAAmG,IACAF,EAAA,EAEA,QAAAE,IAAAC,GAAA,MAAAJ,EAAA,KAAAl9E,KAEA68E,EAAA,MAAAK,EAAA,GAGAD,EAAA,IAAAA,EAAAvW,OAAA,IACA,CAEA,GAAA72C,GAAA2mD,EAAA,CAGA,IAAA74E,EAAA,EAAAqC,EAAAi9E,EAAA,GAAAj9E,GAAA,GAAAA,GAAA,GAAArC,KAEAsJ,EAAA+1E,EAAAvB,GAAAuB,EAAA74D,EAAAxmB,EAAAwmB,EAAAsyD,EAAA,KAAAuD,EAAA6C,EAGA,MACAG,EAAA74D,IACA64D,EAAA7vC,GAAA0vC,EAGA,OAAAG,CACA,CACA,CAhQA,GA4XAjF,EAAA,8BACAC,EAAA,cACAC,EAAA,cACAC,EAAA,qBACAC,EAAA,6BALAP,EAOA,SAAAzwE,EAAAiE,EAAAquE,EAAAv3E,GACA,IAAA2tB,EACA7vB,EAAAy5E,EAAAruE,IAAAuuE,QAAAxB,EAAA,IAGA,GAAAD,EAAA1nC,KAAAxwC,GACAmH,EAAAnH,EAAAmL,MAAAnL,GAAA,KAAAA,EAAA,WACA,CACA,IAAAy5E,IAGAz5E,IAAA25E,QAAA5B,GAAA,SAAA34D,EAAAu+D,EAAAC,GAEA,OADA/tD,EAAA,MAAA+tD,IAAAx6D,eAAA,QAAAw6D,EAAA,IACA17E,MAAA2tB,EAAAzQ,EAAAu+D,CACA,IAEAz7E,IACA2tB,EAAA3tB,EAGAlC,IAAA25E,QAAA3B,EAAA,MAAA2B,QAAA1B,EAAA,SAGA7sE,GAAApL,GAAA,WAAAk2E,EAAAl2E,EAAA6vB,GAKA,GAAAqmD,EAAA2D,MACA,MAAAl1E,MACA2xE,EAAA,SAAAp0E,EAAA,SAAAA,EAAA,gBAAAkJ,GAIAjE,EAAAnH,EAAA,IACA,CAEAmH,EAAAhF,EAAAgF,EAAAgd,EAAA,IACA,EA4LAP,EAAAi6D,cAAAj6D,EAAAk6D,IAAA,WACA,IAAA32E,EAAA,IAAA+uE,EAAAl6E,MAEA,OADAmL,EAAAnH,EAAA,IAAAmH,EAAAnH,EAAA,GACAmH,CACA,EAUAyc,EAAAm6D,WAAA,SAAA32E,EAAAlF,GACA,OAAA+0E,EAAAj7E,KAAA,IAAAk6E,EAAA9uE,EAAAlF,GACA,EAgBA0hB,EAAAo6D,cAAAp6D,EAAA63D,GAAA,SAAAA,EAAAzB,GACA,IAAA73E,EAAA7C,EAAAZ,EACAyI,EAAAnL,KAEA,SAAAy/E,EAKA,OAJArE,EAAAqE,EAAA,EAAA5E,GACA,MAAAmD,IAAAzB,EACAnB,EAAA4C,EAAA,KAEA/yE,EAAA,IAAAivE,EAAA/uE,GAAAs0E,EAAAt0E,EAAAgd,EAAA,EAAA61D,GAGA,KAAA73E,EAAAgF,EAAAhF,GAAA,YAIA,GAHA7C,IAAAZ,EAAAyD,EAAAjG,OAAA,GAAA46E,EAAA96E,KAAAmoB,EAAAsyD,MAGA/3E,EAAAyD,EAAAzD,GAAA,KAAAA,EAAA,MAAAA,GAAA,GAAAY,KAGA,OAFAA,EAAA,IAAAA,EAAA,GAEAA,CACA,EAuBAskB,EAAAq6D,UAAAr6D,EAAAw6C,IAAA,SAAAh3D,EAAAlF,GACA,OAAAk8D,EAAApiE,KAAA,IAAAk6E,EAAA9uE,EAAAlF,GAAAo2E,EAAAC,EACA,EAOA30D,EAAAs6D,mBAAAt6D,EAAAu6D,KAAA,SAAA/2E,EAAAlF,GACA,OAAAk8D,EAAApiE,KAAA,IAAAk6E,EAAA9uE,EAAAlF,GAAA,IACA,EAkBA0hB,EAAAw6D,gBAAAx6D,EAAA+zC,IAAA,SAAAr4D,EAAA8f,GACA,IAAAi/D,EAAAC,EAAA3gF,EAAAyiB,EAAAm+D,EAAAC,EAAAC,EAAAr3E,EACAD,EAAAnL,KAKA,IAHAsD,EAAA,IAAA42E,EAAA52E,IAGA6C,IAAA7C,EAAAo/E,YACA,MAAA/5E,MACA2xE,EAAA,4BAAA8B,EAAA94E,IASA,GANA,MAAA8f,MAAA,IAAA82D,EAAA92D,IAGAm/D,EAAAj/E,EAAA6kB,EAAA,IAGAhd,EAAAhF,IAAAgF,EAAAhF,EAAA,OAAAgF,EAAAhF,EAAA,KAAAgF,EAAAgd,GAAA,GAAAhd,EAAAhF,EAAAjG,SAAAoD,EAAA6C,IAAA7C,EAAA6C,EAAA,GAKA,OADAiF,EAAA,IAAA8uE,EAAAl5E,KAAA26D,KAAAygB,EAAAjxE,GAAAo3E,EAAAj/E,EAAAU,GAAA,EAAAq3E,EAAA/3E,KAAA84E,EAAA94E,KACA8f,EAAAhY,EAAAkG,IAAA8R,GAAAhY,EAKA,GAFAo3E,EAAAl/E,EAAAU,EAAA,EAEAof,EAAA,CAGA,GAAAA,EAAAjd,GAAAid,EAAAjd,EAAA,IAAAid,EAAApf,EAAA,WAAAk2E,EAAAwH,MAEAY,GAAAE,GAAAr3E,EAAAu3E,aAAAt/D,EAAAs/D,eAEAv3E,IAAAmG,IAAA8R,GAIA,SAAA9f,EAAA6kB,EAAA,IAAAhd,EAAAgd,EAAA,GAAAhd,EAAAgd,GAAA,OAAAhd,EAAAgd,EAEAhd,EAAAhF,EAAA,MAAAo8E,GAAAp3E,EAAAhF,EAAA,SAEAgF,EAAAhF,EAAA,SAAAo8E,GAAAp3E,EAAAhF,EAAA,gBASA,OANAie,EAAAjZ,EAAAnH,EAAA,GAAAq3E,EAAA/3E,IAAA,IAGA6H,EAAAgd,GAAA,IAAA/D,EAAA,EAAAA,GAGA,IAAA81D,EAAAsI,EAAA,EAAAp+D,KAEA04D,IAKA14D,EAAAg2D,EAAA0C,EAAArC,EAAA,GACA,CAcA,IAZA8H,GACAF,EAAA,IAAAnI,EAAA,IACAsI,IAAAl/E,EAAAU,EAAA,GACAy+E,EAAApH,EAAA/3E,IAGAm/E,GADA9gF,EAAAX,KAAA8gF,KAAA1F,EAAA94E,KACA,EAGA8H,EAAA,IAAA8uE,EAAAmC,KAGA,CAEA,GAAAoG,EAAA,CAEA,KADAr3E,IAAA4mC,MAAA7mC,IACAhF,EAAA,MAEAie,EACAhZ,EAAAjF,EAAAjG,OAAAkkB,IAAAhZ,EAAAjF,EAAAjG,OAAAkkB,GACAk+D,IACAl3E,IAAAkG,IAAA8R,GAEA,CAEA,GAAAzhB,EAAA,CAEA,QADAA,EAAA04E,EAAA14E,EAAA,IACA,MACA8gF,EAAA9gF,EAAA,CACA,MAIA,GAFAsJ,EADA3H,IAAA0uC,MAAAqwC,GACA/+E,EAAA6kB,EAAA,KAEA7kB,EAAA6kB,EAAA,GACAs6D,EAAApH,EAAA/3E,OACA,CAEA,QADA3B,GAAAy6E,EAAA94E,IACA,MACAm/E,EAAA9gF,EAAA,CACA,CAGAwJ,IAAA6mC,MAAA7mC,GAEAiZ,EACAjZ,EAAAhF,GAAAgF,EAAAhF,EAAAjG,OAAAkkB,IAAAjZ,EAAAhF,EAAAjG,OAAAkkB,GACAk+D,IACAn3E,IAAAmG,IAAA8R,GAEA,CAEA,OAAAk/D,EAAAl3E,GACAo3E,IAAAp3E,EAAAixE,EAAAja,IAAAh3D,IAEAgY,EAAAhY,EAAAkG,IAAA8R,GAAAgB,EAAAnZ,EAAAG,EAAA0xE,EAAAP,EAnHAsE,WAmHAz1E,EACA,EAWAwc,EAAA+6D,aAAA,SAAA3E,GACA,IAAA16E,EAAA,IAAA42E,EAAAl6E,MAGA,OAFA,MAAAg+E,IAAAzB,EACAnB,EAAA4C,EAAA,KACA/yE,EAAA3H,IAAA6kB,EAAA,EAAA61D,EACA,EAOAp2D,EAAAg7D,UAAAh7D,EAAAnE,GAAA,SAAArY,EAAAlF,GACA,WAAA+0E,EAAAj7E,KAAA,IAAAk6E,EAAA9uE,EAAAlF,GACA,EAMA0hB,EAAAi7D,SAAA,WACA,QAAA7iF,KAAAmG,CACA,EAOAyhB,EAAAk7D,cAAAl7D,EAAA+6C,GAAA,SAAAv3D,EAAAlF,GACA,OAAA+0E,EAAAj7E,KAAA,IAAAk6E,EAAA9uE,EAAAlF,IAAA,CACA,EAOA0hB,EAAAm7D,uBAAAn7D,EAAAumB,IAAA,SAAA/iC,EAAAlF,GACA,YAAAA,EAAA+0E,EAAAj7E,KAAA,IAAAk6E,EAAA9uE,EAAAlF,MAAA,IAAAA,CAEA,EAMA0hB,EAAA86D,UAAA,WACA,QAAA1iF,KAAAmG,GAAA20E,EAAA96E,KAAAmoB,EAAAsyD,GAAAz6E,KAAAmG,EAAAjG,OAAA,CACA,EAOA0nB,EAAAo7D,WAAAp7D,EAAA86C,GAAA,SAAAt3D,EAAAlF,GACA,OAAA+0E,EAAAj7E,KAAA,IAAAk6E,EAAA9uE,EAAAlF,IAAA,CACA,EAOA0hB,EAAAq7D,oBAAAr7D,EAAAs7D,IAAA,SAAA93E,EAAAlF,GACA,YAAAA,EAAA+0E,EAAAj7E,KAAA,IAAAk6E,EAAA9uE,EAAAlF,MAAA,IAAAA,CACA,EAMA0hB,EAAAzY,MAAA,WACA,OAAAnP,KAAAgE,CACA,EAMA4jB,EAAAu7D,WAAA,WACA,OAAAnjF,KAAAgE,EAAA,CACA,EAMA4jB,EAAAw7D,WAAA,WACA,OAAApjF,KAAAgE,EAAA,CACA,EAMA4jB,EAAAy7D,OAAA,WACA,QAAArjF,KAAAmG,GAAA,GAAAnG,KAAAmG,EAAA,EACA,EAuBAyhB,EAAA07D,MAAA,SAAAl4E,EAAAlF,GACA,IAAAvE,EAAA4J,EAAAD,EAAAi4E,EACAp4E,EAAAnL,KACAiG,EAAAkF,EAAAnH,EAMA,GAHAkC,GADAkF,EAAA,IAAA8uE,EAAA9uE,EAAAlF,IACAlC,GAGAiC,IAAAC,EAAA,WAAAg0E,EAAAwH,KAGA,GAAAz7E,GAAAC,EAEA,OADAkF,EAAApH,GAAAkC,EACAiF,EAAAymC,KAAAxmC,GAGA,IAAAo4E,EAAAr4E,EAAAgd,EAAAsyD,EACAgJ,EAAAr4E,EAAA+c,EAAAsyD,EACAS,EAAA/vE,EAAAhF,EACAg1E,EAAA/vE,EAAAjF,EAEA,IAAAq9E,IAAAC,EAAA,CAGA,IAAAvI,IAAAC,EAAA,OAAAD,GAAA9vE,EAAApH,GAAAkC,EAAAkF,GAAA,IAAA8uE,EAAAiB,EAAAhwE,EAAAu2E,KAGA,IAAAxG,EAAA,KAAAC,EAAA,GAGA,OAAAA,EAAA,IAAA/vE,EAAApH,GAAAkC,EAAAkF,GAAA,IAAA8uE,EAAAgB,EAAA,GAAA/vE,EAGA,GAAAoxE,GAAA,IAEA,CAOA,GALAiH,EAAA1I,EAAA0I,GACAC,EAAA3I,EAAA2I,GACAvI,IAAAr4E,QAGAoD,EAAAu9E,EAAAC,EAAA,CAaA,KAXAF,EAAAt9E,EAAA,IACAA,KACAqF,EAAA4vE,IAEAuI,EAAAD,EACAl4E,EAAA6vE,GAGA7vE,EAAAkpB,UAGAtuB,EAAAD,EAAAC,IAAAoF,EAAAD,KAAA,IACAC,EAAAkpB,SACA,MAKA,IAFAjpB,GAAAg4E,GAAAt9E,EAAAi1E,EAAAh7E,SAAAgG,EAAAi1E,EAAAj7E,SAAA+F,EAAAC,EAEAD,EAAAC,EAAA,EAAAA,EAAAqF,EAAArF,IAEA,GAAAg1E,EAAAh1E,IAAAi1E,EAAAj1E,GAAA,CACAq9E,EAAArI,EAAAh1E,GAAAi1E,EAAAj1E,GACA,KACA,CAgBA,GAXAq9E,IACAj4E,EAAA4vE,EACAA,EAAAC,EACAA,EAAA7vE,EACAF,EAAApH,GAAAoH,EAAApH,IAGAkC,GAAAqF,EAAA4vE,EAAAj7E,SAAAyB,EAAAu5E,EAAAh7E,SAIA,OAAAgG,IAAAg1E,EAAAv5E,KAAA,GAIA,IAHAuE,EAAAs0E,EAAA,EAGAjvE,EAAAtF,GAAA,CAEA,GAAAi1E,IAAA3vE,GAAA4vE,EAAA5vE,GAAA,CACA,IAAA5J,EAAA4J,EAAA5J,IAAAu5E,IAAAv5E,GAAAu5E,EAAAv5E,GAAAuE,KACAg1E,EAAAv5E,GACAu5E,EAAA3vE,IAAAivE,CACA,CAEAU,EAAA3vE,IAAA4vE,EAAA5vE,EACA,CAGA,QAAA2vE,EAAA,GAAAA,EAAAxQ,OAAA,OAAA+Y,GAGA,OAAAvI,EAAA,GAWAmD,EAAAjzE,EAAA8vE,EAAAuI,IAPAr4E,EAAApH,EAAA,GAAAu4E,GAAA,IACAnxE,EAAAjF,EAAA,CAAAiF,EAAA+c,EAAA,GACA/c,EAMA,EAwBAwc,EAAA87D,OAAA97D,EAAAtW,IAAA,SAAAlG,EAAAlF,GACA,IAAA86E,EAAAh9E,EACAmH,EAAAnL,KAKA,OAHAoL,EAAA,IAAA8uE,EAAA9uE,EAAAlF,IAGAiF,EAAAhF,IAAAiF,EAAApH,GAAAoH,EAAAjF,IAAAiF,EAAAjF,EAAA,GACA,IAAA+zE,EAAAwH,MAGAt2E,EAAAjF,GAAAgF,EAAAhF,IAAAgF,EAAAhF,EAAA,GACA,IAAA+zE,EAAA/uE,IAGA,GAAA0xE,GAIA74E,EAAAoH,EAAApH,EACAoH,EAAApH,EAAA,EACAg9E,EAAA5e,EAAAj3D,EAAAC,EAAA,KACAA,EAAApH,IACAg9E,EAAAh9E,MAEAg9E,EAAA5e,EAAAj3D,EAAAC,EAAA,EAAAyxE,IAGAzxE,EAAAD,EAAAm4E,MAAAtC,EAAAhvC,MAAA5mC,KAGAjF,EAAA,OAAA02E,IAAAzxE,EAAApH,EAAAmH,EAAAnH,GAEAoH,EACA,EAuBAwc,EAAA+7D,aAAA/7D,EAAAoqB,MAAA,SAAA5mC,EAAAlF,GACA,IAAAC,EAAAgiB,EAAAxmB,EAAA4J,EAAA6Y,EAAAhB,EAAAwgE,EAAAxD,EAAAC,EAAAwD,EAAAC,EAAAC,EAAAC,EACAnwD,EAAAowD,EACA94E,EAAAnL,KACAk7E,EAAA/vE,EAAAhF,EACAg1E,GAAA/vE,EAAA,IAAA8uE,EAAA9uE,EAAAlF,IAAAC,EAGA,KAAA+0E,GAAAC,GAAAD,EAAA,IAAAC,EAAA,IAmBA,OAhBAhwE,EAAAnH,IAAAoH,EAAApH,GAAAk3E,MAAA,KAAAC,SAAA,KAAAD,EACA9vE,EAAAjF,EAAAiF,EAAA+c,EAAA/c,EAAApH,EAAA,MAEAoH,EAAApH,GAAAmH,EAAAnH,EAGAk3E,GAAAC,GAKA/vE,EAAAjF,EAAA,IACAiF,EAAA+c,EAAA,GALA/c,EAAAjF,EAAAiF,EAAA+c,EAAA,MASA/c,EAmBA,IAhBA+c,EAAA2yD,EAAA3vE,EAAAgd,EAAAsyD,GAAAK,EAAA1vE,EAAA+c,EAAAsyD,GACArvE,EAAApH,GAAAmH,EAAAnH,GACA4/E,EAAA1I,EAAAh7E,SACA2jF,EAAA1I,EAAAj7E,UAIA8jF,EAAA9I,EACAA,EAAAC,EACAA,EAAA6I,EACAriF,EAAAiiF,EACAA,EAAAC,EACAA,EAAAliF,GAIAA,EAAAiiF,EAAAC,EAAAG,EAAA,GAAAriF,IAAAqiF,EAAA34E,KAAA,IAKA,IAHAwoB,EAAA2mD,EACAyJ,EAAArJ,EAEAj5E,EAAAkiF,IAAAliF,GAAA,IAKA,IAJAwE,EAAA,EACA29E,EAAA3I,EAAAx5E,GAAAsiF,EACAF,EAAA5I,EAAAx5E,GAAAsiF,EAAA,EAEA14E,EAAA5J,GAAAyiB,EAAAw/D,GAAAr4E,EAAA5J,GAKAwE,IADAi6E,EAAA0D,GAHA1D,EAAAlF,IAAA92D,GAAA6/D,IAEA7gE,EAAA2gE,EAAA3D,GADAC,EAAAnF,EAAA92D,GAAA6/D,EAAA,GACAH,GACAG,IAAAD,EAAAz4E,GAAApF,GACA0tB,EAAA,IAAAzQ,EAAA6gE,EAAA,GAAAF,EAAA1D,EACA2D,EAAAz4E,KAAA60E,EAAAvsD,EAGAmwD,EAAAz4E,GAAApF,CACA,CAQA,OANAA,IACAgiB,EAEA67D,EAAAtZ,OAAA,KAGA2T,EAAAjzE,EAAA44E,EAAA77D,EACA,EAOAP,EAAAs8D,QAAA,WACA,IAAA/4E,EAAA,IAAA+uE,EAAAl6E,MAEA,OADAmL,EAAAnH,GAAAmH,EAAAnH,GAAA,KACAmH,CACA,EAuBAyc,EAAAgqB,KAAA,SAAAxmC,EAAAlF,GACA,IAAAoF,EACAH,EAAAnL,KACAiG,EAAAkF,EAAAnH,EAMA,GAHAkC,GADAkF,EAAA,IAAA8uE,EAAA9uE,EAAAlF,IACAlC,GAGAiC,IAAAC,EAAA,WAAAg0E,EAAAwH,KAGA,GAAAz7E,GAAAC,EAEA,OADAkF,EAAApH,GAAAkC,EACAiF,EAAAm4E,MAAAl4E,GAGA,IAAAo4E,EAAAr4E,EAAAgd,EAAAsyD,EACAgJ,EAAAr4E,EAAA+c,EAAAsyD,EACAS,EAAA/vE,EAAAhF,EACAg1E,EAAA/vE,EAAAjF,EAEA,IAAAq9E,IAAAC,EAAA,CAGA,IAAAvI,IAAAC,EAAA,WAAAjB,EAAAj0E,EAAA,GAIA,IAAAi1E,EAAA,KAAAC,EAAA,UAAAA,EAAA,GAAA/vE,EAAA,IAAA8uE,EAAAgB,EAAA,GAAA/vE,EAAA,EAAAlF,EACA,CAOA,GALAu9E,EAAA1I,EAAA0I,GACAC,EAAA3I,EAAA2I,GACAvI,IAAAr4E,QAGAoD,EAAAu9E,EAAAC,EAAA,CAUA,IATAx9E,EAAA,GACAw9E,EAAAD,EACAl4E,EAAA6vE,IAEAl1E,KACAqF,EAAA4vE,GAGA5vE,EAAAkpB,UACAvuB,IAAAqF,EAAAD,KAAA,IACAC,EAAAkpB,SACA,CAcA,KAZAvuB,EAAAi1E,EAAAh7E,SACAgG,EAAAi1E,EAAAj7E,QAGA,IACAoL,EAAA6vE,EACAA,EAAAD,EACAA,EAAA5vE,EACApF,EAAAD,GAIAA,EAAA,EAAAC,GACAD,GAAAi1E,IAAAh1E,GAAAg1E,EAAAh1E,GAAAi1E,EAAAj1E,GAAAD,GAAAu0E,EAAA,EACAU,EAAAh1E,GAAAs0E,IAAAU,EAAAh1E,GAAA,EAAAg1E,EAAAh1E,GAAAs0E,EAUA,OAPAv0E,IACAi1E,EAAA,CAAAj1E,GAAA8gB,OAAAm0D,KACAuI,GAKApF,EAAAjzE,EAAA8vE,EAAAuI,EACA,EAkBA77D,EAAAu8D,UAAAv8D,EAAA02D,GAAA,SAAAA,EAAAN,GACA,IAAA73E,EAAA7C,EAAAZ,EACAyI,EAAAnL,KAEA,SAAAs+E,WAKA,OAJAlD,EAAAkD,EAAA,EAAAzD,GACA,MAAAmD,IAAAzB,EACAnB,EAAA4C,EAAA,KAEA/yE,EAAA,IAAAivE,EAAA/uE,GAAAmzE,EAAAN,GAGA,KAAA73E,EAAAgF,EAAAhF,GAAA,YAIA,GAFA7C,GADAZ,EAAAyD,EAAAjG,OAAA,GACAu6E,EAAA,EAEA/3E,EAAAyD,EAAAzD,GAAA,CAGA,KAAAA,EAAA,MAAAA,GAAA,GAAAY,KAGA,IAAAZ,EAAAyD,EAAA,GAAAzD,GAAA,GAAAA,GAAA,GAAAY,KACA,CAIA,OAFAg7E,GAAAnzE,EAAAgd,EAAA,EAAA7kB,MAAA6H,EAAAgd,EAAA,GAEA7kB,CACA,EAWAskB,EAAAw8D,UAAA,SAAAhgE,GAEA,OADAg3D,EAAAh3D,GAAA,iBAAAs2D,GACA16E,KAAAgyC,MAAA,KAAA5tB,EACA,EAcAwD,EAAAy8D,WAAAz8D,EAAA08D,KAAA,WACA,IAAAlhE,EAAA9f,EAAA6tC,EAAAozC,EAAAj5E,EACAH,EAAAnL,KACAmG,EAAAgF,EAAAhF,EACAnC,EAAAmH,EAAAnH,EACAmkB,EAAAhd,EAAAgd,EACAs3D,EAAAnD,EAAA,EACA+F,EAAA,IAAAnI,EAAA,OAGA,OAAAl2E,IAAAmC,MAAA,GACA,WAAA+zE,GAAAl2E,KAAA,KAAAmC,KAAA,IAAAu7E,IAAAv7E,EAAAgF,EAAA,KA8BA,GAtBA,IAJAnH,EAAAhD,KAAAsjF,MAAAlI,EAAAjxE,MAIAnH,GAAA,OACAV,EAAAy3E,EAAA50E,IACAjG,OAAAioB,GAAA,OAAA7kB,GAAA,KACAU,EAAAhD,KAAAsjF,MAAAhhF,GACA6kB,EAAA2yD,GAAA3yD,EAAA,OAAAA,EAAA,GAAAA,EAAA,GASAgpB,EAAA,IAAA+oC,EANA52E,EADAU,GAAA,IACA,KAAAmkB,GAEA7kB,EAAAU,EAAAs3E,iBACAz4E,MAAA,EAAAS,EAAAgY,QAAA,QAAA6M,IAKAgpB,EAAA,IAAA+oC,EAAAl2E,EAAA,IAOAmtC,EAAAhrC,EAAA,GAMA,KAJAnC,GADAmkB,EAAAgpB,EAAAhpB,GACAs3D,GACA,IAAAz7E,EAAA,KAOA,GAHAsH,EAAA6lC,EACAA,EAAAkxC,EAAArwC,MAAA1mC,EAAAsmC,KAAAwwB,EAAAj3D,EAAAG,EAAAm0E,EAAA,KAEA1E,EAAAzvE,EAAAnF,GAAAtD,MAAA,EAAAmB,MAAAV,EAAAy3E,EAAA5pC,EAAAhrC,IAAAtD,MAAA,EAAAmB,GAAA,CAWA,GANAmtC,EAAAhpB,OAAAnkB,EAMA,SALAV,IAAAT,MAAAmB,EAAA,EAAAA,EAAA,MAKAugF,GAAA,QAAAjhF,GAgBA,EAIAA,OAAAT,MAAA,SAAAS,EAAAi4E,OAAA,MAGAtwE,EAAAkmC,IAAAhpB,EAAAm0D,EAAA,KACAl5D,GAAA+tB,EAAAa,MAAAb,GAAA1tB,GAAAtY,IAGA,KACA,CAxBA,IAAAo5E,IACAt5E,EAAAK,IAAA6c,EAAAm0D,EAAA,KAEAhxE,EAAA0mC,MAAA1mC,GAAAmY,GAAAtY,IAAA,CACAgmC,EAAA7lC,EACA,KACA,CAGAm0E,GAAA,EACAz7E,GAAA,EACAugF,EAAA,CAcA,CAIA,OAAAt5E,EAAAkmC,IAAAhpB,EAAAm0D,EAAA,EAAAC,EAAAn5D,EACA,EAYAwE,EAAA0zD,cAAA,SAAAmE,EAAAzB,GAKA,OAJA,MAAAyB,IACArE,EAAAqE,EAAA,EAAA5E,GACA4E,KAEA1B,EAAA/9E,KAAAy/E,EAAAzB,EAAA,EACA,EAeAp2D,EAAAokC,QAAA,SAAAyzB,EAAAzB,GAKA,OAJA,MAAAyB,IACArE,EAAAqE,EAAA,EAAA5E,GACA4E,IAAAz/E,KAAAmoB,EAAA,GAEA41D,EAAA/9E,KAAAy/E,EAAAzB,EACA,EA4BAp2D,EAAA48D,SAAA,SAAA/E,EAAAzB,EAAAD,GACA,IAAA3uE,EACAjE,EAAAnL,KAEA,SAAA+9E,EACA,MAAA0B,GAAAzB,GAAA,iBAAAA,GACAD,EAAAC,EACAA,EAAA,MACAyB,GAAA,iBAAAA,GACA1B,EAAA0B,EACAA,EAAAzB,EAAA,MAEAD,EAAAhB,OAEA,oBAAAgB,EACA,MAAAp1E,MACA2xE,EAAA,2BAAAyD,GAKA,GAFA3uE,EAAAjE,EAAA6gD,QAAAyzB,EAAAzB,GAEA7yE,EAAAhF,EAAA,CACA,IAAAxE,EACAyM,EAAAgB,EAAAjM,MAAA,KACAshF,GAAA1G,EAAAf,UACA0H,GAAA3G,EAAAd,mBACAC,EAAAa,EAAAb,gBAAA,GACAyH,EAAAv2E,EAAA,GACAw2E,EAAAx2E,EAAA,GACAy2E,EAAA15E,EAAAnH,EAAA,EACA8gF,EAAAD,EAAAF,EAAA9hF,MAAA,GAAA8hF,EACA9jF,EAAAikF,EAAA5kF,OASA,GAPAwkF,IACA/iF,EAAA8iF,EACAA,EAAAC,EACAA,EAAA/iF,EACAd,GAAAc,GAGA8iF,EAAA,GAAA5jF,EAAA,GAGA,IAFAc,EAAAd,EAAA4jF,KACAE,EAAAG,EAAAC,OAAA,EAAApjF,GACAA,EAAAd,EAAAc,GAAA8iF,EAAAE,GAAAzH,EAAA4H,EAAAC,OAAApjF,EAAA8iF,GACAC,EAAA,IAAAC,GAAAzH,EAAA4H,EAAAjiF,MAAAlB,IACAkjF,IAAAF,EAAA,IAAAA,EACA,CAEAv1E,EAAAw1E,EACAD,GAAA5G,EAAAZ,kBAAA,MAAAuH,GAAA3G,EAAAX,mBACAwH,EAAAjH,QAAA,IAAAqH,OAAA,OAAAN,EAAA,YACA,MAAA3G,EAAAV,wBAAA,KACAuH,GACAD,CACA,CAEA,OAAA5G,EAAA72D,QAAA,IAAA9X,GAAA2uE,EAAAxxE,QAAA,GACA,EAcAqb,EAAAq9D,WAAA,SAAAC,GACA,IAAArxE,EAAAsxE,EAAAC,EAAAC,EAAAl9D,EAAAimB,EAAA9qC,EAAAgiF,EAAAC,EAAAvE,EAAA7vC,EAAAntC,EACAmH,EAAAnL,KACAk7E,EAAA/vE,EAAAhF,EAEA,SAAA++E,MACA5hF,EAAA,IAAA42E,EAAAgL,IAGAxC,cAAAp/E,EAAA6C,GAAA,IAAA7C,EAAAU,IAAAV,EAAAo/D,GAAA2Z,IACA,MAAA1zE,MACA2xE,EAAA,aACAh3E,EAAAo/E,YAAA,qCAAAtG,EAAA94E,IAIA,IAAA43E,EAAA,WAAAhB,EAAA/uE,GAoBA,IAlBA0I,EAAA,IAAAqmE,EAAAmC,GACAkJ,EAAAJ,EAAA,IAAAjL,EAAAmC,GACA+I,EAAAE,EAAA,IAAApL,EAAAmC,GACAr4E,EAAA+2E,EAAAG,GAIA/yD,EAAAtU,EAAAsU,EAAAnkB,EAAA9D,OAAAiL,EAAAgd,EAAA,EACAtU,EAAA1N,EAAA,GAAAw0E,GAAAvsC,EAAAjmB,EAAAsyD,GAAA,EAAAA,EAAArsC,KACA82C,MAAA5hF,EAAAy+E,WAAAluE,GAAA,EAAAsU,EAAA,EAAAtU,EAAA0xE,EAAAjiF,EAEA8qC,EAAAuuC,EACAA,EAAA,IACAr5E,EAAA,IAAA42E,EAAAl2E,GAGAshF,EAAAn/E,EAAA,KAGA66E,EAAA5e,EAAA9+D,EAAAuQ,EAAA,KAEA,IADAwxE,EAAAF,EAAAvzC,KAAAovC,EAAAhvC,MAAAozC,KACArD,WAAAmD,IACAC,EAAAC,EACAA,EAAAC,EACAE,EAAAD,EAAA1zC,KAAAovC,EAAAhvC,MAAAqzC,EAAAE,IACAD,EAAAD,EACAxxE,EAAAvQ,EAAAggF,MAAAtC,EAAAhvC,MAAAqzC,EAAAxxE,IACAvQ,EAAA+hF,EAeA,OAZAA,EAAAjjB,EAAA8iB,EAAA5B,MAAA6B,GAAAC,EAAA,KACAE,IAAA1zC,KAAAyzC,EAAArzC,MAAAuzC,IACAJ,IAAAvzC,KAAAyzC,EAAArzC,MAAAozC,IACAE,EAAAthF,EAAAuhF,EAAAvhF,EAAAmH,EAAAnH,EAIAmtC,EAAAixB,EAAAmjB,EAAAH,EAHAj9D,GAAA,EAGAo0D,GAAA+G,MAAAn4E,GAAA22E,MAAAC,WACA3f,EAAAkjB,EAAAH,EAAAh9D,EAAAo0D,GAAA+G,MAAAn4E,GAAA22E,OAAA,GAAAyD,EAAAH,GAAA,CAAAE,EAAAH,GAEAxI,EAAAvuC,EAEA+C,CACA,EAMAvpB,EAAAkqC,SAAA,WACA,OAAAsqB,EAAAp8E,KACA,EAcA4nB,EAAA49D,YAAA,SAAAlH,EAAAN,GAEA,OADA,MAAAM,GAAAlD,EAAAkD,EAAA,EAAAzD,GACAkD,EAAA/9E,KAAAs+E,EAAAN,EAAA,EACA,EAcAp2D,EAAAlZ,SAAA,SAAAxI,GACA,IAAAkJ,EACA9L,EAAAtD,KACAgE,EAAAV,EAAAU,EACAmkB,EAAA7kB,EAAA6kB,EA0BA,OAvBA,OAAAA,EACAnkB,GACAoL,EAAA,WACApL,EAAA,IAAAoL,EAAA,IAAAA,IAEAA,EAAA,OAGA,MAAAlJ,EACAkJ,EAAA+Y,GAAAq0D,GAAAr0D,GAAAs0D,EACAnB,EAAAP,EAAAz3E,EAAA6C,GAAAgiB,GACAqzD,EAAAT,EAAAz3E,EAAA6C,GAAAgiB,EAAA,KACA,KAAAjiB,GAAAq3E,EAEAnuE,EAAAosE,EAAAT,GADAz3E,EAAA2H,EAAA,IAAAivE,EAAA52E,GAAAg5E,EAAAn0D,EAAA,EAAAo0D,IACAp2E,GAAA7C,EAAA6kB,EAAA,MAEAizD,EAAAl1E,EAAA,EAAAo3E,EAAAp9E,OAAA,QACAkP,EAAAusE,EAAAH,EAAAT,EAAAz3E,EAAA6C,GAAAgiB,EAAA,QAAAjiB,EAAAlC,GAAA,IAGAA,EAAA,GAAAV,EAAA6C,EAAA,KAAAiJ,EAAA,IAAAA,IAGAA,CACA,EAOAwY,EAAAw0D,QAAAx0D,EAAAsoD,OAAA,WACA,OAAAkM,EAAAp8E,KACA,EAGA4nB,EAAA81D,cAAA,EAEA,MAAAhC,GAAAxB,EAAAh5E,IAAAw6E,GAEAxB,CACA,CAqIAtxE,GACAsxE,EAAA,QAAAA,cAGA,mBAAAuL,eAAAC,IACAD,QAAA,kBAAAvL,CAAA,SAGA,IAAAznE,KAAAtT,QACAsT,EAAAtT,QAAA+6E,GAIAD,IACAA,EAAA,oBAAAp0E,gBAAA8/E,QAGA1L,EAAAC,YAEA,CAz2FA,CAy2FAl6E,K,yZCv2FA,IAAA4lF,EAAAzmF,EAEAymF,EAAAt/D,QAAA/mB,EAAA,mBAAA+mB,QACAs/D,EAAA7xE,MAAAxU,EAAA,oBACAqmF,EAAAlG,KAAAngF,EAAA,WACAqmF,EAAAC,MAAAtmF,EAAA,oBACAqmF,EAAAE,OAAAvmF,EAAA,qBAGAqmF,EAAAj7B,GAAAprD,EAAA,iBACAqmF,EAAAG,MAAAxmF,EAAA,mB,uRCVA,IAAAkyD,EAAAlyD,EAAA,SACAwU,EAAAxU,EAAA,YACAymF,EAAAjyE,EAAAiyE,OACAC,EAAAlyE,EAAAkyE,OACAC,EAAAnyE,EAAAmyE,OAEA,SAAAC,EAAAr+E,EAAAs+E,GACApmF,KAAA8H,OACA9H,KAAAirB,EAAA,IAAAwmC,EAAA20B,EAAAn7D,EAAA,IAGAjrB,KAAAqmF,IAAAD,EAAAE,MAAA70B,EAAA40B,IAAAD,EAAAE,OAAA70B,EAAA80B,KAAAvmF,KAAAirB,GAGAjrB,KAAAwmF,KAAA,IAAA/0B,EAAA,GAAAg1B,MAAAzmF,KAAAqmF,KACArmF,KAAA0mF,IAAA,IAAAj1B,EAAA,GAAAg1B,MAAAzmF,KAAAqmF,KACArmF,KAAA2mF,IAAA,IAAAl1B,EAAA,GAAAg1B,MAAAzmF,KAAAqmF,KAGArmF,KAAAsD,EAAA8iF,EAAA9iF,GAAA,IAAAmuD,EAAA20B,EAAA9iF,EAAA,IACAtD,KAAA2oB,EAAAy9D,EAAAz9D,GAAA3oB,KAAA4mF,cAAAR,EAAAz9D,EAAAy9D,EAAAS,MAGA7mF,KAAA8mF,QAAA,IAAAt9E,MAAA,GACAxJ,KAAA+mF,QAAA,IAAAv9E,MAAA,GACAxJ,KAAAgnF,QAAA,IAAAx9E,MAAA,GACAxJ,KAAAinF,QAAA,IAAAz9E,MAAA,GAEAxJ,KAAAknF,WAAAlnF,KAAAsD,EAAAtD,KAAAsD,EAAA6jF,YAAA,EAGA,IAAAC,EAAApnF,KAAAsD,GAAAtD,KAAAirB,EAAAm3C,IAAApiE,KAAAsD,IACA8jF,KAAAC,KAAA,OACArnF,KAAAsnF,KAAA,MAEAtnF,KAAAunF,eAAA,EACAvnF,KAAAsnF,KAAAtnF,KAAAsD,EAAAmjF,MAAAzmF,KAAAqmF,KAEA,CAsNA,SAAAmB,EAAA3B,EAAA/9E,GACA9H,KAAA6lF,QACA7lF,KAAA8H,OACA9H,KAAAynF,YAAA,IACA,CAzNAh1E,EAAAtT,QAAAgnF,EAEAA,EAAA71E,UAAAo3E,MAAA,WACA,UAAA/+E,MAAA,kBACA,EAEAw9E,EAAA71E,UAAAujD,SAAA,WACA,UAAAlrD,MAAA,kBACA,EAEAw9E,EAAA71E,UAAAq3E,aAAA,SAAA18D,EAAA7G,GACA8hE,EAAAj7D,EAAAw8D,aACA,IAAAG,EAAA38D,EAAA48D,cAEAC,EAAA9B,EAAA5hE,EAAA,EAAApkB,KAAAknF,YACAa,GAAA,GAAAH,EAAA1/D,KAAA,IAAA0/D,EAAA1/D,KAAA,UACA6/D,GAAA,EAGA,IACAx8E,EACAy8E,EAFAC,EAAA,GAGA,IAAA18E,EAAA,EAAAA,EAAAu8E,EAAA5nF,OAAAqL,GAAAq8E,EAAA1/D,KAAA,CACA8/D,EAAA,EACA,QAAA3lF,EAAAkJ,EAAAq8E,EAAA1/D,KAAA,EAAA7lB,GAAAkJ,EAAAlJ,IACA2lF,MAAA,GAAAF,EAAAzlF,GACA4lF,EAAA58E,KAAA28E,EACA,CAIA,IAFA,IAAA/hF,EAAAjG,KAAAkoF,OAAA,gBACAhiF,EAAAlG,KAAAkoF,OAAA,gBACAvmF,EAAAomF,EAAApmF,EAAA,EAAAA,IAAA,CACA,IAAA4J,EAAA,EAAAA,EAAA08E,EAAA/nF,OAAAqL,KACAy8E,EAAAC,EAAA18E,MACA5J,EACAuE,IAAAiiF,SAAAP,EAAAQ,OAAA78E,IACAy8E,KAAArmF,IACAuE,IAAAiiF,SAAAP,EAAAQ,OAAA78E,GAAA88E,QAEApiF,IAAAhD,IAAAiD,EACA,CACA,OAAAD,EAAAqiF,KACA,EAEAnC,EAAA71E,UAAAi4E,SAAA,SAAAt9D,EAAA7G,GACA,IAAA6S,EAAA,EAGAuxD,EAAAv9D,EAAAw9D,cAAAxxD,GACAA,EAAAuxD,EAAAE,IAQA,IAPA,IAAAA,EAAAF,EAAAJ,OAGAN,EAAA9B,EAAA5hE,EAAA6S,EAAAj3B,KAAAknF,YAGA1pE,EAAAxd,KAAAkoF,OAAA,gBACAvmF,EAAAmmF,EAAA5nF,OAAA,EAAAyB,GAAA,EAAAA,IAAA,CAEA,QAAAU,EAAA,EAAAV,GAAA,OAAAmmF,EAAAnmF,OACAU,IAKA,GAJAV,GAAA,GACAU,IACAmb,IAAAmrE,KAAAtmF,GAEAV,EAAA,EACA,MACA,IAAAq5E,EAAA8M,EAAAnmF,GACAukF,EAAA,IAAAlL,GAIAx9D,EAHA,WAAAyN,EAAAnjB,KAEAkzE,EAAA,EACAx9D,EAAA2qE,SAAAO,EAAA1N,EAAA,OAEAx9D,EAAA2qE,SAAAO,GAAA1N,EAAA,MAAAqN,OAGArN,EAAA,EACAx9D,EAAAva,IAAAylF,EAAA1N,EAAA,OAEAx9D,EAAAva,IAAAylF,GAAA1N,EAAA,MAAAqN,MAEA,CACA,iBAAAp9D,EAAAnjB,KAAA0V,EAAA8qE,MAAA9qE,CACA,EAEA2oE,EAAA71E,UAAAs4E,YAAA,SAAAC,EACAT,EACAU,EACAjoF,EACAkoF,GACA,IAMApnF,EACA4J,EACA0f,EARA+9D,EAAAhpF,KAAA8mF,QACA4B,EAAA1oF,KAAA+mF,QACAe,EAAA9nF,KAAAgnF,QAGAhvB,EAAA,EAIA,IAAAr2D,EAAA,EAAAA,EAAAd,EAAAc,IAAA,CAEA,IAAA6mF,GADAv9D,EAAAm9D,EAAAzmF,IACA8mF,cAAAI,GACAG,EAAArnF,GAAA6mF,EAAAE,IACAA,EAAA/mF,GAAA6mF,EAAAJ,MACA,CAGA,IAAAzmF,EAAAd,EAAA,EAAAc,GAAA,EAAAA,GAAA,GACA,IAAAsE,EAAAtE,EAAA,EACAuE,EAAAvE,EACA,OAAAqnF,EAAA/iF,IAAA,IAAA+iF,EAAA9iF,GAAA,CAQA,IAAA+iF,EAAA,CACAb,EAAAniF,GACA,KACA,KACAmiF,EAAAliF,IAIA,IAAAkiF,EAAAniF,GAAAmF,EAAAu1E,IAAAyH,EAAAliF,GAAAkF,IACA69E,EAAA,GAAAb,EAAAniF,GAAAhD,IAAAmlF,EAAAliF,IACA+iF,EAAA,GAAAb,EAAAniF,GAAAijF,MAAAf,SAAAC,EAAAliF,GAAAmiF,QACA,IAAAD,EAAAniF,GAAAmF,EAAAu1E,IAAAyH,EAAAliF,GAAAkF,EAAA+9E,WACAF,EAAA,GAAAb,EAAAniF,GAAAijF,MAAAf,SAAAC,EAAAliF,IACA+iF,EAAA,GAAAb,EAAAniF,GAAAhD,IAAAmlF,EAAAliF,GAAAmiF,SAEAY,EAAA,GAAAb,EAAAniF,GAAAijF,MAAAf,SAAAC,EAAAliF,IACA+iF,EAAA,GAAAb,EAAAniF,GAAAijF,MAAAf,SAAAC,EAAAliF,GAAAmiF,QAGA,IAAAngF,EAAA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,GAGAkhF,EAAAnD,EAAA6C,EAAA7iF,GAAA6iF,EAAA5iF,IAIA,IAHA8xD,EAAAh3D,KAAAg3D,IAAAoxB,EAAA,GAAAlpF,OAAA83D,GACA8vB,EAAA7hF,GAAA,IAAAuD,MAAAwuD,GACA8vB,EAAA5hF,GAAA,IAAAsD,MAAAwuD,GACAzsD,EAAA,EAAAA,EAAAysD,EAAAzsD,IAAA,CACA,IAAA89E,EAAA,EAAAD,EAAA,GAAA79E,GACA+9E,EAAA,EAAAF,EAAA,GAAA79E,GAEAu8E,EAAA7hF,GAAAsF,GAAArD,EAAA,GAAAmhF,EAAA,IAAAC,EAAA,IACAxB,EAAA5hF,GAAAqF,GAAA,EACAm9E,EAAAziF,GAAAgjF,CACA,CA5CA,MALAnB,EAAA7hF,GAAA+/E,EAAA8C,EAAA7iF,GAAA+iF,EAAA/iF,GAAAjG,KAAAknF,YACAY,EAAA5hF,GAAA8/E,EAAA8C,EAAA5iF,GAAA8iF,EAAA9iF,GAAAlG,KAAAknF,YACAlvB,EAAAh3D,KAAAg3D,IAAA8vB,EAAA7hF,GAAA/F,OAAA83D,GACAA,EAAAh3D,KAAAg3D,IAAA8vB,EAAA5hF,GAAAhG,OAAA83D,EA+CA,CAEA,IAAAx6C,EAAAxd,KAAAkoF,OAAA,gBACAt3E,EAAA5Q,KAAAinF,QACA,IAAAtlF,EAAAq2D,EAAAr2D,GAAA,EAAAA,IAAA,CAGA,IAFA,IAAAyiB,EAAA,EAEAziB,GAAA,IACA,IAAA6kF,GAAA,EACA,IAAAj7E,EAAA,EAAAA,EAAA1K,EAAA0K,IACAqF,EAAArF,GAAA,EAAAu8E,EAAAv8E,GAAA5J,GACA,IAAAiP,EAAArF,KACAi7E,GAAA,GAEA,IAAAA,EACA,MACApiE,IACAziB,GACA,CAIA,GAHAA,GAAA,GACAyiB,IACA5G,IAAAmrE,KAAAvkE,GACAziB,EAAA,EACA,MAEA,IAAA4J,EAAA,EAAAA,EAAA1K,EAAA0K,IAAA,CACA,IAAAyvE,EAAApqE,EAAArF,GAEA,IAAAyvE,IAEAA,EAAA,EACA/vD,EAAAy9D,EAAAn9E,GAAAyvE,EAAA,MACAA,EAAA,IACA/vD,EAAAy9D,EAAAn9E,IAAAyvE,EAAA,MAAAqN,OAGA7qE,EADA,WAAAyN,EAAAnjB,KACA0V,EAAA2qE,SAAAl9D,GAEAzN,EAAAva,IAAAgoB,GACA,CACA,CAEA,IAAAtpB,EAAA,EAAAA,EAAAd,EAAAc,IACA+mF,EAAA/mF,GAAA,KAEA,OAAAonF,EACAvrE,EAEAA,EAAA8qE,KACA,EAOAnC,EAAAqB,YAEAA,EAAAl3E,UAAAmT,GAAA,WACA,UAAA9a,MAAA,kBACA,EAEA6+E,EAAAl3E,UAAAujD,SAAA,WACA,OAAA7zD,KAAA6lF,MAAAhyB,SAAA7zD,KACA,EAEAmmF,EAAA71E,UAAAi5E,YAAA,SAAAt8E,EAAA2Z,GACA3Z,EAAA8G,EAAA+rB,QAAA7yB,EAAA2Z,GAEA,IAAA/lB,EAAAb,KAAAirB,EAAA5c,aAGA,QAAApB,EAAA,QAAAA,EAAA,QAAAA,EAAA,KACAA,EAAA/M,OAAA,KAAAW,EASA,OARA,IAAAoM,EAAA,GACAi5E,EAAAj5E,IAAA/M,OAAA,SACA,IAAA+M,EAAA,IACAi5E,EAAAj5E,IAAA/M,OAAA,SAEAF,KAAA0nF,MAAAz6E,EAAApK,MAAA,IAAAhC,GACAoM,EAAApK,MAAA,EAAAhC,EAAA,IAAAA,IAGA,QAAAoM,EAAA,QAAAA,EAAA,KACAA,EAAA/M,OAAA,IAAAW,EACA,OAAAb,KAAAwpF,WAAAv8E,EAAApK,MAAA,IAAAhC,GAAA,IAAAoM,EAAA,IAEA,UAAAtE,MAAA,uBACA,EAEA6+E,EAAAl3E,UAAAm5E,iBAAA,SAAA7iE,GACA,OAAA5mB,KAAAsP,OAAAsX,GAAA,EACA,EAEA4gE,EAAAl3E,UAAAo5E,QAAA,SAAAC,GACA,IAAA9oF,EAAAb,KAAA6lF,MAAA56D,EAAA5c,aACAlD,EAAAnL,KAAA4pF,OAAA9pD,QAAA,KAAAj/B,GAEA,OAAA8oF,EACA,CAAA3pF,KAAA6pF,OAAAC,SAAA,KAAA/iE,OAAA5b,GAEA,IAAA4b,OAAA5b,EAAAnL,KAAA6pF,OAAA/pD,QAAA,KAAAj/B,GACA,EAEA2mF,EAAAl3E,UAAAhB,OAAA,SAAAsX,EAAA+iE,GACA,OAAA51E,EAAAzE,OAAAtP,KAAA0pF,QAAAC,GAAA/iE,EACA,EAEA4gE,EAAAl3E,UAAAy5E,WAAA,SAAAC,GACA,GAAAhqF,KAAAynF,YACA,OAAAznF,KAEA,IAAAynF,EAAA,CACAG,QAAA,KACAE,IAAA,KACAmC,KAAA,MAOA,OALAxC,EAAAK,IAAA9nF,KAAAyoF,cAAA,GACAhB,EAAAG,QAAA5nF,KAAA6nF,YAAA,EAAAmC,GACAvC,EAAAwC,KAAAjqF,KAAAkqF,WACAlqF,KAAAynF,cAEAznF,IACA,EAEAwnF,EAAAl3E,UAAA65E,YAAA,SAAA/lE,GACA,IAAApkB,KAAAynF,YACA,SAEA,IAAAG,EAAA5nF,KAAAynF,YAAAG,QACA,QAAAA,GAGAA,EAAAQ,OAAAloF,QAAAc,KAAAmI,MAAAib,EAAA+iE,YAAA,GAAAS,EAAA1/D,KACA,EAEAs/D,EAAAl3E,UAAAu3E,YAAA,SAAA3/D,EAAA8hE,GACA,GAAAhqF,KAAAynF,aAAAznF,KAAAynF,YAAAG,QACA,OAAA5nF,KAAAynF,YAAAG,QAIA,IAFA,IAAAA,EAAA,CAAA5nF,MACAwd,EAAAxd,KACA2B,EAAA,EAAAA,EAAAqoF,EAAAroF,GAAAumB,EAAA,CACA,QAAA3c,EAAA,EAAAA,EAAA2c,EAAA3c,IACAiS,IAAA4sE,MACAxC,EAAAv8E,KAAAmS,EACA,CACA,OACA0K,OACAkgE,OAAAR,EAEA,EAEAJ,EAAAl3E,UAAAm4E,cAAA,SAAAC,GACA,GAAA1oF,KAAAynF,aAAAznF,KAAAynF,YAAAK,IACA,OAAA9nF,KAAAynF,YAAAK,IAKA,IAHA,IAAAllF,EAAA,CAAA5C,MACAg4D,GAAA,GAAA0wB,GAAA,EACA0B,EAAA,IAAApyB,EAAA,KAAAh4D,KAAAoqF,MACAzoF,EAAA,EAAAA,EAAAq2D,EAAAr2D,IACAiB,EAAAjB,GAAAiB,EAAAjB,EAAA,GAAAsB,IAAAmnF,GACA,OACA1B,MACAN,OAAAxlF,EAEA,EAEA4kF,EAAAl3E,UAAA45E,SAAA,WACA,WACA,EAEA1C,EAAAl3E,UAAAq4E,KAAA,SAAAvkE,GAEA,IADA,IAAA+sB,EAAAnxC,KACA2B,EAAA,EAAAA,EAAAyiB,EAAAziB,IACAwvC,IAAAi5C,MACA,OAAAj5C,CACA,C,8TC1XA,IAAAp9B,EAAAxU,EAAA,YACAkyD,EAAAlyD,EAAA,SACA8qF,EAAA9qF,EAAA,YACAkmB,EAAAlmB,EAAA,UAEA2mF,EAAAnyE,EAAAmyE,OAEA,SAAAoE,EAAAlE,GAEApmF,KAAAuqF,QAAA,MAAAnE,EAAAngF,GACAjG,KAAAwqF,MAAAxqF,KAAAuqF,UAAA,MAAAnE,EAAAngF,GACAjG,KAAAyqF,SAAAzqF,KAAAwqF,MAEA/kE,EAAAlV,KAAAvQ,KAAA,UAAAomF,GAEApmF,KAAAiG,EAAA,IAAAwrD,EAAA20B,EAAAngF,EAAA,IAAAykF,KAAA1qF,KAAAqmF,IAAAjjE,GACApjB,KAAAiG,EAAAjG,KAAAiG,EAAAwgF,MAAAzmF,KAAAqmF,KACArmF,KAAAmG,EAAA,IAAAsrD,EAAA20B,EAAAjgF,EAAA,IAAAsgF,MAAAzmF,KAAAqmF,KACArmF,KAAA2qF,GAAA3qF,KAAAmG,EAAAykF,SACA5qF,KAAA6T,EAAA,IAAA49C,EAAA20B,EAAAvyE,EAAA,IAAA4yE,MAAAzmF,KAAAqmF,KACArmF,KAAA6qF,GAAA7qF,KAAA6T,EAAAi3E,OAAA9qF,KAAA6T,GAEAqyE,GAAAlmF,KAAAuqF,SAAA,IAAAvqF,KAAAmG,EAAA4kF,UAAA1D,KAAA,IACArnF,KAAAgrF,KAAA,MAAA5E,EAAAjgF,EACA,CAuFA,SAAA8kF,EAAApF,EAAA16E,EAAAC,EAAA4vE,EAAA1vE,GACAma,EAAA+hE,UAAAj3E,KAAAvQ,KAAA6lF,EAAA,cACA,OAAA16E,GAAA,OAAAC,GAAA,OAAA4vE,GACAh7E,KAAAmL,EAAAnL,KAAA6lF,MAAAW,KACAxmF,KAAAoL,EAAApL,KAAA6lF,MAAAa,IACA1mF,KAAAg7E,EAAAh7E,KAAA6lF,MAAAa,IACA1mF,KAAAsL,EAAAtL,KAAA6lF,MAAAW,KACAxmF,KAAAkrF,MAAA,IAEAlrF,KAAAmL,EAAA,IAAAsmD,EAAAtmD,EAAA,IACAnL,KAAAoL,EAAA,IAAAqmD,EAAArmD,EAAA,IACApL,KAAAg7E,IAAA,IAAAvpB,EAAAupB,EAAA,IAAAh7E,KAAA6lF,MAAAa,IACA1mF,KAAAsL,KAAA,IAAAmmD,EAAAnmD,EAAA,IACAtL,KAAAmL,EAAAk7E,MACArmF,KAAAmL,EAAAnL,KAAAmL,EAAAs7E,MAAAzmF,KAAA6lF,MAAAQ,MACArmF,KAAAoL,EAAAi7E,MACArmF,KAAAoL,EAAApL,KAAAoL,EAAAq7E,MAAAzmF,KAAA6lF,MAAAQ,MACArmF,KAAAg7E,EAAAqL,MACArmF,KAAAg7E,EAAAh7E,KAAAg7E,EAAAyL,MAAAzmF,KAAA6lF,MAAAQ,MACArmF,KAAAsL,IAAAtL,KAAAsL,EAAA+6E,MACArmF,KAAAsL,EAAAtL,KAAAsL,EAAAm7E,MAAAzmF,KAAA6lF,MAAAQ,MACArmF,KAAAkrF,KAAAlrF,KAAAg7E,IAAAh7E,KAAA6lF,MAAAa,IAGA1mF,KAAA6lF,MAAA4E,WAAAzqF,KAAAsL,IACAtL,KAAAsL,EAAAtL,KAAAmL,EAAAggF,OAAAnrF,KAAAoL,GACApL,KAAAkrF,OACAlrF,KAAAsL,EAAAtL,KAAAsL,EAAA6/E,OAAAnrF,KAAAg7E,EAAAoQ,aAGA,CApHAf,EAAAC,EAAA7kE,GACAhT,EAAAtT,QAAAmrF,EAEAA,EAAAh6E,UAAA+6E,MAAA,SAAA1sB,GACA,OAAA3+D,KAAAwqF,MACA7rB,EAAAwqB,SAEAnpF,KAAAiG,EAAAklF,OAAAxsB,EACA,EAEA2rB,EAAAh6E,UAAAg7E,MAAA,SAAA3sB,GACA,OAAA3+D,KAAAgrF,KACArsB,EAEA3+D,KAAAmG,EAAAglF,OAAAxsB,EACA,EAGA2rB,EAAAh6E,UAAA43E,OAAA,SAAA/8E,EAAAC,EAAA4vE,EAAA1vE,GACA,OAAAtL,KAAA0nF,MAAAv8E,EAAAC,EAAA4vE,EAAA1vE,EACA,EAEAg/E,EAAAh6E,UAAAk5E,WAAA,SAAAr+E,EAAAogF,IACApgF,EAAA,IAAAsmD,EAAAtmD,EAAA,KACAk7E,MACAl7E,IAAAs7E,MAAAzmF,KAAAqmF,MAEA,IAAAmF,EAAArgF,EAAAy/E,SACAa,EAAAzrF,KAAA2qF,GAAAe,OAAA1rF,KAAAiG,EAAAklF,OAAAK,IACAG,EAAA3rF,KAAA0mF,IAAAgF,OAAA1rF,KAAA2qF,GAAAQ,OAAAnrF,KAAA6T,GAAAs3E,OAAAK,IAEAI,EAAAH,EAAAN,OAAAQ,EAAAP,WACAhgF,EAAAwgF,EAAAC,UACA,OAAAzgF,EAAAw/E,SAAAc,OAAAE,GAAAjL,IAAA3gF,KAAAwmF,MACA,UAAA79E,MAAA,iBAEA,IAAA0yE,EAAAjwE,EAAA2/E,UAAA1P,QAIA,OAHAkQ,IAAAlQ,IAAAkQ,GAAAlQ,KACAjwE,IAAA+9E,UAEAnpF,KAAA0nF,MAAAv8E,EAAAC,EACA,EAEAk/E,EAAAh6E,UAAAw7E,WAAA,SAAA1gF,EAAAmgF,IACAngF,EAAA,IAAAqmD,EAAArmD,EAAA,KACAi7E,MACAj7E,IAAAq7E,MAAAzmF,KAAAqmF,MAGA,IAAAuF,EAAAxgF,EAAAw/E,SACAe,EAAAC,EAAAF,OAAA1rF,KAAA2qF,IACAc,EAAAG,EAAAT,OAAAnrF,KAAA6T,GAAAs3E,OAAAnrF,KAAA2qF,IAAAe,OAAA1rF,KAAAiG,GACAulF,EAAAG,EAAAR,OAAAM,EAAAL,WAEA,OAAAI,EAAA7K,IAAA3gF,KAAAwmF,MAAA,CACA,GAAA+E,EACA,UAAA5iF,MAAA,iBAEA,OAAA3I,KAAA0nF,MAAA1nF,KAAAwmF,KAAAp7E,EACA,CAEA,IAAAD,EAAAqgF,EAAAK,UACA,OAAA1gF,EAAAy/E,SAAAc,OAAAF,GAAA7K,IAAA3gF,KAAAwmF,MACA,UAAA79E,MAAA,iBAKA,OAHAwC,EAAA4/E,UAAA1P,UAAAkQ,IACApgF,IAAAg+E,UAEAnpF,KAAA0nF,MAAAv8E,EAAAC,EACA,EAEAk/E,EAAAh6E,UAAAujD,SAAA,SAAA6zB,GACA,GAAAA,EAAAqE,aACA,SAGArE,EAAAsE,YAEA,IAAAR,EAAA9D,EAAAv8E,EAAAy/E,SACAgB,EAAAlE,EAAAt8E,EAAAw/E,SACAe,EAAAH,EAAAL,OAAAnrF,KAAAiG,GAAA6kF,OAAAc,GACAH,EAAAzrF,KAAA2qF,GAAAQ,OAAAnrF,KAAA0mF,IAAAoE,OAAA9qF,KAAA6T,EAAAs3E,OAAAK,GAAAL,OAAAS,KAEA,WAAAD,EAAAhL,IAAA8K,EACA,EAiCApB,EAAAY,EAAAxlE,EAAA+hE,WAEA8C,EAAAh6E,UAAAs2E,cAAA,SAAAv2E,GACA,OAAA46E,EAAAgB,SAAAjsF,KAAAqQ,EACA,EAEAi6E,EAAAh6E,UAAAo3E,MAAA,SAAAv8E,EAAAC,EAAA4vE,EAAA1vE,GACA,WAAA2/E,EAAAjrF,KAAAmL,EAAAC,EAAA4vE,EAAA1vE,EACA,EAEA2/E,EAAAgB,SAAA,SAAApG,EAAAx1E,GACA,WAAA46E,EAAApF,EAAAx1E,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACA,EAEA46E,EAAA36E,UAAA47E,QAAA,WACA,OAAAlsF,KAAA+rF,aACA,sBACA,gBAAA/rF,KAAAmL,EAAA4/E,UAAAr8E,SAAA,MACA,OAAA1O,KAAAoL,EAAA2/E,UAAAr8E,SAAA,MACA,OAAA1O,KAAAg7E,EAAA+P,UAAAr8E,SAAA,SACA,EAEAu8E,EAAA36E,UAAAy7E,WAAA,WAEA,WAAA/rF,KAAAmL,EAAAk8E,KAAA,KACA,IAAArnF,KAAAoL,EAAAu1E,IAAA3gF,KAAAg7E,IACAh7E,KAAAkrF,MAAA,IAAAlrF,KAAAoL,EAAAu1E,IAAA3gF,KAAA6lF,MAAA1/E,GACA,EAEA8kF,EAAA36E,UAAA67E,QAAA,WAMA,IAAAlmF,EAAAjG,KAAAmL,EAAAy/E,SAEA1kF,EAAAlG,KAAAoL,EAAAw/E,SAEAzkF,EAAAnG,KAAAg7E,EAAA4P,SACAzkF,IAAAimF,QAAAjmF,GAEA,IAAA0N,EAAA7T,KAAA6lF,MAAAwF,MAAAplF,GAEAkiB,EAAAnoB,KAAAmL,EAAA2/E,OAAA9qF,KAAAoL,GAAAw/E,SAAAyB,QAAApmF,GAAAomF,QAAAnmF,GAEAyiB,EAAA9U,EAAAi3E,OAAA5kF,GAEAwiB,EAAAC,EAAA+iE,OAAAvlF,GAEA/D,EAAAyR,EAAA63E,OAAAxlF,GAEAomF,EAAAnkE,EAAAgjE,OAAAziE,GAEA6jE,EAAA5jE,EAAAwiE,OAAA/oF,GAEAoqF,EAAArkE,EAAAgjE,OAAA/oF,GAEAqqF,EAAA/jE,EAAAyiE,OAAAxiE,GACA,OAAA3oB,KAAA6lF,MAAA6B,MAAA4E,EAAAC,EAAAE,EAAAD,EACA,EAEAvB,EAAA36E,UAAAo8E,SAAA,WAQA,IAMAJ,EACAC,EACAE,EACAtkE,EACA/lB,EACAmJ,EAXArF,EAAAlG,KAAAmL,EAAA2/E,OAAA9qF,KAAAoL,GAAAw/E,SAEAzkF,EAAAnG,KAAAmL,EAAAy/E,SAEA/2E,EAAA7T,KAAAoL,EAAAw/E,SAQA,GAAA5qF,KAAA6lF,MAAA0E,QAAA,CAIA,IAAA7hE,GAFAP,EAAAnoB,KAAA6lF,MAAAwF,MAAAllF,IAEA2kF,OAAAj3E,GACA7T,KAAAkrF,MAEAoB,EAAApmF,EAAAwlF,OAAAvlF,GAAAulF,OAAA73E,GAAAs3E,OAAAziE,EAAAgjE,OAAA1rF,KAAA6lF,MAAAc,MAEA4F,EAAA7jE,EAAAyiE,OAAAhjE,EAAAujE,OAAA73E,IAEA44E,EAAA/jE,EAAAkiE,SAAAc,OAAAhjE,GAAAgjE,OAAAhjE,KAGAtmB,EAAApC,KAAAg7E,EAAA4P,SAEAr/E,EAAAmd,EAAAgjE,OAAAtpF,GAAAiqF,QAAAjqF,GAEAkqF,EAAApmF,EAAAwlF,OAAAvlF,GAAAkmF,QAAAx4E,GAAAs3E,OAAA5/E,GAEAghF,EAAA7jE,EAAAyiE,OAAAhjE,EAAAujE,OAAA73E,IAEA44E,EAAA/jE,EAAAyiE,OAAA5/E,GAEA,MAEA4c,EAAAhiB,EAAA2kF,OAAAj3E,GAEAzR,EAAApC,KAAA6lF,MAAAyF,MAAAtrF,KAAAg7E,GAAA4P,SAEAr/E,EAAA4c,EAAAujE,OAAAtpF,GAAAspF,OAAAtpF,GAEAkqF,EAAAtsF,KAAA6lF,MAAAyF,MAAAplF,EAAAmmF,QAAAlkE,IAAAgjE,OAAA5/E,GAEAghF,EAAAvsF,KAAA6lF,MAAAyF,MAAAnjE,GAAAgjE,OAAAhlF,EAAAkmF,QAAAx4E,IAEA44E,EAAAtkE,EAAAgjE,OAAA5/E,GAEA,OAAAvL,KAAA6lF,MAAA6B,MAAA4E,EAAAC,EAAAE,EACA,EAEAxB,EAAA36E,UAAA85E,IAAA,WACA,OAAApqF,KAAA+rF,aACA/rF,KAGAA,KAAA6lF,MAAA4E,SACAzqF,KAAAmsF,UAEAnsF,KAAA0sF,UACA,EAEAzB,EAAA36E,UAAAq8E,QAAA,SAAA1hE,GAMA,IAAAhlB,EAAAjG,KAAAoL,EAAAsgF,OAAA1rF,KAAAmL,GAAAggF,OAAAlgE,EAAA7f,EAAAsgF,OAAAzgE,EAAA9f,IAEAjF,EAAAlG,KAAAoL,EAAA0/E,OAAA9qF,KAAAmL,GAAAggF,OAAAlgE,EAAA7f,EAAA0/E,OAAA7/D,EAAA9f,IAEAhF,EAAAnG,KAAAsL,EAAA6/E,OAAAnrF,KAAA6lF,MAAAgF,IAAAM,OAAAlgE,EAAA3f,GAEAuI,EAAA7T,KAAAg7E,EAAAmQ,OAAAlgE,EAAA+vD,EAAA8P,OAAA7/D,EAAA+vD,IAEA7yD,EAAAjiB,EAAAwlF,OAAAzlF,GAEAyiB,EAAA7U,EAAA63E,OAAAvlF,GAEAwiB,EAAA9U,EAAAi3E,OAAA3kF,GAEA/D,EAAA8D,EAAA4kF,OAAA7kF,GAEAqmF,EAAAnkE,EAAAgjE,OAAAziE,GAEA6jE,EAAA5jE,EAAAwiE,OAAA/oF,GAEAoqF,EAAArkE,EAAAgjE,OAAA/oF,GAEAqqF,EAAA/jE,EAAAyiE,OAAAxiE,GACA,OAAA3oB,KAAA6lF,MAAA6B,MAAA4E,EAAAC,EAAAE,EAAAD,EACA,EAEAvB,EAAA36E,UAAAs8E,SAAA,SAAA3hE,GAOA,IAgBAshE,EACAE,EAjBAxmF,EAAAjG,KAAAg7E,EAAAmQ,OAAAlgE,EAAA+vD,GAEA90E,EAAAD,EAAA2kF,SAEAzkF,EAAAnG,KAAAmL,EAAAggF,OAAAlgE,EAAA9f,GAEA0I,EAAA7T,KAAAoL,EAAA+/E,OAAAlgE,EAAA7f,GAEA+c,EAAAnoB,KAAA6lF,MAAAhyE,EAAAs3E,OAAAhlF,GAAAglF,OAAAt3E,GAEA6U,EAAAxiB,EAAAwlF,OAAAvjE,GAEAQ,EAAAziB,EAAA4kF,OAAA3iE,GAEAvX,EAAA5Q,KAAAmL,EAAA2/E,OAAA9qF,KAAAoL,GAAA+/E,OAAAlgE,EAAA9f,EAAA2/E,OAAA7/D,EAAA7f,IAAAihF,QAAAlmF,GAAAkmF,QAAAx4E,GACAy4E,EAAArmF,EAAAklF,OAAAziE,GAAAyiE,OAAAv6E,GAcA,OAXA5Q,KAAA6lF,MAAA0E,SAEAgC,EAAAtmF,EAAAklF,OAAAxiE,GAAAwiE,OAAAt3E,EAAA63E,OAAA1rF,KAAA6lF,MAAAwF,MAAAllF,KAEAsmF,EAAA/jE,EAAAyiE,OAAAxiE,KAGA4jE,EAAAtmF,EAAAklF,OAAAxiE,GAAAwiE,OAAAt3E,EAAA63E,OAAAvlF,IAEAsmF,EAAAzsF,KAAA6lF,MAAAyF,MAAA5iE,GAAAyiE,OAAAxiE,IAEA3oB,KAAA6lF,MAAA6B,MAAA4E,EAAAC,EAAAE,EACA,EAEAxB,EAAA36E,UAAArN,IAAA,SAAAgoB,GACA,OAAAjrB,KAAA+rF,aACA9gE,EACAA,EAAA8gE,aACA/rF,KAEAA,KAAA6lF,MAAA4E,SACAzqF,KAAA2sF,QAAA1hE,GAEAjrB,KAAA4sF,SAAA3hE,EACA,EAEAggE,EAAA36E,UAAA4xD,IAAA,SAAA99C,GACA,OAAApkB,KAAAmqF,YAAA/lE,GACApkB,KAAA6lF,MAAA8B,aAAA3nF,KAAAokB,GAEApkB,KAAA6lF,MAAA0C,SAAAvoF,KAAAokB,EACA,EAEA6mE,EAAA36E,UAAAu8E,OAAA,SAAAC,EAAA7hE,EAAA6B,GACA,OAAA9sB,KAAA6lF,MAAA+C,YAAA,GAAA5oF,KAAAirB,GAAA,CAAA6hE,EAAAhgE,GAAA,KACA,EAEAm+D,EAAA36E,UAAAy8E,QAAA,SAAAD,EAAA7hE,EAAA6B,GACA,OAAA9sB,KAAA6lF,MAAA+C,YAAA,GAAA5oF,KAAAirB,GAAA,CAAA6hE,EAAAhgE,GAAA,KACA,EAEAm+D,EAAA36E,UAAA07E,UAAA,WACA,GAAAhsF,KAAAkrF,KACA,OAAAlrF,KAGA,IAAAgtF,EAAAhtF,KAAAg7E,EAAAoQ,UAOA,OANAprF,KAAAmL,EAAAnL,KAAAmL,EAAAggF,OAAA6B,GACAhtF,KAAAoL,EAAApL,KAAAoL,EAAA+/E,OAAA6B,GACAhtF,KAAAsL,IACAtL,KAAAsL,EAAAtL,KAAAsL,EAAA6/E,OAAA6B,IACAhtF,KAAAg7E,EAAAh7E,KAAA6lF,MAAAa,IACA1mF,KAAAkrF,MAAA,EACAlrF,IACA,EAEAirF,EAAA36E,UAAA+3E,IAAA,WACA,OAAAroF,KAAA6lF,MAAA6B,MAAA1nF,KAAAmL,EAAAg+E,SACAnpF,KAAAoL,EACApL,KAAAg7E,EACAh7E,KAAAsL,GAAAtL,KAAAsL,EAAA69E,SACA,EAEA8B,EAAA36E,UAAAs5E,KAAA,WAEA,OADA5pF,KAAAgsF,YACAhsF,KAAAmL,EAAA4/E,SACA,EAEAE,EAAA36E,UAAAu5E,KAAA,WAEA,OADA7pF,KAAAgsF,YACAhsF,KAAAoL,EAAA2/E,SACA,EAEAE,EAAA36E,UAAAmT,GAAA,SAAAwpE,GACA,OAAAjtF,OAAAitF,GACA,IAAAjtF,KAAA4pF,OAAAjJ,IAAAsM,EAAArD,SACA,IAAA5pF,KAAA6pF,OAAAlJ,IAAAsM,EAAApD,OACA,EAEAoB,EAAA36E,UAAA48E,OAAA,SAAA/hF,GACA,IAAAgiF,EAAAhiF,EAAAs7E,MAAAzmF,KAAA6lF,MAAAQ,KAAA8E,OAAAnrF,KAAAg7E,GACA,OAAAh7E,KAAAmL,EAAAw1E,IAAAwM,GACA,SAIA,IAFA,IAAAjS,EAAA/vE,EAAAvC,QACA0C,EAAAtL,KAAA6lF,MAAAyB,KAAA6D,OAAAnrF,KAAAg7E,KACA,CAEA,GADAE,EAAAkS,KAAAptF,KAAA6lF,MAAAviF,GACA43E,EAAAyF,IAAA3gF,KAAA6lF,MAAA56D,IAAA,EACA,SAGA,GADAkiE,EAAAf,QAAA9gF,GACA,IAAAtL,KAAAmL,EAAAw1E,IAAAwM,GACA,QACA,CACA,EAGAlC,EAAA36E,UAAAg4E,IAAA2C,EAAA36E,UAAA07E,UACAf,EAAA36E,UAAA63E,SAAA8C,EAAA36E,UAAArN,G,oUChbA,IAAA4iF,EAAA1mF,EAEA0mF,EAAAhyD,KAAAt0B,EAAA,UACAsmF,EAAAwH,MAAA9tF,EAAA,WACAsmF,EAAAU,KAAAhnF,EAAA,UACAsmF,EAAAyH,QAAA/tF,EAAA,Y,+TCLA,IAAAkyD,EAAAlyD,EAAA,SACA8qF,EAAA9qF,EAAA,YACAkmB,EAAAlmB,EAAA,UAEAwU,EAAAxU,EAAA,YAEA,SAAAguF,EAAAnH,GACA3gE,EAAAlV,KAAAvQ,KAAA,OAAAomF,GAEApmF,KAAAiG,EAAA,IAAAwrD,EAAA20B,EAAAngF,EAAA,IAAAwgF,MAAAzmF,KAAAqmF,KACArmF,KAAAkG,EAAA,IAAAurD,EAAA20B,EAAAlgF,EAAA,IAAAugF,MAAAzmF,KAAAqmF,KACArmF,KAAAwtF,GAAA,IAAA/7B,EAAA,GAAAg1B,MAAAzmF,KAAAqmF,KAAA+E,UACAprF,KAAA2mF,IAAA,IAAAl1B,EAAA,GAAAg1B,MAAAzmF,KAAAqmF,KACArmF,KAAAytF,IAAAztF,KAAAwtF,GAAArC,OAAAnrF,KAAAiG,EAAA6kF,OAAA9qF,KAAA2mF,KACA,CAaA,SAAAsE,EAAApF,EAAA16E,EAAA6vE,GACAv1D,EAAA+hE,UAAAj3E,KAAAvQ,KAAA6lF,EAAA,cACA,OAAA16E,GAAA,OAAA6vE,GACAh7E,KAAAmL,EAAAnL,KAAA6lF,MAAAa,IACA1mF,KAAAg7E,EAAAh7E,KAAA6lF,MAAAW,OAEAxmF,KAAAmL,EAAA,IAAAsmD,EAAAtmD,EAAA,IACAnL,KAAAg7E,EAAA,IAAAvpB,EAAAupB,EAAA,IACAh7E,KAAAmL,EAAAk7E,MACArmF,KAAAmL,EAAAnL,KAAAmL,EAAAs7E,MAAAzmF,KAAA6lF,MAAAQ,MACArmF,KAAAg7E,EAAAqL,MACArmF,KAAAg7E,EAAAh7E,KAAAg7E,EAAAyL,MAAAzmF,KAAA6lF,MAAAQ,MAEA,CAzBAgE,EAAAkD,EAAA9nE,GACAhT,EAAAtT,QAAAouF,EAEAA,EAAAj9E,UAAAujD,SAAA,SAAA6zB,GACA,IAAAv8E,EAAAu8E,EAAAsE,YAAA7gF,EACAqgF,EAAArgF,EAAAy/E,SACAa,EAAAD,EAAAL,OAAAhgF,GAAA2/E,OAAAU,EAAAL,OAAAnrF,KAAAiG,IAAA6kF,OAAA3/E,GAGA,WAFAsgF,EAAAI,UAEAjB,SAAAjK,IAAA8K,EACA,EAgBApB,EAAAY,EAAAxlE,EAAA+hE,WAEA+F,EAAAj9E,UAAAi5E,YAAA,SAAAt8E,EAAA2Z,GACA,OAAA5mB,KAAA0nF,MAAA3zE,EAAA+rB,QAAA7yB,EAAA2Z,GAAA,EACA,EAEA2mE,EAAAj9E,UAAAo3E,MAAA,SAAAv8E,EAAA6vE,GACA,WAAAiQ,EAAAjrF,KAAAmL,EAAA6vE,EACA,EAEAuS,EAAAj9E,UAAAs2E,cAAA,SAAAv2E,GACA,OAAA46E,EAAAgB,SAAAjsF,KAAAqQ,EACA,EAEA46E,EAAA36E,UAAAy5E,WAAA,WAEA,EAEAkB,EAAA36E,UAAAo5E,QAAA,WACA,OAAA1pF,KAAA4pF,OAAA9pD,QAAA,KAAA9/B,KAAA6lF,MAAA56D,EAAA5c,aACA,EAEA48E,EAAAgB,SAAA,SAAApG,EAAAx1E,GACA,WAAA46E,EAAApF,EAAAx1E,EAAA,GAAAA,EAAA,IAAAw1E,EAAAa,IACA,EAEAuE,EAAA36E,UAAA47E,QAAA,WACA,OAAAlsF,KAAA+rF,aACA,sBACA,gBAAA/rF,KAAAmL,EAAA4/E,UAAAr8E,SAAA,MACA,OAAA1O,KAAAg7E,EAAA+P,UAAAr8E,SAAA,SACA,EAEAu8E,EAAA36E,UAAAy7E,WAAA,WAEA,WAAA/rF,KAAAg7E,EAAAqM,KAAA,EACA,EAEA4D,EAAA36E,UAAA85E,IAAA,WAKA,IAEAsD,EAFA1tF,KAAAmL,EAAA2/E,OAAA9qF,KAAAg7E,GAEA4P,SAIA+C,EAFA3tF,KAAAmL,EAAAugF,OAAA1rF,KAAAg7E,GAEA4P,SAEAzkF,EAAAunF,EAAAhC,OAAAiC,GAEArB,EAAAoB,EAAAvC,OAAAwC,GAEAlB,EAAAtmF,EAAAglF,OAAAwC,EAAA7C,OAAA9qF,KAAA6lF,MAAA4H,IAAAtC,OAAAhlF,KACA,OAAAnG,KAAA6lF,MAAA6B,MAAA4E,EAAAG,EACA,EAEAxB,EAAA36E,UAAArN,IAAA,WACA,UAAA0F,MAAA,oCACA,EAEAsiF,EAAA36E,UAAAs9E,QAAA,SAAA3iE,EAAAnb,GAKA,IAAA7J,EAAAjG,KAAAmL,EAAA2/E,OAAA9qF,KAAAg7E,GAEA90E,EAAAlG,KAAAmL,EAAAugF,OAAA1rF,KAAAg7E,GAEA70E,EAAA8kB,EAAA9f,EAAA2/E,OAAA7/D,EAAA+vD,GAIA6S,EAFA5iE,EAAA9f,EAAAugF,OAAAzgE,EAAA+vD,GAEAmQ,OAAAllF,GAEAyJ,EAAAvJ,EAAAglF,OAAAjlF,GAEAomF,EAAAx8E,EAAAkrE,EAAAmQ,OAAA0C,EAAA/C,OAAAp7E,GAAAk7E,UAEA6B,EAAA38E,EAAA3E,EAAAggF,OAAA0C,EAAAxB,QAAA38E,GAAAk7E,UACA,OAAA5qF,KAAA6lF,MAAA6B,MAAA4E,EAAAG,EACA,EAEAxB,EAAA36E,UAAA4xD,IAAA,SAAA99C,GAMA,IALA,IAAA9Y,EAAA8Y,EAAAxb,QACA3C,EAAAjG,KACAkG,EAAAlG,KAAA6lF,MAAA6B,MAAA,WAGAt3D,EAAA,OAAA9kB,EAAA+7E,KAAA,GAAA/7E,EAAAwiF,OAAA,GACA19D,EAAA/kB,KAAAC,EAAAyiF,MAAA,IAEA,QAAApsF,EAAAyuB,EAAAlwB,OAAA,EAAAyB,GAAA,EAAAA,IACA,IAAAyuB,EAAAzuB,IAEAsE,IAAA2nF,QAAA1nF,EARAlG,MAUAkG,IAAAkkF,QAGAlkF,EAAAD,EAAA2nF,QAAA1nF,EAbAlG,MAeAiG,IAAAmkF,OAGA,OAAAlkF,CACA,EAEA+kF,EAAA36E,UAAAu8E,OAAA,WACA,UAAAlkF,MAAA,oCACA,EAEAsiF,EAAA36E,UAAA09E,QAAA,WACA,UAAArlF,MAAA,oCACA,EAEAsiF,EAAA36E,UAAAmT,GAAA,SAAAwpE,GACA,WAAAjtF,KAAA4pF,OAAAjJ,IAAAsM,EAAArD,OACA,EAEAqB,EAAA36E,UAAA07E,UAAA,WAGA,OAFAhsF,KAAAmL,EAAAnL,KAAAmL,EAAAggF,OAAAnrF,KAAAg7E,EAAAoQ,WACAprF,KAAAg7E,EAAAh7E,KAAA6lF,MAAAa,IACA1mF,IACA,EAEAirF,EAAA36E,UAAAs5E,KAAA,WAIA,OAFA5pF,KAAAgsF,YAEAhsF,KAAAmL,EAAA4/E,SACA,C,8TC/KA,IAAAh3E,EAAAxU,EAAA,YACAkyD,EAAAlyD,EAAA,SACA8qF,EAAA9qF,EAAA,YACAkmB,EAAAlmB,EAAA,UAEA2mF,EAAAnyE,EAAAmyE,OAEA,SAAA+H,EAAA7H,GACA3gE,EAAAlV,KAAAvQ,KAAA,QAAAomF,GAEApmF,KAAAiG,EAAA,IAAAwrD,EAAA20B,EAAAngF,EAAA,IAAAwgF,MAAAzmF,KAAAqmF,KACArmF,KAAAkG,EAAA,IAAAurD,EAAA20B,EAAAlgF,EAAA,IAAAugF,MAAAzmF,KAAAqmF,KACArmF,KAAAkuF,KAAAluF,KAAA2mF,IAAAyE,UAEAprF,KAAAmuF,MAAA,IAAAnuF,KAAAiG,EAAA8kF,UAAA1D,KAAA,GACArnF,KAAAouF,OAAA,IAAApuF,KAAAiG,EAAA8kF,UAAA5oB,IAAAniE,KAAAirB,GAAAo8D,MAAA,GAGArnF,KAAAquF,KAAAruF,KAAAsuF,iBAAAlI,GACApmF,KAAAuuF,YAAA,IAAA/kF,MAAA,GACAxJ,KAAAwuF,YAAA,IAAAhlF,MAAA,EACA,CAmOA,SAAAyhF,EAAApF,EAAA16E,EAAAC,EAAAqjF,GACAhpE,EAAA+hE,UAAAj3E,KAAAvQ,KAAA6lF,EAAA,UACA,OAAA16E,GAAA,OAAAC,GACApL,KAAAmL,EAAA,KACAnL,KAAAoL,EAAA,KACApL,KAAA0uF,KAAA,IAEA1uF,KAAAmL,EAAA,IAAAsmD,EAAAtmD,EAAA,IACAnL,KAAAoL,EAAA,IAAAqmD,EAAArmD,EAAA,IAEAqjF,IACAzuF,KAAAmL,EAAAwjF,SAAA3uF,KAAA6lF,MAAAQ,KACArmF,KAAAoL,EAAAujF,SAAA3uF,KAAA6lF,MAAAQ,MAEArmF,KAAAmL,EAAAk7E,MACArmF,KAAAmL,EAAAnL,KAAAmL,EAAAs7E,MAAAzmF,KAAA6lF,MAAAQ,MACArmF,KAAAoL,EAAAi7E,MACArmF,KAAAoL,EAAApL,KAAAoL,EAAAq7E,MAAAzmF,KAAA6lF,MAAAQ,MACArmF,KAAA0uF,KAAA,EAEA,CA2NA,SAAAE,EAAA/I,EAAA16E,EAAAC,EAAA4vE,GACAv1D,EAAA+hE,UAAAj3E,KAAAvQ,KAAA6lF,EAAA,YACA,OAAA16E,GAAA,OAAAC,GAAA,OAAA4vE,GACAh7E,KAAAmL,EAAAnL,KAAA6lF,MAAAa,IACA1mF,KAAAoL,EAAApL,KAAA6lF,MAAAa,IACA1mF,KAAAg7E,EAAA,IAAAvpB,EAAA,KAEAzxD,KAAAmL,EAAA,IAAAsmD,EAAAtmD,EAAA,IACAnL,KAAAoL,EAAA,IAAAqmD,EAAArmD,EAAA,IACApL,KAAAg7E,EAAA,IAAAvpB,EAAAupB,EAAA,KAEAh7E,KAAAmL,EAAAk7E,MACArmF,KAAAmL,EAAAnL,KAAAmL,EAAAs7E,MAAAzmF,KAAA6lF,MAAAQ,MACArmF,KAAAoL,EAAAi7E,MACArmF,KAAAoL,EAAApL,KAAAoL,EAAAq7E,MAAAzmF,KAAA6lF,MAAAQ,MACArmF,KAAAg7E,EAAAqL,MACArmF,KAAAg7E,EAAAh7E,KAAAg7E,EAAAyL,MAAAzmF,KAAA6lF,MAAAQ,MAEArmF,KAAAkrF,KAAAlrF,KAAAg7E,IAAAh7E,KAAA6lF,MAAAa,GACA,CApeA2D,EAAA4D,EAAAxoE,GACAhT,EAAAtT,QAAA8uF,EAEAA,EAAA39E,UAAAg+E,iBAAA,SAAAlI,GAEA,GAAApmF,KAAAmuF,OAAAnuF,KAAA2oB,GAAA3oB,KAAAsD,GAAA,IAAAtD,KAAAirB,EAAA4jE,KAAA,IAIA,IAAA5E,EACA6E,EACA,GAAA1I,EAAA6D,KACAA,EAAA,IAAAx4B,EAAA20B,EAAA6D,KAAA,IAAAxD,MAAAzmF,KAAAqmF,SACA,CACA,IAAA0I,EAAA/uF,KAAAgvF,cAAAhvF,KAAAirB,GAGAg/D,GADAA,EAAA8E,EAAA,GAAApO,IAAAoO,EAAA,MAAAA,EAAA,GAAAA,EAAA,IACAtI,MAAAzmF,KAAAqmF,IACA,CACA,GAAAD,EAAA0I,OACAA,EAAA,IAAAr9B,EAAA20B,EAAA0I,OAAA,QACA,CAEA,IAAAG,EAAAjvF,KAAAgvF,cAAAhvF,KAAAsD,GACA,IAAAtD,KAAA2oB,EAAAu5C,IAAA+sB,EAAA,IAAA9jF,EAAAw1E,IAAA3gF,KAAA2oB,EAAAxd,EAAAggF,OAAAlB,IACA6E,EAAAG,EAAA,IAEAH,EAAAG,EAAA,GACA/I,EAAA,IAAAlmF,KAAA2oB,EAAAu5C,IAAA4sB,GAAA3jF,EAAAw1E,IAAA3gF,KAAA2oB,EAAAxd,EAAAggF,OAAAlB,KAEA,CAeA,OACAA,OACA6E,SACAI,MAdA9I,EAAA8I,MACA9I,EAAA8I,MAAA/zE,KAAA,SAAAg0E,GACA,OACAlpF,EAAA,IAAAwrD,EAAA09B,EAAAlpF,EAAA,IACAC,EAAA,IAAAurD,EAAA09B,EAAAjpF,EAAA,IAEA,IAEAlG,KAAAovF,cAAAN,GApCA,CA4CA,EAEAb,EAAA39E,UAAA0+E,cAAA,SAAArwB,GAIA,IAAA0nB,EAAA1nB,IAAA3+D,KAAAirB,EAAAjrB,KAAAqmF,IAAA50B,EAAA80B,KAAA5nB,GACAuvB,EAAA,IAAAz8B,EAAA,GAAAg1B,MAAAJ,GAAA+E,UACAiE,EAAAnB,EAAA/E,SAEAnlF,EAAA,IAAAytD,EAAA,GAAAg1B,MAAAJ,GAAA8C,SAAA0C,UAAAV,OAAA+C,GAIA,OAFAmB,EAAAvE,OAAA9mF,GAAA+mF,UACAsE,EAAA3D,OAAA1nF,GAAA+mF,UAEA,EAEAkD,EAAA39E,UAAA8+E,cAAA,SAAAN,GA2BA,IAzBA,IAYAQ,EACAC,EAEAC,EACAC,EAEAC,EACAC,EAEAC,EAEAz+C,EACAhmC,EAxBA0kF,EAAA7vF,KAAAsD,EAAAwsF,MAAA9uF,KAAAoH,MAAApI,KAAAsD,EAAA6jF,YAAA,IAIA4I,EAAAjB,EACApsF,EAAA1C,KAAAsD,EAAAsF,QACAonF,EAAA,IAAAv+B,EAAA,GACAw+B,EAAA,IAAAx+B,EAAA,GACA+5B,EAAA,IAAA/5B,EAAA,GACAm6B,EAAA,IAAAn6B,EAAA,GAaA9vD,EAAA,EAGA,IAAAouF,EAAA1I,KAAA,KACA,IAAArG,EAAAt+E,EAAA0/D,IAAA2tB,GACA5+C,EAAAzuC,EAAAy/D,IAAA6e,EAAA9e,IAAA6tB,IACA5kF,EAAAqgF,EAAArpB,IAAA6e,EAAA9e,IAAA8tB,IACA,IAAA5kF,EAAAwgF,EAAAzpB,IAAA6e,EAAA9e,IAAA+tB,IAEA,IAAAT,GAAAr+C,EAAAwvC,IAAAkP,GAAA,EACAP,EAAAM,EAAAvH,MACAkH,EAAAS,EACAR,EAAAr+C,EAAAk3C,MACAoH,EAAAtkF,OACA,GAAAqkF,GAAA,KAAA7tF,EACA,MAEAiuF,EAAAz+C,EAEAzuC,EAAAqtF,EACAA,EAAA5+C,EACAq6C,EAAAwE,EACAA,EAAA7kF,EACAygF,EAAAqE,EACAA,EAAA7kF,CACA,CACAskF,EAAAv+C,EAAAk3C,MACAsH,EAAAxkF,EAEA,IAAA+kF,EAAAV,EAAAW,MAAAltF,IAAAwsF,EAAAU,OAiBA,OAhBAT,EAAAS,MAAAltF,IAAA0sF,EAAAQ,OACAxP,IAAAuP,IAAA,IACAR,EAAAJ,EACAK,EAAAJ,GAIAC,EAAAY,WACAZ,IAAAnH,MACAoH,IAAApH,OAEAqH,EAAAU,WACAV,IAAArH,MACAsH,IAAAtH,OAGA,CACA,CAAApiF,EAAAupF,EAAAtpF,EAAAupF,GACA,CAAAxpF,EAAAypF,EAAAxpF,EAAAypF,GAEA,EAEA1B,EAAA39E,UAAA+/E,WAAA,SAAAjsE,GACA,IAAA8qE,EAAAlvF,KAAAquF,KAAAa,MACA3oC,EAAA2oC,EAAA,GACAoB,EAAApB,EAAA,GAEAqB,EAAAD,EAAApqF,EAAAg8D,IAAA99C,GAAAosE,SAAAxwF,KAAAsD,GACAqnF,EAAApkC,EAAArgD,EAAAmiF,MAAAnmB,IAAA99C,GAAAosE,SAAAxwF,KAAAsD,GAEAq+E,EAAA4O,EAAAruB,IAAA3b,EAAAtgD,GACA27E,EAAA+I,EAAAzoB,IAAAouB,EAAArqF,GACAwqF,EAAAF,EAAAruB,IAAA3b,EAAArgD,GACAwqF,EAAA/F,EAAAzoB,IAAAouB,EAAApqF,GAKA,OAAA4mF,GAFA1oE,EAAA+9C,IAAAwf,GAAAxf,IAAAyf,GAEA90D,GADA2jE,EAAAxtF,IAAAytF,GAAArI,MAEA,EAEA4F,EAAA39E,UAAAk5E,WAAA,SAAAr+E,EAAAogF,IACApgF,EAAA,IAAAsmD,EAAAtmD,EAAA,KACAk7E,MACAl7E,IAAAs7E,MAAAzmF,KAAAqmF,MAEA,IAAAuF,EAAAzgF,EAAAy/E,SAAAO,OAAAhgF,GAAAihF,QAAAjhF,EAAAggF,OAAAnrF,KAAAiG,IAAAmmF,QAAApsF,KAAAkG,GACAkF,EAAAwgF,EAAAC,UACA,OAAAzgF,EAAAw/E,SAAAc,OAAAE,GAAAjL,IAAA3gF,KAAAwmF,MACA,UAAA79E,MAAA,iBAIA,IAAA0yE,EAAAjwE,EAAA2/E,UAAA1P,QAIA,OAHAkQ,IAAAlQ,IAAAkQ,GAAAlQ,KACAjwE,IAAA+9E,UAEAnpF,KAAA0nF,MAAAv8E,EAAAC,EACA,EAEA6iF,EAAA39E,UAAAujD,SAAA,SAAA6zB,GACA,GAAAA,EAAAgH,IACA,SAEA,IAAAvjF,EAAAu8E,EAAAv8E,EACAC,EAAAs8E,EAAAt8E,EAEAulF,EAAA3wF,KAAAiG,EAAAklF,OAAAhgF,GACAsgF,EAAAtgF,EAAAy/E,SAAAO,OAAAhgF,GAAAihF,QAAAuE,GAAAvE,QAAApsF,KAAAkG,GACA,WAAAkF,EAAAw/E,SAAAyB,QAAAZ,GAAApE,KAAA,EACA,EAEA4G,EAAA39E,UAAAsgF,gBACA,SAAAxI,EAAAU,EAAAC,GAGA,IAFA,IAAA8H,EAAA7wF,KAAAuuF,YACAuC,EAAA9wF,KAAAwuF,YACA7sF,EAAA,EAAAA,EAAAymF,EAAAloF,OAAAyB,IAAA,CACA,IAAAwB,EAAAnD,KAAAqwF,WAAAvH,EAAAnnF,IACAspB,EAAAm9D,EAAAzmF,GACAsoF,EAAAh/D,EAAAi/D,WAEA/mF,EAAA2pF,GAAAsD,WACAjtF,EAAA2pF,GAAAiE,OACA9lE,IAAAo9D,KAAA,IAEAllF,EAAA2pB,GAAAsjE,WACAjtF,EAAA2pB,GAAAikE,OACA9G,IAAA5B,KAAA,IAGAwI,EAAA,EAAAlvF,GAAAspB,EACA4lE,EAAA,EAAAlvF,EAAA,GAAAsoF,EACA6G,EAAA,EAAAnvF,GAAAwB,EAAA2pF,GACAgE,EAAA,EAAAnvF,EAAA,GAAAwB,EAAA2pB,EACA,CAIA,IAHA,IAAAlqB,EAAA5C,KAAA4oF,YAAA,EAAAiI,EAAAC,EAAA,EAAAnvF,EAAAonF,GAGAx9E,EAAA,EAAAA,EAAA,EAAA5J,EAAA4J,IACAslF,EAAAtlF,GAAA,KACAulF,EAAAvlF,GAAA,KAEA,OAAA3I,CACA,EAuBAynF,EAAAY,EAAAxlE,EAAA+hE,WAEAyG,EAAA39E,UAAAo3E,MAAA,SAAAv8E,EAAAC,EAAAqjF,GACA,WAAAxD,EAAAjrF,KAAAmL,EAAAC,EAAAqjF,EACA,EAEAR,EAAA39E,UAAAs2E,cAAA,SAAAv2E,EAAAg2E,GACA,OAAA4E,EAAAgB,SAAAjsF,KAAAqQ,EAAAg2E,EACA,EAEA4E,EAAA36E,UAAA45E,SAAA,WACA,GAAAlqF,KAAA6lF,MAAAwI,KAAA,CAGA,IAAA2C,EAAAhxF,KAAAynF,YACA,GAAAuJ,KAAA/G,KACA,OAAA+G,EAAA/G,KAEA,IAAAA,EAAAjqF,KAAA6lF,MAAA6B,MAAA1nF,KAAAmL,EAAAggF,OAAAnrF,KAAA6lF,MAAAwI,KAAApE,MAAAjqF,KAAAoL,GACA,GAAA4lF,EAAA,CACA,IAAAnL,EAAA7lF,KAAA6lF,MACAoL,EAAA,SAAAhmE,GACA,OAAA46D,EAAA6B,MAAAz8D,EAAA9f,EAAAggF,OAAAtF,EAAAwI,KAAApE,MAAAh/D,EAAA7f,EACA,EACA4lF,EAAA/G,OACAA,EAAAxC,YAAA,CACAwC,KAAA,KACAnC,IAAAkJ,EAAAlJ,KAAA,CACAY,IAAAsI,EAAAlJ,IAAAY,IACAN,OAAA4I,EAAAlJ,IAAAM,OAAAjtE,IAAA81E,IAEArJ,QAAAoJ,EAAApJ,SAAA,CACA1/D,KAAA8oE,EAAApJ,QAAA1/D,KACAkgE,OAAA4I,EAAApJ,QAAAQ,OAAAjtE,IAAA81E,IAGA,CACA,OAAAhH,CAzBA,CA0BA,EAEAgB,EAAA36E,UAAA4/D,OAAA,WACA,OAAAlwE,KAAAynF,YAGA,CAAAznF,KAAAmL,EAAAnL,KAAAoL,EAAApL,KAAAynF,aAAA,CACAG,QAAA5nF,KAAAynF,YAAAG,SAAA,CACA1/D,KAAAloB,KAAAynF,YAAAG,QAAA1/D,KACAkgE,OAAApoF,KAAAynF,YAAAG,QAAAQ,OAAAvlF,MAAA,IAEAilF,IAAA9nF,KAAAynF,YAAAK,KAAA,CACAY,IAAA1oF,KAAAynF,YAAAK,IAAAY,IACAN,OAAApoF,KAAAynF,YAAAK,IAAAM,OAAAvlF,MAAA,MATA,CAAA7C,KAAAmL,EAAAnL,KAAAoL,EAYA,EAEA6/E,EAAAgB,SAAA,SAAApG,EAAAx1E,EAAAg2E,GACA,iBAAAh2E,IACAA,EAAA2xB,KAAAI,MAAA/xB,IACA,IAAAzN,EAAAijF,EAAA6B,MAAAr3E,EAAA,GAAAA,EAAA,GAAAg2E,GACA,IAAAh2E,EAAA,GACA,OAAAzN,EAEA,SAAAsuF,EAAA7gF,GACA,OAAAw1E,EAAA6B,MAAAr3E,EAAA,GAAAA,EAAA,GAAAg2E,EACA,CAEA,IAAA2K,EAAA3gF,EAAA,GAYA,OAXAzN,EAAA6kF,YAAA,CACAwC,KAAA,KACArC,QAAAoJ,EAAApJ,SAAA,CACA1/D,KAAA8oE,EAAApJ,QAAA1/D,KACAkgE,OAAA,CAAAxlF,GAAAmkB,OAAAiqE,EAAApJ,QAAAQ,OAAAjtE,IAAA+1E,KAEApJ,IAAAkJ,EAAAlJ,KAAA,CACAY,IAAAsI,EAAAlJ,IAAAY,IACAN,OAAA,CAAAxlF,GAAAmkB,OAAAiqE,EAAAlJ,IAAAM,OAAAjtE,IAAA+1E,MAGAtuF,CACA,EAEAqoF,EAAA36E,UAAA47E,QAAA,WACA,OAAAlsF,KAAA+rF,aACA,sBACA,gBAAA/rF,KAAAmL,EAAA4/E,UAAAr8E,SAAA,MACA,OAAA1O,KAAAoL,EAAA2/E,UAAAr8E,SAAA,SACA,EAEAu8E,EAAA36E,UAAAy7E,WAAA,WACA,OAAA/rF,KAAA0uF,GACA,EAEAzD,EAAA36E,UAAArN,IAAA,SAAAgoB,GAEA,GAAAjrB,KAAA0uF,IACA,OAAAzjE,EAGA,GAAAA,EAAAyjE,IACA,OAAA1uF,KAGA,GAAAA,KAAAyjB,GAAAwH,GACA,OAAAjrB,KAAAoqF,MAGA,GAAApqF,KAAAqoF,MAAA5kE,GAAAwH,GACA,OAAAjrB,KAAA6lF,MAAA6B,MAAA,WAGA,OAAA1nF,KAAAmL,EAAAw1E,IAAA11D,EAAA9f,GACA,OAAAnL,KAAA6lF,MAAA6B,MAAA,WAEA,IAAAvhF,EAAAnG,KAAAoL,EAAAsgF,OAAAzgE,EAAA7f,GACA,IAAAjF,EAAAkhF,KAAA,KACAlhF,IAAAglF,OAAAnrF,KAAAmL,EAAAugF,OAAAzgE,EAAA9f,GAAAigF,YACA,IAAAkB,EAAAnmF,EAAAykF,SAAAyB,QAAArsF,KAAAmL,GAAAkhF,QAAAphE,EAAA9f,GACAohF,EAAApmF,EAAAglF,OAAAnrF,KAAAmL,EAAAugF,OAAAY,IAAAD,QAAArsF,KAAAoL,GACA,OAAApL,KAAA6lF,MAAA6B,MAAA4E,EAAAC,EACA,EAEAtB,EAAA36E,UAAA85E,IAAA,WACA,GAAApqF,KAAA0uF,IACA,OAAA1uF,KAGA,IAAAmxF,EAAAnxF,KAAAoL,EAAA0/E,OAAA9qF,KAAAoL,GACA,OAAA+lF,EAAA9J,KAAA,GACA,OAAArnF,KAAA6lF,MAAA6B,MAAA,WAEA,IAAAzhF,EAAAjG,KAAA6lF,MAAA5/E,EAEAulF,EAAAxrF,KAAAmL,EAAAy/E,SACAwG,EAAAD,EAAA/F,UACAjlF,EAAAqlF,EAAAV,OAAAU,GAAAY,QAAAZ,GAAAY,QAAAnmF,GAAAklF,OAAAiG,GAEA9E,EAAAnmF,EAAAykF,SAAAyB,QAAArsF,KAAAmL,EAAA2/E,OAAA9qF,KAAAmL,IACAohF,EAAApmF,EAAAglF,OAAAnrF,KAAAmL,EAAAugF,OAAAY,IAAAD,QAAArsF,KAAAoL,GACA,OAAApL,KAAA6lF,MAAA6B,MAAA4E,EAAAC,EACA,EAEAtB,EAAA36E,UAAAs5E,KAAA,WACA,OAAA5pF,KAAAmL,EAAA4/E,SACA,EAEAE,EAAA36E,UAAAu5E,KAAA,WACA,OAAA7pF,KAAAoL,EAAA2/E,SACA,EAEAE,EAAA36E,UAAA4xD,IAAA,SAAA99C,GAEA,OADAA,EAAA,IAAAqtC,EAAArtC,EAAA,IACApkB,KAAA+rF,aACA/rF,KACAA,KAAAmqF,YAAA/lE,GACApkB,KAAA6lF,MAAA8B,aAAA3nF,KAAAokB,GACApkB,KAAA6lF,MAAAwI,KACAruF,KAAA6lF,MAAA+K,gBAAA,CAAA5wF,MAAA,CAAAokB,IAEApkB,KAAA6lF,MAAA0C,SAAAvoF,KAAAokB,EACA,EAEA6mE,EAAA36E,UAAAu8E,OAAA,SAAAC,EAAAlL,EAAA90D,GACA,IAAAs7D,EAAA,CAAApoF,KAAA4hF,GACAkH,EAAA,CAAAgE,EAAAhgE,GACA,OAAA9sB,KAAA6lF,MAAAwI,KACAruF,KAAA6lF,MAAA+K,gBAAAxI,EAAAU,GAEA9oF,KAAA6lF,MAAA+C,YAAA,EAAAR,EAAAU,EAAA,EACA,EAEAmC,EAAA36E,UAAAy8E,QAAA,SAAAD,EAAAlL,EAAA90D,GACA,IAAAs7D,EAAA,CAAApoF,KAAA4hF,GACAkH,EAAA,CAAAgE,EAAAhgE,GACA,OAAA9sB,KAAA6lF,MAAAwI,KACAruF,KAAA6lF,MAAA+K,gBAAAxI,EAAAU,GAAA,GAEA9oF,KAAA6lF,MAAA+C,YAAA,EAAAR,EAAAU,EAAA,KACA,EAEAmC,EAAA36E,UAAAmT,GAAA,SAAAwH,GACA,OAAAjrB,OAAAirB,GACAjrB,KAAA0uF,MAAAzjE,EAAAyjE,MACA1uF,KAAA0uF,KAAA,IAAA1uF,KAAAmL,EAAAw1E,IAAA11D,EAAA9f,IAAA,IAAAnL,KAAAoL,EAAAu1E,IAAA11D,EAAA7f,GACA,EAEA6/E,EAAA36E,UAAA+3E,IAAA,SAAAgJ,GACA,GAAArxF,KAAA0uF,IACA,OAAA1uF,KAEA,IAAA4C,EAAA5C,KAAA6lF,MAAA6B,MAAA1nF,KAAAmL,EAAAnL,KAAAoL,EAAA+9E,UACA,GAAAkI,GAAArxF,KAAAynF,YAAA,CACA,IAAAuJ,EAAAhxF,KAAAynF,YACA6J,EAAA,SAAArmE,GACA,OAAAA,EAAAo9D,KACA,EACAzlF,EAAA6kF,YAAA,CACAK,IAAAkJ,EAAAlJ,KAAA,CACAY,IAAAsI,EAAAlJ,IAAAY,IACAN,OAAA4I,EAAAlJ,IAAAM,OAAAjtE,IAAAm2E,IAEA1J,QAAAoJ,EAAApJ,SAAA,CACA1/D,KAAA8oE,EAAApJ,QAAA1/D,KACAkgE,OAAA4I,EAAApJ,QAAAQ,OAAAjtE,IAAAm2E,IAGA,CACA,OAAA1uF,CACA,EAEAqoF,EAAA36E,UAAA44E,IAAA,WACA,OAAAlpF,KAAA0uF,IACA1uF,KAAA6lF,MAAAqC,OAAA,gBAEAloF,KAAA6lF,MAAAqC,OAAAloF,KAAAmL,EAAAnL,KAAAoL,EAAApL,KAAA6lF,MAAAa,IAEA,EAsBA2D,EAAAuE,EAAAnpE,EAAA+hE,WAEAyG,EAAA39E,UAAA43E,OAAA,SAAA/8E,EAAAC,EAAA4vE,GACA,WAAA4T,EAAA5uF,KAAAmL,EAAAC,EAAA4vE,EACA,EAEA4T,EAAAt+E,UAAAg4E,IAAA,WACA,GAAAtoF,KAAA+rF,aACA,OAAA/rF,KAAA6lF,MAAA6B,MAAA,WAEA,IAAA6J,EAAAvxF,KAAAg7E,EAAAoQ,UACAoG,EAAAD,EAAA3G,SACA+F,EAAA3wF,KAAAmL,EAAAggF,OAAAqG,GACAC,EAAAzxF,KAAAoL,EAAA+/E,OAAAqG,GAAArG,OAAAoG,GAEA,OAAAvxF,KAAA6lF,MAAA6B,MAAAiJ,EAAAc,EACA,EAEA7C,EAAAt+E,UAAA+3E,IAAA,WACA,OAAAroF,KAAA6lF,MAAAqC,OAAAloF,KAAAmL,EAAAnL,KAAAoL,EAAA+9E,SAAAnpF,KAAAg7E,EACA,EAEA4T,EAAAt+E,UAAArN,IAAA,SAAAgoB,GAEA,GAAAjrB,KAAA+rF,aACA,OAAA9gE,EAGA,GAAAA,EAAA8gE,aACA,OAAA/rF,KAGA,IAAA0xF,EAAAzmE,EAAA+vD,EAAA4P,SACA+G,EAAA3xF,KAAAg7E,EAAA4P,SACAgH,EAAA5xF,KAAAmL,EAAAggF,OAAAuG,GACAG,EAAA5mE,EAAA9f,EAAAggF,OAAAwG,GACArqF,EAAAtH,KAAAoL,EAAA+/E,OAAAuG,EAAAvG,OAAAlgE,EAAA+vD,IACA8W,EAAA7mE,EAAA7f,EAAA+/E,OAAAwG,EAAAxG,OAAAnrF,KAAAg7E,IAEA54E,EAAAwvF,EAAAlG,OAAAmG,GACA1gD,EAAA7pC,EAAAokF,OAAAoG,GACA,OAAA1vF,EAAAilF,KAAA,GACA,WAAAl2C,EAAAk2C,KAAA,GACArnF,KAAA6lF,MAAAqC,OAAA,gBAEAloF,KAAAoqF,MAGA,IAAA2H,EAAA3vF,EAAAwoF,SACAoH,EAAAD,EAAA5G,OAAA/oF,GACAM,EAAAkvF,EAAAzG,OAAA4G,GAEAzF,EAAAn7C,EAAAy5C,SAAAwB,QAAA4F,GAAA3F,QAAA3pF,GAAA2pF,QAAA3pF,GACA6pF,EAAAp7C,EAAAg6C,OAAAzoF,EAAA2pF,QAAAC,IAAAD,QAAA/kF,EAAA6jF,OAAA6G,IACAvF,EAAAzsF,KAAAg7E,EAAAmQ,OAAAlgE,EAAA+vD,GAAAmQ,OAAA/oF,GAEA,OAAApC,KAAA6lF,MAAAqC,OAAAoE,EAAAC,EAAAE,EACA,EAEAmC,EAAAt+E,UAAA63E,SAAA,SAAAl9D,GAEA,GAAAjrB,KAAA+rF,aACA,OAAA9gE,EAAAi+D,MAGA,GAAAj+D,EAAA8gE,aACA,OAAA/rF,KAGA,IAAA2xF,EAAA3xF,KAAAg7E,EAAA4P,SACAgH,EAAA5xF,KAAAmL,EACA0mF,EAAA5mE,EAAA9f,EAAAggF,OAAAwG,GACArqF,EAAAtH,KAAAoL,EACA0mF,EAAA7mE,EAAA7f,EAAA+/E,OAAAwG,GAAAxG,OAAAnrF,KAAAg7E,GAEA54E,EAAAwvF,EAAAlG,OAAAmG,GACA1gD,EAAA7pC,EAAAokF,OAAAoG,GACA,OAAA1vF,EAAAilF,KAAA,GACA,WAAAl2C,EAAAk2C,KAAA,GACArnF,KAAA6lF,MAAAqC,OAAA,gBAEAloF,KAAAoqF,MAGA,IAAA2H,EAAA3vF,EAAAwoF,SACAoH,EAAAD,EAAA5G,OAAA/oF,GACAM,EAAAkvF,EAAAzG,OAAA4G,GAEAzF,EAAAn7C,EAAAy5C,SAAAwB,QAAA4F,GAAA3F,QAAA3pF,GAAA2pF,QAAA3pF,GACA6pF,EAAAp7C,EAAAg6C,OAAAzoF,EAAA2pF,QAAAC,IAAAD,QAAA/kF,EAAA6jF,OAAA6G,IACAvF,EAAAzsF,KAAAg7E,EAAAmQ,OAAA/oF,GAEA,OAAApC,KAAA6lF,MAAAqC,OAAAoE,EAAAC,EAAAE,EACA,EAEAmC,EAAAt+E,UAAAq4E,KAAA,SAAAhtB,GACA,OAAAA,EACA,OAAA37D,KACA,GAAAA,KAAA+rF,aACA,OAAA/rF,KACA,IAAA27D,EACA,OAAA37D,KAAAoqF,MAEA,IAAAzoF,EACA,GAAA3B,KAAA6lF,MAAAsI,OAAAnuF,KAAA6lF,MAAAuI,OAAA,CACA,IAAAj9C,EAAAnxC,KACA,IAAA2B,EAAA,EAAAA,EAAAg6D,EAAAh6D,IACAwvC,IAAAi5C,MACA,OAAAj5C,CACA,CAIA,IAAAlrC,EAAAjG,KAAA6lF,MAAA5/E,EACAioF,EAAAluF,KAAA6lF,MAAAqI,KAEA+D,EAAAjyF,KAAAmL,EACA+mF,EAAAlyF,KAAAoL,EACA+mF,EAAAnyF,KAAAg7E,EACAoX,EAAAD,EAAAvH,kBAGAyH,EAAAH,EAAApH,OAAAoH,GACA,IAAAvwF,EAAA,EAAAA,EAAAg6D,EAAAh6D,IAAA,CACA,IAAA2wF,EAAAL,EAAArH,SACA2H,EAAAF,EAAAzH,SACA4H,EAAAD,EAAA3H,SACAzkF,EAAAmsF,EAAAxH,OAAAwH,GAAAlG,QAAAkG,GAAAlG,QAAAnmF,EAAAklF,OAAAiH,IAEA10D,EAAAu0D,EAAA9G,OAAAoH,GACAjG,EAAAnmF,EAAAykF,SAAAyB,QAAA3uD,EAAAotD,OAAAptD,IACAE,EAAAF,EAAA2uD,QAAAC,GACAmG,EAAAtsF,EAAAglF,OAAAvtD,GACA60D,IAAArG,QAAAqG,GAAApG,QAAAmG,GACA,IAAA/F,EAAA4F,EAAAlH,OAAAgH,GACAxwF,EAAA,EAAAg6D,IACAy2B,IAAAjH,OAAAqH,IAEAP,EAAA3F,EACA6F,EAAA1F,EACA4F,EAAAI,CACA,CAEA,OAAAzyF,KAAA6lF,MAAAqC,OAAA+J,EAAAI,EAAAlH,OAAA+C,GAAAiE,EACA,EAEAvD,EAAAt+E,UAAA85E,IAAA,WACA,OAAApqF,KAAA+rF,aACA/rF,KAEAA,KAAA6lF,MAAAsI,MACAnuF,KAAA0yF,WACA1yF,KAAA6lF,MAAAuI,OACApuF,KAAA2yF,YAEA3yF,KAAA4yF,MACA,EAEAhE,EAAAt+E,UAAAoiF,SAAA,WACA,IAAApG,EACAC,EACAE,EAEA,GAAAzsF,KAAAkrF,KAAA,CAMA,IAAA2H,EAAA7yF,KAAAmL,EAAAy/E,SAEAkI,EAAA9yF,KAAAoL,EAAAw/E,SAEAmI,EAAAD,EAAAlI,SAEA5mF,EAAAhE,KAAAmL,EAAA2/E,OAAAgI,GAAAlI,SAAAyB,QAAAwG,GAAAxG,QAAA0G,GACA/uF,IAAAooF,QAAApoF,GAEA,IAAAof,EAAAyvE,EAAA/H,OAAA+H,GAAAzG,QAAAyG,GAEAvnF,EAAA8X,EAAAwnE,SAAAyB,QAAAroF,GAAAqoF,QAAAroF,GAGAgvF,EAAAD,EAAA3G,QAAA2G,GAEAC,GADAA,IAAA5G,QAAA4G,IACA5G,QAAA4G,GAGA1G,EAAAhhF,EAEAihF,EAAAnpE,EAAA+nE,OAAAnnF,EAAAqoF,QAAA/gF,IAAA+gF,QAAA2G,GAEAvG,EAAAzsF,KAAAoL,EAAA0/E,OAAA9qF,KAAAoL,EACA,MAMA,IAAAnF,EAAAjG,KAAAmL,EAAAy/E,SAEA1kF,EAAAlG,KAAAoL,EAAAw/E,SAEAzkF,EAAAD,EAAA0kF,SAEA/2E,EAAA7T,KAAAmL,EAAA2/E,OAAA5kF,GAAA0kF,SAAAyB,QAAApmF,GAAAomF,QAAAlmF,GACA0N,IAAAu4E,QAAAv4E,GAEA,IAAAsU,EAAAliB,EAAA6kF,OAAA7kF,GAAAmmF,QAAAnmF,GAEAyiB,EAAAP,EAAAyiE,SAGAqI,EAAA9sF,EAAAimF,QAAAjmF,GAEA8sF,GADAA,IAAA7G,QAAA6G,IACA7G,QAAA6G,GAGA3G,EAAA5jE,EAAA2jE,QAAAx4E,GAAAw4E,QAAAx4E,GAEA04E,EAAApkE,EAAAgjE,OAAAt3E,EAAAw4E,QAAAC,IAAAD,QAAA4G,GAGAxG,GADAA,EAAAzsF,KAAAoL,EAAA+/E,OAAAnrF,KAAAg7E,IACAoR,QAAAK,EACA,CAEA,OAAAzsF,KAAA6lF,MAAAqC,OAAAoE,EAAAC,EAAAE,EACA,EAEAmC,EAAAt+E,UAAAqiF,UAAA,WACA,IAAArG,EACAC,EACAE,EAEA,GAAAzsF,KAAAkrF,KAAA,CAMA,IAAA2H,EAAA7yF,KAAAmL,EAAAy/E,SAEAkI,EAAA9yF,KAAAoL,EAAAw/E,SAEAmI,EAAAD,EAAAlI,SAEA5mF,EAAAhE,KAAAmL,EAAA2/E,OAAAgI,GAAAlI,SAAAyB,QAAAwG,GAAAxG,QAAA0G,GACA/uF,IAAAooF,QAAApoF,GAEA,IAAAof,EAAAyvE,EAAA/H,OAAA+H,GAAAzG,QAAAyG,GAAAzG,QAAApsF,KAAA6lF,MAAA5/E,GAEAqF,EAAA8X,EAAAwnE,SAAAyB,QAAAroF,GAAAqoF,QAAAroF,GAEAsoF,EAAAhhF,EAEA,IAAA0nF,EAAAD,EAAA3G,QAAA2G,GAEAC,GADAA,IAAA5G,QAAA4G,IACA5G,QAAA4G,GACAzG,EAAAnpE,EAAA+nE,OAAAnnF,EAAAqoF,QAAA/gF,IAAA+gF,QAAA2G,GAEAvG,EAAAzsF,KAAAoL,EAAA0/E,OAAA9qF,KAAAoL,EACA,MAKA,IAAA8nF,EAAAlzF,KAAAg7E,EAAA4P,SAEAuI,EAAAnzF,KAAAoL,EAAAw/E,SAEAX,EAAAjqF,KAAAmL,EAAAggF,OAAAgI,GAEAC,EAAApzF,KAAAmL,EAAAugF,OAAAwH,GAAA/H,OAAAnrF,KAAAmL,EAAA2/E,OAAAoI,IACAE,IAAAtI,OAAAsI,GAAAhH,QAAAgH,GAEA,IAAAC,EAAApJ,EAAAmC,QAAAnC,GAEAqJ,GADAD,IAAAjH,QAAAiH,IACAvI,OAAAuI,GACA/G,EAAA8G,EAAAxI,SAAAyB,QAAAiH,GAEA7G,EAAAzsF,KAAAoL,EAAA0/E,OAAA9qF,KAAAg7E,GAAA4P,SAAAyB,QAAA8G,GAAA9G,QAAA6G,GAEA,IAAAK,EAAAJ,EAAAvI,SAGA2I,GADAA,GADAA,IAAAnH,QAAAmH,IACAnH,QAAAmH,IACAnH,QAAAmH,GACAhH,EAAA6G,EAAAjI,OAAAkI,EAAAhH,QAAAC,IAAAD,QAAAkH,EACA,CAEA,OAAAvzF,KAAA6lF,MAAAqC,OAAAoE,EAAAC,EAAAE,EACA,EAEAmC,EAAAt+E,UAAAsiF,KAAA,WACA,IAAA3sF,EAAAjG,KAAA6lF,MAAA5/E,EAGAgsF,EAAAjyF,KAAAmL,EACA+mF,EAAAlyF,KAAAoL,EACA+mF,EAAAnyF,KAAAg7E,EACAoX,EAAAD,EAAAvH,kBAEA0H,EAAAL,EAAArH,SACA4I,EAAAtB,EAAAtH,SAEAzkF,EAAAmsF,EAAAxH,OAAAwH,GAAAlG,QAAAkG,GAAAlG,QAAAnmF,EAAAklF,OAAAiH,IAEAqB,EAAAxB,EAAAnH,OAAAmH,GAEAv0D,GADA+1D,IAAArH,QAAAqH,IACAtI,OAAAqI,GACAlH,EAAAnmF,EAAAykF,SAAAyB,QAAA3uD,EAAAotD,OAAAptD,IACAE,EAAAF,EAAA2uD,QAAAC,GAEAoH,EAAAF,EAAA5I,SAGA8I,GADAA,GADAA,IAAAtH,QAAAsH,IACAtH,QAAAsH,IACAtH,QAAAsH,GACA,IAAAnH,EAAApmF,EAAAglF,OAAAvtD,GAAAyuD,QAAAqH,GACAjH,EAAAyF,EAAApH,OAAAoH,GAAA/G,OAAAgH,GAEA,OAAAnyF,KAAA6lF,MAAAqC,OAAAoE,EAAAC,EAAAE,EACA,EAEAmC,EAAAt+E,UAAAqjF,KAAA,WACA,IAAA3zF,KAAA6lF,MAAAsI,MACA,OAAAnuF,KAAAoqF,MAAAnnF,IAAAjD,MAMA,IAAA6yF,EAAA7yF,KAAAmL,EAAAy/E,SAEAkI,EAAA9yF,KAAAoL,EAAAw/E,SAEAgJ,EAAA5zF,KAAAg7E,EAAA4P,SAEAmI,EAAAD,EAAAlI,SAEAxnE,EAAAyvE,EAAA/H,OAAA+H,GAAAzG,QAAAyG,GAEAgB,EAAAzwE,EAAAwnE,SAEAziE,EAAAnoB,KAAAmL,EAAA2/E,OAAAgI,GAAAlI,SAAAyB,QAAAwG,GAAAxG,QAAA0G,GAKAe,GAFA3rE,GADAA,GADAA,IAAAikE,QAAAjkE,IACA2iE,OAAA3iE,GAAAikE,QAAAjkE,IACAkkE,QAAAwH,IAEAjJ,SAEAt/E,EAAAynF,EAAA3G,QAAA2G,GAGAznF,GADAA,GADAA,IAAA8gF,QAAA9gF,IACA8gF,QAAA9gF,IACA8gF,QAAA9gF,GAEA,IAAAykF,EAAA3sE,EAAAgpE,QAAAjkE,GAAAyiE,SAAAyB,QAAAwH,GAAAxH,QAAAyH,GAAAzH,QAAA/gF,GAEAyoF,EAAAjB,EAAA3H,OAAA4E,GAEAgE,GADAA,IAAA3H,QAAA2H,IACA3H,QAAA2H,GACA,IAAAzH,EAAAtsF,KAAAmL,EAAAggF,OAAA2I,GAAAzH,QAAA0H,GAEAzH,GADAA,IAAAF,QAAAE,IACAF,QAAAE,GAEA,IAAAC,EAAAvsF,KAAAoL,EAAA+/E,OAAA4E,EAAA5E,OAAA7/E,EAAA+gF,QAAA0D,IAAA1D,QAAAlkE,EAAAgjE,OAAA2I,KAGAvH,GADAA,GADAA,IAAAH,QAAAG,IACAH,QAAAG,IACAH,QAAAG,GAEA,IAAAE,EAAAzsF,KAAAg7E,EAAA8P,OAAA3iE,GAAAyiE,SAAAyB,QAAAuH,GAAAvH,QAAAyH,GAEA,OAAA9zF,KAAA6lF,MAAAqC,OAAAoE,EAAAC,EAAAE,EACA,EAEAmC,EAAAt+E,UAAA4xD,IAAA,SAAA99C,EAAA4vE,GAGA,OAFA5vE,EAAA,IAAAqtC,EAAArtC,EAAA4vE,GAEAh0F,KAAA6lF,MAAA0C,SAAAvoF,KAAAokB,EACA,EAEAwqE,EAAAt+E,UAAAmT,GAAA,SAAAwH,GACA,cAAAA,EAAAnjB,KACA,OAAA9H,KAAAyjB,GAAAwH,EAAAi+D,OAEA,GAAAlpF,OAAAirB,EACA,SAGA,IAAA0mE,EAAA3xF,KAAAg7E,EAAA4P,SACA8G,EAAAzmE,EAAA+vD,EAAA4P,SACA,OAAA5qF,KAAAmL,EAAAggF,OAAAuG,GAAArF,QAAAphE,EAAA9f,EAAAggF,OAAAwG,IAAAtK,KAAA,GACA,SAGA,IAAA4M,EAAAtC,EAAAxG,OAAAnrF,KAAAg7E,GACAkZ,EAAAxC,EAAAvG,OAAAlgE,EAAA+vD,GACA,WAAAh7E,KAAAoL,EAAA+/E,OAAA+I,GAAA7H,QAAAphE,EAAA7f,EAAA+/E,OAAA8I,IAAA5M,KAAA,EACA,EAEAuH,EAAAt+E,UAAA48E,OAAA,SAAA/hF,GACA,IAAAswE,EAAAz7E,KAAAg7E,EAAA4P,SACAuC,EAAAhiF,EAAAs7E,MAAAzmF,KAAA6lF,MAAAQ,KAAA8E,OAAA1P,GACA,OAAAz7E,KAAAmL,EAAAw1E,IAAAwM,GACA,SAIA,IAFA,IAAAjS,EAAA/vE,EAAAvC,QACA0C,EAAAtL,KAAA6lF,MAAAyB,KAAA6D,OAAA1P,KACA,CAEA,GADAP,EAAAkS,KAAAptF,KAAA6lF,MAAAviF,GACA43E,EAAAyF,IAAA3gF,KAAA6lF,MAAA56D,IAAA,EACA,SAGA,GADAkiE,EAAAf,QAAA9gF,GACA,IAAAtL,KAAAmL,EAAAw1E,IAAAwM,GACA,QACA,CACA,EAEAyB,EAAAt+E,UAAA47E,QAAA,WACA,OAAAlsF,KAAA+rF,aACA,uBACA,iBAAA/rF,KAAAmL,EAAAuD,SAAA,MACA,OAAA1O,KAAAoL,EAAAsD,SAAA,MACA,OAAA1O,KAAAg7E,EAAAtsE,SAAA,SACA,EAEAkgF,EAAAt+E,UAAAy7E,WAAA,WAEA,WAAA/rF,KAAAg7E,EAAAqM,KAAA,EACA,C,kVCv6BA,IAsKA2J,EAtKAlL,EAAA3mF,EAEAmT,EAAA/S,EAAA,WACAsmF,EAAAtmF,EAAA,WAGA2mF,EAFA3mF,EAAA,WAEA2mF,OAEA,SAAAiO,EAAAv3E,GACA,UAAAA,EAAA9U,KACA9H,KAAA6lF,MAAA,IAAAA,EAAAwH,MAAAzwE,GACA,YAAAA,EAAA9U,KACA9H,KAAA6lF,MAAA,IAAAA,EAAAyH,QAAA1wE,GAEA5c,KAAA6lF,MAAA,IAAAA,EAAAU,KAAA3pE,GACA5c,KAAA2oB,EAAA3oB,KAAA6lF,MAAAl9D,EACA3oB,KAAAsD,EAAAtD,KAAA6lF,MAAAviF,EACAtD,KAAAsS,KAAAsK,EAAAtK,KAEA4zE,EAAAlmF,KAAA2oB,EAAAkrC,WAAA,iBACAqyB,EAAAlmF,KAAA2oB,EAAAu5C,IAAAliE,KAAAsD,GAAAyoF,aAAA,0BACA,CAGA,SAAAqI,EAAA95E,EAAAsC,GACA3d,OAAAC,eAAA4mF,EAAAxrE,EAAA,CACAzD,cAAA,EACA7E,YAAA,EACAxP,IAAA,WACA,IAAAqjF,EAAA,IAAAsO,EAAAv3E,GAMA,OALA3d,OAAAC,eAAA4mF,EAAAxrE,EAAA,CACAzD,cAAA,EACA7E,YAAA,EACA5S,MAAAymF,IAEAA,CACA,GAEA,CAhBAC,EAAAqO,cAkBAC,EAAA,QACAtsF,KAAA,QACAw+E,MAAA,OACAr7D,EAAA,wDACAhlB,EAAA,wDACAC,EAAA,wDACA5C,EAAA,wDACAgP,OAAAxM,OACA+gF,MAAA,EACAl+D,EAAA,CACA,wDACA,2DAIAyrE,EAAA,QACAtsF,KAAA,QACAw+E,MAAA,OACAr7D,EAAA,iEACAhlB,EAAA,iEACAC,EAAA,iEACA5C,EAAA,iEACAgP,OAAAxM,OACA+gF,MAAA,EACAl+D,EAAA,CACA,iEACA,oEAIAyrE,EAAA,QACAtsF,KAAA,QACAw+E,MAAA,KACAr7D,EAAA,0EACAhlB,EAAA,0EACAC,EAAA,0EACA5C,EAAA,0EACAgP,OAAAxM,OACA+gF,MAAA,EACAl+D,EAAA,CACA,0EACA,6EAIAyrE,EAAA,QACAtsF,KAAA,QACAw+E,MAAA,KACAr7D,EAAA,8GAEAhlB,EAAA,8GAEAC,EAAA,8GAEA5C,EAAA,8GAEAgP,OAAA+hF,OACAxN,MAAA,EACAl+D,EAAA,CACA,8GAEA,iHAKAyrE,EAAA,QACAtsF,KAAA,QACAw+E,MAAA,KACAr7D,EAAA,2JAGAhlB,EAAA,2JAGAC,EAAA,2JAGA5C,EAAA,2JAGAgP,OAAAgiF,OACAzN,MAAA,EACAl+D,EAAA,CACA,2JAGA,8JAMAyrE,EAAA,cACAtsF,KAAA,OACAw+E,MAAA,SACAr7D,EAAA,sEACAhlB,EAAA,QACAC,EAAA,IACA5C,EAAA,sEACAgP,OAAAxM,OACA+gF,MAAA,EACAl+D,EAAA,CACA,OAIAyrE,EAAA,WACAtsF,KAAA,UACAw+E,MAAA,SACAr7D,EAAA,sEACAhlB,EAAA,KACAE,EAAA,IAEA0N,EAAA,sEACAvQ,EAAA,sEACAgP,OAAAxM,OACA+gF,MAAA,EACAl+D,EAAA,CACA,mEAGA,sEAKA,IACAqoE,EAAAzxF,EAAA,0BACA,OAAA4oB,GACA6oE,EAAArrF,SACA,CAEAyuF,EAAA,aACAtsF,KAAA,QACAw+E,MAAA,OACAr7D,EAAA,0EACAhlB,EAAA,IACAC,EAAA,IACA5C,EAAA,0EACAlB,EAAA,IACAkQ,OAAAxM,OAGAmkF,KAAA,mEACA6E,OAAA,mEACAI,MAAA,CACA,CACAjpF,EAAA,mCACAC,EAAA,qCAEA,CACAD,EAAA,oCACAC,EAAA,qCAIA2gF,MAAA,EACAl+D,EAAA,CACA,mEACA,mEACAqoE,I,6WCzMA,IAAAv/B,EAAAlyD,EAAA,SACAg1F,EAAAh1F,EAAA,aACAwU,EAAAxU,EAAA,YACAumF,EAAAvmF,EAAA,aACAmgF,EAAAngF,EAAA,WACA2mF,EAAAnyE,EAAAmyE,OAEAsO,EAAAj1F,EAAA,SACAk1F,EAAAl1F,EAAA,eAEA,SAAA4rD,EAAAvuC,GACA,KAAA5c,gBAAAmrD,GACA,WAAAA,EAAAvuC,GAGA,iBAAAA,IACAspE,EAAAjnF,OAAAqR,UAAA4a,eAAA3a,KAAAu1E,EAAAlpE,GACA,iBAAAA,GAEAA,EAAAkpE,EAAAlpE,IAIAA,aAAAkpE,EAAAqO,cACAv3E,EAAA,CAAAipE,MAAAjpE,IAEA5c,KAAA6lF,MAAAjpE,EAAAipE,YACA7lF,KAAAsD,EAAAtD,KAAA6lF,MAAAviF,EACAtD,KAAA00F,GAAA10F,KAAAsD,EAAAwsF,MAAA,GACA9vF,KAAA2oB,EAAA3oB,KAAA6lF,MAAAl9D,EAGA3oB,KAAA2oB,EAAA/L,EAAAipE,MAAAl9D,EACA3oB,KAAA2oB,EAAAohE,WAAAntE,EAAAipE,MAAAviF,EAAA6jF,YAAA,GAGAnnF,KAAAsS,KAAAsK,EAAAtK,MAAAsK,EAAAipE,MAAAvzE,IACA,CACAG,EAAAtT,QAAAgsD,EAEAA,EAAA76C,UAAAqkF,QAAA,SAAA/3E,GACA,WAAA43E,EAAAx0F,KAAA4c,EACA,EAEAuuC,EAAA76C,UAAAw8C,eAAA,SAAAD,EAAAjmC,GACA,OAAA4tE,EAAAI,YAAA50F,KAAA6sD,EAAAjmC,EACA,EAEAukC,EAAA76C,UAAAy8C,cAAA,SAAAtb,EAAA7qB,GACA,OAAA4tE,EAAAK,WAAA70F,KAAAyxC,EAAA7qB,EACA,EAEAukC,EAAA76C,UAAAwkF,WAAA,SAAAl4E,GACAA,IACAA,EAAA,IAcA,IAXA,IAAAm4E,EAAA,IAAAR,EAAA,CACAjiF,KAAAtS,KAAAsS,KACA0iF,KAAAp4E,EAAAo4E,KACAC,QAAAr4E,EAAAq4E,SAAA,OACAC,QAAAt4E,EAAAs4E,SAAAxV,EAAA1/E,KAAAsS,KAAA6iF,cACAC,WAAAx4E,EAAAs4E,SAAAt4E,EAAAw4E,YAAA,OACAn/C,MAAAj2C,KAAAsD,EAAAw8B,YAGA7yB,EAAAjN,KAAAsD,EAAA+K,aACAgnF,EAAAr1F,KAAAsD,EAAA6+D,IAAA,IAAA1Q,EAAA,MACA,CACA,IAAA5E,EAAA,IAAA4E,EAAAsjC,EAAAO,SAAAroF,IACA,KAAA4/C,EAAA8zB,IAAA0U,GAAA,GAIA,OADAxoC,EAAA0oC,MAAA,GACAv1F,KAAA8sD,eAAAD,EACA,CACA,EAEA1B,EAAA76C,UAAAklF,aAAA,SAAAzkF,EAAA0kF,GACA,IAAAvC,EAAA,EAAAniF,EAAA1C,aAAArO,KAAAsD,EAAA6jF,YAGA,OAFA+L,EAAA,IACAniF,IAAA++E,MAAAoD,KACAuC,GAAA1kF,EAAA4vE,IAAA3gF,KAAAsD,IAAA,EACAyN,EAAAoxD,IAAAniE,KAAAsD,GAEAyN,CACA,EAEAo6C,EAAA76C,UAAA0d,KAAA,SAAAjd,EAAAkZ,EAAArD,EAAAhK,GACA,iBAAAgK,IACAhK,EAAAgK,EACAA,EAAA,MAEAhK,IACAA,EAAA,IAEAqN,EAAAjqB,KAAA8sD,eAAA7iC,EAAArD,GACA7V,EAAA/Q,KAAAw1F,aAAA,IAAA/jC,EAAA1gD,EAAA,KAqBA,IAlBA,IAAA9D,EAAAjN,KAAAsD,EAAA+K,aACAqnF,EAAAzrE,EAAA0rE,aAAA71D,QAAA,KAAA7yB,GAGAgpC,EAAAllC,EAAA+uB,QAAA,KAAA7yB,GAGA8nF,EAAA,IAAAR,EAAA,CACAjiF,KAAAtS,KAAAsS,KACA4iF,QAAAQ,EACAz/C,QACA++C,KAAAp4E,EAAAo4E,KACAC,QAAAr4E,EAAAq4E,SAAA,SAIAW,EAAA51F,KAAAsD,EAAA6+D,IAAA,IAAA1Q,EAAA,IAEAokC,EAAA,GAAAA,IAAA,CACA,IAAAzxE,EAAAxH,EAAAwH,EACAxH,EAAAwH,EAAAyxE,GACA,IAAApkC,EAAAsjC,EAAAO,SAAAt1F,KAAAsD,EAAA+K,eAEA,MADA+V,EAAApkB,KAAAw1F,aAAApxE,GAAA,IACAijE,KAAA,OAAAjjE,EAAAu8D,IAAAiV,IAAA,IAGA,IAAAE,EAAA91F,KAAA2oB,EAAAu5C,IAAA99C,GACA,IAAA0xE,EAAA/J,aAAA,CAGA,IAAAgK,EAAAD,EAAAlM,OACAz4C,EAAA4kD,EAAArL,KAAA1qF,KAAAsD,GACA,OAAA6tC,EAAAk2C,KAAA,IAGA,IAAArjF,EAAAogB,EAAA4xE,KAAAh2F,KAAAsD,GAAA4+D,IAAA/wB,EAAA+wB,IAAAj4C,EAAA0rE,cAAAvI,KAAAr8E,IAEA,QADA/M,IAAA0mF,KAAA1qF,KAAAsD,IACA+jF,KAAA,IAGA,IAAA4O,GAAAH,EAAAjM,OAAAxO,QAAA,MACA,IAAA0a,EAAApV,IAAAxvC,GAAA,KAQA,OALAv0B,EAAAs5E,WAAAlyF,EAAA28E,IAAA3gF,KAAA00F,IAAA,IACA1wF,EAAAhE,KAAAsD,EAAA6+D,IAAAn+D,GACAiyF,GAAA,GAGA,IAAAxB,EAAA,CAAAtjD,IAAAntC,IAAAiyF,iBAXA,CALA,CALA,CAJA,CA0BA,CACA,EAEA9qC,EAAA76C,UAAA6lF,OAAA,SAAAplF,EAAAyhE,EAAAvoD,EAAArD,GACA7V,EAAA/Q,KAAAw1F,aAAA,IAAA/jC,EAAA1gD,EAAA,KACAkZ,EAAAjqB,KAAA+sD,cAAA9iC,EAAArD,GAIA,IAAAuqB,GAHAqhC,EAAA,IAAAiiB,EAAAjiB,EAAA,QAGArhC,EACAntC,EAAAwuE,EAAAxuE,EACA,GAAAmtC,EAAAk2C,KAAA,MAAAl2C,EAAAwvC,IAAA3gF,KAAAsD,IAAA,EACA,SACA,GAAAU,EAAAqjF,KAAA,MAAArjF,EAAA28E,IAAA3gF,KAAAsD,IAAA,EACA,SAGA,IAGA2nB,EAHAmrE,EAAApyF,EAAAgyF,KAAAh2F,KAAAsD,GACAsuF,EAAAwE,EAAAl0B,IAAAnxD,GAAA25E,KAAA1qF,KAAAsD,GACAuuF,EAAAuE,EAAAl0B,IAAA/wB,GAAAu5C,KAAA1qF,KAAAsD,GAGA,OAAAtD,KAAA6lF,MAAA0B,gBAWAt8D,EAAAjrB,KAAA2oB,EAAAokE,QAAA6E,EAAA3nE,EAAA4V,YAAAgyD,IACA9F,cAMA9gE,EAAAiiE,OAAA/7C,KAjBAlmB,EAAAjrB,KAAA2oB,EAAAkkE,OAAA+E,EAAA3nE,EAAA4V,YAAAgyD,IACA9F,cAGA,IAAA9gE,EAAA2+D,OAAAc,KAAA1qF,KAAAsD,GAAAq9E,IAAAxvC,EAcA,EAEAga,EAAA76C,UAAA+lF,cAAA,SAAAtlF,EAAAyhE,EAAAjnE,EAAAqb,GACAs/D,GAAA,EAAA36E,OAAA,4CACAinE,EAAA,IAAAiiB,EAAAjiB,EAAA5rD,GAEA,IAAAtjB,EAAAtD,KAAAsD,EACA6kB,EAAA,IAAAspC,EAAA1gD,GACAogC,EAAAqhC,EAAArhC,EACAntC,EAAAwuE,EAAAxuE,EAGAsyF,EAAA,EAAA/qF,EACAgrF,EAAAhrF,GAAA,EACA,GAAA4lC,EAAAwvC,IAAA3gF,KAAA6lF,MAAA56D,EAAAy/D,KAAA1qF,KAAA6lF,MAAAviF,KAAA,GAAAizF,EACA,UAAA5tF,MAAA,wCAIAwoC,EADAolD,EACAv2F,KAAA6lF,MAAA2D,WAAAr4C,EAAAluC,IAAAjD,KAAA6lF,MAAAviF,GAAAgzF,GAEAt2F,KAAA6lF,MAAA2D,WAAAr4C,EAAAmlD,GAEA,IAAAE,EAAAhkB,EAAArhC,EAAA6kD,KAAA1yF,GACAgE,EAAAhE,EAAA6+D,IAAAh6C,GAAA+5C,IAAAs0B,GAAA9L,KAAApnF,GACAwuF,EAAA9tF,EAAAk+D,IAAAs0B,GAAA9L,KAAApnF,GAIA,OAAAtD,KAAA2oB,EAAAkkE,OAAAvlF,EAAA6pC,EAAA2gD,EACA,EAEA3mC,EAAA76C,UAAAmmF,oBAAA,SAAAtuE,EAAAqqD,EAAAkkB,EAAA9vE,GAEA,WADA4rD,EAAA,IAAAiiB,EAAAjiB,EAAA5rD,IACAqvE,cACA,OAAAzjB,EAAAyjB,cAEA,QAAAt0F,EAAA,EAAAA,EAAA,EAAAA,IAAA,CACA,IAAAg1F,EACA,IACAA,EAAA32F,KAAAq2F,cAAAluE,EAAAqqD,EAAA7wE,EACA,OAAAwmB,GACA,QACA,CAEA,GAAAwuE,EAAAlzE,GAAAizE,GACA,OAAA/0F,CACA,CACA,UAAAgH,MAAA,uCACA,C,gSChPA,IAAA8oD,EAAAlyD,EAAA,SAEA2mF,EADA3mF,EAAA,YACA2mF,OAEA,SAAAsO,EAAA7pC,EAAA/tC,GACA5c,KAAA2qD,KACA3qD,KAAA6sD,KAAA,KACA7sD,KAAAyxC,IAAA,KAGA70B,EAAAiwC,MACA7sD,KAAA42F,eAAAh6E,EAAAiwC,KAAAjwC,EAAAi6E,SACAj6E,EAAA60B,KACAzxC,KAAA82F,cAAAl6E,EAAA60B,IAAA70B,EAAAm6E,OACA,CACAtkF,EAAAtT,QAAAq1F,EAEAA,EAAAK,WAAA,SAAAlqC,EAAAlZ,EAAA7qB,GACA,OAAA6qB,aAAA+iD,EACA/iD,EAEA,IAAA+iD,EAAA7pC,EAAA,CACAlZ,MACAslD,OAAAnwE,GAEA,EAEA4tE,EAAAI,YAAA,SAAAjqC,EAAAkC,EAAAjmC,GACA,OAAAimC,aAAA2nC,EACA3nC,EAEA,IAAA2nC,EAAA7pC,EAAA,CACAkC,OACAgqC,QAAAjwE,GAEA,EAEA4tE,EAAAlkF,UAAAujD,SAAA,WACA,IAAApiB,EAAAzxC,KAAA6/B,YAEA,OAAA4R,EAAAs6C,aACA,CAAA77E,QAAA,EAAA8mF,OAAA,sBACAvlD,EAAAoiB,WAEApiB,EAAAywB,IAAAliE,KAAA2qD,GAAAk7B,MAAAviF,GAAAyoF,aAGA,CAAA77E,QAAA,EAAA8mF,OAAA,MAFA,CAAA9mF,QAAA,EAAA8mF,OAAA,uBAFA,CAAA9mF,QAAA,EAAA8mF,OAAA,4BAKA,EAEAxC,EAAAlkF,UAAAuvB,UAAA,SAAA8pD,EAAA/iE,GAUA,MARA,iBAAA+iE,IACA/iE,EAAA+iE,EACAA,EAAA,MAGA3pF,KAAAyxC,MACAzxC,KAAAyxC,IAAAzxC,KAAA2qD,GAAAhiC,EAAAu5C,IAAAliE,KAAA6sD,OAEAjmC,EAGA5mB,KAAAyxC,IAAAniC,OAAAsX,EAAA+iE,GAFA3pF,KAAAyxC,GAGA,EAEA+iD,EAAAlkF,UAAAqlF,WAAA,SAAA/uE,GACA,cAAAA,EACA5mB,KAAA6sD,KAAAn+C,SAAA,MAEA1O,KAAA6sD,IACA,EAEA2nC,EAAAlkF,UAAAsmF,eAAA,SAAA3sE,EAAArD,GACA5mB,KAAA6sD,KAAA,IAAA4E,EAAAxnC,EAAArD,GAAA,IAIA5mB,KAAA6sD,KAAA7sD,KAAA6sD,KAAA69B,KAAA1qF,KAAA2qD,GAAAk7B,MAAAviF,EACA,EAEAkxF,EAAAlkF,UAAAwmF,cAAA,SAAA7sE,EAAArD,GACA,GAAAqD,EAAA9e,GAAA8e,EAAA7e,EAWA,MAPA,SAAApL,KAAA2qD,GAAAk7B,MAAA/9E,KACAo+E,EAAAj8D,EAAA9e,EAAA,qBACA,UAAAnL,KAAA2qD,GAAAk7B,MAAA/9E,MACA,YAAA9H,KAAA2qD,GAAAk7B,MAAA/9E,MACAo+E,EAAAj8D,EAAA9e,GAAA8e,EAAA7e,EAAA,qCAEApL,KAAAyxC,IAAAzxC,KAAA2qD,GAAAk7B,MAAA6B,MAAAz9D,EAAA9e,EAAA8e,EAAA7e,IAGApL,KAAAyxC,IAAAzxC,KAAA2qD,GAAAk7B,MAAA0D,YAAAt/D,EAAArD,EACA,EAGA4tE,EAAAlkF,UAAAsvB,OAAA,SAAA6R,GAIA,OAHAA,EAAAoiB,YACAqyB,EAAAz0C,EAAAoiB,WAAA,8BAEApiB,EAAAywB,IAAAliE,KAAA6sD,MAAA+8B,MACA,EAGA4K,EAAAlkF,UAAA0d,KAAA,SAAAjd,EAAA6V,EAAAhK,GACA,OAAA5c,KAAA2qD,GAAA38B,KAAAjd,EAAA/Q,KAAA4mB,EAAAhK,EACA,EAEA43E,EAAAlkF,UAAA6lF,OAAA,SAAAplF,EAAAyhE,GACA,OAAAxyE,KAAA2qD,GAAAwrC,OAAAplF,EAAAyhE,EAAAxyE,KACA,EAEAw0F,EAAAlkF,UAAA47E,QAAA,WACA,qBAAAlsF,KAAA6sD,MAAA7sD,KAAA6sD,KAAAn+C,SAAA,OACA,UAAA1O,KAAAyxC,KAAAzxC,KAAAyxC,IAAAy6C,WAAA,IACA,C,8RCtHA,IAAAz6B,EAAAlyD,EAAA,SAEAwU,EAAAxU,EAAA,YACA2mF,EAAAnyE,EAAAmyE,OAEA,SAAAuO,EAAA73E,EAAAgK,GACA,GAAAhK,aAAA63E,EACA,OAAA73E,EAEA5c,KAAAi3F,WAAAr6E,EAAAgK,KAGAs/D,EAAAtpE,EAAAu0B,GAAAv0B,EAAA5Y,EAAA,4BACAhE,KAAAmxC,EAAA,IAAAsgB,EAAA70C,EAAAu0B,EAAA,IACAnxC,KAAAgE,EAAA,IAAAytD,EAAA70C,EAAA5Y,EAAA,IACA4Y,EAAAq5E,gBAAAtwF,UACA3F,KAAAi2F,cAAA,KAEAj2F,KAAAi2F,cAAAr5E,EAAAq5E,cACA,CAGA,SAAAiB,IACAl3F,KAAAm3F,MAAA,CACA,CAEA,SAAAC,EAAAvkF,EAAAoY,GACA,IAAAosE,EAAAxkF,EAAAoY,EAAAksE,SACA,SAAAE,GACA,OAAAA,EAEA,IAAAC,EAAA,GAAAD,EAGA,OAAAC,KAAA,EACA,SAIA,IADA,IAAA75E,EAAA,EACA9b,EAAA,EAAA0yB,EAAApJ,EAAAksE,MAAAx1F,EAAA21F,EAAA31F,IAAA0yB,IACA5W,IAAA,EACAA,GAAA5K,EAAAwhB,GACA5W,KAAA,EAIA,QAAAA,GAAA,OAIAwN,EAAAksE,MAAA9iE,EACA5W,EACA,CAEA,SAAA85E,EAAA1kF,GAGA,IAFA,IAAAlR,EAAA,EACAd,EAAAgS,EAAA3S,OAAA,GACA2S,EAAAlR,MAAA,IAAAkR,EAAAlR,EAAA,KAAAA,EAAAd,GACAc,IAEA,WAAAA,EACAkR,EAEAA,EAAAhQ,MAAAlB,EACA,CA2DA,SAAA61F,EAAAppF,EAAAvN,GACA,GAAAA,EAAA,IACAuN,EAAA/C,KAAAxK,OADA,CAIA,IAAA42F,EAAA,GAAAz2F,KAAAob,IAAAvb,GAAAG,KAAA02F,MAAA,GAEA,IADAtpF,EAAA/C,KAAA,IAAAosF,KACAA,GACArpF,EAAA/C,KAAAxK,KAAA42F,GAAA,QAEArpF,EAAA/C,KAAAxK,EANA,CAOA,CAlHA4R,EAAAtT,QAAAs1F,EA8CAA,EAAAnkF,UAAA2mF,WAAA,SAAAv2F,EAAAkmB,GACAlmB,EAAAqT,EAAA+rB,QAAAp/B,EAAAkmB,GACA,IAAAqE,EAAA,IAAAisE,EACA,QAAAx2F,EAAAuqB,EAAAksE,SACA,SAEA,IAAAt2F,EAAAu2F,EAAA12F,EAAAuqB,GACA,QAAApqB,EACA,SAEA,GAAAA,EAAAoqB,EAAAksE,QAAAz2F,EAAAR,OACA,SAEA,OAAAQ,EAAAuqB,EAAAksE,SACA,SAEA,IAAAQ,EAAAP,EAAA12F,EAAAuqB,GACA,QAAA0sE,EACA,SAEA,IAAAxmD,EAAAzwC,EAAAmC,MAAAooB,EAAAksE,MAAAQ,EAAA1sE,EAAAksE,OAEA,GADAlsE,EAAAksE,OAAAQ,EACA,IAAAj3F,EAAAuqB,EAAAksE,SACA,SAEA,IAAAS,EAAAR,EAAA12F,EAAAuqB,GACA,QAAA2sE,EACA,SAEA,GAAAl3F,EAAAR,SAAA03F,EAAA3sE,EAAAksE,MACA,SAEA,IAAAnzF,EAAAtD,EAAAmC,MAAAooB,EAAAksE,MAAAS,EAAA3sE,EAAAksE,OACA,OAAAhmD,EAAA,IACA,SAAAA,EAAA,IAIA,SAHAA,IAAAtuC,MAAA,EAKA,CACA,OAAAmB,EAAA,IACA,SAAAA,EAAA,IAIA,SAHAA,IAAAnB,MAAA,EAKA,CAMA,OAJA7C,KAAAmxC,EAAA,IAAAsgB,EAAAtgB,GACAnxC,KAAAgE,EAAA,IAAAytD,EAAAztD,GACAhE,KAAAi2F,cAAA,MAEA,CACA,EAeAxB,EAAAnkF,UAAAk7C,MAAA,SAAA5kC,GACA,IAAAuqB,EAAAnxC,KAAAmxC,EAAArR,UACA97B,EAAAhE,KAAAgE,EAAA87B,UAYA,IATA,IAAAqR,EAAA,KACAA,EAAA,IAAApqB,OAAAoqB,IAEA,IAAAntC,EAAA,KACAA,EAAA,IAAA+iB,OAAA/iB,IAEAmtC,EAAAomD,EAAApmD,GACAntC,EAAAuzF,EAAAvzF,KAEAA,EAAA,QAAAA,EAAA,KACAA,IAAAnB,MAAA,GAEA,IAAAuL,EAAA,IACAopF,EAAAppF,EAAA+iC,EAAAjxC,SACAkO,IAAA2Y,OAAAoqB,IACA9lC,KAAA,GACAmsF,EAAAppF,EAAApK,EAAA9D,QACA,IAAA23F,EAAAzpF,EAAA2Y,OAAA/iB,GACApB,EAAA,KAGA,OAFA40F,EAAA50F,EAAAi1F,EAAA33F,QACA0C,IAAAmkB,OAAA8wE,GACA9jF,EAAAzE,OAAA1M,EAAAgkB,EACA,C,uVCnKA,IAAAtU,EAAA/S,EAAA,WACAumF,EAAAvmF,EAAA,aACAwU,EAAAxU,EAAA,YACA2mF,EAAAnyE,EAAAmyE,OACA4R,EAAA/jF,EAAA+jF,WACAtD,EAAAj1F,EAAA,SACAk1F,EAAAl1F,EAAA,eAEA,SAAAw4F,EAAAlS,GAGA,GAFAK,EAAA,YAAAL,EAAA,qCAEA7lF,gBAAA+3F,GACA,WAAAA,EAAAlS,GAEAA,EAAAC,EAAAD,SACA7lF,KAAA6lF,QACA7lF,KAAA2oB,EAAAk9D,EAAAl9D,EACA3oB,KAAA2oB,EAAAohE,WAAAlE,EAAAviF,EAAA6jF,YAAA,GAEAnnF,KAAAg4F,WAAAnS,EAAA6B,QAAAhoF,YACAM,KAAA6/D,eAAA7+D,KAAAmI,KAAA08E,EAAAviF,EAAA6jF,YAAA,GACAnnF,KAAAsS,OAAAgiF,MACA,CAEA7hF,EAAAtT,QAAA44F,EAOAA,EAAAznF,UAAA0d,KAAA,SAAArd,EAAAsnF,GACAtnF,EAAAmnF,EAAAnnF,GACA,IAAAsZ,EAAAjqB,KAAAk4F,cAAAD,GACA9mD,EAAAnxC,KAAAm4F,QAAAluE,EAAAmuE,gBAAAznF,GACAzF,EAAAlL,KAAA2oB,EAAAu5C,IAAA/wB,GACAknD,EAAAr4F,KAAAs4F,YAAAptF,GACAqtF,EAAAv4F,KAAAm4F,QAAAE,EAAApuE,EAAAm1B,WAAAzuC,GACAuxD,IAAAj4C,EAAA4iC,QACA2rC,EAAArnD,EAAAluC,IAAAs1F,GAAA7N,KAAA1qF,KAAA6lF,MAAAviF,GACA,OAAAtD,KAAAy4F,cAAA,CAAAvtF,IAAAstF,IAAAH,YACA,EAQAN,EAAAznF,UAAA6lF,OAAA,SAAAxlF,EAAAinB,EAAA6Z,GACA9gC,EAAAmnF,EAAAnnF,GACAinB,EAAA53B,KAAAy4F,cAAA7gE,GACA,IAAA3N,EAAAjqB,KAAA+sD,cAAAtb,GACArvC,EAAApC,KAAAm4F,QAAAvgE,EAAAygE,WAAApuE,EAAAm1B,WAAAzuC,GACA+nF,EAAA14F,KAAA2oB,EAAAu5C,IAAAtqC,EAAA4gE,KAEA,OADA5gE,EAAA1sB,IAAAjI,IAAAgnB,EAAAwnB,MAAAywB,IAAA9/D,IACAqhB,GAAAi1E,EACA,EAEAX,EAAAznF,UAAA6nF,QAAA,WAEA,IADA,IAAA7lF,EAAAtS,KAAAsS,OACA3Q,EAAA,EAAAA,EAAAqpB,UAAA9qB,OAAAyB,IACA2Q,EAAA7R,OAAAuqB,UAAArpB,IACA,OAAAoS,EAAA4kF,UAAArmF,EAAA3P,UAAA+nF,KAAA1qF,KAAA6lF,MAAAviF,EACA,EAEAy0F,EAAAznF,UAAAy8C,cAAA,SAAAtb,GACA,OAAA+iD,EAAAK,WAAA70F,KAAAyxC,EACA,EAEAsmD,EAAAznF,UAAA4nF,cAAA,SAAAD,GACA,OAAAzD,EAAAoE,WAAA54F,KAAAi4F,EACA,EAEAF,EAAAznF,UAAAmoF,cAAA,SAAA7gE,GACA,OAAAA,aAAA68D,EACA78D,EACA,IAAA68D,EAAAz0F,KAAA43B,EACA,EAUAmgE,EAAAznF,UAAAgoF,YAAA,SAAA5Q,GACA,IAAA9gE,EAAA8gE,EAAAmC,OAAA/pD,QAAA,KAAA9/B,KAAA6/D,gBAEA,OADAj5C,EAAA5mB,KAAA6/D,eAAA,IAAA6nB,EAAAkC,OAAAvO,QAAA,MACAz0D,CACA,EAEAmxE,EAAAznF,UAAAi5E,YAAA,SAAAt8E,GAGA,IAAA4rF,GAFA5rF,EAAA8G,EAAA+jF,WAAA7qF,IAEA/M,OAAA,EACA44F,EAAA7rF,EAAApK,MAAA,EAAAg2F,GAAA9xE,QAAA,IAAA9Z,EAAA4rF,IACAE,KAAA,IAAA9rF,EAAA4rF,IAEAztF,EAAA2I,EAAA4kF,UAAAG,GACA,OAAA94F,KAAA6lF,MAAAiG,WAAA1gF,EAAA2tF,EACA,EAEAhB,EAAAznF,UAAA0oF,UAAA,SAAAr6B,GACA,OAAAA,EAAA7+B,QAAA,KAAA9/B,KAAA6/D,eACA,EAEAk4B,EAAAznF,UAAA2oF,UAAA,SAAAhsF,GACA,OAAA8G,EAAA4kF,UAAA1rF,EACA,EAEA8qF,EAAAznF,UAAA4oF,QAAA,SAAAz7E,GACA,OAAAA,aAAAzd,KAAAg4F,UACA,C,sRCnHA,IAAAjkF,EAAAxU,EAAA,YACA2mF,EAAAnyE,EAAAmyE,OACA4R,EAAA/jF,EAAA+jF,WACAqB,EAAAplF,EAAAolF,eAWA,SAAA3E,EAAAzO,EAAAtlD,GACAzgC,KAAA+lF,QACA/lF,KAAAo5F,QAAAtB,EAAAr3D,EAAAw3D,QACAlS,EAAAmT,QAAAz4D,EAAAgR,KACAzxC,KAAAq5F,KAAA54D,EAAAgR,IAEAzxC,KAAAs5F,UAAAxB,EAAAr3D,EAAAgR,IACA,CAEA+iD,EAAAK,WAAA,SAAA9O,EAAAt0C,GACA,OAAAA,aAAA+iD,EACA/iD,EACA,IAAA+iD,EAAAzO,EAAA,CAAAt0C,OACA,EAEA+iD,EAAAoE,WAAA,SAAA7S,EAAAkS,GACA,OAAAA,aAAAzD,EACAyD,EACA,IAAAzD,EAAAzO,EAAA,CAAAkS,UACA,EAEAzD,EAAAlkF,UAAA2nF,OAAA,WACA,OAAAj4F,KAAAo5F,OACA,EAEAD,EAAA3E,EAAA,uBACA,OAAAx0F,KAAA+lF,MAAAuS,YAAAt4F,KAAAyxC,MACA,IAEA0nD,EAAA3E,EAAA,kBACA,OAAAx0F,KAAAs5F,UACAt5F,KAAA+lF,MAAAwD,YAAAvpF,KAAAs5F,WACAt5F,KAAA+lF,MAAAp9D,EAAAu5C,IAAAliE,KAAA6sD,OACA,IAEAssC,EAAA3E,EAAA,wBACA,IAAAzO,EAAA/lF,KAAA+lF,MACAzzE,EAAAtS,KAAAsS,OACAumF,EAAA9S,EAAAlmB,eAAA,EAEA55D,EAAAqM,EAAAzP,MAAA,EAAAkjF,EAAAlmB,gBAKA,OAJA55D,EAAA,QACAA,EAAA4yF,IAAA,IACA5yF,EAAA4yF,IAAA,GAEA5yF,CACA,IAEAkzF,EAAA3E,EAAA,mBACA,OAAAx0F,KAAA+lF,MAAAkT,UAAAj5F,KAAAu5F,YACA,IAEAJ,EAAA3E,EAAA,mBACA,OAAAx0F,KAAA+lF,MAAAzzE,OAAA7R,OAAAT,KAAAi4F,UAAAt1F,QACA,IAEAw2F,EAAA3E,EAAA,4BACA,OAAAx0F,KAAAsS,OAAAzP,MAAA7C,KAAA+lF,MAAAlmB,eACA,IAEA20B,EAAAlkF,UAAA0d,KAAA,SAAArd,GAEA,OADAu1E,EAAAlmF,KAAAo5F,QAAA,2BACAp5F,KAAA+lF,MAAA/3D,KAAArd,EAAA3Q,KACA,EAEAw0F,EAAAlkF,UAAA6lF,OAAA,SAAAxlF,EAAAinB,GACA,OAAA53B,KAAA+lF,MAAAoQ,OAAAxlF,EAAAinB,EAAA53B,KACA,EAEAw0F,EAAAlkF,UAAAkpF,UAAA,SAAA5yE,GAEA,OADAs/D,EAAAlmF,KAAAo5F,QAAA,0BACArlF,EAAAzE,OAAAtP,KAAAi4F,SAAArxE,EACA,EAEA4tE,EAAAlkF,UAAAuvB,UAAA,SAAAjZ,GACA,OAAA7S,EAAAzE,OAAAtP,KAAAo/C,WAAAx4B,EACA,EAEAnU,EAAAtT,QAAAq1F,C,iSC5FA,IAAA/iC,EAAAlyD,EAAA,SACAwU,EAAAxU,EAAA,YACA2mF,EAAAnyE,EAAAmyE,OACAiT,EAAAplF,EAAAolF,eACArB,EAAA/jF,EAAA+jF,WAUA,SAAArD,EAAA1O,EAAAnuD,GACA53B,KAAA+lF,QAEA,iBAAAnuD,IACAA,EAAAkgE,EAAAlgE,IAEApuB,MAAAoJ,QAAAglB,KACAA,EAAA,CACA1sB,EAAA0sB,EAAA/0B,MAAA,EAAAkjF,EAAAlmB,gBACA24B,EAAA5gE,EAAA/0B,MAAAkjF,EAAAlmB,kBAIAqmB,EAAAtuD,EAAA1sB,GAAA0sB,EAAA4gE,EAAA,4BAEAzS,EAAAmT,QAAAthE,EAAA1sB,KACAlL,KAAAy5F,GAAA7hE,EAAA1sB,GACA0sB,EAAA4gE,aAAA/mC,IACAzxD,KAAA05F,GAAA9hE,EAAA4gE,GAEAx4F,KAAA25F,UAAAnwF,MAAAoJ,QAAAglB,EAAA1sB,GAAA0sB,EAAA1sB,EAAA0sB,EAAAygE,SACAr4F,KAAA45F,UAAApwF,MAAAoJ,QAAAglB,EAAA4gE,GAAA5gE,EAAA4gE,EAAA5gE,EAAAiiE,QACA,CAEAV,EAAA1E,EAAA,gBACA,OAAAz0F,KAAA+lF,MAAAkT,UAAAj5F,KAAA65F,WACA,IAEAV,EAAA1E,EAAA,gBACA,OAAAz0F,KAAA+lF,MAAAwD,YAAAvpF,KAAAq4F,WACA,IAEAc,EAAA1E,EAAA,uBACA,OAAAz0F,KAAA+lF,MAAAuS,YAAAt4F,KAAAkL,IACA,IAEAiuF,EAAA1E,EAAA,uBACA,OAAAz0F,KAAA+lF,MAAAiT,UAAAh5F,KAAAw4F,IACA,IAEA/D,EAAAnkF,UAAAxP,QAAA,WACA,OAAAd,KAAAq4F,WAAAtxE,OAAA/mB,KAAA65F,WACA,EAEApF,EAAAnkF,UAAAoB,MAAA,WACA,OAAAqC,EAAAzE,OAAAtP,KAAAc,UAAA,OAAAg9E,aACA,EAEArrE,EAAAtT,QAAAs1F,C,2QChEAhiF,EAAAtT,QAAA,CACAyoF,QAAA,CACA1/D,KAAA,EACAkgE,OAAA,CACA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,kEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,sEAIAN,IAAA,CACAY,IAAA,EACAN,OAAA,CACA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,iEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mE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ACA,IAEA/D,EAAAnkF,UAAAxP,QAAA,WACA,OAAAd,KAAAq4F,WAAAtxE,OAAA/mB,KAAA65F,WACA,EAEApF,EAAAnkF,UAAAoB,MAAA,WACA,OAAAqC,EAAAzE,OAAAtP,KAAAc,UAAA,OAAAg9E,aACA,EAEArrE,EAAAtT,QAAAs1F,C,4SChEAhiF,EAAAtT,QAAA,CACAyoF,QAAA,CACA1/D,KAAA,EACAkgE,OAAA,CACA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,kEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,sEAIAN,IAAA,CACAY,IAAA,EACAN,OAAA,CACA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,iEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,sE,0XCrwBA,IAAAr0E,EAAA5U,EACAsyD,EAAAlyD,EAAA,SACAu6F,EAAAv6F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","file":"../metamask/background-4.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayBasicTreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayBasicTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n    }\n    /**\n     * Number of elements in the array. Equal to the Uint32 value of the Tree's length node\n     */\n    get length() {\n        return this.type.tree_getLength(this.tree.rootNode);\n    }\n    get node() {\n        return this.tree.rootNode;\n    }\n    /**\n     * Get element at `index`. Returns the Basic element type value directly\n     */\n    get(index) {\n        // First walk through the tree to get the root node for that index\n        const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n        const leafNode = this.tree.getNodeAtDepth(this.type.depth, chunkIndex);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return this.type.elementType.tree_getFromPackedNode(leafNode, index);\n    }\n    /**\n     * Set Basic element type `value` at `index`\n     */\n    set(index, value) {\n        const length = this.length;\n        if (index >= length) {\n            throw Error(`Error setting index over length ${index} > ${length}`);\n        }\n        const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n        const leafNodePrev = this.tree.getNodeAtDepth(this.type.depth, chunkIndex);\n        // Create a new node to preserve immutability\n        const leafNode = leafNodePrev.clone();\n        this.type.elementType.tree_setToPackedNode(leafNode, index, value);\n        // Commit immediately\n        this.tree.setNodeAtDepth(this.type.depth, chunkIndex, leafNode);\n    }\n    /**\n     * Get all values of this array as Basic element type values, from index zero to `this.length - 1`\n     */\n    getAll() {\n        const length = this.length;\n        const chunksNode = this.type.tree_getChunksNode(this.node);\n        const chunkCount = Math.ceil(length / this.type.itemsPerChunk);\n        const leafNodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, chunkCount);\n        const values = new Array(length);\n        const itemsPerChunk = this.type.itemsPerChunk; // Prevent many access in for loop below\n        const lenFullNodes = Math.floor(length / itemsPerChunk);\n        const remainder = length % itemsPerChunk;\n        for (let n = 0; n < lenFullNodes; n++) {\n            const leafNode = leafNodes[n];\n            // TODO: Implement add a fast bulk packed element reader in the elementType\n            // ```\n            // abstract getValuesFromPackedNode(leafNode: LeafNode, output: V[], indexOffset: number): void;\n            // ```\n            // if performance here is a problem\n            for (let i = 0; i < itemsPerChunk; i++) {\n                values[n * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);\n            }\n        }\n        if (remainder > 0) {\n            const leafNode = leafNodes[lenFullNodes];\n            for (let i = 0; i < remainder; i++) {\n                values[lenFullNodes * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);\n            }\n        }\n        return values;\n    }\n}\nexports.ArrayBasicTreeView = ArrayBasicTreeView;\n//# sourceMappingURL=arrayBasic.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        _assert_js_1.default.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        _assert_js_1.default.exists(this, false);\n        _assert_js_1.default.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        _assert_js_1.default.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        _assert_js_1.default.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"./utils\");\nexports.sha256 = (0, utils_1.wrapHash)(sha256_1.sha256);\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = exports.wrapHash = exports.equalsBytes = exports.hexToBytes = exports.bytesToUtf8 = exports.utf8ToBytes = exports.createView = exports.concatBytes = exports.toHex = exports.bytesToHex = exports.assertBytes = exports.assertBool = void 0;\n// buf.toString('hex') -> toHex(buf)\nconst _assert_1 = __importDefault(require(\"@noble/hashes/_assert\"));\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst assertBool = _assert_1.default.bool;\nexports.assertBool = assertBool;\nconst assertBytes = _assert_1.default.bytes;\nexports.assertBytes = assertBytes;\nvar utils_2 = require(\"@noble/hashes/utils\");\nObject.defineProperty(exports, \"bytesToHex\", { enumerable: true, get: function () { return utils_2.bytesToHex; } });\nObject.defineProperty(exports, \"toHex\", { enumerable: true, get: function () { return utils_2.bytesToHex; } });\nObject.defineProperty(exports, \"concatBytes\", { enumerable: true, get: function () { return utils_2.concatBytes; } });\nObject.defineProperty(exports, \"createView\", { enumerable: true, get: function () { return utils_2.createView; } });\nObject.defineProperty(exports, \"utf8ToBytes\", { enumerable: true, get: function () { return utils_2.utf8ToBytes; } });\n// buf.toString('utf8') -> bytesToUtf8(buf)\nfunction bytesToUtf8(data) {\n    if (!(data instanceof Uint8Array)) {\n        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);\n    }\n    return new TextDecoder().decode(data);\n}\nexports.bytesToUtf8 = bytesToUtf8;\nfunction hexToBytes(data) {\n    const sliced = data.startsWith(\"0x\") ? data.substring(2) : data;\n    return (0, utils_1.hexToBytes)(sliced);\n}\nexports.hexToBytes = hexToBytes;\n// buf.equals(buf2) -> equalsBytes(buf, buf2)\nfunction equalsBytes(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equalsBytes = equalsBytes;\n// Internal utils\nfunction wrapHash(hash) {\n    return (msg) => {\n        _assert_1.default.bytes(msg);\n        return hash(msg);\n    };\n}\nexports.wrapHash = wrapHash;\nexports.crypto = (() => {\n    const webCrypto = typeof self === \"object\" && \"crypto\" in self ? self.crypto : undefined;\n    const nodeRequire = typeof module !== \"undefined\" &&\n        typeof module.require === \"function\" &&\n        module.require.bind(module);\n    return {\n        node: nodeRequire && !webCrypto ? nodeRequire(\"crypto\") : undefined,\n        web: webCrypto\n    };\n})();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.utils = exports.decode = exports.encode = void 0;\n/**\n * RLP Encoding based on https://eth.wiki/en/fundamentals/rlp\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        for (let i = 0; i < input.length; i++) {\n            output.push(encode(input[i]));\n        }\n        const buf = concatBytes(...output);\n        return concatBytes(encodeLength(buf.length, 192), buf);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\nexports.encode = encode;\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([len + offset]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (!input || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid RLP: remainder must be zero');\n    }\n    return decoded.data;\n}\nexports.decode = decode;\n/** Decode an input with RLP */\nfunction _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        }\n        else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n        }\n        return {\n            data: data,\n            remainder: input.slice(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data: data,\n            remainder: input.slice(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length),\n        };\n    }\n    else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error('invalid RLP: encoded list too short');\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid RLP: total length is larger than the data');\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength),\n        };\n    }\n}\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === 'string') {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === 'number' || typeof v === 'bigint') {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nexports.utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes,\n};\nconst RLP = { encode, decode };\nexports.default = RLP;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayCompositeTreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayCompositeTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n    }\n    /**\n     * Number of elements in the array. Equal to the Uint32 value of the Tree's length node\n     */\n    get length() {\n        return this.type.tree_getLength(this.tree.rootNode);\n    }\n    /**\n     * Returns the View's Tree rootNode\n     */\n    get node() {\n        return this.tree.rootNode;\n    }\n    /**\n     * Get element at `index`. Returns a view of the Composite element type\n     */\n    get(index) {\n        // TODO: Optimize without bitstring\n        const gindex = persistent_merkle_tree_1.toGindexBitstring(this.type.depth, index);\n        const subtree = this.tree.getSubtree(gindex);\n        return this.type.elementType.getView(subtree);\n    }\n    /**\n     * Get element at `index`. Returns a view of the Composite element type.\n     * DOES NOT PROPAGATE CHANGES: use only for reads and to skip parent references.\n     */\n    getReadonly(index) {\n        // TODO: Optimize without bitstring\n        const gindex = persistent_merkle_tree_1.toGindexBitstring(this.type.depth, index);\n        // tree.getSubtree but without the hook\n        const subtree = new persistent_merkle_tree_1.Tree(this.tree.getNode(gindex));\n        return this.type.elementType.getView(subtree);\n    }\n    /**\n     * Set Composite element type `view` at `index`\n     */\n    set(index, view) {\n        const length = this.length;\n        if (index >= length) {\n            throw Error(`Error setting index over length ${index} > ${length}`);\n        }\n        const node = this.type.elementType.commitView(view);\n        this.tree.setNodeAtDepth(this.type.depth, index, node);\n    }\n    /**\n     * Returns an array of views of all elements in the array, from index zero to `this.length - 1`.\n     * The returned views don't have a parent hook to this View's Tree, so changes in the returned views won't be\n     * propagated upwards. To get linked element Views use `this.get()`\n     */\n    getAllReadonly() {\n        const length = this.length;\n        const chunksNode = this.type.tree_getChunksNode(this.node);\n        const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, length);\n        const views = new Array(length);\n        for (let i = 0; i < length; i++) {\n            // TODO: Optimize\n            views[i] = this.type.elementType.getView(new persistent_merkle_tree_1.Tree(nodes[i]));\n        }\n        return views;\n    }\n    /**\n     * Returns an array of values of all elements in the array, from index zero to `this.length - 1`.\n     * The returned values are not Views so any changes won't be propagated upwards.\n     * To get linked element Views use `this.get()`\n     */\n    getAllReadonlyValues() {\n        const length = this.length;\n        const chunksNode = this.type.tree_getChunksNode(this.node);\n        const nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, length);\n        const values = new Array(length);\n        for (let i = 0; i < length; i++) {\n            values[i] = this.type.elementType.tree_toValue(nodes[i]);\n        }\n        return values;\n    }\n}\nexports.ArrayCompositeTreeView = ArrayCompositeTreeView;\n//# sourceMappingURL=arrayComposite.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRandomBytesSync = getRandomBytesSync;\nexports.getRandomBytes = getRandomBytes;\nconst utils_1 = require(\"@noble/hashes/utils\");\nfunction getRandomBytesSync(bytes) {\n    return (0, utils_1.randomBytes)(bytes);\n}\nasync function getRandomBytes(bytes) {\n    return (0, utils_1.randomBytes)(bytes);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_js_1 = require(\"./utils.js\");\nexports.sha256 = (0, utils_js_1.wrapHash)(sha256_1.sha256);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitArrayTreeView = void 0;\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes to `tree` on every `this.set()`\n */\nclass BitArrayTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n        this.bitArray = type.tree_toValue(tree.rootNode);\n    }\n    get node() {\n        return this.tree.rootNode;\n    }\n    // Wrapped API from BitArray\n    /** @see BitArray.uint8Array */\n    get uint8Array() {\n        return this.bitArray.uint8Array;\n    }\n    /** @see BitArray.bitLen */\n    get bitLen() {\n        return this.bitArray.bitLen;\n    }\n    /** @see BitArray.get */\n    get(bitIndex) {\n        return this.bitArray.get(bitIndex);\n    }\n    /** @see BitArray.set */\n    set(bitIndex, bit) {\n        this.bitArray.set(bitIndex, bit);\n        // Upstream changes\n        this.tree.rootNode = this.type.value_toTree(this.bitArray);\n    }\n    /** @see BitArray.mergeOrWith */\n    mergeOrWith(bitArray2) {\n        this.bitArray.mergeOrWith(bitArray2);\n    }\n    /** @see BitArray.intersectValues */\n    intersectValues(values) {\n        return this.bitArray.intersectValues(values);\n    }\n    /** @see BitArray.getTrueBitIndexes */\n    getTrueBitIndexes() {\n        return this.bitArray.getTrueBitIndexes();\n    }\n    /** @see BitArray.getSingleTrueBit */\n    getSingleTrueBit() {\n        return this.bitArray.getSingleTrueBit();\n    }\n    /** @see BitArray.toBoolArray */\n    toBoolArray() {\n        return this.bitArray.toBoolArray();\n    }\n}\nexports.BitArrayTreeView = BitArrayTreeView;\n//# sourceMappingURL=bitArray.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContainerTreeViewClass = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst basic_1 = require(\"../type/basic\");\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\n/**\n * Intented usage:\n *\n * - Get initial BeaconState from disk.\n * - Before applying next block, switch to mutable\n * - Get some field, create a view in mutable mode\n * - Do modifications of the state in the state transition function\n * - When done, commit and apply new root node once to og BeaconState\n * - However, keep all the caches and transfer them to the new BeaconState\n *\n * Questions:\n * - Can the child views created in mutable mode switch to not mutable? If so, it seems that it needs to recursively\n *   iterate the entire data structure and views\n *\n */\nclass ContainerTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n    }\n    get node() {\n        return this.tree.rootNode;\n    }\n}\nfunction getContainerTreeViewClass(type) {\n    class CustomContainerTreeView extends ContainerTreeView {\n    }\n    // Dynamically define prototype methods\n    for (let index = 0; index < type.fieldsEntries.length; index++) {\n        const { fieldName, fieldType } = type.fieldsEntries[index];\n        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n        // and use the cached views array to store the new node.\n        if (basic_1.isBasicType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // TODO: Review the memory cost of this closures\n                get: function () {\n                    const leafNode = persistent_merkle_tree_1.getNodeAtDepth(this.node, this.type.depth, index);\n                    return fieldType.tree_getFromNode(leafNode);\n                },\n                set: function (value) {\n                    const leafNodePrev = persistent_merkle_tree_1.getNodeAtDepth(this.node, this.type.depth, index);\n                    const leafNode = leafNodePrev.clone();\n                    fieldType.tree_setToNode(leafNode, value);\n                    this.tree.setNodeAtDepth(this.type.depth, index, leafNode);\n                },\n            });\n        }\n        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n        // set it to the parent tree in the field gindex.\n        else if (composite_1.isCompositeType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // Returns TreeView of fieldName\n                get: function () {\n                    const gindex = persistent_merkle_tree_1.toGindexBitstring(this.type.depth, index);\n                    return fieldType.getView(this.tree.getSubtree(gindex));\n                },\n                // Expects TreeView of fieldName\n                set: function (value) {\n                    const node = fieldType.commitView(value);\n                    this.tree.setNodeAtDepth(this.type.depth, index, node);\n                },\n            });\n        }\n        // Should never happen\n        else {\n            /* istanbul ignore next - unreachable code */\n            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n        }\n    }\n    // Change class name\n    Object.defineProperty(CustomContainerTreeView, \"name\", { value: type.typeName, writable: false });\n    return CustomContainerTreeView;\n}\nexports.getContainerTreeViewClass = getContainerTreeViewClass;\n//# sourceMappingURL=container.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContainerTreeViewClass = void 0;\nconst composite_1 = require(\"../type/composite\");\nconst branchNodeStruct_1 = require(\"../branchNodeStruct\");\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\n/**\n * Intented usage:\n *\n * - Get initial BeaconState from disk.\n * - Before applying next block, switch to mutable\n * - Get some field, create a view in mutable mode\n * - Do modifications of the state in the state transition function\n * - When done, commit and apply new root node once to og BeaconState\n * - However, keep all the caches and transfer them to the new BeaconState\n *\n * Questions:\n * - Can the child views created in mutable mode switch to not mutable? If so, it seems that it needs to recursively\n *   iterate the entire data structure and views\n *\n */\nclass ContainerTreeView extends abstract_1.TreeView {\n    constructor(type, tree) {\n        super();\n        this.type = type;\n        this.tree = tree;\n    }\n    get node() {\n        return this.tree.rootNode;\n    }\n}\nfunction getContainerTreeViewClass(type) {\n    class CustomContainerTreeView extends ContainerTreeView {\n    }\n    // Dynamically define prototype methods\n    for (let index = 0; index < type.fieldsEntries.length; index++) {\n        const { fieldName, fieldType } = type.fieldsEntries[index];\n        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n        // and use the cached views array to store the new node.\n        if (fieldType.isBasic) {\n            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // TODO: Review the memory cost of this closures\n                get: function () {\n                    return this.tree.rootNode.value[fieldName];\n                },\n                set: function (value) {\n                    const node = this.tree.rootNode;\n                    const newNodeValue = this.type.clone(node.value);\n                    // TODO: Should this check for valid field name? Benchmark the cost\n                    newNodeValue[fieldName] = value;\n                    this.tree.rootNode = new branchNodeStruct_1.BranchNodeStruct(node[\"valueToNode\"], newNodeValue);\n                },\n            });\n        }\n        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n        // set it to the parent tree in the field gindex.\n        else if (composite_1.isCompositeType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeView.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // Returns TreeView of fieldName\n                get: function () {\n                    const { value } = this.tree.rootNode;\n                    return fieldType.toView(value[fieldName]);\n                },\n                // Expects TreeView of fieldName\n                set: function (view) {\n                    const node = this.tree.rootNode;\n                    const newNodeValue = this.type.clone(node.value);\n                    // TODO: Should this check for valid field name? Benchmark the cost\n                    newNodeValue[fieldName] = fieldType.toValueFromView(view);\n                    this.tree.rootNode = new branchNodeStruct_1.BranchNodeStruct(node[\"valueToNode\"], newNodeValue);\n                },\n            });\n        }\n        // Should never happen\n        else {\n            /* istanbul ignore next - unreachable code */\n            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n        }\n    }\n    // Change class name\n    Object.defineProperty(CustomContainerTreeView, \"name\", { value: type.typeName, writable: false });\n    return CustomContainerTreeView;\n}\nexports.getContainerTreeViewClass = getContainerTreeViewClass;\n//# sourceMappingURL=containerNodeStruct.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBasicTreeView = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nclass ListBasicTreeView extends arrayBasic_1.ArrayBasicTreeView {\n    constructor(type, tree) {\n        super(type, tree);\n        this.type = type;\n        this.tree = tree;\n    }\n    /**\n     * Adds one value element at the end of the array and adds 1 to the current Tree length.\n     */\n    push(value) {\n        const length = this.length;\n        if (length >= this.type.limit) {\n            throw Error(\"Error pushing over limit\");\n        }\n        this.type.tree_setLength(this.tree, length + 1);\n        // If in new node..\n        if (length % this.type.itemsPerChunk === 0) {\n            // TODO: Optimize: This `inNewNode` could be ommitted but it would cause a full navigation in .set()\n            // Benchmark the cost of that navigation vs the extra math here\n            // TODO: Optimize: prevent double initialization\n            const leafNode = persistent_merkle_tree_1.LeafNode.fromZero();\n            this.type.elementType.tree_setToPackedNode(leafNode, length, value);\n            // Commit immediately\n            const chunkIndex = Math.floor(length / this.type.itemsPerChunk);\n            this.tree.setNodeAtDepth(this.type.depth, chunkIndex, leafNode);\n        }\n        else {\n            // Re-use .set() since no new node is added\n            this.set(length, value);\n        }\n    }\n}\nexports.ListBasicTreeView = ListBasicTreeView;\n//# sourceMappingURL=listBasic.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCompositeTreeView = void 0;\nconst arrayComposite_1 = require(\"./arrayComposite\");\nclass ListCompositeTreeView extends arrayComposite_1.ArrayCompositeTreeView {\n    constructor(type, tree) {\n        super(type, tree);\n        this.type = type;\n        this.tree = tree;\n    }\n    /**\n     * Adds one view element at the end of the array and adds 1 to the current Tree length.\n     */\n    push(view) {\n        const length = this.length;\n        if (length >= this.type.limit) {\n            throw Error(\"Error pushing over limit\");\n        }\n        this.type.tree_setLength(this.tree, length + 1);\n        // No need for pre-initialization like in ListBasic.push since ArrayCompositeTreeView.set() doesn't do a get node\n        this.set(length, view);\n    }\n}\nexports.ListCompositeTreeView = ListCompositeTreeView;\n//# sourceMappingURL=listComposite.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TreeViewDU = void 0;\nconst abstract_1 = require(\"../view/abstract\");\n/* eslint-disable @typescript-eslint/member-ordering  */\n/**\n * A Deferred Update Tree View (`ViewDU`) is a wrapper around a type and\n * a SSZ Node that contains:\n * - data merkleized\n * - some arbitrary caches to speed up data manipulation required by the type\n *\n * **ViewDU**\n * - Best for complex usage where performance is important\n * - Defers changes to when commit is called\n * - Does NOT have a reference to the parent ViewDU\n * - Has caches for fast get / set ops\n */\nclass TreeViewDU extends abstract_1.TreeView {\n    /**\n     * Merkleize view and compute its hashTreeRoot.\n     * Commits any pending changes before computing the root.\n     *\n     * See spec for definition of hashTreeRoot:\n     * https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\n     */\n    hashTreeRoot() {\n        this.commit();\n        return super.hashTreeRoot();\n    }\n    /**\n     * Serialize view to binary data.\n     * Commits any pending changes before computing the root.\n     */\n    serialize() {\n        this.commit();\n        return super.serialize();\n    }\n    /**\n     * Return a new ViewDU instance referencing the same internal `Node`.\n     *\n     * By default it will transfer the cache of this ViewDU to the new cloned instance. Set `dontTransferCache` to true\n     * to NOT transfer the cache to the cloned instance.\n     */\n    clone(dontTransferCache) {\n        if (dontTransferCache) {\n            return this.type.getViewDU(this.node);\n        }\n        else {\n            const cache = this.cache;\n            this.clearCache();\n            return this.type.getViewDU(this.node, cache);\n        }\n    }\n}\nexports.TreeViewDU = TreeViewDU;\n//# sourceMappingURL=abstract.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayBasicTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayBasicTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super();\n        this.type = type;\n        this._rootNode = _rootNode;\n        this.nodesChanged = new Set();\n        this.dirtyLength = false;\n        if (cache) {\n            this.nodes = cache.nodes;\n            this._length = cache.length;\n            this.nodesPopulated = cache.nodesPopulated;\n        }\n        else {\n            this.nodes = [];\n            this._length = this.type.tree_getLength(_rootNode);\n            this.nodesPopulated = false;\n        }\n    }\n    /**\n     * Number of elements in the array. Equal to un-commited length of the array\n     */\n    get length() {\n        return this._length;\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return {\n            nodes: this.nodes,\n            length: this._length,\n            nodesPopulated: this.nodesPopulated,\n        };\n    }\n    /**\n     * Get element at `index`. Returns the Basic element type value directly\n     */\n    get(index) {\n        // First walk through the tree to get the root node for that index\n        const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n        let node = this.nodes[chunkIndex];\n        if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, chunkIndex);\n            this.nodes[chunkIndex] = node;\n        }\n        return this.type.elementType.tree_getFromPackedNode(node, index);\n    }\n    /**\n     * Set Basic element type `value` at `index`\n     */\n    set(index, value) {\n        if (index >= this._length) {\n            throw Error(`Error setting index over length ${index} > ${this._length}`);\n        }\n        const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n        // Create new node if current leafNode is not dirty\n        let nodeChanged;\n        if (this.nodesChanged.has(chunkIndex)) {\n            // TODO: This assumes that node has already been populated\n            nodeChanged = this.nodes[chunkIndex];\n        }\n        else {\n            const nodePrev = (this.nodes[chunkIndex] ??\n                persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, chunkIndex));\n            nodeChanged = nodePrev.clone();\n            // Store the changed node in the nodes cache\n            this.nodes[chunkIndex] = nodeChanged;\n            this.nodesChanged.add(chunkIndex);\n        }\n        this.type.elementType.tree_setToPackedNode(nodeChanged, index, value);\n    }\n    /**\n     * Get all values of this array as Basic element type values, from index zero to `this.length - 1`\n     */\n    getAll() {\n        if (!this.nodesPopulated) {\n            const nodesPrev = this.nodes;\n            const chunksNode = this.type.tree_getChunksNode(this.node);\n            const chunkCount = Math.ceil(this._length / this.type.itemsPerChunk);\n            this.nodes = persistent_merkle_tree_1.getNodesAtDepth(chunksNode, this.type.chunkDepth, 0, chunkCount);\n            // Re-apply changed nodes\n            for (const index of this.nodesChanged) {\n                this.nodes[index] = nodesPrev[index];\n            }\n            this.nodesPopulated = true;\n        }\n        const values = new Array(this._length);\n        const itemsPerChunk = this.type.itemsPerChunk; // Prevent many access in for loop below\n        const lenFullNodes = Math.floor(this._length / itemsPerChunk);\n        const remainder = this._length % itemsPerChunk;\n        // TODO Optimize: caching the variables used in the loop above it\n        for (let n = 0; n < lenFullNodes; n++) {\n            const leafNode = this.nodes[n];\n            // TODO: Implement add a fast bulk packed element reader in the elementType\n            // ```\n            // abstract getValuesFromPackedNode(leafNode: LeafNode, output: V[], indexOffset: number): void;\n            // ```\n            // if performance here is a problem\n            for (let i = 0; i < itemsPerChunk; i++) {\n                values[n * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);\n            }\n        }\n        if (remainder > 0) {\n            const leafNode = this.nodes[lenFullNodes];\n            for (let i = 0; i < remainder; i++) {\n                values[lenFullNodes * itemsPerChunk + i] = this.type.elementType.tree_getFromPackedNode(leafNode, i);\n            }\n        }\n        return values;\n    }\n    commit() {\n        if (this.nodesChanged.size === 0) {\n            return;\n        }\n        // Numerical sort ascending\n        const indexes = Array.from(this.nodesChanged.keys()).sort((a, b) => a - b);\n        const nodes = new Array(indexes.length);\n        for (let i = 0; i < indexes.length; i++) {\n            nodes[i] = this.nodes[indexes[i]];\n        }\n        const chunksNode = this.type.tree_getChunksNode(this._rootNode);\n        // TODO: Ensure fast setNodesAtDepth() method is correct\n        const newChunksNode = persistent_merkle_tree_1.setNodesAtDepth(chunksNode, this.type.chunkDepth, indexes, nodes);\n        this._rootNode = this.type.tree_setChunksNode(this._rootNode, newChunksNode, this.dirtyLength ? this._length : undefined);\n        this.nodesChanged.clear();\n        this.dirtyLength = false;\n    }\n    clearCache() {\n        this.nodes = [];\n        this.nodesPopulated = false;\n        // Must clear nodesChanged, otherwise a subsequent commit call will break, because it assumes a node is there\n        this.nodesChanged.clear();\n        // Reset cached length only if it has been mutated\n        if (this.dirtyLength) {\n            this._length = this.type.tree_getLength(this._rootNode);\n            this.dirtyLength = false;\n        }\n    }\n}\nexports.ArrayBasicTreeViewDU = ArrayBasicTreeViewDU;\n//# sourceMappingURL=arrayBasic.js.map","import { ControllerMessenger } from '@metamask/base-controller';\nimport { KeyringController } from '@metamask/keyring-controller';\nimport { wordlist } from '@metamask/scure-bip39/dist/wordlists/english';\nimport { UI_NOTIFICATIONS } from '../../../shared/notifications';\nimport { E2E_SRP, defaultFixture } from '../../../test/e2e/default-fixture';\nimport FixtureBuilder from '../../../test/e2e/fixture-builder';\nimport { encryptorFactory } from '../lib/encryptor-factory';\nimport { FIXTURES_APP_STATE } from './with-app-state';\nimport { FIXTURES_NETWORKS } from './with-networks';\nimport { FIXTURES_PREFERENCES } from './with-preferences';\nimport { FIXTURES_ERC20_TOKENS } from './with-erc20-tokens';\nimport { withAddressBook } from './with-address-book';\nimport { withConfirmedTransactions } from './with-confirmed-transactions';\nimport { withUnreadNotifications } from './with-unread-notifications';\n\nconst FIXTURES_CONFIG = process.env.WITH_STATE\n  ? JSON.parse(process.env.WITH_STATE)\n  : {};\n\n/**\n * Generates the wallet state based on the fixtures set in the environment variable.\n *\n * @returns {Promise<object>} The generated wallet state.\n */\nexport async function generateWalletState() {\n  const fixtureBuilder = new FixtureBuilder({ inputChainId: '0xaa36a7' });\n\n  const { vault, accounts } = await generateVaultAndAccount(\n    process.env.TEST_SRP || E2E_SRP,\n    process.env.PASSWORD,\n  );\n\n  fixtureBuilder\n    .withAccountsController(generateAccountsControllerState(accounts))\n    .withAddressBookController(generateAddressBookControllerState())\n    .withAnnouncementController(generateAnnouncementControllerState())\n    .withAppStateController(FIXTURES_APP_STATE)\n    .withKeyringController(generateKeyringControllerState(vault))\n    .withNetworkController(generateNetworkControllerState())\n    .withNotificationServicesController(\n      generateNotificationControllerState(accounts[0]),\n    )\n    .withPreferencesController(generatePreferencesControllerState(accounts))\n    .withTokensController(generateTokensControllerState(accounts[0]))\n    .withTransactionController(generateTransactionControllerState(accounts[0]));\n\n  return fixtureBuilder.fixture.data;\n}\n\n/**\n * Generates a new vault and account based on the provided seed phrase and password.\n *\n * @param {string} encodedSeedPhrase - The encoded seed phrase.\n * @param {string} password - The password for the vault.\n * @returns {Promise<{vault: object, account: string}>} The generated vault and account.\n */\nasync function generateVaultAndAccount(encodedSeedPhrase, password) {\n  const controllerMessenger = new ControllerMessenger();\n  const keyringControllerMessenger = controllerMessenger.getRestricted({\n    name: 'KeyringController',\n  });\n  const krCtrl = new KeyringController({\n    encryptor: encryptorFactory(600_000),\n    messenger: keyringControllerMessenger,\n  });\n\n  const seedPhraseAsBuffer = Buffer.from(encodedSeedPhrase);\n  const _convertMnemonicToWordlistIndices = (mnemonic) => {\n    const indices = mnemonic\n      .toString()\n      .split(' ')\n      .map((word) => wordlist.indexOf(word));\n    return new Uint8Array(new Uint16Array(indices).buffer);\n  };\n\n  await krCtrl.createNewVaultAndRestore(\n    password,\n    _convertMnemonicToWordlistIndices(seedPhraseAsBuffer),\n  );\n\n  const accounts = [];\n  const account = krCtrl.state.keyrings[0].accounts[0];\n  accounts.push(account);\n\n  for (let i = 1; i < FIXTURES_CONFIG.withAccounts; i++) {\n    const newAccount = await krCtrl.addNewAccount(i);\n    accounts.push(newAccount);\n  }\n  const { vault } = krCtrl.state;\n\n  return { vault, accounts };\n}\n\n/**\n * Generates the state for the KeyringController.\n *\n * @param {object} vault - The vault object.\n * @returns {object} The generated KeyringController state.\n */\nfunction generateKeyringControllerState(vault) {\n  console.log('Generating KeyringController state');\n\n  return {\n    ...defaultFixture().data.KeyringController,\n    vault,\n  };\n}\n\n/**\n * Generates the state for the AccountsController.\n *\n * @param {string} accounts - The account addresses.\n * @returns {object} The generated AccountsController state.\n */\nfunction generateAccountsControllerState(accounts) {\n  console.log('Generating AccountsController state');\n  const internalAccounts = {\n    selectedAccount: 'account-id',\n    accounts: {},\n  };\n\n  accounts.forEach((account, index) => {\n    internalAccounts.accounts[`acount-id-${index}`] = {\n      selectedAccount: 'account-id',\n      id: 'account-id',\n      address: account,\n      metadata: {\n        name: `Account ${index + 1}`,\n        lastSelected: 1665507600000,\n        keyring: {\n          type: 'HD Key Tree',\n        },\n      },\n      options: {},\n      methods: [\n        'personal_sign',\n        'eth_signTransaction',\n        'eth_signTypedData_v1',\n        'eth_signTypedData_v3',\n        'eth_signTypedData_v4',\n      ],\n      type: 'eip155:eoa',\n    };\n  });\n  return {\n    internalAccounts,\n  };\n}\n\n/**\n * Generates the state for the AddressBookController.\n *\n * @returns {object} The generated AddressBookController state.\n */\nfunction generateAddressBookControllerState() {\n  console.log('Generating AddressBookController state');\n\n  const numEntries = FIXTURES_CONFIG.withContacts;\n  if (numEntries > 0) {\n    return withAddressBook(numEntries);\n  }\n\n  return {};\n}\n\n/**\n * Generates the state for the AnnouncementController.\n * All the what's new modals are dismissed for convenience.\n *\n * @returns {object} The generated AnnouncementController state.\n */\nfunction generateAnnouncementControllerState() {\n  console.log('Generating AnnouncementController state');\n\n  const allAnnouncementsAlreadyShown = Object.keys(UI_NOTIFICATIONS).reduce(\n    (acc, val) => {\n      acc[val] = {\n        ...UI_NOTIFICATIONS[val],\n        isShown: true,\n      };\n      return acc;\n    },\n    {},\n  );\n  return allAnnouncementsAlreadyShown;\n}\n\n/**\n * Generates the state for the NotificationController.\n *\n * @param {string} account - The account address to add the notifications to.\n * @returns {object} The generated NotificationController state.\n */\nfunction generateNotificationControllerState(account) {\n  console.log('Generating NotificationController state');\n\n  let notifications = {};\n\n  if (FIXTURES_CONFIG.withUnreadNotifications > 0) {\n    notifications = withUnreadNotifications(\n      account,\n      FIXTURES_CONFIG.withUnreadNotifications,\n    );\n  }\n  return notifications;\n}\n\n/**\n * Generates the state for the NetworkController.\n * Sepolia is always pre-loaded and set as the active provider.\n *\n * @returns {object} The generated NetworkController state.\n */\nfunction generateNetworkControllerState() {\n  console.log('Generating NetworkController state');\n\n  const defaultNetworkState = {\n    ...defaultFixture().data.NetworkController,\n    networkConfigurations: {},\n    networksMetadata: {\n      sepolia: {\n        EIPS: {\n          1559: true,\n        },\n        status: 'available',\n      },\n    },\n    selectedNetworkClientId: 'sepolia',\n  };\n\n  if (FIXTURES_CONFIG.withNetworks) {\n    return {\n      ...defaultNetworkState,\n      ...FIXTURES_NETWORKS,\n    };\n  }\n  return defaultNetworkState;\n}\n\n/**\n * Generates the state for the PreferencesController.\n *\n * @param {string} accounts - The account addresses.\n * @returns {object} The generated PreferencesController state.\n */\nfunction generatePreferencesControllerState(accounts) {\n  console.log('Generating PreferencesController state');\n  let preferencesControllerState = {};\n\n  if (FIXTURES_CONFIG.withPreferences) {\n    preferencesControllerState = FIXTURES_PREFERENCES;\n  }\n\n  // Add account identities\n  preferencesControllerState.identities = Object.assign(\n    ...accounts.map((address, index) => ({\n      [address]: {\n        address,\n        lastSelected: 1725363500048,\n        name: `Account ${index + 1}`,\n      },\n    })),\n  );\n\n  preferencesControllerState.lostIdentities = Object.assign(\n    ...accounts.map((address, index) => ({\n      [address]: {\n        address,\n        lastSelected: 1725363500048,\n        name: `Account ${index + 1}`,\n      },\n    })),\n  );\n\n  return preferencesControllerState;\n}\n\n/**\n * Generates the state for the TokensController.\n *\n * @param {string} account - The account address to add the transactions to.\n * @returns {object} The generated TokensController state.\n */\nfunction generateTokensControllerState(account) {\n  console.log('Generating TokensController state');\n\n  const tokens = FIXTURES_ERC20_TOKENS;\n  if (FIXTURES_CONFIG.withErc20Tokens) {\n    // Update `myAccount` key for the account address\n    for (const network of Object.values(tokens.allTokens)) {\n      network[account] = network.myAccount;\n      delete network.myAccount;\n    }\n    return tokens;\n  }\n  return {};\n}\n\n/**\n * Generates the state for the TransactionController.\n *\n * @param {string} account - The account address to add the transactions to.\n * @returns {object} The generated TransactionController state.\n */\nfunction generateTransactionControllerState(account) {\n  console.log('Generating TransactionController state');\n\n  let transactions = {};\n\n  if (FIXTURES_CONFIG.withConfirmedTransactions > 0) {\n    transactions = withConfirmedTransactions(\n      account,\n      FIXTURES_CONFIG.withConfirmedTransactions,\n    );\n  }\n\n  return transactions;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayCompositeTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst abstract_1 = require(\"./abstract\");\nclass ArrayCompositeTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super();\n        this.type = type;\n        this._rootNode = _rootNode;\n        this.viewsChanged = new Map();\n        // TODO: Consider these properties are not accessible in the cache object persisted in the parent's cache.\n        // nodes, caches, _length, and nodesPopulated are mutated. Consider having them in a _cache object such that\n        // mutations affect the cache already found in the parent object\n        this.dirtyLength = false;\n        if (cache) {\n            this.nodes = cache.nodes;\n            this.caches = cache.caches;\n            this._length = cache.length;\n            this.nodesPopulated = cache.nodesPopulated;\n        }\n        else {\n            this.nodes = [];\n            this.caches = [];\n            this._length = this.type.tree_getLength(_rootNode);\n            // If there are exactly 0 nodes, nodesPopulated = true because 0 / 0 are in the nodes array\n            this.nodesPopulated = this._length === 0;\n        }\n    }\n    /**\n     * Number of elements in the array. Equal to un-commited length of the array\n     */\n    get length() {\n        return this._length;\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return {\n            nodes: this.nodes,\n            caches: this.caches,\n            length: this._length,\n            nodesPopulated: this.nodesPopulated,\n        };\n    }\n    /**\n     * Get element at `index`. Returns a view of the Composite element type.\n     *\n     * NOTE: Assumes that any view created here will change and will call .commit() on it.\n     * .get() should be used only for cases when something may mutate. To get all items without\n     * triggering a .commit() in all them use .getAllReadOnly().\n     */\n    get(index) {\n        const viewChanged = this.viewsChanged.get(index);\n        if (viewChanged) {\n            return viewChanged;\n        }\n        let node = this.nodes[index];\n        if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            this.nodes[index] = node;\n        }\n        // Keep a reference to the new view to call .commit on it latter, only if mutable\n        const view = this.type.elementType.getViewDU(node, this.caches[index]);\n        if (this.type.elementType.isViewMutable) {\n            this.viewsChanged.set(index, view);\n        }\n        // No need to persist the child's view cache since a second get returns this view instance.\n        // The cache is only persisted on commit where the viewsChanged map is dropped.\n        return view;\n    }\n    /**\n     * Get element at `index`. Returns a view of the Composite element type.\n     * DOES NOT PROPAGATE CHANGES: use only for reads and to skip parent references.\n     */\n    getReadonly(index) {\n        const viewChanged = this.viewsChanged.get(index);\n        if (viewChanged) {\n            return viewChanged;\n        }\n        let node = this.nodes[index];\n        if (node === undefined) {\n            node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n            this.nodes[index] = node;\n        }\n        return this.type.elementType.getViewDU(node, this.caches[index]);\n    }\n    // Did not implemented\n    // `getReadonlyValue(index: number): ValueOf<ElementType>`\n    // because it can break in unexpected ways if there are pending changes in this.viewsChanged.\n    // This function could first check if `this.viewsChanged` has a view for `index` and commit it,\n    // but that would be pretty slow, and the same result can be achieved with\n    // `this.getReadonly(index).toValue()`\n    /**\n     * Set Composite element type `view` at `index`\n     */\n    set(index, view) {\n        if (index >= this._length) {\n            throw Error(`Error setting index over length ${index} > ${this._length}`);\n        }\n        // When setting a view:\n        // - Not necessary to commit node\n        // - Not necessary to persist cache\n        // Just keeping a reference to the view in this.viewsChanged ensures consistency\n        this.viewsChanged.set(index, view);\n    }\n    /**\n     * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand\n     */\n    getAllReadonly() {\n        this.populateAllNodes();\n        const views = new Array(this._length);\n        for (let i = 0; i < this._length; i++) {\n            views[i] = this.type.elementType.getViewDU(this.nodes[i], this.caches[i]);\n        }\n        return views;\n    }\n    /**\n     * WARNING: Returns all commited changes, if there are any pending changes commit them beforehand\n     */\n    getAllReadonlyValues() {\n        this.populateAllNodes();\n        const values = new Array(this._length);\n        for (let i = 0; i < this._length; i++) {\n            values[i] = this.type.elementType.tree_toValue(this.nodes[i]);\n        }\n        return values;\n    }\n    commit() {\n        if (this.viewsChanged.size === 0) {\n            return;\n        }\n        const nodesChanged = [];\n        for (const [index, view] of this.viewsChanged) {\n            const node = this.type.elementType.commitViewDU(view);\n            // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal\n            this.nodes[index] = node;\n            nodesChanged.push({ index, node });\n            // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'\n            const cache = this.type.elementType.cacheOfViewDU(view);\n            if (cache)\n                this.caches[index] = cache;\n        }\n        // TODO: Optimize to loop only once, Numerical sort ascending\n        const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);\n        const indexes = nodesChangedSorted.map((entry) => entry.index);\n        const nodes = nodesChangedSorted.map((entry) => entry.node);\n        const chunksNode = this.type.tree_getChunksNode(this._rootNode);\n        // TODO: Ensure fast setNodesAtDepth() method is correct\n        const newChunksNode = persistent_merkle_tree_1.setNodesAtDepth(chunksNode, this.type.chunkDepth, indexes, nodes);\n        this._rootNode = this.type.tree_setChunksNode(this._rootNode, newChunksNode, this.dirtyLength ? this._length : undefined);\n        this.viewsChanged.clear();\n        this.dirtyLength = false;\n    }\n    clearCache() {\n        this.nodes = [];\n        this.caches = [];\n        this.nodesPopulated = false;\n        // It's not necessary to clear this.viewsChanged since they have no effect on the cache.\n        // However preserving _SOME_ caches results in a very unpredictable experience.\n        this.viewsChanged.clear();\n        // Reset cached length only if it has been mutated\n        if (this.dirtyLength) {\n            this._length = this.type.tree_getLength(this._rootNode);\n            this.dirtyLength = false;\n        }\n    }\n    populateAllNodes() {\n        // If there's uncommited changes it may break.\n        // this.length can be increased but this._rootNode doesn't have that item\n        if (this.viewsChanged.size > 0) {\n            throw Error(\"Must commit changes before reading all nodes\");\n        }\n        if (!this.nodesPopulated) {\n            this.nodes = persistent_merkle_tree_1.getNodesAtDepth(this._rootNode, this.type.depth, 0, this.length);\n            this.nodesPopulated = true;\n        }\n    }\n}\nexports.ArrayCompositeTreeViewDU = ArrayCompositeTreeViewDU;\n//# sourceMappingURL=arrayComposite.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitArrayTreeViewDU = void 0;\nconst abstract_1 = require(\"./abstract\");\n/**\n * Thin wrapper around BitArray to upstream changes after `this.commit()`\n */\nclass BitArrayTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, _rootNode) {\n        super();\n        this.type = type;\n        this._rootNode = _rootNode;\n        /** Cached BitArray instance computed only on demand */\n        this._bitArray = null;\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return;\n    }\n    commit() {\n        if (this._bitArray !== null) {\n            this._rootNode = this.type.value_toTree(this._bitArray);\n        }\n    }\n    // Wrapped API from BitArray\n    /** @see BitArray.uint8Array */\n    get uint8Array() {\n        return this.bitArray.uint8Array;\n    }\n    /** @see BitArray.bitLen */\n    get bitLen() {\n        return this.bitArray.bitLen;\n    }\n    /** @see BitArray.get */\n    get(bitIndex) {\n        return this.bitArray.get(bitIndex);\n    }\n    /** @see BitArray.set */\n    set(bitIndex, bit) {\n        this.bitArray.set(bitIndex, bit);\n    }\n    /** @see BitArray.mergeOrWith */\n    mergeOrWith(bitArray2) {\n        this.bitArray.mergeOrWith(bitArray2);\n    }\n    /** @see BitArray.intersectValues */\n    intersectValues(values) {\n        return this.bitArray.intersectValues(values);\n    }\n    /** @see BitArray.getTrueBitIndexes */\n    getTrueBitIndexes() {\n        return this.bitArray.getTrueBitIndexes();\n    }\n    /** @see BitArray.getSingleTrueBit */\n    getSingleTrueBit() {\n        return this.bitArray.getSingleTrueBit();\n    }\n    /** @see BitArray.toBoolArray */\n    toBoolArray() {\n        return this.bitArray.toBoolArray();\n    }\n    /** Lazily computed bitArray instance */\n    get bitArray() {\n        if (this._bitArray === null) {\n            this._bitArray = this.type.tree_toValue(this._rootNode);\n        }\n        return this._bitArray;\n    }\n    clearCache() {\n        this._bitArray = null;\n    }\n}\nexports.BitArrayTreeViewDU = BitArrayTreeViewDU;\n//# sourceMappingURL=bitArray.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContainerTreeViewDUClass = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst basic_1 = require(\"../type/basic\");\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\nclass ContainerTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super();\n        this.type = type;\n        this._rootNode = _rootNode;\n        this.nodes = [];\n        this.nodesChanged = new Set();\n        this.viewsChanged = new Map();\n        if (cache) {\n            this.nodes = cache.nodes;\n            this.caches = cache.caches;\n            this.nodesPopulated = cache.nodesPopulated;\n        }\n        else {\n            this.nodes = [];\n            this.caches = [];\n            this.nodesPopulated = false;\n        }\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return {\n            nodes: this.nodes,\n            caches: this.caches,\n            nodesPopulated: this.nodesPopulated,\n        };\n    }\n    commit() {\n        if (this.nodesChanged.size === 0 && this.viewsChanged.size === 0) {\n            return;\n        }\n        const nodesChanged = [];\n        for (const [index, view] of this.viewsChanged) {\n            const fieldType = this.type.fieldsEntries[index].fieldType;\n            const node = fieldType.commitViewDU(view);\n            // Set new node in nodes array to ensure data represented in the tree and fast nodes access is equal\n            this.nodes[index] = node;\n            nodesChanged.push({ index, node });\n            // Cache the view's caches to preserve it's data after 'this.viewsChanged.clear()'\n            const cache = fieldType.cacheOfViewDU(view);\n            if (cache)\n                this.caches[index] = cache;\n        }\n        for (const index of this.nodesChanged) {\n            nodesChanged.push({ index, node: this.nodes[index] });\n        }\n        // TODO: Optimize to loop only once, Numerical sort ascending\n        const nodesChangedSorted = nodesChanged.sort((a, b) => a.index - b.index);\n        const indexes = nodesChangedSorted.map((entry) => entry.index);\n        const nodes = nodesChangedSorted.map((entry) => entry.node);\n        this._rootNode = persistent_merkle_tree_1.setNodesAtDepth(this._rootNode, this.type.depth, indexes, nodes);\n        this.nodesChanged.clear();\n        this.viewsChanged.clear();\n    }\n    clearCache() {\n        this.nodes = [];\n        this.caches = [];\n        this.nodesPopulated = false;\n        // Must clear nodesChanged, otherwise a subsequent commit call will break, because it assumes a node is there\n        this.nodesChanged.clear();\n        // It's not necessary to clear this.viewsChanged since they have no effect on the cache.\n        // However preserving _SOME_ caches results in a very unpredictable experience.\n        this.viewsChanged.clear();\n    }\n}\nfunction getContainerTreeViewDUClass(type) {\n    class CustomContainerTreeViewDU extends ContainerTreeViewDU {\n    }\n    // Dynamically define prototype methods\n    for (let index = 0; index < type.fieldsEntries.length; index++) {\n        const { fieldName, fieldType } = type.fieldsEntries[index];\n        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n        // and use the cached views array to store the new node.\n        if (basic_1.isBasicType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // TODO: Review the memory cost of this closures\n                get: function () {\n                    // First walk through the tree to get the root node for that index\n                    let node = this.nodes[index];\n                    if (node === undefined) {\n                        node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n                        this.nodes[index] = node;\n                    }\n                    return fieldType.tree_getFromNode(node);\n                },\n                set: function (value) {\n                    // Create new node if current leafNode is not dirty\n                    let nodeChanged;\n                    if (this.nodesChanged.has(index)) {\n                        // TODO: This assumes that node has already been populated\n                        nodeChanged = this.nodes[index];\n                    }\n                    else {\n                        const nodePrev = (this.nodes[index] ?? persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index));\n                        nodeChanged = nodePrev.clone();\n                        // Store the changed node in the nodes cache\n                        this.nodes[index] = nodeChanged;\n                        this.nodesChanged.add(index);\n                    }\n                    fieldType.tree_setToNode(nodeChanged, value);\n                },\n            });\n        }\n        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n        // set it to the parent tree in the field gindex.\n        else if (composite_1.isCompositeType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // Returns TreeViewDU of fieldName\n                get: function () {\n                    const viewChanged = this.viewsChanged.get(index);\n                    if (viewChanged) {\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                        return viewChanged;\n                    }\n                    let node = this.nodes[index];\n                    if (node === undefined) {\n                        node = persistent_merkle_tree_1.getNodeAtDepth(this._rootNode, this.type.depth, index);\n                        this.nodes[index] = node;\n                    }\n                    // Keep a reference to the new view to call .commit on it latter, only if mutable\n                    const view = fieldType.getViewDU(node, this.caches[index]);\n                    if (fieldType.isViewMutable) {\n                        this.viewsChanged.set(index, view);\n                    }\n                    // No need to persist the child's view cache since a second get returns this view instance.\n                    // The cache is only persisted on commit where the viewsChanged map is dropped.\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return view;\n                },\n                // Expects TreeViewDU of fieldName\n                set: function (view) {\n                    // When setting a view:\n                    // - Not necessary to commit node\n                    // - Not necessary to persist cache\n                    // Just keeping a reference to the view in this.viewsChanged ensures consistency\n                    this.viewsChanged.set(index, view);\n                },\n            });\n        }\n        // Should never happen\n        else {\n            /* istanbul ignore next - unreachable code */\n            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n        }\n    }\n    // Change class name\n    Object.defineProperty(CustomContainerTreeViewDU, \"name\", { value: type.typeName, writable: false });\n    return CustomContainerTreeViewDU;\n}\nexports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;\n//# sourceMappingURL=container.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContainerTreeViewDUClass = void 0;\nconst composite_1 = require(\"../type/composite\");\nconst abstract_1 = require(\"./abstract\");\n/* eslint-disable @typescript-eslint/member-ordering */\nclass ContainerTreeViewDU extends abstract_1.TreeViewDU {\n    constructor(type, node) {\n        super();\n        this.type = type;\n        this.valueChanged = null;\n        this._rootNode = node;\n    }\n    get node() {\n        return this._rootNode;\n    }\n    get cache() {\n        return;\n    }\n    commit() {\n        if (this.valueChanged === null) {\n            return;\n        }\n        const value = this.valueChanged;\n        this.valueChanged = null;\n        this._rootNode = this.type.value_toTree(value);\n    }\n    clearCache() {\n        this.valueChanged = null;\n    }\n}\nfunction getContainerTreeViewDUClass(type) {\n    class CustomContainerTreeViewDU extends ContainerTreeViewDU {\n    }\n    // Dynamically define prototype methods\n    for (let index = 0; index < type.fieldsEntries.length; index++) {\n        const { fieldName, fieldType } = type.fieldsEntries[index];\n        // If the field type is basic, the value to get and set will be the actual 'struct' value (i.e. a JS number).\n        // The view must use the tree_getFromNode() and tree_setToNode() methods to persist the struct data to the node,\n        // and use the cached views array to store the new node.\n        if (fieldType.isBasic) {\n            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // TODO: Review the memory cost of this closures\n                get: function () {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return (this.valueChanged || this._rootNode.value)[fieldName];\n                },\n                set: function (value) {\n                    if (this.valueChanged === null) {\n                        this.valueChanged = this.type.clone(this._rootNode.value);\n                    }\n                    this.valueChanged[fieldName] = value;\n                },\n            });\n        }\n        // If the field type is composite, the value to get and set will be another TreeView. The parent TreeView must\n        // cache the view itself to retain the caches of the child view. To set a value the view must return a node to\n        // set it to the parent tree in the field gindex.\n        else if (composite_1.isCompositeType(fieldType)) {\n            Object.defineProperty(CustomContainerTreeViewDU.prototype, fieldName, {\n                configurable: false,\n                enumerable: true,\n                // Returns TreeViewDU of fieldName\n                get: function () {\n                    const value = this.valueChanged || this._rootNode.value;\n                    return fieldType.toViewDU(value[fieldName]);\n                },\n                // Expects TreeViewDU of fieldName\n                set: function (view) {\n                    if (this.valueChanged === null) {\n                        this.valueChanged = this.type.clone(this._rootNode.value);\n                    }\n                    const value = fieldType.toValueFromViewDU(view);\n                    this.valueChanged[fieldName] = value;\n                },\n            });\n        }\n        // Should never happen\n        else {\n            /* istanbul ignore next - unreachable code */\n            throw Error(`Unknown fieldType ${fieldType.typeName} for fieldName ${fieldName}`);\n        }\n    }\n    // Change class name\n    Object.defineProperty(CustomContainerTreeViewDU, \"name\", { value: type.typeName, writable: false });\n    return CustomContainerTreeViewDU;\n}\nexports.getContainerTreeViewDUClass = getContainerTreeViewDUClass;\n//# sourceMappingURL=containerNodeStruct.js.map","module.exports = class FixedFIFO {\n  constructor (hwm) {\n    if (!(hwm > 0) || ((hwm - 1) & hwm) !== 0) throw new Error('Max size for a FixedFIFO should be a power of two')\n    this.buffer = new Array(hwm)\n    this.mask = hwm - 1\n    this.top = 0\n    this.btm = 0\n    this.next = null\n  }\n\n  clear () {\n    this.top = this.btm = 0\n    this.next = null\n    this.buffer.fill(undefined)\n  }\n\n  push (data) {\n    if (this.buffer[this.top] !== undefined) return false\n    this.buffer[this.top] = data\n    this.top = (this.top + 1) & this.mask\n    return true\n  }\n\n  shift () {\n    const last = this.buffer[this.btm]\n    if (last === undefined) return undefined\n    this.buffer[this.btm] = undefined\n    this.btm = (this.btm + 1) & this.mask\n    return last\n  }\n\n  peek () {\n    return this.buffer[this.btm]\n  }\n\n  isEmpty () {\n    return this.buffer[this.btm] === undefined\n  }\n}\n","const FixedFIFO = require('./fixed-size')\n\nmodule.exports = class FastFIFO {\n  constructor (hwm) {\n    this.hwm = hwm || 16\n    this.head = new FixedFIFO(this.hwm)\n    this.tail = this.head\n    this.length = 0\n  }\n\n  clear () {\n    this.head = this.tail\n    this.head.clear()\n    this.length = 0\n  }\n\n  push (val) {\n    this.length++\n    if (!this.head.push(val)) {\n      const prev = this.head\n      this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length)\n      this.head.push(val)\n    }\n  }\n\n  shift () {\n    if (this.length !== 0) this.length--\n    const val = this.tail.shift()\n    if (val === undefined && this.tail.next) {\n      const next = this.tail.next\n      this.tail.next = null\n      this.tail = next\n      return this.tail.shift()\n    }\n\n    return val\n  }\n\n  peek () {\n    const val = this.tail.peek()\n    if (val === undefined && this.tail.next) return this.tail.next.peek()\n    return val\n  }\n\n  isEmpty () {\n    return this.length === 0\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListBasicTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayBasic_1 = require(\"./arrayBasic\");\nclass ListBasicTreeViewDU extends arrayBasic_1.ArrayBasicTreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super(type, _rootNode, cache);\n        this.type = type;\n        this._rootNode = _rootNode;\n    }\n    /**\n     * Adds one value element at the end of the array and adds 1 to the un-commited ViewDU length\n     */\n    push(value) {\n        if (this._length >= this.type.limit) {\n            throw Error(\"Error pushing over limit\");\n        }\n        // Mutate length before .set()\n        this.dirtyLength = true;\n        const index = this._length++;\n        // If in new node..\n        if (index % this.type.itemsPerChunk === 0) {\n            // Set a zero node to the nodes array to avoid a navigation downwards in .set()\n            const chunkIndex = Math.floor(index / this.type.itemsPerChunk);\n            this.nodes[chunkIndex] = persistent_merkle_tree_1.zeroNode(0);\n        }\n        this.set(index, value);\n    }\n}\nexports.ListBasicTreeViewDU = ListBasicTreeViewDU;\n//# sourceMappingURL=listBasic.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ListCompositeTreeViewDU = void 0;\nconst persistent_merkle_tree_1 = require(\"@chainsafe/persistent-merkle-tree\");\nconst arrayComposite_1 = require(\"./arrayComposite\");\nclass ListCompositeTreeViewDU extends arrayComposite_1.ArrayCompositeTreeViewDU {\n    constructor(type, _rootNode, cache) {\n        super(type, _rootNode, cache);\n        this.type = type;\n        this._rootNode = _rootNode;\n    }\n    /**\n     * Adds one value element at the end of the array and adds 1 to the un-commited ViewDU length\n     */\n    push(view) {\n        if (this._length >= this.type.limit) {\n            throw Error(\"Error pushing over limit\");\n        }\n        this.dirtyLength = true;\n        const index = this._length++;\n        // No need for pre-initialization like in ListBasic.push since ArrayCompositeTreeViewDU.set() doesn't do a get node\n        this.set(index, view);\n    }\n    /**\n     * Returns a new ListCompositeTreeViewDU instance with the values from 0 to `index`.\n     * The new list is equivalent to (pseudo-code):\n     *\n     * ```ts\n     * const nodes = getChunkNodes()\n     * return listFromChunkNodes(nodes.slice(0, index + 1))\n     * ```\n     *\n     * To achieve it, rebinds the underlying tree zero-ing all nodes right of `index`.\n     *\n     * Note: Using index = -1, returns an empty list of length 0.\n     */\n    sliceTo(index) {\n        // Commit before getting rootNode to ensure all pending data is in the rootNode\n        this.commit();\n        const rootNode = this._rootNode;\n        const length = this.type.tree_getLength(rootNode);\n        // All nodes beyond length are already zero\n        // Array of length 2: [X,X,0,0], for index >= 1 no action needed\n        if (index >= length - 1) {\n            return this;\n        }\n        // Since this is a List, do the treeZeroAfterIndex operation on the chunks tree\n        const chunksNode = this.type.tree_getChunksNode(rootNode);\n        const newChunksNode = persistent_merkle_tree_1.treeZeroAfterIndex(chunksNode, this.type.chunkDepth, index);\n        // Must set new length and commit to tree to restore the same tree at that index\n        const newLength = index + 1;\n        const newRootNode = this.type.tree_setChunksNode(rootNode, newChunksNode, newLength);\n        return this.type.getViewDU(newRootNode);\n    }\n}\nexports.ListCompositeTreeViewDU = ListCompositeTreeViewDU;\n//# sourceMappingURL=listComposite.js.map","\"use strict\";\nexports.__esModule = true;\nexports.distance = exports.closest = void 0;\nvar peq = new Uint32Array(0x10000);\nvar myers_32 = function (a, b) {\n    var n = a.length;\n    var m = b.length;\n    var lst = 1 << (n - 1);\n    var pv = -1;\n    var mv = 0;\n    var sc = n;\n    var i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] |= 1 << i;\n    }\n    for (i = 0; i < m; i++) {\n        var eq = peq[b.charCodeAt(i)];\n        var xv = eq | mv;\n        eq |= ((eq & pv) + pv) ^ pv;\n        mv |= ~(eq | pv);\n        pv &= eq;\n        if (mv & lst) {\n            sc++;\n        }\n        if (pv & lst) {\n            sc--;\n        }\n        mv = (mv << 1) | 1;\n        pv = (pv << 1) | ~(xv | mv);\n        mv &= xv;\n    }\n    i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] = 0;\n    }\n    return sc;\n};\nvar myers_x = function (b, a) {\n    var n = a.length;\n    var m = b.length;\n    var mhc = [];\n    var phc = [];\n    var hsize = Math.ceil(n / 32);\n    var vsize = Math.ceil(m / 32);\n    for (var i = 0; i < hsize; i++) {\n        phc[i] = -1;\n        mhc[i] = 0;\n    }\n    var j = 0;\n    for (; j < vsize - 1; j++) {\n        var mv_1 = 0;\n        var pv_1 = -1;\n        var start_1 = j * 32;\n        var vlen_1 = Math.min(32, m) + start_1;\n        for (var k = start_1; k < vlen_1; k++) {\n            peq[b.charCodeAt(k)] |= 1 << k;\n        }\n        for (var i = 0; i < n; i++) {\n            var eq = peq[a.charCodeAt(i)];\n            var pb = (phc[(i / 32) | 0] >>> i) & 1;\n            var mb = (mhc[(i / 32) | 0] >>> i) & 1;\n            var xv = eq | mv_1;\n            var xh = ((((eq | mb) & pv_1) + pv_1) ^ pv_1) | eq | mb;\n            var ph = mv_1 | ~(xh | pv_1);\n            var mh = pv_1 & xh;\n            if ((ph >>> 31) ^ pb) {\n                phc[(i / 32) | 0] ^= 1 << i;\n            }\n            if ((mh >>> 31) ^ mb) {\n                mhc[(i / 32) | 0] ^= 1 << i;\n            }\n            ph = (ph << 1) | pb;\n            mh = (mh << 1) | mb;\n            pv_1 = mh | ~(xv | ph);\n            mv_1 = ph & xv;\n        }\n        for (var k = start_1; k < vlen_1; k++) {\n            peq[b.charCodeAt(k)] = 0;\n        }\n    }\n    var mv = 0;\n    var pv = -1;\n    var start = j * 32;\n    var vlen = Math.min(32, m - start) + start;\n    for (var k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    var score = m;\n    for (var i = 0; i < n; i++) {\n        var eq = peq[a.charCodeAt(i)];\n        var pb = (phc[(i / 32) | 0] >>> i) & 1;\n        var mb = (mhc[(i / 32) | 0] >>> i) & 1;\n        var xv = eq | mv;\n        var xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n        var ph = mv | ~(xh | pv);\n        var mh = pv & xh;\n        score += (ph >>> (m - 1)) & 1;\n        score -= (mh >>> (m - 1)) & 1;\n        if ((ph >>> 31) ^ pb) {\n            phc[(i / 32) | 0] ^= 1 << i;\n        }\n        if ((mh >>> 31) ^ mb) {\n            mhc[(i / 32) | 0] ^= 1 << i;\n        }\n        ph = (ph << 1) | pb;\n        mh = (mh << 1) | mb;\n        pv = mh | ~(xv | ph);\n        mv = ph & xv;\n    }\n    for (var k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] = 0;\n    }\n    return score;\n};\nvar distance = function (a, b) {\n    if (a.length < b.length) {\n        var tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n    if (a.length <= 32) {\n        return myers_32(a, b);\n    }\n    return myers_x(a, b);\n};\nexports.distance = distance;\nvar closest = function (str, arr) {\n    var min_distance = Infinity;\n    var min_index = 0;\n    for (var i = 0; i < arr.length; i++) {\n        var dist = distance(str, arr[i]);\n        if (dist < min_distance) {\n            min_distance = dist;\n            min_index = i;\n        }\n    }\n    return arr[min_index];\n};\nexports.closest = closest;\n","// @ts-check\n'use strict'\nconst { Buffer } = require('buffer')\n\n/**\n * @typedef {Object} Codec\n * @property {function(Uint8Array):string} encode\n * @property {function(string):Uint8Array} decode\n *\n * @typedef {function(string):Codec} CodecFactory\n */\n\nclass Base {\n  /**\n   * @param {string} name\n   * @param {string} code\n   * @param {CodecFactory} implementation\n   * @param {string} alphabet\n   */\n  constructor (name, code, implementation, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = Buffer.from(this.code)\n    this.alphabet = alphabet\n    this.engine = implementation(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.engine.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.engine.decode(string)\n  }\n}\n\nmodule.exports = Base\n","// @ts-check\n'use strict'\n\nconst baseX = require('base-x')\nconst Base = require('./base.js')\nconst rfc4648 = require('./rfc4648')\nconst { decodeText, encodeText } = require('./util')\n\nconst identity = () => {\n  return {\n    encode: decodeText,\n    decode: encodeText\n  }\n}\n\n/**\n * @typedef {__import__('./base').CodecFactory} CodecFactory\n *\n * name, code, implementation, alphabet\n * @type {Array<[string, string, CodecFactory, string]>}\n */\nconst constants = [\n  ['identity', '\\x00', identity, ''],\n  ['base2', '0', rfc4648(1), '01'],\n  ['base8', '7', rfc4648(3), '01234567'],\n  ['base10', '9', baseX, '0123456789'],\n  ['base16', 'f', rfc4648(4), '0123456789abcdef'],\n  ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],\n  ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],\n  ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],\n  ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],\n  ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],\n  ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],\n  ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],\n  ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],\n  ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],\n  ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],\n  ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],\n  ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\n  ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\n  ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\n  ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\n  ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\n]\n\nconst names = constants.reduce((prev, tupple) => {\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\n  return prev\n}, {})\n\nconst codes = constants.reduce((prev, tupple) => {\n  prev[tupple[1]] = names[tupple[0]]\n  return prev\n}, {})\n\nmodule.exports = {\n  names,\n  codes\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction default_1(pkgName, pkgVersion, opts) {\n    let registry;\n    if (opts === null || opts === void 0 ? void 0 : opts.registry) {\n        registry = opts.registry.endsWith('/') ? opts.registry : `${opts.registry}/`;\n    }\n    else {\n        registry = 'https://registry.npmjs.org/';\n    }\n    const scopelessName = getScopelessName(pkgName);\n    return `${registry}${pkgName}/-/${scopelessName}-${removeBuildMetadataFromVersion(pkgVersion)}.tgz`;\n}\nexports.default = default_1;\nfunction removeBuildMetadataFromVersion(version) {\n    const plusPos = version.indexOf('+');\n    if (plusPos === -1)\n        return version;\n    return version.substring(0, plusPos);\n}\nfunction getScopelessName(name) {\n    if (name[0] !== '@') {\n        return name;\n    }\n    return name.split('/')[1];\n}\n//# sourceMappingURL=index.js.map","// @ts-check\n/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n * @module Multibase\n */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst constants = require('./constants')\nconst { decodeText, asBuffer } = require('./util')\n\n/** @typedef {__import__(\"./base\")} Base */\n\n/**\n * Create a new buffer with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer')\n  }\n  const { name, codeBuf } = encoding(nameOrCode)\n  validEncode(name, buf)\n\n  const buffer = Buffer.alloc(codeBuf.length + buf.length)\n  buffer.set(codeBuf, 0)\n  buffer.set(buf, codeBuf.length)\n\n  return buffer\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode (nameOrCode, buf) {\n  const enc = encoding(nameOrCode)\n\n  return Buffer.concat([enc.codeBuf, Buffer.from(enc.encode(buf))])\n}\n\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode (data) {\n  if (ArrayBuffer.isView(data)) {\n    data = decodeText(data)\n  }\n  const prefix = data[0]\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase()\n  }\n  const enc = encoding(data[0])\n  return asBuffer(enc.decode(data.substring(1)))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n * @returns {false|string}\n */\nfunction isEncoded (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false\n  }\n\n  try {\n    const enc = encoding(data[0])\n    return enc.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {string} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode (name, buf) {\n  const enc = encoding(name)\n  enc.decode(decodeText(buf))\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {string|number} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding (nameOrCode) {\n  if (constants.names[nameOrCode]) {\n    return constants.names[nameOrCode]\n  } else if (constants.codes[nameOrCode]) {\n    return constants.codes[nameOrCode]\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  return encoding(data[0])\n}\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.encoding = encoding\nexports.encodingFromData = encodingFromData\nexports.names = Object.freeze(constants.names)\nexports.codes = Object.freeze(constants.codes)\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeAddressTags = exports.fetchAddressTags = exports.addAddressTags = void 0;\nvar constants_1 = require(\"../constants\");\nvar utilities_1 = require(\"./utilities\");\nvar addAddressTags = function (tags) { return __awaiter(void 0, void 0, void 0, function () {\n    var records;\n    return __generator(this, function (_a) {\n        records = tags.reduce(function (acc, tag) {\n            var key = Object.keys(tag)[0];\n            acc[key] = tag[key];\n            return acc;\n        }, {});\n        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.addKvRecords({ records: records }); })];\n    });\n}); };\nexports.addAddressTags = addAddressTags;\nvar fetchAddressTags = function (_a) {\n    var _b = _a === void 0 ? { n: constants_1.MAX_ADDR, start: 0 } : _a, n = _b.n, start = _b.start;\n    return __awaiter(void 0, void 0, void 0, function () {\n        var addressTags, remainingToFetch, fetched;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    addressTags = [];\n                    remainingToFetch = n;\n                    fetched = start;\n                    _c.label = 1;\n                case 1:\n                    if (!(remainingToFetch > 0)) return [3 /*break*/, 3];\n                    return [4 /*yield*/, (0, utilities_1.queue)(function (client) {\n                            return client\n                                .getKvRecords({\n                                start: fetched,\n                                n: remainingToFetch > constants_1.MAX_ADDR ? constants_1.MAX_ADDR : remainingToFetch,\n                            })\n                                .then(function (res) { return __awaiter(void 0, void 0, void 0, function () {\n                                return __generator(this, function (_a) {\n                                    addressTags.push.apply(addressTags, res.records);\n                                    fetched = res.fetched + fetched;\n                                    remainingToFetch = res.total - fetched;\n                                    return [2 /*return*/];\n                                });\n                            }); });\n                        })];\n                case 2:\n                    _c.sent();\n                    return [3 /*break*/, 1];\n                case 3: return [2 /*return*/, addressTags];\n            }\n        });\n    });\n};\nexports.fetchAddressTags = fetchAddressTags;\nvar removeAddressTags = function (tags) { return __awaiter(void 0, void 0, void 0, function () {\n    var ids;\n    return __generator(this, function (_a) {\n        ids = tags.map(function (tag) { return \"\".concat(tag.id); });\n        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.removeKvRecords({ ids: ids }); })];\n    });\n}); };\nexports.removeAddressTags = removeAddressTags;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchLedgerLegacyAddresses = exports.fetchLedgerLiveAddresses = exports.fetchSolanaAddresses = exports.fetchBtcWrappedSegwitAddresses = exports.fetchBtCSegwitAddresses = exports.fetchBtcLegacyAddresses = exports.fetchAddresses = void 0;\nvar constants_1 = require(\"../constants\");\nvar utilities_1 = require(\"./utilities\");\nvar fetchAddresses = function (overrides) { return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        return [2 /*return*/, (0, utilities_1.queue)(function (client) {\n                return client\n                    .getAddresses(__assign({ startPath: constants_1.DEFAULT_ETH_DERIVATION, n: constants_1.MAX_ADDR }, overrides))\n                    .then(function (addrs) { return addrs.map(function (addr) { return \"\".concat(addr); }); });\n            })];\n    });\n}); };\nexports.fetchAddresses = fetchAddresses;\nvar fetchBtcLegacyAddresses = function (n, startPathIndex) {\n    if (n === void 0) { n = constants_1.MAX_ADDR; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, (0, exports.fetchAddresses)({\n                    startPath: (0, utilities_1.getStartPath)(constants_1.BTC_LEGACY_DERIVATION, startPathIndex),\n                    n: n,\n                })];\n        });\n    });\n};\nexports.fetchBtcLegacyAddresses = fetchBtcLegacyAddresses;\nvar fetchBtCSegwitAddresses = function (n, startPathIndex) {\n    if (n === void 0) { n = constants_1.MAX_ADDR; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, (0, exports.fetchAddresses)({\n                    startPath: (0, utilities_1.getStartPath)(constants_1.BTC_SEGWIT_DERIVATION, startPathIndex),\n                    n: n,\n                })];\n        });\n    });\n};\nexports.fetchBtCSegwitAddresses = fetchBtCSegwitAddresses;\nvar fetchBtcWrappedSegwitAddresses = function (n, startPathIndex) {\n    if (n === void 0) { n = constants_1.MAX_ADDR; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, (0, exports.fetchAddresses)({\n                    startPath: (0, utilities_1.getStartPath)(constants_1.BTC_WRAPPED_SEGWIT_DERIVATION, startPathIndex),\n                    n: n,\n                })];\n        });\n    });\n};\nexports.fetchBtcWrappedSegwitAddresses = fetchBtcWrappedSegwitAddresses;\nvar fetchSolanaAddresses = function (n, startPathIndex) {\n    if (n === void 0) { n = constants_1.MAX_ADDR; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, (0, exports.fetchAddresses)({\n                    startPath: (0, utilities_1.getStartPath)(constants_1.SOLANA_DERIVATION, startPathIndex, 2),\n                    n: n,\n                })];\n        });\n    });\n};\nexports.fetchSolanaAddresses = fetchSolanaAddresses;\nvar fetchLedgerLiveAddresses = function (n, startPathIndex) {\n    if (n === void 0) { n = constants_1.MAX_ADDR; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        var addresses, _loop_1, i;\n        return __generator(this, function (_a) {\n            addresses = [];\n            _loop_1 = function (i) {\n                addresses.push((0, utilities_1.queue)(function (client) {\n                    return client\n                        .getAddresses({\n                        startPath: (0, utilities_1.getStartPath)(constants_1.LEDGER_LIVE_DERIVATION, startPathIndex + i, 2),\n                        n: 1,\n                    })\n                        .then(function (addresses) { return addresses.map(function (address) { return \"\".concat(address); }); });\n                }));\n            };\n            for (i = 0; i < n; i++) {\n                _loop_1(i);\n            }\n            return [2 /*return*/, Promise.all(addresses)];\n        });\n    });\n};\nexports.fetchLedgerLiveAddresses = fetchLedgerLiveAddresses;\nvar fetchLedgerLegacyAddresses = function (n, startPathIndex) {\n    if (n === void 0) { n = constants_1.MAX_ADDR; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        var addresses, _loop_2, i;\n        return __generator(this, function (_a) {\n            addresses = [];\n            _loop_2 = function (i) {\n                addresses.push((0, utilities_1.queue)(function (client) {\n                    return client\n                        .getAddresses({\n                        startPath: (0, utilities_1.getStartPath)(constants_1.LEDGER_LEGACY_DERIVATION, startPathIndex + i, 3),\n                        n: 1,\n                    })\n                        .then(function (addresses) { return addresses.map(function (address) { return \"\".concat(address); }); });\n                }));\n            };\n            for (i = 0; i < n; i++) {\n                _loop_2(i);\n            }\n            return [2 /*return*/, Promise.all(addresses)];\n        });\n    });\n};\nexports.fetchLedgerLegacyAddresses = fetchLedgerLegacyAddresses;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchActiveWallets = exports.pair = exports.connect = exports.setup = exports.getClient = void 0;\nvar utilities_1 = require(\"./utilities\");\nObject.defineProperty(exports, \"getClient\", { enumerable: true, get: function () { return utilities_1.getClient; } });\nObject.defineProperty(exports, \"setup\", { enumerable: true, get: function () { return utilities_1.setup; } });\nvar utilities_2 = require(\"./utilities\");\nvar connect = function (deviceId) { return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        return [2 /*return*/, (0, utilities_2.queue)(function (client) { return client.connect(deviceId); })];\n    });\n}); };\nexports.connect = connect;\nvar pair = function (pairingCode) { return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        return [2 /*return*/, (0, utilities_2.queue)(function (client) { return client.pair(pairingCode); })];\n    });\n}); };\nexports.pair = pair;\nvar fetchActiveWallets = function () { return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        return [2 /*return*/, (0, utilities_2.queue)(function (client) { return client.fetchActiveWallet(); })];\n    });\n}); };\nexports.fetchActiveWallets = fetchActiveWallets;\n__exportStar(require(\"./addresses\"), exports);\n__exportStar(require(\"./addressTags\"), exports);\n__exportStar(require(\"./signing\"), exports);\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.signSolanaTx = exports.signBtcWrappedSegwitTx = exports.signBtcSegwitTx = exports.signBtcLegacyTx = exports.signMessage = exports.sign = void 0;\nvar __1 = require(\"..\");\nvar constants_1 = require(\"../constants\");\nvar utilities_1 = require(\"./utilities\");\nvar sign = function (payload, overrides) { return __awaiter(void 0, void 0, void 0, function () {\n    var tx;\n    return __generator(this, function (_a) {\n        tx = __assign({ data: {\n                signerPath: constants_1.DEFAULT_ETH_DERIVATION,\n                curveType: __1.Constants.SIGNING.CURVES.SECP256K1,\n                hashType: __1.Constants.SIGNING.HASHES.KECCAK256,\n                encodingType: __1.Constants.SIGNING.ENCODINGS.EVM,\n                payload: payload,\n            } }, overrides);\n        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.sign(tx); })];\n    });\n}); };\nexports.sign = sign;\nvar signMessage = function (payload, overrides) { return __awaiter(void 0, void 0, void 0, function () {\n    var tx;\n    return __generator(this, function (_a) {\n        tx = {\n            data: __assign({ signerPath: constants_1.DEFAULT_ETH_DERIVATION, curveType: __1.Constants.SIGNING.CURVES.SECP256K1, hashType: __1.Constants.SIGNING.HASHES.KECCAK256, protocol: 'signPersonal', payload: payload }, overrides),\n            currency: constants_1.CURRENCIES.ETH_MSG,\n        };\n        if ((0, utilities_1.isEIP712Payload)(payload)) {\n            tx.data.protocol = 'eip712';\n        }\n        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.sign(tx); })];\n    });\n}); };\nexports.signMessage = signMessage;\nvar signBtcLegacyTx = function (payload) { return __awaiter(void 0, void 0, void 0, function () {\n    var tx;\n    return __generator(this, function (_a) {\n        tx = {\n            data: __assign({ signerPath: constants_1.BTC_LEGACY_DERIVATION }, payload),\n            currency: 'BTC',\n        };\n        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.sign(tx); })];\n    });\n}); };\nexports.signBtcLegacyTx = signBtcLegacyTx;\nvar signBtcSegwitTx = function (payload) { return __awaiter(void 0, void 0, void 0, function () {\n    var tx;\n    return __generator(this, function (_a) {\n        tx = {\n            data: __assign({ signerPath: constants_1.BTC_SEGWIT_DERIVATION }, payload),\n            currency: 'BTC',\n        };\n        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.sign(tx); })];\n    });\n}); };\nexports.signBtcSegwitTx = signBtcSegwitTx;\nvar signBtcWrappedSegwitTx = function (payload) { return __awaiter(void 0, void 0, void 0, function () {\n    var tx;\n    return __generator(this, function (_a) {\n        tx = {\n            data: __assign({ signerPath: constants_1.BTC_WRAPPED_SEGWIT_DERIVATION }, payload),\n            currency: 'BTC',\n        };\n        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.sign(tx); })];\n    });\n}); };\nexports.signBtcWrappedSegwitTx = signBtcWrappedSegwitTx;\nvar signSolanaTx = function (payload, overrides) { return __awaiter(void 0, void 0, void 0, function () {\n    var tx;\n    return __generator(this, function (_a) {\n        tx = {\n            data: __assign({ signerPath: constants_1.SOLANA_DERIVATION, curveType: __1.Constants.SIGNING.CURVES.ED25519, hashType: __1.Constants.SIGNING.HASHES.NONE, encodingType: __1.Constants.SIGNING.ENCODINGS.SOLANA, payload: payload }, overrides),\n        };\n        return [2 /*return*/, (0, utilities_1.queue)(function (client) { return client.sign(tx); })];\n    });\n}); };\nexports.signSolanaTx = signSolanaTx;\n","import { CHAIN_IDS } from '../../../shared/constants/network';\n\n/**\n * Generates a random Ethereum address.\n *\n * @returns {string} A randomly generated Ethereum address.\n */\nconst generateRandomAddress = () => {\n  const hexChars = '0123456789abcdef';\n  let address = '0x';\n  for (let i = 0; i < 40; i++) {\n    address += hexChars[Math.floor(Math.random() * 16)];\n  }\n\n  return address;\n};\n\n/**\n * Generates an address book with a specified number of entries, for the supported networks.\n *\n * @param {number} numEntries - The number of address book entries to generate for each network.\n * @returns {object} The generated address book object.\n */\nexport const withAddressBook = (numEntries) => {\n  const networks = [CHAIN_IDS.MAINNET, CHAIN_IDS.SEPOLIA];\n\n  const addressBook = {};\n\n  networks.forEach((network) => {\n    addressBook[network] = {};\n\n    for (let i = 1; i <= numEntries; i++) {\n      const address = generateRandomAddress();\n      addressBook[network][address] = {\n        address,\n        chainId: network,\n        isEns: false,\n        memo: '',\n        name: `Contact ${i}`,\n      };\n    }\n  });\n\n  return { addressBook };\n};\n","// @ts-check\n'use strict'\n\n/** @typedef {__import__('./base').CodecFactory} CodecFactory */\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar) => {\n  // Build the character lookup table:\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i])\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */\nmodule.exports = (bitsPerChar) => (alphabet) => {\n  return {\n    /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar)\n    }\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setFunctionQueue = exports.getFunctionQueue = exports.setLoadClient = exports.loadClient = exports.setSaveClient = exports.saveClient = void 0;\nvar setSaveClient = function (fn) {\n    exports.saveClient = fn;\n};\nexports.setSaveClient = setSaveClient;\nvar setLoadClient = function (fn) {\n    exports.loadClient = fn;\n};\nexports.setLoadClient = setLoadClient;\nvar functionQueue;\nvar getFunctionQueue = function () { return functionQueue; };\nexports.getFunctionQueue = getFunctionQueue;\nvar setFunctionQueue = function (queue) {\n    functionQueue = queue;\n};\nexports.setFunctionQueue = setFunctionQueue;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isEIP712Payload = exports.getStartPath = exports.getClient = exports.queue = exports.setup = void 0;\nvar __1 = require(\"..\");\nvar client_1 = require(\"../client\");\nvar state_1 = require(\"./state\");\n/**\n * `setup` initializes the Client and executes `connect()` if necessary. It returns a promise that\n * resolves to a boolean that indicates whether the Client is paired to the application to which it's\n * attempting to connect.\n */\nvar setup = function (_a) {\n    var deviceId = _a.deviceId, password = _a.password, name = _a.name, getStoredClient = _a.getStoredClient, setStoredClient = _a.setStoredClient;\n    return __awaiter(void 0, void 0, void 0, function () {\n        var privKey, client_2, client, deviceId_1;\n        return __generator(this, function (_b) {\n            if (!getStoredClient)\n                throw new Error('Client data getter required');\n            (0, state_1.setSaveClient)(buildSaveClientFn(setStoredClient));\n            if (!setStoredClient)\n                throw new Error('Client data setter required');\n            (0, state_1.setLoadClient)(buildLoadClientFn(getStoredClient));\n            if (deviceId && password && name) {\n                privKey = __1.Utils.generateAppSecret(deviceId, password, name);\n                client_2 = new client_1.Client({ deviceId: deviceId, privKey: privKey, name: name });\n                return [2 /*return*/, client_2.connect(deviceId).then(function (isPaired) {\n                        (0, state_1.saveClient)(client_2.getStateData());\n                        return isPaired;\n                    })];\n            }\n            else {\n                client = (0, state_1.loadClient)();\n                if (!client)\n                    throw new Error('Client not initialized');\n                deviceId_1 = client.getDeviceId();\n                if (!client.ephemeralPub && deviceId_1) {\n                    return [2 /*return*/, (0, __1.connect)(deviceId_1)];\n                }\n                else {\n                    (0, state_1.saveClient)(client.getStateData());\n                    return [2 /*return*/, Promise.resolve(true)];\n                }\n            }\n            return [2 /*return*/];\n        });\n    });\n};\nexports.setup = setup;\n/**\n * `queue` is a function that wraps all functional API calls. It limits the number of concurrent\n * requests to the server to 1, and ensures that the client state data is saved after each call.\n * This is necessary because the ephemeral public key must be updated after each successful request,\n * and two concurrent requests could result in the same key being used twice or the wrong key being\n * written to memory locally.\n */\nvar queue = function (fn) {\n    var client = (0, state_1.loadClient)();\n    if (!client)\n        throw new Error('Client not initialized');\n    if (!(0, state_1.getFunctionQueue)()) {\n        (0, state_1.setFunctionQueue)(Promise.resolve());\n    }\n    (0, state_1.setFunctionQueue)((0, state_1.getFunctionQueue)().then(function () {\n        return fn(client)\n            .catch(function (err) {\n            // Empty the queue if any function call fails\n            (0, state_1.setFunctionQueue)(Promise.resolve());\n            throw err;\n        })\n            .then(function (returnValue) {\n            (0, state_1.saveClient)(client.getStateData());\n            return returnValue;\n        });\n    }));\n    return (0, state_1.getFunctionQueue)();\n};\nexports.queue = queue;\nvar getClient = function () { return (state_1.loadClient ? (0, state_1.loadClient)() : null); };\nexports.getClient = getClient;\nvar encodeClientData = function (clientData) {\n    return Buffer.from(clientData).toString('base64');\n};\nvar decodeClientData = function (clientData) {\n    return Buffer.from(clientData, 'base64').toString();\n};\nvar buildSaveClientFn = function (setStoredClient) {\n    return function (clientData) {\n        if (!clientData)\n            return;\n        var encodedData = encodeClientData(clientData);\n        setStoredClient(encodedData);\n    };\n};\nvar buildLoadClientFn = function (getStoredClient) {\n    return function () {\n        var clientData = getStoredClient();\n        if (!clientData)\n            return undefined;\n        var stateData = decodeClientData(clientData);\n        if (!stateData)\n            return undefined;\n        var client = new client_1.Client({ stateData: stateData });\n        if (!client)\n            throw new Error('Client not initialized');\n        return client;\n    };\n};\nvar getStartPath = function (defaultStartPath, addressIndex, // The value to increment `defaultStartPath`\npathIndex) {\n    if (addressIndex === void 0) { addressIndex = 0; }\n    if (pathIndex === void 0) { pathIndex = 4; }\n    var startPath = defaultStartPath;\n    if (addressIndex > 0) {\n        startPath[pathIndex] = defaultStartPath[pathIndex] + addressIndex;\n    }\n    return startPath;\n};\nexports.getStartPath = getStartPath;\nvar isEIP712Payload = function (payload) {\n    return typeof payload !== 'string' &&\n        'types' in payload &&\n        'domain' in payload &&\n        'primaryType' in payload &&\n        'message' in payload;\n};\nexports.isEIP712Payload = isEIP712Payload;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Util for Bitcoin-specific functionality\nvar bech32_1 = require(\"bech32\");\nvar bs58check_1 = __importDefault(require(\"bs58check\"));\nvar ripemd_1 = require(\"hash.js/lib/hash/ripemd\");\nvar sha_1 = require(\"hash.js/lib/hash/sha\");\nvar constants_1 = require(\"./constants\");\nvar protocol_1 = require(\"./protocol\");\nvar DEFAULT_SEQUENCE = 0xffffffff;\nvar DEFAULT_SIGHASH_BUFFER = Buffer.from('01', 'hex'); // SIGHASH_ALL = 0x01\nvar PURPOSES = constants_1.BIP_CONSTANTS.PURPOSES, COINS = constants_1.BIP_CONSTANTS.COINS;\nvar OP = {\n    ZERO: 0x00,\n    HASH160: 0xa9,\n    DUP: 0x76,\n    EQUAL: 0x87,\n    EQUALVERIFY: 0x88,\n    CHECKSIG: 0xac,\n};\nvar SEGWIT_V0 = 0x00;\nvar SEGWIT_NATIVE_V0_PREFIX = 'bc';\nvar SEGWIT_NATIVE_V0_TESTNET_PREFIX = 'tb';\nvar FMT_SEGWIT_NATIVE_V0 = 0xd0;\nvar FMT_SEGWIT_NATIVE_V0_TESTNET = 0xf0;\nvar FMT_SEGWIT_WRAPPED = 0x05;\nvar FMT_SEGWIT_WRAPPED_TESTNET = 0xc4;\nvar FMT_LEGACY = 0x00;\nvar FMT_LEGACY_TESTNET = 0x6f;\nvar BTC_SCRIPT_TYPE_P2PKH = 0x01;\nvar BTC_SCRIPT_TYPE_P2SH_P2WPKH = 0x03;\nvar BTC_SCRIPT_TYPE_P2WPKH_V0 = 0x04;\n// We need to build two different objects here:\n// 1. bitcoinjs-lib TransactionBuilder object, which will be used in conjunction\n//    with the returned signatures to build and serialize the transaction before\n//    broadcasting it. We will replace `bitcoinjs-lib`'s signatures with the ones\n//    we get from the Lattice\n// 2. The serialized Lattice request, which includes data (outlined in the specification)\n//    that is needed to sign all of the inputs and build a change output.\n// @inputs (contained in `data`)\n// `prevOuts`: an array of objects with the following properties:\n//           a. txHash\n//           b. value\n//           c. index          -- the index of the output in the transaction\n//           d. signerPath -- the path of the address in our wallet that is signing this input\n// `recipient`: Receiving address, which must be converted to a pubkeyhash\n// `value`:     Number of satoshis to send the recipient\n// `fee`:       Number of satoshis to use for a transaction fee (should have been calculated)\n//              already based on the number of inputs plus two outputs\n// `version`:   Transaction version of the inputs. All inputs must be of the same version!\n// `isSegwit`: a boolean which determines how we serialize the data and parameterize txb\nvar buildBitcoinTxRequest = function (data) {\n    var prevOuts = data.prevOuts, recipient = data.recipient, value = data.value, changePath = data.changePath, fee = data.fee;\n    if (!changePath)\n        throw new Error('No changePath provided.');\n    if (changePath.length !== 5)\n        throw new Error('Please provide a full change path.');\n    // Serialize the request\n    var payload = Buffer.alloc(59 + 69 * prevOuts.length);\n    var off = 0;\n    // Change version byte (a.k.a. address format byte)\n    var changeFmt = getAddressFormat(changePath);\n    payload.writeUInt8(changeFmt, 0);\n    off++;\n    // Build the change data\n    payload.writeUInt32LE(changePath.length, off);\n    off += 4;\n    for (var i = 0; i < changePath.length; i++) {\n        payload.writeUInt32LE(changePath[i], off);\n        off += 4;\n    }\n    // Fee is a param\n    payload.writeUInt32LE(fee, off);\n    off += 4;\n    var dec = decodeAddress(recipient);\n    // Parameterize the recipient output\n    payload.writeUInt8(dec.versionByte, off);\n    off++;\n    dec.pkh.copy(payload, off);\n    off += dec.pkh.length;\n    writeUInt64LE(value, payload, off);\n    off += 8;\n    // Build the inputs from the previous outputs\n    payload.writeUInt8(prevOuts.length, off);\n    off++;\n    var inputSum = 0;\n    prevOuts.forEach(function (input) {\n        if (!input.signerPath || input.signerPath.length !== 5) {\n            throw new Error('Full recipient path not specified ');\n        }\n        payload.writeUInt32LE(input.signerPath.length, off);\n        off += 4;\n        for (var i = 0; i < input.signerPath.length; i++) {\n            payload.writeUInt32LE(input.signerPath[i], off);\n            off += 4;\n        }\n        payload.writeUInt32LE(input.index, off);\n        off += 4;\n        writeUInt64LE(input.value, payload, off);\n        off += 8;\n        inputSum += input.value;\n        var scriptType = getScriptType(input);\n        payload.writeUInt8(scriptType, off);\n        off++;\n        if (!Buffer.isBuffer(input.txHash))\n            input.txHash = Buffer.from(input.txHash, 'hex');\n        input.txHash.copy(payload, off);\n        off += input.txHash.length;\n    });\n    // Send them back!\n    return {\n        payload: payload,\n        schema: protocol_1.LatticeSignSchema.bitcoin,\n        origData: data,\n        changeData: {\n            // This data helps fill in the change output\n            value: inputSum - (value + fee),\n        },\n    };\n};\n// Serialize a transaction consisting of inputs, outputs, and some\n// metadata\n// -- inputs  = { hash, index, sig, pubkey }\n// -- outputs = { value, recipient }  // expects an address string for `recipient`\n// -- isSegwitSpend = true if the inputs are being spent using segwit\n//                    (NOTE: either ALL are being spent, or none are)\n// -- lockTime = Will probably always be 0\nvar serializeTx = function (data) {\n    var inputs = data.inputs, outputs = data.outputs, _a = data.lockTime, lockTime = _a === void 0 ? 0 : _a;\n    var payload = Buffer.alloc(4);\n    var off = 0;\n    // Always use version 2\n    var version = 2;\n    var useWitness = needsWitness(inputs);\n    payload.writeUInt32LE(version, off);\n    off += 4;\n    if (useWitness) {\n        payload = concat(payload, Buffer.from('00', 'hex')); // marker = 0x00\n        payload = concat(payload, Buffer.from('01', 'hex')); // flag = 0x01\n    }\n    // Serialize signed inputs\n    var numInputs = getVarInt(inputs.length);\n    payload = concat(payload, numInputs);\n    off += numInputs.length;\n    inputs.forEach(function (input) {\n        payload = concat(payload, input.hash.reverse());\n        off += input.hash.length;\n        var index = getU32LE(input.index);\n        payload = concat(payload, index);\n        off += index.length;\n        var scriptType = getScriptType(input);\n        // Build the sigScript. Note that p2wpkh does not have a scriptSig.\n        if (scriptType === BTC_SCRIPT_TYPE_P2SH_P2WPKH) {\n            // Build a vector (varSlice of varSlice) containing the redeemScript\n            var redeemScript = buildRedeemScript(input.pubkey);\n            var redeemScriptLen = getVarInt(redeemScript.length);\n            var slice = Buffer.concat([redeemScriptLen, redeemScript]);\n            var sliceLen = getVarInt(slice.length);\n            payload = concat(payload, sliceLen);\n            off += sliceLen.length;\n            payload = concat(payload, slice);\n            off += slice.length;\n        }\n        else if (scriptType === BTC_SCRIPT_TYPE_P2PKH) {\n            // Build the signature + pubkey script to spend this input\n            var slice = buildSig(input.sig, input.pubkey);\n            payload = concat(payload, slice);\n            off += slice.length;\n        }\n        else if (scriptType === BTC_SCRIPT_TYPE_P2WPKH_V0) {\n            var emptyScript = Buffer.from('00', 'hex');\n            payload = concat(payload, emptyScript);\n            off += 1;\n        }\n        // Use the default sequence for all transactions\n        var sequence = getU32LE(DEFAULT_SEQUENCE);\n        payload = concat(payload, sequence);\n        off += sequence.length;\n    });\n    // Serialize outputs\n    var numOutputs = getVarInt(outputs.length);\n    payload = concat(payload, numOutputs);\n    off += numOutputs.length;\n    outputs.forEach(function (output) {\n        var value = getU64LE(output.value);\n        payload = concat(payload, value);\n        off += value.length;\n        // Build the output locking script and write it as a var slice\n        var script = buildLockingScript(output.recipient);\n        var scriptLen = getVarInt(script.length);\n        payload = concat(payload, scriptLen);\n        off += scriptLen.length;\n        payload = concat(payload, script);\n        off += script.length;\n    });\n    // Add witness data if needed\n    if (useWitness) {\n        var sigs = [];\n        var pubkeys = [];\n        for (var i = 0; i < inputs.length; i++) {\n            sigs.push(inputs[i].sig);\n            pubkeys.push(inputs[i].pubkey);\n        }\n        var witnessSlice = buildWitness(sigs, pubkeys);\n        payload = concat(payload, witnessSlice);\n        off += witnessSlice.length;\n    }\n    // Finish with locktime\n    return Buffer.concat([payload, getU32LE(lockTime)]).toString('hex');\n};\n// Convert a pubkeyhash to a bitcoin base58check address with a version byte\nvar getBitcoinAddress = function (pubkeyhash, version) {\n    var bech32Prefix = null;\n    var bech32Version = null;\n    if (version === FMT_SEGWIT_NATIVE_V0) {\n        bech32Prefix = SEGWIT_NATIVE_V0_PREFIX;\n        bech32Version = SEGWIT_V0;\n    }\n    else if (version === FMT_SEGWIT_NATIVE_V0_TESTNET) {\n        bech32Prefix = SEGWIT_NATIVE_V0_TESTNET_PREFIX;\n        bech32Version = SEGWIT_V0;\n    }\n    if (bech32Prefix !== null && bech32Version !== null) {\n        var words = bech32_1.bech32.toWords(pubkeyhash);\n        words.unshift(bech32Version);\n        return bech32_1.bech32.encode(bech32Prefix, words);\n    }\n    else {\n        return bs58check_1.default.encode(Buffer.concat([Buffer.from([version]), pubkeyhash]));\n    }\n};\n// Builder utils\n//-----------------------\nfunction buildRedeemScript(pubkey) {\n    var redeemScript = Buffer.alloc(22);\n    var shaHash = Buffer.from((0, sha_1.sha256)().update(pubkey).digest('hex'), 'hex');\n    var pubkeyhash = Buffer.from((0, ripemd_1.ripemd160)().update(shaHash).digest('hex'), 'hex');\n    redeemScript.writeUInt8(OP.ZERO, 0);\n    redeemScript.writeUInt8(pubkeyhash.length, 1);\n    pubkeyhash.copy(redeemScript, 2);\n    return redeemScript;\n}\n// Var slice of signature + var slice of pubkey\nfunction buildSig(sig, pubkey) {\n    sig = Buffer.concat([sig, DEFAULT_SIGHASH_BUFFER]);\n    var sigLen = getVarInt(sig.length);\n    var pubkeyLen = getVarInt(pubkey.length);\n    var slice = Buffer.concat([sigLen, sig, pubkeyLen, pubkey]);\n    var len = getVarInt(slice.length);\n    return Buffer.concat([len, slice]);\n}\n// Witness is written as a \"vector\", which is a list of varSlices\n// prefixed by the number of items\nfunction buildWitness(sigs, pubkeys) {\n    var witness = Buffer.alloc(0);\n    // Two items in each vector (sig, pubkey)\n    var len = Buffer.alloc(1);\n    len.writeUInt8(2, 0);\n    for (var i = 0; i < sigs.length; i++) {\n        var sig = Buffer.concat([sigs[i], DEFAULT_SIGHASH_BUFFER]);\n        var sigLen = getVarInt(sig.length);\n        var pubkey = pubkeys[i];\n        var pubkeyLen = getVarInt(pubkey.length);\n        witness = Buffer.concat([witness, len, sigLen, sig, pubkeyLen, pubkey]);\n    }\n    return witness;\n}\n// Locking script buiders\n//-----------------------\nfunction buildLockingScript(address) {\n    var dec = decodeAddress(address);\n    switch (dec.versionByte) {\n        case FMT_SEGWIT_NATIVE_V0:\n        case FMT_SEGWIT_NATIVE_V0_TESTNET:\n            return buildP2wpkhLockingScript(dec.pkh);\n        case FMT_SEGWIT_WRAPPED:\n        case FMT_SEGWIT_WRAPPED_TESTNET:\n            return buildP2shLockingScript(dec.pkh);\n        case FMT_LEGACY:\n        case FMT_LEGACY_TESTNET:\n            return buildP2pkhLockingScript(dec.pkh);\n        default:\n            throw new Error(\"Unknown version byte: \".concat(dec.versionByte, \". Cannot build BTC transaction.\"));\n    }\n}\nfunction buildP2pkhLockingScript(pubkeyhash) {\n    var out = Buffer.alloc(5 + pubkeyhash.length);\n    var off = 0;\n    out.writeUInt8(OP.DUP, off);\n    off++;\n    out.writeUInt8(OP.HASH160, off);\n    off++;\n    out.writeUInt8(pubkeyhash.length, off);\n    off++;\n    pubkeyhash.copy(out, off);\n    off += pubkeyhash.length;\n    out.writeUInt8(OP.EQUALVERIFY, off);\n    off++;\n    out.writeUInt8(OP.CHECKSIG, off);\n    off++;\n    return out;\n}\nfunction buildP2shLockingScript(pubkeyhash) {\n    var out = Buffer.alloc(3 + pubkeyhash.length);\n    var off = 0;\n    out.writeUInt8(OP.HASH160, off);\n    off++;\n    out.writeUInt8(pubkeyhash.length, off);\n    off++;\n    pubkeyhash.copy(out, off);\n    off += pubkeyhash.length;\n    out.writeUInt8(OP.EQUAL, off);\n    off++;\n    return out;\n}\nfunction buildP2wpkhLockingScript(pubkeyhash) {\n    var out = Buffer.alloc(2 + pubkeyhash.length);\n    out.writeUInt8(OP.ZERO, 0);\n    out.writeUInt8(pubkeyhash.length, 1);\n    pubkeyhash.copy(out, 2);\n    return out;\n}\n// Static Utils\n//----------------------\nfunction concat(base, addition) {\n    return Buffer.concat([base, addition]);\n}\nfunction getU64LE(x) {\n    var buffer = Buffer.alloc(8);\n    writeUInt64LE(x, buffer, 0);\n    return buffer;\n}\nfunction getU32LE(x) {\n    var buffer = Buffer.alloc(4);\n    buffer.writeUInt32LE(x, 0);\n    return buffer;\n}\nfunction getVarInt(x) {\n    var buffer;\n    if (x < 0xfd) {\n        buffer = Buffer.alloc(1);\n        buffer.writeUInt8(x, 0);\n    }\n    else if (x <= 0xffff) {\n        buffer = Buffer.alloc(3);\n        buffer.writeUInt8(0xfd, 0);\n        buffer.writeUInt16LE(x, 1);\n    }\n    else if (x < 0xffffffff) {\n        buffer = Buffer.alloc(5);\n        buffer.writeUInt8(0xfe, 0);\n        buffer.writeUInt32LE(x, 1);\n    }\n    else {\n        buffer = Buffer.alloc(9);\n        buffer.writeUInt8(0xff, 0);\n        buffer.writeUInt32LE(x >>> 0, 1);\n        buffer.writeUInt32LE((x / 0x100000000) | 0, 5);\n    }\n    return buffer;\n}\nfunction writeUInt64LE(n, buf, off) {\n    if (typeof n === 'number')\n        n = n.toString(16);\n    var preBuf = Buffer.alloc(8);\n    var nStr = n.length % 2 === 0 ? n.toString(16) : \"0\".concat(n.toString(16));\n    var nBuf = Buffer.from(nStr, 'hex');\n    nBuf.reverse().copy(preBuf, 0);\n    preBuf.copy(buf, off);\n    return preBuf;\n}\nfunction decodeAddress(address) {\n    var versionByte, pkh;\n    try {\n        // Attempt to base58 decode the address. This will work for older\n        // P2PKH, P2SH, and P2SH-P2WPKH addresses\n        versionByte = bs58check_1.default.decode(address)[0];\n        pkh = bs58check_1.default.decode(address).slice(1);\n    }\n    catch (err) {\n        // If we could not base58 decode, the address must be bech32 encoded.\n        // If neither decoding method works, the address is invalid.\n        try {\n            var bech32Dec = bech32_1.bech32.decode(address);\n            if (bech32Dec.prefix === SEGWIT_NATIVE_V0_PREFIX) {\n                versionByte = FMT_SEGWIT_NATIVE_V0;\n            }\n            else if (bech32Dec.prefix === SEGWIT_NATIVE_V0_TESTNET_PREFIX) {\n                versionByte = FMT_SEGWIT_NATIVE_V0_TESTNET;\n            }\n            else {\n                throw new Error('Unsupported prefix: must be bc or tb.');\n            }\n            // Make sure we decoded\n            if (bech32Dec.words[0] !== 0) {\n                throw new Error(\"Unsupported segwit version: must be 0, got \".concat(bech32Dec.words[0]));\n            }\n            // Make sure address type is supported.\n            // We currently only support P2WPKH addresses, which bech-32decode to 33 words.\n            // P2WSH addresses are 53 words, but we do not support them.\n            // Not sure what other address types could exist, but if they exist we don't\n            // support them either.\n            if (bech32Dec.words.length !== 33) {\n                var isP2wpsh = bech32Dec.words.length === 53;\n                throw new Error(\"Unsupported address\".concat(isP2wpsh ? ' (P2WSH not supported)' : '', \": \").concat(address));\n            }\n            pkh = Buffer.from(bech32_1.bech32.fromWords(bech32Dec.words.slice(1)));\n        }\n        catch (err) {\n            throw new Error(\"Unable to decode address: \".concat(address, \": \").concat(err.message));\n        }\n    }\n    return { versionByte: versionByte, pkh: pkh };\n}\n// Determine the address format (a.k.a. \"version\") depending on the\n// purpose of the dervation path.\nfunction getAddressFormat(path) {\n    if (path.length < 2)\n        throw new Error('Path must be >1 index');\n    var purpose = path[0];\n    var coin = path[1];\n    if (purpose === PURPOSES.BTC_SEGWIT && coin === COINS.BTC) {\n        return FMT_SEGWIT_NATIVE_V0;\n    }\n    else if (purpose === PURPOSES.BTC_SEGWIT && coin === COINS.BTC_TESTNET) {\n        return FMT_SEGWIT_NATIVE_V0_TESTNET;\n    }\n    else if (purpose === PURPOSES.BTC_WRAPPED_SEGWIT && coin === COINS.BTC) {\n        return FMT_SEGWIT_WRAPPED;\n    }\n    else if (purpose === PURPOSES.BTC_WRAPPED_SEGWIT &&\n        coin === COINS.BTC_TESTNET) {\n        return FMT_SEGWIT_WRAPPED_TESTNET;\n    }\n    else if (purpose === PURPOSES.BTC_LEGACY && coin === COINS.BTC) {\n        return FMT_LEGACY;\n    }\n    else if (purpose === PURPOSES.BTC_LEGACY && coin === COINS.BTC_TESTNET) {\n        return FMT_LEGACY_TESTNET;\n    }\n    else {\n        throw new Error('Invalid Bitcoin path provided. Cannot determine address format.');\n    }\n}\n// Determine the script type for an input based on its owner's derivation\n// path's `purpose` index.\n// We do not support p2sh and only issue single-key addresses from the Lattice\n// so we can determine this based on path alone.\nfunction getScriptType(input) {\n    switch (input.signerPath[0]) {\n        case PURPOSES.BTC_LEGACY:\n            return BTC_SCRIPT_TYPE_P2PKH;\n        case PURPOSES.BTC_WRAPPED_SEGWIT:\n            return BTC_SCRIPT_TYPE_P2SH_P2WPKH;\n        case PURPOSES.BTC_SEGWIT:\n            return BTC_SCRIPT_TYPE_P2WPKH_V0;\n        default:\n            throw new Error(\"Unsupported path purpose (\".concat(input.signerPath[0], \"): cannot determine BTC script type.\"));\n    }\n}\n// Determine if a a transaction should have a witness portion.\n// This will return true if any input is p2sh(p2wpkh) or p2wpkh.\n// We determine the script type based on the derivation path.\nfunction needsWitness(inputs) {\n    var w = false;\n    inputs.forEach(function (input) {\n        if (input.signerPath[0] === PURPOSES.BTC_SEGWIT ||\n            input.signerPath[0] === PURPOSES.BTC_WRAPPED_SEGWIT) {\n            w = true;\n        }\n    });\n    return w;\n}\nexports.default = {\n    buildBitcoinTxRequest: buildBitcoinTxRequest,\n    serializeTx: serializeTx,\n    getBitcoinAddress: getBitcoinAddress,\n    getAddressFormat: getAddressFormat,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.replaceNestedDefs = exports.getNestedCalldata = exports.parseCanonicalName = exports.parseSolidityJSONABI = void 0;\nvar js_sha3_1 = require(\"js-sha3\");\nvar abi_1 = require(\"@ethersproject/abi\");\n/**\n * Look through an ABI definition to see if there is a function that matches the signature provided.\n * @param sig    a 0x-prefixed hex string containing 4 bytes of info\n * @param abi    a Solidity JSON ABI structure ([external link](https://docs.ethers.io/v5/api/utils/abi/formats/#abi-formats--solidity))\n * @returns      Buffer containing RLP-serialized array of calldata info to pass to signing request\n * @public\n */\nvar parseSolidityJSONABI = function (sig, abi) {\n    sig = coerceSig(sig);\n    // Find the first match in the ABI\n    var match = abi\n        .filter(function (item) { return item.type === 'function'; })\n        .find(function (item) {\n        var def = parseDef(item);\n        var funcSig = getFuncSig(def.canonicalName);\n        return funcSig === sig;\n    });\n    if (match) {\n        var def = parseDef(match).def;\n        return { def: def };\n    }\n    throw new Error('Unable to find matching function in ABI');\n};\nexports.parseSolidityJSONABI = parseSolidityJSONABI;\n/**\n * Convert a canonical name into an ABI definition that can be included with calldata to a general\n * \"2\", \"2.1\", \"3\")\n * @param sig    a 0x-prefixed hex string containing 4 bytes of info\n * @param name   canonical name of the function\n * @returns      Buffer containing RLP-serialized array of calldata info to pass to signing request\n * @public\n */\nvar parseCanonicalName = function (sig, name) {\n    sig = coerceSig(sig);\n    if (sig !== getFuncSig(name)) {\n        throw new Error('Name does not match provided sig.');\n    }\n    var def = [];\n    // Get the function name\n    var paramStart = name.indexOf('(');\n    if (paramStart < 0) {\n        throw new Error(BAD_CANONICAL_ERR);\n    }\n    def.push(name.slice(0, paramStart));\n    name = name.slice(paramStart + 1);\n    var paramDef = [];\n    while (name.length > 1) {\n        // scan until the terminating ')'\n        var typeStr = popTypeStrFromCanonical(name);\n        paramDef = paramDef.concat(parseTypeStr(typeStr));\n        name = name.slice(typeStr.length + 1);\n    }\n    var parsedParamDef = parseParamDef(paramDef);\n    return def.concat(parsedParamDef);\n};\nexports.parseCanonicalName = parseCanonicalName;\n/**\n * Pull out nested calldata which may correspond to nested ABI definitions.\n * This is relevant for e.g. `multicall` patterns.\n * A def may be nested if the underlying type is `bytes` or `bytes[]` and\n * the calldata parm is of size (4 + 32*n).\n * @param def - calldata decoder data for a def\n * @param calldata - Buffer containing full calldata payload\n * @return -  Array of calldata params, or null values. If the return\n *            item has data (0x-prefixed hex string), it should be\n *            checked as a possible nested def\n */\nvar getNestedCalldata = function (def, calldata) {\n    var possibleNestedDefs = [];\n    // Skip past first item, which is the function name\n    var defParams = def.slice(1);\n    var strParams = getParamStrNames(defParams);\n    var coder = new abi_1.AbiCoder();\n    var decoded = coder.decode(strParams, '0x' + calldata.slice(4).toString('hex'));\n    function couldBeNestedDef(x) {\n        return (x.length - 4) % 32 === 0;\n    }\n    decoded.forEach(function (paramData, i) {\n        if (isBytesType(defParams[i])) {\n            var nestedDefIsPossible_1 = true;\n            if (isBytesArrItem(defParams[i])) {\n                // `bytes[]` type. Decode all underlying `bytes` items and\n                // do size checks on those.\n                // NOTE: We only do this for `bytes[]` but could, in the future,\n                // extend to more complex array structures if we see nested defs\n                // in this pattern. However, we have only ever seen `bytes[]`, which\n                // is typically used in `multicall` patterns\n                paramData.forEach(function (nestedParamDatum) {\n                    var nestedParamDatumBuf = Buffer.from(nestedParamDatum.slice(2), 'hex');\n                    if (!couldBeNestedDef(nestedParamDatumBuf)) {\n                        nestedDefIsPossible_1 = false;\n                    }\n                });\n            }\n            else if (isBytesItem(defParams[i])) {\n                // Regular `bytes` type - perform size check\n                var paramDataBuf = Buffer.from(paramData.slice(2), 'hex');\n                nestedDefIsPossible_1 = couldBeNestedDef(paramDataBuf);\n            }\n            else {\n                // Unknown `bytes` item type\n                nestedDefIsPossible_1 = false;\n            }\n            // If the data could contain a nested def (determined based on\n            // data size of the item), add the paramData to the return array.\n            possibleNestedDefs.push(nestedDefIsPossible_1 ? paramData : null);\n        }\n        else {\n            // No nested defs for non-bytes types\n            possibleNestedDefs.push(null);\n        }\n    });\n    return possibleNestedDefs;\n};\nexports.getNestedCalldata = getNestedCalldata;\n/**\n * If applicable, update decoder data to represent nested\n * definitions, which are used in e.g. multicall patterns.\n * This will update `def` in place and return it with any\n * additional info necessary.\n * @param def - Decoder data for a specific calldata function (def)\n * @param nestedDefs - Array containing a possible set of nested\n *                     defs which must be added to `def`\n * @return - Possibly modified version of `def`\n */\nvar replaceNestedDefs = function (def, nestedDefs) {\n    for (var i = 0; i < nestedDefs.length; i++) {\n        var isArrItem = isBytesArrItem(def[1 + i]);\n        var isItem = isBytesItem(def[1 + i]);\n        if (nestedDefs[i] !== null && (isArrItem || isItem)) {\n            // Update the def item type to indicate it will hold\n            // one or more nested definitions\n            def[1 + i][1] = EVM_TYPES.indexOf('nestedDef');\n            // Add nested def(s) in in an array. If this is an array\n            // item it means the nestedDefs should already be in an\n            // array. Otherwise we need to wrap the single nested\n            // def in an array to keep the data type consistent.\n            var defs = isArrItem ? nestedDefs[i] : [nestedDefs[i]];\n            def[1 + i] = def[1 + i].concat([defs]);\n        }\n    }\n    return def;\n};\nexports.replaceNestedDefs = replaceNestedDefs;\n/**\n * Convert a canonical name to a function selector (a.k.a. \"sig\")\n * @internal\n */\nfunction getFuncSig(canonicalName) {\n    return \"0x\".concat((0, js_sha3_1.keccak256)(canonicalName).slice(0, 8));\n}\n/**\n * Ensure the sig is properly formatted\n */\nfunction coerceSig(sig) {\n    if (typeof sig !== 'string' || (sig.length !== 10 && sig.length !== 8)) {\n        throw new Error('`sig` must be a hex string with 4 bytes of data.');\n    }\n    if (sig.length === 8) {\n        sig = \"0x\".concat(sig);\n    }\n    return sig;\n}\n/**\n * Convert calldata param definitions into an array of their\n * canonical string names.\n * Returns an array of string names that are consumable by\n * the @ethersproject/abi AbiCoder decoder instance.\n * @param defParams - Array of def params\n * @internal\n */\nfunction getParamStrNames(defParams) {\n    var strNames = [];\n    var _loop_1 = function (i) {\n        var param = defParams[i];\n        var s = EVM_TYPES[param[1]];\n        if (param[2]) {\n            s = \"\".concat(s).concat(param[2] * 8);\n        }\n        if (param[3].length > 0) {\n            param[3].forEach(function (d) {\n                if (param[3][d] === 0) {\n                    s = \"\".concat(s, \"[]\");\n                }\n                else {\n                    s = \"\".concat(s, \"[\").concat(param[3][d], \"]\");\n                }\n            });\n        }\n        if (param[4]) {\n            // Tuple - get nested type names\n            var nested = getParamStrNames(param[4]);\n            s = \"\".concat(s, \"(\").concat(nested.join(','), \")\");\n        }\n        strNames.push(s);\n    };\n    for (var i = 0; i < defParams.length; i++) {\n        _loop_1(i);\n    }\n    return strNames;\n}\n/**\n * Take the next type from a canonical definition string. Note that the string can be that of a\n * tuple. NOTE: The string should start at the index after the leading '('\n * @internal\n */\nfunction popTypeStrFromCanonical(subName) {\n    if (isTuple(subName)) {\n        return getTupleName(subName);\n    }\n    else if (subName.indexOf(',') > -1) {\n        // Normal non-tuple param\n        return subName.slice(0, subName.indexOf(','));\n    }\n    else if (subName.indexOf(')') > -1) {\n        // Last non-tuple param in the name\n        return subName.slice(0, subName.indexOf(')'));\n    }\n    throw new Error(BAD_CANONICAL_ERR);\n}\n/**\n * Parse a type string, e.g. 'uint256'. Converts the string to an array of EVMParamInfo, which may\n * have nested structure if there are tuples.\n * @internal\n */\nfunction parseTypeStr(typeStr) {\n    // Non-tuples can be decoded without worrying about recursion\n    if (!isTuple(typeStr)) {\n        return [parseBasicTypeStr(typeStr)];\n    }\n    // Tuples may require recursion\n    var param = {\n        szBytes: 0,\n        typeIdx: EVM_TYPES.indexOf('tuple'),\n        arraySzs: [],\n    };\n    // Get the full tuple param name and separate out the array stuff\n    var typeStrLessArr = getTupleName(typeStr, false);\n    var typeStrArr = typeStr.slice(typeStrLessArr.length);\n    param.arraySzs = getArraySzs(typeStrArr);\n    // Slice off the leading paren\n    typeStrLessArr = typeStrLessArr.slice(1);\n    // Parse each nested param\n    var paramArr = [];\n    while (typeStrLessArr.length > 0) {\n        var subType = popTypeStrFromCanonical(typeStrLessArr);\n        typeStrLessArr = typeStrLessArr.slice(subType.length + 1);\n        paramArr = paramArr.concat(parseTypeStr(subType));\n    }\n    // There must be at least one sub-param in the tuple\n    if (!paramArr.length) {\n        throw new Error(BAD_CANONICAL_ERR);\n    }\n    return [param, paramArr];\n}\n/**\n * Convert a basic type (e.g. 'uint256') from a string to EVMParamInfo type.\n * @internal\n */\nfunction parseBasicTypeStr(typeStr) {\n    var param = {\n        szBytes: 0,\n        typeIdx: 0,\n        arraySzs: [],\n    };\n    var found = false;\n    EVM_TYPES.forEach(function (t, i) {\n        if (typeStr.indexOf(t) > -1 && !found) {\n            param.typeIdx = i;\n            param.arraySzs = getArraySzs(typeStr);\n            var arrStart = param.arraySzs.length > 0 ? typeStr.indexOf('[') : typeStr.length;\n            var typeStrNum = typeStr.slice(t.length, arrStart);\n            if (parseInt(typeStrNum)) {\n                param.szBytes = parseInt(typeStrNum) / 8;\n                if (param.szBytes > 32) {\n                    throw new Error(BAD_CANONICAL_ERR);\n                }\n            }\n            found = true;\n        }\n    });\n    if (!found) {\n        throw new Error(BAD_CANONICAL_ERR);\n    }\n    return param;\n}\n/**\n * Parse an Etherscan definition into a calldata structure that the Lattice EVM decoder can handle\n * (EVMDef). This function may recurse if there are tuple types.\n * @internal\n */\nfunction parseDef(item, canonicalName, def, recursed) {\n    if (canonicalName === void 0) { canonicalName = ''; }\n    if (def === void 0) { def = []; }\n    if (recursed === void 0) { recursed = false; }\n    // Function name. Can be an empty string.\n    if (!recursed) {\n        var nameStr = item.name || '';\n        def.push(nameStr);\n        canonicalName += nameStr;\n    }\n    // Loop through params\n    if (item.inputs) {\n        canonicalName += '(';\n        item.inputs.forEach(function (input) {\n            // Convert the input to a flat param that we can serialize\n            var flatParam = getFlatParam(input);\n            if (input.type.indexOf('tuple') > -1 && input.components) {\n                // For tuples we need to recurse\n                var recursed_1 = parseDef({ inputs: input.components }, canonicalName, [], true);\n                canonicalName = recursed_1.canonicalName;\n                // Add brackets if this is a tuple array and also add a comma\n                canonicalName += \"\".concat(input.type.slice(5), \",\");\n                flatParam.push(recursed_1.def);\n            }\n            else {\n                canonicalName += input.type;\n                canonicalName += ',';\n            }\n            def.push(flatParam);\n        });\n        // Take off the last comma. Note that we do not want to slice if the last param was a tuple,\n        // since we want to keep that `)`\n        if (canonicalName[canonicalName.length - 1] === ',') {\n            canonicalName = canonicalName.slice(0, canonicalName.length - 1);\n        }\n        // Add the closing parens\n        canonicalName += ')';\n    }\n    return { def: def, canonicalName: canonicalName };\n}\n/**\n * Convert a set of EVMParamInfo objects into an array that can be serialized into decoder info that\n * can be passed with the signing request. NOTE: We do not know parameter names, so we just number\n * them\n * @internal\n */\nfunction parseParamDef(def, prefix) {\n    if (prefix === void 0) { prefix = ''; }\n    var parsedDef = [];\n    var numTuples = 0;\n    def.forEach(function (param, i) {\n        if (Array.isArray(param)) {\n            // Arrays indicate nested params inside a tuple and always come after the initial tuple type\n            // info. Recurse to parse nested tuple params and append them to the most recent.\n            parsedDef[parsedDef.length - 1].push(parseParamDef(param, \"\".concat(i, \"-\")));\n        }\n        else {\n            // If this is not tuple info, add the flat param info to the def\n            parsedDef.push([\n                \"#\".concat(prefix).concat(i + 1 - numTuples),\n                param.typeIdx,\n                param.szBytes,\n                param.arraySzs,\n            ]);\n        }\n        // Tuple\n        if (param.typeIdx === EVM_TYPES.indexOf('tuple')) {\n            numTuples += 1;\n        }\n    });\n    return parsedDef;\n}\n/**\n * Convert a param into an EVMParamInfo object before flattening its data into an array.\n * @internal\n */\nfunction getFlatParam(input) {\n    if (!input.type) {\n        throw new Error('No type in input');\n    }\n    var param = [input.name];\n    var _a = getParamTypeInfo(input.type), typeIdx = _a.typeIdx, szBytes = _a.szBytes, arraySzs = _a.arraySzs;\n    param.push(typeIdx);\n    param.push(szBytes);\n    param.push(arraySzs);\n    return param;\n}\n/**\n * Convert a param type string into an EVMParamInfo object with attributes:\n * 1. paramName -     name of the parameter. This piece of data is unverified, so it will display\n *                    differently if the user has the function saved in secure storage.\n * 2. paramType -     basic type of param. Firmware has an enum with 7 values.\n * 3. paramSzBytes -  number of bytes representing this param. Only certain types can have nonzero\n *                    value for this. For example, a `uint` with a 4 in this slot would be uint32\n *                    (8*4 = 32). Maximum number of bytes is always 32 because these types can only\n *                    be used in single 32 byte words.\n * @internal\n */\nfunction getParamTypeInfo(type) {\n    var param = {\n        szBytes: 0,\n        typeIdx: 0,\n        arraySzs: [],\n    };\n    var baseType;\n    EVM_TYPES.forEach(function (t, i) {\n        if (type.indexOf(t) > -1 && !baseType) {\n            baseType = t;\n            param.typeIdx = i;\n        }\n    });\n    // Get the array size, if any\n    param.arraySzs = getArraySzs(type);\n    // Determine where to search for expanded size\n    var szIdx = param.arraySzs.length > 0 ? type.indexOf('[') : type.length;\n    if (['uint', 'int', 'bytes'].indexOf(baseType) > -1) {\n        // If this can have a fixed size, capture that\n        var szBits = parseInt(type.slice(baseType.length, szIdx)) || 0;\n        if (szBits > 256) {\n            throw new Error('Invalid param size');\n        }\n        param.szBytes = szBits / 8;\n    }\n    else {\n        // No fixed size in the type\n        param.szBytes = 0;\n    }\n    return param;\n}\n/**\n * Determine the dimensions of an array type. These dimensions can be either fixed or variable size.\n * Returns an array of sizes. Ex: uint256[][] -> [0, 0], uint256[1][3] -> [1, 3], uint256 -> []\n * @internal\n */\nfunction getArraySzs(type) {\n    if (typeof type !== 'string') {\n        throw new Error('Invalid type');\n    }\n    var szs = [];\n    var t1 = type;\n    while (t1.length > 0) {\n        var openIdx = t1.indexOf('[');\n        if (openIdx < 0) {\n            return szs;\n        }\n        var t2 = t1.slice(openIdx);\n        var closeIdx = t2.indexOf(']');\n        if (closeIdx < 0) {\n            throw new Error('Bad param type');\n        }\n        var t3 = t2.slice(1, closeIdx);\n        if (t3.length === 0) {\n            // Variable size\n            szs.push(0);\n        }\n        else {\n            // Fixed size\n            szs.push(parseInt(t3));\n        }\n        t1 = t2.slice(closeIdx + 1);\n    }\n    return szs;\n}\n/** @internal */\nfunction getTupleName(name, withArr) {\n    if (withArr === void 0) { withArr = true; }\n    var brackets = 0, addedFirstBracket = false;\n    for (var i = 0; i < name.length; i++) {\n        if (name[i] === '(') {\n            brackets += 1;\n            addedFirstBracket = true;\n        }\n        else if (name[i] === ')') {\n            brackets -= 1;\n        }\n        var canBreak = name[i + 1] === ',' || name[i + 1] === ')' || i === name.length - 1;\n        if (!withArr && name[i + 1] === '[') {\n            canBreak = true;\n        }\n        if (!brackets && addedFirstBracket && canBreak) {\n            return name.slice(0, i + 1);\n        }\n    }\n    throw new Error(BAD_CANONICAL_ERR);\n}\n/** @internal */\nfunction isTuple(type) {\n    return type[0] === '(';\n}\n/** @internal */\nfunction isBytesType(param) {\n    return EVM_TYPES[param[1]] === 'bytes';\n}\nfunction isBytesItem(param) {\n    return isBytesType(param) && param[3].length === 0;\n}\nfunction isBytesArrItem(param) {\n    return isBytesType(param) && param[3].length === 1 && param[3][0] === 0;\n}\nvar BAD_CANONICAL_ERR = 'Could not parse canonical function name.';\nvar EVM_TYPES = [\n    null,\n    'address',\n    'bool',\n    'uint',\n    'int',\n    'bytes',\n    'string',\n    'tuple',\n    'nestedDef',\n];\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CALLDATA = void 0;\n/**\n * Exports containing utils that allow inclusion of calldata decoder info in signing requests. If\n * calldata decoder info is packed into the request, it is used to decode the calldata in the\n * request. It is optional.\n */\nvar evm_1 = require(\"./evm\");\nexports.CALLDATA = {\n    EVM: {\n        type: 1,\n        parsers: {\n            parseSolidityJSONABI: evm_1.parseSolidityJSONABI,\n            parseCanonicalName: evm_1.parseCanonicalName,\n        },\n        processors: {\n            getNestedCalldata: evm_1.getNestedCalldata,\n            replaceNestedDefs: evm_1.replaceNestedDefs,\n        }\n    },\n};\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Client = void 0;\nvar constants_1 = require(\"./constants\");\nvar index_1 = require(\"./functions/index\");\nvar functions_1 = require(\"./shared/functions\");\nvar utilities_1 = require(\"./shared/utilities\");\nvar validators_1 = require(\"./shared/validators\");\nvar util_1 = require(\"./util\");\n/**\n * `Client` is a class-based interface for managing a Lattice device.\n */\nvar Client = /** @class */ (function () {\n    /**\n     * @param params - Parameters are passed as an object.\n     */\n    function Client(_a) {\n        var baseUrl = _a.baseUrl, name = _a.name, privKey = _a.privKey, stateData = _a.stateData, timeout = _a.timeout, retryCount = _a.retryCount, skipRetryOnWrongWallet = _a.skipRetryOnWrongWallet, deviceId = _a.deviceId;\n        this.name = name || 'Unknown';\n        this.baseUrl = baseUrl || constants_1.BASE_URL;\n        this.deviceId = deviceId;\n        this.isPaired = false;\n        this.activeWallets = constants_1.DEFAULT_ACTIVE_WALLETS;\n        this.timeout = timeout || 60000;\n        this.retryCount = retryCount || 3;\n        this.skipRetryOnWrongWallet = skipRetryOnWrongWallet || false;\n        this.privKey = privKey || (0, util_1.randomBytes)(32);\n        this.key = (0, util_1.getP256KeyPair)(this.privKey);\n        this.retryWrapper = (0, functions_1.buildRetryWrapper)(this, this.retryCount);\n        /** The user may pass in state data to rehydrate a session that was previously cached */\n        if (stateData) {\n            this.unpackAndApplyStateData(stateData);\n        }\n    }\n    Object.defineProperty(Client.prototype, \"publicKey\", {\n        /**\n         * Get the public key associated with the client's static keypair.\n         * The public key is used for identifying the client to the Lattice.\n         * @internal\n         * @returns Buffer\n         */\n        get: function () {\n            return (0, utilities_1.getPubKeyBytes)(this.key);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Get the pairing name for this client instance\n     */\n    Client.prototype.getAppName = function () {\n        return this.name;\n    };\n    /**\n     * Get the `deviceId` for this client instance\n     */\n    Client.prototype.getDeviceId = function () {\n        return this.deviceId;\n    };\n    Object.defineProperty(Client.prototype, \"sharedSecret\", {\n        /**\n         * Get the shared secret, derived via ECDH from the local private key and the ephemeral public key\n         * @internal\n         * @returns Buffer\n         */\n        get: function () {\n            // Once every ~256 attempts, we will get a key that starts with a `00` byte, which can lead to\n            // problems initializing AES if we don't force a 32 byte BE buffer.\n            return Buffer.from(this.key.derive(this.ephemeralPub.getPublic()).toArray('be', 32));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Client.prototype, \"ephemeralPub\", {\n        /** @internal */\n        get: function () {\n            return this._ephemeralPub;\n        },\n        /** @internal */\n        set: function (ephemeralPub) {\n            (0, validators_1.validateEphemeralPub)(ephemeralPub);\n            this._ephemeralPub = ephemeralPub;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Attempt to contact a device based on its `deviceId`. The response should include an ephemeral\n     * public key, which is used to pair with the device in a later request.\n     * @category Lattice\n     */\n    Client.prototype.connect = function (deviceId) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.retryWrapper(index_1.connect, { id: deviceId })];\n            });\n        });\n    };\n    /**\n     * If a pairing secret is provided, `pair` uses it to sign a hash of the public key, name, and\n     * pairing secret. It then sends the name and signature to the device. If no pairing secret is\n     * provided, `pair` sends a zero-length name buffer to the device.\n     * @category Lattice\n     */\n    Client.prototype.pair = function (pairingSecret) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.retryWrapper(index_1.pair, { pairingSecret: pairingSecret })];\n            });\n        });\n    };\n    /**\n     * Takes a starting path and a number to get the addresses associated with the active wallet.\n     * @category Lattice\n     */\n    Client.prototype.getAddresses = function (_a) {\n        var startPath = _a.startPath, _b = _a.n, n = _b === void 0 ? 1 : _b, _c = _a.flag, flag = _c === void 0 ? 0 : _c;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_d) {\n                return [2 /*return*/, this.retryWrapper(index_1.getAddresses, { startPath: startPath, n: n, flag: flag })];\n            });\n        });\n    };\n    /**\n     * Builds and sends a request for signing to the Lattice.\n     * @category Lattice\n     */\n    Client.prototype.sign = function (_a) {\n        var data = _a.data, currency = _a.currency, cachedData = _a.cachedData, nextCode = _a.nextCode;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                return [2 /*return*/, this.retryWrapper(index_1.sign, { data: data, currency: currency, cachedData: cachedData, nextCode: nextCode })];\n            });\n        });\n    };\n    /**\n     * Fetch the active wallet in the Lattice.\n     */\n    Client.prototype.fetchActiveWallet = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.retryWrapper(index_1.fetchActiveWallet)];\n            });\n        });\n    };\n    /**\n     * Takes in a set of key-value records and sends a request to add them to the Lattice.\n     * @category Lattice\n     */\n    Client.prototype.addKvRecords = function (_a) {\n        var _b = _a.type, type = _b === void 0 ? 0 : _b, records = _a.records, _c = _a.caseSensitive, caseSensitive = _c === void 0 ? false : _c;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_d) {\n                return [2 /*return*/, this.retryWrapper(index_1.addKvRecords, { type: type, records: records, caseSensitive: caseSensitive, })];\n            });\n        });\n    };\n    /**\n     * Fetches a list of key-value records from the Lattice.\n     * @category Lattice\n     */\n    Client.prototype.getKvRecords = function (_a) {\n        var _b = _a.type, type = _b === void 0 ? 0 : _b, _c = _a.n, n = _c === void 0 ? 1 : _c, _d = _a.start, start = _d === void 0 ? 0 : _d;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_e) {\n                return [2 /*return*/, this.retryWrapper(index_1.getKvRecords, { type: type, n: n, start: start, })];\n            });\n        });\n    };\n    /**\n     * Takes in an array of ids and sends a request to remove them from the Lattice.\n     * @category Lattice\n     */\n    Client.prototype.removeKvRecords = function (_a) {\n        var _b = _a.type, type = _b === void 0 ? 0 : _b, _c = _a.ids, ids = _c === void 0 ? [] : _c;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_d) {\n                return [2 /*return*/, this.retryWrapper(index_1.removeKvRecords, { type: type, ids: ids, })];\n            });\n        });\n    };\n    /**\n     * Fetch a record of encrypted data from the Lattice.\n     * Must specify a data type. Returns a Buffer containing\n     * data formatted according to the specified type.\n     * @category Lattice\n     */\n    Client.prototype.fetchEncryptedData = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.retryWrapper(index_1.fetchEncData, params)];\n            });\n        });\n    };\n    /** Get the active wallet */\n    Client.prototype.getActiveWallet = function () {\n        if (this.activeWallets.external.uid &&\n            !constants_1.EMPTY_WALLET_UID.equals(this.activeWallets.external.uid)) {\n            return this.activeWallets.external;\n        }\n        else if (this.activeWallets.internal.uid &&\n            !constants_1.EMPTY_WALLET_UID.equals(this.activeWallets.internal.uid)) {\n            return this.activeWallets.internal;\n        }\n        else {\n            return undefined;\n        }\n    };\n    /** Check if the user has an active wallet */\n    Client.prototype.hasActiveWallet = function () {\n        return !!this.getActiveWallet();\n    };\n    /**\n     * Reset the active wallets to empty values.\n     * @category Device Response\n     * @internal\n     */\n    Client.prototype.resetActiveWallets = function () {\n        this.activeWallets = constants_1.DEFAULT_ACTIVE_WALLETS;\n    };\n    /**\n     * Get a JSON string containing state data that can be used to rehydrate a session. Pass the\n     * contents of this to the constructor as `stateData` to rehydrate.\n     * @internal\n     */\n    Client.prototype.getStateData = function () {\n        return this.packStateData();\n    };\n    /**\n     * Returns the firmware version constants for the given firmware version.\n     * @internal\n     */\n    Client.prototype.getFwConstants = function () {\n        var _a;\n        return (0, constants_1.getFwVersionConst)((_a = this.fwVersion) !== null && _a !== void 0 ? _a : Buffer.alloc(0));\n    };\n    /**\n     * `getFwVersion` gets the firmware version of the paired device.\n     * @internal\n     */\n    Client.prototype.getFwVersion = function () {\n        if (this.fwVersion && this.fwVersion.length >= 3) {\n            return {\n                fix: this.fwVersion[0],\n                minor: this.fwVersion[1],\n                major: this.fwVersion[2],\n            };\n        }\n        return { fix: 0, minor: 0, major: 0 };\n    };\n    /**\n     * Handles the mutation of Client state in the primary functions.\n     */\n    Client.prototype.mutate = function (_a) {\n        var deviceId = _a.deviceId, ephemeralPub = _a.ephemeralPub, url = _a.url, isPaired = _a.isPaired, fwVersion = _a.fwVersion, activeWallets = _a.activeWallets;\n        if (deviceId !== undefined)\n            this.deviceId = deviceId;\n        if (ephemeralPub !== undefined)\n            this.ephemeralPub = ephemeralPub;\n        if (url !== undefined)\n            this.url = url;\n        if (isPaired !== undefined)\n            this.isPaired = isPaired;\n        if (fwVersion !== undefined)\n            this.fwVersion = fwVersion;\n        if (activeWallets !== undefined)\n            this.activeWallets = activeWallets;\n    };\n    /**\n     * Return JSON-stringified version of state data. Can be used to rehydrate an SDK session without\n     * reconnecting to the target Lattice.\n     * @internal\n     */\n    Client.prototype.packStateData = function () {\n        var _a, _b, _c, _d, _e, _f, _g;\n        try {\n            var data = {\n                activeWallets: {\n                    internal: {\n                        uid: (_a = this.activeWallets.internal.uid) === null || _a === void 0 ? void 0 : _a.toString('hex'),\n                        name: (_b = this.activeWallets.internal.name) === null || _b === void 0 ? void 0 : _b.toString(),\n                        capabilities: this.activeWallets.internal.capabilities,\n                    },\n                    external: {\n                        uid: (_c = this.activeWallets.external.uid) === null || _c === void 0 ? void 0 : _c.toString('hex'),\n                        name: (_d = this.activeWallets.external.name) === null || _d === void 0 ? void 0 : _d.toString(),\n                        capabilities: this.activeWallets.external.capabilities,\n                    },\n                },\n                ephemeralPub: (_f = (_e = this.ephemeralPub) === null || _e === void 0 ? void 0 : _e.getPublic()) === null || _f === void 0 ? void 0 : _f.encode('hex'),\n                fwVersion: (_g = this.fwVersion) === null || _g === void 0 ? void 0 : _g.toString('hex'),\n                deviceId: this.deviceId,\n                name: this.name,\n                baseUrl: this.baseUrl,\n                privKey: this.privKey.toString('hex'),\n                retryCount: this.retryCount,\n                timeout: this.timeout,\n            };\n            return JSON.stringify(data);\n        }\n        catch (err) {\n            console.warn('Could not pack state data.');\n            return null;\n        }\n    };\n    /**\n     * Unpack a JSON-stringified version of state data and apply it to state. This will allow us to\n     * rehydrate an old session.\n     * @internal\n     */\n    Client.prototype.unpackAndApplyStateData = function (data) {\n        try {\n            var unpacked = JSON.parse(data);\n            // Attempt to parse the data\n            var internalWallet = {\n                uid: Buffer.from(unpacked.activeWallets.internal.uid, 'hex'),\n                name: unpacked.activeWallets.internal.name ?\n                    Buffer.from(unpacked.activeWallets.internal.name) :\n                    null,\n                capabilities: unpacked.activeWallets.internal.capabilities,\n                external: false,\n            };\n            var externalWallet = {\n                uid: Buffer.from(unpacked.activeWallets.external.uid, 'hex'),\n                name: unpacked.activeWallets.external.name ?\n                    Buffer.from(unpacked.activeWallets.external.name) :\n                    null,\n                capabilities: unpacked.activeWallets.external.capabilities,\n                external: true,\n            };\n            var ephemeralPubBytes = Buffer.from(unpacked.ephemeralPub, 'hex');\n            var fwVersionBytes = Buffer.from(unpacked.fwVersion, 'hex');\n            var privKeyBytes = Buffer.from(unpacked.privKey, 'hex');\n            // Apply unpacked params\n            this.activeWallets.internal = internalWallet;\n            this.activeWallets.external = externalWallet;\n            this.ephemeralPub = (0, util_1.getP256KeyPairFromPub)(ephemeralPubBytes);\n            this.fwVersion = fwVersionBytes;\n            this.deviceId = unpacked.deviceId;\n            this.name = unpacked.name;\n            this.baseUrl = unpacked.baseUrl;\n            this.url = \"\".concat(this.baseUrl, \"/\").concat(this.deviceId);\n            this.privKey = privKeyBytes;\n            this.key = (0, util_1.getP256KeyPair)(this.privKey);\n            this.retryCount = unpacked.retryCount;\n            this.timeout = unpacked.timeout;\n            this.retryWrapper = (0, functions_1.buildRetryWrapper)(this, this.retryCount);\n        }\n        catch (err) {\n            console.warn('Could not apply state data.');\n        }\n    };\n    return Client;\n}());\nexports.Client = Client;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PUBLIC = exports.ETH_ABI_LATTICE_FW_TYPE_MAP = exports.MAX_CHAIN_ID_BYTES = exports.HANDLE_LARGER_CHAIN_ID = exports.HARDENED_OFFSET = exports.VERSION_BYTE = exports.REQUEST_TYPE_BYTE = exports.signingSchema = exports.ethMsgProtocol = exports.addressSizes = exports.EXTERNAL_NETWORKS_BY_CHAIN_ID_URL = exports.NETWORKS_BY_CHAIN_ID = exports.MAX_ADDR = exports.CURRENCIES = exports.BASE_URL = exports.BIP_CONSTANTS = exports.getFwVersionConst = exports.ASCII_REGEX = exports.LEDGER_LEGACY_DERIVATION = exports.LEDGER_LIVE_DERIVATION = exports.SOLANA_DERIVATION = exports.BTC_WRAPPED_SEGWIT_DERIVATION = exports.BTC_SEGWIT_DERIVATION = exports.BTC_LEGACY_DERIVATION = exports.DEFAULT_ETH_DERIVATION = exports.DEFAULT_ACTIVE_WALLETS = exports.EMPTY_WALLET_UID = exports.EXTERNAL = void 0;\nvar latticeConstants_1 = require(\"./protocol/latticeConstants\");\n/**\n * Externally exported constants used for building requests\n * @public\n */\nexports.EXTERNAL = {\n    // Optional flags for `getAddresses`\n    GET_ADDR_FLAGS: {\n        SECP256K1_PUB: latticeConstants_1.LatticeGetAddressesFlag.secp256k1Pubkey,\n        ED25519_PUB: latticeConstants_1.LatticeGetAddressesFlag.ed25519Pubkey,\n        BLS12_381_G1_PUB: latticeConstants_1.LatticeGetAddressesFlag.bls12_381Pubkey,\n    },\n    // Options for building general signing requests\n    SIGNING: {\n        HASHES: {\n            NONE: latticeConstants_1.LatticeSignHash.none,\n            KECCAK256: latticeConstants_1.LatticeSignHash.keccak256,\n            SHA256: latticeConstants_1.LatticeSignHash.sha256,\n        },\n        CURVES: {\n            SECP256K1: latticeConstants_1.LatticeSignCurve.secp256k1,\n            ED25519: latticeConstants_1.LatticeSignCurve.ed25519,\n            BLS12_381_G2: latticeConstants_1.LatticeSignCurve.bls12_381,\n        },\n        ENCODINGS: {\n            NONE: latticeConstants_1.LatticeSignEncoding.none,\n            SOLANA: latticeConstants_1.LatticeSignEncoding.solana,\n            EVM: latticeConstants_1.LatticeSignEncoding.evm,\n            ETH_DEPOSIT: latticeConstants_1.LatticeSignEncoding.eth_deposit,\n        },\n        BLS_DST: {\n            BLS_DST_NUL: latticeConstants_1.LatticeSignBlsDst.NUL,\n            BLS_DST_POP: latticeConstants_1.LatticeSignBlsDst.POP,\n        },\n    },\n    // Options for exporting encrypted data\n    ENC_DATA: {\n        SCHEMAS: {\n            BLS_KEYSTORE_EIP2335_PBKDF_V4: latticeConstants_1.LatticeEncDataSchema.eip2335,\n        },\n    },\n    ETH_CONSENSUS_SPEC: {\n        NETWORKS: {\n            MAINNET_GENESIS: {\n                networkName: 'mainnet',\n                forkVersion: Buffer.alloc(4),\n                // Empty root because there were no validators at genesis\n                validatorsRoot: Buffer.alloc(32),\n            },\n        },\n        DOMAINS: {\n            DEPOSIT: Buffer.from('03000000', 'hex'),\n            VOLUNTARY_EXIT: Buffer.from('04000000', 'hex'),\n        },\n    },\n};\nexports.PUBLIC = exports.EXTERNAL;\n//===============================\n// INTERNAL CONSTANTS\n//===============================\n/** @internal */\nvar addressSizes = {\n    BTC: 20,\n    ETH: 20, // 20 byte address not including 0x prefix\n};\nexports.addressSizes = addressSizes;\n/** @internal */\nvar CURRENCIES = {\n    ETH: 'ETH',\n    BTC: 'BTC',\n    ETH_MSG: 'ETH_MSG',\n};\nexports.CURRENCIES = CURRENCIES;\n/** @internal */\n// THIS NEEDS TO BE A PROTOCOL CONSTANT TOO\nvar signingSchema = {\n    BTC_TRANSFER: 0,\n    ETH_TRANSFER: 1,\n    ERC20_TRANSFER: 2,\n    ETH_MSG: 3,\n    EXTRA_DATA: 4,\n    GENERAL_SIGNING: 5,\n};\nexports.signingSchema = signingSchema;\n/** @internal */\nvar HARDENED_OFFSET = 0x80000000; // Hardened offset\nexports.HARDENED_OFFSET = HARDENED_OFFSET;\n/** @internal */\nvar BIP_CONSTANTS = {\n    PURPOSES: {\n        ETH: HARDENED_OFFSET + 44,\n        BTC_LEGACY: HARDENED_OFFSET + 44,\n        BTC_WRAPPED_SEGWIT: HARDENED_OFFSET + 49,\n        BTC_SEGWIT: HARDENED_OFFSET + 84,\n    },\n    COINS: {\n        ETH: HARDENED_OFFSET + 60,\n        BTC: HARDENED_OFFSET,\n        BTC_TESTNET: HARDENED_OFFSET + 1,\n    },\n};\nexports.BIP_CONSTANTS = BIP_CONSTANTS;\n/** @internal For all HSM-bound requests */\nvar REQUEST_TYPE_BYTE = 0x02;\nexports.REQUEST_TYPE_BYTE = REQUEST_TYPE_BYTE;\n/** @internal */\nvar VERSION_BYTE = 1;\nexports.VERSION_BYTE = VERSION_BYTE;\n/** @internal ChainId value to signify larger chainID is in data buffer */\nvar HANDLE_LARGER_CHAIN_ID = 255;\nexports.HANDLE_LARGER_CHAIN_ID = HANDLE_LARGER_CHAIN_ID;\n/** @internal Max number of bytes to contain larger chainID in data buffer */\nvar MAX_CHAIN_ID_BYTES = 8;\nexports.MAX_CHAIN_ID_BYTES = MAX_CHAIN_ID_BYTES;\n/** @internal */\nvar BASE_URL = 'https://signing.gridpl.us';\nexports.BASE_URL = BASE_URL;\n/** @internal */\nvar EIP712_ABI_LATTICE_FW_TYPE_MAP = {\n    address: 1,\n    bool: 2,\n    uint8: 3,\n    uint16: 4,\n    uint24: 5,\n    uint32: 6,\n    uint40: 7,\n    uint48: 8,\n    uint56: 9,\n    uint64: 10,\n    uint72: 11,\n    uint80: 12,\n    uint88: 13,\n    uint96: 14,\n    uint104: 15,\n    uint112: 16,\n    uint120: 17,\n    uint128: 18,\n    uint136: 19,\n    uint144: 20,\n    uint152: 21,\n    uint160: 22,\n    uint168: 23,\n    uint176: 24,\n    uint184: 25,\n    uint192: 26,\n    uint200: 27,\n    uint208: 28,\n    uint216: 29,\n    uint224: 30,\n    uint232: 31,\n    uint240: 32,\n    uint248: 33,\n    uint256: 34,\n    int8: 35,\n    int16: 36,\n    int24: 37,\n    int32: 38,\n    int40: 39,\n    int48: 40,\n    int56: 41,\n    int64: 42,\n    int72: 43,\n    int80: 44,\n    int88: 45,\n    int96: 46,\n    int104: 47,\n    int112: 48,\n    int120: 49,\n    int128: 50,\n    int136: 51,\n    int144: 52,\n    int152: 53,\n    int160: 54,\n    int168: 55,\n    int176: 56,\n    int184: 57,\n    int192: 58,\n    int200: 59,\n    int208: 60,\n    int216: 61,\n    int224: 62,\n    int232: 63,\n    int240: 64,\n    int248: 65,\n    int256: 66,\n    uint: 67,\n    bytes1: 69,\n    bytes2: 70,\n    bytes3: 71,\n    bytes4: 72,\n    bytes5: 73,\n    bytes6: 74,\n    bytes7: 75,\n    bytes8: 76,\n    bytes9: 77,\n    bytes10: 78,\n    bytes11: 79,\n    bytes12: 80,\n    bytes13: 81,\n    bytes14: 82,\n    bytes15: 83,\n    bytes16: 84,\n    bytes17: 85,\n    bytes18: 86,\n    bytes19: 87,\n    bytes20: 88,\n    bytes21: 89,\n    bytes22: 90,\n    bytes23: 91,\n    bytes24: 92,\n    bytes25: 93,\n    bytes26: 94,\n    bytes27: 95,\n    bytes28: 96,\n    bytes29: 97,\n    bytes30: 98,\n    bytes31: 99,\n    bytes32: 100,\n    bytes: 101,\n    string: 102,\n};\n/** @internal */\nvar ETH_ABI_LATTICE_FW_TYPE_MAP = __assign(__assign({}, EIP712_ABI_LATTICE_FW_TYPE_MAP), { tuple1: 103, tuple2: 104, tuple3: 105, tuple4: 106, tuple5: 107, tuple6: 108, tuple7: 109, tuple8: 110, tuple9: 111, tuple10: 112, tuple11: 113, tuple12: 114, tuple13: 115, tuple14: 116, tuple15: 117, tuple16: 118, tuple17: 119 });\nexports.ETH_ABI_LATTICE_FW_TYPE_MAP = ETH_ABI_LATTICE_FW_TYPE_MAP;\n/** @internal */\nvar ethMsgProtocol = {\n    SIGN_PERSONAL: {\n        str: 'signPersonal',\n        enumIdx: 0, // Enum index of this protocol in Lattice firmware\n    },\n    TYPED_DATA: {\n        str: 'typedData',\n        enumIdx: 1,\n        rawDataMaxLen: 1629,\n        typeCodes: EIP712_ABI_LATTICE_FW_TYPE_MAP, // Enum indices of data types in Lattice firmware\n    },\n};\nexports.ethMsgProtocol = ethMsgProtocol;\n/** @internal */\nfunction getFwVersionConst(v) {\n    var c = {\n        extraDataFrameSz: 0,\n        extraDataMaxFrames: 0,\n        genericSigning: {},\n    };\n    function gte(v, exp) {\n        // Note that `v` fields come in as [fix|minor|major]\n        return (v[2] > exp[0] ||\n            (v[2] === exp[0] && v[1] > exp[1]) ||\n            (v[2] === exp[0] && v[1] === exp[1] && v[0] > exp[2]) ||\n            (v[2] === exp[0] && v[1] === exp[1] && v[0] === exp[2]));\n    }\n    // Very old legacy versions do not give a version number\n    var legacy = v.length === 0;\n    // BASE FIELDS\n    //--------------------------------------\n    // Various size constants have changed on the firmware side over time and\n    // are captured here\n    if (!legacy && gte(v, [0, 10, 4])) {\n        // >=0.10.3\n        c.reqMaxDataSz = 1678;\n        c.ethMaxGasPrice = 20000000000000; // 20000 gwei\n        c.addrFlagsAllowed = true;\n    }\n    else if (!legacy && gte(v, [0, 10, 0])) {\n        // >=0.10.0\n        c.reqMaxDataSz = 1678;\n        c.ethMaxGasPrice = 20000000000000; // 20000 gwei\n        c.addrFlagsAllowed = true;\n    }\n    else {\n        // Legacy or <0.10.0\n        c.reqMaxDataSz = 1152;\n        c.ethMaxGasPrice = 500000000000; // 500 gwei\n        c.addrFlagsAllowed = false;\n    }\n    // These transformations apply to all versions. The subtraction\n    // of 128 bytes accounts for metadata and is for legacy reasons.\n    // For all modern versions, these are 1550 bytes.\n    // NOTE: Non-legacy ETH txs (e.g. EIP1559) will shrink\n    // this number.\n    // See `ETH_BASE_TX_MAX_DATA_SZ` and `ETH_MAX_BASE_MSG_SZ` in firmware\n    c.ethMaxDataSz = c.reqMaxDataSz - 128;\n    c.ethMaxMsgSz = c.ethMaxDataSz;\n    // Max number of params in an EIP712 type. This was added to firmware\n    // to avoid blowing stack size.\n    c.eip712MaxTypeParams = 18;\n    // -----\n    // EXTRA FIELDS ADDED IN LATER FIRMWARE VERSIONS\n    // -----\n    // --- V0.10.X ---\n    // V0.10.4 introduced the ability to send signing requests over multiple\n    // data frames (i.e. in multiple requests)\n    if (!legacy && gte(v, [0, 10, 4])) {\n        c.extraDataFrameSz = 1500; // 1500 bytes per frame of extraData allowed\n        c.extraDataMaxFrames = 1; // 1 frame of extraData allowed\n    }\n    // V0.10.5 added the ability to use flexible address path sizes, which\n    // changes the `getAddress` API. It also added support for EIP712\n    if (!legacy && gte(v, [0, 10, 5])) {\n        c.varAddrPathSzAllowed = true;\n        c.eip712Supported = true;\n    }\n    // V0.10.8 allows a user to sign a prehashed transaction if the payload\n    // is too big\n    if (!legacy && gte(v, [0, 10, 8])) {\n        c.prehashAllowed = true;\n    }\n    // V0.10.10 allows a user to sign a prehashed ETH message if payload too big\n    if (!legacy && gte(v, [0, 10, 10])) {\n        c.ethMsgPreHashAllowed = true;\n    }\n    // --- 0.11.X ---\n    // V0.11.0 allows new ETH transaction types\n    if (!legacy && gte(v, [0, 11, 0])) {\n        c.allowedEthTxTypes = [\n            1,\n            2, // eip1559\n        ];\n        // This version added extra data fields to the ETH tx\n        c.ethMaxDataSz -= 10;\n        c.ethMaxMsgSz = c.ethMaxDataSz;\n    }\n    // V0.11.2 changed how messages are displayed. For personal_sign messages\n    // we now write the header (`Signer: <path>`) into the main body of the screen.\n    // This means personal sign message max size is slightly smaller than for\n    // EIP712 messages because in the latter case there is no header\n    // Note that `<path>` has max size of 62 bytes (`m/X/X/...`)\n    if (!legacy && gte(v, [0, 11, 2])) {\n        c.personalSignHeaderSz = 72;\n    }\n    // --- V0.12.X ---\n    // V0.12.0 added an API for creating, removing, and fetching key-val file\n    // records. For the purposes of this SDK, we only hook into one type of kv\n    // file: address names.\n    if (!legacy && gte(v, [0, 12, 0])) {\n        c.kvActionsAllowed = true;\n        c.kvKeyMaxStrSz = 63;\n        c.kvValMaxStrSz = 63;\n        c.kvActionMaxNum = 10;\n        c.kvRemoveMaxNum = 100;\n    }\n    // --- V0.13.X ---\n    // V0.13.0 added native segwit addresses and fixed a bug in exporting\n    // legacy bitcoin addresses\n    if (!legacy && gte(v, [0, 13, 0])) {\n        c.allowBtcLegacyAndSegwitAddrs = true;\n        // Random address to be used when trying to deploy a contract\n        c.contractDeployKey = '0x08002e0fec8e6acf00835f43c9764f7364fa3f42';\n    }\n    // --- V0.14.X ---\n    // V0.14.0 added support for a more robust API around ABI definitions\n    // and generic signing functionality\n    if (!legacy && gte(v, [0, 14, 0])) {\n        // Size of `category` buffer. Inclusive of null terminator byte.\n        c.abiCategorySz = 32;\n        c.abiMaxRmv = 200; // Max number of ABI defs that can be removed with\n        // a single request\n        // See `sizeof(GenericSigningRequest_t)` in firmware\n        c.genericSigning.baseReqSz = 1552;\n        // See `GENERIC_SIGNING_BASE_MSG_SZ` in firmware\n        c.genericSigning.baseDataSz = 1519;\n        c.genericSigning.hashTypes = exports.EXTERNAL.SIGNING.HASHES;\n        c.genericSigning.curveTypes = exports.EXTERNAL.SIGNING.CURVES;\n        c.genericSigning.encodingTypes = {\n            NONE: exports.EXTERNAL.SIGNING.ENCODINGS.NONE,\n            SOLANA: exports.EXTERNAL.SIGNING.ENCODINGS.SOLANA,\n        };\n        // Supported flags for `getAddresses`\n        c.getAddressFlags = [\n            exports.EXTERNAL.GET_ADDR_FLAGS.ED25519_PUB,\n            exports.EXTERNAL.GET_ADDR_FLAGS.SECP256K1_PUB,\n        ];\n        // We updated the max number of params in EIP712 types\n        c.eip712MaxTypeParams = 36;\n    }\n    // DEPRECATED\n    // V0.14.1 Added the Terra decoder\n    // if (!legacy && gte(v, [0, 14, 1])) {\n    //   c.genericSigning.encodingTypes.TERRA = EXTERNAL.SIGNING.ENCODINGS.TERRA;\n    // }\n    // --- V0.15.X ---\n    // V0.15.0 added an EVM decoder and removed the legacy ETH signing pathway\n    if (!legacy && gte(v, [0, 15, 0])) {\n        c.genericSigning.encodingTypes.EVM = exports.EXTERNAL.SIGNING.ENCODINGS.EVM;\n        // We now use the general signing data field as the base\n        // Note that we have NOT removed the ETH_MSG type so we should\n        // not change ethMaxMsgSz\n        c.ethMaxDataSz = 1550 - 31;\n        // Max buffer size for get/add decoder requests\n        c.maxDecoderBufSz = 1600;\n        // Code used to write a calldata decoder\n        c.genericSigning.calldataDecoding = {\n            reserved: 2895728,\n            maxSz: 1024,\n        };\n    }\n    // --- V0.17.X ---\n    // V0.17.0 added support for BLS12-381-G1 pubkeys and G2 sigs\n    if (!legacy && gte(v, [0, 17, 0])) {\n        c.getAddressFlags.push(exports.EXTERNAL.GET_ADDR_FLAGS.BLS12_381_G1_PUB);\n        c.genericSigning.encodingTypes.ETH_DEPOSIT = exports.EXTERNAL.SIGNING.ENCODINGS.ETH_DEPOSIT;\n    }\n    return c;\n}\nexports.getFwVersionConst = getFwVersionConst;\n/** @internal */\n// eslint-disable-next-line no-control-regex\nvar ASCII_REGEX = /^[\\x00-\\x7F]+$/;\nexports.ASCII_REGEX = ASCII_REGEX;\n/** @internal */\nvar EXTERNAL_NETWORKS_BY_CHAIN_ID_URL = 'https://gridplus.github.io/chains/chains.json';\nexports.EXTERNAL_NETWORKS_BY_CHAIN_ID_URL = EXTERNAL_NETWORKS_BY_CHAIN_ID_URL;\n/** @internal - Max number of addresses to fetch */\nvar MAX_ADDR = 10;\nexports.MAX_ADDR = MAX_ADDR;\n/** @internal */\nvar NETWORKS_BY_CHAIN_ID = {\n    1: {\n        name: 'ethereum',\n        baseUrl: 'https://api.etherscan.io',\n        apiRoute: 'api?module=contract&action=getabi',\n    },\n    137: {\n        name: 'polygon',\n        baseUrl: 'https://api.polygonscan.com',\n        apiRoute: 'api?module=contract&action=getabi',\n    },\n    56: {\n        name: 'binance',\n        baseUrl: 'https://api.bscscan.com',\n        apiRoute: 'api?module=contract&action=getabi',\n    },\n    42220: {\n        name: 'celo',\n        baseUrl: 'https://api.celoscan.io',\n        apiRoute: 'api?module=contract&action=getabi',\n    },\n    43114: {\n        name: 'avalanche',\n        baseUrl: 'https://api.snowtrace.io',\n        apiRoute: 'api?module=contract&action=getabi',\n    },\n};\nexports.NETWORKS_BY_CHAIN_ID = NETWORKS_BY_CHAIN_ID;\n/** @internal */\nexports.EMPTY_WALLET_UID = Buffer.alloc(32);\n/** @internal */\nexports.DEFAULT_ACTIVE_WALLETS = {\n    internal: {\n        uid: exports.EMPTY_WALLET_UID,\n        external: false,\n        name: Buffer.alloc(0),\n        capabilities: 0,\n    },\n    external: {\n        uid: exports.EMPTY_WALLET_UID,\n        external: true,\n        name: Buffer.alloc(0),\n        capabilities: 0,\n    },\n};\n/** @internal */\nexports.DEFAULT_ETH_DERIVATION = [\n    HARDENED_OFFSET + 44,\n    HARDENED_OFFSET + 60,\n    HARDENED_OFFSET,\n    0,\n    0,\n];\n/** @internal */\nexports.BTC_LEGACY_DERIVATION = [\n    HARDENED_OFFSET + 44,\n    HARDENED_OFFSET + 0,\n    HARDENED_OFFSET,\n    0,\n    0,\n];\n/** @internal */\nexports.BTC_SEGWIT_DERIVATION = [\n    HARDENED_OFFSET + 84,\n    HARDENED_OFFSET,\n    HARDENED_OFFSET,\n    0,\n    0,\n];\n/** @internal */\nexports.BTC_WRAPPED_SEGWIT_DERIVATION = [\n    HARDENED_OFFSET + 49,\n    HARDENED_OFFSET,\n    HARDENED_OFFSET,\n    0,\n    0,\n];\n/** @internal */\nexports.SOLANA_DERIVATION = [\n    HARDENED_OFFSET + 44,\n    HARDENED_OFFSET + 501,\n    HARDENED_OFFSET,\n];\n/** @internal */\nexports.LEDGER_LIVE_DERIVATION = [\n    HARDENED_OFFSET + 49,\n    HARDENED_OFFSET + 60,\n    HARDENED_OFFSET,\n    0,\n    0,\n];\n/** @internal */\nexports.LEDGER_LEGACY_DERIVATION = [\n    HARDENED_OFFSET + 49,\n    HARDENED_OFFSET + 60,\n    HARDENED_OFFSET,\n    0,\n];\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Utils for Ethereum transactions. This is effecitvely a shim of ethereumjs-util, which\n// does not have browser (or, by proxy, React-Native) support.\nvar common_1 = require(\"@ethereumjs/common\");\nvar tx_1 = require(\"@ethereumjs/tx\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar borc_1 = __importDefault(require(\"borc\"));\n//@ts-expect-error - This third-party package is not typed properly\nvar eth_eip712_util_browser_1 = require(\"eth-eip712-util-browser\");\nvar js_sha3_1 = require(\"js-sha3\");\nvar rlp_1 = require(\"rlp\");\nvar secp256k1_1 = __importDefault(require(\"secp256k1\"));\nvar constants_1 = require(\"./constants\");\nvar protocol_1 = require(\"./protocol\");\nvar util_1 = require(\"./util\");\nvar buildEthereumMsgRequest = function (input) {\n    if (!input.payload || !input.protocol || !input.signerPath)\n        throw new Error('You must provide `payload`, `signerPath`, and `protocol` arguments in the messsage request');\n    if (input.signerPath.length > 5 || input.signerPath.length < 2)\n        throw new Error('Please provide a signer path with 2-5 indices');\n    var req = {\n        schema: protocol_1.LatticeSignSchema.ethereumMsg,\n        payload: null,\n        input: input,\n        msg: null, // Save the buffered message for later\n    };\n    switch (input.protocol) {\n        case 'signPersonal':\n            return buildPersonalSignRequest(req, input);\n        case 'eip712':\n            if (!input.fwConstants.eip712Supported)\n                throw new Error('EIP712 is not supported by your Lattice firmware version. Please upgrade.');\n            return buildEIP712Request(req, input);\n        default:\n            throw new Error('Unsupported protocol');\n    }\n};\nvar validateEthereumMsgResponse = function (res, req) {\n    var signer = res.signer, sig = res.sig;\n    var input = req.input, msg = req.msg, _a = req.prehash, prehash = _a === void 0 ? null : _a;\n    if (input.protocol === 'signPersonal') {\n        // NOTE: We are currently hardcoding networkID=1 and useEIP155=false but these\n        //       may be configurable in future versions\n        var hash_1 = prehash\n            ? prehash\n            : Buffer.from((0, js_sha3_1.keccak256)(Buffer.concat([get_personal_sign_prefix(msg.length), msg])), 'hex');\n        // Get recovery param with a `v` value of [27,28] by setting `useEIP155=false`\n        return addRecoveryParam(hash_1, sig, signer, {\n            chainId: 1,\n            useEIP155: false,\n        });\n    }\n    else if (input.protocol === 'eip712') {\n        var encoded = eth_eip712_util_browser_1.TypedDataUtils.hash(req.input.payload);\n        var digest = prehash ? prehash : encoded;\n        // Get recovery param with a `v` value of [27,28] by setting `useEIP155=false`\n        return addRecoveryParam(digest, sig, signer, { useEIP155: false });\n    }\n    else {\n        throw new Error('Unsupported protocol');\n    }\n};\nvar buildEthereumTxRequest = function (data) {\n    try {\n        var _a = data.chainId, chainId = _a === void 0 ? 1 : _a;\n        var signerPath = data.signerPath, _b = data.eip155, eip155 = _b === void 0 ? null : _b, fwConstants = data.fwConstants, _c = data.type, type = _c === void 0 ? null : _c;\n        var contractDeployKey = fwConstants.contractDeployKey, extraDataFrameSz = fwConstants.extraDataFrameSz, extraDataMaxFrames = fwConstants.extraDataMaxFrames, prehashAllowed = fwConstants.prehashAllowed;\n        var EXTRA_DATA_ALLOWED = extraDataFrameSz > 0 && extraDataMaxFrames > 0;\n        var MAX_BASE_DATA_SZ = fwConstants.ethMaxDataSz;\n        var VAR_PATH_SZ = fwConstants.varAddrPathSzAllowed;\n        // Sanity checks:\n        // There are a handful of named chains we allow the user to reference (`chainIds`)\n        // Custom chainIDs should be either numerical or hex strings\n        if (typeof chainId !== 'number' &&\n            isValidChainIdHexNumStr(chainId) === false) {\n            chainId = chainIds[chainId];\n        }\n        // If this was not a custom chainID and we cannot find the name of it, exit\n        if (!chainId)\n            throw new Error('Unsupported chain ID or name');\n        // Sanity check on signePath\n        if (!signerPath)\n            throw new Error('`signerPath` not provided');\n        // Is this a contract deployment?\n        if (data.to === null && !contractDeployKey) {\n            throw new Error('Contract deployment not supported. Please update your Lattice firmware.');\n        }\n        var isDeployment = data.to === null && contractDeployKey;\n        // We support eip1559 and eip2930 types (as well as legacy)\n        var eip1559IsAllowed = fwConstants.allowedEthTxTypes &&\n            fwConstants.allowedEthTxTypes.indexOf(2) > -1;\n        var eip2930IsAllowed = fwConstants.allowedEthTxTypes &&\n            fwConstants.allowedEthTxTypes.indexOf(1) > -1;\n        var isEip1559 = eip1559IsAllowed && (type === 2 || type === 'eip1559');\n        var isEip2930 = eip2930IsAllowed && (type === 1 || type === 'eip2930');\n        if (type !== null && !isEip1559 && !isEip2930)\n            throw new Error('Unsupported Ethereum transaction type');\n        // Determine if we should use EIP155 given the chainID.\n        // If we are explicitly told to use eip155, we will use it. Otherwise,\n        // we will look up if the specified chainId is associated with a chain\n        // that does not use EIP155 by default. Note that most do use EIP155.\n        var useEIP155 = chainUsesEIP155(chainId);\n        if (eip155 !== null && typeof eip155 === 'boolean') {\n            useEIP155 = eip155;\n        }\n        else if (isEip1559 || isEip2930) {\n            // Newer transaction types do not use EIP155 since the chainId is serialized\n            useEIP155 = false;\n        }\n        // Hack for metamask, which sends value=null for 0 ETH transactions\n        if (!data.value)\n            data.value = 0;\n        //--------------\n        // 1. BUILD THE RAW TX FOR FUTURE RLP ENCODING\n        //--------------\n        // Ensure all fields are 0x-prefixed hex strings\n        var rawTx = [];\n        // Build the transaction buffer array\n        var chainIdBytes = (0, util_1.ensureHexBuffer)(chainId);\n        var nonceBytes = (0, util_1.ensureHexBuffer)(data.nonce);\n        var gasPriceBytes = void 0;\n        var gasLimitBytes = (0, util_1.ensureHexBuffer)(data.gasLimit);\n        // Handle contract deployment (indicated by `to` being `null`)\n        // For contract deployment we write a 20-byte key to the request\n        // buffer, which gets swapped for an empty buffer in firmware.\n        var toRlpElem = void 0, toBytes = void 0;\n        if (isDeployment) {\n            toRlpElem = Buffer.alloc(0);\n            toBytes = (0, util_1.ensureHexBuffer)(contractDeployKey);\n        }\n        else {\n            toRlpElem = (0, util_1.ensureHexBuffer)(data.to);\n            toBytes = (0, util_1.ensureHexBuffer)(data.to);\n        }\n        var valueBytes = (0, util_1.ensureHexBuffer)(data.value);\n        var dataBytes = (0, util_1.ensureHexBuffer)(data.data);\n        if (isEip1559 || isEip2930) {\n            // EIP1559 and EIP2930 transactions have a chainID field\n            rawTx.push(chainIdBytes);\n        }\n        rawTx.push(nonceBytes);\n        var maxPriorityFeePerGasBytes = void 0, maxFeePerGasBytes = void 0;\n        if (isEip1559) {\n            if (!data.maxPriorityFeePerGas)\n                throw new Error('EIP1559 transactions must include `maxPriorityFeePerGas`');\n            maxPriorityFeePerGasBytes = (0, util_1.ensureHexBuffer)(data.maxPriorityFeePerGas);\n            rawTx.push(maxPriorityFeePerGasBytes);\n            maxFeePerGasBytes = (0, util_1.ensureHexBuffer)(data.maxFeePerGas);\n            rawTx.push(maxFeePerGasBytes);\n            // EIP1559 renamed \"gasPrice\" to \"maxFeePerGas\", but firmware still\n            // uses `gasPrice` in the struct, so update that value here.\n            gasPriceBytes = maxFeePerGasBytes;\n        }\n        else {\n            // EIP1559 transactions do not have the gasPrice field\n            gasPriceBytes = (0, util_1.ensureHexBuffer)(data.gasPrice);\n            rawTx.push(gasPriceBytes);\n        }\n        rawTx.push(gasLimitBytes);\n        rawTx.push(toRlpElem);\n        rawTx.push(valueBytes);\n        rawTx.push(dataBytes);\n        // We do not currently support accessList in firmware so we need to prehash if\n        // the list is non-null\n        var PREHASH_FROM_ACCESS_LIST_1 = false;\n        if (isEip1559 || isEip2930) {\n            var accessList_1 = [];\n            if (Array.isArray(data.accessList)) {\n                data.accessList.forEach(function (listItem) {\n                    var keys = [];\n                    listItem.storageKeys.forEach(function (key) {\n                        keys.push((0, util_1.ensureHexBuffer)(key));\n                    });\n                    accessList_1.push([(0, util_1.ensureHexBuffer)(listItem.address), keys]);\n                    PREHASH_FROM_ACCESS_LIST_1 = true;\n                });\n            }\n            rawTx.push(accessList_1);\n        }\n        else if (useEIP155 === true) {\n            // Add empty v,r,s values for EIP155 legacy transactions\n            rawTx.push(chainIdBytes); // v (which is the same as chainId in EIP155 txs)\n            rawTx.push((0, util_1.ensureHexBuffer)(null)); // r\n            rawTx.push((0, util_1.ensureHexBuffer)(null)); // s\n        }\n        //--------------\n        // 2. BUILD THE LATTICE REQUEST PAYLOAD\n        //--------------\n        var ETH_TX_NON_DATA_SZ = 122; // Accounts for metadata and non-data params\n        var txReqPayload = Buffer.alloc(MAX_BASE_DATA_SZ + ETH_TX_NON_DATA_SZ);\n        var off = 0;\n        // 1. EIP155 switch and chainID\n        //------------------\n        txReqPayload.writeUInt8(Number(useEIP155), off);\n        off++;\n        // NOTE: Originally we designed for a 1-byte chainID, but modern rollup chains use much larger\n        // chainID values. To account for these, we will put the chainID into the `data` buffer if it\n        // is >=255. Values up to UINT64_MAX will be allowed.\n        var chainIdBuf = void 0;\n        var chainIdBufSz = 0;\n        if (useChainIdBuffer(chainId) === true) {\n            chainIdBuf = getChainIdBuf(chainId);\n            chainIdBufSz = chainIdBuf.length;\n            if (chainIdBufSz > constants_1.MAX_CHAIN_ID_BYTES)\n                throw new Error('ChainID provided is too large.');\n            // Signal to Lattice firmware that it needs to read the chainId from the tx.data buffer\n            txReqPayload.writeUInt8(constants_1.HANDLE_LARGER_CHAIN_ID, off);\n            off++;\n        }\n        else {\n            // For chainIDs <255, write it to the chainId u8 slot in the main tx buffer\n            chainIdBuf = (0, util_1.ensureHexBuffer)(chainId);\n            if (chainIdBuf.length !== 1)\n                throw new Error('Error parsing chainID');\n            chainIdBuf.copy(txReqPayload, off);\n            off += chainIdBuf.length;\n        }\n        // 2. Signer Path\n        //------------------\n        var signerPathBuf = (0, util_1.buildSignerPathBuf)(signerPath, VAR_PATH_SZ);\n        signerPathBuf.copy(txReqPayload, off);\n        off += signerPathBuf.length;\n        // 3. ETH TX request data\n        //------------------\n        if (nonceBytes.length > 4)\n            throw new Error('Nonce too large');\n        nonceBytes.copy(txReqPayload, off + (4 - nonceBytes.length));\n        off += 4;\n        if (gasPriceBytes.length > 8)\n            throw new Error('Gas price too large');\n        gasPriceBytes.copy(txReqPayload, off + (8 - gasPriceBytes.length));\n        off += 8;\n        if (gasLimitBytes.length > 4)\n            throw new Error('Gas limit too large');\n        gasLimitBytes.copy(txReqPayload, off + (4 - gasLimitBytes.length));\n        off += 4;\n        if (toBytes.length !== 20)\n            throw new Error('Invalid `to` address');\n        toBytes.copy(txReqPayload, off);\n        off += 20;\n        if (valueBytes.length > 32)\n            throw new Error('Value too large');\n        valueBytes.copy(txReqPayload, off + (32 - valueBytes.length));\n        off += 32;\n        // Extra Tx data comes before `data` in the struct\n        var PREHASH_UNSUPPORTED = false;\n        if (fwConstants.allowedEthTxTypes) {\n            // Some types may not be supported by firmware, so we will need to prehash\n            if (PREHASH_FROM_ACCESS_LIST_1) {\n                PREHASH_UNSUPPORTED = true;\n            }\n            txReqPayload.writeUInt8(PREHASH_UNSUPPORTED ? 1 : 0, off);\n            off += 1;\n            // EIP1559 & EIP2930 struct version\n            if (isEip1559) {\n                txReqPayload.writeUInt8(2, off);\n                off += 1; // Eip1559 type enum value\n                if (maxPriorityFeePerGasBytes.length > 8)\n                    throw new Error('maxPriorityFeePerGasBytes too large');\n                maxPriorityFeePerGasBytes.copy(txReqPayload, off + (8 - maxPriorityFeePerGasBytes.length));\n                off += 8; // Skip EIP1559 params\n            }\n            else if (isEip2930) {\n                txReqPayload.writeUInt8(1, off);\n                off += 1; // Eip2930 type enum value\n                off += 8; // Skip EIP1559 params\n            }\n            else {\n                off += 9; // Skip EIP1559 and EIP2930 params\n            }\n        }\n        // Flow data into extraData requests, which will follow-up transaction requests, if supported/applicable\n        var extraDataPayloads_1 = [];\n        var prehash = null;\n        // Create the buffer, prefix with chainId (if needed) and add data slice\n        var dataSz = dataBytes.length || 0;\n        var chainIdExtraSz = chainIdBufSz > 0 ? chainIdBufSz + 1 : 0;\n        var dataToCopy = Buffer.alloc(dataSz + chainIdExtraSz);\n        if (chainIdExtraSz > 0) {\n            dataToCopy.writeUInt8(chainIdBufSz, 0);\n            chainIdBuf.copy(dataToCopy, 1);\n        }\n        dataBytes.copy(dataToCopy, chainIdExtraSz);\n        if (dataSz > MAX_BASE_DATA_SZ) {\n            // Determine sizes and run through sanity checks\n            var totalSz = dataSz + chainIdExtraSz;\n            var maxSzAllowed = MAX_BASE_DATA_SZ + extraDataMaxFrames * extraDataFrameSz;\n            if (prehashAllowed && totalSz > maxSzAllowed) {\n                // If this payload is too large to send, but the Lattice allows a prehashed message, do that\n                prehash = Buffer.from((0, js_sha3_1.keccak256)(get_rlp_encoded_preimage(rawTx, type)), 'hex');\n            }\n            else {\n                if (!EXTRA_DATA_ALLOWED ||\n                    (EXTRA_DATA_ALLOWED && totalSz > maxSzAllowed))\n                    throw new Error(\"Data field too large (got \".concat(dataBytes.length, \"; must be <=\").concat(maxSzAllowed - chainIdExtraSz, \" bytes)\"));\n                // Split overflow data into extraData frames\n                var frames_1 = (0, util_1.splitFrames)(dataToCopy.slice(MAX_BASE_DATA_SZ), extraDataFrameSz);\n                frames_1.forEach(function (frame) {\n                    var szLE = Buffer.alloc(4);\n                    szLE.writeUInt32LE(frame.length, 0);\n                    extraDataPayloads_1.push(Buffer.concat([szLE, frame]));\n                });\n            }\n        }\n        else if (PREHASH_UNSUPPORTED) {\n            // If something is unsupported in firmware but we want to allow such transactions,\n            // we prehash the message here.\n            prehash = Buffer.from((0, js_sha3_1.keccak256)(get_rlp_encoded_preimage(rawTx, type)), 'hex');\n        }\n        // Write the data size (does *NOT* include the chainId buffer, if that exists)\n        txReqPayload.writeUInt16BE(dataBytes.length, off);\n        off += 2;\n        // Copy in the chainId buffer if needed\n        if (chainIdBufSz > 0) {\n            txReqPayload.writeUInt8(chainIdBufSz, off);\n            off++;\n            chainIdBuf.copy(txReqPayload, off);\n            off += chainIdBufSz;\n        }\n        // Copy the first slice of the data itself. If this payload has been pre-hashed, include it\n        // in the `data` field. This will result in a different Lattice screen being drawn.\n        if (prehash) {\n            prehash.copy(txReqPayload, off);\n            off += MAX_BASE_DATA_SZ;\n        }\n        else {\n            dataBytes.slice(0, MAX_BASE_DATA_SZ).copy(txReqPayload, off);\n            off += MAX_BASE_DATA_SZ;\n        }\n        return {\n            rawTx: rawTx,\n            type: type,\n            payload: txReqPayload.slice(0, off),\n            extraDataPayloads: extraDataPayloads_1,\n            schema: protocol_1.LatticeSignSchema.ethereum,\n            chainId: chainId,\n            useEIP155: useEIP155,\n            signerPath: signerPath,\n        };\n    }\n    catch (err) {\n        return { err: err.message };\n    }\n};\n// From ethereumjs-util\nfunction stripZeros(a) {\n    var first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n}\n// Given a 64-byte signature [r,s] we need to figure out the v value\n// and attah the full signature to the end of the transaction payload\nvar buildEthRawTx = function (tx, sig, address) {\n    // RLP-encode the data we sent to the lattice\n    var hash = Buffer.from((0, js_sha3_1.keccak256)(get_rlp_encoded_preimage(tx.rawTx, tx.type)), 'hex');\n    var newSig = addRecoveryParam(hash, sig, address, tx);\n    // Use the signature to generate a new raw transaction payload\n    // Strip the last 3 items and replace them with signature components\n    var newRawTx = tx.useEIP155 ? tx.rawTx.slice(0, -3) : tx.rawTx;\n    newRawTx.push(newSig.v);\n    // Per `ethereumjs-tx`, RLP encoding should include signature components w/ stripped zeros\n    // See: https://github.com/ethereumjs/ethereumjs-tx/blob/master/src/transaction.ts#L187\n    newRawTx.push(stripZeros(newSig.r));\n    newRawTx.push(stripZeros(newSig.s));\n    var rlpEncodedWithSig = Buffer.from((0, rlp_1.encode)(newRawTx));\n    if (tx.type) {\n        rlpEncodedWithSig = Buffer.concat([\n            Buffer.from([tx.type]),\n            rlpEncodedWithSig,\n        ]);\n    }\n    return { rawTx: rlpEncodedWithSig.toString('hex'), sigWithV: newSig };\n};\n// Attach a recovery parameter to a signature by brute-forcing ECRecover\nfunction addRecoveryParam(hashBuf, sig, address, txData) {\n    if (txData === void 0) { txData = {}; }\n    try {\n        // Rebuild the keccak256 hash here so we can `ecrecover`\n        var hash_2 = new Uint8Array(hashBuf);\n        var v = 0;\n        // Fix signature componenet lengths to 32 bytes each\n        var r = (0, util_1.fixLen)(sig.r, 32);\n        sig.r = r;\n        var s = (0, util_1.fixLen)(sig.s, 32);\n        sig.s = s;\n        // Calculate the recovery param\n        var rs = new Uint8Array(Buffer.concat([r, s]));\n        var pubkey = secp256k1_1.default.ecdsaRecover(rs, v, hash_2, false).slice(1);\n        // If the first `v` value is a match, return the sig!\n        if (pubToAddrStr(pubkey) === address.toString('hex')) {\n            sig.v = getRecoveryParam(v, txData);\n            return sig;\n        }\n        // Otherwise, try the other `v` value\n        v = 1;\n        pubkey = secp256k1_1.default.ecdsaRecover(rs, v, hash_2, false).slice(1);\n        if (pubToAddrStr(pubkey) === address.toString('hex')) {\n            sig.v = getRecoveryParam(v, txData);\n            return sig;\n        }\n        else {\n            // If neither is a match, we should return an error\n            throw new Error('Invalid Ethereum signature returned.');\n        }\n    }\n    catch (err) {\n        throw new Error(err);\n    }\n}\n// Convert an RLP-serialized transaction (plus signature) into a transaction hash\nvar hashTransaction = function (serializedTx) {\n    return (0, js_sha3_1.keccak256)(Buffer.from(serializedTx, 'hex'));\n};\n// Returns address string given public key buffer\nfunction pubToAddrStr(pub) {\n    return (0, js_sha3_1.keccak256)(pub).slice(-40);\n}\n// Convert a 0/1 `v` into a recovery param:\n// * For non-EIP155 transactions, return `27 + v`\n// * For EIP155 transactions, return `(CHAIN_ID*2) + 35 + v`\nfunction getRecoveryParam(v, txData) {\n    if (txData === void 0) { txData = {}; }\n    var chainId = txData.chainId, useEIP155 = txData.useEIP155, type = txData.type;\n    // For EIP1559 and EIP2930 transactions, we want the recoveryParam (0 or 1)\n    // rather than the `v` value because the `chainId` is already included in the\n    // transaction payload.\n    if (type === 1 || type === 2) {\n        return (0, util_1.ensureHexBuffer)(v, true); // 0 or 1, with 0 expected as an empty buffer\n    }\n    else if (false === useEIP155 || chainId === null) {\n        // For ETH messages and non-EIP155 chains the set should be [27, 28] for `v`\n        return Buffer.from(new bignumber_js_1.default(v).plus(27).toString(16), 'hex');\n    }\n    // We will use EIP155 in most cases. Convert v to a bignum and operate on it.\n    // Note that the protocol calls for v = (CHAIN_ID*2) + 35/36, where 35 or 36\n    // is decided on based on the ecrecover result. `v` is passed in as either 0 or 1\n    // so we add 35 to that.\n    var chainIdBuf = getChainIdBuf(chainId);\n    var chainIdBN = new bignumber_js_1.default(chainIdBuf.toString('hex'), 16);\n    return (0, util_1.ensureHexBuffer)(\"0x\".concat(chainIdBN.times(2).plus(35).plus(v).toString(16)));\n}\nvar chainIds = {\n    mainnet: 1,\n    roptsten: 3,\n    rinkeby: 4,\n    kovan: 42,\n    goerli: 5,\n};\n// Get a buffer containing the chainId value.\n// Returns a 1, 2, 4, or 8 byte buffer with the chainId encoded in big endian\nfunction getChainIdBuf(chainId) {\n    var b;\n    // If our chainID is a hex string, we can convert it to a hex\n    // buffer directly\n    if (true === isValidChainIdHexNumStr(chainId))\n        b = (0, util_1.ensureHexBuffer)(chainId);\n    // If our chainID is a base-10 number, parse with bignumber.js and convert to hex buffer\n    else\n        b = (0, util_1.ensureHexBuffer)(\"0x\".concat(new bignumber_js_1.default(chainId).toString(16)));\n    // Make sure the buffer is an allowed size\n    if (b.length > 8)\n        throw new Error('ChainID provided is too large.');\n    // If this matches a u16, u32, or u64 size, return it now\n    if (b.length <= 2 || b.length === 4 || b.length === 8)\n        return b;\n    // For other size buffers, we need to pack into u32 or u64 before returning;\n    var buf;\n    if (b.length === 3) {\n        buf = Buffer.alloc(4);\n        buf.writeUInt32BE(chainId);\n    }\n    else if (b.length <= 8) {\n        buf = Buffer.alloc(8);\n        b.copy(buf, 8 - b.length);\n    }\n    return buf;\n}\n// Determine if the chain uses EIP155 by default, based on the chainID\nfunction chainUsesEIP155(chainID) {\n    switch (chainID) {\n        case 3: // ropsten\n        case 4: // rinkeby\n            return false;\n        case 1: // mainnet\n        case 42: // kovan\n        case 5: // goerli\n        default:\n            // all others should use eip155\n            return true;\n    }\n}\n// Determine if a valid number was passed in as a hex string\nfunction isValidChainIdHexNumStr(s) {\n    if (typeof s !== 'string')\n        return false;\n    if (s.slice(0, 2) !== '0x')\n        return false;\n    try {\n        var b = new bignumber_js_1.default(s, 16);\n        return b.isNaN() === false;\n    }\n    catch (err) {\n        return false;\n    }\n}\n// If this is a nubmer that fits in one byte, we don't need to add it\n// to the `data` buffer of the main transaction.\n// Note the one edge case: we still need to use the `data` field for chainID=255.\nfunction useChainIdBuffer(id) {\n    var buf = getChainIdBuf(id);\n    if (buf.length === 1)\n        return buf.readUInt8(0) === 255;\n    return true;\n}\nfunction buildPersonalSignRequest(req, input) {\n    var MAX_BASE_MSG_SZ = input.fwConstants.ethMaxMsgSz;\n    var VAR_PATH_SZ = input.fwConstants.varAddrPathSzAllowed;\n    var L = 24 + MAX_BASE_MSG_SZ + 4;\n    var off = 0;\n    req.payload = Buffer.alloc(L);\n    req.payload.writeUInt8(constants_1.ethMsgProtocol.SIGN_PERSONAL, 0);\n    off += 1;\n    // Write the signer path into the buffer\n    var signerPathBuf = (0, util_1.buildSignerPathBuf)(input.signerPath, VAR_PATH_SZ);\n    signerPathBuf.copy(req.payload, off);\n    off += signerPathBuf.length;\n    // Write the payload buffer. The payload can come in either as a buffer or as a string\n    var payload = input.payload;\n    // Determine if this is a hex string\n    var displayHex = false;\n    if (typeof input.payload === 'string') {\n        if (input.payload.slice(0, 2) === '0x') {\n            payload = (0, util_1.ensureHexBuffer)(input.payload);\n            displayHex =\n                false ===\n                    constants_1.ASCII_REGEX.test(Buffer.from(input.payload.slice(2), 'hex').toString());\n        }\n        else {\n            if (false === (0, util_1.isAsciiStr)(input.payload))\n                throw new Error('Currently, the Lattice can only display ASCII strings.');\n            payload = Buffer.from(input.payload);\n        }\n    }\n    else if (typeof input.displayHex === 'boolean') {\n        // If this is a buffer and the user has specified whether or not this\n        // is a hex buffer with the optional argument, write that\n        displayHex = input.displayHex;\n    }\n    else {\n        // Otherwise, determine if this buffer is an ASCII string. If it is, set `displayHex` accordingly.\n        // NOTE: THIS MEANS THAT NON-ASCII STRINGS WILL DISPLAY AS HEX SINCE WE CANNOT KNOW IF THE REQUESTER\n        //        EXPECTED NON-ASCII CHARACTERS TO DISPLAY IN A STRING\n        // TODO: Develop a more elegant solution for this\n        if (!input.payload.toString)\n            throw new Error('Unsupported input data type');\n        displayHex = false === constants_1.ASCII_REGEX.test(input.payload.toString());\n    }\n    var fwConst = input.fwConstants;\n    var maxSzAllowed = MAX_BASE_MSG_SZ + fwConst.extraDataMaxFrames * fwConst.extraDataFrameSz;\n    if (fwConst.personalSignHeaderSz) {\n        // Account for the personal_sign header string\n        maxSzAllowed -= fwConst.personalSignHeaderSz;\n    }\n    if (fwConst.ethMsgPreHashAllowed && payload.length > maxSzAllowed) {\n        // If this message will not fit and pre-hashing is allowed, do that\n        req.payload.writeUInt8(displayHex, off);\n        off += 1;\n        req.payload.writeUInt16LE(payload.length, off);\n        off += 2;\n        var prehash = Buffer.from((0, js_sha3_1.keccak256)(Buffer.concat([get_personal_sign_prefix(payload.length), payload])), 'hex');\n        prehash.copy(req.payload, off);\n        req.prehash = prehash;\n    }\n    else {\n        // Otherwise we can fit the payload.\n        // Flow data into extraData requests, which will follow-up transaction requests, if supported/applicable\n        var extraDataPayloads = getExtraData(payload, input);\n        // Write the payload and metadata into our buffer\n        req.extraDataPayloads = extraDataPayloads;\n        req.msg = payload;\n        req.payload.writeUInt8(displayHex, off);\n        off += 1;\n        req.payload.writeUInt16LE(payload.length, off);\n        off += 2;\n        payload.copy(req.payload, off);\n    }\n    return req;\n}\nfunction buildEIP712Request(req, input) {\n    var _a = input.fwConstants, ethMaxMsgSz = _a.ethMaxMsgSz, varAddrPathSzAllowed = _a.varAddrPathSzAllowed, eip712MaxTypeParams = _a.eip712MaxTypeParams;\n    var TYPED_DATA = constants_1.ethMsgProtocol.TYPED_DATA;\n    var L = 24 + ethMaxMsgSz + 4;\n    var off = 0;\n    req.payload = Buffer.alloc(L);\n    req.payload.writeUInt8(TYPED_DATA.enumIdx, 0);\n    off += 1;\n    // Write the signer path\n    var signerPathBuf = (0, util_1.buildSignerPathBuf)(input.signerPath, varAddrPathSzAllowed);\n    signerPathBuf.copy(req.payload, off);\n    off += signerPathBuf.length;\n    // Parse/clean the EIP712 payload, serialize with CBOR, and write to the payload\n    var data = JSON.parse(JSON.stringify(input.payload));\n    if (!data.primaryType || !data.types[data.primaryType])\n        throw new Error('primaryType must be specified and the type must be included.');\n    if (!data.message || !data.domain)\n        throw new Error('message and domain must be specified.');\n    if (0 > Object.keys(data.types).indexOf('EIP712Domain'))\n        throw new Error('EIP712Domain type must be defined.');\n    // Parse the payload to ensure we have valid EIP712 data types and that\n    // they are encoded such that Lattice firmware can parse them.\n    // We need two different encodings: one to send to the Lattice in a format that plays\n    // nicely with our firmware CBOR decoder. The other is formatted to be consumable by\n    // our EIP712 validation module.\n    input.payload.message = parseEIP712Msg(JSON.parse(JSON.stringify(data.message)), JSON.parse(JSON.stringify(data.primaryType)), JSON.parse(JSON.stringify(data.types)), true);\n    input.payload.domain = parseEIP712Msg(JSON.parse(JSON.stringify(data.domain)), 'EIP712Domain', JSON.parse(JSON.stringify(data.types)), true);\n    data.domain = parseEIP712Msg(data.domain, 'EIP712Domain', data.types, false);\n    data.message = parseEIP712Msg(data.message, data.primaryType, data.types, false);\n    // Now build the message to be sent to the Lattice\n    var payload = Buffer.from(borc_1.default.encode(data));\n    var fwConst = input.fwConstants;\n    var maxSzAllowed = ethMaxMsgSz + fwConst.extraDataMaxFrames * fwConst.extraDataFrameSz;\n    // Determine if we need to prehash\n    var shouldPrehash = payload.length > maxSzAllowed;\n    Object.keys(data.types).forEach(function (k) {\n        if (data.types[k].length > eip712MaxTypeParams) {\n            shouldPrehash = true;\n        }\n    });\n    if (fwConst.ethMsgPreHashAllowed && shouldPrehash) {\n        // If this payload is too large to send, but the Lattice allows a prehashed message, do that\n        req.payload.writeUInt16LE(payload.length, off);\n        off += 2;\n        var prehash = eth_eip712_util_browser_1.TypedDataUtils.hash(req.input.payload);\n        var prehashBuf = Buffer.from(prehash);\n        prehashBuf.copy(req.payload, off);\n        req.prehash = prehash;\n    }\n    else {\n        var extraDataPayloads = getExtraData(payload, input);\n        req.extraDataPayloads = extraDataPayloads;\n        req.payload.writeUInt16LE(payload.length, off);\n        off += 2;\n        payload.copy(req.payload, off);\n        off += payload.length;\n        // Slice out the part of the buffer that we didn't use.\n        req.payload = req.payload.slice(0, off);\n    }\n    return req;\n}\nfunction getExtraData(payload, input) {\n    var _a = input.fwConstants, ethMaxMsgSz = _a.ethMaxMsgSz, extraDataFrameSz = _a.extraDataFrameSz, extraDataMaxFrames = _a.extraDataMaxFrames;\n    var MAX_BASE_MSG_SZ = ethMaxMsgSz;\n    var EXTRA_DATA_ALLOWED = extraDataFrameSz > 0 && extraDataMaxFrames > 0;\n    var extraDataPayloads = [];\n    if (payload.length > MAX_BASE_MSG_SZ) {\n        // Determine sizes and run through sanity checks\n        var maxSzAllowed = MAX_BASE_MSG_SZ + extraDataMaxFrames * extraDataFrameSz;\n        if (!EXTRA_DATA_ALLOWED)\n            throw new Error(\"Your message is \".concat(payload.length, \" bytes, but can only be a maximum of \").concat(MAX_BASE_MSG_SZ));\n        else if (EXTRA_DATA_ALLOWED && payload.length > maxSzAllowed)\n            throw new Error(\"Your message is \".concat(payload.length, \" bytes, but can only be a maximum of \").concat(maxSzAllowed));\n        // Split overflow data into extraData frames\n        var frames_2 = (0, util_1.splitFrames)(payload.slice(MAX_BASE_MSG_SZ), extraDataFrameSz);\n        frames_2.forEach(function (frame) {\n            var szLE = Buffer.alloc(4);\n            szLE.writeUInt32LE(frame.length, 0);\n            extraDataPayloads.push(Buffer.concat([szLE, frame]));\n        });\n    }\n    return extraDataPayloads;\n}\nfunction parseEIP712Msg(msg, typeName, types, forJSParser) {\n    if (forJSParser === void 0) { forJSParser = false; }\n    var type = types[typeName];\n    type.forEach(function (item) {\n        var isArrayType = item.type.indexOf('[') > -1;\n        var singularType = isArrayType\n            ? item.type.slice(0, item.type.indexOf('['))\n            : item.type;\n        var isCustomType = Object.keys(types).indexOf(singularType) > -1;\n        if (isCustomType && Array.isArray(msg)) {\n            // For custom types we need to jump into the `msg` using the key (name of type) and\n            // parse that entire sub-struct as if it were a message.\n            // We will recurse into sub-structs until we reach a level where every item is an\n            // elementary (i.e. non-custom) type.\n            // For arrays, we need to loop through each message item.\n            for (var i = 0; i < msg.length; i++) {\n                msg[i][item.name] = parseEIP712Msg(msg[i][item.name], singularType, types, forJSParser);\n            }\n        }\n        else if (isCustomType) {\n            // Not an array means we can jump directly into the sub-struct to convert\n            msg[item.name] = parseEIP712Msg(msg[item.name], singularType, types, forJSParser);\n        }\n        else if (Array.isArray(msg)) {\n            // If we have an array for this particular type and the type we are parsing\n            // is *not* a custom type, loop through the array elements and convert the types.\n            for (var i = 0; i < msg.length; i++) {\n                if (isArrayType) {\n                    // If this type is itself an array, loop through those elements and parse individually.\n                    // This code is not reachable for custom types so we assume these are arrays of\n                    // elementary types.\n                    for (var j = 0; j < msg[i][item.name].length; j++) {\n                        msg[i][item.name][j] = parseEIP712Item(msg[i][item.name][j], singularType, forJSParser);\n                    }\n                }\n                else {\n                    // Non-arrays parse + replace one value for the elementary type\n                    msg[i][item.name] = parseEIP712Item(msg[i][item.name], singularType, forJSParser);\n                }\n            }\n        }\n        else if (isArrayType) {\n            // If we have an elementary array type and a non-array message level,\n            //loop through the array and parse + replace  each item individually.\n            for (var i = 0; i < msg[item.name].length; i++) {\n                msg[item.name][i] = parseEIP712Item(msg[item.name][i], singularType, forJSParser);\n            }\n        }\n        else {\n            // If this is a singular elementary type, simply parse + replace.\n            msg[item.name] = parseEIP712Item(msg[item.name], singularType, forJSParser);\n        }\n    });\n    return msg;\n}\nfunction parseEIP712Item(data, type, forJSParser) {\n    if (forJSParser === void 0) { forJSParser = false; }\n    if (type === 'bytes') {\n        // Variable sized bytes need to be buffer type\n        data = (0, util_1.ensureHexBuffer)(data);\n        if (forJSParser) {\n            // For EIP712 encoding module it's easier to encode hex strings\n            data = \"0x\".concat(data.toString('hex'));\n        }\n    }\n    else if (type.slice(0, 5) === 'bytes') {\n        // Fixed sizes bytes need to be buffer type. We also add some sanity checks.\n        var nBytes = parseInt(type.slice(5));\n        data = (0, util_1.ensureHexBuffer)(data);\n        if (data.length !== nBytes)\n            throw new Error(\"Expected \".concat(type, \" type, but got \").concat(data.length, \" bytes\"));\n        if (forJSParser) {\n            // For EIP712 encoding module it's easier to encode hex strings\n            data = \"0x\".concat(data.toString('hex'));\n        }\n    }\n    else if (type === 'address') {\n        // Address must be a 20 byte buffer\n        data = (0, util_1.ensureHexBuffer)(data);\n        // Edge case to handle the 0-address\n        if (data.length === 0) {\n            data = Buffer.alloc(20);\n        }\n        if (data.length !== 20)\n            throw new Error(\"Address type must be 20 bytes, but got \".concat(data.length, \" bytes\"));\n        // For EIP712 encoding module it's easier to encode hex strings\n        if (forJSParser) {\n            data = \"0x\".concat(data.toString('hex'));\n        }\n    }\n    else if (constants_1.ethMsgProtocol.TYPED_DATA.typeCodes[type] &&\n        (type.indexOf('uint') > -1 || type.indexOf('int') > -1)) {\n        var b = (0, util_1.ensureHexBuffer)(data);\n        // Edge case to handle 0-value bignums\n        if (b.length === 0) {\n            b = Buffer.from('00', 'hex');\n        }\n        // Uint256s should be encoded as bignums.\n        if (forJSParser) {\n            // For EIP712 encoding in this module we need strings to represent the numbers\n            data = \"0x\".concat(b.toString('hex'));\n        }\n        else {\n            // `bignumber.js` is needed for `cbor` encoding, which gets sent to the Lattice and plays\n            // nicely with its firmware cbor lib.\n            // NOTE: If we instantiate a `bignumber.js` object, it will not match what `borc` creates\n            // when run inside of the browser (i.e. MetaMask). Thus we introduce this hack to make sure\n            // we are creating a compatible type.\n            // TODO: Find another cbor lib that is compataible with the firmware's lib in a browser\n            // context. This is surprisingly difficult - I tried several libs and only cbor/borc have\n            // worked (borc is a supposedly \"browser compatible\" version of cbor)\n            data = new borc_1.default.Encoder().semanticTypes[1][0](b.toString('hex'), 16);\n        }\n    }\n    else if (type === 'bool') {\n        // Booleans need to be cast to a u8\n        data = data === true ? 1 : 0;\n    }\n    // Other types don't need to be modified\n    return data;\n}\nfunction get_personal_sign_prefix(L) {\n    return Buffer.from(\"\\u0019Ethereum Signed Message:\\n\".concat(L.toString()), 'utf-8');\n}\nfunction get_rlp_encoded_preimage(rawTx, txType) {\n    if (txType) {\n        return Buffer.concat([Buffer.from([txType]), Buffer.from((0, rlp_1.encode)(rawTx))]);\n    }\n    else {\n        return Buffer.from((0, rlp_1.encode)(rawTx));\n    }\n}\n// ======\n// TEMPORARY BRIDGE\n// We are migrating from all legacy signing paths to a single generic\n// signing route. If users are attempting a legacy transaction request\n// against a Lattice on firmware v0.15.0 and above, we need to convert\n// that to a generic signing request.\n//\n// NOTE: Once we deprecate, we will remove this entire file\n// ======\nvar ethConvertLegacyToGenericReq = function (req) {\n    var common;\n    if (!req.chainId || (0, util_1.ensureHexBuffer)(req.chainId).toString('hex') === '01') {\n        common = new common_1.Common({ chain: common_1.Chain.Mainnet, hardfork: common_1.Hardfork.London });\n    }\n    else {\n        // Not every network will support these EIPs but we will allow\n        // signing of transactions using them\n        common = common_1.Common.custom({ chainId: Number(req.chainId) }, { hardfork: common_1.Hardfork.London, eips: [1559, 2930] });\n    }\n    var tx = tx_1.TransactionFactory.fromTxData(req, { common: common });\n    // Get the raw transaction payload to be hashed and signed.\n    // Different `@ethereumjs/tx` Transaction object types have\n    // slightly different APIs around this.\n    if (req.type) {\n        // Newer transaction types\n        return tx.getMessageToSign(false);\n    }\n    else {\n        // Legacy transaction type\n        return Buffer.from((0, rlp_1.encode)(tx.getMessageToSign(false)));\n    }\n};\nexports.default = {\n    buildEthereumMsgRequest: buildEthereumMsgRequest,\n    validateEthereumMsgResponse: validateEthereumMsgResponse,\n    buildEthereumTxRequest: buildEthereumTxRequest,\n    buildEthRawTx: buildEthRawTx,\n    hashTransaction: hashTransaction,\n    chainIds: chainIds,\n    ensureHexBuffer: util_1.ensureHexBuffer,\n    ethConvertLegacyToGenericReq: ethConvertLegacyToGenericReq,\n};\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeAddKvRecordsRequest = exports.validateAddKvRequest = exports.addKvRecords = void 0;\nvar protocol_1 = require(\"../protocol\");\nvar validators_1 = require(\"../shared/validators\");\n/**\n * `addKvRecords` takes in a set of key-value records and sends a request to add them to the\n * Lattice.\n * @category Lattice\n * @returns A callback with an error or null.\n */\nfunction addKvRecords(_a) {\n    var client = _a.client, records = _a.records, type = _a.type, caseSensitive = _a.caseSensitive;\n    return __awaiter(this, void 0, void 0, function () {\n        var _b, url, sharedSecret, ephemeralPub, fwConstants, data, _c, decryptedData, newEphemeralPub;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0:\n                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;\n                    (0, exports.validateAddKvRequest)({ records: records, fwConstants: fwConstants });\n                    data = (0, exports.encodeAddKvRecordsRequest)({\n                        records: records,\n                        type: type,\n                        caseSensitive: caseSensitive,\n                        fwConstants: fwConstants,\n                    });\n                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({\n                            data: data,\n                            requestType: protocol_1.LatticeSecureEncryptedRequestType.addKvRecords,\n                            sharedSecret: sharedSecret,\n                            ephemeralPub: ephemeralPub,\n                            url: url,\n                        })];\n                case 1:\n                    _c = _d.sent(), decryptedData = _c.decryptedData, newEphemeralPub = _c.newEphemeralPub;\n                    client.mutate({\n                        ephemeralPub: newEphemeralPub,\n                    });\n                    return [2 /*return*/, decryptedData];\n            }\n        });\n    });\n}\nexports.addKvRecords = addKvRecords;\nvar validateAddKvRequest = function (_a) {\n    var records = _a.records, fwConstants = _a.fwConstants;\n    (0, validators_1.validateKvRecords)(records, fwConstants);\n};\nexports.validateAddKvRequest = validateAddKvRequest;\nvar encodeAddKvRecordsRequest = function (_a) {\n    var records = _a.records, type = _a.type, caseSensitive = _a.caseSensitive, fwConstants = _a.fwConstants;\n    var payload = Buffer.alloc(1 + 139 * fwConstants.kvActionMaxNum);\n    payload.writeUInt8(Object.keys(records).length, 0);\n    var off = 1;\n    Object.entries(records).forEach(function (_a) {\n        var _key = _a[0], _val = _a[1];\n        var _b = (0, validators_1.validateKvRecord)({ key: _key, val: _val }, fwConstants), key = _b.key, val = _b.val;\n        // Skip the ID portion. This will get added by firmware.\n        payload.writeUInt32LE(0, off);\n        off += 4;\n        payload.writeUInt32LE(type, off);\n        off += 4;\n        payload.writeUInt8(caseSensitive ? 1 : 0, off);\n        off += 1;\n        payload.writeUInt8(String(key).length + 1, off);\n        off += 1;\n        Buffer.from(String(key)).copy(payload, off);\n        off += fwConstants.kvKeyMaxStrSz + 1;\n        payload.writeUInt8(String(val).length + 1, off);\n        off += 1;\n        Buffer.from(String(val)).copy(payload, off);\n        off += fwConstants.kvValMaxStrSz + 1;\n    });\n    return payload;\n};\nexports.encodeAddKvRecordsRequest = encodeAddKvRecordsRequest;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeConnectResponse = exports.validateConnectRequest = exports.connect = void 0;\nvar protocol_1 = require(\"../protocol\");\nvar predicates_1 = require(\"../shared/predicates\");\nvar utilities_1 = require(\"../shared/utilities\");\nvar validators_1 = require(\"../shared/validators\");\nvar util_1 = require(\"../util\");\nfunction connect(_a) {\n    var client = _a.client, id = _a.id;\n    return __awaiter(this, void 0, void 0, function () {\n        var _b, deviceId, key, baseUrl, url, respPayloadData, _c, isPaired, fwVersion, activeWallets, ephemeralPub;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0:\n                    _b = (0, exports.validateConnectRequest)({\n                        deviceId: id,\n                        key: client.key,\n                        baseUrl: client.baseUrl,\n                    }), deviceId = _b.deviceId, key = _b.key, baseUrl = _b.baseUrl;\n                    url = \"\".concat(baseUrl, \"/\").concat(deviceId);\n                    return [4 /*yield*/, (0, protocol_1.connectSecureRequest)({\n                            url: url,\n                            pubkey: client.publicKey,\n                        })];\n                case 1:\n                    respPayloadData = _d.sent();\n                    return [4 /*yield*/, (0, exports.decodeConnectResponse)(respPayloadData, key)];\n                case 2:\n                    _c = _d.sent(), isPaired = _c.isPaired, fwVersion = _c.fwVersion, activeWallets = _c.activeWallets, ephemeralPub = _c.ephemeralPub;\n                    // Update client state with response data\n                    client.mutate({\n                        deviceId: deviceId,\n                        ephemeralPub: ephemeralPub,\n                        url: url,\n                        isPaired: isPaired,\n                        fwVersion: fwVersion,\n                        activeWallets: activeWallets,\n                    });\n                    if (!(isPaired && !(0, predicates_1.doesFetchWalletsOnLoad)(client.getFwVersion()))) return [3 /*break*/, 4];\n                    return [4 /*yield*/, client.fetchActiveWallet()];\n                case 3:\n                    _d.sent();\n                    _d.label = 4;\n                case 4: \n                // Return flag indicating whether we are paired or not.\n                // If we are *not* already paired, the Lattice is now in\n                // pairing mode and expects a `finalizePairing` encrypted\n                // request as a follow up.\n                return [2 /*return*/, isPaired];\n            }\n        });\n    });\n}\nexports.connect = connect;\nvar validateConnectRequest = function (_a) {\n    var deviceId = _a.deviceId, key = _a.key, baseUrl = _a.baseUrl;\n    var validDeviceId = (0, validators_1.validateDeviceId)(deviceId);\n    var validKey = (0, validators_1.validateKey)(key);\n    var validBaseUrl = (0, validators_1.validateBaseUrl)(baseUrl);\n    return {\n        deviceId: validDeviceId,\n        key: validKey,\n        baseUrl: validBaseUrl,\n    };\n};\nexports.validateConnectRequest = validateConnectRequest;\n/**\n * `decodeConnectResponse` will call `StartPairingMode` on the device, which gives the user 60 seconds to\n * finalize the pairing. This will return an ephemeral public key, which is needed for the next\n * request.\n * - If the device is already paired, this ephemPub is simply used to encrypt the next request.\n * - If the device is not paired, it is needed to pair the device within 60 seconds.\n * @category Device Response\n * @internal\n * @returns true if we are paired to the device already\n */\nvar decodeConnectResponse = function (response, key) {\n    var off = 0;\n    var isPaired = response.readUInt8(off) === protocol_1.ProtocolConstants.pairingStatus.paired;\n    off++;\n    // If we are already paired, we get the next ephemeral key\n    var pub = response.slice(off, off + 65).toString('hex');\n    off += 65; // Set the public key\n    var ephemeralPub = (0, util_1.getP256KeyPairFromPub)(pub);\n    // Grab the firmware version (will be 0-length for older fw versions) It is of format\n    // |fix|minor|major|reserved|\n    var fwVersion = response.slice(off, off + 4);\n    off += 4;\n    // If we are already paired, the response will include some encrypted data about the current\n    // wallets This data was added in Lattice firmware v0.14.1\n    if (isPaired) {\n        //TODO && this._fwVersionGTE(0, 14, 1)) {\n        // Later versions of firmware added wallet info\n        var encWalletData = response.slice(off, off + 160);\n        off += 160;\n        var sharedSecret = (0, utilities_1.getSharedSecret)(key, ephemeralPub);\n        var decWalletData = (0, util_1.aes256_decrypt)(encWalletData, sharedSecret);\n        // Sanity check to make sure the last part of the decrypted data is empty. The last 2 bytes\n        // are AES padding\n        if (decWalletData[decWalletData.length - 2] !== 0 ||\n            decWalletData[decWalletData.length - 1] !== 0) {\n            throw new Error('Failed to connect to Lattice.');\n        }\n        var activeWallets = (0, utilities_1.parseWallets)(decWalletData);\n        return { isPaired: isPaired, fwVersion: fwVersion, activeWallets: activeWallets, ephemeralPub: ephemeralPub };\n    }\n    // return the state of our pairing\n    return { isPaired: isPaired, fwVersion: fwVersion, activeWallets: undefined, ephemeralPub: ephemeralPub };\n};\nexports.decodeConnectResponse = decodeConnectResponse;\n","// @ts-check\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst { TextEncoder, TextDecoder } = require('web-encoding')\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * @param {ArrayBufferView} bytes\n * @returns {Buffer}\n */\nconst asBuffer = ({ buffer, byteLength, byteOffset }) =>\n  Buffer.from(buffer, byteOffset, byteLength)\n\nmodule.exports = { decodeText, encodeText, asBuffer }\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeFetchActiveWalletResponse = exports.fetchActiveWallet = void 0;\nvar constants_1 = require(\"../constants\");\nvar protocol_1 = require(\"../protocol\");\nvar validators_1 = require(\"../shared/validators\");\n/**\n * Fetch the active wallet in the device.\n *\n * The Lattice has two wallet interfaces: internal and external. If a SafeCard is inserted and\n * unlocked, the external interface is considered \"active\" and this will return its {@link Wallet}\n * data. Otherwise it will return the info for the internal Lattice wallet.\n */\nfunction fetchActiveWallet(_a) {\n    var client = _a.client;\n    return __awaiter(this, void 0, void 0, function () {\n        var _b, url, sharedSecret, ephemeralPub, _c, decryptedData, newEphemeralPub, activeWallets, validActiveWallets;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0:\n                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub;\n                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({\n                            data: Buffer.alloc(0),\n                            requestType: protocol_1.LatticeSecureEncryptedRequestType.getWallets,\n                            sharedSecret: sharedSecret,\n                            ephemeralPub: ephemeralPub,\n                            url: url,\n                        })];\n                case 1:\n                    _c = _d.sent(), decryptedData = _c.decryptedData, newEphemeralPub = _c.newEphemeralPub;\n                    activeWallets = (0, exports.decodeFetchActiveWalletResponse)(decryptedData);\n                    validActiveWallets = (0, validators_1.validateActiveWallets)(activeWallets);\n                    client.mutate({\n                        ephemeralPub: newEphemeralPub,\n                        activeWallets: validActiveWallets,\n                    });\n                    return [2 /*return*/, validActiveWallets];\n            }\n        });\n    });\n}\nexports.fetchActiveWallet = fetchActiveWallet;\nvar decodeFetchActiveWalletResponse = function (data) {\n    // Read the external wallet data first. If it is non-null, the external wallet will be the\n    // active wallet of the device and we should save it. If the external wallet is blank, it means\n    // there is no card present and we should save and use the interal wallet. If both wallets are\n    // empty, it means the device still needs to be set up.\n    var walletDescriptorLen = 71;\n    // Internal first\n    var activeWallets = {\n        internal: {\n            uid: constants_1.EMPTY_WALLET_UID,\n            external: false,\n            name: Buffer.alloc(0),\n            capabilities: 0,\n        },\n        external: {\n            uid: constants_1.EMPTY_WALLET_UID,\n            external: true,\n            name: Buffer.alloc(0),\n            capabilities: 0,\n        },\n    };\n    var off = 0;\n    activeWallets.internal.uid = data.slice(off, off + 32);\n    activeWallets.internal.capabilities = data.readUInt32BE(off + 32);\n    activeWallets.internal.name = data.slice(off + 36, off + walletDescriptorLen);\n    // Offset the first item\n    off += walletDescriptorLen;\n    // External\n    activeWallets.external.uid = data.slice(off, off + 32);\n    activeWallets.external.capabilities = data.readUInt32BE(off + 32);\n    activeWallets.external.name = data.slice(off + 36, off + walletDescriptorLen);\n    return activeWallets;\n};\nexports.decodeFetchActiveWalletResponse = decodeFetchActiveWalletResponse;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeFetchEncData = exports.encodeFetchEncDataRequest = exports.validateFetchEncDataRequest = exports.fetchEncData = void 0;\n/**\n * Export encrypted data from the Lattice. Data must conform\n * to known schema, e.g. EIP2335 derived privkey export.\n */\nvar uuid_1 = require(\"uuid\");\nvar constants_1 = require(\"../constants\");\nvar protocol_1 = require(\"../protocol\");\nvar utilities_1 = require(\"../shared/utilities\");\nvar validators_1 = require(\"../shared/validators\");\nvar ENC_DATA = constants_1.EXTERNAL.ENC_DATA;\nvar ENC_DATA_ERR_STR = 'Unknown encrypted data export type requested. Exiting.';\nvar ENC_DATA_REQ_DATA_SZ = 1025;\nvar ENC_DATA_RESP_SZ = {\n    EIP2335: {\n        CIPHERTEXT: 32,\n        SALT: 32,\n        CHECKSUM: 32,\n        IV: 16,\n        PUBKEY: 48,\n    },\n};\nfunction fetchEncData(_a) {\n    var client = _a.client, schema = _a.schema, params = _a.params;\n    return __awaiter(this, void 0, void 0, function () {\n        var _b, url, sharedSecret, ephemeralPub, fwVersion, activeWallet, data, _c, decryptedData, newEphemeralPub;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0:\n                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwVersion = _b.fwVersion;\n                    activeWallet = (0, validators_1.validateWallet)(client.getActiveWallet());\n                    (0, exports.validateFetchEncDataRequest)({ params: params });\n                    data = (0, exports.encodeFetchEncDataRequest)({\n                        schema: schema,\n                        params: params,\n                        fwVersion: fwVersion,\n                        activeWallet: activeWallet,\n                    });\n                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({\n                            data: data,\n                            requestType: protocol_1.LatticeSecureEncryptedRequestType.fetchEncryptedData,\n                            sharedSecret: sharedSecret,\n                            ephemeralPub: ephemeralPub,\n                            url: url,\n                        })];\n                case 1:\n                    _c = _d.sent(), decryptedData = _c.decryptedData, newEphemeralPub = _c.newEphemeralPub;\n                    client.mutate({\n                        ephemeralPub: newEphemeralPub,\n                    });\n                    return [2 /*return*/, (0, exports.decodeFetchEncData)({ data: decryptedData, schema: schema, params: params })];\n            }\n        });\n    });\n}\nexports.fetchEncData = fetchEncData;\nvar validateFetchEncDataRequest = function (_a) {\n    var params = _a.params;\n    // Validate derivation path\n    (0, validators_1.validateStartPath)(params.path);\n};\nexports.validateFetchEncDataRequest = validateFetchEncDataRequest;\nvar encodeFetchEncDataRequest = function (_a) {\n    var schema = _a.schema, params = _a.params, fwVersion = _a.fwVersion, activeWallet = _a.activeWallet;\n    // Check firmware version\n    if (fwVersion.major < 1 && fwVersion.minor < 17) {\n        throw new Error('Firmware version >=v0.17.0 is required for encrypted data export.');\n    }\n    // Update params depending on what type of data is being exported\n    if (schema === ENC_DATA.SCHEMAS.BLS_KEYSTORE_EIP2335_PBKDF_V4) {\n        // Set the wallet UID to the client's current active wallet\n        params.walletUID = activeWallet.uid;\n    }\n    else {\n        throw new Error(ENC_DATA_ERR_STR);\n    }\n    // Build the payload data\n    var payload = Buffer.alloc(ENC_DATA_REQ_DATA_SZ);\n    var off = 0;\n    payload.writeUInt8(schema, off);\n    off += 1;\n    if (schema === ENC_DATA.SCHEMAS.BLS_KEYSTORE_EIP2335_PBKDF_V4) {\n        params.walletUID.copy(payload, off);\n        off += params.walletUID.length;\n        payload.writeUInt8(params.path.length, off);\n        off += 1;\n        for (var i = 0; i < 5; i++) {\n            if (i <= params.path.length) {\n                payload.writeUInt32LE(params.path[i], off);\n            }\n            off += 4;\n        }\n        if (params.c) {\n            payload.writeUInt32LE(params.c, off);\n        }\n        off += 4;\n        return payload;\n    }\n    else {\n        throw new Error(ENC_DATA_ERR_STR);\n    }\n};\nexports.encodeFetchEncDataRequest = encodeFetchEncDataRequest;\nvar decodeFetchEncData = function (_a) {\n    var data = _a.data, schema = _a.schema, params = _a.params;\n    var off = 0;\n    if (schema === ENC_DATA.SCHEMAS.BLS_KEYSTORE_EIP2335_PBKDF_V4) {\n        var respData = {};\n        var _b = ENC_DATA_RESP_SZ.EIP2335, CIPHERTEXT = _b.CIPHERTEXT, SALT = _b.SALT, CHECKSUM = _b.CHECKSUM, IV = _b.IV, PUBKEY = _b.PUBKEY;\n        var expectedSz = 4 + // iterations = u32\n            CIPHERTEXT +\n            SALT +\n            CHECKSUM +\n            IV +\n            PUBKEY;\n        var dataSz = data.readUInt32LE(off);\n        off += 4;\n        if (dataSz !== expectedSz) {\n            throw new Error('Invalid data returned from Lattice. Expected EIP2335 data.');\n        }\n        respData.iterations = data.readUInt32LE(off);\n        off += 4;\n        respData.cipherText = data.slice(off, off + CIPHERTEXT);\n        off += CIPHERTEXT;\n        respData.salt = data.slice(off, off + SALT);\n        off += SALT;\n        respData.checksum = data.slice(off, off + CHECKSUM);\n        off += CHECKSUM;\n        respData.iv = data.slice(off, off + IV);\n        off += IV;\n        respData.pubkey = data.slice(off, off + PUBKEY);\n        off += PUBKEY;\n        return formatEIP2335ExportData(respData, params.path);\n    }\n    else {\n        throw new Error(ENC_DATA_ERR_STR);\n    }\n};\nexports.decodeFetchEncData = decodeFetchEncData;\nvar formatEIP2335ExportData = function (resp, path) {\n    try {\n        var iterations = resp.iterations, salt = resp.salt, checksum = resp.checksum, iv = resp.iv, cipherText = resp.cipherText, pubkey = resp.pubkey;\n        return Buffer.from(JSON.stringify({\n            'version': 4,\n            'uuid': (0, uuid_1.v4)(),\n            'path': (0, utilities_1.getPathStr)(path),\n            'pubkey': pubkey.toString('hex'),\n            'crypto': {\n                'kdf': {\n                    'function': 'pbkdf2',\n                    'params': {\n                        'dklen': 32,\n                        'c': iterations,\n                        'prf': 'hmac-sha256',\n                        'salt': salt.toString('hex'),\n                    },\n                    'message': ''\n                },\n                'checksum': {\n                    'function': 'sha256',\n                    'params': {},\n                    'message': checksum.toString('hex'),\n                },\n                'cipher': {\n                    'function': 'aes-128-ctr',\n                    'params': {\n                        'iv': iv.toString('hex'),\n                    },\n                    'message': cipherText.toString('hex')\n                }\n            }\n        }));\n    }\n    catch (err) {\n        throw Error(\"Failed to format EIP2335 return data: \".concat(err.toString()));\n    }\n};\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeGetAddressesResponse = exports.encodeGetAddressesRequest = exports.validateGetAddressesRequest = exports.getAddresses = void 0;\nvar bitwise_1 = __importDefault(require(\"bitwise\"));\nvar protocol_1 = require(\"../protocol\");\nvar validators_1 = require(\"../shared/validators\");\nvar util_1 = require(\"../util\");\n/**\n * `getAddresses` takes a starting path and a number to get the addresses or public keys associated\n * with the active wallet.\n * @category Lattice\n * @returns An array of addresses or public keys.\n */\nfunction getAddresses(_a) {\n    var client = _a.client, _startPath = _a.startPath, _n = _a.n, _flag = _a.flag;\n    return __awaiter(this, void 0, void 0, function () {\n        var _b, url, sharedSecret, ephemeralPub, fwConstants, activeWallet, _c, startPath, n, flag, data, _d, decryptedData, newEphemeralPub;\n        return __generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;\n                    activeWallet = (0, validators_1.validateWallet)(client.getActiveWallet());\n                    _c = (0, exports.validateGetAddressesRequest)({\n                        startPath: _startPath,\n                        n: _n,\n                        flag: _flag,\n                    }), startPath = _c.startPath, n = _c.n, flag = _c.flag;\n                    data = (0, exports.encodeGetAddressesRequest)({\n                        startPath: startPath,\n                        n: n,\n                        flag: flag,\n                        fwConstants: fwConstants,\n                        wallet: activeWallet,\n                    });\n                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({\n                            data: data,\n                            requestType: protocol_1.LatticeSecureEncryptedRequestType.getAddresses,\n                            sharedSecret: sharedSecret,\n                            ephemeralPub: ephemeralPub,\n                            url: url,\n                        })];\n                case 1:\n                    _d = _e.sent(), decryptedData = _d.decryptedData, newEphemeralPub = _d.newEphemeralPub;\n                    client.mutate({\n                        ephemeralPub: newEphemeralPub,\n                    });\n                    return [2 /*return*/, (0, exports.decodeGetAddressesResponse)(decryptedData, flag)];\n            }\n        });\n    });\n}\nexports.getAddresses = getAddresses;\nvar validateGetAddressesRequest = function (_a) {\n    var startPath = _a.startPath, n = _a.n, flag = _a.flag;\n    return {\n        startPath: (0, validators_1.validateStartPath)(startPath),\n        n: (0, validators_1.validateNAddresses)(n),\n        flag: (0, validators_1.validateIsUInt4)(flag),\n    };\n};\nexports.validateGetAddressesRequest = validateGetAddressesRequest;\nvar encodeGetAddressesRequest = function (_a) {\n    var _b;\n    var startPath = _a.startPath, n = _a.n, flag = _a.flag, fwConstants = _a.fwConstants, wallet = _a.wallet;\n    var flags = fwConstants.getAddressFlags || [];\n    var isPubkeyOnly = flags.indexOf(flag) > -1 &&\n        (flag === protocol_1.LatticeGetAddressesFlag.ed25519Pubkey ||\n            flag === protocol_1.LatticeGetAddressesFlag.secp256k1Pubkey ||\n            flag === protocol_1.LatticeGetAddressesFlag.bls12_381Pubkey);\n    if (!isPubkeyOnly && !(0, util_1.isValidAssetPath)(startPath, fwConstants)) {\n        throw new Error('Derivation path or flag is not supported. Try updating Lattice firmware.');\n    }\n    var sz = 32 + 20 + 1; // walletUID + 5 u32 indices + count/flag\n    if (fwConstants.varAddrPathSzAllowed) {\n        sz += 1; // pathDepth\n    }\n    else if (startPath.length !== 5) {\n        throw new Error('Your Lattice firmware only supports derivation paths with 5 indices. Please upgrade.');\n    }\n    var payload = Buffer.alloc(sz);\n    var off = 0;\n    wallet.uid.copy(payload, off);\n    off += 32;\n    // Build the start path (5x u32 indices)\n    if (fwConstants.varAddrPathSzAllowed) {\n        payload.writeUInt8(startPath.length, off);\n        off += 1;\n    }\n    for (var i = 0; i < 5; i++) {\n        if (i <= startPath.length) {\n            var val_1 = (_b = startPath[i]) !== null && _b !== void 0 ? _b : 0;\n            payload.writeUInt32BE(val_1, off);\n        }\n        off += 4;\n    }\n    // Specify the number of subsequent addresses to request. We also allow the user to skip the\n    // cache and request any address related to the asset in the wallet.\n    var val, flagVal = 0;\n    if (fwConstants.addrFlagsAllowed) {\n        // A 4-bit flag can be used for non-standard address requests Client needs to be combined with\n        // `n` as a 4 bit value\n        flagVal =\n            fwConstants.getAddressFlags &&\n                fwConstants.getAddressFlags.indexOf(flag) > -1\n                ? flag\n                : 0;\n        var flagBits = bitwise_1.default.nibble.read(flagVal);\n        var countBits = bitwise_1.default.nibble.read(n);\n        val = bitwise_1.default.byte.write(flagBits.concat(countBits));\n    }\n    else {\n        // Very old firmware does not support client flag. We can deprecate client soon.\n        val = n;\n    }\n    payload.writeUInt8(val, off);\n    off++;\n    return payload;\n};\nexports.encodeGetAddressesRequest = encodeGetAddressesRequest;\n/**\n * @internal\n * @return an array of address strings or pubkey buffers\n */\nvar decodeGetAddressesResponse = function (data, flag) {\n    var off = 0;\n    // Look for addresses until we reach the end (a 4 byte checksum)\n    var addrs = [];\n    // Pubkeys are formatted differently in the response\n    var arePubkeys = flag === protocol_1.LatticeGetAddressesFlag.secp256k1Pubkey ||\n        flag === protocol_1.LatticeGetAddressesFlag.ed25519Pubkey ||\n        flag === protocol_1.LatticeGetAddressesFlag.bls12_381Pubkey;\n    if (arePubkeys) {\n        off += 1; // skip uint8 representing pubkey type\n    }\n    var respDataLength = protocol_1.ProtocolConstants.msgSizes.secure.data.response.encrypted[protocol_1.LatticeSecureEncryptedRequestType.getAddresses];\n    while (off < respDataLength) {\n        if (arePubkeys) {\n            // Pubkeys are shorter and are returned as buffers\n            var pubBytes = data.slice(off, off + 65);\n            var isEmpty = pubBytes.every(function (byte) { return byte === 0x00; });\n            if (!isEmpty && flag === protocol_1.LatticeGetAddressesFlag.ed25519Pubkey) {\n                // ED25519 pubkeys are 32 bytes\n                addrs.push(pubBytes.slice(0, 32));\n            }\n            else if (!isEmpty && flag === protocol_1.LatticeGetAddressesFlag.bls12_381Pubkey) {\n                // BLS12_381_G1 keys are 48 bytes\n                addrs.push(pubBytes.slice(0, 48));\n            }\n            else if (!isEmpty) {\n                // Only other returned pubkeys are ECC, or 65 bytes Note that we return full\n                // (uncompressed) ECC pubkeys\n                addrs.push(pubBytes);\n            }\n            off += 65;\n        }\n        else {\n            // Otherwise we are dealing with address strings\n            var addrBytes = data.slice(off, off + protocol_1.ProtocolConstants.addrStrLen);\n            off += protocol_1.ProtocolConstants.addrStrLen;\n            // Return the UTF-8 representation\n            var len = addrBytes.indexOf(0); // First 0 is the null terminator\n            if (len > 0) {\n                addrs.push(addrBytes.slice(0, len).toString());\n            }\n        }\n    }\n    return addrs;\n};\nexports.decodeGetAddressesResponse = decodeGetAddressesResponse;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeGetKvRecordsResponse = exports.encodeGetKvRecordsRequest = exports.validateGetKvRequest = exports.getKvRecords = void 0;\nvar protocol_1 = require(\"../protocol\");\nvar validators_1 = require(\"../shared/validators\");\nfunction getKvRecords(_a) {\n    var client = _a.client, _type = _a.type, _n = _a.n, _start = _a.start;\n    return __awaiter(this, void 0, void 0, function () {\n        var _b, url, sharedSecret, ephemeralPub, fwConstants, _c, type, n, start, data, _d, decryptedData, newEphemeralPub;\n        return __generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;\n                    _c = (0, exports.validateGetKvRequest)({\n                        type: _type,\n                        n: _n,\n                        start: _start,\n                        fwConstants: fwConstants,\n                    }), type = _c.type, n = _c.n, start = _c.start;\n                    data = (0, exports.encodeGetKvRecordsRequest)({ type: type, n: n, start: start });\n                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({\n                            data: data,\n                            requestType: protocol_1.LatticeSecureEncryptedRequestType.getKvRecords,\n                            sharedSecret: sharedSecret,\n                            ephemeralPub: ephemeralPub,\n                            url: url,\n                        })];\n                case 1:\n                    _d = _e.sent(), decryptedData = _d.decryptedData, newEphemeralPub = _d.newEphemeralPub;\n                    client.mutate({\n                        ephemeralPub: newEphemeralPub,\n                    });\n                    return [2 /*return*/, (0, exports.decodeGetKvRecordsResponse)(decryptedData, fwConstants)];\n            }\n        });\n    });\n}\nexports.getKvRecords = getKvRecords;\nvar validateGetKvRequest = function (_a) {\n    var fwConstants = _a.fwConstants, n = _a.n, type = _a.type, start = _a.start;\n    if (!fwConstants.kvActionsAllowed) {\n        throw new Error('Unsupported. Please update firmware.');\n    }\n    if (!n || n < 1) {\n        throw new Error('You must request at least one record.');\n    }\n    if (n > fwConstants.kvActionMaxNum) {\n        throw new Error(\"You may only request up to \".concat(fwConstants.kvActionMaxNum, \" records at once.\"));\n    }\n    if (type !== 0 && !type) {\n        throw new Error('You must specify a type.');\n    }\n    if (start !== 0 && !start) {\n        throw new Error('You must specify a type.');\n    }\n    return { fwConstants: fwConstants, n: n, type: type, start: start };\n};\nexports.validateGetKvRequest = validateGetKvRequest;\nvar encodeGetKvRecordsRequest = function (_a) {\n    var type = _a.type, n = _a.n, start = _a.start;\n    var payload = Buffer.alloc(9);\n    payload.writeUInt32LE(type, 0);\n    payload.writeUInt8(n, 4);\n    payload.writeUInt32LE(start, 5);\n    return payload;\n};\nexports.encodeGetKvRecordsRequest = encodeGetKvRecordsRequest;\nvar decodeGetKvRecordsResponse = function (data, fwConstants) {\n    var off = 0;\n    var nTotal = data.readUInt32BE(off);\n    off += 4;\n    var nFetched = parseInt(data.slice(off, off + 1).toString('hex'), 16);\n    off += 1;\n    if (nFetched > fwConstants.kvActionMaxNum)\n        throw new Error('Too many records fetched. Firmware error.');\n    var records = [];\n    for (var i = 0; i < nFetched; i++) {\n        var r = {};\n        r.id = data.readUInt32BE(off);\n        off += 4;\n        r.type = data.readUInt32BE(off);\n        off += 4;\n        r.caseSensitive =\n            parseInt(data.slice(off, off + 1).toString('hex'), 16) === 1\n                ? true\n                : false;\n        off += 1;\n        var keySz = parseInt(data.slice(off, off + 1).toString('hex'), 16);\n        off += 1;\n        r.key = data.slice(off, off + keySz - 1).toString();\n        off += fwConstants.kvKeyMaxStrSz + 1;\n        var valSz = parseInt(data.slice(off, off + 1).toString('hex'), 16);\n        off += 1;\n        r.val = data.slice(off, off + valSz - 1).toString();\n        off += fwConstants.kvValMaxStrSz + 1;\n        records.push(r);\n    }\n    return {\n        records: records,\n        total: nTotal,\n        fetched: nFetched,\n    };\n};\nexports.decodeGetKvRecordsResponse = decodeGetKvRecordsResponse;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./addKvRecords\"), exports);\n__exportStar(require(\"./connect\"), exports);\n__exportStar(require(\"./fetchEncData\"), exports);\n__exportStar(require(\"./fetchActiveWallet\"), exports);\n__exportStar(require(\"./getAddresses\"), exports);\n__exportStar(require(\"./getKvRecords\"), exports);\n__exportStar(require(\"./pair\"), exports);\n__exportStar(require(\"./removeKvRecords\"), exports);\n__exportStar(require(\"./sign\"), exports);\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodePairRequest = exports.pair = void 0;\nvar protocol_1 = require(\"../protocol\");\nvar utilities_1 = require(\"../shared/utilities\");\nvar validators_1 = require(\"../shared/validators\");\nvar util_1 = require(\"../util\");\n/**\n * If a pairing secret is provided, `pair` uses it to sign a hash of the public key, name, and\n * pairing secret. It then sends the name and signature to the device. If no pairing secret is\n * provided, `pair` sends a zero-length name buffer to the device.\n * @category Lattice\n * @returns The active wallet object.\n */\nfunction pair(_a) {\n    var client = _a.client, pairingSecret = _a.pairingSecret;\n    return __awaiter(this, void 0, void 0, function () {\n        var _b, url, sharedSecret, ephemeralPub, appName, key, data, newEphemeralPub;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, appName = _b.appName, key = _b.key;\n                    data = (0, exports.encodePairRequest)({ pairingSecret: pairingSecret, key: key, appName: appName });\n                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({\n                            data: data,\n                            requestType: protocol_1.LatticeSecureEncryptedRequestType.finalizePairing,\n                            sharedSecret: sharedSecret,\n                            ephemeralPub: ephemeralPub,\n                            url: url,\n                        })];\n                case 1:\n                    newEphemeralPub = (_c.sent()).newEphemeralPub;\n                    client.mutate({\n                        ephemeralPub: newEphemeralPub,\n                        isPaired: true,\n                    });\n                    return [4 /*yield*/, client.fetchActiveWallet()];\n                case 2:\n                    _c.sent();\n                    return [2 /*return*/, client.hasActiveWallet()];\n            }\n        });\n    });\n}\nexports.pair = pair;\nvar encodePairRequest = function (_a) {\n    var key = _a.key, pairingSecret = _a.pairingSecret, appName = _a.appName;\n    // Build the payload data\n    var pubKeyBytes = (0, utilities_1.getPubKeyBytes)(key);\n    var nameBuf = Buffer.alloc(25);\n    if (pairingSecret.length > 0) {\n        // If a pairing secret of zero length is passed in, it usually indicates we want to cancel\n        // the pairing attempt. In this case we pass a zero-length name buffer so the firmware can\n        // know not to draw the error screen. Note that we still expect an error to come back\n        // (RESP_ERR_PAIR_FAIL)\n        nameBuf.write(appName);\n    }\n    var hash = (0, util_1.generateAppSecret)(pubKeyBytes, nameBuf, Buffer.from(pairingSecret));\n    var sig = key.sign(hash); // returns an array, not a buffer\n    var derSig = (0, util_1.toPaddedDER)(sig);\n    var payload = Buffer.concat([nameBuf, derSig]);\n    return payload;\n};\nexports.encodePairRequest = encodePairRequest;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeRemoveKvRecordsRequest = exports.validateRemoveKvRequest = exports.removeKvRecords = void 0;\nvar protocol_1 = require(\"../protocol\");\nvar validators_1 = require(\"../shared/validators\");\n/**\n * `removeKvRecords` takes in an array of ids and sends a request to remove them from the Lattice.\n * @category Lattice\n * @returns A callback with an error or null.\n */\nfunction removeKvRecords(_a) {\n    var client = _a.client, _type = _a.type, _ids = _a.ids;\n    return __awaiter(this, void 0, void 0, function () {\n        var _b, url, sharedSecret, ephemeralPub, fwConstants, _c, type, ids, data, _d, decryptedData, newEphemeralPub;\n        return __generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;\n                    _c = (0, exports.validateRemoveKvRequest)({\n                        fwConstants: fwConstants,\n                        type: _type,\n                        ids: _ids,\n                    }), type = _c.type, ids = _c.ids;\n                    data = (0, exports.encodeRemoveKvRecordsRequest)({\n                        type: type,\n                        ids: ids,\n                        fwConstants: fwConstants,\n                    });\n                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({\n                            data: data,\n                            requestType: protocol_1.LatticeSecureEncryptedRequestType.removeKvRecords,\n                            sharedSecret: sharedSecret,\n                            ephemeralPub: ephemeralPub,\n                            url: url,\n                        })];\n                case 1:\n                    _d = _e.sent(), decryptedData = _d.decryptedData, newEphemeralPub = _d.newEphemeralPub;\n                    client.mutate({\n                        ephemeralPub: newEphemeralPub,\n                    });\n                    return [2 /*return*/, decryptedData];\n            }\n        });\n    });\n}\nexports.removeKvRecords = removeKvRecords;\nvar validateRemoveKvRequest = function (_a) {\n    var fwConstants = _a.fwConstants, type = _a.type, ids = _a.ids;\n    if (!fwConstants.kvActionsAllowed) {\n        throw new Error('Unsupported. Please update firmware.');\n    }\n    if (!Array.isArray(ids) || ids.length < 1) {\n        throw new Error('You must include one or more `ids` to removed.');\n    }\n    if (ids.length > fwConstants.kvRemoveMaxNum) {\n        throw new Error(\"Only up to \".concat(fwConstants.kvRemoveMaxNum, \" records may be removed at once.\"));\n    }\n    if (type !== 0 && !type) {\n        throw new Error('You must specify a type.');\n    }\n    return { type: type, ids: ids };\n};\nexports.validateRemoveKvRequest = validateRemoveKvRequest;\nvar encodeRemoveKvRecordsRequest = function (_a) {\n    var fwConstants = _a.fwConstants, type = _a.type, ids = _a.ids;\n    var payload = Buffer.alloc(5 + 4 * fwConstants.kvRemoveMaxNum);\n    payload.writeUInt32LE(type, 0);\n    payload.writeUInt8(ids.length, 4);\n    for (var i = 0; i < ids.length; i++) {\n        var id = parseInt(ids[i]);\n        payload.writeUInt32LE(id, 5 + 4 * i);\n    }\n    return payload;\n};\nexports.encodeRemoveKvRecordsRequest = encodeRemoveKvRecordsRequest;\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeSignResponse = exports.encodeSignRequest = exports.sign = void 0;\nvar hash_js_1 = require(\"hash.js\");\nvar bitcoin_1 = __importDefault(require(\"../bitcoin\"));\nvar constants_1 = require(\"../constants\");\nvar ethereum_1 = __importDefault(require(\"../ethereum\"));\nvar genericSigning_1 = require(\"../genericSigning\");\nvar protocol_1 = require(\"../protocol\");\nvar functions_1 = require(\"../shared/functions\");\nvar validators_1 = require(\"../shared/validators\");\nvar util_1 = require(\"../util\");\n/**\n * `sign` builds and sends a request for signing to the device.\n * @category Lattice\n * @returns The response from the device.\n */\nfunction sign(_a) {\n    var client = _a.client, data = _a.data, currency = _a.currency, cachedData = _a.cachedData, nextCode = _a.nextCode;\n    return __awaiter(this, void 0, void 0, function () {\n        var _b, url, sharedSecret, ephemeralPub, fwConstants, wallet, _c, requestData, isGeneric, _d, payload, hasExtraPayloads, _e, decryptedData, newEphemeralPub, decodedResponse;\n        return __generator(this, function (_f) {\n            switch (_f.label) {\n                case 0:\n                    _b = (0, validators_1.validateConnectedClient)(client), url = _b.url, sharedSecret = _b.sharedSecret, ephemeralPub = _b.ephemeralPub, fwConstants = _b.fwConstants;\n                    wallet = (0, validators_1.validateWallet)(client.getActiveWallet());\n                    _c = (0, functions_1.buildTransaction)({\n                        data: data,\n                        currency: currency,\n                        fwConstants: fwConstants,\n                    }), requestData = _c.requestData, isGeneric = _c.isGeneric;\n                    _d = (0, exports.encodeSignRequest)({\n                        fwConstants: fwConstants,\n                        wallet: wallet,\n                        requestData: requestData,\n                        cachedData: cachedData,\n                        nextCode: nextCode,\n                    }), payload = _d.payload, hasExtraPayloads = _d.hasExtraPayloads;\n                    return [4 /*yield*/, (0, protocol_1.encryptedSecureRequest)({\n                            data: payload,\n                            requestType: protocol_1.LatticeSecureEncryptedRequestType.sign,\n                            sharedSecret: sharedSecret,\n                            ephemeralPub: ephemeralPub,\n                            url: url,\n                        })];\n                case 1:\n                    _e = _f.sent(), decryptedData = _e.decryptedData, newEphemeralPub = _e.newEphemeralPub;\n                    client.mutate({\n                        ephemeralPub: newEphemeralPub,\n                    });\n                    // If this request has multiple payloads, we need to recurse\n                    // so that we can make the next request.\n                    // It is chained to the first request using `nextCode`\n                    if (hasExtraPayloads) {\n                        return [2 /*return*/, client.sign({\n                                data: data,\n                                currency: currency,\n                                cachedData: requestData,\n                                nextCode: decryptedData.slice(0, 8),\n                            })];\n                    }\n                    decodedResponse = (0, exports.decodeSignResponse)({\n                        data: decryptedData,\n                        request: requestData,\n                        isGeneric: isGeneric,\n                        currency: currency,\n                    });\n                    return [2 /*return*/, decodedResponse];\n            }\n        });\n    });\n}\nexports.sign = sign;\nvar encodeSignRequest = function (_a) {\n    var _b, _c, _d;\n    var fwConstants = _a.fwConstants, wallet = _a.wallet, requestData = _a.requestData, cachedData = _a.cachedData, nextCode = _a.nextCode;\n    var reqPayload, schema;\n    if (cachedData && nextCode) {\n        requestData = cachedData;\n        reqPayload = Buffer.concat([\n            nextCode,\n            requestData.extraDataPayloads.shift(),\n        ]);\n        schema = protocol_1.LatticeSignSchema.extraData;\n    }\n    else {\n        reqPayload = requestData.payload;\n        schema = requestData.schema;\n    }\n    var payload = Buffer.alloc(2 + fwConstants.reqMaxDataSz);\n    var off = 0;\n    var hasExtraPayloads = requestData.extraDataPayloads &&\n        Number(requestData.extraDataPayloads.length > 0);\n    payload.writeUInt8(hasExtraPayloads, off);\n    off += 1;\n    // Copy request schema (e.g. ETH or BTC transfer)\n    payload.writeUInt8(schema, off);\n    off += 1;\n    // Copy the wallet UID\n    (_b = wallet.uid) === null || _b === void 0 ? void 0 : _b.copy(payload, off);\n    off += (_d = (_c = wallet.uid) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;\n    // Build data based on the type of request\n    reqPayload.copy(payload, off);\n    return { payload: payload, hasExtraPayloads: hasExtraPayloads };\n};\nexports.encodeSignRequest = encodeSignRequest;\nvar decodeSignResponse = function (_a) {\n    var _b;\n    var data = _a.data, request = _a.request, isGeneric = _a.isGeneric, currency = _a.currency;\n    var off = 0;\n    var derSigLen = 74; // DER signatures are 74 bytes\n    if (currency === constants_1.CURRENCIES.BTC) {\n        var btcRequest = request;\n        var pkhLen = 20; // Pubkeyhashes are 20 bytes\n        var sigsLen = 740; // Up to 10x DER signatures\n        var changeVersion = bitcoin_1.default.getAddressFormat(btcRequest.origData.changePath);\n        var changePubKeyHash = data.slice(off, off + pkhLen);\n        off += pkhLen;\n        var changeRecipient = bitcoin_1.default.getBitcoinAddress(changePubKeyHash, changeVersion);\n        var compressedPubLength = 33; // Size of compressed public key\n        var pubkeys = [];\n        var sigs = [];\n        var n = 0;\n        // Parse the signature for each output -- they are returned in the serialized payload in form\n        // [pubkey, sig] There is one signature per output\n        while (off < data.length) {\n            // Exit out if we have seen all the returned sigs and pubkeys\n            if (data[off] !== 0x30)\n                break;\n            // Otherwise grab another set Note that all DER sigs returned fill the maximum 74 byte\n            // buffer, but also contain a length at off+1, which we use to parse the non-zero data.\n            // First get the signature from its slot\n            var sigStart = off;\n            var sigEnd = off + 2 + data[off + 1];\n            sigs.push(data.slice(sigStart, sigEnd));\n            off += derSigLen;\n            // Next, shift by the full set of signatures to hit the respective pubkey NOTE: The data\n            // returned is: [<sig0>, <sig1>, ... <sig9>][<pubkey0>, <pubkey1>, ... <pubkey9>]\n            var pubStart = n * compressedPubLength + sigsLen;\n            var pubEnd = (n + 1) * compressedPubLength + sigsLen;\n            pubkeys.push(data.slice(pubStart, pubEnd));\n            // Update offset to hit the next signature slot\n            n += 1;\n        }\n        // Build the transaction data to be serialized\n        var preSerializedData = {\n            inputs: [],\n            outputs: [],\n        };\n        // First output comes from request dta\n        preSerializedData.outputs.push({\n            value: btcRequest.origData.value,\n            recipient: btcRequest.origData.recipient,\n        });\n        if (((_b = btcRequest.changeData) === null || _b === void 0 ? void 0 : _b.value) && btcRequest.changeData.value > 0) {\n            // Second output comes from change data\n            preSerializedData.outputs.push({\n                value: btcRequest.changeData.value,\n                recipient: changeRecipient,\n            });\n        }\n        // Add the inputs\n        for (var i = 0; i < sigs.length; i++) {\n            preSerializedData.inputs.push({\n                hash: btcRequest.origData.prevOuts[i].txHash,\n                index: btcRequest.origData.prevOuts[i].index,\n                sig: sigs[i],\n                pubkey: pubkeys[i],\n                signerPath: btcRequest.origData.prevOuts[i].signerPath,\n            });\n        }\n        // Finally, serialize the transaction\n        var serializedTx = bitcoin_1.default.serializeTx(preSerializedData);\n        // Generate the transaction hash so the user can look this transaction up later\n        var preImageTxHash = serializedTx;\n        var txHashPre = Buffer.from((0, hash_js_1.sha256)().update(Buffer.from(preImageTxHash, 'hex')).digest('hex'), 'hex');\n        // Add extra data for debugging/lookup purposes\n        return {\n            tx: serializedTx,\n            txHash: (0, hash_js_1.sha256)().update(txHashPre).digest('hex'),\n            changeRecipient: changeRecipient,\n            sigs: sigs,\n        };\n    }\n    else if (currency === constants_1.CURRENCIES.ETH && !isGeneric) {\n        var sig = (0, util_1.parseDER)(data.slice(off, off + 2 + data[off + 1]));\n        off += derSigLen;\n        var ethAddr = data.slice(off, off + 20);\n        // Determine the `v` param and add it to the sig before returning\n        var _c = ethereum_1.default.buildEthRawTx(request, sig, ethAddr), rawTx = _c.rawTx, sigWithV = _c.sigWithV;\n        return {\n            tx: \"0x\".concat(rawTx),\n            txHash: \"0x\".concat(ethereum_1.default.hashTransaction(rawTx)),\n            sig: {\n                v: sigWithV.v,\n                r: sigWithV.r.toString('hex'),\n                s: sigWithV.s.toString('hex'),\n            },\n            signer: ethAddr,\n        };\n    }\n    else if (currency === constants_1.CURRENCIES.ETH_MSG) {\n        var sig = (0, util_1.parseDER)(data.slice(off, off + 2 + data[off + 1]));\n        off += derSigLen;\n        var signer = data.slice(off, off + 20);\n        var validatedSig = ethereum_1.default.validateEthereumMsgResponse({ signer: signer, sig: sig }, request);\n        return {\n            sig: {\n                v: validatedSig.v,\n                r: validatedSig.r.toString('hex'),\n                s: validatedSig.s.toString('hex'),\n            },\n            signer: signer,\n        };\n    }\n    else {\n        // Generic signing request\n        return (0, genericSigning_1.parseGenericSigningResponse)(data, off, request);\n    }\n};\nexports.decodeSignResponse = decodeSignResponse;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEncodedPayload = exports.parseGenericSigningResponse = exports.buildGenericSigningMsgRequest = void 0;\n/**\nGeneric signing module. Any payload can be sent to the Lattice and\nwill be displayed in full (note that \\n and \\t characters will be\ndisplayed as line breaks and tabs on the screen).\n\nThis payload should be coupled with:\n* Signer's BIP44 path\n* Curve on which to derive the signing key\n* Hash function to use on the message\n*/\nvar sha_1 = require(\"hash.js/lib/hash/sha\");\nvar js_sha3_1 = require(\"js-sha3\");\nvar constants_1 = require(\"./constants\");\nvar index_1 = require(\"./index\");\nvar protocol_1 = require(\"./protocol\");\nvar util_1 = require(\"./util\");\nvar buildGenericSigningMsgRequest = function (req) {\n    var signerPath = req.signerPath, curveType = req.curveType, hashType = req.hashType, _a = req.encodingType, encodingType = _a === void 0 ? null : _a, _b = req.decoder, decoder = _b === void 0 ? null : _b, _c = req.omitPubkey, omitPubkey = _c === void 0 ? false : _c, fwConstants = req.fwConstants, _d = req.blsDst, blsDst = _d === void 0 ? index_1.Constants.SIGNING.BLS_DST.BLS_DST_NUL : _d;\n    var extraDataFrameSz = fwConstants.extraDataFrameSz, extraDataMaxFrames = fwConstants.extraDataMaxFrames, prehashAllowed = fwConstants.prehashAllowed, genericSigning = fwConstants.genericSigning, varAddrPathSzAllowed = fwConstants.varAddrPathSzAllowed;\n    var curveTypes = genericSigning.curveTypes, encodingTypes = genericSigning.encodingTypes, hashTypes = genericSigning.hashTypes, baseDataSz = genericSigning.baseDataSz, baseReqSz = genericSigning.baseReqSz, calldataDecoding = genericSigning.calldataDecoding;\n    var encodedPayload = (0, exports.getEncodedPayload)(req.payload, encodingType, encodingTypes);\n    var encoding = encodedPayload.encoding;\n    var payloadBuf = encodedPayload.payloadBuf;\n    var origPayloadBuf = payloadBuf;\n    var payloadDataSz = payloadBuf.length;\n    // Size of data payload that can be included in the first/base request\n    var maxExpandedSz = baseDataSz + extraDataMaxFrames * extraDataFrameSz;\n    // Sanity checks\n    if (!payloadDataSz) {\n        throw new Error('Payload could not be handled.');\n    }\n    else if (!genericSigning ||\n        !extraDataFrameSz ||\n        !extraDataMaxFrames ||\n        !prehashAllowed) {\n        throw new Error('Unsupported. Please update your Lattice firmware.');\n    }\n    else if (!(0, util_1.existsIn)(curveType, curveTypes)) {\n        throw new Error('Unsupported curve type.');\n    }\n    else if (!(0, util_1.existsIn)(hashType, hashTypes)) {\n        throw new Error('Unsupported hash type.');\n    }\n    // If there is a decoder attached to our payload, add it to\n    // the data field of the request.\n    var hasDecoder = (decoder && calldataDecoding && decoder.length <= calldataDecoding.maxSz);\n    // Make sure the payload AND decoder data fits in the firmware buffer.\n    // If it doesn't, we can't include the decoder because the payload will likely\n    // be pre-hashed and the decoder data isn't part of the message to sign.\n    var decoderFits = (hasDecoder && payloadBuf.length + decoder.length <= maxExpandedSz);\n    if (hasDecoder && decoderFits) {\n        var decoderBuf = Buffer.alloc(8 + decoder.length);\n        // First write th reserved word\n        decoderBuf.writeUInt32LE(calldataDecoding.reserved, 0);\n        // Then write size, then the data\n        decoderBuf.writeUInt32LE(decoder.length, 4);\n        Buffer.from(decoder).copy(decoderBuf, 8);\n        payloadBuf = Buffer.concat([payloadBuf, decoderBuf]);\n    }\n    // Ed25519 specific sanity checks\n    if (curveType === curveTypes.ED25519) {\n        if (hashType !== hashTypes.NONE) {\n            throw new Error('Signing on ed25519 requires unhashed message');\n        }\n        signerPath.forEach(function (idx) {\n            if (idx < constants_1.HARDENED_OFFSET) {\n                throw new Error('Signing on ed25519 requires all signer path indices be hardened.');\n            }\n        });\n    }\n    // BLS12_381 specific processing\n    else if (curveType === curveTypes.BLS12_381_G2) {\n        // For BLS signing we need to prefix 4 bytes to represent the\n        // domain separator (DST). If none is provided, we use the default\n        // value of DST_NUL.\n        var blsDstBuf = Buffer.alloc(4);\n        blsDstBuf.writeUInt32LE(blsDst);\n        payloadBuf = Buffer.concat([blsDstBuf, payloadBuf]);\n        payloadDataSz += blsDstBuf.length;\n    }\n    // Build the request buffer with metadata and then the payload to sign.\n    var buf = Buffer.alloc(baseReqSz);\n    var off = 0;\n    buf.writeUInt32LE(encoding, off);\n    off += 4;\n    buf.writeUInt8(hashType, off);\n    off += 1;\n    buf.writeUInt8(curveType, off);\n    off += 1;\n    var signerPathBuf = (0, util_1.buildSignerPathBuf)(signerPath, varAddrPathSzAllowed);\n    signerPathBuf.copy(buf, off);\n    off += signerPathBuf.length;\n    buf.writeUInt8(omitPubkey ? 1 : 0, off);\n    off += 1;\n    // Flow data into extraData requests if applicable\n    var extraDataPayloads = [];\n    var prehash = null;\n    var didPrehash = false;\n    if (payloadBuf.length > baseDataSz) {\n        if (prehashAllowed && payloadBuf.length > maxExpandedSz) {\n            // If we prehash, we need to provide the full payload size\n            buf.writeUInt16LE(payloadBuf.length, off);\n            off += 2;\n            didPrehash = true;\n            // If we have to prehash, only hash the actual payload data, i.e. exclude\n            // any optional calldata decoder data.\n            var payloadData = payloadBuf.slice(0, payloadDataSz);\n            // If this payload is too large to send, but the Lattice allows a prehashed message, do that\n            if (hashType === hashTypes.NONE) {\n                // This cannot be done for ED25519 signing, which must sign the full message\n                throw new Error('Message too large to send and could not be prehashed (hashType=NONE).');\n            }\n            else if (hashType === hashTypes.KECCAK256) {\n                prehash = Buffer.from((0, js_sha3_1.keccak256)(payloadData), 'hex');\n            }\n            else if (hashType === hashTypes.SHA256) {\n                prehash = Buffer.from((0, sha_1.sha256)().update(payloadData).digest('hex'), 'hex');\n            }\n            else {\n                throw new Error('Unsupported hash type.');\n            }\n        }\n        else {\n            // Split overflow data into extraData frames\n            var frames_1 = (0, util_1.splitFrames)(payloadBuf.slice(baseDataSz), extraDataFrameSz);\n            frames_1.forEach(function (frame) {\n                var szLE = Buffer.alloc(4);\n                szLE.writeUInt32LE(frame.length, 0);\n                extraDataPayloads.push(Buffer.concat([szLE, frame]));\n            });\n        }\n    }\n    // If we didn't prehash, we know the full request (including calldata info) fits.\n    // Set the payload size to only include message data. This will inform firmware\n    // where to slice off calldata info.\n    if (!didPrehash) {\n        buf.writeUInt16LE(payloadDataSz, off);\n        off += 2;\n    }\n    // If the message had to be prehashed, we will only copy the hash data into the request.\n    // Otherwise copy as many payload bytes into the request as possible. Follow up data\n    // from `frames` will come in follow up requests.\n    var toCopy = prehash ? prehash : payloadBuf;\n    toCopy.copy(buf, off);\n    // Return all the necessary data\n    return {\n        payload: buf,\n        extraDataPayloads: extraDataPayloads,\n        schema: protocol_1.LatticeSignSchema.generic,\n        curveType: curveType,\n        encodingType: encodingType,\n        hashType: hashType,\n        omitPubkey: omitPubkey,\n        origPayloadBuf: origPayloadBuf,\n    };\n};\nexports.buildGenericSigningMsgRequest = buildGenericSigningMsgRequest;\nvar parseGenericSigningResponse = function (res, off, req) {\n    var parsed = {\n        pubkey: null,\n        sig: null,\n    };\n    // Parse BIP44 path\n    // Parse pubkey and then sig\n    if (req.curveType === index_1.Constants.SIGNING.CURVES.SECP256K1) {\n        // Handle `GpEccPubkey256_t`\n        if (!req.omitPubkey) {\n            var compression = res.readUInt8(off);\n            off += 1;\n            if (compression === 0x02 || compression === 0x03) {\n                // Compressed key - only copy x\n                parsed.pubkey = Buffer.alloc(33);\n                parsed.pubkey.writeUInt8(compression, 0);\n                res.slice(off, off + 32).copy(parsed.pubkey, 1);\n            }\n            else if (compression === 0x04) {\n                // Uncompressed key\n                parsed.pubkey = Buffer.alloc(65);\n                parsed.pubkey.writeUInt8(compression, 0);\n                res.slice(off).copy(parsed.pubkey, 1);\n            }\n            else {\n                throw new Error('Bad compression byte in signing response.');\n            }\n            off += 64;\n        }\n        else {\n            // Skip pubkey section\n            off += 65;\n        }\n        // Handle `GpECDSASig_t`\n        parsed.sig = (0, util_1.parseDER)(res.slice(off, off + 2 + res[off + 1]));\n        // Remove any leading zeros in signature components to ensure\n        // the result is a 64 byte sig\n        parsed.sig.r = (0, util_1.fixLen)(parsed.sig.r, 32);\n        parsed.sig.s = (0, util_1.fixLen)(parsed.sig.s, 32);\n        // If this is an EVM request, we want to add a `v`. Other request\n        // types do not require this additional signature param.\n        if (req.encodingType === index_1.Constants.SIGNING.ENCODINGS.EVM) {\n            var vBn = (0, util_1.getV)(req.origPayloadBuf, parsed);\n            // NOTE: For backward-compatibility reasons we are returning\n            // a Buffer for `v` here. In the future, we will switch to\n            // returning `v` as a BN and `r`,`s` as Buffers (they are hex\n            // strings right now).\n            parsed.sig.v = vBn.toArrayLike(Buffer);\n        }\n    }\n    else if (req.curveType === index_1.Constants.SIGNING.CURVES.ED25519) {\n        if (!req.omitPubkey) {\n            // Handle `GpEdDSAPubkey_t`\n            parsed.pubkey = Buffer.alloc(32);\n            res.slice(off, off + 32).copy(parsed.pubkey);\n        }\n        off += 32;\n        // Handle `GpEdDSASig_t`\n        parsed.sig = {\n            r: res.slice(off, off + 32),\n            s: res.slice(off + 32, off + 64),\n        };\n    }\n    else if (req.curveType === index_1.Constants.SIGNING.CURVES.BLS12_381_G2) {\n        if (!req.omitPubkey) {\n            // Handle `GpBLS12_381_G1Pub_t`\n            parsed.pubkey = Buffer.alloc(48);\n            res.slice(off, off + 48).copy(parsed.pubkey);\n        }\n        off += 48;\n        // Handle `GpBLS12_381_G2Sig_t`\n        parsed.sig = Buffer.alloc(96);\n        res.slice(off, off + 96).copy(parsed.sig);\n    }\n    else {\n        throw new Error('Unsupported curve.');\n    }\n    return parsed;\n};\nexports.parseGenericSigningResponse = parseGenericSigningResponse;\nvar getEncodedPayload = function (payload, encoding, allowedEncodings) {\n    if (!encoding) {\n        encoding = index_1.Constants.SIGNING.ENCODINGS.NONE;\n    }\n    // Make sure the encoding type specified is supported by firmware\n    if (!(0, util_1.existsIn)(encoding, allowedEncodings)) {\n        throw new Error('Encoding not supported by Lattice firmware. You may want to update.');\n    }\n    var payloadBuf;\n    if (!payload) {\n        throw new Error('No payload included');\n    }\n    if (typeof payload === 'string' && payload.slice(0, 2) === '0x') {\n        payloadBuf = Buffer.from(payload.slice(2), 'hex');\n    }\n    else {\n        payloadBuf = Buffer.from(payload);\n    }\n    // Build the request with the specified encoding type\n    return {\n        payloadBuf: payloadBuf,\n        encoding: encoding,\n    };\n};\nexports.getEncodedPayload = getEncodedPayload;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Utils = exports.Constants = exports.Client = exports.Calldata = void 0;\nvar index_1 = require(\"./calldata/index\");\nObject.defineProperty(exports, \"Calldata\", { enumerable: true, get: function () { return index_1.CALLDATA; } });\nvar client_1 = require(\"./client\");\nObject.defineProperty(exports, \"Client\", { enumerable: true, get: function () { return client_1.Client; } });\nvar constants_1 = require(\"./constants\");\nObject.defineProperty(exports, \"Constants\", { enumerable: true, get: function () { return constants_1.EXTERNAL; } });\nvar util_1 = require(\"./util\");\nObject.defineProperty(exports, \"Utils\", { enumerable: true, get: function () { return util_1.EXTERNAL; } });\n__exportStar(require(\"./api\"), exports);\n","/* eslint quote-props: off */\n'use strict'\n\nconst names = Object.freeze({\n  'identity': 0x00,\n  'sha1': 0x11,\n  'sha2-256': 0x12,\n  'sha2-512': 0x13,\n  'sha3-512': 0x14,\n  'sha3-384': 0x15,\n  'sha3-256': 0x16,\n  'sha3-224': 0x17,\n  'shake-128': 0x18,\n  'shake-256': 0x19,\n  'keccak-224': 0x1a,\n  'keccak-256': 0x1b,\n  'keccak-384': 0x1c,\n  'keccak-512': 0x1d,\n  'blake3': 0x1e,\n  'murmur3-128': 0x22,\n  'murmur3-32': 0x23,\n  'dbl-sha2-256': 0x56,\n  'md4': 0xd4,\n  'md5': 0xd5,\n  'bmt': 0xd6,\n  'sha2-256-trunc254-padded': 0x1012,\n  'ripemd-128': 0x1052,\n  'ripemd-160': 0x1053,\n  'ripemd-256': 0x1054,\n  'ripemd-320': 0x1055,\n  'x11': 0x1100,\n  'sm3-256': 0x534d,\n  'blake2b-8': 0xb201,\n  'blake2b-16': 0xb202,\n  'blake2b-24': 0xb203,\n  'blake2b-32': 0xb204,\n  'blake2b-40': 0xb205,\n  'blake2b-48': 0xb206,\n  'blake2b-56': 0xb207,\n  'blake2b-64': 0xb208,\n  'blake2b-72': 0xb209,\n  'blake2b-80': 0xb20a,\n  'blake2b-88': 0xb20b,\n  'blake2b-96': 0xb20c,\n  'blake2b-104': 0xb20d,\n  'blake2b-112': 0xb20e,\n  'blake2b-120': 0xb20f,\n  'blake2b-128': 0xb210,\n  'blake2b-136': 0xb211,\n  'blake2b-144': 0xb212,\n  'blake2b-152': 0xb213,\n  'blake2b-160': 0xb214,\n  'blake2b-168': 0xb215,\n  'blake2b-176': 0xb216,\n  'blake2b-184': 0xb217,\n  'blake2b-192': 0xb218,\n  'blake2b-200': 0xb219,\n  'blake2b-208': 0xb21a,\n  'blake2b-216': 0xb21b,\n  'blake2b-224': 0xb21c,\n  'blake2b-232': 0xb21d,\n  'blake2b-240': 0xb21e,\n  'blake2b-248': 0xb21f,\n  'blake2b-256': 0xb220,\n  'blake2b-264': 0xb221,\n  'blake2b-272': 0xb222,\n  'blake2b-280': 0xb223,\n  'blake2b-288': 0xb224,\n  'blake2b-296': 0xb225,\n  'blake2b-304': 0xb226,\n  'blake2b-312': 0xb227,\n  'blake2b-320': 0xb228,\n  'blake2b-328': 0xb229,\n  'blake2b-336': 0xb22a,\n  'blake2b-344': 0xb22b,\n  'blake2b-352': 0xb22c,\n  'blake2b-360': 0xb22d,\n  'blake2b-368': 0xb22e,\n  'blake2b-376': 0xb22f,\n  'blake2b-384': 0xb230,\n  'blake2b-392': 0xb231,\n  'blake2b-400': 0xb232,\n  'blake2b-408': 0xb233,\n  'blake2b-416': 0xb234,\n  'blake2b-424': 0xb235,\n  'blake2b-432': 0xb236,\n  'blake2b-440': 0xb237,\n  'blake2b-448': 0xb238,\n  'blake2b-456': 0xb239,\n  'blake2b-464': 0xb23a,\n  'blake2b-472': 0xb23b,\n  'blake2b-480': 0xb23c,\n  'blake2b-488': 0xb23d,\n  'blake2b-496': 0xb23e,\n  'blake2b-504': 0xb23f,\n  'blake2b-512': 0xb240,\n  'blake2s-8': 0xb241,\n  'blake2s-16': 0xb242,\n  'blake2s-24': 0xb243,\n  'blake2s-32': 0xb244,\n  'blake2s-40': 0xb245,\n  'blake2s-48': 0xb246,\n  'blake2s-56': 0xb247,\n  'blake2s-64': 0xb248,\n  'blake2s-72': 0xb249,\n  'blake2s-80': 0xb24a,\n  'blake2s-88': 0xb24b,\n  'blake2s-96': 0xb24c,\n  'blake2s-104': 0xb24d,\n  'blake2s-112': 0xb24e,\n  'blake2s-120': 0xb24f,\n  'blake2s-128': 0xb250,\n  'blake2s-136': 0xb251,\n  'blake2s-144': 0xb252,\n  'blake2s-152': 0xb253,\n  'blake2s-160': 0xb254,\n  'blake2s-168': 0xb255,\n  'blake2s-176': 0xb256,\n  'blake2s-184': 0xb257,\n  'blake2s-192': 0xb258,\n  'blake2s-200': 0xb259,\n  'blake2s-208': 0xb25a,\n  'blake2s-216': 0xb25b,\n  'blake2s-224': 0xb25c,\n  'blake2s-232': 0xb25d,\n  'blake2s-240': 0xb25e,\n  'blake2s-248': 0xb25f,\n  'blake2s-256': 0xb260,\n  'skein256-8': 0xb301,\n  'skein256-16': 0xb302,\n  'skein256-24': 0xb303,\n  'skein256-32': 0xb304,\n  'skein256-40': 0xb305,\n  'skein256-48': 0xb306,\n  'skein256-56': 0xb307,\n  'skein256-64': 0xb308,\n  'skein256-72': 0xb309,\n  'skein256-80': 0xb30a,\n  'skein256-88': 0xb30b,\n  'skein256-96': 0xb30c,\n  'skein256-104': 0xb30d,\n  'skein256-112': 0xb30e,\n  'skein256-120': 0xb30f,\n  'skein256-128': 0xb310,\n  'skein256-136': 0xb311,\n  'skein256-144': 0xb312,\n  'skein256-152': 0xb313,\n  'skein256-160': 0xb314,\n  'skein256-168': 0xb315,\n  'skein256-176': 0xb316,\n  'skein256-184': 0xb317,\n  'skein256-192': 0xb318,\n  'skein256-200': 0xb319,\n  'skein256-208': 0xb31a,\n  'skein256-216': 0xb31b,\n  'skein256-224': 0xb31c,\n  'skein256-232': 0xb31d,\n  'skein256-240': 0xb31e,\n  'skein256-248': 0xb31f,\n  'skein256-256': 0xb320,\n  'skein512-8': 0xb321,\n  'skein512-16': 0xb322,\n  'skein512-24': 0xb323,\n  'skein512-32': 0xb324,\n  'skein512-40': 0xb325,\n  'skein512-48': 0xb326,\n  'skein512-56': 0xb327,\n  'skein512-64': 0xb328,\n  'skein512-72': 0xb329,\n  'skein512-80': 0xb32a,\n  'skein512-88': 0xb32b,\n  'skein512-96': 0xb32c,\n  'skein512-104': 0xb32d,\n  'skein512-112': 0xb32e,\n  'skein512-120': 0xb32f,\n  'skein512-128': 0xb330,\n  'skein512-136': 0xb331,\n  'skein512-144': 0xb332,\n  'skein512-152': 0xb333,\n  'skein512-160': 0xb334,\n  'skein512-168': 0xb335,\n  'skein512-176': 0xb336,\n  'skein512-184': 0xb337,\n  'skein512-192': 0xb338,\n  'skein512-200': 0xb339,\n  'skein512-208': 0xb33a,\n  'skein512-216': 0xb33b,\n  'skein512-224': 0xb33c,\n  'skein512-232': 0xb33d,\n  'skein512-240': 0xb33e,\n  'skein512-248': 0xb33f,\n  'skein512-256': 0xb340,\n  'skein512-264': 0xb341,\n  'skein512-272': 0xb342,\n  'skein512-280': 0xb343,\n  'skein512-288': 0xb344,\n  'skein512-296': 0xb345,\n  'skein512-304': 0xb346,\n  'skein512-312': 0xb347,\n  'skein512-320': 0xb348,\n  'skein512-328': 0xb349,\n  'skein512-336': 0xb34a,\n  'skein512-344': 0xb34b,\n  'skein512-352': 0xb34c,\n  'skein512-360': 0xb34d,\n  'skein512-368': 0xb34e,\n  'skein512-376': 0xb34f,\n  'skein512-384': 0xb350,\n  'skein512-392': 0xb351,\n  'skein512-400': 0xb352,\n  'skein512-408': 0xb353,\n  'skein512-416': 0xb354,\n  'skein512-424': 0xb355,\n  'skein512-432': 0xb356,\n  'skein512-440': 0xb357,\n  'skein512-448': 0xb358,\n  'skein512-456': 0xb359,\n  'skein512-464': 0xb35a,\n  'skein512-472': 0xb35b,\n  'skein512-480': 0xb35c,\n  'skein512-488': 0xb35d,\n  'skein512-496': 0xb35e,\n  'skein512-504': 0xb35f,\n  'skein512-512': 0xb360,\n  'skein1024-8': 0xb361,\n  'skein1024-16': 0xb362,\n  'skein1024-24': 0xb363,\n  'skein1024-32': 0xb364,\n  'skein1024-40': 0xb365,\n  'skein1024-48': 0xb366,\n  'skein1024-56': 0xb367,\n  'skein1024-64': 0xb368,\n  'skein1024-72': 0xb369,\n  'skein1024-80': 0xb36a,\n  'skein1024-88': 0xb36b,\n  'skein1024-96': 0xb36c,\n  'skein1024-104': 0xb36d,\n  'skein1024-112': 0xb36e,\n  'skein1024-120': 0xb36f,\n  'skein1024-128': 0xb370,\n  'skein1024-136': 0xb371,\n  'skein1024-144': 0xb372,\n  'skein1024-152': 0xb373,\n  'skein1024-160': 0xb374,\n  'skein1024-168': 0xb375,\n  'skein1024-176': 0xb376,\n  'skein1024-184': 0xb377,\n  'skein1024-192': 0xb378,\n  'skein1024-200': 0xb379,\n  'skein1024-208': 0xb37a,\n  'skein1024-216': 0xb37b,\n  'skein1024-224': 0xb37c,\n  'skein1024-232': 0xb37d,\n  'skein1024-240': 0xb37e,\n  'skein1024-248': 0xb37f,\n  'skein1024-256': 0xb380,\n  'skein1024-264': 0xb381,\n  'skein1024-272': 0xb382,\n  'skein1024-280': 0xb383,\n  'skein1024-288': 0xb384,\n  'skein1024-296': 0xb385,\n  'skein1024-304': 0xb386,\n  'skein1024-312': 0xb387,\n  'skein1024-320': 0xb388,\n  'skein1024-328': 0xb389,\n  'skein1024-336': 0xb38a,\n  'skein1024-344': 0xb38b,\n  'skein1024-352': 0xb38c,\n  'skein1024-360': 0xb38d,\n  'skein1024-368': 0xb38e,\n  'skein1024-376': 0xb38f,\n  'skein1024-384': 0xb390,\n  'skein1024-392': 0xb391,\n  'skein1024-400': 0xb392,\n  'skein1024-408': 0xb393,\n  'skein1024-416': 0xb394,\n  'skein1024-424': 0xb395,\n  'skein1024-432': 0xb396,\n  'skein1024-440': 0xb397,\n  'skein1024-448': 0xb398,\n  'skein1024-456': 0xb399,\n  'skein1024-464': 0xb39a,\n  'skein1024-472': 0xb39b,\n  'skein1024-480': 0xb39c,\n  'skein1024-488': 0xb39d,\n  'skein1024-496': 0xb39e,\n  'skein1024-504': 0xb39f,\n  'skein1024-512': 0xb3a0,\n  'skein1024-520': 0xb3a1,\n  'skein1024-528': 0xb3a2,\n  'skein1024-536': 0xb3a3,\n  'skein1024-544': 0xb3a4,\n  'skein1024-552': 0xb3a5,\n  'skein1024-560': 0xb3a6,\n  'skein1024-568': 0xb3a7,\n  'skein1024-576': 0xb3a8,\n  'skein1024-584': 0xb3a9,\n  'skein1024-592': 0xb3aa,\n  'skein1024-600': 0xb3ab,\n  'skein1024-608': 0xb3ac,\n  'skein1024-616': 0xb3ad,\n  'skein1024-624': 0xb3ae,\n  'skein1024-632': 0xb3af,\n  'skein1024-640': 0xb3b0,\n  'skein1024-648': 0xb3b1,\n  'skein1024-656': 0xb3b2,\n  'skein1024-664': 0xb3b3,\n  'skein1024-672': 0xb3b4,\n  'skein1024-680': 0xb3b5,\n  'skein1024-688': 0xb3b6,\n  'skein1024-696': 0xb3b7,\n  'skein1024-704': 0xb3b8,\n  'skein1024-712': 0xb3b9,\n  'skein1024-720': 0xb3ba,\n  'skein1024-728': 0xb3bb,\n  'skein1024-736': 0xb3bc,\n  'skein1024-744': 0xb3bd,\n  'skein1024-752': 0xb3be,\n  'skein1024-760': 0xb3bf,\n  'skein1024-768': 0xb3c0,\n  'skein1024-776': 0xb3c1,\n  'skein1024-784': 0xb3c2,\n  'skein1024-792': 0xb3c3,\n  'skein1024-800': 0xb3c4,\n  'skein1024-808': 0xb3c5,\n  'skein1024-816': 0xb3c6,\n  'skein1024-824': 0xb3c7,\n  'skein1024-832': 0xb3c8,\n  'skein1024-840': 0xb3c9,\n  'skein1024-848': 0xb3ca,\n  'skein1024-856': 0xb3cb,\n  'skein1024-864': 0xb3cc,\n  'skein1024-872': 0xb3cd,\n  'skein1024-880': 0xb3ce,\n  'skein1024-888': 0xb3cf,\n  'skein1024-896': 0xb3d0,\n  'skein1024-904': 0xb3d1,\n  'skein1024-912': 0xb3d2,\n  'skein1024-920': 0xb3d3,\n  'skein1024-928': 0xb3d4,\n  'skein1024-936': 0xb3d5,\n  'skein1024-944': 0xb3d6,\n  'skein1024-952': 0xb3d7,\n  'skein1024-960': 0xb3d8,\n  'skein1024-968': 0xb3d9,\n  'skein1024-976': 0xb3da,\n  'skein1024-984': 0xb3db,\n  'skein1024-992': 0xb3dc,\n  'skein1024-1000': 0xb3dd,\n  'skein1024-1008': 0xb3de,\n  'skein1024-1016': 0xb3df,\n  'skein1024-1024': 0xb3e0,\n  'poseidon-bls12_381-a2-fc1': 0xb401,\n  'poseidon-bls12_381-a2-fc1-sc': 0xb402\n})\n\nmodule.exports = { names }\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./latticeConstants\"), exports);\n__exportStar(require(\"./secureMessages\"), exports);\n","\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProtocolConstants = exports.LatticeEncDataSchema = exports.LatticeSignBlsDst = exports.LatticeSignEncoding = exports.LatticeSignCurve = exports.LatticeSignHash = exports.LatticeSignSchema = exports.LatticeGetAddressesFlag = exports.LatticeSecureEncryptedRequestType = exports.LatticeMsgType = exports.LatticeProtocolVersion = exports.LatticeSecureMsgType = exports.LatticeResponseCode = void 0;\nvar LatticeResponseCode;\n(function (LatticeResponseCode) {\n    LatticeResponseCode[LatticeResponseCode[\"success\"] = 0] = \"success\";\n    LatticeResponseCode[LatticeResponseCode[\"invalidMsg\"] = 128] = \"invalidMsg\";\n    LatticeResponseCode[LatticeResponseCode[\"unsupportedVersion\"] = 129] = \"unsupportedVersion\";\n    LatticeResponseCode[LatticeResponseCode[\"deviceBusy\"] = 130] = \"deviceBusy\";\n    LatticeResponseCode[LatticeResponseCode[\"userTimeout\"] = 131] = \"userTimeout\";\n    LatticeResponseCode[LatticeResponseCode[\"userDeclined\"] = 132] = \"userDeclined\";\n    LatticeResponseCode[LatticeResponseCode[\"pairFailed\"] = 133] = \"pairFailed\";\n    LatticeResponseCode[LatticeResponseCode[\"pairDisabled\"] = 134] = \"pairDisabled\";\n    LatticeResponseCode[LatticeResponseCode[\"permissionDisabled\"] = 135] = \"permissionDisabled\";\n    LatticeResponseCode[LatticeResponseCode[\"internalError\"] = 136] = \"internalError\";\n    LatticeResponseCode[LatticeResponseCode[\"gceTimeout\"] = 137] = \"gceTimeout\";\n    LatticeResponseCode[LatticeResponseCode[\"wrongWallet\"] = 138] = \"wrongWallet\";\n    LatticeResponseCode[LatticeResponseCode[\"deviceLocked\"] = 139] = \"deviceLocked\";\n    LatticeResponseCode[LatticeResponseCode[\"disabled\"] = 140] = \"disabled\";\n    LatticeResponseCode[LatticeResponseCode[\"already\"] = 141] = \"already\";\n    LatticeResponseCode[LatticeResponseCode[\"invalidEphemId\"] = 142] = \"invalidEphemId\";\n})(LatticeResponseCode = exports.LatticeResponseCode || (exports.LatticeResponseCode = {}));\nvar LatticeSecureMsgType;\n(function (LatticeSecureMsgType) {\n    LatticeSecureMsgType[LatticeSecureMsgType[\"connect\"] = 1] = \"connect\";\n    LatticeSecureMsgType[LatticeSecureMsgType[\"encrypted\"] = 2] = \"encrypted\";\n})(LatticeSecureMsgType = exports.LatticeSecureMsgType || (exports.LatticeSecureMsgType = {}));\nvar LatticeProtocolVersion;\n(function (LatticeProtocolVersion) {\n    LatticeProtocolVersion[LatticeProtocolVersion[\"v1\"] = 1] = \"v1\";\n})(LatticeProtocolVersion = exports.LatticeProtocolVersion || (exports.LatticeProtocolVersion = {}));\nvar LatticeMsgType;\n(function (LatticeMsgType) {\n    LatticeMsgType[LatticeMsgType[\"response\"] = 0] = \"response\";\n    LatticeMsgType[LatticeMsgType[\"secure\"] = 2] = \"secure\";\n})(LatticeMsgType = exports.LatticeMsgType || (exports.LatticeMsgType = {}));\nvar LatticeSecureEncryptedRequestType;\n(function (LatticeSecureEncryptedRequestType) {\n    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType[\"finalizePairing\"] = 0] = \"finalizePairing\";\n    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType[\"getAddresses\"] = 1] = \"getAddresses\";\n    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType[\"sign\"] = 3] = \"sign\";\n    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType[\"getWallets\"] = 4] = \"getWallets\";\n    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType[\"getKvRecords\"] = 7] = \"getKvRecords\";\n    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType[\"addKvRecords\"] = 8] = \"addKvRecords\";\n    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType[\"removeKvRecords\"] = 9] = \"removeKvRecords\";\n    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType[\"fetchEncryptedData\"] = 12] = \"fetchEncryptedData\";\n    LatticeSecureEncryptedRequestType[LatticeSecureEncryptedRequestType[\"test\"] = 13] = \"test\";\n})(LatticeSecureEncryptedRequestType = exports.LatticeSecureEncryptedRequestType || (exports.LatticeSecureEncryptedRequestType = {}));\nvar LatticeGetAddressesFlag;\n(function (LatticeGetAddressesFlag) {\n    LatticeGetAddressesFlag[LatticeGetAddressesFlag[\"none\"] = 0] = \"none\";\n    LatticeGetAddressesFlag[LatticeGetAddressesFlag[\"secp256k1Pubkey\"] = 3] = \"secp256k1Pubkey\";\n    LatticeGetAddressesFlag[LatticeGetAddressesFlag[\"ed25519Pubkey\"] = 4] = \"ed25519Pubkey\";\n    LatticeGetAddressesFlag[LatticeGetAddressesFlag[\"bls12_381Pubkey\"] = 5] = \"bls12_381Pubkey\";\n})(LatticeGetAddressesFlag = exports.LatticeGetAddressesFlag || (exports.LatticeGetAddressesFlag = {}));\nvar LatticeSignSchema;\n(function (LatticeSignSchema) {\n    LatticeSignSchema[LatticeSignSchema[\"bitcoin\"] = 0] = \"bitcoin\";\n    LatticeSignSchema[LatticeSignSchema[\"ethereum\"] = 1] = \"ethereum\";\n    LatticeSignSchema[LatticeSignSchema[\"ethereumMsg\"] = 3] = \"ethereumMsg\";\n    LatticeSignSchema[LatticeSignSchema[\"extraData\"] = 4] = \"extraData\";\n    LatticeSignSchema[LatticeSignSchema[\"generic\"] = 5] = \"generic\";\n})(LatticeSignSchema = exports.LatticeSignSchema || (exports.LatticeSignSchema = {}));\nvar LatticeSignHash;\n(function (LatticeSignHash) {\n    LatticeSignHash[LatticeSignHash[\"none\"] = 0] = \"none\";\n    LatticeSignHash[LatticeSignHash[\"keccak256\"] = 1] = \"keccak256\";\n    LatticeSignHash[LatticeSignHash[\"sha256\"] = 2] = \"sha256\";\n})(LatticeSignHash = exports.LatticeSignHash || (exports.LatticeSignHash = {}));\nvar LatticeSignCurve;\n(function (LatticeSignCurve) {\n    LatticeSignCurve[LatticeSignCurve[\"secp256k1\"] = 0] = \"secp256k1\";\n    LatticeSignCurve[LatticeSignCurve[\"ed25519\"] = 1] = \"ed25519\";\n    LatticeSignCurve[LatticeSignCurve[\"bls12_381\"] = 2] = \"bls12_381\";\n})(LatticeSignCurve = exports.LatticeSignCurve || (exports.LatticeSignCurve = {}));\nvar LatticeSignEncoding;\n(function (LatticeSignEncoding) {\n    LatticeSignEncoding[LatticeSignEncoding[\"none\"] = 1] = \"none\";\n    LatticeSignEncoding[LatticeSignEncoding[\"solana\"] = 2] = \"solana\";\n    LatticeSignEncoding[LatticeSignEncoding[\"evm\"] = 4] = \"evm\";\n    LatticeSignEncoding[LatticeSignEncoding[\"eth_deposit\"] = 5] = \"eth_deposit\";\n})(LatticeSignEncoding = exports.LatticeSignEncoding || (exports.LatticeSignEncoding = {}));\nvar LatticeSignBlsDst;\n(function (LatticeSignBlsDst) {\n    LatticeSignBlsDst[LatticeSignBlsDst[\"NUL\"] = 1] = \"NUL\";\n    LatticeSignBlsDst[LatticeSignBlsDst[\"POP\"] = 2] = \"POP\";\n})(LatticeSignBlsDst = exports.LatticeSignBlsDst || (exports.LatticeSignBlsDst = {}));\nvar LatticeEncDataSchema;\n(function (LatticeEncDataSchema) {\n    LatticeEncDataSchema[LatticeEncDataSchema[\"eip2335\"] = 0] = \"eip2335\";\n})(LatticeEncDataSchema = exports.LatticeEncDataSchema || (exports.LatticeEncDataSchema = {}));\nexports.ProtocolConstants = {\n    // Lattice firmware uses a static initialization vector for\n    // message encryption/decryption. This is generally considered\n    // fine because each encryption/decryption uses a unique encryption\n    // secret (derived from the per-message ephemeral key pair).\n    aesIv: [\n        0x6d, 0x79, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x70, 0x61, 0x73, 0x73,\n        0x77, 0x6f, 0x72, 0x64,\n    ],\n    // Constant size of address buffers from the Lattice.\n    // Note that this size also captures public keys returned\n    // by the Lattice (addresses = strings, pubkeys = buffers)\n    addrStrLen: 129,\n    // Status of the client's pairing with the target Lattice\n    pairingStatus: {\n        notPaired: 0x00,\n        paired: 0x01,\n    },\n    // Response types, codes, and error messages\n    responseMsg: (_a = {},\n        _a[LatticeResponseCode.success] = '',\n        _a[LatticeResponseCode.invalidMsg] = 'Invalid Request',\n        _a[LatticeResponseCode.unsupportedVersion] = 'Unsupported Version',\n        _a[LatticeResponseCode.deviceBusy] = 'Device Busy',\n        _a[LatticeResponseCode.userTimeout] = 'Timeout waiting for user',\n        _a[LatticeResponseCode.userDeclined] = 'Request declined by user',\n        _a[LatticeResponseCode.pairFailed] = 'Pairing failed',\n        _a[LatticeResponseCode.pairDisabled] = 'Pairing is currently disabled',\n        _a[LatticeResponseCode.permissionDisabled] = 'Automated signing is currently disabled',\n        _a[LatticeResponseCode.internalError] = 'Device Error',\n        _a[LatticeResponseCode.gceTimeout] = 'Device Timeout',\n        _a[LatticeResponseCode.wrongWallet] = 'Active wallet does not match request',\n        _a[LatticeResponseCode.deviceLocked] = 'Device Locked',\n        _a[LatticeResponseCode.disabled] = 'Feature Disabled',\n        _a[LatticeResponseCode.already] = 'Record already exists on device',\n        _a[LatticeResponseCode.invalidEphemId] = 'Request failed - needs resync',\n        _a),\n    msgSizes: {\n        // General message header size. Valid for all Lattice messages\n        header: 8,\n        // Checksum must be appended to each message\n        checksum: 4,\n        // Lattice secure message constants. All requests from this SDK\n        // are secure messages.\n        secure: {\n            // Sizes of full payloads for secure messages\n            payload: {\n                request: {\n                    // [ requestType (1 byte) | pubkey (65 bytes) ]\n                    connect: 66,\n                    // [ requestType (1 byte) | ephemeralId (4 bytes) | encryptedData (1728 bytes) ]\n                    encrypted: 1733,\n                },\n                // Note that the response payload always has status code as the\n                // first byte. This byte is removed as part of `request`, inside\n                // `parseLattice1Response`. These constants include the status\n                // code byte.\n                response: {\n                    connect: 215,\n                    // Encrypted responses are as follows:\n                    // encryptedData (1728) | empty (1728)\n                    // The latter half is empty due to an invalid type definition\n                    // in Lattice firmware. (Someone made a C `struct` instead of\n                    // a `union`, oops).\n                    encrypted: 3457,\n                },\n            },\n            // Sizes for data inside secure message payloads\n            data: {\n                // All requests also have a `requestCode`, which is omitted\n                // from these constants.\n                request: {\n                    connect: 65,\n                    encrypted: (_b = {\n                            // All encrypted requests are encrypted into a 1728 byte buffer\n                            encryptedData: 1728\n                        },\n                        // Individual request types have different data sizes.\n                        _b[LatticeSecureEncryptedRequestType.finalizePairing] = 99,\n                        _b[LatticeSecureEncryptedRequestType.getAddresses] = 54,\n                        _b[LatticeSecureEncryptedRequestType.sign] = 1680,\n                        _b[LatticeSecureEncryptedRequestType.getWallets] = 0,\n                        _b[LatticeSecureEncryptedRequestType.getKvRecords] = 9,\n                        _b[LatticeSecureEncryptedRequestType.addKvRecords] = 1391,\n                        _b[LatticeSecureEncryptedRequestType.removeKvRecords] = 405,\n                        _b[LatticeSecureEncryptedRequestType.fetchEncryptedData] = 1025,\n                        _b[LatticeSecureEncryptedRequestType.test] = 506,\n                        _b),\n                },\n                // All responses also have a `responseCode`, which is omitted\n                // from these constants.\n                response: {\n                    encrypted: (_c = {\n                            encryptedData: 1728\n                        },\n                        // Once decrypted, the data size of the response\n                        // payload will be determined by the request type.\n                        // NOTE: All requests also have ephemeralPublicKey (65 bytes) and\n                        // checksum (4 bytes), which are excluded from these sizes.\n                        _c[LatticeSecureEncryptedRequestType.finalizePairing] = 0,\n                        _c[LatticeSecureEncryptedRequestType.getAddresses] = 1290,\n                        _c[LatticeSecureEncryptedRequestType.sign] = 1090,\n                        _c[LatticeSecureEncryptedRequestType.getWallets] = 142,\n                        _c[LatticeSecureEncryptedRequestType.getKvRecords] = 1395,\n                        _c[LatticeSecureEncryptedRequestType.addKvRecords] = 0,\n                        _c[LatticeSecureEncryptedRequestType.removeKvRecords] = 0,\n                        _c[LatticeSecureEncryptedRequestType.fetchEncryptedData] = 1608,\n                        _c[LatticeSecureEncryptedRequestType.test] = 1646,\n                        _c),\n                },\n            },\n        },\n    },\n};\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encryptedSecureRequest = exports.connectSecureRequest = void 0;\n/**\n * All messages sent to the Lattice from this SDK will be\n * \"secure messages\", of which there are two types:\n *\n * 1. Connect requests are *unencrypted* and serve to establish\n *    a connection between the SDK Client instance and the target\n *    Lattice. If the client is already paired to the target Lattice,\n *    the response will indicate that. If the client has never paired\n *    with this Lattice, the Lattice will go into \"pairing mode\" and\n *    will expect a follow up `finalizePairing` request, which is\n *    an encrypted request. This will return an ephemeral public key,\n *    which is used to encrypt the next request.\n * 2. Encrypted requests are *encrypted* (obviously) and from a Lattice\n *    protocol perspective they are all constructed the same way:\n *    create a buffer of `payload` length and fill it with unencrypted\n *    data, then encrypt the entire payload (not just the data you filled)\n *    with the ECDH secret formed from the last ephemeral public key.\n *    The response to this request will contain a new ephemral public\n *    key, which you will need for the next encrypted request.\n */\nvar latticeConstants_1 = require(\"./latticeConstants\");\nvar util_1 = require(\"../util\");\nvar functions_1 = require(\"../shared/functions\");\nvar validators_1 = require(\"../shared/validators\");\nvar msgSizes = latticeConstants_1.ProtocolConstants.msgSizes;\nvar szs = msgSizes.secure;\n/**\n * Build and make a request to connect to a specific Lattice\n * based on its `deviceId`.\n * @param deviceId - Device ID for the target Lattice. Must be in\n *                   the same `client.baseUrl` domain to be found.\n * @return {Buffer} - Connection response payload data, which contains\n *                    information about the connected Lattice.\n */\nfunction connectSecureRequest(_a) {\n    var url = _a.url, pubkey = _a.pubkey;\n    return __awaiter(this, void 0, void 0, function () {\n        var payloadData, msgId, msg, resp;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    payloadData = serializeSecureRequestConnectPayloadData({\n                        pubkey: pubkey,\n                    });\n                    msgId = (0, util_1.randomBytes)(4);\n                    msg = serializeSecureRequestMsg(msgId, latticeConstants_1.LatticeSecureMsgType.connect, payloadData);\n                    return [4 /*yield*/, (0, functions_1.request)({ url: url, payload: msg })];\n                case 1:\n                    resp = _b.sent();\n                    if (resp.length !== szs.payload.response.connect - 1) {\n                        throw new Error('Wrong Lattice response message size.');\n                    }\n                    return [2 /*return*/, resp];\n            }\n        });\n    });\n}\nexports.connectSecureRequest = connectSecureRequest;\n/**\n * Build an encrypted secure request using raw data,\n * then send that request to the target Lattice, handle\n * the response, and return the *decrypted* response\n * payload data.\n * Also updates ephemeral public key in the client.\n * This is a wrapper around several local util functions.\n * @param data - Unencrypted raw calldata for function\n * @param requestType - Type of encrypted reques to make\n * @return {Buffer} Decrypted response data (excluding metadata)\n */\nfunction encryptedSecureRequest(_a) {\n    var data = _a.data, requestType = _a.requestType, sharedSecret = _a.sharedSecret, ephemeralPub = _a.ephemeralPub, url = _a.url;\n    return __awaiter(this, void 0, void 0, function () {\n        var msgId, payloadData, msg, resp, encPayloadData;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    msgId = (0, util_1.randomBytes)(4);\n                    payloadData = serializeSecureRequestEncryptedPayloadData({\n                        data: data,\n                        requestType: requestType,\n                        ephemeralPub: ephemeralPub,\n                        sharedSecret: sharedSecret,\n                    });\n                    msg = serializeSecureRequestMsg(msgId, latticeConstants_1.LatticeSecureMsgType.encrypted, payloadData);\n                    return [4 /*yield*/, (0, functions_1.request)({\n                            url: url,\n                            payload: msg,\n                        })];\n                case 1:\n                    resp = _b.sent();\n                    // Deserialize the response payload data\n                    if (resp.length !== szs.payload.response.encrypted - 1) {\n                        throw new Error('Wrong Lattice response message size.');\n                    }\n                    encPayloadData = resp.slice(0, szs.data.response.encrypted.encryptedData);\n                    // Return decrypted response payload data\n                    return [2 /*return*/, decryptEncryptedLatticeResponseData({\n                            encPayloadData: encPayloadData,\n                            requestType: requestType,\n                            sharedSecret: sharedSecret,\n                        })];\n            }\n        });\n    });\n}\nexports.encryptedSecureRequest = encryptedSecureRequest;\n/**\n * @internal\n * Serialize a Secure Request message for the Lattice.\n * All outgoing SDK requests are of this form.\n * @param msgId - Random 4 bytes of data for internally tracking this message\n * @param secureRequestType - 0x01 for connect, 0x02 for encrypted\n * @param payloadData - Request data\n * @return {Buffer} Serialized message to be sent to Lattice\n */\nfunction serializeSecureRequestMsg(msgId, secureRequestType, payloadData) {\n    // Sanity check request data\n    if (msgId.length !== 4) {\n        throw new Error('msgId must be four bytes');\n    }\n    if (secureRequestType !== latticeConstants_1.LatticeSecureMsgType.connect &&\n        secureRequestType !== latticeConstants_1.LatticeSecureMsgType.encrypted) {\n        throw new Error('Invalid Lattice secure request type');\n    }\n    // Validate the incoming payload data size. Note that the payload\n    // data is prepended with a secure request type byte, so the\n    // payload data size is one less than the expected size.\n    var isValidConnectPayloadDataSz = secureRequestType === latticeConstants_1.LatticeSecureMsgType.connect &&\n        payloadData.length === szs.payload.request.connect - 1;\n    var isValidEncryptedPayloadDataSz = secureRequestType === latticeConstants_1.LatticeSecureMsgType.encrypted &&\n        payloadData.length === szs.payload.request.encrypted - 1;\n    // Build payload and size\n    var msgSz = msgSizes.header + msgSizes.checksum;\n    var payloadLen;\n    var payload = {\n        requestType: secureRequestType,\n        data: payloadData,\n    };\n    if (isValidConnectPayloadDataSz) {\n        payloadLen = szs.payload.request.connect;\n    }\n    else if (isValidEncryptedPayloadDataSz) {\n        payloadLen = szs.payload.request.encrypted;\n    }\n    else {\n        throw new Error('Invalid Lattice secure request payload size');\n    }\n    msgSz += payloadLen;\n    // Construct the request in object form\n    var header = {\n        version: latticeConstants_1.LatticeProtocolVersion.v1,\n        type: latticeConstants_1.LatticeMsgType.secure,\n        id: msgId,\n        len: payloadLen,\n    };\n    var req = {\n        header: header,\n        payload: payload,\n    };\n    // Now serialize the whole message\n    // Header | requestType | payloadData | checksum\n    var msg = Buffer.alloc(msgSz);\n    var off = 0;\n    // Header\n    msg.writeUInt8(req.header.version, off);\n    off += 1;\n    msg.writeUInt8(req.header.type, off);\n    off += 1;\n    req.header.id.copy(msg, off);\n    off += req.header.id.length;\n    msg.writeUInt16BE(req.header.len, off);\n    off += 2;\n    // Payload\n    msg.writeUInt8(req.payload.requestType, off);\n    off += 1;\n    req.payload.data.copy(msg, off);\n    off += req.payload.data.length;\n    // Checksum\n    msg.writeUInt32BE((0, util_1.checksum)(msg.slice(0, off)), off);\n    off += 4;\n    if (off !== msgSz) {\n        throw new Error('Failed to build request message');\n    }\n    // We have our serialized secure message!\n    return msg;\n}\n/**\n * @internal\n * Serialize payload data for a Lattice secure request: connect\n * @return {Buffer} - 1700 bytes, of which only 65 are used\n */\nfunction serializeSecureRequestConnectPayloadData(payloadData) {\n    var serPayloadData = Buffer.alloc(szs.data.request.connect);\n    payloadData.pubkey.copy(serPayloadData, 0);\n    return serPayloadData;\n}\n/**\n * @internal\n * Serialize payload data for Lattice secure request: encrypted\n * @param data - Raw (unencrypted) request data\n * @return {Buffer} - 1700 bytes, all of which should be used\n */\nfunction serializeSecureRequestEncryptedPayloadData(_a) {\n    var data = _a.data, requestType = _a.requestType, ephemeralPub = _a.ephemeralPub, sharedSecret = _a.sharedSecret;\n    // Sanity checks request size\n    if (data.length > szs.data.request.encrypted.encryptedData) {\n        throw new Error('Encrypted request data too large');\n    }\n    // Make sure we have a shared secret. An error will be thrown\n    // if there is no ephemeral pub, indicating we need to reconnect.\n    (0, validators_1.validateEphemeralPub)(ephemeralPub);\n    // Validate the request data size matches the desired request\n    var requestDataSize = szs.data.request.encrypted[requestType];\n    if (data.length !== requestDataSize) {\n        throw new Error(\"Invalid request datasize (wanted \".concat(requestDataSize, \", got \").concat(data.length, \")\"));\n    }\n    // Build the pre-encrypted data payload, which variable sized and of form:\n    // encryptedRequestType | data | checksum\n    var preEncryptedData = Buffer.alloc(1 + requestDataSize);\n    preEncryptedData[0] = requestType;\n    data.copy(preEncryptedData, 1);\n    var preEncryptedDataChecksum = (0, util_1.checksum)(preEncryptedData);\n    // Encrypt the data into a fixed size buffer. The buffer size should\n    // equal to the full message request less the 4-byte ephemeral id.\n    var _encryptedData = Buffer.alloc(szs.data.request.encrypted.encryptedData);\n    preEncryptedData.copy(_encryptedData, 0);\n    _encryptedData.writeUInt32LE(preEncryptedDataChecksum, preEncryptedData.length);\n    var encryptedData = (0, util_1.aes256_encrypt)(_encryptedData, sharedSecret);\n    // Calculate ephemeral ID\n    var ephemeralId = (0, functions_1.getEphemeralId)(sharedSecret);\n    // Now we will serialize the payload data.\n    var serPayloadData = Buffer.alloc(szs.payload.request.encrypted - 1);\n    serPayloadData.writeUInt32LE(ephemeralId);\n    encryptedData.copy(serPayloadData, 4);\n    return serPayloadData;\n}\n/**\n * @internal\n * Decrypt the response data from an encrypted request.\n * @param encPayloadData - Encrypted payload data in response\n * @return {Buffer} Decrypted response data (excluding metadata)\n */\nfunction decryptEncryptedLatticeResponseData(_a) {\n    var encPayloadData = _a.encPayloadData, requestType = _a.requestType, sharedSecret = _a.sharedSecret;\n    // Decrypt data using the *current* shared secret\n    var decData = (0, util_1.aes256_decrypt)(encPayloadData, sharedSecret);\n    // Bulid the object\n    var ephemeralPubSz = 65; // secp256r1 pubkey\n    var checksumOffset = ephemeralPubSz + szs.data.response.encrypted[requestType];\n    var respData = {\n        ephemeralPub: decData.slice(0, ephemeralPubSz),\n        data: decData.slice(ephemeralPubSz, checksumOffset),\n        checksum: decData.readUInt32BE(checksumOffset),\n    };\n    // Validate the checksum\n    var validChecksum = (0, util_1.checksum)(decData.slice(0, checksumOffset));\n    if (respData.checksum !== validChecksum) {\n        throw new Error('Checksum mismatch in decrypted Lattice data');\n    }\n    // Validate the response data size\n    var validSz = szs.data.response.encrypted[requestType];\n    if (respData.data.length !== validSz) {\n        throw new Error('Incorrect response data returned from Lattice');\n    }\n    var newEphemeralPub = (0, util_1.getP256KeyPairFromPub)(respData.ephemeralPub);\n    // Returned the decrypted data\n    return { decryptedData: respData.data, newEphemeralPub: newEphemeralPub };\n}\n","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LatticeResponseError = void 0;\nvar protocol_1 = require(\"../protocol\");\nvar buildLatticeResponseErrorMessage = function (_a) {\n    var responseCode = _a.responseCode, errorMessage = _a.errorMessage;\n    var msg = [];\n    if (responseCode) {\n        msg.push(\"\".concat(protocol_1.ProtocolConstants.responseMsg[responseCode]));\n    }\n    if (errorMessage) {\n        msg.push('Error Message: ');\n        msg.push(errorMessage);\n    }\n    return msg.join('\\n');\n};\nvar LatticeResponseError = /** @class */ (function (_super) {\n    __extends(LatticeResponseError, _super);\n    function LatticeResponseError(responseCode, errorMessage) {\n        var _this = this;\n        var message = buildLatticeResponseErrorMessage({\n            responseCode: responseCode,\n            errorMessage: errorMessage,\n        });\n        _this = _super.call(this, message) || this;\n        _this.responseCode = responseCode;\n        _this.errorMessage = errorMessage;\n        _this.name = 'LatticeResponseError';\n        _this.responseCode = responseCode;\n        _this.errorMessage = errorMessage;\n        return _this;\n    }\n    return LatticeResponseError;\n}(Error));\nexports.LatticeResponseError = LatticeResponseError;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEphemeralId = exports.retryWrapper = exports.buildRetryWrapper = exports.request = exports.buildTransaction = void 0;\nvar sha_1 = require(\"hash.js/lib/hash/sha\");\nvar bitcoin_1 = __importDefault(require(\"../bitcoin\"));\nvar constants_1 = require(\"../constants\");\nvar ethereum_1 = __importDefault(require(\"../ethereum\"));\nvar genericSigning_1 = require(\"../genericSigning\");\nvar util_1 = require(\"../util\");\nvar errors_1 = require(\"./errors\");\nvar predicates_1 = require(\"./predicates\");\nvar validators_1 = require(\"./validators\");\nvar buildTransaction = function (_a) {\n    // All transaction requests must be put into the same sized buffer. This comes from\n    // sizeof(GpTransactionRequest_t), but note we remove the 2-byte schemaId since it is not\n    // returned from our resolver. Note that different firmware versions may have different data\n    // sizes.\n    var data = _a.data, currency = _a.currency, fwConstants = _a.fwConstants;\n    // TEMPORARY BRIDGE -- DEPRECATE ME In v0.15.0 Lattice firmware removed the legacy ETH\n    // signing path, so we need to convert such requests to general signing requests using the\n    // EVM decoder. NOTE: Not every request can be converted, so users should switch to using\n    // general signing requests for newer firmware versions. EIP1559 and EIP155 legacy\n    // requests will convert, but others may not.\n    if (currency === 'ETH' && (0, predicates_1.shouldUseEVMLegacyConverter)(fwConstants)) {\n        console.log('Using the legacy ETH signing path. This will soon be deprecated. ' +\n            'Please switch to general signing request.');\n        var payload = void 0;\n        try {\n            payload = ethereum_1.default.ethConvertLegacyToGenericReq(data);\n        }\n        catch (err) {\n            throw new Error('Could not convert legacy request. Please switch to a general signing ' +\n                'request. See gridplus-sdk docs for more information.');\n        }\n        data = {\n            fwConstants: fwConstants,\n            encodingType: constants_1.EXTERNAL.SIGNING.ENCODINGS.EVM,\n            curveType: constants_1.EXTERNAL.SIGNING.CURVES.SECP256K1,\n            hashType: constants_1.EXTERNAL.SIGNING.HASHES.KECCAK256,\n            signerPath: data.signerPath,\n            payload: payload,\n        };\n        return {\n            requestData: (0, genericSigning_1.buildGenericSigningMsgRequest)(__assign(__assign({}, data), { fwConstants: fwConstants })),\n            isGeneric: true,\n        };\n    }\n    else if (currency === 'ETH') {\n        // Legacy signing pathway -- should deprecate in the future\n        return {\n            requestData: ethereum_1.default.buildEthereumTxRequest(__assign(__assign({}, data), { fwConstants: fwConstants })),\n            isGeneric: false,\n        };\n    }\n    else if (currency === 'ETH_MSG') {\n        return {\n            requestData: ethereum_1.default.buildEthereumMsgRequest(__assign(__assign({}, data), { fwConstants: fwConstants })),\n            isGeneric: false,\n        };\n    }\n    else if (currency === 'BTC') {\n        return {\n            requestData: bitcoin_1.default.buildBitcoinTxRequest(__assign(__assign({}, data), { fwConstants: fwConstants })),\n            isGeneric: false,\n        };\n    }\n    return {\n        requestData: (0, genericSigning_1.buildGenericSigningMsgRequest)(__assign(__assign({}, data), { fwConstants: fwConstants })),\n        isGeneric: true,\n    };\n};\nexports.buildTransaction = buildTransaction;\nvar request = function (_a) {\n    var url = _a.url, payload = _a.payload, _b = _a.timeout, timeout = _b === void 0 ? 60000 : _b;\n    return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_c) {\n            return [2 /*return*/, (0, util_1.fetchWithTimeout)(url, {\n                    method: 'POST',\n                    body: JSON.stringify({ data: payload }),\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    timeout: timeout,\n                })\n                    .catch(validators_1.validateRequestError)\n                    .then(function (res) { return res.json(); })\n                    .then(function (body) {\n                    // Handle formatting or generic HTTP errors\n                    if (!body || !body.message) {\n                        throw new Error('Invalid response');\n                    }\n                    else if (body.status !== 200) {\n                        throw new Error(\"Error code \".concat(body.status, \": \").concat(body.message));\n                    }\n                    var _a = (0, util_1.parseLattice1Response)(body.message), data = _a.data, errorMessage = _a.errorMessage, responseCode = _a.responseCode;\n                    if (errorMessage || responseCode) {\n                        throw new errors_1.LatticeResponseError(responseCode, errorMessage);\n                    }\n                    return data;\n                })];\n        });\n    });\n};\nexports.request = request;\n/**\n * `sleep()` returns a Promise that resolves after a given number of milliseconds.\n */\nfunction sleep(ms) {\n    return new Promise(function (resolve) { return setTimeout(resolve, ms); });\n}\n/**\n * Takes a function and a set of parameters, and returns a function that will retry the original\n * function with the given parameters a number of times\n *\n * @param client - a {@link Client} instance that is passed to the {@link retryWrapper}\n * @param retries - the number of times to retry the function before giving up\n * @returns a {@link retryWrapper} function for handing retry logic\n */\nvar buildRetryWrapper = function (client, retries) {\n    return function (fn, params) {\n        return (0, exports.retryWrapper)({\n            fn: fn,\n            params: __assign(__assign({}, params), { client: client }),\n            retries: retries,\n            client: client,\n        });\n    };\n};\nexports.buildRetryWrapper = buildRetryWrapper;\n/**\n * Retries a function call if the error message or response code is present and the number of\n * retries is greater than 0.\n *\n * @param fn - The function to retry\n * @param params - The parameters to pass to the function\n * @param retries - The number of times to retry the function\n * @param client - The {@link Client} to use for side-effects\n */\nvar retryWrapper = function (_a) {\n    var fn = _a.fn, params = _a.params, retries = _a.retries, client = _a.client;\n    return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_b) {\n            return [2 /*return*/, fn(__assign({}, params)).catch(function (err) { return __awaiter(void 0, void 0, void 0, function () {\n                    var errorMessage, responseCode;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                errorMessage = err.errorMessage;\n                                responseCode = err.responseCode;\n                                if (!((errorMessage || responseCode) && retries)) return [3 /*break*/, 8];\n                                if (!(0, predicates_1.isDeviceBusy)(responseCode)) return [3 /*break*/, 2];\n                                return [4 /*yield*/, sleep(3000)];\n                            case 1:\n                                _a.sent();\n                                return [3 /*break*/, 7];\n                            case 2:\n                                if (!((0, predicates_1.isWrongWallet)(responseCode) &&\n                                    !client.skipRetryOnWrongWallet)) return [3 /*break*/, 4];\n                                return [4 /*yield*/, client.fetchActiveWallet()];\n                            case 3:\n                                _a.sent();\n                                return [3 /*break*/, 7];\n                            case 4:\n                                if (!(0, predicates_1.isInvalidEphemeralId)(responseCode)) return [3 /*break*/, 6];\n                                return [4 /*yield*/, client.connect(client.deviceId)];\n                            case 5:\n                                _a.sent();\n                                return [3 /*break*/, 7];\n                            case 6: throw err;\n                            case 7: return [2 /*return*/, (0, exports.retryWrapper)({\n                                    fn: fn,\n                                    params: params,\n                                    retries: retries - 1,\n                                    client: client,\n                                })];\n                            case 8: throw err;\n                        }\n                    });\n                }); })];\n        });\n    });\n};\nexports.retryWrapper = retryWrapper;\n/**\n * Get the ephemeral id, which is the first 4 bytes of the shared secret generated from the local\n * private key and the ephemeral public key from the device.\n * @internal\n * @returns Buffer\n */\nvar getEphemeralId = function (sharedSecret) {\n    // EphemId is the first 4 bytes of the hash of the shared secret\n    var hash = Buffer.from((0, sha_1.sha256)().update(sharedSecret).digest('hex'), 'hex');\n    return parseInt(hash.slice(0, 4).toString('hex'), 16);\n};\nexports.getEphemeralId = getEphemeralId;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shouldUseEVMLegacyConverter = exports.doesFetchWalletsOnLoad = exports.isInvalidEphemeralId = exports.isWrongWallet = exports.isDeviceBusy = void 0;\nvar protocol_1 = require(\"../protocol\");\nvar utilities_1 = require(\"./utilities\");\nvar isDeviceBusy = function (responseCode) {\n    return responseCode === protocol_1.LatticeResponseCode.deviceBusy ||\n        responseCode === protocol_1.LatticeResponseCode.gceTimeout;\n};\nexports.isDeviceBusy = isDeviceBusy;\nvar isWrongWallet = function (responseCode) {\n    return responseCode === protocol_1.LatticeResponseCode.wrongWallet;\n};\nexports.isWrongWallet = isWrongWallet;\nvar isInvalidEphemeralId = function (responseCode) {\n    return responseCode === protocol_1.LatticeResponseCode.invalidEphemId;\n};\nexports.isInvalidEphemeralId = isInvalidEphemeralId;\nvar doesFetchWalletsOnLoad = function (fwVersion) {\n    return (0, utilities_1.isFWSupported)(fwVersion, { major: 0, minor: 14, fix: 1 });\n};\nexports.doesFetchWalletsOnLoad = doesFetchWalletsOnLoad;\nvar shouldUseEVMLegacyConverter = function (fwConstants) {\n    return fwConstants.genericSigning &&\n        fwConstants.genericSigning.encodingTypes &&\n        fwConstants.genericSigning.encodingTypes.EVM;\n};\nexports.shouldUseEVMLegacyConverter = shouldUseEVMLegacyConverter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPathStr = exports.isFWSupported = exports.parseWallets = exports.getSharedSecret = exports.getPubKeyBytes = void 0;\nvar constants_1 = require(\"../constants\");\n/**\n * Get 64 bytes representing the public key This is the uncompressed key without the leading 04\n * byte\n * @param KeyPair - //TODO Describe the keypair\n * @param LE - Whether to return the public key in little endian format.\n * @returns A Buffer containing the public key.\n */\nvar getPubKeyBytes = function (key, LE) {\n    if (LE === void 0) { LE = false; }\n    var k = key.getPublic();\n    var p = k.encode('hex');\n    var pb = Buffer.from(p, 'hex');\n    if (LE === true) {\n        // Need to flip X and Y components to little endian\n        var x = pb.slice(1, 33).reverse();\n        var y = pb.slice(33, 65).reverse();\n        // @ts-expect-error - TODO: Find out why Buffer won't accept pb[0]\n        return Buffer.concat([pb[0], x, y]);\n    }\n    else {\n        return pb;\n    }\n};\nexports.getPubKeyBytes = getPubKeyBytes;\n/**\n * Get the shared secret, derived via ECDH from the local private key and the ephemeral public key\n * @internal\n * @returns Buffer\n */\nvar getSharedSecret = function (key, ephemeralPub) {\n    // Once every ~256 attempts, we will get a key that starts with a `00` byte, which can lead to\n    // problems initializing AES if we don't force a 32 byte BE buffer.\n    return Buffer.from(key.derive(ephemeralPub.getPublic()).toArray('be', 32));\n};\nexports.getSharedSecret = getSharedSecret;\n// Given a set of wallet data, which contains two wallet descriptors, parse the data and save it\n// to memory\nvar parseWallets = function (walletData) {\n    // Read the external wallet data first. If it is non-null, the external wallet will be the\n    // active wallet of the device and we should save it. If the external wallet is blank, it means\n    // there is no card present and we should save and use the interal wallet. If both wallets are\n    // empty, it means the device still needs to be set up.\n    var walletDescriptorLen = 71;\n    // Internal first\n    var off = 0;\n    var activeWallets = {\n        internal: {\n            uid: undefined,\n            capabilities: undefined,\n            name: undefined,\n            external: false,\n        },\n        external: {\n            uid: undefined,\n            capabilities: undefined,\n            name: undefined,\n            external: true,\n        },\n    };\n    activeWallets.internal.uid = walletData.slice(off, off + 32);\n    // NOTE: `capabilities` and `name` were deprecated in Lattice firmware.\n    // They never provided any real information, but have been archived here\n    // since the response size has been preserved and we may bring them back\n    // in a different form.\n    // activeWallets.internal.capabilities = walletData.readUInt32BE(off + 32);\n    // activeWallets.internal.name = walletData.slice(\n    // off + 36,\n    // off + walletDescriptorLen,\n    // );\n    // Offset the first item\n    off += walletDescriptorLen;\n    // External\n    activeWallets.external.uid = walletData.slice(off, off + 32);\n    // activeWallets.external.capabilities = walletData.readUInt32BE(off + 32);\n    // activeWallets.external.name = walletData.slice(\n    // off + 36,\n    // off + walletDescriptorLen,\n    // );\n    return activeWallets;\n};\nexports.parseWallets = parseWallets;\n// Determine if a provided firmware version matches or exceeds the current firmware version\nvar isFWSupported = function (fwVersion, versionSupported) {\n    var major = fwVersion.major, minor = fwVersion.minor, fix = fwVersion.fix;\n    var _major = versionSupported.major, _minor = versionSupported.minor, _fix = versionSupported.fix;\n    return (major > _major ||\n        (major >= _major && minor > _minor) ||\n        (major >= _major && minor >= _minor && fix >= _fix));\n};\nexports.isFWSupported = isFWSupported;\n/**\n * Convert a set of BIP39 path indices to a string\n * @param path - Set of indices\n */\nvar getPathStr = function (path) {\n    var pathStr = 'm';\n    path.forEach(function (idx) {\n        if (idx >= constants_1.HARDENED_OFFSET) {\n            pathStr += \"/\".concat(idx - constants_1.HARDENED_OFFSET, \"'\");\n        }\n        else {\n            pathStr += \"/\".concat(idx);\n        }\n    });\n    return pathStr;\n};\nexports.getPathStr = getPathStr;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isValid4ByteResponse = exports.isValidBlockExplorerResponse = exports.validateKvRecord = exports.validateKvRecords = exports.validateActiveWallets = exports.validateKey = exports.validateSharedSecret = exports.validateEphemeralPub = exports.validateConnectedClient = exports.validateWallet = exports.validateRequestError = exports.validateFwVersion = exports.validateFwConstants = exports.validateBaseUrl = exports.validateUrl = exports.validateAppName = exports.validateDeviceId = exports.validateStartPath = exports.validateNAddresses = exports.validateIsUInt4 = void 0;\nvar constants_1 = require(\"../constants\");\nvar util_1 = require(\"../util\");\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nvar validateIsUInt4 = function (n) {\n    if (typeof n !== 'number' || !(0, util_1.isUInt4)(n)) {\n        throw new Error('Must be an integer between 0 and 15 inclusive');\n    }\n    return n;\n};\nexports.validateIsUInt4 = validateIsUInt4;\nvar validateNAddresses = function (n) {\n    if (!n) {\n        throw new Error('The number of addresses is required.');\n    }\n    if (n > constants_1.MAX_ADDR) {\n        throw new Error(\"You may only request \".concat(constants_1.MAX_ADDR, \" addresses at once.\"));\n    }\n    return n;\n};\nexports.validateNAddresses = validateNAddresses;\nvar validateStartPath = function (startPath) {\n    if (!startPath) {\n        throw new Error('Start path is required');\n    }\n    if (startPath.length < 1 || startPath.length > 5)\n        throw new Error('Path must include between 1 and 5 indices');\n    return startPath;\n};\nexports.validateStartPath = validateStartPath;\nvar validateDeviceId = function (deviceId) {\n    if (!deviceId) {\n        throw new Error('No device ID has been stored. Please connect with your device ID first.');\n    }\n    return deviceId;\n};\nexports.validateDeviceId = validateDeviceId;\nvar validateAppName = function (name) {\n    if (!name) {\n        throw new Error('Name is required.');\n    }\n    if (name.length < 5 || name.length > 24) {\n        throw new Error('Invalid length for name provided. Must be 5-24 characters.');\n    }\n    return name;\n};\nexports.validateAppName = validateAppName;\nvar validateUrl = function (url) {\n    if (!url) {\n        throw new Error('URL does not exist. Please reconnect.');\n    }\n    try {\n        new URL(url);\n    }\n    catch (err) {\n        throw new Error('Invalid URL provided. Please use a valid URL.');\n    }\n    return url;\n};\nexports.validateUrl = validateUrl;\nvar validateBaseUrl = function (baseUrl) {\n    if (!baseUrl) {\n        throw new Error('Base URL is required.');\n    }\n    try {\n        new URL(baseUrl);\n    }\n    catch (err) {\n        throw new Error('Invalid Base URL provided. Please use a valid URL.');\n    }\n    return baseUrl;\n};\nexports.validateBaseUrl = validateBaseUrl;\nvar validateFwConstants = function (fwConstants) {\n    if (!fwConstants) {\n        throw new Error('Firmware constants do not exist. Please reconnect.');\n    }\n    return fwConstants;\n};\nexports.validateFwConstants = validateFwConstants;\nvar validateFwVersion = function (fwVersion) {\n    if (!fwVersion) {\n        throw new Error('Firmware version does not exist. Please reconnect.');\n    }\n    if (typeof fwVersion.fix !== 'number' ||\n        typeof fwVersion.minor !== 'number' ||\n        typeof fwVersion.major !== 'number') {\n        throw new Error('Firmware version improperly formatted. Please reconnect.');\n    }\n    return fwVersion;\n};\nexports.validateFwVersion = validateFwVersion;\nvar validateRequestError = function (err) {\n    var isTimeout = err.code === 'ECONNABORTED' && err.errno === 'ETIME';\n    if (isTimeout) {\n        throw new Error('Timeout waiting for device. Please ensure it is connected to the internet and try again in a minute.');\n    }\n    throw new Error(\"Failed to make request to device:\\n\".concat(err.message));\n};\nexports.validateRequestError = validateRequestError;\nvar validateWallet = function (wallet) {\n    if (!wallet || wallet === null) {\n        throw new Error('No active wallet.');\n    }\n    return wallet;\n};\nexports.validateWallet = validateWallet;\nvar validateConnectedClient = function (client) {\n    var appName = (0, exports.validateAppName)(client.getAppName());\n    var ephemeralPub = (0, exports.validateEphemeralPub)(client.ephemeralPub);\n    var sharedSecret = (0, exports.validateSharedSecret)(client.sharedSecret);\n    var url = (0, exports.validateUrl)(client.url);\n    var fwConstants = (0, exports.validateFwConstants)(client.getFwConstants());\n    var fwVersion = (0, exports.validateFwVersion)(client.getFwVersion());\n    // @ts-expect-error - Key is private\n    var key = (0, exports.validateKey)(client.key);\n    return {\n        appName: appName,\n        ephemeralPub: ephemeralPub,\n        sharedSecret: sharedSecret,\n        url: url,\n        fwConstants: fwConstants,\n        fwVersion: fwVersion,\n        key: key,\n    };\n};\nexports.validateConnectedClient = validateConnectedClient;\nvar validateEphemeralPub = function (ephemeralPub) {\n    if (!ephemeralPub) {\n        throw new Error('`ephemeralPub` (ephemeral public key) is required. Please reconnect.');\n    }\n    return ephemeralPub;\n};\nexports.validateEphemeralPub = validateEphemeralPub;\nvar validateSharedSecret = function (sharedSecret) {\n    if (!sharedSecret) {\n        throw new Error('Shared secret required. Please reconnect.');\n    }\n    return sharedSecret;\n};\nexports.validateSharedSecret = validateSharedSecret;\nvar validateKey = function (key) {\n    if (!key) {\n        throw new Error('Key is required. Please reconnect.');\n    }\n    return key;\n};\nexports.validateKey = validateKey;\nvar validateActiveWallets = function (activeWallets) {\n    var _a, _b, _c, _d;\n    if (!activeWallets ||\n        (((_b = (_a = activeWallets === null || activeWallets === void 0 ? void 0 : activeWallets.internal) === null || _a === void 0 ? void 0 : _a.uid) === null || _b === void 0 ? void 0 : _b.equals(constants_1.EMPTY_WALLET_UID)) &&\n            ((_d = (_c = activeWallets === null || activeWallets === void 0 ? void 0 : activeWallets.external) === null || _c === void 0 ? void 0 : _c.uid) === null || _d === void 0 ? void 0 : _d.equals(constants_1.EMPTY_WALLET_UID)))) {\n        throw new Error('No active wallet.');\n    }\n    return activeWallets;\n};\nexports.validateActiveWallets = validateActiveWallets;\nvar validateKvRecords = function (records, fwConstants) {\n    if (!fwConstants || !fwConstants.kvActionsAllowed) {\n        throw new Error('Unsupported. Please update firmware.');\n    }\n    else if (typeof records !== 'object' || Object.keys(records).length < 1) {\n        throw new Error('One or more key-value mapping must be provided in `records` param.');\n    }\n    else if (Object.keys(records).length > fwConstants.kvActionMaxNum) {\n        throw new Error(\"Too many keys provided. Please only provide up to \".concat(fwConstants.kvActionMaxNum, \".\"));\n    }\n    return records;\n};\nexports.validateKvRecords = validateKvRecords;\nvar validateKvRecord = function (_a, fwConstants) {\n    var key = _a.key, val = _a.val;\n    if (typeof key !== 'string' ||\n        String(key).length > fwConstants.kvKeyMaxStrSz) {\n        throw new Error(\"Key \".concat(key, \" too large. Must be <=\").concat(fwConstants.kvKeyMaxStrSz, \" characters.\"));\n    }\n    else if (typeof val !== 'string' ||\n        String(val).length > fwConstants.kvValMaxStrSz) {\n        throw new Error(\"Value \".concat(val, \" too large. Must be <=\").concat(fwConstants.kvValMaxStrSz, \" characters.\"));\n    }\n    else if (String(key).length === 0 || String(val).length === 0) {\n        throw new Error('Keys and values must be >0 characters.');\n    }\n    else if (!constants_1.ASCII_REGEX.test(key) || !constants_1.ASCII_REGEX.test(val)) {\n        throw new Error('Unicode characters are not supported.');\n    }\n    return { key: key, val: val };\n};\nexports.validateKvRecord = validateKvRecord;\nvar isValidBlockExplorerResponse = function (data) {\n    try {\n        var result = JSON.parse(data.result);\n        return !(0, isEmpty_1.default)(result);\n    }\n    catch (err) {\n        return false;\n    }\n};\nexports.isValidBlockExplorerResponse = isValidBlockExplorerResponse;\nvar isValid4ByteResponse = function (data) {\n    try {\n        return !(0, isEmpty_1.default)(data.results);\n    }\n    catch (err) {\n        return false;\n    }\n};\nexports.isValid4ByteResponse = isValid4ByteResponse;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EXTERNAL = exports.getV = exports.generateAppSecret = exports.fetchCalldataDecoder = exports.fetchWithTimeout = exports.selectDefFrom4byteABI = exports.isUInt4 = exports.randomBytes = exports.existsIn = exports.isAsciiStr = exports.buildSignerPathBuf = exports.getP256KeyPairFromPub = exports.getP256KeyPair = exports.parseDER = exports.aes256_decrypt = exports.aes256_encrypt = exports.fixLen = exports.ensureHexBuffer = exports.splitFrames = exports.isValidAssetPath = exports.toPaddedDER = exports.checksum = exports.parseLattice1Response = void 0;\n// Static utility functions\nvar tx_1 = require(\"@ethereumjs/tx\");\nvar aes_js_1 = __importDefault(require(\"aes-js\"));\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar bn_js_1 = require(\"bn.js\");\nvar crc_32_1 = __importDefault(require(\"crc-32\"));\nvar elliptic_1 = __importDefault(require(\"elliptic\"));\nvar sha_1 = require(\"hash.js/lib/hash/sha\");\nvar js_sha3_1 = require(\"js-sha3\");\nvar inRange_1 = __importDefault(require(\"lodash/inRange\"));\nvar isInteger_1 = __importDefault(require(\"lodash/isInteger\"));\nvar rlp_1 = require(\"rlp\");\nvar secp256k1_1 = require(\"secp256k1\");\nvar _1 = require(\".\");\nvar constants_1 = require(\"./constants\");\nvar protocol_1 = require(\"./protocol\");\nvar validators_1 = require(\"./shared/validators\");\nvar COINS = constants_1.BIP_CONSTANTS.COINS, PURPOSES = constants_1.BIP_CONSTANTS.PURPOSES;\nvar EC = elliptic_1.default.ec;\nvar ec;\n//--------------------------------------------------\n// LATTICE UTILS\n//--------------------------------------------------\n/** @internal Parse a response from the Lattice1 */\nvar parseLattice1Response = function (r) {\n    var parsed = {\n        errorMessage: null,\n        data: null,\n    };\n    var b = Buffer.from(r, 'hex');\n    var off = 0;\n    // Get protocol version\n    var protoVer = b.readUInt8(off);\n    off++;\n    if (protoVer !== constants_1.VERSION_BYTE) {\n        parsed.errorMessage = 'Incorrect protocol version. Please update your SDK';\n        return parsed;\n    }\n    // Get the type of response\n    // Should always be 0x00\n    var msgType = b.readUInt8(off);\n    off++;\n    if (msgType !== 0x00) {\n        parsed.errorMessage = 'Incorrect response from Lattice1';\n        return parsed;\n    }\n    // Get the payload\n    b.readUInt32BE(off);\n    off += 4; // First 4 bytes is the id, but we don't need that anymore\n    var len = b.readUInt16BE(off);\n    off += 2;\n    var payload = b.slice(off, off + len);\n    off += len;\n    // Get response code\n    var responseCode = payload.readUInt8(0);\n    if (responseCode !== protocol_1.LatticeResponseCode.success) {\n        var errMsg = protocol_1.ProtocolConstants.responseMsg[responseCode];\n        parsed.errorMessage = \"[Lattice] \".concat(errMsg ? errMsg : 'Unknown Error');\n        parsed.responseCode = responseCode;\n        return parsed;\n    }\n    else {\n        parsed.data = payload.slice(1, payload.length);\n    }\n    // Verify checksum\n    var cs = b.readUInt32BE(off);\n    var expectedCs = (0, exports.checksum)(b.slice(0, b.length - 4));\n    if (cs !== expectedCs) {\n        parsed.errorMessage = 'Invalid checksum from device response';\n        parsed.data = null;\n        return parsed;\n    }\n    return parsed;\n};\nexports.parseLattice1Response = parseLattice1Response;\n/** @internal */\nvar checksum = function (x) {\n    // crc32 returns a signed integer - need to cast it to unsigned\n    // Note that this uses the default 0xedb88320 polynomial\n    return crc_32_1.default.buf(x) >>> 0; // Need this to be a uint, hence the bit shift\n};\nexports.checksum = checksum;\n// Get a 74-byte padded DER-encoded signature buffer\n// `sig` must be the signature output from elliptic.js\n/** @internal */\nvar toPaddedDER = function (sig) {\n    // We use 74 as the maximum length of a DER signature. All sigs must\n    // be right-padded with zeros so that this can be a fixed size field\n    var b = Buffer.alloc(74);\n    var ds = Buffer.from(sig.toDER());\n    ds.copy(b);\n    return b;\n};\nexports.toPaddedDER = toPaddedDER;\n//--------------------------------------------------\n// TRANSACTION UTILS\n//--------------------------------------------------\n/** @internal */\nvar isValidAssetPath = function (path, fwConstants) {\n    var allowedPurposes = [\n        PURPOSES.ETH,\n        PURPOSES.BTC_LEGACY,\n        PURPOSES.BTC_WRAPPED_SEGWIT,\n        PURPOSES.BTC_SEGWIT,\n    ];\n    var allowedCoins = [COINS.ETH, COINS.BTC, COINS.BTC_TESTNET];\n    // These coin types were given to us by MyCrypto. They should be allowed, but we expect\n    // an Ethereum-type address with these coin types.\n    // These all use SLIP44: https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n    var allowedMyCryptoCoins = [\n        60, 61, 966, 700, 9006, 9000, 1007, 553, 178, 137, 37310, 108, 40, 889,\n        1987, 820, 6060, 1620, 1313114, 76, 246529, 246785, 1001, 227, 916, 464,\n        2221, 344, 73799, 246,\n    ];\n    // Make sure firmware supports this Bitcoin path\n    var isBitcoin = path[1] === COINS.BTC || path[1] === COINS.BTC_TESTNET;\n    var isBitcoinNonWrappedSegwit = isBitcoin && path[0] !== PURPOSES.BTC_WRAPPED_SEGWIT;\n    if (isBitcoinNonWrappedSegwit && !fwConstants.allowBtcLegacyAndSegwitAddrs)\n        return false;\n    // Make sure this path is otherwise valid\n    return (allowedPurposes.indexOf(path[0]) >= 0 &&\n        (allowedCoins.indexOf(path[1]) >= 0 ||\n            allowedMyCryptoCoins.indexOf(path[1] - constants_1.HARDENED_OFFSET) > 0));\n};\nexports.isValidAssetPath = isValidAssetPath;\n/** @internal */\nvar splitFrames = function (data, frameSz) {\n    var frames = [];\n    var n = Math.ceil(data.length / frameSz);\n    var off = 0;\n    for (var i = 0; i < n; i++) {\n        frames.push(data.slice(off, off + frameSz));\n        off += frameSz;\n    }\n    return frames;\n};\nexports.splitFrames = splitFrames;\n/** @internal */\nfunction isBase10NumStr(x) {\n    var bn = new bignumber_js_1.default(x).toFixed().split('.').join('');\n    var s = new String(x);\n    // Note that the JS native `String()` loses precision for large numbers, but we only\n    // want to validate the base of the number so we don't care about far out precision.\n    return bn.slice(0, 8) === s.slice(0, 8);\n}\n/** @internal Ensure a param is represented by a buffer */\nvar ensureHexBuffer = function (x, zeroIsNull) {\n    if (zeroIsNull === void 0) { zeroIsNull = true; }\n    try {\n        // For null values, return a 0-sized buffer. For most situations we assume\n        // 0 should be represented with a zero-length buffer (e.g. for RLP-building\n        // txs), but it can also be treated as a 1-byte buffer (`00`) if needed\n        if (x === null || (x === 0 && zeroIsNull === true))\n            return Buffer.alloc(0);\n        var isNumber = typeof x === 'number' || isBase10NumStr(x);\n        // Otherwise try to get this converted to a hex string\n        if (isNumber) {\n            // If this is a number or a base-10 number string, convert it to hex\n            x = \"\".concat(new bignumber_js_1.default(x).toString(16));\n        }\n        else if (typeof x === 'string' && x.slice(0, 2) === '0x') {\n            x = x.slice(2);\n        }\n        else {\n            x = x.toString('hex');\n        }\n        if (x.length % 2 > 0)\n            x = \"0\".concat(x);\n        if (x === '00' && !isNumber)\n            return Buffer.alloc(0);\n        return Buffer.from(x, 'hex');\n    }\n    catch (err) {\n        throw new Error(\"Cannot convert \".concat(x.toString(), \" to hex buffer (\").concat(err.toString(), \")\"));\n    }\n};\nexports.ensureHexBuffer = ensureHexBuffer;\n/** @internal */\nvar fixLen = function (msg, length) {\n    var buf = Buffer.alloc(length);\n    if (msg.length < length) {\n        msg.copy(buf, length - msg.length);\n        return buf;\n    }\n    return msg.slice(-length);\n};\nexports.fixLen = fixLen;\n//--------------------------------------------------\n// CRYPTO UTILS\n//--------------------------------------------------\n/** @internal */\nvar aes256_encrypt = function (data, key) {\n    var iv = Buffer.from(protocol_1.ProtocolConstants.aesIv);\n    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);\n    var paddedData = data.length % 16 === 0 ? data : aes_js_1.default.padding.pkcs7.pad(data);\n    return Buffer.from(aesCbc.encrypt(paddedData));\n};\nexports.aes256_encrypt = aes256_encrypt;\n/** @internal */\nvar aes256_decrypt = function (data, key) {\n    var iv = Buffer.from(protocol_1.ProtocolConstants.aesIv);\n    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);\n    return Buffer.from(aesCbc.decrypt(data));\n};\nexports.aes256_decrypt = aes256_decrypt;\n// Decode a DER signature. Returns signature object {r, s } or null if there is an error\n/** @internal */\nvar parseDER = function (sigBuf) {\n    if (sigBuf[0] !== 0x30 || sigBuf[2] !== 0x02)\n        throw new Error('Failed to decode DER signature');\n    var off = 3;\n    var rLen = sigBuf[off];\n    off++;\n    var r = sigBuf.slice(off, off + rLen);\n    off += rLen;\n    if (sigBuf[off] !== 0x02)\n        throw new Error('Failed to decode DER signature');\n    off++;\n    var sLen = sigBuf[off];\n    off++;\n    var s = sigBuf.slice(off, off + sLen);\n    return { r: r, s: s };\n};\nexports.parseDER = parseDER;\n/** @internal */\nvar getP256KeyPair = function (priv) {\n    if (ec === undefined)\n        ec = new EC('p256');\n    return ec.keyFromPrivate(priv, 'hex');\n};\nexports.getP256KeyPair = getP256KeyPair;\n/** @internal */\nvar getP256KeyPairFromPub = function (pub) {\n    if (ec === undefined)\n        ec = new EC('p256');\n    return ec.keyFromPublic(pub, 'hex');\n};\nexports.getP256KeyPairFromPub = getP256KeyPairFromPub;\n/** @internal */\nvar buildSignerPathBuf = function (signerPath, varAddrPathSzAllowed) {\n    var buf = Buffer.alloc(24);\n    var off = 0;\n    if (varAddrPathSzAllowed && signerPath.length > 5)\n        throw new Error('Signer path must be <=5 indices.');\n    if (!varAddrPathSzAllowed && signerPath.length !== 5)\n        throw new Error('Your Lattice firmware only supports 5-index derivation paths. Please upgrade.');\n    buf.writeUInt32LE(signerPath.length, off);\n    off += 4;\n    for (var i = 0; i < 5; i++) {\n        if (i < signerPath.length)\n            buf.writeUInt32LE(signerPath[i], off);\n        else\n            buf.writeUInt32LE(0, off);\n        off += 4;\n    }\n    return buf;\n};\nexports.buildSignerPathBuf = buildSignerPathBuf;\n//--------------------------------------------------\n// OTHER UTILS\n//--------------------------------------------------\n/** @internal */\nvar isAsciiStr = function (str, allowFormatChars) {\n    if (allowFormatChars === void 0) { allowFormatChars = false; }\n    if (typeof str !== 'string') {\n        return false;\n    }\n    var extraChars = allowFormatChars ?\n        [\n            0x0020,\n            0x000a, // New line\n        ] : [];\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        if (extraChars.indexOf(c) < 0 && (c < 0x0020 || c > 0x007f)) {\n            return false;\n        }\n    }\n    return true;\n};\nexports.isAsciiStr = isAsciiStr;\n/** @internal Check if a value exists in an object. Only checks first level of keys. */\nvar existsIn = function (val, obj) {\n    return Object.keys(obj).some(function (key) { return obj[key] === val; });\n};\nexports.existsIn = existsIn;\n/** @internal Create a buffer of size `n` and fill it with random data */\nvar randomBytes = function (n) {\n    var buf = Buffer.alloc(n);\n    for (var i = 0; i < n; i++) {\n        buf[i] = Math.round(Math.random() * 255);\n    }\n    return buf;\n};\nexports.randomBytes = randomBytes;\n/** @internal `isUInt4` accepts a number and returns true if it is a UInt4 */\nvar isUInt4 = function (n) { return (0, isInteger_1.default)(n) && (0, inRange_1.default)(n, 0, 16); };\nexports.isUInt4 = isUInt4;\n/**\n * Fetches an external JSON file containing networks indexed by chain id from a GridPlus repo, and\n * returns the parsed JSON.\n */\nfunction fetchExternalNetworkForChainId(chainId) {\n    return __awaiter(this, void 0, void 0, function () {\n        var body, err_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 2, , 3]);\n                    return [4 /*yield*/, fetch(constants_1.EXTERNAL_NETWORKS_BY_CHAIN_ID_URL)\n                            .then(function (res) { return res.json(); })];\n                case 1:\n                    body = _a.sent();\n                    if (body) {\n                        return [2 /*return*/, body[chainId]];\n                    }\n                    else {\n                        return [2 /*return*/, undefined];\n                    }\n                    return [3 /*break*/, 3];\n                case 2:\n                    err_1 = _a.sent();\n                    console.warn('Fetching external networks failed.\\n', err_1);\n                    return [3 /*break*/, 3];\n                case 3: return [2 /*return*/];\n            }\n        });\n    });\n}\n/**\n * Builds a URL for fetching calldata from block explorers for any supported chains\n * */\nfunction buildUrlForSupportedChainAndAddress(_a) {\n    var supportedChain = _a.supportedChain, address = _a.address;\n    var baseUrl = supportedChain.baseUrl;\n    var apiRoute = supportedChain.apiRoute;\n    var urlWithRoute = \"\".concat(baseUrl, \"/\").concat(apiRoute, \"&address=\").concat(address);\n    var apiKey = null;\n    var apiKeyParam = apiKey ? \"&apiKey=\".concat(null) : '';\n    return urlWithRoute + apiKeyParam;\n}\n/**\n * Takes a list of ABI data objects and a selector, and returns the earliest ABI data object that\n * matches the selector.\n */\nfunction selectDefFrom4byteABI(abiData, selector) {\n    if (abiData.length > 1) {\n        console.warn('WARNING: There are multiple results. Using the first one.');\n    }\n    var def;\n    abiData\n        .sort(function (a, b) {\n        var aTime = new Date(a.created_at).getTime();\n        var bTime = new Date(b.created_at).getTime();\n        return aTime - bTime;\n    })\n        .find(function (result) {\n        try {\n            def = _1.Calldata.EVM.parsers.parseCanonicalName(selector, result.text_signature);\n            return !!def;\n        }\n        catch (err) {\n            return false;\n        }\n    });\n    if (def) {\n        return def;\n    }\n    else {\n        throw new Error('Could not find definition for selector');\n    }\n}\nexports.selectDefFrom4byteABI = selectDefFrom4byteABI;\nfunction fetchWithTimeout(url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n        var _a, timeout, controller, timeoutId, response;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _a = options.timeout, timeout = _a === void 0 ? 8000 : _a;\n                    controller = new AbortController();\n                    timeoutId = setTimeout(function () { return controller.abort(); }, timeout);\n                    return [4 /*yield*/, fetch(url, __assign(__assign({}, options), { signal: controller.signal }))];\n                case 1:\n                    response = _b.sent();\n                    clearTimeout(timeoutId);\n                    return [2 /*return*/, response];\n            }\n        });\n    });\n}\nexports.fetchWithTimeout = fetchWithTimeout;\nfunction fetchAndCache(url, opts) {\n    return __awaiter(this, void 0, void 0, function () {\n        var cache, request, match, response, responseClone, data, err_2;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 11, , 12]);\n                    if (!(globalThis.caches && globalThis.Request)) return [3 /*break*/, 9];\n                    return [4 /*yield*/, caches.open('gp-calldata')];\n                case 1:\n                    cache = _a.sent();\n                    request = new Request(url, opts);\n                    return [4 /*yield*/, cache.match(request)];\n                case 2:\n                    match = _a.sent();\n                    if (!match) return [3 /*break*/, 3];\n                    return [2 /*return*/, match];\n                case 3: return [4 /*yield*/, fetch(request, opts)];\n                case 4:\n                    response = _a.sent();\n                    responseClone = response.clone();\n                    return [4 /*yield*/, response.json()];\n                case 5:\n                    data = _a.sent();\n                    if (!(response.ok &&\n                        ((0, validators_1.isValidBlockExplorerResponse)(data) || (0, validators_1.isValid4ByteResponse)(data)))) return [3 /*break*/, 7];\n                    return [4 /*yield*/, cache.put(request, responseClone)];\n                case 6:\n                    _a.sent();\n                    return [2 /*return*/, cache.match(request, opts)];\n                case 7: return [2 /*return*/, response];\n                case 8: return [3 /*break*/, 10];\n                case 9: return [2 /*return*/, fetch(url, opts)];\n                case 10: return [3 /*break*/, 12];\n                case 11:\n                    err_2 = _a.sent();\n                    console.error(err_2);\n                    throw err_2;\n                case 12: return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction fetchSupportedChainData(address, supportedChain) {\n    return __awaiter(this, void 0, void 0, function () {\n        var url;\n        return __generator(this, function (_a) {\n            url = buildUrlForSupportedChainAndAddress({ address: address, supportedChain: supportedChain });\n            return [2 /*return*/, fetchAndCache(url)\n                    .then(function (res) { return res.json(); })\n                    .then(function (body) {\n                    if (body && body.result) {\n                        return JSON.parse(body.result);\n                    }\n                    else {\n                        throw new Error('Server response was malformed');\n                    }\n                })\n                    .catch(function () {\n                    throw new Error('Fetching data from external network failed');\n                })];\n        });\n    });\n}\nfunction fetch4byteData(selector) {\n    return __awaiter(this, void 0, void 0, function () {\n        var url;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    url = \"https://www.4byte.directory/api/v1/signatures/?hex_signature=0x\".concat(selector);\n                    return [4 /*yield*/, fetch(url)\n                            .then(function (res) { return res.json(); })\n                            .then(function (body) {\n                            if (body && body.results) {\n                                return body.results;\n                            }\n                            else {\n                                throw new Error('No results found');\n                            }\n                        })\n                            .catch(function (err) {\n                            throw new Error(\"Fetching data from 4byte failed: \".concat(err.message));\n                        })];\n                case 1: return [2 /*return*/, _a.sent()];\n            }\n        });\n    });\n}\nfunction encodeDef(def) {\n    return Buffer.from((0, rlp_1.encode)(def));\n}\n/**\n * Post-process fetched ABI definition.\n * @param def - Calldata decoder data definition for calling function\n * @param calldata - Raw transaction calldata\n * @return - Updated `def`\n */\nfunction postProcessDef(def, calldata) {\n    var e_1, _a, e_2, _b;\n    return __awaiter(this, void 0, void 0, function () {\n        var nestedCalldata, nestedDefs, _c, _e, i, _f, _g, j, _h, _j, e_2_1, _k, _l, e_1_1, newDef;\n        return __generator(this, function (_m) {\n            switch (_m.label) {\n                case 0:\n                    nestedCalldata = _1.Calldata.EVM.processors.getNestedCalldata(def, calldata);\n                    return [4 /*yield*/, replaceNestedDefs(nestedCalldata)];\n                case 1:\n                    nestedDefs = _m.sent();\n                    _m.label = 2;\n                case 2:\n                    _m.trys.push([2, 22, 23, 28]);\n                    _c = __asyncValues(nestedDefs.entries());\n                    _m.label = 3;\n                case 3: return [4 /*yield*/, _c.next()];\n                case 4:\n                    if (!(_e = _m.sent(), !_e.done)) return [3 /*break*/, 21];\n                    i = _e.value[0];\n                    if (!(Array.isArray(nestedDefs[i]) && typeof nestedDefs[i][0] !== 'string')) return [3 /*break*/, 18];\n                    _m.label = 5;\n                case 5:\n                    _m.trys.push([5, 11, 12, 17]);\n                    _f = (e_2 = void 0, __asyncValues(nestedDefs[i].entries()));\n                    _m.label = 6;\n                case 6: return [4 /*yield*/, _f.next()];\n                case 7:\n                    if (!(_g = _m.sent(), !_g.done)) return [3 /*break*/, 10];\n                    j = _g.value[0];\n                    if (!(nestedDefs[i][j] !== null)) return [3 /*break*/, 9];\n                    _h = nestedDefs[i];\n                    _j = j;\n                    return [4 /*yield*/, postProcessDef(nestedDefs[i][j], Buffer.from(nestedCalldata[i][j].slice(2), 'hex'))];\n                case 8:\n                    _h[_j] = _m.sent();\n                    _m.label = 9;\n                case 9: return [3 /*break*/, 6];\n                case 10: return [3 /*break*/, 17];\n                case 11:\n                    e_2_1 = _m.sent();\n                    e_2 = { error: e_2_1 };\n                    return [3 /*break*/, 17];\n                case 12:\n                    _m.trys.push([12, , 15, 16]);\n                    if (!(_g && !_g.done && (_b = _f.return))) return [3 /*break*/, 14];\n                    return [4 /*yield*/, _b.call(_f)];\n                case 13:\n                    _m.sent();\n                    _m.label = 14;\n                case 14: return [3 /*break*/, 16];\n                case 15:\n                    if (e_2) throw e_2.error;\n                    return [7 /*endfinally*/];\n                case 16: return [7 /*endfinally*/];\n                case 17: return [3 /*break*/, 20];\n                case 18:\n                    if (!(nestedDefs[i] !== null)) return [3 /*break*/, 20];\n                    _k = nestedDefs;\n                    _l = i;\n                    return [4 /*yield*/, postProcessDef(nestedDefs[i], Buffer.from(nestedCalldata[i].slice(2), 'hex'))];\n                case 19:\n                    _k[_l] = _m.sent();\n                    _m.label = 20;\n                case 20: return [3 /*break*/, 3];\n                case 21: return [3 /*break*/, 28];\n                case 22:\n                    e_1_1 = _m.sent();\n                    e_1 = { error: e_1_1 };\n                    return [3 /*break*/, 28];\n                case 23:\n                    _m.trys.push([23, , 26, 27]);\n                    if (!(_e && !_e.done && (_a = _c.return))) return [3 /*break*/, 25];\n                    return [4 /*yield*/, _a.call(_c)];\n                case 24:\n                    _m.sent();\n                    _m.label = 25;\n                case 25: return [3 /*break*/, 27];\n                case 26:\n                    if (e_1) throw e_1.error;\n                    return [7 /*endfinally*/];\n                case 27: return [7 /*endfinally*/];\n                case 28:\n                    newDef = _1.Calldata.EVM.processors.replaceNestedDefs(def, nestedDefs);\n                    return [2 /*return*/, newDef];\n            }\n        });\n    });\n}\n/**\n * Given a set of possible nested defs, slice out selectors and look up\n * definitions on 4byte.\n * @param possNestedDefs - result of `getPossibleNestedDefs` processor\n * @return Array containing calldata decoding data for each parameter\n *          that had a possible nested def. If there was no possible\n *          nested def or if a def could not be fetched from 4byte, the\n *          array item will be `null`. In the case of multiple possible\n *          defs behind one param (e.g. multicall pattern), ALL nested\n *          items must have defs associated or the item will map to a\n *          single `null` value in the return array.\n *\n */\nfunction replaceNestedDefs(possNestedDefs) {\n    var possNestedDefs_1, possNestedDefs_1_1;\n    var e_3, _a, e_4, _b;\n    return __awaiter(this, void 0, void 0, function () {\n        var nestedDefs, d, _nestedDefs, shouldInclude, d_1, d_1_1, _d, _nestedSelector, _nestedAbi, _nestedDef, err_3, e_4_1, nestedSelector, nestedAbi, nestedDef, err_4, e_3_1;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    nestedDefs = [];\n                    _c.label = 1;\n                case 1:\n                    _c.trys.push([1, 26, 27, 32]);\n                    possNestedDefs_1 = __asyncValues(possNestedDefs);\n                    _c.label = 2;\n                case 2: return [4 /*yield*/, possNestedDefs_1.next()];\n                case 3:\n                    if (!(possNestedDefs_1_1 = _c.sent(), !possNestedDefs_1_1.done)) return [3 /*break*/, 25];\n                    d = possNestedDefs_1_1.value;\n                    if (!(d !== null)) return [3 /*break*/, 23];\n                    if (!Array.isArray(d)) return [3 /*break*/, 19];\n                    _nestedDefs = [];\n                    shouldInclude = true;\n                    _c.label = 4;\n                case 4:\n                    _c.trys.push([4, 12, 13, 18]);\n                    d_1 = (e_4 = void 0, __asyncValues(d));\n                    _c.label = 5;\n                case 5: return [4 /*yield*/, d_1.next()];\n                case 6:\n                    if (!(d_1_1 = _c.sent(), !d_1_1.done)) return [3 /*break*/, 11];\n                    _d = d_1_1.value;\n                    _c.label = 7;\n                case 7:\n                    _c.trys.push([7, 9, , 10]);\n                    _nestedSelector = _d.slice(2, 10);\n                    return [4 /*yield*/, fetch4byteData(_nestedSelector)];\n                case 8:\n                    _nestedAbi = _c.sent();\n                    _nestedDef = selectDefFrom4byteABI(_nestedAbi, _nestedSelector);\n                    _nestedDefs.push(_nestedDef);\n                    return [3 /*break*/, 10];\n                case 9:\n                    err_3 = _c.sent();\n                    shouldInclude = false;\n                    _nestedDefs.push(null);\n                    return [3 /*break*/, 10];\n                case 10: return [3 /*break*/, 5];\n                case 11: return [3 /*break*/, 18];\n                case 12:\n                    e_4_1 = _c.sent();\n                    e_4 = { error: e_4_1 };\n                    return [3 /*break*/, 18];\n                case 13:\n                    _c.trys.push([13, , 16, 17]);\n                    if (!(d_1_1 && !d_1_1.done && (_b = d_1.return))) return [3 /*break*/, 15];\n                    return [4 /*yield*/, _b.call(d_1)];\n                case 14:\n                    _c.sent();\n                    _c.label = 15;\n                case 15: return [3 /*break*/, 17];\n                case 16:\n                    if (e_4) throw e_4.error;\n                    return [7 /*endfinally*/];\n                case 17: return [7 /*endfinally*/];\n                case 18:\n                    if (shouldInclude) {\n                        nestedDefs.push(_nestedDefs);\n                    }\n                    else {\n                        nestedDefs.push(null);\n                    }\n                    return [3 /*break*/, 22];\n                case 19:\n                    _c.trys.push([19, 21, , 22]);\n                    nestedSelector = d.slice(2, 10);\n                    return [4 /*yield*/, fetch4byteData(nestedSelector)];\n                case 20:\n                    nestedAbi = _c.sent();\n                    nestedDef = selectDefFrom4byteABI(nestedAbi, nestedSelector);\n                    nestedDefs.push(nestedDef);\n                    return [3 /*break*/, 22];\n                case 21:\n                    err_4 = _c.sent();\n                    nestedDefs.push(null);\n                    return [3 /*break*/, 22];\n                case 22: return [3 /*break*/, 24];\n                case 23:\n                    nestedDefs.push(null);\n                    _c.label = 24;\n                case 24: return [3 /*break*/, 2];\n                case 25: return [3 /*break*/, 32];\n                case 26:\n                    e_3_1 = _c.sent();\n                    e_3 = { error: e_3_1 };\n                    return [3 /*break*/, 32];\n                case 27:\n                    _c.trys.push([27, , 30, 31]);\n                    if (!(possNestedDefs_1_1 && !possNestedDefs_1_1.done && (_a = possNestedDefs_1.return))) return [3 /*break*/, 29];\n                    return [4 /*yield*/, _a.call(possNestedDefs_1)];\n                case 28:\n                    _c.sent();\n                    _c.label = 29;\n                case 29: return [3 /*break*/, 31];\n                case 30:\n                    if (e_3) throw e_3.error;\n                    return [7 /*endfinally*/];\n                case 31: return [7 /*endfinally*/];\n                case 32: \n                // For all nested defs, replace the \n                return [2 /*return*/, nestedDefs];\n            }\n        });\n    });\n}\n//--------------------------------------------------\n//--------------------------------------------------\n// EXTERNAL UTILS\n//--------------------------------------------------\n//--------------------------------------------------\n/**\n *  Fetches calldata from a remote scanner based on the transaction's `chainId`\n */\nfunction fetchCalldataDecoder(_data, to, _chainId, recurse) {\n    if (recurse === void 0) { recurse = true; }\n    return __awaiter(this, void 0, void 0, function () {\n        var isHexString, data, selector, chainId, cachedNetwork, supportedChain, _a, abi_1, parsedAbi, def_1, err_5, abi, def, err_6;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _b.trys.push([0, 15, , 16]);\n                    // Exit if there is no data. The 2 comes from the 0x prefix, but a later\n                    // check will confirm that there are at least 4 bytes of data in the buffer.\n                    if (!_data || _data.length < 2) {\n                        throw new Error('Data is either undefined or less than two bytes');\n                    }\n                    isHexString = typeof _data === 'string' && _data.slice(0, 2) === '0x';\n                    data = isHexString ?\n                        Buffer.from(_data.slice(2), 'hex') :\n                        //@ts-expect-error - Buffer doesn't recognize Uint8Array type properly\n                        Buffer.from(_data, 'hex');\n                    if (data.length < 4) {\n                        throw new Error('Data must contain at least 4 bytes of data to define the selector');\n                    }\n                    selector = Buffer.from(data.slice(0, 4)).toString('hex');\n                    chainId = Number(_chainId);\n                    cachedNetwork = constants_1.NETWORKS_BY_CHAIN_ID[chainId];\n                    if (!cachedNetwork) return [3 /*break*/, 1];\n                    _a = cachedNetwork;\n                    return [3 /*break*/, 3];\n                case 1: return [4 /*yield*/, fetchExternalNetworkForChainId(chainId)];\n                case 2:\n                    _a = _b.sent();\n                    _b.label = 3;\n                case 3:\n                    supportedChain = _a;\n                    _b.label = 4;\n                case 4:\n                    _b.trys.push([4, 10, , 11]);\n                    if (!supportedChain) return [3 /*break*/, 8];\n                    return [4 /*yield*/, fetchSupportedChainData(to, supportedChain)];\n                case 5:\n                    abi_1 = _b.sent();\n                    parsedAbi = _1.Calldata.EVM.parsers.parseSolidityJSONABI(selector, abi_1);\n                    def_1 = parsedAbi.def;\n                    if (!recurse) return [3 /*break*/, 7];\n                    return [4 /*yield*/, postProcessDef(def_1, data)];\n                case 6:\n                    def_1 = _b.sent();\n                    _b.label = 7;\n                case 7: return [2 /*return*/, { abi: abi_1, def: encodeDef(def_1) }];\n                case 8: throw new Error(\"Chain (id: \".concat(chainId, \") is not supported\"));\n                case 9: return [3 /*break*/, 11];\n                case 10:\n                    err_5 = _b.sent();\n                    console.warn(err_5.message, '\\n', 'Falling back to 4byte');\n                    return [3 /*break*/, 11];\n                case 11: return [4 /*yield*/, fetch4byteData(selector)];\n                case 12:\n                    abi = _b.sent();\n                    def = selectDefFrom4byteABI(abi, selector);\n                    if (!recurse) return [3 /*break*/, 14];\n                    return [4 /*yield*/, postProcessDef(def, data)];\n                case 13:\n                    def = _b.sent();\n                    _b.label = 14;\n                case 14: return [2 /*return*/, { abi: abi, def: encodeDef(def) }];\n                case 15:\n                    err_6 = _b.sent();\n                    console.warn(\"Fetching calldata failed: \".concat(err_6.message));\n                    return [3 /*break*/, 16];\n                case 16: return [2 /*return*/, { def: null, abi: null }];\n            }\n        });\n    });\n}\nexports.fetchCalldataDecoder = fetchCalldataDecoder;\n/**\n * Generates an application secret for use in maintaining connection to device.\n * @param deviceId - The device ID of the device you want to generate a token for.\n * @param password - The password entered when connecting to the device.\n * @param appName - The name of the application.\n * @returns an application secret as a Buffer\n * @public\n */\nvar generateAppSecret = function (deviceId, password, appName) {\n    var deviceIdBuffer = typeof deviceId === 'string' ? Buffer.from(deviceId) : deviceId;\n    var passwordBuffer = typeof password === 'string' ? Buffer.from(password) : password;\n    var appNameBuffer = typeof appName === 'string' ? Buffer.from(appName) : appName;\n    var preImage = Buffer.concat([\n        deviceIdBuffer,\n        passwordBuffer,\n        appNameBuffer,\n    ]);\n    return Buffer.from((0, sha_1.sha256)().update(preImage).digest('hex'), 'hex');\n};\nexports.generateAppSecret = generateAppSecret;\n/**\n * Generic signing does not return a `v` value like legacy ETH signing requests did.\n * Get the `v` component of the signature as well as an `initV`\n * parameter, which is what you need to use to re-create an `@ethereumjs/tx`\n * object. There is a lot of tech debt in `@ethereumjs/tx` which also\n * inherits the tech debt of ethereumjs-util.\n * 1.  The legacy `Transaction` type can call `_processSignature` with the regular\n *     `v` value.\n * 2.  Newer transaction types such as `FeeMarketEIP1559Transaction` will subtract\n *     27 from the `v` that gets passed in, so we need to add `27` to create `initV`\n * @param tx - An @ethereumjs/tx Transaction object or Buffer (serialized tx)\n * @param resp - response from Lattice. Can be either legacy or generic signing variety\n * @returns bn.js BN object containing the `v` param\n */\nvar getV = function (tx, resp) {\n    var chainId, hash, type;\n    var txIsBuf = Buffer.isBuffer(tx);\n    if (txIsBuf) {\n        hash = Buffer.from((0, js_sha3_1.keccak256)(tx), 'hex');\n        try {\n            var legacyTxArray = (0, rlp_1.decode)(tx);\n            if (legacyTxArray.length === 6) {\n                // Six item array means this is a pre-EIP155 transaction\n                chainId = null;\n            }\n            else {\n                // Otherwise the `v` param is the `chainId`\n                chainId = new bn_js_1.BN(legacyTxArray[6]);\n            }\n            // Legacy tx = type 0\n            type = 0;\n        }\n        catch (err) {\n            // This is likely a typed transaction\n            try {\n                var txObj = tx_1.TransactionFactory.fromSerializedData(tx);\n                //@ts-expect-error -- Accessing private property\n                type = txObj._type;\n            }\n            catch (err) {\n                // If we can't RLP decode and can't hydrate an @ethereumjs/tx object,\n                // we don't know what this is and should abort.\n                throw new Error('Could not recover V. Bad transaction data.');\n            }\n        }\n    }\n    else {\n        // @ethereumjs/tx object passed in\n        type = tx._type;\n        hash = type ?\n            tx.getMessageToSign(true) : // newer tx types\n            (0, rlp_1.encode)(tx.getMessageToSign(false)); // legacy tx\n        if (tx.supports(tx_1.Capability.EIP155ReplayProtection)) {\n            chainId = tx.common.chainIdBN().toNumber();\n        }\n    }\n    var rs = new Uint8Array(Buffer.concat([resp.sig.r, resp.sig.s]));\n    var pubkey = new Uint8Array(resp.pubkey);\n    var recovery0 = (0, secp256k1_1.ecdsaRecover)(rs, 0, hash, false);\n    var recovery1 = (0, secp256k1_1.ecdsaRecover)(rs, 1, hash, false);\n    var pubkeyStr = Buffer.from(pubkey).toString('hex');\n    var recovery0Str = Buffer.from(recovery0).toString('hex');\n    var recovery1Str = Buffer.from(recovery1).toString('hex');\n    var recovery;\n    if (pubkeyStr === recovery0Str) {\n        recovery = 0;\n    }\n    else if (pubkeyStr === recovery1Str) {\n        recovery = 1;\n    }\n    else {\n        // If we fail a second time, exit here.\n        throw new Error('Failed to recover V parameter. Bad signature or transaction data.');\n    }\n    // Newer transaction types just use the [0, 1] value\n    if (type) {\n        return new bn_js_1.BN(recovery);\n    }\n    // If there is no chain ID, this is a pre-EIP155 tx\n    if (!chainId) {\n        return new bn_js_1.BN(recovery).addn(27);\n    }\n    // EIP155 replay protection is included in the `v` param\n    // and uses the chainId value.\n    return chainId.muln(2).addn(35).addn(recovery);\n};\nexports.getV = getV;\n/** @internal */\nexports.EXTERNAL = {\n    fetchCalldataDecoder: fetchCalldataDecoder,\n    generateAppSecret: exports.generateAppSecret,\n    getV: exports.getV,\n};\n","module.exports={\n    \"name\": \"goerli\",\n    \"chainId\": 5,\n    \"networkId\": 5,\n    \"defaultHardfork\": \"merge\",\n    \"consensus\": {\n        \"type\": \"poa\",\n        \"algorithm\": \"clique\",\n        \"clique\": {\n            \"period\": 15,\n            \"epoch\": 30000\n        }\n    },\n    \"comment\": \"Cross-client PoA test network\",\n    \"url\": \"https://github.com/goerli/testnet\",\n    \"genesis\": {\n        \"timestamp\": \"0x5c51a607\",\n        \"gasLimit\": 10485760,\n        \"difficulty\": 1,\n        \"nonce\": \"0x0000000000000000\",\n        \"extraData\": \"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 1561651,\n            \"forkHash\": \"0xc25efa5c\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 4460644,\n            \"forkHash\": \"0x757a1c47\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 5062605,\n            \"forkHash\": \"0xb8c6299d\"\n        },\n        {\n            \"//_comment\": \"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818\",\n            \"name\": \"merge\",\n            \"ttd\": \"10790000\",\n            \"block\": 7382819,\n            \"forkHash\": \"0xb8c6299d\"\n        },\n        {\n            \"name\": \"mergeForkIdTransition\",\n            \"block\": null,\n            \"forkHash\": null\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"forkHash\": null\n        }\n    ],\n    \"bootstrapNodes\": [\n        {\n            \"ip\": \"51.141.78.53\",\n            \"port\": 30303,\n            \"id\": \"011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a\",\n            \"location\": \"\",\n            \"comment\": \"Upstream bootnode 1\"\n        },\n        {\n            \"ip\": \"13.93.54.137\",\n            \"port\": 30303,\n            \"id\": \"176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b\",\n            \"location\": \"\",\n            \"comment\": \"Upstream bootnode 2\"\n        },\n        {\n            \"ip\": \"94.237.54.114\",\n            \"port\": 30313,\n            \"id\": \"46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291\",\n            \"location\": \"\",\n            \"comment\": \"Upstream bootnode 3\"\n        },\n        {\n            \"ip\": \"18.218.250.66\",\n            \"port\": 30313,\n            \"id\": \"b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949\",\n            \"location\": \"\",\n            \"comment\": \"Upstream bootnode 4\"\n        },\n        {\n            \"ip\": \"3.11.147.67\",\n            \"port\": 30303,\n            \"id\": \"a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91\",\n            \"location\": \"\",\n            \"comment\": \"Ethereum Foundation bootnode\"\n        },\n        {\n            \"ip\": \"51.15.116.226\",\n            \"port\": 30303,\n            \"id\": \"a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd\",\n            \"location\": \"\",\n            \"comment\": \"Goerli Initiative bootnode\"\n        },\n        {\n            \"ip\": \"51.15.119.157\",\n            \"port\": 30303,\n            \"id\": \"807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33\",\n            \"location\": \"\",\n            \"comment\": \"Goerli Initiative bootnode\"\n        },\n        {\n            \"ip\": \"51.15.119.157\",\n            \"port\": 40303,\n            \"id\": \"a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd\",\n            \"location\": \"\",\n            \"comment\": \"Goerli Initiative bootnode\"\n        }\n    ],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net\"\n    ]\n}\n","// @ts-check\n/* eslint-disable guard-for-in */\n/**\n * Multihash implementation in JavaScript.\n *\n * @module multihash\n */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst multibase = require('multibase')\nconst varint = require('varint')\nconst { names } = require('./constants')\nconst { TextDecoder } = require('web-encoding')\n\nconst textDecoder = new TextDecoder()\nconst codes = {}\n\nfor (const key in names) {\n  codes[names[key]] = key\n}\nexports.names = names\nexports.codes = Object.freeze(codes)\n\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nexports.toHexString = function toHexString (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  const buffer = Buffer.isBuffer(hash)\n    ? hash\n    : Buffer.from(hash.buffer, hash.byteOffset, hash.byteLength)\n\n  return buffer.toString('hex')\n}\n\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Buffer}\n */\nexports.fromHexString = function fromHexString (hash) {\n  return Buffer.from(hash, 'hex')\n}\n\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nexports.toB58String = function toB58String (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  return textDecoder.decode(multibase.encode('base58btc', hash)).slice(1)\n}\n\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Uint8Array} hash\n * @returns {Buffer}\n */\nexports.fromB58String = function fromB58String (hash) {\n  const encoded = hash instanceof Uint8Array\n    ? textDecoder.decode(hash)\n    : hash\n\n  return multibase.decode('z' + encoded)\n}\n\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Uint8Array} bytes\n * @returns {{code: number, name: string, length: number, digest: Buffer}} result\n */\nexports.decode = function decode (bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new Error('multihash must be a Uint8Array')\n  }\n  let buf = Buffer.isBuffer(bytes)\n    ? bytes\n    : Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength)\n\n  if (buf.length < 2) {\n    throw new Error('multihash too short. must be > 2 bytes.')\n  }\n\n  const code = varint.decode(buf)\n  if (!exports.isValidCode(code)) {\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\n  }\n  buf = buf.slice(varint.decode.bytes)\n\n  const len = varint.decode(buf)\n  if (len < 0) {\n    throw new Error(`multihash invalid length: ${len}`)\n  }\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== len) {\n    throw new Error(`multihash length inconsistent: 0x${buf.toString('hex')}`)\n  }\n\n  return {\n    code,\n    name: codes[code],\n    length: len,\n    digest: buf\n  }\n}\n\n/**\n *  Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Uint8Array} digest\n * @param {string|number} code\n * @param {number} [length]\n * @returns {Buffer}\n */\nexports.encode = function encode (digest, code, length) {\n  if (!digest || code === undefined) {\n    throw new Error('multihash encode requires at least two args: digest, code')\n  }\n\n  // ensure it's a hashfunction code.\n  const hashfn = exports.coerceCode(code)\n\n  if (!(digest instanceof Uint8Array)) {\n    throw new Error('digest should be a Uint8Array')\n  }\n\n  if (length == null) {\n    length = digest.length\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.')\n  }\n\n  const hash = varint.encode(hashfn)\n  const len = varint.encode(length)\n  const buffer = Buffer.alloc(hash.length + len.length + digest.length)\n  buffer.set(hash, 0)\n  buffer.set(len, hash.length)\n  buffer.set(digest, hash.length + len.length)\n  return buffer\n}\n\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n * @param {string|number} name\n * @returns {number}\n */\nexports.coerceCode = function coerceCode (name) {\n  let code = name\n\n  if (typeof name === 'string') {\n    if (names[name] === undefined) {\n      throw new Error(`Unrecognized hash function named: ${name}`)\n    }\n    code = names[name]\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\n  }\n\n  if (codes[code] === undefined && !exports.isAppCode(code)) {\n    throw new Error(`Unrecognized function code: ${code}`)\n  }\n\n  return code\n}\n\n/**\n * Checks wether a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\nexports.isAppCode = function appCode (code) {\n  return code > 0 && code < 0x10\n}\n\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {number} code\n * @returns {boolean}\n */\nexports.isValidCode = function validCode (code) {\n  if (exports.isAppCode(code)) {\n    return true\n  }\n\n  if (codes[code]) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {void}\n * @throws {Error}\n */\nfunction validate (multihash) {\n  exports.decode(multihash) // throws if bad.\n}\nexports.validate = validate\n\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {Buffer}\n * @throws {Error}\n */\nexports.prefix = function prefix (multihash) {\n  validate(multihash)\n\n  return Buffer.from(multihash.buffer, multihash.byteOffset, 2)\n}\n","module.exports={\n    \"name\": \"mainnet\",\n    \"chainId\": 1,\n    \"networkId\": 1,\n    \"defaultHardfork\": \"merge\",\n    \"consensus\": {\n        \"type\": \"pow\",\n        \"algorithm\": \"ethash\",\n        \"ethash\": {}\n    },\n    \"comment\": \"The Ethereum main chain\",\n    \"url\": \"https://ethstats.net/\",\n    \"genesis\": {\n        \"gasLimit\": 5000,\n        \"difficulty\": 17179869184,\n        \"nonce\": \"0x0000000000000042\",\n        \"extraData\": \"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0xfc64ec04\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 1150000,\n            \"forkHash\": \"0x97c2c34c\"\n        },\n        {\n            \"name\": \"dao\",\n            \"block\": 1920000,\n            \"forkHash\": \"0x91d1f948\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 2463000,\n            \"forkHash\": \"0x7a64da13\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 2675000,\n            \"forkHash\": \"0x3edd5b10\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 4370000,\n            \"forkHash\": \"0xa00bc324\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 7280000,\n            \"forkHash\": \"0x668db0af\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 7280000,\n            \"forkHash\": \"0x668db0af\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 9069000,\n            \"forkHash\": \"0x879d6e30\"\n        },\n        {\n            \"name\": \"muirGlacier\",\n            \"block\": 9200000,\n            \"forkHash\": \"0xe029e991\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 12244000,\n            \"forkHash\": \"0x0eb440f6\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 12965000,\n            \"forkHash\": \"0xb715077d\"\n        },\n        {\n            \"name\": \"arrowGlacier\",\n            \"block\": 13773000,\n            \"forkHash\": \"0x20c327fc\"\n        },\n        {\n            \"name\": \"grayGlacier\",\n            \"block\": 15050000,\n            \"forkHash\": \"0xf0afd0e3\"\n        },\n        {\n            \"//_comment\": \"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393\",\n            \"name\": \"merge\",\n            \"ttd\": \"58750000000000000000000\",\n            \"block\": 15537394,\n            \"forkHash\": \"0xf0afd0e3\"\n        },\n        {\n            \"name\": \"mergeForkIdTransition\",\n            \"block\": null,\n            \"forkHash\": null\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"forkHash\": null\n        }\n    ],\n    \"bootstrapNodes\": [\n        {\n            \"ip\": \"18.138.108.67\",\n            \"port\": 30303,\n            \"id\": \"d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666\",\n            \"location\": \"ap-southeast-1-001\",\n            \"comment\": \"bootnode-aws-ap-southeast-1-001\"\n        },\n        {\n            \"ip\": \"3.209.45.79\",\n            \"port\": 30303,\n            \"id\": \"22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de\",\n            \"location\": \"us-east-1-001\",\n            \"comment\": \"bootnode-aws-us-east-1-001\"\n        },\n        {\n            \"ip\": \"34.255.23.113\",\n            \"port\": 30303,\n            \"id\": \"ca6de62fce278f96aea6ec5a2daadb877e51651247cb96ee310a318def462913b653963c155a0ef6c7d50048bba6e6cea881130857413d9f50a621546b590758\",\n            \"location\": \"eu-west-1-001\",\n            \"comment\": \"bootnode-aws-eu-west-1-001\"\n        },\n        {\n            \"ip\": \"35.158.244.151\",\n            \"port\": 30303,\n            \"id\": \"279944d8dcd428dffaa7436f25ca0ca43ae19e7bcf94a8fb7d1641651f92d121e972ac2e8f381414b80cc8e5555811c2ec6e1a99bb009b3f53c4c69923e11bd8\",\n            \"location\": \"eu-central-1-001\",\n            \"comment\": \"bootnode-aws-eu-central-1-001\"\n        },\n        {\n            \"ip\": \"52.187.207.27\",\n            \"port\": 30303,\n            \"id\": \"8499da03c47d637b20eee24eec3c356c9a2e6148d6fe25ca195c7949ab8ec2c03e3556126b0d7ed644675e78c4318b08691b7b57de10e5f0d40d05b09238fa0a\",\n            \"location\": \"australiaeast-001\",\n            \"comment\": \"bootnode-azure-australiaeast-001\"\n        },\n        {\n            \"ip\": \"191.234.162.198\",\n            \"port\": 30303,\n            \"id\": \"103858bdb88756c71f15e9b5e09b56dc1be52f0a5021d46301dbbfb7e130029cc9d0d6f73f693bc29b665770fff7da4d34f3c6379fe12721b5d7a0bcb5ca1fc1\",\n            \"location\": \"brazilsouth-001\",\n            \"comment\": \"bootnode-azure-brazilsouth-001\"\n        },\n        {\n            \"ip\": \"52.231.165.108\",\n            \"port\": 30303,\n            \"id\": \"715171f50508aba88aecd1250af392a45a330af91d7b90701c436b618c86aaa1589c9184561907bebbb56439b8f8787bc01f49a7c77276c58c1b09822d75e8e8\",\n            \"location\": \"koreasouth-001\",\n            \"comment\": \"bootnode-azure-koreasouth-001\"\n        },\n        {\n            \"ip\": \"104.42.217.25\",\n            \"port\": 30303,\n            \"id\": \"5d6d7cd20d6da4bb83a1d28cadb5d409b64edf314c0335df658c1a54e32c7c4a7ab7823d57c39b6a757556e68ff1df17c748b698544a55cb488b52479a92b60f\",\n            \"location\": \"westus-001\",\n            \"comment\": \"bootnode-azure-westus-001\"\n        }\n    ],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net\"\n    ]\n}\n","module.exports={\n    \"name\": \"rinkeby\",\n    \"chainId\": 4,\n    \"networkId\": 4,\n    \"defaultHardfork\": \"london\",\n    \"consensus\": {\n        \"type\": \"poa\",\n        \"algorithm\": \"clique\",\n        \"clique\": {\n            \"period\": 15,\n            \"epoch\": 30000\n        }\n    },\n    \"comment\": \"PoA test network\",\n    \"url\": \"https://www.rinkeby.io\",\n    \"genesis\": {\n        \"timestamp\": \"0x58ee40ba\",\n        \"gasLimit\": 4700000,\n        \"difficulty\": 1,\n        \"nonce\": \"0x0000000000000000\",\n        \"extraData\": \"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0x3b8e0691\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 1,\n            \"forkHash\": \"0x60949295\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 2,\n            \"forkHash\": \"0x8bde40dd\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 3,\n            \"forkHash\": \"0xcb3a64bb\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 1035301,\n            \"forkHash\": \"0x8d748b57\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 3660663,\n            \"forkHash\": \"0xe49cab14\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 4321234,\n            \"forkHash\": \"0xafec6b27\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 5435345,\n            \"forkHash\": \"0xcbdb8838\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 8290928,\n            \"forkHash\": \"0x6910c8bd\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 8897988,\n            \"forkHash\": \"0x8e29f2f3\"\n        },\n        {\n            \"name\": \"merge\",\n            \"block\": null,\n            \"forkHash\": null\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"forkHash\": null\n        }\n    ],\n    \"bootstrapNodes\": [\n        {\n            \"ip\": \"52.169.42.101\",\n            \"port\": 30303,\n            \"id\": \"a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf\",\n            \"location\": \"\",\n            \"comment\": \"IE\"\n        },\n        {\n            \"ip\": \"52.3.158.184\",\n            \"port\": 30303,\n            \"id\": \"343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8\",\n            \"location\": \"\",\n            \"comment\": \"INFURA\"\n        },\n        {\n            \"ip\": \"159.89.28.211\",\n            \"port\": 30303,\n            \"id\": \"b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6\",\n            \"location\": \"\",\n            \"comment\": \"AKASHA\"\n        }\n    ],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net\"\n    ]\n}\n","module.exports={\n    \"name\": \"ropsten\",\n    \"chainId\": 3,\n    \"networkId\": 3,\n    \"defaultHardfork\": \"merge\",\n    \"consensus\": {\n        \"type\": \"pow\",\n        \"algorithm\": \"ethash\",\n        \"ethash\": {}\n    },\n    \"comment\": \"PoW test network\",\n    \"url\": \"https://github.com/ethereum/ropsten\",\n    \"genesis\": {\n        \"gasLimit\": 16777216,\n        \"difficulty\": 1048576,\n        \"nonce\": \"0x0000000000000042\",\n        \"extraData\": \"0x3535353535353535353535353535353535353535353535353535353535353535\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0x30c7ddbc\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 0,\n            \"forkHash\": \"0x30c7ddbc\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 0,\n            \"forkHash\": \"0x30c7ddbc\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 10,\n            \"forkHash\": \"0x63760190\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 1700000,\n            \"forkHash\": \"0x3ea159c7\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 4230000,\n            \"forkHash\": \"0x97b544f3\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 4939394,\n            \"forkHash\": \"0xd6e2149b\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 6485846,\n            \"forkHash\": \"0x4bc66396\"\n        },\n        {\n            \"name\": \"muirGlacier\",\n            \"block\": 7117117,\n            \"forkHash\": \"0x6727ef90\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 9812189,\n            \"forkHash\": \"0xa157d377\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 10499401,\n            \"forkHash\": \"0x7119b6b3\"\n        },\n        {\n            \"//_comment\": \"The forkHash will remain same as mergeForkIdTransition is post merge\",\n            \"name\": \"merge\",\n            \"ttd\": \"50000000000000000\",\n            \"block\": null,\n            \"forkHash\": \"0x7119b6b3\"\n        },\n        {\n            \"name\": \"mergeForkIdTransition\",\n            \"block\": null,\n            \"forkHash\": null\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"forkHash\": null\n        }\n    ],\n    \"bootstrapNodes\": [\n        {\n            \"ip\": \"52.176.7.10\",\n            \"port\": 30303,\n            \"id\": \"30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606\",\n            \"location\": \"\",\n            \"comment\": \"US-Azure geth\"\n        },\n        {\n            \"ip\": \"52.176.100.77\",\n            \"port\": 30303,\n            \"id\": \"865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c\",\n            \"location\": \"\",\n            \"comment\": \"US-Azure parity\"\n        },\n        {\n            \"ip\": \"52.232.243.152\",\n            \"port\": 30303,\n            \"id\": \"6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f\",\n            \"location\": \"\",\n            \"comment\": \"Parity\"\n        },\n        {\n            \"ip\": \"192.81.208.223\",\n            \"port\": 30303,\n            \"id\": \"94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09\",\n            \"location\": \"\",\n            \"comment\": \"@gpip\"\n        }\n    ],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net\"\n    ]\n}\n","module.exports={\n    \"name\": \"sepolia\",\n    \"chainId\": 11155111,\n    \"networkId\": 11155111,\n    \"defaultHardfork\": \"merge\",\n    \"consensus\": {\n        \"type\": \"pow\",\n        \"algorithm\": \"ethash\",\n        \"ethash\": {}\n    },\n    \"comment\": \"PoW test network to replace Ropsten\",\n    \"url\": \"https://github.com/ethereum/go-ethereum/pull/23730\",\n    \"genesis\": {\n        \"timestamp\": \"0x6159af19\",\n        \"gasLimit\": 30000000,\n        \"difficulty\": 131072,\n        \"nonce\": \"0x0000000000000000\",\n        \"extraData\": \"0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"muirGlacier\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"//_comment\": \"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408\",\n            \"name\": \"merge\",\n            \"ttd\": \"17000000000000000\",\n            \"block\": 1450409,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"mergeForkIdTransition\",\n            \"block\": 1735371,\n            \"forkHash\": \"0xb96cbd13\"\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"timestamp\": \"1677557088\",\n            \"forkHash\": \"0xf7f9bc08\"\n        }\n    ],\n    \"bootstrapNodes\": [\n        {\n            \"ip\": \"18.168.182.86\",\n            \"port\": 30303,\n            \"id\": \"9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066\",\n            \"location\": \"\",\n            \"comment\": \"geth\"\n        },\n        {\n            \"ip\": \"52.14.151.177\",\n            \"port\": 30303,\n            \"id\": \"ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7\",\n            \"location\": \"\",\n            \"comment\": \"besu\"\n        },\n        {\n            \"ip\": \"165.22.196.173\",\n            \"port\": 30303,\n            \"id\": \"ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6\",\n            \"location\": \"\",\n            \"comment\": \"EF\"\n        },\n        {\n            \"ip\": \"65.108.95.67\",\n            \"port\": 30303,\n            \"id\": \"075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6\",\n            \"location\": \"\",\n            \"comment\": \"lodestar\"\n        }\n    ],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net\"\n    ]\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Common = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst crc_32_1 = require(\"crc-32\");\nconst events_1 = require(\"events\");\nconst goerli = require(\"./chains/goerli.json\");\nconst mainnet = require(\"./chains/mainnet.json\");\nconst rinkeby = require(\"./chains/rinkeby.json\");\nconst ropsten = require(\"./chains/ropsten.json\");\nconst sepolia = require(\"./chains/sepolia.json\");\nconst eips_1 = require(\"./eips\");\nconst enums_1 = require(\"./enums\");\nconst hardforks_1 = require(\"./hardforks\");\nconst utils_1 = require(\"./utils\");\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nclass Common extends events_1.EventEmitter {\n    constructor(opts) {\n        super();\n        this._eips = [];\n        this._customChains = opts.customChains ?? [];\n        this._chainParams = this.setChain(opts.chain);\n        this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? enums_1.Hardfork.Merge;\n        // Assign hardfork changes in the sequence of the applied hardforks\n        this.HARDFORK_CHANGES = this.hardforks().map((hf) => [\n            hf.name,\n            hardforks_1.hardforks[hf.name],\n        ]);\n        this._hardfork = this.DEFAULT_HARDFORK;\n        if (opts.hardfork !== undefined) {\n            this.setHardfork(opts.hardfork);\n        }\n        if (opts.eips) {\n            this.setEIPs(opts.eips);\n        }\n    }\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one.\n     *\n     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n     * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n     *\n     * ```javascript\n     * Common.custom({chainId: 123})\n     * ```\n     *\n     * There are also selected supported custom chains which can be initialized by using one of the\n     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n     *\n     * ```javascript\n     * Common.custom(CustomChains.MaticMumbai)\n     * ```\n     *\n     * Note that these supported custom chains only provide some base parameters (usually the chain and\n     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n     * the `@ethereumjs/tx` library to a Layer-2 chain).\n     *\n     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n     */\n    static custom(chainParamsOrName, opts = {}) {\n        const baseChain = opts.baseChain ?? 'mainnet';\n        const standardChainParams = { ...Common._getChainParams(baseChain) };\n        standardChainParams['name'] = 'custom-chain';\n        if (typeof chainParamsOrName !== 'string') {\n            return new Common({\n                chain: {\n                    ...standardChainParams,\n                    ...chainParamsOrName,\n                },\n                ...opts,\n            });\n        }\n        else {\n            if (chainParamsOrName === enums_1.CustomChain.PolygonMainnet) {\n                return Common.custom({\n                    name: enums_1.CustomChain.PolygonMainnet,\n                    chainId: 137,\n                    networkId: 137,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_1.CustomChain.PolygonMumbai) {\n                return Common.custom({\n                    name: enums_1.CustomChain.PolygonMumbai,\n                    chainId: 80001,\n                    networkId: 80001,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_1.CustomChain.ArbitrumRinkebyTestnet) {\n                return Common.custom({\n                    name: enums_1.CustomChain.ArbitrumRinkebyTestnet,\n                    chainId: 421611,\n                    networkId: 421611,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_1.CustomChain.ArbitrumOne) {\n                return Common.custom({\n                    name: enums_1.CustomChain.ArbitrumOne,\n                    chainId: 42161,\n                    networkId: 42161,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_1.CustomChain.xDaiChain) {\n                return Common.custom({\n                    name: enums_1.CustomChain.xDaiChain,\n                    chainId: 100,\n                    networkId: 100,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_1.CustomChain.OptimisticKovan) {\n                return Common.custom({\n                    name: enums_1.CustomChain.OptimisticKovan,\n                    chainId: 69,\n                    networkId: 69,\n                }, \n                // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n                { hardfork: enums_1.Hardfork.Berlin, ...opts });\n            }\n            if (chainParamsOrName === enums_1.CustomChain.OptimisticEthereum) {\n                return Common.custom({\n                    name: enums_1.CustomChain.OptimisticEthereum,\n                    chainId: 10,\n                    networkId: 10,\n                }, \n                // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n                { hardfork: enums_1.Hardfork.Berlin, ...opts });\n            }\n            throw new Error(`Custom chain ${chainParamsOrName} not supported`);\n        }\n    }\n    /**\n     * Static method to load and set common from a geth genesis json\n     * @param genesisJson json of geth configuration\n     * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n     * @returns Common\n     */\n    static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }) {\n        const genesisParams = (0, utils_1.parseGethGenesis)(genesisJson, chain, mergeForkIdPostMerge);\n        const common = new Common({\n            chain: genesisParams.name ?? 'custom',\n            customChains: [genesisParams],\n            eips,\n            hardfork: hardfork ?? genesisParams.hardfork,\n        });\n        if (genesisHash !== undefined) {\n            common.setForkHashes(genesisHash);\n        }\n        return common;\n    }\n    /**\n     * Static method to determine if a {@link chainId} is supported as a standard chain\n     * @param chainId bigint id (`1`) of a standard chain\n     * @returns boolean\n     */\n    static isSupportedChainId(chainId) {\n        const initializedChains = this._getInitializedChains();\n        return Boolean(initializedChains['names'][chainId.toString()]);\n    }\n    static _getChainParams(chain, customChains) {\n        const initializedChains = this._getInitializedChains(customChains);\n        if (typeof chain === 'number' || typeof chain === 'bigint') {\n            chain = chain.toString();\n            if (initializedChains['names'][chain]) {\n                const name = initializedChains['names'][chain];\n                return initializedChains[name];\n            }\n            throw new Error(`Chain with ID ${chain} not supported`);\n        }\n        if (initializedChains[chain] !== undefined) {\n            return initializedChains[chain];\n        }\n        throw new Error(`Chain with name ${chain} not supported`);\n    }\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain representation.\n     *              Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    setChain(chain) {\n        if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n            this._chainParams = Common._getChainParams(chain, this._customChains);\n        }\n        else if (typeof chain === 'object') {\n            if (this._customChains.length > 0) {\n                throw new Error('Chain must be a string, number, or bigint when initialized with customChains passed in');\n            }\n            const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n            for (const param of required) {\n                if (!(param in chain)) {\n                    throw new Error(`Missing required chain parameter: ${param}`);\n                }\n            }\n            this._chainParams = chain;\n        }\n        else {\n            throw new Error('Wrong input format');\n        }\n        for (const hf of this.hardforks()) {\n            if (hf.block === undefined) {\n                throw new Error(`Hardfork cannot have undefined block number`);\n            }\n        }\n        return this._chainParams;\n    }\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n     */\n    setHardfork(hardfork) {\n        let existing = false;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if (hfChanges[0] === hardfork) {\n                if (this._hardfork !== hardfork) {\n                    this._hardfork = hardfork;\n                    this.emit('hardforkChanged', hardfork);\n                }\n                existing = true;\n            }\n        }\n        if (!existing) {\n            throw new Error(`Hardfork with name ${hardfork} not supported`);\n        }\n    }\n    /**\n     * Returns the hardfork based on the block number or an optional\n     * total difficulty (Merge HF) provided.\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param blockNumber\n     * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)\n     * @param timestamp: timestamp in seconds at which block was/is to be minted\n     * @returns The name of the HF\n     */\n    getHardforkByBlockNumber(blockNumber, td, timestamp) {\n        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);\n        td = (0, util_1.toType)(td, util_1.TypeOutput.BigInt);\n        timestamp = (0, util_1.toType)(timestamp, util_1.TypeOutput.Number);\n        // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n        const hfs = this.hardforks().filter((hf) => hf.block !== null || (hf.ttd !== null && hf.ttd !== undefined) || hf.timestamp !== undefined);\n        const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);\n        const doubleTTDHF = hfs\n            .slice(mergeIndex + 1)\n            .findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);\n        if (doubleTTDHF >= 0) {\n            throw Error(`More than one merge hardforks found with ttd specified`);\n        }\n        // Find the first hardfork that has a block number greater than `blockNumber`\n        // (skips the merge hardfork since it cannot have a block number specified).\n        // If timestamp is not provided, it also skips timestamps hardforks to continue\n        // discovering/checking number hardforks.\n        let hfIndex = hfs.findIndex((hf) => (hf.block !== null && hf.block > blockNumber) ||\n            (timestamp !== undefined && Number(hf.timestamp) > timestamp));\n        if (hfIndex === -1) {\n            // all hardforks apply, set hfIndex to the last one as that's the candidate\n            hfIndex = hfs.length;\n        }\n        else if (hfIndex === 0) {\n            // cannot have a case where a block number is before all applied hardforks\n            // since the chain has to start with a hardfork\n            throw Error('Must have at least one hardfork at block 0');\n        }\n        // If timestamp is not provided, we need to rollback to the last hf with block or ttd\n        if (timestamp === undefined) {\n            const stepBack = hfs\n                .slice(0, hfIndex)\n                .reverse()\n                .findIndex((hf) => hf.block !== null || hf.ttd !== undefined);\n            hfIndex = hfIndex - stepBack;\n        }\n        // Move hfIndex one back to arrive at candidate hardfork\n        hfIndex = hfIndex - 1;\n        // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n        // hardforks. so it will now be needed to rollback\n        if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n            // We're on the merge hardfork.  Let's check the TTD\n            if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {\n                // Merge ttd greater than current td so we're on hardfork before merge\n                hfIndex -= 1;\n            }\n        }\n        else {\n            if (mergeIndex >= 0 && td !== undefined && td !== null) {\n                if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {\n                    throw Error('Maximum HF determined by total difficulty is lower than the block number HF');\n                }\n                else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) <= td) {\n                    throw Error('HF determined by block number is lower than the minimum total difficulty HF');\n                }\n            }\n        }\n        const hfStartIndex = hfIndex;\n        // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n        // This won't anyway be the case with Merge hfs\n        for (; hfIndex < hfs.length - 1; hfIndex++) {\n            // break out if hfIndex + 1 is not scheduled at hfIndex\n            if (hfs[hfIndex].block !== hfs[hfIndex + 1].block ||\n                hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {\n                break;\n            }\n        }\n        if (timestamp) {\n            const minTimeStamp = hfs\n                .slice(0, hfStartIndex)\n                .reduce((acc, hf) => Math.max(Number(hf.timestamp ?? '0'), acc), 0);\n            if (minTimeStamp > timestamp) {\n                throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);\n            }\n            const maxTimeStamp = hfs\n                .slice(hfIndex + 1)\n                .reduce((acc, hf) => Math.min(Number(hf.timestamp ?? timestamp), acc), timestamp);\n            if (maxTimeStamp < timestamp) {\n                throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n            }\n        }\n        const hardfork = hfs[hfIndex];\n        return hardfork.name;\n    }\n    /**\n     * Sets a new hardfork based on the block number or an optional\n     * total difficulty (Merge HF) provided.\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param blockNumber\n     * @param td\n     * @param timestamp\n     * @returns The name of the HF set\n     */\n    setHardforkByBlockNumber(blockNumber, td, timestamp) {\n        const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n        this.setHardfork(hardfork);\n        return hardfork;\n    }\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params or null if hardfork not on chain\n     */\n    _getHardfork(hardfork) {\n        const hfs = this.hardforks();\n        for (const hf of hfs) {\n            if (hf['name'] === hardfork)\n                return hf;\n        }\n        return null;\n    }\n    /**\n     * Sets the active EIPs\n     * @param eips\n     */\n    setEIPs(eips = []) {\n        for (const eip of eips) {\n            if (!(eip in eips_1.EIPs)) {\n                throw new Error(`${eip} not supported`);\n            }\n            const minHF = this.gteHardfork(eips_1.EIPs[eip]['minimumHardfork']);\n            if (!minHF) {\n                throw new Error(`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);\n            }\n            if (eips_1.EIPs[eip].requiredEIPs !== undefined) {\n                for (const elem of eips_1.EIPs[eip].requiredEIPs) {\n                    if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n                        throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`);\n                    }\n                }\n            }\n        }\n        this._eips = eips;\n    }\n    /**\n     * Returns a parameter for the current chain setup\n     *\n     * If the parameter is present in an EIP, the EIP always takes precedence.\n     * Otherwise the parameter if taken from the latest applied HF with\n     * a change on the respective parameter.\n     *\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @returns The value requested or `BigInt(0)` if not found\n     */\n    param(topic, name) {\n        // TODO: consider the case that different active EIPs\n        // can change the same parameter\n        let value;\n        for (const eip of this._eips) {\n            value = this.paramByEIP(topic, name, eip);\n            if (value !== undefined)\n                return value;\n        }\n        return this.paramByHardfork(topic, name, this._hardfork);\n    }\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name\n     * @returns The value requested or `BigInt(0)` if not found\n     */\n    paramByHardfork(topic, name, hardfork) {\n        let value = null;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            // EIP-referencing HF file (e.g. berlin.json)\n            if ('eips' in hfChanges[1]) {\n                const hfEIPs = hfChanges[1]['eips'];\n                for (const eip of hfEIPs) {\n                    const valueEIP = this.paramByEIP(topic, name, eip);\n                    value = typeof valueEIP === 'bigint' ? valueEIP : value;\n                }\n                // Parameter-inlining HF file (e.g. istanbul.json)\n            }\n            else {\n                if (hfChanges[1][topic] === undefined) {\n                    throw new Error(`Topic ${topic} not defined`);\n                }\n                if (hfChanges[1][topic][name] !== undefined) {\n                    value = hfChanges[1][topic][name].v;\n                }\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return BigInt(value ?? 0);\n    }\n    /**\n     * Returns a parameter corresponding to an EIP\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param eip Number of the EIP\n     * @returns The value requested or `undefined` if not found\n     */\n    paramByEIP(topic, name, eip) {\n        if (!(eip in eips_1.EIPs)) {\n            throw new Error(`${eip} not supported`);\n        }\n        const eipParams = eips_1.EIPs[eip];\n        if (!(topic in eipParams)) {\n            throw new Error(`Topic ${topic} not defined`);\n        }\n        if (eipParams[topic][name] === undefined) {\n            return undefined;\n        }\n        const value = eipParams[topic][name].v;\n        return BigInt(value);\n    }\n    /**\n     * Returns a parameter for the hardfork active on block number or\n     * optional provided total difficulty (Merge HF)\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     * @param td Total difficulty\n     *    * @returns The value requested or `BigInt(0)` if not found\n     */\n    paramByBlock(topic, name, blockNumber, td, timestamp) {\n        const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n        return this.paramByHardfork(topic, name, hardfork);\n    }\n    /**\n     * Checks if an EIP is activated by either being included in the EIPs\n     * manually passed in with the {@link CommonOpts.eips} or in a\n     * hardfork currently being active\n     *\n     * Note: this method only works for EIPs being supported\n     * by the {@link CommonOpts.eips} constructor option\n     * @param eip\n     */\n    isActivatedEIP(eip) {\n        if (this.eips().includes(eip)) {\n            return true;\n        }\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            const hf = hfChanges[1];\n            if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n                if (hf['eips'].includes(eip)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */\n    hardforkIsActiveOnBlock(hardfork, blockNumber) {\n        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);\n        hardfork = hardfork ?? this._hardfork;\n        const hfBlock = this.hardforkBlock(hardfork);\n        if (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */\n    activeOnBlock(blockNumber) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber);\n    }\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n    hardforkGteHardfork(hardfork1, hardfork2) {\n        hardfork1 = hardfork1 ?? this._hardfork;\n        const hardforks = this.hardforks();\n        let posHf1 = -1, posHf2 = -1;\n        let index = 0;\n        for (const hf of hardforks) {\n            if (hf['name'] === hardfork1)\n                posHf1 = index;\n            if (hf['name'] === hardfork2)\n                posHf2 = index;\n            index += 1;\n        }\n        return posHf1 >= posHf2 && posHf2 !== -1;\n    }\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n    gteHardfork(hardfork) {\n        return this.hardforkGteHardfork(null, hardfork);\n    }\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if unscheduled\n     */\n    hardforkBlock(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const block = this._getHardfork(hardfork)?.['block'];\n        if (block === undefined || block === null) {\n            return null;\n        }\n        return BigInt(block);\n    }\n    hardforkTimestamp(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const timestamp = this._getHardfork(hardfork)?.['timestamp'];\n        if (timestamp === undefined || timestamp === null) {\n            return null;\n        }\n        return BigInt(timestamp);\n    }\n    /**\n     * Returns the hardfork change block for eip\n     * @param eip EIP number\n     * @returns Block number or null if unscheduled\n     */\n    eipBlock(eip) {\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            const hf = hfChanges[1];\n            if ('eips' in hf) {\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                if (hf['eips'].includes(eip)) {\n                    return this.hardforkBlock(hfChanges[0]);\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Total difficulty or null if no set\n     */\n    hardforkTTD(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const ttd = this._getHardfork(hardfork)?.['ttd'];\n        if (ttd === undefined || ttd === null) {\n            return null;\n        }\n        return BigInt(ttd);\n    }\n    /**\n     * True if block number provided is the hardfork (given or set) change block\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     * @deprecated\n     */\n    isHardforkBlock(blockNumber, hardfork) {\n        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);\n        hardfork = hardfork ?? this._hardfork;\n        const block = this.hardforkBlock(hardfork);\n        return typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false;\n    }\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block timestamp, number or null if not available\n     */\n    nextHardforkBlockOrTimestamp(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const hfs = this.hardforks();\n        let hfIndex = hfs.findIndex((hf) => hf.name === hardfork);\n        // If the current hardfork is merge, go one behind as merge hf is not part of these\n        // calcs even if the merge hf block is set\n        if (hardfork === enums_1.Hardfork.Merge) {\n            hfIndex -= 1;\n        }\n        // Hardfork not found\n        if (hfIndex < 0) {\n            return null;\n        }\n        let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;\n        currHfTimeOrBlock =\n            currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined\n                ? Number(currHfTimeOrBlock)\n                : null;\n        const nextHf = hfs.slice(hfIndex + 1).find((hf) => {\n            let hfTimeOrBlock = hf.timestamp ?? hf.block;\n            hfTimeOrBlock =\n                hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null;\n            return (hf.name !== enums_1.Hardfork.Merge &&\n                hfTimeOrBlock !== null &&\n                hfTimeOrBlock !== undefined &&\n                hfTimeOrBlock !== currHfTimeOrBlock);\n        });\n        // If no next hf found with valid block or timestamp return null\n        if (nextHf === undefined) {\n            return null;\n        }\n        const nextHfBlock = nextHf.timestamp ?? nextHf.block;\n        if (nextHfBlock === null || nextHfBlock === undefined) {\n            return null;\n        }\n        return BigInt(nextHfBlock);\n    }\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if not available\n     * @deprecated\n     */\n    nextHardforkBlock(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        let hfBlock = this.hardforkBlock(hardfork);\n        // If this is a merge hardfork with block not set, then we fallback to previous hardfork\n        // to find the nextHardforkBlock\n        if (hfBlock === null && hardfork === enums_1.Hardfork.Merge) {\n            const hfs = this.hardforks();\n            const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);\n            if (mergeIndex < 0) {\n                throw Error(`Merge hardfork should have been found`);\n            }\n            hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);\n        }\n        if (hfBlock === null) {\n            return null;\n        }\n        // Next fork block number or null if none available\n        // Logic: if accumulator is still null and on the first occurrence of\n        // a block greater than the current hfBlock set the accumulator,\n        // pass on the accumulator as the final result from this time on\n        const nextHfBlock = this.hardforks().reduce((acc, hf) => {\n            // We need to ignore the merge block in our next hardfork calc\n            const block = BigInt(hf.block === null || (hf.ttd !== undefined && hf.ttd !== null) ? 0 : hf.block);\n            // Typescript can't seem to follow that the hfBlock is not null at this point\n            return block > hfBlock && acc === null ? block : acc;\n        }, null);\n        return nextHfBlock;\n    }\n    /**\n     * True if block number provided is the hardfork change block following the hardfork given or set\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     * @deprecated\n     */\n    isNextHardforkBlock(blockNumber, hardfork) {\n        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);\n        hardfork = hardfork ?? this._hardfork;\n        const nextHardforkBlock = this.nextHardforkBlock(hardfork);\n        return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;\n    }\n    /**\n     * Internal helper function to calculate a fork hash\n     * @param hardfork Hardfork name\n     * @param genesisHash Genesis block hash of the chain\n     * @returns Fork hash as hex string\n     */\n    _calcForkHash(hardfork, genesisHash) {\n        let hfBuffer = Buffer.alloc(0);\n        let prevBlockOrTime = 0;\n        for (const hf of this.hardforks()) {\n            const { block, timestamp, name } = hf;\n            // Timestamp to be used for timestamp based hfs even if we may bundle\n            // block number with them retrospectively\n            let blockOrTime = timestamp ?? block;\n            blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n            // Skip for chainstart (0), not applied HFs (null) and\n            // when already applied on same blockOrTime HFs\n            // and on the merge since forkhash doesn't change on merge hf\n            if (typeof blockOrTime === 'number' &&\n                blockOrTime !== 0 &&\n                blockOrTime !== prevBlockOrTime &&\n                name !== enums_1.Hardfork.Merge) {\n                const hfBlockBuffer = Buffer.from(blockOrTime.toString(16).padStart(16, '0'), 'hex');\n                hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer]);\n                prevBlockOrTime = blockOrTime;\n            }\n            if (hf.name === hardfork)\n                break;\n        }\n        const inputBuffer = Buffer.concat([genesisHash, hfBuffer]);\n        // CRC32 delivers result as signed (negative) 32-bit integer,\n        // convert to hex string\n        const forkhash = (0, util_1.intToBuffer)((0, crc_32_1.buf)(inputBuffer) >>> 0).toString('hex');\n        return `0x${forkhash}`;\n    }\n    /**\n     * Returns an eth/64 compliant fork hash (EIP-2124)\n     * @param hardfork Hardfork name, optional if HF set\n     * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n     */\n    forkHash(hardfork, genesisHash) {\n        hardfork = hardfork ?? this._hardfork;\n        const data = this._getHardfork(hardfork);\n        if (data === null ||\n            (data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)) {\n            const msg = 'No fork hash calculation possible for future hardfork';\n            throw new Error(msg);\n        }\n        if (data?.forkHash !== null && data?.forkHash !== undefined) {\n            return data.forkHash;\n        }\n        if (!genesisHash)\n            throw new Error('genesisHash required for forkHash calculation');\n        return this._calcForkHash(hardfork, genesisHash);\n    }\n    /**\n     *\n     * @param forkHash Fork hash as a hex string\n     * @returns Array with hardfork data (name, block, forkHash)\n     */\n    hardforkForForkHash(forkHash) {\n        const resArray = this.hardforks().filter((hf) => {\n            return hf.forkHash === forkHash;\n        });\n        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n    }\n    /**\n     * Sets any missing forkHashes on the passed-in {@link Common} instance\n     * @param common The {@link Common} to set the forkHashes for\n     * @param genesisHash The genesis block hash\n     */\n    setForkHashes(genesisHash) {\n        for (const hf of this.hardforks()) {\n            const blockOrTime = hf.timestamp ?? hf.block;\n            if ((hf.forkHash === null || hf.forkHash === undefined) &&\n                ((blockOrTime !== null && blockOrTime !== undefined) || typeof hf.ttd !== 'undefined')) {\n                hf.forkHash = this.forkHash(hf.name, genesisHash);\n            }\n        }\n    }\n    /**\n     * Returns the Genesis parameters of the current chain\n     * @returns Genesis dictionary\n     */\n    genesis() {\n        return this._chainParams.genesis;\n    }\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n    hardforks() {\n        return this._chainParams.hardforks;\n    }\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n    bootstrapNodes() {\n        return this._chainParams.bootstrapNodes;\n    }\n    /**\n     * Returns DNS networks for the current chain\n     * @returns {String[]} Array of DNS ENR urls\n     */\n    dnsNetworks() {\n        return this._chainParams.dnsNetworks;\n    }\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n    hardfork() {\n        return this._hardfork;\n    }\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n    chainId() {\n        return BigInt(this._chainParams.chainId);\n    }\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n    chainName() {\n        return this._chainParams.name;\n    }\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n    networkId() {\n        return BigInt(this._chainParams.networkId);\n    }\n    /**\n     * Returns the active EIPs\n     * @returns List of EIPs\n     */\n    eips() {\n        return this._eips;\n    }\n    /**\n     * Returns the consensus type of the network\n     * Possible values: \"pow\"|\"poa\"|\"pos\"\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusType() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                value = hfChanges[1]['consensus']['type'];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return value ?? this._chainParams['consensus']['type'];\n    }\n    /**\n     * Returns the concrete consensus implementation\n     * algorithm or protocol for the network\n     * e.g. \"ethash\" for \"pow\" consensus type,\n     * \"clique\" for \"poa\" consensus type or\n     * \"casper\" for \"pos\" consensus type.\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusAlgorithm() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                value = hfChanges[1]['consensus']['algorithm'];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return value ?? this._chainParams['consensus']['algorithm'];\n    }\n    /**\n     * Returns a dictionary with consensus configuration\n     * parameters based on the consensus algorithm\n     *\n     * Expected returns (parameters must be present in\n     * the respective chain json files):\n     *\n     * ethash: empty object\n     * clique: period, epoch\n     * casper: empty object\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusConfig() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                // The config parameter is named after the respective consensus algorithm\n                value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return (value ?? this._chainParams['consensus'][this.consensusAlgorithm()] ?? {});\n    }\n    /**\n     * Returns a deep copy of this {@link Common} instance.\n     */\n    copy() {\n        const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n        copy.removeAllListeners();\n        return copy;\n    }\n    static _getInitializedChains(customChains) {\n        const names = {};\n        for (const [name, id] of Object.entries(enums_1.Chain)) {\n            names[id] = name.toLowerCase();\n        }\n        const chains = { mainnet, ropsten, rinkeby, goerli, sepolia };\n        if (customChains) {\n            for (const chain of customChains) {\n                const { name } = chain;\n                names[chain.chainId.toString()] = name;\n                chains[name] = chain;\n            }\n        }\n        chains.names = names;\n        return chains;\n    }\n}\nexports.Common = Common;\n//# sourceMappingURL=common.js.map","module.exports={\n    \"name\": \"EIP-1153\",\n    \"number\": 1153,\n    \"comment\": \"Transient Storage\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1153\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"chainstart\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"tstore\": {\n            \"v\": 100,\n            \"d\": \"Base fee of the TSTORE opcode\"\n        },\n        \"tload\": {\n            \"v\": 100,\n            \"d\": \"Base fee of the TLOAD opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-1559\",\n    \"number\": 1559,\n    \"comment\": \"Fee market change for ETH 1.0 chain\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1559\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"berlin\",\n    \"requiredEIPs\": [2930],\n    \"gasConfig\": {\n        \"baseFeeMaxChangeDenominator\": {\n            \"v\": 8,\n            \"d\": \"Maximum base fee change denominator\"\n        },\n        \"elasticityMultiplier\": {\n            \"v\": 2,\n            \"d\": \"Maximum block gas target elasticity\"\n        },\n        \"initialBaseFee\": {\n            \"v\": 1000000000,\n            \"d\": \"Initial base fee on first EIP1559 block\"\n        }\n    },\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-2315\",\n    \"number\": 2315,\n    \"comment\": \"Simple subroutines for the EVM\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2315\",\n    \"status\": \"Draft\",\n    \"minimumHardfork\": \"istanbul\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"beginsub\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the BEGINSUB opcode\"\n        },\n        \"returnsub\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the RETURNSUB opcode\"\n        },\n        \"jumpsub\": {\n            \"v\": 10,\n            \"d\": \"Base fee of the JUMPSUB opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-2537\",\n    \"number\": 2537,\n    \"comment\": \"BLS12-381 precompiles\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2537\",\n    \"status\": \"Draft\",\n    \"minimumHardfork\": \"chainstart\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"Bls12381G1AddGas\": {\n            \"v\": 600,\n            \"d\": \"Gas cost of a single BLS12-381 G1 addition precompile-call\"\n        },\n        \"Bls12381G1MulGas\": {\n            \"v\": 12000,\n            \"d\": \"Gas cost of a single BLS12-381 G1 multiplication precompile-call\"\n        },\n        \"Bls12381G2AddGas\": {\n            \"v\": 4500,\n            \"d\": \"Gas cost of a single BLS12-381 G2 addition precompile-call\"\n        },\n        \"Bls12381G2MulGas\": {\n            \"v\": 55000,\n            \"d\": \"Gas cost of a single BLS12-381 G2 multiplication precompile-call\"\n        },\n        \"Bls12381PairingBaseGas\": {\n            \"v\": 115000,\n            \"d\": \"Base gas cost of BLS12-381 pairing check\"\n        },\n        \"Bls12381PairingPerPairGas\": {\n            \"v\": 23000,\n            \"d\": \"Per-pair gas cost of BLS12-381 pairing check\"\n        },\n        \"Bls12381MapG1Gas\": {\n            \"v\": 5500,\n            \"d\": \"Gas cost of BLS12-381 map field element to G1\"\n        },\n        \"Bls12381MapG2Gas\": {\n            \"v\": 110000,\n            \"d\": \"Gas cost of BLS12-381 map field element to G2\"\n        },\n        \"Bls12381MultiExpGasDiscount\": {\n            \"v\": [\n                [1, 1200],\n                [2, 888],\n                [3, 764],\n                [4, 641],\n                [5, 594],\n                [6, 547],\n                [7, 500],\n                [8, 453],\n                [9, 438],\n                [10, 423],\n                [11, 408],\n                [12, 394],\n                [13, 379],\n                [14, 364],\n                [15, 349],\n                [16, 334],\n                [17, 330],\n                [18, 326],\n                [19, 322],\n                [20, 318],\n                [21, 314],\n                [22, 310],\n                [23, 306],\n                [24, 302],\n                [25, 298],\n                [26, 294],\n                [27, 289],\n                [28, 285],\n                [29, 281],\n                [30, 277],\n                [31, 273],\n                [32, 269],\n                [33, 268],\n                [34, 266],\n                [35, 265],\n                [36, 263],\n                [37, 262],\n                [38, 260],\n                [39, 259],\n                [40, 257],\n                [41, 256],\n                [42, 254],\n                [43, 253],\n                [44, 251],\n                [45, 250],\n                [46, 248],\n                [47, 247],\n                [48, 245],\n                [49, 244],\n                [50, 242],\n                [51, 241],\n                [52, 239],\n                [53, 238],\n                [54, 236],\n                [55, 235],\n                [56, 233],\n                [57, 232],\n                [58, 231],\n                [59, 229],\n                [60, 228],\n                [61, 226],\n                [62, 225],\n                [63, 223],\n                [64, 222],\n                [65, 221],\n                [66, 220],\n                [67, 219],\n                [68, 219],\n                [69, 218],\n                [70, 217],\n                [71, 216],\n                [72, 216],\n                [73, 215],\n                [74, 214],\n                [75, 213],\n                [76, 213],\n                [77, 212],\n                [78, 211],\n                [79, 211],\n                [80, 210],\n                [81, 209],\n                [82, 208],\n                [83, 208],\n                [84, 207],\n                [85, 206],\n                [86, 205],\n                [87, 205],\n                [88, 204],\n                [89, 203],\n                [90, 202],\n                [91, 202],\n                [92, 201],\n                [93, 200],\n                [94, 199],\n                [95, 199],\n                [96, 198],\n                [97, 197],\n                [98, 196],\n                [99, 196],\n                [100, 195],\n                [101, 194],\n                [102, 193],\n                [103, 193],\n                [104, 192],\n                [105, 191],\n                [106, 191],\n                [107, 190],\n                [108, 189],\n                [109, 188],\n                [110, 188],\n                [111, 187],\n                [112, 186],\n                [113, 185],\n                [114, 185],\n                [115, 184],\n                [116, 183],\n                [117, 182],\n                [118, 182],\n                [119, 181],\n                [120, 180],\n                [121, 179],\n                [122, 179],\n                [123, 178],\n                [124, 177],\n                [125, 176],\n                [126, 176],\n                [127, 175],\n                [128, 174]\n            ],\n            \"d\": \"Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-2565\",\n    \"number\": 2565,\n    \"comment\": \"ModExp gas cost\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2565\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"byzantium\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"modexpGquaddivisor\": {\n            \"v\": 3,\n            \"d\": \"Gquaddivisor from modexp precompile for gas calculation\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","module.exports={\n    \"name\": \"EIP-2718\",\n    \"comment\": \"Typed Transaction Envelope\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2718\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"chainstart\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-2929\",\n    \"comment\": \"Gas cost increases for state access opcodes\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2929\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"chainstart\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"coldsload\": {\n            \"v\": 2100,\n            \"d\": \"Gas cost of the first read of storage from a given location (per transaction)\"\n        },\n        \"coldaccountaccess\": {\n            \"v\": 2600,\n            \"d\": \"Gas cost of the first read of a given address (per transaction)\"\n        },\n        \"warmstorageread\": {\n            \"v\": 100,\n            \"d\": \"Gas cost of reading storage locations which have already loaded 'cold'\"\n        },\n        \"sstoreCleanGasEIP2200\": {\n            \"v\": 2900,\n            \"d\": \"Once per SSTORE operation from clean non-zero to something else\"\n        },\n        \"sstoreNoopGasEIP2200\": {\n            \"v\": 100,\n            \"d\": \"Once per SSTORE operation if the value doesn't change\"\n        },\n        \"sstoreDirtyGasEIP2200\": {\n            \"v\": 100,\n            \"d\": \"Once per SSTORE operation if a dirty value is changed\"\n        },\n        \"sstoreInitRefundEIP2200\": {\n            \"v\": 19900,\n            \"d\": \"Once per SSTORE operation for resetting to the original zero value\"\n        },\n        \"sstoreCleanRefundEIP2200\": {\n            \"v\": 4900,\n            \"d\": \"Once per SSTORE operation for resetting to the original non-zero value\"\n        },\n        \"call\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the CALL opcode\"\n        },\n        \"callcode\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the CALLCODE opcode\"\n        },\n        \"delegatecall\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the DELEGATECALL opcode\"\n        },\n        \"staticcall\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the STATICCALL opcode\"\n        },\n        \"balance\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the BALANCE opcode\"\n        },\n        \"extcodesize\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the EXTCODESIZE opcode\"\n        },\n        \"extcodecopy\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the EXTCODECOPY opcode\"\n        },\n        \"extcodehash\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the EXTCODEHASH opcode\"\n        },\n        \"sload\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the SLOAD opcode\"\n        },\n        \"sstore\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the SSTORE opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-2930\",\n    \"comment\": \"Optional access lists\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2930\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"istanbul\",\n    \"requiredEIPs\": [2718, 2929],\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"accessListStorageKeyCost\": {\n            \"v\": 1900,\n            \"d\": \"Gas cost per storage key in an Access List transaction\"\n        },\n        \"accessListAddressCost\": {\n            \"v\": 2400,\n            \"d\": \"Gas cost per storage key in an Access List transaction\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3074\",\n    \"number\": 3074,\n    \"comment\": \"AUTH and AUTHCALL opcodes\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3074\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"auth\": {\n            \"v\": 3100,\n            \"d\": \"Gas cost of the AUTH opcode\"\n        },\n        \"authcall\": {\n            \"v\": 0,\n            \"d\": \"Gas cost of the AUTHCALL opcode\"\n        },\n        \"authcallValueTransfer\": {\n            \"v\": 6700,\n            \"d\": \"Paid for CALL when the value transfer is non-zero\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3198\",\n    \"number\": 3198,\n    \"comment\": \"BASEFEE opcode\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3198\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"london\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"basefee\": {\n            \"v\": 2,\n            \"d\": \"Gas cost of the BASEFEE opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3529\",\n    \"comment\": \"Reduction in refunds\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3529\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"berlin\",\n    \"requiredEIPs\": [2929],\n    \"gasConfig\": {\n        \"maxRefundQuotient\": {\n            \"v\": 5,\n            \"d\": \"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)\"\n        }\n    },\n    \"gasPrices\": {\n        \"selfdestructRefund\": {\n            \"v\": 0,\n            \"d\": \"Refunded following a selfdestruct operation\"\n        },\n        \"sstoreClearRefundEIP2200\": {\n            \"v\": 4800,\n            \"d\": \"Once per SSTORE operation for clearing an originally existing storage slot\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3540\",\n    \"number\": 3540,\n    \"comment\": \"EVM Object Format (EOF) v1\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3540\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [3541],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3541\",\n    \"comment\": \"Reject new contracts starting with the 0xEF byte\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3541\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"berlin\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3554\",\n    \"comment\": \"Reduction in refunds\",\n    \"url\": \"Difficulty Bomb Delay to December 1st 2021\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"muirGlacier\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {\n        \"difficultyBombDelay\": {\n            \"v\": 9500000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports={\n    \"name\": \"EIP-3607\",\n    \"number\": 3607,\n    \"comment\": \"Reject transactions from senders with deployed code\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3607\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"chainstart\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","module.exports={\n    \"name\": \"EIP-3651\",\n    \"number\": 3198,\n    \"comment\": \"Warm COINBASE\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3651\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [2929],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3670\",\n    \"number\": 3670,\n    \"comment\": \"EOF - Code Validation\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3670\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [3540],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3675\",\n    \"number\": 3675,\n    \"comment\": \"Upgrade consensus to Proof-of-Stake\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3675\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3855\",\n    \"number\": 3855,\n    \"comment\": \"PUSH0 instruction\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3855\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"chainstart\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"push0\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the PUSH0 opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3860\",\n    \"number\": 3860,\n    \"comment\": \"Limit and meter initcode\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3860\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"spuriousDragon\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"initCodeWordCost\": {\n            \"v\": 2,\n            \"d\": \"Gas to pay for each word (32 bytes) of initcode when creating a contract\"\n        }\n    },\n    \"vm\": {\n        \"maxInitCodeSize\": {\n            \"v\": 49152,\n            \"d\": \"Maximum length of initialization code when creating a contract\"\n        }\n    },\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-4345\",\n    \"number\": 4345,\n    \"comment\": \"Difficulty Bomb Delay to June 2022\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-4345\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"london\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {\n        \"difficultyBombDelay\": {\n            \"v\": 10700000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports={\n    \"name\": \"EIP-4399\",\n    \"number\": 4399,\n    \"comment\": \"Supplant DIFFICULTY opcode with PREVRANDAO\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-4399\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-4844\",\n    \"number\": 4844,\n    \"comment\": \"Shard Blob Transactions\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-4844\",\n    \"status\": \"Draft\",\n    \"minimumHardfork\": \"merge\",\n    \"requiredEIPs\": [1559, 2718, 2930, 4895],\n    \"gasConfig\": {\n        \"dataGasPerBlob\": {\n            \"v\": 131072,\n            \"d\": \"The base fee for data gas per blob\"\n        },\n        \"targetDataGasPerBlock\": {\n            \"v\": 262144,\n            \"d\": \"The target data gas consumed per block\"\n        },\n        \"maxDataGasPerBlock\": {\n            \"v\": 524288,\n            \"d\": \"The max data gas allowable per block\"\n        },\n        \"dataGasPriceUpdateFraction\": {\n            \"v\": 2225652,\n            \"d\": \"The denominator used in the exponential when calculating a data gas price\"\n        }\n    },\n    \"gasPrices\": {\n        \"simpleGasPerBlob\": {\n            \"v\": 12000,\n            \"d\": \"The basic gas fee for each blob\"\n        },\n        \"minDataGasPrice\": {\n            \"v\": 1,\n            \"d\": \"The minimum fee per data gas\"\n        },\n        \"kzgPointEvaluationGasPrecompilePrice\": {\n            \"v\": 50000,\n            \"d\": \"The fee associated with the point evaluation precompile\"\n        },\n        \"datahash\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the DATAHASH opcode\"\n        }\n    },\n    \"sharding\": {\n        \"blobCommitmentVersionKzg\": {\n            \"v\": 1,\n            \"d\": \"The number indicated a versioned hash is a KZG commitment\"\n        },\n        \"fieldElementsPerBlob\": {\n            \"v\": 4096,\n            \"d\": \"The number of field elements allowed per blob\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-4895\",\n    \"number\": 4895,\n    \"comment\": \"Beacon chain push withdrawals as operations\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-4895\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"merge\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-5133\",\n    \"number\": 5133,\n    \"comment\": \"Delaying Difficulty Bomb to mid-September 2022\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-5133\",\n    \"status\": \"Draft\",\n    \"minimumHardfork\": \"grayGlacier\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {\n        \"difficultyBombDelay\": {\n            \"v\": 11400000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIPs = void 0;\nexports.EIPs = {\n    1153: require('./1153.json'),\n    1559: require('./1559.json'),\n    2315: require('./2315.json'),\n    2537: require('./2537.json'),\n    2565: require('./2565.json'),\n    2718: require('./2718.json'),\n    2929: require('./2929.json'),\n    2930: require('./2930.json'),\n    3074: require('./3074.json'),\n    3198: require('./3198.json'),\n    3529: require('./3529.json'),\n    3540: require('./3540.json'),\n    3541: require('./3541.json'),\n    3554: require('./3554.json'),\n    3607: require('./3607.json'),\n    3651: require('./3651.json'),\n    3670: require('./3670.json'),\n    3675: require('./3675.json'),\n    3855: require('./3855.json'),\n    3860: require('./3860.json'),\n    4345: require('./4345.json'),\n    4399: require('./4399.json'),\n    4844: require('./4844.json'),\n    4895: require('./4895.json'),\n    5133: require('./5133.json'),\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CustomChain = exports.ConsensusAlgorithm = exports.ConsensusType = exports.Hardfork = exports.Chain = void 0;\nvar Chain;\n(function (Chain) {\n    Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n    Chain[Chain[\"Ropsten\"] = 3] = \"Ropsten\";\n    Chain[Chain[\"Rinkeby\"] = 4] = \"Rinkeby\";\n    Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n    Chain[Chain[\"Sepolia\"] = 11155111] = \"Sepolia\";\n})(Chain = exports.Chain || (exports.Chain = {}));\nvar Hardfork;\n(function (Hardfork) {\n    Hardfork[\"Chainstart\"] = \"chainstart\";\n    Hardfork[\"Homestead\"] = \"homestead\";\n    Hardfork[\"Dao\"] = \"dao\";\n    Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n    Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n    Hardfork[\"Byzantium\"] = \"byzantium\";\n    Hardfork[\"Constantinople\"] = \"constantinople\";\n    Hardfork[\"Petersburg\"] = \"petersburg\";\n    Hardfork[\"Istanbul\"] = \"istanbul\";\n    Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n    Hardfork[\"Berlin\"] = \"berlin\";\n    Hardfork[\"London\"] = \"london\";\n    Hardfork[\"ArrowGlacier\"] = \"arrowGlacier\";\n    Hardfork[\"GrayGlacier\"] = \"grayGlacier\";\n    Hardfork[\"MergeForkIdTransition\"] = \"mergeForkIdTransition\";\n    Hardfork[\"Merge\"] = \"merge\";\n    Hardfork[\"Shanghai\"] = \"shanghai\";\n    Hardfork[\"ShardingForkDev\"] = \"shardingFork\";\n})(Hardfork = exports.Hardfork || (exports.Hardfork = {}));\nvar ConsensusType;\n(function (ConsensusType) {\n    ConsensusType[\"ProofOfStake\"] = \"pos\";\n    ConsensusType[\"ProofOfWork\"] = \"pow\";\n    ConsensusType[\"ProofOfAuthority\"] = \"poa\";\n})(ConsensusType = exports.ConsensusType || (exports.ConsensusType = {}));\nvar ConsensusAlgorithm;\n(function (ConsensusAlgorithm) {\n    ConsensusAlgorithm[\"Ethash\"] = \"ethash\";\n    ConsensusAlgorithm[\"Clique\"] = \"clique\";\n    ConsensusAlgorithm[\"Casper\"] = \"casper\";\n})(ConsensusAlgorithm = exports.ConsensusAlgorithm || (exports.ConsensusAlgorithm = {}));\nvar CustomChain;\n(function (CustomChain) {\n    /**\n     * Polygon (Matic) Mainnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n    /**\n     * Polygon (Matic) Mumbai Testnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n    /**\n     * Arbitrum Rinkeby Testnet\n     *\n     * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n     */\n    CustomChain[\"ArbitrumRinkebyTestnet\"] = \"arbitrum-rinkeby-testnet\";\n    /**\n     * Arbitrum One - mainnet for Arbitrum roll-up\n     *\n     * - [Documentation](https://developer.offchainlabs.com/public-chains)\n     */\n    CustomChain[\"ArbitrumOne\"] = \"arbitrum-one\";\n    /**\n     * xDai EVM sidechain with a native stable token\n     *\n     * - [Documentation](https://www.xdaichain.com/)\n     */\n    CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n    /**\n     * Optimistic Kovan - testnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticKovan\"] = \"optimistic-kovan\";\n    /**\n     * Optimistic Ethereum - mainnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticEthereum\"] = \"optimistic-ethereum\";\n})(CustomChain = exports.CustomChain || (exports.CustomChain = {}));\n//# sourceMappingURL=enums.js.map","module.exports={\n    \"name\": \"arrowGlacier\",\n    \"comment\": \"HF to delay the difficulty bomb\",\n    \"url\": \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md\",\n    \"status\": \"Final\",\n    \"eips\": [4345],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"berlin\",\n    \"comment\": \"HF targeted for July 2020 following the Muir Glacier HF\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2070\",\n    \"status\": \"Final\",\n    \"eips\": [2565, 2929, 2718, 2930]\n}\n","module.exports={\n    \"name\": \"byzantium\",\n    \"comment\": \"Hardfork with new precompiles, instructions and other protocol changes\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-609\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"modexpGquaddivisor\": {\n            \"v\": 20,\n            \"d\": \"Gquaddivisor from modexp precompile for gas calculation\"\n        },\n        \"ecAdd\": {\n            \"v\": 500,\n            \"d\": \"Gas costs for curve addition precompile\"\n        },\n        \"ecMul\": {\n            \"v\": 40000,\n            \"d\": \"Gas costs for curve multiplication precompile\"\n        },\n        \"ecPairing\": {\n            \"v\": 100000,\n            \"d\": \"Base gas costs for curve pairing precompile\"\n        },\n        \"ecPairingWord\": {\n            \"v\": 80000,\n            \"d\": \"Gas costs regarding curve pairing precompile input length\"\n        },\n        \"revert\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the REVERT opcode\"\n        },\n        \"staticcall\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the STATICCALL opcode\"\n        },\n        \"returndatasize\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the RETURNDATASIZE opcode\"\n        },\n        \"returndatacopy\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the RETURNDATACOPY opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {\n        \"minerReward\": {\n            \"v\": \"3000000000000000000\",\n            \"d\": \"the amount a miner get rewarded for mining a block\"\n        },\n        \"difficultyBombDelay\": {\n            \"v\": 3000000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports={\n    \"name\": \"chainstart\",\n    \"comment\": \"Start of the Ethereum main chain\",\n    \"url\": \"\",\n    \"status\": \"\",\n    \"gasConfig\": {\n        \"minGasLimit\": {\n            \"v\": 5000,\n            \"d\": \"Minimum the gas limit may ever be\"\n        },\n        \"gasLimitBoundDivisor\": {\n            \"v\": 1024,\n            \"d\": \"The bound divisor of the gas limit, used in update calculations\"\n        },\n        \"maxRefundQuotient\": {\n            \"v\": 2,\n            \"d\": \"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)\"\n        }\n    },\n    \"gasPrices\": {\n        \"base\": {\n            \"v\": 2,\n            \"d\": \"Gas base cost, used e.g. for ChainID opcode (Istanbul)\"\n        },\n        \"tierStep\": {\n            \"v\": [0, 2, 3, 5, 8, 10, 20],\n            \"d\": \"Once per operation, for a selection of them\"\n        },\n        \"exp\": {\n            \"v\": 10,\n            \"d\": \"Base fee of the EXP opcode\"\n        },\n        \"expByte\": {\n            \"v\": 10,\n            \"d\": \"Times ceil(log256(exponent)) for the EXP instruction\"\n        },\n        \"sha3\": {\n            \"v\": 30,\n            \"d\": \"Base fee of the SHA3 opcode\"\n        },\n        \"sha3Word\": {\n            \"v\": 6,\n            \"d\": \"Once per word of the SHA3 operation's data\"\n        },\n        \"sload\": {\n            \"v\": 50,\n            \"d\": \"Base fee of the SLOAD opcode\"\n        },\n        \"sstoreSet\": {\n            \"v\": 20000,\n            \"d\": \"Once per SSTORE operation if the zeroness changes from zero\"\n        },\n        \"sstoreReset\": {\n            \"v\": 5000,\n            \"d\": \"Once per SSTORE operation if the zeroness does not change from zero\"\n        },\n        \"sstoreRefund\": {\n            \"v\": 15000,\n            \"d\": \"Once per SSTORE operation if the zeroness changes to zero\"\n        },\n        \"jumpdest\": {\n            \"v\": 1,\n            \"d\": \"Base fee of the JUMPDEST opcode\"\n        },\n        \"log\": {\n            \"v\": 375,\n            \"d\": \"Base fee of the LOG opcode\"\n        },\n        \"logData\": {\n            \"v\": 8,\n            \"d\": \"Per byte in a LOG* operation's data\"\n        },\n        \"logTopic\": {\n            \"v\": 375,\n            \"d\": \"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas\"\n        },\n        \"create\": {\n            \"v\": 32000,\n            \"d\": \"Base fee of the CREATE opcode\"\n        },\n        \"call\": {\n            \"v\": 40,\n            \"d\": \"Base fee of the CALL opcode\"\n        },\n        \"callStipend\": {\n            \"v\": 2300,\n            \"d\": \"Free gas given at beginning of call\"\n        },\n        \"callValueTransfer\": {\n            \"v\": 9000,\n            \"d\": \"Paid for CALL when the value transfor is non-zero\"\n        },\n        \"callNewAccount\": {\n            \"v\": 25000,\n            \"d\": \"Paid for CALL when the destination address didn't exist prior\"\n        },\n        \"selfdestructRefund\": {\n            \"v\": 24000,\n            \"d\": \"Refunded following a selfdestruct operation\"\n        },\n        \"memory\": {\n            \"v\": 3,\n            \"d\": \"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL\"\n        },\n        \"quadCoeffDiv\": {\n            \"v\": 512,\n            \"d\": \"Divisor for the quadratic particle of the memory cost equation\"\n        },\n        \"createData\": {\n            \"v\": 200,\n            \"d\": \"\"\n        },\n        \"tx\": {\n            \"v\": 21000,\n            \"d\": \"Per transaction. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"txCreation\": {\n            \"v\": 32000,\n            \"d\": \"The cost of creating a contract via tx\"\n        },\n        \"txDataZero\": {\n            \"v\": 4,\n            \"d\": \"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"txDataNonZero\": {\n            \"v\": 68,\n            \"d\": \"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"copy\": {\n            \"v\": 3,\n            \"d\": \"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added\"\n        },\n        \"ecRecover\": {\n            \"v\": 3000,\n            \"d\": \"\"\n        },\n        \"sha256\": {\n            \"v\": 60,\n            \"d\": \"\"\n        },\n        \"sha256Word\": {\n            \"v\": 12,\n            \"d\": \"\"\n        },\n        \"ripemd160\": {\n            \"v\": 600,\n            \"d\": \"\"\n        },\n        \"ripemd160Word\": {\n            \"v\": 120,\n            \"d\": \"\"\n        },\n        \"identity\": {\n            \"v\": 15,\n            \"d\": \"\"\n        },\n        \"identityWord\": {\n            \"v\": 3,\n            \"d\": \"\"\n        },\n        \"stop\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the STOP opcode\"\n        },\n        \"add\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the ADD opcode\"\n        },\n        \"mul\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the MUL opcode\"\n        },\n        \"sub\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SUB opcode\"\n        },\n        \"div\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the DIV opcode\"\n        },\n        \"sdiv\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the SDIV opcode\"\n        },\n        \"mod\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the MOD opcode\"\n        },\n        \"smod\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the SMOD opcode\"\n        },\n        \"addmod\": {\n            \"v\": 8,\n            \"d\": \"Base fee of the ADDMOD opcode\"\n        },\n        \"mulmod\": {\n            \"v\": 8,\n            \"d\": \"Base fee of the MULMOD opcode\"\n        },\n        \"signextend\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the SIGNEXTEND opcode\"\n        },\n        \"lt\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the LT opcode\"\n        },\n        \"gt\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the GT opcode\"\n        },\n        \"slt\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SLT opcode\"\n        },\n        \"sgt\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SGT opcode\"\n        },\n        \"eq\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the EQ opcode\"\n        },\n        \"iszero\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the ISZERO opcode\"\n        },\n        \"and\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the AND opcode\"\n        },\n        \"or\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the OR opcode\"\n        },\n        \"xor\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the XOR opcode\"\n        },\n        \"not\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the NOT opcode\"\n        },\n        \"byte\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the BYTE opcode\"\n        },\n        \"address\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the ADDRESS opcode\"\n        },\n        \"balance\": {\n            \"v\": 20,\n            \"d\": \"Base fee of the BALANCE opcode\"\n        },\n        \"origin\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the ORIGIN opcode\"\n        },\n        \"caller\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CALLER opcode\"\n        },\n        \"callvalue\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CALLVALUE opcode\"\n        },\n        \"calldataload\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the CALLDATALOAD opcode\"\n        },\n        \"calldatasize\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CALLDATASIZE opcode\"\n        },\n        \"calldatacopy\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the CALLDATACOPY opcode\"\n        },\n        \"codesize\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CODESIZE opcode\"\n        },\n        \"codecopy\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the CODECOPY opcode\"\n        },\n        \"gasprice\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the GASPRICE opcode\"\n        },\n        \"extcodesize\": {\n            \"v\": 20,\n            \"d\": \"Base fee of the EXTCODESIZE opcode\"\n        },\n        \"extcodecopy\": {\n            \"v\": 20,\n            \"d\": \"Base fee of the EXTCODECOPY opcode\"\n        },\n        \"blockhash\": {\n            \"v\": 20,\n            \"d\": \"Base fee of the BLOCKHASH opcode\"\n        },\n        \"coinbase\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the COINBASE opcode\"\n        },\n        \"timestamp\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the TIMESTAMP opcode\"\n        },\n        \"number\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the NUMBER opcode\"\n        },\n        \"difficulty\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the DIFFICULTY opcode\"\n        },\n        \"gaslimit\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the GASLIMIT opcode\"\n        },\n        \"pop\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the POP opcode\"\n        },\n        \"mload\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the MLOAD opcode\"\n        },\n        \"mstore\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the MSTORE opcode\"\n        },\n        \"mstore8\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the MSTORE8 opcode\"\n        },\n        \"sstore\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the SSTORE opcode\"\n        },\n        \"jump\": {\n            \"v\": 8,\n            \"d\": \"Base fee of the JUMP opcode\"\n        },\n        \"jumpi\": {\n            \"v\": 10,\n            \"d\": \"Base fee of the JUMPI opcode\"\n        },\n        \"pc\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the PC opcode\"\n        },\n        \"msize\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the MSIZE opcode\"\n        },\n        \"gas\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the GAS opcode\"\n        },\n        \"push\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the PUSH opcode\"\n        },\n        \"dup\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the DUP opcode\"\n        },\n        \"swap\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SWAP opcode\"\n        },\n        \"callcode\": {\n            \"v\": 40,\n            \"d\": \"Base fee of the CALLCODE opcode\"\n        },\n        \"return\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the RETURN opcode\"\n        },\n        \"invalid\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the INVALID opcode\"\n        },\n        \"selfdestruct\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the SELFDESTRUCT opcode\"\n        }\n    },\n    \"vm\": {\n        \"stackLimit\": {\n            \"v\": 1024,\n            \"d\": \"Maximum size of VM stack allowed\"\n        },\n        \"callCreateDepth\": {\n            \"v\": 1024,\n            \"d\": \"Maximum depth of call/create stack\"\n        },\n        \"maxExtraDataSize\": {\n            \"v\": 32,\n            \"d\": \"Maximum size extra data may be after Genesis\"\n        }\n    },\n    \"pow\": {\n        \"minimumDifficulty\": {\n            \"v\": 131072,\n            \"d\": \"The minimum that the difficulty may ever be\"\n        },\n        \"difficultyBoundDivisor\": {\n            \"v\": 2048,\n            \"d\": \"The bound divisor of the difficulty, used in the update calculations\"\n        },\n        \"durationLimit\": {\n            \"v\": 13,\n            \"d\": \"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not\"\n        },\n        \"epochDuration\": {\n            \"v\": 30000,\n            \"d\": \"Duration between proof-of-work epochs\"\n        },\n        \"timebombPeriod\": {\n            \"v\": 100000,\n            \"d\": \"Exponential difficulty timebomb period\"\n        },\n        \"minerReward\": {\n            \"v\": \"5000000000000000000\",\n            \"d\": \"the amount a miner get rewarded for mining a block\"\n        },\n        \"difficultyBombDelay\": {\n            \"v\": 0,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports={\n    \"name\": \"constantinople\",\n    \"comment\": \"Postponed hardfork including EIP-1283 (SSTORE gas metering changes)\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1013\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"netSstoreNoopGas\": {\n            \"v\": 200,\n            \"d\": \"Once per SSTORE operation if the value doesn't change\"\n        },\n        \"netSstoreInitGas\": {\n            \"v\": 20000,\n            \"d\": \"Once per SSTORE operation from clean zero\"\n        },\n        \"netSstoreCleanGas\": {\n            \"v\": 5000,\n            \"d\": \"Once per SSTORE operation from clean non-zero\"\n        },\n        \"netSstoreDirtyGas\": {\n            \"v\": 200,\n            \"d\": \"Once per SSTORE operation from dirty\"\n        },\n        \"netSstoreClearRefund\": {\n            \"v\": 15000,\n            \"d\": \"Once per SSTORE operation for clearing an originally existing storage slot\"\n        },\n        \"netSstoreResetRefund\": {\n            \"v\": 4800,\n            \"d\": \"Once per SSTORE operation for resetting to the original non-zero value\"\n        },\n        \"netSstoreResetClearRefund\": {\n            \"v\": 19800,\n            \"d\": \"Once per SSTORE operation for resetting to the original zero value\"\n        },\n        \"shl\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SHL opcode\"\n        },\n        \"shr\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SHR opcode\"\n        },\n        \"sar\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SAR opcode\"\n        },\n        \"extcodehash\": {\n            \"v\": 400,\n            \"d\": \"Base fee of the EXTCODEHASH opcode\"\n        },\n        \"create2\": {\n            \"v\": 32000,\n            \"d\": \"Base fee of the CREATE2 opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {\n        \"minerReward\": {\n            \"v\": \"2000000000000000000\",\n            \"d\": \"The amount a miner gets rewarded for mining a block\"\n        },\n        \"difficultyBombDelay\": {\n            \"v\": 5000000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports={\n    \"name\": \"dao\",\n    \"comment\": \"DAO rescue hardfork\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-779\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"grayGlacier\",\n    \"comment\": \"Delaying the difficulty bomb to Mid September 2022\",\n    \"url\": \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md\",\n    \"status\": \"Draft\",\n    \"eips\": [5133],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"homestead\",\n    \"comment\": \"Homestead hardfork with protocol and network changes\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-606\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"delegatecall\": {\n            \"v\": 40,\n            \"d\": \"Base fee of the DELEGATECALL opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hardforks = void 0;\nexports.hardforks = {\n    chainstart: require('./chainstart.json'),\n    homestead: require('./homestead.json'),\n    dao: require('./dao.json'),\n    tangerineWhistle: require('./tangerineWhistle.json'),\n    spuriousDragon: require('./spuriousDragon.json'),\n    byzantium: require('./byzantium.json'),\n    constantinople: require('./constantinople.json'),\n    petersburg: require('./petersburg.json'),\n    istanbul: require('./istanbul.json'),\n    muirGlacier: require('./muirGlacier.json'),\n    berlin: require('./berlin.json'),\n    london: require('./london.json'),\n    shanghai: require('./shanghai.json'),\n    arrowGlacier: require('./arrowGlacier.json'),\n    grayGlacier: require('./grayGlacier.json'),\n    mergeForkIdTransition: require('./mergeForkIdTransition.json'),\n    merge: require('./merge.json'),\n    shardingFork: require('./sharding.json'),\n};\n//# sourceMappingURL=index.js.map","module.exports={\n    \"name\": \"istanbul\",\n    \"comment\": \"HF targeted for December 2019 following the Constantinople/Petersburg HF\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1679\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"blake2Round\": {\n            \"v\": 1,\n            \"d\": \"Gas cost per round for the Blake2 F precompile\"\n        },\n        \"ecAdd\": {\n            \"v\": 150,\n            \"d\": \"Gas costs for curve addition precompile\"\n        },\n        \"ecMul\": {\n            \"v\": 6000,\n            \"d\": \"Gas costs for curve multiplication precompile\"\n        },\n        \"ecPairing\": {\n            \"v\": 45000,\n            \"d\": \"Base gas costs for curve pairing precompile\"\n        },\n        \"ecPairingWord\": {\n            \"v\": 34000,\n            \"d\": \"Gas costs regarding curve pairing precompile input length\"\n        },\n        \"txDataNonZero\": {\n            \"v\": 16,\n            \"d\": \"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"sstoreSentryGasEIP2200\": {\n            \"v\": 2300,\n            \"d\": \"Minimum gas required to be present for an SSTORE call, not consumed\"\n        },\n        \"sstoreNoopGasEIP2200\": {\n            \"v\": 800,\n            \"d\": \"Once per SSTORE operation if the value doesn't change\"\n        },\n        \"sstoreDirtyGasEIP2200\": {\n            \"v\": 800,\n            \"d\": \"Once per SSTORE operation if a dirty value is changed\"\n        },\n        \"sstoreInitGasEIP2200\": {\n            \"v\": 20000,\n            \"d\": \"Once per SSTORE operation from clean zero to non-zero\"\n        },\n        \"sstoreInitRefundEIP2200\": {\n            \"v\": 19200,\n            \"d\": \"Once per SSTORE operation for resetting to the original zero value\"\n        },\n        \"sstoreCleanGasEIP2200\": {\n            \"v\": 5000,\n            \"d\": \"Once per SSTORE operation from clean non-zero to something else\"\n        },\n        \"sstoreCleanRefundEIP2200\": {\n            \"v\": 4200,\n            \"d\": \"Once per SSTORE operation for resetting to the original non-zero value\"\n        },\n        \"sstoreClearRefundEIP2200\": {\n            \"v\": 15000,\n            \"d\": \"Once per SSTORE operation for clearing an originally existing storage slot\"\n        },\n        \"balance\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the BALANCE opcode\"\n        },\n        \"extcodehash\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the EXTCODEHASH opcode\"\n        },\n        \"chainid\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CHAINID opcode\"\n        },\n        \"selfbalance\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the SELFBALANCE opcode\"\n        },\n        \"sload\": {\n            \"v\": 800,\n            \"d\": \"Base fee of the SLOAD opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"london\",\n    \"comment\": \"HF targeted for July 2021 following the Berlin fork\",\n    \"url\": \"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md\",\n    \"status\": \"Final\",\n    \"eips\": [1559, 3198, 3529, 3541]\n}\n","module.exports={\n    \"name\": \"merge\",\n    \"comment\": \"Hardfork to upgrade the consensus mechanism to Proof-of-Stake\",\n    \"url\": \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md\",\n    \"status\": \"Final\",\n    \"consensus\": {\n        \"type\": \"pos\",\n        \"algorithm\": \"casper\",\n        \"casper\": {}\n    },\n    \"eips\": [3675, 4399]\n}\n","module.exports={\n    \"name\": \"mergeForkIdTransition\",\n    \"comment\": \"Pre-merge hardfork to fork off non-upgraded clients\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3675\",\n    \"status\": \"Draft\",\n    \"eips\": []\n}\n","module.exports={\n    \"name\": \"muirGlacier\",\n    \"comment\": \"HF to delay the difficulty bomb\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2384\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {\n        \"difficultyBombDelay\": {\n            \"v\": 9000000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports={\n    \"name\": \"petersburg\",\n    \"comment\": \"Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1716\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"netSstoreNoopGas\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreInitGas\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreCleanGas\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreDirtyGas\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreClearRefund\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreResetRefund\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreResetClearRefund\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"shanghai\",\n    \"comment\": \"Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode\",\n    \"url\": \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md\",\n    \"status\": \"Final\",\n    \"eips\": [3651, 3855, 3860, 4895]\n}\n","module.exports={\n    \"name\": \"shardingFork\",\n    \"comment\": \"Internal hardfork to test proto-danksharding (do not use in production)\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-4844\",\n    \"status\": \"Experimental\",\n    \"eips\": [4844]\n}\n","module.exports={\n    \"name\": \"spuriousDragon\",\n    \"comment\": \"HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-607\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"expByte\": {\n            \"v\": 50,\n            \"d\": \"Times ceil(log256(exponent)) for the EXP instruction\"\n        }\n    },\n    \"vm\": {\n        \"maxCodeSize\": {\n            \"v\": 24576,\n            \"d\": \"Maximum length of contract code\"\n        }\n    },\n    \"pow\": {}\n}\n","/*\n\tISC License\n\n\tCopyright (c) 2019, Pierre-Louis Despaigne\n\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\nconst CID = require('cids');\n\n// Label's max length in DNS (https://tools.ietf.org/html/rfc1034#page-7)\nconst dnsLabelMaxLength = 63;\n\n/**\n * Take any ipfsHash and convert it to DNS-compatible CID\n * @param {string} ipfsHash a regular ipfs hash either a cid v0 or v1\n * @return {string} the resulting ipfs hash as a cid v1\n */\nconst cidForWeb = (ipfsHash) => {\n\tlet cid = new CID(ipfsHash);\n\tif (cid.version === 0) {\n\t\tcid = cid.toV1();\n\t}\n  let dnsLabel = cid.toString('base32');\n  if (dnsLabel.length > dnsLabelMaxLength) {\n    const b36 = cid.toString('base36');\n    if (b36.length <= dnsLabelMaxLength) {\n      return b36;\n    }\n    throw new TypeError ('CID is longer than DNS limit of 63 characters and is not compatible with public gateways');\n  }\n\treturn dnsLabel;\n}\n\nexports.cidForWeb = cidForWeb;\n\n\n/**\n * Take any ipfsHash and convert it to a CID v1 encoded in base32.\n * @param {string} ipfsHash a regular ipfs hash either a cid v0 or v1 (v1 will remain unchanged)\n * @return {string} the resulting ipfs hash as a cid v1\n */\nconst cidV0ToV1Base32 = (ipfsHash) => {\n\tlet cid = new CID(ipfsHash);\n\tif (cid.version === 0) {\n\t\tcid = cid.toV1();\n\t}\n\treturn cid.toString('base32');\n}\n\nexports.cidV0ToV1Base32 = cidV0ToV1Base32;\n","module.exports={\n    \"name\": \"tangerineWhistle\",\n    \"comment\": \"Hardfork with gas cost changes for IO-heavy operations\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-608\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"sload\": {\n            \"v\": 200,\n            \"d\": \"Once per SLOAD operation\"\n        },\n        \"call\": {\n            \"v\": 700,\n            \"d\": \"Once per CALL operation & message call transaction\"\n        },\n        \"extcodesize\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the EXTCODESIZE opcode\"\n        },\n        \"extcodecopy\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the EXTCODECOPY opcode\"\n        },\n        \"balance\": {\n            \"v\": 400,\n            \"d\": \"Base fee of the BALANCE opcode\"\n        },\n        \"delegatecall\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the DELEGATECALL opcode\"\n        },\n        \"callcode\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the CALLCODE opcode\"\n        },\n        \"selfdestruct\": {\n            \"v\": 5000,\n            \"d\": \"Base fee of the SELFDESTRUCT opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./common\"), exports);\n__exportStar(require(\"./enums\"), exports);\n__exportStar(require(\"./types\"), exports);\n__exportStar(require(\"./utils\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseGethGenesis = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst enums_1 = require(\"./enums\");\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce) {\n    if (!nonce || nonce === '0x0') {\n        return '0x0000000000000000';\n    }\n    if ((0, util_1.isHexPrefixed)(nonce)) {\n        return '0x' + (0, util_1.stripHexPrefix)(nonce).padStart(16, '0');\n    }\n    return '0x' + nonce.padStart(16, '0');\n}\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json, mergeForkIdPostMerge = true) {\n    const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas, } = json;\n    let { extraData, timestamp, nonce } = json;\n    const genesisTimestamp = Number(timestamp);\n    const { chainId } = config;\n    // geth is not strictly putting empty fields with a 0x prefix\n    if (extraData === '') {\n        extraData = '0x';\n    }\n    // geth may use number for timestamp\n    if (!(0, util_1.isHexPrefixed)(timestamp)) {\n        timestamp = (0, util_1.intToHex)(parseInt(timestamp));\n    }\n    // geth may not give us a nonce strictly formatted to an 8 byte hex string\n    if (nonce.length !== 18) {\n        nonce = formatNonce(nonce);\n    }\n    // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n    // but have different configuration parameters in geth genesis parameters\n    if (config.eip155Block !== config.eip158Block) {\n        throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');\n    }\n    const params = {\n        name,\n        chainId,\n        networkId: chainId,\n        genesis: {\n            timestamp,\n            gasLimit: parseInt(gasLimit),\n            difficulty: parseInt(difficulty),\n            nonce,\n            extraData,\n            mixHash,\n            coinbase,\n            baseFeePerGas,\n        },\n        hardfork: undefined,\n        hardforks: [],\n        bootstrapNodes: [],\n        consensus: config.clique !== undefined\n            ? {\n                type: 'poa',\n                algorithm: 'clique',\n                clique: {\n                    // The recent geth genesis seems to be using blockperiodseconds\n                    // and epochlength for clique specification\n                    // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n                    period: config.clique.period ?? config.clique.blockperiodseconds,\n                    epoch: config.clique.epoch ?? config.clique.epochlength,\n                },\n            }\n            : {\n                type: 'pow',\n                algorithm: 'ethash',\n                ethash: {},\n            },\n    };\n    const forkMap = {\n        [enums_1.Hardfork.Homestead]: { name: 'homesteadBlock' },\n        [enums_1.Hardfork.Dao]: { name: 'daoForkBlock' },\n        [enums_1.Hardfork.TangerineWhistle]: { name: 'eip150Block' },\n        [enums_1.Hardfork.SpuriousDragon]: { name: 'eip155Block' },\n        [enums_1.Hardfork.Byzantium]: { name: 'byzantiumBlock' },\n        [enums_1.Hardfork.Constantinople]: { name: 'constantinopleBlock' },\n        [enums_1.Hardfork.Petersburg]: { name: 'petersburgBlock' },\n        [enums_1.Hardfork.Istanbul]: { name: 'istanbulBlock' },\n        [enums_1.Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\n        [enums_1.Hardfork.Berlin]: { name: 'berlinBlock' },\n        [enums_1.Hardfork.London]: { name: 'londonBlock' },\n        [enums_1.Hardfork.MergeForkIdTransition]: { name: 'mergeForkBlock', postMerge: mergeForkIdPostMerge },\n        [enums_1.Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\n        [enums_1.Hardfork.ShardingForkDev]: { name: 'shardingForkTime', postMerge: true, isTimestamp: true },\n    };\n    // forkMapRev is the map from config field name to Hardfork\n    const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n        acc[forkMap[elem].name] = elem;\n        return acc;\n    }, {});\n    const configHardforkNames = Object.keys(config).filter((key) => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);\n    params.hardforks = configHardforkNames\n        .map((nameBlock) => ({\n        name: forkMapRev[nameBlock],\n        block: forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== 'number'\n            ? null\n            : config[nameBlock],\n        timestamp: forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === 'number'\n            ? config[nameBlock]\n            : undefined,\n    }))\n        .filter((fork) => fork.block !== null || fork.timestamp !== undefined);\n    params.hardforks.sort(function (a, b) {\n        return (a.block ?? Infinity) - (b.block ?? Infinity);\n    });\n    params.hardforks.sort(function (a, b) {\n        return (a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp);\n    });\n    if (config.terminalTotalDifficulty !== undefined) {\n        // Following points need to be considered for placement of merge hf\n        // - Merge hardfork can't be placed at genesis\n        // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n        // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n        //   necessary for e.g. withdrawals\n        const mergeConfig = {\n            name: enums_1.Hardfork.Merge,\n            ttd: config.terminalTotalDifficulty,\n            block: null,\n        };\n        // Merge hardfork has to be placed before first hardfork that is dependent on merge\n        const postMergeIndex = params.hardforks.findIndex((hf) => forkMap[hf.name]?.postMerge === true);\n        if (postMergeIndex !== -1) {\n            params.hardforks.splice(postMergeIndex, 0, mergeConfig);\n        }\n        else {\n            params.hardforks.push(mergeConfig);\n        }\n    }\n    const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n    params.hardfork = latestHardfork?.name;\n    params.hardforks.unshift({ name: enums_1.Hardfork.Chainstart, block: 0 });\n    return params;\n}\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nfunction parseGethGenesis(json, name, mergeForkIdPostMerge) {\n    try {\n        if (['config', 'difficulty', 'gasLimit', 'alloc'].some((field) => !(field in json))) {\n            throw new Error('Invalid format, expected geth genesis fields missing');\n        }\n        if (name !== undefined) {\n            json.name = name;\n        }\n        return parseGethParams(json, mergeForkIdPostMerge);\n    }\n    catch (e) {\n        throw new Error(`Error parsing parameters file: ${e.message}`);\n    }\n}\nexports.parseGethGenesis = parseGethGenesis;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTransaction = void 0;\nconst common_1 = require(\"@ethereumjs/common\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst types_1 = require(\"./types\");\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nclass BaseTransaction {\n    constructor(txData, opts) {\n        this.cache = {\n            hash: undefined,\n            dataFee: undefined,\n        };\n        /**\n         * List of tx type defining EIPs,\n         * e.g. 1559 (fee market) and 2930 (access lists)\n         * for FeeMarketEIP1559Transaction objects\n         */\n        this.activeCapabilities = [];\n        /**\n         * The default chain the tx falls back to if no Common\n         * is provided and if the chain can't be derived from\n         * a passed in chainId (only EIP-2718 typed txs) or\n         * EIP-155 signature (legacy txs).\n         *\n         * @hidden\n         */\n        this.DEFAULT_CHAIN = common_1.Chain.Mainnet;\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        this.DEFAULT_HARDFORK = common_1.Hardfork.Merge;\n        const { nonce, gasLimit, to, value, data, v, r, s, type } = txData;\n        this._type = Number((0, util_1.bufferToBigInt)((0, util_1.toBuffer)(type)));\n        this.txOptions = opts;\n        const toB = (0, util_1.toBuffer)(to === '' ? '0x' : to);\n        const vB = (0, util_1.toBuffer)(v === '' ? '0x' : v);\n        const rB = (0, util_1.toBuffer)(r === '' ? '0x' : r);\n        const sB = (0, util_1.toBuffer)(s === '' ? '0x' : s);\n        this.nonce = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(nonce === '' ? '0x' : nonce));\n        this.gasLimit = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(gasLimit === '' ? '0x' : gasLimit));\n        this.to = toB.length > 0 ? new util_1.Address(toB) : undefined;\n        this.value = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(value === '' ? '0x' : value));\n        this.data = (0, util_1.toBuffer)(data === '' ? '0x' : data);\n        this.v = vB.length > 0 ? (0, util_1.bufferToBigInt)(vB) : undefined;\n        this.r = rB.length > 0 ? (0, util_1.bufferToBigInt)(rB) : undefined;\n        this.s = sB.length > 0 ? (0, util_1.bufferToBigInt)(sB) : undefined;\n        this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });\n        // geth limits gasLimit to 2^64-1\n        this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);\n        // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n        this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);\n    }\n    /**\n     * Returns the transaction type.\n     *\n     * Note: legacy txs will return tx type `0`.\n     */\n    get type() {\n        return this._type;\n    }\n    /**\n     * Checks if a tx type defining capability is active\n     * on a tx, for example the EIP-1559 fee market mechanism\n     * or the EIP-2930 access list feature.\n     *\n     * Note that this is different from the tx type itself,\n     * so EIP-2930 access lists can very well be active\n     * on an EIP-1559 tx for example.\n     *\n     * This method can be useful for feature checks if the\n     * tx type is unknown (e.g. when instantiated with\n     * the tx factory).\n     *\n     * See `Capabilites` in the `types` module for a reference\n     * on all supported capabilities.\n     */\n    supports(capability) {\n        return this.activeCapabilities.includes(capability);\n    }\n    validate(stringError = false) {\n        const errors = [];\n        if (this.getBaseFee() > this.gasLimit) {\n            errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);\n        }\n        if (this.isSigned() && !this.verifySignature()) {\n            errors.push('Invalid Signature');\n        }\n        return stringError ? errors : errors.length === 0;\n    }\n    _validateYParity() {\n        const { v } = this;\n        if (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {\n            const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n            throw new Error(msg);\n        }\n    }\n    /**\n     * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n     * Reasoning: https://ethereum.stackexchange.com/a/55728\n     */\n    _validateHighS() {\n        const { s } = this;\n        if (this.common.gteHardfork('homestead') && s !== undefined && s > util_1.SECP256K1_ORDER_DIV_2) {\n            const msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n            throw new Error(msg);\n        }\n    }\n    /**\n     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */\n    getBaseFee() {\n        const txFee = this.common.param('gasPrices', 'tx');\n        let fee = this.getDataFee();\n        if (txFee)\n            fee += txFee;\n        if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n            const txCreationFee = this.common.param('gasPrices', 'txCreation');\n            if (txCreationFee)\n                fee += txCreationFee;\n        }\n        return fee;\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        const txDataZero = this.common.param('gasPrices', 'txDataZero');\n        const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n        let cost = BigInt(0);\n        for (let i = 0; i < this.data.length; i++) {\n            this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n        }\n        if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n            const dataLength = BigInt(Math.ceil(this.data.length / 32));\n            const initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;\n            cost += initCodeCost;\n        }\n        return cost;\n    }\n    /**\n     * If the tx's `to` is to the creation address\n     */\n    toCreationAddress() {\n        return this.to === undefined || this.to.buf.length === 0;\n    }\n    isSigned() {\n        const { v, r, s } = this;\n        if (v === undefined || r === undefined || s === undefined) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * Determines if the signature is valid\n     */\n    verifySignature() {\n        try {\n            // Main signature verification is done in `getSenderPublicKey()`\n            const publicKey = this.getSenderPublicKey();\n            return (0, util_1.unpadBuffer)(publicKey).length !== 0;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    /**\n     * Returns the sender's address\n     */\n    getSenderAddress() {\n        return new util_1.Address((0, util_1.publicToAddress)(this.getSenderPublicKey()));\n    }\n    /**\n     * Signs a transaction.\n     *\n     * Note that the signed tx is returned as a new object,\n     * use as follows:\n     * ```javascript\n     * const signedTx = tx.sign(privateKey)\n     * ```\n     */\n    sign(privateKey) {\n        if (privateKey.length !== 32) {\n            const msg = this._errorMsg('Private key must be 32 bytes in length.');\n            throw new Error(msg);\n        }\n        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n        // and want to recreate a signature (where EIP155 should be applied)\n        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n        // 2021-06-23\n        let hackApplied = false;\n        if (this.type === 0 &&\n            this.common.gteHardfork('spuriousDragon') &&\n            !this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            hackApplied = true;\n        }\n        const msgHash = this.getMessageToSign(true);\n        const { v, r, s } = (0, util_1.ecsign)(msgHash, privateKey);\n        const tx = this._processSignature(v, r, s);\n        // Hack part 2\n        if (hackApplied) {\n            const index = this.activeCapabilities.indexOf(types_1.Capability.EIP155ReplayProtection);\n            if (index > -1) {\n                this.activeCapabilities.splice(index, 1);\n            }\n        }\n        return tx;\n    }\n    /**\n     * Does chain ID checks on common and returns a common\n     * to be used on instantiation\n     * @hidden\n     *\n     * @param common - {@link Common} instance from tx options\n     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n     */\n    _getCommon(common, chainId) {\n        // Chain ID provided\n        if (chainId !== undefined) {\n            const chainIdBigInt = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(chainId));\n            if (common) {\n                if (common.chainId() !== chainIdBigInt) {\n                    const msg = this._errorMsg('The chain ID does not match the chain ID of Common');\n                    throw new Error(msg);\n                }\n                // Common provided, chain ID does match\n                // -> Return provided Common\n                return common.copy();\n            }\n            else {\n                if (common_1.Common.isSupportedChainId(chainIdBigInt)) {\n                    // No Common, chain ID supported by Common\n                    // -> Instantiate Common with chain ID\n                    return new common_1.Common({ chain: chainIdBigInt, hardfork: this.DEFAULT_HARDFORK });\n                }\n                else {\n                    // No Common, chain ID not supported by Common\n                    // -> Instantiate custom Common derived from DEFAULT_CHAIN\n                    return common_1.Common.custom({\n                        name: 'custom-chain',\n                        networkId: chainIdBigInt,\n                        chainId: chainIdBigInt,\n                    }, { baseChain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK });\n                }\n            }\n        }\n        else {\n            // No chain ID provided\n            // -> return Common provided or create new default Common\n            return (common?.copy() ?? new common_1.Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK }));\n        }\n    }\n    /**\n     * Validates that an object with BigInt values cannot exceed the specified bit limit.\n     * @param values Object containing string keys and BigInt values\n     * @param bits Number of bits to check (64 or 256)\n     * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n     */\n    _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {\n        for (const [key, value] of Object.entries(values)) {\n            switch (bits) {\n                case 64:\n                    if (cannotEqual) {\n                        if (value !== undefined && value >= util_1.MAX_UINT64) {\n                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    else {\n                        if (value !== undefined && value > util_1.MAX_UINT64) {\n                            const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    break;\n                case 256:\n                    if (cannotEqual) {\n                        if (value !== undefined && value >= util_1.MAX_INTEGER) {\n                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    else {\n                        if (value !== undefined && value > util_1.MAX_INTEGER) {\n                            const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);\n                            throw new Error(msg);\n                        }\n                    }\n                    break;\n                default: {\n                    const msg = this._errorMsg('unimplemented bits value');\n                    throw new Error(msg);\n                }\n            }\n        }\n    }\n    static _validateNotArray(values) {\n        const txDataKeys = [\n            'nonce',\n            'gasPrice',\n            'gasLimit',\n            'to',\n            'value',\n            'data',\n            'v',\n            'r',\n            's',\n            'type',\n            'baseFee',\n            'maxFeePerGas',\n            'chainId',\n        ];\n        for (const [key, value] of Object.entries(values)) {\n            if (txDataKeys.includes(key)) {\n                if (Array.isArray(value)) {\n                    throw new Error(`${key} cannot be an array`);\n                }\n            }\n        }\n    }\n    /**\n     * Returns the shared error postfix part for _error() method\n     * tx type implementations.\n     */\n    _getSharedErrorPostfix() {\n        let hash = '';\n        try {\n            hash = this.isSigned() ? (0, util_1.bufferToHex)(this.hash()) : 'not available (unsigned)';\n        }\n        catch (e) {\n            hash = 'error';\n        }\n        let isSigned = '';\n        try {\n            isSigned = this.isSigned().toString();\n        }\n        catch (e) {\n            hash = 'error';\n        }\n        let hf = '';\n        try {\n            hf = this.common.hardfork();\n        }\n        catch (e) {\n            hf = 'error';\n        }\n        let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n        postfix += `signed=${isSigned} hf=${hf}`;\n        return postfix;\n    }\n}\nexports.BaseTransaction = BaseTransaction;\n//# sourceMappingURL=baseTransaction.js.map","\"use strict\";\n/** EIP4844 constants */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BYTES_PER_FIELD_ELEMENT = exports.FIELD_ELEMENTS_PER_BLOB = exports.MAX_TX_WRAP_KZG_COMMITMENTS = exports.LIMIT_BLOBS_PER_TX = exports.MAX_VERSIONED_HASHES_LIST_SIZE = exports.MAX_ACCESS_LIST_SIZE = exports.MAX_CALLDATA_SIZE = void 0;\nexports.MAX_CALLDATA_SIZE = 16777216; // 2 ** 24\nexports.MAX_ACCESS_LIST_SIZE = 16777216; // 2 ** 24\nexports.MAX_VERSIONED_HASHES_LIST_SIZE = 16777216; // 2 ** 24\nexports.LIMIT_BLOBS_PER_TX = 16777216; // 2 ** 24\nexports.MAX_TX_WRAP_KZG_COMMITMENTS = 16777216; // 2 ** 24\nexports.FIELD_ELEMENTS_PER_BLOB = 4096; // This is also in the Common 4844 parameters but needed here since types can't access Common params\nexports.BYTES_PER_FIELD_ELEMENT = 32;\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FeeMarketEIP1559Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst baseTransaction_1 = require(\"./baseTransaction\");\nconst util_2 = require(\"./util\");\nconst TRANSACTION_TYPE = 2;\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nclass FeeMarketEIP1559Transaction extends baseTransaction_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: TRANSACTION_TYPE }, opts);\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        this.DEFAULT_HARDFORK = 'london';\n        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        if (this.common.isActivatedEIP(1559) === false) {\n            throw new Error('EIP-1559 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);\n        // Populate the access list fields\n        const accessListData = util_2.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_2.AccessLists.verifyAccessList(this.accessList);\n        this.maxFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n        this.maxPriorityFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n        this._validateCannotExceedMaxInteger({\n            maxFeePerGas: this.maxFeePerGas,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        });\n        baseTransaction_1.BaseTransaction._validateNotArray(txData);\n        if (this.gasLimit * this.maxFeePerGas > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n            throw new Error(msg);\n        }\n        this._validateYParity();\n        this._validateHighS();\n        if (this.common.isActivatedEIP(3860)) {\n            (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);\n        }\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new FeeMarketEIP1559Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n            throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n                .slice(0, 1)\n                .toString('hex')}`);\n        }\n        const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(serialized.slice(1)));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        if (values.length !== 9 && values.length !== 12) {\n            throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n        }\n        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s,] = values;\n        this._validateNotArray({ chainId, v });\n        (0, util_1.validateNoLeadingZeroes)({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s });\n        return new FeeMarketEIP1559Transaction({\n            chainId: (0, util_1.bufferToBigInt)(chainId),\n            nonce,\n            maxPriorityFeePerGas,\n            maxFeePerGas,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? [],\n            v: v !== undefined ? (0, util_1.bufferToBigInt)(v) : undefined,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        let cost = super.getDataFee();\n        cost += BigInt(util_2.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: cost,\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return cost;\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n    getUpfrontCost(baseFee = BigInt(0)) {\n        const prio = this.maxPriorityFeePerGas;\n        const maxBase = this.maxFeePerGas - baseFee;\n        const inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n        const gasPrice = inclusionFeePerGas + baseFee;\n        return this.gasLimit * gasPrice + this.value;\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     *\n     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBuffer)(this.chainId),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.maxPriorityFeePerGas),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.maxFeePerGas),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-1559 transaction.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    serialize() {\n        const base = this.raw();\n        return Buffer.concat([\n            TRANSACTION_TYPE_BUFFER,\n            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),\n        ]);\n    }\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */\n    getMessageToSign(hashMessage = true) {\n        const base = this.raw().slice(0, 9);\n        const message = Buffer.concat([\n            TRANSACTION_TYPE_BUFFER,\n            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),\n        ]);\n        if (hashMessage) {\n            return Buffer.from((0, keccak_1.keccak256)(message));\n        }\n        else {\n            return message;\n        }\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n            }\n            return this.cache.hash;\n        }\n        return Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        return this.getMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n            throw new Error(msg);\n        }\n        const msgHash = this.getMessageToVerifySignature();\n        const { v, r, s } = this;\n        this._validateHighS();\n        try {\n            return (0, util_1.ecrecover)(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign\n            (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s));\n        }\n        catch (e) {\n            const msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    }\n    _processSignature(v, r, s) {\n        const opts = { ...this.txOptions, common: this.common };\n        return FeeMarketEIP1559Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - BigInt(27),\n            r: (0, util_1.bufferToBigInt)(r),\n            s: (0, util_1.bufferToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    toJSON() {\n        const accessListJSON = util_2.AccessLists.getAccessListJSON(this.accessList);\n        return {\n            chainId: (0, util_1.bigIntToHex)(this.chainId),\n            nonce: (0, util_1.bigIntToHex)(this.nonce),\n            maxPriorityFeePerGas: (0, util_1.bigIntToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0, util_1.bigIntToHex)(this.maxFeePerGas),\n            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, util_1.bigIntToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return `${msg} (${this.errorStr()})`;\n    }\n}\nexports.FeeMarketEIP1559Transaction = FeeMarketEIP1559Transaction;\n//# sourceMappingURL=eip1559Transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccessListEIP2930Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst baseTransaction_1 = require(\"./baseTransaction\");\nconst util_2 = require(\"./util\");\nconst TRANSACTION_TYPE = 1;\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nclass AccessListEIP2930Transaction extends baseTransaction_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: TRANSACTION_TYPE }, opts);\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        this.DEFAULT_HARDFORK = 'berlin';\n        const { chainId, accessList, gasPrice } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        // EIP-2718 check is done in Common\n        if (!this.common.isActivatedEIP(2930)) {\n            throw new Error('EIP-2930 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);\n        // Populate the access list fields\n        const accessListData = util_2.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_2.AccessLists.verifyAccessList(this.accessList);\n        this.gasPrice = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(gasPrice === '' ? '0x' : gasPrice));\n        this._validateCannotExceedMaxInteger({\n            gasPrice: this.gasPrice,\n        });\n        baseTransaction_1.BaseTransaction._validateNotArray(txData);\n        if (this.gasPrice * this.gasLimit > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n            throw new Error(msg);\n        }\n        this._validateYParity();\n        this._validateHighS();\n        if (this.common.isActivatedEIP(3860)) {\n            (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);\n        }\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * v, r, s }\n     *\n     * Notes:\n     * - `chainId` will be set automatically if not provided\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new AccessListEIP2930Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n            throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n                .slice(0, 1)\n                .toString('hex')}`);\n        }\n        const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized.slice(1))));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input: must be array');\n        }\n        return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        if (values.length !== 8 && values.length !== 11) {\n            throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n        }\n        const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n        this._validateNotArray({ chainId, v });\n        (0, util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });\n        const emptyAccessList = [];\n        return new AccessListEIP2930Transaction({\n            chainId: (0, util_1.bufferToBigInt)(chainId),\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            accessList: accessList ?? emptyAccessList,\n            v: v !== undefined ? (0, util_1.bufferToBigInt)(v) : undefined,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        let cost = super.getDataFee();\n        cost += BigInt(util_2.AccessLists.getDataFeeEIP2930(this.accessList, this.common));\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: cost,\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return cost;\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     *\n     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBuffer)(this.chainId),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.value),\n            this.data,\n            this.accessList,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-2930 transaction.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n    serialize() {\n        const base = this.raw();\n        return Buffer.concat([\n            TRANSACTION_TYPE_BUFFER,\n            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),\n        ]);\n    }\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */\n    getMessageToSign(hashMessage = true) {\n        const base = this.raw().slice(0, 8);\n        const message = Buffer.concat([\n            TRANSACTION_TYPE_BUFFER,\n            Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(base))),\n        ]);\n        if (hashMessage) {\n            return Buffer.from((0, keccak_1.keccak256)(message));\n        }\n        else {\n            return message;\n        }\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n            }\n            return this.cache.hash;\n        }\n        return Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        return this.getMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n            throw new Error(msg);\n        }\n        const msgHash = this.getMessageToVerifySignature();\n        const { v, r, s } = this;\n        this._validateHighS();\n        try {\n            return (0, util_1.ecrecover)(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign\n            (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s));\n        }\n        catch (e) {\n            const msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    }\n    _processSignature(v, r, s) {\n        const opts = { ...this.txOptions, common: this.common };\n        return AccessListEIP2930Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - BigInt(27),\n            r: (0, util_1.bufferToBigInt)(r),\n            s: (0, util_1.bufferToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    toJSON() {\n        const accessListJSON = util_2.AccessLists.getAccessListJSON(this.accessList);\n        return {\n            chainId: (0, util_1.bigIntToHex)(this.chainId),\n            nonce: (0, util_1.bigIntToHex)(this.nonce),\n            gasPrice: (0, util_1.bigIntToHex)(this.gasPrice),\n            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, util_1.bigIntToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,\n        };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n        errorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return `${msg} (${this.errorStr()})`;\n    }\n}\nexports.AccessListEIP2930Transaction = AccessListEIP2930Transaction;\n//# sourceMappingURL=eip2930Transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlobEIP4844Transaction = void 0;\nconst ssz_1 = require(\"@chainsafe/ssz\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst baseTransaction_1 = require(\"./baseTransaction\");\nconst constants_1 = require(\"./constants\");\nconst kzg_1 = require(\"./kzg/kzg\");\nconst types_1 = require(\"./types\");\nconst util_2 = require(\"./util\");\nconst blobHelpers_1 = require(\"./utils/blobHelpers\");\nconst TRANSACTION_TYPE = 0x05;\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex');\nconst validateBlobTransactionNetworkWrapper = (versionedHashes, blobs, commitments, kzgProof, version) => {\n    if (!(versionedHashes.length === blobs.length && blobs.length === commitments.length)) {\n        throw new Error('Number of versionedHashes, blobs, and commitments not all equal');\n    }\n    try {\n        kzg_1.kzg.verifyAggregateKzgProof(blobs, commitments, kzgProof);\n    }\n    catch (e) {\n        throw new Error('KZG proof cannot be verified from blobs/commitments');\n    }\n    for (let x = 0; x < versionedHashes.length; x++) {\n        const computedVersionedHash = (0, blobHelpers_1.computeVersionedHash)(commitments[x], version);\n        if (!(0, ssz_1.byteArrayEquals)(computedVersionedHash, versionedHashes[x])) {\n            throw new Error(`commitment for blob at index ${x} does not match versionedHash`);\n        }\n    }\n};\n/**\n * Typed transaction with a new gas fee market mechanism for transactions that include \"blobs\" of data\n *\n * - TransactionType: 5\n * - EIP: [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844)\n */\nclass BlobEIP4844Transaction extends baseTransaction_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static constructors or factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: TRANSACTION_TYPE }, opts);\n        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas, maxFeePerDataGas } = txData;\n        this.common = this._getCommon(opts.common, chainId);\n        this.chainId = this.common.chainId();\n        if (this.common.isActivatedEIP(1559) === false) {\n            throw new Error('EIP-1559 not enabled on Common');\n        }\n        if (this.common.isActivatedEIP(4844) === false) {\n            throw new Error('EIP-4844 not enabled on Common');\n        }\n        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);\n        // Populate the access list fields\n        const accessListData = util_2.AccessLists.getAccessListData(accessList ?? []);\n        this.accessList = accessListData.accessList;\n        this.AccessListJSON = accessListData.AccessListJSON;\n        // Verify the access list format.\n        util_2.AccessLists.verifyAccessList(this.accessList);\n        this.maxFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n        this.maxPriorityFeePerGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n        this._validateCannotExceedMaxInteger({\n            maxFeePerGas: this.maxFeePerGas,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        });\n        baseTransaction_1.BaseTransaction._validateNotArray(txData);\n        if (this.gasLimit * this.maxFeePerGas > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n            throw new Error(msg);\n        }\n        this.maxFeePerDataGas = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)((maxFeePerDataGas ?? '') === '' ? '0x' : maxFeePerDataGas));\n        this.versionedHashes = (txData.versionedHashes ?? []).map((vh) => (0, util_1.toBuffer)(vh));\n        this._validateYParity();\n        this._validateHighS();\n        if (this.common.isActivatedEIP(3860)) {\n            (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);\n        }\n        for (const hash of this.versionedHashes) {\n            if (hash.length !== 32) {\n                const msg = this._errorMsg('versioned hash is invalid length');\n                throw new Error(msg);\n            }\n            if (BigInt(hash[0]) !== this.common.paramByEIP('sharding', 'blobCommitmentVersionKzg', 4844)) {\n                const msg = this._errorMsg('versioned hash does not start with KZG commitment version');\n                throw new Error(msg);\n            }\n        }\n        if (this.versionedHashes.length > constants_1.LIMIT_BLOBS_PER_TX) {\n            const msg = this._errorMsg(`tx can contain at most ${constants_1.LIMIT_BLOBS_PER_TX} blobs`);\n            throw new Error(msg);\n        }\n        this.blobs = txData.blobs?.map((blob) => (0, util_1.toBuffer)(blob));\n        this.kzgCommitments = txData.kzgCommitments?.map((commitment) => (0, util_1.toBuffer)(commitment));\n        this.aggregateKzgProof = (0, util_1.toBuffer)(txData.kzgProof);\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    static fromTxData(txData, opts) {\n        return new BlobEIP4844Transaction(txData, opts);\n    }\n    /**\n     * Creates the minimal representation of a blob transaction from the network wrapper version.\n     * The minimal representation is used when adding transactions to an execution payload/block\n     * @param txData a {@link BlobEIP4844Transaction} containing optional blobs/kzg commitments\n     * @param opts - dictionary of {@link TxOptions}\n     * @returns the \"minimal\" representation of a BlobEIP4844Transaction (i.e. transaction object minus blobs and kzg commitments)\n     */\n    static minimalFromNetworkWrapper(txData, opts) {\n        const tx = BlobEIP4844Transaction.fromTxData({\n            ...txData,\n            ...{ blobs: undefined, kzgCommitments: undefined, kzgProof: undefined },\n        }, opts);\n        return tx;\n    }\n    /**\n     * Creates a transaction from the network encoding of a blob transaction (with blobs/commitments/proof)\n     * @param serialized a buffer representing a serialized BlobTransactionNetworkWrapper\n     * @param opts any TxOptions defined\n     * @returns a BlobEIP4844Transaction\n     * @throws if no KZG library is loaded -- using the `initKzg` helper method -- or if `opts.common` not provided\n     */\n    static fromSerializedBlobTxNetworkWrapper(serialized, opts) {\n        if (!opts || !opts.common) {\n            throw new Error('common instance required to validate versioned hashes');\n        }\n        // Validate network wrapper\n        const wrapper = types_1.BlobNetworkTransactionWrapper.deserialize(serialized.slice(1));\n        const decodedTx = wrapper.tx.message;\n        const version = Number(opts.common.paramByEIP('sharding', 'blobCommitmentVersionKzg', 4844));\n        validateBlobTransactionNetworkWrapper(decodedTx.blobVersionedHashes, wrapper.blobs, wrapper.blobKzgs, wrapper.kzgAggregatedProof, version);\n        const accessList = [];\n        for (const listItem of decodedTx.accessList) {\n            const address = Buffer.from(listItem.address);\n            const storageKeys = listItem.storageKeys.map((key) => Buffer.from(key));\n            const accessListItem = [address, storageKeys];\n            accessList.push(accessListItem);\n        }\n        const to = decodedTx.to.value === null\n            ? undefined\n            : util_1.Address.fromString((0, util_1.bufferToHex)(Buffer.from(decodedTx.to.value)));\n        const versionedHashes = decodedTx.blobVersionedHashes.map((el) => Buffer.from(el));\n        const commitments = wrapper.blobKzgs.map((el) => Buffer.from(el));\n        const blobs = wrapper.blobs.map((el) => Buffer.from(el));\n        const txData = {\n            ...decodedTx,\n            ...{\n                versionedHashes,\n                accessList,\n                to,\n                blobs,\n                kzgCommitments: commitments,\n                kzgProof: Buffer.from(wrapper.kzgAggregatedProof),\n                r: wrapper.tx.signature.r,\n                s: wrapper.tx.signature.s,\n                v: BigInt(wrapper.tx.signature.yParity),\n                gasLimit: decodedTx.gas,\n                maxFeePerGas: decodedTx.maxFeePerGas,\n                maxPriorityFeePerGas: decodedTx.maxPriorityFeePerGas,\n            },\n        };\n        return new BlobEIP4844Transaction(txData, opts);\n    }\n    /**\n     * Creates a transaction from the \"minimal\" encoding of a blob transaction (without blobs/commitments/kzg proof)\n     * @param serialized a buffer representing a serialized signed blob transaction\n     * @param opts any TxOptions defined\n     * @returns a BlobEIP4844Transaction\n     */\n    static fromSerializedTx(serialized, opts) {\n        const decoded = types_1.SignedBlobTransactionType.deserialize(serialized.slice(1));\n        const tx = decoded.message;\n        const accessList = [];\n        for (const listItem of tx.accessList) {\n            const address = Buffer.from(listItem.address);\n            const storageKeys = listItem.storageKeys.map((key) => Buffer.from(key));\n            const accessListItem = [address, storageKeys];\n            accessList.push(accessListItem);\n        }\n        const to = tx.to.value === null ? undefined : util_1.Address.fromString((0, util_1.bufferToHex)(Buffer.from(tx.to.value)));\n        const versionedHashes = tx.blobVersionedHashes.map((el) => Buffer.from(el));\n        const txData = {\n            ...tx,\n            ...{\n                versionedHashes,\n                to,\n                accessList,\n                r: decoded.signature.r,\n                s: decoded.signature.s,\n                v: BigInt(decoded.signature.yParity),\n                gasLimit: decoded.message.gas,\n            },\n        };\n        return new BlobEIP4844Transaction(txData, opts);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n    getUpfrontCost(baseFee = BigInt(0)) {\n        const prio = this.maxPriorityFeePerGas;\n        const maxBase = this.maxFeePerGas - baseFee;\n        const inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n        const gasPrice = inclusionFeePerGas + baseFee;\n        return this.gasLimit * gasPrice + this.value;\n    }\n    /**\n     * This method is not implemented for blob transactions as the `raw` method is used exclusively with\n     * rlp encoding and these transactions use SSZ for serialization.\n     */\n    raw() {\n        throw new Error('Method not implemented.');\n    }\n    toValue() {\n        const to = {\n            selector: this.to !== undefined ? 1 : 0,\n            value: this.to?.toBuffer() ?? null,\n        };\n        return {\n            message: {\n                chainId: this.common.chainId(),\n                nonce: this.nonce,\n                maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n                maxFeePerGas: this.maxFeePerGas,\n                gas: this.gasLimit,\n                to,\n                value: this.value,\n                data: this.data,\n                accessList: this.accessList.map((listItem) => {\n                    return { address: listItem[0], storageKeys: listItem[1] };\n                }),\n                blobVersionedHashes: this.versionedHashes,\n                maxFeePerDataGas: this.maxFeePerDataGas,\n            },\n            // TODO: Decide how to serialize an unsigned transaction\n            signature: {\n                r: this.r ?? BigInt(0),\n                s: this.s ?? BigInt(0),\n                yParity: this.v === BigInt(1) ? true : false,\n            },\n        };\n    }\n    /**\n     * Serialize a blob transaction to the execution payload variant\n     * @returns the minimum (execution payload) serialization of a signed transaction\n     */\n    serialize() {\n        const sszEncodedTx = types_1.SignedBlobTransactionType.serialize(this.toValue());\n        return Buffer.concat([TRANSACTION_TYPE_BUFFER, sszEncodedTx]);\n    }\n    /**\n     * @returns the serialized form of a blob transaction in the network wrapper format (used for gossipping mempool transactions over devp2p)\n     */\n    serializeNetworkWrapper() {\n        if (this.blobs === undefined ||\n            this.kzgCommitments === undefined ||\n            this.aggregateKzgProof === undefined) {\n            throw new Error('cannot serialize network wrapper without blobs, KZG commitments and aggregate KZG proof provided');\n        }\n        const to = {\n            selector: this.to !== undefined ? 1 : 0,\n            value: this.to?.toBuffer() ?? null,\n        };\n        const blobArrays = this.blobs?.map((blob) => Uint8Array.from(blob)) ?? [];\n        const serializedTxWrapper = types_1.BlobNetworkTransactionWrapper.serialize({\n            blobs: blobArrays,\n            blobKzgs: this.kzgCommitments?.map((commitment) => Uint8Array.from(commitment)) ?? [],\n            tx: { ...(0, util_2.blobTxToNetworkWrapperDataFormat)(this), ...to },\n            kzgAggregatedProof: Uint8Array.from(this.aggregateKzgProof ?? []),\n        });\n        return Buffer.concat([Buffer.from([0x05]), serializedTxWrapper]);\n    }\n    getMessageToSign(_hashMessage) {\n        return this.unsignedHash();\n    }\n    /**\n     * Returns the hash of a blob transaction\n     */\n    unsignedHash() {\n        const serializedTx = types_1.BlobTransactionType.serialize(this.toValue().message);\n        return Buffer.from((0, keccak_1.keccak256)(Buffer.concat([TRANSACTION_TYPE_BUFFER, serializedTx])));\n    }\n    hash() {\n        return Buffer.from((0, keccak_1.keccak256)(this.serialize()));\n    }\n    getMessageToVerifySignature() {\n        return this.getMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call this method if transaction is not signed');\n            throw new Error(msg);\n        }\n        const msgHash = this.getMessageToVerifySignature();\n        const { v, r, s } = this;\n        this._validateHighS();\n        try {\n            return (0, util_1.ecrecover)(msgHash, v + BigInt(27), // Recover the 27 which was stripped from ecsign\n            (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s));\n        }\n        catch (e) {\n            const msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    }\n    toJSON() {\n        const accessListJSON = util_2.AccessLists.getAccessListJSON(this.accessList);\n        return {\n            chainId: (0, util_1.bigIntToHex)(this.chainId),\n            nonce: (0, util_1.bigIntToHex)(this.nonce),\n            maxPriorityFeePerGas: (0, util_1.bigIntToHex)(this.maxPriorityFeePerGas),\n            maxFeePerGas: (0, util_1.bigIntToHex)(this.maxFeePerGas),\n            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, util_1.bigIntToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            accessList: accessListJSON,\n            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,\n            maxFeePerDataGas: (0, util_1.bigIntToHex)(this.maxFeePerDataGas),\n            versionedHashes: this.versionedHashes.map((hash) => (0, util_1.bufferToHex)(hash)),\n        };\n    }\n    _processSignature(v, r, s) {\n        const opts = { ...this.txOptions, common: this.common };\n        return BlobEIP4844Transaction.fromTxData({\n            chainId: this.chainId,\n            nonce: this.nonce,\n            maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n            maxFeePerGas: this.maxFeePerGas,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            accessList: this.accessList,\n            v: v - BigInt(27),\n            r: (0, util_1.bufferToBigInt)(r),\n            s: (0, util_1.bufferToBigInt)(s),\n            maxFeePerDataGas: this.maxFeePerDataGas,\n            versionedHashes: this.versionedHashes,\n            blobs: this.blobs,\n            kzgCommitments: this.kzgCommitments,\n            kzgProof: this.aggregateKzgProof,\n        }, opts);\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return `${msg} (${this.errorStr()})`;\n    }\n    /**\n     * @returns the number of blobs included with this transaction\n     */\n    numBlobs() {\n        return this.versionedHashes.length;\n    }\n}\nexports.BlobEIP4844Transaction = BlobEIP4844Transaction;\n//# sourceMappingURL=eip4844Transaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeTxParams = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst normalizeTxParams = (_txParams) => {\n    const txParams = Object.assign({}, _txParams);\n    txParams.gasLimit = (0, util_1.toType)(txParams.gasLimit ?? txParams.gas, util_1.TypeOutput.BigInt);\n    txParams.data = txParams.data === undefined ? txParams.input : txParams.data;\n    // check and convert gasPrice and value params\n    txParams.gasPrice = txParams.gasPrice !== undefined ? BigInt(txParams.gasPrice) : undefined;\n    txParams.value = txParams.value !== undefined ? BigInt(txParams.value) : undefined;\n    // strict byte length checking\n    txParams.to =\n        txParams.to !== null && txParams.to !== undefined\n            ? (0, util_1.setLengthLeft)((0, util_1.toBuffer)(txParams.to), 20)\n            : null;\n    txParams.v = (0, util_1.toType)(txParams.v, util_1.TypeOutput.BigInt);\n    return txParams;\n};\nexports.normalizeTxParams = normalizeTxParams;\n//# sourceMappingURL=fromRpc.js.map","/*\n\tISC License\n\n\tCopyright (c) 2019, Pierre-Louis Despaigne\n\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\nconst multiC = require('multicodec');\nconst multiH = require('multihashes');\n\nconst { hexStringToBuffer, profiles } = require('./profiles');\nconst { cidForWeb, cidV0ToV1Base32 } = require('./helpers');\n\nmodule.exports = {\n\n\t//export some helpers functions\n\thelpers: {\n\t\tcidForWeb,\n\t\tcidV0ToV1Base32,\n\t},\n\n\t/**\n\t* Decode a Content Hash.\n\t* @param {string} hash an hex string containing a content hash\n\t* @return {string} the decoded content\n\t*/\n\tdecode: function (contentHash) {\n\t\tconst buffer = hexStringToBuffer(contentHash);\n\t\tconst codec = multiC.getCodec(buffer);\n\t\tconst value = multiC.rmPrefix(buffer);\n\t\tlet profile = profiles[codec];\n\t\tif (!profile) profile = profiles['default'];\n\t\treturn profile.decode(value);\n\t},\n\n\t/**\n\t* Encode an IPFS address into a content hash\n\t* @param {string} ipfsHash string containing an IPFS address\n\t* @return {string} the resulting content hash\n\t*/\n\tfromIpfs: function (ipfsHash) {\n\t\treturn this.encode('ipfs-ns', ipfsHash);\n\t},\n\n\t/**\n\t* Encode a Skylink into a content hash\n\t* @param {string} skylink string containing a Skylink\n\t* @return {string} the resulting content hash\n\t*/\n\tfromSkylink: function (skylink) {\n\t\treturn this.encode('skynet-ns', skylink);\n\t},\n\n\t/**\n\t* Encode a Swarm address into a content hash\n\t* @param {string} swarmHash string containing a Swarm address\n\t* @return {string} the resulting content hash\n\t*/\n\tfromSwarm: function (swarmHash) {\n\t\treturn this.encode('swarm-ns', swarmHash);\n\t},\n\n    /**\n\t* Encode a arweave address into a content hash\n\t* @param {string} swarmHash string containing a arweave address\n\t* @return {string} the resulting content hash\n\t*/\n    fromArweave: function(arweave) {\n        return this.encode('arweave-ns', arweave);\n    },\n\n\t/**\n\t* General purpose encoding function\n  * @param {string} codec \n  * @param {string} value \n  */\n\tencode: function (codec, value) {\n\t\tlet profile = profiles[codec];\n\t\tif (!profile) profile = profiles['default'];\n\t\tconst encodedValue = profile.encode(value);\n\t\treturn multiH.toHexString(multiC.addPrefix(codec, encodedValue))\n\t},\n\n\t/**\n\t* Extract the codec of a content hash\n\t* @param {string} hash hex string containing a content hash\n\t* @return {string} the extracted codec\n\t*/\n\tgetCodec: function (hash) {\n\t\tlet buffer = hexStringToBuffer(hash);\n\t\treturn multiC.getCodec(buffer);\n\t},\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.computeVersionedHash = exports.TransactionFactory = exports.Transaction = exports.kzg = exports.initKZG = exports.BlobEIP4844Transaction = exports.AccessListEIP2930Transaction = exports.FeeMarketEIP1559Transaction = void 0;\nvar eip1559Transaction_1 = require(\"./eip1559Transaction\");\nObject.defineProperty(exports, \"FeeMarketEIP1559Transaction\", { enumerable: true, get: function () { return eip1559Transaction_1.FeeMarketEIP1559Transaction; } });\nvar eip2930Transaction_1 = require(\"./eip2930Transaction\");\nObject.defineProperty(exports, \"AccessListEIP2930Transaction\", { enumerable: true, get: function () { return eip2930Transaction_1.AccessListEIP2930Transaction; } });\nvar eip4844Transaction_1 = require(\"./eip4844Transaction\");\nObject.defineProperty(exports, \"BlobEIP4844Transaction\", { enumerable: true, get: function () { return eip4844Transaction_1.BlobEIP4844Transaction; } });\nvar kzg_1 = require(\"./kzg/kzg\");\nObject.defineProperty(exports, \"initKZG\", { enumerable: true, get: function () { return kzg_1.initKZG; } });\nObject.defineProperty(exports, \"kzg\", { enumerable: true, get: function () { return kzg_1.kzg; } });\nvar legacyTransaction_1 = require(\"./legacyTransaction\");\nObject.defineProperty(exports, \"Transaction\", { enumerable: true, get: function () { return legacyTransaction_1.Transaction; } });\nvar transactionFactory_1 = require(\"./transactionFactory\");\nObject.defineProperty(exports, \"TransactionFactory\", { enumerable: true, get: function () { return transactionFactory_1.TransactionFactory; } });\n__exportStar(require(\"./types\"), exports);\nvar blobHelpers_1 = require(\"./utils/blobHelpers\");\nObject.defineProperty(exports, \"computeVersionedHash\", { enumerable: true, get: function () { return blobHelpers_1.computeVersionedHash; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initKZG = exports.kzg = void 0;\nfunction kzgNotLoaded() {\n    throw Error('kzg library not loaded');\n}\n// eslint-disable-next-line import/no-mutable-exports\nexports.kzg = {\n    freeTrustedSetup: kzgNotLoaded,\n    loadTrustedSetup: kzgNotLoaded,\n    blobToKzgCommitment: kzgNotLoaded,\n    computeAggregateKzgProof: kzgNotLoaded,\n    verifyKzgProof: kzgNotLoaded,\n    verifyAggregateKzgProof: kzgNotLoaded,\n};\n/**\n * @param kzgLib a KZG implementation (defaults to c-kzg)\n * @param trustedSetupPath the full path (e.g. \"/home/linux/devnet4.txt\") to a kzg trusted setup text file\n */\nfunction initKZG(kzgLib, trustedSetupPath) {\n    exports.kzg = kzgLib;\n    exports.kzg.loadTrustedSetup(trustedSetupPath);\n}\nexports.initKZG = initKZG;\n//# sourceMappingURL=kzg.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transaction = void 0;\nconst rlp_1 = require(\"@ethereumjs/rlp\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst baseTransaction_1 = require(\"./baseTransaction\");\nconst types_1 = require(\"./types\");\nconst util_2 = require(\"./util\");\nconst TRANSACTION_TYPE = 0;\nfunction meetsEIP155(_v, chainId) {\n    const v = Number(_v);\n    const chainIdDoubled = Number(chainId) * 2;\n    return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nclass Transaction extends baseTransaction_1.BaseTransaction {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     *\n     * It is not recommended to use this constructor directly. Instead use\n     * the static factory methods to assist in creating a Transaction object from\n     * varying data types.\n     */\n    constructor(txData, opts = {}) {\n        super({ ...txData, type: TRANSACTION_TYPE }, opts);\n        this.common = this._validateTxV(this.v, opts.common);\n        this.gasPrice = (0, util_1.bufferToBigInt)((0, util_1.toBuffer)(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n        if (this.gasPrice * this.gasLimit > util_1.MAX_INTEGER) {\n            const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n            throw new Error(msg);\n        }\n        this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });\n        baseTransaction_1.BaseTransaction._validateNotArray(txData);\n        if (this.common.gteHardfork('spuriousDragon')) {\n            if (!this.isSigned()) {\n                this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            }\n            else {\n                // EIP155 spec:\n                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n                // then when computing the hash of a transaction for purposes of signing or recovering\n                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n                // v and chain ID meet EIP-155 conditions\n                if (meetsEIP155(this.v, this.common.chainId())) {\n                    this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n                }\n            }\n        }\n        if (this.common.isActivatedEIP(3860)) {\n            (0, util_2.checkMaxInitCodeSize)(this.common, this.data.length);\n        }\n        const freeze = opts?.freeze ?? true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    /**\n     * Instantiate a transaction from a data dictionary.\n     *\n     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n     *\n     * Notes:\n     * - All parameters are optional and have some basic default values\n     */\n    static fromTxData(txData, opts = {}) {\n        return new Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */\n    static fromSerializedTx(serialized, opts = {}) {\n        const values = (0, util_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized)));\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input. Must be array');\n        }\n        return this.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */\n    static fromValuesArray(values, opts = {}) {\n        // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n        // This happens if you get the RLP data from `raw()`\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n        }\n        const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n        (0, util_1.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });\n        return new Transaction({\n            nonce,\n            gasPrice,\n            gasLimit,\n            to,\n            value,\n            data,\n            v,\n            r,\n            s,\n        }, opts);\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For legacy txs this is also the correct format to add transactions\n     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n     * for typed txs).\n     *\n     * For an unsigned tx this method returns the empty Buffer values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */\n    raw() {\n        return [\n            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.value),\n            this.data,\n            this.v !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.v) : Buffer.from([]),\n            this.r !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.r) : Buffer.from([]),\n            this.s !== undefined ? (0, util_1.bigIntToUnpaddedBuffer)(this.s) : Buffer.from([]),\n        ];\n    }\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned tx this method uses the empty Buffer values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link Transaction.getMessageToSign}.\n     */\n    serialize() {\n        return Buffer.from(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw())));\n    }\n    _getMessageToSign() {\n        const values = [\n            (0, util_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasPrice),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.gasLimit),\n            this.to !== undefined ? this.to.buf : Buffer.from([]),\n            (0, util_1.bigIntToUnpaddedBuffer)(this.value),\n            this.data,\n        ];\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            values.push((0, util_1.toBuffer)(this.common.chainId()));\n            values.push((0, util_1.unpadBuffer)((0, util_1.toBuffer)(0)));\n            values.push((0, util_1.unpadBuffer)((0, util_1.toBuffer)(0)));\n        }\n        return values;\n    }\n    getMessageToSign(hashMessage = true) {\n        const message = this._getMessageToSign();\n        if (hashMessage) {\n            return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(message))));\n        }\n        else {\n            return message;\n        }\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    getDataFee() {\n        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n            return this.cache.dataFee.value;\n        }\n        if (Object.isFrozen(this)) {\n            this.cache.dataFee = {\n                value: super.getDataFee(),\n                hardfork: this.common.hardfork(),\n            };\n        }\n        return super.getDataFee();\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    getUpfrontCost() {\n        return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n    hash() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n            throw new Error(msg);\n        }\n        if (Object.isFrozen(this)) {\n            if (!this.cache.hash) {\n                this.cache.hash = Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw()))));\n            }\n            return this.cache.hash;\n        }\n        return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(this.raw()))));\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n    getMessageToVerifySignature() {\n        if (!this.isSigned()) {\n            const msg = this._errorMsg('This transaction is not signed');\n            throw new Error(msg);\n        }\n        const message = this._getMessageToSign();\n        return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, util_1.bufArrToArr)(message))));\n    }\n    /**\n     * Returns the public key of the sender\n     */\n    getSenderPublicKey() {\n        const msgHash = this.getMessageToVerifySignature();\n        const { v, r, s } = this;\n        this._validateHighS();\n        try {\n            return (0, util_1.ecrecover)(msgHash, v, (0, util_1.bigIntToUnpaddedBuffer)(r), (0, util_1.bigIntToUnpaddedBuffer)(s), this.supports(types_1.Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined);\n        }\n        catch (e) {\n            const msg = this._errorMsg('Invalid Signature');\n            throw new Error(msg);\n        }\n    }\n    /**\n     * Process the v, r, s values from the `sign` method of the base transaction.\n     */\n    _processSignature(v, r, s) {\n        if (this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            v += this.common.chainId() * BigInt(2) + BigInt(8);\n        }\n        const opts = { ...this.txOptions, common: this.common };\n        return Transaction.fromTxData({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v,\n            r: (0, util_1.bufferToBigInt)(r),\n            s: (0, util_1.bufferToBigInt)(s),\n        }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */\n    toJSON() {\n        return {\n            nonce: (0, util_1.bigIntToHex)(this.nonce),\n            gasPrice: (0, util_1.bigIntToHex)(this.gasPrice),\n            gasLimit: (0, util_1.bigIntToHex)(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: (0, util_1.bigIntToHex)(this.value),\n            data: '0x' + this.data.toString('hex'),\n            v: this.v !== undefined ? (0, util_1.bigIntToHex)(this.v) : undefined,\n            r: this.r !== undefined ? (0, util_1.bigIntToHex)(this.r) : undefined,\n            s: this.s !== undefined ? (0, util_1.bigIntToHex)(this.s) : undefined,\n        };\n    }\n    /**\n     * Validates tx's `v` value\n     */\n    _validateTxV(_v, common) {\n        let chainIdBigInt;\n        const v = _v !== undefined ? Number(_v) : undefined;\n        // Check for valid v values in the scope of a signed legacy tx\n        if (v !== undefined) {\n            // v is 1. not matching the EIP-155 chainId included case and...\n            // v is 2. not matching the classic v=27 or v=28 case\n            if (v < 37 && v !== 27 && v !== 28) {\n                throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);\n            }\n        }\n        // No unsigned tx and EIP-155 activated and chain ID included\n        if (v !== undefined &&\n            v !== 0 &&\n            (!common || common.gteHardfork('spuriousDragon')) &&\n            v !== 27 &&\n            v !== 28) {\n            if (common) {\n                if (!meetsEIP155(BigInt(v), common.chainId())) {\n                    throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);\n                }\n            }\n            else {\n                // Derive the original chain ID\n                let numSub;\n                if ((v - 35) % 2 === 0) {\n                    numSub = 35;\n                }\n                else {\n                    numSub = 36;\n                }\n                // Use derived chain ID to create a proper Common\n                chainIdBigInt = BigInt(v - numSub) / BigInt(2);\n            }\n        }\n        return this._getCommon(common, chainIdBigInt);\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n    errorStr() {\n        let errorStr = this._getSharedErrorPostfix();\n        errorStr += ` gasPrice=${this.gasPrice}`;\n        return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n    _errorMsg(msg) {\n        return `${msg} (${this.errorStr()})`;\n    }\n}\nexports.Transaction = Transaction;\n//# sourceMappingURL=legacyTransaction.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionFactory = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst providers_1 = require(\"@ethersproject/providers\");\nconst eip1559Transaction_1 = require(\"./eip1559Transaction\");\nconst eip2930Transaction_1 = require(\"./eip2930Transaction\");\nconst eip4844Transaction_1 = require(\"./eip4844Transaction\");\nconst fromRpc_1 = require(\"./fromRpc\");\nconst legacyTransaction_1 = require(\"./legacyTransaction\");\nclass TransactionFactory {\n    // It is not possible to instantiate a TransactionFactory object.\n    constructor() { }\n    /**\n     * Create a transaction from a `txData` object\n     *\n     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n     * @param txOptions - Options to pass on to the constructor of the transaction\n     */\n    static fromTxData(txData, txOptions = {}) {\n        if (!('type' in txData) || txData.type === undefined) {\n            // Assume legacy transaction\n            return legacyTransaction_1.Transaction.fromTxData(txData, txOptions);\n        }\n        else {\n            const txType = Number((0, util_1.bufferToBigInt)((0, util_1.toBuffer)(txData.type)));\n            if (txType === 0) {\n                return legacyTransaction_1.Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 1) {\n                return eip2930Transaction_1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 2) {\n                return eip1559Transaction_1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);\n            }\n            else if (txType === 5) {\n                return eip4844Transaction_1.BlobEIP4844Transaction.fromTxData(txData, txOptions);\n            }\n            else {\n                throw new Error(`Tx instantiation with type ${txType} not supported`);\n            }\n        }\n    }\n    /**\n     * This method tries to decode serialized data.\n     *\n     * @param data - The data Buffer\n     * @param txOptions - The transaction options\n     */\n    static fromSerializedData(data, txOptions = {}) {\n        if (data[0] <= 0x7f) {\n            // Determine the type.\n            switch (data[0]) {\n                case 1:\n                    return eip2930Transaction_1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n                case 2:\n                    return eip1559Transaction_1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n                case 5:\n                    return eip4844Transaction_1.BlobEIP4844Transaction.fromSerializedTx(data, txOptions);\n                default:\n                    throw new Error(`TypedTransaction with ID ${data[0]} unknown`);\n            }\n        }\n        else {\n            return legacyTransaction_1.Transaction.fromSerializedTx(data, txOptions);\n        }\n    }\n    /**\n     * When decoding a BlockBody, in the transactions field, a field is either:\n     * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n     * A Buffer[] (Legacy Transaction)\n     * This method returns the right transaction.\n     *\n     * @param data - A Buffer or Buffer[]\n     * @param txOptions - The transaction options\n     */\n    static fromBlockBodyData(data, txOptions = {}) {\n        if (Buffer.isBuffer(data)) {\n            return this.fromSerializedData(data, txOptions);\n        }\n        else if (Array.isArray(data)) {\n            // It is a legacy transaction\n            return legacyTransaction_1.Transaction.fromValuesArray(data, txOptions);\n        }\n        else {\n            throw new Error('Cannot decode transaction: unknown type input');\n        }\n    }\n    /**\n     *  Method to retrieve a transaction from the provider\n     * @param provider - An Ethers JsonRPCProvider\n     * @param txHash - Transaction hash\n     * @param txOptions - The transaction options\n     * @returns the transaction specified by `txHash`\n     */\n    static async fromEthersProvider(provider, txHash, txOptions) {\n        const prov = typeof provider === 'string' ? new providers_1.JsonRpcProvider(provider) : provider;\n        const txData = await prov.send('eth_getTransactionByHash', [txHash]);\n        const normedTx = (0, fromRpc_1.normalizeTxParams)(txData);\n        return TransactionFactory.fromTxData(normedTx, txOptions);\n    }\n}\nexports.TransactionFactory = TransactionFactory;\n//# sourceMappingURL=transactionFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlobNetworkTransactionWrapper = exports.KZGProofType = exports.KZGCommitmentType = exports.SignedBlobTransactionType = exports.ECDSASignatureType = exports.BlobTransactionType = exports.AccessTupleType = exports.AddressType = exports.isAccessList = exports.isAccessListBuffer = exports.Capability = void 0;\nconst ssz_1 = require(\"@chainsafe/ssz\");\nconst constants_1 = require(\"./constants\");\nconst Bytes20 = new ssz_1.ByteVectorType(20);\nconst Bytes32 = new ssz_1.ByteVectorType(32);\nconst Bytes48 = new ssz_1.ByteVectorType(48);\nconst Uint64 = new ssz_1.UintBigintType(8);\nconst Uint256 = new ssz_1.UintBigintType(32);\n/**\n * Can be used in conjunction with {@link Transaction.supports}\n * to query on tx capabilities\n */\nvar Capability;\n(function (Capability) {\n    /**\n     * Tx supports EIP-155 replay protection\n     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n     */\n    Capability[Capability[\"EIP155ReplayProtection\"] = 155] = \"EIP155ReplayProtection\";\n    /**\n     * Tx supports EIP-1559 gas fee market mechanism\n     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n     */\n    Capability[Capability[\"EIP1559FeeMarket\"] = 1559] = \"EIP1559FeeMarket\";\n    /**\n     * Tx is a typed transaction as defined in EIP-2718\n     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n     */\n    Capability[Capability[\"EIP2718TypedTransaction\"] = 2718] = \"EIP2718TypedTransaction\";\n    /**\n     * Tx supports access list generation as defined in EIP-2930\n     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n     */\n    Capability[Capability[\"EIP2930AccessLists\"] = 2930] = \"EIP2930AccessLists\";\n})(Capability = exports.Capability || (exports.Capability = {}));\nfunction isAccessListBuffer(input) {\n    if (input.length === 0) {\n        return true;\n    }\n    const firstItem = input[0];\n    if (Array.isArray(firstItem)) {\n        return true;\n    }\n    return false;\n}\nexports.isAccessListBuffer = isAccessListBuffer;\nfunction isAccessList(input) {\n    return !isAccessListBuffer(input); // This is exactly the same method, except the output is negated.\n}\nexports.isAccessList = isAccessList;\n/** EIP4844 types */\nexports.AddressType = Bytes20; // SSZ encoded address\n// SSZ encoded container for address and storage keys\nexports.AccessTupleType = new ssz_1.ContainerType({\n    address: exports.AddressType,\n    storageKeys: new ssz_1.ListCompositeType(Bytes32, constants_1.MAX_VERSIONED_HASHES_LIST_SIZE),\n});\n// SSZ encoded blob transaction\nexports.BlobTransactionType = new ssz_1.ContainerType({\n    chainId: Uint256,\n    nonce: Uint64,\n    maxPriorityFeePerGas: Uint256,\n    maxFeePerGas: Uint256,\n    gas: Uint64,\n    to: new ssz_1.UnionType([new ssz_1.NoneType(), exports.AddressType]),\n    value: Uint256,\n    data: new ssz_1.ByteListType(constants_1.MAX_CALLDATA_SIZE),\n    accessList: new ssz_1.ListCompositeType(exports.AccessTupleType, constants_1.MAX_ACCESS_LIST_SIZE),\n    maxFeePerDataGas: Uint256,\n    blobVersionedHashes: new ssz_1.ListCompositeType(Bytes32, constants_1.MAX_VERSIONED_HASHES_LIST_SIZE),\n});\n// SSZ encoded ECDSA Signature\nexports.ECDSASignatureType = new ssz_1.ContainerType({\n    yParity: new ssz_1.BooleanType(),\n    r: Uint256,\n    s: Uint256,\n});\n// SSZ encoded signed blob transaction\nexports.SignedBlobTransactionType = new ssz_1.ContainerType({\n    message: exports.BlobTransactionType,\n    signature: exports.ECDSASignatureType,\n});\n// SSZ encoded KZG Commitment/Proof (48 bytes)\nexports.KZGCommitmentType = Bytes48;\nexports.KZGProofType = exports.KZGCommitmentType;\n// SSZ encoded blob network transaction wrapper\nexports.BlobNetworkTransactionWrapper = new ssz_1.ContainerType({\n    tx: exports.SignedBlobTransactionType,\n    blobKzgs: new ssz_1.ListCompositeType(exports.KZGCommitmentType, constants_1.MAX_TX_WRAP_KZG_COMMITMENTS),\n    blobs: new ssz_1.ListCompositeType(new ssz_1.ByteVectorType(constants_1.FIELD_ELEMENTS_PER_BLOB * constants_1.BYTES_PER_FIELD_ELEMENT), constants_1.LIMIT_BLOBS_PER_TX),\n    kzgAggregatedProof: exports.KZGProofType,\n});\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.blobTxToNetworkWrapperDataFormat = exports.AccessLists = exports.checkMaxInitCodeSize = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst types_1 = require(\"./types\");\nfunction checkMaxInitCodeSize(common, length) {\n    const maxInitCodeSize = common.param('vm', 'maxInitCodeSize');\n    if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {\n        throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param('vm', 'maxInitCodeSize')}`);\n    }\n}\nexports.checkMaxInitCodeSize = checkMaxInitCodeSize;\nclass AccessLists {\n    static getAccessListData(accessList) {\n        let AccessListJSON;\n        let bufferAccessList;\n        if ((0, types_1.isAccessList)(accessList)) {\n            AccessListJSON = accessList;\n            const newAccessList = [];\n            for (let i = 0; i < accessList.length; i++) {\n                const item = accessList[i];\n                const addressBuffer = (0, util_1.toBuffer)(item.address);\n                const storageItems = [];\n                for (let index = 0; index < item.storageKeys.length; index++) {\n                    storageItems.push((0, util_1.toBuffer)(item.storageKeys[index]));\n                }\n                newAccessList.push([addressBuffer, storageItems]);\n            }\n            bufferAccessList = newAccessList;\n        }\n        else {\n            bufferAccessList = accessList ?? [];\n            // build the JSON\n            const json = [];\n            for (let i = 0; i < bufferAccessList.length; i++) {\n                const data = bufferAccessList[i];\n                const address = (0, util_1.bufferToHex)(data[0]);\n                const storageKeys = [];\n                for (let item = 0; item < data[1].length; item++) {\n                    storageKeys.push((0, util_1.bufferToHex)(data[1][item]));\n                }\n                const jsonItem = {\n                    address,\n                    storageKeys,\n                };\n                json.push(jsonItem);\n            }\n            AccessListJSON = json;\n        }\n        return {\n            AccessListJSON,\n            accessList: bufferAccessList,\n        };\n    }\n    static verifyAccessList(accessList) {\n        for (let key = 0; key < accessList.length; key++) {\n            const accessListItem = accessList[key];\n            const address = accessListItem[0];\n            const storageSlots = accessListItem[1];\n            if (accessListItem[2] !== undefined) {\n                throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');\n            }\n            if (address.length !== 20) {\n                throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');\n            }\n            for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n                if (storageSlots[storageSlot].length !== 32) {\n                    throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');\n                }\n            }\n        }\n    }\n    static getAccessListJSON(accessList) {\n        const accessListJSON = [];\n        for (let index = 0; index < accessList.length; index++) {\n            const item = accessList[index];\n            const JSONItem = {\n                address: '0x' + (0, util_1.setLengthLeft)(item[0], 20).toString('hex'),\n                storageKeys: [],\n            };\n            const storageSlots = item[1];\n            for (let slot = 0; slot < storageSlots.length; slot++) {\n                const storageSlot = storageSlots[slot];\n                JSONItem.storageKeys.push('0x' + (0, util_1.setLengthLeft)(storageSlot, 32).toString('hex'));\n            }\n            accessListJSON.push(JSONItem);\n        }\n        return accessListJSON;\n    }\n    static getDataFeeEIP2930(accessList, common) {\n        const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');\n        const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');\n        let slots = 0;\n        for (let index = 0; index < accessList.length; index++) {\n            const item = accessList[index];\n            const storageSlots = item[1];\n            slots += storageSlots.length;\n        }\n        const addresses = accessList.length;\n        return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);\n    }\n}\nexports.AccessLists = AccessLists;\nconst blobTxToNetworkWrapperDataFormat = (tx) => {\n    const to = {\n        selector: tx.to !== undefined ? 1 : 0,\n        value: tx.to?.toBuffer() ?? null,\n    };\n    return {\n        message: {\n            chainId: tx.common.chainId(),\n            nonce: tx.nonce,\n            maxPriorityFeePerGas: tx.maxPriorityFeePerGas,\n            maxFeePerGas: tx.maxFeePerGas,\n            gas: tx.gasLimit,\n            to,\n            value: tx.value,\n            data: tx.data,\n            accessList: tx.accessList.map((listItem) => {\n                return { address: listItem[0], storageKeys: listItem[1] };\n            }),\n            blobVersionedHashes: tx.versionedHashes,\n            maxFeePerDataGas: tx.maxFeePerDataGas,\n        },\n        // If transaction is unsigned, signature fields will be initialized to zeroes\n        signature: {\n            r: tx.r ?? BigInt(0),\n            s: tx.s ?? BigInt(0),\n            yParity: tx.v === BigInt(1) ? true : false,\n        },\n    };\n};\nexports.blobTxToNetworkWrapperDataFormat = blobTxToNetworkWrapperDataFormat;\n//# sourceMappingURL=util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.commitmentsToVersionedHashes = exports.computeVersionedHash = exports.blobsToCommitments = exports.getBlobs = void 0;\nconst sha256_1 = require(\"ethereum-cryptography/sha256\");\nconst kzg_1 = require(\"../kzg/kzg\");\n/**\n * These utilities for constructing blobs are borrowed from https://github.com/Inphi/eip4844-interop.git\n */\nconst BYTES_PER_FIELD_ELEMENT = 32;\nconst FIELD_ELEMENTS_PER_BLOB = 4096;\nconst USEFUL_BYTES_PER_BLOB = 32 * FIELD_ELEMENTS_PER_BLOB;\nconst MAX_BLOBS_PER_TX = 2;\nconst MAX_USEFUL_BYTES_PER_TX = USEFUL_BYTES_PER_BLOB * MAX_BLOBS_PER_TX - 1;\nconst BLOB_SIZE = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB;\nfunction get_padded(data, blobs_len) {\n    const pdata = Buffer.alloc(blobs_len * USEFUL_BYTES_PER_BLOB);\n    const datalen = Buffer.byteLength(data);\n    pdata.fill(data, 0, datalen);\n    pdata[datalen] = 0x80;\n    return pdata;\n}\nfunction get_blob(data) {\n    const blob = Buffer.alloc(BLOB_SIZE, 'binary');\n    for (let i = 0; i < FIELD_ELEMENTS_PER_BLOB; i++) {\n        const chunk = Buffer.alloc(32, 'binary');\n        chunk.fill(data.subarray(i * 31, (i + 1) * 31), 0, 31);\n        blob.fill(chunk, i * 32, (i + 1) * 32);\n    }\n    return blob;\n}\nconst getBlobs = (input) => {\n    const data = Buffer.from(input, 'binary');\n    const len = Buffer.byteLength(data);\n    if (len === 0) {\n        throw Error('invalid blob data');\n    }\n    if (len > MAX_USEFUL_BYTES_PER_TX) {\n        throw Error('blob data is too large');\n    }\n    const blobs_len = Math.ceil(len / USEFUL_BYTES_PER_BLOB);\n    const pdata = get_padded(data, blobs_len);\n    const blobs = [];\n    for (let i = 0; i < blobs_len; i++) {\n        const chunk = pdata.subarray(i * USEFUL_BYTES_PER_BLOB, (i + 1) * USEFUL_BYTES_PER_BLOB);\n        const blob = get_blob(chunk);\n        blobs.push(blob);\n    }\n    return blobs;\n};\nexports.getBlobs = getBlobs;\nconst blobsToCommitments = (blobs) => {\n    const commitments = [];\n    for (const blob of blobs) {\n        commitments.push(Buffer.from(kzg_1.kzg.blobToKzgCommitment(blob)));\n    }\n    return commitments;\n};\nexports.blobsToCommitments = blobsToCommitments;\n/**\n * Converts a vector commitment for a given data blob to its versioned hash.  For 4844, this version\n * number will be 0x01 for KZG vector commitments but could be different if future vector commitment\n * types are introduced\n * @param commitment a vector commitment to a blob\n * @param blobCommitmentVersion the version number corresponding to the type of vector commitment\n * @returns a versioned hash corresponding to a given blob vector commitment\n */\nconst computeVersionedHash = (commitment, blobCommitmentVersion) => {\n    const computedVersionedHash = new Uint8Array(32);\n    computedVersionedHash.set([blobCommitmentVersion], 0);\n    computedVersionedHash.set((0, sha256_1.sha256)(commitment).slice(1), 1);\n    return computedVersionedHash;\n};\nexports.computeVersionedHash = computeVersionedHash;\n/**\n * Generate an array of versioned hashes from corresponding kzg commitments\n * @param commitments array of kzg commitments\n * @returns array of versioned hashes\n * Note: assumes KZG commitments (version 1 version hashes)\n */\nconst commitmentsToVersionedHashes = (commitments) => {\n    const hashes = [];\n    for (const commitment of commitments) {\n        hashes.push(Buffer.from((0, exports.computeVersionedHash)(commitment, 0x01)));\n    }\n    return hashes;\n};\nexports.commitmentsToVersionedHashes = commitmentsToVersionedHashes;\n//# sourceMappingURL=blobHelpers.js.map","module.exports={\n    \"name\": \"goerli\",\n    \"chainId\": 5,\n    \"networkId\": 5,\n    \"defaultHardfork\": \"merge\",\n    \"consensus\": {\n        \"type\": \"poa\",\n        \"algorithm\": \"clique\",\n        \"clique\": {\n            \"period\": 15,\n            \"epoch\": 30000\n        }\n    },\n    \"comment\": \"Cross-client PoA test network\",\n    \"url\": \"https://github.com/goerli/testnet\",\n    \"genesis\": {\n        \"timestamp\": \"0x5c51a607\",\n        \"gasLimit\": 10485760,\n        \"difficulty\": 1,\n        \"nonce\": \"0x0000000000000000\",\n        \"extraData\": \"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 0,\n            \"forkHash\": \"0xa3f5ab08\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 1561651,\n            \"forkHash\": \"0xc25efa5c\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 4460644,\n            \"forkHash\": \"0x757a1c47\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 5062605,\n            \"forkHash\": \"0xb8c6299d\"\n        },\n        {\n            \"//_comment\": \"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818\",\n            \"name\": \"merge\",\n            \"ttd\": \"10790000\",\n            \"block\": 7382819,\n            \"forkHash\": \"0xb8c6299d\"\n        },\n        {\n            \"name\": \"mergeForkIdTransition\",\n            \"block\": null,\n            \"forkHash\": null\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"timestamp\": \"1678832736\",\n            \"forkHash\": \"0xf9843abf\"\n        }\n    ],\n    \"bootstrapNodes\": [\n        {\n            \"ip\": \"51.141.78.53\",\n            \"port\": 30303,\n            \"id\": \"011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a\",\n            \"location\": \"\",\n            \"comment\": \"Upstream bootnode 1\"\n        },\n        {\n            \"ip\": \"13.93.54.137\",\n            \"port\": 30303,\n            \"id\": \"176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b\",\n            \"location\": \"\",\n            \"comment\": \"Upstream bootnode 2\"\n        },\n        {\n            \"ip\": \"94.237.54.114\",\n            \"port\": 30313,\n            \"id\": \"46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291\",\n            \"location\": \"\",\n            \"comment\": \"Upstream bootnode 3\"\n        },\n        {\n            \"ip\": \"18.218.250.66\",\n            \"port\": 30313,\n            \"id\": \"b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949\",\n            \"location\": \"\",\n            \"comment\": \"Upstream bootnode 4\"\n        },\n        {\n            \"ip\": \"3.11.147.67\",\n            \"port\": 30303,\n            \"id\": \"a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91\",\n            \"location\": \"\",\n            \"comment\": \"Ethereum Foundation bootnode\"\n        },\n        {\n            \"ip\": \"51.15.116.226\",\n            \"port\": 30303,\n            \"id\": \"a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd\",\n            \"location\": \"\",\n            \"comment\": \"Goerli Initiative bootnode\"\n        },\n        {\n            \"ip\": \"51.15.119.157\",\n            \"port\": 30303,\n            \"id\": \"807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33\",\n            \"location\": \"\",\n            \"comment\": \"Goerli Initiative bootnode\"\n        },\n        {\n            \"ip\": \"51.15.119.157\",\n            \"port\": 40303,\n            \"id\": \"a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd\",\n            \"location\": \"\",\n            \"comment\": \"Goerli Initiative bootnode\"\n        }\n    ],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net\"\n    ]\n}\n","module.exports={\n    \"name\": \"mainnet\",\n    \"chainId\": 1,\n    \"networkId\": 1,\n    \"defaultHardfork\": \"merge\",\n    \"consensus\": {\n        \"type\": \"pow\",\n        \"algorithm\": \"ethash\",\n        \"ethash\": {}\n    },\n    \"comment\": \"The Ethereum main chain\",\n    \"url\": \"https://ethstats.net/\",\n    \"genesis\": {\n        \"gasLimit\": 5000,\n        \"difficulty\": 17179869184,\n        \"nonce\": \"0x0000000000000042\",\n        \"extraData\": \"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0xfc64ec04\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 1150000,\n            \"forkHash\": \"0x97c2c34c\"\n        },\n        {\n            \"name\": \"dao\",\n            \"block\": 1920000,\n            \"forkHash\": \"0x91d1f948\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 2463000,\n            \"forkHash\": \"0x7a64da13\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 2675000,\n            \"forkHash\": \"0x3edd5b10\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 4370000,\n            \"forkHash\": \"0xa00bc324\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 7280000,\n            \"forkHash\": \"0x668db0af\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 7280000,\n            \"forkHash\": \"0x668db0af\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 9069000,\n            \"forkHash\": \"0x879d6e30\"\n        },\n        {\n            \"name\": \"muirGlacier\",\n            \"block\": 9200000,\n            \"forkHash\": \"0xe029e991\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 12244000,\n            \"forkHash\": \"0x0eb440f6\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 12965000,\n            \"forkHash\": \"0xb715077d\"\n        },\n        {\n            \"name\": \"arrowGlacier\",\n            \"block\": 13773000,\n            \"forkHash\": \"0x20c327fc\"\n        },\n        {\n            \"name\": \"grayGlacier\",\n            \"block\": 15050000,\n            \"forkHash\": \"0xf0afd0e3\"\n        },\n        {\n            \"//_comment\": \"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393\",\n            \"name\": \"merge\",\n            \"ttd\": \"58750000000000000000000\",\n            \"block\": 15537394,\n            \"forkHash\": \"0xf0afd0e3\"\n        },\n        {\n            \"name\": \"mergeForkIdTransition\",\n            \"block\": null,\n            \"forkHash\": null\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"timestamp\": \"1681338455\",\n            \"forkHash\": \"0xdce96c2d\"\n        }\n    ],\n    \"bootstrapNodes\": [\n        {\n            \"ip\": \"18.138.108.67\",\n            \"port\": 30303,\n            \"id\": \"d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666\",\n            \"location\": \"ap-southeast-1-001\",\n            \"comment\": \"bootnode-aws-ap-southeast-1-001\"\n        },\n        {\n            \"ip\": \"3.209.45.79\",\n            \"port\": 30303,\n            \"id\": \"22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de\",\n            \"location\": \"us-east-1-001\",\n            \"comment\": \"bootnode-aws-us-east-1-001\"\n        },\n        {\n            \"ip\": \"65.108.70.101\",\n            \"port\": 30303,\n            \"id\": \"2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc\",\n            \"location\": \"eu-west-1-001\",\n            \"comment\": \"bootnode-hetzner-hel\"\n        },\n        {\n            \"ip\": \"157.90.35.166\",\n            \"port\": 30303,\n            \"id\": \"4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052\",\n            \"location\": \"eu-central-1-001\",\n            \"comment\": \"bootnode-hetzner-fsn\"\n        }\n    ],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net\"\n    ]\n}\n","module.exports={\n    \"name\": \"rinkeby\",\n    \"chainId\": 4,\n    \"networkId\": 4,\n    \"defaultHardfork\": \"london\",\n    \"consensus\": {\n        \"type\": \"poa\",\n        \"algorithm\": \"clique\",\n        \"clique\": {\n            \"period\": 15,\n            \"epoch\": 30000\n        }\n    },\n    \"comment\": \"PoA test network\",\n    \"url\": \"https://www.rinkeby.io\",\n    \"genesis\": {\n        \"timestamp\": \"0x58ee40ba\",\n        \"gasLimit\": 4700000,\n        \"difficulty\": 1,\n        \"nonce\": \"0x0000000000000000\",\n        \"extraData\": \"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0x3b8e0691\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 1,\n            \"forkHash\": \"0x60949295\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 2,\n            \"forkHash\": \"0x8bde40dd\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 3,\n            \"forkHash\": \"0xcb3a64bb\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 1035301,\n            \"forkHash\": \"0x8d748b57\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 3660663,\n            \"forkHash\": \"0xe49cab14\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 4321234,\n            \"forkHash\": \"0xafec6b27\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 5435345,\n            \"forkHash\": \"0xcbdb8838\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 8290928,\n            \"forkHash\": \"0x6910c8bd\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 8897988,\n            \"forkHash\": \"0x8e29f2f3\"\n        },\n        {\n            \"name\": \"merge\",\n            \"block\": null,\n            \"forkHash\": null\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"forkHash\": null\n        }\n    ],\n    \"bootstrapNodes\": [\n        {\n            \"ip\": \"52.169.42.101\",\n            \"port\": 30303,\n            \"id\": \"a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf\",\n            \"location\": \"\",\n            \"comment\": \"IE\"\n        },\n        {\n            \"ip\": \"52.3.158.184\",\n            \"port\": 30303,\n            \"id\": \"343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8\",\n            \"location\": \"\",\n            \"comment\": \"INFURA\"\n        },\n        {\n            \"ip\": \"159.89.28.211\",\n            \"port\": 30303,\n            \"id\": \"b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6\",\n            \"location\": \"\",\n            \"comment\": \"AKASHA\"\n        }\n    ],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net\"\n    ]\n}\n","export const FIXTURES_APP_STATE = {\n  showProductTour: false,\n};\n","/*\n\tISC License\n\n\tCopyright (c) 2019, Pierre-Louis Despaigne\n\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\nconst CID = require('cids');\nconst multiH = require('multihashes');\nconst base64 = require('js-base64')\n\n/**\n * Convert an hexadecimal string to a Buffer, the string can start with or without '0x'\n * @param {string} hex an hexadecimal value\n * @return {Buffer} the resulting Buffer\n */\nconst hexStringToBuffer = (hex) => {\n\tlet prefix = hex.slice(0, 2);\n\tlet value = hex.slice(2);\n\tlet res = '';\n\tif (prefix === '0x') res = value;\n\telse res = hex;\n\treturn multiH.fromHexString(res);\n}\n\n/**\n * Validates IPNS identifier  to safeguard against insecure names.\n * @param {CID} name ised in ipns-ns\n * @return {bool}\n */\nconst isCryptographicIPNS =  (cid) => {\n  try {\n    const { multihash } = cid\n    // Additional check for identifiers shorter\n    // than what inlined ED25519 pubkey would be\n    // https://github.com/ensdomains/ens-app/issues/849#issuecomment-777088950\n    if (multihash.length < 38) {\n      const mh = multiH.decode(multihash)\n      // ED25519 pubkeys are inlined using identity hash function\n      // and we should not see anything shorter than that\n      if (mh.name === 'identity' && mh.length < 36) {\n        // One can read inlined string value via:\n        // console.log('ipns-ns id:', String(multiH.decode(new CID(value).multihash).digest))\n        return false\n      }\n    }\n    // ok, CID looks fine\n    return true\n  } catch (_) { return false }\n}\n\n/**\n* list of known encoding,\n* encoding should be a function that takes a `string` input,\n* and return a `Buffer` result\n*/\nconst encodes = {\n  /**\n  * @param {string} value\n  * @return {Buffer}\n  */\n  skynet: (value) => {\n    return base64.toUint8Array(value)\n  },\n  /**\n  * @param {string} value\n  * @return {Buffer}\n  */\n  swarm: (value) => {\n    const multihash = multiH.encode(hexStringToBuffer(value), 'keccak-256');\n\t\treturn new CID(1, 'swarm-manifest', multihash).bytes;\n  },\n  /**\n  * @param {string} value\n  * @return {Buffer}\n  */\n  ipfs: (value) => {\n    return new CID(value).toV1().bytes;\n  },\n  /**\n  * @param {string} value\n  * @return {Buffer}\n  */\n  ipns: (value) => {\n    const cid = new CID(value)\n    if (!isCryptographicIPNS(cid)) {\n        throw Error('ipns-ns allows only valid cryptographic libp2p-key identifiers, try using ED25519 pubkey instead')\n    }\n    // Represent IPNS name as a CID with libp2p-key codec\n    // https://github.com/libp2p/specs/blob/master/RFC/0001-text-peerid-cid.md\n    return new CID(1, 'libp2p-key', cid.multihash).bytes\n  },\n  /**\n  * @param {string} value\n  * @return {Buffer}\n  */\n  utf8: (value) => {\n    return Buffer.from(value, 'utf8');\n  },\n  /**\n  * @param {string} value\n  * @return {Buffer}\n  */\n  arweave: (value) => {\n    return base64.toUint8Array(value)\n  },\n};\n\n/** \n* list of known decoding,\n* decoding should be a function that takes a `Buffer` input,\n* and return a `string` result\n*/\nconst decodes = {\n  /**\n  * @param {Buffer} value \n  */\n  hexMultiHash: (value) => {\n    const cid = new CID(value);\n    return multiH.decode(cid.multihash).digest.toString('hex');\n  },\n  /**\n  * @param {Buffer} value \n  */\n  ipfs: (value) => {\n    const cid = new CID(value).toV1();\n    return cid.toString(cid.codec === 'libp2p-key' ? 'base36' : 'base32')\n  },\n  /**\n  * @param {Buffer} value \n  */\n  ipns: (value) => {\n    const cid = new CID(value).toV1()\n    if (!isCryptographicIPNS(cid)) {\n        // Value is not a libp2p-key, return original string\n        console.warn('[ensdomains/content-hash] use of non-cryptographic identifiers in ipns-ns is deprecated and will be removed, migrate to ED25519 libp2p-key')\n        return String(multiH.decode(new CID(value).multihash).digest)\n        // TODO: start throwing an error (after some deprecation period)\n        // throw Error('ipns-ns allows only valid cryptographic libp2p-key identifiers, try using ED25519 pubkey instead')\n    }\n    return cid.toString('base36')\n  },\n  /**\n  * @param {Buffer} value \n  */\n  utf8: (value) => {\n    return value.toString('utf8');\n  },\n  base64: (value) => {\n    // `true` option makes it URL safe (replaces / and + with - and _ )\n    return base64.fromUint8Array(value, true)\n  }\n};\n\n/**\n* list of known encoding/decoding for a given codec,\n* `encode` should be chosen among the `encodes` functions\n* `decode` should be chosen among the `decodes` functions\n*/\nconst profiles = {\n  'skynet-ns': {\n    encode: encodes.skynet,\n    decode: decodes.base64,\n  },\n  'swarm-ns': {\n    encode: encodes.swarm,\n    decode: decodes.hexMultiHash,\n  },\n  'ipfs-ns': {\n    encode: encodes.ipfs,\n    decode: decodes.ipfs,\n  },\n  'ipns-ns': {\n    encode: encodes.ipns,\n    decode: decodes.ipns,\n  },\n  'arweave-ns': {\n    encode: encodes.arweave,\n    decode: decodes.base64,\n  },\n  'default': {\n    encode: encodes.utf8,\n    decode: decodes.utf8,\n  },\n};\n\nexports.hexStringToBuffer = hexStringToBuffer;\nexports.profiles = profiles;\n","module.exports={\n    \"name\": \"ropsten\",\n    \"chainId\": 3,\n    \"networkId\": 3,\n    \"defaultHardfork\": \"merge\",\n    \"consensus\": {\n        \"type\": \"pow\",\n        \"algorithm\": \"ethash\",\n        \"ethash\": {}\n    },\n    \"comment\": \"PoW test network\",\n    \"url\": \"https://github.com/ethereum/ropsten\",\n    \"genesis\": {\n        \"gasLimit\": 16777216,\n        \"difficulty\": 1048576,\n        \"nonce\": \"0x0000000000000042\",\n        \"extraData\": \"0x3535353535353535353535353535353535353535353535353535353535353535\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0x30c7ddbc\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 0,\n            \"forkHash\": \"0x30c7ddbc\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 0,\n            \"forkHash\": \"0x30c7ddbc\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 10,\n            \"forkHash\": \"0x63760190\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 1700000,\n            \"forkHash\": \"0x3ea159c7\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 4230000,\n            \"forkHash\": \"0x97b544f3\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 4939394,\n            \"forkHash\": \"0xd6e2149b\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 6485846,\n            \"forkHash\": \"0x4bc66396\"\n        },\n        {\n            \"name\": \"muirGlacier\",\n            \"block\": 7117117,\n            \"forkHash\": \"0x6727ef90\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 9812189,\n            \"forkHash\": \"0xa157d377\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 10499401,\n            \"forkHash\": \"0x7119b6b3\"\n        },\n        {\n            \"//_comment\": \"The forkHash will remain same as mergeForkIdTransition is post merge\",\n            \"name\": \"merge\",\n            \"ttd\": \"50000000000000000\",\n            \"block\": null,\n            \"forkHash\": \"0x7119b6b3\"\n        },\n        {\n            \"name\": \"mergeForkIdTransition\",\n            \"block\": null,\n            \"forkHash\": null\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"forkHash\": null\n        }\n    ],\n    \"bootstrapNodes\": [\n        {\n            \"ip\": \"52.176.7.10\",\n            \"port\": 30303,\n            \"id\": \"30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606\",\n            \"location\": \"\",\n            \"comment\": \"US-Azure geth\"\n        },\n        {\n            \"ip\": \"52.176.100.77\",\n            \"port\": 30303,\n            \"id\": \"865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c\",\n            \"location\": \"\",\n            \"comment\": \"US-Azure parity\"\n        },\n        {\n            \"ip\": \"52.232.243.152\",\n            \"port\": 30303,\n            \"id\": \"6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f\",\n            \"location\": \"\",\n            \"comment\": \"Parity\"\n        },\n        {\n            \"ip\": \"192.81.208.223\",\n            \"port\": 30303,\n            \"id\": \"94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09\",\n            \"location\": \"\",\n            \"comment\": \"@gpip\"\n        }\n    ],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net\"\n    ]\n}\n","module.exports={\n    \"name\": \"sepolia\",\n    \"chainId\": 11155111,\n    \"networkId\": 11155111,\n    \"defaultHardfork\": \"merge\",\n    \"consensus\": {\n        \"type\": \"pow\",\n        \"algorithm\": \"ethash\",\n        \"ethash\": {}\n    },\n    \"comment\": \"PoW test network to replace Ropsten\",\n    \"url\": \"https://github.com/ethereum/go-ethereum/pull/23730\",\n    \"genesis\": {\n        \"timestamp\": \"0x6159af19\",\n        \"gasLimit\": 30000000,\n        \"difficulty\": 131072,\n        \"nonce\": \"0x0000000000000000\",\n        \"extraData\": \"0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521\"\n    },\n    \"hardforks\": [\n        {\n            \"name\": \"chainstart\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"homestead\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"tangerineWhistle\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"spuriousDragon\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"byzantium\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"constantinople\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"petersburg\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"istanbul\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"muirGlacier\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"berlin\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"london\",\n            \"block\": 0,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"//_comment\": \"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408\",\n            \"name\": \"merge\",\n            \"ttd\": \"17000000000000000\",\n            \"block\": 1450409,\n            \"forkHash\": \"0xfe3366e7\"\n        },\n        {\n            \"name\": \"mergeForkIdTransition\",\n            \"block\": 1735371,\n            \"forkHash\": \"0xb96cbd13\"\n        },\n        {\n            \"name\": \"shanghai\",\n            \"block\": null,\n            \"timestamp\": \"1677557088\",\n            \"forkHash\": \"0xf7f9bc08\"\n        }\n    ],\n    \"bootstrapNodes\": [\n        {\n            \"ip\": \"18.168.182.86\",\n            \"port\": 30303,\n            \"id\": \"9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066\",\n            \"location\": \"\",\n            \"comment\": \"geth\"\n        },\n        {\n            \"ip\": \"52.14.151.177\",\n            \"port\": 30303,\n            \"id\": \"ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7\",\n            \"location\": \"\",\n            \"comment\": \"besu\"\n        },\n        {\n            \"ip\": \"165.22.196.173\",\n            \"port\": 30303,\n            \"id\": \"ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6\",\n            \"location\": \"\",\n            \"comment\": \"EF\"\n        },\n        {\n            \"ip\": \"65.108.95.67\",\n            \"port\": 30303,\n            \"id\": \"075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6\",\n            \"location\": \"\",\n            \"comment\": \"lodestar\"\n        }\n    ],\n    \"dnsNetworks\": [\n        \"enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net\"\n    ]\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Common = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst crc_32_1 = require(\"crc-32\");\nconst events_1 = require(\"events\");\nconst goerli = require(\"./chains/goerli.json\");\nconst mainnet = require(\"./chains/mainnet.json\");\nconst rinkeby = require(\"./chains/rinkeby.json\");\nconst ropsten = require(\"./chains/ropsten.json\");\nconst sepolia = require(\"./chains/sepolia.json\");\nconst eips_1 = require(\"./eips\");\nconst enums_1 = require(\"./enums\");\nconst hardforks_1 = require(\"./hardforks\");\nconst utils_1 = require(\"./utils\");\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nclass Common extends events_1.EventEmitter {\n    constructor(opts) {\n        super();\n        this._eips = [];\n        this._customChains = opts.customChains ?? [];\n        this._chainParams = this.setChain(opts.chain);\n        this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? enums_1.Hardfork.Merge;\n        // Assign hardfork changes in the sequence of the applied hardforks\n        this.HARDFORK_CHANGES = this.hardforks().map((hf) => [\n            hf.name,\n            hardforks_1.hardforks[hf.name],\n        ]);\n        this._hardfork = this.DEFAULT_HARDFORK;\n        if (opts.hardfork !== undefined) {\n            this.setHardfork(opts.hardfork);\n        }\n        if (opts.eips) {\n            this.setEIPs(opts.eips);\n        }\n    }\n    /**\n     * Creates a {@link Common} object for a custom chain, based on a standard one.\n     *\n     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n     * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n     *\n     * ```javascript\n     * Common.custom({chainId: 123})\n     * ```\n     *\n     * There are also selected supported custom chains which can be initialized by using one of the\n     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n     *\n     * ```javascript\n     * Common.custom(CustomChains.MaticMumbai)\n     * ```\n     *\n     * Note that these supported custom chains only provide some base parameters (usually the chain and\n     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n     * the `@ethereumjs/tx` library to a Layer-2 chain).\n     *\n     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n     */\n    static custom(chainParamsOrName, opts = {}) {\n        const baseChain = opts.baseChain ?? 'mainnet';\n        const standardChainParams = { ...Common._getChainParams(baseChain) };\n        standardChainParams['name'] = 'custom-chain';\n        if (typeof chainParamsOrName !== 'string') {\n            return new Common({\n                chain: {\n                    ...standardChainParams,\n                    ...chainParamsOrName,\n                },\n                ...opts,\n            });\n        }\n        else {\n            if (chainParamsOrName === enums_1.CustomChain.PolygonMainnet) {\n                return Common.custom({\n                    name: enums_1.CustomChain.PolygonMainnet,\n                    chainId: 137,\n                    networkId: 137,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_1.CustomChain.PolygonMumbai) {\n                return Common.custom({\n                    name: enums_1.CustomChain.PolygonMumbai,\n                    chainId: 80001,\n                    networkId: 80001,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_1.CustomChain.ArbitrumRinkebyTestnet) {\n                return Common.custom({\n                    name: enums_1.CustomChain.ArbitrumRinkebyTestnet,\n                    chainId: 421611,\n                    networkId: 421611,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_1.CustomChain.ArbitrumOne) {\n                return Common.custom({\n                    name: enums_1.CustomChain.ArbitrumOne,\n                    chainId: 42161,\n                    networkId: 42161,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_1.CustomChain.xDaiChain) {\n                return Common.custom({\n                    name: enums_1.CustomChain.xDaiChain,\n                    chainId: 100,\n                    networkId: 100,\n                }, opts);\n            }\n            if (chainParamsOrName === enums_1.CustomChain.OptimisticKovan) {\n                return Common.custom({\n                    name: enums_1.CustomChain.OptimisticKovan,\n                    chainId: 69,\n                    networkId: 69,\n                }, \n                // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n                { hardfork: enums_1.Hardfork.Berlin, ...opts });\n            }\n            if (chainParamsOrName === enums_1.CustomChain.OptimisticEthereum) {\n                return Common.custom({\n                    name: enums_1.CustomChain.OptimisticEthereum,\n                    chainId: 10,\n                    networkId: 10,\n                }, \n                // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n                { hardfork: enums_1.Hardfork.Berlin, ...opts });\n            }\n            throw new Error(`Custom chain ${chainParamsOrName} not supported`);\n        }\n    }\n    /**\n     * Static method to load and set common from a geth genesis json\n     * @param genesisJson json of geth configuration\n     * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n     * @returns Common\n     */\n    static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }) {\n        const genesisParams = (0, utils_1.parseGethGenesis)(genesisJson, chain, mergeForkIdPostMerge);\n        const common = new Common({\n            chain: genesisParams.name ?? 'custom',\n            customChains: [genesisParams],\n            eips,\n            hardfork: hardfork ?? genesisParams.hardfork,\n        });\n        if (genesisHash !== undefined) {\n            common.setForkHashes(genesisHash);\n        }\n        return common;\n    }\n    /**\n     * Static method to determine if a {@link chainId} is supported as a standard chain\n     * @param chainId bigint id (`1`) of a standard chain\n     * @returns boolean\n     */\n    static isSupportedChainId(chainId) {\n        const initializedChains = this._getInitializedChains();\n        return Boolean(initializedChains['names'][chainId.toString()]);\n    }\n    static _getChainParams(chain, customChains) {\n        const initializedChains = this._getInitializedChains(customChains);\n        if (typeof chain === 'number' || typeof chain === 'bigint') {\n            chain = chain.toString();\n            if (initializedChains['names'][chain]) {\n                const name = initializedChains['names'][chain];\n                return initializedChains[name];\n            }\n            throw new Error(`Chain with ID ${chain} not supported`);\n        }\n        if (initializedChains[chain] !== undefined) {\n            return initializedChains[chain];\n        }\n        throw new Error(`Chain with name ${chain} not supported`);\n    }\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain representation.\n     *              Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    setChain(chain) {\n        if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n            this._chainParams = Common._getChainParams(chain, this._customChains);\n        }\n        else if (typeof chain === 'object') {\n            if (this._customChains.length > 0) {\n                throw new Error('Chain must be a string, number, or bigint when initialized with customChains passed in');\n            }\n            const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n            for (const param of required) {\n                if (!(param in chain)) {\n                    throw new Error(`Missing required chain parameter: ${param}`);\n                }\n            }\n            this._chainParams = chain;\n        }\n        else {\n            throw new Error('Wrong input format');\n        }\n        for (const hf of this.hardforks()) {\n            if (hf.block === undefined) {\n                throw new Error(`Hardfork cannot have undefined block number`);\n            }\n        }\n        return this._chainParams;\n    }\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n     */\n    setHardfork(hardfork) {\n        let existing = false;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if (hfChanges[0] === hardfork) {\n                if (this._hardfork !== hardfork) {\n                    this._hardfork = hardfork;\n                    this.emit('hardforkChanged', hardfork);\n                }\n                existing = true;\n            }\n        }\n        if (!existing) {\n            throw new Error(`Hardfork with name ${hardfork} not supported`);\n        }\n    }\n    /**\n     * Returns the hardfork based on the block number or an optional\n     * total difficulty (Merge HF) provided.\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param blockNumber\n     * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)\n     * @param timestamp: timestamp in seconds at which block was/is to be minted\n     * @returns The name of the HF\n     */\n    getHardforkByBlockNumber(blockNumber, td, timestamp) {\n        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);\n        td = (0, util_1.toType)(td, util_1.TypeOutput.BigInt);\n        timestamp = (0, util_1.toType)(timestamp, util_1.TypeOutput.Number);\n        // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n        const hfs = this.hardforks().filter((hf) => hf.block !== null || (hf.ttd !== null && hf.ttd !== undefined) || hf.timestamp !== undefined);\n        const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);\n        const doubleTTDHF = hfs\n            .slice(mergeIndex + 1)\n            .findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);\n        if (doubleTTDHF >= 0) {\n            throw Error(`More than one merge hardforks found with ttd specified`);\n        }\n        // Find the first hardfork that has a block number greater than `blockNumber`\n        // (skips the merge hardfork since it cannot have a block number specified).\n        // If timestamp is not provided, it also skips timestamps hardforks to continue\n        // discovering/checking number hardforks.\n        let hfIndex = hfs.findIndex((hf) => (hf.block !== null && hf.block > blockNumber) ||\n            (timestamp !== undefined && Number(hf.timestamp) > timestamp));\n        if (hfIndex === -1) {\n            // all hardforks apply, set hfIndex to the last one as that's the candidate\n            hfIndex = hfs.length;\n        }\n        else if (hfIndex === 0) {\n            // cannot have a case where a block number is before all applied hardforks\n            // since the chain has to start with a hardfork\n            throw Error('Must have at least one hardfork at block 0');\n        }\n        // If timestamp is not provided, we need to rollback to the last hf with block or ttd\n        if (timestamp === undefined) {\n            const stepBack = hfs\n                .slice(0, hfIndex)\n                .reverse()\n                .findIndex((hf) => hf.block !== null || hf.ttd !== undefined);\n            hfIndex = hfIndex - stepBack;\n        }\n        // Move hfIndex one back to arrive at candidate hardfork\n        hfIndex = hfIndex - 1;\n        // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n        // hardforks. so it will now be needed to rollback\n        if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n            // We're on the merge hardfork.  Let's check the TTD\n            if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {\n                // Merge ttd greater than current td so we're on hardfork before merge\n                hfIndex -= 1;\n            }\n        }\n        else {\n            if (mergeIndex >= 0 && td !== undefined && td !== null) {\n                if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {\n                    throw Error('Maximum HF determined by total difficulty is lower than the block number HF');\n                }\n                else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) <= td) {\n                    throw Error('HF determined by block number is lower than the minimum total difficulty HF');\n                }\n            }\n        }\n        const hfStartIndex = hfIndex;\n        // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n        // This won't anyway be the case with Merge hfs\n        for (; hfIndex < hfs.length - 1; hfIndex++) {\n            // break out if hfIndex + 1 is not scheduled at hfIndex\n            if (hfs[hfIndex].block !== hfs[hfIndex + 1].block ||\n                hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {\n                break;\n            }\n        }\n        if (timestamp) {\n            const minTimeStamp = hfs\n                .slice(0, hfStartIndex)\n                .reduce((acc, hf) => Math.max(Number(hf.timestamp ?? '0'), acc), 0);\n            if (minTimeStamp > timestamp) {\n                throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);\n            }\n            const maxTimeStamp = hfs\n                .slice(hfIndex + 1)\n                .reduce((acc, hf) => Math.min(Number(hf.timestamp ?? timestamp), acc), timestamp);\n            if (maxTimeStamp < timestamp) {\n                throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n            }\n        }\n        const hardfork = hfs[hfIndex];\n        return hardfork.name;\n    }\n    /**\n     * Sets a new hardfork based on the block number or an optional\n     * total difficulty (Merge HF) provided.\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param blockNumber\n     * @param td\n     * @param timestamp\n     * @returns The name of the HF set\n     */\n    setHardforkByBlockNumber(blockNumber, td, timestamp) {\n        const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n        this.setHardfork(hardfork);\n        return hardfork;\n    }\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params or null if hardfork not on chain\n     */\n    _getHardfork(hardfork) {\n        const hfs = this.hardforks();\n        for (const hf of hfs) {\n            if (hf['name'] === hardfork)\n                return hf;\n        }\n        return null;\n    }\n    /**\n     * Sets the active EIPs\n     * @param eips\n     */\n    setEIPs(eips = []) {\n        for (const eip of eips) {\n            if (!(eip in eips_1.EIPs)) {\n                throw new Error(`${eip} not supported`);\n            }\n            const minHF = this.gteHardfork(eips_1.EIPs[eip]['minimumHardfork']);\n            if (!minHF) {\n                throw new Error(`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);\n            }\n            if (eips_1.EIPs[eip].requiredEIPs !== undefined) {\n                for (const elem of eips_1.EIPs[eip].requiredEIPs) {\n                    if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n                        throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`);\n                    }\n                }\n            }\n        }\n        this._eips = eips;\n    }\n    /**\n     * Returns a parameter for the current chain setup\n     *\n     * If the parameter is present in an EIP, the EIP always takes precedence.\n     * Otherwise the parameter if taken from the latest applied HF with\n     * a change on the respective parameter.\n     *\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @returns The value requested or `BigInt(0)` if not found\n     */\n    param(topic, name) {\n        // TODO: consider the case that different active EIPs\n        // can change the same parameter\n        let value;\n        for (const eip of this._eips) {\n            value = this.paramByEIP(topic, name, eip);\n            if (value !== undefined)\n                return value;\n        }\n        return this.paramByHardfork(topic, name, this._hardfork);\n    }\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name\n     * @returns The value requested or `BigInt(0)` if not found\n     */\n    paramByHardfork(topic, name, hardfork) {\n        let value = null;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            // EIP-referencing HF file (e.g. berlin.json)\n            if ('eips' in hfChanges[1]) {\n                const hfEIPs = hfChanges[1]['eips'];\n                for (const eip of hfEIPs) {\n                    const valueEIP = this.paramByEIP(topic, name, eip);\n                    value = typeof valueEIP === 'bigint' ? valueEIP : value;\n                }\n                // Parameter-inlining HF file (e.g. istanbul.json)\n            }\n            else {\n                if (hfChanges[1][topic] === undefined) {\n                    throw new Error(`Topic ${topic} not defined`);\n                }\n                if (hfChanges[1][topic][name] !== undefined) {\n                    value = hfChanges[1][topic][name].v;\n                }\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return BigInt(value ?? 0);\n    }\n    /**\n     * Returns a parameter corresponding to an EIP\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param eip Number of the EIP\n     * @returns The value requested or `undefined` if not found\n     */\n    paramByEIP(topic, name, eip) {\n        if (!(eip in eips_1.EIPs)) {\n            throw new Error(`${eip} not supported`);\n        }\n        const eipParams = eips_1.EIPs[eip];\n        if (!(topic in eipParams)) {\n            throw new Error(`Topic ${topic} not defined`);\n        }\n        if (eipParams[topic][name] === undefined) {\n            return undefined;\n        }\n        const value = eipParams[topic][name].v;\n        return BigInt(value);\n    }\n    /**\n     * Returns a parameter for the hardfork active on block number or\n     * optional provided total difficulty (Merge HF)\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     * @param td Total difficulty\n     *    * @returns The value requested or `BigInt(0)` if not found\n     */\n    paramByBlock(topic, name, blockNumber, td, timestamp) {\n        const hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n        return this.paramByHardfork(topic, name, hardfork);\n    }\n    /**\n     * Checks if an EIP is activated by either being included in the EIPs\n     * manually passed in with the {@link CommonOpts.eips} or in a\n     * hardfork currently being active\n     *\n     * Note: this method only works for EIPs being supported\n     * by the {@link CommonOpts.eips} constructor option\n     * @param eip\n     */\n    isActivatedEIP(eip) {\n        if (this.eips().includes(eip)) {\n            return true;\n        }\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            const hf = hfChanges[1];\n            if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n                if (hf['eips'].includes(eip)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */\n    hardforkIsActiveOnBlock(hardfork, blockNumber) {\n        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);\n        hardfork = hardfork ?? this._hardfork;\n        const hfBlock = this.hardforkBlock(hardfork);\n        if (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */\n    activeOnBlock(blockNumber) {\n        return this.hardforkIsActiveOnBlock(null, blockNumber);\n    }\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n    hardforkGteHardfork(hardfork1, hardfork2) {\n        hardfork1 = hardfork1 ?? this._hardfork;\n        const hardforks = this.hardforks();\n        let posHf1 = -1, posHf2 = -1;\n        let index = 0;\n        for (const hf of hardforks) {\n            if (hf['name'] === hardfork1)\n                posHf1 = index;\n            if (hf['name'] === hardfork2)\n                posHf2 = index;\n            index += 1;\n        }\n        return posHf1 >= posHf2 && posHf2 !== -1;\n    }\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n    gteHardfork(hardfork) {\n        return this.hardforkGteHardfork(null, hardfork);\n    }\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if unscheduled\n     */\n    hardforkBlock(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const block = this._getHardfork(hardfork)?.['block'];\n        if (block === undefined || block === null) {\n            return null;\n        }\n        return BigInt(block);\n    }\n    hardforkTimestamp(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const timestamp = this._getHardfork(hardfork)?.['timestamp'];\n        if (timestamp === undefined || timestamp === null) {\n            return null;\n        }\n        return BigInt(timestamp);\n    }\n    /**\n     * Returns the hardfork change block for eip\n     * @param eip EIP number\n     * @returns Block number or null if unscheduled\n     */\n    eipBlock(eip) {\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            const hf = hfChanges[1];\n            if ('eips' in hf) {\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                if (hf['eips'].includes(eip)) {\n                    return this.hardforkBlock(hfChanges[0]);\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Total difficulty or null if no set\n     */\n    hardforkTTD(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const ttd = this._getHardfork(hardfork)?.['ttd'];\n        if (ttd === undefined || ttd === null) {\n            return null;\n        }\n        return BigInt(ttd);\n    }\n    /**\n     * True if block number provided is the hardfork (given or set) change block\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     * @deprecated\n     */\n    isHardforkBlock(blockNumber, hardfork) {\n        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);\n        hardfork = hardfork ?? this._hardfork;\n        const block = this.hardforkBlock(hardfork);\n        return typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false;\n    }\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block timestamp, number or null if not available\n     */\n    nextHardforkBlockOrTimestamp(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        const hfs = this.hardforks();\n        let hfIndex = hfs.findIndex((hf) => hf.name === hardfork);\n        // If the current hardfork is merge, go one behind as merge hf is not part of these\n        // calcs even if the merge hf block is set\n        if (hardfork === enums_1.Hardfork.Merge) {\n            hfIndex -= 1;\n        }\n        // Hardfork not found\n        if (hfIndex < 0) {\n            return null;\n        }\n        let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;\n        currHfTimeOrBlock =\n            currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined\n                ? Number(currHfTimeOrBlock)\n                : null;\n        const nextHf = hfs.slice(hfIndex + 1).find((hf) => {\n            let hfTimeOrBlock = hf.timestamp ?? hf.block;\n            hfTimeOrBlock =\n                hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null;\n            return (hf.name !== enums_1.Hardfork.Merge &&\n                hfTimeOrBlock !== null &&\n                hfTimeOrBlock !== undefined &&\n                hfTimeOrBlock !== currHfTimeOrBlock);\n        });\n        // If no next hf found with valid block or timestamp return null\n        if (nextHf === undefined) {\n            return null;\n        }\n        const nextHfBlock = nextHf.timestamp ?? nextHf.block;\n        if (nextHfBlock === null || nextHfBlock === undefined) {\n            return null;\n        }\n        return BigInt(nextHfBlock);\n    }\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if not available\n     * @deprecated\n     */\n    nextHardforkBlock(hardfork) {\n        hardfork = hardfork ?? this._hardfork;\n        let hfBlock = this.hardforkBlock(hardfork);\n        // If this is a merge hardfork with block not set, then we fallback to previous hardfork\n        // to find the nextHardforkBlock\n        if (hfBlock === null && hardfork === enums_1.Hardfork.Merge) {\n            const hfs = this.hardforks();\n            const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);\n            if (mergeIndex < 0) {\n                throw Error(`Merge hardfork should have been found`);\n            }\n            hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);\n        }\n        if (hfBlock === null) {\n            return null;\n        }\n        // Next fork block number or null if none available\n        // Logic: if accumulator is still null and on the first occurrence of\n        // a block greater than the current hfBlock set the accumulator,\n        // pass on the accumulator as the final result from this time on\n        const nextHfBlock = this.hardforks().reduce((acc, hf) => {\n            // We need to ignore the merge block in our next hardfork calc\n            const block = BigInt(hf.block === null || (hf.ttd !== undefined && hf.ttd !== null) ? 0 : hf.block);\n            // Typescript can't seem to follow that the hfBlock is not null at this point\n            return block > hfBlock && acc === null ? block : acc;\n        }, null);\n        return nextHfBlock;\n    }\n    /**\n     * True if block number provided is the hardfork change block following the hardfork given or set\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     * @deprecated\n     */\n    isNextHardforkBlock(blockNumber, hardfork) {\n        blockNumber = (0, util_1.toType)(blockNumber, util_1.TypeOutput.BigInt);\n        hardfork = hardfork ?? this._hardfork;\n        const nextHardforkBlock = this.nextHardforkBlock(hardfork);\n        return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;\n    }\n    /**\n     * Internal helper function to calculate a fork hash\n     * @param hardfork Hardfork name\n     * @param genesisHash Genesis block hash of the chain\n     * @returns Fork hash as hex string\n     */\n    _calcForkHash(hardfork, genesisHash) {\n        let hfBuffer = Buffer.alloc(0);\n        let prevBlockOrTime = 0;\n        for (const hf of this.hardforks()) {\n            const { block, timestamp, name } = hf;\n            // Timestamp to be used for timestamp based hfs even if we may bundle\n            // block number with them retrospectively\n            let blockOrTime = timestamp ?? block;\n            blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n            // Skip for chainstart (0), not applied HFs (null) and\n            // when already applied on same blockOrTime HFs\n            // and on the merge since forkhash doesn't change on merge hf\n            if (typeof blockOrTime === 'number' &&\n                blockOrTime !== 0 &&\n                blockOrTime !== prevBlockOrTime &&\n                name !== enums_1.Hardfork.Merge) {\n                const hfBlockBuffer = Buffer.from(blockOrTime.toString(16).padStart(16, '0'), 'hex');\n                hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer]);\n                prevBlockOrTime = blockOrTime;\n            }\n            if (hf.name === hardfork)\n                break;\n        }\n        const inputBuffer = Buffer.concat([genesisHash, hfBuffer]);\n        // CRC32 delivers result as signed (negative) 32-bit integer,\n        // convert to hex string\n        const forkhash = (0, util_1.intToBuffer)((0, crc_32_1.buf)(inputBuffer) >>> 0).toString('hex');\n        return `0x${forkhash}`;\n    }\n    /**\n     * Returns an eth/64 compliant fork hash (EIP-2124)\n     * @param hardfork Hardfork name, optional if HF set\n     * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n     */\n    forkHash(hardfork, genesisHash) {\n        hardfork = hardfork ?? this._hardfork;\n        const data = this._getHardfork(hardfork);\n        if (data === null ||\n            (data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)) {\n            const msg = 'No fork hash calculation possible for future hardfork';\n            throw new Error(msg);\n        }\n        if (data?.forkHash !== null && data?.forkHash !== undefined) {\n            return data.forkHash;\n        }\n        if (!genesisHash)\n            throw new Error('genesisHash required for forkHash calculation');\n        return this._calcForkHash(hardfork, genesisHash);\n    }\n    /**\n     *\n     * @param forkHash Fork hash as a hex string\n     * @returns Array with hardfork data (name, block, forkHash)\n     */\n    hardforkForForkHash(forkHash) {\n        const resArray = this.hardforks().filter((hf) => {\n            return hf.forkHash === forkHash;\n        });\n        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n    }\n    /**\n     * Sets any missing forkHashes on the passed-in {@link Common} instance\n     * @param common The {@link Common} to set the forkHashes for\n     * @param genesisHash The genesis block hash\n     */\n    setForkHashes(genesisHash) {\n        for (const hf of this.hardforks()) {\n            const blockOrTime = hf.timestamp ?? hf.block;\n            if ((hf.forkHash === null || hf.forkHash === undefined) &&\n                ((blockOrTime !== null && blockOrTime !== undefined) || typeof hf.ttd !== 'undefined')) {\n                hf.forkHash = this.forkHash(hf.name, genesisHash);\n            }\n        }\n    }\n    /**\n     * Returns the Genesis parameters of the current chain\n     * @returns Genesis dictionary\n     */\n    genesis() {\n        return this._chainParams.genesis;\n    }\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n    hardforks() {\n        return this._chainParams.hardforks;\n    }\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n    bootstrapNodes() {\n        return this._chainParams.bootstrapNodes;\n    }\n    /**\n     * Returns DNS networks for the current chain\n     * @returns {String[]} Array of DNS ENR urls\n     */\n    dnsNetworks() {\n        return this._chainParams.dnsNetworks;\n    }\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n    hardfork() {\n        return this._hardfork;\n    }\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n    chainId() {\n        return BigInt(this._chainParams.chainId);\n    }\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n    chainName() {\n        return this._chainParams.name;\n    }\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n    networkId() {\n        return BigInt(this._chainParams.networkId);\n    }\n    /**\n     * Returns the active EIPs\n     * @returns List of EIPs\n     */\n    eips() {\n        return this._eips;\n    }\n    /**\n     * Returns the consensus type of the network\n     * Possible values: \"pow\"|\"poa\"|\"pos\"\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusType() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                value = hfChanges[1]['consensus']['type'];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return value ?? this._chainParams['consensus']['type'];\n    }\n    /**\n     * Returns the concrete consensus implementation\n     * algorithm or protocol for the network\n     * e.g. \"ethash\" for \"pow\" consensus type,\n     * \"clique\" for \"poa\" consensus type or\n     * \"casper\" for \"pos\" consensus type.\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusAlgorithm() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                value = hfChanges[1]['consensus']['algorithm'];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return value ?? this._chainParams['consensus']['algorithm'];\n    }\n    /**\n     * Returns a dictionary with consensus configuration\n     * parameters based on the consensus algorithm\n     *\n     * Expected returns (parameters must be present in\n     * the respective chain json files):\n     *\n     * ethash: empty object\n     * clique: period, epoch\n     * casper: empty object\n     *\n     * Note: This value can update along a Hardfork.\n     */\n    consensusConfig() {\n        const hardfork = this.hardfork();\n        let value;\n        for (const hfChanges of this.HARDFORK_CHANGES) {\n            if ('consensus' in hfChanges[1]) {\n                // The config parameter is named after the respective consensus algorithm\n                value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']];\n            }\n            if (hfChanges[0] === hardfork)\n                break;\n        }\n        return (value ?? this._chainParams['consensus'][this.consensusAlgorithm()] ?? {});\n    }\n    /**\n     * Returns a deep copy of this {@link Common} instance.\n     */\n    copy() {\n        const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n        copy.removeAllListeners();\n        return copy;\n    }\n    static _getInitializedChains(customChains) {\n        const names = {};\n        for (const [name, id] of Object.entries(enums_1.Chain)) {\n            names[id] = name.toLowerCase();\n        }\n        const chains = { mainnet, ropsten, rinkeby, goerli, sepolia };\n        if (customChains) {\n            for (const chain of customChains) {\n                const { name } = chain;\n                names[chain.chainId.toString()] = name;\n                chains[name] = chain;\n            }\n        }\n        chains.names = names;\n        return chains;\n    }\n}\nexports.Common = Common;\n//# sourceMappingURL=common.js.map","module.exports={\n    \"name\": \"EIP-1153\",\n    \"number\": 1153,\n    \"comment\": \"Transient Storage\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1153\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"chainstart\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"tstore\": {\n            \"v\": 100,\n            \"d\": \"Base fee of the TSTORE opcode\"\n        },\n        \"tload\": {\n            \"v\": 100,\n            \"d\": \"Base fee of the TLOAD opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-1559\",\n    \"number\": 1559,\n    \"comment\": \"Fee market change for ETH 1.0 chain\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1559\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"berlin\",\n    \"requiredEIPs\": [2930],\n    \"gasConfig\": {\n        \"baseFeeMaxChangeDenominator\": {\n            \"v\": 8,\n            \"d\": \"Maximum base fee change denominator\"\n        },\n        \"elasticityMultiplier\": {\n            \"v\": 2,\n            \"d\": \"Maximum block gas target elasticity\"\n        },\n        \"initialBaseFee\": {\n            \"v\": 1000000000,\n            \"d\": \"Initial base fee on first EIP1559 block\"\n        }\n    },\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-2315\",\n    \"number\": 2315,\n    \"comment\": \"Simple subroutines for the EVM\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2315\",\n    \"status\": \"Draft\",\n    \"minimumHardfork\": \"istanbul\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"beginsub\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the BEGINSUB opcode\"\n        },\n        \"returnsub\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the RETURNSUB opcode\"\n        },\n        \"jumpsub\": {\n            \"v\": 10,\n            \"d\": \"Base fee of the JUMPSUB opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-2537\",\n    \"number\": 2537,\n    \"comment\": \"BLS12-381 precompiles\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2537\",\n    \"status\": \"Draft\",\n    \"minimumHardfork\": \"chainstart\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"Bls12381G1AddGas\": {\n            \"v\": 600,\n            \"d\": \"Gas cost of a single BLS12-381 G1 addition precompile-call\"\n        },\n        \"Bls12381G1MulGas\": {\n            \"v\": 12000,\n            \"d\": \"Gas cost of a single BLS12-381 G1 multiplication precompile-call\"\n        },\n        \"Bls12381G2AddGas\": {\n            \"v\": 4500,\n            \"d\": \"Gas cost of a single BLS12-381 G2 addition precompile-call\"\n        },\n        \"Bls12381G2MulGas\": {\n            \"v\": 55000,\n            \"d\": \"Gas cost of a single BLS12-381 G2 multiplication precompile-call\"\n        },\n        \"Bls12381PairingBaseGas\": {\n            \"v\": 115000,\n            \"d\": \"Base gas cost of BLS12-381 pairing check\"\n        },\n        \"Bls12381PairingPerPairGas\": {\n            \"v\": 23000,\n            \"d\": \"Per-pair gas cost of BLS12-381 pairing check\"\n        },\n        \"Bls12381MapG1Gas\": {\n            \"v\": 5500,\n            \"d\": \"Gas cost of BLS12-381 map field element to G1\"\n        },\n        \"Bls12381MapG2Gas\": {\n            \"v\": 110000,\n            \"d\": \"Gas cost of BLS12-381 map field element to G2\"\n        },\n        \"Bls12381MultiExpGasDiscount\": {\n            \"v\": [\n                [1, 1200],\n                [2, 888],\n                [3, 764],\n                [4, 641],\n                [5, 594],\n                [6, 547],\n                [7, 500],\n                [8, 453],\n                [9, 438],\n                [10, 423],\n                [11, 408],\n                [12, 394],\n                [13, 379],\n                [14, 364],\n                [15, 349],\n                [16, 334],\n                [17, 330],\n                [18, 326],\n                [19, 322],\n                [20, 318],\n                [21, 314],\n                [22, 310],\n                [23, 306],\n                [24, 302],\n                [25, 298],\n                [26, 294],\n                [27, 289],\n                [28, 285],\n                [29, 281],\n                [30, 277],\n                [31, 273],\n                [32, 269],\n                [33, 268],\n                [34, 266],\n                [35, 265],\n                [36, 263],\n                [37, 262],\n                [38, 260],\n                [39, 259],\n                [40, 257],\n                [41, 256],\n                [42, 254],\n                [43, 253],\n                [44, 251],\n                [45, 250],\n                [46, 248],\n                [47, 247],\n                [48, 245],\n                [49, 244],\n                [50, 242],\n                [51, 241],\n                [52, 239],\n                [53, 238],\n                [54, 236],\n                [55, 235],\n                [56, 233],\n                [57, 232],\n                [58, 231],\n                [59, 229],\n                [60, 228],\n                [61, 226],\n                [62, 225],\n                [63, 223],\n                [64, 222],\n                [65, 221],\n                [66, 220],\n                [67, 219],\n                [68, 219],\n                [69, 218],\n                [70, 217],\n                [71, 216],\n                [72, 216],\n                [73, 215],\n                [74, 214],\n                [75, 213],\n                [76, 213],\n                [77, 212],\n                [78, 211],\n                [79, 211],\n                [80, 210],\n                [81, 209],\n                [82, 208],\n                [83, 208],\n                [84, 207],\n                [85, 206],\n                [86, 205],\n                [87, 205],\n                [88, 204],\n                [89, 203],\n                [90, 202],\n                [91, 202],\n                [92, 201],\n                [93, 200],\n                [94, 199],\n                [95, 199],\n                [96, 198],\n                [97, 197],\n                [98, 196],\n                [99, 196],\n                [100, 195],\n                [101, 194],\n                [102, 193],\n                [103, 193],\n                [104, 192],\n                [105, 191],\n                [106, 191],\n                [107, 190],\n                [108, 189],\n                [109, 188],\n                [110, 188],\n                [111, 187],\n                [112, 186],\n                [113, 185],\n                [114, 185],\n                [115, 184],\n                [116, 183],\n                [117, 182],\n                [118, 182],\n                [119, 181],\n                [120, 180],\n                [121, 179],\n                [122, 179],\n                [123, 178],\n                [124, 177],\n                [125, 176],\n                [126, 176],\n                [127, 175],\n                [128, 174]\n            ],\n            \"d\": \"Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-2565\",\n    \"number\": 2565,\n    \"comment\": \"ModExp gas cost\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2565\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"byzantium\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"modexpGquaddivisor\": {\n            \"v\": 3,\n            \"d\": \"Gquaddivisor from modexp precompile for gas calculation\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-2718\",\n    \"comment\": \"Typed Transaction Envelope\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2718\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"chainstart\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-2929\",\n    \"comment\": \"Gas cost increases for state access opcodes\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2929\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"chainstart\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"coldsload\": {\n            \"v\": 2100,\n            \"d\": \"Gas cost of the first read of storage from a given location (per transaction)\"\n        },\n        \"coldaccountaccess\": {\n            \"v\": 2600,\n            \"d\": \"Gas cost of the first read of a given address (per transaction)\"\n        },\n        \"warmstorageread\": {\n            \"v\": 100,\n            \"d\": \"Gas cost of reading storage locations which have already loaded 'cold'\"\n        },\n        \"sstoreCleanGasEIP2200\": {\n            \"v\": 2900,\n            \"d\": \"Once per SSTORE operation from clean non-zero to something else\"\n        },\n        \"sstoreNoopGasEIP2200\": {\n            \"v\": 100,\n            \"d\": \"Once per SSTORE operation if the value doesn't change\"\n        },\n        \"sstoreDirtyGasEIP2200\": {\n            \"v\": 100,\n            \"d\": \"Once per SSTORE operation if a dirty value is changed\"\n        },\n        \"sstoreInitRefundEIP2200\": {\n            \"v\": 19900,\n            \"d\": \"Once per SSTORE operation for resetting to the original zero value\"\n        },\n        \"sstoreCleanRefundEIP2200\": {\n            \"v\": 4900,\n            \"d\": \"Once per SSTORE operation for resetting to the original non-zero value\"\n        },\n        \"call\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the CALL opcode\"\n        },\n        \"callcode\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the CALLCODE opcode\"\n        },\n        \"delegatecall\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the DELEGATECALL opcode\"\n        },\n        \"staticcall\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the STATICCALL opcode\"\n        },\n        \"balance\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the BALANCE opcode\"\n        },\n        \"extcodesize\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the EXTCODESIZE opcode\"\n        },\n        \"extcodecopy\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the EXTCODECOPY opcode\"\n        },\n        \"extcodehash\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the EXTCODEHASH opcode\"\n        },\n        \"sload\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the SLOAD opcode\"\n        },\n        \"sstore\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the SSTORE opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-2930\",\n    \"comment\": \"Optional access lists\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2930\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"istanbul\",\n    \"requiredEIPs\": [2718, 2929],\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"accessListStorageKeyCost\": {\n            \"v\": 1900,\n            \"d\": \"Gas cost per storage key in an Access List transaction\"\n        },\n        \"accessListAddressCost\": {\n            \"v\": 2400,\n            \"d\": \"Gas cost per storage key in an Access List transaction\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3074\",\n    \"number\": 3074,\n    \"comment\": \"AUTH and AUTHCALL opcodes\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3074\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"auth\": {\n            \"v\": 3100,\n            \"d\": \"Gas cost of the AUTH opcode\"\n        },\n        \"authcall\": {\n            \"v\": 0,\n            \"d\": \"Gas cost of the AUTHCALL opcode\"\n        },\n        \"authcallValueTransfer\": {\n            \"v\": 6700,\n            \"d\": \"Paid for CALL when the value transfer is non-zero\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3198\",\n    \"number\": 3198,\n    \"comment\": \"BASEFEE opcode\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3198\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"london\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"basefee\": {\n            \"v\": 2,\n            \"d\": \"Gas cost of the BASEFEE opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3529\",\n    \"comment\": \"Reduction in refunds\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3529\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"berlin\",\n    \"requiredEIPs\": [2929],\n    \"gasConfig\": {\n        \"maxRefundQuotient\": {\n            \"v\": 5,\n            \"d\": \"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)\"\n        }\n    },\n    \"gasPrices\": {\n        \"selfdestructRefund\": {\n            \"v\": 0,\n            \"d\": \"Refunded following a selfdestruct operation\"\n        },\n        \"sstoreClearRefundEIP2200\": {\n            \"v\": 4800,\n            \"d\": \"Once per SSTORE operation for clearing an originally existing storage slot\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3540\",\n    \"number\": 3540,\n    \"comment\": \"EVM Object Format (EOF) v1\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3540\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [3541],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3541\",\n    \"comment\": \"Reject new contracts starting with the 0xEF byte\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3541\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"berlin\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3554\",\n    \"comment\": \"Reduction in refunds\",\n    \"url\": \"Difficulty Bomb Delay to December 1st 2021\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"muirGlacier\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {\n        \"difficultyBombDelay\": {\n            \"v\": 9500000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports={\n    \"name\": \"EIP-3607\",\n    \"number\": 3607,\n    \"comment\": \"Reject transactions from senders with deployed code\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3607\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"chainstart\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3651\",\n    \"number\": 3198,\n    \"comment\": \"Warm COINBASE\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3651\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [2929],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3670\",\n    \"number\": 3670,\n    \"comment\": \"EOF - Code Validation\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3670\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [3540],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3675\",\n    \"number\": 3675,\n    \"comment\": \"Upgrade consensus to Proof-of-Stake\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3675\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3855\",\n    \"number\": 3855,\n    \"comment\": \"PUSH0 instruction\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3855\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"chainstart\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"push0\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the PUSH0 opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-3860\",\n    \"number\": 3860,\n    \"comment\": \"Limit and meter initcode\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3860\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"spuriousDragon\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"initCodeWordCost\": {\n            \"v\": 2,\n            \"d\": \"Gas to pay for each word (32 bytes) of initcode when creating a contract\"\n        }\n    },\n    \"vm\": {\n        \"maxInitCodeSize\": {\n            \"v\": 49152,\n            \"d\": \"Maximum length of initialization code when creating a contract\"\n        }\n    },\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-4345\",\n    \"number\": 4345,\n    \"comment\": \"Difficulty Bomb Delay to June 2022\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-4345\",\n    \"status\": \"Final\",\n    \"minimumHardfork\": \"london\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {\n        \"difficultyBombDelay\": {\n            \"v\": 10700000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports={\n    \"name\": \"EIP-4399\",\n    \"number\": 4399,\n    \"comment\": \"Supplant DIFFICULTY opcode with PREVRANDAO\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-4399\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"london\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-4844\",\n    \"number\": 4844,\n    \"comment\": \"Shard Blob Transactions\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-4844\",\n    \"status\": \"Draft\",\n    \"minimumHardfork\": \"merge\",\n    \"requiredEIPs\": [1559, 2718, 2930, 4895],\n    \"gasConfig\": {\n        \"dataGasPerBlob\": {\n            \"v\": 131072,\n            \"d\": \"The base fee for data gas per blob\"\n        },\n        \"targetDataGasPerBlock\": {\n            \"v\": 262144,\n            \"d\": \"The target data gas consumed per block\"\n        },\n        \"maxDataGasPerBlock\": {\n            \"v\": 524288,\n            \"d\": \"The max data gas allowable per block\"\n        },\n        \"dataGasPriceUpdateFraction\": {\n            \"v\": 2225652,\n            \"d\": \"The denominator used in the exponential when calculating a data gas price\"\n        }\n    },\n    \"gasPrices\": {\n        \"simpleGasPerBlob\": {\n            \"v\": 12000,\n            \"d\": \"The basic gas fee for each blob\"\n        },\n        \"minDataGasPrice\": {\n            \"v\": 1,\n            \"d\": \"The minimum fee per data gas\"\n        },\n        \"kzgPointEvaluationGasPrecompilePrice\": {\n            \"v\": 50000,\n            \"d\": \"The fee associated with the point evaluation precompile\"\n        },\n        \"datahash\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the DATAHASH opcode\"\n        }\n    },\n    \"sharding\": {\n        \"blobCommitmentVersionKzg\": {\n            \"v\": 1,\n            \"d\": \"The number indicated a versioned hash is a KZG commitment\"\n        },\n        \"fieldElementsPerBlob\": {\n            \"v\": 4096,\n            \"d\": \"The number of field elements allowed per blob\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-4895\",\n    \"number\": 4895,\n    \"comment\": \"Beacon chain push withdrawals as operations\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-4895\",\n    \"status\": \"Review\",\n    \"minimumHardfork\": \"merge\",\n    \"requiredEIPs\": [],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"EIP-5133\",\n    \"number\": 5133,\n    \"comment\": \"Delaying Difficulty Bomb to mid-September 2022\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-5133\",\n    \"status\": \"Draft\",\n    \"minimumHardfork\": \"grayGlacier\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {\n        \"difficultyBombDelay\": {\n            \"v\": 11400000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIPs = void 0;\nexports.EIPs = {\n    1153: require('./1153.json'),\n    1559: require('./1559.json'),\n    2315: require('./2315.json'),\n    2537: require('./2537.json'),\n    2565: require('./2565.json'),\n    2718: require('./2718.json'),\n    2929: require('./2929.json'),\n    2930: require('./2930.json'),\n    3074: require('./3074.json'),\n    3198: require('./3198.json'),\n    3529: require('./3529.json'),\n    3540: require('./3540.json'),\n    3541: require('./3541.json'),\n    3554: require('./3554.json'),\n    3607: require('./3607.json'),\n    3651: require('./3651.json'),\n    3670: require('./3670.json'),\n    3675: require('./3675.json'),\n    3855: require('./3855.json'),\n    3860: require('./3860.json'),\n    4345: require('./4345.json'),\n    4399: require('./4399.json'),\n    4844: require('./4844.json'),\n    4895: require('./4895.json'),\n    5133: require('./5133.json'),\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CustomChain = exports.ConsensusAlgorithm = exports.ConsensusType = exports.Hardfork = exports.Chain = void 0;\nvar Chain;\n(function (Chain) {\n    Chain[Chain[\"Mainnet\"] = 1] = \"Mainnet\";\n    Chain[Chain[\"Ropsten\"] = 3] = \"Ropsten\";\n    Chain[Chain[\"Rinkeby\"] = 4] = \"Rinkeby\";\n    Chain[Chain[\"Goerli\"] = 5] = \"Goerli\";\n    Chain[Chain[\"Sepolia\"] = 11155111] = \"Sepolia\";\n})(Chain = exports.Chain || (exports.Chain = {}));\nvar Hardfork;\n(function (Hardfork) {\n    Hardfork[\"Chainstart\"] = \"chainstart\";\n    Hardfork[\"Homestead\"] = \"homestead\";\n    Hardfork[\"Dao\"] = \"dao\";\n    Hardfork[\"TangerineWhistle\"] = \"tangerineWhistle\";\n    Hardfork[\"SpuriousDragon\"] = \"spuriousDragon\";\n    Hardfork[\"Byzantium\"] = \"byzantium\";\n    Hardfork[\"Constantinople\"] = \"constantinople\";\n    Hardfork[\"Petersburg\"] = \"petersburg\";\n    Hardfork[\"Istanbul\"] = \"istanbul\";\n    Hardfork[\"MuirGlacier\"] = \"muirGlacier\";\n    Hardfork[\"Berlin\"] = \"berlin\";\n    Hardfork[\"London\"] = \"london\";\n    Hardfork[\"ArrowGlacier\"] = \"arrowGlacier\";\n    Hardfork[\"GrayGlacier\"] = \"grayGlacier\";\n    Hardfork[\"MergeForkIdTransition\"] = \"mergeForkIdTransition\";\n    Hardfork[\"Merge\"] = \"merge\";\n    Hardfork[\"Shanghai\"] = \"shanghai\";\n    Hardfork[\"ShardingForkDev\"] = \"shardingFork\";\n})(Hardfork = exports.Hardfork || (exports.Hardfork = {}));\nvar ConsensusType;\n(function (ConsensusType) {\n    ConsensusType[\"ProofOfStake\"] = \"pos\";\n    ConsensusType[\"ProofOfWork\"] = \"pow\";\n    ConsensusType[\"ProofOfAuthority\"] = \"poa\";\n})(ConsensusType = exports.ConsensusType || (exports.ConsensusType = {}));\nvar ConsensusAlgorithm;\n(function (ConsensusAlgorithm) {\n    ConsensusAlgorithm[\"Ethash\"] = \"ethash\";\n    ConsensusAlgorithm[\"Clique\"] = \"clique\";\n    ConsensusAlgorithm[\"Casper\"] = \"casper\";\n})(ConsensusAlgorithm = exports.ConsensusAlgorithm || (exports.ConsensusAlgorithm = {}));\nvar CustomChain;\n(function (CustomChain) {\n    /**\n     * Polygon (Matic) Mainnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMainnet\"] = \"polygon-mainnet\";\n    /**\n     * Polygon (Matic) Mumbai Testnet\n     *\n     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n     */\n    CustomChain[\"PolygonMumbai\"] = \"polygon-mumbai\";\n    /**\n     * Arbitrum Rinkeby Testnet\n     *\n     * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n     */\n    CustomChain[\"ArbitrumRinkebyTestnet\"] = \"arbitrum-rinkeby-testnet\";\n    /**\n     * Arbitrum One - mainnet for Arbitrum roll-up\n     *\n     * - [Documentation](https://developer.offchainlabs.com/public-chains)\n     */\n    CustomChain[\"ArbitrumOne\"] = \"arbitrum-one\";\n    /**\n     * xDai EVM sidechain with a native stable token\n     *\n     * - [Documentation](https://www.xdaichain.com/)\n     */\n    CustomChain[\"xDaiChain\"] = \"x-dai-chain\";\n    /**\n     * Optimistic Kovan - testnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticKovan\"] = \"optimistic-kovan\";\n    /**\n     * Optimistic Ethereum - mainnet for Optimism roll-up\n     *\n     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n     */\n    CustomChain[\"OptimisticEthereum\"] = \"optimistic-ethereum\";\n})(CustomChain = exports.CustomChain || (exports.CustomChain = {}));\n//# sourceMappingURL=enums.js.map","module.exports={\n    \"name\": \"arrowGlacier\",\n    \"comment\": \"HF to delay the difficulty bomb\",\n    \"url\": \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md\",\n    \"status\": \"Final\",\n    \"eips\": [4345],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"berlin\",\n    \"comment\": \"HF targeted for July 2020 following the Muir Glacier HF\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2070\",\n    \"status\": \"Final\",\n    \"eips\": [2565, 2929, 2718, 2930]\n}\n","module.exports={\n    \"name\": \"byzantium\",\n    \"comment\": \"Hardfork with new precompiles, instructions and other protocol changes\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-609\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"modexpGquaddivisor\": {\n            \"v\": 20,\n            \"d\": \"Gquaddivisor from modexp precompile for gas calculation\"\n        },\n        \"ecAdd\": {\n            \"v\": 500,\n            \"d\": \"Gas costs for curve addition precompile\"\n        },\n        \"ecMul\": {\n            \"v\": 40000,\n            \"d\": \"Gas costs for curve multiplication precompile\"\n        },\n        \"ecPairing\": {\n            \"v\": 100000,\n            \"d\": \"Base gas costs for curve pairing precompile\"\n        },\n        \"ecPairingWord\": {\n            \"v\": 80000,\n            \"d\": \"Gas costs regarding curve pairing precompile input length\"\n        },\n        \"revert\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the REVERT opcode\"\n        },\n        \"staticcall\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the STATICCALL opcode\"\n        },\n        \"returndatasize\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the RETURNDATASIZE opcode\"\n        },\n        \"returndatacopy\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the RETURNDATACOPY opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {\n        \"minerReward\": {\n            \"v\": \"3000000000000000000\",\n            \"d\": \"the amount a miner get rewarded for mining a block\"\n        },\n        \"difficultyBombDelay\": {\n            \"v\": 3000000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports={\n    \"name\": \"chainstart\",\n    \"comment\": \"Start of the Ethereum main chain\",\n    \"url\": \"\",\n    \"status\": \"\",\n    \"gasConfig\": {\n        \"minGasLimit\": {\n            \"v\": 5000,\n            \"d\": \"Minimum the gas limit may ever be\"\n        },\n        \"gasLimitBoundDivisor\": {\n            \"v\": 1024,\n            \"d\": \"The bound divisor of the gas limit, used in update calculations\"\n        },\n        \"maxRefundQuotient\": {\n            \"v\": 2,\n            \"d\": \"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)\"\n        }\n    },\n    \"gasPrices\": {\n        \"base\": {\n            \"v\": 2,\n            \"d\": \"Gas base cost, used e.g. for ChainID opcode (Istanbul)\"\n        },\n        \"tierStep\": {\n            \"v\": [0, 2, 3, 5, 8, 10, 20],\n            \"d\": \"Once per operation, for a selection of them\"\n        },\n        \"exp\": {\n            \"v\": 10,\n            \"d\": \"Base fee of the EXP opcode\"\n        },\n        \"expByte\": {\n            \"v\": 10,\n            \"d\": \"Times ceil(log256(exponent)) for the EXP instruction\"\n        },\n        \"sha3\": {\n            \"v\": 30,\n            \"d\": \"Base fee of the SHA3 opcode\"\n        },\n        \"sha3Word\": {\n            \"v\": 6,\n            \"d\": \"Once per word of the SHA3 operation's data\"\n        },\n        \"sload\": {\n            \"v\": 50,\n            \"d\": \"Base fee of the SLOAD opcode\"\n        },\n        \"sstoreSet\": {\n            \"v\": 20000,\n            \"d\": \"Once per SSTORE operation if the zeroness changes from zero\"\n        },\n        \"sstoreReset\": {\n            \"v\": 5000,\n            \"d\": \"Once per SSTORE operation if the zeroness does not change from zero\"\n        },\n        \"sstoreRefund\": {\n            \"v\": 15000,\n            \"d\": \"Once per SSTORE operation if the zeroness changes to zero\"\n        },\n        \"jumpdest\": {\n            \"v\": 1,\n            \"d\": \"Base fee of the JUMPDEST opcode\"\n        },\n        \"log\": {\n            \"v\": 375,\n            \"d\": \"Base fee of the LOG opcode\"\n        },\n        \"logData\": {\n            \"v\": 8,\n            \"d\": \"Per byte in a LOG* operation's data\"\n        },\n        \"logTopic\": {\n            \"v\": 375,\n            \"d\": \"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas\"\n        },\n        \"create\": {\n            \"v\": 32000,\n            \"d\": \"Base fee of the CREATE opcode\"\n        },\n        \"call\": {\n            \"v\": 40,\n            \"d\": \"Base fee of the CALL opcode\"\n        },\n        \"callStipend\": {\n            \"v\": 2300,\n            \"d\": \"Free gas given at beginning of call\"\n        },\n        \"callValueTransfer\": {\n            \"v\": 9000,\n            \"d\": \"Paid for CALL when the value transfor is non-zero\"\n        },\n        \"callNewAccount\": {\n            \"v\": 25000,\n            \"d\": \"Paid for CALL when the destination address didn't exist prior\"\n        },\n        \"selfdestructRefund\": {\n            \"v\": 24000,\n            \"d\": \"Refunded following a selfdestruct operation\"\n        },\n        \"memory\": {\n            \"v\": 3,\n            \"d\": \"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL\"\n        },\n        \"quadCoeffDiv\": {\n            \"v\": 512,\n            \"d\": \"Divisor for the quadratic particle of the memory cost equation\"\n        },\n        \"createData\": {\n            \"v\": 200,\n            \"d\": \"\"\n        },\n        \"tx\": {\n            \"v\": 21000,\n            \"d\": \"Per transaction. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"txCreation\": {\n            \"v\": 32000,\n            \"d\": \"The cost of creating a contract via tx\"\n        },\n        \"txDataZero\": {\n            \"v\": 4,\n            \"d\": \"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"txDataNonZero\": {\n            \"v\": 68,\n            \"d\": \"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"copy\": {\n            \"v\": 3,\n            \"d\": \"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added\"\n        },\n        \"ecRecover\": {\n            \"v\": 3000,\n            \"d\": \"\"\n        },\n        \"sha256\": {\n            \"v\": 60,\n            \"d\": \"\"\n        },\n        \"sha256Word\": {\n            \"v\": 12,\n            \"d\": \"\"\n        },\n        \"ripemd160\": {\n            \"v\": 600,\n            \"d\": \"\"\n        },\n        \"ripemd160Word\": {\n            \"v\": 120,\n            \"d\": \"\"\n        },\n        \"identity\": {\n            \"v\": 15,\n            \"d\": \"\"\n        },\n        \"identityWord\": {\n            \"v\": 3,\n            \"d\": \"\"\n        },\n        \"stop\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the STOP opcode\"\n        },\n        \"add\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the ADD opcode\"\n        },\n        \"mul\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the MUL opcode\"\n        },\n        \"sub\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SUB opcode\"\n        },\n        \"div\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the DIV opcode\"\n        },\n        \"sdiv\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the SDIV opcode\"\n        },\n        \"mod\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the MOD opcode\"\n        },\n        \"smod\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the SMOD opcode\"\n        },\n        \"addmod\": {\n            \"v\": 8,\n            \"d\": \"Base fee of the ADDMOD opcode\"\n        },\n        \"mulmod\": {\n            \"v\": 8,\n            \"d\": \"Base fee of the MULMOD opcode\"\n        },\n        \"signextend\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the SIGNEXTEND opcode\"\n        },\n        \"lt\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the LT opcode\"\n        },\n        \"gt\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the GT opcode\"\n        },\n        \"slt\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SLT opcode\"\n        },\n        \"sgt\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SGT opcode\"\n        },\n        \"eq\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the EQ opcode\"\n        },\n        \"iszero\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the ISZERO opcode\"\n        },\n        \"and\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the AND opcode\"\n        },\n        \"or\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the OR opcode\"\n        },\n        \"xor\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the XOR opcode\"\n        },\n        \"not\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the NOT opcode\"\n        },\n        \"byte\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the BYTE opcode\"\n        },\n        \"address\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the ADDRESS opcode\"\n        },\n        \"balance\": {\n            \"v\": 20,\n            \"d\": \"Base fee of the BALANCE opcode\"\n        },\n        \"origin\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the ORIGIN opcode\"\n        },\n        \"caller\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CALLER opcode\"\n        },\n        \"callvalue\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CALLVALUE opcode\"\n        },\n        \"calldataload\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the CALLDATALOAD opcode\"\n        },\n        \"calldatasize\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CALLDATASIZE opcode\"\n        },\n        \"calldatacopy\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the CALLDATACOPY opcode\"\n        },\n        \"codesize\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CODESIZE opcode\"\n        },\n        \"codecopy\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the CODECOPY opcode\"\n        },\n        \"gasprice\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the GASPRICE opcode\"\n        },\n        \"extcodesize\": {\n            \"v\": 20,\n            \"d\": \"Base fee of the EXTCODESIZE opcode\"\n        },\n        \"extcodecopy\": {\n            \"v\": 20,\n            \"d\": \"Base fee of the EXTCODECOPY opcode\"\n        },\n        \"blockhash\": {\n            \"v\": 20,\n            \"d\": \"Base fee of the BLOCKHASH opcode\"\n        },\n        \"coinbase\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the COINBASE opcode\"\n        },\n        \"timestamp\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the TIMESTAMP opcode\"\n        },\n        \"number\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the NUMBER opcode\"\n        },\n        \"difficulty\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the DIFFICULTY opcode\"\n        },\n        \"gaslimit\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the GASLIMIT opcode\"\n        },\n        \"pop\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the POP opcode\"\n        },\n        \"mload\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the MLOAD opcode\"\n        },\n        \"mstore\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the MSTORE opcode\"\n        },\n        \"mstore8\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the MSTORE8 opcode\"\n        },\n        \"sstore\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the SSTORE opcode\"\n        },\n        \"jump\": {\n            \"v\": 8,\n            \"d\": \"Base fee of the JUMP opcode\"\n        },\n        \"jumpi\": {\n            \"v\": 10,\n            \"d\": \"Base fee of the JUMPI opcode\"\n        },\n        \"pc\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the PC opcode\"\n        },\n        \"msize\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the MSIZE opcode\"\n        },\n        \"gas\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the GAS opcode\"\n        },\n        \"push\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the PUSH opcode\"\n        },\n        \"dup\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the DUP opcode\"\n        },\n        \"swap\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SWAP opcode\"\n        },\n        \"callcode\": {\n            \"v\": 40,\n            \"d\": \"Base fee of the CALLCODE opcode\"\n        },\n        \"return\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the RETURN opcode\"\n        },\n        \"invalid\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the INVALID opcode\"\n        },\n        \"selfdestruct\": {\n            \"v\": 0,\n            \"d\": \"Base fee of the SELFDESTRUCT opcode\"\n        }\n    },\n    \"vm\": {\n        \"stackLimit\": {\n            \"v\": 1024,\n            \"d\": \"Maximum size of VM stack allowed\"\n        },\n        \"callCreateDepth\": {\n            \"v\": 1024,\n            \"d\": \"Maximum depth of call/create stack\"\n        },\n        \"maxExtraDataSize\": {\n            \"v\": 32,\n            \"d\": \"Maximum size extra data may be after Genesis\"\n        }\n    },\n    \"pow\": {\n        \"minimumDifficulty\": {\n            \"v\": 131072,\n            \"d\": \"The minimum that the difficulty may ever be\"\n        },\n        \"difficultyBoundDivisor\": {\n            \"v\": 2048,\n            \"d\": \"The bound divisor of the difficulty, used in the update calculations\"\n        },\n        \"durationLimit\": {\n            \"v\": 13,\n            \"d\": \"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not\"\n        },\n        \"epochDuration\": {\n            \"v\": 30000,\n            \"d\": \"Duration between proof-of-work epochs\"\n        },\n        \"timebombPeriod\": {\n            \"v\": 100000,\n            \"d\": \"Exponential difficulty timebomb period\"\n        },\n        \"minerReward\": {\n            \"v\": \"5000000000000000000\",\n            \"d\": \"the amount a miner get rewarded for mining a block\"\n        },\n        \"difficultyBombDelay\": {\n            \"v\": 0,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports={\n    \"name\": \"constantinople\",\n    \"comment\": \"Postponed hardfork including EIP-1283 (SSTORE gas metering changes)\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1013\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"netSstoreNoopGas\": {\n            \"v\": 200,\n            \"d\": \"Once per SSTORE operation if the value doesn't change\"\n        },\n        \"netSstoreInitGas\": {\n            \"v\": 20000,\n            \"d\": \"Once per SSTORE operation from clean zero\"\n        },\n        \"netSstoreCleanGas\": {\n            \"v\": 5000,\n            \"d\": \"Once per SSTORE operation from clean non-zero\"\n        },\n        \"netSstoreDirtyGas\": {\n            \"v\": 200,\n            \"d\": \"Once per SSTORE operation from dirty\"\n        },\n        \"netSstoreClearRefund\": {\n            \"v\": 15000,\n            \"d\": \"Once per SSTORE operation for clearing an originally existing storage slot\"\n        },\n        \"netSstoreResetRefund\": {\n            \"v\": 4800,\n            \"d\": \"Once per SSTORE operation for resetting to the original non-zero value\"\n        },\n        \"netSstoreResetClearRefund\": {\n            \"v\": 19800,\n            \"d\": \"Once per SSTORE operation for resetting to the original zero value\"\n        },\n        \"shl\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SHL opcode\"\n        },\n        \"shr\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SHR opcode\"\n        },\n        \"sar\": {\n            \"v\": 3,\n            \"d\": \"Base fee of the SAR opcode\"\n        },\n        \"extcodehash\": {\n            \"v\": 400,\n            \"d\": \"Base fee of the EXTCODEHASH opcode\"\n        },\n        \"create2\": {\n            \"v\": 32000,\n            \"d\": \"Base fee of the CREATE2 opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {\n        \"minerReward\": {\n            \"v\": \"2000000000000000000\",\n            \"d\": \"The amount a miner gets rewarded for mining a block\"\n        },\n        \"difficultyBombDelay\": {\n            \"v\": 5000000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports={\n    \"name\": \"dao\",\n    \"comment\": \"DAO rescue hardfork\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-779\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"grayGlacier\",\n    \"comment\": \"Delaying the difficulty bomb to Mid September 2022\",\n    \"url\": \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md\",\n    \"status\": \"Draft\",\n    \"eips\": [5133],\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"homestead\",\n    \"comment\": \"Homestead hardfork with protocol and network changes\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-606\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"delegatecall\": {\n            \"v\": 40,\n            \"d\": \"Base fee of the DELEGATECALL opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hardforks = void 0;\nexports.hardforks = {\n    chainstart: require('./chainstart.json'),\n    homestead: require('./homestead.json'),\n    dao: require('./dao.json'),\n    tangerineWhistle: require('./tangerineWhistle.json'),\n    spuriousDragon: require('./spuriousDragon.json'),\n    byzantium: require('./byzantium.json'),\n    constantinople: require('./constantinople.json'),\n    petersburg: require('./petersburg.json'),\n    istanbul: require('./istanbul.json'),\n    muirGlacier: require('./muirGlacier.json'),\n    berlin: require('./berlin.json'),\n    london: require('./london.json'),\n    shanghai: require('./shanghai.json'),\n    arrowGlacier: require('./arrowGlacier.json'),\n    grayGlacier: require('./grayGlacier.json'),\n    mergeForkIdTransition: require('./mergeForkIdTransition.json'),\n    merge: require('./merge.json'),\n    shardingFork: require('./sharding.json'),\n};\n//# sourceMappingURL=index.js.map","module.exports={\n    \"name\": \"istanbul\",\n    \"comment\": \"HF targeted for December 2019 following the Constantinople/Petersburg HF\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1679\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"blake2Round\": {\n            \"v\": 1,\n            \"d\": \"Gas cost per round for the Blake2 F precompile\"\n        },\n        \"ecAdd\": {\n            \"v\": 150,\n            \"d\": \"Gas costs for curve addition precompile\"\n        },\n        \"ecMul\": {\n            \"v\": 6000,\n            \"d\": \"Gas costs for curve multiplication precompile\"\n        },\n        \"ecPairing\": {\n            \"v\": 45000,\n            \"d\": \"Base gas costs for curve pairing precompile\"\n        },\n        \"ecPairingWord\": {\n            \"v\": 34000,\n            \"d\": \"Gas costs regarding curve pairing precompile input length\"\n        },\n        \"txDataNonZero\": {\n            \"v\": 16,\n            \"d\": \"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions\"\n        },\n        \"sstoreSentryGasEIP2200\": {\n            \"v\": 2300,\n            \"d\": \"Minimum gas required to be present for an SSTORE call, not consumed\"\n        },\n        \"sstoreNoopGasEIP2200\": {\n            \"v\": 800,\n            \"d\": \"Once per SSTORE operation if the value doesn't change\"\n        },\n        \"sstoreDirtyGasEIP2200\": {\n            \"v\": 800,\n            \"d\": \"Once per SSTORE operation if a dirty value is changed\"\n        },\n        \"sstoreInitGasEIP2200\": {\n            \"v\": 20000,\n            \"d\": \"Once per SSTORE operation from clean zero to non-zero\"\n        },\n        \"sstoreInitRefundEIP2200\": {\n            \"v\": 19200,\n            \"d\": \"Once per SSTORE operation for resetting to the original zero value\"\n        },\n        \"sstoreCleanGasEIP2200\": {\n            \"v\": 5000,\n            \"d\": \"Once per SSTORE operation from clean non-zero to something else\"\n        },\n        \"sstoreCleanRefundEIP2200\": {\n            \"v\": 4200,\n            \"d\": \"Once per SSTORE operation for resetting to the original non-zero value\"\n        },\n        \"sstoreClearRefundEIP2200\": {\n            \"v\": 15000,\n            \"d\": \"Once per SSTORE operation for clearing an originally existing storage slot\"\n        },\n        \"balance\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the BALANCE opcode\"\n        },\n        \"extcodehash\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the EXTCODEHASH opcode\"\n        },\n        \"chainid\": {\n            \"v\": 2,\n            \"d\": \"Base fee of the CHAINID opcode\"\n        },\n        \"selfbalance\": {\n            \"v\": 5,\n            \"d\": \"Base fee of the SELFBALANCE opcode\"\n        },\n        \"sload\": {\n            \"v\": 800,\n            \"d\": \"Base fee of the SLOAD opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"london\",\n    \"comment\": \"HF targeted for July 2021 following the Berlin fork\",\n    \"url\": \"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md\",\n    \"status\": \"Final\",\n    \"eips\": [1559, 3198, 3529, 3541]\n}\n","module.exports={\n    \"name\": \"merge\",\n    \"comment\": \"Hardfork to upgrade the consensus mechanism to Proof-of-Stake\",\n    \"url\": \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md\",\n    \"status\": \"Final\",\n    \"consensus\": {\n        \"type\": \"pos\",\n        \"algorithm\": \"casper\",\n        \"casper\": {}\n    },\n    \"eips\": [3675, 4399]\n}\n","module.exports={\n    \"name\": \"mergeForkIdTransition\",\n    \"comment\": \"Pre-merge hardfork to fork off non-upgraded clients\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-3675\",\n    \"status\": \"Draft\",\n    \"eips\": []\n}\n","module.exports={\n    \"name\": \"muirGlacier\",\n    \"comment\": \"HF to delay the difficulty bomb\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-2384\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {},\n    \"vm\": {},\n    \"pow\": {\n        \"difficultyBombDelay\": {\n            \"v\": 9000000,\n            \"d\": \"the amount of blocks to delay the difficulty bomb with\"\n        }\n    }\n}\n","module.exports={\n    \"name\": \"petersburg\",\n    \"comment\": \"Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-1716\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"netSstoreNoopGas\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreInitGas\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreCleanGas\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreDirtyGas\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreClearRefund\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreResetRefund\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        },\n        \"netSstoreResetClearRefund\": {\n            \"v\": null,\n            \"d\": \"Removed along EIP-1283\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"shanghai\",\n    \"comment\": \"Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode\",\n    \"url\": \"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md\",\n    \"status\": \"Final\",\n    \"eips\": [3651, 3855, 3860, 4895]\n}\n","module.exports={\n    \"name\": \"shardingFork\",\n    \"comment\": \"Internal hardfork to test proto-danksharding (do not use in production)\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-4844\",\n    \"status\": \"Experimental\",\n    \"eips\": [4844]\n}\n","module.exports={\n    \"name\": \"spuriousDragon\",\n    \"comment\": \"HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-607\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"expByte\": {\n            \"v\": 50,\n            \"d\": \"Times ceil(log256(exponent)) for the EXP instruction\"\n        }\n    },\n    \"vm\": {\n        \"maxCodeSize\": {\n            \"v\": 24576,\n            \"d\": \"Maximum length of contract code\"\n        }\n    },\n    \"pow\": {}\n}\n","module.exports={\n    \"name\": \"tangerineWhistle\",\n    \"comment\": \"Hardfork with gas cost changes for IO-heavy operations\",\n    \"url\": \"https://eips.ethereum.org/EIPS/eip-608\",\n    \"status\": \"Final\",\n    \"gasConfig\": {},\n    \"gasPrices\": {\n        \"sload\": {\n            \"v\": 200,\n            \"d\": \"Once per SLOAD operation\"\n        },\n        \"call\": {\n            \"v\": 700,\n            \"d\": \"Once per CALL operation & message call transaction\"\n        },\n        \"extcodesize\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the EXTCODESIZE opcode\"\n        },\n        \"extcodecopy\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the EXTCODECOPY opcode\"\n        },\n        \"balance\": {\n            \"v\": 400,\n            \"d\": \"Base fee of the BALANCE opcode\"\n        },\n        \"delegatecall\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the DELEGATECALL opcode\"\n        },\n        \"callcode\": {\n            \"v\": 700,\n            \"d\": \"Base fee of the CALLCODE opcode\"\n        },\n        \"selfdestruct\": {\n            \"v\": 5000,\n            \"d\": \"Base fee of the SELFDESTRUCT opcode\"\n        }\n    },\n    \"vm\": {},\n    \"pow\": {}\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./common\"), exports);\n__exportStar(require(\"./enums\"), exports);\n__exportStar(require(\"./types\"), exports);\n__exportStar(require(\"./utils\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseGethGenesis = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst enums_1 = require(\"./enums\");\n/**\n * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally\n * @param nonce string parsed from the Geth genesis file\n * @returns nonce as a 0x-prefixed 8 byte string\n */\nfunction formatNonce(nonce) {\n    if (!nonce || nonce === '0x0') {\n        return '0x0000000000000000';\n    }\n    if ((0, util_1.isHexPrefixed)(nonce)) {\n        return '0x' + (0, util_1.stripHexPrefix)(nonce).padStart(16, '0');\n    }\n    return '0x' + nonce.padStart(16, '0');\n}\n/**\n * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object\n * @param json object representing the Geth genesis file\n * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition\n * hardfork, which by default is post merge as with the merged eth networks but could also come\n * before merge like in kiln genesis\n * @returns genesis parameters in a `CommonOpts` compliant object\n */\nfunction parseGethParams(json, mergeForkIdPostMerge = true) {\n    const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas, } = json;\n    let { extraData, timestamp, nonce } = json;\n    const genesisTimestamp = Number(timestamp);\n    const { chainId } = config;\n    // geth is not strictly putting empty fields with a 0x prefix\n    if (extraData === '') {\n        extraData = '0x';\n    }\n    // geth may use number for timestamp\n    if (!(0, util_1.isHexPrefixed)(timestamp)) {\n        timestamp = (0, util_1.intToHex)(parseInt(timestamp));\n    }\n    // geth may not give us a nonce strictly formatted to an 8 byte hex string\n    if (nonce.length !== 18) {\n        nonce = formatNonce(nonce);\n    }\n    // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time\n    // but have different configuration parameters in geth genesis parameters\n    if (config.eip155Block !== config.eip158Block) {\n        throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');\n    }\n    const params = {\n        name,\n        chainId,\n        networkId: chainId,\n        genesis: {\n            timestamp,\n            gasLimit: parseInt(gasLimit),\n            difficulty: parseInt(difficulty),\n            nonce,\n            extraData,\n            mixHash,\n            coinbase,\n            baseFeePerGas,\n        },\n        hardfork: undefined,\n        hardforks: [],\n        bootstrapNodes: [],\n        consensus: config.clique !== undefined\n            ? {\n                type: 'poa',\n                algorithm: 'clique',\n                clique: {\n                    // The recent geth genesis seems to be using blockperiodseconds\n                    // and epochlength for clique specification\n                    // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ\n                    period: config.clique.period ?? config.clique.blockperiodseconds,\n                    epoch: config.clique.epoch ?? config.clique.epochlength,\n                },\n            }\n            : {\n                type: 'pow',\n                algorithm: 'ethash',\n                ethash: {},\n            },\n    };\n    const forkMap = {\n        [enums_1.Hardfork.Homestead]: { name: 'homesteadBlock' },\n        [enums_1.Hardfork.Dao]: { name: 'daoForkBlock' },\n        [enums_1.Hardfork.TangerineWhistle]: { name: 'eip150Block' },\n        [enums_1.Hardfork.SpuriousDragon]: { name: 'eip155Block' },\n        [enums_1.Hardfork.Byzantium]: { name: 'byzantiumBlock' },\n        [enums_1.Hardfork.Constantinople]: { name: 'constantinopleBlock' },\n        [enums_1.Hardfork.Petersburg]: { name: 'petersburgBlock' },\n        [enums_1.Hardfork.Istanbul]: { name: 'istanbulBlock' },\n        [enums_1.Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },\n        [enums_1.Hardfork.Berlin]: { name: 'berlinBlock' },\n        [enums_1.Hardfork.London]: { name: 'londonBlock' },\n        [enums_1.Hardfork.MergeForkIdTransition]: { name: 'mergeForkBlock', postMerge: mergeForkIdPostMerge },\n        [enums_1.Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },\n        [enums_1.Hardfork.ShardingForkDev]: { name: 'shardingForkTime', postMerge: true, isTimestamp: true },\n    };\n    // forkMapRev is the map from config field name to Hardfork\n    const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {\n        acc[forkMap[elem].name] = elem;\n        return acc;\n    }, {});\n    const configHardforkNames = Object.keys(config).filter((key) => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);\n    params.hardforks = configHardforkNames\n        .map((nameBlock) => ({\n        name: forkMapRev[nameBlock],\n        block: forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== 'number'\n            ? null\n            : config[nameBlock],\n        timestamp: forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === 'number'\n            ? config[nameBlock]\n            : undefined,\n    }))\n        .filter((fork) => fork.block !== null || fork.timestamp !== undefined);\n    params.hardforks.sort(function (a, b) {\n        return (a.block ?? Infinity) - (b.block ?? Infinity);\n    });\n    params.hardforks.sort(function (a, b) {\n        return (a.timestamp ?? genesisTimestamp) - (b.timestamp ?? genesisTimestamp);\n    });\n    if (config.terminalTotalDifficulty !== undefined) {\n        // Following points need to be considered for placement of merge hf\n        // - Merge hardfork can't be placed at genesis\n        // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals\n        // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL\n        //   necessary for e.g. withdrawals\n        const mergeConfig = {\n            name: enums_1.Hardfork.Merge,\n            ttd: config.terminalTotalDifficulty,\n            block: null,\n        };\n        // Merge hardfork has to be placed before first hardfork that is dependent on merge\n        const postMergeIndex = params.hardforks.findIndex((hf) => forkMap[hf.name]?.postMerge === true);\n        if (postMergeIndex !== -1) {\n            params.hardforks.splice(postMergeIndex, 0, mergeConfig);\n        }\n        else {\n            params.hardforks.push(mergeConfig);\n        }\n    }\n    const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;\n    params.hardfork = latestHardfork?.name;\n    params.hardforks.unshift({ name: enums_1.Hardfork.Chainstart, block: 0 });\n    return params;\n}\n/**\n * Parses a genesis.json exported from Geth into parameters for Common instance\n * @param json representing the Geth genesis file\n * @param name optional chain name\n * @returns parsed params\n */\nfunction parseGethGenesis(json, name, mergeForkIdPostMerge) {\n    try {\n        if (['config', 'difficulty', 'gasLimit', 'alloc'].some((field) => !(field in json))) {\n            throw new Error('Invalid format, expected geth genesis fields missing');\n        }\n        if (name !== undefined) {\n            json.name = name;\n        }\n        return parseGethParams(json, mergeForkIdPostMerge);\n    }\n    catch (e) {\n        throw new Error(`Error parsing parameters file: ${e.message}`);\n    }\n}\nexports.parseGethGenesis = parseGethGenesis;\n//# sourceMappingURL=utils.js.map",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, -1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    // If any number is NaN, return NaN.\r\n    function maxOrMin(args, n) {\r\n      var k, y,\r\n        i = 1,\r\n        x = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        y = new BigNumber(args[i]);\r\n        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n          x = y;\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) -- > 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","'use strict';\n\nvar elliptic = exports;\n\nelliptic.version = require('../package.json').version;\nelliptic.utils = require('./elliptic/utils');\nelliptic.rand = require('brorand');\nelliptic.curve = require('./elliptic/curve');\nelliptic.curves = require('./elliptic/curves');\n\n// Protocols\nelliptic.ec = require('./elliptic/ec');\nelliptic.eddsa = require('./elliptic/eddsa');\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new BN(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new BN(0).toRed(this.red);\n  this.one = new BN(1).toRed(this.red);\n  this.two = new BN(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new BN(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n\n  this._bitLength = this.n ? this.n.bitLength() : 0;\n\n  // Generalized Greg Maxwell's trick\n  var adjustCount = this.n && this.p.div(this.n);\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n    this.redN = null;\n  } else {\n    this._maxwellTrick = true;\n    this.redN = this.n.toRed(this.red);\n  }\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  assert(p.precomputed);\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1, this._bitLength);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  var j;\n  var nafW;\n  for (j = 0; j < naf.length; j += doubles.step) {\n    nafW = 0;\n    for (var l = j + doubles.step - 1; l >= j; l--)\n      nafW = (nafW << 1) + naf[l];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (j = 0; j < repr.length; j++) {\n      nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w, this._bitLength);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var l = 0; i >= 0 && naf[i] === 0; i--)\n      l++;\n    if (i >= 0)\n      l++;\n    acc = acc.dblp(l);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n  points,\n  coeffs,\n  len,\n  jacobianResult) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  var i;\n  var j;\n  var p;\n  for (i = 0; i < len; i++) {\n    p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b], /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3,  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (j = 0; j < len; j++) {\n      var z = tmp[j];\n      p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (i = 0; i < len; i++)\n    wnd[i] = null;\n\n  if (jacobianResult)\n    return acc;\n  else\n    return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.eq = function eq(/*other*/) {\n  throw new Error('Not implemented');\n};\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  bytes = utils.toArray(bytes, enc);\n\n  var len = this.p.byteLength();\n\n  // uncompressed, hybrid-odd, hybrid-even\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n      bytes.length - 1 === 2 * len) {\n    if (bytes[0] === 0x06)\n      assert(bytes[bytes.length - 1] % 2 === 0);\n    else if (bytes[0] === 0x07)\n      assert(bytes[bytes.length - 1] % 2 === 1);\n\n    var res =  this.point(bytes.slice(1, 1 + len),\n      bytes.slice(1 + len, 1 + 2 * len));\n\n    return res;\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n              bytes.length - 1 === len) {\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n  }\n  throw new Error('Unknown point format');\n};\n\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n  return this.encode(enc, true);\n};\n\nBasePoint.prototype._encode = function _encode(compact) {\n  var len = this.curve.p.byteLength();\n  var x = this.getX().toArray('be', len);\n\n  if (compact)\n    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n\n  return [ 0x04 ].concat(x, this.getY().toArray('be', len));\n};\n\nBasePoint.prototype.encode = function encode(enc, compact) {\n  return utils.encode(this._encode(compact), enc);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null,\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n  if (!this.precomputed)\n    return false;\n\n  var doubles = this.precomputed.doubles;\n  if (!doubles)\n    return false;\n\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles,\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res,\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction EdwardsCurve(conf) {\n  // NOTE: Important as we are creating point in Base.call()\n  this.twisted = (conf.a | 0) !== 1;\n  this.mOneA = this.twisted && (conf.a | 0) === -1;\n  this.extended = this.mOneA;\n\n  Base.call(this, 'edwards', conf);\n\n  this.a = new BN(conf.a, 16).umod(this.red.m);\n  this.a = this.a.toRed(this.red);\n  this.c = new BN(conf.c, 16).toRed(this.red);\n  this.c2 = this.c.redSqr();\n  this.d = new BN(conf.d, 16).toRed(this.red);\n  this.dd = this.d.redAdd(this.d);\n\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n  this.oneC = (conf.c | 0) === 1;\n}\ninherits(EdwardsCurve, Base);\nmodule.exports = EdwardsCurve;\n\nEdwardsCurve.prototype._mulA = function _mulA(num) {\n  if (this.mOneA)\n    return num.redNeg();\n  else\n    return this.a.redMul(num);\n};\n\nEdwardsCurve.prototype._mulC = function _mulC(num) {\n  if (this.oneC)\n    return num;\n  else\n    return this.c.redMul(num);\n};\n\n// Just for compatibility with Short curve\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n  return this.point(x, y, z, t);\n};\n\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var x2 = x.redSqr();\n  var rhs = this.c2.redSub(this.a.redMul(x2));\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n\n  var y2 = rhs.redMul(lhs.redInvm());\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n  y = new BN(y, 16);\n  if (!y.red)\n    y = y.toRed(this.red);\n\n  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\n  var y2 = y.redSqr();\n  var lhs = y2.redSub(this.c2);\n  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n  var x2 = lhs.redMul(rhs.redInvm());\n\n  if (x2.cmp(this.zero) === 0) {\n    if (odd)\n      throw new Error('invalid point');\n    else\n      return this.point(this.zero, y);\n  }\n\n  var x = x2.redSqrt();\n  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  if (x.fromRed().isOdd() !== odd)\n    x = x.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.validate = function validate(point) {\n  if (point.isInfinity())\n    return true;\n\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n  point.normalize();\n\n  var x2 = point.x.redSqr();\n  var y2 = point.y.redSqr();\n  var lhs = x2.redMul(this.a).redAdd(y2);\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n\n  return lhs.cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, y, z, t) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.zero;\n    this.y = this.curve.one;\n    this.z = this.curve.one;\n    this.t = this.curve.zero;\n    this.zOne = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = z ? new BN(z, 16) : this.curve.one;\n    this.t = t && new BN(t, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n    if (this.t && !this.t.red)\n      this.t = this.t.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n\n    // Use extended coordinates\n    if (this.curve.extended && !this.t) {\n      this.t = this.x.redMul(this.y);\n      if (!this.zOne)\n        this.t = this.t.redMul(this.z.redInvm());\n    }\n  }\n}\ninherits(Point, Base.BasePoint);\n\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\n  return new Point(this, x, y, z, t);\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1], obj[2]);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.x.cmpn(0) === 0 &&\n    (this.y.cmp(this.z) === 0 ||\n    (this.zOne && this.y.cmp(this.curve.c) === 0));\n};\n\nPoint.prototype._extDbl = function _extDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #doubling-dbl-2008-hwcd\n  // 4M + 4S\n\n  // A = X1^2\n  var a = this.x.redSqr();\n  // B = Y1^2\n  var b = this.y.redSqr();\n  // C = 2 * Z1^2\n  var c = this.z.redSqr();\n  c = c.redIAdd(c);\n  // D = a * A\n  var d = this.curve._mulA(a);\n  // E = (X1 + Y1)^2 - A - B\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n  // G = D + B\n  var g = d.redAdd(b);\n  // F = G - C\n  var f = g.redSub(c);\n  // H = D - B\n  var h = d.redSub(b);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projDbl = function _projDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #doubling-dbl-2008-bbjlp\n  //     #doubling-dbl-2007-bl\n  // and others\n  // Generally 3M + 4S or 2M + 4S\n\n  // B = (X1 + Y1)^2\n  var b = this.x.redAdd(this.y).redSqr();\n  // C = X1^2\n  var c = this.x.redSqr();\n  // D = Y1^2\n  var d = this.y.redSqr();\n\n  var nx;\n  var ny;\n  var nz;\n  var e;\n  var h;\n  var j;\n  if (this.curve.twisted) {\n    // E = a * C\n    e = this.curve._mulA(c);\n    // F = E + D\n    var f = e.redAdd(d);\n    if (this.zOne) {\n      // X3 = (B - C - D) * (F - 2)\n      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F^2 - 2 * F\n      nz = f.redSqr().redSub(f).redSub(f);\n    } else {\n      // H = Z1^2\n      h = this.z.redSqr();\n      // J = F - 2 * H\n      j = f.redSub(h).redISub(h);\n      // X3 = (B-C-D)*J\n      nx = b.redSub(c).redISub(d).redMul(j);\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F * J\n      nz = f.redMul(j);\n    }\n  } else {\n    // E = C + D\n    e = c.redAdd(d);\n    // H = (c * Z1)^2\n    h = this.curve._mulC(this.z).redSqr();\n    // J = E - 2 * H\n    j = e.redSub(h).redSub(h);\n    // X3 = c * (B - E) * J\n    nx = this.curve._mulC(b.redISub(e)).redMul(j);\n    // Y3 = c * E * (C - D)\n    ny = this.curve._mulC(e).redMul(c.redISub(d));\n    // Z3 = E * J\n    nz = e.redMul(j);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  // Double in extended coordinates\n  if (this.curve.extended)\n    return this._extDbl();\n  else\n    return this._projDbl();\n};\n\nPoint.prototype._extAdd = function _extAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #addition-add-2008-hwcd-3\n  // 8M\n\n  // A = (Y1 - X1) * (Y2 - X2)\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n  // B = (Y1 + X1) * (Y2 + X2)\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n  // C = T1 * k * T2\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);\n  // D = Z1 * 2 * Z2\n  var d = this.z.redMul(p.z.redAdd(p.z));\n  // E = B - A\n  var e = b.redSub(a);\n  // F = D - C\n  var f = d.redSub(c);\n  // G = D + C\n  var g = d.redAdd(c);\n  // H = B + A\n  var h = b.redAdd(a);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projAdd = function _projAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #addition-add-2008-bbjlp\n  //     #addition-add-2007-bl\n  // 10M + 1S\n\n  // A = Z1 * Z2\n  var a = this.z.redMul(p.z);\n  // B = A^2\n  var b = a.redSqr();\n  // C = X1 * X2\n  var c = this.x.redMul(p.x);\n  // D = Y1 * Y2\n  var d = this.y.redMul(p.y);\n  // E = d * C * D\n  var e = this.curve.d.redMul(c).redMul(d);\n  // F = B - E\n  var f = b.redSub(e);\n  // G = B + E\n  var g = b.redAdd(e);\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n  var nx = a.redMul(f).redMul(tmp);\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // Y3 = A * G * (D - a * C)\n    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n    // Z3 = F * G\n    nz = f.redMul(g);\n  } else {\n    // Y3 = A * G * (D - C)\n    ny = a.redMul(g).redMul(d.redSub(c));\n    // Z3 = c * F * G\n    nz = this.curve._mulC(f).redMul(g);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.add = function add(p) {\n  if (this.isInfinity())\n    return p;\n  if (p.isInfinity())\n    return this;\n\n  if (this.curve.extended)\n    return this._extAdd(p);\n  else\n    return this._projAdd(p);\n};\n\nPoint.prototype.mul = function mul(k) {\n  if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);\n};\n\nPoint.prototype.normalize = function normalize() {\n  if (this.zOne)\n    return this;\n\n  // Normalize coordinates\n  var zi = this.z.redInvm();\n  this.x = this.x.redMul(zi);\n  this.y = this.y.redMul(zi);\n  if (this.t)\n    this.t = this.t.redMul(zi);\n  this.z = this.curve.one;\n  this.zOne = true;\n  return this;\n};\n\nPoint.prototype.neg = function neg() {\n  return this.curve.point(this.x.redNeg(),\n    this.y,\n    this.z,\n    this.t && this.t.redNeg());\n};\n\nPoint.prototype.getX = function getX() {\n  this.normalize();\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  this.normalize();\n  return this.y.fromRed();\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this === other ||\n         this.getX().cmp(other.getX()) === 0 &&\n         this.getY().cmp(other.getY()) === 0;\n};\n\nPoint.prototype.eqXToP = function eqXToP(x) {\n  var rx = x.toRed(this.curve.red).redMul(this.z);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(this.z);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\n// Compatibility with BaseCurve\nPoint.prototype.toP = Point.prototype.normalize;\nPoint.prototype.mixedAdd = Point.prototype.add;\n","'use strict';\n\nvar curve = exports;\n\ncurve.base = require('./base');\ncurve.short = require('./short');\ncurve.mont = require('./mont');\ncurve.edwards = require('./edwards');\n","'use strict';\n\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar utils = require('../utils');\n\nfunction MontCurve(conf) {\n  Base.call(this, 'mont', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.i4 = new BN(4).toRed(this.red).redInvm();\n  this.two = new BN(2).toRed(this.red);\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n}\ninherits(MontCurve, Base);\nmodule.exports = MontCurve;\n\nMontCurve.prototype.validate = function validate(point) {\n  var x = point.normalize().x;\n  var x2 = x.redSqr();\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n  var y = rhs.redSqrt();\n\n  return y.redSqr().cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, z) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && z === null) {\n    this.x = this.curve.one;\n    this.z = this.curve.zero;\n  } else {\n    this.x = new BN(x, 16);\n    this.z = new BN(z, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n  }\n}\ninherits(Point, Base.BasePoint);\n\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  return this.point(utils.toArray(bytes, enc), 1);\n};\n\nMontCurve.prototype.point = function point(x, z) {\n  return new Point(this, x, z);\n};\n\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nPoint.prototype.precompute = function precompute() {\n  // No-op\n};\n\nPoint.prototype._encode = function _encode() {\n  return this.getX().toArray('be', this.curve.p.byteLength());\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1] || curve.one);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\nPoint.prototype.dbl = function dbl() {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n  // 2M + 2S + 4A\n\n  // A = X1 + Z1\n  var a = this.x.redAdd(this.z);\n  // AA = A^2\n  var aa = a.redSqr();\n  // B = X1 - Z1\n  var b = this.x.redSub(this.z);\n  // BB = B^2\n  var bb = b.redSqr();\n  // C = AA - BB\n  var c = aa.redSub(bb);\n  // X3 = AA * BB\n  var nx = aa.redMul(bb);\n  // Z3 = C * (BB + A24 * C)\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.add = function add() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n  // 4M + 2S + 6A\n\n  // A = X2 + Z2\n  var a = this.x.redAdd(this.z);\n  // B = X2 - Z2\n  var b = this.x.redSub(this.z);\n  // C = X3 + Z3\n  var c = p.x.redAdd(p.z);\n  // D = X3 - Z3\n  var d = p.x.redSub(p.z);\n  // DA = D * A\n  var da = d.redMul(a);\n  // CB = C * B\n  var cb = c.redMul(b);\n  // X5 = Z1 * (DA + CB)^2\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n  // Z5 = X1 * (DA - CB)^2\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.mul = function mul(k) {\n  var t = k.clone();\n  var a = this; // (N / 2) * Q + Q\n  var b = this.curve.point(null, null); // (N / 2) * Q\n  var c = this; // Q\n\n  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\n    bits.push(t.andln(1));\n\n  for (var i = bits.length - 1; i >= 0; i--) {\n    if (bits[i] === 0) {\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n      a = a.diffAdd(b, c);\n      // N * Q = 2 * ((N / 2) * Q + Q))\n      b = b.dbl();\n    } else {\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n      b = a.diffAdd(b, c);\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)\n      a = a.dbl();\n    }\n  }\n  return b;\n};\n\nPoint.prototype.mulAdd = function mulAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.jumlAdd = function jumlAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this.getX().cmp(other.getX()) === 0;\n};\n\nPoint.prototype.normalize = function normalize() {\n  this.x = this.x.redMul(this.z.redInvm());\n  this.z = this.curve.one;\n  return this;\n};\n\nPoint.prototype.getX = function getX() {\n  // Normalize coordinates\n  this.normalize();\n\n  return this.x.fromRed();\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction ShortCurve(conf) {\n  Base.call(this, 'short', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.tinv = this.two.redInvm();\n\n  this.zeroA = this.a.fromRed().cmpn(0) === 0;\n  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n\n  // If the curve is endomorphic, precalculate beta and lambda\n  this.endo = this._getEndomorphism(conf);\n  this._endoWnafT1 = new Array(4);\n  this._endoWnafT2 = new Array(4);\n}\ninherits(ShortCurve, Base);\nmodule.exports = ShortCurve;\n\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n  // No efficient endomorphism\n  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n    return;\n\n  // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n  var beta;\n  var lambda;\n  if (conf.beta) {\n    beta = new BN(conf.beta, 16).toRed(this.red);\n  } else {\n    var betas = this._getEndoRoots(this.p);\n    // Choose the smallest beta\n    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n    beta = beta.toRed(this.red);\n  }\n  if (conf.lambda) {\n    lambda = new BN(conf.lambda, 16);\n  } else {\n    // Choose the lambda that is matching selected beta\n    var lambdas = this._getEndoRoots(this.n);\n    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n      lambda = lambdas[0];\n    } else {\n      lambda = lambdas[1];\n      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n    }\n  }\n\n  // Get basis vectors, used for balanced length-two representation\n  var basis;\n  if (conf.basis) {\n    basis = conf.basis.map(function(vec) {\n      return {\n        a: new BN(vec.a, 16),\n        b: new BN(vec.b, 16),\n      };\n    });\n  } else {\n    basis = this._getEndoBasis(lambda);\n  }\n\n  return {\n    beta: beta,\n    lambda: lambda,\n    basis: basis,\n  };\n};\n\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n  // Find roots of for x^2 + x + 1 in F\n  // Root = (-1 +- Sqrt(-3)) / 2\n  //\n  var red = num === this.p ? this.red : BN.mont(num);\n  var tinv = new BN(2).toRed(red).redInvm();\n  var ntinv = tinv.redNeg();\n\n  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n\n  var l1 = ntinv.redAdd(s).fromRed();\n  var l2 = ntinv.redSub(s).fromRed();\n  return [ l1, l2 ];\n};\n\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n  // aprxSqrt >= sqrt(this.n)\n  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n\n  // 3.74\n  // Run EGCD, until r(L + 1) < aprxSqrt\n  var u = lambda;\n  var v = this.n.clone();\n  var x1 = new BN(1);\n  var y1 = new BN(0);\n  var x2 = new BN(0);\n  var y2 = new BN(1);\n\n  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n  var a0;\n  var b0;\n  // First vector\n  var a1;\n  var b1;\n  // Second vector\n  var a2;\n  var b2;\n\n  var prevR;\n  var i = 0;\n  var r;\n  var x;\n  while (u.cmpn(0) !== 0) {\n    var q = v.div(u);\n    r = v.sub(q.mul(u));\n    x = x2.sub(q.mul(x1));\n    var y = y2.sub(q.mul(y1));\n\n    if (!a1 && r.cmp(aprxSqrt) < 0) {\n      a0 = prevR.neg();\n      b0 = x1;\n      a1 = r.neg();\n      b1 = x;\n    } else if (a1 && ++i === 2) {\n      break;\n    }\n    prevR = r;\n\n    v = u;\n    u = r;\n    x2 = x1;\n    x1 = x;\n    y2 = y1;\n    y1 = y;\n  }\n  a2 = r.neg();\n  b2 = x;\n\n  var len1 = a1.sqr().add(b1.sqr());\n  var len2 = a2.sqr().add(b2.sqr());\n  if (len2.cmp(len1) >= 0) {\n    a2 = a0;\n    b2 = b0;\n  }\n\n  // Normalize signs\n  if (a1.negative) {\n    a1 = a1.neg();\n    b1 = b1.neg();\n  }\n  if (a2.negative) {\n    a2 = a2.neg();\n    b2 = b2.neg();\n  }\n\n  return [\n    { a: a1, b: b1 },\n    { a: a2, b: b2 },\n  ];\n};\n\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n  var basis = this.endo.basis;\n  var v1 = basis[0];\n  var v2 = basis[1];\n\n  var c1 = v2.b.mul(k).divRound(this.n);\n  var c2 = v1.b.neg().mul(k).divRound(this.n);\n\n  var p1 = c1.mul(v1.a);\n  var p2 = c2.mul(v2.a);\n  var q1 = c1.mul(v1.b);\n  var q2 = c2.mul(v2.b);\n\n  // Calculate answer\n  var k1 = k.sub(p1).sub(p2);\n  var k2 = q1.add(q2).neg();\n  return { k1: k1, k2: k2 };\n};\n\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  // XXX Is there any way to tell if the number is odd without converting it\n  // to non-red form?\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nShortCurve.prototype.validate = function validate(point) {\n  if (point.inf)\n    return true;\n\n  var x = point.x;\n  var y = point.y;\n\n  var ax = this.a.redMul(x);\n  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n  return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\n\nShortCurve.prototype._endoWnafMulAdd =\n    function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n      var npoints = this._endoWnafT1;\n      var ncoeffs = this._endoWnafT2;\n      for (var i = 0; i < points.length; i++) {\n        var split = this._endoSplit(coeffs[i]);\n        var p = points[i];\n        var beta = p._getBeta();\n\n        if (split.k1.negative) {\n          split.k1.ineg();\n          p = p.neg(true);\n        }\n        if (split.k2.negative) {\n          split.k2.ineg();\n          beta = beta.neg(true);\n        }\n\n        npoints[i * 2] = p;\n        npoints[i * 2 + 1] = beta;\n        ncoeffs[i * 2] = split.k1;\n        ncoeffs[i * 2 + 1] = split.k2;\n      }\n      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n\n      // Clean-up references to points and coefficients\n      for (var j = 0; j < i * 2; j++) {\n        npoints[j] = null;\n        ncoeffs[j] = null;\n      }\n      return res;\n    };\n\nfunction Point(curve, x, y, isRed) {\n  Base.BasePoint.call(this, curve, 'affine');\n  if (x === null && y === null) {\n    this.x = null;\n    this.y = null;\n    this.inf = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    // Force redgomery representation when loading from JSON\n    if (isRed) {\n      this.x.forceRed(this.curve.red);\n      this.y.forceRed(this.curve.red);\n    }\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    this.inf = false;\n  }\n}\ninherits(Point, Base.BasePoint);\n\nShortCurve.prototype.point = function point(x, y, isRed) {\n  return new Point(this, x, y, isRed);\n};\n\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n  return Point.fromJSON(this, obj, red);\n};\n\nPoint.prototype._getBeta = function _getBeta() {\n  if (!this.curve.endo)\n    return;\n\n  var pre = this.precomputed;\n  if (pre && pre.beta)\n    return pre.beta;\n\n  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n  if (pre) {\n    var curve = this.curve;\n    var endoMul = function(p) {\n      return curve.point(p.x.redMul(curve.endo.beta), p.y);\n    };\n    pre.beta = beta;\n    beta.precomputed = {\n      beta: null,\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(endoMul),\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(endoMul),\n      },\n    };\n  }\n  return beta;\n};\n\nPoint.prototype.toJSON = function toJSON() {\n  if (!this.precomputed)\n    return [ this.x, this.y ];\n\n  return [ this.x, this.y, this.precomputed && {\n    doubles: this.precomputed.doubles && {\n      step: this.precomputed.doubles.step,\n      points: this.precomputed.doubles.points.slice(1),\n    },\n    naf: this.precomputed.naf && {\n      wnd: this.precomputed.naf.wnd,\n      points: this.precomputed.naf.points.slice(1),\n    },\n  } ];\n};\n\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n  if (typeof obj === 'string')\n    obj = JSON.parse(obj);\n  var res = curve.point(obj[0], obj[1], red);\n  if (!obj[2])\n    return res;\n\n  function obj2point(obj) {\n    return curve.point(obj[0], obj[1], red);\n  }\n\n  var pre = obj[2];\n  res.precomputed = {\n    beta: null,\n    doubles: pre.doubles && {\n      step: pre.doubles.step,\n      points: [ res ].concat(pre.doubles.points.map(obj2point)),\n    },\n    naf: pre.naf && {\n      wnd: pre.naf.wnd,\n      points: [ res ].concat(pre.naf.points.map(obj2point)),\n    },\n  };\n  return res;\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  return this.inf;\n};\n\nPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.inf)\n    return p;\n\n  // P + O = P\n  if (p.inf)\n    return this;\n\n  // P + P = 2P\n  if (this.eq(p))\n    return this.dbl();\n\n  // P + (-P) = O\n  if (this.neg().eq(p))\n    return this.curve.point(null, null);\n\n  // P + Q = O\n  if (this.x.cmp(p.x) === 0)\n    return this.curve.point(null, null);\n\n  var c = this.y.redSub(p.y);\n  if (c.cmpn(0) !== 0)\n    c = c.redMul(this.x.redSub(p.x).redInvm());\n  var nx = c.redSqr().redISub(this.x).redISub(p.x);\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.inf)\n    return this;\n\n  // 2P = O\n  var ys1 = this.y.redAdd(this.y);\n  if (ys1.cmpn(0) === 0)\n    return this.curve.point(null, null);\n\n  var a = this.curve.a;\n\n  var x2 = this.x.redSqr();\n  var dyinv = ys1.redInvm();\n  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n\n  var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.getX = function getX() {\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  return this.y.fromRed();\n};\n\nPoint.prototype.mul = function mul(k) {\n  k = new BN(k, 16);\n  if (this.isInfinity())\n    return this;\n  else if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else if (this.curve.endo)\n    return this.curve._endoWnafMulAdd([ this ], [ k ]);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs, true);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\n\nPoint.prototype.eq = function eq(p) {\n  return this === p ||\n         this.inf === p.inf &&\n             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\n\nPoint.prototype.neg = function neg(_precompute) {\n  if (this.inf)\n    return this;\n\n  var res = this.curve.point(this.x, this.y.redNeg());\n  if (_precompute && this.precomputed) {\n    var pre = this.precomputed;\n    var negate = function(p) {\n      return p.neg();\n    };\n    res.precomputed = {\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(negate),\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(negate),\n      },\n    };\n  }\n  return res;\n};\n\nPoint.prototype.toJ = function toJ() {\n  if (this.inf)\n    return this.curve.jpoint(null, null, null);\n\n  var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n  return res;\n};\n\nfunction JPoint(curve, x, y, z) {\n  Base.BasePoint.call(this, curve, 'jacobian');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.one;\n    this.y = this.curve.one;\n    this.z = new BN(0);\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = new BN(z, 16);\n  }\n  if (!this.x.red)\n    this.x = this.x.toRed(this.curve.red);\n  if (!this.y.red)\n    this.y = this.y.toRed(this.curve.red);\n  if (!this.z.red)\n    this.z = this.z.toRed(this.curve.red);\n\n  this.zOne = this.z === this.curve.one;\n}\ninherits(JPoint, Base.BasePoint);\n\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n  return new JPoint(this, x, y, z);\n};\n\nJPoint.prototype.toP = function toP() {\n  if (this.isInfinity())\n    return this.curve.point(null, null);\n\n  var zinv = this.z.redInvm();\n  var zinv2 = zinv.redSqr();\n  var ax = this.x.redMul(zinv2);\n  var ay = this.y.redMul(zinv2).redMul(zinv);\n\n  return this.curve.point(ax, ay);\n};\n\nJPoint.prototype.neg = function neg() {\n  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\n\nJPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p;\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 12M + 4S + 7A\n  var pz2 = p.z.redSqr();\n  var z2 = this.z.redSqr();\n  var u1 = this.x.redMul(pz2);\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y.redMul(pz2.redMul(p.z));\n  var s2 = p.y.redMul(z2.redMul(this.z));\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(p.z).redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p.toJ();\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 8M + 3S + 7A\n  var z2 = this.z.redSqr();\n  var u1 = this.x;\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y;\n  var s2 = p.y.redMul(z2).redMul(this.z);\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.dblp = function dblp(pow) {\n  if (pow === 0)\n    return this;\n  if (this.isInfinity())\n    return this;\n  if (!pow)\n    return this.dbl();\n\n  var i;\n  if (this.curve.zeroA || this.curve.threeA) {\n    var r = this;\n    for (i = 0; i < pow; i++)\n      r = r.dbl();\n    return r;\n  }\n\n  // 1M + 2S + 1A + N * (4S + 5M + 8A)\n  // N = 1 => 6M + 6S + 9A\n  var a = this.curve.a;\n  var tinv = this.curve.tinv;\n\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  // Reuse results\n  var jyd = jy.redAdd(jy);\n  for (i = 0; i < pow; i++) {\n    var jx2 = jx.redSqr();\n    var jyd2 = jyd.redSqr();\n    var jyd4 = jyd2.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n    var t1 = jx.redMul(jyd2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var dny = c.redMul(t2);\n    dny = dny.redIAdd(dny).redISub(jyd4);\n    var nz = jyd.redMul(jz);\n    if (i + 1 < pow)\n      jz4 = jz4.redMul(jyd4);\n\n    jx = nx;\n    jz = nz;\n    jyd = dny;\n  }\n\n  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\n\nJPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  if (this.curve.zeroA)\n    return this._zeroDbl();\n  else if (this.curve.threeA)\n    return this._threeDbl();\n  else\n    return this._dbl();\n};\n\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 14A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // T = M ^ 2 - 2*S\n    var t = m.redSqr().redISub(s).redISub(s);\n\n    // 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2*Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-dbl-2009-l\n    // 2M + 5S + 13A\n\n    // A = X1^2\n    var a = this.x.redSqr();\n    // B = Y1^2\n    var b = this.y.redSqr();\n    // C = B^2\n    var c = b.redSqr();\n    // D = 2 * ((X1 + B)^2 - A - C)\n    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n    d = d.redIAdd(d);\n    // E = 3 * A\n    var e = a.redAdd(a).redIAdd(a);\n    // F = E^2\n    var f = e.redSqr();\n\n    // 8 * C\n    var c8 = c.redIAdd(c);\n    c8 = c8.redIAdd(c8);\n    c8 = c8.redIAdd(c8);\n\n    // X3 = F - 2 * D\n    nx = f.redISub(d).redISub(d);\n    // Y3 = E * (D - X3) - 8 * C\n    ny = e.redMul(d.redISub(nx)).redISub(c8);\n    // Z3 = 2 * Y1 * Z1\n    nz = this.y.redMul(this.z);\n    nz = nz.redIAdd(nz);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._threeDbl = function _threeDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 15A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a\n    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n    // T = M^2 - 2 * S\n    var t = m.redSqr().redISub(s).redISub(s);\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2 * Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n    // 3M + 5S\n\n    // delta = Z1^2\n    var delta = this.z.redSqr();\n    // gamma = Y1^2\n    var gamma = this.y.redSqr();\n    // beta = X1 * gamma\n    var beta = this.x.redMul(gamma);\n    // alpha = 3 * (X1 - delta) * (X1 + delta)\n    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n    alpha = alpha.redAdd(alpha).redIAdd(alpha);\n    // X3 = alpha^2 - 8 * beta\n    var beta4 = beta.redIAdd(beta);\n    beta4 = beta4.redIAdd(beta4);\n    var beta8 = beta4.redAdd(beta4);\n    nx = alpha.redSqr().redISub(beta8);\n    // Z3 = (Y1 + Z1)^2 - gamma - delta\n    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n    var ggamma8 = gamma.redSqr();\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._dbl = function _dbl() {\n  var a = this.curve.a;\n\n  // 4M + 6S + 10A\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  var jx2 = jx.redSqr();\n  var jy2 = jy.redSqr();\n\n  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n  var jxd4 = jx.redAdd(jx);\n  jxd4 = jxd4.redIAdd(jxd4);\n  var t1 = jxd4.redMul(jy2);\n  var nx = c.redSqr().redISub(t1.redAdd(t1));\n  var t2 = t1.redISub(nx);\n\n  var jyd8 = jy2.redSqr();\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  var ny = c.redMul(t2).redISub(jyd8);\n  var nz = jy.redAdd(jy).redMul(jz);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.trpl = function trpl() {\n  if (!this.curve.zeroA)\n    return this.dbl().add(this);\n\n  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n  // 5M + 10S + ...\n\n  // XX = X1^2\n  var xx = this.x.redSqr();\n  // YY = Y1^2\n  var yy = this.y.redSqr();\n  // ZZ = Z1^2\n  var zz = this.z.redSqr();\n  // YYYY = YY^2\n  var yyyy = yy.redSqr();\n  // M = 3 * XX + a * ZZ2; a = 0\n  var m = xx.redAdd(xx).redIAdd(xx);\n  // MM = M^2\n  var mm = m.redSqr();\n  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n  e = e.redIAdd(e);\n  e = e.redAdd(e).redIAdd(e);\n  e = e.redISub(mm);\n  // EE = E^2\n  var ee = e.redSqr();\n  // T = 16*YYYY\n  var t = yyyy.redIAdd(yyyy);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  // U = (M + E)^2 - MM - EE - T\n  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n  // X3 = 4 * (X1 * EE - 4 * YY * U)\n  var yyu4 = yy.redMul(u);\n  yyu4 = yyu4.redIAdd(yyu4);\n  yyu4 = yyu4.redIAdd(yyu4);\n  var nx = this.x.redMul(ee).redISub(yyu4);\n  nx = nx.redIAdd(nx);\n  nx = nx.redIAdd(nx);\n  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  // Z3 = (Z1 + E)^2 - ZZ - EE\n  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mul = function mul(k, kbase) {\n  k = new BN(k, kbase);\n\n  return this.curve._wnafMul(this, k);\n};\n\nJPoint.prototype.eq = function eq(p) {\n  if (p.type === 'affine')\n    return this.eq(p.toJ());\n\n  if (this === p)\n    return true;\n\n  // x1 * z2^2 == x2 * z1^2\n  var z2 = this.z.redSqr();\n  var pz2 = p.z.redSqr();\n  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n    return false;\n\n  // y1 * z2^3 == y2 * z1^3\n  var z3 = z2.redMul(this.z);\n  var pz3 = pz2.redMul(p.z);\n  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\n\nJPoint.prototype.eqXToP = function eqXToP(x) {\n  var zs = this.z.redSqr();\n  var rx = x.toRed(this.curve.red).redMul(zs);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(zs);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\nJPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC JPoint Infinity>';\n  return '<EC JPoint x: ' + this.x.toString(16, 2) +\n      ' y: ' + this.y.toString(16, 2) +\n      ' z: ' + this.z.toString(16, 2) + '>';\n};\n\nJPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n","'use strict';\n\nvar curves = exports;\n\nvar hash = require('hash.js');\nvar curve = require('./curve');\nvar utils = require('./utils');\n\nvar assert = utils.assert;\n\nfunction PresetCurve(options) {\n  if (options.type === 'short')\n    this.curve = new curve.short(options);\n  else if (options.type === 'edwards')\n    this.curve = new curve.edwards(options);\n  else\n    this.curve = new curve.mont(options);\n  this.g = this.curve.g;\n  this.n = this.curve.n;\n  this.hash = options.hash;\n\n  assert(this.g.validate(), 'Invalid curve');\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n}\ncurves.PresetCurve = PresetCurve;\n\nfunction defineCurve(name, options) {\n  Object.defineProperty(curves, name, {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n      var curve = new PresetCurve(options);\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        value: curve,\n      });\n      return curve;\n    },\n  });\n}\n\ndefineCurve('p192', {\n  type: 'short',\n  prime: 'p192',\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',\n  ],\n});\n\ndefineCurve('p224', {\n  type: 'short',\n  prime: 'p224',\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',\n  ],\n});\n\ndefineCurve('p256', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',\n  ],\n});\n\ndefineCurve('p384', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 ffffffff',\n  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 fffffffc',\n  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +\n     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +\n     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n  hash: hash.sha384,\n  gRed: false,\n  g: [\n    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +\n    '5502f25d bf55296c 3a545e38 72760ab7',\n    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +\n    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',\n  ],\n});\n\ndefineCurve('p521', {\n  type: 'short',\n  prime: null,\n  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff',\n  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff fffffffc',\n  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +\n     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +\n     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +\n     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n  hash: hash.sha512,\n  gRed: false,\n  g: [\n    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +\n    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +\n    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',\n    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +\n    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +\n    '3fad0761 353c7086 a272c240 88be9476 9fd16650',\n  ],\n});\n\ndefineCurve('curve25519', {\n  type: 'mont',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '76d06',\n  b: '1',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '9',\n  ],\n});\n\ndefineCurve('ed25519', {\n  type: 'edwards',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '-1',\n  c: '1',\n  // -121665 * (121666^(-1)) (mod P)\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\n\n    // 4/5\n    '6666666666666666666666666666666666666666666666666666666666666658',\n  ],\n});\n\nvar pre;\ntry {\n  pre = require('./precomputed/secp256k1');\n} catch (e) {\n  pre = undefined;\n}\n\ndefineCurve('secp256k1', {\n  type: 'short',\n  prime: 'k256',\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n  a: '0',\n  b: '7',\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n  h: '1',\n  hash: hash.sha256,\n\n  // Precomputed endomorphism\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n  basis: [\n    {\n      a: '3086d221a7d46bcde86c90e49284eb15',\n      b: '-e4437ed6010e88286f547fa90abfe4c3',\n    },\n    {\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n      b: '3086d221a7d46bcde86c90e49284eb15',\n    },\n  ],\n\n  gRed: false,\n  g: [\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n    pre,\n  ],\n});\n","'use strict';\n\nvar BN = require('bn.js');\nvar HmacDRBG = require('hmac-drbg');\nvar utils = require('../utils');\nvar curves = require('../curves');\nvar rand = require('brorand');\nvar assert = utils.assert;\n\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EC(options) {\n  if (!(this instanceof EC))\n    return new EC(options);\n\n  // Shortcut `elliptic.ec(curve-name)`\n  if (typeof options === 'string') {\n    assert(Object.prototype.hasOwnProperty.call(curves, options),\n      'Unknown curve ' + options);\n\n    options = curves[options];\n  }\n\n  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n  if (options instanceof curves.PresetCurve)\n    options = { curve: options };\n\n  this.curve = options.curve.curve;\n  this.n = this.curve.n;\n  this.nh = this.n.ushrn(1);\n  this.g = this.curve.g;\n\n  // Point on curve\n  this.g = options.curve.g;\n  this.g.precompute(options.curve.n.bitLength() + 1);\n\n  // Hash for function for DRBG\n  this.hash = options.hash || options.curve.hash;\n}\nmodule.exports = EC;\n\nEC.prototype.keyPair = function keyPair(options) {\n  return new KeyPair(this, options);\n};\n\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n  return KeyPair.fromPrivate(this, priv, enc);\n};\n\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n  return KeyPair.fromPublic(this, pub, enc);\n};\n\nEC.prototype.genKeyPair = function genKeyPair(options) {\n  if (!options)\n    options = {};\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n    entropy: options.entropy || rand(this.hash.hmacStrength),\n    entropyEnc: options.entropy && options.entropyEnc || 'utf8',\n    nonce: this.n.toArray(),\n  });\n\n  var bytes = this.n.byteLength();\n  var ns2 = this.n.sub(new BN(2));\n  for (;;) {\n    var priv = new BN(drbg.generate(bytes));\n    if (priv.cmp(ns2) > 0)\n      continue;\n\n    priv.iaddn(1);\n    return this.keyFromPrivate(priv);\n  }\n};\n\nEC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {\n  var delta = msg.byteLength() * 8 - this.n.bitLength();\n  if (delta > 0)\n    msg = msg.ushrn(delta);\n  if (!truncOnly && msg.cmp(this.n) >= 0)\n    return msg.sub(this.n);\n  else\n    return msg;\n};\n\nEC.prototype.sign = function sign(msg, key, enc, options) {\n  if (typeof enc === 'object') {\n    options = enc;\n    enc = null;\n  }\n  if (!options)\n    options = {};\n\n  key = this.keyFromPrivate(key, enc);\n  msg = this._truncateToN(new BN(msg, 16));\n\n  // Zero-extend key to provide enough entropy\n  var bytes = this.n.byteLength();\n  var bkey = key.getPrivate().toArray('be', bytes);\n\n  // Zero-extend nonce to have the same byte size as N\n  var nonce = msg.toArray('be', bytes);\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    entropy: bkey,\n    nonce: nonce,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n  });\n\n  // Number of bytes to generate\n  var ns1 = this.n.sub(new BN(1));\n\n  for (var iter = 0; ; iter++) {\n    var k = options.k ?\n      options.k(iter) :\n      new BN(drbg.generate(this.n.byteLength()));\n    k = this._truncateToN(k, true);\n    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n      continue;\n\n    var kp = this.g.mul(k);\n    if (kp.isInfinity())\n      continue;\n\n    var kpX = kp.getX();\n    var r = kpX.umod(this.n);\n    if (r.cmpn(0) === 0)\n      continue;\n\n    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n    s = s.umod(this.n);\n    if (s.cmpn(0) === 0)\n      continue;\n\n    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |\n                        (kpX.cmp(r) !== 0 ? 2 : 0);\n\n    // Use complement of `s`, if it is > `n / 2`\n    if (options.canonical && s.cmp(this.nh) > 0) {\n      s = this.n.sub(s);\n      recoveryParam ^= 1;\n    }\n\n    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });\n  }\n};\n\nEC.prototype.verify = function verify(msg, signature, key, enc) {\n  msg = this._truncateToN(new BN(msg, 16));\n  key = this.keyFromPublic(key, enc);\n  signature = new Signature(signature, 'hex');\n\n  // Perform primitive values validation\n  var r = signature.r;\n  var s = signature.s;\n  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n    return false;\n  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n    return false;\n\n  // Validate signature\n  var sinv = s.invm(this.n);\n  var u1 = sinv.mul(msg).umod(this.n);\n  var u2 = sinv.mul(r).umod(this.n);\n  var p;\n\n  if (!this.curve._maxwellTrick) {\n    p = this.g.mulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity())\n      return false;\n\n    return p.getX().umod(this.n).cmp(r) === 0;\n  }\n\n  // NOTE: Greg Maxwell's trick, inspired by:\n  // https://git.io/vad3K\n\n  p = this.g.jmulAdd(u1, key.getPublic(), u2);\n  if (p.isInfinity())\n    return false;\n\n  // Compare `p.x` of Jacobian point with `r`,\n  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n  // inverse of `p.z^2`\n  return p.eqXToP(r);\n};\n\nEC.prototype.recoverPubKey = function(msg, signature, j, enc) {\n  assert((3 & j) === j, 'The recovery param is more than two bits');\n  signature = new Signature(signature, enc);\n\n  var n = this.n;\n  var e = new BN(msg);\n  var r = signature.r;\n  var s = signature.s;\n\n  // A set LSB signifies that the y-coordinate is odd\n  var isYOdd = j & 1;\n  var isSecondKey = j >> 1;\n  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n    throw new Error('Unable to find sencond key candinate');\n\n  // 1.1. Let x = r + jn.\n  if (isSecondKey)\n    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n  else\n    r = this.curve.pointFromX(r, isYOdd);\n\n  var rInv = signature.r.invm(n);\n  var s1 = n.sub(e).mul(rInv).umod(n);\n  var s2 = s.mul(rInv).umod(n);\n\n  // 1.6.1 Compute Q = r^-1 (sR -  eG)\n  //               Q = r^-1 (sR + -eG)\n  return this.g.mulAdd(s1, r, s2);\n};\n\nEC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\n  signature = new Signature(signature, enc);\n  if (signature.recoveryParam !== null)\n    return signature.recoveryParam;\n\n  for (var i = 0; i < 4; i++) {\n    var Qprime;\n    try {\n      Qprime = this.recoverPubKey(e, signature, i);\n    } catch (e) {\n      continue;\n    }\n\n    if (Qprime.eq(Q))\n      return i;\n  }\n  throw new Error('Unable to find valid recovery factor');\n};\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction KeyPair(ec, options) {\n  this.ec = ec;\n  this.priv = null;\n  this.pub = null;\n\n  // KeyPair(ec, { priv: ..., pub: ... })\n  if (options.priv)\n    this._importPrivate(options.priv, options.privEnc);\n  if (options.pub)\n    this._importPublic(options.pub, options.pubEnc);\n}\nmodule.exports = KeyPair;\n\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n  if (pub instanceof KeyPair)\n    return pub;\n\n  return new KeyPair(ec, {\n    pub: pub,\n    pubEnc: enc,\n  });\n};\n\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n  if (priv instanceof KeyPair)\n    return priv;\n\n  return new KeyPair(ec, {\n    priv: priv,\n    privEnc: enc,\n  });\n};\n\nKeyPair.prototype.validate = function validate() {\n  var pub = this.getPublic();\n\n  if (pub.isInfinity())\n    return { result: false, reason: 'Invalid public key' };\n  if (!pub.validate())\n    return { result: false, reason: 'Public key is not a point' };\n  if (!pub.mul(this.ec.curve.n).isInfinity())\n    return { result: false, reason: 'Public key * N != O' };\n\n  return { result: true, reason: null };\n};\n\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n  // compact is optional argument\n  if (typeof compact === 'string') {\n    enc = compact;\n    compact = null;\n  }\n\n  if (!this.pub)\n    this.pub = this.ec.g.mul(this.priv);\n\n  if (!enc)\n    return this.pub;\n\n  return this.pub.encode(enc, compact);\n};\n\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n  if (enc === 'hex')\n    return this.priv.toString(16, 2);\n  else\n    return this.priv;\n};\n\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n  this.priv = new BN(key, enc || 16);\n\n  // Ensure that the priv won't be bigger than n, otherwise we may fail\n  // in fixed multiplication method\n  this.priv = this.priv.umod(this.ec.curve.n);\n};\n\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n  if (key.x || key.y) {\n    // Montgomery points only have an `x` coordinate.\n    // Weierstrass/Edwards points on the other hand have both `x` and\n    // `y` coordinates.\n    if (this.ec.curve.type === 'mont') {\n      assert(key.x, 'Need x coordinate');\n    } else if (this.ec.curve.type === 'short' ||\n               this.ec.curve.type === 'edwards') {\n      assert(key.x && key.y, 'Need both x and y coordinate');\n    }\n    this.pub = this.ec.curve.point(key.x, key.y);\n    return;\n  }\n  this.pub = this.ec.curve.decodePoint(key, enc);\n};\n\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n  if(!pub.validate()) {\n    assert(pub.validate(), 'public point not validated');\n  }\n  return pub.mul(this.priv).getX();\n};\n\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n  return this.ec.sign(msg, this, enc, options);\n};\n\nKeyPair.prototype.verify = function verify(msg, signature) {\n  return this.ec.verify(msg, signature, this);\n};\n\nKeyPair.prototype.inspect = function inspect() {\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n};\n","'use strict';\n\nvar BN = require('bn.js');\n\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction Signature(options, enc) {\n  if (options instanceof Signature)\n    return options;\n\n  if (this._importDER(options, enc))\n    return;\n\n  assert(options.r && options.s, 'Signature without r or s');\n  this.r = new BN(options.r, 16);\n  this.s = new BN(options.s, 16);\n  if (options.recoveryParam === undefined)\n    this.recoveryParam = null;\n  else\n    this.recoveryParam = options.recoveryParam;\n}\nmodule.exports = Signature;\n\nfunction Position() {\n  this.place = 0;\n}\n\nfunction getLength(buf, p) {\n  var initial = buf[p.place++];\n  if (!(initial & 0x80)) {\n    return initial;\n  }\n  var octetLen = initial & 0xf;\n\n  // Indefinite length or overflow\n  if (octetLen === 0 || octetLen > 4) {\n    return false;\n  }\n\n  var val = 0;\n  for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n    val <<= 8;\n    val |= buf[off];\n    val >>>= 0;\n  }\n\n  // Leading zeroes\n  if (val <= 0x7f) {\n    return false;\n  }\n\n  p.place = off;\n  return val;\n}\n\nfunction rmPadding(buf) {\n  var i = 0;\n  var len = buf.length - 1;\n  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n    i++;\n  }\n  if (i === 0) {\n    return buf;\n  }\n  return buf.slice(i);\n}\n\nSignature.prototype._importDER = function _importDER(data, enc) {\n  data = utils.toArray(data, enc);\n  var p = new Position();\n  if (data[p.place++] !== 0x30) {\n    return false;\n  }\n  var len = getLength(data, p);\n  if (len === false) {\n    return false;\n  }\n  if ((len + p.place) !== data.length) {\n    return false;\n  }\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var rlen = getLength(data, p);\n  if (rlen === false) {\n    return false;\n  }\n  var r = data.slice(p.place, rlen + p.place);\n  p.place += rlen;\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var slen = getLength(data, p);\n  if (slen === false) {\n    return false;\n  }\n  if (data.length !== slen + p.place) {\n    return false;\n  }\n  var s = data.slice(p.place, slen + p.place);\n  if (r[0] === 0) {\n    if (r[1] & 0x80) {\n      r = r.slice(1);\n    } else {\n      // Leading zeroes\n      return false;\n    }\n  }\n  if (s[0] === 0) {\n    if (s[1] & 0x80) {\n      s = s.slice(1);\n    } else {\n      // Leading zeroes\n      return false;\n    }\n  }\n\n  this.r = new BN(r);\n  this.s = new BN(s);\n  this.recoveryParam = null;\n\n  return true;\n};\n\nfunction constructLength(arr, len) {\n  if (len < 0x80) {\n    arr.push(len);\n    return;\n  }\n  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n  arr.push(octets | 0x80);\n  while (--octets) {\n    arr.push((len >>> (octets << 3)) & 0xff);\n  }\n  arr.push(len);\n}\n\nSignature.prototype.toDER = function toDER(enc) {\n  var r = this.r.toArray();\n  var s = this.s.toArray();\n\n  // Pad values\n  if (r[0] & 0x80)\n    r = [ 0 ].concat(r);\n  // Pad values\n  if (s[0] & 0x80)\n    s = [ 0 ].concat(s);\n\n  r = rmPadding(r);\n  s = rmPadding(s);\n\n  while (!s[0] && !(s[1] & 0x80)) {\n    s = s.slice(1);\n  }\n  var arr = [ 0x02 ];\n  constructLength(arr, r.length);\n  arr = arr.concat(r);\n  arr.push(0x02);\n  constructLength(arr, s.length);\n  var backHalf = arr.concat(s);\n  var res = [ 0x30 ];\n  constructLength(res, backHalf.length);\n  res = res.concat(backHalf);\n  return utils.encode(res, enc);\n};\n","'use strict';\n\nvar hash = require('hash.js');\nvar curves = require('../curves');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EDDSA(curve) {\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\n\n  if (!(this instanceof EDDSA))\n    return new EDDSA(curve);\n\n  curve = curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = hash.sha512;\n}\n\nmodule.exports = EDDSA;\n\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\nEDDSA.prototype.sign = function sign(message, secret) {\n  message = parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\n    .mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\n};\n\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\nEDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = parseBytes(message);\n  sig = this.makeSignature(sig);\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\nEDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n  for (var i = 0; i < arguments.length; i++)\n    hash.update(arguments[i]);\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return KeyPair.fromPublic(this, pub);\n};\n\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return KeyPair.fromSecret(this, secret);\n};\n\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof Signature)\n    return sig;\n  return new Signature(this, sig);\n};\n\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\nEDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = utils.parseBytes(bytes);\n\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n\n  var y = utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return utils.intFromLE(bytes);\n};\n\nEDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n\n/**\n* @param {EDDSA} eddsa - instance\n* @param {Object} params - public/private key parameters\n*\n* @param {Array<Byte>} [params.secret] - secret seed bytes\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n*\n*/\nfunction KeyPair(eddsa, params) {\n  this.eddsa = eddsa;\n  this._secret = parseBytes(params.secret);\n  if (eddsa.isPoint(params.pub))\n    this._pub = params.pub;\n  else\n    this._pubBytes = parseBytes(params.pub);\n}\n\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n  if (pub instanceof KeyPair)\n    return pub;\n  return new KeyPair(eddsa, { pub: pub });\n};\n\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n  if (secret instanceof KeyPair)\n    return secret;\n  return new KeyPair(eddsa, { secret: secret });\n};\n\nKeyPair.prototype.secret = function secret() {\n  return this._secret;\n};\n\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\n  return this.eddsa.encodePoint(this.pub());\n});\n\ncachedProperty(KeyPair, 'pub', function pub() {\n  if (this._pubBytes)\n    return this.eddsa.decodePoint(this._pubBytes);\n  return this.eddsa.g.mul(this.priv());\n});\n\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\n  var eddsa = this.eddsa;\n  var hash = this.hash();\n  var lastIx = eddsa.encodingLength - 1;\n\n  var a = hash.slice(0, eddsa.encodingLength);\n  a[0] &= 248;\n  a[lastIx] &= 127;\n  a[lastIx] |= 64;\n\n  return a;\n});\n\ncachedProperty(KeyPair, 'priv', function priv() {\n  return this.eddsa.decodeInt(this.privBytes());\n});\n\ncachedProperty(KeyPair, 'hash', function hash() {\n  return this.eddsa.hash().update(this.secret()).digest();\n});\n\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\n  return this.hash().slice(this.eddsa.encodingLength);\n});\n\nKeyPair.prototype.sign = function sign(message) {\n  assert(this._secret, 'KeyPair can only verify');\n  return this.eddsa.sign(message, this);\n};\n\nKeyPair.prototype.verify = function verify(message, sig) {\n  return this.eddsa.verify(message, sig, this);\n};\n\nKeyPair.prototype.getSecret = function getSecret(enc) {\n  assert(this._secret, 'KeyPair is public only');\n  return utils.encode(this.secret(), enc);\n};\n\nKeyPair.prototype.getPublic = function getPublic(enc) {\n  return utils.encode(this.pubBytes(), enc);\n};\n\nmodule.exports = KeyPair;\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/\nfunction Signature(eddsa, sig) {\n  this.eddsa = eddsa;\n\n  if (typeof sig !== 'object')\n    sig = parseBytes(sig);\n\n  if (Array.isArray(sig)) {\n    sig = {\n      R: sig.slice(0, eddsa.encodingLength),\n      S: sig.slice(eddsa.encodingLength),\n    };\n  }\n\n  assert(sig.R && sig.S, 'Signature without R or S');\n\n  if (eddsa.isPoint(sig.R))\n    this._R = sig.R;\n  if (sig.S instanceof BN)\n    this._S = sig.S;\n\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\n\ncachedProperty(Signature, 'S', function S() {\n  return this.eddsa.decodeInt(this.Sencoded());\n});\n\ncachedProperty(Signature, 'R', function R() {\n  return this.eddsa.decodePoint(this.Rencoded());\n});\n\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\n  return this.eddsa.encodePoint(this.R());\n});\n\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\n  return this.eddsa.encodeInt(this.S());\n});\n\nSignature.prototype.toBytes = function toBytes() {\n  return this.Rencoded().concat(this.Sencoded());\n};\n\nSignature.prototype.toHex = function toHex() {\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\n};\n\nmodule.exports = Signature;\n","module.exports = {\n  doubles: {\n    step: 4,\n    points: [\n      [\n        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',\n        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',\n      ],\n      [\n        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',\n        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',\n      ],\n      [\n        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',\n        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',\n      ],\n      [\n        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',\n        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',\n      ],\n      [\n        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',\n        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',\n      ],\n      [\n        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',\n        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',\n      ],\n      [\n        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',\n        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',\n      ],\n      [\n        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',\n        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',\n      ],\n      [\n        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',\n        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',\n      ],\n      [\n        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',\n        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',\n      ],\n      [\n        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',\n        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',\n      ],\n      [\n        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',\n        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',\n      ],\n      [\n        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',\n        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',\n      ],\n      [\n        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',\n        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',\n      ],\n      [\n        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',\n        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',\n      ],\n      [\n        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',\n        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',\n      ],\n      [\n        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',\n        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',\n      ],\n      [\n        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',\n        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',\n      ],\n      [\n        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',\n        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',\n      ],\n      [\n        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',\n        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',\n      ],\n      [\n        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',\n        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',\n      ],\n      [\n        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',\n        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',\n      ],\n      [\n        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',\n        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',\n      ],\n      [\n        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',\n        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',\n      ],\n      [\n        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',\n        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',\n      ],\n      [\n        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',\n        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',\n      ],\n      [\n        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',\n        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',\n      ],\n      [\n        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',\n        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',\n      ],\n      [\n        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',\n        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',\n      ],\n      [\n        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',\n        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',\n      ],\n      [\n        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',\n        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',\n      ],\n      [\n        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',\n        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',\n      ],\n      [\n        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',\n        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',\n      ],\n      [\n        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',\n        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',\n      ],\n      [\n        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',\n        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',\n      ],\n      [\n        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',\n        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',\n      ],\n      [\n        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',\n        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',\n      ],\n      [\n        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',\n        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',\n      ],\n      [\n        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',\n        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',\n      ],\n      [\n        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',\n        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',\n      ],\n      [\n        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',\n        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',\n      ],\n      [\n        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',\n        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',\n      ],\n      [\n        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',\n        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',\n      ],\n      [\n        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',\n        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',\n      ],\n      [\n        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',\n        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',\n      ],\n      [\n        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',\n        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',\n      ],\n      [\n        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',\n        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',\n      ],\n      [\n        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',\n        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',\n      ],\n      [\n        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',\n        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',\n      ],\n      [\n        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',\n        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',\n      ],\n      [\n        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',\n        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',\n      ],\n      [\n        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',\n        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',\n      ],\n      [\n        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',\n        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',\n      ],\n      [\n        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',\n        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',\n      ],\n      [\n        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',\n        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',\n      ],\n      [\n        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',\n        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',\n      ],\n      [\n        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',\n        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',\n      ],\n      [\n        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',\n        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',\n      ],\n      [\n        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',\n        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',\n      ],\n      [\n        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',\n        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',\n      ],\n      [\n        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',\n        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',\n      ],\n      [\n        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',\n        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',\n      ],\n      [\n        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',\n        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',\n      ],\n      [\n        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',\n        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',\n      ],\n      [\n        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',\n        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',\n      ],\n    ],\n  },\n  naf: {\n    wnd: 7,\n    points: [\n      [\n        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',\n        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',\n      ],\n      [\n        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',\n        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',\n      ],\n      [\n        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',\n        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',\n      ],\n      [\n        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',\n        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',\n      ],\n      [\n        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',\n        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',\n      ],\n      [\n        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',\n        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',\n      ],\n      [\n        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',\n        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',\n      ],\n      [\n        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',\n        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',\n      ],\n      [\n        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',\n        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',\n      ],\n      [\n        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',\n        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',\n      ],\n      [\n        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',\n        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',\n      ],\n      [\n        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',\n        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',\n      ],\n      [\n        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',\n        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',\n      ],\n      [\n        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',\n        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',\n      ],\n      [\n        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',\n        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',\n      ],\n      [\n        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',\n        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',\n      ],\n      [\n        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',\n        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',\n      ],\n      [\n        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',\n        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',\n      ],\n      [\n        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',\n        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',\n      ],\n      [\n        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',\n        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',\n      ],\n      [\n        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',\n        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',\n      ],\n      [\n        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',\n        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',\n      ],\n      [\n        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',\n        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',\n      ],\n      [\n        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',\n        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',\n      ],\n      [\n        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',\n        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',\n      ],\n      [\n        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',\n        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',\n      ],\n      [\n        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',\n        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',\n      ],\n      [\n        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',\n        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',\n      ],\n      [\n        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',\n        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',\n      ],\n      [\n        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',\n        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',\n      ],\n      [\n        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',\n        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',\n      ],\n      [\n        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',\n        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',\n      ],\n      [\n        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',\n        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',\n      ],\n      [\n        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',\n        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',\n      ],\n      [\n        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',\n        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',\n      ],\n      [\n        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',\n        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',\n      ],\n      [\n        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',\n        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',\n      ],\n      [\n        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',\n        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',\n      ],\n      [\n        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',\n        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',\n      ],\n      [\n        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',\n        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',\n      ],\n      [\n        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',\n        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',\n      ],\n      [\n        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',\n        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',\n      ],\n      [\n        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',\n        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',\n      ],\n      [\n        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',\n        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',\n      ],\n      [\n        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',\n        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',\n      ],\n      [\n        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',\n        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',\n      ],\n      [\n        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',\n        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',\n      ],\n      [\n        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',\n        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',\n      ],\n      [\n        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',\n        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',\n      ],\n      [\n        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',\n        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',\n      ],\n      [\n        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',\n        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',\n      ],\n      [\n        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',\n        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',\n      ],\n      [\n        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',\n        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',\n      ],\n      [\n        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',\n        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',\n      ],\n      [\n        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',\n        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',\n      ],\n      [\n        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',\n        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',\n      ],\n      [\n        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',\n        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',\n      ],\n      [\n        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',\n        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',\n      ],\n      [\n        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',\n        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',\n      ],\n      [\n        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',\n        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',\n      ],\n      [\n        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',\n        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',\n      ],\n      [\n        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',\n        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',\n      ],\n      [\n        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',\n        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',\n      ],\n      [\n        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',\n        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',\n      ],\n      [\n        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',\n        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',\n      ],\n      [\n        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',\n        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',\n      ],\n      [\n        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',\n        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',\n      ],\n      [\n        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',\n        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',\n      ],\n      [\n        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',\n        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',\n      ],\n      [\n        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',\n        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',\n      ],\n      [\n        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',\n        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',\n      ],\n      [\n        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',\n        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',\n      ],\n      [\n        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',\n        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',\n      ],\n      [\n        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',\n        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',\n      ],\n      [\n        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',\n        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',\n      ],\n      [\n        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',\n        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',\n      ],\n      [\n        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',\n        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',\n      ],\n      [\n        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',\n        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',\n      ],\n      [\n        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',\n        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',\n      ],\n      [\n        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',\n        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',\n      ],\n      [\n        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',\n        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',\n      ],\n      [\n        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',\n        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',\n      ],\n      [\n        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',\n        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',\n      ],\n      [\n        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',\n        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',\n      ],\n      [\n        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',\n        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',\n      ],\n      [\n        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',\n        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',\n      ],\n      [\n        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',\n        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',\n      ],\n      [\n        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',\n        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',\n      ],\n      [\n        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',\n        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',\n      ],\n      [\n        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',\n        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',\n      ],\n      [\n        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',\n        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',\n      ],\n      [\n        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',\n        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',\n      ],\n      [\n        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',\n        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',\n      ],\n      [\n        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',\n        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',\n      ],\n      [\n        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',\n        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',\n      ],\n      [\n        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',\n        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',\n      ],\n      [\n        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',\n        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',\n      ],\n      [\n        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',\n        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',\n      ],\n      [\n        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',\n        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',\n      ],\n      [\n        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',\n        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',\n      ],\n      [\n        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',\n        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',\n      ],\n      [\n        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',\n        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',\n      ],\n      [\n        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',\n        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',\n      ],\n      [\n        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',\n        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',\n      ],\n      [\n        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',\n        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',\n      ],\n      [\n        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',\n        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',\n      ],\n      [\n        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',\n        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',\n      ],\n      [\n        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',\n        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',\n      ],\n      [\n        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',\n        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',\n      ],\n      [\n        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',\n        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',\n      ],\n      [\n        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',\n        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',\n      ],\n      [\n        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',\n        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',\n      ],\n      [\n        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',\n        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',\n      ],\n      [\n        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',\n        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',\n      ],\n      [\n        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',\n        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',\n      ],\n      [\n        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',\n        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',\n      ],\n      [\n        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',\n        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',\n      ],\n      [\n        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',\n        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',\n      ],\n      [\n        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',\n        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',\n      ],\n      [\n        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',\n        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',\n      ],\n      [\n        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',\n        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',\n      ],\n      [\n        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',\n        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',\n      ],\n      [\n        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',\n        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',\n      ],\n      [\n        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',\n        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',\n      ],\n      [\n        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',\n        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',\n      ],\n      [\n        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',\n        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',\n      ],\n      [\n        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',\n        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',\n      ],\n    ],\n  },\n};\n","'use strict';\n\nvar utils = exports;\nvar BN = require('bn.js');\nvar minAssert = require('minimalistic-assert');\nvar minUtils = require('minimalistic-crypto-utils');\n\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n  naf.fill(0);\n\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n\n  for (var i = 0; i < naf.length; i++) {\n    var z;\n    var mod = k.andln(ws - 1);\n    if (k.isOdd()) {\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n\n    naf[i] = z;\n    k.iushrn(1);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    [],\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  var m8;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n      this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n    bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new BN(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n\n","module.exports={\n  \"name\": \"elliptic\",\n  \"version\": \"6.5.4\",\n  \"description\": \"EC cryptography\",\n  \"main\": \"lib/elliptic.js\",\n  \"files\": [\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"lint\": \"eslint lib test\",\n    \"lint:fix\": \"npm run lint -- --fix\",\n    \"unit\": \"istanbul test _mocha --reporter=spec test/index.js\",\n    \"test\": \"npm run lint && npm run unit\",\n    \"version\": \"grunt dist && git add dist/\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:indutny/elliptic\"\n  },\n  \"keywords\": [\n    \"EC\",\n    \"Elliptic\",\n    \"curve\",\n    \"Cryptography\"\n  ],\n  \"author\": \"Fedor Indutny <fedor@indutny.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/indutny/elliptic/issues\"\n  },\n  \"homepage\": \"https://github.com/indutny/elliptic\",\n  \"devDependencies\": {\n    \"brfs\": \"^2.0.2\",\n    \"coveralls\": \"^3.1.0\",\n    \"eslint\": \"^7.6.0\",\n    \"grunt\": \"^1.2.1\",\n    \"grunt-browserify\": \"^5.3.0\",\n    \"grunt-cli\": \"^1.3.2\",\n    \"grunt-contrib-connect\": \"^3.0.0\",\n    \"grunt-contrib-copy\": \"^1.0.0\",\n    \"grunt-contrib-uglify\": \"^5.0.0\",\n    \"grunt-mocha-istanbul\": \"^5.0.2\",\n    \"grunt-saucelabs\": \"^9.0.1\",\n    \"istanbul\": \"^0.4.5\",\n    \"mocha\": \"^8.0.1\"\n  },\n  \"dependencies\": {\n    \"bn.js\": \"^4.11.9\",\n    \"brorand\": \"^1.1.0\",\n    \"hash.js\": \"^1.0.0\",\n    \"hmac-drbg\": \"^1.0.1\",\n    \"inherits\": \"^2.0.4\",\n    \"minimalistic-assert\": \"^1.0.1\",\n    \"minimalistic-crypto-utils\": \"^1.0.1\"\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.keccak512 = exports.keccak384 = exports.keccak256 = exports.keccak224 = void 0;\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst utils_1 = require(\"./utils\");\nexports.keccak224 = (0, utils_1.wrapHash)(sha3_1.keccak_224);\nexports.keccak256 = (() => {\n    const k = (0, utils_1.wrapHash)(sha3_1.keccak_256);\n    k.create = sha3_1.keccak_256.create;\n    return k;\n})();\nexports.keccak384 = (0, utils_1.wrapHash)(sha3_1.keccak_384);\nexports.keccak512 = (0, utils_1.wrapHash)(sha3_1.keccak_512);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        _assert_js_1.default.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        _assert_js_1.default.exists(this, false);\n        _assert_js_1.default.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        _assert_js_1.default.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        _assert_js_1.default.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"./utils\");\nexports.sha256 = (0, utils_1.wrapHash)(sha256_1.sha256);\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = exports.wrapHash = exports.equalsBytes = exports.hexToBytes = exports.bytesToUtf8 = exports.utf8ToBytes = exports.createView = exports.concatBytes = exports.toHex = exports.bytesToHex = exports.assertBytes = exports.assertBool = void 0;\n// buf.toString('hex') -> toHex(buf)\nconst _assert_1 = __importDefault(require(\"@noble/hashes/_assert\"));\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst assertBool = _assert_1.default.bool;\nexports.assertBool = assertBool;\nconst assertBytes = _assert_1.default.bytes;\nexports.assertBytes = assertBytes;\nvar utils_2 = require(\"@noble/hashes/utils\");\nObject.defineProperty(exports, \"bytesToHex\", { enumerable: true, get: function () { return utils_2.bytesToHex; } });\nObject.defineProperty(exports, \"toHex\", { enumerable: true, get: function () { return utils_2.bytesToHex; } });\nObject.defineProperty(exports, \"concatBytes\", { enumerable: true, get: function () { return utils_2.concatBytes; } });\nObject.defineProperty(exports, \"createView\", { enumerable: true, get: function () { return utils_2.createView; } });\nObject.defineProperty(exports, \"utf8ToBytes\", { enumerable: true, get: function () { return utils_2.utf8ToBytes; } });\n// buf.toString('utf8') -> bytesToUtf8(buf)\nfunction bytesToUtf8(data) {\n    if (!(data instanceof Uint8Array)) {\n        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);\n    }\n    return new TextDecoder().decode(data);\n}\nexports.bytesToUtf8 = bytesToUtf8;\nfunction hexToBytes(data) {\n    const sliced = data.startsWith(\"0x\") ? data.substring(2) : data;\n    return (0, utils_1.hexToBytes)(sliced);\n}\nexports.hexToBytes = hexToBytes;\n// buf.equals(buf2) -> equalsBytes(buf, buf2)\nfunction equalsBytes(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equalsBytes = equalsBytes;\n// Internal utils\nfunction wrapHash(hash) {\n    return (msg) => {\n        _assert_1.default.bytes(msg);\n        return hash(msg);\n    };\n}\nexports.wrapHash = wrapHash;\nexports.crypto = (() => {\n    const webCrypto = typeof self === \"object\" && \"crypto\" in self ? self.crypto : undefined;\n    const nodeRequire = typeof module !== \"undefined\" &&\n        typeof module.require === \"function\" &&\n        module.require.bind(module);\n    return {\n        node: nodeRequire && !webCrypto ? nodeRequire(\"crypto\") : undefined,\n        web: webCrypto\n    };\n})();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.utils = exports.decode = exports.encode = void 0;\n/**\n * RLP Encoding based on https://eth.wiki/en/fundamentals/rlp\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/\nfunction encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        for (let i = 0; i < input.length; i++) {\n            output.push(encode(input[i]));\n        }\n        const buf = concatBytes(...output);\n        return concatBytes(encodeLength(buf.length, 192), buf);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\nexports.encode = encode;\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */\nfunction safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */\nfunction decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error('invalid RLP: extra zeros');\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([len + offset]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (!input || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error('invalid RLP: remainder must be zero');\n    }\n    return decoded.data;\n}\nexports.decode = decode;\n/** Decode an input with RLP */\nfunction _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1),\n        };\n    }\n    else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        }\n        else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');\n        }\n        return {\n            data: data,\n            remainder: input.slice(length),\n        };\n    }\n    else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error('invalid RLP: not enough bytes for string length');\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error('invalid RLP: expected string length to be greater than 55');\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data: data,\n            remainder: input.slice(length + llength),\n        };\n    }\n    else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length),\n        };\n    }\n    else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error('invalid RLP: encoded list too short');\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error('invalid RLP: total length is larger than the data');\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while (innerRemainder.length) {\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength),\n        };\n    }\n}\nconst cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte))\n        throw new Error('Invalid byte sequence');\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */\nfunction concatBytes(...arrays) {\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */\nfunction numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error('Invalid integer as argument, must be unsigned!');\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === '0' && str[1] === 'x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */\nfunction toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === 'string') {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === 'number' || typeof v === 'bigint') {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error('toBytes: received unsupported type ' + typeof v);\n}\nexports.utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes,\n};\nconst RLP = { encode, decode };\nexports.default = RLP;\n//# sourceMappingURL=index.js.map","module.exports = require('./lib')(require('./lib/elliptic'))\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","'use strict';\n\nvar elliptic = exports;\n\nelliptic.version = require('../package.json').version;\nelliptic.utils = require('./elliptic/utils');\nelliptic.rand = require('brorand');\nelliptic.curve = require('./elliptic/curve');\nelliptic.curves = require('./elliptic/curves');\n\n// Protocols\nelliptic.ec = require('./elliptic/ec');\nelliptic.eddsa = require('./elliptic/eddsa');\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new BN(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new BN(0).toRed(this.red);\n  this.one = new BN(1).toRed(this.red);\n  this.two = new BN(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new BN(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n\n  this._bitLength = this.n ? this.n.bitLength() : 0;\n\n  // Generalized Greg Maxwell's trick\n  var adjustCount = this.n && this.p.div(this.n);\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n    this.redN = null;\n  } else {\n    this._maxwellTrick = true;\n    this.redN = this.n.toRed(this.red);\n  }\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  assert(p.precomputed);\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1, this._bitLength);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  var j;\n  var nafW;\n  for (j = 0; j < naf.length; j += doubles.step) {\n    nafW = 0;\n    for (var l = j + doubles.step - 1; l >= j; l--)\n      nafW = (nafW << 1) + naf[l];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (j = 0; j < repr.length; j++) {\n      nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w, this._bitLength);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var l = 0; i >= 0 && naf[i] === 0; i--)\n      l++;\n    if (i >= 0)\n      l++;\n    acc = acc.dblp(l);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n  points,\n  coeffs,\n  len,\n  jacobianResult) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  var i;\n  var j;\n  var p;\n  for (i = 0; i < len; i++) {\n    p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b], /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3,  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (j = 0; j < len; j++) {\n      var z = tmp[j];\n      p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (i = 0; i < len; i++)\n    wnd[i] = null;\n\n  if (jacobianResult)\n    return acc;\n  else\n    return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.eq = function eq(/*other*/) {\n  throw new Error('Not implemented');\n};\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  bytes = utils.toArray(bytes, enc);\n\n  var len = this.p.byteLength();\n\n  // uncompressed, hybrid-odd, hybrid-even\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n      bytes.length - 1 === 2 * len) {\n    if (bytes[0] === 0x06)\n      assert(bytes[bytes.length - 1] % 2 === 0);\n    else if (bytes[0] === 0x07)\n      assert(bytes[bytes.length - 1] % 2 === 1);\n\n    var res =  this.point(bytes.slice(1, 1 + len),\n      bytes.slice(1 + len, 1 + 2 * len));\n\n    return res;\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n              bytes.length - 1 === len) {\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n  }\n  throw new Error('Unknown point format');\n};\n\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n  return this.encode(enc, true);\n};\n\nBasePoint.prototype._encode = function _encode(compact) {\n  var len = this.curve.p.byteLength();\n  var x = this.getX().toArray('be', len);\n\n  if (compact)\n    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n\n  return [ 0x04 ].concat(x, this.getY().toArray('be', len));\n};\n\nBasePoint.prototype.encode = function encode(enc, compact) {\n  return utils.encode(this._encode(compact), enc);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null,\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n  if (!this.precomputed)\n    return false;\n\n  var doubles = this.precomputed.doubles;\n  if (!doubles)\n    return false;\n\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles,\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res,\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction EdwardsCurve(conf) {\n  // NOTE: Important as we are creating point in Base.call()\n  this.twisted = (conf.a | 0) !== 1;\n  this.mOneA = this.twisted && (conf.a | 0) === -1;\n  this.extended = this.mOneA;\n\n  Base.call(this, 'edwards', conf);\n\n  this.a = new BN(conf.a, 16).umod(this.red.m);\n  this.a = this.a.toRed(this.red);\n  this.c = new BN(conf.c, 16).toRed(this.red);\n  this.c2 = this.c.redSqr();\n  this.d = new BN(conf.d, 16).toRed(this.red);\n  this.dd = this.d.redAdd(this.d);\n\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n  this.oneC = (conf.c | 0) === 1;\n}\ninherits(EdwardsCurve, Base);\nmodule.exports = EdwardsCurve;\n\nEdwardsCurve.prototype._mulA = function _mulA(num) {\n  if (this.mOneA)\n    return num.redNeg();\n  else\n    return this.a.redMul(num);\n};\n\nEdwardsCurve.prototype._mulC = function _mulC(num) {\n  if (this.oneC)\n    return num;\n  else\n    return this.c.redMul(num);\n};\n\n// Just for compatibility with Short curve\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n  return this.point(x, y, z, t);\n};\n\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var x2 = x.redSqr();\n  var rhs = this.c2.redSub(this.a.redMul(x2));\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n\n  var y2 = rhs.redMul(lhs.redInvm());\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n  y = new BN(y, 16);\n  if (!y.red)\n    y = y.toRed(this.red);\n\n  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\n  var y2 = y.redSqr();\n  var lhs = y2.redSub(this.c2);\n  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n  var x2 = lhs.redMul(rhs.redInvm());\n\n  if (x2.cmp(this.zero) === 0) {\n    if (odd)\n      throw new Error('invalid point');\n    else\n      return this.point(this.zero, y);\n  }\n\n  var x = x2.redSqrt();\n  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  if (x.fromRed().isOdd() !== odd)\n    x = x.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.validate = function validate(point) {\n  if (point.isInfinity())\n    return true;\n\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n  point.normalize();\n\n  var x2 = point.x.redSqr();\n  var y2 = point.y.redSqr();\n  var lhs = x2.redMul(this.a).redAdd(y2);\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n\n  return lhs.cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, y, z, t) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.zero;\n    this.y = this.curve.one;\n    this.z = this.curve.one;\n    this.t = this.curve.zero;\n    this.zOne = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = z ? new BN(z, 16) : this.curve.one;\n    this.t = t && new BN(t, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n    if (this.t && !this.t.red)\n      this.t = this.t.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n\n    // Use extended coordinates\n    if (this.curve.extended && !this.t) {\n      this.t = this.x.redMul(this.y);\n      if (!this.zOne)\n        this.t = this.t.redMul(this.z.redInvm());\n    }\n  }\n}\ninherits(Point, Base.BasePoint);\n\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\n  return new Point(this, x, y, z, t);\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1], obj[2]);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.x.cmpn(0) === 0 &&\n    (this.y.cmp(this.z) === 0 ||\n    (this.zOne && this.y.cmp(this.curve.c) === 0));\n};\n\nPoint.prototype._extDbl = function _extDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #doubling-dbl-2008-hwcd\n  // 4M + 4S\n\n  // A = X1^2\n  var a = this.x.redSqr();\n  // B = Y1^2\n  var b = this.y.redSqr();\n  // C = 2 * Z1^2\n  var c = this.z.redSqr();\n  c = c.redIAdd(c);\n  // D = a * A\n  var d = this.curve._mulA(a);\n  // E = (X1 + Y1)^2 - A - B\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n  // G = D + B\n  var g = d.redAdd(b);\n  // F = G - C\n  var f = g.redSub(c);\n  // H = D - B\n  var h = d.redSub(b);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projDbl = function _projDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #doubling-dbl-2008-bbjlp\n  //     #doubling-dbl-2007-bl\n  // and others\n  // Generally 3M + 4S or 2M + 4S\n\n  // B = (X1 + Y1)^2\n  var b = this.x.redAdd(this.y).redSqr();\n  // C = X1^2\n  var c = this.x.redSqr();\n  // D = Y1^2\n  var d = this.y.redSqr();\n\n  var nx;\n  var ny;\n  var nz;\n  var e;\n  var h;\n  var j;\n  if (this.curve.twisted) {\n    // E = a * C\n    e = this.curve._mulA(c);\n    // F = E + D\n    var f = e.redAdd(d);\n    if (this.zOne) {\n      // X3 = (B - C - D) * (F - 2)\n      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F^2 - 2 * F\n      nz = f.redSqr().redSub(f).redSub(f);\n    } else {\n      // H = Z1^2\n      h = this.z.redSqr();\n      // J = F - 2 * H\n      j = f.redSub(h).redISub(h);\n      // X3 = (B-C-D)*J\n      nx = b.redSub(c).redISub(d).redMul(j);\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F * J\n      nz = f.redMul(j);\n    }\n  } else {\n    // E = C + D\n    e = c.redAdd(d);\n    // H = (c * Z1)^2\n    h = this.curve._mulC(this.z).redSqr();\n    // J = E - 2 * H\n    j = e.redSub(h).redSub(h);\n    // X3 = c * (B - E) * J\n    nx = this.curve._mulC(b.redISub(e)).redMul(j);\n    // Y3 = c * E * (C - D)\n    ny = this.curve._mulC(e).redMul(c.redISub(d));\n    // Z3 = E * J\n    nz = e.redMul(j);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  // Double in extended coordinates\n  if (this.curve.extended)\n    return this._extDbl();\n  else\n    return this._projDbl();\n};\n\nPoint.prototype._extAdd = function _extAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #addition-add-2008-hwcd-3\n  // 8M\n\n  // A = (Y1 - X1) * (Y2 - X2)\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n  // B = (Y1 + X1) * (Y2 + X2)\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n  // C = T1 * k * T2\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);\n  // D = Z1 * 2 * Z2\n  var d = this.z.redMul(p.z.redAdd(p.z));\n  // E = B - A\n  var e = b.redSub(a);\n  // F = D - C\n  var f = d.redSub(c);\n  // G = D + C\n  var g = d.redAdd(c);\n  // H = B + A\n  var h = b.redAdd(a);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projAdd = function _projAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #addition-add-2008-bbjlp\n  //     #addition-add-2007-bl\n  // 10M + 1S\n\n  // A = Z1 * Z2\n  var a = this.z.redMul(p.z);\n  // B = A^2\n  var b = a.redSqr();\n  // C = X1 * X2\n  var c = this.x.redMul(p.x);\n  // D = Y1 * Y2\n  var d = this.y.redMul(p.y);\n  // E = d * C * D\n  var e = this.curve.d.redMul(c).redMul(d);\n  // F = B - E\n  var f = b.redSub(e);\n  // G = B + E\n  var g = b.redAdd(e);\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n  var nx = a.redMul(f).redMul(tmp);\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // Y3 = A * G * (D - a * C)\n    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n    // Z3 = F * G\n    nz = f.redMul(g);\n  } else {\n    // Y3 = A * G * (D - C)\n    ny = a.redMul(g).redMul(d.redSub(c));\n    // Z3 = c * F * G\n    nz = this.curve._mulC(f).redMul(g);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.add = function add(p) {\n  if (this.isInfinity())\n    return p;\n  if (p.isInfinity())\n    return this;\n\n  if (this.curve.extended)\n    return this._extAdd(p);\n  else\n    return this._projAdd(p);\n};\n\nPoint.prototype.mul = function mul(k) {\n  if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);\n};\n\nPoint.prototype.normalize = function normalize() {\n  if (this.zOne)\n    return this;\n\n  // Normalize coordinates\n  var zi = this.z.redInvm();\n  this.x = this.x.redMul(zi);\n  this.y = this.y.redMul(zi);\n  if (this.t)\n    this.t = this.t.redMul(zi);\n  this.z = this.curve.one;\n  this.zOne = true;\n  return this;\n};\n\nPoint.prototype.neg = function neg() {\n  return this.curve.point(this.x.redNeg(),\n    this.y,\n    this.z,\n    this.t && this.t.redNeg());\n};\n\nPoint.prototype.getX = function getX() {\n  this.normalize();\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  this.normalize();\n  return this.y.fromRed();\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this === other ||\n         this.getX().cmp(other.getX()) === 0 &&\n         this.getY().cmp(other.getY()) === 0;\n};\n\nPoint.prototype.eqXToP = function eqXToP(x) {\n  var rx = x.toRed(this.curve.red).redMul(this.z);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(this.z);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\n// Compatibility with BaseCurve\nPoint.prototype.toP = Point.prototype.normalize;\nPoint.prototype.mixedAdd = Point.prototype.add;\n","'use strict';\n\nvar curve = exports;\n\ncurve.base = require('./base');\ncurve.short = require('./short');\ncurve.mont = require('./mont');\ncurve.edwards = require('./edwards');\n","'use strict';\n\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar utils = require('../utils');\n\nfunction MontCurve(conf) {\n  Base.call(this, 'mont', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.i4 = new BN(4).toRed(this.red).redInvm();\n  this.two = new BN(2).toRed(this.red);\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n}\ninherits(MontCurve, Base);\nmodule.exports = MontCurve;\n\nMontCurve.prototype.validate = function validate(point) {\n  var x = point.normalize().x;\n  var x2 = x.redSqr();\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n  var y = rhs.redSqrt();\n\n  return y.redSqr().cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, z) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && z === null) {\n    this.x = this.curve.one;\n    this.z = this.curve.zero;\n  } else {\n    this.x = new BN(x, 16);\n    this.z = new BN(z, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n  }\n}\ninherits(Point, Base.BasePoint);\n\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  return this.point(utils.toArray(bytes, enc), 1);\n};\n\nMontCurve.prototype.point = function point(x, z) {\n  return new Point(this, x, z);\n};\n\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nPoint.prototype.precompute = function precompute() {\n  // No-op\n};\n\nPoint.prototype._encode = function _encode() {\n  return this.getX().toArray('be', this.curve.p.byteLength());\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1] || curve.one);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\nPoint.prototype.dbl = function dbl() {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n  // 2M + 2S + 4A\n\n  // A = X1 + Z1\n  var a = this.x.redAdd(this.z);\n  // AA = A^2\n  var aa = a.redSqr();\n  // B = X1 - Z1\n  var b = this.x.redSub(this.z);\n  // BB = B^2\n  var bb = b.redSqr();\n  // C = AA - BB\n  var c = aa.redSub(bb);\n  // X3 = AA * BB\n  var nx = aa.redMul(bb);\n  // Z3 = C * (BB + A24 * C)\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.add = function add() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n  // 4M + 2S + 6A\n\n  // A = X2 + Z2\n  var a = this.x.redAdd(this.z);\n  // B = X2 - Z2\n  var b = this.x.redSub(this.z);\n  // C = X3 + Z3\n  var c = p.x.redAdd(p.z);\n  // D = X3 - Z3\n  var d = p.x.redSub(p.z);\n  // DA = D * A\n  var da = d.redMul(a);\n  // CB = C * B\n  var cb = c.redMul(b);\n  // X5 = Z1 * (DA + CB)^2\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n  // Z5 = X1 * (DA - CB)^2\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.mul = function mul(k) {\n  var t = k.clone();\n  var a = this; // (N / 2) * Q + Q\n  var b = this.curve.point(null, null); // (N / 2) * Q\n  var c = this; // Q\n\n  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\n    bits.push(t.andln(1));\n\n  for (var i = bits.length - 1; i >= 0; i--) {\n    if (bits[i] === 0) {\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n      a = a.diffAdd(b, c);\n      // N * Q = 2 * ((N / 2) * Q + Q))\n      b = b.dbl();\n    } else {\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n      b = a.diffAdd(b, c);\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)\n      a = a.dbl();\n    }\n  }\n  return b;\n};\n\nPoint.prototype.mulAdd = function mulAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.jumlAdd = function jumlAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this.getX().cmp(other.getX()) === 0;\n};\n\nPoint.prototype.normalize = function normalize() {\n  this.x = this.x.redMul(this.z.redInvm());\n  this.z = this.curve.one;\n  return this;\n};\n\nPoint.prototype.getX = function getX() {\n  // Normalize coordinates\n  this.normalize();\n\n  return this.x.fromRed();\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction ShortCurve(conf) {\n  Base.call(this, 'short', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.tinv = this.two.redInvm();\n\n  this.zeroA = this.a.fromRed().cmpn(0) === 0;\n  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n\n  // If the curve is endomorphic, precalculate beta and lambda\n  this.endo = this._getEndomorphism(conf);\n  this._endoWnafT1 = new Array(4);\n  this._endoWnafT2 = new Array(4);\n}\ninherits(ShortCurve, Base);\nmodule.exports = ShortCurve;\n\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n  // No efficient endomorphism\n  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n    return;\n\n  // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n  var beta;\n  var lambda;\n  if (conf.beta) {\n    beta = new BN(conf.beta, 16).toRed(this.red);\n  } else {\n    var betas = this._getEndoRoots(this.p);\n    // Choose the smallest beta\n    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n    beta = beta.toRed(this.red);\n  }\n  if (conf.lambda) {\n    lambda = new BN(conf.lambda, 16);\n  } else {\n    // Choose the lambda that is matching selected beta\n    var lambdas = this._getEndoRoots(this.n);\n    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n      lambda = lambdas[0];\n    } else {\n      lambda = lambdas[1];\n      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n    }\n  }\n\n  // Get basis vectors, used for balanced length-two representation\n  var basis;\n  if (conf.basis) {\n    basis = conf.basis.map(function(vec) {\n      return {\n        a: new BN(vec.a, 16),\n        b: new BN(vec.b, 16),\n      };\n    });\n  } else {\n    basis = this._getEndoBasis(lambda);\n  }\n\n  return {\n    beta: beta,\n    lambda: lambda,\n    basis: basis,\n  };\n};\n\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n  // Find roots of for x^2 + x + 1 in F\n  // Root = (-1 +- Sqrt(-3)) / 2\n  //\n  var red = num === this.p ? this.red : BN.mont(num);\n  var tinv = new BN(2).toRed(red).redInvm();\n  var ntinv = tinv.redNeg();\n\n  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n\n  var l1 = ntinv.redAdd(s).fromRed();\n  var l2 = ntinv.redSub(s).fromRed();\n  return [ l1, l2 ];\n};\n\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n  // aprxSqrt >= sqrt(this.n)\n  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n\n  // 3.74\n  // Run EGCD, until r(L + 1) < aprxSqrt\n  var u = lambda;\n  var v = this.n.clone();\n  var x1 = new BN(1);\n  var y1 = new BN(0);\n  var x2 = new BN(0);\n  var y2 = new BN(1);\n\n  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n  var a0;\n  var b0;\n  // First vector\n  var a1;\n  var b1;\n  // Second vector\n  var a2;\n  var b2;\n\n  var prevR;\n  var i = 0;\n  var r;\n  var x;\n  while (u.cmpn(0) !== 0) {\n    var q = v.div(u);\n    r = v.sub(q.mul(u));\n    x = x2.sub(q.mul(x1));\n    var y = y2.sub(q.mul(y1));\n\n    if (!a1 && r.cmp(aprxSqrt) < 0) {\n      a0 = prevR.neg();\n      b0 = x1;\n      a1 = r.neg();\n      b1 = x;\n    } else if (a1 && ++i === 2) {\n      break;\n    }\n    prevR = r;\n\n    v = u;\n    u = r;\n    x2 = x1;\n    x1 = x;\n    y2 = y1;\n    y1 = y;\n  }\n  a2 = r.neg();\n  b2 = x;\n\n  var len1 = a1.sqr().add(b1.sqr());\n  var len2 = a2.sqr().add(b2.sqr());\n  if (len2.cmp(len1) >= 0) {\n    a2 = a0;\n    b2 = b0;\n  }\n\n  // Normalize signs\n  if (a1.negative) {\n    a1 = a1.neg();\n    b1 = b1.neg();\n  }\n  if (a2.negative) {\n    a2 = a2.neg();\n    b2 = b2.neg();\n  }\n\n  return [\n    { a: a1, b: b1 },\n    { a: a2, b: b2 },\n  ];\n};\n\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n  var basis = this.endo.basis;\n  var v1 = basis[0];\n  var v2 = basis[1];\n\n  var c1 = v2.b.mul(k).divRound(this.n);\n  var c2 = v1.b.neg().mul(k).divRound(this.n);\n\n  var p1 = c1.mul(v1.a);\n  var p2 = c2.mul(v2.a);\n  var q1 = c1.mul(v1.b);\n  var q2 = c2.mul(v2.b);\n\n  // Calculate answer\n  var k1 = k.sub(p1).sub(p2);\n  var k2 = q1.add(q2).neg();\n  return { k1: k1, k2: k2 };\n};\n\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  // XXX Is there any way to tell if the number is odd without converting it\n  // to non-red form?\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nShortCurve.prototype.validate = function validate(point) {\n  if (point.inf)\n    return true;\n\n  var x = point.x;\n  var y = point.y;\n\n  var ax = this.a.redMul(x);\n  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n  return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\n\nShortCurve.prototype._endoWnafMulAdd =\n    function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n      var npoints = this._endoWnafT1;\n      var ncoeffs = this._endoWnafT2;\n      for (var i = 0; i < points.length; i++) {\n        var split = this._endoSplit(coeffs[i]);\n        var p = points[i];\n        var beta = p._getBeta();\n\n        if (split.k1.negative) {\n          split.k1.ineg();\n          p = p.neg(true);\n        }\n        if (split.k2.negative) {\n          split.k2.ineg();\n          beta = beta.neg(true);\n        }\n\n        npoints[i * 2] = p;\n        npoints[i * 2 + 1] = beta;\n        ncoeffs[i * 2] = split.k1;\n        ncoeffs[i * 2 + 1] = split.k2;\n      }\n      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n\n      // Clean-up references to points and coefficients\n      for (var j = 0; j < i * 2; j++) {\n        npoints[j] = null;\n        ncoeffs[j] = null;\n      }\n      return res;\n    };\n\nfunction Point(curve, x, y, isRed) {\n  Base.BasePoint.call(this, curve, 'affine');\n  if (x === null && y === null) {\n    this.x = null;\n    this.y = null;\n    this.inf = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    // Force redgomery representation when loading from JSON\n    if (isRed) {\n      this.x.forceRed(this.curve.red);\n      this.y.forceRed(this.curve.red);\n    }\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    this.inf = false;\n  }\n}\ninherits(Point, Base.BasePoint);\n\nShortCurve.prototype.point = function point(x, y, isRed) {\n  return new Point(this, x, y, isRed);\n};\n\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n  return Point.fromJSON(this, obj, red);\n};\n\nPoint.prototype._getBeta = function _getBeta() {\n  if (!this.curve.endo)\n    return;\n\n  var pre = this.precomputed;\n  if (pre && pre.beta)\n    return pre.beta;\n\n  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n  if (pre) {\n    var curve = this.curve;\n    var endoMul = function(p) {\n      return curve.point(p.x.redMul(curve.endo.beta), p.y);\n    };\n    pre.beta = beta;\n    beta.precomputed = {\n      beta: null,\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(endoMul),\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(endoMul),\n      },\n    };\n  }\n  return beta;\n};\n\nPoint.prototype.toJSON = function toJSON() {\n  if (!this.precomputed)\n    return [ this.x, this.y ];\n\n  return [ this.x, this.y, this.precomputed && {\n    doubles: this.precomputed.doubles && {\n      step: this.precomputed.doubles.step,\n      points: this.precomputed.doubles.points.slice(1),\n    },\n    naf: this.precomputed.naf && {\n      wnd: this.precomputed.naf.wnd,\n      points: this.precomputed.naf.points.slice(1),\n    },\n  } ];\n};\n\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n  if (typeof obj === 'string')\n    obj = JSON.parse(obj);\n  var res = curve.point(obj[0], obj[1], red);\n  if (!obj[2])\n    return res;\n\n  function obj2point(obj) {\n    return curve.point(obj[0], obj[1], red);\n  }\n\n  var pre = obj[2];\n  res.precomputed = {\n    beta: null,\n    doubles: pre.doubles && {\n      step: pre.doubles.step,\n      points: [ res ].concat(pre.doubles.points.map(obj2point)),\n    },\n    naf: pre.naf && {\n      wnd: pre.naf.wnd,\n      points: [ res ].concat(pre.naf.points.map(obj2point)),\n    },\n  };\n  return res;\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  return this.inf;\n};\n\nPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.inf)\n    return p;\n\n  // P + O = P\n  if (p.inf)\n    return this;\n\n  // P + P = 2P\n  if (this.eq(p))\n    return this.dbl();\n\n  // P + (-P) = O\n  if (this.neg().eq(p))\n    return this.curve.point(null, null);\n\n  // P + Q = O\n  if (this.x.cmp(p.x) === 0)\n    return this.curve.point(null, null);\n\n  var c = this.y.redSub(p.y);\n  if (c.cmpn(0) !== 0)\n    c = c.redMul(this.x.redSub(p.x).redInvm());\n  var nx = c.redSqr().redISub(this.x).redISub(p.x);\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.inf)\n    return this;\n\n  // 2P = O\n  var ys1 = this.y.redAdd(this.y);\n  if (ys1.cmpn(0) === 0)\n    return this.curve.point(null, null);\n\n  var a = this.curve.a;\n\n  var x2 = this.x.redSqr();\n  var dyinv = ys1.redInvm();\n  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n\n  var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.getX = function getX() {\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  return this.y.fromRed();\n};\n\nPoint.prototype.mul = function mul(k) {\n  k = new BN(k, 16);\n  if (this.isInfinity())\n    return this;\n  else if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else if (this.curve.endo)\n    return this.curve._endoWnafMulAdd([ this ], [ k ]);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs, true);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\n\nPoint.prototype.eq = function eq(p) {\n  return this === p ||\n         this.inf === p.inf &&\n             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\n\nPoint.prototype.neg = function neg(_precompute) {\n  if (this.inf)\n    return this;\n\n  var res = this.curve.point(this.x, this.y.redNeg());\n  if (_precompute && this.precomputed) {\n    var pre = this.precomputed;\n    var negate = function(p) {\n      return p.neg();\n    };\n    res.precomputed = {\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(negate),\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(negate),\n      },\n    };\n  }\n  return res;\n};\n\nPoint.prototype.toJ = function toJ() {\n  if (this.inf)\n    return this.curve.jpoint(null, null, null);\n\n  var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n  return res;\n};\n\nfunction JPoint(curve, x, y, z) {\n  Base.BasePoint.call(this, curve, 'jacobian');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.one;\n    this.y = this.curve.one;\n    this.z = new BN(0);\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = new BN(z, 16);\n  }\n  if (!this.x.red)\n    this.x = this.x.toRed(this.curve.red);\n  if (!this.y.red)\n    this.y = this.y.toRed(this.curve.red);\n  if (!this.z.red)\n    this.z = this.z.toRed(this.curve.red);\n\n  this.zOne = this.z === this.curve.one;\n}\ninherits(JPoint, Base.BasePoint);\n\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n  return new JPoint(this, x, y, z);\n};\n\nJPoint.prototype.toP = function toP() {\n  if (this.isInfinity())\n    return this.curve.point(null, null);\n\n  var zinv = this.z.redInvm();\n  var zinv2 = zinv.redSqr();\n  var ax = this.x.redMul(zinv2);\n  var ay = this.y.redMul(zinv2).redMul(zinv);\n\n  return this.curve.point(ax, ay);\n};\n\nJPoint.prototype.neg = function neg() {\n  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\n\nJPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p;\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 12M + 4S + 7A\n  var pz2 = p.z.redSqr();\n  var z2 = this.z.redSqr();\n  var u1 = this.x.redMul(pz2);\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y.redMul(pz2.redMul(p.z));\n  var s2 = p.y.redMul(z2.redMul(this.z));\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(p.z).redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p.toJ();\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 8M + 3S + 7A\n  var z2 = this.z.redSqr();\n  var u1 = this.x;\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y;\n  var s2 = p.y.redMul(z2).redMul(this.z);\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.dblp = function dblp(pow) {\n  if (pow === 0)\n    return this;\n  if (this.isInfinity())\n    return this;\n  if (!pow)\n    return this.dbl();\n\n  var i;\n  if (this.curve.zeroA || this.curve.threeA) {\n    var r = this;\n    for (i = 0; i < pow; i++)\n      r = r.dbl();\n    return r;\n  }\n\n  // 1M + 2S + 1A + N * (4S + 5M + 8A)\n  // N = 1 => 6M + 6S + 9A\n  var a = this.curve.a;\n  var tinv = this.curve.tinv;\n\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  // Reuse results\n  var jyd = jy.redAdd(jy);\n  for (i = 0; i < pow; i++) {\n    var jx2 = jx.redSqr();\n    var jyd2 = jyd.redSqr();\n    var jyd4 = jyd2.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n    var t1 = jx.redMul(jyd2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var dny = c.redMul(t2);\n    dny = dny.redIAdd(dny).redISub(jyd4);\n    var nz = jyd.redMul(jz);\n    if (i + 1 < pow)\n      jz4 = jz4.redMul(jyd4);\n\n    jx = nx;\n    jz = nz;\n    jyd = dny;\n  }\n\n  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\n\nJPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  if (this.curve.zeroA)\n    return this._zeroDbl();\n  else if (this.curve.threeA)\n    return this._threeDbl();\n  else\n    return this._dbl();\n};\n\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 14A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // T = M ^ 2 - 2*S\n    var t = m.redSqr().redISub(s).redISub(s);\n\n    // 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2*Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-dbl-2009-l\n    // 2M + 5S + 13A\n\n    // A = X1^2\n    var a = this.x.redSqr();\n    // B = Y1^2\n    var b = this.y.redSqr();\n    // C = B^2\n    var c = b.redSqr();\n    // D = 2 * ((X1 + B)^2 - A - C)\n    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n    d = d.redIAdd(d);\n    // E = 3 * A\n    var e = a.redAdd(a).redIAdd(a);\n    // F = E^2\n    var f = e.redSqr();\n\n    // 8 * C\n    var c8 = c.redIAdd(c);\n    c8 = c8.redIAdd(c8);\n    c8 = c8.redIAdd(c8);\n\n    // X3 = F - 2 * D\n    nx = f.redISub(d).redISub(d);\n    // Y3 = E * (D - X3) - 8 * C\n    ny = e.redMul(d.redISub(nx)).redISub(c8);\n    // Z3 = 2 * Y1 * Z1\n    nz = this.y.redMul(this.z);\n    nz = nz.redIAdd(nz);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._threeDbl = function _threeDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 15A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a\n    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n    // T = M^2 - 2 * S\n    var t = m.redSqr().redISub(s).redISub(s);\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2 * Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n    // 3M + 5S\n\n    // delta = Z1^2\n    var delta = this.z.redSqr();\n    // gamma = Y1^2\n    var gamma = this.y.redSqr();\n    // beta = X1 * gamma\n    var beta = this.x.redMul(gamma);\n    // alpha = 3 * (X1 - delta) * (X1 + delta)\n    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n    alpha = alpha.redAdd(alpha).redIAdd(alpha);\n    // X3 = alpha^2 - 8 * beta\n    var beta4 = beta.redIAdd(beta);\n    beta4 = beta4.redIAdd(beta4);\n    var beta8 = beta4.redAdd(beta4);\n    nx = alpha.redSqr().redISub(beta8);\n    // Z3 = (Y1 + Z1)^2 - gamma - delta\n    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n    var ggamma8 = gamma.redSqr();\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._dbl = function _dbl() {\n  var a = this.curve.a;\n\n  // 4M + 6S + 10A\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  var jx2 = jx.redSqr();\n  var jy2 = jy.redSqr();\n\n  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n  var jxd4 = jx.redAdd(jx);\n  jxd4 = jxd4.redIAdd(jxd4);\n  var t1 = jxd4.redMul(jy2);\n  var nx = c.redSqr().redISub(t1.redAdd(t1));\n  var t2 = t1.redISub(nx);\n\n  var jyd8 = jy2.redSqr();\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  var ny = c.redMul(t2).redISub(jyd8);\n  var nz = jy.redAdd(jy).redMul(jz);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.trpl = function trpl() {\n  if (!this.curve.zeroA)\n    return this.dbl().add(this);\n\n  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n  // 5M + 10S + ...\n\n  // XX = X1^2\n  var xx = this.x.redSqr();\n  // YY = Y1^2\n  var yy = this.y.redSqr();\n  // ZZ = Z1^2\n  var zz = this.z.redSqr();\n  // YYYY = YY^2\n  var yyyy = yy.redSqr();\n  // M = 3 * XX + a * ZZ2; a = 0\n  var m = xx.redAdd(xx).redIAdd(xx);\n  // MM = M^2\n  var mm = m.redSqr();\n  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n  e = e.redIAdd(e);\n  e = e.redAdd(e).redIAdd(e);\n  e = e.redISub(mm);\n  // EE = E^2\n  var ee = e.redSqr();\n  // T = 16*YYYY\n  var t = yyyy.redIAdd(yyyy);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  // U = (M + E)^2 - MM - EE - T\n  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n  // X3 = 4 * (X1 * EE - 4 * YY * U)\n  var yyu4 = yy.redMul(u);\n  yyu4 = yyu4.redIAdd(yyu4);\n  yyu4 = yyu4.redIAdd(yyu4);\n  var nx = this.x.redMul(ee).redISub(yyu4);\n  nx = nx.redIAdd(nx);\n  nx = nx.redIAdd(nx);\n  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  // Z3 = (Z1 + E)^2 - ZZ - EE\n  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mul = function mul(k, kbase) {\n  k = new BN(k, kbase);\n\n  return this.curve._wnafMul(this, k);\n};\n\nJPoint.prototype.eq = function eq(p) {\n  if (p.type === 'affine')\n    return this.eq(p.toJ());\n\n  if (this === p)\n    return true;\n\n  // x1 * z2^2 == x2 * z1^2\n  var z2 = this.z.redSqr();\n  var pz2 = p.z.redSqr();\n  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n    return false;\n\n  // y1 * z2^3 == y2 * z1^3\n  var z3 = z2.redMul(this.z);\n  var pz3 = pz2.redMul(p.z);\n  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\n\nJPoint.prototype.eqXToP = function eqXToP(x) {\n  var zs = this.z.redSqr();\n  var rx = x.toRed(this.curve.red).redMul(zs);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(zs);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\nJPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC JPoint Infinity>';\n  return '<EC JPoint x: ' + this.x.toString(16, 2) +\n      ' y: ' + this.y.toString(16, 2) +\n      ' z: ' + this.z.toString(16, 2) + '>';\n};\n\nJPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n","'use strict';\n\nvar curves = exports;\n\nvar hash = require('hash.js');\nvar curve = require('./curve');\nvar utils = require('./utils');\n\nvar assert = utils.assert;\n\nfunction PresetCurve(options) {\n  if (options.type === 'short')\n    this.curve = new curve.short(options);\n  else if (options.type === 'edwards')\n    this.curve = new curve.edwards(options);\n  else\n    this.curve = new curve.mont(options);\n  this.g = this.curve.g;\n  this.n = this.curve.n;\n  this.hash = options.hash;\n\n  assert(this.g.validate(), 'Invalid curve');\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n}\ncurves.PresetCurve = PresetCurve;\n\nfunction defineCurve(name, options) {\n  Object.defineProperty(curves, name, {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n      var curve = new PresetCurve(options);\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        value: curve,\n      });\n      return curve;\n    },\n  });\n}\n\ndefineCurve('p192', {\n  type: 'short',\n  prime: 'p192',\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',\n  ],\n});\n\ndefineCurve('p224', {\n  type: 'short',\n  prime: 'p224',\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',\n  ],\n});\n\ndefineCurve('p256', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',\n  ],\n});\n\ndefineCurve('p384', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 ffffffff',\n  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 fffffffc',\n  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +\n     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +\n     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n  hash: hash.sha384,\n  gRed: false,\n  g: [\n    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +\n    '5502f25d bf55296c 3a545e38 72760ab7',\n    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +\n    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',\n  ],\n});\n\ndefineCurve('p521', {\n  type: 'short',\n  prime: null,\n  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff',\n  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff fffffffc',\n  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +\n     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +\n     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +\n     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n  hash: hash.sha512,\n  gRed: false,\n  g: [\n    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +\n    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +\n    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',\n    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +\n    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +\n    '3fad0761 353c7086 a272c240 88be9476 9fd16650',\n  ],\n});\n\ndefineCurve('curve25519', {\n  type: 'mont',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '76d06',\n  b: '1',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '9',\n  ],\n});\n\ndefineCurve('ed25519', {\n  type: 'edwards',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '-1',\n  c: '1',\n  // -121665 * (121666^(-1)) (mod P)\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\n\n    // 4/5\n    '6666666666666666666666666666666666666666666666666666666666666658',\n  ],\n});\n\nvar pre;\ntry {\n  pre = require('./precomputed/secp256k1');\n} catch (e) {\n  pre = undefined;\n}\n\ndefineCurve('secp256k1', {\n  type: 'short',\n  prime: 'k256',\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n  a: '0',\n  b: '7',\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n  h: '1',\n  hash: hash.sha256,\n\n  // Precomputed endomorphism\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n  basis: [\n    {\n      a: '3086d221a7d46bcde86c90e49284eb15',\n      b: '-e4437ed6010e88286f547fa90abfe4c3',\n    },\n    {\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n      b: '3086d221a7d46bcde86c90e49284eb15',\n    },\n  ],\n\n  gRed: false,\n  g: [\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n    pre,\n  ],\n});\n","'use strict';\n\nvar BN = require('bn.js');\nvar HmacDRBG = require('hmac-drbg');\nvar utils = require('../utils');\nvar curves = require('../curves');\nvar rand = require('brorand');\nvar assert = utils.assert;\n\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EC(options) {\n  if (!(this instanceof EC))\n    return new EC(options);\n\n  // Shortcut `elliptic.ec(curve-name)`\n  if (typeof options === 'string') {\n    assert(Object.prototype.hasOwnProperty.call(curves, options),\n      'Unknown curve ' + options);\n\n    options = curves[options];\n  }\n\n  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n  if (options instanceof curves.PresetCurve)\n    options = { curve: options };\n\n  this.curve = options.curve.curve;\n  this.n = this.curve.n;\n  this.nh = this.n.ushrn(1);\n  this.g = this.curve.g;\n\n  // Point on curve\n  this.g = options.curve.g;\n  this.g.precompute(options.curve.n.bitLength() + 1);\n\n  // Hash for function for DRBG\n  this.hash = options.hash || options.curve.hash;\n}\nmodule.exports = EC;\n\nEC.prototype.keyPair = function keyPair(options) {\n  return new KeyPair(this, options);\n};\n\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n  return KeyPair.fromPrivate(this, priv, enc);\n};\n\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n  return KeyPair.fromPublic(this, pub, enc);\n};\n\nEC.prototype.genKeyPair = function genKeyPair(options) {\n  if (!options)\n    options = {};\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n    entropy: options.entropy || rand(this.hash.hmacStrength),\n    entropyEnc: options.entropy && options.entropyEnc || 'utf8',\n    nonce: this.n.toArray(),\n  });\n\n  var bytes = this.n.byteLength();\n  var ns2 = this.n.sub(new BN(2));\n  for (;;) {\n    var priv = new BN(drbg.generate(bytes));\n    if (priv.cmp(ns2) > 0)\n      continue;\n\n    priv.iaddn(1);\n    return this.keyFromPrivate(priv);\n  }\n};\n\nEC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {\n  var delta = msg.byteLength() * 8 - this.n.bitLength();\n  if (delta > 0)\n    msg = msg.ushrn(delta);\n  if (!truncOnly && msg.cmp(this.n) >= 0)\n    return msg.sub(this.n);\n  else\n    return msg;\n};\n\nEC.prototype.sign = function sign(msg, key, enc, options) {\n  if (typeof enc === 'object') {\n    options = enc;\n    enc = null;\n  }\n  if (!options)\n    options = {};\n\n  key = this.keyFromPrivate(key, enc);\n  msg = this._truncateToN(new BN(msg, 16));\n\n  // Zero-extend key to provide enough entropy\n  var bytes = this.n.byteLength();\n  var bkey = key.getPrivate().toArray('be', bytes);\n\n  // Zero-extend nonce to have the same byte size as N\n  var nonce = msg.toArray('be', bytes);\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    entropy: bkey,\n    nonce: nonce,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n  });\n\n  // Number of bytes to generate\n  var ns1 = this.n.sub(new BN(1));\n\n  for (var iter = 0; ; iter++) {\n    var k = options.k ?\n      options.k(iter) :\n      new BN(drbg.generate(this.n.byteLength()));\n    k = this._truncateToN(k, true);\n    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n      continue;\n\n    var kp = this.g.mul(k);\n    if (kp.isInfinity())\n      continue;\n\n    var kpX = kp.getX();\n    var r = kpX.umod(this.n);\n    if (r.cmpn(0) === 0)\n      continue;\n\n    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n    s = s.umod(this.n);\n    if (s.cmpn(0) === 0)\n      continue;\n\n    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |\n                        (kpX.cmp(r) !== 0 ? 2 : 0);\n\n    // Use complement of `s`, if it is > `n / 2`\n    if (options.canonical && s.cmp(this.nh) > 0) {\n      s = this.n.sub(s);\n      recoveryParam ^= 1;\n    }\n\n    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });\n  }\n};\n\nEC.prototype.verify = function verify(msg, signature, key, enc) {\n  msg = this._truncateToN(new BN(msg, 16));\n  key = this.keyFromPublic(key, enc);\n  signature = new Signature(signature, 'hex');\n\n  // Perform primitive values validation\n  var r = signature.r;\n  var s = signature.s;\n  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n    return false;\n  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n    return false;\n\n  // Validate signature\n  var sinv = s.invm(this.n);\n  var u1 = sinv.mul(msg).umod(this.n);\n  var u2 = sinv.mul(r).umod(this.n);\n  var p;\n\n  if (!this.curve._maxwellTrick) {\n    p = this.g.mulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity())\n      return false;\n\n    return p.getX().umod(this.n).cmp(r) === 0;\n  }\n\n  // NOTE: Greg Maxwell's trick, inspired by:\n  // https://git.io/vad3K\n\n  p = this.g.jmulAdd(u1, key.getPublic(), u2);\n  if (p.isInfinity())\n    return false;\n\n  // Compare `p.x` of Jacobian point with `r`,\n  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n  // inverse of `p.z^2`\n  return p.eqXToP(r);\n};\n\nEC.prototype.recoverPubKey = function(msg, signature, j, enc) {\n  assert((3 & j) === j, 'The recovery param is more than two bits');\n  signature = new Signature(signature, enc);\n\n  var n = this.n;\n  var e = new BN(msg);\n  var r = signature.r;\n  var s = signature.s;\n\n  // A set LSB signifies that the y-coordinate is odd\n  var isYOdd = j & 1;\n  var isSecondKey = j >> 1;\n  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n    throw new Error('Unable to find sencond key candinate');\n\n  // 1.1. Let x = r + jn.\n  if (isSecondKey)\n    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n  else\n    r = this.curve.pointFromX(r, isYOdd);\n\n  var rInv = signature.r.invm(n);\n  var s1 = n.sub(e).mul(rInv).umod(n);\n  var s2 = s.mul(rInv).umod(n);\n\n  // 1.6.1 Compute Q = r^-1 (sR -  eG)\n  //               Q = r^-1 (sR + -eG)\n  return this.g.mulAdd(s1, r, s2);\n};\n\nEC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\n  signature = new Signature(signature, enc);\n  if (signature.recoveryParam !== null)\n    return signature.recoveryParam;\n\n  for (var i = 0; i < 4; i++) {\n    var Qprime;\n    try {\n      Qprime = this.recoverPubKey(e, signature, i);\n    } catch (e) {\n      continue;\n    }\n\n    if (Qprime.eq(Q))\n      return i;\n  }\n  throw new Error('Unable to find valid recovery factor');\n};\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction KeyPair(ec, options) {\n  this.ec = ec;\n  this.priv = null;\n  this.pub = null;\n\n  // KeyPair(ec, { priv: ..., pub: ... })\n  if (options.priv)\n    this._importPrivate(options.priv, options.privEnc);\n  if (options.pub)\n    this._importPublic(options.pub, options.pubEnc);\n}\nmodule.exports = KeyPair;\n\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n  if (pub instanceof KeyPair)\n    return pub;\n\n  return new KeyPair(ec, {\n    pub: pub,\n    pubEnc: enc,\n  });\n};\n\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n  if (priv instanceof KeyPair)\n    return priv;\n\n  return new KeyPair(ec, {\n    priv: priv,\n    privEnc: enc,\n  });\n};\n\nKeyPair.prototype.validate = function validate() {\n  var pub = this.getPublic();\n\n  if (pub.isInfinity())\n    return { result: false, reason: 'Invalid public key' };\n  if (!pub.validate())\n    return { result: false, reason: 'Public key is not a point' };\n  if (!pub.mul(this.ec.curve.n).isInfinity())\n    return { result: false, reason: 'Public key * N != O' };\n\n  return { result: true, reason: null };\n};\n\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n  // compact is optional argument\n  if (typeof compact === 'string') {\n    enc = compact;\n    compact = null;\n  }\n\n  if (!this.pub)\n    this.pub = this.ec.g.mul(this.priv);\n\n  if (!enc)\n    return this.pub;\n\n  return this.pub.encode(enc, compact);\n};\n\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n  if (enc === 'hex')\n    return this.priv.toString(16, 2);\n  else\n    return this.priv;\n};\n\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n  this.priv = new BN(key, enc || 16);\n\n  // Ensure that the priv won't be bigger than n, otherwise we may fail\n  // in fixed multiplication method\n  this.priv = this.priv.umod(this.ec.curve.n);\n};\n\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n  if (key.x || key.y) {\n    // Montgomery points only have an `x` coordinate.\n    // Weierstrass/Edwards points on the other hand have both `x` and\n    // `y` coordinates.\n    if (this.ec.curve.type === 'mont') {\n      assert(key.x, 'Need x coordinate');\n    } else if (this.ec.curve.type === 'short' ||\n               this.ec.curve.type === 'edwards') {\n      assert(key.x && key.y, 'Need both x and y coordinate');\n    }\n    this.pub = this.ec.curve.point(key.x, key.y);\n    return;\n  }\n  this.pub = this.ec.curve.decodePoint(key, enc);\n};\n\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n  if(!pub.validate()) {\n    assert(pub.validate(), 'public point not validated');\n  }\n  return pub.mul(this.priv).getX();\n};\n\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n  return this.ec.sign(msg, this, enc, options);\n};\n\nKeyPair.prototype.verify = function verify(msg, signature) {\n  return this.ec.verify(msg, signature, this);\n};\n\nKeyPair.prototype.inspect = function inspect() {\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n};\n","'use strict';\n\nvar BN = require('bn.js');\n\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction Signature(options, enc) {\n  if (options instanceof Signature)\n    return options;\n\n  if (this._importDER(options, enc))\n    return;\n\n  assert(options.r && options.s, 'Signature without r or s');\n  this.r = new BN(options.r, 16);\n  this.s = new BN(options.s, 16);\n  if (options.recoveryParam === undefined)\n    this.recoveryParam = null;\n  else\n    this.recoveryParam = options.recoveryParam;\n}\nmodule.exports = Signature;\n\nfunction Position() {\n  this.place = 0;\n}\n\nfunction getLength(buf, p) {\n  var initial = buf[p.place++];\n  if (!(initial & 0x80)) {\n    return initial;\n  }\n  var octetLen = initial & 0xf;\n\n  // Indefinite length or overflow\n  if (octetLen === 0 || octetLen > 4) {\n    return false;\n  }\n\n  var val = 0;\n  for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n    val <<= 8;\n    val |= buf[off];\n    val >>>= 0;\n  }\n\n  // Leading zeroes\n  if (val <= 0x7f) {\n    return false;\n  }\n\n  p.place = off;\n  return val;\n}\n\nfunction rmPadding(buf) {\n  var i = 0;\n  var len = buf.length - 1;\n  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n    i++;\n  }\n  if (i === 0) {\n    return buf;\n  }\n  return buf.slice(i);\n}\n\nSignature.prototype._importDER = function _importDER(data, enc) {\n  data = utils.toArray(data, enc);\n  var p = new Position();\n  if (data[p.place++] !== 0x30) {\n    return false;\n  }\n  var len = getLength(data, p);\n  if (len === false) {\n    return false;\n  }\n  if ((len + p.place) !== data.length) {\n    return false;\n  }\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var rlen = getLength(data, p);\n  if (rlen === false) {\n    return false;\n  }\n  var r = data.slice(p.place, rlen + p.place);\n  p.place += rlen;\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var slen = getLength(data, p);\n  if (slen === false) {\n    return false;\n  }\n  if (data.length !== slen + p.place) {\n    return false;\n  }\n  var s = data.slice(p.place, slen + p.place);\n  if (r[0] === 0) {\n    if (r[1] & 0x80) {\n      r = r.slice(1);\n    } else {\n      // Leading zeroes\n      return false;\n    }\n  }\n  if (s[0] === 0) {\n    if (s[1] & 0x80) {\n      s = s.slice(1);\n    } else {\n      // Leading zeroes\n      return false;\n    }\n  }\n\n  this.r = new BN(r);\n  this.s = new BN(s);\n  this.recoveryParam = null;\n\n  return true;\n};\n\nfunction constructLength(arr, len) {\n  if (len < 0x80) {\n    arr.push(len);\n    return;\n  }\n  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n  arr.push(octets | 0x80);\n  while (--octets) {\n    arr.push((len >>> (octets << 3)) & 0xff);\n  }\n  arr.push(len);\n}\n\nSignature.prototype.toDER = function toDER(enc) {\n  var r = this.r.toArray();\n  var s = this.s.toArray();\n\n  // Pad values\n  if (r[0] & 0x80)\n    r = [ 0 ].concat(r);\n  // Pad values\n  if (s[0] & 0x80)\n    s = [ 0 ].concat(s);\n\n  r = rmPadding(r);\n  s = rmPadding(s);\n\n  while (!s[0] && !(s[1] & 0x80)) {\n    s = s.slice(1);\n  }\n  var arr = [ 0x02 ];\n  constructLength(arr, r.length);\n  arr = arr.concat(r);\n  arr.push(0x02);\n  constructLength(arr, s.length);\n  var backHalf = arr.concat(s);\n  var res = [ 0x30 ];\n  constructLength(res, backHalf.length);\n  res = res.concat(backHalf);\n  return utils.encode(res, enc);\n};\n","'use strict';\n\nvar hash = require('hash.js');\nvar curves = require('../curves');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EDDSA(curve) {\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\n\n  if (!(this instanceof EDDSA))\n    return new EDDSA(curve);\n\n  curve = curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = hash.sha512;\n}\n\nmodule.exports = EDDSA;\n\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\nEDDSA.prototype.sign = function sign(message, secret) {\n  message = parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\n    .mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\n};\n\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\nEDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = parseBytes(message);\n  sig = this.makeSignature(sig);\n  if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {\n    return false;\n  }\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\nEDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n  for (var i = 0; i < arguments.length; i++)\n    hash.update(arguments[i]);\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return KeyPair.fromPublic(this, pub);\n};\n\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return KeyPair.fromSecret(this, secret);\n};\n\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof Signature)\n    return sig;\n  return new Signature(this, sig);\n};\n\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\nEDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = utils.parseBytes(bytes);\n\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n\n  var y = utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return utils.intFromLE(bytes);\n};\n\nEDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n\n/**\n* @param {EDDSA} eddsa - instance\n* @param {Object} params - public/private key parameters\n*\n* @param {Array<Byte>} [params.secret] - secret seed bytes\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n*\n*/\nfunction KeyPair(eddsa, params) {\n  this.eddsa = eddsa;\n  this._secret = parseBytes(params.secret);\n  if (eddsa.isPoint(params.pub))\n    this._pub = params.pub;\n  else\n    this._pubBytes = parseBytes(params.pub);\n}\n\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n  if (pub instanceof KeyPair)\n    return pub;\n  return new KeyPair(eddsa, { pub: pub });\n};\n\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n  if (secret instanceof KeyPair)\n    return secret;\n  return new KeyPair(eddsa, { secret: secret });\n};\n\nKeyPair.prototype.secret = function secret() {\n  return this._secret;\n};\n\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\n  return this.eddsa.encodePoint(this.pub());\n});\n\ncachedProperty(KeyPair, 'pub', function pub() {\n  if (this._pubBytes)\n    return this.eddsa.decodePoint(this._pubBytes);\n  return this.eddsa.g.mul(this.priv());\n});\n\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\n  var eddsa = this.eddsa;\n  var hash = this.hash();\n  var lastIx = eddsa.encodingLength - 1;\n\n  var a = hash.slice(0, eddsa.encodingLength);\n  a[0] &= 248;\n  a[lastIx] &= 127;\n  a[lastIx] |= 64;\n\n  return a;\n});\n\ncachedProperty(KeyPair, 'priv', function priv() {\n  return this.eddsa.decodeInt(this.privBytes());\n});\n\ncachedProperty(KeyPair, 'hash', function hash() {\n  return this.eddsa.hash().update(this.secret()).digest();\n});\n\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\n  return this.hash().slice(this.eddsa.encodingLength);\n});\n\nKeyPair.prototype.sign = function sign(message) {\n  assert(this._secret, 'KeyPair can only verify');\n  return this.eddsa.sign(message, this);\n};\n\nKeyPair.prototype.verify = function verify(message, sig) {\n  return this.eddsa.verify(message, sig, this);\n};\n\nKeyPair.prototype.getSecret = function getSecret(enc) {\n  assert(this._secret, 'KeyPair is public only');\n  return utils.encode(this.secret(), enc);\n};\n\nKeyPair.prototype.getPublic = function getPublic(enc) {\n  return utils.encode(this.pubBytes(), enc);\n};\n\nmodule.exports = KeyPair;\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/\nfunction Signature(eddsa, sig) {\n  this.eddsa = eddsa;\n\n  if (typeof sig !== 'object')\n    sig = parseBytes(sig);\n\n  if (Array.isArray(sig)) {\n    sig = {\n      R: sig.slice(0, eddsa.encodingLength),\n      S: sig.slice(eddsa.encodingLength),\n    };\n  }\n\n  assert(sig.R && sig.S, 'Signature without R or S');\n\n  if (eddsa.isPoint(sig.R))\n    this._R = sig.R;\n  if (sig.S instanceof BN)\n    this._S = sig.S;\n\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\n\ncachedProperty(Signature, 'S', function S() {\n  return this.eddsa.decodeInt(this.Sencoded());\n});\n\ncachedProperty(Signature, 'R', function R() {\n  return this.eddsa.decodePoint(this.Rencoded());\n});\n\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\n  return this.eddsa.encodePoint(this.R());\n});\n\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\n  return this.eddsa.encodeInt(this.S());\n});\n\nSignature.prototype.toBytes = function toBytes() {\n  return this.Rencoded().concat(this.Sencoded());\n};\n\nSignature.prototype.toHex = function toHex() {\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\n};\n\nmodule.exports = Signature;\n","module.exports = {\n  doubles: {\n    step: 4,\n    points: [\n      [\n        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',\n        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',\n      ],\n      [\n        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',\n        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',\n      ],\n      [\n        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',\n        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',\n      ],\n      [\n        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',\n        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',\n      ],\n      [\n        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',\n        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',\n      ],\n      [\n        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',\n        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',\n      ],\n      [\n        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',\n        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',\n      ],\n      [\n        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',\n        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',\n      ],\n      [\n        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',\n        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',\n      ],\n      [\n        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',\n        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',\n      ],\n      [\n        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',\n        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',\n      ],\n      [\n        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',\n        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',\n      ],\n      [\n        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',\n        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',\n      ],\n      [\n        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',\n        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',\n      ],\n      [\n        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',\n        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',\n      ],\n      [\n        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',\n        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',\n      ],\n      [\n        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',\n        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',\n      ],\n      [\n        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',\n        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',\n      ],\n      [\n        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',\n        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',\n      ],\n      [\n        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',\n        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',\n      ],\n      [\n        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',\n        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',\n      ],\n      [\n        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',\n        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',\n      ],\n      [\n        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',\n        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',\n      ],\n      [\n        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',\n        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',\n      ],\n      [\n        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',\n        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',\n      ],\n      [\n        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',\n        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',\n      ],\n      [\n        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',\n        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',\n      ],\n      [\n        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',\n        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',\n      ],\n      [\n        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',\n        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',\n      ],\n      [\n        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',\n        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',\n      ],\n      [\n        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',\n        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',\n      ],\n      [\n        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',\n        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',\n      ],\n      [\n        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',\n        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',\n      ],\n      [\n        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',\n        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',\n      ],\n      [\n        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',\n        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',\n      ],\n      [\n        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',\n        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',\n      ],\n      [\n        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',\n        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',\n      ],\n      [\n        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',\n        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',\n      ],\n      [\n        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',\n        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',\n      ],\n      [\n        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',\n        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',\n      ],\n      [\n        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',\n        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',\n      ],\n      [\n        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',\n        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',\n      ],\n      [\n        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',\n        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',\n      ],\n      [\n        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',\n        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',\n      ],\n      [\n        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',\n        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',\n      ],\n      [\n        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',\n        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',\n      ],\n      [\n        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',\n        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',\n      ],\n      [\n        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',\n        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',\n      ],\n      [\n        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',\n        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',\n      ],\n      [\n        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',\n        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',\n      ],\n      [\n        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',\n        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',\n      ],\n      [\n        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',\n        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',\n      ],\n      [\n        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',\n        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',\n      ],\n      [\n        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',\n        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',\n      ],\n      [\n        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',\n        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',\n      ],\n      [\n        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',\n        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',\n      ],\n      [\n        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',\n        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',\n      ],\n      [\n        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',\n        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',\n      ],\n      [\n        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',\n        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',\n      ],\n      [\n        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',\n        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',\n      ],\n      [\n        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',\n        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',\n      ],\n      [\n        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',\n        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',\n      ],\n      [\n        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',\n        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',\n      ],\n      [\n        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',\n        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',\n      ],\n      [\n        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',\n        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',\n      ],\n    ],\n  },\n  naf: {\n    wnd: 7,\n    points: [\n      [\n        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',\n        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',\n      ],\n      [\n        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',\n        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',\n      ],\n      [\n        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',\n        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',\n      ],\n      [\n        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',\n        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',\n      ],\n      [\n        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',\n        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',\n      ],\n      [\n        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',\n        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',\n      ],\n      [\n        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',\n        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',\n      ],\n      [\n        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',\n        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',\n      ],\n      [\n        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',\n        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',\n      ],\n      [\n        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',\n        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',\n      ],\n      [\n        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',\n        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',\n      ],\n      [\n        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',\n        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',\n      ],\n      [\n        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',\n        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',\n      ],\n      [\n        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',\n        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',\n      ],\n      [\n        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',\n        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',\n      ],\n      [\n        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',\n        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',\n      ],\n      [\n        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',\n        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',\n      ],\n      [\n        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',\n        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',\n      ],\n      [\n        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',\n        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',\n      ],\n      [\n        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',\n        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',\n      ],\n      [\n        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',\n        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',\n      ],\n      [\n        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',\n        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',\n      ],\n      [\n        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',\n        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',\n      ],\n      [\n        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',\n        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',\n      ],\n      [\n        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',\n        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',\n      ],\n      [\n        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',\n        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',\n      ],\n      [\n        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',\n        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',\n      ],\n      [\n        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',\n        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',\n      ],\n      [\n        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',\n        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',\n      ],\n      [\n        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',\n        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',\n      ],\n      [\n        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',\n        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',\n      ],\n      [\n        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',\n        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',\n      ],\n      [\n        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',\n        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',\n      ],\n      [\n        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',\n        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',\n      ],\n      [\n        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',\n        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',\n      ],\n      [\n        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',\n        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',\n      ],\n      [\n        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',\n        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',\n      ],\n      [\n        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',\n        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',\n      ],\n      [\n        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',\n        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',\n      ],\n      [\n        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',\n        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',\n      ],\n      [\n        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',\n        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',\n      ],\n      [\n        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',\n        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',\n      ],\n      [\n        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',\n        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',\n      ],\n      [\n        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',\n        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',\n      ],\n      [\n        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',\n        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',\n      ],\n      [\n        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',\n        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',\n      ],\n      [\n        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',\n        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',\n      ],\n      [\n        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',\n        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',\n      ],\n      [\n        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',\n        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',\n      ],\n      [\n        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',\n        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',\n      ],\n      [\n        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',\n        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',\n      ],\n      [\n        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',\n        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',\n      ],\n      [\n        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',\n        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',\n      ],\n      [\n        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',\n        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',\n      ],\n      [\n        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',\n        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',\n      ],\n      [\n        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',\n        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',\n      ],\n      [\n        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',\n        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',\n      ],\n      [\n        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',\n        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',\n      ],\n      [\n        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',\n        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',\n      ],\n      [\n        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',\n        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',\n      ],\n      [\n        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',\n        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',\n      ],\n      [\n        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',\n        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',\n      ],\n      [\n        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',\n        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',\n      ],\n      [\n        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',\n        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',\n      ],\n      [\n        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',\n        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',\n      ],\n      [\n        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',\n        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',\n      ],\n      [\n        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',\n        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',\n      ],\n      [\n        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',\n        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',\n      ],\n      [\n        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',\n        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',\n      ],\n      [\n        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',\n        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',\n      ],\n      [\n        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',\n        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',\n      ],\n      [\n        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',\n        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',\n      ],\n      [\n        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',\n        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',\n      ],\n      [\n        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',\n        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',\n      ],\n      [\n        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',\n        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',\n      ],\n      [\n        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',\n        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',\n      ],\n      [\n        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',\n        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',\n      ],\n      [\n        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',\n        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',\n      ],\n      [\n        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',\n        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',\n      ],\n      [\n        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',\n        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',\n      ],\n      [\n        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',\n        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',\n      ],\n      [\n        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',\n        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',\n      ],\n      [\n        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',\n        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',\n      ],\n      [\n        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',\n        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',\n      ],\n      [\n        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',\n        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',\n      ],\n      [\n        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',\n        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',\n      ],\n      [\n        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',\n        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',\n      ],\n      [\n        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',\n        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',\n      ],\n      [\n        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',\n        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',\n      ],\n      [\n        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',\n        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',\n      ],\n      [\n        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',\n        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',\n      ],\n      [\n        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',\n        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',\n      ],\n      [\n        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',\n        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',\n      ],\n      [\n        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',\n        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',\n      ],\n      [\n        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',\n        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',\n      ],\n      [\n        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',\n        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',\n      ],\n      [\n        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',\n        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',\n      ],\n      [\n        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',\n        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',\n      ],\n      [\n        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',\n        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',\n      ],\n      [\n        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',\n        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',\n      ],\n      [\n        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',\n        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',\n      ],\n      [\n        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',\n        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',\n      ],\n      [\n        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',\n        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',\n      ],\n      [\n        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',\n        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',\n      ],\n      [\n        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',\n        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',\n      ],\n      [\n        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',\n        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',\n      ],\n      [\n        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',\n        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',\n      ],\n      [\n        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',\n        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',\n      ],\n      [\n        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',\n        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',\n      ],\n      [\n        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',\n        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',\n      ],\n      [\n        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',\n        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',\n      ],\n      [\n        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',\n        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',\n      ],\n      [\n        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',\n        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',\n      ],\n      [\n        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',\n        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',\n      ],\n      [\n        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',\n        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',\n      ],\n      [\n        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',\n        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',\n      ],\n      [\n        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',\n        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',\n      ],\n      [\n        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',\n        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',\n      ],\n      [\n        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',\n        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',\n      ],\n      [\n        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',\n        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',\n      ],\n      [\n        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',\n        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',\n      ],\n      [\n        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',\n        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',\n      ],\n      [\n        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',\n        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',\n      ],\n      [\n        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',\n        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',\n      ],\n      [\n        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',\n        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',\n      ],\n      [\n        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',\n        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',\n      ],\n      [\n        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',\n        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',\n      ],\n    ],\n  },\n};\n","'use strict';\n\nvar utils = exports;\nvar BN = require('bn.js');\nvar minAssert = require('minimalistic-assert');\nvar minUtils = require('minimalistic-crypto-utils');\n\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n  var i;\n  for (i = 0; i < naf.length; i += 1) {\n    naf[i] = 0;\n  }\n\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n\n  for (i = 0; i < naf.length; i++) {\n    var z;\n    var mod = k.andln(ws - 1);\n    if (k.isOdd()) {\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n\n    naf[i] = z;\n    k.iushrn(1);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    [],\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  var m8;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n      this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n    bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new BN(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n\n","module.exports={\n  \"name\": \"elliptic\",\n  \"version\": \"6.5.6\",\n  \"description\": \"EC cryptography\",\n  \"main\": \"lib/elliptic.js\",\n  \"files\": [\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"lint\": \"eslint lib test\",\n    \"lint:fix\": \"npm run lint -- --fix\",\n    \"unit\": \"istanbul test _mocha --reporter=spec test/index.js\",\n    \"test\": \"npm run lint && npm run unit\",\n    \"version\": \"grunt dist && git add dist/\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git@github.com:indutny/elliptic\"\n  },\n  \"keywords\": [\n    \"EC\",\n    \"Elliptic\",\n    \"curve\",\n    \"Cryptography\"\n  ],\n  \"author\": \"Fedor Indutny <fedor@indutny.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/indutny/elliptic/issues\"\n  },\n  \"homepage\": \"https://github.com/indutny/elliptic\",\n  \"devDependencies\": {\n    \"brfs\": \"^2.0.2\",\n    \"coveralls\": \"^3.1.0\",\n    \"eslint\": \"^7.6.0\",\n    \"grunt\": \"^1.2.1\",\n    \"grunt-browserify\": \"^5.3.0\",\n    \"grunt-cli\": \"^1.3.2\",\n    \"grunt-contrib-connect\": \"^3.0.0\",\n    \"grunt-contrib-copy\": \"^1.0.0\",\n    \"grunt-contrib-uglify\": \"^5.0.0\",\n    \"grunt-mocha-istanbul\": \"^5.0.2\",\n    \"grunt-saucelabs\": \"^9.0.1\",\n    \"istanbul\": \"^0.4.5\",\n    \"mocha\": \"^8.0.1\"\n  },\n  \"dependencies\": {\n    \"bn.js\": \"^4.11.9\",\n    \"brorand\": \"^1.1.0\",\n    \"hash.js\": \"^1.0.0\",\n    \"hmac-drbg\": \"^1.0.1\",\n    \"inherits\": \"^2.0.4\",\n    \"minimalistic-assert\": \"^1.0.1\",\n    \"minimalistic-crypto-utils\": \"^1.0.1\"\n  }\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"NIL\", {\n  enumerable: true,\n  get: function () {\n    return _nil.default;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return _parse.default;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return _stringify.default;\n  }\n});\nObject.defineProperty(exports, \"v1\", {\n  enumerable: true,\n  get: function () {\n    return _v.default;\n  }\n});\nObject.defineProperty(exports, \"v3\", {\n  enumerable: true,\n  get: function () {\n    return _v2.default;\n  }\n});\nObject.defineProperty(exports, \"v4\", {\n  enumerable: true,\n  get: function () {\n    return _v3.default;\n  }\n});\nObject.defineProperty(exports, \"v5\", {\n  enumerable: true,\n  get: function () {\n    return _v4.default;\n  }\n});\nObject.defineProperty(exports, \"validate\", {\n  enumerable: true,\n  get: function () {\n    return _validate.default;\n  }\n});\nObject.defineProperty(exports, \"version\", {\n  enumerable: true,\n  get: function () {\n    return _version.default;\n  }\n});\n\nvar _v = _interopRequireDefault(require(\"./v1.js\"));\n\nvar _v2 = _interopRequireDefault(require(\"./v3.js\"));\n\nvar _v3 = _interopRequireDefault(require(\"./v4.js\"));\n\nvar _v4 = _interopRequireDefault(require(\"./v5.js\"));\n\nvar _nil = _interopRequireDefault(require(\"./nil.js\"));\n\nvar _version = _interopRequireDefault(require(\"./version.js\"));\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nvar _stringify = _interopRequireDefault(require(\"./stringify.js\"));\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","import { v4 as uuidv4 } from 'uuid';\nimport { CHAIN_IDS } from '../../../shared/constants/network';\n\n/**\n * Generates a specified number of confirmed transactions for each network.\n *\n * @param {string} from - The address from which the transactions are sent.\n * @param {number} numEntries - The number of transactions to generate for each network.\n * @returns {object} The generated transactions object.\n */\nexport const withConfirmedTransactions = (from, numEntries) => {\n  const networks = [CHAIN_IDS.MAINNET, CHAIN_IDS.SEPOLIA];\n  const transactions = {};\n\n  networks.forEach((network) => {\n    for (let i = 0; i < numEntries; i++) {\n      const id = uuidv4();\n      const transaction = {\n        chainId: network,\n        dappSuggestedGasFees: {\n          gas: '0x5208',\n          maxFeePerGas: '0x59682f0c',\n          maxPriorityFeePerGas: '0x59682f00',\n        },\n        history: [\n          {\n            chainId: network,\n            dappSuggestedGasFees: {\n              gas: '0x5208',\n              maxFeePerGas: '0x59682f0c',\n              maxPriorityFeePerGas: '0x59682f00',\n            },\n            id,\n            loadingDefaults: true,\n            origin: 'https://metamask.github.io',\n            status: 'confirmed',\n            time: Date.now(),\n            txParams: {\n              from,\n              gas: '0x5208',\n              maxFeePerGas: '0x59682f0c',\n              maxPriorityFeePerGas: '0x59682f00',\n              to: '0x2f318c334780961fb129d2a6c30d0763d9a5c970',\n              value: '0x29a2241af62c0000',\n            },\n            type: 'simpleSend',\n          },\n          [\n            {\n              note: 'Added new confirmed transaction.',\n              op: 'replace',\n              path: '/loadingDefaults',\n              timestamp: Date.now(),\n              value: false,\n            },\n            {\n              op: 'add',\n              path: '/simulationData',\n              value: {\n                error: {\n                  code: 'disabled',\n                  message: 'Simulation disabled',\n                },\n                tokenBalanceChanges: [],\n              },\n              note: 'TransactionController#updateSimulationData - Update simulation data',\n              timestamp: Date.now(),\n            },\n          ],\n        ],\n        simulationData: {\n          error: {\n            code: 'disabled',\n            message: 'Simulation disabled',\n          },\n          tokenBalanceChanges: [],\n        },\n        id,\n        loadingDefaults: false,\n        origin: 'https://metamask.github.io',\n        status: 'confirmed',\n        time: Date.now(),\n        txParams: {\n          from,\n          gas: '0x5208',\n          maxFeePerGas: '0x59682f0c',\n          maxPriorityFeePerGas: '0x59682f00',\n          to: '0x2f318c334780961fb129d2a6c30d0763d9a5c970',\n          value: '0x29a2241af62c0000',\n        },\n        type: 'simpleSend',\n      };\n\n      transactions[id] = transaction;\n    }\n  });\n\n  return { transactions };\n};\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*\n * Browser-compatible JavaScript MD5\n *\n * Modification of JavaScript MD5\n * https://github.com/blueimp/JavaScript-MD5\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n *\n * Based on\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\nfunction md5(bytes) {\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = new Uint8Array(msg.length);\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes[i] = msg.charCodeAt(i);\n    }\n  }\n\n  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));\n}\n/*\n * Convert an array of little-endian words to an array of bytes\n */\n\n\nfunction md5ToHexEncodedArray(input) {\n  const output = [];\n  const length32 = input.length * 32;\n  const hexTab = '0123456789abcdef';\n\n  for (let i = 0; i < length32; i += 8) {\n    const x = input[i >> 5] >>> i % 32 & 0xff;\n    const hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);\n    output.push(hex);\n  }\n\n  return output;\n}\n/**\n * Calculate output length with padding and bit length\n */\n\n\nfunction getOutputLength(inputLength8) {\n  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;\n}\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length.\n */\n\n\nfunction wordsToMd5(x, len) {\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[getOutputLength(len) - 1] = len;\n  let a = 1732584193;\n  let b = -271733879;\n  let c = -1732584194;\n  let d = 271733878;\n\n  for (let i = 0; i < x.length; i += 16) {\n    const olda = a;\n    const oldb = b;\n    const oldc = c;\n    const oldd = d;\n    a = md5ff(a, b, c, d, x[i], 7, -680876936);\n    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5gg(b, c, d, a, x[i], 20, -373897302);\n    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5hh(d, a, b, c, x[i], 11, -358537222);\n    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n    a = md5ii(a, b, c, d, x[i], 6, -198630844);\n    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n\n  return [a, b, c, d];\n}\n/*\n * Convert an array bytes to an array of little-endian words\n * Characters >255 have their high-byte silently ignored.\n */\n\n\nfunction bytesToWords(input) {\n  if (input.length === 0) {\n    return [];\n  }\n\n  const length8 = input.length * 8;\n  const output = new Uint32Array(getOutputLength(length8));\n\n  for (let i = 0; i < length8; i += 8) {\n    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;\n  }\n\n  return output;\n}\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\n\n\nfunction safeAdd(x, y) {\n  const lsw = (x & 0xffff) + (y & 0xffff);\n  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\n\n\nfunction bitRotateLeft(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\n\n\nfunction md5cmn(q, a, b, x, s, t) {\n  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\n\nfunction md5ff(a, b, c, d, x, s, t) {\n  return md5cmn(b & c | ~b & d, a, b, x, s, t);\n}\n\nfunction md5gg(a, b, c, d, x, s, t) {\n  return md5cmn(b & d | c & ~d, a, b, x, s, t);\n}\n\nfunction md5hh(a, b, c, d, x, s, t) {\n  return md5cmn(b ^ c ^ d, a, b, x, s, t);\n}\n\nfunction md5ii(a, b, c, d, x, s, t) {\n  return md5cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\nvar _default = md5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar _default = {\n  randomUUID\n};\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = '00000000-0000-0000-0000-000000000000';\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction parse(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nvar _default = parse;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rng;\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\n\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n// Adapted from Chris Veness' SHA1 code at\n// http://www.movable-type.co.uk/scripts/sha1.html\nfunction f(s, x, y, z) {\n  switch (s) {\n    case 0:\n      return x & y ^ ~x & z;\n\n    case 1:\n      return x ^ y ^ z;\n\n    case 2:\n      return x & y ^ x & z ^ y & z;\n\n    case 3:\n      return x ^ y ^ z;\n  }\n}\n\nfunction ROTL(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nfunction sha1(bytes) {\n  const K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];\n  const H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n\n  if (typeof bytes === 'string') {\n    const msg = unescape(encodeURIComponent(bytes)); // UTF8 escape\n\n    bytes = [];\n\n    for (let i = 0; i < msg.length; ++i) {\n      bytes.push(msg.charCodeAt(i));\n    }\n  } else if (!Array.isArray(bytes)) {\n    // Convert Array-like to Array\n    bytes = Array.prototype.slice.call(bytes);\n  }\n\n  bytes.push(0x80);\n  const l = bytes.length / 4 + 2;\n  const N = Math.ceil(l / 16);\n  const M = new Array(N);\n\n  for (let i = 0; i < N; ++i) {\n    const arr = new Uint32Array(16);\n\n    for (let j = 0; j < 16; ++j) {\n      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];\n    }\n\n    M[i] = arr;\n  }\n\n  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);\n  M[N - 1][14] = Math.floor(M[N - 1][14]);\n  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;\n\n  for (let i = 0; i < N; ++i) {\n    const W = new Uint32Array(80);\n\n    for (let t = 0; t < 16; ++t) {\n      W[t] = M[i][t];\n    }\n\n    for (let t = 16; t < 80; ++t) {\n      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    let a = H[0];\n    let b = H[1];\n    let c = H[2];\n    let d = H[3];\n    let e = H[4];\n\n    for (let t = 0; t < 80; ++t) {\n      const s = Math.floor(t / 20);\n      const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;\n      e = d;\n      d = c;\n      c = ROTL(b, 30) >>> 0;\n      b = a;\n      a = T;\n    }\n\n    H[0] = H[0] + a >>> 0;\n    H[1] = H[1] + b >>> 0;\n    H[2] = H[2] + c >>> 0;\n    H[3] = H[3] + d >>> 0;\n    H[4] = H[4] + e >>> 0;\n  }\n\n  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];\n}\n\nvar _default = sha1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.unsafeStringify = unsafeStringify;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nfunction unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nvar _default = stringify;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng.default)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0, _stringify.unsafeStringify)(b);\n}\n\nvar _default = v1;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _md = _interopRequireDefault(require(\"./md5.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v3 = (0, _v.default)('v3', 0x30, _md.default);\nvar _default = v3;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.URL = exports.DNS = void 0;\nexports.default = v35;\n\nvar _stringify = require(\"./stringify.js\");\n\nvar _parse = _interopRequireDefault(require(\"./parse.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexports.DNS = DNS;\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexports.URL = URL;\n\nfunction v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0, _parse.default)(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0, _stringify.unsafeStringify)(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _native = _interopRequireDefault(require(\"./native.js\"));\n\nvar _rng = _interopRequireDefault(require(\"./rng.js\"));\n\nvar _stringify = require(\"./stringify.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction v4(options, buf, offset) {\n  if (_native.default.randomUUID && !buf && !options) {\n    return _native.default.randomUUID();\n  }\n\n  options = options || {};\n\n  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0, _stringify.unsafeStringify)(rnds);\n}\n\nvar _default = v4;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _v = _interopRequireDefault(require(\"./v35.js\"));\n\nvar _sha = _interopRequireDefault(require(\"./sha1.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst v5 = (0, _v.default)('v5', 0x50, _sha.default);\nvar _default = v5;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regex = _interopRequireDefault(require(\"./regex.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex.default.test(uuid);\n}\n\nvar _default = validate;\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _validate = _interopRequireDefault(require(\"./validate.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction version(uuid) {\n  if (!(0, _validate.default)(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.slice(14, 15), 16);\n}\n\nvar _default = version;\nexports.default = _default;","'use strict';\n\nconst denyList = new Set([\n\t'ENOTFOUND',\n\t'ENETUNREACH',\n\n\t// SSL errors from https://github.com/nodejs/node/blob/fc8e3e2cdc521978351de257030db0076d79e0ab/src/crypto/crypto_common.cc#L301-L328\n\t'UNABLE_TO_GET_ISSUER_CERT',\n\t'UNABLE_TO_GET_CRL',\n\t'UNABLE_TO_DECRYPT_CERT_SIGNATURE',\n\t'UNABLE_TO_DECRYPT_CRL_SIGNATURE',\n\t'UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY',\n\t'CERT_SIGNATURE_FAILURE',\n\t'CRL_SIGNATURE_FAILURE',\n\t'CERT_NOT_YET_VALID',\n\t'CERT_HAS_EXPIRED',\n\t'CRL_NOT_YET_VALID',\n\t'CRL_HAS_EXPIRED',\n\t'ERROR_IN_CERT_NOT_BEFORE_FIELD',\n\t'ERROR_IN_CERT_NOT_AFTER_FIELD',\n\t'ERROR_IN_CRL_LAST_UPDATE_FIELD',\n\t'ERROR_IN_CRL_NEXT_UPDATE_FIELD',\n\t'OUT_OF_MEM',\n\t'DEPTH_ZERO_SELF_SIGNED_CERT',\n\t'SELF_SIGNED_CERT_IN_CHAIN',\n\t'UNABLE_TO_GET_ISSUER_CERT_LOCALLY',\n\t'UNABLE_TO_VERIFY_LEAF_SIGNATURE',\n\t'CERT_CHAIN_TOO_LONG',\n\t'CERT_REVOKED',\n\t'INVALID_CA',\n\t'PATH_LENGTH_EXCEEDED',\n\t'INVALID_PURPOSE',\n\t'CERT_UNTRUSTED',\n\t'CERT_REJECTED',\n\t'HOSTNAME_MISMATCH'\n]);\n\n// TODO: Use `error?.code` when targeting Node.js 14\nmodule.exports = error => !denyList.has(error && error.code);\n","'use strict';\n\nconst {\n    URLWithLegacySupport,\n    format,\n    URLSearchParams,\n    defaultBase\n} = require('./src/url');\nconst relative = require('./src/relative');\n\nmodule.exports = {\n    URL: URLWithLegacySupport,\n    URLSearchParams,\n    format,\n    relative,\n    defaultBase\n};\n","'use strict';\n\nconst { URLWithLegacySupport, format } = require('./url');\n\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n    let protocol = location.protocol ?\n        location.protocol.replace(':', '') :\n        'http';\n\n    // Check protocol map\n    protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';\n    let urlParsed;\n\n    try {\n        urlParsed = new URLWithLegacySupport(url);\n    } catch (err) {\n        urlParsed = {};\n    }\n\n    const base = Object.assign({}, location, {\n        protocol: protocol || urlParsed.protocol,\n        host: location.host || urlParsed.host\n    });\n\n    return new URLWithLegacySupport(url, format(base)).toString();\n};\n","'use strict';\n\nconst defaultBase = self.location ?\n    self.location.protocol + '//' + self.location.host :\n    '';\nconst URL = self.URL;\n\nclass URLWithLegacySupport {\n    constructor(url = '', base = defaultBase) {\n        this.super = new URL(url, base);\n        this.path = this.pathname + this.search;\n        this.auth =\n            this.username && this.password ?\n                this.username + ':' + this.password :\n                null;\n\n        this.query =\n            this.search && this.search.startsWith('?') ?\n                this.search.slice(1) :\n                null;\n    }\n\n    get hash() {\n        return this.super.hash;\n    }\n    get host() {\n        return this.super.host;\n    }\n    get hostname() {\n        return this.super.hostname;\n    }\n    get href() {\n        return this.super.href;\n    }\n    get origin() {\n        return this.super.origin;\n    }\n    get password() {\n        return this.super.password;\n    }\n    get pathname() {\n        return this.super.pathname;\n    }\n    get port() {\n        return this.super.port;\n    }\n    get protocol() {\n        return this.super.protocol;\n    }\n    get search() {\n        return this.super.search;\n    }\n    get searchParams() {\n        return this.super.searchParams;\n    }\n    get username() {\n        return this.super.username;\n    }\n\n    set hash(hash) {\n        this.super.hash = hash;\n    }\n    set host(host) {\n        this.super.host = host;\n    }\n    set hostname(hostname) {\n        this.super.hostname = hostname;\n    }\n    set href(href) {\n        this.super.href = href;\n    }\n    set origin(origin) {\n        this.super.origin = origin;\n    }\n    set password(password) {\n        this.super.password = password;\n    }\n    set pathname(pathname) {\n        this.super.pathname = pathname;\n    }\n    set port(port) {\n        this.super.port = port;\n    }\n    set protocol(protocol) {\n        this.super.protocol = protocol;\n    }\n    set search(search) {\n        this.super.search = search;\n    }\n    set searchParams(searchParams) {\n        this.super.searchParams = searchParams;\n    }\n    set username(username) {\n        this.super.username = username;\n    }\n\n    createObjectURL(o) {\n        return this.super.createObjectURL(o);\n    }\n    revokeObjectURL(o) {\n        this.super.revokeObjectURL(o);\n    }\n    toJSON() {\n        return this.super.toJSON();\n    }\n    toString() {\n        return this.super.toString();\n    }\n    format() {\n        return this.toString();\n    }\n}\n\nfunction format(obj) {\n    if (typeof obj === 'string') {\n        const url = new URL(obj);\n\n        return url.toString();\n    }\n\n    if (!(obj instanceof URL)) {\n        const userPass =\n            obj.username && obj.password ?\n                `${obj.username}:${obj.password}@` :\n                '';\n        const auth = obj.auth ? obj.auth + '@' : '';\n        const port = obj.port ? ':' + obj.port : '';\n        const protocol = obj.protocol ? obj.protocol + '//' : '';\n        const host = obj.host || '';\n        const hostname = obj.hostname || '';\n        const search = obj.search || (obj.query ? '?' + obj.query : '');\n        const hash = obj.hash || '';\n        const pathname = obj.pathname || '';\n        const path = obj.path || pathname + search;\n\n        return `${protocol}${userPass || auth}${host ||\n            hostname + port}${path}${hash}`;\n    }\n}\n\nmodule.exports = {\n    URLWithLegacySupport,\n    URLSearchParams: self.URLSearchParams,\n    defaultBase,\n    format\n};\n","\n/**\n * Join `arr` with the trailing `str` defaulting to \"and\",\n * and `sep` string defaulting to \", \".\n *\n * @param {Array} arr\n * @param {String} str\n * @param {String} sep\n * @return {String}\n * @api public\n */\n\nmodule.exports = function(arr, str, sep){\n  str = str || 'and';\n  sep = sep || ', ';\n\n  if (arr.length < 2) return arr[0] || '';\n\n  var oxford = str.slice(0, 2) === sep;\n\n  if (!oxford) {\n    str = ' ' + str;\n  } else if (arr.length == 2) {\n    str = str.slice(1);\n  }\n\n  return arr.slice(0, -1).join(sep) + str + ' ' + arr[arr.length - 1];\n};\n","\n\n//\n// THIS FILE IS AUTOMATICALLY GENERATED! DO NOT EDIT BY HAND!\n//\n;(function(global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined'\n        ? module.exports = factory()\n        : typeof define === 'function' && define.amd\n        ? define(factory) :\n        // cf. https://github.com/dankogai/js-base64/issues/119\n        (function() {\n            // existing version for noConflict()\n            const _Base64 = global.Base64;\n            const gBase64 = factory();\n            gBase64.noConflict = () => {\n                global.Base64 = _Base64;\n                return gBase64;\n            };\n            if (global.Meteor) { // Meteor.js\n                Base64 = gBase64;\n            }\n            global.Base64 = gBase64;\n        })();\n}((typeof self !== 'undefined' ? self\n        : typeof window !== 'undefined' ? window\n        : typeof global !== 'undefined' ? global\n        : this\n), function() {\n    'use strict';\n\n/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.6.1';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = [...b64ch];\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\nconst _mkUriSafe = (src) => src\n    .replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_')\n    .replace(/=+$/m, '');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/=+$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins,\n};\n\n    //\n    // export Base64 to the namespace\n    //\n    // ES5 is yet to have Object.assign() that may make transpilers unhappy.\n    // gBase64.Base64 = Object.assign({}, gBase64);\n    gBase64.Base64 = {};\n    Object.keys(gBase64).forEach(k => gBase64.Base64[k] = gBase64[k]);\n    return gBase64;\n}));\n\n\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcEngine = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JsonRpcEngine extends safe_event_emitter_1.default {\n    constructor() {\n        super();\n        this._middleware = [];\n    }\n    /**\n     * Add a middleware function to the engine's middleware stack.\n     *\n     * @param middleware - The middleware function to add.\n     */\n    push(middleware) {\n        this._middleware.push(middleware);\n    }\n    handle(req, cb) {\n        if (cb && typeof cb !== 'function') {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (cb) {\n                return this._handleBatch(req, cb);\n            }\n            return this._handleBatch(req);\n        }\n        if (cb) {\n            return this._handle(req, cb);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n    asMiddleware() {\n        return async (req, res, next, end) => {\n            try {\n                const [middlewareError, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n                if (isComplete) {\n                    await JsonRpcEngine._runReturnHandlers(returnHandlers);\n                    return end(middlewareError);\n                }\n                return next(async (handlerCallback) => {\n                    try {\n                        await JsonRpcEngine._runReturnHandlers(returnHandlers);\n                    }\n                    catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                });\n            }\n            catch (error) {\n                return end(error);\n            }\n        };\n    }\n    async _handleBatch(reqs, cb) {\n        // The order here is important\n        try {\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = await Promise.all(\n            // 1. Begin executing each request in the order received\n            reqs.map(this._promiseHandle.bind(this)));\n            // 3. Return batch response\n            if (cb) {\n                return cb(null, responses);\n            }\n            return responses;\n        }\n        catch (error) {\n            if (cb) {\n                return cb(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * A promise-wrapped _handle.\n     */\n    _promiseHandle(req) {\n        return new Promise((resolve) => {\n            this._handle(req, (_err, res) => {\n                // There will always be a response, and it will always have any error\n                // that is caught and propagated.\n                resolve(res);\n            });\n        });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n    async _handle(callerReq, cb) {\n        if (!callerReq ||\n            Array.isArray(callerReq) ||\n            typeof callerReq !== 'object') {\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, { request: callerReq });\n            return cb(error, { id: undefined, jsonrpc: '2.0', error });\n        }\n        if (typeof callerReq.method !== 'string') {\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, { request: callerReq });\n            return cb(error, { id: callerReq.id, jsonrpc: '2.0', error });\n        }\n        const req = Object.assign({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc,\n        };\n        let error = null;\n        try {\n            await this._processRequest(req, res);\n        }\n        catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                res.error = eth_rpc_errors_1.serializeError(error);\n            }\n        }\n        return cb(error, res);\n    }\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n    async _processRequest(req, res) {\n        const [error, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        JsonRpcEngine._checkForCompletion(req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        await JsonRpcEngine._runReturnHandlers(returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            throw error;\n        }\n    }\n    /**\n     * Serially executes the given stack of middleware.\n     *\n     * @returns An array of any error encountered during middleware execution,\n     * a boolean indicating whether the request was completed, and an array of\n     * middleware-defined return handlers.\n     */\n    static async _runAllMiddleware(req, res, middlewareStack) {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewareStack) {\n            [error, isComplete] = await JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [error, isComplete, returnHandlers.reverse()];\n    }\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n    static _runMiddleware(req, res, middleware, returnHandlers) {\n        return new Promise((resolve) => {\n            const end = (err) => {\n                const error = err || res.error;\n                if (error) {\n                    res.error = eth_rpc_errors_1.serializeError(error);\n                }\n                // True indicates that the request should end\n                resolve([error, true]);\n            };\n            const next = (returnHandler) => {\n                if (res.error) {\n                    end(res.error);\n                }\n                else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== 'function') {\n                            end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: \"next\" return handlers must be functions. ` +\n                                `Received \"${typeof returnHandler}\" for request:\\n${jsonify(req)}`, { request: req }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([null, false]);\n                }\n            };\n            try {\n                middleware(req, res, next, end);\n            }\n            catch (error) {\n                end(error);\n            }\n        });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n    static async _runReturnHandlers(handlers) {\n        for (const handler of handlers) {\n            await new Promise((resolve, reject) => {\n                handler((err) => (err ? reject(err) : resolve()));\n            });\n        }\n    }\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n    static _checkForCompletion(req, res, isComplete) {\n        if (!('result' in res) && !('error' in res)) {\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\\n${jsonify(req)}`, { request: req });\n        }\n        if (!isComplete) {\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\\n${jsonify(req)}`, { request: req });\n        }\n    }\n}\nexports.JsonRpcEngine = JsonRpcEngine;\nfunction jsonify(request) {\n    return JSON.stringify(request, null, 2);\n}\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAsyncMiddleware = void 0;\n/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\nfunction createAsyncMiddleware(asyncMiddleware) {\n    return async (req, res, next, end) => {\n        // nextPromise is the key to the implementation\n        // it is resolved by the return handler passed to the\n        // \"next\" function\n        let resolveNextPromise;\n        const nextPromise = new Promise((resolve) => {\n            resolveNextPromise = resolve;\n        });\n        let returnHandlerCallback = null;\n        let nextWasCalled = false;\n        // This will be called by the consumer's async middleware.\n        const asyncNext = async () => {\n            nextWasCalled = true;\n            // We pass a return handler to next(). When it is called by the engine,\n            // the consumer's async middleware will resume executing.\n            // eslint-disable-next-line node/callback-return\n            next((runReturnHandlersCallback) => {\n                // This callback comes from JsonRpcEngine._runReturnHandlers\n                returnHandlerCallback = runReturnHandlersCallback;\n                resolveNextPromise();\n            });\n            await nextPromise;\n        };\n        try {\n            await asyncMiddleware(req, res, asyncNext);\n            if (nextWasCalled) {\n                await nextPromise; // we must wait until the return handler is called\n                returnHandlerCallback(null);\n            }\n            else {\n                end(null);\n            }\n        }\n        catch (error) {\n            if (returnHandlerCallback) {\n                returnHandlerCallback(error);\n            }\n            else {\n                end(error);\n            }\n        }\n    };\n}\nexports.createAsyncMiddleware = createAsyncMiddleware;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlQXN5bmNNaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NyZWF0ZUFzeW5jTWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFnQkE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFDSCxTQUFnQixxQkFBcUIsQ0FDbkMsZUFBNkM7SUFFN0MsT0FBTyxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDbkMsK0NBQStDO1FBQy9DLHFEQUFxRDtRQUNyRCxrQkFBa0I7UUFDbEIsSUFBSSxrQkFBOEIsQ0FBQztRQUNuQyxNQUFNLFdBQVcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVILElBQUkscUJBQXFCLEdBQVksSUFBSSxDQUFDO1FBQzFDLElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUUxQiwwREFBMEQ7UUFDMUQsTUFBTSxTQUFTLEdBQUcsS0FBSyxJQUFJLEVBQUU7WUFDM0IsYUFBYSxHQUFHLElBQUksQ0FBQztZQUVyQix1RUFBdUU7WUFDdkUseURBQXlEO1lBQ3pELGdEQUFnRDtZQUNoRCxJQUFJLENBQUMsQ0FBQyx5QkFBeUIsRUFBRSxFQUFFO2dCQUNqQyw0REFBNEQ7Z0JBQzVELHFCQUFxQixHQUFHLHlCQUF5QixDQUFDO2dCQUNsRCxrQkFBa0IsRUFBRSxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxXQUFXLENBQUM7UUFDcEIsQ0FBQyxDQUFDO1FBRUYsSUFBSTtZQUNGLE1BQU0sZUFBZSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFM0MsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLE1BQU0sV0FBVyxDQUFDLENBQUMsa0RBQWtEO2dCQUNwRSxxQkFBK0MsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN4RDtpQkFBTTtnQkFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDWDtTQUNGO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxJQUFJLHFCQUFxQixFQUFFO2dCQUN4QixxQkFBK0MsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6RDtpQkFBTTtnQkFDTCxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDWjtTQUNGO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQS9DRCxzREErQ0MifQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createScaffoldMiddleware = void 0;\nfunction createScaffoldMiddleware(handlers) {\n    return (req, res, next, end) => {\n        const handler = handlers[req.method];\n        // if no handler, return\n        if (handler === undefined) {\n            return next();\n        }\n        // if handler is fn, call as middleware\n        if (typeof handler === 'function') {\n            return handler(req, res, next, end);\n        }\n        // if handler is some other value, use as result\n        res.result = handler;\n        return end();\n    };\n}\nexports.createScaffoldMiddleware = createScaffoldMiddleware;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFJQSxTQUFnQix3QkFBd0IsQ0FBQyxRQUV4QztJQUNDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUM3QixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLHdCQUF3QjtRQUN4QixJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDekIsT0FBTyxJQUFJLEVBQUUsQ0FBQztTQUNmO1FBQ0QsdUNBQXVDO1FBQ3ZDLElBQUksT0FBTyxPQUFPLEtBQUssVUFBVSxFQUFFO1lBQ2pDLE9BQU8sT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsZ0RBQWdEO1FBQy9DLEdBQStCLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztRQUNsRCxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQWpCRCw0REFpQkMifQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUniqueId = void 0;\n// uint32 (two's complement) max\n// more conservative than Number.MAX_SAFE_INTEGER\nconst MAX = 4294967295;\nlet idCounter = Math.floor(Math.random() * MAX);\nfunction getUniqueId() {\n    idCounter = (idCounter + 1) % MAX;\n    return idCounter;\n}\nexports.getUniqueId = getUniqueId;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0VW5pcXVlSWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2V0VW5pcXVlSWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0NBQWdDO0FBQ2hDLGlEQUFpRDtBQUNqRCxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUM7QUFDdkIsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFFaEQsU0FBZ0IsV0FBVztJQUN6QixTQUFTLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ2xDLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFIRCxrQ0FHQyJ9","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createIdRemapMiddleware = void 0;\nconst getUniqueId_1 = require(\"./getUniqueId\");\nfunction createIdRemapMiddleware() {\n    return (req, res, next, _end) => {\n        const originalId = req.id;\n        const newId = getUniqueId_1.getUniqueId();\n        req.id = newId;\n        res.id = newId;\n        next((done) => {\n            req.id = originalId;\n            res.id = originalId;\n            done();\n        });\n    };\n}\nexports.createIdRemapMiddleware = createIdRemapMiddleware;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRSZW1hcE1pZGRsZXdhcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaWRSZW1hcE1pZGRsZXdhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0NBQTRDO0FBRzVDLFNBQWdCLHVCQUF1QjtJQUNyQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDOUIsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUMxQixNQUFNLEtBQUssR0FBRyx5QkFBVyxFQUFFLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDZixHQUFHLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUNmLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ1osR0FBRyxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUM7WUFDcEIsR0FBRyxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUM7WUFDcEIsSUFBSSxFQUFFLENBQUM7UUFDVCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztBQUNKLENBQUM7QUFaRCwwREFZQyJ9","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./idRemapMiddleware\"), exports);\n__exportStar(require(\"./createAsyncMiddleware\"), exports);\n__exportStar(require(\"./createScaffoldMiddleware\"), exports);\n__exportStar(require(\"./getUniqueId\"), exports);\n__exportStar(require(\"./JsonRpcEngine\"), exports);\n__exportStar(require(\"./mergeMiddleware\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsc0RBQW9DO0FBQ3BDLDBEQUF3QztBQUN4Qyw2REFBMkM7QUFDM0MsZ0RBQThCO0FBQzlCLGtEQUFnQztBQUNoQyxvREFBa0MifQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeMiddleware = void 0;\nconst JsonRpcEngine_1 = require(\"./JsonRpcEngine\");\nfunction mergeMiddleware(middlewareStack) {\n    const engine = new JsonRpcEngine_1.JsonRpcEngine();\n    middlewareStack.forEach((middleware) => engine.push(middleware));\n    return engine.asMiddleware();\n}\nexports.mergeMiddleware = mergeMiddleware;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2VNaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21lcmdlTWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtREFBbUU7QUFFbkUsU0FBZ0IsZUFBZSxDQUFDLGVBQXNEO0lBQ3BGLE1BQU0sTUFBTSxHQUFHLElBQUksNkJBQWEsRUFBRSxDQUFDO0lBQ25DLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUNqRSxPQUFPLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUMvQixDQUFDO0FBSkQsMENBSUMifQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    }\n    catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(() => {\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for (let i = 0; i < n; i += 1) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events_1.EventEmitter {\n    emit(type, ...args) {\n        let doError = type === 'error';\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        }\n        else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === 'function') {\n            safeApply(handler, this, args);\n        }\n        else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for (let i = 0; i < len; i += 1) {\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nexports.default = SafeEventEmitter;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst readable_stream_1 = require(\"readable-stream\");\n/**\n * Takes a JsonRpcEngine and returns a Duplex stream wrapping it.\n *\n * @param opts - Options bag.\n * @param opts.engine - The JsonRpcEngine to wrap in a stream.\n * @returns The stream wrapping the engine.\n */\nfunction createEngineStream(opts) {\n    if (!(opts === null || opts === void 0 ? void 0 : opts.engine)) {\n        throw new Error('Missing engine parameter!');\n    }\n    const { engine } = opts;\n    const stream = new readable_stream_1.Duplex({ objectMode: true, read: () => undefined, write });\n    // forward notifications\n    if (engine.on) {\n        engine.on('notification', (message) => {\n            stream.push(message);\n        });\n    }\n    return stream;\n    /**\n     * Write a JSON-RPC request to the stream.\n     *\n     * @param req - The JSON-rpc request.\n     * @param _encoding - The stream encoding, not used.\n     * @param streamWriteCallback - The stream write callback.\n     */\n    function write(req, _encoding, streamWriteCallback) {\n        engine.handle(req, (_err, res) => {\n            stream.push(res);\n        });\n        streamWriteCallback();\n    }\n}\nexports.default = createEngineStream;\n//# sourceMappingURL=createEngineStream.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst readable_stream_1 = require(\"readable-stream\");\n/**\n * Creates a JsonRpcEngine middleware with an associated Duplex stream and\n * EventEmitter. The middleware, and by extension stream, assume that middleware\n * parameters are properly formatted. No runtime type checking or validation is\n * performed.\n *\n * @param options - Configuration options for middleware.\n * @returns The event emitter, middleware, and stream.\n */\nfunction createStreamMiddleware(options = {}) {\n    const idMap = {}; // TODO: replace with actual Map\n    const stream = new readable_stream_1.Duplex({\n        objectMode: true,\n        read: () => undefined,\n        write: processMessage,\n    });\n    const events = new safe_event_emitter_1.default();\n    const middleware = (req, res, next, end) => {\n        // register request on id map *before* sending it to the stream, to avoid race issues\n        idMap[req.id] = { req, res, next, end };\n        // write req to stream\n        sendToStream(req);\n    };\n    return { events, middleware, stream };\n    /**\n     * Forwards JSON-RPC request to the stream.\n     *\n     * @param req - The JSON-RPC request object.\n     */\n    function sendToStream(req) {\n        // TODO: limiting retries could be implemented here\n        stream.push(req);\n    }\n    /**\n     * Writes a JSON-RPC object to the stream.\n     *\n     * @param res - The JSON-RPC response object.\n     * @param _encoding - The stream encoding, not used.\n     * @param streamWriteCallback - The stream write callback.\n     */\n    function processMessage(res, _encoding, streamWriteCallback) {\n        let errorObj = null;\n        try {\n            const isNotification = !res.id;\n            if (isNotification) {\n                processNotification(res);\n            }\n            else {\n                processResponse(res);\n            }\n        }\n        catch (_err) {\n            errorObj = _err;\n        }\n        // continue processing stream\n        streamWriteCallback(errorObj);\n    }\n    /**\n     * Processes a JSON-RPC response.\n     *\n     * @param res - The response to process.\n     */\n    function processResponse(res) {\n        const responseId = res.id;\n        const context = idMap[responseId];\n        if (!context) {\n            console.warn(`StreamMiddleware - Unknown response id \"${responseId}\"`);\n            return;\n        }\n        delete idMap[responseId];\n        // copy whole res onto original res\n        Object.assign(context.res, res);\n        // run callback on empty stack,\n        // prevent internal stream-handler from catching errors\n        setTimeout(context.end);\n    }\n    /**\n     * Processes a JSON-RPC notification.\n     *\n     * @param notif - The notification to process.\n     */\n    function processNotification(notif) {\n        if ((options === null || options === void 0 ? void 0 : options.retryOnMessage) && notif.method === options.retryOnMessage) {\n            retryStuckRequests();\n        }\n        events.emit('notification', notif);\n    }\n    /**\n     * Retry pending requests.\n     */\n    function retryStuckRequests() {\n        Object.values(idMap).forEach(({ req, retryCount = 0 }) => {\n            // Avoid retrying requests without an id - they cannot have matching responses so retry logic doesn't apply\n            // Check for retry count below ensure that a request is not retried more than 3 times\n            if (!req.id) {\n                return;\n            }\n            if (retryCount >= 3) {\n                throw new Error(`StreamMiddleware - Retry limit exceeded for request id \"${req.id}\"`);\n            }\n            idMap[req.id].retryCount = retryCount + 1;\n            sendToStream(req);\n        });\n    }\n}\nexports.default = createStreamMiddleware;\n//# sourceMappingURL=createStreamMiddleware.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createStreamMiddleware = exports.createEngineStream = void 0;\nconst createEngineStream_1 = __importDefault(require(\"./createEngineStream\"));\nexports.createEngineStream = createEngineStream_1.default;\nconst createStreamMiddleware_1 = __importDefault(require(\"./createStreamMiddleware\"));\nexports.createStreamMiddleware = createStreamMiddleware_1.default;\n//# sourceMappingURL=index.js.map","const _TOKENS = [\n  {\n    address: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\n    symbol: 'DAI',\n    decimals: 18,\n    image:\n      'https://static.metafi.codefi.network/api/v1/tokenIcons/1/0x6b175474e89094c44da98b954eedeac495271d0f.png',\n    isERC721: false,\n    aggregators: [],\n  },\n  {\n    address: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n    symbol: 'USDC',\n    decimals: 6,\n    image:\n      'https://static.metafi.codefi.network/api/v1/tokenIcons/1/0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.png',\n    isERC721: false,\n    aggregators: [],\n  },\n  {\n    address: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n    symbol: 'USDT',\n    decimals: 6,\n    image:\n      'https://static.metafi.codefi.network/api/v1/tokenIcons/1/0xdAC17F958D2ee523a2206206994597C13D831ec7.png',\n    isERC721: false,\n    aggregators: [],\n  },\n  {\n    address: '0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F',\n    symbol: 'SNX',\n    decimals: 18,\n    image:\n      'https://static.metafi.codefi.network/api/v1/tokenIcons/1/0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F.png',\n    isERC721: false,\n    aggregators: [],\n  },\n  {\n    address: '0x111111111117dC0aa78b770fA6A738034120C302',\n    symbol: '1INCH',\n    decimals: 18,\n    image:\n      'https://static.metafi.codefi.network/api/v1/tokenIcons/1/0x111111111117dC0aa78b770fA6A738034120C302.png',\n    isERC721: false,\n    aggregators: [],\n  },\n  {\n    address: '0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0',\n    symbol: 'MATIC',\n    decimals: 18,\n    image:\n      'https://static.metafi.codefi.network/api/v1/tokenIcons/1/0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0.png',\n    isERC721: false,\n    aggregators: [],\n  },\n  {\n    address: '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n    symbol: 'SHIB',\n    decimals: 18,\n    image:\n      'https://static.metafi.codefi.network/api/v1/tokenIcons/1/0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE.png',\n    isERC721: false,\n    aggregators: [],\n  },\n  {\n    address: '0xFd09911130e6930Bf87F2B0554c44F400bD80D3e',\n    symbol: 'ETHIX',\n    decimals: 18,\n    image:\n      'https://static.metafi.codefi.network/api/v1/tokenIcons/1/0xFd09911130e6930Bf87F2B0554c44F400bD80D3e.png',\n    isERC721: false,\n    aggregators: [],\n  },\n];\n\nexport const FIXTURES_ERC20_TOKENS = {\n  tokens: _TOKENS,\n  ignoredTokens: [],\n  detectedTokens: [],\n  allTokens: {\n    '0x1': {\n      myAccount: _TOKENS,\n    },\n  },\n  allIgnoredTokens: {},\n  allDetectedTokens: {},\n};\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n","var copyObject = require('./_copyObject'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n","var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys'),\n    keysIn = require('./keysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n","var isObject = require('./isObject');\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * The base implementation of `_.inRange` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to check.\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n */\nfunction baseInRange(number, start, end) {\n  return number >= nativeMin(start, end) && number < nativeMax(start, end);\n}\n\nmodule.exports = baseInRange;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n","var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n","var trimmedEndIndex = require('./_trimmedEndIndex');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n","var Uint8Array = require('./_Uint8Array');\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n","var root = require('./_root');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n","var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n","var assignValue = require('./_assignValue'),\n    baseAssignValue = require('./_baseAssignValue');\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n","var copyObject = require('./_copyObject'),\n    getSymbols = require('./_getSymbols');\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n","var copyObject = require('./_copyObject'),\n    getSymbolsIn = require('./_getSymbolsIn');\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbolsIn = require('./_getSymbolsIn'),\n    keysIn = require('./keysIn');\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n","var overArg = require('./_overArg');\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n","var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n","var baseCreate = require('./_baseCreate'),\n    getPrototype = require('./_getPrototype'),\n    isPrototype = require('./_isPrototype');\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n","export const FIXTURES_NETWORKS = {\n  providerConfig: {\n    chainId: '0xaa36a7',\n    rpcPrefs: {\n      blockExplorerUrl: 'https://sepolia.etherscan.io',\n    },\n    ticker: 'SepoliaETH',\n    type: 'sepolia',\n  },\n  networkConfigurations: {\n    networkConfigurationId: {\n      chainId: '0xaa36a7',\n      nickname: 'Sepolia',\n      rpcPrefs: {},\n      rpcUrl: 'https://sepolia.infura.io/v3/',\n      ticker: 'SepoliaETH',\n      networkConfigurationId: 'networkConfigurationId',\n    },\n    optimism: {\n      chainId: '0xa',\n      id: 'optimism',\n      nickname: 'OP Mainnet',\n      rpcPrefs: {\n        blockExplorerUrl: 'https://optimistic.etherscan.io/',\n        imageUrl: './images/optimism.svg',\n      },\n      rpcUrl: 'https://optimism-mainnet.infura.io/v3/',\n      ticker: 'ETH',\n    },\n    base: {\n      chainId: '0x2105',\n      id: 'base',\n      nickname: 'Base Mainnet',\n      rpcPrefs: {\n        blockExplorerUrl: 'https://basescan.org',\n        imageUrl: './images/base.svg',\n      },\n      rpcUrl: 'https://mainnet.base.org',\n      ticker: 'ETH',\n    },\n    polygon: {\n      chainId: '0x89',\n      id: 'polygon',\n      nickname: 'Polygon Mainnet',\n      rpcPrefs: {\n        blockExplorerUrl: 'https://polygonscan.com/',\n        imageUrl: './images/matic-token.svg',\n      },\n      rpcUrl: 'https://polygon-mainnet.infura.io/v3/',\n      ticker: 'MATIC',\n    },\n    binance: {\n      chainId: '0x38',\n      id: 'binance',\n      nickname: 'BNB Chain',\n      rpcPrefs: {\n        blockExplorerUrl: 'https://bscscan.com/',\n        imageUrl: './images/bnb.svg',\n      },\n      rpcUrl: 'https://bsc-dataseed.binance.org/',\n      ticker: 'BNB',\n    },\n    gnosis: {\n      id: 'gnosis',\n      rpcUrl: 'https://rpc.gnosischain.com',\n      chainId: '0x64',\n      ticker: 'XDAI',\n      nickname: 'Gnosis',\n      rpcPrefs: {\n        blockExplorerUrl: 'https://gnosisscan.io',\n        imageUrl: './images/gnosis.svg',\n      },\n    },\n    arbitrum: {\n      id: 'arbitrum',\n      rpcUrl: 'https://arbitrum-mainnet.infura.io/v3/',\n      chainId: '0xa4b1',\n      ticker: 'ETH',\n      nickname: 'Arbitrum One',\n      rpcPrefs: {\n        blockExplorerUrl: 'https://explorer.arbitrum.io',\n        imageUrl: './images/arbitrum.svg',\n      },\n    },\n    avalanche: {\n      id: 'avalanche',\n      rpcUrl: 'https://avalanche-mainnet.infura.io/v3/',\n      chainId: '0xa86a',\n      ticker: 'AVAX',\n      nickname: 'Avalanche Network C-Chain',\n      rpcPrefs: {\n        blockExplorerUrl: 'https://snowtrace.io/',\n        imageUrl: './images/avax-token.svg',\n      },\n    },\n    celo: {\n      id: 'celo',\n      rpcUrl: 'https://celo-mainnet.infura.io/v3/',\n      chainId: '0xa4ec',\n      ticker: 'CELO',\n      nickname: 'Celo Mainnet',\n      rpcPrefs: {\n        blockExplorerUrl: 'https://celoscan.io',\n        imageUrl: './images/celo.svg',\n      },\n    },\n    zkSync: {\n      id: 'zkSync',\n      rpcUrl: 'https://mainnet.era.zksync.io',\n      chainId: '0x144',\n      ticker: 'ETH',\n      nickname: 'zkSync Era Mainnet',\n      rpcPrefs: {\n        blockExplorerUrl: 'https://explorer.zksync.io/',\n        imageUrl: './images/zk-sync.svg',\n      },\n    },\n    localhost: {\n      id: 'localhost',\n      rpcUrl: 'http://localhost:8545',\n      chainId: '0x539',\n      ticker: 'ETH',\n      nickname: 'Localhost 8545',\n      rpcPrefs: {\n        blockExplorerUrl: '',\n        imageUrl: '',\n      },\n    },\n  },\n};\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n"]}