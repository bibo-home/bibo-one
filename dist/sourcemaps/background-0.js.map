{"version":3,"sources":["app/scripts/controllers/alert.js","app/scripts/lib/rpc-method-middleware/handlers/log-web3-shim-usage.js","app/scripts/lib/rpc-method-middleware/handlers/request-accounts.js","app/scripts/lib/rpc-method-middleware/handlers/send-metadata.js","app/scripts/lib/rpc-method-middleware/handlers/switch-ethereum-chain.js","app/scripts/lib/rpc-method-middleware/handlers/watch-asset.js","app/scripts/lib/rpc-method-middleware/index.js","app/scripts/lib/segment/analytics.js","app/scripts/lib/segment/index.js","app/scripts/controllers/app-metadata.ts","app/scripts/lib/snap-keyring/index.ts","node_modules/@metamask/accounts-controller/dist/AccountsController.cjs","node_modules/@metamask/accounts-controller/dist/index.cjs","node_modules/@metamask/accounts-controller/dist/utils.cjs","node_modules/@metamask/address-book-controller/dist/chunk-ZEYDK2CL.js","node_modules/@metamask/address-book-controller/dist/index.js","node_modules/@metamask/address-book-controller/node_modules/@metamask/base-controller/dist/chunk-FTHCJ6HY.js","node_modules/@metamask/address-book-controller/node_modules/@metamask/base-controller/dist/chunk-G42723LG.js","app/scripts/lib/snap-keyring/keyring-snaps-permissions.ts","node_modules/@metamask/address-book-controller/node_modules/@metamask/base-controller/dist/chunk-IURK6TKD.js","node_modules/@metamask/address-book-controller/node_modules/@metamask/base-controller/dist/chunk-UJFCPTF3.js","node_modules/@metamask/address-book-controller/node_modules/@metamask/base-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/address-book-controller/node_modules/@metamask/base-controller/dist/index.js","node_modules/@metamask/announcement-controller/dist/chunk-ZGM3XNIO.js","node_modules/@metamask/announcement-controller/dist/index.js","node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-FTHCJ6HY.js","node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-G42723LG.js","node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-IURK6TKD.js","node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-UJFCPTF3.js","app/scripts/lib/snap-keyring/metrics.ts","node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/announcement-controller/node_modules/@metamask/base-controller/dist/index.js","app/scripts/lib/snap-keyring/snap-keyring.ts","app/scripts/lib/snap-keyring/utils/isBlockedUrl.ts","app/scripts/lib/snap-keyring/utils/showResult.ts","app/scripts/lib/state-utils.ts","app/scripts/controllers/app-state.js","app/scripts/lib/transaction/decode/four-byte.ts","app/scripts/lib/transaction/decode/proxy.ts","app/scripts/lib/transaction/decode/sourcify.ts","app/scripts/lib/transaction/decode/uniswap-commands.ts","app/scripts/lib/transaction/decode/uniswap.ts","node_modules/@metamask/ens-controller/dist/chunk-BG4UCEGM.js","node_modules/@metamask/ens-controller/dist/index.js","node_modules/@metamask/ens-controller/node_modules/@metamask/base-controller/dist/chunk-FTHCJ6HY.js","node_modules/@metamask/ens-controller/node_modules/@metamask/base-controller/dist/chunk-G42723LG.js","node_modules/@metamask/ens-controller/node_modules/@metamask/base-controller/dist/chunk-IURK6TKD.js","node_modules/@metamask/ens-controller/node_modules/@metamask/base-controller/dist/chunk-UJFCPTF3.js","app/scripts/lib/transaction/decode/util.ts","node_modules/@metamask/ens-controller/node_modules/@metamask/base-controller/dist/chunk-Z4BLTVTB.js","node_modules/@metamask/ens-controller/node_modules/@metamask/base-controller/dist/index.js","node_modules/@metamask/ens-resolver-snap/dist/preinstalled-snap.json","app/scripts/lib/transaction/metrics.ts","app/scripts/lib/transaction/smart-transactions.ts","app/scripts/lib/transaction/util.ts","app/scripts/lib/tx-verification/tx-verification-middleware.ts","app/scripts/controllers/bridge/bridge-controller.ts","node_modules/@metamask/eth-json-rpc-filters/base-filter-history.js","node_modules/@metamask/eth-json-rpc-filters/base-filter.js","node_modules/@metamask/eth-json-rpc-filters/block-filter.js","node_modules/@metamask/eth-json-rpc-filters/getBlocksForRange.js","node_modules/@metamask/eth-json-rpc-filters/hexUtils.js","node_modules/@metamask/eth-json-rpc-filters/index.js","node_modules/@metamask/eth-json-rpc-filters/log-filter.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/eth-query/index.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/json-rpc-engine/dist/JsonRpcEngine.js","app/scripts/metamask-controller.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/json-rpc-engine/dist/createAsyncMiddleware.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/json-rpc-engine/dist/createScaffoldMiddleware.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/json-rpc-engine/dist/getUniqueId.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/json-rpc-engine/dist/idRemapMiddleware.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/json-rpc-engine/dist/index.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/json-rpc-engine/dist/mergeMiddleware.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/assert.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/base64.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/bytes.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/caip-types.cjs","app/scripts/migrations/002.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/checksum.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/coercers.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/collections.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/encryption-types.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/errors.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/hex.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/index.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/json.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/keyring.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/logging.cjs","app/scripts/migrations/003.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/misc.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/number.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/opaque.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/promise.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/time.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/transaction-types.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/@metamask/utils/dist/versions.cjs","node_modules/@metamask/eth-json-rpc-filters/node_modules/async-mutex/lib/Mutex.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/async-mutex/lib/Semaphore.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/async-mutex/lib/index.js","app/scripts/migrations/004.js","node_modules/@metamask/eth-json-rpc-filters/node_modules/async-mutex/lib/withTimeout.js","node_modules/@metamask/eth-json-rpc-filters/subscriptionManager.js","node_modules/@metamask/eth-json-rpc-filters/tx-filter.js","app/scripts/migrations/005.js","app/scripts/migrations/006.js","app/scripts/migrations/007.js","app/scripts/migrations/008.js","node_modules/@metamask/eth-json-rpc-middleware/dist/block-cache.js","node_modules/@metamask/eth-json-rpc-middleware/dist/block-ref-rewrite.js","node_modules/@metamask/eth-json-rpc-middleware/dist/block-ref.js","node_modules/@metamask/eth-json-rpc-middleware/dist/block-tracker-inspector.js","node_modules/@metamask/eth-json-rpc-middleware/dist/fetch.js","node_modules/@metamask/eth-json-rpc-middleware/dist/index.js","node_modules/@metamask/eth-json-rpc-middleware/dist/inflight-cache.js","node_modules/@metamask/eth-json-rpc-middleware/dist/logging-utils.js","node_modules/@metamask/eth-json-rpc-middleware/dist/providerAsMiddleware.js","node_modules/@metamask/eth-json-rpc-middleware/dist/retryOnEmpty.js","app/scripts/migrations/009.js","node_modules/@metamask/eth-json-rpc-middleware/dist/utils/cache.js","node_modules/@metamask/eth-json-rpc-middleware/dist/utils/error.js","node_modules/@metamask/eth-json-rpc-middleware/dist/utils/normalize.js","node_modules/@metamask/eth-json-rpc-middleware/dist/utils/timeout.js","node_modules/@metamask/eth-json-rpc-middleware/dist/wallet.js","node_modules/@metamask/eth-ledger-bridge-keyring/dist/index.js","app/scripts/controllers/bridge/constants.ts","app/scripts/migrations/010.js","node_modules/@metamask/eth-ledger-bridge-keyring/dist/ledger-bridge.js","node_modules/@metamask/eth-ledger-bridge-keyring/dist/ledger-iframe-bridge.js"],"names":["_obsStore","require","_alerts","defaultState","alertEnabledness","TOGGLEABLE_ALERT_TYPES","reduce","alertType","unconnectedAccountAlertShownOrigins","web3ShimUsageOrigins","exports","default","constructor","opts","initState","controllerMessenger","state","this","store","ObservableStore","selectedAddress","call","subscribe","account","getState","address","updateState","setAlertEnabledness","alertId","enabledness","setUnconnectedAccountAlertShown","origin","getWeb3ShimUsageState","setWeb3ShimUsageRecorded","_setWeb3ShimUsageState","Web3ShimUsageAlertStates","recorded","setWeb3ShimUsageAlertDismissed","dismissed","value","logWeb3ShimUsage","methodNames","MESSAGE_TYPE","LOG_WEB3_SHIM_USAGE","implementation","req","res","_next","end","undefined","result","hookNames","_ethRpcErrors","_app","_metametrics","_util","requestEthereumAccounts","ETH_REQUEST_ACCOUNTS","async","_req","getAccounts","getUnlockPromise","hasPermission","requestAccountsPermission","sendMetrics","getPermissionsForOrigin","metamaskState","locks","has","error","ethErrors","rpc","resourceUnavailable","ETH_ACCOUNTS","add","delete","err","accounts","length","numberOfConnectedAccounts","eth_accounts","caveats","isFirstVisit","Object","keys","permissionHistory","includes","shouldEmitDappViewedEvent","metaMetricsId","event","MetaMetricsEventName","DappViewed","category","MetaMetricsEventCategory","InpageProvider","referrer","url","properties","is_first_visit","number_of_accounts","number_of_accounts_connected","internal","Set","sendMetadata","SEND_METADATA","addSubjectMetadata","subjectType","params","Array","isArray","invalidParams","data","icon","name","remainingParams","iconUrl","_ethereumChainUtils","switchEthereumChain","SWITCH_ETHEREUM_CHAIN","getNetworkConfigurationByChainId","setActiveNetwork","requestPermittedChainsPermission","getCaveat","getCurrentChainIdForDomain","requestUserApproval","getChainPermissionsFeatureFlag","chainId","validateSwitchEthereumChainParams","currentChainIdForOrigin","networkConfigurationForRequestedChainId","networkClientIdToSwitchTo","rpcEndpoints","defaultRpcEndpointIndex","networkClientId","provider","custom","code","message","ADD_ETHEREUM_CHAIN","requestData","toNetworkConfiguration","fromNetworkConfiguration","switchChain","_controllerUtils","watchAsset","WATCH_ASSET","WATCH_ASSET_LEGACY","handleWatchAssetRequest","options","asset","type","tokenId","ERC721","ERC1155","_createMethodMiddleware","forEach","key","defineProperty","enumerable","get","_createUnsupportedMethodMiddleware","_removeTrailingSlash","_interopRequireDefault","_looselyValidateEvent","_lodash","_isRetryAllowed","obj","__esModule","noop","writeKey","host","flushInterval","flushAt","Math","max","queue","path","maxQueueSize","flushed","retryCount","configurable","writable","_validate","_message","callback","enqueue","identify","track","page","msg","enable","setImmediate","context","library","timestamp","Date","messageId","generateRandomId","anonymousId","isString","JSON","stringify","userId","push","flush","hasReachedFlushAt","hasReachedQueueSize","acc","item","timer","setTimeout","bind","Promise","resolve","clearTimeout","items","splice","callbacks","map","batch","sentAt","headers","Authorization","Buffer","from","toString","_sendRequest","method","body","fn","_retryRequest","done","retryNo","delay","pow","fetch","then","response","ok","_isErrorRetryable","Error","statusText","catch","Boolean","isNetworkError","status","_time","SECOND","createSegmentMock","segmentMock","_","payload","segment","_events","_classPrivateMethodInitSpec","privateSet","privateCollection","TypeError","_checkPrivateRedeclaration","_defineProperty","arg","input","hint","prim","Symbol","toPrimitive","String","Number","_toPrimitive","_toPropertyKey","_classPrivateMethodGet","receiver","currentAppVersion","previousAppVersion","previousMigrationVersion","currentMigrationVersion","_maybeUpdateAppVersion","WeakSet","_maybeUpdateMigrationVersion","AppMetadataController","super","_maybeUpdateAppVersion2","_maybeUpdateMigrationVersion2","maybeNewAppVersion","oldCurrentAppVersion","maybeNewMigrationVersion","oldCurrentMigrationVersion","_snapKeyring","_AccountsController_instances","_AccountsController_generateInternalAccountForNonSnapAccount","_AccountsController_listSnapAccounts","_AccountsController_listNormalAccounts","_AccountsController_handleOnKeyringStateChange","_AccountsController_handleOnSnapStateChange","_AccountsController_getAccountsByKeyringType","_AccountsController_getLastSelectedAccount","_AccountsController_isAccountCompatibleWithChain","_AccountsController_getLastSelectedIndex","_AccountsController_handleNewAccountAdded","_AccountsController_publishAccountChangeEvent","_AccountsController_handleAccountRemoved","_AccountsController_populateExistingMetadata","_AccountsController_registerMessageHandlers","__classPrivateFieldGet","kind","f","AccountsController","EMPTY_ACCOUNT","base_controller_1","eth_snap_keyring_1","keyring_api_1","keyring_controller_1","utils_1","utils_2","controllerName","accountsControllerMetadata","internalAccounts","persist","anonymous","selectedAccount","id","methods","EthAccountType","Eoa","metadata","keyring","importTime","BaseController","messenger","messagingSystem","snapStateState","keyringState","getAccount","accountId","listAccounts","values","filter","isEvmAccountType","listMultichainAccounts","isCaipChainId","getAccountExpect","getSelectedAccount","getSelectedMultichainAccount","getAccountByAddress","find","toLowerCase","setSelectedAccount","update","currentState","lastSelected","now","setAccountName","accountName","updateAccountMetadata","nameLastUpdatedAt","internalAccount","publish","updateAccounts","snapAccounts","normalAccounts","keyringTypes","Map","previousAccounts","internalAccountMap","keyringTypeName","keyringTypeToName","keyringAccountIndex","set","existingAccount","lastSelectedAccount","loadBackup","backup","getNextAvailableAccountName","keyringType","KeyringTypes","hd","keyringName","keyringAccounts","lastDefaultIndexUsedForKeyringType","maxInternalAccountIndex","match","RegExp","exec","internalAccountIndex","parseInt","index","getUUIDFromAddressOfNormalAccount","EthMethod","PersonalSign","Sign","SignTransaction","SignTypedDataV1","SignTypedDataV3","SignTypedDataV4","snapKeyring","SnapKeyring","addresses","isNormalKeyringType","isUnlocked","keyrings","updatedNormalKeyringAddresses","updatedSnapKeyringAddresses","snap","previousNormalInternalAccounts","previousSnapInternalAccounts","accumulator","addedAccounts","deletedAccounts","existingAccounts","snapState","snaps","currentAccount","snapId","storedSnap","enabled","blocked","simple","accountToSelect","sort","accountA","accountB","startsWith","parseCaipChainId","namespace","accountsState","newAccount","isFirstAccount","newAccountWithUpdatedMetadata","metadataKey","registerActionHandler","AccountsController_1","getUUIDOptionsFromAddressOfNormalAccount","util_1","sha256_1","uuid_1","random","sha256","toBuffer","slice","isCustodyKeyring","trezor","ledger","lattice","qr","v4","_basecontroller","_controllerutils","AddressType","AddressType2","AddressBookController","BaseControllerV1","config","addressBook","initialize","clear","toChecksumHexAddress","every","isSafeDynamicKey","isValidHexAddress","assign","toHex","memo","addressType","entry","isEns","ensName","normalizeEnsName","AddressBookController_default","_chunkZEYDK2CLjs","defaultConfig","disabled","internalConfig","internalState","internalListeners","initialState","initialConfig","configure","overwrite","fullUpdate","notify","listener","unsubscribe","findIndex","cb","BaseControllerV1_default","_actions","_initialEventPayloadGetters","_eventPayloadCache","_chunkUJFCPTF3js","_chunkZ4BLTVTBjs","WeakMap","ControllerMessenger","__privateAdd","actionType","handler","__privateGet","unregisterActionHandler","clearActions","registerInitialEventPayload","eventType","getPayload","subscribers","selector","entries","previousValue","newValue","initialValue","clearEventSubscriptions","clearSubscriptions","getRestricted","allowedActions","allowedEvents","RestrictedControllerMessenger","controller","METAMASK_ALLOWED_METHODS","PORTFOLIO_ORIGINS","PORTFOLIO_ALLOWED_METHODS","originMetadata","getSubjectMetadata","_permissionController","SubjectType","Website","isProtocolAllowed","WEBSITE_ALLOWED_METHODS","_keyringApi","KeyringRpcMethod","ListAccounts","GetAccount","FilterAccountChains","DeleteAccount","ListRequests","GetRequest","SubmitRequest","RejectRequest","CreateAccount","UpdateAccount","ExportAccount","ApproveRequest","GetAccountBalances","ALLOWED_PROTOCOLS","URL","protocol","_internalState","_immer","enablePatches","deriveStateFromMetadata","metadataProperty","derivedState","stateMetadata","propertyMetadata","stateProperty","__privateSet","freeze","nextState","patches","inversePatches","produceWithPatches","applyPatches","destroy","getAnonymizedState","getPersistentState","_controllerMessenger","_controllerName","_allowedActions","_allowedEvents","_isAllowedEvent","isAllowedEvent_fn","_isAllowedAction","isAllowedAction_fn","_isInCurrentNamespace","isInCurrentNamespace_fn","__privateMethod","action","__accessCheck","member","getter","setter","_chunkFTHCJ6HYjs","_chunkIURK6TKDjs","_chunkG42723LGjs","_addAnnouncements","addAnnouncements_fn","announcements","AnnouncementController","allAnnouncements","mergedState","resetViewed","announcement","isShown","updateViewed","viewedIds","_chunkZGM3XNIOjs","getAccountType","getDeviceModel","_account$metadata$sna","_snap","_snap2","_account$metadata$sna2","account_type","device_model","account_hardware_type","_keyring$type","getHardwareWalletType","account_snap_type","account_snap_version","version","_ethSnapKeyring","_webextensionPolyfill","_translate","_icon","_isBlockedUrl","_showResult","showAccountCreationDialog","SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES","confirmAccountCreation","e","showAccountNameSuggestionDialog","accountNameSuggestion","showNameSnapAccount","snapSuggestedAccountName","getAccountsBySnapId","getSnapKeyring","snapKeyringBuilder","getSnapController","persistKeyringHelper","removeAccountHelper","trackEvent","getSnapName","isSnapPreinstalled","builder","addressExists","redirectUser","isBlocked","isBlockedUrl","urlToTest","confirmationResult","showSnapAccountRedirect","tabs","create","console","log","saveState","addAccount","handleUserInput","displayConfirmation","snapName","addAccountFlowId","trackSnapAccountEvent","Accounts","MetaMetricsEventAccountType","Snap","snap_id","snap_name","learnMoreLink","skipConfirmation","accountCreationConfirmationResult","accountNameConfirmationResult","success","AddSnapAccountSuccessViewed","showSuccess","IconName","UserCircleAdd","title","t","AddSnapAccountSuccessClicked","AccountAdded","showError","removeAccount","removeAccountApprovalId","confirmAccountRemoval","publicAddress","RemoveSnapAccountSuccessViewed","UserCircleRemove","RemoveSnapAccountSuccessClicked","AccountRemoveFailed","AccountRemoved","_keyringSnapsPermissions","maybeUpdateState","testOrigin","snapAuthorshipHeader","header","newState","REMOVE_KEYS","snapsData","snapData","newData","sourceCode","auxiliaryFiles","stripLargeSnapData","sanitizeSnapData","_uuid","_loglevel","_metamaskController","_alarms","_mv","_buildTypes","_preferences","AppStateController","addUnlockListener","onInactiveTimeout","preferencesStore","extension","timeoutMinutes","DEFAULT_AUTO_LOCK_TIME_LIMIT","connectedStatusPopoverHasBeenShown","defaultHomeActiveTabName","browserEnvironment","popupGasPollTokens","notificationGasPollTokens","fullScreenGasPollTokens","recoveryPhraseReminderHasBeenShown","recoveryPhraseReminderLastShown","getTime","outdatedBrowserWarningLastShown","nftsDetectionNoticeDismissed","showTestnetMessageInDropdown","showBetaHeader","isBeta","showPermissionsTour","showNetworkBanner","showAccountBanner","trezorModel","currentPopupId","onboardingDate","newPrivacyPolicyToastClickedOrClosed","newPrivacyPolicyToastShownDate","hadAdvancedGasFeesSetPriorToMigration92_3","qrHardware","nftsDropdownState","usedNetworks","surveyLinkLastClickedOrClosed","signatureSecurityAlertResponses","switchedNetworkDetails","switchedNetworkNeverShowMessage","currentExtensionPopupId","lastInteractedConfirmationInfo","waitingForUnlock","handleUnlock","preferences","autoLockTimeLimit","_setInactiveTimeout","_approvalRequestId","shouldShowUnlockRequest","waitForUnlock","emit","METAMASK_CONTROLLER_EVENTS","UPDATE_BADGE","_requestApproval","shift","_acceptApproval","setDefaultHomeActiveTabName","setConnectedStatusPopoverHasBeenShown","setRecoveryPhraseReminderHasBeenShown","setSurveyLinkLastClickedOrClosed","time","setOnboardingDate","setNewPrivacyPolicyToastClickedOrClosed","setNewPrivacyPolicyToastShownDate","setRecoveryPhraseReminderLastShown","lastShown","setTermsOfUseLastAgreed","lastAgreed","termsOfUseLastAgreed","setSnapsInstallPrivacyWarningShownStatus","shown","snapsInstallPrivacyWarningShown","setOutdatedBrowserWarningLastShown","setLastActiveTime","_resetTimer","isManifestV3","alarms","AUTO_LOCK_TIMEOUT_ALARM","timeoutToSet","delayInMinutes","periodInMinutes","onAlarm","addListener","alarmInfo","MINUTE","setBrowserEnvironment","os","browser","addPollingToken","pollingToken","pollingTokenType","POLLING_TOKEN_ENVIRONMENT_TYPES","ENVIRONMENT_TYPE_BACKGROUND","prevState","removePollingToken","token","clearPollingTokens","setShowTestnetMessageInDropdown","setShowBetaHeader","setShowPermissionsTour","setShowNetworkBanner","setShowAccountBanner","setCurrentExtensionPopupId","setSwitchedNetworkDetails","clearSwitchedNetworkDetails","setSwitchedNetworkNeverShowMessage","setTrezorModel","updateNftDropDownState","setFirstTimeUsedNetwork","getSignatureSecurityAlertResponse","securityAlertId","addSignatureSecurityAlertResponse","securityAlertResponse","setCurrentPopupId","getLastInteractedConfirmationInfo","setLastInteractedConfirmationInfo","getCurrentPopupId","ORIGIN_METAMASK","ApprovalType","Unlock","transactionData","fourBytePrefix","signature","_fourByte","getMethodFrom4Byte","split","inputs","typeString","indexOf","nested","nestedBrackets","findFirstNestedBrackets","start","createInput","parseSignature","valueData","_ethereumjsUtil","addHexPrefix","_abi","Interface","getAbiCoder","decode","decodeParam","_utils","createProjectLogger","_input$components","children","components","child","childIndex","endsWith","childType","_arrayItem","arrayIndex","childName","parts","nestedIndex","i","contractAddress","ethQuery","all","IMPLEMENTATION_STORAGE_SLOTS","storageSlot","query","stripHexPrefix","EMPTY_RESULT","padEnd","_metadata$output$user","_metadata$output$devd","_response$files","chainIdDecimal","respose","json","fetchSourcifyFiles","files","file","parse","content","fetchSourcifyMetadata","abi","output","contractInterface","functionSignature","functionData","getFunction","buildSignature","userDoc","userdoc","devDoc","devdoc","description","notice","details","decodeFunctionData","_userDoc$params","_devDoc$params","paramName","paramDescription","join","UNISWAP_ROUTER_COMMANDS","supportedAddresses","UNISWAP_UNIVERSAL_ROUTER_ADDRESSES","ABI","parsedTransactionData","parseTransaction","commands","args","commandByte","commandValue","commandIndex","_uniswapCommands","types","param","rawData","rawPath","pools","remainingData","currentPool","isParsingAddress","ADDRESS_LENGTH","firstAddress","secondAddress","tickSpacing","TICK_SPACING_LENGTH","decodeUniswapPath","decodeUniswapCommand","command","_network","CHAIN_IDS","ARBITRUM","AVALANCHE","BASE","BSC","MAINNET","OPTIMISM","POLYGON","SEPOLIA","constant","_ethProvider","_getChainEnsSupport","getChainEnsSupport_fn","_providers","DEFAULT_ENS_NETWORK_MAP","ensEntries","ensResolutionsByAddress","EnsController","registriesByChainId","onNetworkDidChange","fromEntries","selectedNetworkClientId","resetState","currentChainId","configuration","Web3Provider","convertHexToDecimal","CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP","ensAddress","normalizedEnsName","isInteger","normalizedAddress","subState","reverseResolveAddress","nonChecksummedAddress","domain","registeredAddress","lookupAddress","resolveName","toASCII","EnsController_default","_chunkBG4UCEGMjs","uniswapData","_uniswap","decodeUniswapRouterTransactionData","normalizeDecodedMethods","source","_transactionDecode","DecodedTransactionDataSource","Uniswap","proxyAddress","_proxy","getContractProxyAddress","sourcifyData","_sourcify","decodeTransactionDataWithSourcify","fourByteData","decodeTransactionDataWithFourByte","sourcifyResult","fourByteResult","allSettled","Sourcify","FourByte","normalizeDecodedParam","normalizeDecodedMethod","_param$children","normalizeDecodedParamValue","hexValue","_hex","module","manifest","proposedName","repository","shasum","location","npm","filePath","iconPath","packageName","registry","initialPermissions","manifestVersion","removable","_ethQuery","_bignumber","_transactionController","_gas","_transaction","_transactionsControllerUtils","_conversion","_metametrics2","_transaction2","_metrics","_metrics2","METRICS_STATUS_FAILED","handleTransactionAdded","transactionMetricsRequest","transactionEventPayload","transactionMeta","sensitiveProperties","buildEventFragmentProperties","createTransactionEventFragment","eventName","TransactionMetaMetricsEvent","added","handleTransactionApproved","createUpdateFinalizeTransactionEventFragment","approved","handleTransactionFailed","extraParams","finalized","handleTransactionConfirmed","txReceipt","gas_used","gasUsed","submittedTime","completion_time","round","getTransactionCompletionTime","actionId","handleTransactionDropped","dropped","handleTransactionRejected","rejected","handleTransactionSubmitted","submitted","createTransactionEventFragmentWithTxId","transactionId","getTransaction","getEventFragmentById","uniqueId","getUniqueId","hasFragment","uniqueIdentifier","createEventFragment","Transactions","initialEvent","successEvent","failureEvent","updateEventFragment","updateTransactionEventFragment","finalizeEventFragment","abandoned","finalizeTransactionEventFragment","_blockaidProperties$u","txParams","gasPrice","gas","gasLimit","maxFeePerGas","maxPriorityFeePerGas","estimateSuggested","estimateUsed","defaultGasEstimates","originalType","replacedById","customTokenAmount","dappProposedTokenAmount","currentTokenBalance","originalApprovalAmount","finalApprovalAmount","securityProviderResponse","simulationFails","assetType","tokenStandard","determineTransactionAssetType","getTokenStandardAndDetails","contractMethodName","getMethodData","gasParams","isEIP1559Transaction","max_fee_per_gas","max_priority_fee_per_gas","gas_price","_transactionMeta$defa3","_transactionMeta$defa4","estimateType","_transactionMeta$defa","_transactionMeta$defa2","default_estimate","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","GasRecommendations","low","medium","high","_gasFeeEstimates$esti","_gasFeeEstimates$esti3","gasFeeEstimates","getEIP1559GasFeeEstimates","_gasFeeEstimates$esti2","_gasFeeEstimates$esti4","suggestedMaxFeePerGas","default_max_fee_per_gas","suggestedMaxPriorityFeePerGas","default_max_priority_fee_per_gas","default_gas","default_gas_price","estimate_suggested","estimate_used","gasParamsInGwei","gasValuesInGwei","isHexString","hexWEIToDecGWEI","getGasValuesInGWEI","eip1559Version","contractInteractionTypes","TransactionType","contractInteraction","tokenMethodApprove","tokenMethodIncreaseAllowance","tokenMethodSafeTransferFrom","tokenMethodSetApprovalForAll","tokenMethodTransfer","tokenMethodTransferFrom","swap","swapAndSend","swapApproval","contractMethodNames","transactionApprovalAmountType","transactionContractMethod","transactionApprovalAmountVsProposedRatio","transactionApprovalAmountVsBalanceRatio","transactionType","simpleSend","cancel","retry","deployContract","TokenStandard","ERC20","TransactionApprovalAmountType","revoke","dappProposed","BigNumber","div","times","allowanceAmountInRelationToDappProposedValue","allowanceAmountInRelationToTokenBalance","replacedTransactionMeta","TRANSACTION_REPLACEMENT_METHODS","RETRY","CANCEL","SAME_NONCE","transactionReplaced","uiCustomizations","isAdvancedDetailsOpen","flagAsDangerous","MetaMetricsEventUiCustomization","FlaggedAsMalicious","FlaggedAsSafetyUnknown","blockaidProperties","getBlockaidMetricsProps","ui_customizations","GasEstimationFailed","isRedesignedConfirmationsDeveloperSettingEnabled","getIsRedesignedConfirmationsDeveloperEnabled","isRedesignedTransactionsUserSettingEnabled","getRedesignedTransactionsEnabled","REDESIGN_DEV_TRANSACTION_TYPES","REDESIGN_USER_TRANSACTION_TYPES","RedesignedConfirmation","getIsConfirmationAdvancedDetailsOpen","smartTransactionMetricsProperties","getSmartTransactionMetricsProperties","swapAndSendMetricsProperties","getSwapAndSendMetricsProps","chain_id","network","eip_1559_version","gas_edit_type","gas_edit_attempted","gas_estimation_failed","getSelectedAddress","asset_type","token_standard","transaction_type","transaction_speed_up","transaction_advanced_view","snapAndHardwareInfo","getSnapAndHardwareInfoForMetrics","snapAndHardwareMessenger","transaction_approval_amount_type","transaction_envelope_type","TRANSACTION_ENVELOPE_TYPE_NAMES","FEE_MARKET","LEGACY","first_seen","gas_limit","transaction_contract_method","transaction_replaced","transaction_approval_amount_vs_balance_ratio","transaction_approval_amount_vs_proposed_ratio","handlePostTransactionBalanceUpdate","getParticipateInMetrics","approvalTransactionMeta","_transactionMeta$txRe","swapMetaData","Swaps","_transactionMeta$txRe2","tokensReceived","getSwapsTokensReceivedFromTxMeta","destinationTokenSymbol","destinationTokenAddress","destinationTokenDecimals","quoteVsExecutionRatio","token_to_amount","estimatedVsUsedGasRatio","estimated_gas","transactionsCost","_transactionMeta$txRe3","_transactionMeta$txRe4","approvalGasCost","calcGasTotal","effectiveGasPrice","tradeGasCost","tradeAndApprovalGasCost","plus","approvalGasCostInEth","hexWEIToDecETH","tradeGasCostInEth","tradeAndApprovalGasCostInEth","calculateTransactionsCost","SwapCompleted","token_to_amount_received","quote_vs_executionRatio","estimated_vs_used_gasRatio","approval_gas_cost_in_eth","trade_gas_cost_in_eth","trade_and_approval_gas_cost_in_eth","_types","_transactionController2","_smartTransactions","_classPrivateFieldInitSpec","privateMap","_classPrivateFieldGet","descriptor","_classApplyDescriptorGet","_classExtractFieldDescriptor","_classPrivateFieldSet","_classApplyDescriptorSet","_approvalFlowEnded","_approvalFlowId","_chainId","_featureFlags","_isDapp","_isSmartTransaction","_smartTransactionsController","_transactionMeta","_signedTransactionInHex","_txParams","_onApproveOrReject","_addApprovalRequest","_updateApprovalRequest","_addListenerToUpdateStatusPage","_waitForTransactionHash","_signAndSubmitTransactions","_applyFeeToTransaction","_createSignedTransactions","SmartTransactionHook","request","signedTransactionInHex","smartTransactionsController","transactionController","isSmartTransaction","featureFlags","submit","_classPrivateFieldGet2","isUnsupportedTransactionTypeForSmartTransaction","useRegularTransactionSubmit","transactionHash","approvalFlowId","getFeesResponse","getFees","_onApproveOrReject2","_classPrivateFieldGet3","submitTransactionResponse","_signAndSubmitTransactions2","uuid","returnTxHashAsap","smartTransactions","_addApprovalRequest2","_addListenerToUpdateStatusPage2","txHash","_waitForTransactionHash2","onApproveOrRejectWrapper","SMART_TRANSACTION_CONFIRMATION_TYPES","showSmartTransactionStatusPage","requestState","smartTransaction","SmartTransactionStatuses","PENDING","creationTime","isDapp","txId","_updateApprovalRequest2","statusMetadata","debug","minedHash","signedTransactions","_getFeesResponse$trad","_createSignedTransactions2","tradeTxFees","fees","submitSignedTransactions","signedCanceledTransactions","_applyFeeToTransaction2","fee","isCancel","unsignedTransaction","decimalToHex","CANCEL_GAS_LIMIT_DEC","to","transactionsWithChainId","tx","approveTransactionsWithSameNonce","hasNonce","submitSmartTransactionHook","dappRequest","traceContext","transactionOptions","requireApproval","_trace","endTrace","TraceName","Middleware","waitForHash","addTransactionOrUserOperation","hash","Transaction","ppomController","securityAlertsEnabled","transactionParams","updateSecurityAlertResponse","isCurrentChainSupported","_ppomUtil","isChainSupported","typeIsExcludedFromPPOM","_securityProvider","SECURITY_PROVIDER_EXCLUDED_TRANSACTION_TYPES","some","_transactionParams$to","ppomRequest","jsonrpc","generateSecurityAlertId","validateRequestWithPPOM","loadingSecurityAlertResponse","LOADING_SECURITY_ALERT_RESPONSE","handlePPOMError","validateSecurity","waitForSubmit","transactions","getTransactionByHash","Erc4337","_transactionOptions$s","userOperationController","normalisedTransaction","swaps","meta","addUserOperationFromTransaction","startPollingByNetworkClientId","getTransactionById","addUserOperationWithController","addTransaction","addTransactionWithController","networkController","trustedSigners","_verification","TRUSTED_SIGNERS","_res","next","ETH_SEND_TRANSACTION","isObject","hasProperty","isValidParams","_selectors","getCurrentChainId","metamask","experienceType","getExperience","EXPERIENCES_TO_VERIFY","TX_SIG_LEN","addressToVerify","_wallet","verifyMessage","paramsToVerify","_hash","hashMessage","hashParams","_rpcErrors","rpcErrors","_baseController","_bridge","_constants","bridgeState","BridgeController","BRIDGE_CONTROLLER_NAME","DEFAULT_BRIDGE_CONTROLLER_STATE","_state","bridgeFeatureFlags","fetchBridgeFeatureFlags","setBridgeFeatureFlags","BaseFilter","allResults","addResults","newResults","concat","addInitialResults","getAllResults","SafeEventEmitter","updates","getChangesAndClear","getBlocksForRange","incrementHexInt","oldBlock","newBlock","toBlock","fromBlock","blockHashes","block","hexToInt","hexString","intToHex","int","sendAsync","reject","fromBlockNumber","toBlockNumber","missingBlockNumbers","fill","blockBodies","blockNum","stack","sortBlockRefs","refs","refA","refB","unsafeRandomNibble","floor","minBlockRef","maxBlockRef","sortedRefs","bnToHex","bn","blockRefIsNumber","blockRef","unsafeRandomBytes","byteCount","Mutex","createAsyncMiddleware","createScaffoldMiddleware","LogFilter","BlockFilter","TxFilter","toFilterCreationMiddleware","createFilterFn","toAsyncRpcMiddleware","asyncFn","apply","objValues","blockTracker","filterIndex","filters","mutex","waitForFree","middleware","acquire","mutexMiddlewareWrapper","eth_newFilter","newLogFilter","eth_newBlockFilter","newBlockFilter","eth_newPendingTransactionFilter","newPendingTransactionFilter","eth_uninstallFilter","uninstallFilterHandler","eth_getFilterChanges","getFilterChanges","eth_getFilterLogs","getFilterLogs","filterUpdater","releaseLock","uninstallFilter","prevFilterCount","updateBlockTrackerSubs","newFilterCount","uninstallAllFilters","installFilter","filterIndexHex","results","currentBlock","getLatestBlock","idHex","on","removeListener","EthQuery","pify","BaseFilterWithHistory","topics","newLogs","_fetchLogs","matchingLogs","matchLog","getLogs","blockNumber","normalizedLogAddress","topicPattern","logTopic","subtopicsToMatch","topic","topicDoesMatch","createRandomId","extend","currentProvider","generateFnFor","methodName","pop","generateFnWithDefaultBlockFor","argCount","prototype","getBalance","getCode","getTransactionCount","getStorageAt","protocolVersion","syncing","coinbase","mining","hashrate","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getUncleCountByBlockHash","getUncleCountByBlockNumber","sign","sendTransaction","sendRawTransaction","estimateGas","getBlockByHash","getBlockByNumber","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getCompilers","compileLLL","compileSolidity","compileSerpent","newFilter","getWork","submitWork","submitHashrate","improvedError","_JsonRpcEngine_instances","_a","_JsonRpcEngine_isDestroyed","_JsonRpcEngine_middleware","_JsonRpcEngine_notificationHandler","_JsonRpcEngine_assertIsNotDestroyed","_JsonRpcEngine_handleBatch","_JsonRpcEngine_handle","_JsonRpcEngine_processRequest","_JsonRpcEngine_runAllMiddleware","_JsonRpcEngine_runMiddleware","_JsonRpcEngine_runReturnHandlers","_JsonRpcEngine_checkForCompletion","__awaiter","thisArg","_arguments","P","generator","fulfilled","step","__classPrivateFieldSet","__importDefault","mod","JsonRpcEngine","rpc_errors_1","safe_event_emitter_1","notificationHandler","handle","_promiseHandle","asMiddleware","middlewareError","isComplete","returnHandlers","handlerCallback","jsonify","requests","JsonRpcError","errorCodes","invalidRequest","responses","callerReq","_b","isJsonRpcRequest","_error","serializeError","middlewares","reverse","parsedError","returnHandler","handlers","_readableStream","_assetsControllers","_asStream","_jsonRpcEngine","_jsonRpcMiddlewareStream","_ethJsonRpcMiddleware","_keyringController","_ethJsonRpcFilters","_subscriptionManager","_awaitSemaphore","_ethTrezorKeyring","_ethLedgerBridgeKeyring","_ethLatticeKeyring","_metamaskAirgappedKeyring","_ethjsQuery","_nanoid","_browser","_addressBookController","_approvalController","_ensController","_phishingController","_announcementController","_networkController","_gasFeeController","_selectedNetworkController","_loggingController","_permissionLogController","_rateLimitController","_notificationController","_snapsControllers","_snapsRpcMethods","_accountsController","_signatureController","_ppomValidator","_english","_nameController","_queuedRequestController","_userOperationController","_snapsUtils","_metamaskEthAbis","_profileSyncController","_notificationServicesController","_methodsTags","_swaps","_hardwareWallets","_keyring2","_permissions","_notifications","_logs","_tokenUtil","_stringUtils","_tokens","_metamaskControllerUtils","_network2","_caipStream","_urls","_selectors2","_metamask","_BalancesController","_smartTransactions2","_SnapsNameProvider","_AddressBookPetnamesBridge","_AccountIdentitiesPetnamesBridge","_ppomMiddleware","PPOMModule","r","_getRequireWildcardCache","n","__proto__","a","getOwnPropertyDescriptor","u","hasOwnProperty","_interopRequireWildcard","_detectMultipleInstances","_ComposableObservableStore","_accountTracker","_createDupeReqFilterStream","_createLoggerMiddleware","_rpcMethodMiddleware","_createOriginMiddleware","_createTabIdMiddleware","_networkOrder","_accountOrder","_createOnboardingMiddleware","_streamUtils","_preferencesController","_appState","_alert","_onboarding","_backup","_decryptMessage","_swaps2","_segment","_createMetaRPCHandler","_createMetamaskMiddleware","_hardwareKeyringBuilderFactory","_encryptionPublicKey","_appMetadata","_permissions2","_metametricsDataDeletion","_dataDeletionService","_createRPCMethodTrackingMiddleware","_indexedDbBackend","_trezorOffscreenBridge","_ledgerOffscreenBridge","_encryptorFactory","_util2","_latticeOffscreenKeyring","_preinstalledSnaps","_WeakRefObjectMap","_stream","_txVerificationMiddleware","_createEvmMethodsToNonEvmAccountReqFilterMiddleware","_address2","_util3","_bridgeController","_pushNotifications","_createTracingMiddleware","_PatchStore","_stateUtils","APPROVAL_STATE_CHANGE","QUEUED_REQUEST_STATE_CHANGE","METAMASK_NOTIFICATIONS_LIST_UPDATED","METAMASK_NOTIFICATIONS_MARK_AS_READ","NOTIFICATIONS_STATE_CHANGE","_onPreferencesControllerStateChange","_checkTokenListPolling","_isTokenListPollingRequired","MetamaskController","_this$opts$overrides","wrap","memoize","throttle","_this$_getSnapMetadat","metaMetricsController","SnapExportUsed","Snaps","export","snap_category","_getSnapMetadata","getFunc","tokensController","nftController","watchNft","subjects","permissionController","revokePermissions","exp","PermissionsRequestNotFoundError","target","caveatType","caveatValue","chainIds","networkOrderController","updateNetworksList","pinnedAccountList","accountOrderController","updateAccountsList","hiddenAccountList","updateHiddenAccountsList","requestId","rejectPermissionsRequest","acceptPermissionsRequest","approvalController","accept","ApprovalRequestNotFoundError","EthereumRpcError","isFirstMetaMaskControllerSetup","defaultMaxListeners","sendUpdate","debounce","privateSendUpdate","MILLISECOND","platform","notificationManager","recordFirstTimeInfo","activeControllerConnections","offscreenPromise","getRequestAccountTabIds","getOpenMetamaskTabsIds","loggingController","LoggingController","localStoreApiWrapper","localStore","connections","createVaultMutex","runtime","onInstalled","reason","LogType","GenericLog","LOG_EVENT","VERSION_UPDATE","previousVersion","appMetadataController","clearPendingConfirmations","encryptionPublicKeyController","clearUnapproved","decryptMessageController","signatureController","userRejectedRequest","queuedRequestController","QueuedRequestController","shouldRequestSwitchNetwork","methodsRequiringNetworkSwitch","showApprovalRequest","showUserConfirmation","ApprovalController","typesExcludedFromRateLimiting","EthSignTypedData","WatchAsset","EthGetEncryptionPublicKey","EthDecrypt","networkControllerMessenger","initialNetworkControllerState","NetworkController","getDefaultNetworkControllerState","networks","networkConfigurationsByChainId","MAINNET_DISPLAY_NAME","GOERLI","LINEA_GOERLI","blockExplorerUrls","BlockExplorerUrl","defaultBlockExplorerUrlIndex","infuraProjectId","initializeProvider","getProviderAndBlockTracker","deprecatedNetworkVersions","accountsControllerMessenger","accountsController","preferencesMessenger","preferencesController","PreferencesController","initLangCode","tokenListMessenger","tokenListController","TokenListController","preventPollingOnNetworkRestart","_isTokenListPollingRequired2","assetsContractControllerMessenger","assetsContractController","AssetsContractController","tokensControllerMessenger","TokensController","nftControllerMessenger","NftController","onNftAdded","symbol","standard","NftAdded","Wallet","token_contract_address","token_symbol","token_id","AssetType","NFT","setApiKey","nftDetectionControllerMessenger","nftDetectionController","NftDetectionController","getOpenSeaApiKey","openSeaApiKey","getBalancesInSingleCall","addNft","getNftState","useNftDetection","getNetworkIdentifier","rpcUrl","getProviderConfig","NETWORK_TYPES","RPC","environment","MetaMetricsController","captureException","handleMetaMaskStateUpdate","dataDeletionService","DataDeletionService","metaMetricsDataDeletionMessenger","metaMetricsDataDeletionController","MetaMetricsDataDeletionController","getMetaMetricsId","gasFeeMessenger","gasApiBaseUrl","GAS_API_BASE_URL","gasFeeController","GasFeeController","interval","clientId","SWAPS_CLIENT_ID","getProvider","eventHandler","getCurrentNetworkEIP1559Compatibility","getEIP1559Compatibility","getCurrentAccountEIP1559Compatibility","legacyAPIEndpoint","EIP1559APIEndpoint","getCurrentNetworkLegacyGasAPICompatibility","getChainId","appStateController","setLocked","currencyRateMessenger","currencyRateController","CurrencyRateController","includeUsdRate","CurrencyController","initialFetchExchangeRate","fetchExchangeRate","useCurrencyRateCheck","conversionRate","usdConversionRate","phishingControllerMessenger","phishingController","PhishingController","hotlistRefreshInterval","stalelistRefreshInterval","PPOMController","storageBackend","IndexedDBPPOMStorage","ppomProvider","PPOM","ppomInit","onPreferencesChange","cdnBaseUrl","blockaidPublicKey","announcementMessenger","announcementController","UI_NOTIFICATIONS","networkOrderMessenger","NetworkOrderController","accountOrderMessenger","AccountOrderController","multichainBalancesControllerMessenger","multichainBalancesController","BalancesController","MultichainBalancesController","multichainRatesControllerMessenger","multichainRatesController","RatesController","MultichainRatesController","fetchMultiExchangeRate","tokenRatesMessenger","tokenRatesController","TokenRatesController","tokenPricesService","CodefiTokenPricesServiceV2","previousValueComparator","currState","prevUseCurrencyRateCheck","currUseCurrencyRateCheck","stop","ensController","onboardingControllerMessenger","onboardingController","OnboardingController","additionalKeyrings","keyringBuilderFactory","MetaMaskKeyring","keyringOverrides","overrides","additionalKeyringTypes","additionalBridgedKeyringTypes","TrezorKeyring","bridge","trezorBridge","TrezorConnectBridge","LedgerKeyring","ledgerBridge","LedgerIframeBridge","hardwareKeyringBuilderFactory","TrezorOffscreenBridge","LedgerOffscreenBridge","LatticeKeyringOffscreen","snapKeyringBuildMessenger","snapController","keyringController","persistAllKeyrings","currentLocale","getLocale","stripSnapPrefix","localizationFiles","getLocalizedSnapManifest","keyringControllerMessenger","KeyringController","cacheEncryptionKey","keyringBuilders","encryptor","encryptorFactory","_onUnlock","_onLock","_onKeyringControllerUpdate","PermissionController","caveatSpecifications","getCaveatSpecifications","getInternalAccounts","findNetworkClientIdByChainId","permissionSpecifications","getPermissionSpecifications","getAllAccounts","captureKeyringTypesWithMissingIdentities","keyringTypesWithMissingIdentities","getAccountKeyringType","internalAccountCount","accountTrackerCount","accountTracker","getSnapPermissionSpecifications","unrestrictedMethods","selectedNetworkController","SelectedNetworkController","useRequestQueuePreference","useRequestQueue","onPreferencesStateChange","domainProxyMap","WeakRefObjectMap","permissionLogController","PermissionLogController","restrictedMethods","RestrictedMethods","subjectMetadataController","SubjectMetadataController","subjectCacheLimit","shouldUseOffscreenExecutionService","chrome","offscreen","snapExecutionServiceArgs","setupSnapProvider","snapExecutionService","IframeExecutionService","iframeUrl","OffscreenExecutionService","snapControllerMessenger","requireAllowlist","SnapController","environmentEndowmentPermissions","EndowmentPermissions","excludedPermissions","ExcludedSnapPermissions","ExcludedSnapEndowments","closeAllConnections","removeAllConnections","dappsCanUpdateSnaps","allowLocalSnaps","getMnemonic","getPrimaryKeyringMnemonic","preinstalledSnaps","getFeatureFlags","disableSnaps","useExternalServices","notificationController","NotificationController","rateLimitController","RateLimitController","implementations","showNativeNotification","subjectMetadata","_showNotification","rateLimitCount","rateLimitTimeout","showInAppNotification","cronjobControllerMessenger","cronjobController","CronjobController","snapsRegistryMessenger","snapsRegistry","JsonSnapsRegistry","SnapsRegistry","refetchOnAllowlistMiss","publicKey","snapInterfaceControllerMessenger","snapInterfaceController","SnapInterfaceController","snapInsightsControllerMessenger","snapInsightsController","SnapInsightsController","authenticationController","AuthenticationController","Controller","metametrics","agent","userStorageController","UserStorageController","getMetaMetricsState","participateInMetaMetrics","accountSyncing","onAccountAdded","profileId","ProfileSyncing","AccountsSyncAccountAdded","profile_id","onAccountNameUpdated","AccountsSyncAccountNameUpdated","env","isAccountSyncingEnabled","notificationServicesPushControllerMessenger","notificationServicesPushController","NotificationServicesPushController","apiKey","authDomain","storageBucket","projectId","messagingSenderId","appId","measurementId","vapidKey","isPushEnabled","onPushNotificationReceived","onPushNotificationClicked","notification","PushNotifications","PushNotificationReceived","notification_id","notification_type","PushNotificationClicked","notificationServicesController","NotificationServicesController","isPushIntegrated","featureAnnouncements","spaceId","accessToken","providerConfig","onAccountRemoved","completedOnboarding","triggerNetworkrequests","stopNetworkRequests","prevCompletedOnboarding","currCompletedOnboarding","_addAccountsWithBalance","postOnboardingInitialization","tokenDetectionController","detectTokens","tokenDetectionControllerMessenger","TokenDetectionController","trackMetaMetricsEvent","addressBookController","alertController","AlertController","snapAndHardwareMetricsParams","transactionControllerMessenger","txController","TransactionController","getExternalPendingTransactions","getGasFeeEstimates","fetchGasFeeEstimates","getNetworkClientRegistry","getNetworkState","getPermittedAccounts","getSavedGasFees","advancedGasFee","incomingTransactions","includeTokenTransfers","isEnabled","_this$preferencesCont","incomingTransactionsPreferences","queryEntireHistory","updateTransactions","isMultichainEnabled","isSimulationEnabled","useTransactionSimulations","onNetworkStateChange","pendingTransactions","isResubmitEnabled","_getMetaMaskState","getSmartTransactionsOptInStatus","getCurrentChainSupportsSmartTransactions","testGasFeeFlows","trace","hooks","_publishSmartTransactionHook","signTransaction","_addTransactionControllerListeners","metricsEvent","getEncryptionPublicKey","SignatureController","getAllState","hub","swapsControllerMessenger","swapsController","getBufferedGasLimit","txMeta","multiplier","estimateGasBuffered","getLayer1GasFee","SwapsController","bridgeControllerMessenger","bridgeController","smartTransactionsControllerMessenger","supportedChainIds","getAllowedSmartTransactionsChainIds","getNonceLock","confirmExternalTransaction","SmartTransactionsController","getTransactions","getMetaMetricsProps","accountHardwareType","accountType","deviceModel","isExternalNameSourcesEnabled","useExternalNameSources","nameController","NameController","providers","ENSNameProvider","reverseLookup","EtherscanNameProvider","TokenNameProvider","LensNameProvider","SnapsNameProvider","petnamesBridgeMessenger","AddressBookPetnamesBridge","init","AccountIdentitiesPetnamesBridge","UserOperationController","entrypoint","_onUserOperationAdded","_onUserOperationTransactionUpdated","metamaskMiddleware","static","eth_syncing","web3_clientVersion","innerOrigin","suppressUnauthorizedError","processTransaction","addDappTransaction","getAddTransactionRequest","processTypedMessage","newUnsignedTypedMessage","processTypedMessageV3","processTypedMessageV4","processPersonalMessage","newUnsignedPersonalMessage","processEncryptionPublicKey","newRequestEncryptionPublicKey","processDecryptMessage","newRequestDecryptMessage","getPendingNonce","getPendingTransactionByHash","TransactionStatus","memState","_onStateUpdate","resetOnRestartStore","AccountTracker","DecryptMessageController","EncryptionPublicKeyController","updateStructure","memStore","TxController","resetMethods","resetStates","storage","session","_startUISync","getPlatformInfo","getBrowserInfo","setupControllerEventSubscriptions","setupMultichainDataAndSubscriptions","publicConfigStore","createPublicConfigStore","onMessageExternal","onMessageReceived","checkForMultipleVersionsRunning","usePhishDetect","lookupNetwork","preferencesControllerState","useTokenDetection","Onboarding","MetaMetricsUserTrait","TokenDetectionEnabled","NftAutodetectionEnabled","startIncomingTransactionPolling","stopIncomingTransactionPolling","disable","resetMethod","getKeyringsByType","KeyringType","addNewKeyring","trackInsightSnapView","InsightSnapViewed","_this$snapsRegistry$s","database","verifiedSnaps","handleSnapRequest","_trackSnapExportUsage","buildSnapEndowmentSpecifications","buildSnapRestrictedMethodSpecifications","getPreferences","locale","currency","currentCurrency","clearSnapState","getSnap","handleSnapRpcRequest","getSnapState","addAndShowApprovalRequest","updateSnapState","maybeUpdatePhishingList","isOnPhishingList","sender","createInterface","getInterface","dismissNotifications","ids","dismiss","markNotificationsAsRead","markRead","lastSelectedAddress","_onPreferencesControllerStateChange2","_onAccountChange","currentValue","changedAccounts","getChangedAccounts","_notifyAccountsChange","getPermittedAccountsByOrigin","updateIncomingTransactions","isUpdate","_this$_getSnapMetadat2","snapCategory","SnapUpdateStarted","SnapInstallStarted","_this$_getSnapMetadat3","isRejected","failedEvent","SnapUpdateFailed","SnapInstallFailed","rejectedEvent","SnapUpdateRejected","SnapInstallRejected","truncatedSnap","_this$_getSnapMetadat4","SnapInstalled","newSnap","oldVersion","_this$_getSnapMetadat5","SnapUpdated","old_version","new_version","approvals","pendingApprovals","approval","snap_dialog","_this$_getSnapMetadat6","notificationIds","notifications","idList","SnapUninstalled","updateBalances","selectPublicState","networkVersion","getProviderNetworkState","updatePublicConfigStore","_memState$networksMet","networksMetadata","NetworkStatus","Available","putState","getProviderState","providerNetworkState","getUseRequestQueue","METAMASK_DOMAIN","networkClient","convertNetworkId","vault","isInitialized","flatState","getFlatState","sanitizeUIState","getApi","setCurrentCurrency","setUseBlockie","setUseNonceField","setUsePhishDetect","setUseMultiAccountBalanceChecker","setUseSafeChainsListValidation","setUseTokenDetection","setUseNftDetection","setUse4ByteResolution","setUseCurrencyRateCheck","setOpenSeaEnabled","setSecurityAlertsEnabled","setAddSnapAccountEnabled","setWatchEthereumAccountEnabled","setBitcoinSupportEnabled","setBitcoinTestnetSupportEnabled","setUseExternalNameSources","setUseTransactionSimulations","setUseRequestQueue","setIpfsGateway","setIsIpfsGatewayEnabled","setUseAddressBarEnsResolution","setParticipateInMetaMetrics","setDataCollectionForMarketing","setMarketingCampaignCookieId","setCurrentLocale","setIncomingTransactionsPreferences","setServiceWorkerKeepAlivePreference","markPasswordForgotten","unMarkPasswordForgotten","markNotificationPopupAsAutomaticallyClosed","markAsAutomaticallyClosed","addNewAccount","getSeedPhrase","resetAccount","importAccountWithStrategy","connectHardware","forgetDevice","checkHardwareStatus","unlockHardwareWalletAccount","attemptLedgerTransportCreation","submitQRHardwareCryptoHDKey","submitQRCryptoHDKey","submitQRHardwareCryptoAccount","submitQRCryptoAccount","cancelSyncQRHardware","cancelQRSynchronization","submitQRHardwareSignature","submitQRSignature","cancelQRHardwareSignRequest","cancelQRSignRequest","submitPassword","verifyPassword","networkConfigurationId","setActiveNetworkConfigurationId","setNetworkClientIdForDomain","rollbackToPreviousProvider","addNetwork","updateNetwork","removeNetwork","getNetworkConfigurationByNetworkClientId","setSelectedAddress","toggleExternalServices","addToken","updateTokenType","setFeatureFlag","setPreference","addKnownMethodData","setDismissSeedBackUpReminder","setAdvancedGasFee","setTheme","setSnapsAddSnapAccountModalDismissed","setSelectedInternalAccount","setAccountLabel","label","getTokenSymbol","addNftVerifyOwnership","removeAndIgnoreNft","removeNft","checkAndUpdateAllNftsOwnershipStatus","checkAndUpdateSingleNftOwnershipStatus","isNftOwner","setAddressBook","removeFromAddressBook","tryReverseResolveAddress","createNewVaultAndKeychain","createNewVaultAndRestore","exportAccount","updateTransaction","createCancelTransaction","createSpeedUpTransaction","getNextNonce","addTransactionAndWaitForPublish","getTransactionMetricsRequest","updateEditableParams","updateTransactionGasFees","updateTransactionSendFlowHistory","updatePreviousGasParams","abortTransactionSigning","decryptMessage","decryptMessageInline","cancelDecryptMessage","encryptionPublicKey","cancelEncryptionPublicKey","setSeedPhraseBackedUp","completeOnboarding","setFirstTimeFlowType","removePermissionsFor","approvePermissionsRequest","getPermissionBackgroundApiMethods","disableSnap","enableSnap","updateSnap","requestedSnaps","removeSnap","revokeDynamicSnapPermissions","disconnectOriginFromSnap","getPhishingResult","test","website","deleteInterface","updateInterfaceState","fetchAndSetQuotes","setSelectedQuoteAggId","resetSwapsState","setSwapsTokens","clearSwapsQuotes","setApproveTxId","setTradeTxId","setSwapsTxGasPrice","setSwapsTxGasLimit","setSwapsTxMaxFeePerGas","setSwapsTxMaxFeePriorityPerGas","safeRefetchQuotes","stopPollingForQuotes","setBackgroundSwapRouteState","resetPostFetchState","setSwapsErrorKey","setInitialGasEstimate","setCustomApproveTxData","setSwapsLiveness","setSwapsFeatureFlags","setSwapsUserFeeLevel","setSwapsQuotesPollingLimitEnabled","BridgeBackgroundAction","SET_FEATURE_FLAGS","fetchSmartTransactionFees","clearSmartTransactionFees","clearFees","cancelSmartTransaction","fetchSmartTransactionsLiveness","fetchLiveness","updateSmartTransaction","setStatusRefreshInterval","trackMetaMetricsPage","trackPage","resolvePendingApproval","rejectPendingApproval","resetViewedNotifications","updateViewedNotifications","currencyRateStartPollingByNetworkClientId","currencyRateStopPollingByPollingToken","stopPollingByPollingToken","gasFeeStartPollingByNetworkClientId","gasFeeStopPollingByPollingToken","getGasFeeTimeEstimate","getTimeEstimate","addPollingTokenToAppState","removePollingTokenFromAppState","backupUserData","restoreUserData","detectNfts","addDetectedTokens","addImportedTokens","addTokens","ignoreTokens","performSignIn","performSignOut","enableProfileSyncing","disableProfileSyncing","setIsProfileSyncingEnabled","syncInternalAccountsWithUserStorage","checkAccountsPresence","createOnChainTriggers","deleteOnChainTriggersByAccount","updateOnChainTriggersByAccount","fetchAndUpdateMetamaskNotifications","markMetamaskNotificationsAsRead","setFeatureAnnouncementsEnabled","enablePushNotifications","disablePushNotifications","updateTriggerPushNotifications","enableMetamaskNotifications","disableMetamaskNotifications","disableNotificationServices","throwTestError","updateProposedNames","setName","multichainUpdateBalance","updateBalance","multichainUpdateBalances","decodeTransactionData","createMetaMetricsDataDeletionTask","updateDataDeletionTaskStatus","password","userAddress","_details","_details2","tokenList","tokens","tokenDetails","STATIC_MAINNET_TOKEN_LIST","_address","isEqualCaseInsensitive","tokenDetailsStandardIsERC20","erc20","noEvidenceThatTokenIsAnNFT","erc721","otherDetailsAreERC20Like","decimals","balance","fetchTokenBalance","warn","fetchERC1155Balance","balanceToUse","encodedSeedPhrase","seedPhraseAsBuffer","clearState","clearAccounts","clearUnapprovedTransactions","_convertMnemonicToWordlistIndices","setLedgerTransportPreference","count","_this$tokensControlle","_this$tokensControlle2","allTokens","detectedTokens","allDetectedTokens","mnemonic","indices","word","wordlist","Uint8Array","Uint16Array","buffer","_convertEnglishWordlistIndicesToCodepoints","wordlistIndices","cached","checkForLatestBlock","_loginUser","updateAccountsAllActiveNetworks","startUISync","submitEncryptionKey","loginToken","loginSalt","salt","clearLoginArtifacts","remove","hdKeyTree","getKeyringForDevice","deviceName","hdPath","_this$opts$overrides2","_keyringOverrides$tre","_keyringOverrides$led","_keyringOverrides$lat","HardwareDeviceNames","setHdPath","appName","model","getModel","attemptMakeApp","getPreviousPage","getNextPage","getFirstPage","oldAccounts","accountsToTrack","syncWithAddresses","imported","getKeyringForAccount","getName","getAccountLabel","hdPathDescription","toUpperCase","trim","setAccountToUnlock","unlockedAccount","addNewAccountForKeyring","identities","accountCount","addedAccountAddress","exportSeedPhrase","wipeTransactions","wipeSmartTransactions","ignoreNetwork","resetConnection","executeRestrictedMethod","unauthorized","removeAllChainIdPermissions","targetChainId","updatePermissionsByCaveat","CaveatTypes","restrictNetworkSwitching","existingChainIds","CaveatMutatorFactories","removeChainId","removeAllAccountPermissions","targetAccount","restrictReturnedAccounts","updatedKeyringAccounts","_keyring$destroy","strategy","importedAccountAddress","_this$preferencesCont2","originalTxId","customGasSettings","stopTransaction","speedUpTransaction","estimateGasParams","setPasswordForgotten","setupUntrustedCommunicationEip1193","connectionStream","hostname","phishingTestResponse","sendPhishingWarning","PhishingPageDisplayed","Phishing","inputSubjectType","Extension","mux","setupMultiplex","setupProviderConnectionEip1193","createStream","setupPublicConfig","setupUntrustedCommunicationCaip","caipStream","createCaipStream","setupProviderConnectionCaip","setupTrustedCommunication","setupControllerConnection","Internal","setupPhishingCommunication","phishingStream","safelistPhishingDomain","backToSafetyPhishingWarning","setUpCookieHandlerCommunication","dataCollectionForMarketing","metamaskCookieHandlerStream","METAMASK_COOKIE_HANDLER","getCookieFromMarketingPage","ga_client_id","cookieId","write","outStream","patchStore","PatchStore","uiReady","handleUpdate","isStreamWritable","flushPendingPatches","api","startPatches","getStatePatches","once","outstreamEndHandler","mmFinished","finished","tabId","extensionId","tab","engine","setupProviderEngineEip1193","dupeReqFilterStream","providerStream","createEngineStream","connectionId","addConnection","pipeline","_err$message","_middleware","mid","removeConnection","_notifyChainChangeForConnection","setupProviderEngineCaip","createSelectedNetworkMiddleware","requestQueueMiddleware","createQueuedRequestMiddleware","enqueueRequest","shouldEnqueueRequest","PermissionNames","methodsWithConfirmation","proxyClient","filterMiddleware","subscriptionManager","events","createMiddleware","BaseUrl","Portfolio","createTxVerificationMiddleware","createPPOMMiddleware","getMetricsState","isConfirmationRedesignEnabled","redesignedConfirmationsEnabled","createUnsupportedMethodMiddleware","createLegacyMethodMiddleware","createPermissionMiddleware","registerOnboarding","createMethodMiddleware","startApprovalFlow","startFlow","endApprovalFlow","endFlow","getPermissions","requestPermissions","requestPermissionsIncremental","permittedChains","CaveatFactories","requestPermissionsForOrigin","revokePermissionsForOrigin","permissionKeys","PermissionDoesNotExistError","getNetworkClientIdForDomain","createSnapsMethodMiddleware","getSnaps","requestedPermissions","getSnapFile","installSnaps","invokeSnap","wallet_snap","getIsLocked","getInterfaceState","updateInterface","resolveInterface","getAllSnaps","getAllowedKeyringMethods","keyringSnapPermissionsBuilder","providerAsMiddleware","configStream","storeAsStream","_err$message2","notifyConnections","conn","notifyAllConnections","notifyConnection","connection","isEthAddress","NOTIFICATION_NAMES","unlockStateChanged","isClientOpenAndUnlocked","_isClientOpen","_notifyChainChange","addressFrom","nonceDetails","pendingNonce","highestSuggested","nonceLock","nextNonce","_onFinishedTransaction","getIsSmartTransaction","getSmartTransactionByMinedTxHash","getRedesignedConfirmationsEnabled","knownMethodData","use4ByteResolution","prefixedData","getMethodDataName","isRedesignedConfirmationsDeveloperEnabled","showConfirmationAdvancedDetails","useExternal","updatePreventPollingOnNetworkRestart","enableNonRPCGasFeeApis","disableNonRPCGasFeeApis","_keyring","transportType","window","navigator","hid","LedgerTransportTypes","webhid","u2f","updateTransportMethod","firstTimeInfo","date","isClientOpen","open","onClientClosed","stopAllPolling","onEnvironmentTypeClosed","environmentType","appStatePollingTokenType","bypass","extensionURL","getExtensionURL","switchToAnotherURL","newAddress","permittedAccountsMap","newAccounts","accountsChanged","updateAccountsHistory","chainChanged","confirmed","failed","_createTransactionNotifcation","_updateNFTOwnership","_trackTransactionFailure","rpcPrefs","_this$networkControll","_networkConfiguration","networkConfiguration","blockExplorerUrl","showTransactionNotification","allNfts","txReceiptLogs","logs","isContractInteractionTx","isTransferFromTx","_allNfts$userAddress","parseStandardTokenTransactionData","transactionDataTokenId","getTokenIdParam","getTokenValueParam","knownNft","allNftTransferLog","txReceiptLog","isERC1155NftTransfer","TRANSFER_SINFLE_LOG_TOPIC_HASH","isERC721NftTransfer","TOKEN_TRANSFER_LOG_TOPIC_HASH","isTransferToSelectedAddress","allNftParsedLog","singleLog","iface","abiERC1155","abiERC721","parsedLog","parseLog","contract","knownNFTs","newNFTs","single","_allNfts$selectedAddr","tokenIdFromLog","existingNft","refreshOwnershipNFts","singleNft","addNftPromises","_transactionMeta$simu","Background","errorMessage","numberOfTokens","numberOfAccounts","matomoEvent","userOperationMeta","updatedTransactionMeta","getFeatureFlagsByChainId","isHardwareWallet","previousState","_currentState$incomin","updateCurrentLocale","_checkTokenListPolling2","previousEnabled","newEnabled","clearingTokenListData","petnamesEnabled","asyncMiddleware","resolveNextPromise","nextPromise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","MAX","idCounter","createIdRemapMiddleware","getUniqueId_1","_end","originalId","newId","__createBinding","o","m","k","k2","desc","__exportStar","p","mergeMiddleware","JsonRpcEngine_1","middlewareStack","assertExhaustive","assertStruct","assert","AssertionError","superstruct_1","errors_1","getError","ErrorWrapper","struct","errorPrefix","getErrorMessage","replace","getErrorMessageWithoutTrailingPeriod","_object","base64","assert_1","paddingRequired","characterSet","letters","re","raw","pattern","createDataView","concatBytes","valueToBytes","base64ToBytes","stringToBytes","numberToBytes","signedBigIntToBytes","bigIntToBytes","hexToBytes","bytesToBase64","bytesToString","bytesToNumber","bytesToSignedBigInt","bytesToBigInt","bytesToHex","assertIsBytes","isBytes","base_1","hex_1","HEX_MINIMUM_NUMBER_CHARACTER","HEX_MAXIMUM_NUMBER_CHARACTER","HEX_CHARACTER_OFFSET","getPrecomputedHexValues","lookupTable","padStart","getPrecomputedHexValuesBuilder","bytes","hexadecimal","add0x","BigInt","assertIsHexString","strippedValue","remove0x","normalizedValue","c1","charCodeAt","c2","n1","n2","isSafeInteger","TextEncoder","encode","byte","asIntN","bigint","MAX_SAFE_INTEGER","TextDecoder","byteLength","mask","bigIntFits","numberValue","asUintN","normalizedValues","offset","byteOffset","DataView","toCaipChainId","parseCaipAccountId","isCaipAccountAddress","isCaipAccountId","isCaipReference","isCaipNamespace","KnownCaipNamespace","CaipAccountAddressStruct","CaipAccountIdStruct","CaipReferenceStruct","CaipNamespaceStruct","CaipChainIdStruct","CAIP_ACCOUNT_ADDRESS_REGEX","CAIP_ACCOUNT_ID_REGEX","CAIP_REFERENCE_REGEX","CAIP_NAMESPACE_REGEX","CAIP_CHAIN_ID_REGEX","is","string","caipChainId","groups","reference","caipAccountId","accountAddress","chain","migrate","originalVersionedData","versionedData","cloneDeep","rpcTarget","ChecksumStruct","base64_1","size","createHex","createBytes","createBigInt","createNumber","bytes_1","NumberLikeStruct","union","number","StrictHexStruct","NumberCoercer","coerce","BigIntCoercer","BytesCoercer","instance","HexCoercer","isFinite","StructError","_FrozenMap_map","_FrozenSet_set","FrozenSet","FrozenMap","iterator","callbackfn","_map","value2","_set","wrapError","isErrorWithStack","isErrorWithMessage","isErrorWithCode","pony_cause_1","misc_1","isNullOrUndefined","originalError","cause","ErrorWithCause","isValidChecksumAddress","getChecksumAddress","assertIsStrictHexString","isStrictHexString","HexChecksumAddressStruct","HexAddressStruct","HexStruct","sha3_1","unPrefixed","unPrefixedHash","keccak_256","character","nibbleIndex","hashCharacter","possibleChecksum","substring","possibleAddress","getJsonRpcIdValidator","assertIsJsonRpcError","isJsonRpcError","assertIsJsonRpcFailure","isJsonRpcFailure","assertIsJsonRpcSuccess","isJsonRpcSuccess","assertIsJsonRpcResponse","isJsonRpcResponse","assertIsPendingJsonRpcResponse","isPendingJsonRpcResponse","JsonRpcResponseStruct","JsonRpcFailureStruct","JsonRpcSuccessStruct","PendingJsonRpcResponseStruct","assertIsJsonRpcRequest","assertIsJsonRpcNotification","isJsonRpcNotification","JsonRpcNotificationStruct","JsonRpcRequestStruct","JsonRpcParamsStruct","JsonRpcErrorStruct","JsonRpcIdStruct","JsonRpcVersionStruct","jsonrpc2","getJsonSize","getSafeJson","isValidJson","JsonStruct","UnsafeJsonStruct","exactOptional","object","hasOptional","branch","field","Struct","validator","refiner","schema","literal","boolean","define","array","lazy","record","any","propKey","propValue","nullable","integer","optional","unknown","permitEmptyString","permitFractions","permitNull","createModuleLogger","globalLogger","projectName","projectLogger","moduleName","calculateNumberSize","calculateStringSize","isASCII","isPlainObject","ESCAPE_CHARACTERS_REGEXP","JsonSize","getKnownPropertyNames","isNonEmptyArray","objectToCheck","getOwnPropertyNames","proto","getPrototypeOf","total","hexToBigInt","hexToNumber","bigIntToHex","numberToHex","createDeferredPromise","suppressUnhandledRejection","promise","innerResolve","innerReject","timeSince","inMilliseconds","Duration","assertIsNonNegativeInteger","isNonNegativeInteger","duration","satisfiesVersionRange","gtRange","gtVersion","assertIsSemVerRange","assertIsSemVerVersion","isValidSemVerRange","isValidSemVerVersion","VersionRangeStruct","VersionStruct","semver_1","refine","valid","validRange","versionRange","range","version1","version2","gt","gtr","satisfies","includePrerelease","tslib_1","Semaphore_1","_semaphore","__generator","sent","runExclusive","isLocked","release","Semaphore","_maxConcurrency","_queue","_value","_this","locked","ticket","_dispatch","trys","_currentReleaser","releaser","nextConsumer","released","withTimeout","Mutex_1","withTimeout_1","safeVersionedData","sync","timeout","timeoutError","isTimeout","createFilterMiddleware","normalizeBlock","parentHash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","logsBloom","difficulty","nonce","mixHash","extraData","subscriptions","filterManager","isDestroyed","eth_subscribe","subscriptionType","subId","sub","createSubNewHeads","filterParams","createSubFromFilter","_emitSubscriptionResult","eth_unsubscribe","subscription","removeAllListeners","filterIdHex","blocks","blockTxHashes","walletNicknames","selectSubstateForKeyringController","keyringSubstate","migrateState","TransactionManager","gasMultiplier","transformState","NoticeController","noticesList","createBlockCacheMiddleware","json_rpc_engine_1","logging_utils_1","cache_1","emptyValues","BlockCacheStrategy","cache","getBlockCache","blockNumberHex","blockCache","newCache","requestedBlockNumber","identifier","cacheIdentifierForRequest","canCacheResult","canCacheRequest","canCache","blockTagForRequest","blockHash","clearBefore","oldBlockHex","oldBlockNumber","num","strategies","CacheStrategy","Permanent","Block","Fork","Never","skipCache","cacheTypeForMethod","requestBlockTag","blockTag","latestBlockNumber","cacheResult","createBlockRefRewriteMiddleware","blockRefIndex","blockTagParamIndex","createBlockRefMiddleware","full_1","childRequest","klona","createBlockTrackerInspectorMiddleware","futureBlockRefRequests","getResultBlockNumber","property","responseBlockNumber","getCurrentBlock","createFetchConfigFromReq","createFetchMiddleware","timeout_1","RETRIABLE_ERRORS","checkForHttpErrors","fetchRes","methodNotFound","createTimeoutError","parseResponse","btoa","originHttpHeaderKey","parsedUrl","fetchUrl","port","pathname","search","normalizeUrlFromParsed","originDomain","fetchParams","Accept","username","encodedAuth","attempt","rawBody","text","fetchBody","errMsg","phrase","createInflightCacheMiddleware","inflightRequests","cacheId","activeRequestHandlers","_resolve","deferredPromise","handledRes","createActiveRequestHandler","handleActiveRequest","ethersProviderAsMiddleware","send","providerRes","createRetryOnEmptyMiddleware","error_1","blockRefNumber","isNaN","latestBlockNumberHex","childResult","maxRetries","isExecutionRevertedError","attemptResult","merge","currentFiat","fiatCurrency","conversionDate","circularValue","skipBlockRef","simpleParams","paramsWithoutBlockTag","invalidInput","parseTypedMessage","normalizeTypedMessage","messageData","verifyingContract","normalizeContractAddress","__setModuleDefault","v","__importStar","createWalletMiddleware","sigUtil","normalize_1","validateVerifyingContract","resemblesAddress","str","processEthSignMessage","processSignTransaction","eth_coinbase","eth_sendTransaction","methodNotSupported","validateAndNormalizeKeyholder","eth_signTransaction","eth_sign","msgParams","signatureMethod","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","firstParam","secondParam","warning","eth_getEncryptionPublicKey","eth_decrypt","ciphertext","personal_ecRecover","signerAddress","recoverPersonalSignature","normalizedAccounts","providerErrors","BridgeFeatureFlagsKey","EXTENSION_SUPPORT","NETWORK_SRC_ALLOWLIST","NETWORK_DEST_ALLOWLIST","ShapeShiftController","shapeShiftTxList","_LedgerIframeBridge_instances","_LedgerIframeBridge_opts","_LedgerIframeBridge_deviceActionMessage","_LedgerIframeBridge_setupIframe","_LedgerIframeBridge_getOrigin","_LedgerIframeBridge_eventListener","_LedgerIframeBridge_sendMessage","_LedgerIframeBridge_validateConfiguration","IFrameMessageAction","bridgeUrl","iframeLoaded","isDeviceConnected","currentMessageId","messageCallbacks","eventListener","addEventListener","removeEventListener","getOptions","setOptions","LedgerMakeApp","LedgerUpdateTransport","getPublicKey","LedgerUnlock","deviceSignTransaction","LedgerSignTransaction","deviceSignMessage","LedgerSignPersonalMessage","deviceSignTypedData","LedgerSignTypedData","iframe","document","createElement","src","allow","onload","head","appendChild","tmp","eventMessage","messageCallback","LedgerConnectionChange","connected","postMsg","contentWindow","postMessage"],"mappings":"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","file":"../metamask/background-0.js","sourcesContent":["import { ObservableStore } from '@metamask/obs-store';\nimport {\n  TOGGLEABLE_ALERT_TYPES,\n  Web3ShimUsageAlertStates,\n} from '../../../shared/constants/alerts';\n\n/**\n * @typedef {object} AlertControllerInitState\n * @property {object} alertEnabledness - A map of alerts IDs to booleans, where\n * `true` indicates that the alert is enabled and shown, and `false` the opposite.\n * @property {object} unconnectedAccountAlertShownOrigins - A map of origin\n * strings to booleans indicating whether the \"switch to connected\" alert has\n * been shown (`true`) or otherwise (`false`).\n */\n\n/**\n * @typedef {object} AlertControllerOptions\n * @property {AlertControllerInitState} initState - The initial controller state\n */\n\nconst defaultState = {\n  alertEnabledness: TOGGLEABLE_ALERT_TYPES.reduce(\n    (alertEnabledness, alertType) => {\n      alertEnabledness[alertType] = true;\n      return alertEnabledness;\n    },\n    {},\n  ),\n  unconnectedAccountAlertShownOrigins: {},\n  web3ShimUsageOrigins: {},\n};\n\n/**\n * Controller responsible for maintaining alert-related state.\n */\nexport default class AlertController {\n  /**\n   * @param {AlertControllerOptions} [opts] - Controller configuration parameters\n   */\n  constructor(opts = {}) {\n    const { initState = {}, controllerMessenger } = opts;\n    const state = {\n      ...defaultState,\n      alertEnabledness: {\n        ...defaultState.alertEnabledness,\n        ...initState.alertEnabledness,\n      },\n    };\n\n    this.store = new ObservableStore(state);\n    this.controllerMessenger = controllerMessenger;\n\n    this.selectedAddress = this.controllerMessenger.call(\n      'AccountsController:getSelectedAccount',\n    );\n\n    this.controllerMessenger.subscribe(\n      'AccountsController:selectedAccountChange',\n      (account) => {\n        const currentState = this.store.getState();\n        if (\n          currentState.unconnectedAccountAlertShownOrigins &&\n          this.selectedAddress !== account.address\n        ) {\n          this.selectedAddress = account.address;\n          this.store.updateState({ unconnectedAccountAlertShownOrigins: {} });\n        }\n      },\n    );\n  }\n\n  setAlertEnabledness(alertId, enabledness) {\n    let { alertEnabledness } = this.store.getState();\n    alertEnabledness = { ...alertEnabledness };\n    alertEnabledness[alertId] = enabledness;\n    this.store.updateState({ alertEnabledness });\n  }\n\n  /**\n   * Sets the \"switch to connected\" alert as shown for the given origin\n   *\n   * @param {string} origin - The origin the alert has been shown for\n   */\n  setUnconnectedAccountAlertShown(origin) {\n    let { unconnectedAccountAlertShownOrigins } = this.store.getState();\n    unconnectedAccountAlertShownOrigins = {\n      ...unconnectedAccountAlertShownOrigins,\n    };\n    unconnectedAccountAlertShownOrigins[origin] = true;\n    this.store.updateState({ unconnectedAccountAlertShownOrigins });\n  }\n\n  /**\n   * Gets the web3 shim usage state for the given origin.\n   *\n   * @param {string} origin - The origin to get the web3 shim usage state for.\n   * @returns {undefined | 1 | 2} The web3 shim usage state for the given\n   * origin, or undefined.\n   */\n  getWeb3ShimUsageState(origin) {\n    return this.store.getState().web3ShimUsageOrigins[origin];\n  }\n\n  /**\n   * Sets the web3 shim usage state for the given origin to RECORDED.\n   *\n   * @param {string} origin - The origin the that used the web3 shim.\n   */\n  setWeb3ShimUsageRecorded(origin) {\n    this._setWeb3ShimUsageState(origin, Web3ShimUsageAlertStates.recorded);\n  }\n\n  /**\n   * Sets the web3 shim usage state for the given origin to DISMISSED.\n   *\n   * @param {string} origin - The origin that the web3 shim notification was\n   * dismissed for.\n   */\n  setWeb3ShimUsageAlertDismissed(origin) {\n    this._setWeb3ShimUsageState(origin, Web3ShimUsageAlertStates.dismissed);\n  }\n\n  /**\n   * @private\n   * @param {string} origin - The origin to set the state for.\n   * @param {number} value - The state value to set.\n   */\n  _setWeb3ShimUsageState(origin, value) {\n    let { web3ShimUsageOrigins } = this.store.getState();\n    web3ShimUsageOrigins = {\n      ...web3ShimUsageOrigins,\n    };\n    web3ShimUsageOrigins[origin] = value;\n    this.store.updateState({ web3ShimUsageOrigins });\n  }\n}\n","import { MESSAGE_TYPE } from '../../../../../shared/constants/app';\n\n/**\n * This RPC method is called by the inpage provider whenever it detects the\n * accessing of a non-existent property on our window.web3 shim. We use this\n * to alert the user that they are using a legacy dapp, and will have to take\n * further steps to be able to use it.\n */\nconst logWeb3ShimUsage = {\n  methodNames: [MESSAGE_TYPE.LOG_WEB3_SHIM_USAGE],\n  implementation: logWeb3ShimUsageHandler,\n  hookNames: {\n    getWeb3ShimUsageState: true,\n    setWeb3ShimUsageRecorded: true,\n  },\n};\nexport default logWeb3ShimUsage;\n\n/**\n * @typedef {object} LogWeb3ShimUsageOptions\n * @property {Function} getWeb3ShimUsageState - A function that gets web3 shim\n * usage state for the given origin.\n * @property {Function} setWeb3ShimUsageRecorded - A function that records web3 shim\n * usage for a particular origin.\n */\n\n/**\n * @param {import('json-rpc-engine').JsonRpcRequest<unknown>} req - The JSON-RPC request object.\n * @param {import('json-rpc-engine').JsonRpcResponse<true>} res - The JSON-RPC response object.\n * @param {Function} _next - The json-rpc-engine 'next' callback.\n * @param {Function} end - The json-rpc-engine 'end' callback.\n * @param {LogWeb3ShimUsageOptions} options\n */\nfunction logWeb3ShimUsageHandler(\n  req,\n  res,\n  _next,\n  end,\n  { getWeb3ShimUsageState, setWeb3ShimUsageRecorded },\n) {\n  const { origin } = req;\n  if (getWeb3ShimUsageState(origin) === undefined) {\n    setWeb3ShimUsageRecorded(origin);\n  }\n\n  res.result = true;\n  return end();\n}\n","import { ethErrors } from 'eth-rpc-errors';\nimport { MESSAGE_TYPE } from '../../../../../shared/constants/app';\nimport {\n  MetaMetricsEventName,\n  MetaMetricsEventCategory,\n} from '../../../../../shared/constants/metametrics';\nimport { shouldEmitDappViewedEvent } from '../../util';\n\n/**\n * This method attempts to retrieve the Ethereum accounts available to the\n * requester, or initiate a request for account access if none are currently\n * available. It is essentially a wrapper of wallet_requestPermissions that\n * only errors if the user rejects the request. We maintain the method for\n * backwards compatibility reasons.\n */\n\nconst requestEthereumAccounts = {\n  methodNames: [MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS],\n  implementation: requestEthereumAccountsHandler,\n  hookNames: {\n    origin: true,\n    getAccounts: true,\n    getUnlockPromise: true,\n    hasPermission: true,\n    requestAccountsPermission: true,\n    sendMetrics: true,\n    getPermissionsForOrigin: true,\n    metamaskState: true,\n  },\n};\nexport default requestEthereumAccounts;\n\n// Used to rate-limit pending requests to one per origin\nconst locks = new Set();\n\n/**\n * @typedef {Record<string, string | Function>} RequestEthereumAccountsOptions\n * @property {string} origin - The requesting origin.\n * @property {Function} getAccounts - Gets the accounts for the requesting\n * origin.\n * @property {Function} getUnlockPromise - Gets a promise that resolves when\n * the extension unlocks.\n * @property {Function} hasPermission - Returns whether the requesting origin\n * has the specified permission.\n * @property {Function} requestAccountsPermission - Requests the `eth_accounts`\n * permission for the requesting origin.\n */\n\n/**\n *\n * @param {import('json-rpc-engine').JsonRpcRequest<unknown>} _req - The JSON-RPC request object.\n * @param {import('json-rpc-engine').JsonRpcResponse<true>} res - The JSON-RPC response object.\n * @param {Function} _next - The json-rpc-engine 'next' callback.\n * @param {Function} end - The json-rpc-engine 'end' callback.\n * @param {RequestEthereumAccountsOptions} options - The RPC method hooks.\n */\nasync function requestEthereumAccountsHandler(\n  _req,\n  res,\n  _next,\n  end,\n  {\n    origin,\n    getAccounts,\n    getUnlockPromise,\n    hasPermission,\n    requestAccountsPermission,\n    sendMetrics,\n    getPermissionsForOrigin,\n    metamaskState,\n  },\n) {\n  if (locks.has(origin)) {\n    res.error = ethErrors.rpc.resourceUnavailable(\n      `Already processing ${MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS}. Please wait.`,\n    );\n    return end();\n  }\n\n  if (hasPermission(MESSAGE_TYPE.ETH_ACCOUNTS)) {\n    // We wait for the extension to unlock in this case only, because permission\n    // requests are handled when the extension is unlocked, regardless of the\n    // lock state when they were received.\n    try {\n      locks.add(origin);\n      await getUnlockPromise(true);\n      res.result = await getAccounts();\n      end();\n    } catch (error) {\n      end(error);\n    } finally {\n      locks.delete(origin);\n    }\n    return undefined;\n  }\n\n  // If no accounts, request the accounts permission\n  try {\n    await requestAccountsPermission();\n  } catch (err) {\n    res.error = err;\n    return end();\n  }\n\n  // Get the approved accounts\n  const accounts = await getAccounts();\n  /* istanbul ignore else: too hard to induce, see below comment */\n  if (accounts.length > 0) {\n    res.result = accounts;\n    const numberOfConnectedAccounts =\n      getPermissionsForOrigin(origin).eth_accounts.caveats[0].value.length;\n    // first time connection to dapp will lead to no log in the permissionHistory\n    // and if user has connected to dapp before, the dapp origin will be included in the permissionHistory state\n    // we will leverage that to identify `is_first_visit` for metrics\n    const isFirstVisit = !Object.keys(metamaskState.permissionHistory).includes(\n      origin,\n    );\n    if (shouldEmitDappViewedEvent(metamaskState.metaMetricsId)) {\n      sendMetrics({\n        event: MetaMetricsEventName.DappViewed,\n        category: MetaMetricsEventCategory.InpageProvider,\n        referrer: {\n          url: origin,\n        },\n        properties: {\n          is_first_visit: isFirstVisit,\n          number_of_accounts: Object.keys(metamaskState.accounts).length,\n          number_of_accounts_connected: numberOfConnectedAccounts,\n        },\n      });\n    }\n  } else {\n    // This should never happen, because it should be caught in the\n    // above catch clause\n    res.error = ethErrors.rpc.internal(\n      'Accounts unexpectedly unavailable. Please report this bug.',\n    );\n  }\n\n  return end();\n}\n","import { ethErrors } from 'eth-rpc-errors';\nimport { MESSAGE_TYPE } from '../../../../../shared/constants/app';\n\n/**\n * This internal method is used by our external provider to send metadata about\n * permission subjects so that we can e.g. display a proper name and icon in\n * our UI.\n */\n\nconst sendMetadata = {\n  methodNames: [MESSAGE_TYPE.SEND_METADATA],\n  implementation: sendMetadataHandler,\n  hookNames: {\n    addSubjectMetadata: true,\n    subjectType: true,\n  },\n};\nexport default sendMetadata;\n\n/**\n * @typedef {Record<string, Function>} SendMetadataOptions\n * @property {Function} addSubjectMetadata - A function that records subject\n * metadata, bound to the requesting origin.\n * @property {string} subjectType - The type of the requesting origin / subject.\n */\n\n/**\n * @param {import('json-rpc-engine').JsonRpcRequest<unknown>} req - The JSON-RPC request object.\n * @param {import('json-rpc-engine').JsonRpcResponse<true>} res - The JSON-RPC response object.\n * @param {Function} _next - The json-rpc-engine 'next' callback.\n * @param {Function} end - The json-rpc-engine 'end' callback.\n * @param {SendMetadataOptions} options\n */\nfunction sendMetadataHandler(\n  req,\n  res,\n  _next,\n  end,\n  { addSubjectMetadata, subjectType },\n) {\n  const { origin, params } = req;\n  if (params && typeof params === 'object' && !Array.isArray(params)) {\n    const { icon = null, name = null, ...remainingParams } = params;\n\n    addSubjectMetadata({\n      ...remainingParams,\n      iconUrl: icon,\n      name,\n      subjectType,\n      origin,\n    });\n  } else {\n    return end(ethErrors.rpc.invalidParams({ data: params }));\n  }\n\n  res.result = true;\n  return end();\n}\n","import { ethErrors } from 'eth-rpc-errors';\nimport { MESSAGE_TYPE } from '../../../../../shared/constants/app';\nimport {\n  validateSwitchEthereumChainParams,\n  switchChain,\n} from './ethereum-chain-utils';\n\nconst switchEthereumChain = {\n  methodNames: [MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN],\n  implementation: switchEthereumChainHandler,\n  hookNames: {\n    getNetworkConfigurationByChainId: true,\n    setActiveNetwork: true,\n    getCaveat: true,\n    requestPermittedChainsPermission: true,\n    getCurrentChainIdForDomain: true,\n    requestUserApproval: true,\n    getChainPermissionsFeatureFlag: true,\n  },\n};\n\nexport default switchEthereumChain;\n\nasync function switchEthereumChainHandler(\n  req,\n  res,\n  _next,\n  end,\n  {\n    getNetworkConfigurationByChainId,\n    setActiveNetwork,\n    requestPermittedChainsPermission,\n    getCaveat,\n    getCurrentChainIdForDomain,\n    requestUserApproval,\n    getChainPermissionsFeatureFlag,\n  },\n) {\n  let chainId;\n  try {\n    chainId = validateSwitchEthereumChainParams(req, end);\n  } catch (error) {\n    return end(error);\n  }\n\n  const { origin } = req;\n  const currentChainIdForOrigin = getCurrentChainIdForDomain(origin);\n  if (currentChainIdForOrigin === chainId) {\n    res.result = null;\n    return end();\n  }\n\n  const networkConfigurationForRequestedChainId =\n    getNetworkConfigurationByChainId(chainId);\n  const networkClientIdToSwitchTo =\n    networkConfigurationForRequestedChainId?.rpcEndpoints[\n      networkConfigurationForRequestedChainId.defaultRpcEndpointIndex\n    ].networkClientId;\n\n  if (!networkClientIdToSwitchTo) {\n    return end(\n      ethErrors.provider.custom({\n        code: 4902,\n        message: `Unrecognized chain ID \"${chainId}\". Try adding the chain using ${MESSAGE_TYPE.ADD_ETHEREUM_CHAIN} first.`,\n      }),\n    );\n  }\n\n  const requestData = {\n    toNetworkConfiguration: networkConfigurationForRequestedChainId,\n    fromNetworkConfiguration: getNetworkConfigurationByChainId(\n      currentChainIdForOrigin,\n    ),\n  };\n\n  return switchChain(\n    res,\n    end,\n    origin,\n    chainId,\n    requestData,\n    networkClientIdToSwitchTo,\n    null,\n    {\n      getChainPermissionsFeatureFlag,\n      setActiveNetwork,\n      requestUserApproval,\n      getCaveat,\n      requestPermittedChainsPermission,\n    },\n  );\n}\n","import { ERC1155, ERC721 } from '@metamask/controller-utils';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { MESSAGE_TYPE } from '../../../../../shared/constants/app';\n\nconst watchAsset = {\n  methodNames: [MESSAGE_TYPE.WATCH_ASSET, MESSAGE_TYPE.WATCH_ASSET_LEGACY],\n  implementation: watchAssetHandler,\n  hookNames: {\n    handleWatchAssetRequest: true,\n  },\n};\nexport default watchAsset;\n\n/**\n * @typedef {object} WatchAssetOptions\n * @property {Function} handleWatchAssetRequest - The wallet_watchAsset method implementation.\n */\n\n/**\n * @typedef {object} WatchAssetParam\n * @property {string} type - The type of the asset to watch.\n * @property {object} options - Watch options for the asset.\n */\n\n/**\n * @param {import('json-rpc-engine').JsonRpcRequest<WatchAssetParam>} req - The JSON-RPC request object.\n * @param {import('json-rpc-engine').JsonRpcResponse<true>} res - The JSON-RPC response object.\n * @param {Function} _next - The json-rpc-engine 'next' callback.\n * @param {Function} end - The json-rpc-engine 'end' callback.\n * @param {WatchAssetOptions} options\n */\nasync function watchAssetHandler(\n  req,\n  res,\n  _next,\n  end,\n  { handleWatchAssetRequest },\n) {\n  try {\n    const {\n      params: { options: asset, type },\n      origin,\n      networkClientId,\n    } = req;\n\n    const { tokenId } = asset;\n\n    if (\n      [ERC721, ERC1155].includes(type) &&\n      tokenId !== undefined &&\n      typeof tokenId !== 'string'\n    ) {\n      return end(\n        ethErrors.rpc.invalidParams({\n          message: `Expected parameter 'tokenId' to be type 'string'. Received type '${typeof tokenId}'`,\n        }),\n      );\n    }\n\n    await handleWatchAssetRequest({ asset, type, origin, networkClientId });\n    res.result = true;\n    return end();\n  } catch (error) {\n    return end(error);\n  }\n}\n","export * from './createMethodMiddleware';\nexport * from './createUnsupportedMethodMiddleware';\n","import removeSlash from 'remove-trailing-slash';\nimport looselyValidate from '@segment/loosely-validate-event';\nimport { isString } from 'lodash';\nimport isRetryAllowed from 'is-retry-allowed';\nimport { generateRandomId } from '../util';\n\nconst noop = () => ({});\n\n// Method below is inspired from axios-retry https://github.com/softonic/axios-retry\nfunction isNetworkError(error) {\n  return (\n    !error.response &&\n    Boolean(error.code) && // Prevents retrying cancelled requests\n    error.code !== 'ECONNABORTED' && // Prevents retrying timed out requests\n    isRetryAllowed(error)\n  ); // Prevents retrying unsafe errors\n}\n\nexport default class Analytics {\n  /**\n   * Initialize a new `Analytics` with Segment project's `writeKey` and an\n   * optional dictionary of `options`.\n   *\n   * @param {string} writeKey\n   * @param {object} [options] - (optional)\n   * @property {number} [flushAt] (default: 20)\n   * @property {number} [flushInterval] (default: 10000)\n   * @property {string} [host] (default: 'https://api.segment.io')\n   */\n  constructor(writeKey, options = {}) {\n    this.writeKey = writeKey;\n\n    this.host = removeSlash(options.host || 'https://api.segment.io');\n    this.flushInterval = options.flushInterval || 10000;\n    this.flushAt = options.flushAt || Math.max(options.flushAt, 1) || 20;\n\n    this.queue = [];\n    this.path = '/v1/batch';\n    this.maxQueueSize = 1024 * 450;\n    this.flushed = false;\n    this.retryCount = 3;\n\n    Object.defineProperty(this, 'enable', {\n      configurable: false,\n      writable: false,\n      enumerable: true,\n      value: true,\n    });\n  }\n\n  _validate(message, type) {\n    looselyValidate(message, type);\n  }\n\n  _message(type, message, callback) {\n    this._validate(message, type);\n    this.enqueue(type, message, callback);\n    return this;\n  }\n\n  /**\n   * Send an identify `message`.\n   *\n   * @param {object} message\n   * @param {Function} [callback] - (optional)\n   * @returns {Analytics}\n   */\n  identify(message, callback) {\n    return this._message('identify', message, callback);\n  }\n\n  /**\n   * Send a track `message`.\n   *\n   * @param {object} message\n   * @param {Function} [callback] - (optional)\n   * @returns {Analytics}\n   */\n  track(message, callback) {\n    return this._message('track', message, callback);\n  }\n\n  /**\n   * Send a page `message`.\n   *\n   * @param {object} message\n   * @param {Function} [callback] - (optional)\n   * @returns {Analytics}\n   */\n  page(message, callback) {\n    return this._message('page', message, callback);\n  }\n\n  /**\n   * Add a `message` of type `type` to the queue and\n   * check whether it should be flushed.\n   *\n   * @param {string} type\n   * @param {object} msg\n   * @param {Function} [callback] - (optional)\n   */\n  enqueue(type, msg, callback = noop) {\n    if (!this.enable) {\n      setImmediate(callback);\n      return;\n    }\n\n    const message = { ...msg, type };\n\n    // Specifying library here helps segment to understand structure of request.\n    // Currently segment seems to support these source libraries only.\n    message.context = {\n      ...message.context,\n      library: {\n        name: 'analytics-node',\n      },\n    };\n\n    if (!message.timestamp) {\n      message.timestamp = new Date();\n    }\n\n    if (!message.messageId) {\n      message.messageId = generateRandomId();\n    }\n\n    if (message.anonymousId && !isString(message.anonymousId)) {\n      message.anonymousId = JSON.stringify(message.anonymousId);\n    }\n    if (message.userId && !isString(message.userId)) {\n      message.userId = JSON.stringify(message.userId);\n    }\n    this.queue.push({ message, callback });\n\n    if (!this.flushed) {\n      this.flushed = true;\n      this.flush();\n      return;\n    }\n\n    const hasReachedFlushAt = this.queue.length >= this.flushAt;\n    const hasReachedQueueSize =\n      this.queue.reduce((acc, item) => acc + JSON.stringify(item).length, 0) >=\n      this.maxQueueSize;\n    if (hasReachedFlushAt || hasReachedQueueSize) {\n      this.flush();\n    }\n\n    if (this.flushInterval && !this.timer) {\n      this.timer = setTimeout(this.flush.bind(this), this.flushInterval);\n    }\n  }\n\n  /**\n   * Flush the current queue\n   *\n   * @param {Function} [callback] - (optional)\n   */\n  flush(callback = noop) {\n    if (!this.enable) {\n      setImmediate(callback);\n      return Promise.resolve();\n    }\n\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n\n    if (!this.queue.length) {\n      setImmediate(callback);\n      return Promise.resolve();\n    }\n\n    const items = this.queue.splice(0, this.flushAt);\n    const callbacks = items.map((item) => item.callback);\n    const messages = items.map((item) => item.message);\n\n    const data = {\n      batch: messages,\n      timestamp: new Date(),\n      sentAt: new Date(),\n    };\n\n    const done = (err) => {\n      setImmediate(() => {\n        callbacks.forEach((fn) => fn(err, data));\n        callback(err, data);\n      });\n    };\n\n    const headers = {\n      Authorization: `Basic ${Buffer.from(this.writeKey, 'utf8').toString(\n        'base64',\n      )}`,\n    };\n\n    return this._sendRequest(\n      `${this.host}${this.path}`,\n      {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers,\n      },\n      done,\n      0,\n    );\n  }\n\n  _retryRequest(url, body, done, retryNo) {\n    const delay = Math.pow(2, retryNo) * 100;\n    setTimeout(() => {\n      this._sendRequest(url, body, done, retryNo + 1);\n    }, delay);\n  }\n\n  async _sendRequest(url, body, done, retryNo) {\n    return fetch(url, body)\n      .then(async (response) => {\n        if (response.ok) {\n          done();\n        } else if (\n          this._isErrorRetryable({ response }) &&\n          retryNo <= this.retryCount\n        ) {\n          this._retryRequest(url, body, done, retryNo);\n        } else {\n          const error = new Error(response.statusText);\n          done(error);\n        }\n      })\n      .catch((error) => {\n        if (this._isErrorRetryable(error) && retryNo <= this.retryCount) {\n          this._retryRequest(url, body, done, retryNo);\n        } else {\n          done(error);\n        }\n      });\n  }\n\n  _isErrorRetryable(error) {\n    // Retry Network Errors.\n    if (isNetworkError(error)) {\n      return true;\n    }\n\n    if (!error.response) {\n      // Cannot determine if the request can be retried\n      return false;\n    }\n\n    // Retry Server Errors (5xx).\n    if (error.response.status >= 500 && error.response.status <= 599) {\n      return true;\n    }\n\n    // Retry if rate limited.\n    if (error.response.status === 429) {\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { SECOND } from '../../../../shared/constants/time';\nimport Analytics from './analytics';\n\nconst SEGMENT_WRITE_KEY = process.env.SEGMENT_WRITE_KEY ?? null;\nconst SEGMENT_HOST = process.env.SEGMENT_HOST ?? null;\n\n// flushAt controls how many events are sent to segment at once. Segment will\n// hold onto a queue of events until it hits this number, then it sends them as\n// a batch. This setting defaults to 20, but in development we likely want to\n// see events in real time for debugging, so this is set to 1 to disable the\n// queueing mechanism.\nconst SEGMENT_FLUSH_AT =\n  process.env.METAMASK_ENVIRONMENT === 'production' ? undefined : 1;\n\n// flushInterval controls how frequently the queue is flushed to segment.\n// This happens regardless of the size of the queue. The default setting is\n// 10,000ms (10 seconds). This default is rather high, though thankfully\n// using the background process as our event handler means we don't have to\n// deal with short lived sessions that happen faster than the interval\n// e.g confirmations. This is set to 5,000ms (5 seconds) arbitrarily with the\n// intent of having a value less than 10 seconds.\nconst SEGMENT_FLUSH_INTERVAL = SECOND * 5;\n\n/**\n * Creates a mock segment module for usage in test environments. This is used\n * when building the application in test mode to catch event calls and prevent\n * them from being sent to segment. It is also used in unit tests to mock and\n * spy on the methods to ensure proper behavior\n *\n * @param {number} flushAt - number of events to queue before sending to segment\n * @returns {SegmentInterface}\n */\nexport const createSegmentMock = (flushAt = SEGMENT_FLUSH_AT) => {\n  const segmentMock = {\n    // Internal queue to keep track of events and properly mimic segment's\n    // queueing behavior.\n    queue: [],\n\n    /**\n     * Used to immediately send all queued events and reset the queue to zero.\n     * For our purposes this simply triggers the callback method registered with\n     * the event.\n     */\n    flush() {\n      segmentMock.queue.forEach(([_, callback]) => {\n        callback();\n      });\n      segmentMock.queue = [];\n    },\n\n    /**\n     * Track an event and add it to the queue. If the queue size reaches the\n     * flushAt threshold, flush the queue.\n     *\n     * @param payload\n     * @param callback\n     */\n    track(payload, callback = () => undefined) {\n      segmentMock.queue.push([payload, callback]);\n\n      if (segmentMock.queue.length >= flushAt) {\n        segmentMock.flush();\n      }\n    },\n\n    /**\n     * A true NOOP, these methods are either not used or do not await callback\n     * and therefore require no functionality.\n     */\n    page() {\n      // noop\n    },\n    identify() {\n      // noop\n    },\n  };\n\n  return segmentMock;\n};\n\nexport const segment = SEGMENT_WRITE_KEY\n  ? new Analytics(SEGMENT_WRITE_KEY, {\n      host: SEGMENT_HOST,\n      flushAt: SEGMENT_FLUSH_AT,\n      flushInterval: SEGMENT_FLUSH_INTERVAL,\n    })\n  : createSegmentMock(SEGMENT_FLUSH_AT, SEGMENT_FLUSH_INTERVAL);\n","import EventEmitter from 'events';\nimport { ObservableStore } from '@metamask/obs-store';\n\n/**\n * The state of the AppMetadataController\n */\nexport type AppMetadataControllerState = {\n  currentAppVersion: string;\n  previousAppVersion: string;\n  previousMigrationVersion: number;\n  currentMigrationVersion: number;\n};\n\n/**\n * The options that NetworkController takes.\n */\nexport type AppMetadataControllerOptions = {\n  currentMigrationVersion?: number;\n  currentAppVersion?: string;\n  state?: Partial<AppMetadataControllerState>;\n};\n\nconst defaultState: AppMetadataControllerState = {\n  currentAppVersion: '',\n  previousAppVersion: '',\n  previousMigrationVersion: 0,\n  currentMigrationVersion: 0,\n};\n\n/**\n * The AppMetadata controller stores metadata about the current extension instance,\n * including the currently and previously installed versions, and the most recently\n * run migration.\n *\n */\nexport default class AppMetadataController extends EventEmitter {\n  /**\n   * Observable store containing controller data.\n   */\n  store: ObservableStore<AppMetadataControllerState>;\n\n  /**\n   * Constructs a AppMetadata controller.\n   *\n   * @param options - the controller options\n   * @param options.state - Initial controller state.\n   * @param options.currentMigrationVersion\n   * @param options.currentAppVersion\n   */\n  constructor({\n    currentAppVersion = '',\n    currentMigrationVersion = 0,\n    state = {},\n  }: AppMetadataControllerOptions) {\n    super();\n\n    this.store = new ObservableStore({\n      ...defaultState,\n      ...state,\n    });\n\n    this.#maybeUpdateAppVersion(currentAppVersion);\n\n    this.#maybeUpdateMigrationVersion(currentMigrationVersion);\n  }\n\n  /**\n   * Updates the currentAppVersion in state, and sets the previousAppVersion to the old currentAppVersion.\n   *\n   * @param maybeNewAppVersion\n   */\n  #maybeUpdateAppVersion(maybeNewAppVersion: string): void {\n    const oldCurrentAppVersion = this.store.getState().currentAppVersion;\n\n    if (maybeNewAppVersion !== oldCurrentAppVersion) {\n      this.store.updateState({\n        currentAppVersion: maybeNewAppVersion,\n        previousAppVersion: oldCurrentAppVersion,\n      });\n    }\n  }\n\n  /**\n   * Updates the migrationVersion in state.\n   *\n   * @param maybeNewMigrationVersion\n   */\n  #maybeUpdateMigrationVersion(maybeNewMigrationVersion: number): void {\n    const oldCurrentMigrationVersion =\n      this.store.getState().currentMigrationVersion;\n\n    if (maybeNewMigrationVersion !== oldCurrentMigrationVersion) {\n      this.store.updateState({\n        previousMigrationVersion: oldCurrentMigrationVersion,\n        currentMigrationVersion: maybeNewMigrationVersion,\n      });\n    }\n  }\n}\n","export { snapKeyringBuilder, getAccountsBySnapId } from './snap-keyring';\n","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AccountsController_instances, _AccountsController_generateInternalAccountForNonSnapAccount, _AccountsController_listSnapAccounts, _AccountsController_listNormalAccounts, _AccountsController_handleOnKeyringStateChange, _AccountsController_handleOnSnapStateChange, _AccountsController_getAccountsByKeyringType, _AccountsController_getLastSelectedAccount, _AccountsController_isAccountCompatibleWithChain, _AccountsController_getLastSelectedIndex, _AccountsController_handleNewAccountAdded, _AccountsController_publishAccountChangeEvent, _AccountsController_handleAccountRemoved, _AccountsController_populateExistingMetadata, _AccountsController_registerMessageHandlers;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AccountsController = exports.EMPTY_ACCOUNT = void 0;\nconst base_controller_1 = require(\"@metamask/base-controller\");\nconst eth_snap_keyring_1 = require(\"@metamask/eth-snap-keyring\");\nconst keyring_api_1 = require(\"@metamask/keyring-api\");\nconst keyring_controller_1 = require(\"@metamask/keyring-controller\");\nconst utils_1 = require(\"@metamask/utils\");\nconst utils_2 = require(\"./utils.cjs\");\nconst controllerName = 'AccountsController';\nconst accountsControllerMetadata = {\n    internalAccounts: {\n        persist: true,\n        anonymous: false,\n    },\n};\nconst defaultState = {\n    internalAccounts: {\n        accounts: {},\n        selectedAccount: '',\n    },\n};\nexports.EMPTY_ACCOUNT = {\n    id: '',\n    address: '',\n    options: {},\n    methods: [],\n    type: keyring_api_1.EthAccountType.Eoa,\n    metadata: {\n        name: '',\n        keyring: {\n            type: '',\n        },\n        importTime: 0,\n    },\n};\n/**\n * Controller that manages internal accounts.\n * The accounts controller is responsible for creating and managing internal accounts.\n * It also provides convenience methods for accessing and updating the internal accounts.\n * The accounts controller also listens for keyring state changes and updates the internal accounts accordingly.\n * The accounts controller also listens for snap state changes and updates the internal accounts accordingly.\n *\n */\nclass AccountsController extends base_controller_1.BaseController {\n    /**\n     * Constructor for AccountsController.\n     *\n     * @param options - The controller options.\n     * @param options.messenger - The messenger object.\n     * @param options.state - Initial state to set on this controller\n     */\n    constructor({ messenger, state, }) {\n        super({\n            messenger,\n            name: controllerName,\n            metadata: accountsControllerMetadata,\n            state: {\n                ...defaultState,\n                ...state,\n            },\n        });\n        _AccountsController_instances.add(this);\n        this.messagingSystem.subscribe('SnapController:stateChange', (snapStateState) => __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_handleOnSnapStateChange).call(this, snapStateState));\n        this.messagingSystem.subscribe('KeyringController:stateChange', (keyringState) => __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_handleOnKeyringStateChange).call(this, keyringState));\n        __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_registerMessageHandlers).call(this);\n    }\n    /**\n     * Returns the internal account object for the given account ID, if it exists.\n     *\n     * @param accountId - The ID of the account to retrieve.\n     * @returns The internal account object, or undefined if the account does not exist.\n     */\n    getAccount(accountId) {\n        return this.state.internalAccounts.accounts[accountId];\n    }\n    /**\n     * Returns an array of all evm internal accounts.\n     *\n     * @returns An array of InternalAccount objects.\n     */\n    listAccounts() {\n        const accounts = Object.values(this.state.internalAccounts.accounts);\n        return accounts.filter((account) => (0, keyring_api_1.isEvmAccountType)(account.type));\n    }\n    /**\n     * Returns an array of all internal accounts.\n     *\n     * @param chainId - The chain ID.\n     * @returns An array of InternalAccount objects.\n     */\n    listMultichainAccounts(chainId) {\n        const accounts = Object.values(this.state.internalAccounts.accounts);\n        if (!chainId) {\n            return accounts;\n        }\n        if (!(0, utils_1.isCaipChainId)(chainId)) {\n            throw new Error(`Invalid CAIP-2 chain ID: ${String(chainId)}`);\n        }\n        return accounts.filter((account) => __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_isAccountCompatibleWithChain).call(this, account, chainId));\n    }\n    /**\n     * Returns the internal account object for the given account ID.\n     *\n     * @param accountId - The ID of the account to retrieve.\n     * @returns The internal account object.\n     * @throws An error if the account ID is not found.\n     */\n    getAccountExpect(accountId) {\n        const account = this.getAccount(accountId);\n        if (account === undefined) {\n            throw new Error(`Account Id \"${accountId}\" not found`);\n        }\n        return account;\n    }\n    /**\n     * Returns the last selected EVM account.\n     *\n     * @returns The selected internal account.\n     */\n    getSelectedAccount() {\n        // Edge case where the extension is setup but the srp is not yet created\n        // certain ui elements will query the selected address before any accounts are created.\n        if (this.state.internalAccounts.selectedAccount === '') {\n            return exports.EMPTY_ACCOUNT;\n        }\n        const selectedAccount = this.getAccountExpect(this.state.internalAccounts.selectedAccount);\n        if ((0, keyring_api_1.isEvmAccountType)(selectedAccount.type)) {\n            return selectedAccount;\n        }\n        const accounts = this.listAccounts();\n        if (!accounts.length) {\n            // ! Should never reach this.\n            throw new Error('No EVM accounts');\n        }\n        // This will never be undefined because we have already checked if accounts.length is > 0\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_getLastSelectedAccount).call(this, accounts);\n    }\n    /**\n     * __WARNING The return value may be undefined if there isn't an account for that chain id.__\n     *\n     * Retrieves the last selected account by chain ID.\n     *\n     * @param chainId - The chain ID to filter the accounts.\n     * @returns The last selected account compatible with the specified chain ID or undefined.\n     */\n    getSelectedMultichainAccount(chainId) {\n        // Edge case where the extension is setup but the srp is not yet created\n        // certain ui elements will query the selected address before any accounts are created.\n        if (this.state.internalAccounts.selectedAccount === '') {\n            return exports.EMPTY_ACCOUNT;\n        }\n        if (!chainId) {\n            return this.getAccountExpect(this.state.internalAccounts.selectedAccount);\n        }\n        if (!(0, utils_1.isCaipChainId)(chainId)) {\n            throw new Error(`Invalid CAIP-2 chain ID: ${chainId}`);\n        }\n        const accounts = Object.values(this.state.internalAccounts.accounts).filter((account) => __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_isAccountCompatibleWithChain).call(this, account, chainId));\n        return __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_getLastSelectedAccount).call(this, accounts);\n    }\n    /**\n     * Returns the account with the specified address.\n     * ! This method will only return the first account that matches the address\n     * @param address - The address of the account to retrieve.\n     * @returns The account with the specified address, or undefined if not found.\n     */\n    getAccountByAddress(address) {\n        return this.listMultichainAccounts().find((account) => account.address.toLowerCase() === address.toLowerCase());\n    }\n    /**\n     * Sets the selected account by its ID.\n     *\n     * @param accountId - The ID of the account to be selected.\n     */\n    setSelectedAccount(accountId) {\n        const account = this.getAccountExpect(accountId);\n        this.update((currentState) => {\n            currentState.internalAccounts.accounts[account.id].metadata.lastSelected =\n                Date.now();\n            currentState.internalAccounts.selectedAccount = account.id;\n        });\n        __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_publishAccountChangeEvent).call(this, account);\n    }\n    /**\n     * Sets the name of the account with the given ID.\n     *\n     * @param accountId - The ID of the account to set the name for.\n     * @param accountName - The new name for the account.\n     * @throws An error if an account with the same name already exists.\n     */\n    setAccountName(accountId, accountName) {\n        // This will check for name uniqueness and fire the `accountRenamed` event\n        // if the account has been renamed.\n        this.updateAccountMetadata(accountId, {\n            name: accountName,\n            nameLastUpdatedAt: Date.now(),\n        });\n    }\n    /**\n     * Updates the metadata of the account with the given ID.\n     *\n     * @param accountId - The ID of the account for which the metadata will be updated.\n     * @param metadata - The new metadata for the account.\n     */\n    updateAccountMetadata(accountId, metadata) {\n        const account = this.getAccountExpect(accountId);\n        if (metadata.name &&\n            this.listMultichainAccounts().find((internalAccount) => internalAccount.metadata.name === metadata.name &&\n                internalAccount.id !== accountId)) {\n            throw new Error('Account name already exists');\n        }\n        this.update((currentState) => {\n            const internalAccount = {\n                ...account,\n                metadata: { ...account.metadata, ...metadata },\n            };\n            // Do not remove this comment - This error is flaky: Comment out or restore the `ts-expect-error` directive below as needed.\n            // See: https://github.com/MetaMask/utils/issues/168\n            // // @ts-expect-error Known issue - `Json` causes recursive error in immer `Draft`/`WritableDraft` types\n            currentState.internalAccounts.accounts[accountId] = internalAccount;\n            if (metadata.name) {\n                this.messagingSystem.publish('AccountsController:accountRenamed', internalAccount);\n            }\n        });\n    }\n    /**\n     * Updates the internal accounts list by retrieving normal and snap accounts,\n     * removing duplicates, and updating the metadata of each account.\n     *\n     * @returns A Promise that resolves when the accounts have been updated.\n     */\n    async updateAccounts() {\n        const snapAccounts = await __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_listSnapAccounts).call(this);\n        const normalAccounts = await __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_listNormalAccounts).call(this);\n        // keyring type map.\n        const keyringTypes = new Map();\n        const previousAccounts = this.state.internalAccounts.accounts;\n        const accounts = [\n            ...normalAccounts,\n            ...snapAccounts,\n        ].reduce((internalAccountMap, internalAccount) => {\n            const keyringTypeName = (0, utils_2.keyringTypeToName)(internalAccount.metadata.keyring.type);\n            const keyringAccountIndex = keyringTypes.get(keyringTypeName) ?? 0;\n            if (keyringAccountIndex) {\n                keyringTypes.set(keyringTypeName, keyringAccountIndex + 1);\n            }\n            else {\n                keyringTypes.set(keyringTypeName, 1);\n            }\n            const existingAccount = previousAccounts[internalAccount.id];\n            internalAccountMap[internalAccount.id] = {\n                ...internalAccount,\n                metadata: {\n                    ...internalAccount.metadata,\n                    name: __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_populateExistingMetadata).call(this, existingAccount?.id, 'name') ??\n                        `${keyringTypeName} ${keyringAccountIndex + 1}`,\n                    importTime: __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_populateExistingMetadata).call(this, existingAccount?.id, 'importTime') ??\n                        Date.now(),\n                    lastSelected: __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_populateExistingMetadata).call(this, existingAccount?.id, 'lastSelected') ?? 0,\n                },\n            };\n            return internalAccountMap;\n        }, {});\n        this.update((currentState) => {\n            currentState.internalAccounts.accounts = accounts;\n            if (!currentState.internalAccounts.accounts[currentState.internalAccounts.selectedAccount]) {\n                const lastSelectedAccount = __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_getLastSelectedAccount).call(this, Object.values(accounts));\n                if (lastSelectedAccount) {\n                    currentState.internalAccounts.selectedAccount =\n                        lastSelectedAccount.id;\n                    currentState.internalAccounts.accounts[lastSelectedAccount.id].metadata.lastSelected = __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_getLastSelectedIndex).call(this);\n                    __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_publishAccountChangeEvent).call(this, lastSelectedAccount);\n                }\n                else {\n                    // It will be undefined if there are no accounts\n                    currentState.internalAccounts.selectedAccount = '';\n                }\n            }\n        });\n    }\n    /**\n     * Loads the backup state of the accounts controller.\n     *\n     * @param backup - The backup state to load.\n     */\n    loadBackup(backup) {\n        if (backup.internalAccounts) {\n            this.update((currentState) => {\n                currentState.internalAccounts = backup.internalAccounts;\n            });\n        }\n    }\n    /**\n     * Returns the next account number for a given keyring type.\n     * @param keyringType - The type of keyring.\n     * @param accounts - Existing accounts to check for the next available account number.\n     * @returns An object containing the account prefix and index to use.\n     */\n    getNextAvailableAccountName(keyringType = keyring_controller_1.KeyringTypes.hd, accounts) {\n        const keyringName = (0, utils_2.keyringTypeToName)(keyringType);\n        const keyringAccounts = __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_getAccountsByKeyringType).call(this, keyringType, accounts);\n        const lastDefaultIndexUsedForKeyringType = keyringAccounts.reduce((maxInternalAccountIndex, internalAccount) => {\n            // We **DO NOT USE** `\\d+` here to only consider valid \"human\"\n            // number (rounded decimal number)\n            const match = new RegExp(`${keyringName} ([0-9]+)$`, 'u').exec(internalAccount.metadata.name);\n            if (match) {\n                // Quoting `RegExp.exec` documentation:\n                // > The returned array has the matched text as the first item, and then one item for\n                // > each capturing group of the matched text.\n                // So use `match[1]` to get the captured value\n                const internalAccountIndex = parseInt(match[1], 10);\n                return Math.max(maxInternalAccountIndex, internalAccountIndex);\n            }\n            return maxInternalAccountIndex;\n        }, 0);\n        const index = Math.max(keyringAccounts.length + 1, \n        // ESLint is confused; this is a number.\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        lastDefaultIndexUsedForKeyringType + 1);\n        return `${keyringName} ${index}`;\n    }\n}\nexports.AccountsController = AccountsController;\n_AccountsController_instances = new WeakSet(), _AccountsController_generateInternalAccountForNonSnapAccount = function _AccountsController_generateInternalAccountForNonSnapAccount(address, type) {\n    return {\n        id: (0, utils_2.getUUIDFromAddressOfNormalAccount)(address),\n        address,\n        options: {},\n        methods: [\n            keyring_api_1.EthMethod.PersonalSign,\n            keyring_api_1.EthMethod.Sign,\n            keyring_api_1.EthMethod.SignTransaction,\n            keyring_api_1.EthMethod.SignTypedDataV1,\n            keyring_api_1.EthMethod.SignTypedDataV3,\n            keyring_api_1.EthMethod.SignTypedDataV4,\n        ],\n        type: keyring_api_1.EthAccountType.Eoa,\n        metadata: {\n            name: '',\n            importTime: Date.now(),\n            keyring: {\n                type,\n            },\n        },\n    };\n}, _AccountsController_listSnapAccounts = \n/**\n * Returns a list of internal accounts created using the SnapKeyring.\n *\n * @returns A promise that resolves to an array of InternalAccount objects.\n */\nasync function _AccountsController_listSnapAccounts() {\n    const [snapKeyring] = this.messagingSystem.call('KeyringController:getKeyringsByType', eth_snap_keyring_1.SnapKeyring.type);\n    // snap keyring is not available until the first account is created in the keyring controller\n    if (!snapKeyring) {\n        return [];\n    }\n    const snapAccounts = snapKeyring.listAccounts();\n    return snapAccounts;\n}, _AccountsController_listNormalAccounts = \n/**\n * Returns a list of normal accounts.\n * Note: listNormalAccounts is a temporary method until the keyrings all implement the InternalAccount interface.\n * Once all keyrings implement the InternalAccount interface, this method can be removed and getAccounts can be used instead.\n *\n * @returns A Promise that resolves to an array of InternalAccount objects.\n */\nasync function _AccountsController_listNormalAccounts() {\n    const addresses = await this.messagingSystem.call('KeyringController:getAccounts');\n    const internalAccounts = [];\n    for (const address of addresses) {\n        const keyring = await this.messagingSystem.call('KeyringController:getKeyringForAccount', address);\n        const keyringType = keyring.type;\n        if (!(0, utils_2.isNormalKeyringType)(keyringType)) {\n            // We only consider \"normal accounts\" here, so keep looping\n            continue;\n        }\n        const id = (0, utils_2.getUUIDFromAddressOfNormalAccount)(address);\n        const nameLastUpdatedAt = __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_populateExistingMetadata).call(this, id, 'nameLastUpdatedAt');\n        internalAccounts.push({\n            id,\n            address,\n            options: {},\n            methods: [\n                keyring_api_1.EthMethod.PersonalSign,\n                keyring_api_1.EthMethod.Sign,\n                keyring_api_1.EthMethod.SignTransaction,\n                keyring_api_1.EthMethod.SignTypedDataV1,\n                keyring_api_1.EthMethod.SignTypedDataV3,\n                keyring_api_1.EthMethod.SignTypedDataV4,\n            ],\n            type: keyring_api_1.EthAccountType.Eoa,\n            metadata: {\n                name: __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_populateExistingMetadata).call(this, id, 'name') ?? '',\n                ...(nameLastUpdatedAt && { nameLastUpdatedAt }),\n                importTime: __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_populateExistingMetadata).call(this, id, 'importTime') ?? Date.now(),\n                lastSelected: __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_populateExistingMetadata).call(this, id, 'lastSelected') ?? 0,\n                keyring: {\n                    type: keyring.type,\n                },\n            },\n        });\n    }\n    return internalAccounts;\n}, _AccountsController_handleOnKeyringStateChange = function _AccountsController_handleOnKeyringStateChange(keyringState) {\n    // check if there are any new accounts added\n    // TODO: change when accountAdded event is added to the keyring controller\n    // We check for keyrings length to be greater than 0 because the extension client may try execute\n    // submit password twice and clear the keyring state.\n    // https://github.com/MetaMask/KeyringController/blob/2d73a4deed8d013913f6ef0c9f5c0bb7c614f7d3/src/KeyringController.ts#L910\n    if (keyringState.isUnlocked && keyringState.keyrings.length > 0) {\n        const updatedNormalKeyringAddresses = [];\n        const updatedSnapKeyringAddresses = [];\n        for (const keyring of keyringState.keyrings) {\n            if (keyring.type === keyring_controller_1.KeyringTypes.snap) {\n                updatedSnapKeyringAddresses.push(...keyring.accounts.map((address) => {\n                    return {\n                        address,\n                        type: keyring.type,\n                    };\n                }));\n            }\n            else {\n                updatedNormalKeyringAddresses.push(...keyring.accounts.map((address) => {\n                    return {\n                        address,\n                        type: keyring.type,\n                    };\n                }));\n            }\n        }\n        const { previousNormalInternalAccounts, previousSnapInternalAccounts } = this.listMultichainAccounts().reduce((accumulator, account) => {\n            if (account.metadata.keyring.type === keyring_controller_1.KeyringTypes.snap) {\n                accumulator.previousSnapInternalAccounts.push(account);\n            }\n            else {\n                accumulator.previousNormalInternalAccounts.push(account);\n            }\n            return accumulator;\n        }, {\n            previousNormalInternalAccounts: [],\n            previousSnapInternalAccounts: [],\n        });\n        const addedAccounts = [];\n        const deletedAccounts = [];\n        // snap account ids are random uuid while normal accounts\n        // are determininistic based on the address\n        // ^NOTE: This will be removed when normal accounts also implement internal accounts\n        // finding all the normal accounts that were added\n        for (const account of updatedNormalKeyringAddresses) {\n            if (!this.state.internalAccounts.accounts[(0, utils_2.getUUIDFromAddressOfNormalAccount)(account.address)]) {\n                addedAccounts.push(account);\n            }\n        }\n        // finding all the snap accounts that were added\n        for (const account of updatedSnapKeyringAddresses) {\n            if (!previousSnapInternalAccounts.find((internalAccount) => internalAccount.address.toLowerCase() ===\n                account.address.toLowerCase())) {\n                addedAccounts.push(account);\n            }\n        }\n        // finding all the normal accounts that were deleted\n        for (const account of previousNormalInternalAccounts) {\n            if (!updatedNormalKeyringAddresses.find(({ address }) => address.toLowerCase() === account.address.toLowerCase())) {\n                deletedAccounts.push(account);\n            }\n        }\n        // finding all the snap accounts that were deleted\n        for (const account of previousSnapInternalAccounts) {\n            if (!updatedSnapKeyringAddresses.find(({ address }) => address.toLowerCase() === account.address.toLowerCase())) {\n                deletedAccounts.push(account);\n            }\n        }\n        this.update((currentState) => {\n            if (deletedAccounts.length > 0) {\n                for (const account of deletedAccounts) {\n                    currentState.internalAccounts.accounts = __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_handleAccountRemoved).call(this, currentState.internalAccounts.accounts, account.id);\n                }\n            }\n            if (addedAccounts.length > 0) {\n                for (const account of addedAccounts) {\n                    currentState.internalAccounts.accounts =\n                        __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_handleNewAccountAdded).call(this, currentState.internalAccounts.accounts, account);\n                }\n            }\n            // We don't use list accounts because it is not the updated state yet.\n            const existingAccounts = Object.values(currentState.internalAccounts.accounts);\n            // handle if the selected account was deleted\n            if (!currentState.internalAccounts.accounts[this.state.internalAccounts.selectedAccount]) {\n                const lastSelectedAccount = __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_getLastSelectedAccount).call(this, existingAccounts);\n                if (lastSelectedAccount) {\n                    currentState.internalAccounts.selectedAccount =\n                        lastSelectedAccount.id;\n                    currentState.internalAccounts.accounts[lastSelectedAccount.id].metadata.lastSelected = __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_getLastSelectedIndex).call(this);\n                    __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_publishAccountChangeEvent).call(this, lastSelectedAccount);\n                }\n                else {\n                    // It will be undefined if there are no accounts\n                    currentState.internalAccounts.selectedAccount = '';\n                }\n            }\n        });\n    }\n}, _AccountsController_handleOnSnapStateChange = function _AccountsController_handleOnSnapStateChange(snapState) {\n    // only check if snaps changed in status\n    const { snaps } = snapState;\n    const accounts = this.listMultichainAccounts().filter((account) => account.metadata.snap);\n    this.update((currentState) => {\n        accounts.forEach((account) => {\n            const currentAccount = currentState.internalAccounts.accounts[account.id];\n            if (currentAccount.metadata.snap) {\n                const snapId = currentAccount.metadata.snap.id;\n                const storedSnap = snaps[snapId];\n                if (storedSnap) {\n                    currentAccount.metadata.snap.enabled =\n                        storedSnap.enabled && !storedSnap.blocked;\n                }\n            }\n        });\n    });\n}, _AccountsController_getAccountsByKeyringType = function _AccountsController_getAccountsByKeyringType(keyringType, accounts) {\n    return (accounts ?? this.listMultichainAccounts()).filter((internalAccount) => {\n        // We do consider `hd` and `simple` keyrings to be of same type. So we check those 2 types\n        // to group those accounts together!\n        if (keyringType === keyring_controller_1.KeyringTypes.hd ||\n            keyringType === keyring_controller_1.KeyringTypes.simple) {\n            return (internalAccount.metadata.keyring.type === keyring_controller_1.KeyringTypes.hd ||\n                internalAccount.metadata.keyring.type === keyring_controller_1.KeyringTypes.simple);\n        }\n        return internalAccount.metadata.keyring.type === keyringType;\n    });\n}, _AccountsController_getLastSelectedAccount = function _AccountsController_getLastSelectedAccount(accounts) {\n    const [accountToSelect] = accounts.sort((accountA, accountB) => {\n        // sort by lastSelected descending\n        return ((accountB.metadata.lastSelected ?? 0) -\n            (accountA.metadata.lastSelected ?? 0));\n    });\n    return accountToSelect;\n}, _AccountsController_isAccountCompatibleWithChain = function _AccountsController_isAccountCompatibleWithChain(account, chainId) {\n    // TODO: Change this logic to not use account's type\n    // Because we currently only use type, we can only use namespace for now.\n    return account.type.startsWith((0, utils_1.parseCaipChainId)(chainId).namespace);\n}, _AccountsController_getLastSelectedIndex = function _AccountsController_getLastSelectedIndex() {\n    // NOTE: For now we use the current date, since we know this value\n    // will always be higher than any already selected account index.\n    return Date.now();\n}, _AccountsController_handleNewAccountAdded = function _AccountsController_handleNewAccountAdded(accountsState, account) {\n    let newAccount;\n    if (account.type !== keyring_controller_1.KeyringTypes.snap) {\n        newAccount = __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_generateInternalAccountForNonSnapAccount).call(this, account.address, account.type);\n    }\n    else {\n        const [snapKeyring] = this.messagingSystem.call('KeyringController:getKeyringsByType', eth_snap_keyring_1.SnapKeyring.type);\n        newAccount = snapKeyring.getAccountByAddress(account.address);\n        // The snap deleted the account before the keyring controller could add it\n        if (!newAccount) {\n            return accountsState;\n        }\n    }\n    const isFirstAccount = Object.keys(accountsState).length === 0;\n    // Get next account name available for this given keyring\n    const accountName = this.getNextAvailableAccountName(newAccount.metadata.keyring.type, Object.values(accountsState));\n    const newAccountWithUpdatedMetadata = {\n        ...newAccount,\n        metadata: {\n            ...newAccount.metadata,\n            name: accountName,\n            importTime: Date.now(),\n            lastSelected: isFirstAccount ? __classPrivateFieldGet(this, _AccountsController_instances, \"m\", _AccountsController_getLastSelectedIndex).call(this) : 0,\n        },\n    };\n    accountsState[newAccount.id] = newAccountWithUpdatedMetadata;\n    this.messagingSystem.publish('AccountsController:accountAdded', newAccountWithUpdatedMetadata);\n    return accountsState;\n}, _AccountsController_publishAccountChangeEvent = function _AccountsController_publishAccountChangeEvent(account) {\n    if ((0, keyring_api_1.isEvmAccountType)(account.type)) {\n        this.messagingSystem.publish('AccountsController:selectedEvmAccountChange', account);\n    }\n    this.messagingSystem.publish('AccountsController:selectedAccountChange', account);\n}, _AccountsController_handleAccountRemoved = function _AccountsController_handleAccountRemoved(accountsState, accountId) {\n    delete accountsState[accountId];\n    this.messagingSystem.publish('AccountsController:accountRemoved', accountId);\n    return accountsState;\n}, _AccountsController_populateExistingMetadata = function _AccountsController_populateExistingMetadata(accountId, metadataKey, account) {\n    const internalAccount = account ?? this.getAccount(accountId);\n    return internalAccount ? internalAccount.metadata[metadataKey] : undefined;\n}, _AccountsController_registerMessageHandlers = function _AccountsController_registerMessageHandlers() {\n    this.messagingSystem.registerActionHandler(`${controllerName}:setSelectedAccount`, this.setSelectedAccount.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:listAccounts`, this.listAccounts.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:listMultichainAccounts`, this.listMultichainAccounts.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:setAccountName`, this.setAccountName.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:updateAccounts`, this.updateAccounts.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:getSelectedAccount`, this.getSelectedAccount.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:getSelectedMultichainAccount`, this.getSelectedMultichainAccount.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:getAccountByAddress`, this.getAccountByAddress.bind(this));\n    this.messagingSystem.registerActionHandler(`${controllerName}:getNextAvailableAccountName`, this.getNextAvailableAccountName.bind(this));\n    this.messagingSystem.registerActionHandler(`AccountsController:getAccount`, this.getAccount.bind(this));\n    this.messagingSystem.registerActionHandler(`AccountsController:updateAccountMetadata`, this.updateAccountMetadata.bind(this));\n};\n//# sourceMappingURL=AccountsController.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUUIDFromAddressOfNormalAccount = exports.keyringTypeToName = exports.AccountsController = void 0;\nvar AccountsController_1 = require(\"./AccountsController.cjs\");\nObject.defineProperty(exports, \"AccountsController\", { enumerable: true, get: function () { return AccountsController_1.AccountsController; } });\nvar utils_1 = require(\"./utils.cjs\");\nObject.defineProperty(exports, \"keyringTypeToName\", { enumerable: true, get: function () { return utils_1.keyringTypeToName; } });\nObject.defineProperty(exports, \"getUUIDFromAddressOfNormalAccount\", { enumerable: true, get: function () { return utils_1.getUUIDFromAddressOfNormalAccount; } });\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isNormalKeyringType = exports.getUUIDFromAddressOfNormalAccount = exports.getUUIDOptionsFromAddressOfNormalAccount = exports.keyringTypeToName = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst keyring_controller_1 = require(\"@metamask/keyring-controller\");\nconst sha256_1 = require(\"ethereum-cryptography/sha256\");\nconst uuid_1 = require(\"uuid\");\n/**\n * Returns the name of the keyring type.\n *\n * @param keyringType - The type of the keyring.\n * @returns The name of the keyring type.\n */\nfunction keyringTypeToName(keyringType) {\n    // Custody keyrings are a special case, as they are not a single type\n    // they just start with the prefix `Custody`\n    if ((0, keyring_controller_1.isCustodyKeyring)(keyringType)) {\n        return 'Custody';\n    }\n    switch (keyringType) {\n        case keyring_controller_1.KeyringTypes.simple: {\n            return 'Account';\n        }\n        case keyring_controller_1.KeyringTypes.hd: {\n            return 'Account';\n        }\n        case keyring_controller_1.KeyringTypes.trezor: {\n            return 'Trezor';\n        }\n        case keyring_controller_1.KeyringTypes.ledger: {\n            return 'Ledger';\n        }\n        case keyring_controller_1.KeyringTypes.lattice: {\n            return 'Lattice';\n        }\n        case keyring_controller_1.KeyringTypes.qr: {\n            return 'QR';\n        }\n        case keyring_controller_1.KeyringTypes.snap: {\n            return 'Snap Account';\n        }\n        default: {\n            throw new Error(`Unknown keyring ${keyringType}`);\n        }\n    }\n}\nexports.keyringTypeToName = keyringTypeToName;\n/**\n * Generates a UUID v4 options from a given Ethereum address.\n * @param address - The Ethereum address to generate the UUID from.\n * @returns The UUID v4 options.\n */\nfunction getUUIDOptionsFromAddressOfNormalAccount(address) {\n    const v4options = {\n        random: (0, sha256_1.sha256)((0, util_1.toBuffer)(address)).slice(0, 16),\n    };\n    return v4options;\n}\nexports.getUUIDOptionsFromAddressOfNormalAccount = getUUIDOptionsFromAddressOfNormalAccount;\n/**\n * Generates a UUID from a given Ethereum address.\n * @param address - The Ethereum address to generate the UUID from.\n * @returns The generated UUID.\n */\nfunction getUUIDFromAddressOfNormalAccount(address) {\n    return (0, uuid_1.v4)(getUUIDOptionsFromAddressOfNormalAccount(address));\n}\nexports.getUUIDFromAddressOfNormalAccount = getUUIDFromAddressOfNormalAccount;\n/**\n * Check if a keyring type is considered a \"normal\" keyring.\n * @param keyringType - The account's keyring type.\n * @returns True if the keyring type is considered a \"normal\" keyring, false otherwise.\n */\nfunction isNormalKeyringType(keyringType) {\n    // Right now, we only have to \"exclude\" Snap accounts, but this might need to be\n    // adapted later on if we have new kind of keyrings!\n    return keyringType !== keyring_controller_1.KeyringTypes.snap;\n}\nexports.isNormalKeyringType = isNormalKeyringType;\n//# sourceMappingURL=utils.cjs.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/AddressBookController.ts\nvar _basecontroller = require('@metamask/base-controller');\n\n\n\n\n\n\nvar _controllerutils = require('@metamask/controller-utils');\nvar AddressType = /* @__PURE__ */ ((AddressType2) => {\n  AddressType2[\"externallyOwnedAccounts\"] = \"EXTERNALLY_OWNED_ACCOUNTS\";\n  AddressType2[\"contractAccounts\"] = \"CONTRACT_ACCOUNTS\";\n  AddressType2[\"nonAccounts\"] = \"NON_ACCOUNTS\";\n  return AddressType2;\n})(AddressType || {});\nvar AddressBookController = class extends _basecontroller.BaseControllerV1 {\n  /**\n   * Creates an AddressBookController instance.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config, state) {\n    super(config, state);\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"AddressBookController\";\n    this.defaultState = { addressBook: {} };\n    this.initialize();\n  }\n  /**\n   * Remove all contract entries.\n   */\n  clear() {\n    this.update({ addressBook: {} });\n  }\n  /**\n   * Remove a contract entry by address.\n   *\n   * @param chainId - Chain id identifies the current chain.\n   * @param address - Recipient address to delete.\n   * @returns Whether the entry was deleted.\n   */\n  delete(chainId, address) {\n    address = _controllerutils.toChecksumHexAddress.call(void 0, address);\n    if (![chainId, address].every((key) => _controllerutils.isSafeDynamicKey.call(void 0, key)) || !_controllerutils.isValidHexAddress.call(void 0, address) || !this.state.addressBook[chainId] || !this.state.addressBook[chainId][address]) {\n      return false;\n    }\n    const addressBook = Object.assign({}, this.state.addressBook);\n    delete addressBook[chainId][address];\n    if (Object.keys(addressBook[chainId]).length === 0) {\n      delete addressBook[chainId];\n    }\n    this.update({ addressBook });\n    return true;\n  }\n  /**\n   * Add or update a contact entry by address.\n   *\n   * @param address - Recipient address to add or update.\n   * @param name - Nickname to associate with this address.\n   * @param chainId - Chain id identifies the current chain.\n   * @param memo - User's note about address.\n   * @param addressType - Contact's address type.\n   * @returns Boolean indicating if the address was successfully set.\n   */\n  set(address, name, chainId = _controllerutils.toHex.call(void 0, 1), memo = \"\", addressType) {\n    address = _controllerutils.toChecksumHexAddress.call(void 0, address);\n    if (!_controllerutils.isValidHexAddress.call(void 0, address)) {\n      return false;\n    }\n    const entry = {\n      address,\n      chainId,\n      isEns: false,\n      memo,\n      name,\n      addressType\n    };\n    const ensName = _controllerutils.normalizeEnsName.call(void 0, name);\n    if (ensName) {\n      entry.name = ensName;\n      entry.isEns = true;\n    }\n    this.update({\n      addressBook: {\n        ...this.state.addressBook,\n        [chainId]: {\n          ...this.state.addressBook[chainId],\n          [address]: entry\n        }\n      }\n    });\n    return true;\n  }\n};\nvar AddressBookController_default = AddressBookController;\n\n\n\n\n\nexports.AddressType = AddressType; exports.AddressBookController = AddressBookController; exports.AddressBookController_default = AddressBookController_default;\n//# sourceMappingURL=chunk-ZEYDK2CL.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\nvar _chunkZEYDK2CLjs = require('./chunk-ZEYDK2CL.js');\n\n\n\nexports.AddressBookController = _chunkZEYDK2CLjs.AddressBookController; exports.AddressType = _chunkZEYDK2CLjs.AddressType;\n//# sourceMappingURL=index.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/BaseControllerV1.ts\nvar BaseControllerV1 = class {\n  /**\n   * Creates a BaseControllerV1 instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config = {}, state = {}) {\n    /**\n     * Default options used to configure this controller\n     */\n    this.defaultConfig = {};\n    /**\n     * Default state set on this controller\n     */\n    this.defaultState = {};\n    /**\n     * Determines if listeners are notified of state changes\n     */\n    this.disabled = false;\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"BaseController\";\n    this.internalConfig = this.defaultConfig;\n    this.internalState = this.defaultState;\n    this.internalListeners = [];\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns This controller instance.\n   */\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n  /**\n   * Retrieves current controller configuration options.\n   *\n   * @returns The current configuration.\n   */\n  get config() {\n    return this.internalConfig;\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return this.internalState;\n  }\n  /**\n   * Updates controller configuration.\n   *\n   * @param config - New configuration options.\n   * @param overwrite - Overwrite config instead of merging.\n   * @param fullUpdate - Boolean that defines if the update is partial or not.\n   */\n  configure(config, overwrite = false, fullUpdate = true) {\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key of Object.keys(this.internalConfig)) {\n        const value = this.internalConfig[key];\n        if (value !== void 0) {\n          this[key] = value;\n        }\n      }\n    } else {\n      for (const key of Object.keys(config)) {\n        if (this.internalConfig[key] !== void 0) {\n          const value = config[key];\n          this.internalConfig[key] = value;\n          this[key] = value;\n        }\n      }\n    }\n  }\n  /**\n   * Notifies all subscribed listeners of current state.\n   */\n  notify() {\n    if (this.disabled) {\n      return;\n    }\n    this.internalListeners.forEach((listener) => {\n      listener(this.internalState);\n    });\n  }\n  /**\n   * Adds new listener to be notified of state changes.\n   *\n   * @param listener - The callback triggered when state changes.\n   */\n  subscribe(listener) {\n    this.internalListeners.push(listener);\n  }\n  /**\n   * Removes existing listener from receiving state changes.\n   *\n   * @param listener - The callback to remove.\n   * @returns `true` if a listener is found and unsubscribed.\n   */\n  unsubscribe(listener) {\n    const index = this.internalListeners.findIndex((cb) => listener === cb);\n    index > -1 && this.internalListeners.splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Updates controller state.\n   *\n   * @param state - The new state.\n   * @param overwrite - Overwrite state instead of merging.\n   */\n  update(state, overwrite = false) {\n    this.internalState = overwrite ? Object.assign({}, state) : Object.assign({}, this.internalState, state);\n    this.notify();\n  }\n};\nvar BaseControllerV1_default = BaseControllerV1;\n\n\n\n\nexports.BaseControllerV1 = BaseControllerV1; exports.BaseControllerV1_default = BaseControllerV1_default;\n//# sourceMappingURL=chunk-FTHCJ6HY.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/ControllerMessenger.ts\nvar _actions, _events, _initialEventPayloadGetters, _eventPayloadCache;\nvar ControllerMessenger = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _actions, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _events, /* @__PURE__ */ new Map());\n    /**\n     * A map of functions for getting the initial event payload.\n     *\n     * Used only for events that represent state changes.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _initialEventPayloadGetters, /* @__PURE__ */ new Map());\n    /**\n     * A cache of selector return values for their respective handlers.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _eventPayloadCache, /* @__PURE__ */ new Map());\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw when a handler has been registered for this action type already.\n   * @template ActionType - A type union of Action type strings.\n   */\n  registerActionHandler(actionType, handler) {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).has(actionType)) {\n      throw new Error(\n        `A handler for ${actionType} has already been registered`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).set(actionType, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @template ActionType - A type union of Action type strings.\n   */\n  unregisterActionHandler(actionType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).delete(actionType);\n  }\n  /**\n   * Unregister all action handlers.\n   *\n   * This prevents all actions from being called.\n   */\n  clearActions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).clear();\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    const handler = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).get(actionType);\n    if (!handler) {\n      throw new Error(`A handler for ${actionType} has not been registered`);\n    }\n    return handler(...params);\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).set(eventType, getPayload);\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * Note that this method should never throw directly. Any errors from\n   * subscribers are captured and re-thrown in a timeout handler.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @template EventType - A type union of Event type strings.\n   */\n  publish(eventType, ...payload) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (subscribers) {\n      for (const [handler, selector] of subscribers.entries()) {\n        try {\n          if (selector) {\n            const previousValue = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).get(handler);\n            const newValue = selector(...payload);\n            if (newValue !== previousValue) {\n              _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, newValue);\n              handler(newValue, previousValue);\n            }\n          } else {\n            handler(...payload);\n          }\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          });\n        }\n      }\n    }\n  }\n  subscribe(eventType, handler, selector) {\n    let subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers) {\n      subscribers = /* @__PURE__ */ new Map();\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).set(eventType, subscribers);\n    }\n    subscribers.set(handler, selector);\n    if (selector) {\n      const getPayload = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).get(eventType);\n      if (getPayload) {\n        const initialValue = selector(...getPayload());\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, initialValue);\n      }\n    }\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw when the given event handler is not registered for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  unsubscribe(eventType, handler) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers || !subscribers.has(handler)) {\n      throw new Error(`Subscription not found for event: ${eventType}`);\n    }\n    const selector = subscribers.get(handler);\n    if (selector) {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).delete(handler);\n    }\n    subscribers.delete(handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  clearEventSubscriptions(eventType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).delete(eventType);\n  }\n  /**\n   * Clear all subscriptions.\n   *\n   * This will remove all subscribed handlers for all events.\n   */\n  clearSubscriptions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).clear();\n  }\n  /**\n   * Get a restricted controller messenger\n   *\n   * Returns a wrapper around the controller messenger instance that restricts access to actions\n   * and events. The provided allowlists grant the ability to call the listed actions and subscribe\n   * to the listed events. The \"name\" provided grants ownership of any actions and events under\n   * that namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - Controller messenger options.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   * @template Namespace - The namespace for this messenger. Typically this is the name of the controller or\n   * module that this messenger has been created for. The authority to publish events and register\n   * actions under this namespace is granted to this restricted messenger instance.\n   * @template AllowedAction - A type union of the 'type' string for any allowed actions.\n   * This must not include internal actions that are in the messenger's namespace.\n   * @template AllowedEvent - A type union of the 'type' string for any allowed events.\n   * This must not include internal events that are in the messenger's namespace.\n   * @returns The restricted controller messenger.\n   */\n  getRestricted({\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    return new (0, _chunkUJFCPTF3js.RestrictedControllerMessenger)({\n      controllerMessenger: this,\n      name,\n      allowedActions,\n      allowedEvents\n    });\n  }\n};\n_actions = new WeakMap();\n_events = new WeakMap();\n_initialEventPayloadGetters = new WeakMap();\n_eventPayloadCache = new WeakMap();\n\n\n\nexports.ControllerMessenger = ControllerMessenger;\n//# sourceMappingURL=chunk-G42723LG.js.map","import {\n  SubjectType,\n  SubjectMetadataController,\n} from '@metamask/permission-controller';\nimport { KeyringRpcMethod } from '@metamask/keyring-api';\n\n/**\n * The origins of the Portfolio dapp.\n */\nconst PORTFOLIO_ORIGINS: string[] = [\n  'https://portfolio.metamask.io',\n];\n\n/**\n * List of keyring methods MetaMask can call.\n */\nconst METAMASK_ALLOWED_METHODS: string[] = [\n  KeyringRpcMethod.ListAccounts,\n  KeyringRpcMethod.GetAccount,\n  KeyringRpcMethod.FilterAccountChains,\n  KeyringRpcMethod.DeleteAccount,\n  KeyringRpcMethod.ListRequests,\n  KeyringRpcMethod.GetRequest,\n  KeyringRpcMethod.SubmitRequest,\n  KeyringRpcMethod.RejectRequest,\n];\n\n/**\n * List of keyring methods a dapp can call.\n * !NOTE: DO NOT INCLUDE `KeyringRpcMethod.SubmitRequest` IN THIS LIST.\n */\nconst WEBSITE_ALLOWED_METHODS: string[] = [\n  KeyringRpcMethod.ListAccounts,\n  KeyringRpcMethod.GetAccount,\n  KeyringRpcMethod.CreateAccount,\n  KeyringRpcMethod.FilterAccountChains,\n  KeyringRpcMethod.UpdateAccount,\n  KeyringRpcMethod.DeleteAccount,\n  KeyringRpcMethod.ExportAccount,\n  KeyringRpcMethod.ListRequests,\n  KeyringRpcMethod.GetRequest,\n  KeyringRpcMethod.ApproveRequest,\n  KeyringRpcMethod.RejectRequest,\n];\n\n/**\n * List of keyring methods that Portfolio can call.\n */\nconst PORTFOLIO_ALLOWED_METHODS: string[] = [\n  KeyringRpcMethod.ListAccounts,\n  KeyringRpcMethod.GetAccount,\n  KeyringRpcMethod.GetAccountBalances,\n  KeyringRpcMethod.SubmitRequest,\n];\n\n/**\n * List of allowed protocols. On Flask, HTTP is also allowed for testing.\n */\nconst ALLOWED_PROTOCOLS: string[] = [\n  'https:',\n];\n\n/**\n * Checks if the protocol of the origin is allowed.\n *\n * @param origin - The origin to check.\n * @returns `true` if the protocol of the origin is allowed, `false` otherwise.\n */\nexport function isProtocolAllowed(origin: string): boolean {\n  try {\n    const url = new URL(origin);\n    return ALLOWED_PROTOCOLS.includes(url.protocol);\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Builds a function that returns the list of keyring methods an origin can\n * call.\n *\n * @param controller - Reference to the `SubjectMetadataController`.\n * @param origin - The origin itself.\n * @returns A function that returns the list of keyring methods an origin can\n * call.\n */\nexport function keyringSnapPermissionsBuilder(\n  controller: SubjectMetadataController,\n  origin: string,\n): () => string[] {\n  return () => {\n    if (origin === 'metamask') {\n      return METAMASK_ALLOWED_METHODS;\n    }\n\n    if (PORTFOLIO_ORIGINS.includes(origin)) {\n      return PORTFOLIO_ALLOWED_METHODS;\n    }\n\n    const originMetadata = controller.getSubjectMetadata(origin);\n    if (originMetadata?.subjectType === SubjectType.Website) {\n      return isProtocolAllowed(origin) ? WEBSITE_ALLOWED_METHODS : [];\n    }\n\n    return [];\n  };\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/BaseControllerV2.ts\nvar _immer = require('immer');\n_immer.enablePatches.call(void 0, );\nvar _internalState;\nvar BaseController = class {\n  /**\n   * Creates a BaseController instance.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - Controller messaging system.\n   * @param options.metadata - ControllerState metadata, describing how to \"anonymize\" the state, and which\n   * parts should be persisted.\n   * @param options.name - The name of the controller, used as a namespace for events and actions.\n   * @param options.state - Initial controller state.\n   */\n  constructor({\n    messenger,\n    metadata,\n    name,\n    state\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _internalState, void 0);\n    this.messagingSystem = messenger;\n    this.name = name;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, _immer.freeze.call(void 0, state, true));\n    this.metadata = metadata;\n    this.messagingSystem.registerActionHandler(\n      `${name}:getState`,\n      () => this.state\n    );\n    this.messagingSystem.registerInitialEventPayload({\n      eventType: `${name}:stateChange`,\n      getPayload: () => [this.state, []]\n    });\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState);\n  }\n  set state(_) {\n    throw new Error(\n      `Controller state cannot be directly mutated; use 'update' method instead.`\n    );\n  }\n  /**\n   * Updates controller state. Accepts a callback that is passed a draft copy\n   * of the controller state. If a value is returned, it is set as the new\n   * state. Otherwise, any changes made within that callback to the draft are\n   * applied to the controller state.\n   *\n   * @param callback - Callback for updating state, passed a draft state\n   * object. Return a new state object or mutate the draft to update state.\n   * @returns An object that has the next state, patches applied in the update and inverse patches to\n   * rollback the update.\n   */\n  update(callback) {\n    const [nextState, patches, inversePatches] = _immer.produceWithPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), callback);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n    return { nextState, patches, inversePatches };\n  }\n  /**\n   * Applies immer patches to the current state. The patches come from the\n   * update function itself and can either be normal or inverse patches.\n   *\n   * @param patches - An array of immer patches that are to be applied to make\n   * or undo changes.\n   */\n  applyPatches(patches) {\n    const nextState = _immer.applyPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), patches);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n  }\n  /**\n   * Prepares the controller for garbage collection. This should be extended\n   * by any subclasses to clean up any additional connections or events.\n   *\n   * The only cleanup performed here is to remove listeners. While technically\n   * this is not required to ensure this instance is garbage collected, it at\n   * least ensures this instance won't be responsible for preventing the\n   * listeners from being garbage collected.\n   */\n  destroy() {\n    this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`);\n  }\n};\n_internalState = new WeakMap();\nfunction getAnonymizedState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"anonymous\");\n}\nfunction getPersistentState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"persist\");\n}\nfunction deriveStateFromMetadata(state, metadata, metadataProperty) {\n  return Object.keys(state).reduce((derivedState, key) => {\n    try {\n      const stateMetadata = metadata[key];\n      if (!stateMetadata) {\n        throw new Error(`No metadata found for '${String(key)}'`);\n      }\n      const propertyMetadata = stateMetadata[metadataProperty];\n      const stateProperty = state[key];\n      if (typeof propertyMetadata === \"function\") {\n        derivedState[key] = propertyMetadata(stateProperty);\n      } else if (propertyMetadata) {\n        derivedState[key] = stateProperty;\n      }\n      return derivedState;\n    } catch (error) {\n      setTimeout(() => {\n        throw error;\n      });\n      return derivedState;\n    }\n  }, {});\n}\n\n\n\n\n\nexports.BaseController = BaseController; exports.getAnonymizedState = getAnonymizedState; exports.getPersistentState = getPersistentState;\n//# sourceMappingURL=chunk-IURK6TKD.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/RestrictedControllerMessenger.ts\nvar _controllerMessenger, _controllerName, _allowedActions, _allowedEvents, _isAllowedEvent, isAllowedEvent_fn, _isAllowedAction, isAllowedAction_fn, _isInCurrentNamespace, isInCurrentNamespace_fn;\nvar RestrictedControllerMessenger = class {\n  /**\n   * Constructs a restricted controller messenger\n   *\n   * The provided allowlists grant the ability to call the listed actions and subscribe to the\n   * listed events. The \"name\" provided grants ownership of any actions and events under that\n   * namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - The controller options.\n   * @param options.controllerMessenger - The controller messenger instance that is being wrapped.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   */\n  constructor({\n    controllerMessenger,\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    /**\n     * Determine whether the given event type is allowed. Event types are\n     * allowed if they are in the current namespace or on the list of\n     * allowed events.\n     *\n     * @param eventType - The event type to check.\n     * @returns Whether the event type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedEvent);\n    /**\n     * Determine whether the given action type is allowed. Action types\n     * are allowed if they are in the current namespace or on the list of\n     * allowed actions.\n     *\n     * @param actionType - The action type to check.\n     * @returns Whether the action type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedAction);\n    /**\n     * Determine whether the given name is within the current namespace.\n     *\n     * @param name - The name to check\n     * @returns Whether the name is within the current namespace\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isInCurrentNamespace);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerMessenger, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerName, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedActions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedEvents, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerMessenger, controllerMessenger);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerName, name);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedActions, allowedActions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedEvents, allowedEvents);\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * The action type this handler is registered under *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw if an action handler that is not in the current namespace is being registered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  registerActionHandler(action, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed registering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerActionHandler(action, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * The action type being unregistered *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unique identifier for this action.\n   * @throws Will throw if an action handler that is not in the current namespace is being unregistered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  unregisterActionHandler(action) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed unregistering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unregisterActionHandler(action);\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * The action type being called must be on the action allowlist.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of allowed Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedAction, isAllowedAction_fn).call(this, actionType)) {\n      throw new Error(`Action missing from allow list: ${actionType}`);\n    }\n    const response = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).call(\n      actionType,\n      ...params\n    );\n    return response;\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * The event type *must* be in the current namespace\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerInitialEventPayload({\n      eventType,\n      getPayload\n    });\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * The event type being published *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @throws Will throw if an event that is not in the current namespace is being published.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  publish(event, ...payload) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).publish(event, ...payload);\n  }\n  subscribe(event, handler, selector) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    if (selector) {\n      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler, selector);\n    }\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler);\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * The event type being unsubscribed to must be on the event allowlist.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw if the given event is not an allowed event for this controller messenger.\n   * @template EventType - A type union of allowed Event type strings.\n   */\n  unsubscribe(event, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unsubscribe(event, handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * The event type being cleared *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @throws Will throw if a subscription for an event that is not in the current namespace is being cleared.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  clearEventSubscriptions(event) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed clearing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).clearEventSubscriptions(event);\n  }\n};\n_controllerMessenger = new WeakMap();\n_controllerName = new WeakMap();\n_allowedActions = new WeakMap();\n_allowedEvents = new WeakMap();\n_isAllowedEvent = new WeakSet();\nisAllowedEvent_fn = function(eventType) {\n  const allowedEvents = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedEvents);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType) || allowedEvents !== null && allowedEvents.includes(eventType);\n};\n_isAllowedAction = new WeakSet();\nisAllowedAction_fn = function(actionType) {\n  const allowedActions = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedActions);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, actionType) || allowedActions !== null && allowedActions.includes(actionType);\n};\n_isInCurrentNamespace = new WeakSet();\nisInCurrentNamespace_fn = function(name) {\n  return name.startsWith(`${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:`);\n};\n\n\n\nexports.RestrictedControllerMessenger = RestrictedControllerMessenger;\n//# sourceMappingURL=chunk-UJFCPTF3.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkFTHCJ6HYjs = require('./chunk-FTHCJ6HY.js');\n\n\n\n\nvar _chunkIURK6TKDjs = require('./chunk-IURK6TKD.js');\n\n\nvar _chunkG42723LGjs = require('./chunk-G42723LG.js');\n\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\n\n\nexports.BaseController = _chunkIURK6TKDjs.BaseController; exports.BaseControllerV1 = _chunkFTHCJ6HYjs.BaseControllerV1; exports.ControllerMessenger = _chunkG42723LGjs.ControllerMessenger; exports.RestrictedControllerMessenger = _chunkUJFCPTF3js.RestrictedControllerMessenger; exports.getAnonymizedState = _chunkIURK6TKDjs.getAnonymizedState; exports.getPersistentState = _chunkIURK6TKDjs.getPersistentState;\n//# sourceMappingURL=index.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/AnnouncementController.ts\nvar _basecontroller = require('@metamask/base-controller');\nvar controllerName = \"AnnouncementController\";\nvar defaultState = {\n  announcements: {}\n};\nvar metadata = {\n  announcements: {\n    persist: true,\n    anonymous: true\n  }\n};\nvar _addAnnouncements, addAnnouncements_fn;\nvar AnnouncementController = class extends _basecontroller.BaseController {\n  /**\n   * Creates a AnnouncementController instance.\n   *\n   * @param args - The arguments to this function.\n   * @param args.messenger - Messenger used to communicate with BaseV2 controller.\n   * @param args.state - Initial state to set on this controller.\n   * @param args.allAnnouncements - Announcements to be passed through to #addAnnouncements\n   */\n  constructor({\n    messenger,\n    state,\n    allAnnouncements\n  }) {\n    const mergedState = { ...defaultState, ...state };\n    super({ messenger, metadata, name: controllerName, state: mergedState });\n    /**\n     * Compares the announcements in state with the announcements from file\n     * to check if there are any new announcements\n     * if yes, the new announcement will be added to the state with a flag indicating\n     * that the announcement is not seen by the user.\n     *\n     * @param allAnnouncements - all announcements to compare with the announcements from state\n     */\n    __privateAdd(this, _addAnnouncements);\n    __privateMethod(this, _addAnnouncements, addAnnouncements_fn).call(this, allAnnouncements);\n  }\n  /**\n   * Resets the isShown status for all announcements\n   */\n  resetViewed() {\n    this.update(({ announcements }) => {\n      for (const announcement of Object.values(announcements)) {\n        announcement.isShown = false;\n      }\n    });\n  }\n  /**\n   * Updates the status of the status of the specified announcements\n   * once it is read by the user.\n   *\n   * @param viewedIds - The announcement IDs to mark as viewed.\n   */\n  updateViewed(viewedIds) {\n    this.update(({ announcements }) => {\n      for (const id of Object.keys(viewedIds).map(Number)) {\n        announcements[id].isShown = viewedIds[id];\n      }\n    });\n  }\n};\n_addAnnouncements = new WeakSet();\naddAnnouncements_fn = function(allAnnouncements) {\n  this.update((state) => {\n    Object.values(allAnnouncements).forEach((announcement) => {\n      state.announcements[announcement.id] = state.announcements[announcement.id] ?? { ...announcement, isShown: false };\n    });\n  });\n};\n\n\n\nexports.AnnouncementController = AnnouncementController;\n//# sourceMappingURL=chunk-ZGM3XNIO.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkZGM3XNIOjs = require('./chunk-ZGM3XNIO.js');\n\n\nexports.AnnouncementController = _chunkZGM3XNIOjs.AnnouncementController;\n//# sourceMappingURL=index.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/BaseControllerV1.ts\nvar BaseControllerV1 = class {\n  /**\n   * Creates a BaseControllerV1 instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config = {}, state = {}) {\n    /**\n     * Default options used to configure this controller\n     */\n    this.defaultConfig = {};\n    /**\n     * Default state set on this controller\n     */\n    this.defaultState = {};\n    /**\n     * Determines if listeners are notified of state changes\n     */\n    this.disabled = false;\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"BaseController\";\n    this.internalConfig = this.defaultConfig;\n    this.internalState = this.defaultState;\n    this.internalListeners = [];\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns This controller instance.\n   */\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n  /**\n   * Retrieves current controller configuration options.\n   *\n   * @returns The current configuration.\n   */\n  get config() {\n    return this.internalConfig;\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return this.internalState;\n  }\n  /**\n   * Updates controller configuration.\n   *\n   * @param config - New configuration options.\n   * @param overwrite - Overwrite config instead of merging.\n   * @param fullUpdate - Boolean that defines if the update is partial or not.\n   */\n  configure(config, overwrite = false, fullUpdate = true) {\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key of Object.keys(this.internalConfig)) {\n        const value = this.internalConfig[key];\n        if (value !== void 0) {\n          this[key] = value;\n        }\n      }\n    } else {\n      for (const key of Object.keys(config)) {\n        if (this.internalConfig[key] !== void 0) {\n          const value = config[key];\n          this.internalConfig[key] = value;\n          this[key] = value;\n        }\n      }\n    }\n  }\n  /**\n   * Notifies all subscribed listeners of current state.\n   */\n  notify() {\n    if (this.disabled) {\n      return;\n    }\n    this.internalListeners.forEach((listener) => {\n      listener(this.internalState);\n    });\n  }\n  /**\n   * Adds new listener to be notified of state changes.\n   *\n   * @param listener - The callback triggered when state changes.\n   */\n  subscribe(listener) {\n    this.internalListeners.push(listener);\n  }\n  /**\n   * Removes existing listener from receiving state changes.\n   *\n   * @param listener - The callback to remove.\n   * @returns `true` if a listener is found and unsubscribed.\n   */\n  unsubscribe(listener) {\n    const index = this.internalListeners.findIndex((cb) => listener === cb);\n    index > -1 && this.internalListeners.splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Updates controller state.\n   *\n   * @param state - The new state.\n   * @param overwrite - Overwrite state instead of merging.\n   */\n  update(state, overwrite = false) {\n    this.internalState = overwrite ? Object.assign({}, state) : Object.assign({}, this.internalState, state);\n    this.notify();\n  }\n};\nvar BaseControllerV1_default = BaseControllerV1;\n\n\n\n\nexports.BaseControllerV1 = BaseControllerV1; exports.BaseControllerV1_default = BaseControllerV1_default;\n//# sourceMappingURL=chunk-FTHCJ6HY.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/ControllerMessenger.ts\nvar _actions, _events, _initialEventPayloadGetters, _eventPayloadCache;\nvar ControllerMessenger = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _actions, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _events, /* @__PURE__ */ new Map());\n    /**\n     * A map of functions for getting the initial event payload.\n     *\n     * Used only for events that represent state changes.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _initialEventPayloadGetters, /* @__PURE__ */ new Map());\n    /**\n     * A cache of selector return values for their respective handlers.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _eventPayloadCache, /* @__PURE__ */ new Map());\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw when a handler has been registered for this action type already.\n   * @template ActionType - A type union of Action type strings.\n   */\n  registerActionHandler(actionType, handler) {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).has(actionType)) {\n      throw new Error(\n        `A handler for ${actionType} has already been registered`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).set(actionType, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @template ActionType - A type union of Action type strings.\n   */\n  unregisterActionHandler(actionType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).delete(actionType);\n  }\n  /**\n   * Unregister all action handlers.\n   *\n   * This prevents all actions from being called.\n   */\n  clearActions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).clear();\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    const handler = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).get(actionType);\n    if (!handler) {\n      throw new Error(`A handler for ${actionType} has not been registered`);\n    }\n    return handler(...params);\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).set(eventType, getPayload);\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * Note that this method should never throw directly. Any errors from\n   * subscribers are captured and re-thrown in a timeout handler.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @template EventType - A type union of Event type strings.\n   */\n  publish(eventType, ...payload) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (subscribers) {\n      for (const [handler, selector] of subscribers.entries()) {\n        try {\n          if (selector) {\n            const previousValue = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).get(handler);\n            const newValue = selector(...payload);\n            if (newValue !== previousValue) {\n              _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, newValue);\n              handler(newValue, previousValue);\n            }\n          } else {\n            handler(...payload);\n          }\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          });\n        }\n      }\n    }\n  }\n  subscribe(eventType, handler, selector) {\n    let subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers) {\n      subscribers = /* @__PURE__ */ new Map();\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).set(eventType, subscribers);\n    }\n    subscribers.set(handler, selector);\n    if (selector) {\n      const getPayload = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).get(eventType);\n      if (getPayload) {\n        const initialValue = selector(...getPayload());\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, initialValue);\n      }\n    }\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw when the given event handler is not registered for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  unsubscribe(eventType, handler) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers || !subscribers.has(handler)) {\n      throw new Error(`Subscription not found for event: ${eventType}`);\n    }\n    const selector = subscribers.get(handler);\n    if (selector) {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).delete(handler);\n    }\n    subscribers.delete(handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  clearEventSubscriptions(eventType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).delete(eventType);\n  }\n  /**\n   * Clear all subscriptions.\n   *\n   * This will remove all subscribed handlers for all events.\n   */\n  clearSubscriptions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).clear();\n  }\n  /**\n   * Get a restricted controller messenger\n   *\n   * Returns a wrapper around the controller messenger instance that restricts access to actions\n   * and events. The provided allowlists grant the ability to call the listed actions and subscribe\n   * to the listed events. The \"name\" provided grants ownership of any actions and events under\n   * that namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - Controller messenger options.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   * @template Namespace - The namespace for this messenger. Typically this is the name of the controller or\n   * module that this messenger has been created for. The authority to publish events and register\n   * actions under this namespace is granted to this restricted messenger instance.\n   * @template AllowedAction - A type union of the 'type' string for any allowed actions.\n   * This must not include internal actions that are in the messenger's namespace.\n   * @template AllowedEvent - A type union of the 'type' string for any allowed events.\n   * This must not include internal events that are in the messenger's namespace.\n   * @returns The restricted controller messenger.\n   */\n  getRestricted({\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    return new (0, _chunkUJFCPTF3js.RestrictedControllerMessenger)({\n      controllerMessenger: this,\n      name,\n      allowedActions,\n      allowedEvents\n    });\n  }\n};\n_actions = new WeakMap();\n_events = new WeakMap();\n_initialEventPayloadGetters = new WeakMap();\n_eventPayloadCache = new WeakMap();\n\n\n\nexports.ControllerMessenger = ControllerMessenger;\n//# sourceMappingURL=chunk-G42723LG.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/BaseControllerV2.ts\nvar _immer = require('immer');\n_immer.enablePatches.call(void 0, );\nvar _internalState;\nvar BaseController = class {\n  /**\n   * Creates a BaseController instance.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - Controller messaging system.\n   * @param options.metadata - ControllerState metadata, describing how to \"anonymize\" the state, and which\n   * parts should be persisted.\n   * @param options.name - The name of the controller, used as a namespace for events and actions.\n   * @param options.state - Initial controller state.\n   */\n  constructor({\n    messenger,\n    metadata,\n    name,\n    state\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _internalState, void 0);\n    this.messagingSystem = messenger;\n    this.name = name;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, _immer.freeze.call(void 0, state, true));\n    this.metadata = metadata;\n    this.messagingSystem.registerActionHandler(\n      `${name}:getState`,\n      () => this.state\n    );\n    this.messagingSystem.registerInitialEventPayload({\n      eventType: `${name}:stateChange`,\n      getPayload: () => [this.state, []]\n    });\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState);\n  }\n  set state(_) {\n    throw new Error(\n      `Controller state cannot be directly mutated; use 'update' method instead.`\n    );\n  }\n  /**\n   * Updates controller state. Accepts a callback that is passed a draft copy\n   * of the controller state. If a value is returned, it is set as the new\n   * state. Otherwise, any changes made within that callback to the draft are\n   * applied to the controller state.\n   *\n   * @param callback - Callback for updating state, passed a draft state\n   * object. Return a new state object or mutate the draft to update state.\n   * @returns An object that has the next state, patches applied in the update and inverse patches to\n   * rollback the update.\n   */\n  update(callback) {\n    const [nextState, patches, inversePatches] = _immer.produceWithPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), callback);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n    return { nextState, patches, inversePatches };\n  }\n  /**\n   * Applies immer patches to the current state. The patches come from the\n   * update function itself and can either be normal or inverse patches.\n   *\n   * @param patches - An array of immer patches that are to be applied to make\n   * or undo changes.\n   */\n  applyPatches(patches) {\n    const nextState = _immer.applyPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), patches);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n  }\n  /**\n   * Prepares the controller for garbage collection. This should be extended\n   * by any subclasses to clean up any additional connections or events.\n   *\n   * The only cleanup performed here is to remove listeners. While technically\n   * this is not required to ensure this instance is garbage collected, it at\n   * least ensures this instance won't be responsible for preventing the\n   * listeners from being garbage collected.\n   */\n  destroy() {\n    this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`);\n  }\n};\n_internalState = new WeakMap();\nfunction getAnonymizedState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"anonymous\");\n}\nfunction getPersistentState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"persist\");\n}\nfunction deriveStateFromMetadata(state, metadata, metadataProperty) {\n  return Object.keys(state).reduce((derivedState, key) => {\n    try {\n      const stateMetadata = metadata[key];\n      if (!stateMetadata) {\n        throw new Error(`No metadata found for '${String(key)}'`);\n      }\n      const propertyMetadata = stateMetadata[metadataProperty];\n      const stateProperty = state[key];\n      if (typeof propertyMetadata === \"function\") {\n        derivedState[key] = propertyMetadata(stateProperty);\n      } else if (propertyMetadata) {\n        derivedState[key] = stateProperty;\n      }\n      return derivedState;\n    } catch (error) {\n      setTimeout(() => {\n        throw error;\n      });\n      return derivedState;\n    }\n  }, {});\n}\n\n\n\n\n\nexports.BaseController = BaseController; exports.getAnonymizedState = getAnonymizedState; exports.getPersistentState = getPersistentState;\n//# sourceMappingURL=chunk-IURK6TKD.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/RestrictedControllerMessenger.ts\nvar _controllerMessenger, _controllerName, _allowedActions, _allowedEvents, _isAllowedEvent, isAllowedEvent_fn, _isAllowedAction, isAllowedAction_fn, _isInCurrentNamespace, isInCurrentNamespace_fn;\nvar RestrictedControllerMessenger = class {\n  /**\n   * Constructs a restricted controller messenger\n   *\n   * The provided allowlists grant the ability to call the listed actions and subscribe to the\n   * listed events. The \"name\" provided grants ownership of any actions and events under that\n   * namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - The controller options.\n   * @param options.controllerMessenger - The controller messenger instance that is being wrapped.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   */\n  constructor({\n    controllerMessenger,\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    /**\n     * Determine whether the given event type is allowed. Event types are\n     * allowed if they are in the current namespace or on the list of\n     * allowed events.\n     *\n     * @param eventType - The event type to check.\n     * @returns Whether the event type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedEvent);\n    /**\n     * Determine whether the given action type is allowed. Action types\n     * are allowed if they are in the current namespace or on the list of\n     * allowed actions.\n     *\n     * @param actionType - The action type to check.\n     * @returns Whether the action type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedAction);\n    /**\n     * Determine whether the given name is within the current namespace.\n     *\n     * @param name - The name to check\n     * @returns Whether the name is within the current namespace\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isInCurrentNamespace);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerMessenger, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerName, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedActions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedEvents, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerMessenger, controllerMessenger);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerName, name);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedActions, allowedActions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedEvents, allowedEvents);\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * The action type this handler is registered under *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw if an action handler that is not in the current namespace is being registered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  registerActionHandler(action, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed registering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerActionHandler(action, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * The action type being unregistered *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unique identifier for this action.\n   * @throws Will throw if an action handler that is not in the current namespace is being unregistered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  unregisterActionHandler(action) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed unregistering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unregisterActionHandler(action);\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * The action type being called must be on the action allowlist.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of allowed Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedAction, isAllowedAction_fn).call(this, actionType)) {\n      throw new Error(`Action missing from allow list: ${actionType}`);\n    }\n    const response = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).call(\n      actionType,\n      ...params\n    );\n    return response;\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * The event type *must* be in the current namespace\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerInitialEventPayload({\n      eventType,\n      getPayload\n    });\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * The event type being published *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @throws Will throw if an event that is not in the current namespace is being published.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  publish(event, ...payload) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).publish(event, ...payload);\n  }\n  subscribe(event, handler, selector) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    if (selector) {\n      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler, selector);\n    }\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler);\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * The event type being unsubscribed to must be on the event allowlist.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw if the given event is not an allowed event for this controller messenger.\n   * @template EventType - A type union of allowed Event type strings.\n   */\n  unsubscribe(event, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unsubscribe(event, handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * The event type being cleared *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @throws Will throw if a subscription for an event that is not in the current namespace is being cleared.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  clearEventSubscriptions(event) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed clearing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).clearEventSubscriptions(event);\n  }\n};\n_controllerMessenger = new WeakMap();\n_controllerName = new WeakMap();\n_allowedActions = new WeakMap();\n_allowedEvents = new WeakMap();\n_isAllowedEvent = new WeakSet();\nisAllowedEvent_fn = function(eventType) {\n  const allowedEvents = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedEvents);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType) || allowedEvents !== null && allowedEvents.includes(eventType);\n};\n_isAllowedAction = new WeakSet();\nisAllowedAction_fn = function(actionType) {\n  const allowedActions = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedActions);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, actionType) || allowedActions !== null && allowedActions.includes(actionType);\n};\n_isInCurrentNamespace = new WeakSet();\nisInCurrentNamespace_fn = function(name) {\n  return name.startsWith(`${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:`);\n};\n\n\n\nexports.RestrictedControllerMessenger = RestrictedControllerMessenger;\n//# sourceMappingURL=chunk-UJFCPTF3.js.map","import { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { KeyringControllerGetKeyringForAccountAction } from '@metamask/keyring-controller';\nimport { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport { GetSnap } from '@metamask/snaps-controllers';\nimport { Snap } from '@metamask/snaps-utils';\n\ntype AllowedActions =\n  | GetSnap\n  | KeyringControllerGetKeyringForAccountAction\n  | AccountsControllerGetSelectedAccountAction;\n\nexport type SnapAndHardwareMessenger = RestrictedControllerMessenger<\n  'SnapAndHardwareMessenger',\n  AllowedActions,\n  never,\n  AllowedActions['type'],\n  never\n>;\n\nexport async function getSnapAndHardwareInfoForMetrics(\n  getAccountType: (address: string) => Promise<string>,\n  getDeviceModel: (address: string) => Promise<string>,\n  messenger: SnapAndHardwareMessenger,\n) {\n  // If it's coming from a unit test, there's no messenger\n  // Will fix this in a future PR and add proper unit tests\n  if (!messenger) {\n    return {};\n  }\n\n  const account = messenger.call('AccountsController:getSelectedAccount');\n  const selectedAddress = account.address;\n  const { keyring } = account.metadata;\n\n  let snap;\n  if (account.metadata.snap?.id) {\n    snap = messenger.call(\n      'SnapController:get',\n      account.metadata.snap?.id,\n    ) as Snap;\n  }\n\n  async function getHardwareWalletType() {\n    if (keyring?.type?.includes('Hardware')) {\n      return keyring.type;\n    }\n\n    return undefined;\n  }\n\n  return {\n    account_type: await getAccountType(selectedAddress),\n    device_model: await getDeviceModel(selectedAddress),\n    account_hardware_type: await getHardwareWalletType(),\n    account_snap_type: snap?.id,\n    account_snap_version: snap?.version,\n  };\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkFTHCJ6HYjs = require('./chunk-FTHCJ6HY.js');\n\n\n\n\nvar _chunkIURK6TKDjs = require('./chunk-IURK6TKD.js');\n\n\nvar _chunkG42723LGjs = require('./chunk-G42723LG.js');\n\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\n\n\nexports.BaseController = _chunkIURK6TKDjs.BaseController; exports.BaseControllerV1 = _chunkFTHCJ6HYjs.BaseControllerV1; exports.ControllerMessenger = _chunkG42723LGjs.ControllerMessenger; exports.RestrictedControllerMessenger = _chunkUJFCPTF3js.RestrictedControllerMessenger; exports.getAnonymizedState = _chunkIURK6TKDjs.getAnonymizedState; exports.getPersistentState = _chunkIURK6TKDjs.getPersistentState;\n//# sourceMappingURL=index.js.map","import { SnapKeyring } from '@metamask/eth-snap-keyring';\nimport type { SnapController } from '@metamask/snaps-controllers';\nimport browser from 'webextension-polyfill';\nimport { SnapId } from '@metamask/snaps-sdk';\nimport {\n  MetaMetricsEventAccountType,\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n} from '../../../../shared/constants/metametrics';\nimport { SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES } from '../../../../shared/constants/app';\nimport { t } from '../../translate';\nimport MetamaskController from '../../metamask-controller';\nimport { IconName } from '../../../../ui/components/component-library/icon';\nimport { isBlockedUrl } from './utils/isBlockedUrl';\nimport { showError, showSuccess } from './utils/showResult';\nimport { SnapKeyringBuilderMessenger } from './types';\n\n/**\n * Get the addresses of the accounts managed by a given Snap.\n *\n * @param controller - Instance of the MetaMask Controller.\n * @param snapId - Snap ID to get accounts for.\n * @returns The addresses of the accounts.\n */\nexport const getAccountsBySnapId = async (\n  controller: MetamaskController,\n  snapId: SnapId,\n) => {\n  const snapKeyring: SnapKeyring = await controller.getSnapKeyring();\n  return await snapKeyring.getAccountsBySnapId(snapId);\n};\n\n/**\n * Show the account creation dialog for a given Snap.\n * This function will start the approval flow, show the account creation dialog, and end the flow.\n *\n * @param snapId - Snap ID to show the account creation dialog for.\n * @param controllerMessenger - The controller messenger instance.\n * @returns The user's confirmation result.\n */\nexport async function showAccountCreationDialog(\n  snapId: string,\n  controllerMessenger: SnapKeyringBuilderMessenger,\n) {\n  try {\n    const confirmationResult = Boolean(\n      await controllerMessenger.call(\n        'ApprovalController:addRequest',\n        {\n          origin: snapId,\n          type: SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountCreation,\n        },\n        true,\n      ),\n    );\n    return confirmationResult;\n  } catch (e) {\n    throw new Error(\n      `Error occurred while showing account creation dialog.\\n${e}`,\n    );\n  }\n}\n\n/**\n * Show the account name suggestion confirmation dialog for a given Snap.\n *\n * @param snapId - Snap ID to show the account name suggestion dialog for.\n * @param controllerMessenger - The controller messenger instance.\n * @param accountNameSuggestion - Suggested name for the new account.\n * @returns The user's confirmation result.\n */\nexport async function showAccountNameSuggestionDialog(\n  snapId: string,\n  controllerMessenger: SnapKeyringBuilderMessenger,\n  accountNameSuggestion: string,\n): Promise<{ success: boolean; name?: string }> {\n  try {\n    const confirmationResult = (await controllerMessenger.call(\n      'ApprovalController:addRequest',\n      {\n        origin: snapId,\n        type: SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.showNameSnapAccount,\n        requestData: {\n          snapSuggestedAccountName: accountNameSuggestion,\n        },\n      },\n      true,\n    )) as { success: boolean; name?: string };\n    return confirmationResult;\n  } catch (e) {\n    throw new Error(`Error occurred while showing name account dialog.\\n${e}`);\n  }\n}\n\n/**\n * Constructs a SnapKeyring builder with specified handlers for managing snap accounts.\n *\n * @param controllerMessenger - The controller messenger instance.\n * @param getSnapController - A function that retrieves the Snap Controller instance.\n * @param persistKeyringHelper - A function that persists all keyrings in the vault.\n * @param removeAccountHelper - A function to help remove an account based on its address.\n * @param trackEvent - A function to track MetaMetrics events.\n * @param getSnapName - A function to get a snap's localized\n * (or non-localized if there are no localization files) name from its manifest.\n * @param isSnapPreinstalled - A function to check if a Snap is pre-installed.\n * @returns The constructed SnapKeyring builder instance with the following methods:\n * - `saveState`: Persists all keyrings in the keyring controller.\n * - `addAccount`: Initiates the process of adding an account with user confirmation and handling the user input.\n * - `removeAccount`: Initiates the process of removing an account with user confirmation and handling the user input.\n */\nexport const snapKeyringBuilder = (\n  controllerMessenger: SnapKeyringBuilderMessenger,\n  getSnapController: () => SnapController,\n  persistKeyringHelper: () => Promise<void>,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  removeAccountHelper: (address: string) => Promise<any>,\n  trackEvent: (\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    payload: Record<string, any>,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options?: Record<string, any>,\n  ) => void,\n  getSnapName: (snapId: string) => string,\n  isSnapPreinstalled: (snapId: string) => boolean,\n) => {\n  const builder = (() => {\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new SnapKeyring(getSnapController() as any, {\n      addressExists: async (address) => {\n        const addresses = await controllerMessenger.call(\n          'KeyringController:getAccounts',\n        );\n        return addresses.includes(address.toLowerCase());\n      },\n      redirectUser: async (snapId: string, url: string, message: string) => {\n        // Either url or message must be defined\n        if (url.length > 0 || message.length > 0) {\n          const isBlocked = await isBlockedUrl(\n            url,\n            async () => {\n              return await controllerMessenger.call(\n                'PhishingController:maybeUpdateState',\n              );\n            },\n            (urlToTest: string) => {\n              return controllerMessenger.call(\n                'PhishingController:testOrigin',\n                urlToTest,\n              );\n            },\n          );\n\n          const confirmationResult = await controllerMessenger.call(\n            'ApprovalController:addRequest',\n            {\n              origin: snapId,\n              requestData: { url, message, isBlockedUrl: isBlocked },\n              type: SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.showSnapAccountRedirect,\n            },\n            true,\n          );\n\n          if (Boolean(confirmationResult) && url.length > 0) {\n            browser.tabs.create({ url });\n          } else {\n            console.log('User refused snap account redirection to:', url);\n          }\n        } else {\n          console.log(\n            'Error occurred when redirecting snap account. url or message must be defined',\n          );\n        }\n      },\n      saveState: async () => {\n        await persistKeyringHelper();\n      },\n      addAccount: async (\n        address: string,\n        snapId: string,\n        handleUserInput: (accepted: boolean) => Promise<void>,\n        accountNameSuggestion: string = '',\n        displayConfirmation: boolean = false,\n      ) => {\n        const snapName = getSnapName(snapId);\n        const { id: addAccountFlowId } = controllerMessenger.call(\n          'ApprovalController:startFlow',\n        );\n\n        const trackSnapAccountEvent = (event: MetaMetricsEventName) => {\n          trackEvent({\n            event,\n            category: MetaMetricsEventCategory.Accounts,\n            properties: {\n              account_type: MetaMetricsEventAccountType.Snap,\n              snap_id: snapId,\n              snap_name: snapName,\n            },\n          });\n        };\n\n        try {\n          const learnMoreLink =\n            'https://support.metamask.io/managing-my-wallet/accounts-and-addresses/how-to-add-accounts-in-your-wallet/';\n\n          // If snap is preinstalled and does not request confirmation, skip the confirmation dialog\n          const skipConfirmation =\n            isSnapPreinstalled(snapId) && !displayConfirmation;\n          // If confirmation dialog are skipped, we consider the account creation to be confirmed until the account name dialog is closed\n          const accountCreationConfirmationResult =\n            skipConfirmation ||\n            (await showAccountCreationDialog(snapId, controllerMessenger));\n\n          if (!accountCreationConfirmationResult) {\n            // User has cancelled account creation\n            await handleUserInput(accountCreationConfirmationResult);\n\n            throw new Error('User denied account creation');\n          }\n\n          const accountNameConfirmationResult =\n            await showAccountNameSuggestionDialog(\n              snapId,\n              controllerMessenger,\n              accountNameSuggestion,\n            );\n\n          if (accountNameConfirmationResult?.success) {\n            try {\n              // Persist the account so we can rename it afterward\n              await persistKeyringHelper();\n              await handleUserInput(accountNameConfirmationResult.success);\n              const account = controllerMessenger.call(\n                'AccountsController:getAccountByAddress',\n                address,\n              );\n              if (!account) {\n                throw new Error(\n                  `Internal account not found for address: ${address}`,\n                );\n              }\n              // Set the selected account to the new account\n              controllerMessenger.call(\n                'AccountsController:setSelectedAccount',\n                account.id,\n              );\n\n              if (accountNameConfirmationResult.name) {\n                controllerMessenger.call(\n                  'AccountsController:setAccountName',\n                  account.id,\n                  accountNameConfirmationResult.name,\n                );\n              }\n\n              if (!skipConfirmation) {\n                // TODO: Add events tracking to the dialog itself, so that events are more\n                // \"linked\" to UI actions\n                // User should now see the \"Successfuly added account\" page\n                trackSnapAccountEvent(\n                  MetaMetricsEventName.AddSnapAccountSuccessViewed,\n                );\n                await showSuccess(\n                  controllerMessenger,\n                  snapId,\n                  {\n                    icon: IconName.UserCircleAdd,\n                    title: t('snapAccountCreated'),\n                  },\n                  {\n                    message: t('snapAccountCreatedDescription') as string,\n                    address,\n                    learnMoreLink,\n                  },\n                );\n                // User has clicked on \"OK\"\n                trackSnapAccountEvent(\n                  MetaMetricsEventName.AddSnapAccountSuccessClicked,\n                );\n              }\n\n              trackSnapAccountEvent(MetaMetricsEventName.AccountAdded);\n            } catch (e) {\n              // Error occurred while naming the account\n              const error = (e as Error).message;\n\n              await showError(\n                controllerMessenger,\n                snapId,\n                {\n                  icon: IconName.UserCircleAdd,\n                  title: t('snapAccountCreationFailed'),\n                },\n                {\n                  message: t(\n                    'snapAccountCreationFailedDescription',\n                    snapName,\n                  ) as string,\n                  learnMoreLink,\n                  error,\n                },\n              );\n\n              throw new Error(\n                `Error occurred while creating snap account: ${error}`,\n              );\n            }\n          } else {\n            // User has cancelled account creation so remove the account from the keyring\n            await handleUserInput(accountNameConfirmationResult?.success);\n\n            throw new Error('User denied account creation');\n          }\n        } finally {\n          controllerMessenger.call('ApprovalController:endFlow', {\n            id: addAccountFlowId,\n          });\n        }\n      },\n      removeAccount: async (\n        address: string,\n        snapId: string,\n        handleUserInput: (accepted: boolean) => Promise<void>,\n      ) => {\n        const snapName = getSnapName(snapId);\n        const { id: removeAccountApprovalId } = controllerMessenger.call(\n          'ApprovalController:startFlow',\n        );\n\n        const learnMoreLink =\n          'https://support.metamask.io/managing-my-wallet/accounts-and-addresses/how-to-remove-an-account-from-your-metamask-wallet/';\n\n        const trackSnapAccountEvent = (event: MetaMetricsEventName) => {\n          trackEvent({\n            event,\n            category: MetaMetricsEventCategory.Accounts,\n            properties: {\n              account_type: MetaMetricsEventAccountType.Snap,\n              snap_id: snapId,\n              snap_name: snapName,\n            },\n          });\n        };\n\n        // Since we use this in the finally, better to give it a default value if the controller call fails\n        let confirmationResult = false;\n        try {\n          confirmationResult = Boolean(\n            await controllerMessenger.call(\n              'ApprovalController:addRequest',\n              {\n                origin: snapId,\n                type: SNAP_MANAGE_ACCOUNTS_CONFIRMATION_TYPES.confirmAccountRemoval,\n                requestData: { publicAddress: address },\n              },\n              true,\n            ),\n          );\n\n          if (confirmationResult) {\n            try {\n              await removeAccountHelper(address);\n              await handleUserInput(confirmationResult);\n              await persistKeyringHelper();\n\n              // TODO: Add events tracking to the dialog itself, so that events are more\n              // \"linked\" to UI actions\n              // User should now see the \"Successfuly removed account\" page\n              trackSnapAccountEvent(\n                MetaMetricsEventName.RemoveSnapAccountSuccessViewed,\n              );\n              // This isn't actually an error, but we show it as one for styling reasons\n              await showError(\n                controllerMessenger,\n                snapId,\n                {\n                  icon: IconName.UserCircleRemove,\n                  title: t('snapAccountRemoved'),\n                },\n                {\n                  message: t('snapAccountRemovedDescription') as string,\n                  learnMoreLink,\n                },\n              );\n\n              // User has clicked on \"OK\"\n              trackSnapAccountEvent(\n                MetaMetricsEventName.RemoveSnapAccountSuccessClicked,\n              );\n            } catch (e) {\n              const error = (e as Error).message;\n\n              await showError(\n                controllerMessenger,\n                snapId,\n                {\n                  icon: IconName.UserCircleRemove,\n                  title: t('snapAccountRemovalFailed'),\n                },\n                {\n                  message: t(\n                    'snapAccountRemovalFailedDescription',\n                    snapName,\n                  ) as string,\n                  learnMoreLink,\n                  error,\n                },\n              );\n\n              trackSnapAccountEvent(MetaMetricsEventName.AccountRemoveFailed);\n\n              throw new Error(\n                `Error occurred while removing snap account: ${error}`,\n              );\n            }\n          } else {\n            await handleUserInput(confirmationResult);\n\n            throw new Error('User denied account removal');\n          }\n        } finally {\n          // We do not have a `else` clause here, as it's used if the request was\n          // canceled by the user, thus it's not a \"fail\" (not an error).\n          if (confirmationResult) {\n            trackSnapAccountEvent(MetaMetricsEventName.AccountRemoved);\n          }\n\n          controllerMessenger.call('ApprovalController:endFlow', {\n            id: removeAccountApprovalId,\n          });\n        }\n      },\n    });\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) as any;\n  builder.type = SnapKeyring.type;\n  return builder;\n};\n","import { PhishingController } from '@metamask/phishing-controller';\nimport { isProtocolAllowed } from '../keyring-snaps-permissions';\n\n/**\n * Checks whether a given URL is blocked due to not using HTTPS or being\n * recognized as a phishing URL.\n *\n * @param url - The URL to check.\n * @param maybeUpdateState - A function that updates the phishing controller state.\n * @param testOrigin - A function that tests if a URL is a phishing URL.\n * @returns Returns a promise which resolves to `true` if the URL is blocked\n * either due to using an insecure protocol (not HTTPS) or being recognized as\n * a phishing URL. Otherwise, resolves to `false`.\n */\nexport const isBlockedUrl = async (\n  url: string,\n  maybeUpdateState: () => ReturnType<PhishingController['maybeUpdateState']>,\n  testOrigin: (url: string) => ReturnType<PhishingController['test']>,\n): Promise<boolean> => {\n  try {\n    // check if the URL is HTTPS\n    if (!isProtocolAllowed(url)) {\n      return true;\n    }\n\n    // check if the url is in the phishing list\n    await maybeUpdateState();\n    return testOrigin(url).result;\n  } catch (error) {\n    console.error('Invalid URL passed into snap-keyring:', error);\n    return false;\n  }\n};\n","import type {\n  ResultComponent,\n  ErrorResult,\n} from '@metamask/approval-controller';\nimport { IconName } from '../../../../../ui/components/component-library/icon';\nimport { SnapKeyringBuilderMessenger } from '../types';\n\nconst snapAuthorshipHeader = (snapId: string): ResultComponent => {\n  return {\n    name: 'SnapAuthorshipHeader',\n    key: 'snapHeader',\n    properties: { snapId },\n  } as ResultComponent;\n};\n\n/**\n * Options for result pages.\n */\nexport type ResultComponentOptions = {\n  /**\n   * The title to display above the message. Shown by default but can be hidden with `null`.\n   */\n  title: string | null;\n\n  /**\n   * The icon to display in the page. Shown by default but can be hidden with `null`.\n   */\n  icon: IconName | null;\n};\n\n/**\n * Shows an error result page.\n *\n * @param controllerMessenger - The controller messenger instance.\n * @param snapId - The Snap unique id.\n * @param opts - The result component options (title, icon).\n * @param properties - The properties used by SnapAccountErrorMessage component.\n * @returns Returns a promise that resolves once the user clicks the confirm\n * button.\n */\nexport const showError = (\n  controllerMessenger: SnapKeyringBuilderMessenger,\n  snapId: string,\n  opts: ResultComponentOptions,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  properties: Record<string, any>,\n): Promise<ErrorResult> => {\n  return controllerMessenger.call('ApprovalController:showError', {\n    header: [snapAuthorshipHeader(snapId)],\n    title: opts.title,\n    icon: opts.icon,\n    error: {\n      key: 'snapAccountErrorMessage',\n      name: 'SnapAccountErrorMessage',\n      properties,\n    },\n  });\n};\n\n/**\n * Shows a success result page.\n *\n * @param controllerMessenger - The controller messenger instance.\n * @param snapId - The Snap unique id.\n * @param opts - The result component options (title, icon).\n * @param properties - The properties used by SnapAccountSuccessMessage component.\n * @returns Returns a promise that resolves once the user clicks the confirm\n * button.\n */\nexport const showSuccess = (\n  controllerMessenger: SnapKeyringBuilderMessenger,\n  snapId: string,\n  opts: ResultComponentOptions,\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  properties: Record<string, any>,\n): Promise<ErrorResult> => {\n  return controllerMessenger.call('ApprovalController:showSuccess', {\n    header: [snapAuthorshipHeader(snapId)],\n    title: opts.title,\n    icon: opts.icon,\n    message: {\n      key: 'snapAccountSuccessMessage',\n      name: 'SnapAccountSuccessMessage',\n      properties,\n    },\n  });\n};\n","import { SnapControllerState } from '@metamask/snaps-controllers';\nimport { Snap } from '@metamask/snaps-utils';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype FlattenedUIState = Record<string, any>;\n\nconst REMOVE_KEYS = ['snapStates', 'unencryptedSnapStates', 'vault'];\n\nexport function sanitizeUIState(state: FlattenedUIState): FlattenedUIState {\n  const newState = { ...state };\n\n  for (const key of REMOVE_KEYS) {\n    delete newState[key];\n  }\n\n  sanitizeSnapData(newState);\n\n  return newState;\n}\n\nfunction sanitizeSnapData(state: FlattenedUIState) {\n  const snapsData = state.snaps as SnapControllerState['snaps'] | undefined;\n\n  if (!snapsData) {\n    return;\n  }\n\n  state.snaps = Object.values(snapsData).reduce((acc, snap) => {\n    acc[snap.id] = stripLargeSnapData(snap) as Snap;\n    return acc;\n  }, {} as SnapControllerState['snaps']);\n}\n\nfunction stripLargeSnapData(snapData: Snap): Partial<Snap> {\n  const newData: Partial<Snap> = {\n    ...snapData,\n  };\n\n  delete newData.sourceCode;\n  delete newData.auxiliaryFiles;\n\n  return newData;\n}\n","import EventEmitter from 'events';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { v4 as uuid } from 'uuid';\nimport log from 'loglevel';\nimport { ApprovalType } from '@metamask/controller-utils';\nimport { METAMASK_CONTROLLER_EVENTS } from '../metamask-controller';\nimport { MINUTE } from '../../../shared/constants/time';\nimport { AUTO_LOCK_TIMEOUT_ALARM } from '../../../shared/constants/alarms';\nimport { isManifestV3 } from '../../../shared/modules/mv3.utils';\nimport { isBeta } from '../../../ui/helpers/utils/build-types';\nimport {\n  ENVIRONMENT_TYPE_BACKGROUND,\n  POLLING_TOKEN_ENVIRONMENT_TYPES,\n  ORIGIN_METAMASK,\n} from '../../../shared/constants/app';\nimport { DEFAULT_AUTO_LOCK_TIME_LIMIT } from '../../../shared/constants/preferences';\n\n/** @typedef {import('../../../shared/types/confirm').LastInteractedConfirmationInfo} LastInteractedConfirmationInfo */\n\nexport default class AppStateController extends EventEmitter {\n  /**\n   * @param {object} opts\n   */\n  constructor(opts = {}) {\n    const {\n      addUnlockListener,\n      isUnlocked,\n      initState,\n      onInactiveTimeout,\n      preferencesStore,\n      messenger,\n      extension,\n    } = opts;\n    super();\n\n    this.extension = extension;\n    this.onInactiveTimeout = onInactiveTimeout || (() => undefined);\n    this.store = new ObservableStore({\n      timeoutMinutes: DEFAULT_AUTO_LOCK_TIME_LIMIT,\n      connectedStatusPopoverHasBeenShown: true,\n      defaultHomeActiveTabName: null,\n      browserEnvironment: {},\n      popupGasPollTokens: [],\n      notificationGasPollTokens: [],\n      fullScreenGasPollTokens: [],\n      recoveryPhraseReminderHasBeenShown: false,\n      recoveryPhraseReminderLastShown: new Date().getTime(),\n      outdatedBrowserWarningLastShown: null,\n      nftsDetectionNoticeDismissed: false,\n      showTestnetMessageInDropdown: true,\n      showBetaHeader: isBeta(),\n      showPermissionsTour: true,\n      showNetworkBanner: true,\n      showAccountBanner: true,\n      trezorModel: null,\n      currentPopupId: undefined,\n      onboardingDate: null,\n      newPrivacyPolicyToastClickedOrClosed: null,\n      newPrivacyPolicyToastShownDate: null,\n      // This key is only used for checking if the user had set advancedGasFee\n      // prior to Migration 92.3 where we split out the setting to support\n      // multiple networks.\n      hadAdvancedGasFeesSetPriorToMigration92_3: false,\n      ...initState,\n      qrHardware: {},\n      nftsDropdownState: {},\n      usedNetworks: {\n        '0x1': true,\n        '0x5': true,\n        '0x539': true,\n      },\n      surveyLinkLastClickedOrClosed: null,\n      signatureSecurityAlertResponses: {},\n      // States used for displaying the changed network toast\n      switchedNetworkDetails: null,\n      switchedNetworkNeverShowMessage: false,\n      currentExtensionPopupId: 0,\n      lastInteractedConfirmationInfo: undefined,\n    });\n    this.timer = null;\n\n    this.isUnlocked = isUnlocked;\n    this.waitingForUnlock = [];\n    addUnlockListener(this.handleUnlock.bind(this));\n\n    preferencesStore.subscribe(({ preferences }) => {\n      const currentState = this.store.getState();\n      if (currentState.timeoutMinutes !== preferences.autoLockTimeLimit) {\n        this._setInactiveTimeout(preferences.autoLockTimeLimit);\n      }\n    });\n\n    messenger.subscribe(\n      'KeyringController:qrKeyringStateChange',\n      (qrHardware) =>\n        this.store.updateState({\n          qrHardware,\n        }),\n    );\n\n    const { preferences } = preferencesStore.getState();\n    this._setInactiveTimeout(preferences.autoLockTimeLimit);\n\n    this.messagingSystem = messenger;\n    this._approvalRequestId = null;\n  }\n\n  /**\n   * Get a Promise that resolves when the extension is unlocked.\n   * This Promise will never reject.\n   *\n   * @param {boolean} shouldShowUnlockRequest - Whether the extension notification\n   * popup should be opened.\n   * @returns {Promise<void>} A promise that resolves when the extension is\n   * unlocked, or immediately if the extension is already unlocked.\n   */\n  getUnlockPromise(shouldShowUnlockRequest) {\n    return new Promise((resolve) => {\n      if (this.isUnlocked()) {\n        resolve();\n      } else {\n        this.waitForUnlock(resolve, shouldShowUnlockRequest);\n      }\n    });\n  }\n\n  /**\n   * Adds a Promise's resolve function to the waitingForUnlock queue.\n   * Also opens the extension popup if specified.\n   *\n   * @param {Promise.resolve} resolve - A Promise's resolve function that will\n   * be called when the extension is unlocked.\n   * @param {boolean} shouldShowUnlockRequest - Whether the extension notification\n   * popup should be opened.\n   */\n  waitForUnlock(resolve, shouldShowUnlockRequest) {\n    this.waitingForUnlock.push({ resolve });\n    this.emit(METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);\n    if (shouldShowUnlockRequest) {\n      this._requestApproval();\n    }\n  }\n\n  /**\n   * Drains the waitingForUnlock queue, resolving all the related Promises.\n   */\n  handleUnlock() {\n    if (this.waitingForUnlock.length > 0) {\n      while (this.waitingForUnlock.length > 0) {\n        this.waitingForUnlock.shift().resolve();\n      }\n      this.emit(METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);\n    }\n\n    this._acceptApproval();\n  }\n\n  /**\n   * Sets the default home tab\n   *\n   * @param {string} [defaultHomeActiveTabName] - the tab name\n   */\n  setDefaultHomeActiveTabName(defaultHomeActiveTabName) {\n    this.store.updateState({\n      defaultHomeActiveTabName,\n    });\n  }\n\n  /**\n   * Record that the user has seen the connected status info popover\n   */\n  setConnectedStatusPopoverHasBeenShown() {\n    this.store.updateState({\n      connectedStatusPopoverHasBeenShown: true,\n    });\n  }\n\n  /**\n   * Record that the user has been shown the recovery phrase reminder.\n   */\n  setRecoveryPhraseReminderHasBeenShown() {\n    this.store.updateState({\n      recoveryPhraseReminderHasBeenShown: true,\n    });\n  }\n\n  setSurveyLinkLastClickedOrClosed(time) {\n    this.store.updateState({\n      surveyLinkLastClickedOrClosed: time,\n    });\n  }\n\n  setOnboardingDate() {\n    this.store.updateState({\n      onboardingDate: Date.now(),\n    });\n  }\n\n  setNewPrivacyPolicyToastClickedOrClosed() {\n    this.store.updateState({\n      newPrivacyPolicyToastClickedOrClosed: true,\n    });\n  }\n\n  setNewPrivacyPolicyToastShownDate(time) {\n    this.store.updateState({\n      newPrivacyPolicyToastShownDate: time,\n    });\n  }\n\n  /**\n   * Record the timestamp of the last time the user has seen the recovery phrase reminder\n   *\n   * @param {number} lastShown - timestamp when user was last shown the reminder.\n   */\n  setRecoveryPhraseReminderLastShown(lastShown) {\n    this.store.updateState({\n      recoveryPhraseReminderLastShown: lastShown,\n    });\n  }\n\n  /**\n   * Record the timestamp of the last time the user has acceoted the terms of use\n   *\n   * @param {number} lastAgreed - timestamp when user last accepted the terms of use\n   */\n  setTermsOfUseLastAgreed(lastAgreed) {\n    this.store.updateState({\n      termsOfUseLastAgreed: lastAgreed,\n    });\n  }\n\n  /**\n   * Record if popover for snaps privacy warning has been shown\n   * on the first install of a snap.\n   *\n   * @param {boolean} shown - shown status\n   */\n  setSnapsInstallPrivacyWarningShownStatus(shown) {\n    this.store.updateState({\n      snapsInstallPrivacyWarningShown: shown,\n    });\n  }\n\n  /**\n   * Record the timestamp of the last time the user has seen the outdated browser warning\n   *\n   * @param {number} lastShown - Timestamp (in milliseconds) of when the user was last shown the warning.\n   */\n  setOutdatedBrowserWarningLastShown(lastShown) {\n    this.store.updateState({\n      outdatedBrowserWarningLastShown: lastShown,\n    });\n  }\n\n  /**\n   * Sets the last active time to the current time.\n   */\n  setLastActiveTime() {\n    this._resetTimer();\n  }\n\n  /**\n   * Sets the inactive timeout for the app\n   *\n   * @private\n   * @param {number} timeoutMinutes - The inactive timeout in minutes.\n   */\n  _setInactiveTimeout(timeoutMinutes) {\n    this.store.updateState({\n      timeoutMinutes,\n    });\n\n    this._resetTimer();\n  }\n\n  /**\n   * Resets the internal inactive timer\n   *\n   * If the {@code timeoutMinutes} state is falsy (i.e., zero) then a new\n   * timer will not be created.\n   *\n   * @private\n   */\n  /* eslint-disable no-undef */\n  _resetTimer() {\n    const { timeoutMinutes } = this.store.getState();\n\n    if (this.timer) {\n      clearTimeout(this.timer);\n    } else if (isManifestV3) {\n      this.extension.alarms.clear(AUTO_LOCK_TIMEOUT_ALARM);\n    }\n\n    if (!timeoutMinutes) {\n      return;\n    }\n\n    // This is a temporary fix until we add a state migration.\n    // Due to a bug in ui/pages/settings/advanced-tab/advanced-tab.component.js,\n    // it was possible for timeoutMinutes to be saved as a string, as explained\n    // in PR 25109. `alarms.create` will fail in that case. We are\n    // converting this to a number here to prevent that failure. Once\n    // we add a migration to update the malformed state to the right type,\n    // we will remove this conversion.\n    const timeoutToSet = Number(timeoutMinutes);\n\n    if (isManifestV3) {\n      this.extension.alarms.create(AUTO_LOCK_TIMEOUT_ALARM, {\n        delayInMinutes: timeoutToSet,\n        periodInMinutes: timeoutToSet,\n      });\n      this.extension.alarms.onAlarm.addListener((alarmInfo) => {\n        if (alarmInfo.name === AUTO_LOCK_TIMEOUT_ALARM) {\n          this.onInactiveTimeout();\n          this.extension.alarms.clear(AUTO_LOCK_TIMEOUT_ALARM);\n        }\n      });\n    } else {\n      this.timer = setTimeout(\n        () => this.onInactiveTimeout(),\n        timeoutToSet * MINUTE,\n      );\n    }\n  }\n\n  /**\n   * Sets the current browser and OS environment\n   *\n   * @param os\n   * @param browser\n   */\n  setBrowserEnvironment(os, browser) {\n    this.store.updateState({ browserEnvironment: { os, browser } });\n  }\n\n  /**\n   * Adds a pollingToken for a given environmentType\n   *\n   * @param pollingToken\n   * @param pollingTokenType\n   */\n  addPollingToken(pollingToken, pollingTokenType) {\n    if (\n      pollingTokenType !==\n      POLLING_TOKEN_ENVIRONMENT_TYPES[ENVIRONMENT_TYPE_BACKGROUND]\n    ) {\n      const prevState = this.store.getState()[pollingTokenType];\n      this.store.updateState({\n        [pollingTokenType]: [...prevState, pollingToken],\n      });\n    }\n  }\n\n  /**\n   * removes a pollingToken for a given environmentType\n   *\n   * @param pollingToken\n   * @param pollingTokenType\n   */\n  removePollingToken(pollingToken, pollingTokenType) {\n    if (\n      pollingTokenType !==\n      POLLING_TOKEN_ENVIRONMENT_TYPES[ENVIRONMENT_TYPE_BACKGROUND]\n    ) {\n      const prevState = this.store.getState()[pollingTokenType];\n      this.store.updateState({\n        [pollingTokenType]: prevState.filter((token) => token !== pollingToken),\n      });\n    }\n  }\n\n  /**\n   * clears all pollingTokens\n   */\n  clearPollingTokens() {\n    this.store.updateState({\n      popupGasPollTokens: [],\n      notificationGasPollTokens: [],\n      fullScreenGasPollTokens: [],\n    });\n  }\n\n  /**\n   * Sets whether the testnet dismissal link should be shown in the network dropdown\n   *\n   * @param showTestnetMessageInDropdown\n   */\n  setShowTestnetMessageInDropdown(showTestnetMessageInDropdown) {\n    this.store.updateState({ showTestnetMessageInDropdown });\n  }\n\n  /**\n   * Sets whether the beta notification heading on the home page\n   *\n   * @param showBetaHeader\n   */\n  setShowBetaHeader(showBetaHeader) {\n    this.store.updateState({ showBetaHeader });\n  }\n\n  /**\n   * Sets whether the permissions tour should be shown to the user\n   *\n   * @param showPermissionsTour\n   */\n  setShowPermissionsTour(showPermissionsTour) {\n    this.store.updateState({ showPermissionsTour });\n  }\n\n  /**\n   * Sets whether the Network Banner should be shown\n   *\n   * @param showNetworkBanner\n   */\n  setShowNetworkBanner(showNetworkBanner) {\n    this.store.updateState({ showNetworkBanner });\n  }\n\n  /**\n   * Sets whether the Account Banner should be shown\n   *\n   * @param showAccountBanner\n   */\n  setShowAccountBanner(showAccountBanner) {\n    this.store.updateState({ showAccountBanner });\n  }\n\n  /**\n   * Sets a unique ID for the current extension popup\n   *\n   * @param currentExtensionPopupId\n   */\n  setCurrentExtensionPopupId(currentExtensionPopupId) {\n    this.store.updateState({ currentExtensionPopupId });\n  }\n\n  /**\n   * Sets an object with networkName and appName\n   * or `null` if the message is meant to be cleared\n   *\n   * @param {{ origin: string, networkClientId: string } | null} switchedNetworkDetails - Details about the network that MetaMask just switched to.\n   */\n  setSwitchedNetworkDetails(switchedNetworkDetails) {\n    this.store.updateState({ switchedNetworkDetails });\n  }\n\n  /**\n   * Clears the switched network details in state\n   */\n  clearSwitchedNetworkDetails() {\n    this.store.updateState({ switchedNetworkDetails: null });\n  }\n\n  /**\n   * Remembers if the user prefers to never see the\n   * network switched message again\n   *\n   * @param {boolean} switchedNetworkNeverShowMessage\n   */\n  setSwitchedNetworkNeverShowMessage(switchedNetworkNeverShowMessage) {\n    this.store.updateState({\n      switchedNetworkDetails: null,\n      switchedNetworkNeverShowMessage,\n    });\n  }\n\n  /**\n   * Sets a property indicating the model of the user's Trezor hardware wallet\n   *\n   * @param trezorModel - The Trezor model.\n   */\n  setTrezorModel(trezorModel) {\n    this.store.updateState({ trezorModel });\n  }\n\n  /**\n   * A setter for the `nftsDropdownState` property\n   *\n   * @param nftsDropdownState\n   */\n  updateNftDropDownState(nftsDropdownState) {\n    this.store.updateState({\n      nftsDropdownState,\n    });\n  }\n\n  /**\n   * Updates the array of the first time used networks\n   *\n   * @param chainId\n   * @returns {void}\n   */\n  setFirstTimeUsedNetwork(chainId) {\n    const currentState = this.store.getState();\n    const { usedNetworks } = currentState;\n    usedNetworks[chainId] = true;\n\n    this.store.updateState({ usedNetworks });\n  }\n\n\n  getSignatureSecurityAlertResponse(securityAlertId) {\n    return this.store.getState().signatureSecurityAlertResponses[\n      securityAlertId\n    ];\n  }\n\n  addSignatureSecurityAlertResponse(securityAlertResponse) {\n    const currentState = this.store.getState();\n    const { signatureSecurityAlertResponses } = currentState;\n    this.store.updateState({\n      signatureSecurityAlertResponses: {\n        ...signatureSecurityAlertResponses,\n        [securityAlertResponse.securityAlertId]: securityAlertResponse,\n      },\n    });\n  }\n\n  /**\n   * A setter for the currentPopupId which indicates the id of popup window that's currently active\n   *\n   * @param currentPopupId\n   */\n  setCurrentPopupId(currentPopupId) {\n    this.store.updateState({\n      currentPopupId,\n    });\n  }\n\n  /**\n   * The function returns information about the last confirmation user interacted with\n   *\n   * @type {LastInteractedConfirmationInfo}: Information about the last confirmation user interacted with.\n   */\n  getLastInteractedConfirmationInfo() {\n    return this.store.getState().lastInteractedConfirmationInfo;\n  }\n\n  /**\n   * Update the information about the last confirmation user interacted with\n   *\n   * @type {LastInteractedConfirmationInfo} - information about transaction user last interacted with.\n   */\n  setLastInteractedConfirmationInfo(lastInteractedConfirmationInfo) {\n    this.store.updateState({\n      lastInteractedConfirmationInfo,\n    });\n  }\n\n  /**\n   * A getter to retrieve currentPopupId saved in the appState\n   */\n  getCurrentPopupId() {\n    return this.store.getState().currentPopupId;\n  }\n\n  _requestApproval() {\n    // If we already have a pending request this is a no-op\n    if (this._approvalRequestId) {\n      return;\n    }\n    this._approvalRequestId = uuid();\n\n    this.messagingSystem\n      .call(\n        'ApprovalController:addRequest',\n        {\n          id: this._approvalRequestId,\n          origin: ORIGIN_METAMASK,\n          type: ApprovalType.Unlock,\n        },\n        true,\n      )\n      .catch(() => {\n        // If the promise fails, we allow a new popup to be triggered\n        this._approvalRequestId = null;\n      });\n  }\n\n  _acceptApproval() {\n    if (!this._approvalRequestId) {\n      return;\n    }\n    try {\n      this.messagingSystem.call(\n        'ApprovalController:acceptRequest',\n        this._approvalRequestId,\n      );\n    } catch (error) {\n      log.error('Failed to unlock approval request', error);\n    }\n\n    this._approvalRequestId = null;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { addHexPrefix } from 'ethereumjs-util';\nimport { Interface, ParamType } from '@ethersproject/abi';\nimport { Hex, createProjectLogger } from '@metamask/utils';\nimport {\n  DecodedTransactionDataMethod,\n  DecodedTransactionDataParam,\n} from '../../../../../shared/types/transaction-decode';\nimport { getMethodFrom4Byte } from '../../../../../shared/lib/four-byte';\n\nconst log = createProjectLogger('four-byte');\n\nexport async function decodeTransactionDataWithFourByte(\n  transactionData: string,\n): Promise<DecodedTransactionDataMethod | undefined> {\n  const fourBytePrefix = transactionData.slice(0, 10);\n\n  const signature = (await getMethodFrom4Byte(fourBytePrefix)) as Hex;\n\n  if (!signature) {\n    return undefined;\n  }\n\n  const name = signature.split('(')[0];\n  const inputs = parseSignature(signature);\n\n  log('Generated inputs', inputs);\n\n  const valueData = addHexPrefix(transactionData.slice(10));\n  const values = Interface.getAbiCoder().decode(inputs, valueData) as any[];\n\n  const params = inputs.map((input, index) =>\n    decodeParam(input, index, values),\n  );\n\n  return { name, params };\n}\n\nfunction decodeParam(\n  input: ParamType,\n  index: number,\n  values: any[],\n): DecodedTransactionDataParam {\n  const value = values[index] as any[];\n  const { type, name } = input;\n\n  let children = input.components?.map((child, childIndex) =>\n    decodeParam(child, childIndex, value),\n  );\n\n  if (type.endsWith('[]')) {\n    const childType = type.slice(0, -2);\n\n    children = value.map((_arrayItem, arrayIndex) => {\n      const childName = `Item ${arrayIndex + 1}`;\n\n      return decodeParam(\n        { ...input, name: childName, type: childType } as ParamType,\n        arrayIndex,\n        value,\n      );\n    });\n  }\n\n  return {\n    name,\n    type,\n    value,\n    children,\n  };\n}\n\nfunction parseSignature(signature: string): ParamType[] {\n  let typeString = signature.slice(signature.indexOf('(') + 1, -1);\n  const nested = [];\n\n  while (typeString.includes('(')) {\n    const nestedBrackets = findFirstNestedBrackets(typeString);\n\n    if (!nestedBrackets) {\n      break;\n    }\n\n    nested.push(nestedBrackets.value);\n\n    typeString = `${typeString.slice(0, nestedBrackets.start)}${\n      nested.length - 1\n    }#${typeString.slice(nestedBrackets.end + 1)}`;\n  }\n\n  return createInput(typeString, nested);\n}\n\nfunction createInput(typeString: string, nested: string[]): ParamType[] {\n  return typeString.split(',').map((value) => {\n    const parts = value.split('#');\n\n    const nestedIndex = parts.length > 1 ? parseInt(parts[0], 10) : undefined;\n    const type = nestedIndex === undefined ? value : `tuple${parts[1] ?? ''}`;\n\n    const components =\n      nestedIndex === undefined\n        ? undefined\n        : createInput(nested[nestedIndex], nested);\n\n    return {\n      type,\n      components,\n    } as ParamType;\n  });\n}\n\nfunction findFirstNestedBrackets(\n  value: string,\n): { start: number; end: number; value: string } | undefined {\n  let start = -1;\n\n  for (let i = 0; i < value.length; i++) {\n    if (value[i] === '(') {\n      start = i;\n    } else if (value[i] === ')' && start !== -1) {\n      return {\n        start,\n        end: i,\n        value: value.slice(start + 1, i),\n      };\n    }\n  }\n\n  return undefined;\n}\n","import { query } from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport { Hex } from '@metamask/utils';\nimport { addHexPrefix, stripHexPrefix } from 'ethereumjs-util';\n\nconst IMPLEMENTATION_STORAGE_SLOTS = [\n  // org.zeppelinos.proxy.implementation\n  '0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3',\n\n  // eip1967.proxy.implementation\n  '0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc',\n];\n\nconst EMPTY_RESULT = '0'.padEnd(64, '0');\n\nexport async function getContractProxyAddress(\n  contractAddress: Hex,\n  ethQuery: EthQuery,\n): Promise<Hex | undefined> {\n  const responses = await Promise.all(\n    IMPLEMENTATION_STORAGE_SLOTS.map(\n      (storageSlot) =>\n        query(ethQuery, 'eth_getStorageAt', [\n          contractAddress,\n          storageSlot,\n          'latest',\n        ]) as Promise<Hex>,\n    ),\n  );\n\n  const result = responses.find(\n    (response) => stripHexPrefix(response) !== EMPTY_RESULT,\n  );\n\n  return result && (addHexPrefix(result.slice(26)) as Hex | undefined);\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { FunctionFragment, Interface, ParamType } from '@ethersproject/abi';\nimport { Hex, createProjectLogger } from '@metamask/utils';\nimport {\n  DecodedTransactionDataMethod,\n  DecodedTransactionDataParam,\n} from '../../../../../shared/types/transaction-decode';\n\nconst log = createProjectLogger('sourcify');\n\nexport type SourcifyResponse = {\n  files: {\n    name: string;\n    content: string;\n  }[];\n};\n\nexport type SourcifyMetadata = {\n  output: {\n    abi: {\n      inputs: { name: string; type: string }[];\n    }[];\n    devdoc?: {\n      methods: {\n        [signature: string]: {\n          details?: string;\n          params?: { [name: string]: string };\n        };\n      };\n    };\n    userdoc?: {\n      methods: {\n        [signature: string]: {\n          notice?: string;\n          params?: { [name: string]: string };\n        };\n      };\n    };\n  };\n};\n\nexport async function decodeTransactionDataWithSourcify(\n  transactionData: Hex,\n  contractAddress: Hex,\n  chainId: Hex,\n): Promise<DecodedTransactionDataMethod | undefined> {\n  const metadata = await fetchSourcifyMetadata(contractAddress, chainId);\n\n  log('Retrieved Sourcify metadata', {\n    contractAddress,\n    chainId,\n    metadata,\n  });\n\n  const { abi } = metadata.output;\n  const contractInterface = new Interface(abi);\n  const functionSignature = transactionData.slice(0, 10);\n\n  let functionData: FunctionFragment | undefined;\n\n  try {\n    functionData = contractInterface.getFunction(functionSignature);\n  } catch (e) {\n    // Ignore\n  }\n\n  if (!functionData) {\n    log('Failed to find function in ABI', functionSignature, abi);\n    return undefined;\n  }\n\n  const { name, inputs } = functionData;\n  const signature = buildSignature(name, inputs);\n  const userDoc = metadata.output.userdoc?.methods[signature];\n  const devDoc = metadata.output.devdoc?.methods[signature];\n  const description = userDoc?.notice ?? devDoc?.details;\n\n  log('Extracted NatSpec', { signature, userDoc, devDoc });\n\n  const values = contractInterface.decodeFunctionData(\n    functionSignature,\n    transactionData,\n  ) as any[];\n\n  const params = inputs.map((input, index) =>\n    decodeParam(input, index, values, userDoc, devDoc),\n  );\n\n  return {\n    name,\n    description,\n    params,\n  };\n}\n\nfunction decodeParam(\n  input: ParamType,\n  index: number,\n  values: any[],\n  userDoc: any,\n  devDoc: any,\n): DecodedTransactionDataParam {\n  const { name: paramName, type, components } = input;\n\n  const paramDescription =\n    userDoc?.params?.[paramName] ?? devDoc?.params?.[paramName];\n\n  const value = values[index];\n\n  let children = components?.map((child, childIndex) =>\n    decodeParam(child, childIndex, value, {}, {}),\n  );\n\n  if (type.endsWith('[]')) {\n    const childType = type.slice(0, -2);\n\n    children = (value as any[]).map((_arrayItem, arrayIndex) => {\n      const childName = `Item ${arrayIndex + 1}`;\n\n      return decodeParam(\n        { ...input, name: childName, type: childType } as ParamType,\n        arrayIndex,\n        value,\n        {},\n        {},\n      );\n    });\n  }\n\n  return {\n    name: paramName,\n    description: paramDescription,\n    type,\n    value,\n    children,\n  };\n}\n\nasync function fetchSourcifyMetadata(address: Hex, chainId: Hex) {\n  const response = await fetchSourcifyFiles(address, chainId);\n\n  const metadata = response.files?.find((file) =>\n    file.name.includes('metadata.json'),\n  );\n\n  if (!metadata) {\n    throw new Error('Metadata not found');\n  }\n\n  return JSON.parse(metadata.content) as SourcifyMetadata;\n}\n\nasync function fetchSourcifyFiles(\n  address: Hex,\n  chainId: Hex,\n): Promise<SourcifyResponse> {\n  const chainIdDecimal = parseInt(chainId, 16);\n\n  const respose = await fetch(\n    `https://sourcify.dev/server/files/any/${chainIdDecimal}/${address}`,\n  );\n\n  if (!respose.ok) {\n    throw new Error('Failed to fetch Sourcify files');\n  }\n\n  return respose.json();\n}\n\nfunction buildSignature(name: string | undefined, inputs: ParamType[]): string {\n  const types = inputs.map((input) =>\n    input.components?.length\n      ? `${buildSignature(undefined, input.components)}${\n          input.type.endsWith('[]') ? '[]' : ''\n        }`\n      : input.type,\n  );\n\n  return `${name ?? ''}(${types.join(',')})`;\n}\n","export const UNISWAP_ROUTER_COMMANDS = {\n  '0': {\n    name: 'V3_SWAP_EXACT_IN',\n    params: [\n      {\n        type: 'address',\n        description: 'The recipient of the output of the trade',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description: 'The amount of input tokens for the trade',\n        name: 'amountIn',\n      },\n      {\n        type: 'uint256',\n        description: 'The minimum amount of output tokens the user wants',\n        name: 'amountOutMin',\n      },\n      {\n        type: 'bytes',\n        description: 'The UniswapV3 encoded path to trade along',\n        name: 'path',\n      },\n      {\n        type: 'bool',\n        description:\n          'A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter',\n        name: 'payerIsUser',\n      },\n    ],\n  },\n  '1': {\n    name: 'V3_SWAP_EXACT_OUT',\n    params: [\n      {\n        type: 'address',\n        description: 'The recipient of the output of the trade',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description: 'The amount of output tokens to receive',\n        name: 'amountOut',\n      },\n      {\n        type: 'uint256',\n        description: 'The maximum number of input tokens that should be spent',\n        name: 'amountInMax',\n      },\n      {\n        type: 'bytes',\n        description: 'The UniswapV3 encoded path to trade along',\n        name: 'path',\n      },\n      {\n        type: 'bool',\n        description:\n          'A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter',\n        name: 'payerIsUser',\n      },\n    ],\n  },\n  '2': {\n    name: 'PERMIT2_TRANSFER_FROM',\n    params: [\n      {\n        type: 'address',\n        description: 'The token to fetch from Permit2',\n        name: 'token',\n      },\n      {\n        type: 'address',\n        description: 'The recipient of the tokens fetched',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description: 'The amount of token to fetch',\n        name: 'amount',\n      },\n    ],\n  },\n  '3': {\n    name: 'PERMIT2_PERMIT_BATCH',\n    params: [\n      {\n        type: 'bytes',\n        description:\n          'A PermitBatch struct outlining all of the Permit2 permits to execute.',\n        name: 'batch',\n      },\n      {\n        type: 'bytes',\n        description: 'The signature to provide to Permit2',\n        name: 'data',\n      },\n    ],\n  },\n  '4': {\n    name: 'SWEEP',\n    params: [\n      {\n        type: 'address',\n        description: 'The ERC20 token to sweep (or Constants.ETH for ETH)',\n        name: 'token',\n      },\n      {\n        type: 'address',\n        description: 'The recipient of the sweep',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description: 'The minimum required tokens to receive from the sweep',\n        name: 'amountMin',\n      },\n    ],\n  },\n  '5': {\n    name: 'TRANSFER',\n    params: [\n      {\n        type: 'address',\n        description: 'The ERC20 token to transfer (or Constants.ETH for ETH)',\n        name: 'token',\n      },\n      {\n        type: 'address',\n        description: 'The recipient of the transfer',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description: 'The amount to transfer',\n        name: 'value',\n      },\n    ],\n  },\n  '6': {\n    name: 'PAY_PORTION',\n    params: [\n      {\n        type: 'address',\n        description: 'The ERC20 token to transfer (or Constants.ETH for ETH)',\n        name: 'token',\n      },\n      {\n        type: 'address',\n        description: 'The recipient of the transfer',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description:\n          'In basis points, the percentage of the contract’s balance to transfer',\n        name: 'bips',\n      },\n    ],\n  },\n  '8': {\n    name: 'V2_SWAP_EXACT_IN',\n    params: [\n      {\n        type: 'address',\n        description: 'The recipient of the output of the trade',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description: 'The amount of input tokens for the trade',\n        name: 'amountIn',\n      },\n      {\n        type: 'uint256',\n        description: 'The minimum amount of output tokens the user wants',\n        name: 'amountOutMin',\n      },\n      {\n        type: 'address[]',\n        description: 'The UniswapV2 token path to trade along',\n        name: 'path',\n      },\n      {\n        type: 'bool',\n        description:\n          'A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter',\n        name: 'payerIsUser',\n      },\n    ],\n  },\n  '9': {\n    name: 'V2_SWAP_EXACT_OUT',\n    params: [\n      {\n        type: 'address',\n        description: 'The recipient of the output of the trade',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description: 'The amount of output tokens to receive',\n        name: 'amountOut',\n      },\n      {\n        type: 'uint256',\n        description: 'The maximum number of input tokens that should be spent',\n        name: 'amountInMax',\n      },\n      {\n        type: 'address[]',\n        description: 'The UniswapV2 token path to trade along',\n        name: 'path',\n      },\n      {\n        type: 'bool',\n        description:\n          'A flag for whether the input tokens should come from the msg.sender (through Permit2) or whether the funds are already in the UniversalRouter',\n        name: 'payerIsUser',\n      },\n    ],\n  },\n  '10': {\n    name: 'PERMIT2_PERMIT',\n    params: [\n      {\n        type: 'bytes',\n        description:\n          'A PermitSingle struct outlining the Permit2 permit to execute',\n        name: 'permitSingle',\n      },\n      {\n        type: 'bytes',\n        description: 'The signature to provide to Permit2',\n        name: 'signature',\n      },\n    ],\n  },\n  '11': {\n    name: 'WRAP_ETH',\n    params: [\n      {\n        type: 'address',\n        description: 'The recipient of the WETH',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description: 'The amount of ETH to wrap',\n        name: 'amountMin',\n      },\n    ],\n  },\n  '12': {\n    name: 'UNWRAP_WETH',\n    params: [\n      {\n        type: 'address',\n        description: 'The recipient of the ETH',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description: 'The minimum required ETH to receive from the unwrapping',\n        name: 'amountMin',\n      },\n    ],\n  },\n  '13': {\n    name: 'PERMIT2_TRANSFER_FROM_BATCH',\n    params: [\n      {\n        type: 'bytes',\n        description:\n          'An array of AllowanceTransferDetails structs that each describe a Permit2 transfer to perform',\n        name: 'batchDetails',\n      },\n    ],\n  },\n  '16': {\n    name: 'SEAPORT',\n    params: [\n      {\n        type: 'uint256',\n        description: 'The ETH value to forward to the Seaport contract',\n        name: 'value',\n      },\n      {\n        type: 'bytes',\n        description: 'The calldata to use to call the Seaport contract',\n        name: 'data',\n      },\n    ],\n  },\n  '17': {\n    name: 'LOOKS_RARE_721',\n    params: [\n      {\n        type: 'uint256',\n        description: 'The ETH value to forward to the LooksRare contract',\n        name: 'value',\n      },\n      {\n        type: 'bytes',\n        description: 'The calldata to use to call the LooksRare contract',\n        name: 'data',\n      },\n      {\n        type: 'address',\n        description: 'The recipient of the ERC721',\n        name: 'recipient',\n      },\n      {\n        type: 'address',\n        description: 'The ERC721 token address',\n        name: 'token',\n      },\n      {\n        type: 'uint256',\n        description: 'The ID of the ERC721',\n        name: 'id',\n      },\n    ],\n  },\n  '18': {\n    name: 'NFTX',\n    params: [\n      {\n        type: 'uint256',\n        description: 'The ETH value to forward to the NFTX contract',\n        name: 'value',\n      },\n      {\n        type: 'bytes',\n        description: 'The calldata to use to call the NFTX contract',\n        name: 'data',\n      },\n    ],\n  },\n  '19': {\n    name: 'CRYPTOPUNKS',\n    params: [\n      {\n        type: 'uint256',\n        description: 'The PunkID to purchase',\n        name: 'punkId',\n      },\n      {\n        type: 'address',\n        description: 'The recipient for the cryptopunk',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description: 'The ETH value to forward to the Cryptopunks contract',\n        name: 'value',\n      },\n    ],\n  },\n  '20': {\n    name: 'LOOKS_RARE_1155',\n    params: [\n      {\n        type: 'uint256',\n        description: 'The ETH value to forward to the LooksRare contract',\n        name: 'value',\n      },\n      {\n        type: 'bytes',\n        description: 'The calldata to use to call the LooksRare contract',\n        name: 'data',\n      },\n      {\n        type: 'address',\n        description: 'The recipient of the ERC1155',\n        name: 'recipient',\n      },\n      {\n        type: 'address',\n        description: 'The ERC1155 token address',\n        name: 'token',\n      },\n      {\n        type: 'uint256',\n        description: 'The ID of the ERC1155',\n        name: 'id',\n      },\n      {\n        type: 'uint256',\n        description: 'The amount of the ERC1155 to transfer',\n        name: 'amount',\n      },\n    ],\n  },\n  '21': {\n    name: 'OWNER_CHECK_721',\n    params: [\n      {\n        type: 'address',\n        description: 'The required owner of the ERC721',\n        name: 'owner',\n      },\n      {\n        type: 'address',\n        description: 'The ERC721 token address',\n        name: 'token',\n      },\n      {\n        type: 'uint256',\n        description: 'The ID of the ERC721',\n        name: 'id',\n      },\n    ],\n  },\n  '22': {\n    name: 'OWNER_CHECK_1155',\n    params: [\n      {\n        type: 'address',\n        description: 'The required owner of the ERC1155',\n        name: 'owner',\n      },\n      {\n        type: 'address',\n        description: 'The ERC721 token address',\n        name: 'token',\n      },\n      {\n        type: 'uint256',\n        description: 'The ID of the ERC1155',\n        name: 'id',\n      },\n      {\n        type: 'uint256',\n        description: 'The minimum required amount of the ERC1155',\n        name: 'minBalance',\n      },\n    ],\n  },\n  '23': {\n    name: 'SWEEP_ERC721',\n    params: [\n      {\n        type: 'address',\n        description: 'The ERC721 token address to transfer',\n        name: 'token',\n      },\n      {\n        type: 'address',\n        description: 'The recipient of the transfer',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description: 'The token ID to transfer',\n        name: 'id',\n      },\n    ],\n  },\n  '24': {\n    name: 'X2Y2_721',\n    params: [\n      {\n        type: 'uint256',\n        description: 'The ETH value to forward to the X2Y2 contract',\n        name: 'value',\n      },\n      {\n        type: 'bytes',\n        description: 'The calldata to use to call the X2Y2 contract',\n        name: 'data',\n      },\n      {\n        type: 'address',\n        description: 'The recipient of the ERC721',\n        name: 'recipient',\n      },\n      {\n        type: 'address',\n        description: 'The ERC721 token address',\n        name: 'token',\n      },\n      {\n        type: 'uint256',\n        description: 'The ID of the ERC721',\n        name: 'id',\n      },\n    ],\n  },\n  '25': {\n    name: 'SUDOSWAP',\n    params: [\n      {\n        type: 'uint256',\n        description: 'The ETH value to forward to the Sudoswap contract',\n        name: 'value',\n      },\n      {\n        type: 'bytes',\n        description: 'The calldata to use to call the Sudoswap contract',\n        name: 'data',\n      },\n    ],\n  },\n  '26': {\n    name: 'NFT20',\n    params: [\n      {\n        type: 'uint256',\n        description: 'The ETH value to forward to the NFT20 contract',\n        name: 'value',\n      },\n      {\n        type: 'bytes',\n        description: 'The calldata to use to call the NFT20 contract',\n        name: 'data',\n      },\n    ],\n  },\n  '27': {\n    name: 'X2Y2_1155',\n    params: [\n      {\n        type: 'uint256',\n        description: 'The ETH value to forward to the X2Y2 contract',\n        name: 'value',\n      },\n      {\n        type: 'bytes',\n        description: 'The calldata to use to call the X2Y2 contract',\n        name: 'data',\n      },\n      {\n        type: 'address',\n        description: 'The recipient of the ERC1155',\n        name: 'recipient',\n      },\n      {\n        type: 'address',\n        description: 'The ERC1155 token address',\n        name: 'token',\n      },\n      {\n        type: 'uint256',\n        description: 'The ID of the ERC1155',\n        name: 'id',\n      },\n      {\n        type: 'uint256',\n        description: 'The amount of the ERC1155 to transfer',\n        name: 'amount',\n      },\n    ],\n  },\n  '28': {\n    name: 'FOUNDATION',\n    params: [\n      {\n        type: 'uint256',\n        description: 'The ETH value to forward to the Foundation contract',\n        name: 'value',\n      },\n      {\n        type: 'bytes',\n        description: 'The calldata to use to call the Foundation contract',\n        name: 'data',\n      },\n      {\n        type: 'address',\n        description: 'The recipient of the ERC721',\n        name: 'recipient',\n      },\n      {\n        type: 'address',\n        description: 'The ERC721 token address',\n        name: 'token',\n      },\n      {\n        type: 'uint256',\n        description: 'The ID of the ERC721',\n        name: 'id',\n      },\n    ],\n  },\n  '29': {\n    name: 'SWEEP_ERC1155',\n    params: [\n      {\n        type: 'address',\n        description: 'The ERC1155 token address to sweep',\n        name: 'token',\n      },\n      {\n        type: 'address',\n        description: 'The recipient of the sweep',\n        name: 'recipient',\n      },\n      {\n        type: 'uint256',\n        description: 'The token ID to sweep',\n        name: 'id',\n      },\n      {\n        type: 'uint256',\n        description: 'The minimum required tokens to receive from the sweep',\n        name: 'amount',\n      },\n    ],\n  },\n};\n","import { Interface, TransactionDescription } from '@ethersproject/abi';\nimport { Hex } from '@metamask/utils';\nimport { addHexPrefix, stripHexPrefix } from 'ethereumjs-util';\nimport { CHAIN_IDS } from '../../../../../shared/constants/network';\nimport { UNISWAP_ROUTER_COMMANDS } from './uniswap-commands';\n\nexport type UniswapRouterCommand = {\n  name: string;\n  params: {\n    name: string;\n    type: string;\n    description: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    value: any;\n  }[];\n};\n\nexport type UniswapPathPool = {\n  firstAddress: Hex;\n  tickSpacing: number;\n  secondAddress: Hex;\n};\n\nconst ADDRESS_LENGTH = 40;\nconst TICK_SPACING_LENGTH = 6;\n\nexport const UNISWAP_UNIVERSAL_ROUTER_ADDRESSES = {\n  [CHAIN_IDS.ARBITRUM]: [\n    '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5',\n    '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    '0x5E325eDA8064b456f4781070C0738d849c824258',\n  ],\n  [CHAIN_IDS.AVALANCHE]: [\n    '0x82635AF6146972cD6601161c4472ffe97237D292',\n    '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n  ],\n  [CHAIN_IDS.BASE]: [\n    '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n  ],\n  [CHAIN_IDS.BSC]: [\n    '0x5Dc88340E1c5c6366864Ee415d6034cadd1A9897',\n    '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    '0x4Dae2f939ACf50408e13d58534Ff8c2776d45265',\n  ],\n  [CHAIN_IDS.MAINNET]: [\n    '0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B',\n    '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n  ],\n  [CHAIN_IDS.OPTIMISM]: [\n    '0xb555edF5dcF85f42cEeF1f3630a52A108E55A654',\n    '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    '0xCb1355ff08Ab38bBCE60111F1bb2B784bE25D7e8',\n  ],\n  [CHAIN_IDS.POLYGON]: [\n    '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5',\n    '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    '0xec7BE89e9d109e7e3Fec59c222CF297125FEFda2',\n  ],\n  [CHAIN_IDS.SEPOLIA]: ['0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD'],\n} as Record<string, string[]>;\n\nconst ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: 'commands',\n        type: 'bytes',\n      },\n      {\n        name: 'inputs',\n        type: 'bytes[]',\n      },\n      {\n        name: 'deadline',\n        type: 'uint256',\n      },\n    ],\n    name: 'execute',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: 'commands',\n        type: 'bytes',\n      },\n      {\n        name: 'inputs',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'execute',\n    type: 'function',\n  },\n];\n\nexport function decodeUniswapRouterTransactionData({\n  transactionData,\n  contractAddress,\n  chainId,\n}: {\n  transactionData: string;\n  contractAddress: string;\n  chainId: string;\n}): UniswapRouterCommand[] | undefined {\n  const supportedAddresses = UNISWAP_UNIVERSAL_ROUTER_ADDRESSES[chainId];\n\n  if (\n    !supportedAddresses\n      ?.map((address) => address.toLowerCase())\n      .includes(contractAddress.toLowerCase())\n  ) {\n    return undefined;\n  }\n\n  const contractInterface = new Interface(ABI);\n\n  let parsedTransactionData: TransactionDescription;\n\n  try {\n    parsedTransactionData = contractInterface.parseTransaction({\n      data: transactionData,\n    });\n  } catch (error) {\n    return undefined;\n  }\n\n  const commands = parsedTransactionData.args.commands as string;\n  const inputs = parsedTransactionData.args.inputs as string[];\n  const commandBytes = commands.slice(2).match(/.{1,2}/gu) as string[];\n\n  return commandBytes\n    .map((commandByte, i) => decodeUniswapCommand(commandByte, inputs[i]))\n    .filter((command) => command !== undefined) as UniswapRouterCommand[];\n}\n\nfunction decodeUniswapCommand(\n  commandByte: string,\n  input: string,\n): UniswapRouterCommand | undefined {\n  const commandValue = parseInt(commandByte, 16);\n  // eslint-disable-next-line no-bitwise\n  const commandIndex = commandValue & 0b11111;\n\n  const data =\n    UNISWAP_ROUTER_COMMANDS[\n      String(commandIndex) as keyof typeof UNISWAP_ROUTER_COMMANDS\n    ];\n\n  if (!data) {\n    return undefined;\n  }\n\n  const types = data.params.map((param) => param.type);\n  const abiDecoder = Interface.getAbiCoder();\n  const values = abiDecoder.decode(types, input);\n  const { name } = data;\n\n  const params = data.params.map((param, index) => {\n    const { name: paramName, type, description } = param;\n    const rawData = values[index];\n    const value = paramName === 'path' ? decodeUniswapPath(rawData) : rawData;\n\n    return { name: paramName, type, value, description };\n  });\n\n  return {\n    name,\n    params,\n  };\n}\n\nfunction decodeUniswapPath(rawPath: string): UniswapPathPool[] {\n  const pools: UniswapPathPool[] = [];\n  let remainingData = stripHexPrefix(rawPath);\n  let currentPool = {} as UniswapPathPool;\n  let isParsingAddress = true;\n\n  while (remainingData.length) {\n    if (isParsingAddress) {\n      const address = addHexPrefix(\n        remainingData.slice(0, ADDRESS_LENGTH),\n      ) as Hex;\n\n      if (currentPool.firstAddress) {\n        currentPool.secondAddress = address;\n\n        pools.push(currentPool);\n\n        currentPool = {\n          firstAddress: address,\n        } as UniswapPathPool;\n      } else {\n        currentPool.firstAddress = address;\n      }\n\n      remainingData = remainingData.slice(ADDRESS_LENGTH);\n    } else {\n      currentPool.tickSpacing = parseInt(\n        remainingData.slice(0, TICK_SPACING_LENGTH),\n        16,\n      );\n\n      remainingData = remainingData.slice(TICK_SPACING_LENGTH);\n    }\n\n    isParsingAddress = !isParsingAddress;\n  }\n\n  return pools;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/EnsController.ts\nvar _providers = require('@ethersproject/providers');\nvar _basecontroller = require('@metamask/base-controller');\n\n\n\n\n\n\n\n\nvar _controllerutils = require('@metamask/controller-utils');\nvar _utils = require('@metamask/utils');\nvar _ = require('punycode/');\nvar log = _utils.createProjectLogger.call(void 0, \"ens-controller\");\nvar name = \"EnsController\";\nvar DEFAULT_ENS_NETWORK_MAP = {\n  // Mainnet\n  1: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  // Ropsten\n  3: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  // Rinkeby\n  4: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  // Goerli\n  5: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  // Holesky\n  17e3: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  // Sepolia\n  11155111: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\"\n};\nvar metadata = {\n  ensEntries: { persist: true, anonymous: false },\n  ensResolutionsByAddress: { persist: true, anonymous: false }\n};\nvar defaultState = {\n  ensEntries: {},\n  ensResolutionsByAddress: {}\n};\nvar ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\nvar ZERO_X_ERROR_ADDRESS = \"0x\";\nvar _ethProvider, _getChainEnsSupport, getChainEnsSupport_fn;\nvar EnsController = class extends _basecontroller.BaseController {\n  /**\n   * Creates an EnsController instance.\n   *\n   * @param options - Constructor options.\n   * @param options.registriesByChainId - Map between chain IDs and ENS contract addresses.\n   * @param options.messenger - A reference to the messaging system.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.provider - Provider instance.\n   * @param options.onNetworkDidChange - Allows subscribing to network controller networkDidChange events.\n   */\n  constructor({\n    registriesByChainId = DEFAULT_ENS_NETWORK_MAP,\n    messenger,\n    state = {},\n    provider,\n    onNetworkDidChange\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: {\n        ...defaultState,\n        ensEntries: Object.fromEntries(\n          Object.entries(registriesByChainId).map(([chainId, address]) => [\n            _controllerutils.toHex.call(void 0, chainId),\n            {\n              \".\": {\n                address,\n                chainId: _controllerutils.toHex.call(void 0, chainId),\n                ensName: \".\"\n              }\n            }\n          ])\n        ),\n        ...state\n      }\n    });\n    /**\n     * Check if the chain supports ENS.\n     *\n     * @param chainId - chain id.\n     * @returns Boolean indicating if the chain supports ENS.\n     */\n    __privateAdd(this, _getChainEnsSupport);\n    __privateAdd(this, _ethProvider, null);\n    if (provider && onNetworkDidChange) {\n      onNetworkDidChange(({ selectedNetworkClientId }) => {\n        this.resetState();\n        const selectedNetworkClient = this.messagingSystem.call(\n          \"NetworkController:getNetworkClientById\",\n          selectedNetworkClientId\n        );\n        const currentChainId = selectedNetworkClient.configuration.chainId;\n        if (__privateMethod(this, _getChainEnsSupport, getChainEnsSupport_fn).call(this, currentChainId)) {\n          __privateSet(this, _ethProvider, new (0, _providers.Web3Provider)(provider, {\n            chainId: _controllerutils.convertHexToDecimal.call(void 0, currentChainId),\n            name: _controllerutils.CHAIN_ID_TO_ETHERS_NETWORK_NAME_MAP[currentChainId],\n            ensAddress: registriesByChainId[parseInt(currentChainId, 16)]\n          }));\n        } else {\n          __privateSet(this, _ethProvider, null);\n        }\n      });\n    }\n  }\n  /**\n   * Clears ensResolutionsByAddress state property.\n   */\n  resetState() {\n    this.update((currentState) => {\n      currentState.ensResolutionsByAddress = {};\n    });\n  }\n  /**\n   * Remove all chain Ids and ENS entries from state.\n   */\n  clear() {\n    this.update((state) => {\n      state.ensEntries = {};\n    });\n  }\n  /**\n   * Delete an ENS entry.\n   *\n   * @param chainId - Parent chain of the ENS entry to delete.\n   * @param ensName - Name of the ENS entry to delete.\n   * @returns Boolean indicating if the entry was deleted.\n   */\n  delete(chainId, ensName) {\n    const normalizedEnsName = _controllerutils.normalizeEnsName.call(void 0, ensName);\n    if (!_controllerutils.isSafeDynamicKey.call(void 0, chainId) || !normalizedEnsName || !this.state.ensEntries[chainId] || !this.state.ensEntries[chainId][normalizedEnsName]) {\n      return false;\n    }\n    this.update((state) => {\n      delete state.ensEntries[chainId][normalizedEnsName];\n      if (Object.keys(state.ensEntries[chainId]).length === 0) {\n        delete state.ensEntries[chainId];\n      }\n    });\n    return true;\n  }\n  /**\n   * Retrieve a DNS entry.\n   *\n   * @param chainId - Parent chain of the ENS entry to retrieve.\n   * @param ensName - Name of the ENS entry to retrieve.\n   * @returns The EnsEntry or null if it does not exist.\n   */\n  get(chainId, ensName) {\n    const normalizedEnsName = _controllerutils.normalizeEnsName.call(void 0, ensName);\n    return !!normalizedEnsName && this.state.ensEntries[chainId] ? this.state.ensEntries[chainId][normalizedEnsName] || null : null;\n  }\n  /**\n   * Add or update an ENS entry by chainId and ensName.\n   *\n   * A null address indicates that the ENS name does not resolve.\n   *\n   * @param chainId - Id of the associated chain.\n   * @param ensName - The ENS name.\n   * @param address - Associated address (or null) to add or update.\n   * @returns Boolean indicating if the entry was set.\n   */\n  set(chainId, ensName, address) {\n    if (!Number.isInteger(Number.parseInt(chainId, 10)) || !ensName || typeof ensName !== \"string\" || address && !_controllerutils.isValidHexAddress.call(void 0, address)) {\n      throw new Error(\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        `Invalid ENS entry: { chainId:${chainId}, ensName:${ensName}, address:${address}}`\n      );\n    }\n    const normalizedEnsName = _controllerutils.normalizeEnsName.call(void 0, ensName);\n    if (!normalizedEnsName) {\n      throw new Error(`Invalid ENS name: ${ensName}`);\n    }\n    const normalizedAddress = address ? _controllerutils.toChecksumHexAddress.call(void 0, address) : null;\n    const subState = this.state.ensEntries[chainId];\n    if (subState?.[normalizedEnsName] && subState[normalizedEnsName].address === normalizedAddress) {\n      return false;\n    }\n    this.update((state) => {\n      state.ensEntries = {\n        ...this.state.ensEntries,\n        [chainId]: {\n          ...this.state.ensEntries[chainId],\n          [normalizedEnsName]: {\n            address: normalizedAddress,\n            chainId,\n            ensName: normalizedEnsName\n          }\n        }\n      };\n    });\n    return true;\n  }\n  /**\n   * Resolve ens by address.\n   *\n   * @param nonChecksummedAddress - address\n   * @returns ens resolution\n   */\n  async reverseResolveAddress(nonChecksummedAddress) {\n    if (!__privateGet(this, _ethProvider)) {\n      return void 0;\n    }\n    const address = _controllerutils.toChecksumHexAddress.call(void 0, nonChecksummedAddress);\n    if (this.state.ensResolutionsByAddress[address]) {\n      return this.state.ensResolutionsByAddress[address];\n    }\n    let domain;\n    try {\n      domain = await __privateGet(this, _ethProvider).lookupAddress(address);\n    } catch (error) {\n      log(error);\n      return void 0;\n    }\n    if (!domain) {\n      return void 0;\n    }\n    let registeredAddress;\n    try {\n      registeredAddress = await __privateGet(this, _ethProvider).resolveName(domain);\n    } catch (error) {\n      log(error);\n      return void 0;\n    }\n    if (!registeredAddress) {\n      return void 0;\n    }\n    if (registeredAddress === ZERO_ADDRESS || registeredAddress === ZERO_X_ERROR_ADDRESS) {\n      return void 0;\n    }\n    if (_controllerutils.toChecksumHexAddress.call(void 0, registeredAddress) !== address) {\n      return void 0;\n    }\n    this.update((state) => {\n      state.ensResolutionsByAddress[address] = _.toASCII.call(void 0, domain);\n    });\n    return domain;\n  }\n};\n_ethProvider = new WeakMap();\n_getChainEnsSupport = new WeakSet();\ngetChainEnsSupport_fn = function(chainId) {\n  return Boolean(this.state.ensEntries[chainId]);\n};\nvar EnsController_default = EnsController;\n\n\n\n\n\nexports.DEFAULT_ENS_NETWORK_MAP = DEFAULT_ENS_NETWORK_MAP; exports.EnsController = EnsController; exports.EnsController_default = EnsController_default;\n//# sourceMappingURL=chunk-BG4UCEGM.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\nvar _chunkBG4UCEGMjs = require('./chunk-BG4UCEGM.js');\n\n\n\nexports.DEFAULT_ENS_NETWORK_MAP = _chunkBG4UCEGMjs.DEFAULT_ENS_NETWORK_MAP; exports.EnsController = _chunkBG4UCEGMjs.EnsController;\n//# sourceMappingURL=index.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});// src/BaseControllerV1.ts\nvar BaseControllerV1 = class {\n  /**\n   * Creates a BaseControllerV1 instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(config = {}, state = {}) {\n    /**\n     * Default options used to configure this controller\n     */\n    this.defaultConfig = {};\n    /**\n     * Default state set on this controller\n     */\n    this.defaultState = {};\n    /**\n     * Determines if listeners are notified of state changes\n     */\n    this.disabled = false;\n    /**\n     * Name of this controller used during composition\n     */\n    this.name = \"BaseController\";\n    this.internalConfig = this.defaultConfig;\n    this.internalState = this.defaultState;\n    this.internalListeners = [];\n    this.initialState = state;\n    this.initialConfig = config;\n  }\n  /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns This controller instance.\n   */\n  initialize() {\n    this.internalState = this.defaultState;\n    this.internalConfig = this.defaultConfig;\n    this.configure(this.initialConfig);\n    this.update(this.initialState);\n    return this;\n  }\n  /**\n   * Retrieves current controller configuration options.\n   *\n   * @returns The current configuration.\n   */\n  get config() {\n    return this.internalConfig;\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return this.internalState;\n  }\n  /**\n   * Updates controller configuration.\n   *\n   * @param config - New configuration options.\n   * @param overwrite - Overwrite config instead of merging.\n   * @param fullUpdate - Boolean that defines if the update is partial or not.\n   */\n  configure(config, overwrite = false, fullUpdate = true) {\n    if (fullUpdate) {\n      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n      for (const key of Object.keys(this.internalConfig)) {\n        const value = this.internalConfig[key];\n        if (value !== void 0) {\n          this[key] = value;\n        }\n      }\n    } else {\n      for (const key of Object.keys(config)) {\n        if (this.internalConfig[key] !== void 0) {\n          const value = config[key];\n          this.internalConfig[key] = value;\n          this[key] = value;\n        }\n      }\n    }\n  }\n  /**\n   * Notifies all subscribed listeners of current state.\n   */\n  notify() {\n    if (this.disabled) {\n      return;\n    }\n    this.internalListeners.forEach((listener) => {\n      listener(this.internalState);\n    });\n  }\n  /**\n   * Adds new listener to be notified of state changes.\n   *\n   * @param listener - The callback triggered when state changes.\n   */\n  subscribe(listener) {\n    this.internalListeners.push(listener);\n  }\n  /**\n   * Removes existing listener from receiving state changes.\n   *\n   * @param listener - The callback to remove.\n   * @returns `true` if a listener is found and unsubscribed.\n   */\n  unsubscribe(listener) {\n    const index = this.internalListeners.findIndex((cb) => listener === cb);\n    index > -1 && this.internalListeners.splice(index, 1);\n    return index > -1;\n  }\n  /**\n   * Updates controller state.\n   *\n   * @param state - The new state.\n   * @param overwrite - Overwrite state instead of merging.\n   */\n  update(state, overwrite = false) {\n    this.internalState = overwrite ? Object.assign({}, state) : Object.assign({}, this.internalState, state);\n    this.notify();\n  }\n};\nvar BaseControllerV1_default = BaseControllerV1;\n\n\n\n\nexports.BaseControllerV1 = BaseControllerV1; exports.BaseControllerV1_default = BaseControllerV1_default;\n//# sourceMappingURL=chunk-FTHCJ6HY.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/ControllerMessenger.ts\nvar _actions, _events, _initialEventPayloadGetters, _eventPayloadCache;\nvar ControllerMessenger = class {\n  constructor() {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _actions, /* @__PURE__ */ new Map());\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _events, /* @__PURE__ */ new Map());\n    /**\n     * A map of functions for getting the initial event payload.\n     *\n     * Used only for events that represent state changes.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _initialEventPayloadGetters, /* @__PURE__ */ new Map());\n    /**\n     * A cache of selector return values for their respective handlers.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _eventPayloadCache, /* @__PURE__ */ new Map());\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw when a handler has been registered for this action type already.\n   * @template ActionType - A type union of Action type strings.\n   */\n  registerActionHandler(actionType, handler) {\n    if (_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).has(actionType)) {\n      throw new Error(\n        `A handler for ${actionType} has already been registered`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).set(actionType, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @template ActionType - A type union of Action type strings.\n   */\n  unregisterActionHandler(actionType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).delete(actionType);\n  }\n  /**\n   * Unregister all action handlers.\n   *\n   * This prevents all actions from being called.\n   */\n  clearActions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).clear();\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    const handler = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _actions).get(actionType);\n    if (!handler) {\n      throw new Error(`A handler for ${actionType} has not been registered`);\n    }\n    return handler(...params);\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).set(eventType, getPayload);\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * Note that this method should never throw directly. Any errors from\n   * subscribers are captured and re-thrown in a timeout handler.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @template EventType - A type union of Event type strings.\n   */\n  publish(eventType, ...payload) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (subscribers) {\n      for (const [handler, selector] of subscribers.entries()) {\n        try {\n          if (selector) {\n            const previousValue = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).get(handler);\n            const newValue = selector(...payload);\n            if (newValue !== previousValue) {\n              _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, newValue);\n              handler(newValue, previousValue);\n            }\n          } else {\n            handler(...payload);\n          }\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          });\n        }\n      }\n    }\n  }\n  subscribe(eventType, handler, selector) {\n    let subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers) {\n      subscribers = /* @__PURE__ */ new Map();\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).set(eventType, subscribers);\n    }\n    subscribers.set(handler, selector);\n    if (selector) {\n      const getPayload = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _initialEventPayloadGetters).get(eventType);\n      if (getPayload) {\n        const initialValue = selector(...getPayload());\n        _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).set(handler, initialValue);\n      }\n    }\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw when the given event handler is not registered for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  unsubscribe(eventType, handler) {\n    const subscribers = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).get(eventType);\n    if (!subscribers || !subscribers.has(handler)) {\n      throw new Error(`Subscription not found for event: ${eventType}`);\n    }\n    const selector = subscribers.get(handler);\n    if (selector) {\n      _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _eventPayloadCache).delete(handler);\n    }\n    subscribers.delete(handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * @param eventType - The event type. This is a unique identifier for this event.\n   * @template EventType - A type union of Event type strings.\n   */\n  clearEventSubscriptions(eventType) {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).delete(eventType);\n  }\n  /**\n   * Clear all subscriptions.\n   *\n   * This will remove all subscribed handlers for all events.\n   */\n  clearSubscriptions() {\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _events).clear();\n  }\n  /**\n   * Get a restricted controller messenger\n   *\n   * Returns a wrapper around the controller messenger instance that restricts access to actions\n   * and events. The provided allowlists grant the ability to call the listed actions and subscribe\n   * to the listed events. The \"name\" provided grants ownership of any actions and events under\n   * that namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - Controller messenger options.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   * @template Namespace - The namespace for this messenger. Typically this is the name of the controller or\n   * module that this messenger has been created for. The authority to publish events and register\n   * actions under this namespace is granted to this restricted messenger instance.\n   * @template AllowedAction - A type union of the 'type' string for any allowed actions.\n   * This must not include internal actions that are in the messenger's namespace.\n   * @template AllowedEvent - A type union of the 'type' string for any allowed events.\n   * This must not include internal events that are in the messenger's namespace.\n   * @returns The restricted controller messenger.\n   */\n  getRestricted({\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    return new (0, _chunkUJFCPTF3js.RestrictedControllerMessenger)({\n      controllerMessenger: this,\n      name,\n      allowedActions,\n      allowedEvents\n    });\n  }\n};\n_actions = new WeakMap();\n_events = new WeakMap();\n_initialEventPayloadGetters = new WeakMap();\n_eventPayloadCache = new WeakMap();\n\n\n\nexports.ControllerMessenger = ControllerMessenger;\n//# sourceMappingURL=chunk-G42723LG.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/BaseControllerV2.ts\nvar _immer = require('immer');\n_immer.enablePatches.call(void 0, );\nvar _internalState;\nvar BaseController = class {\n  /**\n   * Creates a BaseController instance.\n   *\n   * @param options - Controller options.\n   * @param options.messenger - Controller messaging system.\n   * @param options.metadata - ControllerState metadata, describing how to \"anonymize\" the state, and which\n   * parts should be persisted.\n   * @param options.name - The name of the controller, used as a namespace for events and actions.\n   * @param options.state - Initial controller state.\n   */\n  constructor({\n    messenger,\n    metadata,\n    name,\n    state\n  }) {\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _internalState, void 0);\n    this.messagingSystem = messenger;\n    this.name = name;\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, _immer.freeze.call(void 0, state, true));\n    this.metadata = metadata;\n    this.messagingSystem.registerActionHandler(\n      `${name}:getState`,\n      () => this.state\n    );\n    this.messagingSystem.registerInitialEventPayload({\n      eventType: `${name}:stateChange`,\n      getPayload: () => [this.state, []]\n    });\n  }\n  /**\n   * Retrieves current controller state.\n   *\n   * @returns The current state.\n   */\n  get state() {\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState);\n  }\n  set state(_) {\n    throw new Error(\n      `Controller state cannot be directly mutated; use 'update' method instead.`\n    );\n  }\n  /**\n   * Updates controller state. Accepts a callback that is passed a draft copy\n   * of the controller state. If a value is returned, it is set as the new\n   * state. Otherwise, any changes made within that callback to the draft are\n   * applied to the controller state.\n   *\n   * @param callback - Callback for updating state, passed a draft state\n   * object. Return a new state object or mutate the draft to update state.\n   * @returns An object that has the next state, patches applied in the update and inverse patches to\n   * rollback the update.\n   */\n  update(callback) {\n    const [nextState, patches, inversePatches] = _immer.produceWithPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), callback);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n    return { nextState, patches, inversePatches };\n  }\n  /**\n   * Applies immer patches to the current state. The patches come from the\n   * update function itself and can either be normal or inverse patches.\n   *\n   * @param patches - An array of immer patches that are to be applied to make\n   * or undo changes.\n   */\n  applyPatches(patches) {\n    const nextState = _immer.applyPatches.call(void 0, _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _internalState), patches);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _internalState, nextState);\n    this.messagingSystem.publish(\n      `${this.name}:stateChange`,\n      nextState,\n      patches\n    );\n  }\n  /**\n   * Prepares the controller for garbage collection. This should be extended\n   * by any subclasses to clean up any additional connections or events.\n   *\n   * The only cleanup performed here is to remove listeners. While technically\n   * this is not required to ensure this instance is garbage collected, it at\n   * least ensures this instance won't be responsible for preventing the\n   * listeners from being garbage collected.\n   */\n  destroy() {\n    this.messagingSystem.clearEventSubscriptions(`${this.name}:stateChange`);\n  }\n};\n_internalState = new WeakMap();\nfunction getAnonymizedState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"anonymous\");\n}\nfunction getPersistentState(state, metadata) {\n  return deriveStateFromMetadata(state, metadata, \"persist\");\n}\nfunction deriveStateFromMetadata(state, metadata, metadataProperty) {\n  return Object.keys(state).reduce((derivedState, key) => {\n    try {\n      const stateMetadata = metadata[key];\n      if (!stateMetadata) {\n        throw new Error(`No metadata found for '${String(key)}'`);\n      }\n      const propertyMetadata = stateMetadata[metadataProperty];\n      const stateProperty = state[key];\n      if (typeof propertyMetadata === \"function\") {\n        derivedState[key] = propertyMetadata(stateProperty);\n      } else if (propertyMetadata) {\n        derivedState[key] = stateProperty;\n      }\n      return derivedState;\n    } catch (error) {\n      setTimeout(() => {\n        throw error;\n      });\n      return derivedState;\n    }\n  }, {});\n}\n\n\n\n\n\nexports.BaseController = BaseController; exports.getAnonymizedState = getAnonymizedState; exports.getPersistentState = getPersistentState;\n//# sourceMappingURL=chunk-IURK6TKD.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\n\n\n\nvar _chunkZ4BLTVTBjs = require('./chunk-Z4BLTVTB.js');\n\n// src/RestrictedControllerMessenger.ts\nvar _controllerMessenger, _controllerName, _allowedActions, _allowedEvents, _isAllowedEvent, isAllowedEvent_fn, _isAllowedAction, isAllowedAction_fn, _isInCurrentNamespace, isInCurrentNamespace_fn;\nvar RestrictedControllerMessenger = class {\n  /**\n   * Constructs a restricted controller messenger\n   *\n   * The provided allowlists grant the ability to call the listed actions and subscribe to the\n   * listed events. The \"name\" provided grants ownership of any actions and events under that\n   * namespace. Ownership allows registering actions and publishing events, as well as\n   * unregistering actions and clearing event subscriptions.\n   *\n   * @param options - The controller options.\n   * @param options.controllerMessenger - The controller messenger instance that is being wrapped.\n   * @param options.name - The name of the thing this messenger will be handed to (e.g. the\n   * controller name). This grants \"ownership\" of actions and events under this namespace to the\n   * restricted controller messenger returned.\n   * @param options.allowedActions - The list of actions that this restricted controller messenger\n   * should be alowed to call.\n   * @param options.allowedEvents - The list of events that this restricted controller messenger\n   * should be allowed to subscribe to.\n   */\n  constructor({\n    controllerMessenger,\n    name,\n    allowedActions,\n    allowedEvents\n  }) {\n    /**\n     * Determine whether the given event type is allowed. Event types are\n     * allowed if they are in the current namespace or on the list of\n     * allowed events.\n     *\n     * @param eventType - The event type to check.\n     * @returns Whether the event type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedEvent);\n    /**\n     * Determine whether the given action type is allowed. Action types\n     * are allowed if they are in the current namespace or on the list of\n     * allowed actions.\n     *\n     * @param actionType - The action type to check.\n     * @returns Whether the action type is allowed.\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isAllowedAction);\n    /**\n     * Determine whether the given name is within the current namespace.\n     *\n     * @param name - The name to check\n     * @returns Whether the name is within the current namespace\n     */\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _isInCurrentNamespace);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerMessenger, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _controllerName, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedActions, void 0);\n    _chunkZ4BLTVTBjs.__privateAdd.call(void 0, this, _allowedEvents, void 0);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerMessenger, controllerMessenger);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _controllerName, name);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedActions, allowedActions);\n    _chunkZ4BLTVTBjs.__privateSet.call(void 0, this, _allowedEvents, allowedEvents);\n  }\n  /**\n   * Register an action handler.\n   *\n   * This will make the registered function available to call via the `call` method.\n   *\n   * The action type this handler is registered under *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unqiue identifier for this action.\n   * @param handler - The action handler. This function gets called when the `call` method is\n   * invoked with the given action type.\n   * @throws Will throw if an action handler that is not in the current namespace is being registered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  registerActionHandler(action, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed registering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerActionHandler(action, handler);\n  }\n  /**\n   * Unregister an action handler.\n   *\n   * This will prevent this action from being called.\n   *\n   * The action type being unregistered *must* be in the current namespace.\n   *\n   * @param action - The action type. This is a unique identifier for this action.\n   * @throws Will throw if an action handler that is not in the current namespace is being unregistered.\n   * @template ActionType - A type union of Action type strings that are namespaced by Namespace.\n   */\n  unregisterActionHandler(action) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, action)) {\n      throw new Error(\n        `Only allowed unregistering action handlers prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unregisterActionHandler(action);\n  }\n  /**\n   * Call an action.\n   *\n   * This function will call the action handler corresponding to the given action type, passing\n   * along any parameters given.\n   *\n   * The action type being called must be on the action allowlist.\n   *\n   * @param actionType - The action type. This is a unqiue identifier for this action.\n   * @param params - The action parameters. These must match the type of the parameters of the\n   * registered action handler.\n   * @throws Will throw when no handler has been registered for the given type.\n   * @template ActionType - A type union of allowed Action type strings.\n   * @returns The action return value.\n   */\n  call(actionType, ...params) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedAction, isAllowedAction_fn).call(this, actionType)) {\n      throw new Error(`Action missing from allow list: ${actionType}`);\n    }\n    const response = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).call(\n      actionType,\n      ...params\n    );\n    return response;\n  }\n  /**\n   * Register a function for getting the initial payload for an event.\n   *\n   * This is used for events that represent a state change, where the payload is the state.\n   * Registering a function for getting the payload allows event selectors to have a point of\n   * comparison the first time state changes.\n   *\n   * The event type *must* be in the current namespace\n   *\n   * @param args - The arguments to this function\n   * @param args.eventType - The event type to register a payload for.\n   * @param args.getPayload - A function for retrieving the event payload.\n   */\n  registerInitialEventPayload({\n    eventType,\n    getPayload\n  }) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).registerInitialEventPayload({\n      eventType,\n      getPayload\n    });\n  }\n  /**\n   * Publish an event.\n   *\n   * Publishes the given payload to all subscribers of the given event type.\n   *\n   * The event type being published *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param payload - The event payload. The type of the parameters for each event handler must\n   * match the type of this payload.\n   * @throws Will throw if an event that is not in the current namespace is being published.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  publish(event, ...payload) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed publishing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).publish(event, ...payload);\n  }\n  subscribe(event, handler, selector) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    if (selector) {\n      return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler, selector);\n    }\n    return _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).subscribe(event, handler);\n  }\n  /**\n   * Unsubscribe from an event.\n   *\n   * Unregisters the given function as an event handler for the given event.\n   *\n   * The event type being unsubscribed to must be on the event allowlist.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @param handler - The event handler to unregister.\n   * @throws Will throw if the given event is not an allowed event for this controller messenger.\n   * @template EventType - A type union of allowed Event type strings.\n   */\n  unsubscribe(event, handler) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isAllowedEvent, isAllowedEvent_fn).call(this, event)) {\n      throw new Error(`Event missing from allow list: ${event}`);\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).unsubscribe(event, handler);\n  }\n  /**\n   * Clear subscriptions for a specific event.\n   *\n   * This will remove all subscribed handlers for this event.\n   *\n   * The event type being cleared *must* be in the current namespace.\n   *\n   * @param event - The event type. This is a unique identifier for this event.\n   * @throws Will throw if a subscription for an event that is not in the current namespace is being cleared.\n   * @template EventType - A type union of Event type strings that are namespaced by Namespace.\n   */\n  clearEventSubscriptions(event) {\n    if (!_chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, event)) {\n      throw new Error(\n        `Only allowed clearing events prefixed by '${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:'`\n      );\n    }\n    _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerMessenger).clearEventSubscriptions(event);\n  }\n};\n_controllerMessenger = new WeakMap();\n_controllerName = new WeakMap();\n_allowedActions = new WeakMap();\n_allowedEvents = new WeakMap();\n_isAllowedEvent = new WeakSet();\nisAllowedEvent_fn = function(eventType) {\n  const allowedEvents = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedEvents);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, eventType) || allowedEvents !== null && allowedEvents.includes(eventType);\n};\n_isAllowedAction = new WeakSet();\nisAllowedAction_fn = function(actionType) {\n  const allowedActions = _chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _allowedActions);\n  return _chunkZ4BLTVTBjs.__privateMethod.call(void 0, this, _isInCurrentNamespace, isInCurrentNamespace_fn).call(this, actionType) || allowedActions !== null && allowedActions.includes(actionType);\n};\n_isInCurrentNamespace = new WeakSet();\nisInCurrentNamespace_fn = function(name) {\n  return name.startsWith(`${_chunkZ4BLTVTBjs.__privateGet.call(void 0, this, _controllerName)}:`);\n};\n\n\n\nexports.RestrictedControllerMessenger = RestrictedControllerMessenger;\n//# sourceMappingURL=chunk-UJFCPTF3.js.map","import { Hex, createProjectLogger } from '@metamask/utils';\nimport EthQuery from '@metamask/eth-query';\nimport {\n  DecodedTransactionDataMethod,\n  DecodedTransactionDataParam,\n  DecodedTransactionDataResponse,\n  DecodedTransactionDataSource,\n} from '../../../../../shared/types/transaction-decode';\nimport { decodeUniswapRouterTransactionData } from './uniswap';\nimport { decodeTransactionDataWithSourcify } from './sourcify';\nimport { getContractProxyAddress } from './proxy';\nimport { decodeTransactionDataWithFourByte } from './four-byte';\n\nconst log = createProjectLogger('transaction-decode');\n\nexport async function decodeTransactionData({\n  transactionData,\n  contractAddress,\n  chainId,\n  ethQuery,\n}: {\n  transactionData: Hex;\n  contractAddress: Hex;\n  chainId: Hex;\n  ethQuery: EthQuery;\n}): Promise<DecodedTransactionDataResponse | undefined> {\n  log('Decoding transaction data', {\n    transactionData,\n    contractAddress,\n    chainId,\n  });\n\n  const uniswapData = decodeUniswapRouterTransactionData({\n    transactionData,\n    contractAddress,\n    chainId,\n  });\n\n  if (uniswapData) {\n    log('Decoded with Uniswap commands', uniswapData);\n\n    return {\n      data: normalizeDecodedMethods(uniswapData),\n      source: DecodedTransactionDataSource.Uniswap,\n    };\n  }\n\n  const proxyAddress = await getContractProxyAddress(contractAddress, ethQuery);\n\n  if (proxyAddress) {\n    log('Retrieved proxy implementation address', proxyAddress);\n  }\n\n  const address = proxyAddress ?? contractAddress;\n\n  const sourcifyData = decodeTransactionDataWithSourcify(\n    transactionData,\n    address,\n    chainId,\n  );\n\n  const fourByteData = decodeTransactionDataWithFourByte(transactionData);\n\n  const [sourcifyResult, fourByteResult] = await Promise.allSettled([\n    sourcifyData,\n    fourByteData,\n  ]);\n\n  if (sourcifyResult.status === 'fulfilled' && sourcifyResult.value) {\n    log('Decoded data with Sourcify', sourcifyResult.value);\n\n    return {\n      data: normalizeDecodedMethods([sourcifyResult.value]),\n      source: DecodedTransactionDataSource.Sourcify,\n    };\n  }\n\n  log('Failed to decode data with Sourcify', sourcifyResult);\n\n  if (fourByteResult.status === 'fulfilled' && fourByteResult.value) {\n    log('Decoded data with 4Byte', fourByteResult.value);\n\n    return {\n      data: normalizeDecodedMethods([fourByteResult.value]),\n      source: DecodedTransactionDataSource.FourByte,\n    };\n  }\n\n  log('Failed to decode data with 4Byte', fourByteResult);\n\n  return undefined;\n}\n\nfunction normalizeDecodedMethods(\n  methods: DecodedTransactionDataMethod[],\n): DecodedTransactionDataMethod[] {\n  return methods.map((method) => normalizeDecodedMethod(method));\n}\n\nfunction normalizeDecodedMethod(\n  method: DecodedTransactionDataMethod,\n): DecodedTransactionDataMethod {\n  return {\n    ...method,\n    params: method.params.map((param) => normalizeDecodedParam(param)),\n  };\n}\n\nfunction normalizeDecodedParam(\n  param: DecodedTransactionDataParam,\n): DecodedTransactionDataParam {\n  return {\n    ...param,\n    value: normalizeDecodedParamValue(param.value),\n    children: param.children?.map((child) => normalizeDecodedParam(child)),\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalizeDecodedParamValue(value: any): any {\n  const hexValue = value._hex;\n\n  if (hexValue) {\n    return parseInt(hexValue, 16);\n  }\n\n  return value;\n}\n","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n\n\n\n\n\nexports.__privateGet = __privateGet; exports.__privateAdd = __privateAdd; exports.__privateSet = __privateSet; exports.__privateMethod = __privateMethod;\n//# sourceMappingURL=chunk-Z4BLTVTB.js.map","\"use strict\";Object.defineProperty(exports, \"__esModule\", {value: true});\n\nvar _chunkFTHCJ6HYjs = require('./chunk-FTHCJ6HY.js');\n\n\n\n\nvar _chunkIURK6TKDjs = require('./chunk-IURK6TKD.js');\n\n\nvar _chunkG42723LGjs = require('./chunk-G42723LG.js');\n\n\nvar _chunkUJFCPTF3js = require('./chunk-UJFCPTF3.js');\nrequire('./chunk-Z4BLTVTB.js');\n\n\n\n\n\n\n\nexports.BaseController = _chunkIURK6TKDjs.BaseController; exports.BaseControllerV1 = _chunkFTHCJ6HYjs.BaseControllerV1; exports.ControllerMessenger = _chunkG42723LGjs.ControllerMessenger; exports.RestrictedControllerMessenger = _chunkUJFCPTF3js.RestrictedControllerMessenger; exports.getAnonymizedState = _chunkIURK6TKDjs.getAnonymizedState; exports.getPersistentState = _chunkIURK6TKDjs.getPersistentState;\n//# sourceMappingURL=index.js.map","module.exports={\"snapId\":\"npm:@metamask/ens-resolver-snap\",\"manifest\":{\"version\":\"0.1.2\",\"description\":\"A Snap used for ENS name resolution\",\"proposedName\":\"Ethereum Name Service resolver\",\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/MetaMask/ens-resolver-snap.git\"},\"source\":{\"shasum\":\"BizRmzfV+oKEIlvph12McsIqzzDECIw/Td7Lx+/cios=\",\"location\":{\"npm\":{\"filePath\":\"dist/bundle.js\",\"iconPath\":\"images/icon.svg\",\"packageName\":\"@metamask/ens-resolver-snap\",\"registry\":\"https://registry.npmjs.org/\"}}},\"initialPermissions\":{\"endowment:name-lookup\":{},\"endowment:network-access\":{},\"endowment:ethereum-provider\":{}},\"manifestVersion\":\"0.1\"},\"files\":[{\"path\":\"images/icon.svg\",\"value\":\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"none\\\" viewBox=\\\"0 0 24 24\\\" height=\\\"3rem\\\">\\n  <path fill=\\\"url(#ENSWithGradient_svg__a)\\\"\\n        d=\\\"M4.049 5.663a2.9 2.9 0 0 1 .942-1.038L11.611 0 4.828 11.222s-.592-1.002-.823-1.51a4.8 4.8 0 0 1 .044-4.05m-2.732 7.74a7.55 7.55 0 0 0 2.963 5.489L11.602 24s-4.58-6.606-8.445-13.178a6.6 6.6 0 0 1-.776-2.242 3.6 3.6 0 0 1 0-1.076c-.101.187-.297.57-.297.57a8.7 8.7 0 0 0-.79 2.534c-.077.93-.07 1.867.023 2.796m18.668.89c-.237-.507-.824-1.509-.824-1.509L12.391 24l6.62-4.622c.394-.263.717-.62.942-1.038a4.8 4.8 0 0 0 .044-4.05zm2.688-3.694a7.55 7.55 0 0 0-2.963-5.488L12.4 0s4.577 6.606 8.445 13.179a6.6 6.6 0 0 1 .773 2.24c.054.358.054.72 0 1.077.1-.187.296-.57.296-.57.392-.799.659-1.654.791-2.534.078-.93.07-1.866-.02-2.796z\\\"/>\\n  <defs>\\n    <linearGradient id=\\\"ENSWithGradient_svg__a\\\" x1=\\\"15.574\\\" x2=\\\"-8.982\\\" y1=\\\"26.845\\\" y2=\\\"-11.906\\\"\\n                    gradientUnits=\\\"userSpaceOnUse\\\">\\n      <stop stop-color=\\\"#44BCF0\\\"/>\\n      <stop offset=\\\"0.428\\\" stop-color=\\\"#628BF3\\\"/>\\n      <stop offset=\\\"1\\\" stop-color=\\\"#A099FF\\\"/>\\n    </linearGradient>\\n  </defs>\\n</svg>\\n\"},{\"path\":\"dist/bundle.js\",\"value\":\"(()=>{\\\"use strict\\\";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{\\\"undefined\\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\\\"Module\\\"}),Object.defineProperty(t,\\\"__esModule\\\",{value:!0})}},e={};t.r(e),t.d(e,{onNameLookup:()=>ol});var n={};t.r(n),t.d(n,{OG:()=>po,My:()=>so,bytesToNumberBE:()=>ao,lX:()=>co,Id:()=>fo,fg:()=>yo,qj:()=>ho,hexToBytes:()=>oo,lq:()=>lo,z:()=>uo,Q5:()=>bo});const r=\\\"6.13.1\\\";function s(t,e,n){const r=e.split(\\\"|\\\").map((t=>t.trim()));for(let n=0;n<r.length;n++)switch(e){case\\\"any\\\":return;case\\\"bigint\\\":case\\\"boolean\\\":case\\\"number\\\":case\\\"string\\\":if(typeof t===e)return}const s=new Error(`invalid value for type ${e}`);throw s.code=\\\"INVALID_ARGUMENT\\\",s.argument=`value.${n}`,s.value=t,s}async function i(t){const e=Object.keys(t);return(await Promise.all(e.map((e=>Promise.resolve(t[e]))))).reduce(((t,n,r)=>(t[e[r]]=n,t)),{})}function o(t,e,n){for(let r in e){let i=e[r];const o=n?n[r]:null;o&&s(i,o,r),Object.defineProperty(t,r,{enumerable:!0,value:i,writable:!1})}}function a(t){if(null==t)return\\\"null\\\";if(Array.isArray(t))return\\\"[ \\\"+t.map(a).join(\\\", \\\")+\\\" ]\\\";if(t instanceof Uint8Array){const e=\\\"0123456789abcdef\\\";let n=\\\"0x\\\";for(let r=0;r<t.length;r++)n+=e[t[r]>>4],n+=e[15&t[r]];return n}if(\\\"object\\\"==typeof t&&\\\"function\\\"==typeof t.toJSON)return a(t.toJSON());switch(typeof t){case\\\"boolean\\\":case\\\"symbol\\\":case\\\"number\\\":return t.toString();case\\\"bigint\\\":return BigInt(t).toString();case\\\"string\\\":return JSON.stringify(t);case\\\"object\\\":{const e=Object.keys(t);return e.sort(),\\\"{ \\\"+e.map((e=>`${a(e)}: ${a(t[e])}`)).join(\\\", \\\")+\\\" }\\\"}}return\\\"[ COULD NOT SERIALIZE ]\\\"}function c(t,e){return t&&t.code===e}function l(t){return c(t,\\\"CALL_EXCEPTION\\\")}function u(t,e,n){let s,i=t;{const s=[];if(n){if(\\\"message\\\"in n||\\\"code\\\"in n||\\\"name\\\"in n)throw new Error(`value will overwrite populated values: ${a(n)}`);for(const t in n){if(\\\"shortMessage\\\"===t)continue;const e=n[t];s.push(t+\\\"=\\\"+a(e))}}s.push(`code=${e}`),s.push(`version=${r}`),s.length&&(t+=\\\" (\\\"+s.join(\\\", \\\")+\\\")\\\")}switch(e){case\\\"INVALID_ARGUMENT\\\":s=new TypeError(t);break;case\\\"NUMERIC_FAULT\\\":case\\\"BUFFER_OVERRUN\\\":s=new RangeError(t);break;default:s=new Error(t)}return o(s,{code:e}),n&&Object.assign(s,n),null==s.shortMessage&&o(s,{shortMessage:i}),s}function h(t,e,n,r){if(!t)throw u(e,n,r)}function f(t,e,n,r){h(t,e,\\\"INVALID_ARGUMENT\\\",{argument:n,value:r})}function d(t,e,n){null==n&&(n=\\\"\\\"),n&&(n=\\\": \\\"+n),h(t>=e,\\\"missing arguemnt\\\"+n,\\\"MISSING_ARGUMENT\\\",{count:t,expectedCount:e}),h(t<=e,\\\"too many arguments\\\"+n,\\\"UNEXPECTED_ARGUMENT\\\",{count:t,expectedCount:e})}const p=[\\\"NFD\\\",\\\"NFC\\\",\\\"NFKD\\\",\\\"NFKC\\\"].reduce(((t,e)=>{try{if(\\\"test\\\"!==\\\"test\\\".normalize(e))throw new Error(\\\"bad\\\");if(\\\"NFD\\\"===e){const t=String.fromCharCode(233).normalize(\\\"NFD\\\");if(t!==String.fromCharCode(101,769))throw new Error(\\\"broken\\\")}t.push(e)}catch(t){}return t}),[]);function g(t,e,n){if(null==n&&(n=\\\"\\\"),t!==e){let t=n,e=\\\"new\\\";n&&(t+=\\\".\\\",e+=\\\" \\\"+n),h(!1,`private constructor; use ${t}from* methods`,\\\"UNSUPPORTED_OPERATION\\\",{operation:e})}}function m(t,e,n){if(t instanceof Uint8Array)return n?new Uint8Array(t):t;if(\\\"string\\\"==typeof t&&t.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)){const e=new Uint8Array((t.length-2)/2);let n=2;for(let r=0;r<e.length;r++)e[r]=parseInt(t.substring(n,n+2),16),n+=2;return e}f(!1,\\\"invalid BytesLike value\\\",e||\\\"value\\\",t)}function y(t,e){return m(t,e,!1)}function w(t,e){return m(t,e,!0)}function b(t,e){return!(\\\"string\\\"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/))&&((\\\"number\\\"!=typeof e||t.length===2+2*e)&&(!0!==e||t.length%2==0))}function A(t){return b(t,!0)||t instanceof Uint8Array}const v=\\\"0123456789abcdef\\\";function E(t){const e=y(t);let n=\\\"0x\\\";for(let t=0;t<e.length;t++){const r=e[t];n+=v[(240&r)>>4]+v[15&r]}return n}function k(t){return\\\"0x\\\"+t.map((t=>E(t).substring(2))).join(\\\"\\\")}function P(t){return b(t,!0)?(t.length-2)/2:y(t).length}function x(t,e,n){const r=y(t);return null!=n&&n>r.length&&h(!1,\\\"cannot slice beyond data bounds\\\",\\\"BUFFER_OVERRUN\\\",{buffer:r,length:r.length,offset:n}),E(r.slice(null==e?0:e,null==n?r.length:n))}function N(t,e,n){const r=y(t);h(e>=r.length,\\\"padding exceeds data length\\\",\\\"BUFFER_OVERRUN\\\",{buffer:new Uint8Array(r),length:e,offset:e+1});const s=new Uint8Array(e);return s.fill(0),n?s.set(r,e-r.length):s.set(r,0),E(s)}function B(t,e){return N(t,e,!0)}const I=BigInt(0),C=BigInt(1),O=9007199254740991;function R(t,e){let n=S(t,\\\"value\\\");const r=BigInt(L(e,\\\"width\\\")),s=C<<r-C;if(n<I){n=-n,h(n<=s,\\\"too low\\\",\\\"NUMERIC_FAULT\\\",{operation:\\\"toTwos\\\",fault:\\\"overflow\\\",value:t});return(~n&(C<<r)-C)+C}return h(n<s,\\\"too high\\\",\\\"NUMERIC_FAULT\\\",{operation:\\\"toTwos\\\",fault:\\\"overflow\\\",value:t}),n}function T(t,e){const n=F(t,\\\"value\\\"),r=BigInt(L(e,\\\"bits\\\"));return n&(C<<r)-C}function S(t,e){switch(typeof t){case\\\"bigint\\\":return t;case\\\"number\\\":return f(Number.isInteger(t),\\\"underflow\\\",e||\\\"value\\\",t),f(t>=-O&&t<=O,\\\"overflow\\\",e||\\\"value\\\",t),BigInt(t);case\\\"string\\\":try{if(\\\"\\\"===t)throw new Error(\\\"empty string\\\");return\\\"-\\\"===t[0]&&\\\"-\\\"!==t[1]?-BigInt(t.substring(1)):BigInt(t)}catch(n){f(!1,`invalid BigNumberish string: ${n.message}`,e||\\\"value\\\",t)}}f(!1,\\\"invalid BigNumberish value\\\",e||\\\"value\\\",t)}function F(t,e){const n=S(t,e);return h(n>=I,\\\"unsigned value cannot be negative\\\",\\\"NUMERIC_FAULT\\\",{fault:\\\"overflow\\\",operation:\\\"getUint\\\",value:t}),n}const U=\\\"0123456789abcdef\\\";function D(t){if(t instanceof Uint8Array){let e=\\\"0x0\\\";for(const n of t)e+=U[n>>4],e+=U[15&n];return BigInt(e)}return S(t)}function L(t,e){switch(typeof t){case\\\"bigint\\\":return f(t>=-O&&t<=O,\\\"overflow\\\",e||\\\"value\\\",t),Number(t);case\\\"number\\\":return f(Number.isInteger(t),\\\"underflow\\\",e||\\\"value\\\",t),f(t>=-O&&t<=O,\\\"overflow\\\",e||\\\"value\\\",t),t;case\\\"string\\\":try{if(\\\"\\\"===t)throw new Error(\\\"empty string\\\");return L(BigInt(t),e)}catch(n){f(!1,`invalid numeric string: ${n.message}`,e||\\\"value\\\",t)}}f(!1,\\\"invalid numeric value\\\",e||\\\"value\\\",t)}function M(t,e){let n=F(t,\\\"value\\\").toString(16);if(null==e)n.length%2&&(n=\\\"0\\\"+n);else{const r=L(e,\\\"width\\\");for(h(2*r>=n.length,`value exceeds width (${r} bytes)`,\\\"NUMERIC_FAULT\\\",{operation:\\\"toBeHex\\\",fault:\\\"overflow\\\",value:t});n.length<2*r;)n=\\\"0\\\"+n}return\\\"0x\\\"+n}function G(t){const e=F(t,\\\"value\\\");if(e===I)return new Uint8Array([]);let n=e.toString(16);n.length%2&&(n=\\\"0\\\"+n);const r=new Uint8Array(n.length/2);for(let t=0;t<r.length;t++){const e=2*t;r[t]=parseInt(n.substring(e,e+2),16)}return r}function H(t){let e=E(A(t)?t:G(t)).substring(2);for(;e.startsWith(\\\"0\\\");)e=e.substring(1);return\\\"\\\"===e&&(e=\\\"0\\\"),\\\"0x\\\"+e}const Q=32,j=new Uint8Array(Q),V=[\\\"then\\\"],J={},z=new WeakMap;function K(t){return z.get(t)}function q(t,e){z.set(t,e)}function _(t,e){const n=new Error(`deferred error during ABI decoding triggered accessing ${t}`);throw n.error=e,n}function Z(t,e,n){return t.indexOf(null)>=0?e.map(((t,e)=>t instanceof W?Z(K(t),t,n):t)):t.reduce(((t,r,s)=>{let i=e.getValue(r);return r in t||(n&&i instanceof W&&(i=Z(K(i),i,n)),t[r]=i),t}),{})}class W extends Array{#t;constructor(...t){const e=t[0];let n=t[1],r=(t[2]||[]).slice(),s=!0;e!==J&&(n=t,r=[],s=!1),super(n.length),n.forEach(((t,e)=>{this[e]=t}));const i=r.reduce(((t,e)=>(\\\"string\\\"==typeof e&&t.set(e,(t.get(e)||0)+1),t)),new Map);if(q(this,Object.freeze(n.map(((t,e)=>{const n=r[e];return null!=n&&1===i.get(n)?n:null})))),this.#t=[],null==this.#t&&this.#t,!s)return;Object.freeze(this);const o=new Proxy(this,{get:(t,e,n)=>{if(\\\"string\\\"==typeof e){if(e.match(/^[0-9]+$/)){const n=L(e,\\\"%index\\\");if(n<0||n>=this.length)throw new RangeError(\\\"out of result range\\\");const r=t[n];return r instanceof Error&&_(`index ${n}`,r),r}if(V.indexOf(e)>=0)return Reflect.get(t,e,n);const r=t[e];if(r instanceof Function)return function(...e){return r.apply(this===n?t:this,e)};if(!(e in t))return t.getValue.apply(this===n?t:this,[e])}return Reflect.get(t,e,n)}});return q(o,K(this)),o}toArray(t){const e=[];return this.forEach(((n,r)=>{n instanceof Error&&_(`index ${r}`,n),t&&n instanceof W&&(n=n.toArray(t)),e.push(n)})),e}toObject(t){const e=K(this);return e.reduce(((n,r,s)=>(h(null!=r,`value at index ${s} unnamed`,\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"toObject()\\\"}),Z(e,this,t))),{})}slice(t,e){null==t&&(t=0),t<0&&(t+=this.length)<0&&(t=0),null==e&&(e=this.length),e<0&&(e+=this.length)<0&&(e=0),e>this.length&&(e=this.length);const n=K(this),r=[],s=[];for(let i=t;i<e;i++)r.push(this[i]),s.push(n[i]);return new W(J,r,s)}filter(t,e){const n=K(this),r=[],s=[];for(let i=0;i<this.length;i++){const o=this[i];o instanceof Error&&_(`index ${i}`,o),t.call(e,o,i,this)&&(r.push(o),s.push(n[i]))}return new W(J,r,s)}map(t,e){const n=[];for(let r=0;r<this.length;r++){const s=this[r];s instanceof Error&&_(`index ${r}`,s),n.push(t.call(e,s,r,this))}return n}getValue(t){const e=K(this).indexOf(t);if(-1===e)return;const n=this[e];return n instanceof Error&&_(`property ${JSON.stringify(t)}`,n.error),n}static fromItems(t,e){return new W(J,t,e)}}function Y(t){let e=G(t);return h(e.length<=Q,\\\"value out-of-bounds\\\",\\\"BUFFER_OVERRUN\\\",{buffer:e,length:Q,offset:e.length}),e.length!==Q&&(e=w(k([j.slice(e.length%Q),e]))),e}class X{name;type;localName;dynamic;constructor(t,e,n,r){o(this,{name:t,type:e,localName:n,dynamic:r},{name:\\\"string\\\",type:\\\"string\\\",localName:\\\"string\\\",dynamic:\\\"boolean\\\"})}_throwError(t,e){f(!1,t,this.localName,e)}}class ${#e;#n;constructor(){this.#e=[],this.#n=0}get data(){return k(this.#e)}get length(){return this.#n}#r(t){return this.#e.push(t),this.#n+=t.length,t.length}appendWriter(t){return this.#r(w(t.data))}writeBytes(t){let e=w(t);const n=e.length%Q;return n&&(e=w(k([e,j.slice(n)]))),this.#r(e)}writeValue(t){return this.#r(Y(t))}writeUpdatableValue(){const t=this.#e.length;return this.#e.push(j),this.#n+=Q,e=>{this.#e[t]=Y(e)}}}class tt{allowLoose;#e;#s;#i;#o;#a;constructor(t,e,n){o(this,{allowLoose:!!e}),this.#e=w(t),this.#i=0,this.#o=null,this.#a=null!=n?n:1024,this.#s=0}get data(){return E(this.#e)}get dataLength(){return this.#e.length}get consumed(){return this.#s}get bytes(){return new Uint8Array(this.#e)}#c(t){if(this.#o)return this.#o.#c(t);this.#i+=t,h(this.#a<1||this.#i<=this.#a*this.dataLength,`compressed ABI data exceeds inflation ratio of ${this.#a} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`,\\\"BUFFER_OVERRUN\\\",{buffer:w(this.#e),offset:this.#s,length:t,info:{bytesRead:this.#i,dataLength:this.dataLength}})}#l(t,e,n){let r=Math.ceil(e/Q)*Q;return this.#s+r>this.#e.length&&(this.allowLoose&&n&&this.#s+e<=this.#e.length?r=e:h(!1,\\\"data out-of-bounds\\\",\\\"BUFFER_OVERRUN\\\",{buffer:w(this.#e),length:this.#e.length,offset:this.#s+r})),this.#e.slice(this.#s,this.#s+r)}subReader(t){const e=new tt(this.#e.slice(this.#s+t),this.allowLoose,this.#a);return e.#o=this,e}readBytes(t,e){let n=this.#l(0,t,!!e);return this.#c(t),this.#s+=n.length,n.slice(0,t)}readValue(){return D(this.readBytes(Q))}readIndex(){return L(D(this.readBytes(Q)))}}function et(t){if(!Number.isSafeInteger(t)||t<0)throw new Error(`Wrong positive integer: ${t}`)}function nt(t,...e){if(!(t instanceof Uint8Array))throw new Error(\\\"Expected Uint8Array\\\");if(e.length>0&&!e.includes(t.length))throw new Error(`Expected Uint8Array of length ${e}, not of length=${t.length}`)}function rt(t){if(\\\"function\\\"!=typeof t||\\\"function\\\"!=typeof t.create)throw new Error(\\\"Hash should be wrapped by utils.wrapConstructor\\\");et(t.outputLen),et(t.blockLen)}function st(t,e=!0){if(t.destroyed)throw new Error(\\\"Hash instance has been destroyed\\\");if(e&&t.finished)throw new Error(\\\"Hash#digest() has already been called\\\")}function it(t,e){nt(t);const n=e.outputLen;if(t.length<n)throw new Error(`digestInto() expects output buffer of length at least ${n}`)}const ot=BigInt(2**32-1),at=BigInt(32);function ct(t,e=!1){return e?{h:Number(t&ot),l:Number(t>>at&ot)}:{h:0|Number(t>>at&ot),l:0|Number(t&ot)}}function lt(t,e=!1){let n=new Uint32Array(t.length),r=new Uint32Array(t.length);for(let s=0;s<t.length;s++){const{h:i,l:o}=ct(t[s],e);[n[s],r[s]]=[i,o]}return[n,r]}const ut=(t,e,n)=>t<<n|e>>>32-n,ht=(t,e,n)=>e<<n|t>>>32-n,ft=(t,e,n)=>e<<n-32|t>>>64-n,dt=(t,e,n)=>t<<n-32|e>>>64-n;const pt={fromBig:ct,split:lt,toBig:(t,e)=>BigInt(t>>>0)<<at|BigInt(e>>>0),shrSH:(t,e,n)=>t>>>n,shrSL:(t,e,n)=>t<<32-n|e>>>n,rotrSH:(t,e,n)=>t>>>n|e<<32-n,rotrSL:(t,e,n)=>t<<32-n|e>>>n,rotrBH:(t,e,n)=>t<<64-n|e>>>n-32,rotrBL:(t,e,n)=>t>>>n-32|e<<64-n,rotr32H:(t,e)=>e,rotr32L:(t,e)=>t,rotlSH:ut,rotlSL:ht,rotlBH:ft,rotlBL:dt,add:function(t,e,n,r){const s=(e>>>0)+(r>>>0);return{h:t+n+(s/2**32|0)|0,l:0|s}},add3L:(t,e,n)=>(t>>>0)+(e>>>0)+(n>>>0),add3H:(t,e,n,r)=>e+n+r+(t/2**32|0)|0,add4L:(t,e,n,r)=>(t>>>0)+(e>>>0)+(n>>>0)+(r>>>0),add4H:(t,e,n,r,s)=>e+n+r+s+(t/2**32|0)|0,add5H:(t,e,n,r,s,i)=>e+n+r+s+i+(t/2**32|0)|0,add5L:(t,e,n,r,s)=>(t>>>0)+(e>>>0)+(n>>>0)+(r>>>0)+(s>>>0)},gt=\\\"object\\\"==typeof globalThis&&\\\"crypto\\\"in globalThis?globalThis.crypto:void 0,mt=t=>t instanceof Uint8Array,yt=t=>new DataView(t.buffer,t.byteOffset,t.byteLength),wt=(t,e)=>t<<32-e|t>>>e;if(!(68===new Uint8Array(new Uint32Array([287454020]).buffer)[0]))throw new Error(\\\"Non little-endian hardware is not supported\\\");Array.from({length:256},((t,e)=>e.toString(16).padStart(2,\\\"0\\\")));function bt(t){if(\\\"string\\\"==typeof t&&(t=function(t){if(\\\"string\\\"!=typeof t)throw new Error(\\\"utf8ToBytes expected string, got \\\"+typeof t);return new Uint8Array((new TextEncoder).encode(t))}(t)),!mt(t))throw new Error(\\\"expected Uint8Array, got \\\"+typeof t);return t}class At{clone(){return this._cloneInto()}}function vt(t){const e=e=>t().update(bt(e)).digest(),n=t();return e.outputLen=n.outputLen,e.blockLen=n.blockLen,e.create=()=>t(),e}function Et(t=32){if(gt&&\\\"function\\\"==typeof gt.getRandomValues)return gt.getRandomValues(new Uint8Array(t));throw new Error(\\\"crypto.getRandomValues must be defined\\\")}const[kt,Pt,xt]=[[],[],[]],Nt=BigInt(0),Bt=BigInt(1),It=BigInt(2),Ct=BigInt(7),Ot=BigInt(256),Rt=BigInt(113);for(let t=0,e=Bt,n=1,r=0;t<24;t++){[n,r]=[r,(2*n+3*r)%5],kt.push(2*(5*r+n)),Pt.push((t+1)*(t+2)/2%64);let s=Nt;for(let t=0;t<7;t++)e=(e<<Bt^(e>>Ct)*Rt)%Ot,e&It&&(s^=Bt<<(Bt<<BigInt(t))-Bt);xt.push(s)}const[Tt,St]=lt(xt,!0),Ft=(t,e,n)=>n>32?ft(t,e,n):ut(t,e,n),Ut=(t,e,n)=>n>32?dt(t,e,n):ht(t,e,n);class Dt extends At{constructor(t,e,n,r=!1,s=24){if(super(),this.blockLen=t,this.suffix=e,this.outputLen=n,this.enableXOF=r,this.rounds=s,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,et(n),0>=this.blockLen||this.blockLen>=200)throw new Error(\\\"Sha3 supports only keccak-f1600 function\\\");var i;this.state=new Uint8Array(200),this.state32=(i=this.state,new Uint32Array(i.buffer,i.byteOffset,Math.floor(i.byteLength/4)))}keccak(){!function(t,e=24){const n=new Uint32Array(10);for(let r=24-e;r<24;r++){for(let e=0;e<10;e++)n[e]=t[e]^t[e+10]^t[e+20]^t[e+30]^t[e+40];for(let e=0;e<10;e+=2){const r=(e+8)%10,s=(e+2)%10,i=n[s],o=n[s+1],a=Ft(i,o,1)^n[r],c=Ut(i,o,1)^n[r+1];for(let n=0;n<50;n+=10)t[e+n]^=a,t[e+n+1]^=c}let e=t[2],s=t[3];for(let n=0;n<24;n++){const r=Pt[n],i=Ft(e,s,r),o=Ut(e,s,r),a=kt[n];e=t[a],s=t[a+1],t[a]=i,t[a+1]=o}for(let e=0;e<50;e+=10){for(let r=0;r<10;r++)n[r]=t[e+r];for(let r=0;r<10;r++)t[e+r]^=~n[(r+2)%10]&n[(r+4)%10]}t[0]^=Tt[r],t[1]^=St[r]}n.fill(0)}(this.state32,this.rounds),this.posOut=0,this.pos=0}update(t){st(this);const{blockLen:e,state:n}=this,r=(t=bt(t)).length;for(let s=0;s<r;){const i=Math.min(e-this.pos,r-s);for(let e=0;e<i;e++)n[this.pos++]^=t[s++];this.pos===e&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;const{state:t,suffix:e,pos:n,blockLen:r}=this;t[n]^=e,0!=(128&e)&&n===r-1&&this.keccak(),t[r-1]^=128,this.keccak()}writeInto(t){st(this,!1),nt(t),this.finish();const e=this.state,{blockLen:n}=this;for(let r=0,s=t.length;r<s;){this.posOut>=n&&this.keccak();const i=Math.min(n-this.posOut,s-r);t.set(e.subarray(this.posOut,this.posOut+i),r),this.posOut+=i,r+=i}return t}xofInto(t){if(!this.enableXOF)throw new Error(\\\"XOF is not possible for this instance\\\");return this.writeInto(t)}xof(t){return et(t),this.xofInto(new Uint8Array(t))}digestInto(t){if(it(t,this),this.finished)throw new Error(\\\"digest() was already called\\\");return this.writeInto(t),this.destroy(),t}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(t){const{blockLen:e,suffix:n,outputLen:r,rounds:s,enableXOF:i}=this;return t||(t=new Dt(e,n,r,i,s)),t.state32.set(this.state32),t.pos=this.pos,t.posOut=this.posOut,t.finished=this.finished,t.rounds=s,t.suffix=n,t.outputLen=r,t.enableXOF=i,t.destroyed=this.destroyed,t}}const Lt=(t,e,n)=>vt((()=>new Dt(e,t,n))),Mt=Lt(1,136,32);let Gt=!1;const Ht=function(t){return Mt(t)};let Qt=Ht;function jt(t){const e=y(t,\\\"data\\\");return E(Qt(e))}jt._=Ht,jt.lock=function(){Gt=!0},jt.register=function(t){if(Gt)throw new TypeError(\\\"keccak256 is locked\\\");Qt=t},Object.freeze(jt);const Vt=BigInt(0),Jt=BigInt(36);function zt(t){const e=(t=t.toLowerCase()).substring(2).split(\\\"\\\"),n=new Uint8Array(40);for(let t=0;t<40;t++)n[t]=e[t].charCodeAt(0);const r=y(jt(n));for(let t=0;t<40;t+=2)r[t>>1]>>4>=8&&(e[t]=e[t].toUpperCase()),(15&r[t>>1])>=8&&(e[t+1]=e[t+1].toUpperCase());return\\\"0x\\\"+e.join(\\\"\\\")}const Kt={};for(let t=0;t<10;t++)Kt[String(t)]=String(t);for(let t=0;t<26;t++)Kt[String.fromCharCode(65+t)]=String(10+t);const qt=15;function _t(t){let e=(t=(t=t.toUpperCase()).substring(4)+t.substring(0,2)+\\\"00\\\").split(\\\"\\\").map((t=>Kt[t])).join(\\\"\\\");for(;e.length>=qt;){let t=e.substring(0,qt);e=parseInt(t,10)%97+e.substring(t.length)}let n=String(98-parseInt(e,10)%97);for(;n.length<2;)n=\\\"0\\\"+n;return n}const Zt=function(){const t={};for(let e=0;e<36;e++){t[\\\"0123456789abcdefghijklmnopqrstuvwxyz\\\"[e]]=BigInt(e)}return t}();function Wt(t){if(f(\\\"string\\\"==typeof t,\\\"invalid address\\\",\\\"address\\\",t),t.match(/^(0x)?[0-9a-fA-F]{40}$/)){t.startsWith(\\\"0x\\\")||(t=\\\"0x\\\"+t);const e=zt(t);return f(!t.match(/([A-F].*[a-f])|([a-f].*[A-F])/)||e===t,\\\"bad address checksum\\\",\\\"address\\\",t),e}if(t.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){f(t.substring(2,4)===_t(t),\\\"bad icap checksum\\\",\\\"address\\\",t);let e=function(t){t=t.toLowerCase();let e=Vt;for(let n=0;n<t.length;n++)e=e*Jt+Zt[t[n]];return e}(t.substring(4)).toString(16);for(;e.length<40;)e=\\\"0\\\"+e;return zt(\\\"0x\\\"+e)}f(!1,\\\"invalid address\\\",\\\"address\\\",t)}const Yt={};function Xt(t,e){let n=!1;return e<0&&(n=!0,e*=-1),new ee(Yt,`${n?\\\"\\\":\\\"u\\\"}int${e}`,t,{signed:n,width:e})}function $t(t,e){return new ee(Yt,`bytes${e||\\\"\\\"}`,t,{size:e})}const te=Symbol.for(\\\"_ethers_typed\\\");class ee{type;value;#u;_typedSymbol;constructor(t,e,n,r){null==r&&(r=null),g(Yt,t,\\\"Typed\\\"),o(this,{_typedSymbol:te,type:e,value:n}),this.#u=r,this.format()}format(){if(\\\"array\\\"===this.type)throw new Error(\\\"\\\");if(\\\"dynamicArray\\\"===this.type)throw new Error(\\\"\\\");return\\\"tuple\\\"===this.type?`tuple(${this.value.map((t=>t.format())).join(\\\",\\\")})`:this.type}defaultValue(){return 0}minValue(){return 0}maxValue(){return 0}isBigInt(){return!!this.type.match(/^u?int[0-9]+$/)}isData(){return this.type.startsWith(\\\"bytes\\\")}isString(){return\\\"string\\\"===this.type}get tupleName(){if(\\\"tuple\\\"!==this.type)throw TypeError(\\\"not a tuple\\\");return this.#u}get arrayLength(){if(\\\"array\\\"!==this.type)throw TypeError(\\\"not an array\\\");return!0===this.#u?-1:!1===this.#u?this.value.length:null}static from(t,e){return new ee(Yt,t,e)}static uint8(t){return Xt(t,8)}static uint16(t){return Xt(t,16)}static uint24(t){return Xt(t,24)}static uint32(t){return Xt(t,32)}static uint40(t){return Xt(t,40)}static uint48(t){return Xt(t,48)}static uint56(t){return Xt(t,56)}static uint64(t){return Xt(t,64)}static uint72(t){return Xt(t,72)}static uint80(t){return Xt(t,80)}static uint88(t){return Xt(t,88)}static uint96(t){return Xt(t,96)}static uint104(t){return Xt(t,104)}static uint112(t){return Xt(t,112)}static uint120(t){return Xt(t,120)}static uint128(t){return Xt(t,128)}static uint136(t){return Xt(t,136)}static uint144(t){return Xt(t,144)}static uint152(t){return Xt(t,152)}static uint160(t){return Xt(t,160)}static uint168(t){return Xt(t,168)}static uint176(t){return Xt(t,176)}static uint184(t){return Xt(t,184)}static uint192(t){return Xt(t,192)}static uint200(t){return Xt(t,200)}static uint208(t){return Xt(t,208)}static uint216(t){return Xt(t,216)}static uint224(t){return Xt(t,224)}static uint232(t){return Xt(t,232)}static uint240(t){return Xt(t,240)}static uint248(t){return Xt(t,248)}static uint256(t){return Xt(t,256)}static uint(t){return Xt(t,256)}static int8(t){return Xt(t,-8)}static int16(t){return Xt(t,-16)}static int24(t){return Xt(t,-24)}static int32(t){return Xt(t,-32)}static int40(t){return Xt(t,-40)}static int48(t){return Xt(t,-48)}static int56(t){return Xt(t,-56)}static int64(t){return Xt(t,-64)}static int72(t){return Xt(t,-72)}static int80(t){return Xt(t,-80)}static int88(t){return Xt(t,-88)}static int96(t){return Xt(t,-96)}static int104(t){return Xt(t,-104)}static int112(t){return Xt(t,-112)}static int120(t){return Xt(t,-120)}static int128(t){return Xt(t,-128)}static int136(t){return Xt(t,-136)}static int144(t){return Xt(t,-144)}static int152(t){return Xt(t,-152)}static int160(t){return Xt(t,-160)}static int168(t){return Xt(t,-168)}static int176(t){return Xt(t,-176)}static int184(t){return Xt(t,-184)}static int192(t){return Xt(t,-192)}static int200(t){return Xt(t,-200)}static int208(t){return Xt(t,-208)}static int216(t){return Xt(t,-216)}static int224(t){return Xt(t,-224)}static int232(t){return Xt(t,-232)}static int240(t){return Xt(t,-240)}static int248(t){return Xt(t,-248)}static int256(t){return Xt(t,-256)}static int(t){return Xt(t,-256)}static bytes1(t){return $t(t,1)}static bytes2(t){return $t(t,2)}static bytes3(t){return $t(t,3)}static bytes4(t){return $t(t,4)}static bytes5(t){return $t(t,5)}static bytes6(t){return $t(t,6)}static bytes7(t){return $t(t,7)}static bytes8(t){return $t(t,8)}static bytes9(t){return $t(t,9)}static bytes10(t){return $t(t,10)}static bytes11(t){return $t(t,11)}static bytes12(t){return $t(t,12)}static bytes13(t){return $t(t,13)}static bytes14(t){return $t(t,14)}static bytes15(t){return $t(t,15)}static bytes16(t){return $t(t,16)}static bytes17(t){return $t(t,17)}static bytes18(t){return $t(t,18)}static bytes19(t){return $t(t,19)}static bytes20(t){return $t(t,20)}static bytes21(t){return $t(t,21)}static bytes22(t){return $t(t,22)}static bytes23(t){return $t(t,23)}static bytes24(t){return $t(t,24)}static bytes25(t){return $t(t,25)}static bytes26(t){return $t(t,26)}static bytes27(t){return $t(t,27)}static bytes28(t){return $t(t,28)}static bytes29(t){return $t(t,29)}static bytes30(t){return $t(t,30)}static bytes31(t){return $t(t,31)}static bytes32(t){return $t(t,32)}static address(t){return new ee(Yt,\\\"address\\\",t)}static bool(t){return new ee(Yt,\\\"bool\\\",!!t)}static bytes(t){return new ee(Yt,\\\"bytes\\\",t)}static string(t){return new ee(Yt,\\\"string\\\",t)}static array(t,e){throw new Error(\\\"not implemented yet\\\")}static tuple(t,e){throw new Error(\\\"not implemented yet\\\")}static overrides(t){return new ee(Yt,\\\"overrides\\\",Object.assign({},t))}static isTyped(t){return t&&\\\"object\\\"==typeof t&&\\\"_typedSymbol\\\"in t&&t._typedSymbol===te}static dereference(t,e){if(ee.isTyped(t)){if(t.type!==e)throw new Error(`invalid type: expecetd ${e}, got ${t.type}`);return t.value}return t}}class ne extends X{constructor(t){super(\\\"address\\\",\\\"address\\\",t,!1)}defaultValue(){return\\\"0x0000000000000000000000000000000000000000\\\"}encode(t,e){let n=ee.dereference(e,\\\"string\\\");try{n=Wt(n)}catch(t){return this._throwError(t.message,e)}return t.writeValue(n)}decode(t){return Wt(M(t.readValue(),20))}}class re extends X{coder;constructor(t){super(t.name,t.type,\\\"_\\\",t.dynamic),this.coder=t}defaultValue(){return this.coder.defaultValue()}encode(t,e){return this.coder.encode(t,e)}decode(t){return this.coder.decode(t)}}function se(t,e,n){let r=[];if(Array.isArray(n))r=n;else if(n&&\\\"object\\\"==typeof n){let t={};r=e.map((e=>{const r=e.localName;return h(r,\\\"cannot encode object for signature with missing names\\\",\\\"INVALID_ARGUMENT\\\",{argument:\\\"values\\\",info:{coder:e},value:n}),h(!t[r],\\\"cannot encode object for signature with duplicate names\\\",\\\"INVALID_ARGUMENT\\\",{argument:\\\"values\\\",info:{coder:e},value:n}),t[r]=!0,n[r]}))}else f(!1,\\\"invalid tuple value\\\",\\\"tuple\\\",n);f(e.length===r.length,\\\"types/value length mismatch\\\",\\\"tuple\\\",n);let s=new $,i=new $,o=[];e.forEach(((t,e)=>{let n=r[e];if(t.dynamic){let e=i.length;t.encode(i,n);let r=s.writeUpdatableValue();o.push((t=>{r(t+e)}))}else t.encode(s,n)})),o.forEach((t=>{t(s.length)}));let a=t.appendWriter(s);return a+=t.appendWriter(i),a}function ie(t,e){let n=[],r=[],s=t.subReader(0);return e.forEach((e=>{let i=null;if(e.dynamic){let n=t.readIndex(),r=s.subReader(n);try{i=e.decode(r)}catch(t){if(c(t,\\\"BUFFER_OVERRUN\\\"))throw t;i=t,i.baseType=e.name,i.name=e.localName,i.type=e.type}}else try{i=e.decode(t)}catch(t){if(c(t,\\\"BUFFER_OVERRUN\\\"))throw t;i=t,i.baseType=e.name,i.name=e.localName,i.type=e.type}if(null==i)throw new Error(\\\"investigate\\\");n.push(i),r.push(e.localName||null)})),W.fromItems(n,r)}class oe extends X{coder;length;constructor(t,e,n){super(\\\"array\\\",t.type+\\\"[\\\"+(e>=0?e:\\\"\\\")+\\\"]\\\",n,-1===e||t.dynamic),o(this,{coder:t,length:e})}defaultValue(){const t=this.coder.defaultValue(),e=[];for(let n=0;n<this.length;n++)e.push(t);return e}encode(t,e){const n=ee.dereference(e,\\\"array\\\");Array.isArray(n)||this._throwError(\\\"expected array value\\\",n);let r=this.length;-1===r&&(r=n.length,t.writeValue(n.length)),d(n.length,r,\\\"coder array\\\"+(this.localName?\\\" \\\"+this.localName:\\\"\\\"));let s=[];for(let t=0;t<n.length;t++)s.push(this.coder);return se(t,s,n)}decode(t){let e=this.length;-1===e&&(e=t.readIndex(),h(e*Q<=t.dataLength,\\\"insufficient data length\\\",\\\"BUFFER_OVERRUN\\\",{buffer:t.bytes,offset:e*Q,length:t.dataLength}));let n=[];for(let t=0;t<e;t++)n.push(new re(this.coder));return ie(t,n)}}class ae extends X{constructor(t){super(\\\"bool\\\",\\\"bool\\\",t,!1)}defaultValue(){return!1}encode(t,e){const n=ee.dereference(e,\\\"bool\\\");return t.writeValue(n?1:0)}decode(t){return!!t.readValue()}}class ce extends X{constructor(t,e){super(t,t,e,!0)}defaultValue(){return\\\"0x\\\"}encode(t,e){e=w(e);let n=t.writeValue(e.length);return n+=t.writeBytes(e),n}decode(t){return t.readBytes(t.readIndex(),!0)}}class le extends ce{constructor(t){super(\\\"bytes\\\",t)}decode(t){return E(super.decode(t))}}class ue extends X{size;constructor(t,e){let n=\\\"bytes\\\"+String(t);super(n,n,e,!1),o(this,{size:t},{size:\\\"number\\\"})}defaultValue(){return\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\".substring(0,2+2*this.size)}encode(t,e){let n=w(ee.dereference(e,this.type));return n.length!==this.size&&this._throwError(\\\"incorrect data length\\\",e),t.writeBytes(n)}decode(t){return E(t.readBytes(this.size))}}const he=new Uint8Array([]);class fe extends X{constructor(t){super(\\\"null\\\",\\\"\\\",t,!1)}defaultValue(){return null}encode(t,e){return null!=e&&this._throwError(\\\"not null\\\",e),t.writeBytes(he)}decode(t){return t.readBytes(0),null}}const de=BigInt(0),pe=BigInt(1),ge=BigInt(\\\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\");class me extends X{size;signed;constructor(t,e,n){const r=(e?\\\"int\\\":\\\"uint\\\")+8*t;super(r,r,n,!1),o(this,{size:t,signed:e},{size:\\\"number\\\",signed:\\\"boolean\\\"})}defaultValue(){return 0}encode(t,e){let n=S(ee.dereference(e,this.type)),r=T(ge,256);if(this.signed){let t=T(r,8*this.size-1);(n>t||n<-(t+pe))&&this._throwError(\\\"value out-of-bounds\\\",e),n=R(n,256)}else(n<de||n>T(r,8*this.size))&&this._throwError(\\\"value out-of-bounds\\\",e);return t.writeValue(n)}decode(t){let e=T(t.readValue(),8*this.size);return this.signed&&(e=function(t,e){const n=F(t,\\\"value\\\"),r=BigInt(L(e,\\\"width\\\"));if(h(n>>r===I,\\\"overflow\\\",\\\"NUMERIC_FAULT\\\",{operation:\\\"fromTwos\\\",fault:\\\"overflow\\\",value:t}),n>>r-C)return-((~n&(C<<r)-C)+C);return n}(e,8*this.size)),e}}function ye(t,e,n,r,s){if(\\\"BAD_PREFIX\\\"===t||\\\"UNEXPECTED_CONTINUE\\\"===t){let t=0;for(let r=e+1;r<n.length&&n[r]>>6==2;r++)t++;return t}return\\\"OVERRUN\\\"===t?n.length-e-1:0}const we=Object.freeze({error:function(t,e,n,r,s){f(!1,`invalid codepoint at offset ${e}; ${t}`,\\\"bytes\\\",n)},ignore:ye,replace:function(t,e,n,r,s){return\\\"OVERLONG\\\"===t?(f(\\\"number\\\"==typeof s,\\\"invalid bad code point for replacement\\\",\\\"badCodepoint\\\",s),r.push(s),0):(r.push(65533),ye(t,e,n))}});function be(t,e){null==e&&(e=we.error);const n=y(t,\\\"bytes\\\"),r=[];let s=0;for(;s<n.length;){const t=n[s++];if(t>>7==0){r.push(t);continue}let i=null,o=null;if(192==(224&t))i=1,o=127;else if(224==(240&t))i=2,o=2047;else{if(240!=(248&t)){s+=e(128==(192&t)?\\\"UNEXPECTED_CONTINUE\\\":\\\"BAD_PREFIX\\\",s-1,n,r);continue}i=3,o=65535}if(s-1+i>=n.length){s+=e(\\\"OVERRUN\\\",s-1,n,r);continue}let a=t&(1<<8-i-1)-1;for(let t=0;t<i;t++){let t=n[s];if(128!=(192&t)){s+=e(\\\"MISSING_CONTINUE\\\",s,n,r),a=null;break}a=a<<6|63&t,s++}null!==a&&(a>1114111?s+=e(\\\"OUT_OF_RANGE\\\",s-1-i,n,r,a):a>=55296&&a<=57343?s+=e(\\\"UTF16_SURROGATE\\\",s-1-i,n,r,a):a<=o?s+=e(\\\"OVERLONG\\\",s-1-i,n,r,a):r.push(a))}return r}function Ae(t,e){f(\\\"string\\\"==typeof t,\\\"invalid string value\\\",\\\"str\\\",t),null!=e&&(!function(t){h(p.indexOf(t)>=0,\\\"platform missing String.prototype.normalize\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"String.prototype.normalize\\\",info:{form:t}})}(e),t=t.normalize(e));let n=[];for(let e=0;e<t.length;e++){const r=t.charCodeAt(e);if(r<128)n.push(r);else if(r<2048)n.push(r>>6|192),n.push(63&r|128);else if(55296==(64512&r)){e++;const s=t.charCodeAt(e);f(e<t.length&&56320==(64512&s),\\\"invalid surrogate pair\\\",\\\"str\\\",t);const i=65536+((1023&r)<<10)+(1023&s);n.push(i>>18|240),n.push(i>>12&63|128),n.push(i>>6&63|128),n.push(63&i|128)}else n.push(r>>12|224),n.push(r>>6&63|128),n.push(63&r|128)}return new Uint8Array(n)}function ve(t,e){return be(t,e).map((t=>t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10&1023),56320+(1023&t))))).join(\\\"\\\")}class Ee extends ce{constructor(t){super(\\\"string\\\",t)}defaultValue(){return\\\"\\\"}encode(t,e){return super.encode(t,Ae(ee.dereference(e,\\\"string\\\")))}decode(t){return ve(super.decode(t))}}class ke extends X{coders;constructor(t,e){let n=!1;const r=[];t.forEach((t=>{t.dynamic&&(n=!0),r.push(t.type)}));super(\\\"tuple\\\",\\\"tuple(\\\"+r.join(\\\",\\\")+\\\")\\\",e,n),o(this,{coders:Object.freeze(t.slice())})}defaultValue(){const t=[];this.coders.forEach((e=>{t.push(e.defaultValue())}));const e=this.coders.reduce(((t,e)=>{const n=e.localName;return n&&(t[n]||(t[n]=0),t[n]++),t}),{});return this.coders.forEach(((n,r)=>{let s=n.localName;s&&1===e[s]&&(\\\"length\\\"===s&&(s=\\\"_length\\\"),null==t[s]&&(t[s]=t[r]))})),Object.freeze(t)}encode(t,e){const n=ee.dereference(e,\\\"tuple\\\");return se(t,this.coders,n)}decode(t){return ie(t,this.coders)}}function Pe(t){return jt(Ae(t))}function xe(t){const e=new Set;return t.forEach((t=>e.add(t))),Object.freeze(e)}const Ne=xe(\\\"external public payable override\\\".split(\\\" \\\")),Be=\\\"constant external internal payable private public pure view override\\\",Ie=xe(Be.split(\\\" \\\")),Ce=\\\"constructor error event fallback function receive struct\\\",Oe=xe(Ce.split(\\\" \\\")),Re=\\\"calldata memory storage payable indexed\\\",Te=xe(Re.split(\\\" \\\")),Se=xe([Ce,Re,\\\"tuple returns\\\",Be].join(\\\" \\\").split(\\\" \\\")),Fe={\\\"(\\\":\\\"OPEN_PAREN\\\",\\\")\\\":\\\"CLOSE_PAREN\\\",\\\"[\\\":\\\"OPEN_BRACKET\\\",\\\"]\\\":\\\"CLOSE_BRACKET\\\",\\\",\\\":\\\"COMMA\\\",\\\"@\\\":\\\"AT\\\"},Ue=new RegExp(\\\"^(\\\\\\\\s*)\\\"),De=new RegExp(\\\"^([0-9]+)\\\"),Le=new RegExp(\\\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\\\"),Me=new RegExp(\\\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\\\"),Ge=new RegExp(\\\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\\\");class He{#s;#h;get offset(){return this.#s}get length(){return this.#h.length-this.#s}constructor(t){this.#s=0,this.#h=t.slice()}clone(){return new He(this.#h)}reset(){this.#s=0}#f(t=0,e=0){return new He(this.#h.slice(t,e).map((e=>Object.freeze(Object.assign({},e,{match:e.match-t,linkBack:e.linkBack-t,linkNext:e.linkNext-t})))))}popKeyword(t){const e=this.peek();if(\\\"KEYWORD\\\"!==e.type||!t.has(e.text))throw new Error(`expected keyword ${e.text}`);return this.pop().text}popType(t){if(this.peek().type!==t){const e=this.peek();throw new Error(`expected ${t}; got ${e.type} ${JSON.stringify(e.text)}`)}return this.pop().text}popParen(){const t=this.peek();if(\\\"OPEN_PAREN\\\"!==t.type)throw new Error(\\\"bad start\\\");const e=this.#f(this.#s+1,t.match+1);return this.#s=t.match+1,e}popParams(){const t=this.peek();if(\\\"OPEN_PAREN\\\"!==t.type)throw new Error(\\\"bad start\\\");const e=[];for(;this.#s<t.match-1;){const t=this.peek().linkNext;e.push(this.#f(this.#s+1,t)),this.#s=t}return this.#s=t.match+1,e}peek(){if(this.#s>=this.#h.length)throw new Error(\\\"out-of-bounds\\\");return this.#h[this.#s]}peekKeyword(t){const e=this.peekType(\\\"KEYWORD\\\");return null!=e&&t.has(e)?e:null}peekType(t){if(0===this.length)return null;const e=this.peek();return e.type===t?e.text:null}pop(){const t=this.peek();return this.#s++,t}toString(){const t=[];for(let e=this.#s;e<this.#h.length;e++){const n=this.#h[e];t.push(`${n.type}:${n.text}`)}return`<TokenString ${t.join(\\\" \\\")}>`}}function Qe(t){const e=[],n=e=>{const n=i<t.length?JSON.stringify(t[i]):\\\"$EOI\\\";throw new Error(`invalid token ${n} at ${i}: ${e}`)};let r=[],s=[],i=0;for(;i<t.length;){let o=t.substring(i),a=o.match(Ue);a&&(i+=a[1].length,o=t.substring(i));const c={depth:r.length,linkBack:-1,linkNext:-1,match:-1,type:\\\"\\\",text:\\\"\\\",offset:i,value:-1};e.push(c);let l=Fe[o[0]]||\\\"\\\";if(l){if(c.type=l,c.text=o[0],i++,\\\"OPEN_PAREN\\\"===l)r.push(e.length-1),s.push(e.length-1);else if(\\\"CLOSE_PAREN\\\"==l)0===r.length&&n(\\\"no matching open bracket\\\"),c.match=r.pop(),e[c.match].match=e.length-1,c.depth--,c.linkBack=s.pop(),e[c.linkBack].linkNext=e.length-1;else if(\\\"COMMA\\\"===l)c.linkBack=s.pop(),e[c.linkBack].linkNext=e.length-1,s.push(e.length-1);else if(\\\"OPEN_BRACKET\\\"===l)c.type=\\\"BRACKET\\\";else if(\\\"CLOSE_BRACKET\\\"===l){let t=e.pop().text;if(e.length>0&&\\\"NUMBER\\\"===e[e.length-1].type){const n=e.pop().text;t=n+t,e[e.length-1].value=L(n)}if(0===e.length||\\\"BRACKET\\\"!==e[e.length-1].type)throw new Error(\\\"missing opening bracket\\\");e[e.length-1].text+=t}}else if(a=o.match(Le),a){if(c.text=a[1],i+=c.text.length,Se.has(c.text)){c.type=\\\"KEYWORD\\\";continue}if(c.text.match(Ge)){c.type=\\\"TYPE\\\";continue}c.type=\\\"ID\\\"}else{if(a=o.match(De),!a)throw new Error(`unexpected token ${JSON.stringify(o[0])} at position ${i}`);c.text=a[1],c.type=\\\"NUMBER\\\",i+=c.text.length}}return new He(e.map((t=>Object.freeze(t))))}function je(t,e){let n=[];for(const r in e.keys())t.has(r)&&n.push(r);if(n.length>1)throw new Error(`conflicting types: ${n.join(\\\", \\\")}`)}function Ve(t,e){if(e.peekKeyword(Oe)){const n=e.pop().text;if(n!==t)throw new Error(`expected ${t}, got ${n}`)}return e.popType(\\\"ID\\\")}function Je(t,e){const n=new Set;for(;;){const r=t.peekType(\\\"KEYWORD\\\");if(null==r||e&&!e.has(r))break;if(t.pop(),n.has(r))throw new Error(`duplicate keywords: ${JSON.stringify(r)}`);n.add(r)}return Object.freeze(n)}function ze(t){let e=Je(t,Ie);return je(e,xe(\\\"constant payable nonpayable\\\".split(\\\" \\\"))),je(e,xe(\\\"pure view payable nonpayable\\\".split(\\\" \\\"))),e.has(\\\"view\\\")?\\\"view\\\":e.has(\\\"pure\\\")?\\\"pure\\\":e.has(\\\"payable\\\")?\\\"payable\\\":e.has(\\\"nonpayable\\\")?\\\"nonpayable\\\":e.has(\\\"constant\\\")?\\\"view\\\":\\\"nonpayable\\\"}function Ke(t,e){return t.popParams().map((t=>an.from(t,e)))}function qe(t){if(t.peekType(\\\"AT\\\")){if(t.pop(),t.peekType(\\\"NUMBER\\\"))return S(t.pop().text);throw new Error(\\\"invalid gas\\\")}return null}function _e(t){if(t.length)throw new Error(`unexpected tokens at offset ${t.offset}: ${t.toString()}`)}const Ze=new RegExp(/^(.*)\\\\[([0-9]*)\\\\]$/);function We(t){const e=t.match(Ge);if(f(e,\\\"invalid type\\\",\\\"type\\\",t),\\\"uint\\\"===t)return\\\"uint256\\\";if(\\\"int\\\"===t)return\\\"int256\\\";if(e[2]){const n=parseInt(e[2]);f(0!==n&&n<=32,\\\"invalid bytes length\\\",\\\"type\\\",t)}else if(e[3]){const n=parseInt(e[3]);f(0!==n&&n<=256&&n%8==0,\\\"invalid numeric width\\\",\\\"type\\\",t)}return t}const Ye={},Xe=Symbol.for(\\\"_ethers_internal\\\"),$e=\\\"_ParamTypeInternal\\\",tn=\\\"_ErrorInternal\\\",en=\\\"_EventInternal\\\",nn=\\\"_ConstructorInternal\\\",rn=\\\"_FallbackInternal\\\",sn=\\\"_FunctionInternal\\\",on=\\\"_StructInternal\\\";class an{name;type;baseType;indexed;components;arrayLength;arrayChildren;constructor(t,e,n,r,s,i,a,c){if(g(t,Ye,\\\"ParamType\\\"),Object.defineProperty(this,Xe,{value:$e}),i&&(i=Object.freeze(i.slice())),\\\"array\\\"===r){if(null==a||null==c)throw new Error(\\\"\\\")}else if(null!=a||null!=c)throw new Error(\\\"\\\");if(\\\"tuple\\\"===r){if(null==i)throw new Error(\\\"\\\")}else if(null!=i)throw new Error(\\\"\\\");o(this,{name:e,type:n,baseType:r,indexed:s,components:i,arrayLength:a,arrayChildren:c})}format(t){if(null==t&&(t=\\\"sighash\\\"),\\\"json\\\"===t){const e=this.name||\\\"\\\";if(this.isArray()){const t=JSON.parse(this.arrayChildren.format(\\\"json\\\"));return t.name=e,t.type+=`[${this.arrayLength<0?\\\"\\\":String(this.arrayLength)}]`,JSON.stringify(t)}const n={type:\\\"tuple\\\"===this.baseType?\\\"tuple\\\":this.type,name:e};return\\\"boolean\\\"==typeof this.indexed&&(n.indexed=this.indexed),this.isTuple()&&(n.components=this.components.map((e=>JSON.parse(e.format(t))))),JSON.stringify(n)}let e=\\\"\\\";return this.isArray()?(e+=this.arrayChildren.format(t),e+=`[${this.arrayLength<0?\\\"\\\":String(this.arrayLength)}]`):this.isTuple()?e+=\\\"(\\\"+this.components.map((e=>e.format(t))).join(\\\"full\\\"===t?\\\", \\\":\\\",\\\")+\\\")\\\":e+=this.type,\\\"sighash\\\"!==t&&(!0===this.indexed&&(e+=\\\" indexed\\\"),\\\"full\\\"===t&&this.name&&(e+=\\\" \\\"+this.name)),e}isArray(){return\\\"array\\\"===this.baseType}isTuple(){return\\\"tuple\\\"===this.baseType}isIndexable(){return null!=this.indexed}walk(t,e){if(this.isArray()){if(!Array.isArray(t))throw new Error(\\\"invalid array value\\\");if(-1!==this.arrayLength&&t.length!==this.arrayLength)throw new Error(\\\"array is wrong length\\\");const n=this;return t.map((t=>n.arrayChildren.walk(t,e)))}if(this.isTuple()){if(!Array.isArray(t))throw new Error(\\\"invalid tuple value\\\");if(t.length!==this.components.length)throw new Error(\\\"array is wrong length\\\");const n=this;return t.map(((t,r)=>n.components[r].walk(t,e)))}return e(this.type,t)}#d(t,e,n,r){if(this.isArray()){if(!Array.isArray(e))throw new Error(\\\"invalid array value\\\");if(-1!==this.arrayLength&&e.length!==this.arrayLength)throw new Error(\\\"array is wrong length\\\");const s=this.arrayChildren,i=e.slice();return i.forEach(((e,r)=>{s.#d(t,e,n,(t=>{i[r]=t}))})),void r(i)}if(this.isTuple()){const s=this.components;let i;if(Array.isArray(e))i=e.slice();else{if(null==e||\\\"object\\\"!=typeof e)throw new Error(\\\"invalid tuple value\\\");i=s.map((t=>{if(!t.name)throw new Error(\\\"cannot use object value with unnamed components\\\");if(!(t.name in e))throw new Error(`missing value for component ${t.name}`);return e[t.name]}))}if(i.length!==this.components.length)throw new Error(\\\"array is wrong length\\\");return i.forEach(((e,r)=>{s[r].#d(t,e,n,(t=>{i[r]=t}))})),void r(i)}const s=n(this.type,e);s.then?t.push(async function(){r(await s)}()):r(s)}async walkAsync(t,e){const n=[],r=[t];return this.#d(n,t,e,(t=>{r[0]=t})),n.length&&await Promise.all(n),r[0]}static from(t,e){if(an.isParamType(t))return t;if(\\\"string\\\"==typeof t)try{return an.from(Qe(t),e)}catch(e){f(!1,\\\"invalid param type\\\",\\\"obj\\\",t)}else if(t instanceof He){let n=\\\"\\\",r=\\\"\\\",s=null;Je(t,xe([\\\"tuple\\\"])).has(\\\"tuple\\\")||t.peekType(\\\"OPEN_PAREN\\\")?(r=\\\"tuple\\\",s=t.popParams().map((t=>an.from(t))),n=`tuple(${s.map((t=>t.format())).join(\\\",\\\")})`):(n=We(t.popType(\\\"TYPE\\\")),r=n);let i=null,o=null;for(;t.length&&t.peekType(\\\"BRACKET\\\");){const e=t.pop();i=new an(Ye,\\\"\\\",n,r,null,s,o,i),o=e.value,n+=e.text,r=\\\"array\\\",s=null}let a=null;if(Je(t,Te).has(\\\"indexed\\\")){if(!e)throw new Error(\\\"\\\");a=!0}const c=t.peekType(\\\"ID\\\")?t.pop().text:\\\"\\\";if(t.length)throw new Error(\\\"leftover tokens\\\");return new an(Ye,c,n,r,a,s,o,i)}const n=t.name;f(!n||\\\"string\\\"==typeof n&&n.match(Me),\\\"invalid name\\\",\\\"obj.name\\\",n);let r=t.indexed;null!=r&&(f(e,\\\"parameter cannot be indexed\\\",\\\"obj.indexed\\\",t.indexed),r=!!r);let s=t.type,i=s.match(Ze);if(i){const e=parseInt(i[2]||\\\"-1\\\"),o=an.from({type:i[1],components:t.components});return new an(Ye,n||\\\"\\\",s,\\\"array\\\",r,null,e,o)}if(\\\"tuple\\\"===s||s.startsWith(\\\"tuple(\\\")||s.startsWith(\\\"(\\\")){const e=null!=t.components?t.components.map((t=>an.from(t))):null;return new an(Ye,n||\\\"\\\",s,\\\"tuple\\\",r,e,null,null)}return s=We(t.type),new an(Ye,n||\\\"\\\",s,s,r,null,null,null)}static isParamType(t){return t&&t[Xe]===$e}}class cn{type;inputs;constructor(t,e,n){g(t,Ye,\\\"Fragment\\\"),o(this,{type:e,inputs:n=Object.freeze(n.slice())})}static from(t){if(\\\"string\\\"==typeof t){try{cn.from(JSON.parse(t))}catch(t){}return cn.from(Qe(t))}if(t instanceof He){switch(t.peekKeyword(Oe)){case\\\"constructor\\\":return dn.from(t);case\\\"error\\\":return hn.from(t);case\\\"event\\\":return fn.from(t);case\\\"fallback\\\":case\\\"receive\\\":return pn.from(t);case\\\"function\\\":return gn.from(t);case\\\"struct\\\":return mn.from(t)}}else if(\\\"object\\\"==typeof t){switch(t.type){case\\\"constructor\\\":return dn.from(t);case\\\"error\\\":return hn.from(t);case\\\"event\\\":return fn.from(t);case\\\"fallback\\\":case\\\"receive\\\":return pn.from(t);case\\\"function\\\":return gn.from(t);case\\\"struct\\\":return mn.from(t)}h(!1,`unsupported type: ${t.type}`,\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"Fragment.from\\\"})}f(!1,\\\"unsupported frgament object\\\",\\\"obj\\\",t)}static isConstructor(t){return dn.isFragment(t)}static isError(t){return hn.isFragment(t)}static isEvent(t){return fn.isFragment(t)}static isFunction(t){return gn.isFragment(t)}static isStruct(t){return mn.isFragment(t)}}class ln extends cn{name;constructor(t,e,n,r){super(t,e,r),f(\\\"string\\\"==typeof n&&n.match(Me),\\\"invalid identifier\\\",\\\"name\\\",n),r=Object.freeze(r.slice()),o(this,{name:n})}}function un(t,e){return\\\"(\\\"+e.map((e=>e.format(t))).join(\\\"full\\\"===t?\\\", \\\":\\\",\\\")+\\\")\\\"}class hn extends ln{constructor(t,e,n){super(t,\\\"error\\\",e,n),Object.defineProperty(this,Xe,{value:tn})}get selector(){return Pe(this.format(\\\"sighash\\\")).substring(0,10)}format(t){if(null==t&&(t=\\\"sighash\\\"),\\\"json\\\"===t)return JSON.stringify({type:\\\"error\\\",name:this.name,inputs:this.inputs.map((e=>JSON.parse(e.format(t))))});const e=[];return\\\"sighash\\\"!==t&&e.push(\\\"error\\\"),e.push(this.name+un(t,this.inputs)),e.join(\\\" \\\")}static from(t){if(hn.isFragment(t))return t;if(\\\"string\\\"==typeof t)return hn.from(Qe(t));if(t instanceof He){const e=Ve(\\\"error\\\",t),n=Ke(t);return _e(t),new hn(Ye,e,n)}return new hn(Ye,t.name,t.inputs?t.inputs.map(an.from):[])}static isFragment(t){return t&&t[Xe]===tn}}class fn extends ln{anonymous;constructor(t,e,n,r){super(t,\\\"event\\\",e,n),Object.defineProperty(this,Xe,{value:en}),o(this,{anonymous:r})}get topicHash(){return Pe(this.format(\\\"sighash\\\"))}format(t){if(null==t&&(t=\\\"sighash\\\"),\\\"json\\\"===t)return JSON.stringify({type:\\\"event\\\",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map((e=>JSON.parse(e.format(t))))});const e=[];return\\\"sighash\\\"!==t&&e.push(\\\"event\\\"),e.push(this.name+un(t,this.inputs)),\\\"sighash\\\"!==t&&this.anonymous&&e.push(\\\"anonymous\\\"),e.join(\\\" \\\")}static getTopicHash(t,e){e=(e||[]).map((t=>an.from(t)));return new fn(Ye,t,e,!1).topicHash}static from(t){if(fn.isFragment(t))return t;if(\\\"string\\\"==typeof t)try{return fn.from(Qe(t))}catch(e){f(!1,\\\"invalid event fragment\\\",\\\"obj\\\",t)}else if(t instanceof He){const e=Ve(\\\"event\\\",t),n=Ke(t,!0),r=!!Je(t,xe([\\\"anonymous\\\"])).has(\\\"anonymous\\\");return _e(t),new fn(Ye,e,n,r)}return new fn(Ye,t.name,t.inputs?t.inputs.map((t=>an.from(t,!0))):[],!!t.anonymous)}static isFragment(t){return t&&t[Xe]===en}}class dn extends cn{payable;gas;constructor(t,e,n,r,s){super(t,e,n),Object.defineProperty(this,Xe,{value:nn}),o(this,{payable:r,gas:s})}format(t){if(h(null!=t&&\\\"sighash\\\"!==t,\\\"cannot format a constructor for sighash\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"format(sighash)\\\"}),\\\"json\\\"===t)return JSON.stringify({type:\\\"constructor\\\",stateMutability:this.payable?\\\"payable\\\":\\\"undefined\\\",payable:this.payable,gas:null!=this.gas?this.gas:void 0,inputs:this.inputs.map((e=>JSON.parse(e.format(t))))});const e=[`constructor${un(t,this.inputs)}`];return this.payable&&e.push(\\\"payable\\\"),null!=this.gas&&e.push(`@${this.gas.toString()}`),e.join(\\\" \\\")}static from(t){if(dn.isFragment(t))return t;if(\\\"string\\\"==typeof t)try{return dn.from(Qe(t))}catch(e){f(!1,\\\"invalid constuctor fragment\\\",\\\"obj\\\",t)}else if(t instanceof He){Je(t,xe([\\\"constructor\\\"]));const e=Ke(t),n=!!Je(t,Ne).has(\\\"payable\\\"),r=qe(t);return _e(t),new dn(Ye,\\\"constructor\\\",e,n,r)}return new dn(Ye,\\\"constructor\\\",t.inputs?t.inputs.map(an.from):[],!!t.payable,null!=t.gas?t.gas:null)}static isFragment(t){return t&&t[Xe]===nn}}class pn extends cn{payable;constructor(t,e,n){super(t,\\\"fallback\\\",e),Object.defineProperty(this,Xe,{value:rn}),o(this,{payable:n})}format(t){const e=0===this.inputs.length?\\\"receive\\\":\\\"fallback\\\";if(\\\"json\\\"===t){const t=this.payable?\\\"payable\\\":\\\"nonpayable\\\";return JSON.stringify({type:e,stateMutability:t})}return`${e}()${this.payable?\\\" payable\\\":\\\"\\\"}`}static from(t){if(pn.isFragment(t))return t;if(\\\"string\\\"==typeof t)try{return pn.from(Qe(t))}catch(e){f(!1,\\\"invalid fallback fragment\\\",\\\"obj\\\",t)}else if(t instanceof He){const e=t.toString();f(t.peekKeyword(xe([\\\"fallback\\\",\\\"receive\\\"])),\\\"type must be fallback or receive\\\",\\\"obj\\\",e);if(\\\"receive\\\"===t.popKeyword(xe([\\\"fallback\\\",\\\"receive\\\"]))){const e=Ke(t);return f(0===e.length,\\\"receive cannot have arguments\\\",\\\"obj.inputs\\\",e),Je(t,xe([\\\"payable\\\"])),_e(t),new pn(Ye,[],!0)}let n=Ke(t);n.length?f(1===n.length&&\\\"bytes\\\"===n[0].type,\\\"invalid fallback inputs\\\",\\\"obj.inputs\\\",n.map((t=>t.format(\\\"minimal\\\"))).join(\\\", \\\")):n=[an.from(\\\"bytes\\\")];const r=ze(t);if(f(\\\"nonpayable\\\"===r||\\\"payable\\\"===r,\\\"fallback cannot be constants\\\",\\\"obj.stateMutability\\\",r),Je(t,xe([\\\"returns\\\"])).has(\\\"returns\\\")){const e=Ke(t);f(1===e.length&&\\\"bytes\\\"===e[0].type,\\\"invalid fallback outputs\\\",\\\"obj.outputs\\\",e.map((t=>t.format(\\\"minimal\\\"))).join(\\\", \\\"))}return _e(t),new pn(Ye,n,\\\"payable\\\"===r)}if(\\\"receive\\\"===t.type)return new pn(Ye,[],!0);if(\\\"fallback\\\"===t.type){const e=[an.from(\\\"bytes\\\")],n=\\\"payable\\\"===t.stateMutability;return new pn(Ye,e,n)}f(!1,\\\"invalid fallback description\\\",\\\"obj\\\",t)}static isFragment(t){return t&&t[Xe]===rn}}class gn extends ln{constant;outputs;stateMutability;payable;gas;constructor(t,e,n,r,s,i){super(t,\\\"function\\\",e,r),Object.defineProperty(this,Xe,{value:sn});o(this,{constant:\\\"view\\\"===n||\\\"pure\\\"===n,gas:i,outputs:s=Object.freeze(s.slice()),payable:\\\"payable\\\"===n,stateMutability:n})}get selector(){return Pe(this.format(\\\"sighash\\\")).substring(0,10)}format(t){if(null==t&&(t=\\\"sighash\\\"),\\\"json\\\"===t)return JSON.stringify({type:\\\"function\\\",name:this.name,constant:this.constant,stateMutability:\\\"nonpayable\\\"!==this.stateMutability?this.stateMutability:void 0,payable:this.payable,gas:null!=this.gas?this.gas:void 0,inputs:this.inputs.map((e=>JSON.parse(e.format(t)))),outputs:this.outputs.map((e=>JSON.parse(e.format(t))))});const e=[];return\\\"sighash\\\"!==t&&e.push(\\\"function\\\"),e.push(this.name+un(t,this.inputs)),\\\"sighash\\\"!==t&&(\\\"nonpayable\\\"!==this.stateMutability&&e.push(this.stateMutability),this.outputs&&this.outputs.length&&(e.push(\\\"returns\\\"),e.push(un(t,this.outputs))),null!=this.gas&&e.push(`@${this.gas.toString()}`)),e.join(\\\" \\\")}static getSelector(t,e){e=(e||[]).map((t=>an.from(t)));return new gn(Ye,t,\\\"view\\\",e,[],null).selector}static from(t){if(gn.isFragment(t))return t;if(\\\"string\\\"==typeof t)try{return gn.from(Qe(t))}catch(e){f(!1,\\\"invalid function fragment\\\",\\\"obj\\\",t)}else if(t instanceof He){const e=Ve(\\\"function\\\",t),n=Ke(t),r=ze(t);let s=[];Je(t,xe([\\\"returns\\\"])).has(\\\"returns\\\")&&(s=Ke(t));const i=qe(t);return _e(t),new gn(Ye,e,r,n,s,i)}let e=t.stateMutability;return null==e&&(e=\\\"payable\\\",\\\"boolean\\\"==typeof t.constant?(e=\\\"view\\\",t.constant||(e=\\\"payable\\\",\\\"boolean\\\"!=typeof t.payable||t.payable||(e=\\\"nonpayable\\\"))):\\\"boolean\\\"!=typeof t.payable||t.payable||(e=\\\"nonpayable\\\")),new gn(Ye,t.name,e,t.inputs?t.inputs.map(an.from):[],t.outputs?t.outputs.map(an.from):[],null!=t.gas?t.gas:null)}static isFragment(t){return t&&t[Xe]===sn}}class mn extends ln{constructor(t,e,n){super(t,\\\"struct\\\",e,n),Object.defineProperty(this,Xe,{value:on})}format(){throw new Error(\\\"@TODO\\\")}static from(t){if(\\\"string\\\"==typeof t)try{return mn.from(Qe(t))}catch(e){f(!1,\\\"invalid struct fragment\\\",\\\"obj\\\",t)}else if(t instanceof He){const e=Ve(\\\"struct\\\",t),n=Ke(t);return _e(t),new mn(Ye,e,n)}return new mn(Ye,t.name,t.inputs?t.inputs.map(an.from):[])}static isFragment(t){return t&&t[Xe]===on}}const yn=new Map;yn.set(0,\\\"GENERIC_PANIC\\\"),yn.set(1,\\\"ASSERT_FALSE\\\"),yn.set(17,\\\"OVERFLOW\\\"),yn.set(18,\\\"DIVIDE_BY_ZERO\\\"),yn.set(33,\\\"ENUM_RANGE_ERROR\\\"),yn.set(34,\\\"BAD_STORAGE_DATA\\\"),yn.set(49,\\\"STACK_UNDERFLOW\\\"),yn.set(50,\\\"ARRAY_RANGE_ERROR\\\"),yn.set(65,\\\"OUT_OF_MEMORY\\\"),yn.set(81,\\\"UNINITIALIZED_FUNCTION_CALL\\\");const wn=new RegExp(/^bytes([0-9]*)$/),bn=new RegExp(/^(u?int)([0-9]*)$/);let An=null,vn=1024;class En{#p(t){if(t.isArray())return new oe(this.#p(t.arrayChildren),t.arrayLength,t.name);if(t.isTuple())return new ke(t.components.map((t=>this.#p(t))),t.name);switch(t.baseType){case\\\"address\\\":return new ne(t.name);case\\\"bool\\\":return new ae(t.name);case\\\"string\\\":return new Ee(t.name);case\\\"bytes\\\":return new le(t.name);case\\\"\\\":return new fe(t.name)}let e=t.type.match(bn);if(e){let n=parseInt(e[2]||\\\"256\\\");return f(0!==n&&n<=256&&n%8==0,\\\"invalid \\\"+e[1]+\\\" bit length\\\",\\\"param\\\",t),new me(n/8,\\\"int\\\"===e[1],t.name)}if(e=t.type.match(wn),e){let n=parseInt(e[1]);return f(0!==n&&n<=32,\\\"invalid bytes length\\\",\\\"param\\\",t),new ue(n,t.name)}f(!1,\\\"invalid type\\\",\\\"type\\\",t.type)}getDefaultValue(t){const e=t.map((t=>this.#p(an.from(t))));return new ke(e,\\\"_\\\").defaultValue()}encode(t,e){d(e.length,t.length,\\\"types/values length mismatch\\\");const n=t.map((t=>this.#p(an.from(t)))),r=new ke(n,\\\"_\\\"),s=new $;return r.encode(s,e),s.data}decode(t,e,n){const r=t.map((t=>this.#p(an.from(t))));return new ke(r,\\\"_\\\").decode(new tt(e,n,vn))}static _setDefaultMaxInflation(t){f(\\\"number\\\"==typeof t&&Number.isInteger(t),\\\"invalid defaultMaxInflation factor\\\",\\\"value\\\",t),vn=t}static defaultAbiCoder(){return null==An&&(An=new En),An}static getBuiltinCallException(t,e,n){return function(t,e,n,r){let s=\\\"missing revert data\\\",i=null,o=null;if(n){s=\\\"execution reverted\\\";const t=y(n);if(n=E(n),0===t.length)s+=\\\" (no data present; likely require(false) occurred\\\",i=\\\"require(false)\\\";else if(t.length%32!=4)s+=\\\" (could not decode reason; invalid data length)\\\";else if(\\\"0x08c379a0\\\"===E(t.slice(0,4)))try{i=r.decode([\\\"string\\\"],t.slice(4))[0],o={signature:\\\"Error(string)\\\",name:\\\"Error\\\",args:[i]},s+=`: ${JSON.stringify(i)}`}catch(t){s+=\\\" (could not decode reason; invalid string data)\\\"}else if(\\\"0x4e487b71\\\"===E(t.slice(0,4)))try{const e=Number(r.decode([\\\"uint256\\\"],t.slice(4))[0]);o={signature:\\\"Panic(uint256)\\\",name:\\\"Panic\\\",args:[e]},i=`Panic due to ${yn.get(e)||\\\"UNKNOWN\\\"}(${e})`,s+=`: ${i}`}catch(t){s+=\\\" (could not decode panic code)\\\"}else s+=\\\" (unknown custom error)\\\"}const a={to:e.to?Wt(e.to):null,data:e.data||\\\"0x\\\"};return e.from&&(a.from=Wt(e.from)),u(s,\\\"CALL_EXCEPTION\\\",{action:t,data:n,reason:i,transaction:a,invocation:null,revert:o})}(t,e,n,En.defaultAbiCoder())}}function kn(t){return t&&\\\"function\\\"==typeof t.getAddress}async function Pn(t,e){const n=await e;return null!=n&&\\\"0x0000000000000000000000000000000000000000\\\"!==n||(h(\\\"string\\\"!=typeof t,\\\"unconfigured name\\\",\\\"UNCONFIGURED_NAME\\\",{value:t}),f(!1,\\\"invalid AddressLike value; did not resolve to a value address\\\",\\\"target\\\",t)),Wt(n)}function xn(t,e){return\\\"string\\\"==typeof t?t.match(/^0x[0-9a-f]{40}$/i)?Wt(t):(h(null!=e,\\\"ENS resolution requires a provider\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"resolveName\\\"}),Pn(t,e.resolveName(t))):kn(t)?Pn(t,t.getAddress()):t&&\\\"function\\\"==typeof t.then?Pn(t,t):void f(!1,\\\"unsupported addressable value\\\",\\\"target\\\",t)}const Nn=new Uint8Array(32);Nn.fill(0);const Bn=BigInt(-1),In=BigInt(0),Cn=BigInt(1),On=BigInt(\\\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\");const Rn=M(Cn,32),Tn=M(In,32),Sn={name:\\\"string\\\",version:\\\"string\\\",chainId:\\\"uint256\\\",verifyingContract:\\\"address\\\",salt:\\\"bytes32\\\"},Fn=[\\\"name\\\",\\\"version\\\",\\\"chainId\\\",\\\"verifyingContract\\\",\\\"salt\\\"];function Un(t){return function(e){return f(\\\"string\\\"==typeof e,`invalid domain value for ${JSON.stringify(t)}`,`domain.${t}`,e),e}}const Dn={name:Un(\\\"name\\\"),version:Un(\\\"version\\\"),chainId:function(t){const e=S(t,\\\"domain.chainId\\\");return f(e>=0,\\\"invalid chain ID\\\",\\\"domain.chainId\\\",t),Number.isSafeInteger(e)?Number(e):H(e)},verifyingContract:function(t){try{return Wt(t).toLowerCase()}catch(t){}f(!1,'invalid domain value \\\"verifyingContract\\\"',\\\"domain.verifyingContract\\\",t)},salt:function(t){const e=y(t,\\\"domain.salt\\\");return f(32===e.length,'invalid domain value \\\"salt\\\"',\\\"domain.salt\\\",t),E(e)}};function Ln(t){{const e=t.match(/^(u?)int(\\\\d+)$/);if(e){const n=\\\"\\\"===e[1],r=parseInt(e[2]);f(r%8==0&&0!==r&&r<=256&&e[2]===String(r),\\\"invalid numeric width\\\",\\\"type\\\",t);const s=T(On,n?r-1:r),i=n?(s+Cn)*Bn:In;return function(e){const r=S(e,\\\"value\\\");return f(r>=i&&r<=s,`value out-of-bounds for ${t}`,\\\"value\\\",r),M(n?R(r,256):r,32)}}}{const e=t.match(/^bytes(\\\\d+)$/);if(e){const n=parseInt(e[1]);return f(0!==n&&n<=32&&e[1]===String(n),\\\"invalid bytes width\\\",\\\"type\\\",t),function(e){return f(y(e).length===n,`invalid length for ${t}`,\\\"value\\\",e),function(t){const e=y(t),n=e.length%32;return n?k([e,Nn.slice(n)]):E(e)}(e)}}}switch(t){case\\\"address\\\":return function(t){return B(Wt(t),32)};case\\\"bool\\\":return function(t){return t?Rn:Tn};case\\\"bytes\\\":return function(t){return jt(t)};case\\\"string\\\":return function(t){return Pe(t)}}return null}function Mn(t,e){return`${t}(${e.map((({name:t,type:e})=>e+\\\" \\\"+t)).join(\\\",\\\")})`}function Gn(t){const e=t.match(/^([^\\\\x5b]*)((\\\\x5b\\\\d*\\\\x5d)*)(\\\\x5b(\\\\d*)\\\\x5d)$/);return e?{base:e[1],index:e[2]+e[4],array:{base:e[1],prefix:e[1]+e[2],count:e[5]?parseInt(e[5]):-1}}:{base:t}}class Hn{primaryType;#g;get types(){return JSON.parse(this.#g)}#m;#y;constructor(t){this.#m=new Map,this.#y=new Map;const e=new Map,n=new Map,r=new Map,s={};Object.keys(t).forEach((i=>{s[i]=t[i].map((({name:e,type:n})=>{let{base:r,index:s}=Gn(n);return\\\"int\\\"!==r||t.int||(r=\\\"int256\\\"),\\\"uint\\\"!==r||t.uint||(r=\\\"uint256\\\"),{name:e,type:r+(s||\\\"\\\")}})),e.set(i,new Set),n.set(i,[]),r.set(i,new Set)})),this.#g=JSON.stringify(s);for(const r in s){const i=new Set;for(const o of s[r]){f(!i.has(o.name),`duplicate variable name ${JSON.stringify(o.name)} in ${JSON.stringify(r)}`,\\\"types\\\",t),i.add(o.name);const s=Gn(o.type).base;f(s!==r,`circular type reference to ${JSON.stringify(s)}`,\\\"types\\\",t);Ln(s)||(f(n.has(s),`unknown type ${JSON.stringify(s)}`,\\\"types\\\",t),n.get(s).push(r),e.get(r).add(s))}}const i=Array.from(n.keys()).filter((t=>0===n.get(t).length));f(0!==i.length,\\\"missing primary type\\\",\\\"types\\\",t),f(1===i.length,`ambiguous primary types or unused types: ${i.map((t=>JSON.stringify(t))).join(\\\", \\\")}`,\\\"types\\\",t),o(this,{primaryType:i[0]}),function s(i,o){f(!o.has(i),`circular type reference to ${JSON.stringify(i)}`,\\\"types\\\",t),o.add(i);for(const t of e.get(i))if(n.has(t)){s(t,o);for(const e of o)r.get(e).add(t)}o.delete(i)}(this.primaryType,new Set);for(const[t,e]of r){const n=Array.from(e);n.sort(),this.#m.set(t,Mn(t,s[t])+n.map((t=>Mn(t,s[t]))).join(\\\"\\\"))}}getEncoder(t){let e=this.#y.get(t);return e||(e=this.#w(t),this.#y.set(t,e)),e}#w(t){{const e=Ln(t);if(e)return e}const e=Gn(t).array;if(e){const t=e.prefix,n=this.getEncoder(t);return r=>{f(-1===e.count||e.count===r.length,`array length mismatch; expected length ${e.count}`,\\\"value\\\",r);let s=r.map(n);return this.#m.has(t)&&(s=s.map(jt)),jt(k(s))}}const n=this.types[t];if(n){const e=Pe(this.#m.get(t));return t=>{const r=n.map((({name:e,type:n})=>{const r=this.getEncoder(n)(t[e]);return this.#m.has(n)?jt(r):r}));return r.unshift(e),k(r)}}f(!1,`unknown type: ${t}`,\\\"type\\\",t)}encodeType(t){const e=this.#m.get(t);return f(e,`unknown type: ${JSON.stringify(t)}`,\\\"name\\\",t),e}encodeData(t,e){return this.getEncoder(t)(e)}hashStruct(t,e){return jt(this.encodeData(t,e))}encode(t){return this.encodeData(this.primaryType,t)}hash(t){return this.hashStruct(this.primaryType,t)}_visit(t,e,n){if(Ln(t))return n(t,e);const r=Gn(t).array;if(r)return f(-1===r.count||r.count===e.length,`array length mismatch; expected length ${r.count}`,\\\"value\\\",e),e.map((t=>this._visit(r.prefix,t,n)));const s=this.types[t];if(s)return s.reduce(((t,{name:r,type:s})=>(t[r]=this._visit(s,e[r],n),t)),{});f(!1,`unknown type: ${t}`,\\\"type\\\",t)}visit(t,e){return this._visit(this.primaryType,t,e)}static from(t){return new Hn(t)}static getPrimaryType(t){return Hn.from(t).primaryType}static hashStruct(t,e,n){return Hn.from(e).hashStruct(t,n)}static hashDomain(t){const e=[];for(const n in t){if(null==t[n])continue;const r=Sn[n];f(r,`invalid typed-data domain key: ${JSON.stringify(n)}`,\\\"domain\\\",t),e.push({name:n,type:r})}return e.sort(((t,e)=>Fn.indexOf(t.name)-Fn.indexOf(e.name))),Hn.hashStruct(\\\"EIP712Domain\\\",{EIP712Domain:e},t)}static encode(t,e,n){return k([\\\"0x1901\\\",Hn.hashDomain(t),Hn.from(e).hash(n)])}static hash(t,e,n){return jt(Hn.encode(t,e,n))}static async resolveNames(t,e,n,r){t=Object.assign({},t);for(const e in t)null==t[e]&&delete t[e];const s={};t.verifyingContract&&!b(t.verifyingContract,20)&&(s[t.verifyingContract]=\\\"0x\\\");const i=Hn.from(e);i.visit(n,((t,e)=>(\\\"address\\\"!==t||b(e,20)||(s[e]=\\\"0x\\\"),e)));for(const t in s)s[t]=await r(t);return t.verifyingContract&&s[t.verifyingContract]&&(t.verifyingContract=s[t.verifyingContract]),{domain:t,value:n=i.visit(n,((t,e)=>\\\"address\\\"===t&&s[e]?s[e]:e))}}static getPayload(t,e,n){Hn.hashDomain(t);const r={},s=[];Fn.forEach((e=>{const n=t[e];null!=n&&(r[e]=Dn[e](n),s.push({name:e,type:Sn[e]}))}));const i=Hn.from(e);e=i.types;const o=Object.assign({},e);return f(null==o.EIP712Domain,\\\"types must not contain EIP712Domain type\\\",\\\"types.EIP712Domain\\\",e),o.EIP712Domain=s,i.encode(n),{types:o,domain:r,primaryType:i.primaryType,message:i.visit(n,((t,e)=>{if(t.match(/^bytes(\\\\d*)/))return E(y(e));if(t.match(/^u?int/))return S(e).toString();switch(t){case\\\"address\\\":return e.toLowerCase();case\\\"bool\\\":return!!e;case\\\"string\\\":return f(\\\"string\\\"==typeof e,\\\"invalid string\\\",\\\"value\\\",e),e}f(!1,\\\"unsupported type\\\",\\\"type\\\",t)}))}}}function Qn(t,e){return{address:Wt(t),storageKeys:e.map(((t,e)=>(f(b(t,32),\\\"invalid slot\\\",`storageKeys[${e}]`,t),t.toLowerCase())))}}function jn(t){if(Array.isArray(t))return t.map(((e,n)=>Array.isArray(e)?(f(2===e.length,\\\"invalid slot set\\\",`value[${n}]`,e),Qn(e[0],e[1])):(f(null!=e&&\\\"object\\\"==typeof e,\\\"invalid address-slot set\\\",\\\"value\\\",t),Qn(e.address,e.storageKeys))));f(null!=t&&\\\"object\\\"==typeof t,\\\"invalid access list\\\",\\\"value\\\",t);const e=Object.keys(t).map((e=>{const n=t[e].reduce(((t,e)=>(t[e]=!0,t)),{});return Qn(e,Object.keys(n).sort())}));return e.sort(((t,e)=>t.address.localeCompare(e.address))),e}function Vn(t){return async function(t,e){h(null==e||!e.cancelled,\\\"request cancelled before sending\\\",\\\"CANCELLED\\\");const n=t.url.split(\\\":\\\")[0].toLowerCase();h(\\\"http\\\"===n||\\\"https\\\"===n,`unsupported protocol ${n}`,\\\"UNSUPPORTED_OPERATION\\\",{info:{protocol:n},operation:\\\"request\\\"}),h(\\\"https\\\"===n||!t.credentials||t.allowInsecureAuthentication,\\\"insecure authorized connections unsupported\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"request\\\"});let r=null;const s=new AbortController,i=setTimeout((()=>{r=u(\\\"request timeout\\\",\\\"TIMEOUT\\\"),s.abort()}),t.timeout);e&&e.addListener((()=>{r=u(\\\"request cancelled\\\",\\\"CANCELLED\\\"),s.abort()}));const o={method:t.method,headers:new Headers(Array.from(t)),body:t.body||void 0,signal:s.signal};let a;try{a=await fetch(t.url,o)}catch(t){if(clearTimeout(i),r)throw r;throw t}clearTimeout(i);const c={};a.headers.forEach(((t,e)=>{c[e.toLowerCase()]=t}));const l=await a.arrayBuffer(),f=null==l?null:new Uint8Array(l);return{statusCode:a.status,statusMessage:a.statusText,headers:c,body:f}}}Vn();let Jn=Vn();const zn=new RegExp(\\\"^data:([^;:]*)?(;base64)?,(.*)$\\\",\\\"i\\\"),Kn=new RegExp(\\\"^ipfs://(ipfs/)?(.*)$\\\",\\\"i\\\");let qn=!1;async function _n(t,e){try{const e=t.match(zn);if(!e)throw new Error(\\\"invalid data\\\");return new er(200,\\\"OK\\\",{\\\"content-type\\\":e[1]||\\\"text/plain\\\"},e[2]?function(t){t=atob(t);const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return y(e)}(e[3]):Ae(e[3].replace(/%([0-9a-f][0-9a-f])/gi,((t,e)=>String.fromCharCode(parseInt(e,16))))))}catch(e){return new er(599,\\\"BAD REQUEST (invalid data: URI)\\\",{},null,new tr(t))}}function Zn(t){return async function(e,n){try{const n=e.match(Kn);if(!n)throw new Error(\\\"invalid link\\\");return new tr(`${t}${n[2]}`)}catch(t){return new er(599,\\\"BAD REQUEST (invalid IPFS URI)\\\",{},null,new tr(e))}}}const Wn={data:_n,ipfs:Zn(\\\"https://gateway.ipfs.io/ipfs/\\\")},Yn=new WeakMap;class Xn{#b;#A;constructor(t){this.#b=[],this.#A=!1,Yn.set(t,(()=>{if(!this.#A){this.#A=!0;for(const t of this.#b)setTimeout((()=>{t()}),0);this.#b=[]}}))}addListener(t){h(!this.#A,\\\"singal already cancelled\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"fetchCancelSignal.addCancelListener\\\"}),this.#b.push(t)}get cancelled(){return this.#A}checkSignal(){h(!this.cancelled,\\\"cancelled\\\",\\\"CANCELLED\\\",{})}}function $n(t){if(null==t)throw new Error(\\\"missing signal; should not happen\\\");return t.checkSignal(),t}class tr{#v;#E;#k;#P;#x;#N;#B;#I;#C;#O;#R;#T;#S;#F;#U;get url(){return this.#N}set url(t){this.#N=String(t)}get body(){return null==this.#B?null:new Uint8Array(this.#B)}set body(t){if(null==t)this.#B=void 0,this.#I=void 0;else if(\\\"string\\\"==typeof t)this.#B=Ae(t),this.#I=\\\"text/plain\\\";else if(t instanceof Uint8Array)this.#B=t,this.#I=\\\"application/octet-stream\\\";else{if(\\\"object\\\"!=typeof t)throw new Error(\\\"invalid body\\\");this.#B=Ae(JSON.stringify(t)),this.#I=\\\"application/json\\\"}}hasBody(){return null!=this.#B}get method(){return this.#P?this.#P:this.hasBody()?\\\"POST\\\":\\\"GET\\\"}set method(t){null==t&&(t=\\\"\\\"),this.#P=String(t).toUpperCase()}get headers(){const t=Object.assign({},this.#k);return this.#C&&(t.authorization=`Basic ${function(t){const e=y(t);let n=\\\"\\\";for(let t=0;t<e.length;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(Ae(this.#C))}`),this.allowGzip&&(t[\\\"accept-encoding\\\"]=\\\"gzip\\\"),null==t[\\\"content-type\\\"]&&this.#I&&(t[\\\"content-type\\\"]=this.#I),this.body&&(t[\\\"content-length\\\"]=String(this.body.length)),t}getHeader(t){return this.headers[t.toLowerCase()]}setHeader(t,e){this.#k[String(t).toLowerCase()]=String(e)}clearHeaders(){this.#k={}}[Symbol.iterator](){const t=this.headers,e=Object.keys(t);let n=0;return{next:()=>{if(n<e.length){const r=e[n++];return{value:[r,t[r]],done:!1}}return{value:void 0,done:!0}}}}get credentials(){return this.#C||null}setCredentials(t,e){f(!t.match(/:/),\\\"invalid basic authentication username\\\",\\\"username\\\",\\\"[REDACTED]\\\"),this.#C=`${t}:${e}`}get allowGzip(){return this.#E}set allowGzip(t){this.#E=!!t}get allowInsecureAuthentication(){return!!this.#v}set allowInsecureAuthentication(t){this.#v=!!t}get timeout(){return this.#x}set timeout(t){f(t>=0,\\\"timeout must be non-zero\\\",\\\"timeout\\\",t),this.#x=t}get preflightFunc(){return this.#O||null}set preflightFunc(t){this.#O=t}get processFunc(){return this.#R||null}set processFunc(t){this.#R=t}get retryFunc(){return this.#T||null}set retryFunc(t){this.#T=t}get getUrlFunc(){return this.#U||Jn}set getUrlFunc(t){this.#U=t}constructor(t){this.#N=String(t),this.#v=!1,this.#E=!0,this.#k={},this.#P=\\\"\\\",this.#x=3e5,this.#F={slotInterval:250,maxAttempts:12},this.#U=null}toString(){return`<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#B?E(this.#B):\\\"null\\\"}>`}setThrottleParams(t){null!=t.slotInterval&&(this.#F.slotInterval=t.slotInterval),null!=t.maxAttempts&&(this.#F.maxAttempts=t.maxAttempts)}async#D(t,e,n,r,s){if(t>=this.#F.maxAttempts)return s.makeServerError(\\\"exceeded maximum retry limit\\\");h(nr()<=e,\\\"timeout\\\",\\\"TIMEOUT\\\",{operation:\\\"request.send\\\",reason:\\\"timeout\\\",request:r}),n>0&&await function(t){return new Promise((e=>setTimeout(e,t)))}(n);let i=this.clone();const o=(i.url.split(\\\":\\\")[0]||\\\"\\\").toLowerCase();if(o in Wn){const t=await Wn[o](i.url,$n(r.#S));if(t instanceof er){let e=t;if(this.processFunc){$n(r.#S);try{e=await this.processFunc(i,e)}catch(t){null!=t.throttle&&\\\"number\\\"==typeof t.stall||e.makeServerError(\\\"error in post-processing function\\\",t).assertOk()}}return e}i=t}this.preflightFunc&&(i=await this.preflightFunc(i));const a=await this.getUrlFunc(i,$n(r.#S));let c=new er(a.statusCode,a.statusMessage,a.headers,a.body,r);if(301===c.statusCode||302===c.statusCode){try{const n=c.headers.location||\\\"\\\";return i.redirect(n).#D(t+1,e,0,r,c)}catch(t){}return c}if(429===c.statusCode&&(null==this.retryFunc||await this.retryFunc(i,c,t))){const n=c.headers[\\\"retry-after\\\"];let s=this.#F.slotInterval*Math.trunc(Math.random()*Math.pow(2,t));return\\\"string\\\"==typeof n&&n.match(/^[1-9][0-9]*$/)&&(s=parseInt(n)),i.clone().#D(t+1,e,s,r,c)}if(this.processFunc){$n(r.#S);try{c=await this.processFunc(i,c)}catch(n){null!=n.throttle&&\\\"number\\\"==typeof n.stall||c.makeServerError(\\\"error in post-processing function\\\",n).assertOk();let s=this.#F.slotInterval*Math.trunc(Math.random()*Math.pow(2,t));return n.stall>=0&&(s=n.stall),i.clone().#D(t+1,e,s,r,c)}}return c}send(){return h(null==this.#S,\\\"request already sent\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"fetchRequest.send\\\"}),this.#S=new Xn(this),this.#D(0,nr()+this.timeout,0,this,new er(0,\\\"\\\",{},null,this))}cancel(){h(null!=this.#S,\\\"request has not been sent\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"fetchRequest.cancel\\\"});const t=Yn.get(this);if(!t)throw new Error(\\\"missing signal; should not happen\\\");t()}redirect(t){const e=this.url.split(\\\":\\\")[0].toLowerCase(),n=t.split(\\\":\\\")[0].toLowerCase();h(\\\"GET\\\"===this.method&&(\\\"https\\\"!==e||\\\"http\\\"!==n)&&t.match(/^https?:/),\\\"unsupported redirect\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:`redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(t)})`});const r=new tr(t);return r.method=\\\"GET\\\",r.allowGzip=this.allowGzip,r.timeout=this.timeout,r.#k=Object.assign({},this.#k),this.#B&&(r.#B=new Uint8Array(this.#B)),r.#I=this.#I,r}clone(){const t=new tr(this.url);return t.#P=this.#P,this.#B&&(t.#B=this.#B),t.#I=this.#I,t.#k=Object.assign({},this.#k),t.#C=this.#C,this.allowGzip&&(t.allowGzip=!0),t.timeout=this.timeout,this.allowInsecureAuthentication&&(t.allowInsecureAuthentication=!0),t.#O=this.#O,t.#R=this.#R,t.#T=this.#T,t.#F=Object.assign({},this.#F),t.#U=this.#U,t}static lockConfig(){qn=!0}static getGateway(t){return Wn[t.toLowerCase()]||null}static registerGateway(t,e){if(\\\"http\\\"===(t=t.toLowerCase())||\\\"https\\\"===t)throw new Error(`cannot intercept ${t}; use registerGetUrl`);if(qn)throw new Error(\\\"gateways locked\\\");Wn[t]=e}static registerGetUrl(t){if(qn)throw new Error(\\\"gateways locked\\\");Jn=t}static createGetUrlFunc(t){return Vn()}static createDataGateway(){return _n}static createIpfsGatewayFunc(t){return Zn(t)}}class er{#L;#M;#k;#B;#G;#H;toString(){return`<FetchResponse status=${this.statusCode} body=${this.#B?E(this.#B):\\\"null\\\"}>`}get statusCode(){return this.#L}get statusMessage(){return this.#M}get headers(){return Object.assign({},this.#k)}get body(){return null==this.#B?null:new Uint8Array(this.#B)}get bodyText(){try{return null==this.#B?\\\"\\\":ve(this.#B)}catch(t){h(!1,\\\"response body is not valid UTF-8 data\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"bodyText\\\",info:{response:this}})}}get bodyJson(){try{return JSON.parse(this.bodyText)}catch(t){h(!1,\\\"response body is not valid JSON\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"bodyJson\\\",info:{response:this}})}}[Symbol.iterator](){const t=this.headers,e=Object.keys(t);let n=0;return{next:()=>{if(n<e.length){const r=e[n++];return{value:[r,t[r]],done:!1}}return{value:void 0,done:!0}}}}constructor(t,e,n,r,s){this.#L=t,this.#M=e,this.#k=Object.keys(n).reduce(((t,e)=>(t[e.toLowerCase()]=String(n[e]),t)),{}),this.#B=null==r?null:new Uint8Array(r),this.#G=s||null,this.#H={message:\\\"\\\"}}makeServerError(t,e){let n;n=t?`CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${t})`:`CLIENT ESCALATED SERVER ERROR (${t=`${this.statusCode} ${this.statusMessage}`})`;const r=new er(599,n,this.headers,this.body,this.#G||void 0);return r.#H={message:t,error:e},r}throwThrottleError(t,e){null==e?e=-1:f(Number.isInteger(e)&&e>=0,\\\"invalid stall timeout\\\",\\\"stall\\\",e);const n=new Error(t||\\\"throttling requests\\\");throw o(n,{stall:e,throttle:!0}),n}getHeader(t){return this.headers[t.toLowerCase()]}hasBody(){return null!=this.#B}get request(){return this.#G}ok(){return\\\"\\\"===this.#H.message&&this.statusCode>=200&&this.statusCode<300}assertOk(){if(this.ok())return;let{message:t,error:e}=this.#H;\\\"\\\"===t&&(t=`server response ${this.statusCode} ${this.statusMessage}`);let n=null;this.request&&(n=this.request.url);let r=null;try{this.#B&&(r=ve(this.#B))}catch(t){}h(!1,t,\\\"SERVER_ERROR\\\",{request:this.request||\\\"unknown request\\\",response:this,error:e,info:{requestUrl:n,responseBody:r,responseStatus:`${this.statusCode} ${this.statusMessage}`}})}}function nr(){return(new Date).getTime()}const rr=\\\"0x0000000000000000000000000000000000000000\\\";class sr{fragment;name;signature;topic;args;constructor(t,e,n){const r=t.name,s=t.format();o(this,{fragment:t,name:r,signature:s,topic:e,args:n})}}class ir{fragment;name;args;signature;selector;value;constructor(t,e,n,r){const s=t.name,i=t.format();o(this,{fragment:t,name:s,args:n,signature:i,selector:e,value:r})}}class or{fragment;name;args;signature;selector;constructor(t,e,n){const r=t.name,s=t.format();o(this,{fragment:t,name:r,args:n,signature:s,selector:e})}}class ar{hash;_isIndexed;static isIndexed(t){return!(!t||!t._isIndexed)}constructor(t){o(this,{hash:t,_isIndexed:!0})}}const cr={0:\\\"generic panic\\\",1:\\\"assert(false)\\\",17:\\\"arithmetic overflow\\\",18:\\\"division or modulo by zero\\\",33:\\\"enum overflow\\\",34:\\\"invalid encoded storage byte array accessed\\\",49:\\\"out-of-bounds array access; popping on an empty array\\\",50:\\\"out-of-bounds access of an array or bytesN\\\",65:\\\"out of memory\\\",81:\\\"uninitialized function\\\"},lr={\\\"0x08c379a0\\\":{signature:\\\"Error(string)\\\",name:\\\"Error\\\",inputs:[\\\"string\\\"],reason:t=>`reverted with reason string ${JSON.stringify(t)}`},\\\"0x4e487b71\\\":{signature:\\\"Panic(uint256)\\\",name:\\\"Panic\\\",inputs:[\\\"uint256\\\"],reason:t=>{let e=\\\"unknown panic code\\\";return t>=0&&t<=255&&cr[t.toString()]&&(e=cr[t.toString()]),`reverted with panic code 0x${t.toString(16)} (${e})`}}};class ur{fragments;deploy;fallback;receive;#Q;#j;#V;#J;constructor(t){let e=[];e=\\\"string\\\"==typeof t?JSON.parse(t):t,this.#V=new Map,this.#Q=new Map,this.#j=new Map;const n=[];for(const t of e)try{n.push(cn.from(t))}catch(e){console.log(`[Warning] Invalid Fragment ${JSON.stringify(t)}:`,e.message)}o(this,{fragments:Object.freeze(n)});let r=null,s=!1;this.#J=this.getAbiCoder(),this.fragments.forEach(((t,e)=>{let n;switch(t.type){case\\\"constructor\\\":return this.deploy?void console.log(\\\"duplicate definition - constructor\\\"):void o(this,{deploy:t});case\\\"fallback\\\":return void(0===t.inputs.length?s=!0:(f(!r||t.payable!==r.payable,\\\"conflicting fallback fragments\\\",`fragments[${e}]`,t),r=t,s=r.payable));case\\\"function\\\":n=this.#V;break;case\\\"event\\\":n=this.#j;break;case\\\"error\\\":n=this.#Q;break;default:return}const i=t.format();n.has(i)||n.set(i,t)})),this.deploy||o(this,{deploy:dn.from(\\\"constructor()\\\")}),o(this,{fallback:r,receive:s})}format(t){const e=t?\\\"minimal\\\":\\\"full\\\";return this.fragments.map((t=>t.format(e)))}formatJson(){const t=this.fragments.map((t=>t.format(\\\"json\\\")));return JSON.stringify(t.map((t=>JSON.parse(t))))}getAbiCoder(){return En.defaultAbiCoder()}#z(t,e,n){if(b(t)){const e=t.toLowerCase();for(const t of this.#V.values())if(e===t.selector)return t;return null}if(-1===t.indexOf(\\\"(\\\")){const r=[];for(const[e,n]of this.#V)e.split(\\\"(\\\")[0]===t&&r.push(n);if(e){const t=e.length>0?e[e.length-1]:null;let n=e.length,s=!0;ee.isTyped(t)&&\\\"overrides\\\"===t.type&&(s=!1,n--);for(let t=r.length-1;t>=0;t--){const e=r[t].inputs.length;e===n||s&&e===n-1||r.splice(t,1)}for(let t=r.length-1;t>=0;t--){const n=r[t].inputs;for(let s=0;s<e.length;s++)if(ee.isTyped(e[s])){if(s>=n.length){if(\\\"overrides\\\"===e[s].type)continue;r.splice(t,1);break}if(e[s].type!==n[s].baseType){r.splice(t,1);break}}}}if(1===r.length&&e&&e.length!==r[0].inputs.length){const t=e[e.length-1];(null==t||Array.isArray(t)||\\\"object\\\"!=typeof t)&&r.splice(0,1)}if(0===r.length)return null;if(r.length>1&&n){f(!1,`ambiguous function description (i.e. matches ${r.map((t=>JSON.stringify(t.format()))).join(\\\", \\\")})`,\\\"key\\\",t)}return r[0]}const r=this.#V.get(gn.from(t).format());return r||null}getFunctionName(t){const e=this.#z(t,null,!1);return f(e,\\\"no matching function\\\",\\\"key\\\",t),e.name}hasFunction(t){return!!this.#z(t,null,!1)}getFunction(t,e){return this.#z(t,e||null,!0)}forEachFunction(t){const e=Array.from(this.#V.keys());e.sort(((t,e)=>t.localeCompare(e)));for(let n=0;n<e.length;n++){const r=e[n];t(this.#V.get(r),n)}}#K(t,e,n){if(b(t)){const e=t.toLowerCase();for(const t of this.#j.values())if(e===t.topicHash)return t;return null}if(-1===t.indexOf(\\\"(\\\")){const r=[];for(const[e,n]of this.#j)e.split(\\\"(\\\")[0]===t&&r.push(n);if(e){for(let t=r.length-1;t>=0;t--)r[t].inputs.length<e.length&&r.splice(t,1);for(let t=r.length-1;t>=0;t--){const n=r[t].inputs;for(let s=0;s<e.length;s++)if(ee.isTyped(e[s])&&e[s].type!==n[s].baseType){r.splice(t,1);break}}}if(0===r.length)return null;if(r.length>1&&n){f(!1,`ambiguous event description (i.e. matches ${r.map((t=>JSON.stringify(t.format()))).join(\\\", \\\")})`,\\\"key\\\",t)}return r[0]}const r=this.#j.get(fn.from(t).format());return r||null}getEventName(t){const e=this.#K(t,null,!1);return f(e,\\\"no matching event\\\",\\\"key\\\",t),e.name}hasEvent(t){return!!this.#K(t,null,!1)}getEvent(t,e){return this.#K(t,e||null,!0)}forEachEvent(t){const e=Array.from(this.#j.keys());e.sort(((t,e)=>t.localeCompare(e)));for(let n=0;n<e.length;n++){const r=e[n];t(this.#j.get(r),n)}}getError(t,e){if(b(t)){const e=t.toLowerCase();if(lr[e])return hn.from(lr[e].signature);for(const t of this.#Q.values())if(e===t.selector)return t;return null}if(-1===t.indexOf(\\\"(\\\")){const e=[];for(const[n,r]of this.#Q)n.split(\\\"(\\\")[0]===t&&e.push(r);if(0===e.length)return\\\"Error\\\"===t?hn.from(\\\"error Error(string)\\\"):\\\"Panic\\\"===t?hn.from(\\\"error Panic(uint256)\\\"):null;if(e.length>1){f(!1,`ambiguous error description (i.e. ${e.map((t=>JSON.stringify(t.format()))).join(\\\", \\\")})`,\\\"name\\\",t)}return e[0]}if(\\\"Error(string)\\\"===(t=hn.from(t).format()))return hn.from(\\\"error Error(string)\\\");if(\\\"Panic(uint256)\\\"===t)return hn.from(\\\"error Panic(uint256)\\\");const n=this.#Q.get(t);return n||null}forEachError(t){const e=Array.from(this.#Q.keys());e.sort(((t,e)=>t.localeCompare(e)));for(let n=0;n<e.length;n++){const r=e[n];t(this.#Q.get(r),n)}}_decodeParams(t,e){return this.#J.decode(t,e)}_encodeParams(t,e){return this.#J.encode(t,e)}encodeDeploy(t){return this._encodeParams(this.deploy.inputs,t||[])}decodeErrorResult(t,e){if(\\\"string\\\"==typeof t){const e=this.getError(t);f(e,\\\"unknown error\\\",\\\"fragment\\\",t),t=e}return f(x(e,0,4)===t.selector,`data signature does not match error ${t.name}.`,\\\"data\\\",e),this._decodeParams(t.inputs,x(e,4))}encodeErrorResult(t,e){if(\\\"string\\\"==typeof t){const e=this.getError(t);f(e,\\\"unknown error\\\",\\\"fragment\\\",t),t=e}return k([t.selector,this._encodeParams(t.inputs,e||[])])}decodeFunctionData(t,e){if(\\\"string\\\"==typeof t){const e=this.getFunction(t);f(e,\\\"unknown function\\\",\\\"fragment\\\",t),t=e}return f(x(e,0,4)===t.selector,`data signature does not match function ${t.name}.`,\\\"data\\\",e),this._decodeParams(t.inputs,x(e,4))}encodeFunctionData(t,e){if(\\\"string\\\"==typeof t){const e=this.getFunction(t);f(e,\\\"unknown function\\\",\\\"fragment\\\",t),t=e}return k([t.selector,this._encodeParams(t.inputs,e||[])])}decodeFunctionResult(t,e){if(\\\"string\\\"==typeof t){const e=this.getFunction(t);f(e,\\\"unknown function\\\",\\\"fragment\\\",t),t=e}let n=\\\"invalid length for result data\\\";const r=w(e);if(r.length%32==0)try{return this.#J.decode(t.outputs,r)}catch(t){n=\\\"could not decode result data\\\"}h(!1,n,\\\"BAD_DATA\\\",{value:E(r),info:{method:t.name,signature:t.format()}})}makeError(t,e){const n=y(t,\\\"data\\\"),r=En.getBuiltinCallException(\\\"call\\\",e,n);if(r.message.startsWith(\\\"execution reverted (unknown custom error)\\\")){const t=E(n.slice(0,4)),e=this.getError(t);if(e)try{const t=this.#J.decode(e.inputs,n.slice(4));r.revert={name:e.name,signature:e.format(),args:t},r.reason=r.revert.signature,r.message=`execution reverted: ${r.reason}`}catch(t){r.message=\\\"execution reverted (coult not decode custom error)\\\"}}const s=this.parseTransaction(e);return s&&(r.invocation={method:s.name,signature:s.signature,args:s.args}),r}encodeFunctionResult(t,e){if(\\\"string\\\"==typeof t){const e=this.getFunction(t);f(e,\\\"unknown function\\\",\\\"fragment\\\",t),t=e}return E(this.#J.encode(t.outputs,e||[]))}encodeFilterTopics(t,e){if(\\\"string\\\"==typeof t){const e=this.getEvent(t);f(e,\\\"unknown event\\\",\\\"eventFragment\\\",t),t=e}h(e.length<=t.inputs.length,`too many arguments for ${t.format()}`,\\\"UNEXPECTED_ARGUMENT\\\",{count:e.length,expectedCount:t.inputs.length});const n=[];t.anonymous||n.push(t.topicHash);const r=(t,e)=>\\\"string\\\"===t.type?Pe(e):\\\"bytes\\\"===t.type?jt(E(e)):(\\\"bool\\\"===t.type&&\\\"boolean\\\"==typeof e?e=e?\\\"0x01\\\":\\\"0x00\\\":t.type.match(/^u?int/)?e=M(e):t.type.match(/^bytes/)?e=N(e,32,!1):\\\"address\\\"===t.type&&this.#J.encode([\\\"address\\\"],[e]),B(E(e),32));for(e.forEach(((e,s)=>{const i=t.inputs[s];i.indexed?null==e?n.push(null):\\\"array\\\"===i.baseType||\\\"tuple\\\"===i.baseType?f(!1,\\\"filtering with tuples or arrays not supported\\\",\\\"contract.\\\"+i.name,e):Array.isArray(e)?n.push(e.map((t=>r(i,t)))):n.push(r(i,e)):f(null==e,\\\"cannot filter non-indexed parameters; must be null\\\",\\\"contract.\\\"+i.name,e)}));n.length&&null===n[n.length-1];)n.pop();return n}encodeEventLog(t,e){if(\\\"string\\\"==typeof t){const e=this.getEvent(t);f(e,\\\"unknown event\\\",\\\"eventFragment\\\",t),t=e}const n=[],r=[],s=[];return t.anonymous||n.push(t.topicHash),f(e.length===t.inputs.length,\\\"event arguments/values mismatch\\\",\\\"values\\\",e),t.inputs.forEach(((t,i)=>{const o=e[i];if(t.indexed)if(\\\"string\\\"===t.type)n.push(Pe(o));else if(\\\"bytes\\\"===t.type)n.push(jt(o));else{if(\\\"tuple\\\"===t.baseType||\\\"array\\\"===t.baseType)throw new Error(\\\"not implemented\\\");n.push(this.#J.encode([t.type],[o]))}else r.push(t),s.push(o)})),{data:this.#J.encode(r,s),topics:n}}decodeEventLog(t,e,n){if(\\\"string\\\"==typeof t){const e=this.getEvent(t);f(e,\\\"unknown event\\\",\\\"eventFragment\\\",t),t=e}if(null!=n&&!t.anonymous){const e=t.topicHash;f(b(n[0],32)&&n[0].toLowerCase()===e,\\\"fragment/topic mismatch\\\",\\\"topics[0]\\\",n[0]),n=n.slice(1)}const r=[],s=[],i=[];t.inputs.forEach(((t,e)=>{t.indexed?\\\"string\\\"===t.type||\\\"bytes\\\"===t.type||\\\"tuple\\\"===t.baseType||\\\"array\\\"===t.baseType?(r.push(an.from({type:\\\"bytes32\\\",name:t.name})),i.push(!0)):(r.push(t),i.push(!1)):(s.push(t),i.push(!1))}));const o=null!=n?this.#J.decode(r,k(n)):null,a=this.#J.decode(s,e,!0),c=[],l=[];let u=0,h=0;return t.inputs.forEach(((t,e)=>{let n=null;if(t.indexed)if(null==o)n=new ar(null);else if(i[e])n=new ar(o[h++]);else try{n=o[h++]}catch(t){n=t}else try{n=a[u++]}catch(t){n=t}c.push(n),l.push(t.name||null)})),W.fromItems(c,l)}parseTransaction(t){const e=y(t.data,\\\"tx.data\\\"),n=S(null!=t.value?t.value:0,\\\"tx.value\\\"),r=this.getFunction(E(e.slice(0,4)));if(!r)return null;const s=this.#J.decode(r.inputs,e.slice(4));return new ir(r,r.selector,s,n)}parseCallResult(t){throw new Error(\\\"@TODO\\\")}parseLog(t){const e=this.getEvent(t.topics[0]);return!e||e.anonymous?null:new sr(e,e.topicHash,this.decodeEventLog(e,t.data,t.topics))}parseError(t){const e=E(t),n=this.getError(x(e,0,4));if(!n)return null;const r=this.#J.decode(n.inputs,x(e,4));return new or(n,n.selector,r)}static from(t){return t instanceof ur?t:\\\"string\\\"==typeof t?new ur(JSON.parse(t)):\\\"function\\\"==typeof t.formatJson?new ur(t.formatJson()):\\\"function\\\"==typeof t.format?new ur(t.format(\\\"json\\\")):new ur(t)}}const hr=BigInt(0);function fr(t){return null==t?null:t}function dr(t){return null==t?null:t.toString()}class pr{gasPrice;maxFeePerGas;maxPriorityFeePerGas;constructor(t,e,n){o(this,{gasPrice:fr(t),maxFeePerGas:fr(e),maxPriorityFeePerGas:fr(n)})}toJSON(){const{gasPrice:t,maxFeePerGas:e,maxPriorityFeePerGas:n}=this;return{_type:\\\"FeeData\\\",gasPrice:dr(t),maxFeePerGas:dr(e),maxPriorityFeePerGas:dr(n)}}}function gr(t){const e={};t.to&&(e.to=t.to),t.from&&(e.from=t.from),t.data&&(e.data=E(t.data));const n=\\\"chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value\\\".split(/,/);for(const r of n)r in t&&null!=t[r]&&(e[r]=S(t[r],`request.${r}`));const r=\\\"type,nonce\\\".split(/,/);for(const n of r)n in t&&null!=t[n]&&(e[n]=L(t[n],`request.${n}`));return t.accessList&&(e.accessList=jn(t.accessList)),\\\"blockTag\\\"in t&&(e.blockTag=t.blockTag),\\\"enableCcipRead\\\"in t&&(e.enableCcipRead=!!t.enableCcipRead),\\\"customData\\\"in t&&(e.customData=t.customData),\\\"blobVersionedHashes\\\"in t&&t.blobVersionedHashes&&(e.blobVersionedHashes=t.blobVersionedHashes.slice()),\\\"kzg\\\"in t&&(e.kzg=t.kzg),\\\"blobs\\\"in t&&t.blobs&&(e.blobs=t.blobs.map((t=>A(t)?E(t):Object.assign({},t)))),e}class mr{provider;number;hash;timestamp;parentHash;parentBeaconBlockRoot;nonce;difficulty;gasLimit;gasUsed;stateRoot;receiptsRoot;blobGasUsed;excessBlobGas;miner;prevRandao;extraData;baseFeePerGas;#q;constructor(t,e){this.#q=t.transactions.map((t=>\\\"string\\\"!=typeof t?new br(t,e):t)),o(this,{provider:e,hash:fr(t.hash),number:t.number,timestamp:t.timestamp,parentHash:t.parentHash,parentBeaconBlockRoot:t.parentBeaconBlockRoot,nonce:t.nonce,difficulty:t.difficulty,gasLimit:t.gasLimit,gasUsed:t.gasUsed,blobGasUsed:t.blobGasUsed,excessBlobGas:t.excessBlobGas,miner:t.miner,prevRandao:fr(t.prevRandao),extraData:t.extraData,baseFeePerGas:fr(t.baseFeePerGas),stateRoot:t.stateRoot,receiptsRoot:t.receiptsRoot})}get transactions(){return this.#q.map((t=>\\\"string\\\"==typeof t?t:t.hash))}get prefetchedTransactions(){const t=this.#q.slice();return 0===t.length?[]:(h(\\\"object\\\"==typeof t[0],\\\"transactions were not prefetched with block request\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"transactionResponses()\\\"}),t)}toJSON(){const{baseFeePerGas:t,difficulty:e,extraData:n,gasLimit:r,gasUsed:s,hash:i,miner:o,prevRandao:a,nonce:c,number:l,parentHash:u,parentBeaconBlockRoot:h,stateRoot:f,receiptsRoot:d,timestamp:p,transactions:g}=this;return{_type:\\\"Block\\\",baseFeePerGas:dr(t),difficulty:dr(e),extraData:n,gasLimit:dr(r),gasUsed:dr(s),blobGasUsed:dr(this.blobGasUsed),excessBlobGas:dr(this.excessBlobGas),hash:i,miner:o,prevRandao:a,nonce:c,number:l,parentHash:u,timestamp:p,parentBeaconBlockRoot:h,stateRoot:f,receiptsRoot:d,transactions:g}}[Symbol.iterator](){let t=0;const e=this.transactions;return{next:()=>t<this.length?{value:e[t++],done:!1}:{value:void 0,done:!0}}}get length(){return this.#q.length}get date(){return null==this.timestamp?null:new Date(1e3*this.timestamp)}async getTransaction(t){let e;if(\\\"number\\\"==typeof t)e=this.#q[t];else{const n=t.toLowerCase();for(const t of this.#q){if(\\\"string\\\"==typeof t){if(t!==n)continue;e=t;break}if(t.hash!==n){e=t;break}}}if(null==e)throw new Error(\\\"no such tx\\\");return\\\"string\\\"==typeof e?await this.provider.getTransaction(e):e}getPrefetchedTransaction(t){const e=this.prefetchedTransactions;if(\\\"number\\\"==typeof t)return e[t];t=t.toLowerCase();for(const n of e)if(n.hash===t)return n;f(!1,\\\"no matching transaction\\\",\\\"indexOrHash\\\",t)}isMined(){return!!this.hash}isLondon(){return!!this.baseFeePerGas}orphanedEvent(){if(!this.isMined())throw new Error(\\\"\\\");return{orphan:\\\"drop-block\\\",hash:(t=this).hash,number:t.number};var t}}class yr{provider;transactionHash;blockHash;blockNumber;removed;address;data;topics;index;transactionIndex;constructor(t,e){this.provider=e;const n=Object.freeze(t.topics.slice());o(this,{transactionHash:t.transactionHash,blockHash:t.blockHash,blockNumber:t.blockNumber,removed:t.removed,address:t.address,data:t.data,topics:n,index:t.index,transactionIndex:t.transactionIndex})}toJSON(){const{address:t,blockHash:e,blockNumber:n,data:r,index:s,removed:i,topics:o,transactionHash:a,transactionIndex:c}=this;return{_type:\\\"log\\\",address:t,blockHash:e,blockNumber:n,data:r,index:s,removed:i,topics:o,transactionHash:a,transactionIndex:c}}async getBlock(){const t=await this.provider.getBlock(this.blockHash);return h(!!t,\\\"failed to find transaction\\\",\\\"UNKNOWN_ERROR\\\",{}),t}async getTransaction(){const t=await this.provider.getTransaction(this.transactionHash);return h(!!t,\\\"failed to find transaction\\\",\\\"UNKNOWN_ERROR\\\",{}),t}async getTransactionReceipt(){const t=await this.provider.getTransactionReceipt(this.transactionHash);return h(!!t,\\\"failed to find transaction receipt\\\",\\\"UNKNOWN_ERROR\\\",{}),t}removedEvent(){return{orphan:\\\"drop-log\\\",log:{transactionHash:(t=this).transactionHash,blockHash:t.blockHash,blockNumber:t.blockNumber,address:t.address,data:t.data,topics:Object.freeze(t.topics.slice()),index:t.index}};var t}}class wr{provider;to;from;contractAddress;hash;index;blockHash;blockNumber;logsBloom;gasUsed;blobGasUsed;cumulativeGasUsed;gasPrice;blobGasPrice;type;status;root;#_;constructor(t,e){this.#_=Object.freeze(t.logs.map((t=>new yr(t,e))));let n=hr;null!=t.effectiveGasPrice?n=t.effectiveGasPrice:null!=t.gasPrice&&(n=t.gasPrice),o(this,{provider:e,to:t.to,from:t.from,contractAddress:t.contractAddress,hash:t.hash,index:t.index,blockHash:t.blockHash,blockNumber:t.blockNumber,logsBloom:t.logsBloom,gasUsed:t.gasUsed,cumulativeGasUsed:t.cumulativeGasUsed,blobGasUsed:t.blobGasUsed,gasPrice:n,blobGasPrice:t.blobGasPrice,type:t.type,status:t.status,root:t.root})}get logs(){return this.#_}toJSON(){const{to:t,from:e,contractAddress:n,hash:r,index:s,blockHash:i,blockNumber:o,logsBloom:a,logs:c,status:l,root:u}=this;return{_type:\\\"TransactionReceipt\\\",blockHash:i,blockNumber:o,contractAddress:n,cumulativeGasUsed:dr(this.cumulativeGasUsed),from:e,gasPrice:dr(this.gasPrice),blobGasUsed:dr(this.blobGasUsed),blobGasPrice:dr(this.blobGasPrice),gasUsed:dr(this.gasUsed),hash:r,index:s,logs:c,logsBloom:a,root:u,status:l,to:t}}get length(){return this.logs.length}[Symbol.iterator](){let t=0;return{next:()=>t<this.length?{value:this.logs[t++],done:!1}:{value:void 0,done:!0}}}get fee(){return this.gasUsed*this.gasPrice}async getBlock(){const t=await this.provider.getBlock(this.blockHash);if(null==t)throw new Error(\\\"TODO\\\");return t}async getTransaction(){const t=await this.provider.getTransaction(this.hash);if(null==t)throw new Error(\\\"TODO\\\");return t}async getResult(){return await this.provider.getTransactionResult(this.hash)}async confirmations(){return await this.provider.getBlockNumber()-this.blockNumber+1}removedEvent(){return vr(this)}reorderedEvent(t){return h(!t||t.isMined(),\\\"unmined 'other' transction cannot be orphaned\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"reorderedEvent(other)\\\"}),Ar(this,t)}}class br{provider;blockNumber;blockHash;index;hash;type;to;from;nonce;gasLimit;gasPrice;maxPriorityFeePerGas;maxFeePerGas;maxFeePerBlobGas;data;value;chainId;signature;accessList;blobVersionedHashes;#Z;constructor(t,e){this.provider=e,this.blockNumber=null!=t.blockNumber?t.blockNumber:null,this.blockHash=null!=t.blockHash?t.blockHash:null,this.hash=t.hash,this.index=t.index,this.type=t.type,this.from=t.from,this.to=t.to||null,this.gasLimit=t.gasLimit,this.nonce=t.nonce,this.data=t.data,this.value=t.value,this.gasPrice=t.gasPrice,this.maxPriorityFeePerGas=null!=t.maxPriorityFeePerGas?t.maxPriorityFeePerGas:null,this.maxFeePerGas=null!=t.maxFeePerGas?t.maxFeePerGas:null,this.maxFeePerBlobGas=null!=t.maxFeePerBlobGas?t.maxFeePerBlobGas:null,this.chainId=t.chainId,this.signature=t.signature,this.accessList=null!=t.accessList?t.accessList:null,this.blobVersionedHashes=null!=t.blobVersionedHashes?t.blobVersionedHashes:null,this.#Z=-1}toJSON(){const{blockNumber:t,blockHash:e,index:n,hash:r,type:s,to:i,from:o,nonce:a,data:c,signature:l,accessList:u,blobVersionedHashes:h}=this;return{_type:\\\"TransactionResponse\\\",accessList:u,blockNumber:t,blockHash:e,blobVersionedHashes:h,chainId:dr(this.chainId),data:c,from:o,gasLimit:dr(this.gasLimit),gasPrice:dr(this.gasPrice),hash:r,maxFeePerGas:dr(this.maxFeePerGas),maxPriorityFeePerGas:dr(this.maxPriorityFeePerGas),maxFeePerBlobGas:dr(this.maxFeePerBlobGas),nonce:a,signature:l,to:i,index:n,type:s,value:dr(this.value)}}async getBlock(){let t=this.blockNumber;if(null==t){const e=await this.getTransaction();e&&(t=e.blockNumber)}if(null==t)return null;const e=this.provider.getBlock(t);if(null==e)throw new Error(\\\"TODO\\\");return e}async getTransaction(){return this.provider.getTransaction(this.hash)}async confirmations(){if(null==this.blockNumber){const{tx:t,blockNumber:e}=await i({tx:this.getTransaction(),blockNumber:this.provider.getBlockNumber()});return null==t||null==t.blockNumber?0:e-t.blockNumber+1}return await this.provider.getBlockNumber()-this.blockNumber+1}async wait(t,e){const n=null==t?1:t,r=null==e?0:e;let s=this.#Z,o=-1,a=-1===s;const l=async()=>{if(a)return null;const{blockNumber:t,nonce:e}=await i({blockNumber:this.provider.getBlockNumber(),nonce:this.provider.getTransactionCount(this.from)});if(e<this.nonce)return void(s=t);if(a)return null;const r=await this.getTransaction();if(!r||null==r.blockNumber)for(-1===o&&(o=s-3,o<this.#Z&&(o=this.#Z));o<=t;){if(a)return null;const e=await this.provider.getBlock(o,!0);if(null==e)return;for(const t of e)if(t===this.hash)return;for(let r=0;r<e.length;r++){const i=await e.getTransaction(r);if(i.from===this.from&&i.nonce===this.nonce){if(a)return null;const e=await this.provider.getTransactionReceipt(i.hash);if(null==e)return;if(t-e.blockNumber+1<n)return;let r=\\\"replaced\\\";i.data===this.data&&i.to===this.to&&i.value===this.value?r=\\\"repriced\\\":\\\"0x\\\"===i.data&&i.from===i.to&&i.value===hr&&(r=\\\"cancelled\\\"),h(!1,\\\"transaction was replaced\\\",\\\"TRANSACTION_REPLACED\\\",{cancelled:\\\"replaced\\\"===r||\\\"cancelled\\\"===r,reason:r,replacement:i.replaceableTransaction(s),hash:i.hash,receipt:e})}}o++}},f=t=>{if(null==t||0!==t.status)return t;h(!1,\\\"transaction execution reverted\\\",\\\"CALL_EXCEPTION\\\",{action:\\\"sendTransaction\\\",data:null,reason:null,invocation:null,revert:null,transaction:{to:t.to,from:t.from,data:\\\"\\\"},receipt:t})},d=await this.provider.getTransactionReceipt(this.hash);if(0===n)return f(d);if(d){if(await d.confirmations()>=n)return f(d)}else if(await l(),0===n)return null;const p=new Promise(((t,e)=>{const i=[],o=()=>{i.forEach((t=>t()))};if(i.push((()=>{a=!0})),r>0){const t=setTimeout((()=>{o(),e(u(\\\"wait for transaction timeout\\\",\\\"TIMEOUT\\\"))}),r);i.push((()=>{clearTimeout(t)}))}const h=async r=>{if(await r.confirmations()>=n){o();try{t(f(r))}catch(t){e(t)}}};if(i.push((()=>{this.provider.off(this.hash,h)})),this.provider.on(this.hash,h),s>=0){const t=async()=>{try{await l()}catch(t){if(c(t,\\\"TRANSACTION_REPLACED\\\"))return o(),void e(t)}a||this.provider.once(\\\"block\\\",t)};i.push((()=>{this.provider.off(\\\"block\\\",t)})),this.provider.once(\\\"block\\\",t)}}));return await p}isMined(){return null!=this.blockHash}isLegacy(){return 0===this.type}isBerlin(){return 1===this.type}isLondon(){return 2===this.type}isCancun(){return 3===this.type}removedEvent(){return h(this.isMined(),\\\"unmined transaction canot be orphaned\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"removeEvent()\\\"}),vr(this)}reorderedEvent(t){return h(this.isMined(),\\\"unmined transaction canot be orphaned\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"removeEvent()\\\"}),h(!t||t.isMined(),\\\"unmined 'other' transaction canot be orphaned\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"removeEvent()\\\"}),Ar(this,t)}replaceableTransaction(t){f(Number.isInteger(t)&&t>=0,\\\"invalid startBlock\\\",\\\"startBlock\\\",t);const e=new br(this,this.provider);return e.#Z=t,e}}function Ar(t,e){return{orphan:\\\"reorder-transaction\\\",tx:t,other:e}}function vr(t){return{orphan:\\\"drop-transaction\\\",tx:t}}class Er{filter;emitter;#W;constructor(t,e,n){this.#W=e,o(this,{emitter:t,filter:n})}async removeListener(){null!=this.#W&&await this.emitter.off(this.filter,this.#W)}}class kr extends yr{interface;fragment;args;constructor(t,e,n){super(t,t.provider);o(this,{args:e.decodeEventLog(n,t.data,t.topics),fragment:n,interface:e})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}class Pr extends yr{error;constructor(t,e){super(t,t.provider),o(this,{error:e})}}class xr extends wr{#Y;constructor(t,e,n){super(n,e),this.#Y=t}get logs(){return super.logs.map((t=>{const e=t.topics.length?this.#Y.getEvent(t.topics[0]):null;if(e)try{return new kr(t,this.#Y,e)}catch(e){return new Pr(t,e)}return t}))}}class Nr extends br{#Y;constructor(t,e,n){super(n,e),this.#Y=t}async wait(t,e){const n=await super.wait(t,e);return null==n?null:new xr(this.#Y,this.provider,n)}}class Br extends Er{log;constructor(t,e,n,r){super(t,e,n),o(this,{log:r})}async getBlock(){return await this.log.getBlock()}async getTransaction(){return await this.log.getTransaction()}async getTransactionReceipt(){return await this.log.getTransactionReceipt()}}class Ir extends Br{constructor(t,e,n,r,s){super(t,e,n,new kr(s,t.interface,r));o(this,{args:t.interface.decodeEventLog(r,this.log.data,this.log.topics),fragment:r})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}const Cr=BigInt(0);function Or(t){return t&&\\\"function\\\"==typeof t.call}function Rr(t){return t&&\\\"function\\\"==typeof t.estimateGas}function Tr(t){return t&&\\\"function\\\"==typeof t.resolveName}function Sr(t){return t&&\\\"function\\\"==typeof t.sendTransaction}function Fr(t){if(null!=t){if(Tr(t))return t;if(t.provider)return t.provider}}class Ur{#X;fragment;constructor(t,e,n){if(o(this,{fragment:e}),e.inputs.length<n.length)throw new Error(\\\"too many arguments\\\");const r=Dr(t.runner,\\\"resolveName\\\"),s=Tr(r)?r:null;this.#X=async function(){const r=await Promise.all(e.inputs.map(((t,e)=>null==n[e]?null:t.walkAsync(n[e],((t,e)=>\\\"address\\\"===t?Array.isArray(e)?Promise.all(e.map((t=>xn(t,s)))):xn(e,s):e)))));return t.interface.encodeFilterTopics(e,r)}()}getTopicFilter(){return this.#X}}function Dr(t,e){return null==t?null:\\\"function\\\"==typeof t[e]?t:t.provider&&\\\"function\\\"==typeof t.provider[e]?t.provider:null}function Lr(t){return null==t?null:t.provider||null}async function Mr(t,e){const n=ee.dereference(t,\\\"overrides\\\");f(\\\"object\\\"==typeof n,\\\"invalid overrides parameter\\\",\\\"overrides\\\",t);const r=gr(n);return f(null==r.to||(e||[]).indexOf(\\\"to\\\")>=0,\\\"cannot override to\\\",\\\"overrides.to\\\",r.to),f(null==r.data||(e||[]).indexOf(\\\"data\\\")>=0,\\\"cannot override data\\\",\\\"overrides.data\\\",r.data),r.from&&(r.from=r.from),r}function Gr(t){const e=async function(e){const n=await Mr(e,[\\\"data\\\"]);n.to=await t.getAddress(),n.from&&(n.from=await xn(n.from,Fr(t.runner)));const r=t.interface,s=S(n.value||Cr,\\\"overrides.value\\\")===Cr,i=\\\"0x\\\"===(n.data||\\\"0x\\\");!r.fallback||r.fallback.payable||!r.receive||i||s||f(!1,\\\"cannot send data to receive or send value to non-payable fallback\\\",\\\"overrides\\\",e),f(r.fallback||i,\\\"cannot send data to receive-only contract\\\",\\\"overrides.data\\\",n.data);return f(r.receive||r.fallback&&r.fallback.payable||s,\\\"cannot send value to non-payable fallback\\\",\\\"overrides.value\\\",n.value),f(r.fallback||i,\\\"cannot send data to receive-only contract\\\",\\\"overrides.data\\\",n.data),n},n=async function(n){const r=t.runner;h(Sr(r),\\\"contract runner does not support sending transactions\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"sendTransaction\\\"});const s=await r.sendTransaction(await e(n)),i=Lr(t.runner);return new Nr(t.interface,i,s)},r=async t=>await n(t);return o(r,{_contract:t,estimateGas:async function(n){const r=Dr(t.runner,\\\"estimateGas\\\");return h(Rr(r),\\\"contract runner does not support gas estimation\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"estimateGas\\\"}),await r.estimateGas(await e(n))},populateTransaction:e,send:n,staticCall:async function(n){const r=Dr(t.runner,\\\"call\\\");h(Or(r),\\\"contract runner does not support calling\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"call\\\"});const s=await e(n);try{return await r.call(s)}catch(e){if(l(e)&&e.data)throw t.interface.makeError(e.data,s);throw e}}}),r}function Hr(t,e){const n=function(...n){const r=t.interface.getFunction(e,n);return h(r,\\\"no matching fragment\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"fragment\\\",info:{key:e,args:n}}),r},r=async function(...e){const r=n(...e);let s={};if(r.inputs.length+1===e.length&&(s=await Mr(e.pop()),s.from&&(s.from=await xn(s.from,Fr(t.runner)))),r.inputs.length!==e.length)throw new Error(\\\"internal error: fragment inputs doesn't match arguments; should not happen\\\");const o=await async function(t,e,n){const r=Dr(t,\\\"resolveName\\\"),s=Tr(r)?r:null;return await Promise.all(e.map(((t,e)=>t.walkAsync(n[e],((t,e)=>(e=ee.dereference(e,t),\\\"address\\\"===t?xn(e,s):e))))))}(t.runner,r.inputs,e);return Object.assign({},s,await i({to:t.getAddress(),data:t.interface.encodeFunctionData(r,o)}))},s=async function(...t){const e=await c(...t);return 1===e.length?e[0]:e},a=async function(...e){const n=t.runner;h(Sr(n),\\\"contract runner does not support sending transactions\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"sendTransaction\\\"});const s=await n.sendTransaction(await r(...e)),i=Lr(t.runner);return new Nr(t.interface,i,s)},c=async function(...e){const s=Dr(t.runner,\\\"call\\\");h(Or(s),\\\"contract runner does not support calling\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"call\\\"});const i=await r(...e);let o=\\\"0x\\\";try{o=await s.call(i)}catch(e){if(l(e)&&e.data)throw t.interface.makeError(e.data,i);throw e}const a=n(...e);return t.interface.decodeFunctionResult(a,o)},u=async(...t)=>n(...t).constant?await s(...t):await a(...t);return o(u,{name:t.interface.getFunctionName(e),_contract:t,_key:e,getFragment:n,estimateGas:async function(...e){const n=Dr(t.runner,\\\"estimateGas\\\");return h(Rr(n),\\\"contract runner does not support gas estimation\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"estimateGas\\\"}),await n.estimateGas(await r(...e))},populateTransaction:r,send:a,staticCall:s,staticCallResult:c}),Object.defineProperty(u,\\\"fragment\\\",{configurable:!1,enumerable:!0,get:()=>{const n=t.interface.getFunction(e);return h(n,\\\"no matching fragment\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"fragment\\\",info:{key:e}}),n}}),u}const Qr=Symbol.for(\\\"_ethersInternal_contract\\\"),jr=new WeakMap;function Vr(t){return jr.get(t[Qr])}async function Jr(t,e){let n,r=null;if(Array.isArray(e)){const r=function(e){if(b(e,32))return e;const n=t.interface.getEvent(e);return f(n,\\\"unknown fragment\\\",\\\"name\\\",e),n.topicHash};n=e.map((t=>null==t?null:Array.isArray(t)?t.map(r):r(t)))}else\\\"*\\\"===e?n=[null]:\\\"string\\\"==typeof e?b(e,32)?n=[e]:(r=t.interface.getEvent(e),f(r,\\\"unknown fragment\\\",\\\"event\\\",e),n=[r.topicHash]):(s=e)&&\\\"object\\\"==typeof s&&\\\"getTopicFilter\\\"in s&&\\\"function\\\"==typeof s.getTopicFilter&&s.fragment?n=await e.getTopicFilter():\\\"fragment\\\"in e?(r=e.fragment,n=[r.topicHash]):f(!1,\\\"unknown event name\\\",\\\"event\\\",e);var s;n=n.map((t=>{if(null==t)return null;if(Array.isArray(t)){const e=Array.from(new Set(t.map((t=>t.toLowerCase()))).values());return 1===e.length?e[0]:(e.sort(),e)}return t.toLowerCase()}));return{fragment:r,tag:n.map((t=>null==t?\\\"null\\\":Array.isArray(t)?t.join(\\\"|\\\"):t)).join(\\\"&\\\"),topics:n}}async function zr(t,e){const{subs:n}=Vr(t);return n.get((await Jr(t,e)).tag)||null}async function Kr(t,e,n){const r=Lr(t.runner);h(r,\\\"contract runner does not support subscribing\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:e});const{fragment:s,tag:i,topics:o}=await Jr(t,n),{addr:a,subs:c}=Vr(t);let l=c.get(i);if(!l){const e={address:a||t,topics:o},u=e=>{let r=s;if(null==r)try{r=t.interface.getEvent(e.topics[0])}catch(t){}if(r){const i=r,o=s?t.interface.decodeEventLog(s,e.data,e.topics):[];_r(t,n,o,(r=>new Ir(t,r,n,i,e)))}else _r(t,n,[],(r=>new Br(t,r,n,e)))};let h=[];l={tag:i,listeners:[],start:()=>{h.length||h.push(r.on(e,u))},stop:async()=>{if(0==h.length)return;let t=h;h=[],await Promise.all(t),r.off(e,u)}},c.set(i,l)}return l}let qr=Promise.resolve();async function _r(t,e,n,r){try{await qr}catch(t){}const s=async function(t,e,n,r){await qr;const s=await zr(t,e);if(!s)return!1;const i=s.listeners.length;return s.listeners=s.listeners.filter((({listener:e,once:s})=>{const i=Array.from(n);r&&i.push(r(s?null:e));try{e.call(t,...i)}catch(t){}return!s})),0===s.listeners.length&&(s.stop(),Vr(t).subs.delete(s.tag)),i>0}(t,e,n,r);return qr=s,await s}const Zr=[\\\"then\\\"];class Wr{target;interface;runner;filters;[Qr];fallback;constructor(t,e,n,r){f(\\\"string\\\"==typeof t||kn(t),\\\"invalid value for Contract target\\\",\\\"target\\\",t),null==n&&(n=null);const s=ur.from(e);let i;o(this,{target:t,runner:n,interface:s}),Object.defineProperty(this,Qr,{value:{}});let a=null,l=null;if(r){const t=Lr(n);l=new Nr(this.interface,t,r)}let h=new Map;if(\\\"string\\\"==typeof t)if(b(t))a=t,i=Promise.resolve(t);else{const e=Dr(n,\\\"resolveName\\\");if(!Tr(e))throw u(\\\"contract runner does not support name resolution\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"resolveName\\\"});i=e.resolveName(t).then((e=>{if(null==e)throw u(\\\"an ENS name used for a contract target must be correctly configured\\\",\\\"UNCONFIGURED_NAME\\\",{value:t});return Vr(this).addr=e,e}))}else i=t.getAddress().then((t=>{if(null==t)throw new Error(\\\"TODO\\\");return Vr(this).addr=t,t}));var d,p;d=this,p={addrPromise:i,addr:a,deployTx:l,subs:h},jr.set(d[Qr],p);const g=new Proxy({},{get:(t,e,n)=>{if(\\\"symbol\\\"==typeof e||Zr.indexOf(e)>=0)return Reflect.get(t,e,n);try{return this.getEvent(e)}catch(t){if(!c(t,\\\"INVALID_ARGUMENT\\\")||\\\"key\\\"!==t.argument)throw t}},has:(t,e)=>Zr.indexOf(e)>=0?Reflect.has(t,e):Reflect.has(t,e)||this.interface.hasEvent(String(e))});return o(this,{filters:g}),o(this,{fallback:s.receive||s.fallback?Gr(this):null}),new Proxy(this,{get:(t,e,n)=>{if(\\\"symbol\\\"==typeof e||e in t||Zr.indexOf(e)>=0)return Reflect.get(t,e,n);try{return t.getFunction(e)}catch(t){if(!c(t,\\\"INVALID_ARGUMENT\\\")||\\\"key\\\"!==t.argument)throw t}},has:(t,e)=>\\\"symbol\\\"==typeof e||e in t||Zr.indexOf(e)>=0?Reflect.has(t,e):t.interface.hasFunction(e)})}connect(t){return new Wr(this.target,this.interface,t)}attach(t){return new Wr(t,this.interface,this.runner)}async getAddress(){return await Vr(this).addrPromise}async getDeployedCode(){const t=Lr(this.runner);h(t,\\\"runner does not support .provider\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"getDeployedCode\\\"});const e=await t.getCode(await this.getAddress());return\\\"0x\\\"===e?null:e}async waitForDeployment(){const t=this.deploymentTransaction();if(t)return await t.wait(),this;if(null!=await this.getDeployedCode())return this;const e=Lr(this.runner);return h(null!=e,\\\"contract runner does not support .provider\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"waitForDeployment\\\"}),new Promise(((t,n)=>{const r=async()=>{try{if(null!=await this.getDeployedCode())return t(this);e.once(\\\"block\\\",r)}catch(t){n(t)}};r()}))}deploymentTransaction(){return Vr(this).deployTx}getFunction(t){\\\"string\\\"!=typeof t&&(t=t.format());return Hr(this,t)}getEvent(t){return\\\"string\\\"!=typeof t&&(t=t.format()),function(t,e){const n=function(...n){const r=t.interface.getEvent(e,n);return h(r,\\\"no matching fragment\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"fragment\\\",info:{key:e,args:n}}),r},r=function(...e){return new Ur(t,n(...e),e)};return o(r,{name:t.interface.getEventName(e),_contract:t,_key:e,getFragment:n}),Object.defineProperty(r,\\\"fragment\\\",{configurable:!1,enumerable:!0,get:()=>{const n=t.interface.getEvent(e);return h(n,\\\"no matching fragment\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"fragment\\\",info:{key:e}}),n}}),r}(this,t)}async queryTransaction(t){throw new Error(\\\"@TODO\\\")}async queryFilter(t,e,n){null==e&&(e=0),null==n&&(n=\\\"latest\\\");const{addr:r,addrPromise:s}=Vr(this),i=r||await s,{fragment:o,topics:a}=await Jr(this,t),c={address:i,topics:a,fromBlock:e,toBlock:n},l=Lr(this.runner);return h(l,\\\"contract runner does not have a provider\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"queryFilter\\\"}),(await l.getLogs(c)).map((t=>{let e=o;if(null==e)try{e=this.interface.getEvent(t.topics[0])}catch(t){}if(e)try{return new kr(t,this.interface,e)}catch(e){return new Pr(t,e)}return new yr(t,l)}))}async on(t,e){const n=await Kr(this,\\\"on\\\",t);return n.listeners.push({listener:e,once:!1}),n.start(),this}async once(t,e){const n=await Kr(this,\\\"once\\\",t);return n.listeners.push({listener:e,once:!0}),n.start(),this}async emit(t,...e){return await _r(this,t,e,null)}async listenerCount(t){if(t){const e=await zr(this,t);return e?e.listeners.length:0}const{subs:e}=Vr(this);let n=0;for(const{listeners:t}of e.values())n+=t.length;return n}async listeners(t){if(t){const e=await zr(this,t);return e?e.listeners.map((({listener:t})=>t)):[]}const{subs:e}=Vr(this);let n=[];for(const{listeners:t}of e.values())n=n.concat(t.map((({listener:t})=>t)));return n}async off(t,e){const n=await zr(this,t);if(!n)return this;if(e){const t=n.listeners.map((({listener:t})=>t)).indexOf(e);t>=0&&n.listeners.splice(t,1)}return null!=e&&0!==n.listeners.length||(n.stop(),Vr(this).subs.delete(n.tag)),this}async removeAllListeners(t){if(t){const e=await zr(this,t);if(!e)return this;e.stop(),Vr(this).subs.delete(e.tag)}else{const{subs:t}=Vr(this);for(const{tag:e,stop:n}of t.values())n(),t.delete(e)}return this}async addListener(t,e){return await this.on(t,e)}async removeListener(t,e){return await this.off(t,e)}static buildClass(t){return class extends Wr{constructor(e,n=null){super(e,t,n)}}}static from(t,e,n){null==n&&(n=null);return new this(t,e,n)}}class Yr extends(function(){return Wr}()){}var Xr=\\\"\\\";const $r=new Map([[8217,\\\"apostrophe\\\"],[8260,\\\"fraction slash\\\"],[12539,\\\"middle dot\\\"]]),ts=4;function es(t){return function(t){let e=0;return()=>t[e++]}(function(t){let e=0;function n(){return t[e++]<<8|t[e++]}let r=n(),s=1,i=[0,1];for(let t=1;t<r;t++)i.push(s+=n());let o=n(),a=e;e+=o;let c=0,l=0;function u(){return 0==c&&(l=l<<8|t[e++],c=8),l>>--c&1}const h=2**31,f=h>>>1,d=h-1;let p=0;for(let t=0;t<31;t++)p=p<<1|u();let g=[],m=0,y=h;for(;;){let t=Math.floor(((p-m+1)*s-1)/y),e=0,n=r;for(;n-e>1;){let r=e+n>>>1;t<i[r]?n=r:e=r}if(0==e)break;g.push(e);let o=m+Math.floor(y*i[e]/s),a=m+Math.floor(y*i[e+1]/s)-1;for(;0==((o^a)&f);)p=p<<1&d|u(),o=o<<1&d,a=a<<1&d|1;for(;o&~a&536870912;)p=p&f|p<<1&d>>>1|u(),o=o<<1^f,a=(a^f)<<1|f|1;m=o,y=1+a-o}let w=r-4;return g.map((e=>{switch(e-w){case 3:return w+65792+(t[a++]<<16|t[a++]<<8|t[a++]);case 2:return w+256+(t[a++]<<8|t[a++]);case 1:return w+t[a++];default:return e-1}}))}(function(t){let e=[];[...\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\"].forEach(((t,n)=>e[t.charCodeAt(0)]=n));let n=t.length,r=new Uint8Array(6*n>>3);for(let s=0,i=0,o=0,a=0;s<n;s++)a=a<<6|e[t.charCodeAt(s)],o+=6,o>=8&&(r[i++]=a>>(o-=8));return r}(t)))}function ns(t){return 1&t?~t>>1:t>>1}function rs(t,e){let n=Array(t);for(let r=0,s=0;r<t;r++)n[r]=s+=ns(e());return n}function ss(t,e=0){let n=[];for(;;){let r=t(),s=t();if(!s)break;e+=r;for(let t=0;t<s;t++)n.push(e+t);e+=s+1}return n}function is(t){return as((()=>{let e=ss(t);if(e.length)return e}))}function os(t){let e=[];for(;;){let n=t();if(0==n)break;e.push(ls(n,t))}for(;;){let n=t()-1;if(n<0)break;e.push(us(n,t))}return e.flat()}function as(t){let e=[];for(;;){let n=t(e.length);if(!n)break;e.push(n)}return e}function cs(t,e,n){let r=Array(t).fill().map((()=>[]));for(let s=0;s<e;s++)rs(t,n).forEach(((t,e)=>r[e].push(t)));return r}function ls(t,e){let n=1+e(),r=e(),s=as(e);return cs(s.length,1+t,e).flatMap(((t,e)=>{let[i,...o]=t;return Array(s[e]).fill().map(((t,e)=>{let s=e*r;return[i+e*n,o.map((t=>t+s))]}))}))}function us(t,e){return cs(1+e(),1+t,e).map((t=>[t[0],t.slice(1)]))}function hs(t){return`{${function(t){return t.toString(16).toUpperCase().padStart(2,\\\"0\\\")}(t)}}`}function fs(t){let e=[];for(let n=0,r=t.length;n<r;){let r=t.codePointAt(n);n+=r<65536?1:2,e.push(r)}return e}function ds(t){let e=t.length;if(e<4096)return String.fromCodePoint(...t);let n=[];for(let r=0;r<e;)n.push(String.fromCodePoint(...t.slice(r,r+=4096)));return n.join(\\\"\\\")}function ps(t,e){let n=t.length,r=n-e.length;for(let s=0;0==r&&s<n;s++)r=t[s]-e[s];return r}var gs=\\\"AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g\\\";const ms=44032,ys=4352,ws=4449,bs=4519,As=28,vs=21*As,Es=ms+19*vs,ks=ys+19,Ps=ws+21,xs=bs+As;function Ns(t){return t>>24&255}function Bs(t){return 16777215&t}let Is,Cs,Os,Rs;function Ts(t){return t>=ms&&t<Es}function Ss(t,e){if(t>=ys&&t<ks&&e>=ws&&e<Ps)return ms+(t-ys)*vs+(e-ws)*As;if(Ts(t)&&e>bs&&e<xs&&(t-ms)%As==0)return t+(e-bs);{let n=Rs.get(t);return n&&(n=n.get(e),n)?n:-1}}function Fs(t){Is||function(){let t=es(gs);Is=new Map(is(t).flatMap(((t,e)=>t.map((t=>[t,e+1<<24]))))),Cs=new Set(ss(t)),Os=new Map,Rs=new Map;for(let[e,n]of os(t)){if(!Cs.has(e)&&2==n.length){let[t,r]=n,s=Rs.get(t);s||(s=new Map,Rs.set(t,s)),s.set(r,e)}Os.set(e,n.reverse())}}();let e=[],n=[],r=!1;function s(t){let n=Is.get(t);n&&(r=!0,t|=n),e.push(t)}for(let r of t)for(;;){if(r<128)e.push(r);else if(Ts(r)){let t=r-ms,e=t%vs/As|0,n=t%As;s(ys+(t/vs|0)),s(ws+e),n>0&&s(bs+n)}else{let t=Os.get(r);t?n.push(...t):s(r)}if(!n.length)break;r=n.pop()}if(r&&e.length>1){let t=Ns(e[0]);for(let n=1;n<e.length;n++){let r=Ns(e[n]);if(0==r||t<=r){t=r;continue}let s=n-1;for(;;){let n=e[s+1];if(e[s+1]=e[s],e[s]=n,!s)break;if(t=Ns(e[--s]),t<=r)break}t=Ns(e[n])}}return e}function Us(t){return Fs(t).map(Bs)}function Ds(t){return function(t){let e=[],n=[],r=-1,s=0;for(let i of t){let t=Ns(i),o=Bs(i);if(-1==r)0==t?r=o:e.push(o);else if(s>0&&s>=t)0==t?(e.push(r,...n),n.length=0,r=o):n.push(o),s=t;else{let i=Ss(r,o);i>=0?r=i:0==s&&0==t?(e.push(r),r=o):(n.push(o),s=t)}}return r>=0&&e.push(r,...n),e}(Fs(t))}const Ls=45,Ms=\\\".\\\",Gs=65039,Hs=1,Qs=t=>Array.from(t);function js(t,e){return t.P.has(e)||t.Q.has(e)}class Vs extends Array{get is_emoji(){return!0}}let Js,zs,Ks,qs,_s,Zs,Ws,Ys,Xs,$s,ti,ei;function ni(){if(Js)return;let t=es(Xr);const e=()=>ss(t),n=()=>new Set(e()),r=(t,e)=>e.forEach((e=>t.add(e)));Js=new Map(os(t)),zs=n(),Ks=e(),qs=new Set(e().map((t=>Ks[t]))),Ks=new Set(Ks),_s=n(),Zs=n();let s=is(t),i=t();const o=()=>{let t=new Set;return e().forEach((e=>r(t,s[e]))),r(t,e()),t};Ws=as((e=>{let n=as(t).map((t=>t+96));if(n.length){let r=e>=i;return n[0]-=32,n=ds(n),r&&(n=`Restricted[${n}]`),{N:n,P:o(),Q:o(),M:!t(),R:r}}})),Ys=n(),Xs=new Map;let a=e().concat(Qs(Ys)).sort(((t,e)=>t-e));a.forEach(((e,n)=>{let r=t(),s=a[n]=r?a[n-r]:{V:[],M:new Map};s.V.push(e),Ys.has(e)||Xs.set(e,s)}));for(let{V:t,M:e}of new Set(Xs.values())){let n=[];for(let e of t){let t=Ws.filter((t=>js(t,e))),s=n.find((({G:e})=>t.some((t=>e.has(t)))));s||(s={G:new Set,V:[]},n.push(s)),s.V.push(e),r(s.G,t)}let s=n.flatMap((t=>Qs(t.G)));for(let{G:t,V:r}of n){let n=new Set(s.filter((e=>!t.has(e))));for(let t of r)e.set(t,n)}}$s=new Set;let c=new Set;const l=t=>$s.has(t)?c.add(t):$s.add(t);for(let t of Ws){for(let e of t.P)l(e);for(let e of t.Q)l(e)}for(let t of $s)Xs.has(t)||c.has(t)||Xs.set(t,Hs);r($s,Us($s)),ti=function(t){let e=[],n=ss(t);return function t({S:n,B:r},s,i){if(!(4&n&&i===s[s.length-1])){2&n&&(i=s[s.length-1]),1&n&&e.push(s);for(let e of r)for(let n of e.Q)t(e,[...s,n],i)}}(function e(r){let s=t(),i=as((()=>{let r=ss(t).map((t=>n[t]));if(r.length)return e(r)}));return{S:s,B:i,Q:r}}([]),[]),e}(t).map((t=>Vs.from(t))).sort(ps),ei=new Map;for(let t of ti){let e=[ei];for(let n of t){let t=e.map((t=>{let e=t.get(n);return e||(e=new Map,t.set(n,e)),e}));n===Gs?e.push(...t):e=t}for(let n of e)n.V=t}}function ri(t){return(oi(t)?\\\"\\\":`${si(ii([t]))} `)+hs(t)}function si(t){return`\\\"${t}\\\"‎`}function ii(t,e=1/0,n=hs){let r=[];var s;s=t[0],ni(),Ks.has(s)&&r.push(\\\"◌\\\"),t.length>e&&(e>>=1,t=[...t.slice(0,e),8230,...t.slice(-e)]);let i=0,o=t.length;for(let e=0;e<o;e++){let s=t[e];oi(s)&&(r.push(ds(t.slice(i,e))),r.push(n(s)),i=e+1)}return r.push(ds(t.slice(i,o))),r.join(\\\"\\\")}function oi(t){return ni(),_s.has(t)}function ai(t,e,n){if(!t)return[];ni();let r=0;return t.split(Ms).map((t=>{let s=fs(t),i={input:s,offset:r};r+=s.length+1;try{let t,r=i.tokens=fi(s,e,n),o=r.length;if(!o)throw new Error(\\\"empty label\\\");let a=i.output=r.flat();if(function(t){for(let e=t.lastIndexOf(95);e>0;)if(95!==t[--e])throw new Error(\\\"underscore allowed only at start\\\")}(a),!(i.emoji=o>1||r[0].is_emoji)&&a.every((t=>t<128)))!function(t){if(t.length>=4&&t[2]==Ls&&t[3]==Ls)throw new Error(`invalid label extension: \\\"${ds(t.slice(0,4))}\\\"`)}(a),t=\\\"ASCII\\\";else{let e=r.flatMap((t=>t.is_emoji?[]:t));if(e.length){if(Ks.has(a[0]))throw hi(\\\"leading combining mark\\\");for(let t=1;t<o;t++){let e=r[t];if(!e.is_emoji&&Ks.has(e[0]))throw hi(`emoji + combining mark: \\\"${ds(r[t-1])} + ${ii([e[0]])}\\\"`)}!function(t){let e=t[0],n=$r.get(e);if(n)throw hi(`leading ${n}`);let r=t.length,s=-1;for(let i=1;i<r;i++){e=t[i];let r=$r.get(e);if(r){if(s==i)throw hi(`${n} + ${r}`);s=i+1,n=r}}if(s==r)throw hi(`trailing ${n}`)}(a);let n=Qs(new Set(e)),[s]=function(t){let e=Ws;for(let n of t){let t=e.filter((t=>js(t,n)));if(!t.length)throw Ws.some((t=>js(t,n)))?ui(e[0],n):li(n);if(e=t,1==t.length)break}return e}(n);!function(t,e){for(let n of e)if(!js(t,n))throw ui(t,n);if(t.M){let t=Us(e);for(let e=1,n=t.length;e<n;e++)if(qs.has(t[e])){let r=e+1;for(let s;r<n&&qs.has(s=t[r]);r++)for(let n=e;n<r;n++)if(t[n]==s)throw new Error(`duplicate non-spacing marks: ${ri(s)}`);if(r-e>ts)throw new Error(`excessive non-spacing marks: ${si(ii(t.slice(e-1,r)))} (${r-e}/${ts})`);e=r}}}(s,e),function(t,e){let n,r=[];for(let t of e){let e=Xs.get(t);if(e===Hs)return;if(e){let r=e.M.get(t);if(n=n?n.filter((t=>r.has(t))):Qs(r),!n.length)return}else r.push(t)}if(n)for(let e of n)if(r.every((t=>js(e,t))))throw new Error(`whole-script confusable: ${t.N}/${e.N}`)}(s,n),t=s.N}else t=\\\"Emoji\\\"}i.type=t}catch(t){i.error=t}return i}))}function ci(t){return t.map((({input:e,error:n,output:r})=>{if(n){let r=n.message;throw new Error(1==t.length?r:`Invalid label ${si(ii(e,63))}: ${r}`)}return ds(r)})).join(Ms)}function li(t){return new Error(`disallowed character: ${ri(t)}`)}function ui(t,e){let n=ri(e),r=Ws.find((t=>t.P.has(e)));return r&&(n=`${r.N} ${n}`),new Error(`illegal mixture: ${t.N} + ${n}`)}function hi(t){return new Error(`illegal placement: ${t}`)}function fi(t,e,n){let r=[],s=[];for(t=t.slice().reverse();t.length;){let i=pi(t);if(i)s.length&&(r.push(e(s)),s=[]),r.push(n(i));else{let e=t.pop();if($s.has(e))s.push(e);else{let t=Js.get(e);if(t)s.push(...t);else if(!zs.has(e))throw li(e)}}}return s.length&&r.push(e(s)),r}function di(t){return t.filter((t=>t!=Gs))}function pi(t,e){let n,r=ei,s=t.length;for(;s&&(r=r.get(t[--s]),r);){let{V:i}=r;i&&(n=i,e&&e.push(...t.slice(s).reverse()),t.length=s)}return n}const gi=new Uint8Array(32);function mi(t){return f(0!==t.length,\\\"invalid ENS name; empty component\\\",\\\"comp\\\",t),t}function yi(t){const e=Ae(function(t){try{if(0===t.length)throw new Error(\\\"empty label\\\");return function(t){return ci(ai(t,Ds,di))}(t)}catch(e){f(!1,`invalid ENS name (${e.message})`,\\\"name\\\",t)}}(t)),n=[];if(0===t.length)return n;let r=0;for(let t=0;t<e.length;t++){46===e[t]&&(n.push(mi(e.slice(r,t))),r=t+1)}return f(r<e.length,\\\"invalid ENS name; empty component\\\",\\\"name\\\",t),n.push(mi(e.slice(r))),n}function wi(t){f(\\\"string\\\"==typeof t,\\\"invalid ENS name; not a string\\\",\\\"name\\\",t),f(t.length,\\\"invalid ENS name (empty label)\\\",\\\"name\\\",t);let e=gi;const n=yi(t);for(;n.length;)e=jt(k([e,jt(n.pop())]));return E(e)}function bi(t,e){const n=null!=e?e:63;return f(n<=255,\\\"DNS encoded label cannot exceed 255\\\",\\\"length\\\",n),E(k(yi(t).map((e=>{f(e.length<=n,`label ${JSON.stringify(t)} exceeds ${n} bytes`,\\\"name\\\",t);const r=new Uint8Array(e.length+1);return r.set(e,1),r[0]=r.length-1,r}))))+\\\"00\\\"}gi.fill(0);class Ai extends At{constructor(t,e,n,r){super(),this.blockLen=t,this.outputLen=e,this.padOffset=n,this.isLE=r,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(t),this.view=yt(this.buffer)}update(t){st(this);const{view:e,buffer:n,blockLen:r}=this,s=(t=bt(t)).length;for(let i=0;i<s;){const o=Math.min(r-this.pos,s-i);if(o!==r)n.set(t.subarray(i,i+o),this.pos),this.pos+=o,i+=o,this.pos===r&&(this.process(e,0),this.pos=0);else{const e=yt(t);for(;r<=s-i;i+=r)this.process(e,i)}}return this.length+=t.length,this.roundClean(),this}digestInto(t){st(this),it(t,this),this.finished=!0;const{buffer:e,view:n,blockLen:r,isLE:s}=this;let{pos:i}=this;e[i++]=128,this.buffer.subarray(i).fill(0),this.padOffset>r-i&&(this.process(n,0),i=0);for(let t=i;t<r;t++)e[t]=0;!function(t,e,n,r){if(\\\"function\\\"==typeof t.setBigUint64)return t.setBigUint64(e,n,r);const s=BigInt(32),i=BigInt(4294967295),o=Number(n>>s&i),a=Number(n&i),c=r?4:0,l=r?0:4;t.setUint32(e+c,o,r),t.setUint32(e+l,a,r)}(n,r-8,BigInt(8*this.length),s),this.process(n,0);const o=yt(t),a=this.outputLen;if(a%4)throw new Error(\\\"_sha2: outputLen should be aligned to 32bit\\\");const c=a/4,l=this.get();if(c>l.length)throw new Error(\\\"_sha2: outputLen bigger than state\\\");for(let t=0;t<c;t++)o.setUint32(4*t,l[t],s)}digest(){const{buffer:t,outputLen:e}=this;this.digestInto(t);const n=t.slice(0,e);return this.destroy(),n}_cloneInto(t){t||(t=new this.constructor),t.set(...this.get());const{blockLen:e,buffer:n,length:r,finished:s,destroyed:i,pos:o}=this;return t.length=r,t.pos=o,t.finished=s,t.destroyed=i,r%e&&t.buffer.set(n),t}}const vi=(t,e,n)=>t&e^~t&n,Ei=(t,e,n)=>t&e^t&n^e&n,ki=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),Pi=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),xi=new Uint32Array(64);class Ni extends Ai{constructor(){super(64,32,8,!1),this.A=0|Pi[0],this.B=0|Pi[1],this.C=0|Pi[2],this.D=0|Pi[3],this.E=0|Pi[4],this.F=0|Pi[5],this.G=0|Pi[6],this.H=0|Pi[7]}get(){const{A:t,B:e,C:n,D:r,E:s,F:i,G:o,H:a}=this;return[t,e,n,r,s,i,o,a]}set(t,e,n,r,s,i,o,a){this.A=0|t,this.B=0|e,this.C=0|n,this.D=0|r,this.E=0|s,this.F=0|i,this.G=0|o,this.H=0|a}process(t,e){for(let n=0;n<16;n++,e+=4)xi[n]=t.getUint32(e,!1);for(let t=16;t<64;t++){const e=xi[t-15],n=xi[t-2],r=wt(e,7)^wt(e,18)^e>>>3,s=wt(n,17)^wt(n,19)^n>>>10;xi[t]=s+xi[t-7]+r+xi[t-16]|0}let{A:n,B:r,C:s,D:i,E:o,F:a,G:c,H:l}=this;for(let t=0;t<64;t++){const e=l+(wt(o,6)^wt(o,11)^wt(o,25))+vi(o,a,c)+ki[t]+xi[t]|0,u=(wt(n,2)^wt(n,13)^wt(n,22))+Ei(n,r,s)|0;l=c,c=a,a=o,o=i+e|0,i=s,s=r,r=n,n=e+u|0}n=n+this.A|0,r=r+this.B|0,s=s+this.C|0,i=i+this.D|0,o=o+this.E|0,a=a+this.F|0,c=c+this.G|0,l=l+this.H|0,this.set(n,r,s,i,o,a,c,l)}roundClean(){xi.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const Bi=vt((()=>new Ni)),[Ii,Ci]=pt.split([\\\"0x428a2f98d728ae22\\\",\\\"0x7137449123ef65cd\\\",\\\"0xb5c0fbcfec4d3b2f\\\",\\\"0xe9b5dba58189dbbc\\\",\\\"0x3956c25bf348b538\\\",\\\"0x59f111f1b605d019\\\",\\\"0x923f82a4af194f9b\\\",\\\"0xab1c5ed5da6d8118\\\",\\\"0xd807aa98a3030242\\\",\\\"0x12835b0145706fbe\\\",\\\"0x243185be4ee4b28c\\\",\\\"0x550c7dc3d5ffb4e2\\\",\\\"0x72be5d74f27b896f\\\",\\\"0x80deb1fe3b1696b1\\\",\\\"0x9bdc06a725c71235\\\",\\\"0xc19bf174cf692694\\\",\\\"0xe49b69c19ef14ad2\\\",\\\"0xefbe4786384f25e3\\\",\\\"0x0fc19dc68b8cd5b5\\\",\\\"0x240ca1cc77ac9c65\\\",\\\"0x2de92c6f592b0275\\\",\\\"0x4a7484aa6ea6e483\\\",\\\"0x5cb0a9dcbd41fbd4\\\",\\\"0x76f988da831153b5\\\",\\\"0x983e5152ee66dfab\\\",\\\"0xa831c66d2db43210\\\",\\\"0xb00327c898fb213f\\\",\\\"0xbf597fc7beef0ee4\\\",\\\"0xc6e00bf33da88fc2\\\",\\\"0xd5a79147930aa725\\\",\\\"0x06ca6351e003826f\\\",\\\"0x142929670a0e6e70\\\",\\\"0x27b70a8546d22ffc\\\",\\\"0x2e1b21385c26c926\\\",\\\"0x4d2c6dfc5ac42aed\\\",\\\"0x53380d139d95b3df\\\",\\\"0x650a73548baf63de\\\",\\\"0x766a0abb3c77b2a8\\\",\\\"0x81c2c92e47edaee6\\\",\\\"0x92722c851482353b\\\",\\\"0xa2bfe8a14cf10364\\\",\\\"0xa81a664bbc423001\\\",\\\"0xc24b8b70d0f89791\\\",\\\"0xc76c51a30654be30\\\",\\\"0xd192e819d6ef5218\\\",\\\"0xd69906245565a910\\\",\\\"0xf40e35855771202a\\\",\\\"0x106aa07032bbd1b8\\\",\\\"0x19a4c116b8d2d0c8\\\",\\\"0x1e376c085141ab53\\\",\\\"0x2748774cdf8eeb99\\\",\\\"0x34b0bcb5e19b48a8\\\",\\\"0x391c0cb3c5c95a63\\\",\\\"0x4ed8aa4ae3418acb\\\",\\\"0x5b9cca4f7763e373\\\",\\\"0x682e6ff3d6b2b8a3\\\",\\\"0x748f82ee5defb2fc\\\",\\\"0x78a5636f43172f60\\\",\\\"0x84c87814a1f0ab72\\\",\\\"0x8cc702081a6439ec\\\",\\\"0x90befffa23631e28\\\",\\\"0xa4506cebde82bde9\\\",\\\"0xbef9a3f7b2c67915\\\",\\\"0xc67178f2e372532b\\\",\\\"0xca273eceea26619c\\\",\\\"0xd186b8c721c0c207\\\",\\\"0xeada7dd6cde0eb1e\\\",\\\"0xf57d4f7fee6ed178\\\",\\\"0x06f067aa72176fba\\\",\\\"0x0a637dc5a2c898a6\\\",\\\"0x113f9804bef90dae\\\",\\\"0x1b710b35131c471b\\\",\\\"0x28db77f523047d84\\\",\\\"0x32caab7b40c72493\\\",\\\"0x3c9ebe0a15c9bebc\\\",\\\"0x431d67c49c100d4c\\\",\\\"0x4cc5d4becb3e42b6\\\",\\\"0x597f299cfc657e2a\\\",\\\"0x5fcb6fab3ad6faec\\\",\\\"0x6c44198c4a475817\\\"].map((t=>BigInt(t)))),Oi=new Uint32Array(80),Ri=new Uint32Array(80);class Ti extends Ai{constructor(){super(128,64,16,!1),this.Ah=1779033703,this.Al=-205731576,this.Bh=-1150833019,this.Bl=-2067093701,this.Ch=1013904242,this.Cl=-23791573,this.Dh=-1521486534,this.Dl=1595750129,this.Eh=1359893119,this.El=-1377402159,this.Fh=-1694144372,this.Fl=725511199,this.Gh=528734635,this.Gl=-79577749,this.Hh=1541459225,this.Hl=327033209}get(){const{Ah:t,Al:e,Bh:n,Bl:r,Ch:s,Cl:i,Dh:o,Dl:a,Eh:c,El:l,Fh:u,Fl:h,Gh:f,Gl:d,Hh:p,Hl:g}=this;return[t,e,n,r,s,i,o,a,c,l,u,h,f,d,p,g]}set(t,e,n,r,s,i,o,a,c,l,u,h,f,d,p,g){this.Ah=0|t,this.Al=0|e,this.Bh=0|n,this.Bl=0|r,this.Ch=0|s,this.Cl=0|i,this.Dh=0|o,this.Dl=0|a,this.Eh=0|c,this.El=0|l,this.Fh=0|u,this.Fl=0|h,this.Gh=0|f,this.Gl=0|d,this.Hh=0|p,this.Hl=0|g}process(t,e){for(let n=0;n<16;n++,e+=4)Oi[n]=t.getUint32(e),Ri[n]=t.getUint32(e+=4);for(let t=16;t<80;t++){const e=0|Oi[t-15],n=0|Ri[t-15],r=pt.rotrSH(e,n,1)^pt.rotrSH(e,n,8)^pt.shrSH(e,n,7),s=pt.rotrSL(e,n,1)^pt.rotrSL(e,n,8)^pt.shrSL(e,n,7),i=0|Oi[t-2],o=0|Ri[t-2],a=pt.rotrSH(i,o,19)^pt.rotrBH(i,o,61)^pt.shrSH(i,o,6),c=pt.rotrSL(i,o,19)^pt.rotrBL(i,o,61)^pt.shrSL(i,o,6),l=pt.add4L(s,c,Ri[t-7],Ri[t-16]),u=pt.add4H(l,r,a,Oi[t-7],Oi[t-16]);Oi[t]=0|u,Ri[t]=0|l}let{Ah:n,Al:r,Bh:s,Bl:i,Ch:o,Cl:a,Dh:c,Dl:l,Eh:u,El:h,Fh:f,Fl:d,Gh:p,Gl:g,Hh:m,Hl:y}=this;for(let t=0;t<80;t++){const e=pt.rotrSH(u,h,14)^pt.rotrSH(u,h,18)^pt.rotrBH(u,h,41),w=pt.rotrSL(u,h,14)^pt.rotrSL(u,h,18)^pt.rotrBL(u,h,41),b=u&f^~u&p,A=h&d^~h&g,v=pt.add5L(y,w,A,Ci[t],Ri[t]),E=pt.add5H(v,m,e,b,Ii[t],Oi[t]),k=0|v,P=pt.rotrSH(n,r,28)^pt.rotrBH(n,r,34)^pt.rotrBH(n,r,39),x=pt.rotrSL(n,r,28)^pt.rotrBL(n,r,34)^pt.rotrBL(n,r,39),N=n&s^n&o^s&o,B=r&i^r&a^i&a;m=0|p,y=0|g,p=0|f,g=0|d,f=0|u,d=0|h,({h:u,l:h}=pt.add(0|c,0|l,0|E,0|k)),c=0|o,l=0|a,o=0|s,a=0|i,s=0|n,i=0|r;const I=pt.add3L(k,x,B);n=pt.add3H(I,E,P,N),r=0|I}({h:n,l:r}=pt.add(0|this.Ah,0|this.Al,0|n,0|r)),({h:s,l:i}=pt.add(0|this.Bh,0|this.Bl,0|s,0|i)),({h:o,l:a}=pt.add(0|this.Ch,0|this.Cl,0|o,0|a)),({h:c,l}=pt.add(0|this.Dh,0|this.Dl,0|c,0|l)),({h:u,l:h}=pt.add(0|this.Eh,0|this.El,0|u,0|h)),({h:f,l:d}=pt.add(0|this.Fh,0|this.Fl,0|f,0|d)),({h:p,l:g}=pt.add(0|this.Gh,0|this.Gl,0|p,0|g)),({h:m,l:y}=pt.add(0|this.Hh,0|this.Hl,0|m,0|y)),this.set(n,r,s,i,o,a,c,l,u,h,f,d,p,g,m,y)}roundClean(){Oi.fill(0),Ri.fill(0)}destroy(){this.buffer.fill(0),this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)}}const Si=vt((()=>new Ti));const Fi=function(){if(\\\"undefined\\\"!=typeof self)return self;if(\\\"undefined\\\"!=typeof window)return window;if(\\\"undefined\\\"!=typeof global)return global;throw new Error(\\\"unable to locate global object\\\")}();Fi.crypto||Fi.msCrypto;function Ui(t){switch(t){case\\\"sha256\\\":return Bi.create();case\\\"sha512\\\":return Si.create()}f(!1,\\\"invalid hashing algorithm name\\\",\\\"algorithm\\\",t)}const Di=function(t){return Ui(\\\"sha256\\\").update(t).digest()},Li=function(t){return Ui(\\\"sha512\\\").update(t).digest()};let Mi=Di,Gi=Li,Hi=!1,Qi=!1;function ji(t){const e=y(t,\\\"data\\\");return E(Mi(e))}function Vi(t){const e=y(t,\\\"data\\\");return E(Gi(e))}ji._=Di,ji.lock=function(){Hi=!0},ji.register=function(t){if(Hi)throw new Error(\\\"sha256 is locked\\\");Mi=t},Object.freeze(ji),Vi._=Li,Vi.lock=function(){Qi=!0},Vi.register=function(t){if(Qi)throw new Error(\\\"sha512 is locked\\\");Gi=t},Object.freeze(ji);const Ji=\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",zi=BigInt(0),Ki=BigInt(1),qi=BigInt(2),_i=BigInt(27),Zi=BigInt(28),Wi=BigInt(35),Yi={};function Xi(t){return B(G(t),32)}class $i{#$;#tt;#et;#nt;get r(){return this.#$}set r(t){f(32===P(t),\\\"invalid r\\\",\\\"value\\\",t),this.#$=E(t)}get s(){return this.#tt}set s(t){f(32===P(t),\\\"invalid s\\\",\\\"value\\\",t);const e=E(t);f(parseInt(e.substring(0,3))<8,\\\"non-canonical s\\\",\\\"value\\\",e),this.#tt=e}get v(){return this.#et}set v(t){const e=L(t,\\\"value\\\");f(27===e||28===e,\\\"invalid v\\\",\\\"v\\\",t),this.#et=e}get networkV(){return this.#nt}get legacyChainId(){const t=this.networkV;return null==t?null:$i.getChainId(t)}get yParity(){return 27===this.v?0:1}get yParityAndS(){const t=y(this.s);return this.yParity&&(t[0]|=128),E(t)}get compactSerialized(){return k([this.r,this.yParityAndS])}get serialized(){return k([this.r,this.s,this.yParity?\\\"0x1c\\\":\\\"0x1b\\\"])}constructor(t,e,n,r){g(t,Yi,\\\"Signature\\\"),this.#$=e,this.#tt=n,this.#et=r,this.#nt=null}[Symbol.for(\\\"nodejs.util.inspect.custom\\\")](){return`Signature { r: \\\"${this.r}\\\", s: \\\"${this.s}\\\", yParity: ${this.yParity}, networkV: ${this.networkV} }`}clone(){const t=new $i(Yi,this.r,this.s,this.v);return this.networkV&&(t.#nt=this.networkV),t}toJSON(){const t=this.networkV;return{_type:\\\"signature\\\",networkV:null!=t?t.toString():null,r:this.r,s:this.s,v:this.v}}static getChainId(t){const e=S(t,\\\"v\\\");return e==_i||e==Zi?zi:(f(e>=Wi,\\\"invalid EIP-155 v\\\",\\\"v\\\",t),(e-Wi)/qi)}static getChainIdV(t,e){return S(t)*qi+BigInt(35+e-27)}static getNormalizedV(t){const e=S(t);return e===zi||e===_i?27:e===Ki||e===Zi?28:(f(e>=Wi,\\\"invalid v\\\",\\\"v\\\",t),e&Ki?27:28)}static from(t){function e(e,n){f(e,n,\\\"signature\\\",t)}if(null==t)return new $i(Yi,Ji,Ji,27);if(\\\"string\\\"==typeof t){const n=y(t,\\\"signature\\\");if(64===n.length){const t=E(n.slice(0,32)),e=n.slice(32,64),r=128&e[0]?28:27;return e[0]&=127,new $i(Yi,t,E(e),r)}if(65===n.length){const t=E(n.slice(0,32)),r=n.slice(32,64);e(0==(128&r[0]),\\\"non-canonical s\\\");const s=$i.getNormalizedV(n[64]);return new $i(Yi,t,E(r),s)}e(!1,\\\"invalid raw signature length\\\")}if(t instanceof $i)return t.clone();const n=t.r;e(null!=n,\\\"missing r\\\");const r=Xi(n),s=function(t,n){if(null!=t)return Xi(t);if(null!=n){e(b(n,32),\\\"invalid yParityAndS\\\");const t=y(n);return t[0]&=127,E(t)}e(!1,\\\"missing s\\\")}(t.s,t.yParityAndS);e(0==(128&y(s)[0]),\\\"non-canonical s\\\");const{networkV:i,v:o}=function(t,n,r){if(null!=t){const e=S(t);return{networkV:e>=Wi?e:void 0,v:$i.getNormalizedV(e)}}if(null!=n)return e(b(n,32),\\\"invalid yParityAndS\\\"),{v:128&y(n)[0]?28:27};if(null!=r){switch(L(r,\\\"sig.yParity\\\")){case 0:return{v:27};case 1:return{v:28}}e(!1,\\\"invalid yParity\\\")}e(!1,\\\"missing v\\\")}(t.v,t.yParityAndS,t.yParity),a=new $i(Yi,r,s,o);return i&&(a.#nt=i),e(null==t.yParity||L(t.yParity,\\\"sig.yParity\\\")===a.yParity,\\\"yParity mismatch\\\"),e(null==t.yParityAndS||t.yParityAndS===a.yParityAndS,\\\"yParityAndS mismatch\\\"),a}}BigInt(0);const to=BigInt(1),eo=BigInt(2),no=t=>t instanceof Uint8Array,ro=Array.from({length:256},((t,e)=>e.toString(16).padStart(2,\\\"0\\\")));function so(t){if(!no(t))throw new Error(\\\"Uint8Array expected\\\");let e=\\\"\\\";for(let n=0;n<t.length;n++)e+=ro[t[n]];return e}function io(t){if(\\\"string\\\"!=typeof t)throw new Error(\\\"hex string expected, got \\\"+typeof t);return BigInt(\\\"\\\"===t?\\\"0\\\":`0x${t}`)}function oo(t){if(\\\"string\\\"!=typeof t)throw new Error(\\\"hex string expected, got \\\"+typeof t);const e=t.length;if(e%2)throw new Error(\\\"padded hex string expected, got unpadded hex of length \\\"+e);const n=new Uint8Array(e/2);for(let e=0;e<n.length;e++){const r=2*e,s=t.slice(r,r+2),i=Number.parseInt(s,16);if(Number.isNaN(i)||i<0)throw new Error(\\\"Invalid byte sequence\\\");n[e]=i}return n}function ao(t){return io(so(t))}function co(t){if(!no(t))throw new Error(\\\"Uint8Array expected\\\");return io(so(Uint8Array.from(t).reverse()))}function lo(t,e){return oo(t.toString(16).padStart(2*e,\\\"0\\\"))}function uo(t,e){return lo(t,e).reverse()}function ho(t,e,n){let r;if(\\\"string\\\"==typeof e)try{r=oo(e)}catch(n){throw new Error(`${t} must be valid hex string, got \\\"${e}\\\". Cause: ${n}`)}else{if(!no(e))throw new Error(`${t} must be hex string or Uint8Array`);r=Uint8Array.from(e)}const s=r.length;if(\\\"number\\\"==typeof n&&s!==n)throw new Error(`${t} expected ${n} bytes, got ${s}`);return r}function fo(...t){const e=new Uint8Array(t.reduce(((t,e)=>t+e.length),0));let n=0;return t.forEach((t=>{if(!no(t))throw new Error(\\\"Uint8Array expected\\\");e.set(t,n),n+=t.length})),e}const po=t=>(eo<<BigInt(t-1))-to,go=t=>new Uint8Array(t),mo=t=>Uint8Array.from(t);function yo(t,e,n){if(\\\"number\\\"!=typeof t||t<2)throw new Error(\\\"hashLen must be a number\\\");if(\\\"number\\\"!=typeof e||e<2)throw new Error(\\\"qByteLen must be a number\\\");if(\\\"function\\\"!=typeof n)throw new Error(\\\"hmacFn must be a function\\\");let r=go(t),s=go(t),i=0;const o=()=>{r.fill(1),s.fill(0),i=0},a=(...t)=>n(s,r,...t),c=(t=go())=>{s=a(mo([0]),t),r=a(),0!==t.length&&(s=a(mo([1]),t),r=a())},l=()=>{if(i++>=1e3)throw new Error(\\\"drbg: tried 1000 values\\\");let t=0;const n=[];for(;t<e;){r=a();const e=r.slice();n.push(e),t+=r.length}return fo(...n)};return(t,e)=>{let n;for(o(),c(t);!(n=e(l()));)c();return o(),n}}const wo={bigint:t=>\\\"bigint\\\"==typeof t,function:t=>\\\"function\\\"==typeof t,boolean:t=>\\\"boolean\\\"==typeof t,string:t=>\\\"string\\\"==typeof t,stringOrUint8Array:t=>\\\"string\\\"==typeof t||t instanceof Uint8Array,isSafeInteger:t=>Number.isSafeInteger(t),array:t=>Array.isArray(t),field:(t,e)=>e.Fp.isValid(t),hash:t=>\\\"function\\\"==typeof t&&Number.isSafeInteger(t.outputLen)};function bo(t,e,n={}){const r=(e,n,r)=>{const s=wo[n];if(\\\"function\\\"!=typeof s)throw new Error(`Invalid validator \\\"${n}\\\", expected function`);const i=t[e];if(!(r&&void 0===i||s(i,t)))throw new Error(`Invalid param ${String(e)}=${i} (${typeof i}), expected ${n}`)};for(const[t,n]of Object.entries(e))r(t,n,!1);for(const[t,e]of Object.entries(n))r(t,e,!0);return t}const Ao=BigInt(0),vo=BigInt(1),Eo=BigInt(2),ko=BigInt(3),Po=BigInt(4),xo=BigInt(5),No=BigInt(8);BigInt(9),BigInt(16);function Bo(t,e){const n=t%e;return n>=Ao?n:e+n}function Io(t,e,n){if(n<=Ao||e<Ao)throw new Error(\\\"Expected power/modulo > 0\\\");if(n===vo)return Ao;let r=vo;for(;e>Ao;)e&vo&&(r=r*t%n),t=t*t%n,e>>=vo;return r}function Co(t,e,n){let r=t;for(;e-- >Ao;)r*=r,r%=n;return r}function Oo(t,e){if(t===Ao||e<=Ao)throw new Error(`invert: expected positive integers, got n=${t} mod=${e}`);let n=Bo(t,e),r=e,s=Ao,i=vo,o=vo,a=Ao;for(;n!==Ao;){const t=r/n,e=r%n,c=s-o*t,l=i-a*t;r=n,n=e,s=o,i=a,o=c,a=l}if(r!==vo)throw new Error(\\\"invert: does not exist\\\");return Bo(s,e)}function Ro(t){if(t%Po===ko){const e=(t+vo)/Po;return function(t,n){const r=t.pow(n,e);if(!t.eql(t.sqr(r),n))throw new Error(\\\"Cannot find square root\\\");return r}}if(t%No===xo){const e=(t-xo)/No;return function(t,n){const r=t.mul(n,Eo),s=t.pow(r,e),i=t.mul(n,s),o=t.mul(t.mul(i,Eo),s),a=t.mul(i,t.sub(o,t.ONE));if(!t.eql(t.sqr(a),n))throw new Error(\\\"Cannot find square root\\\");return a}}return function(t){const e=(t-vo)/Eo;let n,r,s;for(n=t-vo,r=0;n%Eo===Ao;n/=Eo,r++);for(s=Eo;s<t&&Io(s,e,t)!==t-vo;s++);if(1===r){const e=(t+vo)/Po;return function(t,n){const r=t.pow(n,e);if(!t.eql(t.sqr(r),n))throw new Error(\\\"Cannot find square root\\\");return r}}const i=(n+vo)/Eo;return function(t,o){if(t.pow(o,e)===t.neg(t.ONE))throw new Error(\\\"Cannot find square root\\\");let a=r,c=t.pow(t.mul(t.ONE,s),n),l=t.pow(o,i),u=t.pow(o,n);for(;!t.eql(u,t.ONE);){if(t.eql(u,t.ZERO))return t.ZERO;let e=1;for(let n=t.sqr(u);e<a&&!t.eql(n,t.ONE);e++)n=t.sqr(n);const n=t.pow(c,vo<<BigInt(a-e-1));c=t.sqr(n),l=t.mul(l,n),u=t.mul(u,c),a=e}return l}}(t)}const To=[\\\"create\\\",\\\"isValid\\\",\\\"is0\\\",\\\"neg\\\",\\\"inv\\\",\\\"sqrt\\\",\\\"sqr\\\",\\\"eql\\\",\\\"add\\\",\\\"sub\\\",\\\"mul\\\",\\\"pow\\\",\\\"div\\\",\\\"addN\\\",\\\"subN\\\",\\\"mulN\\\",\\\"sqrN\\\"];function So(t,e){const n=void 0!==e?e:t.toString(2).length;return{nBitLength:n,nByteLength:Math.ceil(n/8)}}function Fo(t){if(\\\"bigint\\\"!=typeof t)throw new Error(\\\"field order must be bigint\\\");const e=t.toString(2).length;return Math.ceil(e/8)}function Uo(t){const e=Fo(t);return e+Math.ceil(e/2)}class Do extends At{constructor(t,e){super(),this.finished=!1,this.destroyed=!1,rt(t);const n=bt(e);if(this.iHash=t.create(),\\\"function\\\"!=typeof this.iHash.update)throw new Error(\\\"Expected instance of class which extends utils.Hash\\\");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const r=this.blockLen,s=new Uint8Array(r);s.set(n.length>r?t.create().update(n).digest():n);for(let t=0;t<s.length;t++)s[t]^=54;this.iHash.update(s),this.oHash=t.create();for(let t=0;t<s.length;t++)s[t]^=106;this.oHash.update(s),s.fill(0)}update(t){return st(this),this.iHash.update(t),this}digestInto(t){st(this),nt(t,this.outputLen),this.finished=!0,this.iHash.digestInto(t),this.oHash.update(t),this.oHash.digestInto(t),this.destroy()}digest(){const t=new Uint8Array(this.oHash.outputLen);return this.digestInto(t),t}_cloneInto(t){t||(t=Object.create(Object.getPrototypeOf(this),{}));const{oHash:e,iHash:n,finished:r,destroyed:s,blockLen:i,outputLen:o}=this;return t.finished=r,t.destroyed=s,t.blockLen=i,t.outputLen=o,t.oHash=e._cloneInto(t.oHash),t.iHash=n._cloneInto(t.iHash),t}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const Lo=(t,e,n)=>new Do(t,e).update(n).digest();Lo.create=(t,e)=>new Do(t,e);const Mo=BigInt(0),Go=BigInt(1);function Ho(t){return bo(t.Fp,To.reduce(((t,e)=>(t[e]=\\\"function\\\",t)),{ORDER:\\\"bigint\\\",MASK:\\\"bigint\\\",BYTES:\\\"isSafeInteger\\\",BITS:\\\"isSafeInteger\\\"})),bo(t,{n:\\\"bigint\\\",h:\\\"bigint\\\",Gx:\\\"field\\\",Gy:\\\"field\\\"},{nBitLength:\\\"isSafeInteger\\\",nByteLength:\\\"isSafeInteger\\\"}),Object.freeze({...So(t.n,t.nBitLength),...t,p:t.Fp.ORDER})}const{bytesToNumberBE:Qo,hexToBytes:jo}=n,Vo={Err:class extends Error{constructor(t=\\\"\\\"){super(t)}},_parseInt(t){const{Err:e}=Vo;if(t.length<2||2!==t[0])throw new e(\\\"Invalid signature integer tag\\\");const n=t[1],r=t.subarray(2,n+2);if(!n||r.length!==n)throw new e(\\\"Invalid signature integer: wrong length\\\");if(128&r[0])throw new e(\\\"Invalid signature integer: negative\\\");if(0===r[0]&&!(128&r[1]))throw new e(\\\"Invalid signature integer: unnecessary leading zero\\\");return{d:Qo(r),l:t.subarray(n+2)}},toSig(t){const{Err:e}=Vo,n=\\\"string\\\"==typeof t?jo(t):t;if(!(n instanceof Uint8Array))throw new Error(\\\"ui8a expected\\\");let r=n.length;if(r<2||48!=n[0])throw new e(\\\"Invalid signature tag\\\");if(n[1]!==r-2)throw new e(\\\"Invalid signature: incorrect length\\\");const{d:s,l:i}=Vo._parseInt(n.subarray(2)),{d:o,l:a}=Vo._parseInt(i);if(a.length)throw new e(\\\"Invalid signature: left bytes after parsing\\\");return{r:s,s:o}},hexFromSig(t){const e=t=>8&Number.parseInt(t[0],16)?\\\"00\\\"+t:t,n=t=>{const e=t.toString(16);return 1&e.length?`0${e}`:e},r=e(n(t.s)),s=e(n(t.r)),i=r.length/2,o=s.length/2,a=n(i),c=n(o);return`30${n(o+i+4)}02${c}${s}02${a}${r}`}},Jo=BigInt(0),zo=BigInt(1),Ko=(BigInt(2),BigInt(3));BigInt(4);function qo(t){const e=function(t){const e=Ho(t);bo(e,{a:\\\"field\\\",b:\\\"field\\\"},{allowedPrivateKeyLengths:\\\"array\\\",wrapPrivateKey:\\\"boolean\\\",isTorsionFree:\\\"function\\\",clearCofactor:\\\"function\\\",allowInfinityPoint:\\\"boolean\\\",fromBytes:\\\"function\\\",toBytes:\\\"function\\\"});const{endo:n,Fp:r,a:s}=e;if(n){if(!r.eql(s,r.ZERO))throw new Error(\\\"Endomorphism can only be defined for Koblitz curves that have a=0\\\");if(\\\"object\\\"!=typeof n||\\\"bigint\\\"!=typeof n.beta||\\\"function\\\"!=typeof n.splitScalar)throw new Error(\\\"Expected endomorphism with beta: bigint and splitScalar: function\\\")}return Object.freeze({...e})}(t),{Fp:n}=e,r=e.toBytes||((t,e,r)=>{const s=e.toAffine();return fo(Uint8Array.from([4]),n.toBytes(s.x),n.toBytes(s.y))}),s=e.fromBytes||(t=>{const e=t.subarray(1);return{x:n.fromBytes(e.subarray(0,n.BYTES)),y:n.fromBytes(e.subarray(n.BYTES,2*n.BYTES))}});function i(t){const{a:r,b:s}=e,i=n.sqr(t),o=n.mul(i,t);return n.add(n.add(o,n.mul(t,r)),s)}if(!n.eql(n.sqr(e.Gy),i(e.Gx)))throw new Error(\\\"bad generator point: equation left != right\\\");function o(t){return\\\"bigint\\\"==typeof t&&Jo<t&&t<e.n}function a(t){if(!o(t))throw new Error(\\\"Expected valid bigint: 0 < bigint < curve.n\\\")}function c(t){const{allowedPrivateKeyLengths:n,nByteLength:r,wrapPrivateKey:s,n:i}=e;if(n&&\\\"bigint\\\"!=typeof t){if(t instanceof Uint8Array&&(t=so(t)),\\\"string\\\"!=typeof t||!n.includes(t.length))throw new Error(\\\"Invalid key\\\");t=t.padStart(2*r,\\\"0\\\")}let o;try{o=\\\"bigint\\\"==typeof t?t:ao(ho(\\\"private key\\\",t,r))}catch(e){throw new Error(`private key must be ${r} bytes, hex or bigint, not ${typeof t}`)}return s&&(o=Bo(o,i)),a(o),o}const l=new Map;function u(t){if(!(t instanceof h))throw new Error(\\\"ProjectivePoint expected\\\")}class h{constructor(t,e,r){if(this.px=t,this.py=e,this.pz=r,null==t||!n.isValid(t))throw new Error(\\\"x required\\\");if(null==e||!n.isValid(e))throw new Error(\\\"y required\\\");if(null==r||!n.isValid(r))throw new Error(\\\"z required\\\")}static fromAffine(t){const{x:e,y:r}=t||{};if(!t||!n.isValid(e)||!n.isValid(r))throw new Error(\\\"invalid affine point\\\");if(t instanceof h)throw new Error(\\\"projective point not allowed\\\");const s=t=>n.eql(t,n.ZERO);return s(e)&&s(r)?h.ZERO:new h(e,r,n.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(t){const e=n.invertBatch(t.map((t=>t.pz)));return t.map(((t,n)=>t.toAffine(e[n]))).map(h.fromAffine)}static fromHex(t){const e=h.fromAffine(s(ho(\\\"pointHex\\\",t)));return e.assertValidity(),e}static fromPrivateKey(t){return h.BASE.multiply(c(t))}_setWindowSize(t){this._WINDOW_SIZE=t,l.delete(this)}assertValidity(){if(this.is0()){if(e.allowInfinityPoint&&!n.is0(this.py))return;throw new Error(\\\"bad point: ZERO\\\")}const{x:t,y:r}=this.toAffine();if(!n.isValid(t)||!n.isValid(r))throw new Error(\\\"bad point: x or y not FE\\\");const s=n.sqr(r),o=i(t);if(!n.eql(s,o))throw new Error(\\\"bad point: equation left != right\\\");if(!this.isTorsionFree())throw new Error(\\\"bad point: not in prime-order subgroup\\\")}hasEvenY(){const{y:t}=this.toAffine();if(n.isOdd)return!n.isOdd(t);throw new Error(\\\"Field doesn't support isOdd\\\")}equals(t){u(t);const{px:e,py:r,pz:s}=this,{px:i,py:o,pz:a}=t,c=n.eql(n.mul(e,a),n.mul(i,s)),l=n.eql(n.mul(r,a),n.mul(o,s));return c&&l}negate(){return new h(this.px,n.neg(this.py),this.pz)}double(){const{a:t,b:r}=e,s=n.mul(r,Ko),{px:i,py:o,pz:a}=this;let c=n.ZERO,l=n.ZERO,u=n.ZERO,f=n.mul(i,i),d=n.mul(o,o),p=n.mul(a,a),g=n.mul(i,o);return g=n.add(g,g),u=n.mul(i,a),u=n.add(u,u),c=n.mul(t,u),l=n.mul(s,p),l=n.add(c,l),c=n.sub(d,l),l=n.add(d,l),l=n.mul(c,l),c=n.mul(g,c),u=n.mul(s,u),p=n.mul(t,p),g=n.sub(f,p),g=n.mul(t,g),g=n.add(g,u),u=n.add(f,f),f=n.add(u,f),f=n.add(f,p),f=n.mul(f,g),l=n.add(l,f),p=n.mul(o,a),p=n.add(p,p),f=n.mul(p,g),c=n.sub(c,f),u=n.mul(p,d),u=n.add(u,u),u=n.add(u,u),new h(c,l,u)}add(t){u(t);const{px:r,py:s,pz:i}=this,{px:o,py:a,pz:c}=t;let l=n.ZERO,f=n.ZERO,d=n.ZERO;const p=e.a,g=n.mul(e.b,Ko);let m=n.mul(r,o),y=n.mul(s,a),w=n.mul(i,c),b=n.add(r,s),A=n.add(o,a);b=n.mul(b,A),A=n.add(m,y),b=n.sub(b,A),A=n.add(r,i);let v=n.add(o,c);return A=n.mul(A,v),v=n.add(m,w),A=n.sub(A,v),v=n.add(s,i),l=n.add(a,c),v=n.mul(v,l),l=n.add(y,w),v=n.sub(v,l),d=n.mul(p,A),l=n.mul(g,w),d=n.add(l,d),l=n.sub(y,d),d=n.add(y,d),f=n.mul(l,d),y=n.add(m,m),y=n.add(y,m),w=n.mul(p,w),A=n.mul(g,A),y=n.add(y,w),w=n.sub(m,w),w=n.mul(p,w),A=n.add(A,w),m=n.mul(y,A),f=n.add(f,m),m=n.mul(v,A),l=n.mul(b,l),l=n.sub(l,m),m=n.mul(b,y),d=n.mul(v,d),d=n.add(d,m),new h(l,f,d)}subtract(t){return this.add(t.negate())}is0(){return this.equals(h.ZERO)}wNAF(t){return d.wNAFCached(this,l,t,(t=>{const e=n.invertBatch(t.map((t=>t.pz)));return t.map(((t,n)=>t.toAffine(e[n]))).map(h.fromAffine)}))}multiplyUnsafe(t){const r=h.ZERO;if(t===Jo)return r;if(a(t),t===zo)return this;const{endo:s}=e;if(!s)return d.unsafeLadder(this,t);let{k1neg:i,k1:o,k2neg:c,k2:l}=s.splitScalar(t),u=r,f=r,p=this;for(;o>Jo||l>Jo;)o&zo&&(u=u.add(p)),l&zo&&(f=f.add(p)),p=p.double(),o>>=zo,l>>=zo;return i&&(u=u.negate()),c&&(f=f.negate()),f=new h(n.mul(f.px,s.beta),f.py,f.pz),u.add(f)}multiply(t){a(t);let r,s,i=t;const{endo:o}=e;if(o){const{k1neg:t,k1:e,k2neg:a,k2:c}=o.splitScalar(i);let{p:l,f:u}=this.wNAF(e),{p:f,f:p}=this.wNAF(c);l=d.constTimeNegate(t,l),f=d.constTimeNegate(a,f),f=new h(n.mul(f.px,o.beta),f.py,f.pz),r=l.add(f),s=u.add(p)}else{const{p:t,f:e}=this.wNAF(i);r=t,s=e}return h.normalizeZ([r,s])[0]}multiplyAndAddUnsafe(t,e,n){const r=h.BASE,s=(t,e)=>e!==Jo&&e!==zo&&t.equals(r)?t.multiply(e):t.multiplyUnsafe(e),i=s(this,e).add(s(t,n));return i.is0()?void 0:i}toAffine(t){const{px:e,py:r,pz:s}=this,i=this.is0();null==t&&(t=i?n.ONE:n.inv(s));const o=n.mul(e,t),a=n.mul(r,t),c=n.mul(s,t);if(i)return{x:n.ZERO,y:n.ZERO};if(!n.eql(c,n.ONE))throw new Error(\\\"invZ was invalid\\\");return{x:o,y:a}}isTorsionFree(){const{h:t,isTorsionFree:n}=e;if(t===zo)return!0;if(n)return n(h,this);throw new Error(\\\"isTorsionFree() has not been declared for the elliptic curve\\\")}clearCofactor(){const{h:t,clearCofactor:n}=e;return t===zo?this:n?n(h,this):this.multiplyUnsafe(e.h)}toRawBytes(t=!0){return this.assertValidity(),r(h,this,t)}toHex(t=!0){return so(this.toRawBytes(t))}}h.BASE=new h(e.Gx,e.Gy,n.ONE),h.ZERO=new h(n.ZERO,n.ONE,n.ZERO);const f=e.nBitLength,d=function(t,e){const n=(t,e)=>{const n=e.negate();return t?n:e},r=t=>({windows:Math.ceil(e/t)+1,windowSize:2**(t-1)});return{constTimeNegate:n,unsafeLadder(e,n){let r=t.ZERO,s=e;for(;n>Mo;)n&Go&&(r=r.add(s)),s=s.double(),n>>=Go;return r},precomputeWindow(t,e){const{windows:n,windowSize:s}=r(e),i=[];let o=t,a=o;for(let t=0;t<n;t++){a=o,i.push(a);for(let t=1;t<s;t++)a=a.add(o),i.push(a);o=a.double()}return i},wNAF(e,s,i){const{windows:o,windowSize:a}=r(e);let c=t.ZERO,l=t.BASE;const u=BigInt(2**e-1),h=2**e,f=BigInt(e);for(let t=0;t<o;t++){const e=t*a;let r=Number(i&u);i>>=f,r>a&&(r-=h,i+=Go);const o=e,d=e+Math.abs(r)-1,p=t%2!=0,g=r<0;0===r?l=l.add(n(p,s[o])):c=c.add(n(g,s[d]))}return{p:c,f:l}},wNAFCached(t,e,n,r){const s=t._WINDOW_SIZE||1;let i=e.get(t);return i||(i=this.precomputeWindow(t,s),1!==s&&e.set(t,r(i))),this.wNAF(s,i,n)}}}(h,e.endo?Math.ceil(f/2):f);return{CURVE:e,ProjectivePoint:h,normPrivateKeyToScalar:c,weierstrassEquation:i,isWithinCurveOrder:o}}function _o(t){const e=function(t){const e=Ho(t);return bo(e,{hash:\\\"hash\\\",hmac:\\\"function\\\",randomBytes:\\\"function\\\"},{bits2int:\\\"function\\\",bits2int_modN:\\\"function\\\",lowS:\\\"boolean\\\"}),Object.freeze({lowS:!0,...e})}(t),{Fp:n,n:r}=e,s=n.BYTES+1,i=2*n.BYTES+1;function o(t){return Bo(t,r)}function a(t){return Oo(t,r)}const{ProjectivePoint:c,normPrivateKeyToScalar:l,weierstrassEquation:u,isWithinCurveOrder:h}=qo({...e,toBytes(t,e,r){const s=e.toAffine(),i=n.toBytes(s.x),o=fo;return r?o(Uint8Array.from([e.hasEvenY()?2:3]),i):o(Uint8Array.from([4]),i,n.toBytes(s.y))},fromBytes(t){const e=t.length,r=t[0],o=t.subarray(1);if(e!==s||2!==r&&3!==r){if(e===i&&4===r){return{x:n.fromBytes(o.subarray(0,n.BYTES)),y:n.fromBytes(o.subarray(n.BYTES,2*n.BYTES))}}throw new Error(`Point of length ${e} was invalid. Expected ${s} compressed bytes or ${i} uncompressed bytes`)}{const t=ao(o);if(!(Jo<(a=t)&&a<n.ORDER))throw new Error(\\\"Point is not on curve\\\");const e=u(t);let s=n.sqrt(e);return 1==(1&r)!==((s&zo)===zo)&&(s=n.neg(s)),{x:t,y:s}}var a}}),f=t=>so(lo(t,e.nByteLength));function d(t){return t>r>>zo}const p=(t,e,n)=>ao(t.slice(e,n));class g{constructor(t,e,n){this.r=t,this.s=e,this.recovery=n,this.assertValidity()}static fromCompact(t){const n=e.nByteLength;return t=ho(\\\"compactSignature\\\",t,2*n),new g(p(t,0,n),p(t,n,2*n))}static fromDER(t){const{r:e,s:n}=Vo.toSig(ho(\\\"DER\\\",t));return new g(e,n)}assertValidity(){if(!h(this.r))throw new Error(\\\"r must be 0 < r < CURVE.n\\\");if(!h(this.s))throw new Error(\\\"s must be 0 < s < CURVE.n\\\")}addRecoveryBit(t){return new g(this.r,this.s,t)}recoverPublicKey(t){const{r,s,recovery:i}=this,l=b(ho(\\\"msgHash\\\",t));if(null==i||![0,1,2,3].includes(i))throw new Error(\\\"recovery id invalid\\\");const u=2===i||3===i?r+e.n:r;if(u>=n.ORDER)throw new Error(\\\"recovery id 2 or 3 invalid\\\");const h=0==(1&i)?\\\"02\\\":\\\"03\\\",d=c.fromHex(h+f(u)),p=a(u),g=o(-l*p),m=o(s*p),y=c.BASE.multiplyAndAddUnsafe(d,g,m);if(!y)throw new Error(\\\"point at infinify\\\");return y.assertValidity(),y}hasHighS(){return d(this.s)}normalizeS(){return this.hasHighS()?new g(this.r,o(-this.s),this.recovery):this}toDERRawBytes(){return oo(this.toDERHex())}toDERHex(){return Vo.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return oo(this.toCompactHex())}toCompactHex(){return f(this.r)+f(this.s)}}const m={isValidPrivateKey(t){try{return l(t),!0}catch(t){return!1}},normPrivateKeyToScalar:l,randomPrivateKey:()=>{const t=Uo(e.n);return function(t,e,n=!1){const r=t.length,s=Fo(e),i=Uo(e);if(r<16||r<i||r>1024)throw new Error(`expected ${i}-1024 bytes of input, got ${r}`);const o=Bo(n?ao(t):co(t),e-vo)+vo;return n?uo(o,s):lo(o,s)}(e.randomBytes(t),e.n)},precompute:(t=8,e=c.BASE)=>(e._setWindowSize(t),e.multiply(BigInt(3)),e)};function y(t){const e=t instanceof Uint8Array,n=\\\"string\\\"==typeof t,r=(e||n)&&t.length;return e?r===s||r===i:n?r===2*s||r===2*i:t instanceof c}const w=e.bits2int||function(t){const n=ao(t),r=8*t.length-e.nBitLength;return r>0?n>>BigInt(r):n},b=e.bits2int_modN||function(t){return o(w(t))},A=po(e.nBitLength);function v(t){if(\\\"bigint\\\"!=typeof t)throw new Error(\\\"bigint expected\\\");if(!(Jo<=t&&t<A))throw new Error(`bigint expected < 2^${e.nBitLength}`);return lo(t,e.nByteLength)}function E(t,r,s=k){if([\\\"recovered\\\",\\\"canonical\\\"].some((t=>t in s)))throw new Error(\\\"sign() legacy options not supported\\\");const{hash:i,randomBytes:u}=e;let{lowS:f,prehash:p,extraEntropy:m}=s;null==f&&(f=!0),t=ho(\\\"msgHash\\\",t),p&&(t=ho(\\\"prehashed msgHash\\\",i(t)));const y=b(t),A=l(r),E=[v(A),v(y)];if(null!=m){const t=!0===m?u(n.BYTES):m;E.push(ho(\\\"extraEntropy\\\",t))}const P=fo(...E),x=y;return{seed:P,k2sig:function(t){const e=w(t);if(!h(e))return;const n=a(e),r=c.BASE.multiply(e).toAffine(),s=o(r.x);if(s===Jo)return;const i=o(n*o(x+s*A));if(i===Jo)return;let l=(r.x===s?0:2)|Number(r.y&zo),u=i;return f&&d(i)&&(u=function(t){return d(t)?o(-t):t}(i),l^=1),new g(s,u,l)}}}const k={lowS:e.lowS,prehash:!1},P={lowS:e.lowS,prehash:!1};return c.BASE._setWindowSize(8),{CURVE:e,getPublicKey:function(t,e=!0){return c.fromPrivateKey(t).toRawBytes(e)},getSharedSecret:function(t,e,n=!0){if(y(t))throw new Error(\\\"first arg must be private key\\\");if(!y(e))throw new Error(\\\"second arg must be public key\\\");return c.fromHex(e).multiply(l(t)).toRawBytes(n)},sign:function(t,n,r=k){const{seed:s,k2sig:i}=E(t,n,r),o=e;return yo(o.hash.outputLen,o.nByteLength,o.hmac)(s,i)},verify:function(t,n,r,s=P){const i=t;if(n=ho(\\\"msgHash\\\",n),r=ho(\\\"publicKey\\\",r),\\\"strict\\\"in s)throw new Error(\\\"options.strict was renamed to lowS\\\");const{lowS:l,prehash:u}=s;let h,f;try{if(\\\"string\\\"==typeof i||i instanceof Uint8Array)try{h=g.fromDER(i)}catch(t){if(!(t instanceof Vo.Err))throw t;h=g.fromCompact(i)}else{if(\\\"object\\\"!=typeof i||\\\"bigint\\\"!=typeof i.r||\\\"bigint\\\"!=typeof i.s)throw new Error(\\\"PARSE\\\");{const{r:t,s:e}=i;h=new g(t,e)}}f=c.fromHex(r)}catch(t){if(\\\"PARSE\\\"===t.message)throw new Error(\\\"signature must be Signature instance, Uint8Array or hex string\\\");return!1}if(l&&h.hasHighS())return!1;u&&(n=e.hash(n));const{r:d,s:p}=h,m=b(n),y=a(p),w=o(m*y),A=o(d*y),v=c.BASE.multiplyAndAddUnsafe(f,w,A)?.toAffine();return!!v&&o(v.x)===d},ProjectivePoint:c,Signature:g,utils:m}}function Zo(t){return{hash:t,hmac:(e,...n)=>Lo(t,e,function(...t){const e=new Uint8Array(t.reduce(((t,e)=>t+e.length),0));let n=0;return t.forEach((t=>{if(!mt(t))throw new Error(\\\"Uint8Array expected\\\");e.set(t,n),n+=t.length})),e}(...n)),randomBytes:Et}}const Wo=BigInt(\\\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\\\"),Yo=BigInt(\\\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\\\"),Xo=BigInt(1),$o=BigInt(2),ta=(t,e)=>(t+e/$o)/e;function ea(t){const e=Wo,n=BigInt(3),r=BigInt(6),s=BigInt(11),i=BigInt(22),o=BigInt(23),a=BigInt(44),c=BigInt(88),l=t*t*t%e,u=l*l*t%e,h=Co(u,n,e)*u%e,f=Co(h,n,e)*u%e,d=Co(f,$o,e)*l%e,p=Co(d,s,e)*d%e,g=Co(p,i,e)*p%e,m=Co(g,a,e)*g%e,y=Co(m,c,e)*m%e,w=Co(y,a,e)*g%e,b=Co(w,n,e)*u%e,A=Co(b,o,e)*p%e,v=Co(A,r,e)*l%e,E=Co(v,$o,e);if(!na.eql(na.sqr(E),t))throw new Error(\\\"Cannot find square root\\\");return E}const na=function(t,e,n=!1,r={}){if(t<=Ao)throw new Error(`Expected Field ORDER > 0, got ${t}`);const{nBitLength:s,nByteLength:i}=So(t,e);if(i>2048)throw new Error(\\\"Field lengths over 2048 bytes are not supported\\\");const o=Ro(t),a=Object.freeze({ORDER:t,BITS:s,BYTES:i,MASK:po(s),ZERO:Ao,ONE:vo,create:e=>Bo(e,t),isValid:e=>{if(\\\"bigint\\\"!=typeof e)throw new Error(\\\"Invalid field element: expected bigint, got \\\"+typeof e);return Ao<=e&&e<t},is0:t=>t===Ao,isOdd:t=>(t&vo)===vo,neg:e=>Bo(-e,t),eql:(t,e)=>t===e,sqr:e=>Bo(e*e,t),add:(e,n)=>Bo(e+n,t),sub:(e,n)=>Bo(e-n,t),mul:(e,n)=>Bo(e*n,t),pow:(t,e)=>function(t,e,n){if(n<Ao)throw new Error(\\\"Expected power > 0\\\");if(n===Ao)return t.ONE;if(n===vo)return e;let r=t.ONE,s=e;for(;n>Ao;)n&vo&&(r=t.mul(r,s)),s=t.sqr(s),n>>=vo;return r}(a,t,e),div:(e,n)=>Bo(e*Oo(n,t),t),sqrN:t=>t*t,addN:(t,e)=>t+e,subN:(t,e)=>t-e,mulN:(t,e)=>t*e,inv:e=>Oo(e,t),sqrt:r.sqrt||(t=>o(a,t)),invertBatch:t=>function(t,e){const n=new Array(e.length),r=e.reduce(((e,r,s)=>t.is0(r)?e:(n[s]=e,t.mul(e,r))),t.ONE),s=t.inv(r);return e.reduceRight(((e,r,s)=>t.is0(r)?e:(n[s]=t.mul(e,n[s]),t.mul(e,r))),s),n}(a,t),cmov:(t,e,n)=>n?e:t,toBytes:t=>n?uo(t,i):lo(t,i),fromBytes:t=>{if(t.length!==i)throw new Error(`Fp.fromBytes: expected ${i}, got ${t.length}`);return n?co(t):ao(t)}});return Object.freeze(a)}(Wo,void 0,void 0,{sqrt:ea}),ra=function(t,e){const n=e=>_o({...t,...Zo(e)});return Object.freeze({...n(e),create:n})}({a:BigInt(0),b:BigInt(7),Fp:na,n:Yo,Gx:BigInt(\\\"55066263022277343669578718895168534326250603453777594175500187360389116729240\\\"),Gy:BigInt(\\\"32670510020758816978083085130507043184471273380659243275938904335757337482424\\\"),h:BigInt(1),lowS:!0,endo:{beta:BigInt(\\\"0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\\\"),splitScalar:t=>{const e=Yo,n=BigInt(\\\"0x3086d221a7d46bcde86c90e49284eb15\\\"),r=-Xo*BigInt(\\\"0xe4437ed6010e88286f547fa90abfe4c3\\\"),s=BigInt(\\\"0x114ca50f7a8e2f3f657c1108d9d44cfd8\\\"),i=n,o=BigInt(\\\"0x100000000000000000000000000000000\\\"),a=ta(i*t,e),c=ta(-r*t,e);let l=Bo(t-a*n-c*s,e),u=Bo(-a*r-c*i,e);const h=l>o,f=u>o;if(h&&(l=e-l),f&&(u=e-u),l>o||u>o)throw new Error(\\\"splitScalar: Endomorphism failed, k=\\\"+t);return{k1neg:h,k1:l,k2neg:f,k2:u}}}},Bi);BigInt(0);ra.ProjectivePoint;class sa{#rt;constructor(t){f(32===P(t),\\\"invalid private key\\\",\\\"privateKey\\\",\\\"[REDACTED]\\\"),this.#rt=E(t)}get privateKey(){return this.#rt}get publicKey(){return sa.computePublicKey(this.#rt)}get compressedPublicKey(){return sa.computePublicKey(this.#rt,!0)}sign(t){f(32===P(t),\\\"invalid digest length\\\",\\\"digest\\\",t);const e=ra.sign(w(t),w(this.#rt),{lowS:!0});return $i.from({r:M(e.r,32),s:M(e.s,32),v:e.recovery?28:27})}computeSharedSecret(t){const e=sa.computePublicKey(t);return E(ra.getSharedSecret(w(this.#rt),y(e),!1))}static computePublicKey(t,e){let n=y(t,\\\"key\\\");if(32===n.length){return E(ra.getPublicKey(n,!!e))}if(64===n.length){const t=new Uint8Array(65);t[0]=4,t.set(n,1),n=t}return E(ra.ProjectivePoint.fromHex(n).toRawBytes(e))}static recoverPublicKey(t,e){f(32===P(t),\\\"invalid digest length\\\",\\\"digest\\\",t);const n=$i.from(e);let r=ra.Signature.fromCompact(w(k([n.r,n.s])));r=r.addRecoveryBit(n.yParity);const s=r.recoverPublicKey(w(t));return f(null!=s,\\\"invalid signautre for digest\\\",\\\"signature\\\",e),\\\"0x\\\"+s.toHex(!1)}static addPoints(t,e,n){const r=ra.ProjectivePoint.fromHex(sa.computePublicKey(t).substring(2)),s=ra.ProjectivePoint.fromHex(sa.computePublicKey(e).substring(2));return\\\"0x\\\"+r.add(s).toHex(!!n)}}function ia(t){let e=t.toString(16);for(;e.length<2;)e=\\\"0\\\"+e;return\\\"0x\\\"+e}function oa(t,e,n){let r=0;for(let s=0;s<n;s++)r=256*r+t[e+s];return r}function aa(t,e,n,r){const s=[];for(;n<e+1+r;){const i=ca(t,n);s.push(i.result),h((n+=i.consumed)<=e+1+r,\\\"child data too short\\\",\\\"BUFFER_OVERRUN\\\",{buffer:t,length:r,offset:e})}return{consumed:1+r,result:s}}function ca(t,e){h(0!==t.length,\\\"data too short\\\",\\\"BUFFER_OVERRUN\\\",{buffer:t,length:0,offset:1});const n=e=>{h(e<=t.length,\\\"data short segment too short\\\",\\\"BUFFER_OVERRUN\\\",{buffer:t,length:t.length,offset:e})};if(t[e]>=248){const r=t[e]-247;n(e+1+r);const s=oa(t,e+1,r);return n(e+1+r+s),aa(t,e,e+1+r,r+s)}if(t[e]>=192){const r=t[e]-192;return n(e+1+r),aa(t,e,e+1,r)}if(t[e]>=184){const r=t[e]-183;n(e+1+r);const s=oa(t,e+1,r);n(e+1+r+s);return{consumed:1+r+s,result:E(t.slice(e+1+r,e+1+r+s))}}if(t[e]>=128){const r=t[e]-128;n(e+1+r);return{consumed:1+r,result:E(t.slice(e+1,e+1+r))}}return{consumed:1,result:ia(t[e])}}function la(t){const e=y(t,\\\"data\\\"),n=ca(e,0);return f(n.consumed===e.length,\\\"unexpected junk after rlp payload\\\",\\\"data\\\",t),n.result}function ua(t){const e=[];for(;t;)e.unshift(255&t),t>>=8;return e}function ha(t){if(Array.isArray(t)){let e=[];if(t.forEach((function(t){e=e.concat(ha(t))})),e.length<=55)return e.unshift(192+e.length),e;const n=ua(e.length);return n.unshift(247+n.length),n.concat(e)}const e=Array.prototype.slice.call(y(t,\\\"object\\\"));if(1===e.length&&e[0]<=127)return e;if(e.length<=55)return e.unshift(128+e.length),e;const n=ua(e.length);return n.unshift(183+n.length),n.concat(e)}const fa=\\\"0123456789abcdef\\\";function da(t){let e=\\\"0x\\\";for(const n of ha(t))e+=fa[n>>4],e+=fa[15&n];return e}function pa(t,e){return function(t){let e;return e=\\\"string\\\"==typeof t?sa.computePublicKey(t,!1):t.publicKey,Wt(jt(\\\"0x\\\"+e.substring(4)).substring(26))}(sa.recoverPublicKey(t,e))}const ga=BigInt(0),ma=BigInt(2),ya=BigInt(27),wa=BigInt(28),ba=BigInt(35),Aa=BigInt(\\\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\"),va=131072;function Ea(t,e){let n=t.toString(16);for(;n.length<2;)n=\\\"0\\\"+n;return n+=ji(e).substring(4),\\\"0x\\\"+n}function ka(t){return\\\"0x\\\"===t?null:Wt(t)}function Pa(t,e){try{return jn(t)}catch(n){f(!1,n.message,e,t)}}function xa(t,e){return\\\"0x\\\"===t?0:L(t,e)}function Na(t,e){if(\\\"0x\\\"===t)return ga;const n=S(t,e);return f(n<=Aa,\\\"value exceeds uint size\\\",e,n),n}function Ba(t,e){const n=S(t,\\\"value\\\"),r=G(n);return f(r.length<=32,\\\"value too large\\\",`tx.${e}`,n),r}function Ia(t){return jn(t).map((t=>[t.address,t.storageKeys]))}function Ca(t,e){f(Array.isArray(t),`invalid ${e}`,\\\"value\\\",t);for(let e=0;e<t.length;e++)f(b(t[e],32),\\\"invalid ${ param } hash\\\",`value[${e}]`,t[e]);return t}function Oa(t,e){let n;try{if(n=xa(e[0],\\\"yParity\\\"),0!==n&&1!==n)throw new Error(\\\"bad yParity\\\")}catch(t){f(!1,\\\"invalid yParity\\\",\\\"yParity\\\",e[0])}const r=B(e[1],32),s=B(e[2],32),i=$i.from({r,s,yParity:n});t.signature=i}class Ra{#st;#it;#e;#ot;#at;#ct;#lt;#ut;#ht;#ft;#dt;#pt;#gt;#mt;#yt;#wt;get type(){return this.#st}set type(t){switch(t){case null:this.#st=null;break;case 0:case\\\"legacy\\\":this.#st=0;break;case 1:case\\\"berlin\\\":case\\\"eip-2930\\\":this.#st=1;break;case 2:case\\\"london\\\":case\\\"eip-1559\\\":this.#st=2;break;case 3:case\\\"cancun\\\":case\\\"eip-4844\\\":this.#st=3;break;default:f(!1,\\\"unsupported transaction type\\\",\\\"type\\\",t)}}get typeName(){switch(this.type){case 0:return\\\"legacy\\\";case 1:return\\\"eip-2930\\\";case 2:return\\\"eip-1559\\\";case 3:return\\\"eip-4844\\\"}return null}get to(){const t=this.#it;return null==t&&3===this.type?rr:t}set to(t){this.#it=null==t?null:Wt(t)}get nonce(){return this.#ot}set nonce(t){this.#ot=L(t,\\\"value\\\")}get gasLimit(){return this.#at}set gasLimit(t){this.#at=S(t)}get gasPrice(){const t=this.#ct;return null!=t||0!==this.type&&1!==this.type?t:ga}set gasPrice(t){this.#ct=null==t?null:S(t,\\\"gasPrice\\\")}get maxPriorityFeePerGas(){const t=this.#lt;return null==t?2===this.type||3===this.type?ga:null:t}set maxPriorityFeePerGas(t){this.#lt=null==t?null:S(t,\\\"maxPriorityFeePerGas\\\")}get maxFeePerGas(){const t=this.#ut;return null==t?2===this.type||3===this.type?ga:null:t}set maxFeePerGas(t){this.#ut=null==t?null:S(t,\\\"maxFeePerGas\\\")}get data(){return this.#e}set data(t){this.#e=E(t)}get value(){return this.#ht}set value(t){this.#ht=S(t,\\\"value\\\")}get chainId(){return this.#ft}set chainId(t){this.#ft=S(t)}get signature(){return this.#dt||null}set signature(t){this.#dt=null==t?null:$i.from(t)}get accessList(){const t=this.#pt||null;return null==t?1===this.type||2===this.type||3===this.type?[]:null:t}set accessList(t){this.#pt=null==t?null:jn(t)}get maxFeePerBlobGas(){const t=this.#gt;return null==t&&3===this.type?ga:t}set maxFeePerBlobGas(t){this.#gt=null==t?null:S(t,\\\"maxFeePerBlobGas\\\")}get blobVersionedHashes(){let t=this.#mt;return null==t&&3===this.type?[]:t}set blobVersionedHashes(t){if(null!=t){f(Array.isArray(t),\\\"blobVersionedHashes must be an Array\\\",\\\"value\\\",t),t=t.slice();for(let e=0;e<t.length;e++)f(b(t[e],32),\\\"invalid blobVersionedHash\\\",`value[${e}]`,t[e])}this.#mt=t}get blobs(){return null==this.#wt?null:this.#wt.map((t=>Object.assign({},t)))}set blobs(t){if(null==t)return void(this.#wt=null);const e=[],n=[];for(let r=0;r<t.length;r++){const s=t[r];if(A(s)){h(this.#yt,\\\"adding a raw blob requires a KZG library\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"set blobs()\\\"});let t=y(s);if(f(t.length<=va,\\\"blob is too large\\\",`blobs[${r}]`,s),t.length!==va){const e=new Uint8Array(va);e.set(t),t=e}const i=this.#yt.blobToKzgCommitment(t),o=E(this.#yt.computeBlobKzgProof(t,i));e.push({data:E(t),commitment:E(i),proof:o}),n.push(Ea(1,i))}else{const t=E(s.commitment);e.push({data:E(s.data),commitment:t,proof:E(s.proof)}),n.push(Ea(1,t))}}this.#wt=e,this.#mt=n}get kzg(){return this.#yt}set kzg(t){this.#yt=t}constructor(){this.#st=null,this.#it=null,this.#ot=0,this.#at=ga,this.#ct=null,this.#lt=null,this.#ut=null,this.#e=\\\"0x\\\",this.#ht=ga,this.#ft=ga,this.#dt=null,this.#pt=null,this.#gt=null,this.#mt=null,this.#wt=null,this.#yt=null}get hash(){return null==this.signature?null:jt(this.#bt(!0,!1))}get unsignedHash(){return jt(this.unsignedSerialized)}get from(){return null==this.signature?null:pa(this.unsignedHash,this.signature)}get fromPublicKey(){return null==this.signature?null:sa.recoverPublicKey(this.unsignedHash,this.signature)}isSigned(){return null!=this.signature}#bt(t,e){h(!t||null!=this.signature,\\\"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\".serialized\\\"});const n=t?this.signature:null;switch(this.inferType()){case 0:return function(t,e){const n=[Ba(t.nonce,\\\"nonce\\\"),Ba(t.gasPrice||0,\\\"gasPrice\\\"),Ba(t.gasLimit,\\\"gasLimit\\\"),t.to||\\\"0x\\\",Ba(t.value,\\\"value\\\"),t.data];let r=ga;if(t.chainId!=ga)r=S(t.chainId,\\\"tx.chainId\\\"),f(!e||null==e.networkV||e.legacyChainId===r,\\\"tx.chainId/sig.v mismatch\\\",\\\"sig\\\",e);else if(t.signature){const e=t.signature.legacyChainId;null!=e&&(r=e)}if(!e)return r!==ga&&(n.push(G(r)),n.push(\\\"0x\\\"),n.push(\\\"0x\\\")),da(n);let s=BigInt(27+e.yParity);return r!==ga?s=$i.getChainIdV(r,e.v):BigInt(e.v)!==s&&f(!1,\\\"tx.chainId/sig.v mismatch\\\",\\\"sig\\\",e),n.push(G(s)),n.push(G(e.r)),n.push(G(e.s)),da(n)}(this,n);case 1:return function(t,e){const n=[Ba(t.chainId,\\\"chainId\\\"),Ba(t.nonce,\\\"nonce\\\"),Ba(t.gasPrice||0,\\\"gasPrice\\\"),Ba(t.gasLimit,\\\"gasLimit\\\"),t.to||\\\"0x\\\",Ba(t.value,\\\"value\\\"),t.data,Ia(t.accessList||[])];return e&&(n.push(Ba(e.yParity,\\\"recoveryParam\\\")),n.push(G(e.r)),n.push(G(e.s))),k([\\\"0x01\\\",da(n)])}(this,n);case 2:return function(t,e){const n=[Ba(t.chainId,\\\"chainId\\\"),Ba(t.nonce,\\\"nonce\\\"),Ba(t.maxPriorityFeePerGas||0,\\\"maxPriorityFeePerGas\\\"),Ba(t.maxFeePerGas||0,\\\"maxFeePerGas\\\"),Ba(t.gasLimit,\\\"gasLimit\\\"),t.to||\\\"0x\\\",Ba(t.value,\\\"value\\\"),t.data,Ia(t.accessList||[])];return e&&(n.push(Ba(e.yParity,\\\"yParity\\\")),n.push(G(e.r)),n.push(G(e.s))),k([\\\"0x02\\\",da(n)])}(this,n);case 3:return function(t,e,n){const r=[Ba(t.chainId,\\\"chainId\\\"),Ba(t.nonce,\\\"nonce\\\"),Ba(t.maxPriorityFeePerGas||0,\\\"maxPriorityFeePerGas\\\"),Ba(t.maxFeePerGas||0,\\\"maxFeePerGas\\\"),Ba(t.gasLimit,\\\"gasLimit\\\"),t.to||rr,Ba(t.value,\\\"value\\\"),t.data,Ia(t.accessList||[]),Ba(t.maxFeePerBlobGas||0,\\\"maxFeePerBlobGas\\\"),Ca(t.blobVersionedHashes||[],\\\"blobVersionedHashes\\\")];return e&&(r.push(Ba(e.yParity,\\\"yParity\\\")),r.push(G(e.r)),r.push(G(e.s)),n)?k([\\\"0x03\\\",da([r,n.map((t=>t.data)),n.map((t=>t.commitment)),n.map((t=>t.proof))])]):k([\\\"0x03\\\",da(r)])}(this,n,e?this.blobs:null)}h(!1,\\\"unsupported transaction type\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\".serialized\\\"})}get serialized(){return this.#bt(!0,!0)}get unsignedSerialized(){return this.#bt(!1,!1)}inferType(){const t=this.inferTypes();return t.indexOf(2)>=0?2:t.pop()}inferTypes(){const t=null!=this.gasPrice,e=null!=this.maxFeePerGas||null!=this.maxPriorityFeePerGas,n=null!=this.accessList,r=null!=this.#gt||this.#mt;null!=this.maxFeePerGas&&null!=this.maxPriorityFeePerGas&&h(this.maxFeePerGas>=this.maxPriorityFeePerGas,\\\"priorityFee cannot be more than maxFee\\\",\\\"BAD_DATA\\\",{value:this}),h(!e||0!==this.type&&1!==this.type,\\\"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\\\",\\\"BAD_DATA\\\",{value:this}),h(0!==this.type||!n,\\\"legacy transaction cannot have accessList\\\",\\\"BAD_DATA\\\",{value:this});const s=[];return null!=this.type?s.push(this.type):e?s.push(2):t?(s.push(1),n||s.push(0)):n?(s.push(1),s.push(2)):(r&&this.to||(s.push(0),s.push(1),s.push(2)),s.push(3)),s.sort(),s}isLegacy(){return 0===this.type}isBerlin(){return 1===this.type}isLondon(){return 2===this.type}isCancun(){return 3===this.type}clone(){return Ra.from(this)}toJSON(){const t=t=>null==t?null:t.toString();return{type:this.type,to:this.to,data:this.data,nonce:this.nonce,gasLimit:t(this.gasLimit),gasPrice:t(this.gasPrice),maxPriorityFeePerGas:t(this.maxPriorityFeePerGas),maxFeePerGas:t(this.maxFeePerGas),value:t(this.value),chainId:t(this.chainId),sig:this.signature?this.signature.toJSON():null,accessList:this.accessList}}static from(t){if(null==t)return new Ra;if(\\\"string\\\"==typeof t){const e=y(t);if(e[0]>=127)return Ra.from(function(t){const e=la(t);f(Array.isArray(e)&&(9===e.length||6===e.length),\\\"invalid field count for legacy transaction\\\",\\\"data\\\",t);const n={type:0,nonce:xa(e[0],\\\"nonce\\\"),gasPrice:Na(e[1],\\\"gasPrice\\\"),gasLimit:Na(e[2],\\\"gasLimit\\\"),to:ka(e[3]),value:Na(e[4],\\\"value\\\"),data:E(e[5]),chainId:ga};if(6===e.length)return n;const r=Na(e[6],\\\"v\\\"),s=Na(e[7],\\\"r\\\"),i=Na(e[8],\\\"s\\\");if(s===ga&&i===ga)n.chainId=r;else{let t=(r-ba)/ma;t<ga&&(t=ga),n.chainId=t,f(t!==ga||r===ya||r===wa,\\\"non-canonical legacy v\\\",\\\"v\\\",e[6]),n.signature=$i.from({r:B(e[7],32),s:B(e[8],32),v:r})}return n}(e));switch(e[0]){case 1:return Ra.from(function(t){const e=la(y(t).slice(1));f(Array.isArray(e)&&(8===e.length||11===e.length),\\\"invalid field count for transaction type: 1\\\",\\\"data\\\",E(t));const n={type:1,chainId:Na(e[0],\\\"chainId\\\"),nonce:xa(e[1],\\\"nonce\\\"),gasPrice:Na(e[2],\\\"gasPrice\\\"),gasLimit:Na(e[3],\\\"gasLimit\\\"),to:ka(e[4]),value:Na(e[5],\\\"value\\\"),data:E(e[6]),accessList:Pa(e[7],\\\"accessList\\\")};return 8===e.length||Oa(n,e.slice(8)),n}(e));case 2:return Ra.from(function(t){const e=la(y(t).slice(1));f(Array.isArray(e)&&(9===e.length||12===e.length),\\\"invalid field count for transaction type: 2\\\",\\\"data\\\",E(t));const n={type:2,chainId:Na(e[0],\\\"chainId\\\"),nonce:xa(e[1],\\\"nonce\\\"),maxPriorityFeePerGas:Na(e[2],\\\"maxPriorityFeePerGas\\\"),maxFeePerGas:Na(e[3],\\\"maxFeePerGas\\\"),gasPrice:null,gasLimit:Na(e[4],\\\"gasLimit\\\"),to:ka(e[5]),value:Na(e[6],\\\"value\\\"),data:E(e[7]),accessList:Pa(e[8],\\\"accessList\\\")};return 9===e.length||Oa(n,e.slice(9)),n}(e));case 3:return Ra.from(function(t){let e=la(y(t).slice(1)),n=\\\"3\\\",r=null;if(4===e.length&&Array.isArray(e[0])){n=\\\"3 (network format)\\\";const t=e[1],s=e[2],i=e[3];f(Array.isArray(t),\\\"invalid network format: blobs not an array\\\",\\\"fields[1]\\\",t),f(Array.isArray(s),\\\"invalid network format: commitments not an array\\\",\\\"fields[2]\\\",s),f(Array.isArray(i),\\\"invalid network format: proofs not an array\\\",\\\"fields[3]\\\",i),f(t.length===s.length,\\\"invalid network format: blobs/commitments length mismatch\\\",\\\"fields\\\",e),f(t.length===i.length,\\\"invalid network format: blobs/proofs length mismatch\\\",\\\"fields\\\",e),r=[];for(let n=0;n<e[1].length;n++)r.push({data:t[n],commitment:s[n],proof:i[n]});e=e[0]}f(Array.isArray(e)&&(11===e.length||14===e.length),`invalid field count for transaction type: ${n}`,\\\"data\\\",E(t));const s={type:3,chainId:Na(e[0],\\\"chainId\\\"),nonce:xa(e[1],\\\"nonce\\\"),maxPriorityFeePerGas:Na(e[2],\\\"maxPriorityFeePerGas\\\"),maxFeePerGas:Na(e[3],\\\"maxFeePerGas\\\"),gasPrice:null,gasLimit:Na(e[4],\\\"gasLimit\\\"),to:ka(e[5]),value:Na(e[6],\\\"value\\\"),data:E(e[7]),accessList:Pa(e[8],\\\"accessList\\\"),maxFeePerBlobGas:Na(e[9],\\\"maxFeePerBlobGas\\\"),blobVersionedHashes:e[10]};r&&(s.blobs=r),f(null!=s.to,`invalid address for transaction type: ${n}`,\\\"data\\\",t),f(Array.isArray(s.blobVersionedHashes),\\\"invalid blobVersionedHashes: must be an array\\\",\\\"data\\\",t);for(let e=0;e<s.blobVersionedHashes.length;e++)f(b(s.blobVersionedHashes[e],32),`invalid blobVersionedHash at index ${e}: must be length 32`,\\\"data\\\",t);return 11===e.length||Oa(s,e.slice(11)),s}(e))}h(!1,\\\"unsupported transaction type\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"from\\\"})}const e=new Ra;return null!=t.type&&(e.type=t.type),null!=t.to&&(e.to=t.to),null!=t.nonce&&(e.nonce=t.nonce),null!=t.gasLimit&&(e.gasLimit=t.gasLimit),null!=t.gasPrice&&(e.gasPrice=t.gasPrice),null!=t.maxPriorityFeePerGas&&(e.maxPriorityFeePerGas=t.maxPriorityFeePerGas),null!=t.maxFeePerGas&&(e.maxFeePerGas=t.maxFeePerGas),null!=t.maxFeePerBlobGas&&(e.maxFeePerBlobGas=t.maxFeePerBlobGas),null!=t.data&&(e.data=t.data),null!=t.value&&(e.value=t.value),null!=t.chainId&&(e.chainId=t.chainId),null!=t.signature&&(e.signature=$i.from(t.signature)),null!=t.accessList&&(e.accessList=t.accessList),null!=t.blobVersionedHashes&&(e.blobVersionedHashes=t.blobVersionedHashes),null!=t.kzg&&(e.kzg=t.kzg),null!=t.blobs&&(e.blobs=t.blobs),null!=t.hash&&(f(e.isSigned(),\\\"unsigned transaction cannot define '.hash'\\\",\\\"tx\\\",t),f(e.hash===t.hash,\\\"hash mismatch\\\",\\\"tx\\\",t)),null!=t.from&&(f(e.isSigned(),\\\"unsigned transaction cannot define '.from'\\\",\\\"tx\\\",t),f(e.from.toLowerCase()===(t.from||\\\"\\\").toLowerCase(),\\\"from mismatch\\\",\\\"tx\\\",t)),e}}const Ta=\\\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\\\";BigInt(0);const Sa=BigInt(58);function Fa(t){return t.match(/^ipfs:\\\\/\\\\/ipfs\\\\//i)?t=t.substring(12):t.match(/^ipfs:\\\\/\\\\//i)?t=t.substring(7):f(!1,\\\"unsupported IPFS format\\\",\\\"link\\\",t),`https://gateway.ipfs.io/ipfs/${t}`}class Ua{name;constructor(t){o(this,{name:t})}connect(t){return this}supportsCoinType(t){return!1}async encodeAddress(t,e){throw new Error(\\\"unsupported coin\\\")}async decodeAddress(t,e){throw new Error(\\\"unsupported coin\\\")}}const Da=new RegExp(\\\"^(ipfs)://(.*)$\\\",\\\"i\\\"),La=[new RegExp(\\\"^(https)://(.*)$\\\",\\\"i\\\"),new RegExp(\\\"^(data):(.*)$\\\",\\\"i\\\"),Da,new RegExp(\\\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\\\",\\\"i\\\")];class Ma{provider;address;name;#At;#vt;constructor(t,e,n){o(this,{provider:t,address:e,name:n}),this.#At=null,this.#vt=new Yr(e,[\\\"function supportsInterface(bytes4) view returns (bool)\\\",\\\"function resolve(bytes, bytes) view returns (bytes)\\\",\\\"function addr(bytes32) view returns (address)\\\",\\\"function addr(bytes32, uint) view returns (bytes)\\\",\\\"function text(bytes32, string) view returns (string)\\\",\\\"function contenthash(bytes32) view returns (bytes)\\\"],t)}async supportsWildcard(){return null==this.#At&&(this.#At=(async()=>{try{return await this.#vt.supportsInterface(\\\"0x9061b923\\\")}catch(t){if(c(t,\\\"CALL_EXCEPTION\\\"))return!1;throw this.#At=null,t}})()),await this.#At}async#Et(t,e){e=(e||[]).slice();const n=this.#vt.interface;e.unshift(wi(this.name));let r=null;await this.supportsWildcard()&&(r=n.getFunction(t),h(r,\\\"missing fragment\\\",\\\"UNKNOWN_ERROR\\\",{info:{funcName:t}}),e=[bi(this.name,255),n.encodeFunctionData(r,e)],t=\\\"resolve(bytes,bytes)\\\"),e.push({enableCcipRead:!0});try{const s=await this.#vt[t](...e);return r?n.decodeFunctionResult(r,s)[0]:s}catch(t){if(!c(t,\\\"CALL_EXCEPTION\\\"))throw t}return null}async getAddress(t){if(null==t&&(t=60),60===t)try{const t=await this.#Et(\\\"addr(bytes32)\\\");return null==t||t===rr?null:t}catch(t){if(c(t,\\\"CALL_EXCEPTION\\\"))return null;throw t}if(t>=0&&t<2147483648){let e=t+2147483648;const n=await this.#Et(\\\"addr(bytes32,uint)\\\",[e]);if(b(n,20))return Wt(n)}let e=null;for(const n of this.provider.plugins)if(n instanceof Ua&&n.supportsCoinType(t)){e=n;break}if(null==e)return null;const n=await this.#Et(\\\"addr(bytes32,uint)\\\",[t]);if(null==n||\\\"0x\\\"===n)return null;const r=await e.decodeAddress(t,n);if(null!=r)return r;h(!1,\\\"invalid coin data\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:`getAddress(${t})`,info:{coinType:t,data:n}})}async getText(t){const e=await this.#Et(\\\"text(bytes32,string)\\\",[t]);return null==e||\\\"0x\\\"===e?null:e}async getContentHash(){const t=await this.#Et(\\\"contenthash(bytes32)\\\");if(null==t||\\\"0x\\\"===t)return null;const e=t.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(e){const t=\\\"e3010170\\\"===e[1]?\\\"ipfs\\\":\\\"ipns\\\",n=parseInt(e[4],16);if(e[5].length===2*n)return`${t}://${function(t){const e=y(t);let n=D(e),r=\\\"\\\";for(;n;)r=Ta[Number(n%Sa)]+r,n/=Sa;for(let t=0;t<e.length&&!e[t];t++)r=Ta[0]+r;return r}(\\\"0x\\\"+e[2])}`}const n=t.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&64===n[1].length)return`bzz://${n[1]}`;h(!1,\\\"invalid or unsupported content hash data\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"getContentHash()\\\",info:{data:t}})}async getAvatar(){return(await this._getAvatar()).url}async _getAvatar(){const t=[{type:\\\"name\\\",value:this.name}];try{const e=await this.getText(\\\"avatar\\\");if(null==e)return t.push({type:\\\"!avatar\\\",value:\\\"\\\"}),{url:null,linkage:t};t.push({type:\\\"avatar\\\",value:e});for(let n=0;n<La.length;n++){const r=e.match(La[n]);if(null==r)continue;const s=r[1].toLowerCase();switch(s){case\\\"https\\\":case\\\"data\\\":return t.push({type:\\\"url\\\",value:e}),{linkage:t,url:e};case\\\"ipfs\\\":{const n=Fa(e);return t.push({type:\\\"ipfs\\\",value:e}),t.push({type:\\\"url\\\",value:n}),{linkage:t,url:n}}case\\\"erc721\\\":case\\\"erc1155\\\":{const n=\\\"erc721\\\"===s?\\\"tokenURI(uint256)\\\":\\\"uri(uint256)\\\";t.push({type:s,value:e});const i=await this.getAddress();if(null==i)return t.push({type:\\\"!owner\\\",value:\\\"\\\"}),{url:null,linkage:t};const o=(r[2]||\\\"\\\").split(\\\"/\\\");if(2!==o.length)return t.push({type:`!${s}caip`,value:r[2]||\\\"\\\"}),{url:null,linkage:t};const a=o[1],c=new Yr(o[0],[\\\"function tokenURI(uint) view returns (string)\\\",\\\"function ownerOf(uint) view returns (address)\\\",\\\"function uri(uint) view returns (string)\\\",\\\"function balanceOf(address, uint256) view returns (uint)\\\"],this.provider);if(\\\"erc721\\\"===s){const e=await c.ownerOf(a);if(i!==e)return t.push({type:\\\"!owner\\\",value:e}),{url:null,linkage:t};t.push({type:\\\"owner\\\",value:e})}else if(\\\"erc1155\\\"===s){const e=await c.balanceOf(i,a);if(!e)return t.push({type:\\\"!balance\\\",value:\\\"0\\\"}),{url:null,linkage:t};t.push({type:\\\"balance\\\",value:e.toString()})}let l=await c[n](a);if(null==l||\\\"0x\\\"===l)return t.push({type:\\\"!metadata-url\\\",value:\\\"\\\"}),{url:null,linkage:t};t.push({type:\\\"metadata-url-base\\\",value:l}),\\\"erc1155\\\"===s&&(l=l.replace(\\\"{id}\\\",M(a,32).substring(2)),t.push({type:\\\"metadata-url-expanded\\\",value:l})),l.match(/^ipfs:/i)&&(l=Fa(l)),t.push({type:\\\"metadata-url\\\",value:l});let u={};const h=await new tr(l).send();h.assertOk();try{u=h.bodyJson}catch(e){try{t.push({type:\\\"!metadata\\\",value:h.bodyText})}catch(e){const n=h.body;return n&&t.push({type:\\\"!metadata\\\",value:E(n)}),{url:null,linkage:t}}return{url:null,linkage:t}}if(!u)return t.push({type:\\\"!metadata\\\",value:\\\"\\\"}),{url:null,linkage:t};t.push({type:\\\"metadata\\\",value:JSON.stringify(u)});let f=u.image;if(\\\"string\\\"!=typeof f)return t.push({type:\\\"!imageUrl\\\",value:\\\"\\\"}),{url:null,linkage:t};if(f.match(/^(https:\\\\/\\\\/|data:)/i));else{if(null==f.match(Da))return t.push({type:\\\"!imageUrl-ipfs\\\",value:f}),{url:null,linkage:t};t.push({type:\\\"imageUrl-ipfs\\\",value:f}),f=Fa(f)}return t.push({type:\\\"url\\\",value:f}),{linkage:t,url:f}}}}}catch(t){}return{linkage:t,url:null}}static async getEnsAddress(t){const e=await t.getNetwork(),n=e.getPlugin(\\\"org.ethers.plugins.network.Ens\\\");return h(n,\\\"network does not support ENS\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"getEnsAddress\\\",info:{network:e}}),n.address}static async#kt(t,e){const n=await Ma.getEnsAddress(t);try{const r=new Yr(n,[\\\"function resolver(bytes32) view returns (address)\\\"],t),s=await r.resolver(wi(e),{enableCcipRead:!0});return s===rr?null:s}catch(t){throw t}return null}static async fromName(t,e){let n=e;for(;;){if(\\\"\\\"===n||\\\".\\\"===n)return null;if(\\\"eth\\\"!==e&&\\\"eth\\\"===n)return null;const r=await Ma.#kt(t,n);if(null!=r){const s=new Ma(t,r,e);return n===e||await s.supportsWildcard()?s:null}n=n.split(\\\".\\\").slice(1).join(\\\".\\\")}}}const Ga=BigInt(0);function Ha(t,e){return function(n){return null==n?e:t(n)}}function Qa(t,e){return n=>{if(e&&null==n)return null;if(!Array.isArray(n))throw new Error(\\\"not an array\\\");return n.map((e=>t(e)))}}function ja(t,e){return n=>{const r={};for(const s in t){let i=s;if(e&&s in e&&!(i in n))for(const t of e[s])if(t in n){i=t;break}try{const e=t[s](n[i]);void 0!==e&&(r[s]=e)}catch(t){h(!1,`invalid value for value.${s} (${t instanceof Error?t.message:\\\"not-an-error\\\"})`,\\\"BAD_DATA\\\",{value:n})}}return r}}function Va(t){return f(b(t,!0),\\\"invalid data\\\",\\\"value\\\",t),t}function Ja(t){return f(b(t,32),\\\"invalid hash\\\",\\\"value\\\",t),t}const za=ja({address:Wt,blockHash:Ja,blockNumber:L,data:Va,index:L,removed:Ha((function(t){switch(t){case!0:case\\\"true\\\":return!0;case!1:case\\\"false\\\":return!1}f(!1,`invalid boolean; ${JSON.stringify(t)}`,\\\"value\\\",t)}),!1),topics:Qa(Ja),transactionHash:Ja,transactionIndex:L},{index:[\\\"logIndex\\\"]});const Ka=ja({hash:Ha(Ja),parentHash:Ja,parentBeaconBlockRoot:Ha(Ja,null),number:L,timestamp:L,nonce:Ha(Va),difficulty:S,gasLimit:S,gasUsed:S,stateRoot:Ha(Ja,null),receiptsRoot:Ha(Ja,null),blobGasUsed:Ha(S,null),excessBlobGas:Ha(S,null),miner:Ha(Wt),prevRandao:Ha(Ja,null),extraData:Va,baseFeePerGas:Ha(S)},{prevRandao:[\\\"mixHash\\\"]});const qa=ja({transactionIndex:L,blockNumber:L,transactionHash:Ja,address:Wt,topics:Qa(Ja),data:Va,index:L,blockHash:Ja},{index:[\\\"logIndex\\\"]});const _a=ja({to:Ha(Wt,null),from:Ha(Wt,null),contractAddress:Ha(Wt,null),index:L,root:Ha(E),gasUsed:S,blobGasUsed:Ha(S,null),logsBloom:Ha(Va),blockHash:Ja,hash:Ja,logs:Qa((function(t){return qa(t)})),blockNumber:L,cumulativeGasUsed:S,effectiveGasPrice:Ha(S),blobGasPrice:Ha(S,null),status:Ha(L),type:Ha(L,0)},{effectiveGasPrice:[\\\"gasPrice\\\"],hash:[\\\"transactionHash\\\"],index:[\\\"transactionIndex\\\"]});function Za(t){t.to&&S(t.to)===Ga&&(t.to=\\\"0x0000000000000000000000000000000000000000\\\");const e=ja({hash:Ja,index:Ha(L,void 0),type:t=>\\\"0x\\\"===t||null==t?0:L(t),accessList:Ha(jn,null),blobVersionedHashes:Ha(Qa(Ja,!0),null),blockHash:Ha(Ja,null),blockNumber:Ha(L,null),transactionIndex:Ha(L,null),from:Wt,gasPrice:Ha(S),maxPriorityFeePerGas:Ha(S),maxFeePerGas:Ha(S),maxFeePerBlobGas:Ha(S,null),gasLimit:S,to:Ha(Wt,null),value:S,nonce:L,data:Va,creates:Ha(Wt,null),chainId:Ha(S,null)},{data:[\\\"input\\\"],gasLimit:[\\\"gas\\\"],index:[\\\"transactionIndex\\\"]})(t);if(null==e.to&&null==e.creates&&(e.creates=function(t){const e=Wt(t.from);let n=S(t.nonce,\\\"tx.nonce\\\").toString(16);return n=\\\"0\\\"===n?\\\"0x\\\":n.length%2?\\\"0x0\\\"+n:\\\"0x\\\"+n,Wt(x(jt(da([e,n])),12))}(e)),1!==t.type&&2!==t.type||null!=t.accessList||(e.accessList=[]),t.signature?e.signature=$i.from(t.signature):e.signature=$i.from(t),null==e.chainId){const t=e.signature.legacyChainId;null!=t&&(e.chainId=t)}return e.blockHash&&S(e.blockHash)===Ga&&(e.blockHash=null),e}class Wa{name;constructor(t){o(this,{name:t})}clone(){return new Wa(this.name)}}class Ya extends Wa{effectiveBlock;txBase;txCreate;txDataZero;txDataNonzero;txAccessListStorageKey;txAccessListAddress;constructor(t,e){null==t&&(t=0),super(`org.ethers.network.plugins.GasCost#${t||0}`);const n={effectiveBlock:t};function r(t,r){let s=(e||{})[t];null==s&&(s=r),f(\\\"number\\\"==typeof s,`invalud value for ${t}`,\\\"costs\\\",e),n[t]=s}r(\\\"txBase\\\",21e3),r(\\\"txCreate\\\",32e3),r(\\\"txDataZero\\\",4),r(\\\"txDataNonzero\\\",16),r(\\\"txAccessListStorageKey\\\",1900),r(\\\"txAccessListAddress\\\",2400),o(this,n)}clone(){return new Ya(this.effectiveBlock,this)}}class Xa extends Wa{address;targetNetwork;constructor(t,e){super(\\\"org.ethers.plugins.network.Ens\\\"),o(this,{address:t||\\\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\\\",targetNetwork:null==e?1:e})}clone(){return new Xa(this.address,this.targetNetwork)}}class $a extends Wa{#N;#Pt;get url(){return this.#N}get processFunc(){return this.#Pt}constructor(t,e){super(\\\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\\\"),this.#N=t,this.#Pt=e}clone(){return this}}const tc=new Map;class ec{#xt;#ft;#Nt;constructor(t,e){this.#xt=t,this.#ft=S(e),this.#Nt=new Map}toJSON(){return{name:this.name,chainId:String(this.chainId)}}get name(){return this.#xt}set name(t){this.#xt=t}get chainId(){return this.#ft}set chainId(t){this.#ft=S(t,\\\"chainId\\\")}matches(t){if(null==t)return!1;if(\\\"string\\\"==typeof t){try{return this.chainId===S(t)}catch(t){}return this.name===t}if(\\\"number\\\"==typeof t||\\\"bigint\\\"==typeof t){try{return this.chainId===S(t)}catch(t){}return!1}if(\\\"object\\\"==typeof t){if(null!=t.chainId){try{return this.chainId===S(t.chainId)}catch(t){}return!1}return null!=t.name&&this.name===t.name}return!1}get plugins(){return Array.from(this.#Nt.values())}attachPlugin(t){if(this.#Nt.get(t.name))throw new Error(`cannot replace existing plugin: ${t.name} `);return this.#Nt.set(t.name,t.clone()),this}getPlugin(t){return this.#Nt.get(t)||null}getPlugins(t){return this.plugins.filter((e=>e.name.split(\\\"#\\\")[0]===t))}clone(){const t=new ec(this.name,this.chainId);return this.plugins.forEach((e=>{t.attachPlugin(e.clone())})),t}computeIntrinsicGas(t){const e=this.getPlugin(\\\"org.ethers.plugins.network.GasCost\\\")||new Ya;let n=e.txBase;if(null==t.to&&(n+=e.txCreate),t.data)for(let r=2;r<t.data.length;r+=2)\\\"00\\\"===t.data.substring(r,r+2)?n+=e.txDataZero:n+=e.txDataNonzero;if(t.accessList){const r=jn(t.accessList);for(const t in r)n+=e.txAccessListAddress+e.txAccessListStorageKey*r[t].storageKeys.length}return n}static from(t){if(function(){if(sc)return;function t(t,e,n){const r=function(){const r=new ec(t,e);return null!=n.ensNetwork&&r.attachPlugin(new Xa(null,n.ensNetwork)),r.attachPlugin(new Ya),(n.plugins||[]).forEach((t=>{r.attachPlugin(t)})),r};ec.register(t,r),ec.register(e,r),n.altNames&&n.altNames.forEach((t=>{ec.register(t,r)}))}sc=!0,t(\\\"mainnet\\\",1,{ensNetwork:1,altNames:[\\\"homestead\\\"]}),t(\\\"ropsten\\\",3,{ensNetwork:3}),t(\\\"rinkeby\\\",4,{ensNetwork:4}),t(\\\"goerli\\\",5,{ensNetwork:5}),t(\\\"kovan\\\",42,{ensNetwork:42}),t(\\\"sepolia\\\",11155111,{ensNetwork:11155111}),t(\\\"holesky\\\",17e3,{ensNetwork:17e3}),t(\\\"classic\\\",61,{}),t(\\\"classicKotti\\\",6,{}),t(\\\"arbitrum\\\",42161,{ensNetwork:1}),t(\\\"arbitrum-goerli\\\",421613,{}),t(\\\"arbitrum-sepolia\\\",421614,{}),t(\\\"base\\\",8453,{ensNetwork:1}),t(\\\"base-goerli\\\",84531,{}),t(\\\"base-sepolia\\\",84532,{}),t(\\\"bnb\\\",56,{ensNetwork:1}),t(\\\"bnbt\\\",97,{}),t(\\\"linea\\\",59144,{ensNetwork:1}),t(\\\"linea-goerli\\\",59140,{}),t(\\\"linea-sepolia\\\",59141,{}),t(\\\"matic\\\",137,{ensNetwork:1,plugins:[rc(\\\"https://gasstation.polygon.technology/v2\\\")]}),t(\\\"matic-amoy\\\",80002,{}),t(\\\"matic-mumbai\\\",80001,{altNames:[\\\"maticMumbai\\\",\\\"maticmum\\\"],plugins:[rc(\\\"https://gasstation-testnet.polygon.technology/v2\\\")]}),t(\\\"optimism\\\",10,{ensNetwork:1,plugins:[]}),t(\\\"optimism-goerli\\\",420,{}),t(\\\"optimism-sepolia\\\",11155420,{}),t(\\\"xdai\\\",100,{ensNetwork:1})}(),null==t)return ec.from(\\\"mainnet\\\");if(\\\"number\\\"==typeof t&&(t=BigInt(t)),\\\"string\\\"==typeof t||\\\"bigint\\\"==typeof t){const e=tc.get(t);if(e)return e();if(\\\"bigint\\\"==typeof t)return new ec(\\\"unknown\\\",t);f(!1,\\\"unknown network\\\",\\\"network\\\",t)}if(\\\"function\\\"==typeof t.clone){return t.clone()}if(\\\"object\\\"==typeof t){f(\\\"string\\\"==typeof t.name&&\\\"number\\\"==typeof t.chainId,\\\"invalid network object name or chainId\\\",\\\"network\\\",t);const e=new ec(t.name,t.chainId);return(t.ensAddress||null!=t.ensNetwork)&&e.attachPlugin(new Xa(t.ensAddress,t.ensNetwork)),e}f(!1,\\\"invalid network\\\",\\\"network\\\",t)}static register(t,e){\\\"number\\\"==typeof t&&(t=BigInt(t));const n=tc.get(t);n&&f(!1,`conflicting network for ${JSON.stringify(n.name)}`,\\\"nameOrChainId\\\",t),tc.set(t,e)}}function nc(t,e){const n=String(t);if(!n.match(/^[0-9.]+$/))throw new Error(`invalid gwei value: ${t}`);const r=n.split(\\\".\\\");if(1===r.length&&r.push(\\\"\\\"),2!==r.length)throw new Error(`invalid gwei value: ${t}`);for(;r[1].length<e;)r[1]+=\\\"0\\\";if(r[1].length>9){let t=BigInt(r[1].substring(0,9));r[1].substring(9).match(/^0+$/)||t++,r[1]=t.toString()}return BigInt(r[0]+r[1])}function rc(t){return new $a(t,(async(t,e,n)=>{let r;n.setHeader(\\\"User-Agent\\\",\\\"ethers\\\");try{const[e,s]=await Promise.all([n.send(),t()]);r=e;const i=r.bodyJson.standard;return{gasPrice:s.gasPrice,maxFeePerGas:nc(i.maxFee,9),maxPriorityFeePerGas:nc(i.maxPriorityFee,9)}}catch(t){h(!1,`error encountered with polygon gas station (${JSON.stringify(n.url)})`,\\\"SERVER_ERROR\\\",{request:n,response:r,error:t})}}))}let sc=!1;function ic(t){return JSON.parse(JSON.stringify(t))}class oc{#Bt;#It;#Ct;#Ot;constructor(t){this.#Bt=t,this.#It=null,this.#Ct=4e3,this.#Ot=-2}get pollingInterval(){return this.#Ct}set pollingInterval(t){this.#Ct=t}async#Rt(){try{const t=await this.#Bt.getBlockNumber();if(-2===this.#Ot)return void(this.#Ot=t);if(t!==this.#Ot){for(let e=this.#Ot+1;e<=t;e++){if(null==this.#It)return;await this.#Bt.emit(\\\"block\\\",e)}this.#Ot=t}}catch(t){}null!=this.#It&&(this.#It=this.#Bt._setTimeout(this.#Rt.bind(this),this.#Ct))}start(){this.#It||(this.#It=this.#Bt._setTimeout(this.#Rt.bind(this),this.#Ct),this.#Rt())}stop(){this.#It&&(this.#Bt._clearTimeout(this.#It),this.#It=null)}pause(t){this.stop(),t&&(this.#Ot=-2)}resume(){this.start()}}class ac{#Bt;#Rt;#Tt;constructor(t){this.#Bt=t,this.#Tt=!1,this.#Rt=t=>{this._poll(t,this.#Bt)}}async _poll(t,e){throw new Error(\\\"sub-classes must override this\\\")}start(){this.#Tt||(this.#Tt=!0,this.#Rt(-2),this.#Bt.on(\\\"block\\\",this.#Rt))}stop(){this.#Tt&&(this.#Tt=!1,this.#Bt.off(\\\"block\\\",this.#Rt))}pause(t){this.stop()}resume(){this.start()}}class cc extends ac{#St;#Ft;constructor(t,e){super(t),this.#St=e,this.#Ft=-2}pause(t){t&&(this.#Ft=-2),super.pause(t)}async _poll(t,e){const n=await e.getBlock(this.#St);null!=n&&(-2===this.#Ft?this.#Ft=n.number:n.number>this.#Ft&&(e.emit(this.#St,n.number),this.#Ft=n.number))}}class lc extends ac{#X;constructor(t,e){super(t),this.#X=ic(e)}async _poll(t,e){throw new Error(\\\"@TODO\\\")}}class uc extends ac{#Ut;constructor(t,e){super(t),this.#Ut=e}async _poll(t,e){const n=await e.getTransactionReceipt(this.#Ut);n&&e.emit(this.#Ut,n)}}class hc{#Bt;#X;#It;#Tt;#Ot;constructor(t,e){this.#Bt=t,this.#X=ic(e),this.#It=this.#Rt.bind(this),this.#Tt=!1,this.#Ot=-2}async#Rt(t){if(-2===this.#Ot)return;const e=ic(this.#X);e.fromBlock=this.#Ot+1,e.toBlock=t;const n=await this.#Bt.getLogs(e);if(0!==n.length)for(const t of n)this.#Bt.emit(this.#X,t),this.#Ot=t.blockNumber;else this.#Ot<t-60&&(this.#Ot=t-60)}start(){this.#Tt||(this.#Tt=!0,-2===this.#Ot&&this.#Bt.getBlockNumber().then((t=>{this.#Ot=t})),this.#Bt.on(\\\"block\\\",this.#It))}stop(){this.#Tt&&(this.#Tt=!1,this.#Bt.off(\\\"block\\\",this.#It))}pause(t){this.stop(),t&&(this.#Ot=-2)}resume(){this.start()}}const fc=BigInt(2);function dc(t){return t&&\\\"function\\\"==typeof t.then}function pc(t,e){return t+\\\":\\\"+JSON.stringify(e,((t,e)=>{if(null==e)return\\\"null\\\";if(\\\"bigint\\\"==typeof e)return`bigint:${e.toString()}`;if(\\\"string\\\"==typeof e)return e.toLowerCase();if(\\\"object\\\"==typeof e&&!Array.isArray(e)){const t=Object.keys(e);return t.sort(),t.reduce(((t,n)=>(t[n]=e[n],t)),{})}return e}))}class gc{name;constructor(t){o(this,{name:t})}start(){}stop(){}pause(t){}resume(){}}function mc(t){return(t=Array.from(new Set(t).values())).sort(),t}async function yc(t,e){if(null==t)throw new Error(\\\"invalid event\\\");if(Array.isArray(t)&&(t={topics:t}),\\\"string\\\"==typeof t)switch(t){case\\\"block\\\":case\\\"debug\\\":case\\\"error\\\":case\\\"finalized\\\":case\\\"network\\\":case\\\"pending\\\":case\\\"safe\\\":return{type:t,tag:t}}if(b(t,32)){const e=t.toLowerCase();return{type:\\\"transaction\\\",tag:pc(\\\"tx\\\",{hash:e}),hash:e}}if(t.orphan){const e=t;return{type:\\\"orphan\\\",tag:pc(\\\"orphan\\\",e),filter:(n=e,JSON.parse(JSON.stringify(n)))}}var n;if(t.address||t.topics){const n=t,r={topics:(n.topics||[]).map((t=>null==t?null:Array.isArray(t)?mc(t.map((t=>t.toLowerCase()))):t.toLowerCase()))};if(n.address){const t=[],s=[],i=n=>{b(n)?t.push(n):s.push((async()=>{t.push(await xn(n,e))})())};Array.isArray(n.address)?n.address.forEach(i):i(n.address),s.length&&await Promise.all(s),r.address=mc(t.map((t=>t.toLowerCase())))}return{filter:r,tag:pc(\\\"event\\\",r),type:\\\"event\\\"}}f(!1,\\\"unknown ProviderEvent\\\",\\\"event\\\",t)}function wc(){return(new Date).getTime()}const bc={cacheTimeout:250,pollingInterval:4e3};class Ac{#Dt;#Nt;#Lt;#Mt;#Gt;#Ht;#Qt;#jt;#Vt;#Jt;#zt;#u;constructor(t,e){if(this.#u=Object.assign({},bc,e||{}),\\\"any\\\"===t)this.#Ht=!0,this.#Gt=null;else if(t){const e=ec.from(t);this.#Ht=!1,this.#Gt=Promise.resolve(e),setTimeout((()=>{this.emit(\\\"network\\\",e,null)}),0)}else this.#Ht=!1,this.#Gt=null;this.#jt=-1,this.#Qt=new Map,this.#Dt=new Map,this.#Nt=new Map,this.#Lt=null,this.#Mt=!1,this.#Vt=1,this.#Jt=new Map,this.#zt=!1}get pollingInterval(){return this.#u.pollingInterval}get provider(){return this}get plugins(){return Array.from(this.#Nt.values())}attachPlugin(t){if(this.#Nt.get(t.name))throw new Error(`cannot replace existing plugin: ${t.name} `);return this.#Nt.set(t.name,t.connect(this)),this}getPlugin(t){return this.#Nt.get(t)||null}get disableCcipRead(){return this.#zt}set disableCcipRead(t){this.#zt=!!t}async#Kt(t){const e=this.#u.cacheTimeout;if(e<0)return await this._perform(t);const n=pc(t.method,t);let r=this.#Qt.get(n);return r||(r=this._perform(t),this.#Qt.set(n,r),setTimeout((()=>{this.#Qt.get(n)===r&&this.#Qt.delete(n)}),e)),await r}async ccipReadFetch(t,e,n){if(this.disableCcipRead||0===n.length||null==t.to)return null;const r=t.to.toLowerCase(),s=e.toLowerCase(),i=[];for(let e=0;e<n.length;e++){const o=n[e],a=o.replace(\\\"{sender}\\\",r).replace(\\\"{data}\\\",s),c=new tr(a);-1===o.indexOf(\\\"{data}\\\")&&(c.body={data:s,sender:r}),this.emit(\\\"debug\\\",{action:\\\"sendCcipReadFetchRequest\\\",request:c,index:e,urls:n});let l=\\\"unknown error\\\";const u=await c.send();try{const t=u.bodyJson;if(t.data)return this.emit(\\\"debug\\\",{action:\\\"receiveCcipReadFetchResult\\\",request:c,result:t}),t.data;t.message&&(l=t.message),this.emit(\\\"debug\\\",{action:\\\"receiveCcipReadFetchError\\\",request:c,result:t})}catch(t){}h(u.statusCode<400||u.statusCode>=500,`response not found during CCIP fetch: ${l}`,\\\"OFFCHAIN_FAULT\\\",{reason:\\\"404_MISSING_RESOURCE\\\",transaction:t,info:{url:o,errorMessage:l}}),i.push(l)}h(!1,`error encountered during CCIP fetch: ${i.map((t=>JSON.stringify(t))).join(\\\", \\\")}`,\\\"OFFCHAIN_FAULT\\\",{reason:\\\"500_SERVER_ERROR\\\",transaction:t,info:{urls:n,errorMessages:i}})}_wrapBlock(t,e){return new mr(function(t){const e=Ka(t);return e.transactions=t.transactions.map((t=>\\\"string\\\"==typeof t?t:Za(t))),e}(t),this)}_wrapLog(t,e){return new yr(function(t){return za(t)}(t),this)}_wrapTransactionReceipt(t,e){return new wr(function(t){return _a(t)}(t),this)}_wrapTransactionResponse(t,e){return new br(Za(t),this)}_detectNetwork(){h(!1,\\\"sub-classes must implement this\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"_detectNetwork\\\"})}async _perform(t){h(!1,`unsupported method: ${t.method}`,\\\"UNSUPPORTED_OPERATION\\\",{operation:t.method,info:t})}async getBlockNumber(){const t=L(await this.#Kt({method:\\\"getBlockNumber\\\"}),\\\"%response\\\");return this.#jt>=0&&(this.#jt=t),t}_getAddress(t){return xn(t,this)}_getBlockTag(t){if(null==t)return\\\"latest\\\";switch(t){case\\\"earliest\\\":return\\\"0x0\\\";case\\\"finalized\\\":case\\\"latest\\\":case\\\"pending\\\":case\\\"safe\\\":return t}return b(t)?b(t,32)?t:H(t):(\\\"bigint\\\"==typeof t&&(t=L(t,\\\"blockTag\\\")),\\\"number\\\"==typeof t?t>=0?H(t):this.#jt>=0?H(this.#jt+t):this.getBlockNumber().then((e=>H(e+t))):void f(!1,\\\"invalid blockTag\\\",\\\"blockTag\\\",t))}_getFilter(t){const e=(t.topics||[]).map((t=>null==t?null:Array.isArray(t)?mc(t.map((t=>t.toLowerCase()))):t.toLowerCase())),n=\\\"blockHash\\\"in t?t.blockHash:void 0,r=(t,r,s)=>{let i;switch(t.length){case 0:break;case 1:i=t[0];break;default:t.sort(),i=t}if(n&&(null!=r||null!=s))throw new Error(\\\"invalid filter\\\");const o={};return i&&(o.address=i),e.length&&(o.topics=e),r&&(o.fromBlock=r),s&&(o.toBlock=s),n&&(o.blockHash=n),o};let s,i,o=[];if(t.address)if(Array.isArray(t.address))for(const e of t.address)o.push(this._getAddress(e));else o.push(this._getAddress(t.address));return\\\"fromBlock\\\"in t&&(s=this._getBlockTag(t.fromBlock)),\\\"toBlock\\\"in t&&(i=this._getBlockTag(t.toBlock)),o.filter((t=>\\\"string\\\"!=typeof t)).length||null!=s&&\\\"string\\\"!=typeof s||null!=i&&\\\"string\\\"!=typeof i?Promise.all([Promise.all(o),s,i]).then((t=>r(t[0],t[1],t[2]))):r(o,s,i)}_getTransactionRequest(t){const e=gr(t),n=[];if([\\\"to\\\",\\\"from\\\"].forEach((t=>{if(null==e[t])return;const r=xn(e[t],this);dc(r)?n.push(async function(){e[t]=await r}()):e[t]=r})),null!=e.blockTag){const t=this._getBlockTag(e.blockTag);dc(t)?n.push(async function(){e.blockTag=await t}()):e.blockTag=t}return n.length?async function(){return await Promise.all(n),e}():e}async getNetwork(){if(null==this.#Gt){const t=(async()=>{try{const t=await this._detectNetwork();return this.emit(\\\"network\\\",t,null),t}catch(e){throw this.#Gt===t&&(this.#Gt=null),e}})();return this.#Gt=t,(await t).clone()}const t=this.#Gt,[e,n]=await Promise.all([t,this._detectNetwork()]);return e.chainId!==n.chainId&&(this.#Ht?(this.emit(\\\"network\\\",n,e),this.#Gt===t&&(this.#Gt=Promise.resolve(n))):h(!1,`network changed: ${e.chainId} => ${n.chainId} `,\\\"NETWORK_ERROR\\\",{event:\\\"changed\\\"})),e.clone()}async getFeeData(){const t=await this.getNetwork(),e=async()=>{const{_block:e,gasPrice:n,priorityFee:r}=await i({_block:this.#qt(\\\"latest\\\",!1),gasPrice:(async()=>{try{return S(await this.#Kt({method:\\\"getGasPrice\\\"}),\\\"%response\\\")}catch(t){}return null})(),priorityFee:(async()=>{try{return S(await this.#Kt({method:\\\"getPriorityFee\\\"}),\\\"%response\\\")}catch(t){}return null})()});let s=null,o=null;const a=this._wrapBlock(e,t);return a&&a.baseFeePerGas&&(o=null!=r?r:BigInt(\\\"1000000000\\\"),s=a.baseFeePerGas*fc+o),new pr(n,s,o)},n=t.getPlugin(\\\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\\\");if(n){const t=new tr(n.url),r=await n.processFunc(e,this,t);return new pr(r.gasPrice,r.maxFeePerGas,r.maxPriorityFeePerGas)}return await e()}async estimateGas(t){let e=this._getTransactionRequest(t);return dc(e)&&(e=await e),S(await this.#Kt({method:\\\"estimateGas\\\",transaction:e}),\\\"%response\\\")}async#_t(t,e,n){h(n<10,\\\"CCIP read exceeded maximum redirections\\\",\\\"OFFCHAIN_FAULT\\\",{reason:\\\"TOO_MANY_REDIRECTS\\\",transaction:Object.assign({},t,{blockTag:e,enableCcipRead:!0})});const r=gr(t);try{return E(await this._perform({method:\\\"call\\\",transaction:r,blockTag:e}))}catch(t){if(!this.disableCcipRead&&l(t)&&t.data&&n>=0&&\\\"latest\\\"===e&&null!=r.to&&\\\"0x556f1830\\\"===x(t.data,0,4)){const s=t.data,i=await xn(r.to,this);let o;try{o=function(t){const e={sender:\\\"\\\",urls:[],calldata:\\\"\\\",selector:\\\"\\\",extraData:\\\"\\\",errorArgs:[]};h(P(t)>=160,\\\"insufficient OffchainLookup data\\\",\\\"OFFCHAIN_FAULT\\\",{reason:\\\"insufficient OffchainLookup data\\\"});const n=x(t,0,32);h(x(n,0,12)===x(Bc,0,12),\\\"corrupt OffchainLookup sender\\\",\\\"OFFCHAIN_FAULT\\\",{reason:\\\"corrupt OffchainLookup sender\\\"}),e.sender=x(n,12);try{const n=[],r=L(x(t,32,64)),s=L(x(t,r,r+32)),i=x(t,r+32);for(let t=0;t<s;t++){const e=vc(i,32*t);if(null==e)throw new Error(\\\"abort\\\");n.push(e)}e.urls=n}catch(t){h(!1,\\\"corrupt OffchainLookup urls\\\",\\\"OFFCHAIN_FAULT\\\",{reason:\\\"corrupt OffchainLookup urls\\\"})}try{const n=Ec(t,64);if(null==n)throw new Error(\\\"abort\\\");e.calldata=n}catch(t){h(!1,\\\"corrupt OffchainLookup calldata\\\",\\\"OFFCHAIN_FAULT\\\",{reason:\\\"corrupt OffchainLookup calldata\\\"})}h(x(t,100,128)===x(Bc,0,28),\\\"corrupt OffchainLookup callbaackSelector\\\",\\\"OFFCHAIN_FAULT\\\",{reason:\\\"corrupt OffchainLookup callbaackSelector\\\"}),e.selector=x(t,96,100);try{const n=Ec(t,128);if(null==n)throw new Error(\\\"abort\\\");e.extraData=n}catch(t){h(!1,\\\"corrupt OffchainLookup extraData\\\",\\\"OFFCHAIN_FAULT\\\",{reason:\\\"corrupt OffchainLookup extraData\\\"})}return e.errorArgs=\\\"sender,urls,calldata,selector,extraData\\\".split(/,/).map((t=>e[t])),e}(x(t.data,4))}catch(t){h(!1,t.message,\\\"OFFCHAIN_FAULT\\\",{reason:\\\"BAD_DATA\\\",transaction:r,info:{data:s}})}h(o.sender.toLowerCase()===i.toLowerCase(),\\\"CCIP Read sender mismatch\\\",\\\"CALL_EXCEPTION\\\",{action:\\\"call\\\",data:s,reason:\\\"OffchainLookup\\\",transaction:r,invocation:null,revert:{signature:\\\"OffchainLookup(address,string[],bytes,bytes4,bytes)\\\",name:\\\"OffchainLookup\\\",args:o.errorArgs}});const a=await this.ccipReadFetch(r,o.calldata,o.urls);h(null!=a,\\\"CCIP Read failed to fetch data\\\",\\\"OFFCHAIN_FAULT\\\",{reason:\\\"FETCH_FAILED\\\",transaction:r,info:{data:t.data,errorArgs:o.errorArgs}});const c={to:i,data:k([o.selector,Nc([a,o.extraData])])};this.emit(\\\"debug\\\",{action:\\\"sendCcipReadCall\\\",transaction:c});try{const t=await this.#_t(c,e,n+1);return this.emit(\\\"debug\\\",{action:\\\"receiveCcipReadCallResult\\\",transaction:Object.assign({},c),result:t}),t}catch(t){throw this.emit(\\\"debug\\\",{action:\\\"receiveCcipReadCallError\\\",transaction:Object.assign({},c),error:t}),t}}throw t}}async#Zt(t){const{value:e}=await i({network:this.getNetwork(),value:t});return e}async call(t){const{tx:e,blockTag:n}=await i({tx:this._getTransactionRequest(t),blockTag:this._getBlockTag(t.blockTag)});return await this.#Zt(this.#_t(e,n,t.enableCcipRead?0:-1))}async#Wt(t,e,n){let r=this._getAddress(e),s=this._getBlockTag(n);return\\\"string\\\"==typeof r&&\\\"string\\\"==typeof s||([r,s]=await Promise.all([r,s])),await this.#Zt(this.#Kt(Object.assign(t,{address:r,blockTag:s})))}async getBalance(t,e){return S(await this.#Wt({method:\\\"getBalance\\\"},t,e),\\\"%response\\\")}async getTransactionCount(t,e){return L(await this.#Wt({method:\\\"getTransactionCount\\\"},t,e),\\\"%response\\\")}async getCode(t,e){return E(await this.#Wt({method:\\\"getCode\\\"},t,e))}async getStorage(t,e,n){const r=S(e,\\\"position\\\");return E(await this.#Wt({method:\\\"getStorage\\\",position:r},t,n))}async broadcastTransaction(t){const{blockNumber:e,hash:n,network:r}=await i({blockNumber:this.getBlockNumber(),hash:this._perform({method:\\\"broadcastTransaction\\\",signedTransaction:t}),network:this.getNetwork()}),s=Ra.from(t);if(s.hash!==n)throw new Error(\\\"@TODO: the returned hash did not match\\\");return this._wrapTransactionResponse(s,r).replaceableTransaction(e)}async#qt(t,e){if(b(t,32))return await this.#Kt({method:\\\"getBlock\\\",blockHash:t,includeTransactions:e});let n=this._getBlockTag(t);return\\\"string\\\"!=typeof n&&(n=await n),await this.#Kt({method:\\\"getBlock\\\",blockTag:n,includeTransactions:e})}async getBlock(t,e){const{network:n,params:r}=await i({network:this.getNetwork(),params:this.#qt(t,!!e)});return null==r?null:this._wrapBlock(r,n)}async getTransaction(t){const{network:e,params:n}=await i({network:this.getNetwork(),params:this.#Kt({method:\\\"getTransaction\\\",hash:t})});return null==n?null:this._wrapTransactionResponse(n,e)}async getTransactionReceipt(t){const{network:e,params:n}=await i({network:this.getNetwork(),params:this.#Kt({method:\\\"getTransactionReceipt\\\",hash:t})});if(null==n)return null;if(null==n.gasPrice&&null==n.effectiveGasPrice){const e=await this.#Kt({method:\\\"getTransaction\\\",hash:t});if(null==e)throw new Error(\\\"report this; could not find tx or effectiveGasPrice\\\");n.effectiveGasPrice=e.gasPrice}return this._wrapTransactionReceipt(n,e)}async getTransactionResult(t){const{result:e}=await i({network:this.getNetwork(),result:this.#Kt({method:\\\"getTransactionResult\\\",hash:t})});return null==e?null:E(e)}async getLogs(t){let e=this._getFilter(t);dc(e)&&(e=await e);const{network:n,params:r}=await i({network:this.getNetwork(),params:this.#Kt({method:\\\"getLogs\\\",filter:e})});return r.map((t=>this._wrapLog(t,n)))}_getProvider(t){h(!1,\\\"provider cannot connect to target network\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"_getProvider()\\\"})}async getResolver(t){return await Ma.fromName(this,t)}async getAvatar(t){const e=await this.getResolver(t);return e?await e.getAvatar():null}async resolveName(t){const e=await this.getResolver(t);return e?await e.getAddress():null}async lookupAddress(t){const e=wi((t=Wt(t)).substring(2).toLowerCase()+\\\".addr.reverse\\\");try{const n=await Ma.getEnsAddress(this),r=new Yr(n,[\\\"function resolver(bytes32) view returns (address)\\\"],this),s=await r.resolver(e);if(null==s||s===rr)return null;const i=new Yr(s,[\\\"function name(bytes32) view returns (string)\\\"],this),o=await i.name(e);return await this.resolveName(o)!==t?null:o}catch(t){if(c(t,\\\"BAD_DATA\\\")&&\\\"0x\\\"===t.value)return null;if(c(t,\\\"CALL_EXCEPTION\\\"))return null;throw t}return null}async waitForTransaction(t,e,n){const r=null!=e?e:1;return 0===r?this.getTransactionReceipt(t):new Promise((async(e,s)=>{let i=null;const o=async n=>{try{const s=await this.getTransactionReceipt(t);if(null!=s&&n-s.blockNumber+1>=r)return e(s),void(i&&(clearTimeout(i),i=null))}catch(t){console.log(\\\"EEE\\\",t)}this.once(\\\"block\\\",o)};null!=n&&(i=setTimeout((()=>{null!=i&&(i=null,this.off(\\\"block\\\",o),s(u(\\\"timeout\\\",\\\"TIMEOUT\\\",{reason:\\\"timeout\\\"})))}),n)),o(await this.getBlockNumber())}))}async waitForBlock(t){h(!1,\\\"not implemented yet\\\",\\\"NOT_IMPLEMENTED\\\",{operation:\\\"waitForBlock\\\"})}_clearTimeout(t){const e=this.#Jt.get(t);e&&(e.timer&&clearTimeout(e.timer),this.#Jt.delete(t))}_setTimeout(t,e){null==e&&(e=0);const n=this.#Vt++,r=()=>{this.#Jt.delete(n),t()};if(this.paused)this.#Jt.set(n,{timer:null,func:r,time:e});else{const t=setTimeout(r,e);this.#Jt.set(n,{timer:t,func:r,time:wc()})}return n}_forEachSubscriber(t){for(const e of this.#Dt.values())t(e.subscriber)}_getSubscriber(t){switch(t.type){case\\\"debug\\\":case\\\"error\\\":case\\\"network\\\":return new gc(t.type);case\\\"block\\\":{const t=new oc(this);return t.pollingInterval=this.pollingInterval,t}case\\\"safe\\\":case\\\"finalized\\\":return new cc(this,t.type);case\\\"event\\\":return new hc(this,t.filter);case\\\"transaction\\\":return new uc(this,t.hash);case\\\"orphan\\\":return new lc(this,t.filter)}throw new Error(`unsupported event: ${t.type}`)}_recoverSubscriber(t,e){for(const n of this.#Dt.values())if(n.subscriber===t){n.started&&n.subscriber.stop(),n.subscriber=e,n.started&&e.start(),null!=this.#Lt&&e.pause(this.#Lt);break}}async#Yt(t,e){let n=await yc(t,this);return\\\"event\\\"===n.type&&e&&e.length>0&&!0===e[0].removed&&(n=await yc({orphan:\\\"drop-log\\\",log:e[0]},this)),this.#Dt.get(n.tag)||null}async#Xt(t){const e=await yc(t,this),n=e.tag;let r=this.#Dt.get(n);if(!r){r={subscriber:this._getSubscriber(e),tag:n,addressableMap:new WeakMap,nameMap:new Map,started:!1,listeners:[]},this.#Dt.set(n,r)}return r}async on(t,e){const n=await this.#Xt(t);return n.listeners.push({listener:e,once:!1}),n.started||(n.subscriber.start(),n.started=!0,null!=this.#Lt&&n.subscriber.pause(this.#Lt)),this}async once(t,e){const n=await this.#Xt(t);return n.listeners.push({listener:e,once:!0}),n.started||(n.subscriber.start(),n.started=!0,null!=this.#Lt&&n.subscriber.pause(this.#Lt)),this}async emit(t,...e){const n=await this.#Yt(t,e);if(!n||0===n.listeners.length)return!1;const r=n.listeners.length;return n.listeners=n.listeners.filter((({listener:n,once:r})=>{const s=new Er(this,r?null:n,t);try{n.call(this,...e,s)}catch(t){}return!r})),0===n.listeners.length&&(n.started&&n.subscriber.stop(),this.#Dt.delete(n.tag)),r>0}async listenerCount(t){if(t){const e=await this.#Yt(t);return e?e.listeners.length:0}let e=0;for(const{listeners:t}of this.#Dt.values())e+=t.length;return e}async listeners(t){if(t){const e=await this.#Yt(t);return e?e.listeners.map((({listener:t})=>t)):[]}let e=[];for(const{listeners:t}of this.#Dt.values())e=e.concat(t.map((({listener:t})=>t)));return e}async off(t,e){const n=await this.#Yt(t);if(!n)return this;if(e){const t=n.listeners.map((({listener:t})=>t)).indexOf(e);t>=0&&n.listeners.splice(t,1)}return e&&0!==n.listeners.length||(n.started&&n.subscriber.stop(),this.#Dt.delete(n.tag)),this}async removeAllListeners(t){if(t){const{tag:e,started:n,subscriber:r}=await this.#Xt(t);n&&r.stop(),this.#Dt.delete(e)}else for(const[t,{started:e,subscriber:n}]of this.#Dt)e&&n.stop(),this.#Dt.delete(t);return this}async addListener(t,e){return await this.on(t,e)}async removeListener(t,e){return this.off(t,e)}get destroyed(){return this.#Mt}destroy(){this.removeAllListeners();for(const t of this.#Jt.keys())this._clearTimeout(t);this.#Mt=!0}get paused(){return null!=this.#Lt}set paused(t){!!t!==this.paused&&(this.paused?this.resume():this.pause(!1))}pause(t){if(this.#jt=-1,null!=this.#Lt){if(this.#Lt==!!t)return;h(!1,\\\"cannot change pause type; resume first\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"pause\\\"})}this._forEachSubscriber((e=>e.pause(t))),this.#Lt=!!t;for(const t of this.#Jt.values())t.timer&&clearTimeout(t.timer),t.time=wc()-t.time}resume(){if(null!=this.#Lt){this._forEachSubscriber((t=>t.resume())),this.#Lt=null;for(const t of this.#Jt.values()){let e=t.time;e<0&&(e=0),t.time=wc(),setTimeout(t.func,e)}}}}function vc(t,e){try{const n=Ec(t,e);if(n)return ve(n)}catch(t){}return null}function Ec(t,e){if(\\\"0x\\\"===t)return null;try{const n=L(x(t,e,e+32)),r=L(x(t,n,n+32));return x(t,n+32,n+32+r)}catch(t){}return null}function kc(t){const e=G(t);if(e.length>32)throw new Error(\\\"internal; should not happen\\\");const n=new Uint8Array(32);return n.set(e,32-e.length),n}function Pc(t){if(t.length%32==0)return t;const e=new Uint8Array(32*Math.ceil(t.length/32));return e.set(t),e}const xc=new Uint8Array([]);function Nc(t){const e=[];let n=0;for(let r=0;r<t.length;r++)e.push(xc),n+=32;for(let r=0;r<t.length;r++){const s=y(t[r]);e[r]=kc(n),e.push(kc(s.length)),e.push(Pc(s)),n+=32+32*Math.ceil(s.length/32)}return k(e)}const Bc=\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\";function Ic(t,e){if(t.provider)return t.provider;h(!1,\\\"missing provider\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:e})}async function Cc(t,e){let n=gr(e);if(null!=n.to&&(n.to=xn(n.to,t)),null!=n.from){const e=n.from;n.from=Promise.all([t.getAddress(),xn(e,t)]).then((([t,e])=>(f(t.toLowerCase()===e.toLowerCase(),\\\"transaction from mismatch\\\",\\\"tx.from\\\",e),t)))}else n.from=t.getAddress();return await i(n)}class Oc{provider;constructor(t){o(this,{provider:t||null})}async getNonce(t){return Ic(this,\\\"getTransactionCount\\\").getTransactionCount(await this.getAddress(),t)}async populateCall(t){return await Cc(this,t)}async populateTransaction(t){const e=Ic(this,\\\"populateTransaction\\\"),n=await Cc(this,t);null==n.nonce&&(n.nonce=await this.getNonce(\\\"pending\\\")),null==n.gasLimit&&(n.gasLimit=await this.estimateGas(n));const r=await this.provider.getNetwork();if(null!=n.chainId){f(S(n.chainId)===r.chainId,\\\"transaction chainId mismatch\\\",\\\"tx.chainId\\\",t.chainId)}else n.chainId=r.chainId;const s=null!=n.maxFeePerGas||null!=n.maxPriorityFeePerGas;if(null==n.gasPrice||2!==n.type&&!s?0!==n.type&&1!==n.type||!s||f(!1,\\\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\\\",\\\"tx\\\",t):f(!1,\\\"eip-1559 transaction do not support gasPrice\\\",\\\"tx\\\",t),2!==n.type&&null!=n.type||null==n.maxFeePerGas||null==n.maxPriorityFeePerGas)if(0===n.type||1===n.type){const t=await e.getFeeData();h(null!=t.gasPrice,\\\"network does not support gasPrice\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"getGasPrice\\\"}),null==n.gasPrice&&(n.gasPrice=t.gasPrice)}else{const t=await e.getFeeData();if(null==n.type)if(null!=t.maxFeePerGas&&null!=t.maxPriorityFeePerGas)if(n.type=2,null!=n.gasPrice){const t=n.gasPrice;delete n.gasPrice,n.maxFeePerGas=t,n.maxPriorityFeePerGas=t}else null==n.maxFeePerGas&&(n.maxFeePerGas=t.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=t.maxPriorityFeePerGas);else null!=t.gasPrice?(h(!s,\\\"network does not support EIP-1559\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"populateTransaction\\\"}),null==n.gasPrice&&(n.gasPrice=t.gasPrice),n.type=0):h(!1,\\\"failed to get consistent fee data\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"signer.getFeeData\\\"});else 2!==n.type&&3!==n.type||(null==n.maxFeePerGas&&(n.maxFeePerGas=t.maxFeePerGas),null==n.maxPriorityFeePerGas&&(n.maxPriorityFeePerGas=t.maxPriorityFeePerGas))}else n.type=2;return await i(n)}async estimateGas(t){return Ic(this,\\\"estimateGas\\\").estimateGas(await this.populateCall(t))}async call(t){return Ic(this,\\\"call\\\").call(await this.populateCall(t))}async resolveName(t){const e=Ic(this,\\\"resolveName\\\");return await e.resolveName(t)}async sendTransaction(t){const e=Ic(this,\\\"sendTransaction\\\"),n=await this.populateTransaction(t);delete n.from;const r=Ra.from(n);return await e.broadcastTransaction(await this.signTransaction(r))}}class Rc{#Bt;#$t;#It;#Tt;#te;#ee;constructor(t){this.#Bt=t,this.#$t=null,this.#It=this.#Rt.bind(this),this.#Tt=!1,this.#te=null,this.#ee=!1}_subscribe(t){throw new Error(\\\"subclasses must override this\\\")}_emitResults(t,e){throw new Error(\\\"subclasses must override this\\\")}_recover(t){throw new Error(\\\"subclasses must override this\\\")}async#Rt(t){try{null==this.#$t&&(this.#$t=this._subscribe(this.#Bt));let t=null;try{t=await this.#$t}catch(t){if(!c(t,\\\"UNSUPPORTED_OPERATION\\\")||\\\"eth_newFilter\\\"!==t.operation)throw t}if(null==t)return this.#$t=null,void this.#Bt._recoverSubscriber(this,this._recover(this.#Bt));const e=await this.#Bt.getNetwork();if(this.#te||(this.#te=e),this.#te.chainId!==e.chainId)throw new Error(\\\"chaid changed\\\");if(this.#ee)return;const n=await this.#Bt.send(\\\"eth_getFilterChanges\\\",[t]);await this._emitResults(this.#Bt,n)}catch(t){console.log(\\\"@TODO\\\",t)}this.#Bt.once(\\\"block\\\",this.#It)}#ne(){const t=this.#$t;t&&(this.#$t=null,t.then((t=>{this.#Bt.destroyed||this.#Bt.send(\\\"eth_uninstallFilter\\\",[t])})))}start(){this.#Tt||(this.#Tt=!0,this.#Rt(-2))}stop(){this.#Tt&&(this.#Tt=!1,this.#ee=!0,this.#ne(),this.#Bt.off(\\\"block\\\",this.#It))}pause(t){t&&this.#ne(),this.#Bt.off(\\\"block\\\",this.#It)}resume(){this.start()}}class Tc extends Rc{#re;constructor(t,e){var n;super(t),this.#re=(n=e,JSON.parse(JSON.stringify(n)))}_recover(t){return new hc(t,this.#re)}async _subscribe(t){return await t.send(\\\"eth_newFilter\\\",[this.#re])}async _emitResults(t,e){for(const n of e)t.emit(this.#re,t._wrapLog(n,t._network))}}class Sc extends Rc{async _subscribe(t){return await t.send(\\\"eth_newPendingTransactionFilter\\\",[])}async _emitResults(t,e){for(const n of e)t.emit(\\\"pending\\\",n)}}const Fc=\\\"bigint,boolean,function,number,string,symbol\\\".split(/,/g);function Uc(t){if(null==t||Fc.indexOf(typeof t)>=0)return t;if(\\\"function\\\"==typeof t.getAddress)return t;if(Array.isArray(t))return t.map(Uc);if(\\\"object\\\"==typeof t)return Object.keys(t).reduce(((e,n)=>(e[n]=t[n],e)),{});throw new Error(`should not happen: ${t} (${typeof t})`)}function Dc(t){return new Promise((e=>{setTimeout(e,t)}))}function Lc(t){return t?t.toLowerCase():t}function Mc(t){return t&&\\\"number\\\"==typeof t.pollingInterval}const Gc={polling:!1,staticNetwork:null,batchStallTime:10,batchMaxSize:1<<20,batchMaxCount:100,cacheTimeout:250,pollingInterval:4e3};class Hc extends Oc{address;constructor(t,e){super(t),o(this,{address:e=Wt(e)})}connect(t){h(!1,\\\"cannot reconnect JsonRpcSigner\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"signer.connect\\\"})}async getAddress(){return this.address}async populateTransaction(t){return await this.populateCall(t)}async sendUncheckedTransaction(t){const e=Uc(t),n=[];if(e.from){const r=e.from;n.push((async()=>{const n=await xn(r,this.provider);f(null!=n&&n.toLowerCase()===this.address.toLowerCase(),\\\"from address mismatch\\\",\\\"transaction\\\",t),e.from=n})())}else e.from=this.address;if(null==e.gasLimit&&n.push((async()=>{e.gasLimit=await this.provider.estimateGas({...e,from:this.address})})()),null!=e.to){const t=e.to;n.push((async()=>{e.to=await xn(t,this.provider)})())}n.length&&await Promise.all(n);const r=this.provider.getRpcTransaction(e);return this.provider.send(\\\"eth_sendTransaction\\\",[r])}async sendTransaction(t){const e=await this.provider.getBlockNumber(),n=await this.sendUncheckedTransaction(t);return await new Promise(((t,r)=>{const s=[1e3,100];let i=0;const o=async()=>{try{const r=await this.provider.getTransaction(n);if(null!=r)return void t(r.replaceableTransaction(e))}catch(t){if(c(t,\\\"CANCELLED\\\")||c(t,\\\"BAD_DATA\\\")||c(t,\\\"NETWORK_ERROR\\\"))return null==t.info&&(t.info={}),t.info.sendTransactionHash=n,void r(t);if(c(t,\\\"INVALID_ARGUMENT\\\")&&(i++,null==t.info&&(t.info={}),t.info.sendTransactionHash=n,i>10))return void r(t);this.provider.emit(\\\"error\\\",u(\\\"failed to fetch transation after sending (will try again)\\\",\\\"UNKNOWN_ERROR\\\",{error:t}))}this.provider._setTimeout((()=>{o()}),s.pop()||4e3)};o()}))}async signTransaction(t){const e=Uc(t);if(e.from){const n=await xn(e.from,this.provider);f(null!=n&&n.toLowerCase()===this.address.toLowerCase(),\\\"from address mismatch\\\",\\\"transaction\\\",t),e.from=n}else e.from=this.address;const n=this.provider.getRpcTransaction(e);return await this.provider.send(\\\"eth_signTransaction\\\",[n])}async signMessage(t){const e=\\\"string\\\"==typeof t?Ae(t):t;return await this.provider.send(\\\"personal_sign\\\",[E(e),this.address.toLowerCase()])}async signTypedData(t,e,n){const r=Uc(n),s=await Hn.resolveNames(t,e,r,(async t=>{const e=await xn(t);return f(null!=e,\\\"TypedData does not support null address\\\",\\\"value\\\",t),e}));return await this.provider.send(\\\"eth_signTypedData_v4\\\",[this.address.toLowerCase(),JSON.stringify(Hn.getPayload(s.domain,e,s.value))])}async unlock(t){return this.provider.send(\\\"personal_unlockAccount\\\",[this.address.toLowerCase(),t,null])}async _legacySignMessage(t){const e=\\\"string\\\"==typeof t?Ae(t):t;return await this.provider.send(\\\"eth_sign\\\",[this.address.toLowerCase(),E(e)])}}class Qc extends Ac{#u;#se;#ie;#oe;#ae;#te;#ce;#le(){if(this.#oe)return;const t=1===this._getOption(\\\"batchMaxCount\\\")?0:this._getOption(\\\"batchStallTime\\\");this.#oe=setTimeout((()=>{this.#oe=null;const t=this.#ie;for(this.#ie=[];t.length;){const e=[t.shift()];for(;t.length&&e.length!==this.#u.batchMaxCount;){e.push(t.shift());if(JSON.stringify(e.map((t=>t.payload))).length>this.#u.batchMaxSize){t.unshift(e.pop());break}}(async()=>{const t=1===e.length?e[0].payload:e.map((t=>t.payload));this.emit(\\\"debug\\\",{action:\\\"sendRpcPayload\\\",payload:t});try{const n=await this._send(t);this.emit(\\\"debug\\\",{action:\\\"receiveRpcResult\\\",result:n});for(const{resolve:t,reject:r,payload:s}of e){if(this.destroyed){r(u(\\\"provider destroyed; cancelled request\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:s.method}));continue}const e=n.filter((t=>t.id===s.id))[0];if(null!=e)\\\"error\\\"in e?r(this.getRpcError(s,e)):t(e.result);else{const t=u(\\\"missing response for request\\\",\\\"BAD_DATA\\\",{value:n,info:{payload:s}});this.emit(\\\"error\\\",t),r(t)}}}catch(t){this.emit(\\\"debug\\\",{action:\\\"receiveRpcError\\\",error:t});for(const{reject:n}of e)n(t)}})()}}),t)}constructor(t,e){super(t,e),this.#se=1,this.#u=Object.assign({},Gc,e||{}),this.#ie=[],this.#oe=null,this.#te=null,this.#ce=null;{let t=null;const e=new Promise((e=>{t=e}));this.#ae={promise:e,resolve:t}}const n=this._getOption(\\\"staticNetwork\\\");\\\"boolean\\\"==typeof n?(f(!n||\\\"any\\\"!==t,\\\"staticNetwork cannot be used on special network 'any'\\\",\\\"options\\\",e),n&&null!=t&&(this.#te=ec.from(t))):n&&(f(null==t||n.matches(t),\\\"staticNetwork MUST match network object\\\",\\\"options\\\",e),this.#te=n)}_getOption(t){return this.#u[t]}get _network(){return h(this.#te,\\\"network is not available yet\\\",\\\"NETWORK_ERROR\\\"),this.#te}async _perform(t){if(\\\"call\\\"===t.method||\\\"estimateGas\\\"===t.method){let e=t.transaction;if(e&&null!=e.type&&S(e.type)&&null==e.maxFeePerGas&&null==e.maxPriorityFeePerGas){const n=await this.getFeeData();null==n.maxFeePerGas&&null==n.maxPriorityFeePerGas&&(t=Object.assign({},t,{transaction:Object.assign({},e,{type:void 0})}))}}const e=this.getRpcRequest(t);return null!=e?await this.send(e.method,e.args):super._perform(t)}async _detectNetwork(){const t=this._getOption(\\\"staticNetwork\\\");if(t){if(!0!==t)return t;if(this.#te)return this.#te}return this.#ce?await this.#ce:this.ready?(this.#ce=(async()=>{try{const t=ec.from(S(await this.send(\\\"eth_chainId\\\",[])));return this.#ce=null,t}catch(t){throw this.#ce=null,t}})(),await this.#ce):(this.#ce=(async()=>{const t={id:this.#se++,method:\\\"eth_chainId\\\",params:[],jsonrpc:\\\"2.0\\\"};let e;this.emit(\\\"debug\\\",{action:\\\"sendRpcPayload\\\",payload:t});try{e=(await this._send(t))[0],this.#ce=null}catch(t){throw this.#ce=null,this.emit(\\\"debug\\\",{action:\\\"receiveRpcError\\\",error:t}),t}if(this.emit(\\\"debug\\\",{action:\\\"receiveRpcResult\\\",result:e}),\\\"result\\\"in e)return ec.from(S(e.result));throw this.getRpcError(t,e)})(),await this.#ce)}_start(){null!=this.#ae&&null!=this.#ae.resolve&&(this.#ae.resolve(),this.#ae=null,(async()=>{for(;null==this.#te&&!this.destroyed;)try{this.#te=await this._detectNetwork()}catch(t){if(this.destroyed)break;console.log(\\\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\\\"),this.emit(\\\"error\\\",u(\\\"failed to bootstrap network detection\\\",\\\"NETWORK_ERROR\\\",{event:\\\"initial-network-discovery\\\",info:{error:t}})),await Dc(1e3)}this.#le()})())}async _waitUntilReady(){if(null!=this.#ae)return await this.#ae.promise}_getSubscriber(t){return\\\"pending\\\"===t.type?new Sc(this):\\\"event\\\"===t.type?this._getOption(\\\"polling\\\")?new hc(this,t.filter):new Tc(this,t.filter):\\\"orphan\\\"===t.type&&\\\"drop-log\\\"===t.filter.orphan?new gc(\\\"orphan\\\"):super._getSubscriber(t)}get ready(){return null==this.#ae}getRpcTransaction(t){const e={};return[\\\"chainId\\\",\\\"gasLimit\\\",\\\"gasPrice\\\",\\\"type\\\",\\\"maxFeePerGas\\\",\\\"maxPriorityFeePerGas\\\",\\\"nonce\\\",\\\"value\\\"].forEach((n=>{if(null==t[n])return;let r=n;\\\"gasLimit\\\"===n&&(r=\\\"gas\\\"),e[r]=H(S(t[n],`tx.${n}`))})),[\\\"from\\\",\\\"to\\\",\\\"data\\\"].forEach((n=>{null!=t[n]&&(e[n]=E(t[n]))})),t.accessList&&(e.accessList=jn(t.accessList)),t.blobVersionedHashes&&(e.blobVersionedHashes=t.blobVersionedHashes.map((t=>t.toLowerCase()))),e}getRpcRequest(t){switch(t.method){case\\\"chainId\\\":return{method:\\\"eth_chainId\\\",args:[]};case\\\"getBlockNumber\\\":return{method:\\\"eth_blockNumber\\\",args:[]};case\\\"getGasPrice\\\":return{method:\\\"eth_gasPrice\\\",args:[]};case\\\"getPriorityFee\\\":return{method:\\\"eth_maxPriorityFeePerGas\\\",args:[]};case\\\"getBalance\\\":return{method:\\\"eth_getBalance\\\",args:[Lc(t.address),t.blockTag]};case\\\"getTransactionCount\\\":return{method:\\\"eth_getTransactionCount\\\",args:[Lc(t.address),t.blockTag]};case\\\"getCode\\\":return{method:\\\"eth_getCode\\\",args:[Lc(t.address),t.blockTag]};case\\\"getStorage\\\":return{method:\\\"eth_getStorageAt\\\",args:[Lc(t.address),\\\"0x\\\"+t.position.toString(16),t.blockTag]};case\\\"broadcastTransaction\\\":return{method:\\\"eth_sendRawTransaction\\\",args:[t.signedTransaction]};case\\\"getBlock\\\":if(\\\"blockTag\\\"in t)return{method:\\\"eth_getBlockByNumber\\\",args:[t.blockTag,!!t.includeTransactions]};if(\\\"blockHash\\\"in t)return{method:\\\"eth_getBlockByHash\\\",args:[t.blockHash,!!t.includeTransactions]};break;case\\\"getTransaction\\\":return{method:\\\"eth_getTransactionByHash\\\",args:[t.hash]};case\\\"getTransactionReceipt\\\":return{method:\\\"eth_getTransactionReceipt\\\",args:[t.hash]};case\\\"call\\\":return{method:\\\"eth_call\\\",args:[this.getRpcTransaction(t.transaction),t.blockTag]};case\\\"estimateGas\\\":return{method:\\\"eth_estimateGas\\\",args:[this.getRpcTransaction(t.transaction)]};case\\\"getLogs\\\":return t.filter&&null!=t.filter.address&&(Array.isArray(t.filter.address)?t.filter.address=t.filter.address.map(Lc):t.filter.address=Lc(t.filter.address)),{method:\\\"eth_getLogs\\\",args:[t.filter]}}return null}getRpcError(t,e){const{method:n}=t,{error:r}=e;if(\\\"eth_estimateGas\\\"===n&&r.message){const e=r.message;if(!e.match(/revert/i)&&e.match(/insufficient funds/i))return u(\\\"insufficient funds\\\",\\\"INSUFFICIENT_FUNDS\\\",{transaction:t.params[0],info:{payload:t,error:r}})}if(\\\"eth_call\\\"===n||\\\"eth_estimateGas\\\"===n){const e=Jc(r),s=En.getBuiltinCallException(\\\"eth_call\\\"===n?\\\"call\\\":\\\"estimateGas\\\",t.params[0],e?e.data:null);return s.info={error:r,payload:t},s}const s=JSON.stringify(function(t){const e=[];return zc(t,e),e}(r));if(\\\"string\\\"==typeof r.message&&r.message.match(/user denied|ethers-user-denied/i)){return u(\\\"user rejected action\\\",\\\"ACTION_REJECTED\\\",{action:{eth_sign:\\\"signMessage\\\",personal_sign:\\\"signMessage\\\",eth_signTypedData_v4:\\\"signTypedData\\\",eth_signTransaction:\\\"signTransaction\\\",eth_sendTransaction:\\\"sendTransaction\\\",eth_requestAccounts:\\\"requestAccess\\\",wallet_requestAccounts:\\\"requestAccess\\\"}[n]||\\\"unknown\\\",reason:\\\"rejected\\\",info:{payload:t,error:r}})}if(\\\"eth_sendRawTransaction\\\"===n||\\\"eth_sendTransaction\\\"===n){const e=t.params[0];if(s.match(/insufficient funds|base fee exceeds gas limit/i))return u(\\\"insufficient funds for intrinsic transaction cost\\\",\\\"INSUFFICIENT_FUNDS\\\",{transaction:e,info:{error:r}});if(s.match(/nonce/i)&&s.match(/too low/i))return u(\\\"nonce has already been used\\\",\\\"NONCE_EXPIRED\\\",{transaction:e,info:{error:r}});if(s.match(/replacement transaction/i)&&s.match(/underpriced/i))return u(\\\"replacement fee too low\\\",\\\"REPLACEMENT_UNDERPRICED\\\",{transaction:e,info:{error:r}});if(s.match(/only replay-protected/i))return u(\\\"legacy pre-eip-155 transactions not supported\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:n,info:{transaction:e,info:{error:r}}})}let i=!!s.match(/the method .* does not exist/i);return i||r&&r.details&&r.details.startsWith(\\\"Unauthorized method:\\\")&&(i=!0),i?u(\\\"unsupported operation\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:t.method,info:{error:r,payload:t}}):u(\\\"could not coalesce error\\\",\\\"UNKNOWN_ERROR\\\",{error:r,payload:t})}send(t,e){if(this.destroyed)return Promise.reject(u(\\\"provider destroyed; cancelled request\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:t}));const n=this.#se++,r=new Promise(((r,s)=>{this.#ie.push({resolve:r,reject:s,payload:{method:t,params:e,id:n,jsonrpc:\\\"2.0\\\"}})}));return this.#le(),r}async getSigner(t){null==t&&(t=0);const e=this.send(\\\"eth_accounts\\\",[]);if(\\\"number\\\"==typeof t){const n=await e;if(t>=n.length)throw new Error(\\\"no such account\\\");return new Hc(this,n[t])}const{accounts:n}=await i({network:this.getNetwork(),accounts:e});t=Wt(t);for(const e of n)if(Wt(e)===t)return new Hc(this,t);throw new Error(\\\"invalid account\\\")}async listAccounts(){return(await this.send(\\\"eth_accounts\\\",[])).map((t=>new Hc(this,t)))}destroy(){this.#oe&&(clearTimeout(this.#oe),this.#oe=null);for(const{payload:t,reject:e}of this.#ie)e(u(\\\"provider destroyed; cancelled request\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:t.method}));this.#ie=[],super.destroy()}}class jc extends Qc{#ue;constructor(t,e){super(t,e);let n=this._getOption(\\\"pollingInterval\\\");null==n&&(n=Gc.pollingInterval),this.#ue=n}_getSubscriber(t){const e=super._getSubscriber(t);return Mc(e)&&(e.pollingInterval=this.#ue),e}get pollingInterval(){return this.#ue}set pollingInterval(t){if(!Number.isInteger(t)||t<0)throw new Error(\\\"invalid interval\\\");this.#ue=t,this._forEachSubscriber((t=>{Mc(t)&&(t.pollingInterval=this.#ue)}))}}class Vc extends jc{#he;constructor(t,e,n){null==t&&(t=\\\"http://localhost:8545\\\"),super(e,n),this.#he=\\\"string\\\"==typeof t?new tr(t):t.clone()}_getConnection(){return this.#he.clone()}async send(t,e){return await this._start(),await super.send(t,e)}async _send(t){const e=this._getConnection();e.body=JSON.stringify(t),e.setHeader(\\\"content-type\\\",\\\"application/json\\\");const n=await e.send();n.assertOk();let r=n.bodyJson;return Array.isArray(r)||(r=[r]),r}}function Jc(t){if(null==t)return null;if(\\\"string\\\"==typeof t.message&&t.message.match(/revert/i)&&b(t.data))return{message:t.message,data:t.data};if(\\\"object\\\"==typeof t){for(const e in t){const n=Jc(t[e]);if(n)return n}return null}if(\\\"string\\\"==typeof t)try{return Jc(JSON.parse(t))}catch(t){}return null}function zc(t,e){if(null!=t){if(\\\"string\\\"==typeof t.message&&e.push(t.message),\\\"object\\\"==typeof t)for(const n in t)zc(t[n],e);if(\\\"string\\\"==typeof t)try{return zc(JSON.parse(t),e)}catch(t){}}}class Kc extends jc{#G;constructor(t,e,n){const r=Object.assign({},null!=n?n:{},{batchMaxCount:1});f(t&&t.request,\\\"invalid EIP-1193 provider\\\",\\\"ethereum\\\",t),super(e,r),this.#G=async(e,n)=>{const r={method:e,params:n};this.emit(\\\"debug\\\",{action:\\\"sendEip1193Request\\\",payload:r});try{const e=await t.request(r);return this.emit(\\\"debug\\\",{action:\\\"receiveEip1193Result\\\",result:e}),e}catch(t){const e=new Error(t.message);throw e.code=t.code,e.data=t.data,e.payload=r,this.emit(\\\"debug\\\",{action:\\\"receiveEip1193Error\\\",error:e}),e}}}async send(t,e){return await this._start(),await super.send(t,e)}async _send(t){f(!Array.isArray(t),\\\"EIP-1193 does not support batch request\\\",\\\"payload\\\",t);try{const e=await this.#G(t.method,t.params||[]);return[{id:t.id,result:e}]}catch(e){return[{id:t.id,error:{code:e.code,data:e.data,message:e.message}}]}}getRpcError(t,e){switch((e=JSON.parse(JSON.stringify(e))).error.code||-1){case 4001:e.error.message=`ethers-user-denied: ${e.error.message}`;break;case 4200:e.error.message=`ethers-unsupported: ${e.error.message}`}return super.getRpcError(t,e)}async hasSigner(t){null==t&&(t=0);const e=await this.send(\\\"eth_accounts\\\",[]);return\\\"number\\\"==typeof t?e.length>t:(t=t.toLowerCase(),0!==e.filter((e=>e.toLowerCase()===t)).length)}async getSigner(t){if(null==t&&(t=0),!await this.hasSigner(t))try{await this.#G(\\\"eth_requestAccounts\\\",[])}catch(t){const e=t.payload;throw this.getRpcError(e,{id:e.id,error:t})}return await super.getSigner(t)}}const qc=new Set;const _c=function(){if(\\\"undefined\\\"!=typeof self)return self;if(\\\"undefined\\\"!=typeof window)return window;if(\\\"undefined\\\"!=typeof global)return global;throw new Error(\\\"unable to locate global object\\\")}().WebSocket;class Zc{#Bt;#X;get filter(){return JSON.parse(this.#X)}#fe;#de;#pe;constructor(t,e){this.#Bt=t,this.#X=JSON.stringify(e),this.#fe=null,this.#de=null,this.#pe=null}start(){this.#fe=this.#Bt.send(\\\"eth_subscribe\\\",this.filter).then((t=>(this.#Bt._register(t,this),t)))}stop(){this.#fe.then((t=>{this.#Bt.destroyed||this.#Bt.send(\\\"eth_unsubscribe\\\",[t])})),this.#fe=null}pause(t){h(t,\\\"preserve logs while paused not supported by SocketSubscriber yet\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"pause(false)\\\"}),this.#de=!!t}resume(){this.#de=null}_handleMessage(t){if(null!=this.#fe&&null===this.#de){let e=this.#pe;e=null==e?this._emit(this.#Bt,t):e.then((async()=>{await this._emit(this.#Bt,t)})),this.#pe=e.then((()=>{this.#pe===e&&(this.#pe=null)}))}}async _emit(t,e){throw new Error(\\\"sub-classes must implemente this; _emit\\\")}}class Wc extends Zc{constructor(t){super(t,[\\\"newHeads\\\"])}async _emit(t,e){t.emit(\\\"block\\\",parseInt(e.number))}}class Yc extends Zc{constructor(t){super(t,[\\\"newPendingTransactions\\\"])}async _emit(t,e){t.emit(\\\"pending\\\",e)}}class Xc extends Zc{#ge;get logFilter(){return JSON.parse(this.#ge)}constructor(t,e){super(t,[\\\"logs\\\",e]),this.#ge=JSON.stringify(e)}async _emit(t,e){t.emit(this.logFilter,t._wrapLog(e,t._network))}}class $c extends Qc{#me;#Dt;#ye;constructor(t,e){const n=Object.assign({},null!=e?e:{});f(null==n.batchMaxCount||1===n.batchMaxCount,\\\"sockets-based providers do not support batches\\\",\\\"options.batchMaxCount\\\",e),n.batchMaxCount=1,null==n.staticNetwork&&(n.staticNetwork=!0),super(t,n),this.#me=new Map,this.#Dt=new Map,this.#ye=new Map}_getSubscriber(t){switch(t.type){case\\\"close\\\":return new gc(\\\"close\\\");case\\\"block\\\":return new Wc(this);case\\\"pending\\\":return new Yc(this);case\\\"event\\\":return new Xc(this,t.filter);case\\\"orphan\\\":if(\\\"drop-log\\\"===t.filter.orphan)return new gc(\\\"drop-log\\\")}return super._getSubscriber(t)}_register(t,e){this.#Dt.set(t,e);const n=this.#ye.get(t);if(n){for(const t of n)e._handleMessage(t);this.#ye.delete(t)}}async _send(t){f(!Array.isArray(t),\\\"WebSocket does not support batch send\\\",\\\"payload\\\",t);const e=new Promise(((e,n)=>{this.#me.set(t.id,{payload:t,resolve:e,reject:n})}));return await this._waitUntilReady(),await this._write(JSON.stringify(t)),[await e]}async _processMessage(t){const e=JSON.parse(t);if(e&&\\\"object\\\"==typeof e&&\\\"id\\\"in e){const t=this.#me.get(e.id);if(null==t)return void this.emit(\\\"error\\\",u(\\\"received result for unknown id\\\",\\\"UNKNOWN_ERROR\\\",{reasonCode:\\\"UNKNOWN_ID\\\",result:e}));this.#me.delete(e.id),t.resolve(e)}else{if(!e||\\\"eth_subscription\\\"!==e.method)return void this.emit(\\\"error\\\",u(\\\"received unexpected message\\\",\\\"UNKNOWN_ERROR\\\",{reasonCode:\\\"UNEXPECTED_MESSAGE\\\",result:e}));{const t=e.params.subscription,n=this.#Dt.get(t);if(n)n._handleMessage(e.params.result);else{let n=this.#ye.get(t);null==n&&(n=[],this.#ye.set(t,n)),n.push(e.params.result)}}}}async _write(t){throw new Error(\\\"sub-classes must override this\\\")}}class tl extends $c{#he;#we;get websocket(){if(null==this.#we)throw new Error(\\\"websocket closed\\\");return this.#we}constructor(t,e,n){super(e,n),\\\"string\\\"==typeof t?(this.#he=()=>new _c(t),this.#we=this.#he()):\\\"function\\\"==typeof t?(this.#he=t,this.#we=t()):(this.#he=null,this.#we=t),this.websocket.onopen=async()=>{try{await this._start(),this.resume()}catch(t){console.log(\\\"failed to start WebsocketProvider\\\",t)}},this.websocket.onmessage=t=>{this._processMessage(t.data)}}async _write(t){this.websocket.send(t)}async destroy(){null!=this.#we&&(this.#we.close(),this.#we=null),super.destroy()}}const el=\\\"84842078b09946638c03157f83405213\\\";class nl extends tl{projectId;projectSecret;constructor(t,e){const n=new rl(t,e),r=n._getConnection();h(!r.credentials,\\\"INFURA WebSocket project secrets unsupported\\\",\\\"UNSUPPORTED_OPERATION\\\",{operation:\\\"InfuraProvider.getWebSocketProvider()\\\"});super(r.url.replace(/^http/i,\\\"ws\\\").replace(\\\"/v3/\\\",\\\"/ws/v3/\\\"),n._network),o(this,{projectId:n.projectId,projectSecret:n.projectSecret})}isCommunityResource(){return this.projectId===el}}class rl extends Vc{projectId;projectSecret;constructor(t,e,n){null==t&&(t=\\\"mainnet\\\");const r=ec.from(t);null==e&&(e=el),null==n&&(n=null);super(rl.getRequest(r,e,n),r,{staticNetwork:r}),o(this,{projectId:e,projectSecret:n})}_getProvider(t){try{return new rl(t,this.projectId,this.projectSecret)}catch(t){}return super._getProvider(t)}isCommunityResource(){return this.projectId===el}static getWebSocketProvider(t,e){return new nl(t,e)}static getRequest(t,e,n){null==e&&(e=el),null==n&&(n=null);const r=new tr(`https://${function(t){switch(t){case\\\"mainnet\\\":return\\\"mainnet.infura.io\\\";case\\\"goerli\\\":return\\\"goerli.infura.io\\\";case\\\"sepolia\\\":return\\\"sepolia.infura.io\\\";case\\\"arbitrum\\\":return\\\"arbitrum-mainnet.infura.io\\\";case\\\"arbitrum-goerli\\\":return\\\"arbitrum-goerli.infura.io\\\";case\\\"arbitrum-sepolia\\\":return\\\"arbitrum-sepolia.infura.io\\\";case\\\"base\\\":return\\\"base-mainnet.infura.io\\\";case\\\"base-goerlia\\\":return\\\"base-goerli.infura.io\\\";case\\\"base-sepolia\\\":return\\\"base-sepolia.infura.io\\\";case\\\"bnb\\\":return\\\"bnbsmartchain-mainnet.infura.io\\\";case\\\"bnbt\\\":return\\\"bnbsmartchain-testnet.infura.io\\\";case\\\"linea\\\":return\\\"linea-mainnet.infura.io\\\";case\\\"linea-goerli\\\":return\\\"linea-goerli.infura.io\\\";case\\\"linea-sepolia\\\":return\\\"linea-sepolia.infura.io\\\";case\\\"matic\\\":return\\\"polygon-mainnet.infura.io\\\";case\\\"matic-amoy\\\":return\\\"polygon-amoy.infura.io\\\";case\\\"matic-mumbai\\\":return\\\"polygon-mumbai.infura.io\\\";case\\\"optimism\\\":return\\\"optimism-mainnet.infura.io\\\";case\\\"optimism-goerli\\\":return\\\"optimism-goerli.infura.io\\\";case\\\"optimism-sepolia\\\":return\\\"optimism-sepolia.infura.io\\\"}f(!1,\\\"unsupported network\\\",\\\"network\\\",t)}(t.name)}/v3/${e}`);return r.allowGzip=!0,n&&r.setCredentials(\\\"\\\",n),e===el&&(r.retryFunc=async(t,e,n)=>{var r;return r=\\\"InfuraProvider\\\",qc.has(r)||(qc.add(r),console.log(\\\"========= NOTICE =========\\\"),console.log(`Request-Rate Exceeded for ${r} (this message will not be repeated)`),console.log(\\\"\\\"),console.log(\\\"The default API keys for each service are provided as a highly-throttled,\\\"),console.log(\\\"community resource for low-traffic projects and early prototyping.\\\"),console.log(\\\"\\\"),console.log(\\\"While your application will continue to function, we highly recommended\\\"),console.log(\\\"signing up for your own API keys to improve performance, increase your\\\"),console.log(\\\"request rate/limit and enable other perks, such as metrics and advanced APIs.\\\"),console.log(\\\"\\\"),console.log(\\\"For more details: https://docs.ethers.org/api-keys/\\\"),console.log(\\\"==========================\\\")),!0}),r}}const sl=[\\\"eip155:1\\\",\\\"eip155:11155111\\\",\\\"eip155:17000\\\"],il=\\\"Ethereum Name Service\\\";const ol=async t=>{const{chainId:e,address:n,domain:r}=t;let s;const i=parseInt(e.split(\\\":\\\")[1]??\\\"1\\\",10);if(sl.includes(e))s=new Kc(ethereum,i);else{const t=\\\"992108d9a01d4bffb06df489a0a3f458\\\";if(!t)throw new Error(\\\"INFURA_PROJECT_ID is missing.\\\");s=new rl(1,t)}if(r){const t=await s.getResolver(r);if(sl.includes(e)){var o;const e=await(null===(o=t)||void 0===o?void 0:o.getAddress());if(e)return{resolvedAddresses:[{resolvedAddress:e,protocol:il,domainName:r}]}}else{var a,c;const e=await(null===(a=t)||void 0===a?void 0:a.getAddress(i));if(e)return{resolvedAddresses:[{resolvedAddress:e,protocol:il,domainName:r}]};const n=await(null===(c=t)||void 0===c?void 0:c.getAddress());if(n){const t=await async function(t,e){try{return\\\"0x\\\"!==await t.getCode(e,\\\"pending\\\")}catch(t){return console.error(\\\"Unable to determine if resolved ENS address is a contract. Assuming it is and returning nothing.\\\"),!0}}(s,n);if(!t){const t=(await s.getNetwork()).name;return{resolvedAddresses:[{resolvedAddress:n,protocol:`⚠️ ${il} (${t})`,domainName:r}]}}}}}else if(n){const t=await s.lookupAddress(n);if(t)return{resolvedDomains:[{resolvedDomain:t,protocol:il}]}}return null};var al=exports;for(var cl in e)al[cl]=e[cl];e.__esModule&&Object.defineProperty(al,\\\"__esModule\\\",{value:!0})})();\"}],\"removable\":false}","import EthQuery, { Provider } from '@metamask/eth-query';\nimport { FetchGasFeeEstimateOptions } from '@metamask/gas-fee-controller';\nimport { BigNumber } from 'bignumber.js';\nimport { isHexString } from 'ethereumjs-util';\n\nimport { SmartTransaction } from '@metamask/smart-transactions-controller/dist/types';\nimport {\n  TransactionMeta,\n  TransactionType,\n} from '@metamask/transaction-controller';\nimport { ORIGIN_METAMASK } from '../../../../shared/constants/app';\nimport { GasRecommendations } from '../../../../shared/constants/gas';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventFragment,\n  MetaMetricsEventName,\n  MetaMetricsEventUiCustomization,\n  MetaMetricsPageObject,\n  MetaMetricsReferrerObject,\n} from '../../../../shared/constants/metametrics';\nimport {\n  TokenStandard,\n  TransactionApprovalAmountType,\n  TransactionMetaMetricsEvent,\n} from '../../../../shared/constants/transaction';\nimport {\n  calcGasTotal,\n  getSwapsTokensReceivedFromTxMeta,\n  TRANSACTION_ENVELOPE_TYPE_NAMES,\n} from '../../../../shared/lib/transactions-controller-utils';\nimport {\n  hexWEIToDecETH,\n  hexWEIToDecGWEI,\n} from '../../../../shared/modules/conversion.utils';\nimport { getSmartTransactionMetricsProperties } from '../../../../shared/modules/metametrics';\nimport {\n  determineTransactionAssetType,\n  isEIP1559Transaction,\n} from '../../../../shared/modules/transaction.utils';\nimport {\n  getBlockaidMetricsProps,\n  getSwapAndSendMetricsProps,\n} from '../../../../ui/helpers/utils/metrics';\nimport {\n  REDESIGN_DEV_TRANSACTION_TYPES,\n  REDESIGN_USER_TRANSACTION_TYPES,\n} from '../../../../ui/pages/confirmations/utils';\nimport {\n  getSnapAndHardwareInfoForMetrics,\n  type SnapAndHardwareMessenger,\n} from '../snap-keyring/metrics';\n\nexport type TransactionMetricsRequest = {\n  createEventFragment: (\n    options: MetaMetricsEventFragment,\n  ) => MetaMetricsEventFragment;\n  finalizeEventFragment: (\n    fragmentId: string,\n    options?: {\n      abandoned?: boolean;\n      page?: MetaMetricsPageObject;\n      referrer?: MetaMetricsReferrerObject;\n    },\n  ) => void;\n  getEventFragmentById: (fragmentId: string) => MetaMetricsEventFragment;\n  updateEventFragment: (\n    fragmentId: string,\n    payload: Partial<MetaMetricsEventFragment>,\n  ) => void;\n  getAccountType: (\n    address: string,\n  ) => Promise<'hardware' | 'imported' | 'MetaMask'>;\n  getDeviceModel: (\n    address: string,\n  ) => Promise<'ledger' | 'lattice' | 'N/A' | string>;\n  // According to the type GasFeeState returned from getEIP1559GasFeeEstimates\n  // doesn't include some properties used in buildEventFragmentProperties,\n  // hence returning any here to avoid type errors.\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getEIP1559GasFeeEstimates(options?: FetchGasFeeEstimateOptions): Promise<any>;\n  getParticipateInMetrics: () => boolean;\n  getSelectedAddress: () => string;\n  getTokenStandardAndDetails: () => Promise<{\n    decimals?: string;\n    balance?: string;\n    symbol?: string;\n    standard?: TokenStandard;\n  }>;\n  getTransaction: (transactionId: string) => TransactionMeta;\n  provider: Provider;\n  snapAndHardwareMessenger: SnapAndHardwareMessenger;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  trackEvent: (payload: any) => void;\n  getIsSmartTransaction: () => boolean;\n  getSmartTransactionByMinedTxHash: (\n    txhash: string | undefined,\n  ) => SmartTransaction;\n  getRedesignedTransactionsEnabled: () => boolean;\n  getMethodData: (data: string) => Promise<{ name: string }>;\n  getIsRedesignedConfirmationsDeveloperEnabled: () => boolean;\n  getIsConfirmationAdvancedDetailsOpen: () => boolean;\n};\n\nexport const METRICS_STATUS_FAILED = 'failed on-chain';\n\nexport type TransactionEventPayload = {\n  transactionMeta: TransactionMeta;\n  actionId?: string;\n  error?: string;\n};\n\nexport type TransactionMetaEventPayload = TransactionMeta & {\n  actionId?: string;\n  error?: string;\n};\n\n/**\n * This function is called when a transaction is added to the controller.\n *\n * @param transactionMetricsRequest - Contains controller actions needed to create/update/finalize event fragments\n * @param transactionEventPayload - The event payload\n * @param transactionEventPayload.transactionMeta - The transaction meta object\n */\nexport const handleTransactionAdded = async (\n  transactionMetricsRequest: TransactionMetricsRequest,\n  transactionEventPayload: TransactionEventPayload,\n) => {\n  if (!transactionEventPayload.transactionMeta) {\n    return;\n  }\n  const { properties, sensitiveProperties } =\n    await buildEventFragmentProperties({\n      transactionEventPayload,\n      transactionMetricsRequest,\n    });\n\n  createTransactionEventFragment({\n    eventName: TransactionMetaMetricsEvent.added,\n    transactionEventPayload,\n    transactionMetricsRequest,\n    payload: {\n      properties,\n      sensitiveProperties,\n    },\n  });\n};\n\n/**\n * This function is called when a transaction is approved by the user.\n *\n * @param transactionMetricsRequest - Contains controller actions needed to create/update/finalize event fragments\n * @param transactionEventPayload - The event payload\n * @param transactionEventPayload.transactionMeta - The transaction meta object\n */\nexport const handleTransactionApproved = async (\n  transactionMetricsRequest: TransactionMetricsRequest,\n  transactionEventPayload: TransactionEventPayload,\n) => {\n  if (!transactionEventPayload.transactionMeta) {\n    return;\n  }\n\n  await createUpdateFinalizeTransactionEventFragment({\n    eventName: TransactionMetaMetricsEvent.approved,\n    transactionEventPayload,\n    transactionMetricsRequest,\n  });\n};\n\n/**\n * This function is called when a transaction is failed.\n *\n * @param transactionMetricsRequest - Contains controller actions needed to create/update/finalize event fragments\n * @param transactionEventPayload - The event payload\n * @param transactionEventPayload.transactionMeta - The transaction meta object\n * @param transactionEventPayload.error - The error message if the transaction failed\n */\nexport const handleTransactionFailed = async (\n  transactionMetricsRequest: TransactionMetricsRequest,\n  transactionEventPayload: TransactionEventPayload,\n) => {\n  if (!transactionEventPayload.transactionMeta) {\n    return;\n  }\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const extraParams = {} as Record<string, any>;\n  if (transactionEventPayload.error) {\n    // This is a failed transaction\n    extraParams.error = transactionEventPayload.error;\n  }\n\n  await createUpdateFinalizeTransactionEventFragment({\n    eventName: TransactionMetaMetricsEvent.finalized,\n    extraParams,\n    transactionEventPayload,\n    transactionMetricsRequest,\n  });\n};\n\n/**\n * This function is called when a transaction is confirmed.\n *\n * @param transactionMetricsRequest - Contains controller actions needed to create/update/finalize event fragments\n * @param transactionEventPayload - The event payload\n * @param transactionEventPayload.transactionMeta - The transaction meta object\n * @param transactionEventPayload.error - The error message if the transaction failed\n */\nexport const handleTransactionConfirmed = async (\n  transactionMetricsRequest: TransactionMetricsRequest,\n  transactionEventPayload: TransactionMetaEventPayload,\n) => {\n  if (Object.keys(transactionEventPayload).length === 0) {\n    return;\n  }\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const extraParams = {} as Record<string, any>;\n  const transactionMeta = { ...transactionEventPayload };\n  const { txReceipt } = transactionMeta;\n\n  extraParams.gas_used = txReceipt?.gasUsed;\n\n  const { submittedTime } = transactionMeta;\n\n  if (submittedTime) {\n    extraParams.completion_time = getTransactionCompletionTime(submittedTime);\n  }\n\n  if (txReceipt?.status === '0x0') {\n    extraParams.status = METRICS_STATUS_FAILED;\n  }\n  await createUpdateFinalizeTransactionEventFragment({\n    eventName: TransactionMetaMetricsEvent.finalized,\n    extraParams,\n    transactionEventPayload: {\n      actionId: transactionMeta.actionId,\n      transactionMeta,\n    },\n    transactionMetricsRequest,\n  });\n};\n\n/**\n * This function is called when a transaction is dropped.\n *\n * @param transactionMetricsRequest - Contains controller actions needed to create/update/finalize event fragments\n * @param transactionEventPayload - The event payload\n * @param transactionEventPayload.transactionMeta - The transaction meta object\n */\nexport const handleTransactionDropped = async (\n  transactionMetricsRequest: TransactionMetricsRequest,\n  transactionEventPayload: TransactionEventPayload,\n) => {\n  if (!transactionEventPayload.transactionMeta) {\n    return;\n  }\n\n  const extraParams = {\n    dropped: true,\n  };\n\n  await createUpdateFinalizeTransactionEventFragment({\n    eventName: TransactionMetaMetricsEvent.finalized,\n    extraParams,\n    transactionEventPayload,\n    transactionMetricsRequest,\n  });\n};\n\n/**\n * This function is called when a transaction is rejected by the user.\n *\n * @param transactionMetricsRequest - Contains controller actions needed to create/update/finalize event fragments\n * @param transactionEventPayload - The event payload\n * @param transactionEventPayload.transactionMeta - The transaction meta object\n */\nexport const handleTransactionRejected = async (\n  transactionMetricsRequest: TransactionMetricsRequest,\n  transactionEventPayload: TransactionEventPayload,\n) => {\n  if (!transactionEventPayload.transactionMeta) {\n    return;\n  }\n\n  await createUpdateFinalizeTransactionEventFragment({\n    eventName: TransactionMetaMetricsEvent.rejected,\n    transactionEventPayload,\n    transactionMetricsRequest,\n  });\n};\n\n/**\n * This function is called when a transaction is submitted to the network.\n *\n * @param transactionMetricsRequest - Contains controller actions needed to create/update/finalize event fragments\n * @param transactionEventPayload - The event payload\n * @param transactionEventPayload.transactionMeta - The transaction meta object\n */\nexport const handleTransactionSubmitted = async (\n  transactionMetricsRequest: TransactionMetricsRequest,\n  transactionEventPayload: TransactionEventPayload,\n) => {\n  if (!transactionEventPayload.transactionMeta) {\n    return;\n  }\n  const { properties, sensitiveProperties } =\n    await buildEventFragmentProperties({\n      transactionEventPayload,\n      transactionMetricsRequest,\n    });\n\n  createTransactionEventFragment({\n    eventName: TransactionMetaMetricsEvent.submitted,\n    transactionEventPayload,\n    transactionMetricsRequest,\n    payload: {\n      properties,\n      sensitiveProperties,\n    },\n  });\n};\n\n/**\n * UI needs this specific create function in order to be sure that event fragment exists when updating transaction gas values.\n *\n * @param transactionMetricsRequest - Contains controller actions needed to create/update/finalize event fragments\n * @param eventPayload - The event payload\n * @param eventPayload.actionId - The action id of the transaction\n * @param eventPayload.transactionId - The transaction id\n */\nexport const createTransactionEventFragmentWithTxId = async (\n  transactionMetricsRequest: TransactionMetricsRequest,\n  {\n    transactionId,\n    actionId,\n  }: {\n    transactionId: string;\n    actionId: string;\n  },\n) => {\n  const transactionMeta = {\n    ...transactionMetricsRequest.getTransaction(transactionId),\n    actionId,\n  };\n\n  const { properties, sensitiveProperties } =\n    await buildEventFragmentProperties({\n      transactionEventPayload: {\n        transactionMeta,\n      },\n      transactionMetricsRequest,\n    });\n  createTransactionEventFragment({\n    eventName: TransactionMetaMetricsEvent.approved,\n    transactionEventPayload: {\n      actionId: transactionMeta.actionId,\n      transactionMeta,\n    },\n    transactionMetricsRequest,\n    payload: {\n      properties,\n      sensitiveProperties,\n    },\n  });\n};\n\n/**\n * This function is called when a post transaction balance is updated.\n *\n * @param transactionMetricsRequest - Contains controller actions\n * @param transactionMetricsRequest.getParticipateInMetrics - Returns whether the user has opted into metrics\n * @param transactionMetricsRequest.trackEvent - MetaMetrics track event function\n * @param transactionEventPayload - The event payload\n * @param transactionEventPayload.transactionMeta - The updated transaction meta\n * @param transactionEventPayload.approvalTransactionMeta - The updated approval transaction meta\n */\nexport const handlePostTransactionBalanceUpdate = async (\n  { getParticipateInMetrics, trackEvent }: TransactionMetricsRequest,\n  {\n    transactionMeta,\n    approvalTransactionMeta,\n  }: {\n    transactionMeta: TransactionMeta;\n    approvalTransactionMeta?: TransactionMeta;\n  },\n) => {\n  if (getParticipateInMetrics() && transactionMeta.swapMetaData) {\n    if (transactionMeta.txReceipt?.status === '0x0') {\n      trackEvent({\n        event: 'Swap Failed',\n        sensitiveProperties: { ...transactionMeta.swapMetaData },\n        category: MetaMetricsEventCategory.Swaps,\n      });\n    } else {\n      const tokensReceived = getSwapsTokensReceivedFromTxMeta(\n        transactionMeta.destinationTokenSymbol,\n        transactionMeta,\n        transactionMeta.destinationTokenAddress,\n        transactionMeta.txParams.from,\n        transactionMeta.destinationTokenDecimals,\n        approvalTransactionMeta,\n        transactionMeta.chainId,\n      );\n\n      const quoteVsExecutionRatio = tokensReceived\n        ? `${new BigNumber(tokensReceived, 10)\n            .div(transactionMeta.swapMetaData.token_to_amount, 10)\n            .times(100)\n            .round(2)}%`\n        : null;\n\n      const estimatedVsUsedGasRatio =\n        transactionMeta.txReceipt?.gasUsed &&\n        transactionMeta.swapMetaData.estimated_gas\n          ? `${new BigNumber(transactionMeta.txReceipt.gasUsed, 16)\n              .div(transactionMeta.swapMetaData.estimated_gas, 10)\n              .times(100)\n              .round(2)}%`\n          : null;\n\n      const transactionsCost = calculateTransactionsCost(\n        transactionMeta,\n        approvalTransactionMeta,\n      );\n\n      trackEvent({\n        event: MetaMetricsEventName.SwapCompleted,\n        category: MetaMetricsEventCategory.Swaps,\n        sensitiveProperties: {\n          ...transactionMeta.swapMetaData,\n          token_to_amount_received: tokensReceived,\n          quote_vs_executionRatio: quoteVsExecutionRatio,\n          estimated_vs_used_gasRatio: estimatedVsUsedGasRatio,\n          approval_gas_cost_in_eth: transactionsCost.approvalGasCostInEth,\n          trade_gas_cost_in_eth: transactionsCost.tradeGasCostInEth,\n          trade_and_approval_gas_cost_in_eth:\n            transactionsCost.tradeAndApprovalGasCostInEth,\n          // Firefox and Chrome have different implementations of the APIs\n          // that we rely on for communication accross the app. On Chrome big\n          // numbers are converted into number strings, on firefox they remain\n          // Big Number objects. As such, we convert them here for both\n          // browsers.\n          token_to_amount:\n            transactionMeta.swapMetaData.token_to_amount.toString(10),\n        },\n      });\n    }\n  }\n};\n\n\nfunction calculateTransactionsCost(\n  transactionMeta: TransactionMeta,\n  approvalTransactionMeta?: TransactionMeta,\n) {\n  let approvalGasCost = '0x0';\n  if (approvalTransactionMeta?.txReceipt) {\n    approvalGasCost = calcGasTotal(\n      approvalTransactionMeta.txReceipt.gasUsed,\n      approvalTransactionMeta.txReceipt.effectiveGasPrice,\n    );\n  }\n  const tradeGasCost = calcGasTotal(\n    transactionMeta.txReceipt?.gasUsed,\n    transactionMeta.txReceipt?.effectiveGasPrice,\n  );\n  const tradeAndApprovalGasCost = new BigNumber(tradeGasCost, 16)\n    .plus(approvalGasCost, 16)\n    .toString(16);\n  return {\n    approvalGasCostInEth: Number(hexWEIToDecETH(approvalGasCost)),\n    tradeGasCostInEth: Number(hexWEIToDecETH(tradeGasCost)),\n    tradeAndApprovalGasCostInEth: Number(\n      hexWEIToDecETH(tradeAndApprovalGasCost),\n    ),\n  };\n}\n\nfunction createTransactionEventFragment({\n  eventName,\n  transactionEventPayload: { transactionMeta, actionId },\n  transactionMetricsRequest,\n  payload,\n}: {\n  eventName: TransactionMetaMetricsEvent;\n  transactionEventPayload: TransactionEventPayload;\n  transactionMetricsRequest: TransactionMetricsRequest;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  payload: any;\n}) {\n  if (\n    hasFragment(\n      transactionMetricsRequest.getEventFragmentById,\n      eventName,\n      transactionMeta,\n    )\n  ) {\n    return;\n  }\n\n  const uniqueIdentifier = getUniqueId(eventName, transactionMeta.id);\n\n  switch (eventName) {\n    // When a transaction is added to the controller, we know that the user\n    // will be presented with a confirmation screen. The user will then\n    // either confirm or reject that transaction. Each has an associated\n    // event we want to track. While we don't necessarily need an event\n    // fragment to model this, having one allows us to record additional\n    // properties onto the event from the UI. For example, when the user\n    // edits the transactions gas params we can record that property and\n    // then get analytics on the number of transactions in which gas edits\n    // occur.\n    case TransactionMetaMetricsEvent.added:\n      transactionMetricsRequest.createEventFragment({\n        category: MetaMetricsEventCategory.Transactions,\n        initialEvent: TransactionMetaMetricsEvent.added,\n        successEvent: TransactionMetaMetricsEvent.approved,\n        failureEvent: TransactionMetaMetricsEvent.rejected,\n        properties: payload.properties,\n        sensitiveProperties: payload.sensitiveProperties,\n        actionId,\n        uniqueIdentifier,\n        persist: true,\n      });\n      break;\n    // If for some reason an approval or rejection occurs without the added\n    // fragment existing in memory, we create the added fragment but without\n    // the initialEvent firing. This is to prevent possible duplication of\n    // events. A good example why this might occur is if the user had\n    // unapproved transactions in memory when updating to the version that\n    // includes this change. A migration would have also helped here but this\n    // implementation hardens against other possible bugs where a fragment\n    // does not exist.\n    case TransactionMetaMetricsEvent.approved:\n    case TransactionMetaMetricsEvent.rejected:\n      transactionMetricsRequest.createEventFragment({\n        category: MetaMetricsEventCategory.Transactions,\n        successEvent: TransactionMetaMetricsEvent.approved,\n        failureEvent: TransactionMetaMetricsEvent.rejected,\n        properties: payload.properties,\n        sensitiveProperties: payload.sensitiveProperties,\n        actionId,\n        uniqueIdentifier,\n        persist: true,\n      });\n      break;\n    // When a transaction is submitted it will always result in updating\n    // to a finalized state (dropped, failed, confirmed) -- eventually.\n    // However having a fragment started at this stage allows augmenting\n    // analytics data with user interactions such as speeding up and\n    // canceling the transactions. From this controllers perspective a new\n    // transaction with a new id is generated for speed up and cancel\n    // transactions, but from the UI we could augment the previous ID with\n    // supplemental data to show user intent. Such as when they open the\n    // cancel UI but don't submit. We can record that this happened and add\n    // properties to the transaction event.\n    case TransactionMetaMetricsEvent.submitted:\n      transactionMetricsRequest.createEventFragment({\n        category: MetaMetricsEventCategory.Transactions,\n        initialEvent: TransactionMetaMetricsEvent.submitted,\n        successEvent: TransactionMetaMetricsEvent.finalized,\n        properties: payload.properties,\n        sensitiveProperties: payload.sensitiveProperties,\n        actionId,\n        uniqueIdentifier,\n        persist: true,\n      });\n      break;\n    // If for some reason a transaction is finalized without the submitted\n    // fragment existing in memory, we create the submitted fragment but\n    // without the initialEvent firing. This is to prevent possible\n    // duplication of events. A good example why this might occur is if th\n    // user had pending transactions in memory when updating to the version\n    // that includes this change. A migration would have also helped here but\n    // this implementation hardens against other possible bugs where a\n    // fragment does not exist.\n    case TransactionMetaMetricsEvent.finalized:\n      transactionMetricsRequest.createEventFragment({\n        category: MetaMetricsEventCategory.Transactions,\n        successEvent: TransactionMetaMetricsEvent.finalized,\n        properties: payload.properties,\n        sensitiveProperties: payload.sensitiveProperties,\n        actionId,\n        uniqueIdentifier,\n        persist: true,\n      });\n      break;\n    default:\n      break;\n  }\n}\n\nfunction updateTransactionEventFragment({\n  eventName,\n  transactionEventPayload: { transactionMeta },\n  transactionMetricsRequest,\n  payload,\n}: {\n  eventName: TransactionMetaMetricsEvent;\n  transactionEventPayload: TransactionEventPayload;\n  transactionMetricsRequest: TransactionMetricsRequest;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  payload: any;\n}) {\n  const uniqueId = getUniqueId(eventName, transactionMeta.id);\n\n  switch (eventName) {\n    case TransactionMetaMetricsEvent.approved:\n      transactionMetricsRequest.updateEventFragment(uniqueId, {\n        properties: payload.properties,\n        sensitiveProperties: payload.sensitiveProperties,\n      });\n      break;\n\n    case TransactionMetaMetricsEvent.rejected:\n      transactionMetricsRequest.updateEventFragment(uniqueId, {\n        properties: payload.properties,\n        sensitiveProperties: payload.sensitiveProperties,\n      });\n      break;\n\n    case TransactionMetaMetricsEvent.finalized:\n      transactionMetricsRequest.updateEventFragment(uniqueId, {\n        properties: payload.properties,\n        sensitiveProperties: payload.sensitiveProperties,\n      });\n      break;\n    default:\n      break;\n  }\n}\n\nfunction finalizeTransactionEventFragment({\n  eventName,\n  transactionMetricsRequest,\n  transactionEventPayload: { transactionMeta },\n}: {\n  eventName: TransactionMetaMetricsEvent;\n  transactionEventPayload: TransactionEventPayload;\n  transactionMetricsRequest: TransactionMetricsRequest;\n}) {\n  const uniqueId = getUniqueId(eventName, transactionMeta.id);\n\n  switch (eventName) {\n    case TransactionMetaMetricsEvent.approved:\n      transactionMetricsRequest.finalizeEventFragment(uniqueId);\n      break;\n\n    case TransactionMetaMetricsEvent.rejected:\n      transactionMetricsRequest.finalizeEventFragment(uniqueId, {\n        abandoned: true,\n      });\n      break;\n\n    case TransactionMetaMetricsEvent.finalized:\n      transactionMetricsRequest.finalizeEventFragment(uniqueId);\n      break;\n    default:\n      break;\n  }\n}\n\nasync function createUpdateFinalizeTransactionEventFragment({\n  eventName,\n  transactionEventPayload,\n  transactionMetricsRequest,\n  extraParams = {},\n}: {\n  eventName: TransactionMetaMetricsEvent;\n  transactionEventPayload: TransactionEventPayload;\n  transactionMetricsRequest: TransactionMetricsRequest;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extraParams?: Record<string, any>;\n}) {\n  const { properties, sensitiveProperties } =\n    await buildEventFragmentProperties({\n      transactionEventPayload,\n      transactionMetricsRequest,\n      extraParams,\n    });\n\n  createTransactionEventFragment({\n    eventName,\n    transactionEventPayload,\n    transactionMetricsRequest,\n    payload: {\n      properties,\n      sensitiveProperties,\n    },\n  });\n\n  updateTransactionEventFragment({\n    eventName,\n    transactionEventPayload,\n    transactionMetricsRequest,\n    payload: {\n      properties,\n      sensitiveProperties,\n    },\n  });\n\n  finalizeTransactionEventFragment({\n    eventName,\n    transactionEventPayload,\n    transactionMetricsRequest,\n  });\n}\n\nfunction hasFragment(\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getEventFragmentById: (arg0: string) => any,\n  eventName: TransactionMetaMetricsEvent,\n  transactionMeta: TransactionMeta,\n) {\n  const uniqueId = getUniqueId(eventName, transactionMeta.id);\n  const fragment = getEventFragmentById(uniqueId);\n  return typeof fragment !== 'undefined';\n}\n\nfunction getUniqueId(\n  eventName: TransactionMetaMetricsEvent,\n  transactionId: string,\n) {\n  const isFinalizedOrSubmitted =\n    eventName === TransactionMetaMetricsEvent.finalized ||\n    eventName === TransactionMetaMetricsEvent.submitted;\n  const uniqueIdentifier = `transaction-${\n    isFinalizedOrSubmitted ? 'submitted' : 'added'\n  }-${transactionId}`;\n\n  return uniqueIdentifier;\n}\n\nasync function buildEventFragmentProperties({\n  transactionEventPayload: { transactionMeta },\n  transactionMetricsRequest,\n  extraParams = {},\n}: {\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extraParams?: Record<string, any>;\n  transactionEventPayload: TransactionEventPayload;\n  transactionMetricsRequest: TransactionMetricsRequest;\n}) {\n  const {\n    type,\n    time,\n    status,\n    chainId,\n    origin: referrer,\n    txParams: {\n      gasPrice,\n      gas: gasLimit,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      estimateSuggested,\n      estimateUsed,\n    },\n    defaultGasEstimates,\n    originalType,\n    replacedById,\n    customTokenAmount,\n    dappProposedTokenAmount,\n    currentTokenBalance,\n    originalApprovalAmount,\n    finalApprovalAmount,\n    securityProviderResponse,\n    simulationFails,\n  } = transactionMeta;\n  const query = new EthQuery(transactionMetricsRequest.provider);\n  const source = referrer === ORIGIN_METAMASK ? 'user' : 'dapp';\n\n  const { assetType, tokenStandard } = await determineTransactionAssetType(\n    transactionMeta,\n    query,\n    transactionMetricsRequest.getTokenStandardAndDetails,\n  );\n\n  let contractMethodName;\n  if (transactionMeta.txParams.data) {\n    const { name } = await transactionMetricsRequest.getMethodData(\n      transactionMeta.txParams.data,\n    );\n    contractMethodName = name;\n  }\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const gasParams = {} as Record<string, any>;\n\n  if (isEIP1559Transaction(transactionMeta)) {\n    gasParams.max_fee_per_gas = maxFeePerGas;\n    gasParams.max_priority_fee_per_gas = maxPriorityFeePerGas;\n  } else {\n    gasParams.gas_price = gasPrice;\n  }\n\n  if (defaultGasEstimates) {\n    const { estimateType } = defaultGasEstimates;\n    if (estimateType) {\n      gasParams.default_estimate = estimateType;\n      let defaultMaxFeePerGas =\n        transactionMeta.defaultGasEstimates?.maxFeePerGas;\n      let defaultMaxPriorityFeePerGas =\n        transactionMeta.defaultGasEstimates?.maxPriorityFeePerGas;\n\n      if (\n        [\n          GasRecommendations.low,\n          GasRecommendations.medium,\n          GasRecommendations.high,\n        ].includes(estimateType as GasRecommendations)\n      ) {\n        const { gasFeeEstimates } =\n          await transactionMetricsRequest.getEIP1559GasFeeEstimates();\n        if (gasFeeEstimates?.[estimateType]?.suggestedMaxFeePerGas) {\n          defaultMaxFeePerGas =\n            gasFeeEstimates[estimateType]?.suggestedMaxFeePerGas;\n          gasParams.default_max_fee_per_gas = defaultMaxFeePerGas;\n        }\n        if (gasFeeEstimates?.[estimateType]?.suggestedMaxPriorityFeePerGas) {\n          defaultMaxPriorityFeePerGas =\n            gasFeeEstimates[estimateType]?.suggestedMaxPriorityFeePerGas;\n          gasParams.default_max_priority_fee_per_gas =\n            defaultMaxPriorityFeePerGas;\n        }\n      }\n    }\n\n    if (transactionMeta.defaultGasEstimates?.gas) {\n      gasParams.default_gas = transactionMeta.defaultGasEstimates.gas;\n    }\n    if (transactionMeta.defaultGasEstimates?.gasPrice) {\n      gasParams.default_gas_price =\n        transactionMeta.defaultGasEstimates.gasPrice;\n    }\n  }\n\n  if (estimateSuggested) {\n    gasParams.estimate_suggested = estimateSuggested;\n  }\n\n  if (estimateUsed) {\n    gasParams.estimate_used = estimateUsed;\n  }\n\n  if (extraParams?.gas_used) {\n    gasParams.gas_used = extraParams.gas_used;\n  }\n\n  const gasParamsInGwei = getGasValuesInGWEI(gasParams);\n\n  let eip1559Version = '0';\n  if (transactionMeta.txParams.maxFeePerGas) {\n    eip1559Version = '2';\n  }\n\n  const contractInteractionTypes =\n    type &&\n    [\n      TransactionType.contractInteraction,\n      TransactionType.tokenMethodApprove,\n      TransactionType.tokenMethodIncreaseAllowance,\n      TransactionType.tokenMethodSafeTransferFrom,\n      TransactionType.tokenMethodSetApprovalForAll,\n      TransactionType.tokenMethodTransfer,\n      TransactionType.tokenMethodTransferFrom,\n      TransactionType.swap,\n      TransactionType.swapAndSend,\n      TransactionType.swapApproval,\n    ].includes(type);\n\n  const contractMethodNames = {\n    APPROVE: 'Approve',\n  };\n\n  let transactionApprovalAmountType;\n  let transactionContractMethod;\n  let transactionApprovalAmountVsProposedRatio;\n  let transactionApprovalAmountVsBalanceRatio;\n  let transactionType = TransactionType.simpleSend;\n  if (type === TransactionType.swapAndSend) {\n    transactionType = TransactionType.swapAndSend;\n  } else if (type === TransactionType.cancel) {\n    transactionType = TransactionType.cancel;\n  } else if (type === TransactionType.retry && originalType) {\n    transactionType = originalType;\n  } else if (type === TransactionType.deployContract) {\n    transactionType = TransactionType.deployContract;\n  } else if (contractInteractionTypes) {\n    transactionType = TransactionType.contractInteraction;\n    transactionContractMethod = contractMethodName;\n    if (\n      transactionContractMethod === contractMethodNames.APPROVE &&\n      tokenStandard === TokenStandard.ERC20\n    ) {\n      if (dappProposedTokenAmount === '0' || customTokenAmount === '0') {\n        transactionApprovalAmountType = TransactionApprovalAmountType.revoke;\n      } else if (\n        customTokenAmount &&\n        customTokenAmount !== dappProposedTokenAmount\n      ) {\n        transactionApprovalAmountType = TransactionApprovalAmountType.custom;\n      } else if (dappProposedTokenAmount) {\n        transactionApprovalAmountType =\n          TransactionApprovalAmountType.dappProposed;\n      }\n      transactionApprovalAmountVsProposedRatio =\n        allowanceAmountInRelationToDappProposedValue(\n          transactionApprovalAmountType,\n          originalApprovalAmount,\n          finalApprovalAmount,\n        );\n      transactionApprovalAmountVsBalanceRatio =\n        allowanceAmountInRelationToTokenBalance(\n          transactionApprovalAmountType,\n          dappProposedTokenAmount,\n          currentTokenBalance,\n        );\n    }\n  }\n\n  const replacedTransactionMeta = transactionMetricsRequest.getTransaction(\n    replacedById as string,\n  );\n\n  const TRANSACTION_REPLACEMENT_METHODS = {\n    RETRY: TransactionType.retry,\n    CANCEL: TransactionType.cancel,\n    SAME_NONCE: 'other',\n  };\n\n  let transactionReplaced;\n  if (extraParams?.dropped) {\n    transactionReplaced = TRANSACTION_REPLACEMENT_METHODS.SAME_NONCE;\n    if (replacedTransactionMeta?.type === TransactionType.cancel) {\n      transactionReplaced = TRANSACTION_REPLACEMENT_METHODS.CANCEL;\n    } else if (replacedTransactionMeta?.type === TransactionType.retry) {\n      transactionReplaced = TRANSACTION_REPLACEMENT_METHODS.RETRY;\n    }\n  }\n\n  const uiCustomizations = [];\n  let isAdvancedDetailsOpen = null;\n\n  /** securityProviderResponse is used by the OpenSea <> Blockaid provider */\n  // eslint-disable-next-line no-lonely-if\n  if (securityProviderResponse?.flagAsDangerous === 1) {\n    uiCustomizations.push(MetaMetricsEventUiCustomization.FlaggedAsMalicious);\n  } else if (securityProviderResponse?.flagAsDangerous === 2) {\n    uiCustomizations.push(\n      MetaMetricsEventUiCustomization.FlaggedAsSafetyUnknown,\n    );\n  }\n\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const blockaidProperties: any = getBlockaidMetricsProps(transactionMeta);\n\n  if (blockaidProperties?.ui_customizations?.length > 0) {\n    uiCustomizations.push(...blockaidProperties.ui_customizations);\n  }\n\n  if (simulationFails) {\n    uiCustomizations.push(MetaMetricsEventUiCustomization.GasEstimationFailed);\n  }\n  const isRedesignedConfirmationsDeveloperSettingEnabled =\n    transactionMetricsRequest.getIsRedesignedConfirmationsDeveloperEnabled() ||\n    Boolean(process.env.ENABLE_CONFIRMATION_REDESIGN);\n\n  const isRedesignedTransactionsUserSettingEnabled =\n    transactionMetricsRequest.getRedesignedTransactionsEnabled();\n\n  if (\n    (isRedesignedConfirmationsDeveloperSettingEnabled &&\n      REDESIGN_DEV_TRANSACTION_TYPES.includes(\n        transactionMeta.type as TransactionType,\n      )) ||\n    (isRedesignedTransactionsUserSettingEnabled &&\n      REDESIGN_USER_TRANSACTION_TYPES.includes(\n        transactionMeta.type as TransactionType,\n      ))\n  ) {\n    uiCustomizations.push(\n      MetaMetricsEventUiCustomization.RedesignedConfirmation,\n    );\n\n    isAdvancedDetailsOpen =\n      transactionMetricsRequest.getIsConfirmationAdvancedDetailsOpen();\n  }\n  const smartTransactionMetricsProperties =\n    getSmartTransactionMetricsProperties(\n      transactionMetricsRequest,\n      transactionMeta,\n    );\n\n  const swapAndSendMetricsProperties =\n    getSwapAndSendMetricsProps(transactionMeta);\n\n  /** The transaction status property is not considered sensitive and is now included in the non-anonymous event */\n  let properties = {\n    chain_id: chainId,\n    referrer,\n    source,\n    status,\n    network: `${parseInt(chainId, 16)}`,\n    eip_1559_version: eip1559Version,\n    gas_edit_type: 'none',\n    gas_edit_attempted: 'none',\n    gas_estimation_failed: Boolean(simulationFails),\n    account_type: await transactionMetricsRequest.getAccountType(\n      transactionMetricsRequest.getSelectedAddress(),\n    ),\n    device_model: await transactionMetricsRequest.getDeviceModel(\n      transactionMetricsRequest.getSelectedAddress(),\n    ),\n    asset_type: assetType,\n    token_standard: tokenStandard,\n    transaction_type: transactionType,\n    transaction_speed_up: type === TransactionType.retry,\n    ...blockaidProperties,\n    // ui_customizations must come after ...blockaidProperties\n    ui_customizations: uiCustomizations.length > 0 ? uiCustomizations : null,\n    transaction_advanced_view: isAdvancedDetailsOpen,\n    ...smartTransactionMetricsProperties,\n    ...swapAndSendMetricsProperties,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } as Record<string, any>;\n\n  const snapAndHardwareInfo = await getSnapAndHardwareInfoForMetrics(\n    transactionMetricsRequest.getAccountType,\n    transactionMetricsRequest.getDeviceModel,\n    transactionMetricsRequest.snapAndHardwareMessenger,\n  );\n  Object.assign(properties, snapAndHardwareInfo);\n\n  if (transactionContractMethod === contractMethodNames.APPROVE) {\n    properties = {\n      ...properties,\n      transaction_approval_amount_type: transactionApprovalAmountType,\n    };\n  }\n\n  let sensitiveProperties = {\n    transaction_envelope_type: isEIP1559Transaction(transactionMeta)\n      ? TRANSACTION_ENVELOPE_TYPE_NAMES.FEE_MARKET\n      : TRANSACTION_ENVELOPE_TYPE_NAMES.LEGACY,\n    first_seen: time,\n    gas_limit: gasLimit,\n    transaction_contract_method: transactionContractMethod,\n    transaction_replaced: transactionReplaced,\n    ...extraParams,\n    ...gasParamsInGwei,\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } as Record<string, any>;\n\n  if (transactionContractMethod === contractMethodNames.APPROVE) {\n    sensitiveProperties = {\n      ...sensitiveProperties,\n      transaction_approval_amount_vs_balance_ratio:\n        transactionApprovalAmountVsBalanceRatio,\n      transaction_approval_amount_vs_proposed_ratio:\n        transactionApprovalAmountVsProposedRatio,\n    };\n  }\n\n  return { properties, sensitiveProperties };\n}\n\n// TODO: Replace `any` with type\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getGasValuesInGWEI(gasParams: Record<string, any>) {\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const gasValuesInGwei = {} as Record<string, any>;\n  for (const param in gasParams) {\n    if (isHexString(gasParams[param])) {\n      gasValuesInGwei[param] = hexWEIToDecGWEI(gasParams[param]);\n    } else {\n      gasValuesInGwei[param] = gasParams[param];\n    }\n  }\n  return gasValuesInGwei;\n}\n\nfunction getTransactionCompletionTime(submittedTime: number) {\n  return Math.round((Date.now() - submittedTime) / 1000).toString();\n}\n\n/**\n * The allowance amount in relation to the dapp proposed amount for specific token\n *\n * @param transactionApprovalAmountType - The transaction approval amount type\n * @param originalApprovalAmount - The original approval amount is the originally dapp proposed token amount\n * @param finalApprovalAmount - The final approval amount is the chosen amount which will be the same as the\n * originally dapp proposed token amount if the user does not edit the amount or will be a custom token amount set by the user\n */\nfunction allowanceAmountInRelationToDappProposedValue(\n  transactionApprovalAmountType?: TransactionApprovalAmountType,\n  originalApprovalAmount?: string,\n  finalApprovalAmount?: string,\n) {\n  if (\n    transactionApprovalAmountType === TransactionApprovalAmountType.custom &&\n    originalApprovalAmount &&\n    finalApprovalAmount\n  ) {\n    return `${new BigNumber(originalApprovalAmount, 10)\n      .div(finalApprovalAmount, 10)\n      .times(100)\n      .round(2)}`;\n  }\n  return null;\n}\n\n/**\n * The allowance amount in relation to the balance for that specific token\n *\n * @param transactionApprovalAmountType - The transaction approval amount type\n * @param dappProposedTokenAmount - The dapp proposed token amount\n * @param currentTokenBalance - The balance of the token that is being send\n */\nfunction allowanceAmountInRelationToTokenBalance(\n  transactionApprovalAmountType?: TransactionApprovalAmountType,\n  dappProposedTokenAmount?: string,\n  currentTokenBalance?: string,\n) {\n  if (\n    (transactionApprovalAmountType === TransactionApprovalAmountType.custom ||\n      transactionApprovalAmountType ===\n        TransactionApprovalAmountType.dappProposed) &&\n    dappProposedTokenAmount &&\n    currentTokenBalance\n  ) {\n    return `${new BigNumber(dappProposedTokenAmount, 16)\n      .div(currentTokenBalance, 10)\n      .times(100)\n      .round(2)}`;\n  }\n  return null;\n}\n","import SmartTransactionsController, {\n  SmartTransactionsControllerSmartTransactionEvent,\n} from '@metamask/smart-transactions-controller';\nimport {\n  Fee,\n  Fees,\n  SmartTransactionStatuses,\n  SmartTransaction,\n} from '@metamask/smart-transactions-controller/dist/types';\nimport type { Hex } from '@metamask/utils';\nimport {\n  TransactionController,\n  TransactionMeta,\n  TransactionParams,\n  TransactionType,\n} from '@metamask/transaction-controller';\nimport log from 'loglevel';\nimport { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport {\n  AddApprovalRequest,\n  UpdateRequestState,\n  StartFlow,\n  EndFlow,\n} from '@metamask/approval-controller';\n\nimport { decimalToHex } from '../../../../shared/modules/conversion.utils';\nimport { CANCEL_GAS_LIMIT_DEC } from '../../../../shared/constants/smartTransactions';\nimport {\n  SMART_TRANSACTION_CONFIRMATION_TYPES,\n  ORIGIN_METAMASK,\n} from '../../../../shared/constants/app';\n\nconst namespace = 'SmartTransactions';\n\nexport type AllowedActions =\n  | AddApprovalRequest\n  | UpdateRequestState\n  | StartFlow\n  | EndFlow;\n\nexport type AllowedEvents = SmartTransactionsControllerSmartTransactionEvent;\n\nexport type SmartTransactionHookMessenger = RestrictedControllerMessenger<\n  typeof namespace,\n  AllowedActions,\n  AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\nexport type FeatureFlags = {\n  extensionActive: boolean;\n  mobileActive: boolean;\n  smartTransactions: {\n    expectedDeadline?: number;\n    maxDeadline?: number;\n    returnTxHashAsap?: boolean;\n  };\n};\n\nexport type SubmitSmartTransactionRequest = {\n  transactionMeta: TransactionMeta;\n  signedTransactionInHex?: string;\n  smartTransactionsController: SmartTransactionsController;\n  transactionController: TransactionController;\n  isSmartTransaction: boolean;\n  controllerMessenger: SmartTransactionHookMessenger;\n  featureFlags: FeatureFlags;\n};\n\nclass SmartTransactionHook {\n  #approvalFlowEnded: boolean;\n\n  #approvalFlowId: string;\n\n  #chainId: Hex;\n\n  #controllerMessenger: SmartTransactionHookMessenger;\n\n  #featureFlags: {\n    extensionActive: boolean;\n    mobileActive: boolean;\n    smartTransactions: {\n      expectedDeadline?: number;\n      maxDeadline?: number;\n      returnTxHashAsap?: boolean;\n    };\n  };\n\n  #isDapp: boolean;\n\n  #isSmartTransaction: boolean;\n\n  #smartTransactionsController: SmartTransactionsController;\n\n  #transactionController: TransactionController;\n\n  #transactionMeta: TransactionMeta;\n\n  #signedTransactionInHex?: string;\n\n  #txParams: TransactionParams;\n\n  constructor(request: SubmitSmartTransactionRequest) {\n    const {\n      transactionMeta,\n      signedTransactionInHex,\n      smartTransactionsController,\n      transactionController,\n      isSmartTransaction,\n      controllerMessenger,\n      featureFlags,\n    } = request;\n    this.#approvalFlowId = '';\n    this.#approvalFlowEnded = false;\n    this.#transactionMeta = transactionMeta;\n    this.#signedTransactionInHex = signedTransactionInHex;\n    this.#smartTransactionsController = smartTransactionsController;\n    this.#transactionController = transactionController;\n    this.#isSmartTransaction = isSmartTransaction;\n    this.#controllerMessenger = controllerMessenger;\n    this.#featureFlags = featureFlags;\n    this.#isDapp = transactionMeta.origin !== ORIGIN_METAMASK;\n    this.#chainId = transactionMeta.chainId;\n    this.#txParams = transactionMeta.txParams;\n  }\n\n  async submit() {\n    const isUnsupportedTransactionTypeForSmartTransaction = this\n      .#transactionMeta?.type\n      ? [TransactionType.swapAndSend, TransactionType.swapApproval].includes(\n          this.#transactionMeta.type,\n        )\n      : false;\n\n    // Will cause TransactionController to publish to the RPC provider as normal.\n    const useRegularTransactionSubmit = { transactionHash: undefined };\n    if (\n      !this.#isSmartTransaction ||\n      isUnsupportedTransactionTypeForSmartTransaction\n    ) {\n      return useRegularTransactionSubmit;\n    }\n    const { id: approvalFlowId } = await this.#controllerMessenger.call(\n      'ApprovalController:startFlow',\n    );\n    this.#approvalFlowId = approvalFlowId;\n    let getFeesResponse;\n    try {\n      getFeesResponse = await this.#smartTransactionsController.getFees(\n        { ...this.#txParams, chainId: this.#chainId },\n        undefined,\n      );\n    } catch (error) {\n      log.error(\n        'Error in smart transaction publish hook, falling back to regular transaction submission',\n        error,\n      );\n      this.#onApproveOrReject();\n      return useRegularTransactionSubmit; // Fallback to regular transaction submission.\n    }\n    try {\n      const submitTransactionResponse = await this.#signAndSubmitTransactions({\n        getFeesResponse,\n      });\n      const uuid = submitTransactionResponse?.uuid;\n      if (!uuid) {\n        throw new Error('No smart transaction UUID');\n      }\n      const returnTxHashAsap =\n        this.#featureFlags?.smartTransactions?.returnTxHashAsap;\n      this.#addApprovalRequest({\n        uuid,\n      });\n      this.#addListenerToUpdateStatusPage({\n        uuid,\n      });\n      let transactionHash: string | undefined | null;\n      if (returnTxHashAsap && submitTransactionResponse?.txHash) {\n        transactionHash = submitTransactionResponse.txHash;\n      } else {\n        transactionHash = await this.#waitForTransactionHash({\n          uuid,\n        });\n      }\n      if (transactionHash === null) {\n        throw new Error(\n          'Transaction does not have a transaction hash, there was a problem',\n        );\n      }\n      return { transactionHash };\n    } catch (error) {\n      log.error('Error in smart transaction publish hook', error);\n      this.#onApproveOrReject();\n      throw error;\n    }\n  }\n\n  #onApproveOrReject() {\n    if (this.#approvalFlowEnded) {\n      return;\n    }\n    this.#approvalFlowEnded = true;\n    this.#controllerMessenger.call('ApprovalController:endFlow', {\n      id: this.#approvalFlowId,\n    });\n  }\n\n  #addApprovalRequest({ uuid }: { uuid: string }) {\n    const onApproveOrRejectWrapper = () => {\n      this.#onApproveOrReject();\n    };\n    this.#controllerMessenger\n      .call(\n        'ApprovalController:addRequest',\n        {\n          id: this.#approvalFlowId,\n          origin,\n          type: SMART_TRANSACTION_CONFIRMATION_TYPES.showSmartTransactionStatusPage,\n          requestState: {\n            smartTransaction: {\n              status: SmartTransactionStatuses.PENDING,\n              creationTime: Date.now(),\n              uuid,\n            },\n            isDapp: this.#isDapp,\n            txId: this.#transactionMeta.id,\n          },\n        },\n        true,\n      )\n      .then(onApproveOrRejectWrapper, onApproveOrRejectWrapper);\n  }\n\n  async #updateApprovalRequest({\n    smartTransaction,\n  }: {\n    smartTransaction: SmartTransaction;\n  }) {\n    return await this.#controllerMessenger.call(\n      'ApprovalController:updateRequestState',\n      {\n        id: this.#approvalFlowId,\n        requestState: {\n          smartTransaction,\n          isDapp: this.#isDapp,\n          txId: this.#transactionMeta.id,\n        },\n      },\n    );\n  }\n\n  async #addListenerToUpdateStatusPage({ uuid }: { uuid: string }) {\n    this.#controllerMessenger.subscribe(\n      'SmartTransactionsController:smartTransaction',\n      async (smartTransaction: SmartTransaction) => {\n        if (smartTransaction.uuid === uuid) {\n          const { status } = smartTransaction;\n          if (!status || status === SmartTransactionStatuses.PENDING) {\n            return;\n          }\n          if (!this.#approvalFlowEnded) {\n            await this.#updateApprovalRequest({\n              smartTransaction,\n            });\n          }\n        }\n      },\n    );\n  }\n\n  #waitForTransactionHash({ uuid }: { uuid: string }): Promise<string | null> {\n    return new Promise((resolve) => {\n      this.#controllerMessenger.subscribe(\n        'SmartTransactionsController:smartTransaction',\n        async (smartTransaction: SmartTransaction) => {\n          if (smartTransaction.uuid === uuid) {\n            const { status, statusMetadata } = smartTransaction;\n            if (!status || status === SmartTransactionStatuses.PENDING) {\n              return;\n            }\n            log.debug('Smart Transaction: ', smartTransaction);\n            if (statusMetadata?.minedHash) {\n              log.debug(\n                'Smart Transaction - Received tx hash: ',\n                statusMetadata?.minedHash,\n              );\n              resolve(statusMetadata.minedHash);\n            } else {\n              resolve(null);\n            }\n          }\n        },\n      );\n    });\n  }\n\n  async #signAndSubmitTransactions({\n    getFeesResponse,\n  }: {\n    getFeesResponse: Fees;\n  }) {\n    let signedTransactions;\n    if (this.#signedTransactionInHex) {\n      signedTransactions = [this.#signedTransactionInHex];\n    } else {\n      signedTransactions = await this.#createSignedTransactions(\n        getFeesResponse.tradeTxFees?.fees ?? [],\n        false,\n      );\n    }\n    return await this.#smartTransactionsController.submitSignedTransactions({\n      signedTransactions,\n      signedCanceledTransactions: [],\n      txParams: this.#txParams,\n      transactionMeta: this.#transactionMeta,\n    });\n  }\n\n  #applyFeeToTransaction(fee: Fee, isCancel: boolean): TransactionParams {\n    const unsignedTransaction = {\n      ...this.#txParams,\n      maxFeePerGas: `0x${decimalToHex(fee.maxFeePerGas)}`,\n      maxPriorityFeePerGas: `0x${decimalToHex(fee.maxPriorityFeePerGas)}`,\n      gas: isCancel\n        ? `0x${decimalToHex(CANCEL_GAS_LIMIT_DEC)}` // It has to be 21000 for cancel transactions, otherwise the API would reject it.\n        : this.#txParams.gas,\n    };\n    if (isCancel) {\n      unsignedTransaction.to = unsignedTransaction.from;\n      unsignedTransaction.data = '0x';\n    }\n    return unsignedTransaction;\n  }\n\n  async #createSignedTransactions(\n    fees: Fee[],\n    isCancel: boolean,\n  ): Promise<string[]> {\n    const unsignedTransactions = fees.map((fee) => {\n      return this.#applyFeeToTransaction(fee, isCancel);\n    });\n    const transactionsWithChainId = unsignedTransactions.map((tx) => ({\n      ...tx,\n      chainId: tx.chainId || this.#chainId,\n    }));\n    return (await this.#transactionController.approveTransactionsWithSameNonce(\n      transactionsWithChainId,\n      { hasNonce: true },\n    )) as string[];\n  }\n}\n\nexport const submitSmartTransactionHook = (\n  request: SubmitSmartTransactionRequest,\n) => {\n  const smartTransactionHook = new SmartTransactionHook(request);\n  return smartTransactionHook.submit();\n};\n","import { EthAccountType, InternalAccount } from '@metamask/keyring-api';\nimport {\n  TransactionController,\n  TransactionMeta,\n  TransactionParams,\n  TransactionType,\n} from '@metamask/transaction-controller';\nimport {\n  AddUserOperationOptions,\n  UserOperationController,\n} from '@metamask/user-operation-controller';\nimport type { Hex } from '@metamask/utils';\nimport { addHexPrefix } from 'ethereumjs-util';\nimport { PPOMController } from '@metamask/ppom-validator';\n\nimport {\n  generateSecurityAlertId,\n  handlePPOMError,\n  isChainSupported,\n  validateRequestWithPPOM,\n} from '../ppom/ppom-util';\nimport { SecurityAlertResponse } from '../ppom/types';\nimport {\n  LOADING_SECURITY_ALERT_RESPONSE,\n  SECURITY_PROVIDER_EXCLUDED_TRANSACTION_TYPES,\n} from '../../../../shared/constants/security-provider';\nimport { endTrace, TraceName } from '../../../../shared/lib/trace';\n\nexport type AddTransactionOptions = NonNullable<\n  Parameters<TransactionController['addTransaction']>[1]\n>;\n\ntype BaseAddTransactionRequest = {\n  chainId: Hex;\n  networkClientId: string;\n  ppomController: PPOMController;\n  securityAlertsEnabled: boolean;\n  selectedAccount: InternalAccount;\n  transactionParams: TransactionParams;\n  transactionController: TransactionController;\n  updateSecurityAlertResponse: (\n    method: string,\n    securityAlertId: string,\n    securityAlertResponse: SecurityAlertResponse,\n  ) => void;\n  userOperationController: UserOperationController;\n  internalAccounts: InternalAccount[];\n};\n\ntype FinalAddTransactionRequest = BaseAddTransactionRequest & {\n  transactionOptions: AddTransactionOptions;\n};\n\nexport type AddTransactionRequest = FinalAddTransactionRequest & {\n  waitForSubmit: boolean;\n};\n\nexport type AddDappTransactionRequest = BaseAddTransactionRequest & {\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  dappRequest: Record<string, any>;\n};\n\nexport async function addDappTransaction(\n  request: AddDappTransactionRequest,\n): Promise<string> {\n  const { dappRequest } = request;\n  const { id: actionId, method, origin } = dappRequest;\n  const { securityAlertResponse, traceContext } = dappRequest;\n\n  const transactionOptions: AddTransactionOptions = {\n    actionId,\n    method,\n    origin,\n    // This is the default behaviour but specified here for clarity\n    requireApproval: true,\n    securityAlertResponse,\n  };\n\n  endTrace({ name: TraceName.Middleware, id: actionId });\n\n  const { waitForHash } = await addTransactionOrUserOperation({\n    ...request,\n    transactionOptions: {\n      ...transactionOptions,\n      traceContext,\n    },\n  });\n\n  const hash = (await waitForHash()) as string;\n\n  endTrace({ name: TraceName.Transaction, id: actionId });\n\n  return hash;\n}\n\nexport async function addTransaction(\n  request: AddTransactionRequest,\n): Promise<TransactionMeta> {\n  await validateSecurity(request);\n\n  const { transactionMeta, waitForHash } = await addTransactionOrUserOperation(\n    request,\n  );\n\n  if (!request.waitForSubmit) {\n    waitForHash().catch(() => {\n      // Not concerned with result.\n    });\n\n    return transactionMeta as TransactionMeta;\n  }\n\n  const transactionHash = await waitForHash();\n\n  const finalTransactionMeta = getTransactionByHash(\n    transactionHash as string,\n    request.transactionController,\n  );\n\n  return finalTransactionMeta as TransactionMeta;\n}\n\nasync function addTransactionOrUserOperation(\n  request: FinalAddTransactionRequest,\n) {\n  const { selectedAccount } = request;\n\n  const isSmartContractAccount =\n    selectedAccount.type === EthAccountType.Erc4337;\n\n  if (isSmartContractAccount) {\n    return addUserOperationWithController(request);\n  }\n\n  return addTransactionWithController(request);\n}\n\nasync function addTransactionWithController(\n  request: FinalAddTransactionRequest,\n) {\n  const {\n    transactionController,\n    transactionOptions,\n    transactionParams,\n    networkClientId,\n  } = request;\n  const { result, transactionMeta } =\n    await transactionController.addTransaction(transactionParams, {\n      ...transactionOptions,\n      ...(process.env.TRANSACTION_MULTICHAIN ? { networkClientId } : {}),\n    });\n\n  return {\n    transactionMeta,\n    waitForHash: () => result,\n  };\n}\n\nasync function addUserOperationWithController(\n  request: FinalAddTransactionRequest,\n) {\n  const {\n    networkClientId,\n    transactionController,\n    transactionOptions,\n    transactionParams,\n    userOperationController,\n  } = request;\n\n  const { maxFeePerGas, maxPriorityFeePerGas } = transactionParams;\n  // TODO: Replace `any` with type\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { origin, requireApproval, type } = transactionOptions as any;\n\n  const normalisedTransaction: TransactionParams = {\n    ...transactionParams,\n    maxFeePerGas: addHexPrefix(maxFeePerGas as string),\n    maxPriorityFeePerGas: addHexPrefix(maxPriorityFeePerGas as string),\n  };\n\n  const swaps = transactionOptions?.swaps?.meta;\n\n  if (swaps?.type) {\n    delete swaps.type;\n  }\n\n  const options: AddUserOperationOptions = {\n    networkClientId,\n    origin,\n    requireApproval,\n    swaps,\n    type,\n  };\n\n  const result = await userOperationController.addUserOperationFromTransaction(\n    normalisedTransaction,\n    options,\n  );\n\n  userOperationController.startPollingByNetworkClientId(networkClientId);\n\n  const transactionMeta = getTransactionById(result.id, transactionController);\n\n  return {\n    transactionMeta,\n    waitForHash: result.transactionHash,\n  };\n}\n\nfunction getTransactionById(\n  transactionId: string,\n  transactionController: TransactionController,\n) {\n  return transactionController.state.transactions.find(\n    (tx) => tx.id === transactionId,\n  );\n}\n\nfunction getTransactionByHash(\n  transactionHash: string,\n  transactionController: TransactionController,\n) {\n  return transactionController.state.transactions.find(\n    (tx) => tx.hash === transactionHash,\n  );\n}\n\nasync function validateSecurity(request: AddTransactionRequest) {\n  const {\n    chainId,\n    ppomController,\n    securityAlertsEnabled,\n    transactionOptions,\n    transactionParams,\n    updateSecurityAlertResponse,\n    internalAccounts,\n  } = request;\n\n  const { type } = transactionOptions;\n\n  const isCurrentChainSupported = await isChainSupported(chainId);\n\n  const typeIsExcludedFromPPOM =\n    SECURITY_PROVIDER_EXCLUDED_TRANSACTION_TYPES.includes(\n      type as TransactionType,\n    );\n\n  if (\n    !securityAlertsEnabled ||\n    !isCurrentChainSupported ||\n    typeIsExcludedFromPPOM\n  ) {\n    return;\n  }\n\n  if (\n    internalAccounts.some(\n      ({ address }) =>\n        address.toLowerCase() === transactionParams.to?.toLowerCase(),\n    )\n  ) {\n    return;\n  }\n\n  try {\n    const { from, to, value, data } = transactionParams;\n    const { actionId, origin } = transactionOptions;\n\n    const ppomRequest = {\n      method: 'eth_sendTransaction',\n      id: actionId ?? '',\n      origin: origin ?? '',\n      params: [\n        {\n          from,\n          to: to ?? '',\n          value: value ?? '',\n          data: data ?? '',\n        },\n      ],\n      jsonrpc: '2.0' as const,\n    };\n\n    const securityAlertId = generateSecurityAlertId();\n\n    // Intentionally not awaited to avoid blocking the confirmation process while the validation occurs.\n    validateRequestWithPPOM({\n      ppomController,\n      request: ppomRequest,\n      securityAlertId,\n      chainId,\n    }).then((securityAlertResponse) => {\n      updateSecurityAlertResponse(\n        ppomRequest.method,\n        securityAlertId,\n        securityAlertResponse,\n      );\n    });\n\n    const loadingSecurityAlertResponse: SecurityAlertResponse = {\n      ...LOADING_SECURITY_ALERT_RESPONSE,\n      securityAlertId,\n    };\n\n    request.transactionOptions.securityAlertResponse =\n      loadingSecurityAlertResponse;\n  } catch (error) {\n    handlePPOMError(error, 'Error validating JSON RPC using PPOM: ');\n  }\n}\n","import { hashMessage } from '@ethersproject/hash';\nimport { verifyMessage } from '@ethersproject/wallet';\nimport type { NetworkController } from '@metamask/network-controller';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport type { Json, JsonRpcParams, Hex } from '@metamask/utils';\nimport { hasProperty, isObject } from '@metamask/utils';\nimport type {\n  JsonRpcResponse,\n  JsonRpcEngineEndCallback,\n  JsonRpcEngineNextCallback,\n} from 'json-rpc-engine';\nimport { JsonRpcRequest } from 'json-rpc-engine';\nimport {\n  EXPERIENCES_TO_VERIFY,\n  getExperience,\n  TX_SIG_LEN,\n  TRUSTED_SIGNERS,\n} from '../../../../shared/constants/verification';\nimport { MESSAGE_TYPE } from '../../../../shared/constants/app';\nimport { getCurrentChainId } from '../../../../ui/selectors';\n\nexport type TxParams = {\n  chainId?: `0x${string}`;\n  data: string;\n  from: string;\n  to: string;\n  value: string;\n};\n\n/**\n * Creates a middleware function that verifies bridge transactions from the\n * Portfolio.\n *\n * @param networkController - The network controller instance.\n * @param trustedSigners\n * @returns The middleware function.\n */\nexport function createTxVerificationMiddleware(\n  networkController: NetworkController,\n  trustedSigners = TRUSTED_SIGNERS,\n) {\n  return function txVerificationMiddleware(\n    req: JsonRpcRequest<JsonRpcParams>,\n    _res: JsonRpcResponse<Json>,\n    next: JsonRpcEngineNextCallback,\n    end: JsonRpcEngineEndCallback,\n  ) {\n    if (\n      req.method !== MESSAGE_TYPE.ETH_SEND_TRANSACTION ||\n      !Array.isArray(req.params) ||\n      !isValidParams(req.params)\n    ) {\n      return next();\n    }\n\n    // the tx object is the first element\n    const params = req.params[0];\n    const chainId =\n      typeof params.chainId === 'string'\n        ? (params.chainId.toLowerCase() as Hex)\n        : getCurrentChainId({ metamask: networkController.state });\n\n    const experienceType = getExperience(\n      params.to.toLowerCase() as Hex,\n      chainId,\n    );\n    // if undefined then no address matched - skip OR if experience is not one we want to verify against - skip\n    if (!experienceType || !EXPERIENCES_TO_VERIFY.includes(experienceType)) {\n      return next();\n    }\n\n    const signature = `0x${params.data.slice(-TX_SIG_LEN)}`;\n    const addressToVerify = verifyMessage(hashParams(params), signature);\n    if (addressToVerify !== trustedSigners[experienceType]) {\n      return end(rpcErrors.invalidParams('Invalid transaction signature.'));\n    }\n    return next();\n  };\n}\n\nfunction hashParams(params: TxParams): string {\n  const paramsToVerify = {\n    to: hashMessage(params.to.toLowerCase()),\n    from: hashMessage(params.from.toLowerCase()),\n    data: hashMessage(\n      params.data.toLowerCase().slice(0, params.data.length - TX_SIG_LEN),\n    ),\n    value: hashMessage(params.value.toLowerCase()),\n  };\n  return hashMessage(JSON.stringify(paramsToVerify));\n}\n\n/**\n * Checks if the params of a JSON-RPC request are valid `eth_sendTransaction`\n * params.\n *\n * @param params - The params to validate.\n * @returns Whether the params are valid.\n */\nfunction isValidParams(params: Json[]): params is [TxParams] {\n  return (\n    isObject(params[0]) &&\n    typeof params[0].data === 'string' &&\n    typeof params[0].from === 'string' &&\n    typeof params[0].to === 'string' &&\n    typeof params[0].value === 'string' &&\n    (!hasProperty(params[0], 'chainId') ||\n      (typeof params[0].chainId === 'string' &&\n        params[0].chainId.startsWith('0x')))\n  );\n}\n","import { BaseController, StateMetadata } from '@metamask/base-controller';\nimport { fetchBridgeFeatureFlags } from '../../../../ui/pages/bridge/bridge.util';\nimport {\n  BRIDGE_CONTROLLER_NAME,\n  DEFAULT_BRIDGE_CONTROLLER_STATE,\n} from './constants';\nimport { BridgeControllerState, BridgeControllerMessenger } from './types';\n\nconst metadata: StateMetadata<{ bridgeState: BridgeControllerState }> = {\n  bridgeState: {\n    persist: false,\n    anonymous: false,\n  },\n};\n\nexport default class BridgeController extends BaseController<\n  typeof BRIDGE_CONTROLLER_NAME,\n  { bridgeState: BridgeControllerState },\n  BridgeControllerMessenger\n> {\n  constructor({ messenger }: { messenger: BridgeControllerMessenger }) {\n    super({\n      name: BRIDGE_CONTROLLER_NAME,\n      metadata,\n      messenger,\n      state: { bridgeState: DEFAULT_BRIDGE_CONTROLLER_STATE },\n    });\n\n    this.messagingSystem.registerActionHandler(\n      `${BRIDGE_CONTROLLER_NAME}:setBridgeFeatureFlags`,\n      this.setBridgeFeatureFlags.bind(this),\n    );\n  }\n\n  resetState = () => {\n    this.update((_state) => {\n      _state.bridgeState = {\n        ...DEFAULT_BRIDGE_CONTROLLER_STATE,\n      };\n    });\n  };\n\n  setBridgeFeatureFlags = async () => {\n    const { bridgeState } = this.state;\n    const bridgeFeatureFlags = await fetchBridgeFeatureFlags();\n    this.update((_state) => {\n      _state.bridgeState = { ...bridgeState, bridgeFeatureFlags };\n    });\n  };\n}\n","const BaseFilter = require('./base-filter')\n\n// tracks all results ever recorded\nclass BaseFilterWithHistory extends BaseFilter {\n\n  constructor () {\n    super()\n    this.allResults = []\n  }\n\n  async update () {\n    throw new Error('BaseFilterWithHistory - no update method specified')\n  }\n\n  addResults (newResults) {\n    this.allResults = this.allResults.concat(newResults)\n    super.addResults(newResults)\n  }\n\n  addInitialResults (newResults) {\n    this.allResults = this.allResults.concat(newResults)\n    super.addInitialResults(newResults)\n  }\n\n  getAllResults () {\n    return this.allResults\n  }\n\n}\n\nmodule.exports = BaseFilterWithHistory","const SafeEventEmitter = require('@metamask/safe-event-emitter').default\n\nclass BaseFilter extends SafeEventEmitter {\n\n  constructor () {\n    super()\n    this.updates = []\n  }\n\n  async initialize () {}\n\n  async update () {\n    throw new Error('BaseFilter - no update method specified')\n  }\n\n  addResults (newResults) {\n    this.updates = this.updates.concat(newResults)\n    newResults.forEach(result => this.emit('update', result))\n  }\n\n  addInitialResults (newResults) {}\n\n  getChangesAndClear () {\n    const updates = this.updates\n    this.updates = []\n    return updates\n  }\n  \n}\n\nmodule.exports = BaseFilter\n","const BaseFilter = require('./base-filter')\nconst getBlocksForRange = require('./getBlocksForRange')\nconst { incrementHexInt } = require('./hexUtils')\n\nclass BlockFilter extends BaseFilter {\n\n  constructor ({ provider, params }) {\n    super()\n    this.type = 'block'\n    this.provider = provider\n  }\n\n  async update ({ oldBlock, newBlock }) {\n    const toBlock = newBlock\n    const fromBlock = incrementHexInt(oldBlock)\n    const blockBodies = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })\n    const blockHashes = blockBodies.map((block) => block.hash)\n    this.addResults(blockHashes)\n  }\n\n}\n\nmodule.exports = BlockFilter\n","module.exports = getBlocksForRange\n\nasync function getBlocksForRange({ provider, fromBlock, toBlock }) {\n  if (!fromBlock) fromBlock = toBlock\n\n  const fromBlockNumber = hexToInt(fromBlock)\n  const toBlockNumber = hexToInt(toBlock)\n  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1\n  // load all blocks from old to new (inclusive)\n  const missingBlockNumbers = Array(blockCountToQuery).fill()\n                              .map((_,index) => fromBlockNumber + index)\n                              .map(intToHex)\n  let blockBodies = await Promise.all(\n    missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false]))\n  )\n  blockBodies = blockBodies.filter(block => block !== null);\n  return blockBodies\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString\n  return Number.parseInt(hexString, 16)\n}\n\nfunction incrementHexInt(hexString){\n  if (hexString === undefined || hexString === null) return hexString\n  const value = hexToInt(hexString)\n  return intToHex(value + 1)\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int\n  const hexString = int.toString(16)\n  return '0x' + hexString\n}\n\nfunction sendAsync(provider, request) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync(request, (error, response) => {\n      if (error) {\n        reject(error);\n      } else if (response.error) {\n        reject(response.error);\n      } else if (response.result) {\n        resolve(response.result);\n      } else {\n        reject(new Error(\"Result was empty\"));\n      }\n    });\n  });\n}\n\nasync function query(provider, method, params) {\n  for (let i = 0; i < 3; i++) {\n    try {\n      return await sendAsync(provider, {\n        id: 1,\n        jsonrpc: \"2.0\",\n        method,\n        params,\n      });\n    } catch (error) {\n      console.error(\n        `provider.sendAsync failed: ${error.stack || error.message || error}`\n      );\n    }\n  }\n  return null;\n}\n","\nmodule.exports = {\n  minBlockRef,\n  maxBlockRef,\n  sortBlockRefs,\n  bnToHex,\n  blockRefIsNumber,\n  hexToInt,\n  incrementHexInt,\n  intToHex,\n  unsafeRandomBytes,\n}\n\nfunction minBlockRef(...refs) {\n  const sortedRefs = sortBlockRefs(refs)\n  return sortedRefs[0]\n}\n\nfunction maxBlockRef(...refs) {\n  const sortedRefs = sortBlockRefs(refs)\n  return sortedRefs[sortedRefs.length-1]\n}\n\nfunction sortBlockRefs(refs) {\n  return refs.sort((refA, refB) => {\n    if (refA === 'latest' || refB === 'earliest') return 1\n    if (refB === 'latest' || refA === 'earliest') return -1\n    return hexToInt(refA) - hexToInt(refB)\n  })\n}\n\nfunction bnToHex(bn) {\n  return '0x' + bn.toString(16)\n}\n\nfunction blockRefIsNumber(blockRef){\n  return blockRef && !['earliest', 'latest', 'pending'].includes(blockRef)\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString\n  return Number.parseInt(hexString, 16)\n}\n\nfunction incrementHexInt(hexString){\n  if (hexString === undefined || hexString === null) return hexString\n  const value = hexToInt(hexString)\n  return intToHex(value + 1)\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int\n  let hexString = int.toString(16)\n  const needsLeftPad = hexString.length % 2\n  if (needsLeftPad) hexString = '0' + hexString\n  return '0x' + hexString\n}\n\nfunction unsafeRandomBytes(byteCount) {\n  let result = '0x'\n  for (let i = 0; i < byteCount; i++) {\n    result += unsafeRandomNibble()\n    result += unsafeRandomNibble()\n  }\n  return result\n}\n\nfunction unsafeRandomNibble() {\n  return Math.floor(Math.random() * 16).toString(16)\n}\n","const Mutex = require('async-mutex').Mutex\nconst { createAsyncMiddleware, createScaffoldMiddleware } = require('@metamask/json-rpc-engine')\nconst LogFilter = require('./log-filter.js')\nconst BlockFilter = require('./block-filter.js')\nconst TxFilter = require('./tx-filter.js')\nconst { intToHex, hexToInt } = require('./hexUtils')\n\nmodule.exports = createEthFilterMiddleware\n\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n\n  // create filter collection\n  let filterIndex = 0\n  let filters = {}\n  // create update mutex\n  const mutex = new Mutex()\n  const waitForFree = mutexMiddlewareWrapper({ mutex })\n\n  const middleware = createScaffoldMiddleware({\n    // install filters\n    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),\n  })\n\n  // setup filter updating and destroy handler\n  const filterUpdater = async ({ oldBlock, newBlock }) => {\n    if (filters.length === 0) return\n    // lock update reads\n    const releaseLock = await mutex.acquire()\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async (filter) => {\n        try {\n         await filter.update({ oldBlock, newBlock })\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err)\n        }\n      }))\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err)\n    }\n    // unlock update reads\n    releaseLock()\n  }\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter\n  middleware.newBlockFilter = newBlockFilter\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter\n  middleware.uninstallFilter = uninstallFilterHandler\n  middleware.getFilterChanges = getFilterChanges\n  middleware.getFilterLogs = getFilterLogs\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters()\n  }\n\n  return middleware\n\n  //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({ provider, params })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newBlockFilter() {\n    const filter = new BlockFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  //\n  // get filter changes\n  //\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    const results = filter.getChangesAndClear()\n    return results\n  }\n\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    // only return results for log filters\n    let results = []\n    if (filter.type === 'log') {\n      results = filter.getAllResults()\n    }\n    return results\n  }\n\n\n  //\n  // remove filters\n  //\n\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    const result = Boolean(filter)\n    // uninstall filter\n    if (result) {\n      await uninstallFilter(filterIndex)\n    }\n    return result\n  }\n\n  //\n  // utils\n  //\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length\n    // install filter\n    const currentBlock = await blockTracker.getLatestBlock()\n    await filter.initialize({ currentBlock })\n    filterIndex++\n    filters[filterIndex] = filter\n    filter.id = filterIndex\n    filter.idHex = intToHex(filterIndex)\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n    return filterIndex\n  }\n\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length\n    delete filters[filterIndex]\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n  }\n\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length\n    filters = {}\n    // update block tracker subs\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })\n  }\n\n  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater)\n      return\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater)\n      return\n    }\n  }\n\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async (...args) => {\n    const filter = await createFilterFn(...args)\n    const result = intToHex(filter.id)\n    return result\n  })\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params)\n    res.result = result\n  })\n}\n\nfunction mutexMiddlewareWrapper({ mutex }) {\n  return (middleware) => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire()\n      releaseLock()\n      middleware(req, res, next, end)\n    }\n  }\n}\n\nfunction objValues(obj, fn){\n  const values = []\n  for (let key in obj) {\n    values.push(obj[key])\n  }\n  return values\n}\n","const EthQuery = require('@metamask/eth-query')\nconst pify = require('pify')\nconst BaseFilterWithHistory = require('./base-filter-history')\nconst { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = require('./hexUtils')\n\nclass LogFilter extends BaseFilterWithHistory {\n\n  constructor ({ provider, params }) {\n    super()\n    this.type = 'log'\n    this.ethQuery = new EthQuery(provider)\n    this.params = Object.assign({\n      fromBlock: 'latest',\n      toBlock: 'latest',\n      address: undefined,\n      topics: [],\n    }, params)\n    // normalize address parameter\n    if (this.params.address) {\n      // ensure array\n      if (!Array.isArray(this.params.address)) {\n        this.params.address = [this.params.address]\n      }\n      // ensure lowercase\n      this.params.address = this.params.address.map(address => address.toLowerCase())\n    }\n  }\n\n  async initialize({ currentBlock }) {\n    // resolve params.fromBlock\n    let fromBlock = this.params.fromBlock\n    if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock\n    if ('earliest' === fromBlock) fromBlock = '0x0'\n    this.params.fromBlock = fromBlock\n    // set toBlock for initial lookup\n    const toBlock = minBlockRef(this.params.toBlock, currentBlock)\n    const params = Object.assign({}, this.params, { toBlock })\n    // fetch logs and add to results\n    const newLogs = await this._fetchLogs(params)\n    this.addInitialResults(newLogs)\n  }\n\n  async update ({ oldBlock, newBlock }) {\n    // configure params for this update\n    const toBlock = newBlock\n    let fromBlock\n    // oldBlock is empty on first sync\n    if (oldBlock) {\n      fromBlock = incrementHexInt(oldBlock)\n    } else {\n      fromBlock = newBlock\n    }\n    // fetch logs\n    const params = Object.assign({}, this.params, { fromBlock, toBlock })\n    const newLogs = await this._fetchLogs(params)\n    const matchingLogs = newLogs.filter(log => this.matchLog(log))\n\n    // add to results\n    this.addResults(matchingLogs)\n  }\n\n  async _fetchLogs (params) {\n    const newLogs = await pify(cb => this.ethQuery.getLogs(params, cb))()\n    // add to results\n    return newLogs\n  }\n\n  matchLog(log) {\n    // check if block number in bounds:\n    if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false\n    if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false\n\n    // address is correct:\n    const normalizedLogAddress = log.address && log.address.toLowerCase()\n    if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false\n\n    // topics match:\n    // topics are position-dependant\n    // topics can be nested to represent `or` [[a || b], c]\n    // topics can be null, representing a wild card for that position\n    const topicsMatch = this.params.topics.every((topicPattern, index) => {\n      // pattern is longer than actual topics\n      let logTopic = log.topics[index]\n      if (!logTopic) return false\n      logTopic = logTopic.toLowerCase()\n      // normalize subTopics\n      let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]\n      // check for wild card\n      const subtopicsIncludeWildcard = subtopicsToMatch.includes(null)\n      if (subtopicsIncludeWildcard) return true\n      subtopicsToMatch = subtopicsToMatch.map(topic => topic.toLowerCase())\n      // check each possible matching topic\n      const topicDoesMatch = subtopicsToMatch.includes(logTopic)\n      return topicDoesMatch\n    })\n\n    return topicsMatch\n  }\n\n}\n\nmodule.exports = LogFilter\n","const createRandomId = require('json-rpc-random-id')();\nconst extend = require('xtend');\n\nmodule.exports = EthQuery;\n\n/**\n * Wrapping an Ethereum provider object, EthQuery provides some conveniences\n * around making requests to an RPC endpoint:\n *\n * - Each of the RPC methods in the Ethereum spec may be requested not only\n *   via `sendAsync`, but also via its own instance method, whose API is suited\n *   for the RPC method.\n * - When requesting an RPC method, `id` and `jsonrpc` do not need to be\n *   specified and are filled in with reasonable defaults.\n * - The mechanics of `sendAsync` (or any of the RPC-method-specific instance\n *   methods) are simplified such that its callback will be called with an error\n *   argument not only if the callback on the provider's `sendAsync` method was\n *   called with an argument, but also if the `response` object has an `error`\n *   property.\n *\n * @param {any} provider - The provider object.\n */\nfunction EthQuery(provider) {\n  const self = this;\n  self.currentProvider = provider;\n}\n\n//\n// base queries\n//\n\n// default block\nEthQuery.prototype.getBalance = generateFnWithDefaultBlockFor(\n  2,\n  'eth_getBalance',\n);\nEthQuery.prototype.getCode = generateFnWithDefaultBlockFor(2, 'eth_getCode');\nEthQuery.prototype.getTransactionCount = generateFnWithDefaultBlockFor(\n  2,\n  'eth_getTransactionCount',\n);\nEthQuery.prototype.getStorageAt = generateFnWithDefaultBlockFor(\n  3,\n  'eth_getStorageAt',\n);\nEthQuery.prototype.call = generateFnWithDefaultBlockFor(2, 'eth_call');\n// standard\nEthQuery.prototype.protocolVersion = generateFnFor('eth_protocolVersion');\nEthQuery.prototype.syncing = generateFnFor('eth_syncing');\nEthQuery.prototype.coinbase = generateFnFor('eth_coinbase');\nEthQuery.prototype.mining = generateFnFor('eth_mining');\nEthQuery.prototype.hashrate = generateFnFor('eth_hashrate');\nEthQuery.prototype.gasPrice = generateFnFor('eth_gasPrice');\nEthQuery.prototype.accounts = generateFnFor('eth_accounts');\nEthQuery.prototype.blockNumber = generateFnFor('eth_blockNumber');\nEthQuery.prototype.getBlockTransactionCountByHash = generateFnFor(\n  'eth_getBlockTransactionCountByHash',\n);\nEthQuery.prototype.getBlockTransactionCountByNumber = generateFnFor(\n  'eth_getBlockTransactionCountByNumber',\n);\nEthQuery.prototype.getUncleCountByBlockHash = generateFnFor(\n  'eth_getUncleCountByBlockHash',\n);\nEthQuery.prototype.getUncleCountByBlockNumber = generateFnFor(\n  'eth_getUncleCountByBlockNumber',\n);\nEthQuery.prototype.sign = generateFnFor('eth_sign');\nEthQuery.prototype.sendTransaction = generateFnFor('eth_sendTransaction');\nEthQuery.prototype.sendRawTransaction = generateFnFor('eth_sendRawTransaction');\nEthQuery.prototype.estimateGas = generateFnFor('eth_estimateGas');\nEthQuery.prototype.getBlockByHash = generateFnFor('eth_getBlockByHash');\nEthQuery.prototype.getBlockByNumber = generateFnFor('eth_getBlockByNumber');\nEthQuery.prototype.getTransactionByHash = generateFnFor(\n  'eth_getTransactionByHash',\n);\nEthQuery.prototype.getTransactionByBlockHashAndIndex = generateFnFor(\n  'eth_getTransactionByBlockHashAndIndex',\n);\nEthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor(\n  'eth_getTransactionByBlockNumberAndIndex',\n);\nEthQuery.prototype.getTransactionReceipt = generateFnFor(\n  'eth_getTransactionReceipt',\n);\nEthQuery.prototype.getUncleByBlockHashAndIndex = generateFnFor(\n  'eth_getUncleByBlockHashAndIndex',\n);\nEthQuery.prototype.getUncleByBlockNumberAndIndex = generateFnFor(\n  'eth_getUncleByBlockNumberAndIndex',\n);\nEthQuery.prototype.getCompilers = generateFnFor('eth_getCompilers');\nEthQuery.prototype.compileLLL = generateFnFor('eth_compileLLL');\nEthQuery.prototype.compileSolidity = generateFnFor('eth_compileSolidity');\nEthQuery.prototype.compileSerpent = generateFnFor('eth_compileSerpent');\nEthQuery.prototype.newFilter = generateFnFor('eth_newFilter');\nEthQuery.prototype.newBlockFilter = generateFnFor('eth_newBlockFilter');\nEthQuery.prototype.newPendingTransactionFilter = generateFnFor(\n  'eth_newPendingTransactionFilter',\n);\nEthQuery.prototype.uninstallFilter = generateFnFor('eth_uninstallFilter');\nEthQuery.prototype.getFilterChanges = generateFnFor('eth_getFilterChanges');\nEthQuery.prototype.getFilterLogs = generateFnFor('eth_getFilterLogs');\nEthQuery.prototype.getLogs = generateFnFor('eth_getLogs');\nEthQuery.prototype.getWork = generateFnFor('eth_getWork');\nEthQuery.prototype.submitWork = generateFnFor('eth_submitWork');\nEthQuery.prototype.submitHashrate = generateFnFor('eth_submitHashrate');\n\n// network level\n\nEthQuery.prototype.sendAsync = function (opts, callback) {\n  const self = this;\n  self.currentProvider.sendAsync(\n    createPayload(opts),\n    function (error, response) {\n      let improvedError = error;\n      if (!error && response.error) {\n        improvedError = new Error(\n          `EthQuery - RPC Error - ${response.error.message}`,\n        );\n      }\n      if (improvedError) {\n        return callback(improvedError);\n      }\n      return callback(null, response.result);\n    },\n  );\n};\n\n// util\n\n/**\n * Generates an instance method designed to call an RPC method that takes no\n * parameters. This instance method uses `sendAsync` internally to make the\n * request to the network.\n *\n * @param {any} methodName - The RPC method.\n * @returns {any} The method.\n */\nfunction generateFnFor(methodName) {\n  return function (...args) {\n    const self = this;\n    const callback = args.pop();\n    self.sendAsync(\n      {\n        method: methodName,\n        params: args,\n      },\n      callback,\n    );\n  };\n}\n\n/**\n * Generates an instance method designed to call an RPC methods that takes one\n * or more parameters. This instance method uses `sendAsync` internally to make\n * the request to the network.\n *\n * @param {any} argCount - The number of parameters that the RPC method is\n * expected to take.\n * @param {any} methodName - The RPC method.\n * @returns {any} The method.\n */\nfunction generateFnWithDefaultBlockFor(argCount, methodName) {\n  return function (...args) {\n    const self = this;\n    const callback = args.pop();\n    // set optional default block param\n    if (args.length < argCount) {\n      args.push('latest');\n    }\n    self.sendAsync(\n      {\n        method: methodName,\n        params: args,\n      },\n      callback,\n    );\n  };\n}\n\n/**\n * Builds a complete request payload object from a partial version.\n *\n * @param {any} data - The partial request object.\n * @returns {any} The complete request object.\n */\nfunction createPayload(data) {\n  return extend(\n    {\n      // defaults\n      id: createRandomId(),\n      jsonrpc: '2.0',\n      params: [],\n      // user-specified\n    },\n    data,\n  );\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _JsonRpcEngine_instances, _a, _JsonRpcEngine_isDestroyed, _JsonRpcEngine_middleware, _JsonRpcEngine_notificationHandler, _JsonRpcEngine_assertIsNotDestroyed, _JsonRpcEngine_handleBatch, _JsonRpcEngine_handle, _JsonRpcEngine_processRequest, _JsonRpcEngine_runAllMiddleware, _JsonRpcEngine_runMiddleware, _JsonRpcEngine_runReturnHandlers, _JsonRpcEngine_checkForCompletion;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcEngine = void 0;\nconst rpc_errors_1 = require(\"@metamask/rpc-errors\");\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst utils_1 = require(\"@metamask/utils\");\nconst DESTROYED_ERROR_MESSAGE = 'This engine is destroyed and can no longer be used.';\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JsonRpcEngine extends safe_event_emitter_1.default {\n    /**\n     * Constructs a {@link JsonRpcEngine} instance.\n     *\n     * @param options - Options bag.\n     * @param options.notificationHandler - A function for handling JSON-RPC\n     * notifications. A JSON-RPC notification is defined as a JSON-RPC request\n     * without an `id` property. If this option is _not_ provided, notifications\n     * will be treated the same as requests. If this option _is_ provided,\n     * notifications will be passed to the handler function without touching\n     * the engine's middleware stack. This function should not throw or reject.\n     */\n    constructor({ notificationHandler } = {}) {\n        super();\n        _JsonRpcEngine_instances.add(this);\n        /**\n         * Indicating whether this engine is destroyed or not.\n         */\n        _JsonRpcEngine_isDestroyed.set(this, false);\n        _JsonRpcEngine_middleware.set(this, void 0);\n        _JsonRpcEngine_notificationHandler.set(this, void 0);\n        __classPrivateFieldSet(this, _JsonRpcEngine_middleware, [], \"f\");\n        __classPrivateFieldSet(this, _JsonRpcEngine_notificationHandler, notificationHandler, \"f\");\n    }\n    /**\n     * Calls the `destroy()` function of any middleware with that property, clears\n     * the middleware array, and marks this engine as destroyed. A destroyed\n     * engine cannot be used.\n     */\n    destroy() {\n        __classPrivateFieldGet(this, _JsonRpcEngine_middleware, \"f\").forEach((middleware) => {\n            if (\n            // `in` walks the prototype chain, which is probably the desired\n            // behavior here.\n            'destroy' in middleware &&\n                typeof middleware.destroy === 'function') {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                middleware.destroy();\n            }\n        });\n        __classPrivateFieldSet(this, _JsonRpcEngine_middleware, [], \"f\");\n        __classPrivateFieldSet(this, _JsonRpcEngine_isDestroyed, true, \"f\");\n    }\n    /**\n     * Add a middleware function to the engine's middleware stack.\n     *\n     * @param middleware - The middleware function to add.\n     */\n    push(middleware) {\n        __classPrivateFieldGet(this, _JsonRpcEngine_instances, \"m\", _JsonRpcEngine_assertIsNotDestroyed).call(this);\n        __classPrivateFieldGet(this, _JsonRpcEngine_middleware, \"f\").push(middleware);\n    }\n    // TODO: Replace `any` with type\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    handle(req, callback) {\n        __classPrivateFieldGet(this, _JsonRpcEngine_instances, \"m\", _JsonRpcEngine_assertIsNotDestroyed).call(this);\n        if (callback && typeof callback !== 'function') {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (callback) {\n                return __classPrivateFieldGet(this, _JsonRpcEngine_instances, \"m\", _JsonRpcEngine_handleBatch).call(this, req, callback);\n            }\n            return __classPrivateFieldGet(this, _JsonRpcEngine_instances, \"m\", _JsonRpcEngine_handleBatch).call(this, req);\n        }\n        if (callback) {\n            return __classPrivateFieldGet(this, _JsonRpcEngine_instances, \"m\", _JsonRpcEngine_handle).call(this, req, callback);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n    asMiddleware() {\n        __classPrivateFieldGet(this, _JsonRpcEngine_instances, \"m\", _JsonRpcEngine_assertIsNotDestroyed).call(this);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        return (req, res, next, end) => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const [middlewareError, isComplete, returnHandlers] = yield __classPrivateFieldGet(JsonRpcEngine, _a, \"m\", _JsonRpcEngine_runAllMiddleware).call(JsonRpcEngine, req, res, __classPrivateFieldGet(this, _JsonRpcEngine_middleware, \"f\"));\n                if (isComplete) {\n                    yield __classPrivateFieldGet(JsonRpcEngine, _a, \"m\", _JsonRpcEngine_runReturnHandlers).call(JsonRpcEngine, returnHandlers);\n                    return end(middlewareError);\n                }\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                return next((handlerCallback) => __awaiter(this, void 0, void 0, function* () {\n                    try {\n                        yield __classPrivateFieldGet(JsonRpcEngine, _a, \"m\", _JsonRpcEngine_runReturnHandlers).call(JsonRpcEngine, returnHandlers);\n                        // TODO: Replace `any` with type\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    }\n                    catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                }));\n                // TODO: Replace `any` with type\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }\n            catch (error) {\n                return end(error);\n            }\n        });\n    }\n    /**\n     * A promise-wrapped _handle.\n     *\n     * @param request - The JSON-RPC request.\n     * @returns The JSON-RPC response.\n     */\n    // This function is used in tests, so we cannot easily change it to use the\n    // hash syntax.\n    // eslint-disable-next-line no-restricted-syntax\n    _promiseHandle(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                __classPrivateFieldGet(this, _JsonRpcEngine_instances, \"m\", _JsonRpcEngine_handle).call(this, request, (error, res) => {\n                    // For notifications, the response will be `undefined`, and any caught\n                    // errors are unexpected and should be surfaced to the caller.\n                    if (error && res === undefined) {\n                        reject(error);\n                    }\n                    else {\n                        // Excepting notifications, there will always be a response, and it will\n                        // always have any error that is caught and propagated.\n                        resolve(res);\n                    }\n                }).catch(reject);\n            });\n        });\n    }\n}\nexports.JsonRpcEngine = JsonRpcEngine;\n_a = JsonRpcEngine, _JsonRpcEngine_isDestroyed = new WeakMap(), _JsonRpcEngine_middleware = new WeakMap(), _JsonRpcEngine_notificationHandler = new WeakMap(), _JsonRpcEngine_instances = new WeakSet(), _JsonRpcEngine_assertIsNotDestroyed = function _JsonRpcEngine_assertIsNotDestroyed() {\n    if (__classPrivateFieldGet(this, _JsonRpcEngine_isDestroyed, \"f\")) {\n        throw new Error(DESTROYED_ERROR_MESSAGE);\n    }\n}, _JsonRpcEngine_handleBatch = function _JsonRpcEngine_handleBatch(requests, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // The order here is important\n        try {\n            // If the batch is an empty array, the response array must contain a single object\n            if (requests.length === 0) {\n                const response = [\n                    {\n                        id: null,\n                        jsonrpc: '2.0',\n                        error: new rpc_errors_1.JsonRpcError(rpc_errors_1.errorCodes.rpc.invalidRequest, 'Request batch must contain plain objects. Received an empty array'),\n                    },\n                ];\n                if (callback) {\n                    return callback(null, response);\n                }\n                return response;\n            }\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = (yield Promise.all(\n            // 1. Begin executing each request in the order received\n            requests.map(this._promiseHandle.bind(this)))).filter(\n            // Filter out any notification responses.\n            (response) => response !== undefined);\n            // 3. Return batch response\n            if (callback) {\n                return callback(null, responses);\n            }\n            return responses;\n        }\n        catch (error) {\n            if (callback) {\n                return callback(error);\n            }\n            throw error;\n        }\n    });\n}, _JsonRpcEngine_handle = function _JsonRpcEngine_handle(callerReq, callback) {\n    var _b;\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!callerReq ||\n            Array.isArray(callerReq) ||\n            typeof callerReq !== 'object') {\n            const error = new rpc_errors_1.JsonRpcError(rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, { request: callerReq });\n            return callback(error, { id: null, jsonrpc: '2.0', error });\n        }\n        if (typeof callerReq.method !== 'string') {\n            const error = new rpc_errors_1.JsonRpcError(rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, { request: callerReq });\n            if (__classPrivateFieldGet(this, _JsonRpcEngine_notificationHandler, \"f\") && !(0, utils_1.isJsonRpcRequest)(callerReq)) {\n                // Do not reply to notifications, even if they are malformed.\n                return callback(null);\n            }\n            return callback(error, {\n                // Typecast: This could be a notification, but we want to access the\n                // `id` even if it doesn't exist.\n                id: (_b = callerReq.id) !== null && _b !== void 0 ? _b : null,\n                jsonrpc: '2.0',\n                error,\n            });\n        }\n        // Handle notifications.\n        // We can't use isJsonRpcNotification here because that narrows callerReq to\n        // \"never\" after the if clause for unknown reasons.\n        if (__classPrivateFieldGet(this, _JsonRpcEngine_notificationHandler, \"f\") && !(0, utils_1.isJsonRpcRequest)(callerReq)) {\n            try {\n                yield __classPrivateFieldGet(this, _JsonRpcEngine_notificationHandler, \"f\").call(this, callerReq);\n            }\n            catch (error) {\n                return callback(error);\n            }\n            return callback(null);\n        }\n        let error = null;\n        // Handle requests.\n        // Typecast: Permit missing id's for backwards compatibility.\n        const req = Object.assign({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc,\n        };\n        try {\n            yield __classPrivateFieldGet(JsonRpcEngine, _a, \"m\", _JsonRpcEngine_processRequest).call(JsonRpcEngine, req, res, __classPrivateFieldGet(this, _JsonRpcEngine_middleware, \"f\"));\n            // TODO: Replace `any` with type\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                res.error = (0, rpc_errors_1.serializeError)(error);\n            }\n        }\n        return callback(error, res);\n    });\n}, _JsonRpcEngine_processRequest = function _JsonRpcEngine_processRequest(req, res, middlewares) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const [error, isComplete, returnHandlers] = yield __classPrivateFieldGet(JsonRpcEngine, _a, \"m\", _JsonRpcEngine_runAllMiddleware).call(JsonRpcEngine, req, res, middlewares);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        __classPrivateFieldGet(JsonRpcEngine, _a, \"m\", _JsonRpcEngine_checkForCompletion).call(JsonRpcEngine, req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        yield __classPrivateFieldGet(JsonRpcEngine, _a, \"m\", _JsonRpcEngine_runReturnHandlers).call(JsonRpcEngine, returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            // eslint-disable-next-line @typescript-eslint/no-throw-literal\n            throw error;\n        }\n    });\n}, _JsonRpcEngine_runAllMiddleware = function _JsonRpcEngine_runAllMiddleware(req, res, middlewares) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewares) {\n            [error, isComplete] = yield __classPrivateFieldGet(JsonRpcEngine, _a, \"m\", _JsonRpcEngine_runMiddleware).call(JsonRpcEngine, req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [error, isComplete, returnHandlers.reverse()];\n    });\n}, _JsonRpcEngine_runMiddleware = function _JsonRpcEngine_runMiddleware(request, response, middleware, returnHandlers) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => {\n            const end = (error) => {\n                const parsedError = error || response.error;\n                if (parsedError) {\n                    response.error = (0, rpc_errors_1.serializeError)(parsedError);\n                }\n                // True indicates that the request should end\n                resolve([parsedError, true]);\n            };\n            const next = (returnHandler) => {\n                if (response.error) {\n                    end(response.error);\n                }\n                else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== 'function') {\n                            end(new rpc_errors_1.JsonRpcError(rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: \"next\" return handlers must be functions. ` +\n                                `Received \"${typeof returnHandler}\" for request:\\n${jsonify(request)}`, { request: request }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([null, false]);\n                }\n            };\n            try {\n                middleware(request, response, next, end);\n                // TODO: Replace `any` with type\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }\n            catch (error) {\n                end(error);\n            }\n        });\n    });\n}, _JsonRpcEngine_runReturnHandlers = function _JsonRpcEngine_runReturnHandlers(handlers) {\n    return __awaiter(this, void 0, void 0, function* () {\n        for (const handler of handlers) {\n            yield new Promise((resolve, reject) => {\n                handler((error) => (error ? reject(error) : resolve()));\n            });\n        }\n    });\n}, _JsonRpcEngine_checkForCompletion = function _JsonRpcEngine_checkForCompletion(request, response, isComplete) {\n    if (!(0, utils_1.hasProperty)(response, 'result') && !(0, utils_1.hasProperty)(response, 'error')) {\n        throw new rpc_errors_1.JsonRpcError(rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\\n${jsonify(request)}`, { request: request });\n    }\n    if (!isComplete) {\n        throw new rpc_errors_1.JsonRpcError(rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\\n${jsonify(request)}`, { request: request });\n    }\n};\n/**\n * JSON-stringifies a request object.\n *\n * @param request - The request object to JSON-stringify.\n * @returns The JSON-stringified request object.\n */\nfunction jsonify(request) {\n    return JSON.stringify(request, null, 2);\n}\n//# sourceMappingURL=JsonRpcEngine.js.map","import EventEmitter from 'events';\nimport { finished, pipeline } from 'readable-stream';\nimport {\n  AssetsContractController,\n  CurrencyRateController,\n  NftController,\n  NftDetectionController,\n  TokenDetectionController,\n  TokenListController,\n  TokenRatesController,\n  TokensController,\n  CodefiTokenPricesServiceV2,\n  RatesController,\n  fetchMultiExchangeRate,\n} from '@metamask/assets-controllers';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { storeAsStream } from '@metamask/obs-store/dist/asStream';\nimport { JsonRpcEngine } from 'json-rpc-engine';\nimport { createEngineStream } from 'json-rpc-middleware-stream';\nimport { providerAsMiddleware } from '@metamask/eth-json-rpc-middleware';\nimport { debounce, throttle, memoize, wrap } from 'lodash';\nimport {\n  KeyringController,\n  keyringBuilderFactory,\n} from '@metamask/keyring-controller';\nimport createFilterMiddleware from '@metamask/eth-json-rpc-filters';\nimport createSubscriptionManager from '@metamask/eth-json-rpc-filters/subscriptionManager';\nimport {\n  errorCodes as rpcErrorCodes,\n  EthereumRpcError,\n  ethErrors,\n} from 'eth-rpc-errors';\n\nimport { Mutex } from 'await-semaphore';\nimport log from 'loglevel';\nimport {\n  TrezorConnectBridge,\n  TrezorKeyring,\n} from '@metamask/eth-trezor-keyring';\nimport {\n  LedgerKeyring,\n  LedgerIframeBridge,\n} from '@metamask/eth-ledger-bridge-keyring';\nimport LatticeKeyring from 'eth-lattice-keyring';\nimport { MetaMaskKeyring as QRHardwareKeyring } from '@keystonehq/metamask-airgapped-keyring';\nimport EthQuery from '@metamask/eth-query';\nimport EthJSQuery from '@metamask/ethjs-query';\nimport nanoid from 'nanoid';\nimport { captureException } from '@sentry/browser';\nimport { AddressBookController } from '@metamask/address-book-controller';\nimport {\n  ApprovalController,\n  ApprovalRequestNotFoundError,\n} from '@metamask/approval-controller';\nimport { ControllerMessenger } from '@metamask/base-controller';\nimport { EnsController } from '@metamask/ens-controller';\nimport { PhishingController } from '@metamask/phishing-controller';\nimport { AnnouncementController } from '@metamask/announcement-controller';\nimport {\n  NetworkController,\n  getDefaultNetworkControllerState,\n} from '@metamask/network-controller';\nimport { GasFeeController } from '@metamask/gas-fee-controller';\nimport {\n  PermissionController,\n  PermissionDoesNotExistError,\n  PermissionsRequestNotFoundError,\n  SubjectMetadataController,\n  SubjectType,\n} from '@metamask/permission-controller';\nimport SmartTransactionsController from '@metamask/smart-transactions-controller';\nimport {\n  METAMASK_DOMAIN,\n  SelectedNetworkController,\n  createSelectedNetworkMiddleware,\n} from '@metamask/selected-network-controller';\nimport { LoggingController, LogType } from '@metamask/logging-controller';\nimport { PermissionLogController } from '@metamask/permission-log-controller';\n\nimport { RateLimitController } from '@metamask/rate-limit-controller';\nimport { NotificationController } from '@metamask/notification-controller';\nimport {\n  CronjobController,\n  JsonSnapsRegistry,\n  SnapController,\n  IframeExecutionService,\n  SnapInterfaceController,\n  SnapInsightsController,\n  OffscreenExecutionService,\n} from '@metamask/snaps-controllers';\nimport {\n  createSnapsMethodMiddleware,\n  buildSnapEndowmentSpecifications,\n  buildSnapRestrictedMethodSpecifications,\n} from '@metamask/snaps-rpc-methods';\nimport {\n  ApprovalType,\n  ERC1155,\n  ERC20,\n  ERC721,\n  BlockExplorerUrl,\n} from '@metamask/controller-utils';\n\nimport { AccountsController } from '@metamask/accounts-controller';\n\nimport { SignatureController } from '@metamask/signature-controller';\nimport { PPOMController } from '@metamask/ppom-validator';\nimport { wordlist } from '@metamask/scure-bip39/dist/wordlists/english';\n\nimport {\n  NameController,\n  ENSNameProvider,\n  EtherscanNameProvider,\n  TokenNameProvider,\n  LensNameProvider,\n} from '@metamask/name-controller';\n\nimport {\n  QueuedRequestController,\n  createQueuedRequestMiddleware,\n} from '@metamask/queued-request-controller';\n\nimport { UserOperationController } from '@metamask/user-operation-controller';\n\nimport {\n  TransactionController,\n  TransactionStatus,\n  TransactionType,\n} from '@metamask/transaction-controller';\n\n///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\nimport {\n  getLocalizedSnapManifest,\n  stripSnapPrefix,\n} from '@metamask/snaps-utils';\n///: END:ONLY_INCLUDE_IF\n\nimport { Interface } from '@ethersproject/abi';\nimport { abiERC1155, abiERC721 } from '@metamask/metamask-eth-abis';\nimport { isEvmAccountType } from '@metamask/keyring-api';\nimport {\n  AuthenticationController,\n  UserStorageController,\n} from '@metamask/profile-sync-controller';\nimport {\n  NotificationServicesPushController,\n  NotificationServicesController,\n} from '@metamask/notification-services-controller';\nimport {\n  methodsRequiringNetworkSwitch,\n  methodsWithConfirmation,\n} from '../../shared/constants/methods-tags';\n\n\nimport { AssetType, TokenStandard } from '../../shared/constants/transaction';\nimport {\n  GAS_API_BASE_URL,\n  GAS_DEV_API_BASE_URL,\n  SWAPS_CLIENT_ID,\n} from '../../shared/constants/swaps';\nimport {\n  CHAIN_IDS,\n  NETWORK_TYPES,\n  NetworkStatus,\n  MAINNET_DISPLAY_NAME,\n} from '../../shared/constants/network';\nimport { getAllowedSmartTransactionsChainIds } from '../../shared/constants/smartTransactions';\n\nimport {\n  HardwareDeviceNames,\n  LedgerTransportTypes,\n} from '../../shared/constants/hardware-wallets';\nimport { KeyringType } from '../../shared/constants/keyring';\nimport {\n  CaveatTypes,\n  RestrictedMethods,\n  EndowmentPermissions,\n  ExcludedSnapPermissions,\n  ExcludedSnapEndowments,\n} from '../../shared/constants/permissions';\nimport { UI_NOTIFICATIONS } from '../../shared/notifications';\nimport { MILLISECOND, SECOND } from '../../shared/constants/time';\nimport {\n  ORIGIN_METAMASK,\n  POLLING_TOKEN_ENVIRONMENT_TYPES,\n} from '../../shared/constants/app';\nimport {\n  MetaMetricsEventCategory,\n  MetaMetricsEventName,\n  MetaMetricsUserTrait,\n} from '../../shared/constants/metametrics';\nimport { LOG_EVENT } from '../../shared/constants/logs';\n\nimport {\n  getTokenIdParam,\n  fetchTokenBalance,\n  fetchERC1155Balance,\n} from '../../shared/lib/token-util';\nimport { isEqualCaseInsensitive } from '../../shared/modules/string-utils';\nimport { parseStandardTokenTransactionData } from '../../shared/modules/transaction.utils';\nimport { STATIC_MAINNET_TOKEN_LIST } from '../../shared/constants/tokens';\nimport { getTokenValueParam } from '../../shared/lib/metamask-controller-utils';\nimport { isManifestV3 } from '../../shared/modules/mv3.utils';\nimport { convertNetworkId } from '../../shared/modules/network.utils';\nimport {\n  getIsSmartTransaction,\n  isHardwareWallet,\n  getFeatureFlagsByChainId,\n  getSmartTransactionsOptInStatus,\n  getCurrentChainSupportsSmartTransactions,\n  getHardwareWalletType,\n} from '../../shared/modules/selectors';\nimport { createCaipStream } from '../../shared/modules/caip-stream';\nimport { BaseUrl } from '../../shared/constants/urls';\nimport {\n  TOKEN_TRANSFER_LOG_TOPIC_HASH,\n  TRANSFER_SINFLE_LOG_TOPIC_HASH,\n} from '../../shared/lib/transactions-controller-utils';\nimport { getCurrentChainId } from '../../ui/selectors';\nimport { getProviderConfig } from '../../ui/ducks/metamask/metamask';\nimport { endTrace, trace } from '../../shared/lib/trace';\nimport { BalancesController as MultichainBalancesController } from './lib/accounts/BalancesController';\nimport {\n  handleTransactionAdded,\n  handleTransactionApproved,\n  handleTransactionFailed,\n  handleTransactionConfirmed,\n  handleTransactionDropped,\n  handleTransactionRejected,\n  handleTransactionSubmitted,\n  handlePostTransactionBalanceUpdate,\n  createTransactionEventFragmentWithTxId,\n} from './lib/transaction/metrics';\nimport { submitSmartTransactionHook } from './lib/transaction/smart-transactions';\n///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\nimport { keyringSnapPermissionsBuilder } from './lib/snap-keyring/keyring-snaps-permissions';\n///: END:ONLY_INCLUDE_IF\n\nimport { SnapsNameProvider } from './lib/SnapsNameProvider';\nimport { AddressBookPetnamesBridge } from './lib/AddressBookPetnamesBridge';\nimport { AccountIdentitiesPetnamesBridge } from './lib/AccountIdentitiesPetnamesBridge';\nimport { createPPOMMiddleware } from './lib/ppom/ppom-middleware';\nimport * as PPOMModule from './lib/ppom/ppom';\nimport {\n  onMessageReceived,\n  checkForMultipleVersionsRunning,\n} from './detect-multiple-instances';\nimport ComposableObservableStore from './lib/ComposableObservableStore';\nimport AccountTracker from './lib/account-tracker';\nimport createDupeReqFilterStream from './lib/createDupeReqFilterStream';\nimport createLoggerMiddleware from './lib/createLoggerMiddleware';\nimport {\n  createLegacyMethodMiddleware,\n  createMethodMiddleware,\n  createUnsupportedMethodMiddleware,\n} from './lib/rpc-method-middleware';\nimport createOriginMiddleware from './lib/createOriginMiddleware';\nimport createTabIdMiddleware from './lib/createTabIdMiddleware';\nimport { NetworkOrderController } from './controllers/network-order';\nimport { AccountOrderController } from './controllers/account-order';\nimport createOnboardingMiddleware from './lib/createOnboardingMiddleware';\nimport { isStreamWritable, setupMultiplex } from './lib/stream-utils';\nimport PreferencesController from './controllers/preferences-controller';\nimport AppStateController from './controllers/app-state';\nimport AlertController from './controllers/alert';\nimport OnboardingController from './controllers/onboarding';\nimport Backup from './lib/backup';\nimport DecryptMessageController from './controllers/decrypt-message';\nimport SwapsController from './controllers/swaps';\nimport MetaMetricsController from './controllers/metametrics';\nimport { segment } from './lib/segment';\nimport createMetaRPCHandler from './lib/createMetaRPCHandler';\nimport {\n  addHexPrefix,\n  getMethodDataName,\n  previousValueComparator,\n} from './lib/util';\nimport createMetamaskMiddleware from './lib/createMetamaskMiddleware';\nimport { hardwareKeyringBuilderFactory } from './lib/hardware-keyring-builder-factory';\nimport EncryptionPublicKeyController from './controllers/encryption-public-key';\nimport AppMetadataController from './controllers/app-metadata';\n\nimport {\n  CaveatFactories,\n  CaveatMutatorFactories,\n  getCaveatSpecifications,\n  getChangedAccounts,\n  getPermissionBackgroundApiMethods,\n  getPermissionSpecifications,\n  getPermittedAccountsByOrigin,\n  NOTIFICATION_NAMES,\n  PermissionNames,\n  unrestrictedMethods,\n} from './controllers/permissions';\nimport { MetaMetricsDataDeletionController } from './controllers/metametrics-data-deletion/metametrics-data-deletion';\nimport { DataDeletionService } from './services/data-deletion-service';\nimport createRPCMethodTrackingMiddleware from './lib/createRPCMethodTrackingMiddleware';\nimport { IndexedDBPPOMStorage } from './lib/ppom/indexed-db-backend';\nimport { updateCurrentLocale } from './translate';\nimport { TrezorOffscreenBridge } from './lib/offscreen-bridge/trezor-offscreen-bridge';\nimport { LedgerOffscreenBridge } from './lib/offscreen-bridge/ledger-offscreen-bridge';\n///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\nimport { snapKeyringBuilder, getAccountsBySnapId } from './lib/snap-keyring';\n///: END:ONLY_INCLUDE_IF\nimport { encryptorFactory } from './lib/encryptor-factory';\nimport { addDappTransaction, addTransaction } from './lib/transaction/util';\nimport { LatticeKeyringOffscreen } from './lib/offscreen-bridge/lattice-offscreen-keyring';\nimport PREINSTALLED_SNAPS from './snaps/preinstalled-snaps';\nimport { WeakRefObjectMap } from './lib/WeakRefObjectMap';\nimport { METAMASK_COOKIE_HANDLER } from './constants/stream';\n\n// Notification controllers\nimport { createTxVerificationMiddleware } from './lib/tx-verification/tx-verification-middleware';\nimport { updateSecurityAlertResponse } from './lib/ppom/ppom-util';\nimport createEvmMethodsToNonEvmAccountReqFilterMiddleware from './lib/createEvmMethodsToNonEvmAccountReqFilterMiddleware';\nimport { isEthAddress } from './lib/multichain/address';\nimport { decodeTransactionData } from './lib/transaction/decode/util';\nimport { BridgeBackgroundAction } from './controllers/bridge/types';\nimport BridgeController from './controllers/bridge/bridge-controller';\nimport { BRIDGE_CONTROLLER_NAME } from './controllers/bridge/constants';\nimport {\n  onPushNotificationClicked,\n  onPushNotificationReceived,\n} from './controllers/push-notifications';\nimport createTracingMiddleware from './lib/createTracingMiddleware';\nimport { PatchStore } from './lib/PatchStore';\nimport { sanitizeUIState } from './lib/state-utils';\n\nexport const METAMASK_CONTROLLER_EVENTS = {\n  // Fired after state changes that impact the extension badge (unapproved msg count)\n  // The process of updating the badge happens in app/scripts/background.js.\n  UPDATE_BADGE: 'updateBadge',\n  // TODO: Add this and similar enums to the `controllers` repo and export them\n  APPROVAL_STATE_CHANGE: 'ApprovalController:stateChange',\n  QUEUED_REQUEST_STATE_CHANGE: 'QueuedRequestController:stateChange',\n  METAMASK_NOTIFICATIONS_LIST_UPDATED:\n    'NotificationServicesController:notificationsListUpdated',\n  METAMASK_NOTIFICATIONS_MARK_AS_READ:\n    'NotificationServicesController:markNotificationsAsRead',\n  NOTIFICATIONS_STATE_CHANGE: 'NotificationController:stateChange',\n};\n\n// stream channels\nconst PHISHING_SAFELIST = 'metamask-phishing-safelist';\n\nexport default class MetamaskController extends EventEmitter {\n  /**\n   * @param {object} opts\n   */\n  constructor(opts) {\n    super();\n\n    const { isFirstMetaMaskControllerSetup } = opts;\n\n    this.defaultMaxListeners = 20;\n\n    this.sendUpdate = debounce(\n      this.privateSendUpdate.bind(this),\n      MILLISECOND * 200,\n    );\n    this.opts = opts;\n    this.extension = opts.browser;\n    this.platform = opts.platform;\n    this.notificationManager = opts.notificationManager;\n    const initState = opts.initState || {};\n    const version = process.env.METAMASK_VERSION;\n    this.recordFirstTimeInfo(initState);\n    this.featureFlags = opts.featureFlags;\n\n    // this keeps track of how many \"controllerStream\" connections are open\n    // the only thing that uses controller connections are open metamask UI instances\n    this.activeControllerConnections = 0;\n\n    this.offscreenPromise = opts.offscreenPromise ?? Promise.resolve();\n\n    this.getRequestAccountTabIds = opts.getRequestAccountTabIds;\n    this.getOpenMetamaskTabsIds = opts.getOpenMetamaskTabsIds;\n\n    this.controllerMessenger = new ControllerMessenger();\n\n    this.loggingController = new LoggingController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'LoggingController',\n        allowedActions: [],\n        allowedEvents: [],\n      }),\n      state: initState.LoggingController,\n    });\n\n    // instance of a class that wraps the extension's storage local API.\n    this.localStoreApiWrapper = opts.localStore;\n\n    this.currentMigrationVersion = opts.currentMigrationVersion;\n\n    // observable state store\n    this.store = new ComposableObservableStore({\n      state: initState,\n      controllerMessenger: this.controllerMessenger,\n      persist: true,\n    });\n\n    // external connections by origin\n    // Do not modify directly. Use the associated methods.\n    this.connections = {};\n\n    // lock to ensure only one vault created at once\n    this.createVaultMutex = new Mutex();\n\n    this.extension.runtime.onInstalled.addListener((details) => {\n      if (details.reason === 'update') {\n        if (version === '8.1.0') {\n          this.platform.openExtensionInBrowser();\n        }\n        this.loggingController.add({\n          type: LogType.GenericLog,\n          data: {\n            event: LOG_EVENT.VERSION_UPDATE,\n            previousVersion: details.previousVersion,\n            version,\n          },\n        });\n      }\n    });\n\n    this.appMetadataController = new AppMetadataController({\n      state: initState.AppMetadataController,\n      currentMigrationVersion: this.currentMigrationVersion,\n      currentAppVersion: version,\n    });\n\n    // next, we will initialize the controllers\n    // controller initialization order matters\n    const clearPendingConfirmations = () => {\n      this.encryptionPublicKeyController.clearUnapproved();\n      this.decryptMessageController.clearUnapproved();\n      this.signatureController.clearUnapproved();\n      this.approvalController.clear(ethErrors.provider.userRejectedRequest());\n    };\n\n    this.queuedRequestController = new QueuedRequestController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'QueuedRequestController',\n        allowedActions: [\n          'NetworkController:getState',\n          'NetworkController:setActiveNetwork',\n          'SelectedNetworkController:getNetworkClientIdForDomain',\n        ],\n        allowedEvents: ['SelectedNetworkController:stateChange'],\n      }),\n      shouldRequestSwitchNetwork: ({ method }) =>\n        methodsRequiringNetworkSwitch.includes(method),\n      clearPendingConfirmations,\n      showApprovalRequest: opts.showUserConfirmation,\n    });\n\n    this.approvalController = new ApprovalController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'ApprovalController',\n      }),\n      showApprovalRequest: opts.showUserConfirmation,\n      typesExcludedFromRateLimiting: [\n        ApprovalType.PersonalSign,\n        ApprovalType.EthSignTypedData,\n        ApprovalType.Transaction,\n        ApprovalType.WatchAsset,\n        ApprovalType.EthGetEncryptionPublicKey,\n        ApprovalType.EthDecrypt,\n      ],\n    });\n\n\n    const networkControllerMessenger = this.controllerMessenger.getRestricted({\n      name: 'NetworkController',\n    });\n\n    let initialNetworkControllerState = initState.NetworkController;\n    if (!initialNetworkControllerState) {\n      initialNetworkControllerState = getDefaultNetworkControllerState();\n\n      const networks =\n        initialNetworkControllerState.networkConfigurationsByChainId;\n\n      // Note: Consider changing `getDefaultNetworkControllerState`\n      // on the controller side to include some of these tweaks.\n      networks[CHAIN_IDS.MAINNET].name = MAINNET_DISPLAY_NAME;\n      delete networks[CHAIN_IDS.GOERLI];\n      delete networks[CHAIN_IDS.LINEA_GOERLI];\n\n      Object.values(networks).forEach((network) => {\n        const id = network.rpcEndpoints[0].networkClientId;\n        network.blockExplorerUrls = [BlockExplorerUrl[id]];\n        network.defaultBlockExplorerUrlIndex = 0;\n      });\n\n      let network;\n      if (process.env.IN_TEST) {\n        network = {\n          chainId: CHAIN_IDS.LOCALHOST,\n          name: 'Localhost 8545',\n          nativeCurrency: 'ETH',\n          blockExplorerUrls: [],\n          defaultRpcEndpointIndex: 0,\n          rpcEndpoints: [\n            {\n              networkClientId: 'networkConfigurationId',\n              url: 'http://localhost:8545',\n              type: 'custom',\n            },\n          ],\n        };\n        networks[CHAIN_IDS.LOCALHOST] = network;\n      } else if (\n        process.env.METAMASK_DEBUG ||\n        process.env.METAMASK_ENVIRONMENT === 'test'\n      ) {\n        network = networks[CHAIN_IDS.SEPOLIA];\n      } else {\n        network = networks[CHAIN_IDS.MAINNET];\n      }\n\n      initialNetworkControllerState.selectedNetworkClientId =\n        network.rpcEndpoints[network.defaultRpcEndpointIndex].networkClientId;\n    }\n\n    this.networkController = new NetworkController({\n      messenger: networkControllerMessenger,\n      state: initialNetworkControllerState,\n      infuraProjectId: opts.infuraProjectId,\n    });\n    this.networkController.initializeProvider();\n    this.provider =\n      this.networkController.getProviderAndBlockTracker().provider;\n    this.blockTracker =\n      this.networkController.getProviderAndBlockTracker().blockTracker;\n    this.deprecatedNetworkVersions = {};\n\n    const accountsControllerMessenger = this.controllerMessenger.getRestricted({\n      name: 'AccountsController',\n      allowedEvents: [\n        'SnapController:stateChange',\n        'KeyringController:accountRemoved',\n        'KeyringController:stateChange',\n      ],\n      allowedActions: [\n        'KeyringController:getAccounts',\n        'KeyringController:getKeyringsByType',\n        'KeyringController:getKeyringForAccount',\n      ],\n    });\n\n    this.accountsController = new AccountsController({\n      messenger: accountsControllerMessenger,\n      state: initState.AccountsController,\n    });\n\n    const preferencesMessenger = this.controllerMessenger.getRestricted({\n      name: 'PreferencesController',\n      allowedActions: [\n        'AccountsController:setSelectedAccount',\n        'AccountsController:getAccountByAddress',\n        'AccountsController:setAccountName',\n      ],\n      allowedEvents: ['AccountsController:stateChange'],\n    });\n\n    this.preferencesController = new PreferencesController({\n      initState: initState.PreferencesController,\n      initLangCode: opts.initLangCode,\n      messenger: preferencesMessenger,\n      provider: this.provider,\n      networkConfigurationsByChainId:\n        this.networkController.state.networkConfigurationsByChainId,\n    });\n\n    const tokenListMessenger = this.controllerMessenger.getRestricted({\n      name: 'TokenListController',\n      allowedActions: ['NetworkController:getNetworkClientById'],\n      allowedEvents: ['NetworkController:stateChange'],\n    });\n\n    this.tokenListController = new TokenListController({\n      chainId: getCurrentChainId({ metamask: this.networkController.state }),\n      preventPollingOnNetworkRestart: !this.#isTokenListPollingRequired(\n        this.preferencesController.store.getState(),\n      ),\n      messenger: tokenListMessenger,\n      state: initState.TokenListController,\n    });\n\n    const assetsContractControllerMessenger =\n      this.controllerMessenger.getRestricted({\n        name: 'AssetsContractController',\n        allowedActions: [\n          'NetworkController:getNetworkClientById',\n          'NetworkController:getNetworkConfigurationByNetworkClientId',\n          'NetworkController:getSelectedNetworkClient',\n          'NetworkController:getState',\n        ],\n        allowedEvents: [\n          'PreferencesController:stateChange',\n          'NetworkController:networkDidChange',\n        ],\n      });\n    this.assetsContractController = new AssetsContractController({\n      messenger: assetsContractControllerMessenger,\n      chainId: getCurrentChainId({ metamask: this.networkController.state }),\n    });\n\n    const tokensControllerMessenger = this.controllerMessenger.getRestricted({\n      name: 'TokensController',\n      allowedActions: [\n        'ApprovalController:addRequest',\n        'NetworkController:getNetworkClientById',\n        'AccountsController:getSelectedAccount',\n        'AccountsController:getAccount',\n      ],\n      allowedEvents: [\n        'NetworkController:networkDidChange',\n        'AccountsController:selectedEvmAccountChange',\n        'PreferencesController:stateChange',\n        'TokenListController:stateChange',\n      ],\n    });\n    this.tokensController = new TokensController({\n      state: initState.TokensController,\n      provider: this.provider,\n      messenger: tokensControllerMessenger,\n      chainId: getCurrentChainId({ metamask: this.networkController.state }),\n    });\n\n    const nftControllerMessenger = this.controllerMessenger.getRestricted({\n      name: 'NftController',\n      allowedEvents: [\n        'PreferencesController:stateChange',\n        'NetworkController:networkDidChange',\n        'AccountsController:selectedEvmAccountChange',\n      ],\n      allowedActions: [\n        `${this.approvalController.name}:addRequest`,\n        `${this.networkController.name}:getNetworkClientById`,\n        'AccountsController:getSelectedAccount',\n        'AccountsController:getAccount',\n        'AssetsContractController:getERC721AssetName',\n        'AssetsContractController:getERC721AssetSymbol',\n        'AssetsContractController:getERC721TokenURI',\n        'AssetsContractController:getERC721OwnerOf',\n        'AssetsContractController:getERC1155BalanceOf',\n        'AssetsContractController:getERC1155TokenURI',\n      ],\n    });\n    this.nftController = new NftController({\n      state: initState.NftController,\n      messenger: nftControllerMessenger,\n      chainId: getCurrentChainId({ metamask: this.networkController.state }),\n      onNftAdded: ({ address, symbol, tokenId, standard, source }) =>\n        this.metaMetricsController.trackEvent({\n          event: MetaMetricsEventName.NftAdded,\n          category: MetaMetricsEventCategory.Wallet,\n          sensitiveProperties: {\n            token_contract_address: address,\n            token_symbol: symbol,\n            token_id: tokenId,\n            token_standard: standard,\n            asset_type: AssetType.NFT,\n            source,\n          },\n        }),\n    });\n\n    this.nftController.setApiKey(process.env.OPENSEA_KEY);\n\n    const nftDetectionControllerMessenger =\n      this.controllerMessenger.getRestricted({\n        name: 'NftDetectionController',\n        allowedEvents: [\n          'NetworkController:stateChange',\n          'PreferencesController:stateChange',\n        ],\n        allowedActions: [\n          'ApprovalController:addRequest',\n          'NetworkController:getState',\n          'NetworkController:getNetworkClientById',\n          'AccountsController:getSelectedAccount',\n        ],\n      });\n\n    this.nftDetectionController = new NftDetectionController({\n      messenger: nftDetectionControllerMessenger,\n      chainId: getCurrentChainId({ metamask: this.networkController.state }),\n      getOpenSeaApiKey: () => this.nftController.openSeaApiKey,\n      getBalancesInSingleCall:\n        this.assetsContractController.getBalancesInSingleCall.bind(\n          this.assetsContractController,\n        ),\n      addNft: this.nftController.addNft.bind(this.nftController),\n      getNftState: () => this.nftController.state,\n      // added this to track previous value of useNftDetection, should be true on very first initializing of controller[]\n      disabled:\n        this.preferencesController.store.getState().useNftDetection ===\n        undefined\n          ? false // the detection is enabled by default\n          : !this.preferencesController.store.getState().useNftDetection,\n    });\n\n    this.metaMetricsController = new MetaMetricsController({\n      segment,\n      preferencesStore: this.preferencesController.store,\n      onNetworkDidChange: networkControllerMessenger.subscribe.bind(\n        networkControllerMessenger,\n        'NetworkController:networkDidChange',\n      ),\n      getNetworkIdentifier: () => {\n        const { type, rpcUrl } = getProviderConfig({\n          metamask: this.networkController.state,\n        });\n        return type === NETWORK_TYPES.RPC ? rpcUrl : type;\n      },\n      getCurrentChainId: () =>\n        getCurrentChainId({ metamask: this.networkController.state }),\n      version: process.env.METAMASK_VERSION,\n      environment: process.env.METAMASK_ENVIRONMENT,\n      extension: this.extension,\n      initState: initState.MetaMetricsController,\n      captureException,\n    });\n\n    this.on('update', (update) => {\n      this.metaMetricsController.handleMetaMaskStateUpdate(update);\n    });\n\n    const dataDeletionService = new DataDeletionService();\n    const metaMetricsDataDeletionMessenger =\n      this.controllerMessenger.getRestricted({\n        name: 'MetaMetricsDataDeletionController',\n      });\n    this.metaMetricsDataDeletionController =\n      new MetaMetricsDataDeletionController({\n        dataDeletionService,\n        messenger: metaMetricsDataDeletionMessenger,\n        state: initState.metaMetricsDataDeletionController,\n        getMetaMetricsId: () => this.metaMetricsController.state.metaMetricsId,\n      });\n\n    const gasFeeMessenger = this.controllerMessenger.getRestricted({\n      name: 'GasFeeController',\n      allowedActions: [\n        'NetworkController:getEIP1559Compatibility',\n        'NetworkController:getNetworkClientById',\n        'NetworkController:getState',\n      ],\n      allowedEvents: ['NetworkController:stateChange'],\n    });\n\n    const gasApiBaseUrl = process.env.SWAPS_USE_DEV_APIS\n      ? GAS_DEV_API_BASE_URL\n      : GAS_API_BASE_URL;\n\n    this.gasFeeController = new GasFeeController({\n      state: initState.GasFeeController,\n      interval: 10000,\n      messenger: gasFeeMessenger,\n      clientId: SWAPS_CLIENT_ID,\n      getProvider: () =>\n        this.networkController.getProviderAndBlockTracker().provider,\n      onNetworkDidChange: (eventHandler) => {\n        networkControllerMessenger.subscribe(\n          'NetworkController:networkDidChange',\n          () => eventHandler(this.networkController.state),\n        );\n      },\n      getCurrentNetworkEIP1559Compatibility:\n        this.networkController.getEIP1559Compatibility.bind(\n          this.networkController,\n        ),\n      getCurrentAccountEIP1559Compatibility:\n        this.getCurrentAccountEIP1559Compatibility.bind(this),\n      legacyAPIEndpoint: `${gasApiBaseUrl}/networks/<chain_id>/gasPrices`,\n      EIP1559APIEndpoint: `${gasApiBaseUrl}/networks/<chain_id>/suggestedGasFees`,\n      getCurrentNetworkLegacyGasAPICompatibility: () => {\n        const chainId = getCurrentChainId({\n          metamask: this.networkController.state,\n        });\n        return chainId === CHAIN_IDS.BSC;\n      },\n      getChainId: () =>\n        getCurrentChainId({ metamask: this.networkController.state }),\n    });\n\n    this.appStateController = new AppStateController({\n      addUnlockListener: this.on.bind(this, 'unlock'),\n      isUnlocked: this.isUnlocked.bind(this),\n      initState: initState.AppStateController,\n      onInactiveTimeout: () => this.setLocked(),\n      preferencesStore: this.preferencesController.store,\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'AppStateController',\n        allowedActions: [\n          `${this.approvalController.name}:addRequest`,\n          `${this.approvalController.name}:acceptRequest`,\n        ],\n        allowedEvents: [`KeyringController:qrKeyringStateChange`],\n      }),\n      extension: this.extension,\n    });\n\n    const currencyRateMessenger = this.controllerMessenger.getRestricted({\n      name: 'CurrencyRateController',\n      allowedActions: [`${this.networkController.name}:getNetworkClientById`],\n    });\n    this.currencyRateController = new CurrencyRateController({\n      includeUsdRate: true,\n      messenger: currencyRateMessenger,\n      state: initState.CurrencyController,\n    });\n    const initialFetchExchangeRate =\n      this.currencyRateController.fetchExchangeRate.bind(\n        this.currencyRateController,\n      );\n    this.currencyRateController.fetchExchangeRate = (...args) => {\n      if (this.preferencesController.store.getState().useCurrencyRateCheck) {\n        return initialFetchExchangeRate(...args);\n      }\n      return {\n        conversionRate: null,\n        usdConversionRate: null,\n      };\n    };\n\n    const phishingControllerMessenger = this.controllerMessenger.getRestricted({\n      name: 'PhishingController',\n    });\n\n    this.phishingController = new PhishingController({\n      messenger: phishingControllerMessenger,\n      state: initState.PhishingController,\n      hotlistRefreshInterval: process.env.IN_TEST ? 5 * SECOND : undefined,\n      stalelistRefreshInterval: process.env.IN_TEST ? 30 * SECOND : undefined,\n    });\n\n    this.ppomController = new PPOMController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'PPOMController',\n        allowedEvents: [\n          'NetworkController:stateChange',\n          'NetworkController:networkDidChange',\n        ],\n        allowedActions: ['NetworkController:getNetworkClientById'],\n      }),\n      storageBackend: new IndexedDBPPOMStorage('PPOMDB', 1),\n      provider: this.provider,\n      ppomProvider: {\n        PPOM: PPOMModule.PPOM,\n        ppomInit: () => PPOMModule.default(process.env.PPOM_URI),\n      },\n      state: initState.PPOMController,\n      chainId: getCurrentChainId({ metamask: this.networkController.state }),\n      securityAlertsEnabled:\n        this.preferencesController.store.getState().securityAlertsEnabled,\n      onPreferencesChange: this.preferencesController.store.subscribe.bind(\n        this.preferencesController.store,\n      ),\n      cdnBaseUrl: process.env.BLOCKAID_FILE_CDN,\n      blockaidPublicKey: process.env.BLOCKAID_PUBLIC_KEY,\n    });\n\n    const announcementMessenger = this.controllerMessenger.getRestricted({\n      name: 'AnnouncementController',\n    });\n\n    this.announcementController = new AnnouncementController({\n      messenger: announcementMessenger,\n      allAnnouncements: UI_NOTIFICATIONS,\n      state: initState.AnnouncementController,\n    });\n\n    const networkOrderMessenger = this.controllerMessenger.getRestricted({\n      name: 'NetworkOrderController',\n      allowedEvents: ['NetworkController:stateChange'],\n    });\n    this.networkOrderController = new NetworkOrderController({\n      messenger: networkOrderMessenger,\n      state: initState.NetworkOrderController,\n    });\n\n    const accountOrderMessenger = this.controllerMessenger.getRestricted({\n      name: 'AccountOrderController',\n    });\n    this.accountOrderController = new AccountOrderController({\n      messenger: accountOrderMessenger,\n      state: initState.AccountOrderController,\n    });\n\n    const multichainBalancesControllerMessenger =\n      this.controllerMessenger.getRestricted({\n        name: 'BalancesController',\n        allowedEvents: [\n          'AccountsController:accountAdded',\n          'AccountsController:accountRemoved',\n        ],\n        allowedActions: [\n          'AccountsController:listMultichainAccounts',\n          'SnapController:handleRequest',\n        ],\n      });\n\n    this.multichainBalancesController = new MultichainBalancesController({\n      messenger: multichainBalancesControllerMessenger,\n      state: initState.MultichainBalancesController,\n    });\n\n    const multichainRatesControllerMessenger =\n      this.controllerMessenger.getRestricted({\n        name: 'RatesController',\n      });\n    this.multichainRatesController = new RatesController({\n      state: initState.MultichainRatesController,\n      messenger: multichainRatesControllerMessenger,\n      includeUsdRate: true,\n      fetchMultiExchangeRate,\n    });\n\n    const tokenRatesMessenger = this.controllerMessenger.getRestricted({\n      name: 'TokenRatesController',\n      allowedActions: [\n        'TokensController:getState',\n        'NetworkController:getNetworkClientById',\n        'NetworkController:getState',\n        'AccountsController:getAccount',\n        'AccountsController:getSelectedAccount',\n      ],\n      allowedEvents: [\n        'NetworkController:stateChange',\n        'AccountsController:selectedEvmAccountChange',\n        'PreferencesController:stateChange',\n        'TokensController:stateChange',\n      ],\n    });\n\n    // token exchange rate tracker\n    this.tokenRatesController = new TokenRatesController({\n      state: initState.TokenRatesController,\n      messenger: tokenRatesMessenger,\n      tokenPricesService: new CodefiTokenPricesServiceV2(),\n    });\n\n    this.preferencesController.store.subscribe(\n      previousValueComparator((prevState, currState) => {\n        const { useCurrencyRateCheck: prevUseCurrencyRateCheck } = prevState;\n        const { useCurrencyRateCheck: currUseCurrencyRateCheck } = currState;\n        if (currUseCurrencyRateCheck && !prevUseCurrencyRateCheck) {\n          this.tokenRatesController.start();\n        } else if (!currUseCurrencyRateCheck && prevUseCurrencyRateCheck) {\n          this.tokenRatesController.stop();\n        }\n      }, this.preferencesController.store.getState()),\n    );\n\n    this.ensController = new EnsController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'EnsController',\n        allowedActions: ['NetworkController:getNetworkClientById'],\n        allowedEvents: [],\n      }),\n      provider: this.provider,\n      onNetworkDidChange: networkControllerMessenger.subscribe.bind(\n        networkControllerMessenger,\n        'NetworkController:networkDidChange',\n      ),\n    });\n\n    const onboardingControllerMessenger =\n      this.controllerMessenger.getRestricted({\n        name: 'OnboardingController',\n        allowedActions: [],\n        allowedEvents: [],\n      });\n    this.onboardingController = new OnboardingController({\n      messenger: onboardingControllerMessenger,\n      state: initState.OnboardingController,\n    });\n\n    let additionalKeyrings = [keyringBuilderFactory(QRHardwareKeyring)];\n\n    const keyringOverrides = this.opts.overrides?.keyrings;\n\n    if (isManifestV3 === false) {\n      const additionalKeyringTypes = [\n        keyringOverrides?.lattice || LatticeKeyring,\n        QRHardwareKeyring,\n      ];\n\n      const additionalBridgedKeyringTypes = [\n        {\n          keyring: keyringOverrides?.trezor || TrezorKeyring,\n          bridge: keyringOverrides?.trezorBridge || TrezorConnectBridge,\n        },\n        {\n          keyring: keyringOverrides?.ledger || LedgerKeyring,\n          bridge: keyringOverrides?.ledgerBridge || LedgerIframeBridge,\n        },\n      ];\n\n      additionalKeyrings = additionalKeyringTypes.map((keyringType) =>\n        keyringBuilderFactory(keyringType),\n      );\n\n      additionalBridgedKeyringTypes.forEach((keyringType) =>\n        additionalKeyrings.push(\n          hardwareKeyringBuilderFactory(\n            keyringType.keyring,\n            keyringType.bridge,\n          ),\n        ),\n      );\n    } else {\n      additionalKeyrings.push(\n        hardwareKeyringBuilderFactory(\n          TrezorKeyring,\n          keyringOverrides?.trezorBridge || TrezorOffscreenBridge,\n        ),\n        hardwareKeyringBuilderFactory(\n          LedgerKeyring,\n          keyringOverrides?.ledgerBridge || LedgerOffscreenBridge,\n        ),\n        keyringBuilderFactory(LatticeKeyringOffscreen),\n      );\n    }\n\n\n    ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n    const snapKeyringBuildMessenger = this.controllerMessenger.getRestricted({\n      name: 'SnapKeyringBuilder',\n      allowedActions: [\n        'ApprovalController:addRequest',\n        'ApprovalController:acceptRequest',\n        'ApprovalController:rejectRequest',\n        'ApprovalController:startFlow',\n        'ApprovalController:endFlow',\n        'ApprovalController:showSuccess',\n        'ApprovalController:showError',\n        'PhishingController:test',\n        'PhishingController:maybeUpdateState',\n        'KeyringController:getAccounts',\n        'AccountsController:setSelectedAccount',\n        'AccountsController:getAccountByAddress',\n        'AccountsController:setAccountName',\n      ],\n    });\n\n    const getSnapController = () => this.snapController;\n\n    // Necessary to persist the keyrings and update the accounts both within the keyring controller and accounts controller\n    const persistAndUpdateAccounts = async () => {\n      await this.keyringController.persistAllKeyrings();\n      await this.accountsController.updateAccounts();\n    };\n\n    const getSnapName = (id) => {\n      if (!id) {\n        return null;\n      }\n\n      const currentLocale = this.getLocale();\n      const { snaps } = this.snapController.state;\n      const snap = snaps[id];\n\n      if (!snap) {\n        return stripSnapPrefix(id);\n      }\n\n      if (snap.localizationFiles) {\n        const localizedManifest = getLocalizedSnapManifest(\n          snap.manifest,\n          currentLocale,\n          snap.localizationFiles,\n        );\n        return localizedManifest.proposedName;\n      }\n\n      return snap.manifest.proposedName;\n    };\n\n    const isSnapPreinstalled = (id) => {\n      return PREINSTALLED_SNAPS.some((snap) => snap.snapId === id);\n    };\n\n    additionalKeyrings.push(\n      snapKeyringBuilder(\n        snapKeyringBuildMessenger,\n        getSnapController,\n        persistAndUpdateAccounts,\n        (address) => this.removeAccount(address),\n        this.metaMetricsController.trackEvent.bind(this.metaMetricsController),\n        getSnapName,\n        isSnapPreinstalled,\n      ),\n    );\n\n    ///: END:ONLY_INCLUDE_IF\n\n    const keyringControllerMessenger = this.controllerMessenger.getRestricted({\n      name: 'KeyringController',\n    });\n\n    this.keyringController = new KeyringController({\n      cacheEncryptionKey: true,\n      keyringBuilders: additionalKeyrings,\n      state: initState.KeyringController,\n      encryptor: opts.encryptor || encryptorFactory(600_000),\n      messenger: keyringControllerMessenger,\n    });\n\n    this.controllerMessenger.subscribe('KeyringController:unlock', () =>\n      this._onUnlock(),\n    );\n    this.controllerMessenger.subscribe('KeyringController:lock', () =>\n      this._onLock(),\n    );\n\n    this.controllerMessenger.subscribe(\n      'KeyringController:stateChange',\n      (state) => {\n        this._onKeyringControllerUpdate(state);\n      },\n    );\n\n    this.permissionController = new PermissionController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'PermissionController',\n        allowedActions: [\n          `${this.approvalController.name}:addRequest`,\n          `${this.approvalController.name}:hasRequest`,\n          `${this.approvalController.name}:acceptRequest`,\n          `${this.approvalController.name}:rejectRequest`,\n          `SnapController:getPermitted`,\n          `SnapController:install`,\n          `SubjectMetadataController:getSubjectMetadata`,\n        ],\n      }),\n      state: initState.PermissionController,\n      caveatSpecifications: getCaveatSpecifications({\n        getInternalAccounts: this.accountsController.listAccounts.bind(\n          this.accountsController,\n        ),\n        findNetworkClientIdByChainId:\n          this.networkController.findNetworkClientIdByChainId.bind(\n            this.networkController,\n          ),\n      }),\n      permissionSpecifications: {\n        ...getPermissionSpecifications({\n          getInternalAccounts: this.accountsController.listAccounts.bind(\n            this.accountsController,\n          ),\n          getAllAccounts: this.keyringController.getAccounts.bind(\n            this.keyringController,\n          ),\n          captureKeyringTypesWithMissingIdentities: (\n            internalAccounts = [],\n            accounts = [],\n          ) => {\n            const accountsMissingIdentities = accounts.filter(\n              (address) =>\n                !internalAccounts.some(\n                  (account) =>\n                    account.address.toLowerCase() === address.toLowerCase(),\n                ),\n            );\n            const keyringTypesWithMissingIdentities =\n              accountsMissingIdentities.map((address) =>\n                this.keyringController.getAccountKeyringType(address),\n              );\n\n            const internalAccountCount = internalAccounts.length;\n\n            const accountTrackerCount = Object.keys(\n              this.accountTracker.store.getState().accounts || {},\n            ).length;\n\n            captureException(\n              new Error(\n                `Attempt to get permission specifications failed because their were ${accounts.length} accounts, but ${internalAccountCount} identities, and the ${keyringTypesWithMissingIdentities} keyrings included accounts with missing identities. Meanwhile, there are ${accountTrackerCount} accounts in the account tracker.`,\n              ),\n            );\n          },\n        }),\n        ...this.getSnapPermissionSpecifications(),\n      },\n      unrestrictedMethods,\n    });\n\n    this.selectedNetworkController = new SelectedNetworkController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'SelectedNetworkController',\n        allowedActions: [\n          'NetworkController:getNetworkClientById',\n          'NetworkController:getState',\n          'NetworkController:getSelectedNetworkClient',\n          'PermissionController:hasPermissions',\n          'PermissionController:getSubjectNames',\n        ],\n        allowedEvents: [\n          'NetworkController:stateChange',\n          'PermissionController:stateChange',\n        ],\n      }),\n      state: initState.SelectedNetworkController,\n      useRequestQueuePreference:\n        this.preferencesController.store.getState().useRequestQueue,\n      onPreferencesStateChange: (listener) =>\n        this.preferencesController.store.subscribe(listener),\n      domainProxyMap: new WeakRefObjectMap(),\n    });\n\n    this.permissionLogController = new PermissionLogController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'PermissionLogController',\n      }),\n      restrictedMethods: new Set(Object.keys(RestrictedMethods)),\n      state: initState.PermissionLogController,\n    });\n\n    this.subjectMetadataController = new SubjectMetadataController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'SubjectMetadataController',\n        allowedActions: [`${this.permissionController.name}:hasPermissions`],\n      }),\n      state: initState.SubjectMetadataController,\n      subjectCacheLimit: 100,\n    });\n\n    const shouldUseOffscreenExecutionService =\n      isManifestV3 &&\n      typeof chrome !== 'undefined' &&\n      // eslint-disable-next-line no-undef\n      typeof chrome.offscreen !== 'undefined';\n\n    const snapExecutionServiceArgs = {\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'ExecutionService',\n      }),\n      setupSnapProvider: this.setupSnapProvider.bind(this),\n    };\n\n    this.snapExecutionService =\n      shouldUseOffscreenExecutionService === false\n        ? new IframeExecutionService({\n            ...snapExecutionServiceArgs,\n            iframeUrl: new URL(process.env.IFRAME_EXECUTION_ENVIRONMENT_URL),\n          })\n        : new OffscreenExecutionService({\n            ...snapExecutionServiceArgs,\n            offscreenPromise: this.offscreenPromise,\n          });\n\n    const snapControllerMessenger = this.controllerMessenger.getRestricted({\n      name: 'SnapController',\n      allowedEvents: [\n        'ExecutionService:unhandledError',\n        'ExecutionService:outboundRequest',\n        'ExecutionService:outboundResponse',\n      ],\n      allowedActions: [\n        `${this.permissionController.name}:getEndowments`,\n        `${this.permissionController.name}:getPermissions`,\n        `${this.permissionController.name}:hasPermission`,\n        `${this.permissionController.name}:hasPermissions`,\n        `${this.permissionController.name}:requestPermissions`,\n        `${this.permissionController.name}:revokeAllPermissions`,\n        `${this.permissionController.name}:revokePermissions`,\n        `${this.permissionController.name}:revokePermissionForAllSubjects`,\n        `${this.permissionController.name}:getSubjectNames`,\n        `${this.permissionController.name}:updateCaveat`,\n        `${this.approvalController.name}:addRequest`,\n        `${this.approvalController.name}:updateRequestState`,\n        `${this.permissionController.name}:grantPermissions`,\n        `${this.subjectMetadataController.name}:getSubjectMetadata`,\n        `${this.subjectMetadataController.name}:addSubjectMetadata`,\n        'ExecutionService:executeSnap',\n        'ExecutionService:getRpcRequestHandler',\n        'ExecutionService:terminateSnap',\n        'ExecutionService:terminateAllSnaps',\n        'ExecutionService:handleRpcRequest',\n        'SnapsRegistry:get',\n        'SnapsRegistry:getMetadata',\n        'SnapsRegistry:update',\n        'SnapsRegistry:resolveVersion',\n        `SnapInterfaceController:createInterface`,\n        `SnapInterfaceController:getInterface`,\n      ],\n    });\n\n    const allowLocalSnaps = process.env.ALLOW_LOCAL_SNAPS;\n    const requireAllowlist = process.env.REQUIRE_SNAPS_ALLOWLIST;\n\n    this.snapController = new SnapController({\n      environmentEndowmentPermissions: Object.values(EndowmentPermissions),\n      excludedPermissions: {\n        ...ExcludedSnapPermissions,\n        ...ExcludedSnapEndowments,\n      },\n      closeAllConnections: this.removeAllConnections.bind(this),\n      state: initState.SnapController,\n      messenger: snapControllerMessenger,\n      featureFlags: {\n        dappsCanUpdateSnaps: true,\n        allowLocalSnaps,\n        requireAllowlist,\n      },\n      encryptor: encryptorFactory(600_000),\n      getMnemonic: this.getPrimaryKeyringMnemonic.bind(this),\n      preinstalledSnaps: PREINSTALLED_SNAPS,\n      getFeatureFlags: () => {\n        return {\n          disableSnaps:\n            this.preferencesController.store.getState().useExternalServices ===\n            false,\n        };\n      },\n    });\n\n    this.notificationController = new NotificationController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'NotificationController',\n      }),\n      state: initState.NotificationController,\n    });\n\n    this.rateLimitController = new RateLimitController({\n      state: initState.RateLimitController,\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'RateLimitController',\n      }),\n      implementations: {\n        showNativeNotification: {\n          method: (origin, message) => {\n            const subjectMetadataState = this.controllerMessenger.call(\n              'SubjectMetadataController:getState',\n            );\n\n            const originMetadata = subjectMetadataState.subjectMetadata[origin];\n\n            this.platform\n              ._showNotification(originMetadata?.name ?? origin, message)\n              .catch((error) => {\n                log.error('Failed to create notification', error);\n              });\n\n            return null;\n          },\n          // 2 calls per 5 minutes\n          rateLimitCount: 2,\n          rateLimitTimeout: 300000,\n        },\n        showInAppNotification: {\n          method: (origin, message) => {\n            this.controllerMessenger.call(\n              'NotificationController:show',\n              origin,\n              message,\n            );\n\n            return null;\n          },\n          // 5 calls per minute\n          rateLimitCount: 5,\n          rateLimitTimeout: 60000,\n        },\n      },\n    });\n    const cronjobControllerMessenger = this.controllerMessenger.getRestricted({\n      name: 'CronjobController',\n      allowedEvents: [\n        'SnapController:snapInstalled',\n        'SnapController:snapUpdated',\n        'SnapController:snapUninstalled',\n        'SnapController:snapEnabled',\n        'SnapController:snapDisabled',\n      ],\n      allowedActions: [\n        `${this.permissionController.name}:getPermissions`,\n        'SnapController:handleRequest',\n        'SnapController:getAll',\n      ],\n    });\n    this.cronjobController = new CronjobController({\n      state: initState.CronjobController,\n      messenger: cronjobControllerMessenger,\n    });\n\n    const snapsRegistryMessenger = this.controllerMessenger.getRestricted({\n      name: 'SnapsRegistry',\n      allowedEvents: [],\n      allowedActions: [],\n    });\n\n    this.snapsRegistry = new JsonSnapsRegistry({\n      state: initState.SnapsRegistry,\n      messenger: snapsRegistryMessenger,\n      refetchOnAllowlistMiss: requireAllowlist,\n      url: {\n        registry: 'https://acl.execution.metamask.io/latest/registry.json',\n        signature: 'https://acl.execution.metamask.io/latest/signature.json',\n      },\n      publicKey:\n        '0x025b65308f0f0fb8bc7f7ff87bfc296e0330eee5d3c1d1ee4a048b2fd6a86fa0a6',\n    });\n\n    const snapInterfaceControllerMessenger =\n      this.controllerMessenger.getRestricted({\n        name: 'SnapInterfaceController',\n        allowedActions: [\n          `${this.phishingController.name}:maybeUpdateState`,\n          `${this.phishingController.name}:testOrigin`,\n          `${this.approvalController.name}:hasRequest`,\n          `${this.approvalController.name}:acceptRequest`,\n        ],\n      });\n\n    this.snapInterfaceController = new SnapInterfaceController({\n      state: initState.SnapInterfaceController,\n      messenger: snapInterfaceControllerMessenger,\n    });\n\n    const snapInsightsControllerMessenger =\n      this.controllerMessenger.getRestricted({\n        name: 'SnapInsightsController',\n        allowedActions: [\n          `${this.snapController.name}:handleRequest`,\n          `${this.snapController.name}:getAll`,\n          `${this.permissionController.name}:getPermissions`,\n          `${this.snapInterfaceController.name}:deleteInterface`,\n        ],\n        allowedEvents: [\n          `TransactionController:unapprovedTransactionAdded`,\n          `TransactionController:transactionStatusUpdated`,\n          `SignatureController:stateChange`,\n        ],\n      });\n\n    this.snapInsightsController = new SnapInsightsController({\n      state: initState.SnapInsightsController,\n      messenger: snapInsightsControllerMessenger,\n    });\n\n    // Notification Controllers\n    this.authenticationController = new AuthenticationController.Controller({\n      state: initState.AuthenticationController,\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'AuthenticationController',\n        allowedActions: [\n          'KeyringController:getState',\n          'SnapController:handleRequest',\n        ],\n        allowedEvents: ['KeyringController:lock', 'KeyringController:unlock'],\n      }),\n      metametrics: {\n        getMetaMetricsId: () => this.metaMetricsController.getMetaMetricsId(),\n        agent: 'extension',\n      },\n    });\n\n    this.userStorageController = new UserStorageController.Controller({\n      getMetaMetricsState: () =>\n        this.metaMetricsController.state.participateInMetaMetrics ?? false,\n      state: initState.UserStorageController,\n      config: {\n        accountSyncing: {\n          onAccountAdded: (profileId) => {\n            this.metaMetricsController.trackEvent({\n              category: MetaMetricsEventCategory.ProfileSyncing,\n              event: MetaMetricsEventName.AccountsSyncAccountAdded,\n              properties: {\n                profile_id: profileId,\n              },\n            });\n          },\n          onAccountNameUpdated: (profileId) => {\n            this.metaMetricsController.trackEvent({\n              category: MetaMetricsEventCategory.ProfileSyncing,\n              event: MetaMetricsEventName.AccountsSyncAccountNameUpdated,\n              properties: {\n                profile_id: profileId,\n              },\n            });\n          },\n        },\n      },\n      env: {\n        isAccountSyncingEnabled: true,\n      },\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'UserStorageController',\n        allowedActions: [\n          'KeyringController:getState',\n          'KeyringController:addNewAccount',\n          'SnapController:handleRequest',\n          'AuthenticationController:getBearerToken',\n          'AuthenticationController:getSessionProfile',\n          'AuthenticationController:isSignedIn',\n          'AuthenticationController:performSignOut',\n          'AuthenticationController:performSignIn',\n          'NotificationServicesController:disableNotificationServices',\n          'NotificationServicesController:selectIsNotificationServicesEnabled',\n          'AccountsController:listAccounts',\n          'AccountsController:updateAccountMetadata',\n        ],\n        allowedEvents: [\n          'KeyringController:lock',\n          'KeyringController:unlock',\n          'AccountsController:accountAdded',\n          'AccountsController:accountRenamed',\n        ],\n      }),\n    });\n\n    const notificationServicesPushControllerMessenger =\n      this.controllerMessenger.getRestricted({\n        name: 'NotificationServicesPushController',\n        allowedActions: ['AuthenticationController:getBearerToken'],\n        allowedEvents: [],\n      });\n    this.notificationServicesPushController =\n      new NotificationServicesPushController.Controller({\n        messenger: notificationServicesPushControllerMessenger,\n        state: initState.NotificationServicesPushController,\n        env: {\n          apiKey: process.env.FIREBASE_API_KEY ?? '',\n          authDomain: process.env.FIREBASE_AUTH_DOMAIN ?? '',\n          storageBucket: process.env.FIREBASE_STORAGE_BUCKET ?? '',\n          projectId: process.env.FIREBASE_PROJECT_ID ?? '',\n          messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID ?? '',\n          appId: process.env.FIREBASE_APP_ID ?? '',\n          measurementId: process.env.FIREBASE_MEASUREMENT_ID ?? '',\n          vapidKey: process.env.VAPID_KEY ?? '',\n        },\n        config: {\n          isPushEnabled: isManifestV3,\n          platform: 'extension',\n          onPushNotificationReceived,\n          onPushNotificationClicked,\n        },\n      });\n    notificationServicesPushControllerMessenger.subscribe(\n      'NotificationServicesPushController:onNewNotifications',\n      (notification) => {\n        this.metaMetricsController.trackEvent({\n          category: MetaMetricsEventCategory.PushNotifications,\n          event: MetaMetricsEventName.PushNotificationReceived,\n          properties: {\n            notification_id: notification.id,\n            notification_type: notification.type,\n            chain_id: notification?.chain_id,\n          },\n        });\n      },\n    );\n    notificationServicesPushControllerMessenger.subscribe(\n      'NotificationServicesPushController:pushNotificationClicked',\n      (notification) => {\n        this.metaMetricsController.trackEvent({\n          category: MetaMetricsEventCategory.PushNotifications,\n          event: MetaMetricsEventName.PushNotificationClicked,\n          properties: {\n            notification_id: notification.id,\n            notification_type: notification.type,\n            chain_id: notification?.chain_id,\n          },\n        });\n      },\n    );\n\n    this.notificationServicesController =\n      new NotificationServicesController.Controller({\n        messenger: this.controllerMessenger.getRestricted({\n          name: 'NotificationServicesController',\n          allowedActions: [\n            'KeyringController:getAccounts',\n            'KeyringController:getState',\n            'AuthenticationController:getBearerToken',\n            'AuthenticationController:isSignedIn',\n            'UserStorageController:enableProfileSyncing',\n            'UserStorageController:getStorageKey',\n            'UserStorageController:performGetStorage',\n            'UserStorageController:performSetStorage',\n            'NotificationServicesPushController:enablePushNotifications',\n            'NotificationServicesPushController:disablePushNotifications',\n            'NotificationServicesPushController:subscribeToPushNotifications',\n            'NotificationServicesPushController:updateTriggerPushNotifications',\n          ],\n          allowedEvents: [\n            'KeyringController:stateChange',\n            'KeyringController:lock',\n            'KeyringController:unlock',\n            'NotificationServicesPushController:onNewNotifications',\n          ],\n        }),\n        state: initState.NotificationServicesController,\n        env: {\n          isPushIntegrated: isManifestV3,\n          featureAnnouncements: {\n            platform: 'extension',\n            spaceId: process.env.CONTENTFUL_ACCESS_SPACE_ID ?? '',\n            accessToken: process.env.CONTENTFUL_ACCESS_TOKEN ?? '',\n          },\n        },\n      });\n\n    // account tracker watches balances, nonces, and any code at their address\n    this.accountTracker = new AccountTracker({\n      provider: this.provider,\n      blockTracker: this.blockTracker,\n      getCurrentChainId: () =>\n        getCurrentChainId({ metamask: this.networkController.state }),\n      getNetworkIdentifier: (providerConfig) => {\n        const { type, rpcUrl } =\n          providerConfig ??\n          getProviderConfig({\n            metamask: this.networkController.state,\n          });\n        return type === NETWORK_TYPES.RPC ? rpcUrl : type;\n      },\n      preferencesController: this.preferencesController,\n      onboardingController: this.onboardingController,\n      controllerMessenger: this.controllerMessenger.getRestricted({\n        name: 'AccountTracker',\n        allowedEvents: [\n          'AccountsController:selectedEvmAccountChange',\n          'OnboardingController:stateChange',\n        ],\n        allowedActions: ['AccountsController:getSelectedAccount'],\n      }),\n      initState: { accounts: {} },\n      onAccountRemoved: this.controllerMessenger.subscribe.bind(\n        this.controllerMessenger,\n        'KeyringController:accountRemoved',\n      ),\n    });\n\n    // start and stop polling for balances based on activeControllerConnections\n    this.on('controllerConnectionChanged', (activeControllerConnections) => {\n      const { completedOnboarding } = this.onboardingController.state;\n      if (activeControllerConnections > 0 && completedOnboarding) {\n        this.triggerNetworkrequests();\n      } else {\n        this.stopNetworkRequests();\n      }\n    });\n\n    this.controllerMessenger.subscribe(\n      `${this.onboardingController.name}:stateChange`,\n      previousValueComparator(async (prevState, currState) => {\n        const { completedOnboarding: prevCompletedOnboarding } = prevState;\n        const { completedOnboarding: currCompletedOnboarding } = currState;\n        if (!prevCompletedOnboarding && currCompletedOnboarding) {\n          const { address } = this.accountsController.getSelectedAccount();\n\n          this._addAccountsWithBalance();\n\n          this.postOnboardingInitialization();\n          this.triggerNetworkrequests();\n          // execute once the token detection on the post-onboarding\n          await this.tokenDetectionController.detectTokens({\n            selectedAddress: address,\n          });\n        }\n      }, this.onboardingController.state),\n    );\n\n    const tokenDetectionControllerMessenger =\n      this.controllerMessenger.getRestricted({\n        name: 'TokenDetectionController',\n        allowedActions: [\n          'AccountsController:getAccount',\n          'AccountsController:getSelectedAccount',\n          'KeyringController:getState',\n          'NetworkController:getNetworkClientById',\n          'NetworkController:getNetworkConfigurationByNetworkClientId',\n          'NetworkController:getState',\n          'PreferencesController:getState',\n          'TokenListController:getState',\n          'TokensController:getState',\n          'TokensController:addDetectedTokens',\n        ],\n        allowedEvents: [\n          'AccountsController:selectedEvmAccountChange',\n          'KeyringController:lock',\n          'KeyringController:unlock',\n          'NetworkController:networkDidChange',\n          'PreferencesController:stateChange',\n          'TokenListController:stateChange',\n        ],\n      });\n\n    this.tokenDetectionController = new TokenDetectionController({\n      messenger: tokenDetectionControllerMessenger,\n      getBalancesInSingleCall:\n        this.assetsContractController.getBalancesInSingleCall.bind(\n          this.assetsContractController,\n        ),\n      trackMetaMetricsEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n    });\n\n    this.addressBookController = new AddressBookController(\n      undefined,\n      initState.AddressBookController,\n    );\n\n    this.alertController = new AlertController({\n      initState: initState.AlertController,\n      preferencesStore: this.preferencesController.store,\n      controllerMessenger: this.controllerMessenger.getRestricted({\n        name: 'AlertController',\n        allowedEvents: ['AccountsController:selectedAccountChange'],\n        allowedActions: ['AccountsController:getSelectedAccount'],\n      }),\n    });\n\n\n    this.backup = new Backup({\n      preferencesController: this.preferencesController,\n      addressBookController: this.addressBookController,\n      accountsController: this.accountsController,\n      networkController: this.networkController,\n      trackMetaMetricsEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n    });\n\n    // This gets used as a ...spread parameter in two places: new TransactionController() and createRPCMethodTrackingMiddleware()\n    this.snapAndHardwareMetricsParams = {\n      getSelectedAccount: this.accountsController.getSelectedAccount.bind(\n        this.accountsController,\n      ),\n      getAccountType: this.getAccountType.bind(this),\n      getDeviceModel: this.getDeviceModel.bind(this),\n      snapAndHardwareMessenger: this.controllerMessenger.getRestricted({\n        name: 'SnapAndHardwareMessenger',\n        allowedActions: [\n          'KeyringController:getKeyringForAccount',\n          'SnapController:get',\n          'AccountsController:getSelectedAccount',\n        ],\n      }),\n    };\n\n    const transactionControllerMessenger =\n      this.controllerMessenger.getRestricted({\n        name: 'TransactionController',\n        allowedActions: [\n          `${this.approvalController.name}:addRequest`,\n          'NetworkController:findNetworkClientIdByChainId',\n          'NetworkController:getNetworkClientById',\n          'AccountsController:getSelectedAccount',\n        ],\n        allowedEvents: [`NetworkController:stateChange`],\n      });\n    this.txController = new TransactionController({\n      blockTracker: this.blockTracker,\n      getCurrentNetworkEIP1559Compatibility:\n        this.networkController.getEIP1559Compatibility.bind(\n          this.networkController,\n        ),\n      getCurrentAccountEIP1559Compatibility:\n        this.getCurrentAccountEIP1559Compatibility.bind(this),\n      getExternalPendingTransactions:\n        this.getExternalPendingTransactions.bind(this),\n      getGasFeeEstimates: this.gasFeeController.fetchGasFeeEstimates.bind(\n        this.gasFeeController,\n      ),\n      getNetworkClientRegistry:\n        this.networkController.getNetworkClientRegistry.bind(\n          this.networkController,\n        ),\n      getNetworkState: () => this.networkController.state,\n      getPermittedAccounts: this.getPermittedAccounts.bind(this),\n      getSavedGasFees: () =>\n        this.preferencesController.store.getState().advancedGasFee[\n          getCurrentChainId({ metamask: this.networkController.state })\n        ],\n      incomingTransactions: {\n        includeTokenTransfers: false,\n        isEnabled: () =>\n          Boolean(\n            this.preferencesController.store.getState()\n              .incomingTransactionsPreferences?.[\n              getCurrentChainId({ metamask: this.networkController.state })\n            ] && this.onboardingController.state.completedOnboarding,\n          ),\n        queryEntireHistory: false,\n        updateTransactions: false,\n      },\n      isMultichainEnabled: process.env.TRANSACTION_MULTICHAIN,\n      isSimulationEnabled: () =>\n        this.preferencesController.store.getState().useTransactionSimulations,\n      messenger: transactionControllerMessenger,\n      onNetworkStateChange: (listener) => {\n        networkControllerMessenger.subscribe(\n          'NetworkController:networkDidChange',\n          () => listener(),\n        );\n      },\n      pendingTransactions: {\n        isResubmitEnabled: () => {\n          const state = this._getMetaMaskState();\n          return !(\n            getSmartTransactionsOptInStatus(state) &&\n            getCurrentChainSupportsSmartTransactions(state)\n          );\n        },\n      },\n      provider: this.provider,\n      testGasFeeFlows: process.env.TEST_GAS_FEE_FLOWS,\n      trace,\n      hooks: {\n        publish: this._publishSmartTransactionHook.bind(this),\n      },\n      sign: (...args) => this.keyringController.signTransaction(...args),\n      state: initState.TransactionController,\n    });\n\n    this._addTransactionControllerListeners();\n\n    this.decryptMessageController = new DecryptMessageController({\n      getState: this.getState.bind(this),\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'DecryptMessageController',\n        allowedActions: [\n          `${this.approvalController.name}:addRequest`,\n          `${this.approvalController.name}:acceptRequest`,\n          `${this.approvalController.name}:rejectRequest`,\n          `${this.keyringController.name}:decryptMessage`,\n        ],\n      }),\n      metricsEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n    });\n\n    this.encryptionPublicKeyController = new EncryptionPublicKeyController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'EncryptionPublicKeyController',\n        allowedActions: [\n          `${this.approvalController.name}:addRequest`,\n          `${this.approvalController.name}:acceptRequest`,\n          `${this.approvalController.name}:rejectRequest`,\n        ],\n      }),\n      getEncryptionPublicKey:\n        this.keyringController.getEncryptionPublicKey.bind(\n          this.keyringController,\n        ),\n      getAccountKeyringType: this.keyringController.getAccountKeyringType.bind(\n        this.keyringController,\n      ),\n      getState: this.getState.bind(this),\n      metricsEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n    });\n\n    this.signatureController = new SignatureController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'SignatureController',\n        allowedActions: [\n          `${this.approvalController.name}:addRequest`,\n          `${this.keyringController.name}:signMessage`,\n          `${this.keyringController.name}:signPersonalMessage`,\n          `${this.keyringController.name}:signTypedMessage`,\n          `${this.loggingController.name}:add`,\n        ],\n      }),\n      getAllState: this.getState.bind(this),\n      getCurrentChainId: () =>\n        getCurrentChainId({ metamask: this.networkController.state }),\n    });\n\n    this.signatureController.hub.on(\n      'cancelWithReason',\n      ({ message, reason }) => {\n        this.metaMetricsController.trackEvent({\n          event: reason,\n          category: MetaMetricsEventCategory.Transactions,\n          properties: {\n            action: 'Sign Request',\n            type: message.type,\n          },\n        });\n      },\n    );\n\n\n    const swapsControllerMessenger = this.controllerMessenger.getRestricted({\n      name: 'SwapsController',\n      // TODO: allow these internal calls once GasFeeController and TransactionController\n      // export these action types and register its action handlers\n      // allowedActions: [\n      //   'GasFeeController:getEIP1559GasFeeEstimates',\n      //   'TransactionController:getLayer1GasFee',\n      // ],\n      allowedActions: [\n        'NetworkController:getState',\n        'NetworkController:getNetworkClientById',\n        'TokenRatesController:getState',\n      ],\n      allowedEvents: [],\n    });\n\n    this.swapsController = new SwapsController(\n      {\n        messenger: swapsControllerMessenger,\n        provider: this.provider,\n        // TODO: Remove once TransactionController exports this action type\n        getBufferedGasLimit: async (txMeta, multiplier) => {\n          const { gas: gasLimit, simulationFails } =\n            await this.txController.estimateGasBuffered(\n              txMeta.txParams,\n              multiplier,\n            );\n\n          return { gasLimit, simulationFails };\n        },\n        // TODO: Remove once GasFeeController exports this action type\n        getEIP1559GasFeeEstimates:\n          this.gasFeeController.fetchGasFeeEstimates.bind(\n            this.gasFeeController,\n          ),\n        // TODO: Remove once TransactionController exports this action type\n        getLayer1GasFee: this.txController.getLayer1GasFee.bind(\n          this.txController,\n        ),\n        trackMetaMetricsEvent: this.metaMetricsController.trackEvent.bind(\n          this.metaMetricsController,\n        ),\n      },\n      initState.SwapsController,\n    );\n\n    const bridgeControllerMessenger = this.controllerMessenger.getRestricted({\n      name: BRIDGE_CONTROLLER_NAME,\n      allowedActions: [],\n      allowedEvents: [],\n    });\n    this.bridgeController = new BridgeController({\n      messenger: bridgeControllerMessenger,\n    });\n\n    const smartTransactionsControllerMessenger =\n      this.controllerMessenger.getRestricted({\n        name: 'SmartTransactionsController',\n        allowedActions: ['NetworkController:getNetworkClientById'],\n        allowedEvents: ['NetworkController:stateChange'],\n      });\n    this.smartTransactionsController = new SmartTransactionsController({\n      supportedChainIds: getAllowedSmartTransactionsChainIds(),\n      getNonceLock: this.txController.getNonceLock.bind(this.txController),\n      confirmExternalTransaction:\n        this.txController.confirmExternalTransaction.bind(this.txController),\n      trackMetaMetricsEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n      state: initState.SmartTransactionsController,\n      messenger: smartTransactionsControllerMessenger,\n      getTransactions: this.txController.getTransactions.bind(\n        this.txController,\n      ),\n      getMetaMetricsProps: async () => {\n        const selectedAddress =\n          this.accountsController.getSelectedAccount().address;\n        const accountHardwareType = await getHardwareWalletType(\n          this._getMetaMaskState(),\n        );\n        const accountType = await this.getAccountType(selectedAddress);\n        const deviceModel = await this.getDeviceModel(selectedAddress);\n        return {\n          accountHardwareType,\n          accountType,\n          deviceModel,\n        };\n      },\n    });\n\n    const isExternalNameSourcesEnabled = () =>\n      this.preferencesController.store.getState().useExternalNameSources;\n\n    this.nameController = new NameController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'NameController',\n        allowedActions: [],\n      }),\n      providers: [\n        new ENSNameProvider({\n          reverseLookup: this.ensController.reverseResolveAddress.bind(\n            this.ensController,\n          ),\n        }),\n        new EtherscanNameProvider({ isEnabled: isExternalNameSourcesEnabled }),\n        new TokenNameProvider({ isEnabled: isExternalNameSourcesEnabled }),\n        new LensNameProvider({ isEnabled: isExternalNameSourcesEnabled }),\n        new SnapsNameProvider({\n          messenger: this.controllerMessenger.getRestricted({\n            name: 'SnapsNameProvider',\n            allowedActions: [\n              'SnapController:getAll',\n              'SnapController:get',\n              'SnapController:handleRequest',\n              'PermissionController:getState',\n            ],\n          }),\n        }),\n      ],\n      state: initState.NameController,\n    });\n\n    const petnamesBridgeMessenger = this.controllerMessenger.getRestricted({\n      name: 'PetnamesBridge',\n      allowedEvents: [\n        'NameController:stateChange',\n        'AccountsController:stateChange',\n      ],\n      allowedActions: ['AccountsController:listAccounts'],\n    });\n\n    new AddressBookPetnamesBridge({\n      addressBookController: this.addressBookController,\n      nameController: this.nameController,\n      messenger: petnamesBridgeMessenger,\n    }).init();\n\n    new AccountIdentitiesPetnamesBridge({\n      nameController: this.nameController,\n      messenger: petnamesBridgeMessenger,\n    }).init();\n\n    this.userOperationController = new UserOperationController({\n      entrypoint: process.env.EIP_4337_ENTRYPOINT,\n      getGasFeeEstimates: this.gasFeeController.fetchGasFeeEstimates.bind(\n        this.gasFeeController,\n      ),\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'UserOperationController',\n        allowedActions: [\n          'ApprovalController:addRequest',\n          'NetworkController:getNetworkClientById',\n          'KeyringController:prepareUserOperation',\n          'KeyringController:patchUserOperation',\n          'KeyringController:signUserOperation',\n        ],\n      }),\n      state: initState.UserOperationController,\n    });\n\n    this.userOperationController.hub.on(\n      'user-operation-added',\n      this._onUserOperationAdded.bind(this),\n    );\n\n    this.userOperationController.hub.on(\n      'transaction-updated',\n      this._onUserOperationTransactionUpdated.bind(this),\n    );\n\n    // ensure accountTracker updates balances after network change\n    networkControllerMessenger.subscribe(\n      'NetworkController:networkDidChange',\n      () => {\n        this.accountTracker.updateAccounts();\n      },\n    );\n\n    // clear unapproved transactions and messages when the network will change\n    networkControllerMessenger.subscribe(\n      'NetworkController:networkWillChange',\n      clearPendingConfirmations.bind(this),\n    );\n\n    this.metamaskMiddleware = createMetamaskMiddleware({\n      static: {\n        eth_syncing: false,\n        web3_clientVersion: `MetaMask/v${version}`,\n      },\n      version,\n      // account mgmt\n      getAccounts: async (\n        { origin: innerOrigin },\n        { suppressUnauthorizedError = true } = {},\n      ) => {\n        if (innerOrigin === ORIGIN_METAMASK) {\n          const selectedAddress =\n            this.accountsController.getSelectedAccount().address;\n          return selectedAddress ? [selectedAddress] : [];\n        } else if (this.isUnlocked()) {\n          return await this.getPermittedAccounts(innerOrigin, {\n            suppressUnauthorizedError,\n          });\n        }\n        return []; // changing this is a breaking change\n      },\n      // tx signing\n      processTransaction: (transactionParams, dappRequest) =>\n        addDappTransaction(\n          this.getAddTransactionRequest({ transactionParams, dappRequest }),\n        ),\n      // msg signing\n      ///: BEGIN:ONLY_INCLUDE_IF(build-main,build-beta,build-flask)\n      processTypedMessage:\n        this.signatureController.newUnsignedTypedMessage.bind(\n          this.signatureController,\n        ),\n      processTypedMessageV3:\n        this.signatureController.newUnsignedTypedMessage.bind(\n          this.signatureController,\n        ),\n      processTypedMessageV4:\n        this.signatureController.newUnsignedTypedMessage.bind(\n          this.signatureController,\n        ),\n      processPersonalMessage:\n        this.signatureController.newUnsignedPersonalMessage.bind(\n          this.signatureController,\n        ),\n      ///: END:ONLY_INCLUDE_IF\n\n\n      processEncryptionPublicKey:\n        this.encryptionPublicKeyController.newRequestEncryptionPublicKey.bind(\n          this.encryptionPublicKeyController,\n        ),\n\n      processDecryptMessage:\n        this.decryptMessageController.newRequestDecryptMessage.bind(\n          this.decryptMessageController,\n        ),\n      getPendingNonce: this.getPendingNonce.bind(this),\n      getPendingTransactionByHash: (hash) =>\n        this.txController.state.transactions.find(\n          (meta) =>\n            meta.hash === hash && meta.status === TransactionStatus.submitted,\n        ),\n    });\n\n    // ensure isClientOpenAndUnlocked is updated when memState updates\n    this.on('update', (memState) => this._onStateUpdate(memState));\n\n    /**\n     * All controllers in Memstore but not in store. They are not persisted.\n     * On chrome profile re-start, they will be re-initialized.\n     */\n    const resetOnRestartStore = {\n      AccountTracker: this.accountTracker.store,\n      TokenRatesController: this.tokenRatesController,\n      DecryptMessageController: this.decryptMessageController,\n      EncryptionPublicKeyController: this.encryptionPublicKeyController,\n      SignatureController: this.signatureController,\n      SwapsController: this.swapsController,\n      BridgeController: this.bridgeController,\n      EnsController: this.ensController,\n      ApprovalController: this.approvalController,\n      PPOMController: this.ppomController,\n    };\n\n    this.store.updateStructure({\n      AccountsController: this.accountsController,\n      AppStateController: this.appStateController.store,\n      AppMetadataController: this.appMetadataController.store,\n      MultichainBalancesController: this.multichainBalancesController,\n      TransactionController: this.txController,\n      KeyringController: this.keyringController,\n      PreferencesController: this.preferencesController.store,\n      MetaMetricsController: this.metaMetricsController.store,\n      MetaMetricsDataDeletionController: this.metaMetricsDataDeletionController,\n      AddressBookController: this.addressBookController,\n      CurrencyController: this.currencyRateController,\n      NetworkController: this.networkController,\n      AlertController: this.alertController.store,\n      OnboardingController: this.onboardingController,\n      PermissionController: this.permissionController,\n      PermissionLogController: this.permissionLogController,\n      SubjectMetadataController: this.subjectMetadataController,\n      AnnouncementController: this.announcementController,\n      NetworkOrderController: this.networkOrderController,\n      AccountOrderController: this.accountOrderController,\n      GasFeeController: this.gasFeeController,\n      TokenListController: this.tokenListController,\n      TokensController: this.tokensController,\n      SmartTransactionsController: this.smartTransactionsController,\n      NftController: this.nftController,\n      PhishingController: this.phishingController,\n      SelectedNetworkController: this.selectedNetworkController,\n      LoggingController: this.loggingController,\n      MultichainRatesController: this.multichainRatesController,\n      SnapController: this.snapController,\n      CronjobController: this.cronjobController,\n      SnapsRegistry: this.snapsRegistry,\n      NotificationController: this.notificationController,\n      SnapInterfaceController: this.snapInterfaceController,\n      SnapInsightsController: this.snapInsightsController,\n      PPOMController: this.ppomController,\n      NameController: this.nameController,\n      UserOperationController: this.userOperationController,\n      // Notification Controllers\n      AuthenticationController: this.authenticationController,\n      UserStorageController: this.userStorageController,\n      NotificationServicesController: this.notificationServicesController,\n      NotificationServicesPushController:\n        this.notificationServicesPushController,\n      ...resetOnRestartStore,\n    });\n\n    this.memStore = new ComposableObservableStore({\n      config: {\n        AccountsController: this.accountsController,\n        AppStateController: this.appStateController.store,\n        AppMetadataController: this.appMetadataController.store,\n        MultichainBalancesController: this.multichainBalancesController,\n        NetworkController: this.networkController,\n        KeyringController: this.keyringController,\n        PreferencesController: this.preferencesController.store,\n        MetaMetricsController: this.metaMetricsController.store,\n        MetaMetricsDataDeletionController:\n          this.metaMetricsDataDeletionController,\n        AddressBookController: this.addressBookController,\n        CurrencyController: this.currencyRateController,\n        AlertController: this.alertController.store,\n        OnboardingController: this.onboardingController,\n        PermissionController: this.permissionController,\n        PermissionLogController: this.permissionLogController,\n        SubjectMetadataController: this.subjectMetadataController,\n        AnnouncementController: this.announcementController,\n        NetworkOrderController: this.networkOrderController,\n        AccountOrderController: this.accountOrderController,\n        GasFeeController: this.gasFeeController,\n        TokenListController: this.tokenListController,\n        TokensController: this.tokensController,\n        SmartTransactionsController: this.smartTransactionsController,\n        NftController: this.nftController,\n        SelectedNetworkController: this.selectedNetworkController,\n        LoggingController: this.loggingController,\n        TxController: this.txController,\n        MultichainRatesController: this.multichainRatesController,\n        SnapController: this.snapController,\n        CronjobController: this.cronjobController,\n        SnapsRegistry: this.snapsRegistry,\n        NotificationController: this.notificationController,\n        SnapInterfaceController: this.snapInterfaceController,\n        SnapInsightsController: this.snapInsightsController,\n        NameController: this.nameController,\n        UserOperationController: this.userOperationController,\n        // Notification Controllers\n        AuthenticationController: this.authenticationController,\n        UserStorageController: this.userStorageController,\n        NotificationServicesController: this.notificationServicesController,\n        QueuedRequestController: this.queuedRequestController,\n        NotificationServicesPushController:\n          this.notificationServicesPushController,\n        ...resetOnRestartStore,\n      },\n      controllerMessenger: this.controllerMessenger,\n    });\n\n    // if this is the first time, clear the state of by calling these methods\n    const resetMethods = [\n      this.accountTracker.resetState,\n      this.decryptMessageController.resetState.bind(\n        this.decryptMessageController,\n      ),\n      this.encryptionPublicKeyController.resetState.bind(\n        this.encryptionPublicKeyController,\n      ),\n      this.signatureController.resetState.bind(this.signatureController),\n      this.swapsController.resetState.bind(this.swapsController),\n      this.bridgeController.resetState.bind(this.bridgeController),\n      this.ensController.resetState.bind(this.ensController),\n      this.approvalController.clear.bind(this.approvalController),\n      // WE SHOULD ADD TokenListController.resetState here too. But it's not implemented yet.\n    ];\n\n    if (isManifestV3) {\n      if (isFirstMetaMaskControllerSetup === true) {\n        this.resetStates(resetMethods);\n        this.extension.storage.session.set({\n          isFirstMetaMaskControllerSetup: false,\n        });\n      }\n    } else {\n      // it's always the first time in MV2\n      this.resetStates(resetMethods);\n    }\n\n    // Automatic login via config password\n    const password = process.env.PASSWORD;\n    if (\n      !this.isUnlocked() &&\n      this.onboardingController.state.completedOnboarding &&\n      password &&\n      !process.env.IN_TEST\n    ) {\n      this._loginUser(password);\n    } else {\n      this._startUISync();\n    }\n\n    // Lazily update the store with the current extension environment\n    this.extension.runtime.getPlatformInfo().then(({ os }) => {\n      this.appStateController.setBrowserEnvironment(\n        os,\n        // This method is presently only supported by Firefox\n        this.extension.runtime.getBrowserInfo === undefined\n          ? 'chrome'\n          : 'firefox',\n      );\n    });\n\n    this.setupControllerEventSubscriptions();\n    this.setupMultichainDataAndSubscriptions();\n\n    // For more information about these legacy streams, see here:\n    // https://github.com/MetaMask/metamask-extension/issues/15491\n    // TODO:LegacyProvider: Delete\n    this.publicConfigStore = this.createPublicConfigStore();\n\n    // Multiple MetaMask instances launched warning\n    this.extension.runtime.onMessageExternal.addListener(onMessageReceived);\n    // Fire a ping message to check if other extensions are running\n    checkForMultipleVersionsRunning();\n\n    if (this.onboardingController.state.completedOnboarding) {\n      this.postOnboardingInitialization();\n    }\n  }\n\n  postOnboardingInitialization() {\n    const { usePhishDetect } = this.preferencesController.store.getState();\n\n    this.networkController.lookupNetwork();\n\n    if (usePhishDetect) {\n      this.phishingController.maybeUpdateState();\n    }\n\n    // post onboarding emit detectTokens event\n    const preferencesControllerState =\n      this.preferencesController.store.getState();\n    const { useTokenDetection, useNftDetection } =\n      preferencesControllerState ?? {};\n    this.metaMetricsController.trackEvent({\n      category: MetaMetricsEventCategory.Onboarding,\n      event: MetaMetricsUserTrait.TokenDetectionEnabled,\n      properties: {\n        [MetaMetricsUserTrait.TokenDetectionEnabled]: useTokenDetection,\n      },\n    });\n    this.metaMetricsController.trackEvent({\n      category: MetaMetricsEventCategory.Onboarding,\n      event: MetaMetricsUserTrait.NftAutodetectionEnabled,\n      properties: {\n        [MetaMetricsUserTrait.NftAutodetectionEnabled]: useNftDetection,\n      },\n    });\n  }\n\n  triggerNetworkrequests() {\n    this.accountTracker.start();\n    this.txController.startIncomingTransactionPolling();\n    this.tokenDetectionController.enable();\n\n    const preferencesControllerState =\n      this.preferencesController.store.getState();\n\n    const { useCurrencyRateCheck } = preferencesControllerState;\n\n    if (useCurrencyRateCheck) {\n      this.tokenRatesController.start();\n    }\n\n    if (this.#isTokenListPollingRequired(preferencesControllerState)) {\n      this.tokenListController.start();\n    }\n  }\n\n  stopNetworkRequests() {\n    this.accountTracker.stop();\n    this.txController.stopIncomingTransactionPolling();\n    this.tokenDetectionController.disable();\n\n    const preferencesControllerState =\n      this.preferencesController.store.getState();\n\n    const { useCurrencyRateCheck } = preferencesControllerState;\n\n    if (useCurrencyRateCheck) {\n      this.tokenRatesController.stop();\n    }\n\n    if (this.#isTokenListPollingRequired(preferencesControllerState)) {\n      this.tokenListController.stop();\n    }\n  }\n\n  resetStates(resetMethods) {\n    resetMethods.forEach((resetMethod) => {\n      try {\n        resetMethod();\n      } catch (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n  /**\n   * Initialize the snap keyring if it is not present.\n   *\n   * @returns {SnapKeyring}\n   */\n  async getSnapKeyring() {\n    let [snapKeyring] = this.keyringController.getKeyringsByType(\n      KeyringType.snap,\n    );\n    if (!snapKeyring) {\n      snapKeyring = await this.keyringController.addNewKeyring(\n        KeyringType.snap,\n      );\n    }\n    return snapKeyring;\n  }\n  ///: END:ONLY_INCLUDE_IF\n\n  trackInsightSnapView(snapId) {\n    this.metaMetricsController.trackEvent({\n      event: MetaMetricsEventName.InsightSnapViewed,\n      category: MetaMetricsEventCategory.Snaps,\n      properties: {\n        snap_id: snapId,\n      },\n    });\n  }\n\n  /**\n   * Get snap metadata from the current state without refreshing the registry database.\n   *\n   * @param {string} snapId - A snap id.\n   * @returns The available metadata for the snap, if any.\n   */\n  _getSnapMetadata(snapId) {\n    return this.snapsRegistry.state.database?.verifiedSnaps?.[snapId]?.metadata;\n  }\n\n  /**\n   * Tracks snaps export usage.\n   * Note: This function is throttled to 1 call per 60 seconds per snap id + handler combination.\n   *\n   * @param {string} snapId - The ID of the snap the handler is being triggered on.\n   * @param {string} handler - The handler to trigger on the snap for the request.\n   * @param {boolean} success - Whether the invocation was successful or not.\n   * @param {string} origin - The origin of the request.\n   */\n  _trackSnapExportUsage = wrap(\n    memoize(\n      () =>\n        throttle(\n          (snapId, handler, success, origin) =>\n            this.metaMetricsController.trackEvent({\n              event: MetaMetricsEventName.SnapExportUsed,\n              category: MetaMetricsEventCategory.Snaps,\n              properties: {\n                snap_id: snapId,\n                export: handler,\n                snap_category: this._getSnapMetadata(snapId)?.category,\n                success,\n                origin,\n              },\n            }),\n          SECOND * 60,\n        ),\n      (snapId, handler, _, origin) => `${snapId}${handler}${origin}`,\n    ),\n    (getFunc, ...args) => getFunc(...args)(...args),\n  );\n\n  /**\n   * Passes a JSON-RPC request object to the SnapController for execution.\n   *\n   * @param {object} args - A bag of options.\n   * @param {string} args.snapId - The ID of the recipient snap.\n   * @param {string} args.origin - The origin of the RPC request.\n   * @param {string} args.handler - The handler to trigger on the snap for the request.\n   * @param {object} args.request - The JSON-RPC request object.\n   * @returns The result of the JSON-RPC request.\n   */\n  async handleSnapRequest(args) {\n    try {\n      const response = await this.controllerMessenger.call(\n        'SnapController:handleRequest',\n        args,\n      );\n      this._trackSnapExportUsage(args.snapId, args.handler, true, args.origin);\n      return response;\n    } catch (error) {\n      this._trackSnapExportUsage(args.snapId, args.handler, false, args.origin);\n      throw error;\n    }\n  }\n\n  /**\n   * Gets the currently selected locale from the PreferencesController.\n   *\n   * @returns The currently selected locale.\n   */\n  getLocale() {\n    const { currentLocale } = this.preferencesController.store.getState();\n\n    return currentLocale;\n  }\n\n  /**\n   * Constructor helper for getting Snap permission specifications.\n   */\n  getSnapPermissionSpecifications() {\n    return {\n      ...buildSnapEndowmentSpecifications(Object.keys(ExcludedSnapEndowments)),\n      ...buildSnapRestrictedMethodSpecifications(\n        Object.keys(ExcludedSnapPermissions),\n        {\n          getPreferences: () => {\n            const locale = this.getLocale();\n            const currency = this.currencyRateController.state.currentCurrency;\n            return { locale, currency };\n          },\n          clearSnapState: this.controllerMessenger.call.bind(\n            this.controllerMessenger,\n            'SnapController:clearSnapState',\n          ),\n          getMnemonic: this.getPrimaryKeyringMnemonic.bind(this),\n          getUnlockPromise: this.appStateController.getUnlockPromise.bind(\n            this.appStateController,\n          ),\n          getSnap: this.controllerMessenger.call.bind(\n            this.controllerMessenger,\n            'SnapController:get',\n          ),\n          handleSnapRpcRequest: this.handleSnapRequest.bind(this),\n          getSnapState: this.controllerMessenger.call.bind(\n            this.controllerMessenger,\n            'SnapController:getSnapState',\n          ),\n          requestUserApproval:\n            this.approvalController.addAndShowApprovalRequest.bind(\n              this.approvalController,\n            ),\n          showNativeNotification: (origin, args) =>\n            this.controllerMessenger.call(\n              'RateLimitController:call',\n              origin,\n              'showNativeNotification',\n              origin,\n              args.message,\n            ),\n          showInAppNotification: (origin, args) =>\n            this.controllerMessenger.call(\n              'RateLimitController:call',\n              origin,\n              'showInAppNotification',\n              origin,\n              args.message,\n            ),\n          updateSnapState: this.controllerMessenger.call.bind(\n            this.controllerMessenger,\n            'SnapController:updateSnapState',\n          ),\n          maybeUpdatePhishingList: () => {\n            const { usePhishDetect } =\n              this.preferencesController.store.getState();\n\n            if (!usePhishDetect) {\n              return;\n            }\n\n            this.controllerMessenger.call(\n              'PhishingController:maybeUpdateState',\n            );\n          },\n          isOnPhishingList: (sender) => {\n            const { usePhishDetect } =\n              this.preferencesController.store.getState();\n\n            if (!usePhishDetect) {\n              return false;\n            }\n\n            return this.controllerMessenger.call(\n              'PhishingController:testOrigin',\n              sender.url,\n            ).result;\n          },\n          createInterface: this.controllerMessenger.call.bind(\n            this.controllerMessenger,\n            'SnapInterfaceController:createInterface',\n          ),\n          getInterface: this.controllerMessenger.call.bind(\n            this.controllerMessenger,\n            'SnapInterfaceController:getInterface',\n          ),\n          ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n          getSnapKeyring: this.getSnapKeyring.bind(this),\n          ///: END:ONLY_INCLUDE_IF\n        },\n      ),\n    };\n  }\n\n  /**\n   * Deletes the specified notifications from state.\n   *\n   * @param {string[]} ids - The notifications ids to delete.\n   */\n  dismissNotifications(ids) {\n    this.notificationController.dismiss(ids);\n  }\n\n  /**\n   * Updates the readDate attribute of the specified notifications.\n   *\n   * @param {string[]} ids - The notifications ids to mark as read.\n   */\n  markNotificationsAsRead(ids) {\n    this.notificationController.markRead(ids);\n  }\n\n  /**\n   * Sets up BaseController V2 event subscriptions. Currently, this includes\n   * the subscriptions necessary to notify permission subjects of account\n   * changes.\n   *\n   * Some of the subscriptions in this method are ControllerMessenger selector\n   * event subscriptions. See the relevant documentation for\n   * `@metamask/base-controller` for more information.\n   *\n   * Note that account-related notifications emitted when the extension\n   * becomes unlocked are handled in MetaMaskController._onUnlock.\n   */\n  setupControllerEventSubscriptions() {\n    let lastSelectedAddress;\n\n    this.preferencesController.store.subscribe(\n      previousValueComparator((prevState, currState) => {\n        this.#onPreferencesControllerStateChange(currState, prevState);\n      }, this.preferencesController.store.getState()),\n    );\n\n    this.controllerMessenger.subscribe(\n      `${this.accountsController.name}:selectedAccountChange`,\n      async (account) => {\n        if (account.address && account.address !== lastSelectedAddress) {\n          lastSelectedAddress = account.address;\n          await this._onAccountChange(account.address);\n        }\n      },\n    );\n\n    // This handles account changes every time relevant permission state\n    // changes, for any reason.\n    this.controllerMessenger.subscribe(\n      `${this.permissionController.name}:stateChange`,\n      async (currentValue, previousValue) => {\n        const changedAccounts = getChangedAccounts(currentValue, previousValue);\n\n        for (const [origin, accounts] of changedAccounts.entries()) {\n          this._notifyAccountsChange(origin, accounts);\n        }\n      },\n      getPermittedAccountsByOrigin,\n    );\n\n    this.controllerMessenger.subscribe(\n      'NetworkController:networkDidChange',\n      async () => {\n        await this.txController.updateIncomingTransactions();\n      },\n    );\n\n    this.controllerMessenger.subscribe(\n      `${this.snapController.name}:snapInstallStarted`,\n      (snapId, origin, isUpdate) => {\n        const snapCategory = this._getSnapMetadata(snapId)?.category;\n        this.metaMetricsController.trackEvent({\n          event: isUpdate\n            ? MetaMetricsEventName.SnapUpdateStarted\n            : MetaMetricsEventName.SnapInstallStarted,\n          category: MetaMetricsEventCategory.Snaps,\n          properties: {\n            snap_id: snapId,\n            origin,\n            snap_category: snapCategory,\n          },\n        });\n      },\n    );\n\n    this.controllerMessenger.subscribe(\n      `${this.snapController.name}:snapInstallFailed`,\n      (snapId, origin, isUpdate, error) => {\n        const isRejected = error.includes('User rejected the request.');\n        const failedEvent = isUpdate\n          ? MetaMetricsEventName.SnapUpdateFailed\n          : MetaMetricsEventName.SnapInstallFailed;\n        const rejectedEvent = isUpdate\n          ? MetaMetricsEventName.SnapUpdateRejected\n          : MetaMetricsEventName.SnapInstallRejected;\n\n        const snapCategory = this._getSnapMetadata(snapId)?.category;\n        this.metaMetricsController.trackEvent({\n          event: isRejected ? rejectedEvent : failedEvent,\n          category: MetaMetricsEventCategory.Snaps,\n          properties: {\n            snap_id: snapId,\n            origin,\n            snap_category: snapCategory,\n          },\n        });\n      },\n    );\n\n    this.controllerMessenger.subscribe(\n      `${this.snapController.name}:snapInstalled`,\n      (truncatedSnap, origin) => {\n        const snapId = truncatedSnap.id;\n        const snapCategory = this._getSnapMetadata(snapId)?.category;\n        this.metaMetricsController.trackEvent({\n          event: MetaMetricsEventName.SnapInstalled,\n          category: MetaMetricsEventCategory.Snaps,\n          properties: {\n            snap_id: snapId,\n            version: truncatedSnap.version,\n            origin,\n            snap_category: snapCategory,\n          },\n        });\n      },\n    );\n\n    this.controllerMessenger.subscribe(\n      `${this.snapController.name}:snapUpdated`,\n      (newSnap, oldVersion, origin) => {\n        const snapId = newSnap.id;\n        const snapCategory = this._getSnapMetadata(snapId)?.category;\n        this.metaMetricsController.trackEvent({\n          event: MetaMetricsEventName.SnapUpdated,\n          category: MetaMetricsEventCategory.Snaps,\n          properties: {\n            snap_id: snapId,\n            old_version: oldVersion,\n            new_version: newSnap.version,\n            origin,\n            snap_category: snapCategory,\n          },\n        });\n      },\n    );\n\n    this.controllerMessenger.subscribe(\n      `${this.snapController.name}:snapTerminated`,\n      (truncatedSnap) => {\n        const approvals = Object.values(\n          this.approvalController.state.pendingApprovals,\n        ).filter(\n          (approval) =>\n            approval.origin === truncatedSnap.id &&\n            approval.type.startsWith(RestrictedMethods.snap_dialog),\n        );\n        for (const approval of approvals) {\n          this.approvalController.reject(\n            approval.id,\n            new Error('Snap was terminated.'),\n          );\n        }\n      },\n    );\n\n    this.controllerMessenger.subscribe(\n      `${this.snapController.name}:snapUninstalled`,\n      (truncatedSnap) => {\n        const notificationIds = Object.values(\n          this.notificationController.state.notifications,\n        ).reduce((idList, notification) => {\n          if (notification.origin === truncatedSnap.id) {\n            idList.push(notification.id);\n          }\n          return idList;\n        }, []);\n\n        this.dismissNotifications(notificationIds);\n\n        const snapId = truncatedSnap.id;\n        const snapCategory = this._getSnapMetadata(snapId)?.category;\n        this.metaMetricsController.trackEvent({\n          event: MetaMetricsEventName.SnapUninstalled,\n          category: MetaMetricsEventCategory.Snaps,\n          properties: {\n            snap_id: snapId,\n            version: truncatedSnap.version,\n            snap_category: snapCategory,\n          },\n        });\n      },\n    );\n  }\n\n  /**\n   * Sets up multichain data and subscriptions.\n   * This method is called during the MetaMaskController constructor.\n   * It starts the MultichainRatesController if selected account is non-EVM\n   * and subscribes to account changes.\n   */\n  setupMultichainDataAndSubscriptions() {\n    if (\n      !isEvmAccountType(\n        this.accountsController.getSelectedMultichainAccount().type,\n      )\n    ) {\n      this.multichainRatesController.start();\n    }\n\n    this.controllerMessenger.subscribe(\n      'AccountsController:selectedAccountChange',\n      (selectedAccount) => {\n        if (isEvmAccountType(selectedAccount.type)) {\n          this.multichainRatesController.stop();\n          return;\n        }\n        this.multichainRatesController.start();\n      },\n    );\n    this.multichainBalancesController.start();\n    this.multichainBalancesController.updateBalances();\n  }\n\n  /**\n   * TODO:LegacyProvider: Delete\n   * Constructor helper: initialize a public config store.\n   * This store is used to make some config info available to Dapps synchronously.\n   */\n  createPublicConfigStore() {\n    // subset of state for metamask inpage provider\n    const publicConfigStore = new ObservableStore();\n\n    const selectPublicState = async ({ isUnlocked }) => {\n      const { chainId, networkVersion } = await this.getProviderNetworkState();\n\n      return {\n        isUnlocked,\n        chainId,\n        networkVersion: networkVersion ?? 'loading',\n      };\n    };\n\n    const updatePublicConfigStore = async (memState) => {\n      const networkStatus =\n        memState.networksMetadata[memState.selectedNetworkClientId]?.status;\n      if (networkStatus === NetworkStatus.Available) {\n        publicConfigStore.putState(await selectPublicState(memState));\n      }\n    };\n\n    // setup memStore subscription hooks\n    this.on('update', updatePublicConfigStore);\n    updatePublicConfigStore(this.getState());\n\n    return publicConfigStore;\n  }\n\n  /**\n   * Gets relevant state for the provider of an external origin.\n   *\n   * @param {string} origin - The origin to get the provider state for.\n   * @returns {Promise<{ isUnlocked: boolean, networkVersion: string, chainId: string, accounts: string[] }>} An object with relevant state properties.\n   */\n  async getProviderState(origin) {\n    const providerNetworkState = await this.getProviderNetworkState(\n      this.preferencesController.getUseRequestQueue() ? origin : undefined,\n    );\n\n    return {\n      isUnlocked: this.isUnlocked(),\n      accounts: await this.getPermittedAccounts(origin),\n      ...providerNetworkState,\n    };\n  }\n\n  /**\n   * Retrieves network state information relevant for external providers.\n   *\n   * @param {string} origin - The origin identifier for which network state is requested (default: 'metamask').\n   * @returns {object} An object containing important network state properties, including chainId and networkVersion.\n   */\n  async getProviderNetworkState(origin = METAMASK_DOMAIN) {\n    const networkClientId = this.controllerMessenger.call(\n      'SelectedNetworkController:getNetworkClientIdForDomain',\n      origin,\n    );\n\n    const networkClient = this.controllerMessenger.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n\n    const { chainId } = networkClient.configuration;\n\n    const { completedOnboarding } = this.onboardingController.state;\n\n    let networkVersion = this.deprecatedNetworkVersions[networkClientId];\n    if (!networkVersion && completedOnboarding) {\n      const ethQuery = new EthQuery(networkClient.provider);\n      networkVersion = await new Promise((resolve) => {\n        ethQuery.sendAsync({ method: 'net_version' }, (error, result) => {\n          if (error) {\n            console.error(error);\n            resolve(null);\n          } else {\n            resolve(convertNetworkId(result));\n          }\n        });\n      });\n      this.deprecatedNetworkVersions[networkClientId] = networkVersion;\n    }\n\n    return {\n      chainId,\n      networkVersion: networkVersion ?? 'loading',\n    };\n  }\n\n  //=============================================================================\n  // EXPOSED TO THE UI SUBSYSTEM\n  //=============================================================================\n\n  /**\n   * The metamask-state of the various controllers, made available to the UI\n   *\n   * @returns {object} status\n   */\n  getState() {\n    const { vault } = this.keyringController.state;\n    const isInitialized = Boolean(vault);\n    const flatState = this.memStore.getFlatState();\n\n    return {\n      isInitialized,\n      ...sanitizeUIState(flatState),\n    };\n  }\n\n  /**\n   * Returns an Object containing API Callback Functions.\n   * These functions are the interface for the UI.\n   * The API object can be transmitted over a stream via JSON-RPC.\n   *\n   * @returns {object} Object containing API functions.\n   */\n  getApi() {\n    const {\n      accountsController,\n      addressBookController,\n      alertController,\n      appStateController,\n      keyringController,\n      nftController,\n      nftDetectionController,\n      currencyRateController,\n      tokenDetectionController,\n      ensController,\n      gasFeeController,\n      metaMetricsController,\n      networkController,\n      announcementController,\n      onboardingController,\n      permissionController,\n      preferencesController,\n      tokensController,\n      smartTransactionsController,\n      txController,\n      assetsContractController,\n      backup,\n      approvalController,\n      phishingController,\n      // Notification Controllers\n      authenticationController,\n      userStorageController,\n      notificationServicesController,\n      notificationServicesPushController,\n    } = this;\n\n    return {\n      // etc\n      getState: this.getState.bind(this),\n      setCurrentCurrency: currencyRateController.setCurrentCurrency.bind(\n        currencyRateController,\n      ),\n      setUseBlockie: preferencesController.setUseBlockie.bind(\n        preferencesController,\n      ),\n      setUseNonceField: preferencesController.setUseNonceField.bind(\n        preferencesController,\n      ),\n      setUsePhishDetect: preferencesController.setUsePhishDetect.bind(\n        preferencesController,\n      ),\n      setUseMultiAccountBalanceChecker:\n        preferencesController.setUseMultiAccountBalanceChecker.bind(\n          preferencesController,\n        ),\n      setUseSafeChainsListValidation:\n        preferencesController.setUseSafeChainsListValidation.bind(\n          preferencesController,\n        ),\n      setUseTokenDetection: preferencesController.setUseTokenDetection.bind(\n        preferencesController,\n      ),\n      setUseNftDetection: preferencesController.setUseNftDetection.bind(\n        preferencesController,\n      ),\n      setUse4ByteResolution: preferencesController.setUse4ByteResolution.bind(\n        preferencesController,\n      ),\n      setUseCurrencyRateCheck:\n        preferencesController.setUseCurrencyRateCheck.bind(\n          preferencesController,\n        ),\n      setOpenSeaEnabled: preferencesController.setOpenSeaEnabled.bind(\n        preferencesController,\n      ),\n      getUseRequestQueue: this.preferencesController.getUseRequestQueue.bind(\n        this.preferencesController,\n      ),\n      getProviderConfig: () =>\n        getProviderConfig({\n          metamask: this.networkController.state,\n        }),\n      setSecurityAlertsEnabled:\n        preferencesController.setSecurityAlertsEnabled.bind(\n          preferencesController,\n        ),\n      ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n      setAddSnapAccountEnabled:\n        preferencesController.setAddSnapAccountEnabled.bind(\n          preferencesController,\n        ),\n      ///: END:ONLY_INCLUDE_IF\n      setWatchEthereumAccountEnabled:\n        preferencesController.setWatchEthereumAccountEnabled.bind(\n          preferencesController,\n        ),\n      setBitcoinSupportEnabled:\n        preferencesController.setBitcoinSupportEnabled.bind(\n          preferencesController,\n        ),\n      setBitcoinTestnetSupportEnabled:\n        preferencesController.setBitcoinTestnetSupportEnabled.bind(\n          preferencesController,\n        ),\n      setUseExternalNameSources:\n        preferencesController.setUseExternalNameSources.bind(\n          preferencesController,\n        ),\n      setUseTransactionSimulations:\n        preferencesController.setUseTransactionSimulations.bind(\n          preferencesController,\n        ),\n      setUseRequestQueue: this.setUseRequestQueue.bind(this),\n      setIpfsGateway: preferencesController.setIpfsGateway.bind(\n        preferencesController,\n      ),\n      setIsIpfsGatewayEnabled:\n        preferencesController.setIsIpfsGatewayEnabled.bind(\n          preferencesController,\n        ),\n      setUseAddressBarEnsResolution:\n        preferencesController.setUseAddressBarEnsResolution.bind(\n          preferencesController,\n        ),\n      setParticipateInMetaMetrics:\n        metaMetricsController.setParticipateInMetaMetrics.bind(\n          metaMetricsController,\n        ),\n      setDataCollectionForMarketing:\n        metaMetricsController.setDataCollectionForMarketing.bind(\n          metaMetricsController,\n        ),\n      setMarketingCampaignCookieId:\n        metaMetricsController.setMarketingCampaignCookieId.bind(\n          metaMetricsController,\n        ),\n      setCurrentLocale: preferencesController.setCurrentLocale.bind(\n        preferencesController,\n      ),\n      setIncomingTransactionsPreferences:\n        preferencesController.setIncomingTransactionsPreferences.bind(\n          preferencesController,\n        ),\n      setServiceWorkerKeepAlivePreference:\n        preferencesController.setServiceWorkerKeepAlivePreference.bind(\n          preferencesController,\n        ),\n      markPasswordForgotten: this.markPasswordForgotten.bind(this),\n      unMarkPasswordForgotten: this.unMarkPasswordForgotten.bind(this),\n      getRequestAccountTabIds: this.getRequestAccountTabIds,\n      getOpenMetamaskTabsIds: this.getOpenMetamaskTabsIds,\n      markNotificationPopupAsAutomaticallyClosed: () =>\n        this.notificationManager.markAsAutomaticallyClosed(),\n\n      // approval\n      requestUserApproval:\n        approvalController.addAndShowApprovalRequest.bind(approvalController),\n\n      // primary keyring management\n      addNewAccount: this.addNewAccount.bind(this),\n      getSeedPhrase: this.getSeedPhrase.bind(this),\n      resetAccount: this.resetAccount.bind(this),\n      removeAccount: this.removeAccount.bind(this),\n      importAccountWithStrategy: this.importAccountWithStrategy.bind(this),\n      getNextAvailableAccountName:\n        accountsController.getNextAvailableAccountName.bind(accountsController),\n      ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n      getAccountsBySnapId: (snapId) => getAccountsBySnapId(this, snapId),\n      ///: END:ONLY_INCLUDE_IF\n\n      // hardware wallets\n      connectHardware: this.connectHardware.bind(this),\n      forgetDevice: this.forgetDevice.bind(this),\n      checkHardwareStatus: this.checkHardwareStatus.bind(this),\n      unlockHardwareWalletAccount: this.unlockHardwareWalletAccount.bind(this),\n      attemptLedgerTransportCreation:\n        this.attemptLedgerTransportCreation.bind(this),\n\n      // qr hardware devices\n      submitQRHardwareCryptoHDKey:\n        keyringController.submitQRCryptoHDKey.bind(keyringController),\n      submitQRHardwareCryptoAccount:\n        keyringController.submitQRCryptoAccount.bind(keyringController),\n      cancelSyncQRHardware:\n        keyringController.cancelQRSynchronization.bind(keyringController),\n      submitQRHardwareSignature:\n        keyringController.submitQRSignature.bind(keyringController),\n      cancelQRHardwareSignRequest:\n        keyringController.cancelQRSignRequest.bind(keyringController),\n\n      // vault management\n      submitPassword: this.submitPassword.bind(this),\n      verifyPassword: this.verifyPassword.bind(this),\n\n      // network management\n      setActiveNetwork: (networkConfigurationId) => {\n        return this.networkController.setActiveNetwork(networkConfigurationId);\n      },\n      // Avoids returning the promise so that initial call to switch network\n      // doesn't block on the network lookup step\n      setActiveNetworkConfigurationId: (networkConfigurationId) => {\n        this.networkController.setActiveNetwork(networkConfigurationId);\n      },\n      setNetworkClientIdForDomain: (origin, networkClientId) => {\n        return this.selectedNetworkController.setNetworkClientIdForDomain(\n          origin,\n          networkClientId,\n        );\n      },\n      rollbackToPreviousProvider:\n        networkController.rollbackToPreviousProvider.bind(networkController),\n      addNetwork: this.networkController.addNetwork.bind(\n        this.networkController,\n      ),\n      updateNetwork: this.networkController.updateNetwork.bind(\n        this.networkController,\n      ),\n      removeNetwork: this.networkController.removeNetwork.bind(\n        this.networkController,\n      ),\n      getCurrentNetworkEIP1559Compatibility:\n        this.networkController.getEIP1559Compatibility.bind(\n          this.networkController,\n        ),\n      getNetworkConfigurationByNetworkClientId:\n        this.networkController.getNetworkConfigurationByNetworkClientId.bind(\n          this.networkController,\n        ),\n      // PreferencesController\n      setSelectedAddress: (address) => {\n        const account = this.accountsController.getAccountByAddress(address);\n        if (account) {\n          this.accountsController.setSelectedAccount(account.id);\n        } else {\n          throw new Error(`No account found for address: ${address}`);\n        }\n      },\n      toggleExternalServices: this.toggleExternalServices.bind(this),\n      addToken: tokensController.addToken.bind(tokensController),\n      updateTokenType: tokensController.updateTokenType.bind(tokensController),\n      setFeatureFlag: preferencesController.setFeatureFlag.bind(\n        preferencesController,\n      ),\n      setPreference: preferencesController.setPreference.bind(\n        preferencesController,\n      ),\n\n      addKnownMethodData: preferencesController.addKnownMethodData.bind(\n        preferencesController,\n      ),\n      setDismissSeedBackUpReminder:\n        preferencesController.setDismissSeedBackUpReminder.bind(\n          preferencesController,\n        ),\n      setAdvancedGasFee: preferencesController.setAdvancedGasFee.bind(\n        preferencesController,\n      ),\n      setTheme: preferencesController.setTheme.bind(preferencesController),\n      ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n      setSnapsAddSnapAccountModalDismissed:\n        preferencesController.setSnapsAddSnapAccountModalDismissed.bind(\n          preferencesController,\n        ),\n      ///: END:ONLY_INCLUDE_IF\n\n      // AccountsController\n      setSelectedInternalAccount: (id) => {\n        const account = this.accountsController.getAccount(id);\n        if (account) {\n          this.accountsController.setSelectedAccount(id);\n        }\n      },\n\n      setAccountName:\n        accountsController.setAccountName.bind(accountsController),\n\n      setAccountLabel: (address, label) => {\n        const account = this.accountsController.getAccountByAddress(address);\n        if (account === undefined) {\n          throw new Error(`No account found for address: ${address}`);\n        }\n        this.accountsController.setAccountName(account.id, label);\n      },\n\n      // AssetsContractController\n      getTokenStandardAndDetails: this.getTokenStandardAndDetails.bind(this),\n      getTokenSymbol: this.getTokenSymbol.bind(this),\n\n      // NftController\n      addNft: nftController.addNft.bind(nftController),\n\n      addNftVerifyOwnership:\n        nftController.addNftVerifyOwnership.bind(nftController),\n\n      removeAndIgnoreNft: nftController.removeAndIgnoreNft.bind(nftController),\n\n      removeNft: nftController.removeNft.bind(nftController),\n\n      checkAndUpdateAllNftsOwnershipStatus:\n        nftController.checkAndUpdateAllNftsOwnershipStatus.bind(nftController),\n\n      checkAndUpdateSingleNftOwnershipStatus:\n        nftController.checkAndUpdateSingleNftOwnershipStatus.bind(\n          nftController,\n        ),\n\n      isNftOwner: nftController.isNftOwner.bind(nftController),\n\n      // AddressController\n      setAddressBook: addressBookController.set.bind(addressBookController),\n      removeFromAddressBook: addressBookController.delete.bind(\n        addressBookController,\n      ),\n\n      // AppStateController\n      setLastActiveTime:\n        appStateController.setLastActiveTime.bind(appStateController),\n      setCurrentExtensionPopupId:\n        appStateController.setCurrentExtensionPopupId.bind(appStateController),\n      setDefaultHomeActiveTabName:\n        appStateController.setDefaultHomeActiveTabName.bind(appStateController),\n      setConnectedStatusPopoverHasBeenShown:\n        appStateController.setConnectedStatusPopoverHasBeenShown.bind(\n          appStateController,\n        ),\n      setRecoveryPhraseReminderHasBeenShown:\n        appStateController.setRecoveryPhraseReminderHasBeenShown.bind(\n          appStateController,\n        ),\n      setRecoveryPhraseReminderLastShown:\n        appStateController.setRecoveryPhraseReminderLastShown.bind(\n          appStateController,\n        ),\n      setTermsOfUseLastAgreed:\n        appStateController.setTermsOfUseLastAgreed.bind(appStateController),\n      setSurveyLinkLastClickedOrClosed:\n        appStateController.setSurveyLinkLastClickedOrClosed.bind(\n          appStateController,\n        ),\n      setOnboardingDate:\n        appStateController.setOnboardingDate.bind(appStateController),\n      setNewPrivacyPolicyToastClickedOrClosed:\n        appStateController.setNewPrivacyPolicyToastClickedOrClosed.bind(\n          appStateController,\n        ),\n      setNewPrivacyPolicyToastShownDate:\n        appStateController.setNewPrivacyPolicyToastShownDate.bind(\n          appStateController,\n        ),\n      setSnapsInstallPrivacyWarningShownStatus:\n        appStateController.setSnapsInstallPrivacyWarningShownStatus.bind(\n          appStateController,\n        ),\n      setOutdatedBrowserWarningLastShown:\n        appStateController.setOutdatedBrowserWarningLastShown.bind(\n          appStateController,\n        ),\n      setShowTestnetMessageInDropdown:\n        appStateController.setShowTestnetMessageInDropdown.bind(\n          appStateController,\n        ),\n      setShowBetaHeader:\n        appStateController.setShowBetaHeader.bind(appStateController),\n      setShowPermissionsTour:\n        appStateController.setShowPermissionsTour.bind(appStateController),\n      setShowAccountBanner:\n        appStateController.setShowAccountBanner.bind(appStateController),\n      setShowNetworkBanner:\n        appStateController.setShowNetworkBanner.bind(appStateController),\n      updateNftDropDownState:\n        appStateController.updateNftDropDownState.bind(appStateController),\n      setFirstTimeUsedNetwork:\n        appStateController.setFirstTimeUsedNetwork.bind(appStateController),\n      setSwitchedNetworkDetails:\n        appStateController.setSwitchedNetworkDetails.bind(appStateController),\n      clearSwitchedNetworkDetails:\n        appStateController.clearSwitchedNetworkDetails.bind(appStateController),\n      setSwitchedNetworkNeverShowMessage:\n        appStateController.setSwitchedNetworkNeverShowMessage.bind(\n          appStateController,\n        ),\n      getLastInteractedConfirmationInfo:\n        appStateController.getLastInteractedConfirmationInfo.bind(\n          appStateController,\n        ),\n      setLastInteractedConfirmationInfo:\n        appStateController.setLastInteractedConfirmationInfo.bind(\n          appStateController,\n        ),\n\n      // EnsController\n      tryReverseResolveAddress:\n        ensController.reverseResolveAddress.bind(ensController),\n\n      // KeyringController\n      setLocked: this.setLocked.bind(this),\n      createNewVaultAndKeychain: this.createNewVaultAndKeychain.bind(this),\n      createNewVaultAndRestore: this.createNewVaultAndRestore.bind(this),\n      exportAccount: this.exportAccount.bind(this),\n\n      // txController\n      updateTransaction: txController.updateTransaction.bind(txController),\n      approveTransactionsWithSameNonce:\n        txController.approveTransactionsWithSameNonce.bind(txController),\n      createCancelTransaction: this.createCancelTransaction.bind(this),\n      createSpeedUpTransaction: this.createSpeedUpTransaction.bind(this),\n      estimateGas: this.estimateGas.bind(this),\n      getNextNonce: this.getNextNonce.bind(this),\n      addTransaction: (transactionParams, transactionOptions) =>\n        addTransaction(\n          this.getAddTransactionRequest({\n            transactionParams,\n            transactionOptions,\n            waitForSubmit: false,\n          }),\n        ),\n      addTransactionAndWaitForPublish: (\n        transactionParams,\n        transactionOptions,\n      ) =>\n        addTransaction(\n          this.getAddTransactionRequest({\n            transactionParams,\n            transactionOptions,\n            waitForSubmit: true,\n          }),\n        ),\n      createTransactionEventFragment:\n        createTransactionEventFragmentWithTxId.bind(\n          null,\n          this.getTransactionMetricsRequest(),\n        ),\n      getTransactions: this.txController.getTransactions.bind(\n        this.txController,\n      ),\n      updateEditableParams: this.txController.updateEditableParams.bind(\n        this.txController,\n      ),\n      updateTransactionGasFees:\n        txController.updateTransactionGasFees.bind(txController),\n      updateTransactionSendFlowHistory:\n        txController.updateTransactionSendFlowHistory.bind(txController),\n      updatePreviousGasParams:\n        txController.updatePreviousGasParams.bind(txController),\n      abortTransactionSigning:\n        txController.abortTransactionSigning.bind(txController),\n      getLayer1GasFee: txController.getLayer1GasFee.bind(txController),\n\n      // decryptMessageController\n      decryptMessage: this.decryptMessageController.decryptMessage.bind(\n        this.decryptMessageController,\n      ),\n      decryptMessageInline:\n        this.decryptMessageController.decryptMessageInline.bind(\n          this.decryptMessageController,\n        ),\n      cancelDecryptMessage:\n        this.decryptMessageController.cancelDecryptMessage.bind(\n          this.decryptMessageController,\n        ),\n\n      // EncryptionPublicKeyController\n      encryptionPublicKey:\n        this.encryptionPublicKeyController.encryptionPublicKey.bind(\n          this.encryptionPublicKeyController,\n        ),\n      cancelEncryptionPublicKey:\n        this.encryptionPublicKeyController.cancelEncryptionPublicKey.bind(\n          this.encryptionPublicKeyController,\n        ),\n\n      // onboarding controller\n      setSeedPhraseBackedUp:\n        onboardingController.setSeedPhraseBackedUp.bind(onboardingController),\n      completeOnboarding:\n        onboardingController.completeOnboarding.bind(onboardingController),\n      setFirstTimeFlowType:\n        onboardingController.setFirstTimeFlowType.bind(onboardingController),\n\n      // alert controller\n      setAlertEnabledness:\n        alertController.setAlertEnabledness.bind(alertController),\n      setUnconnectedAccountAlertShown:\n        alertController.setUnconnectedAccountAlertShown.bind(alertController),\n      setWeb3ShimUsageAlertDismissed:\n        alertController.setWeb3ShimUsageAlertDismissed.bind(alertController),\n\n      // permissions\n      removePermissionsFor: this.removePermissionsFor,\n      approvePermissionsRequest: this.acceptPermissionsRequest,\n      rejectPermissionsRequest: this.rejectPermissionsRequest,\n      ...getPermissionBackgroundApiMethods(permissionController),\n\n\n      // snaps\n      disableSnap: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SnapController:disable',\n      ),\n      enableSnap: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SnapController:enable',\n      ),\n      updateSnap: (origin, requestedSnaps) => {\n        // We deliberately do not await this promise as that would mean waiting for the update to complete\n        // Instead we return null to signal to the UI that it is safe to redirect to the update flow\n        this.controllerMessenger.call(\n          'SnapController:install',\n          origin,\n          requestedSnaps,\n        );\n        return null;\n      },\n      removeSnap: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SnapController:remove',\n      ),\n      handleSnapRequest: this.handleSnapRequest.bind(this),\n      revokeDynamicSnapPermissions: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SnapController:revokeDynamicPermissions',\n      ),\n      dismissNotifications: this.dismissNotifications.bind(this),\n      markNotificationsAsRead: this.markNotificationsAsRead.bind(this),\n      disconnectOriginFromSnap: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SnapController:disconnectOrigin',\n      ),\n      updateNetworksList: this.updateNetworksList.bind(this),\n      updateAccountsList: this.updateAccountsList.bind(this),\n      updateHiddenAccountsList: this.updateHiddenAccountsList.bind(this),\n      getPhishingResult: async (website) => {\n        await phishingController.maybeUpdateState();\n\n        return phishingController.test(website);\n      },\n      deleteInterface: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SnapInterfaceController:deleteInterface',\n      ),\n      updateInterfaceState: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SnapInterfaceController:updateInterfaceState',\n      ),\n\n      // swaps\n      fetchAndSetQuotes: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:fetchAndSetQuotes',\n      ),\n      setSelectedQuoteAggId: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setSelectedQuoteAggId',\n      ),\n      resetSwapsState: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:resetSwapsState',\n      ),\n      setSwapsTokens: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setSwapsTokens',\n      ),\n      clearSwapsQuotes: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:clearSwapsQuotes',\n      ),\n      setApproveTxId: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setApproveTxId',\n      ),\n      setTradeTxId: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setTradeTxId',\n      ),\n      setSwapsTxGasPrice: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setSwapsTxGasPrice',\n      ),\n      setSwapsTxGasLimit: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setSwapsTxGasLimit',\n      ),\n      setSwapsTxMaxFeePerGas: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setSwapsTxMaxFeePerGas',\n      ),\n      setSwapsTxMaxFeePriorityPerGas: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setSwapsTxMaxFeePriorityPerGas',\n      ),\n      safeRefetchQuotes: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:safeRefetchQuotes',\n      ),\n      stopPollingForQuotes: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:stopPollingForQuotes',\n      ),\n      setBackgroundSwapRouteState: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setBackgroundSwapRouteState',\n      ),\n      resetPostFetchState: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:resetPostFetchState',\n      ),\n      setSwapsErrorKey: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setSwapsErrorKey',\n      ),\n      setInitialGasEstimate: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setInitialGasEstimate',\n      ),\n      setCustomApproveTxData: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setCustomApproveTxData',\n      ),\n      setSwapsLiveness: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setSwapsLiveness',\n      ),\n      setSwapsFeatureFlags: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setSwapsFeatureFlags',\n      ),\n      setSwapsUserFeeLevel: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setSwapsUserFeeLevel',\n      ),\n      setSwapsQuotesPollingLimitEnabled: this.controllerMessenger.call.bind(\n        this.controllerMessenger,\n        'SwapsController:setSwapsQuotesPollingLimitEnabled',\n      ),\n\n      // Bridge\n      [BridgeBackgroundAction.SET_FEATURE_FLAGS]:\n        this.controllerMessenger.call.bind(\n          this.controllerMessenger,\n          `${BRIDGE_CONTROLLER_NAME}:${BridgeBackgroundAction.SET_FEATURE_FLAGS}`,\n        ),\n\n      // Smart Transactions\n      fetchSmartTransactionFees: smartTransactionsController.getFees.bind(\n        smartTransactionsController,\n      ),\n      clearSmartTransactionFees: smartTransactionsController.clearFees.bind(\n        smartTransactionsController,\n      ),\n      submitSignedTransactions:\n        smartTransactionsController.submitSignedTransactions.bind(\n          smartTransactionsController,\n        ),\n      cancelSmartTransaction:\n        smartTransactionsController.cancelSmartTransaction.bind(\n          smartTransactionsController,\n        ),\n      fetchSmartTransactionsLiveness:\n        smartTransactionsController.fetchLiveness.bind(\n          smartTransactionsController,\n        ),\n      updateSmartTransaction:\n        smartTransactionsController.updateSmartTransaction.bind(\n          smartTransactionsController,\n        ),\n      setStatusRefreshInterval:\n        smartTransactionsController.setStatusRefreshInterval.bind(\n          smartTransactionsController,\n        ),\n\n      // MetaMetrics\n      trackMetaMetricsEvent: metaMetricsController.trackEvent.bind(\n        metaMetricsController,\n      ),\n      trackMetaMetricsPage: metaMetricsController.trackPage.bind(\n        metaMetricsController,\n      ),\n      createEventFragment: metaMetricsController.createEventFragment.bind(\n        metaMetricsController,\n      ),\n      updateEventFragment: metaMetricsController.updateEventFragment.bind(\n        metaMetricsController,\n      ),\n      finalizeEventFragment: metaMetricsController.finalizeEventFragment.bind(\n        metaMetricsController,\n      ),\n      trackInsightSnapView: this.trackInsightSnapView.bind(this),\n\n      // approval controller\n      resolvePendingApproval: this.resolvePendingApproval,\n      rejectPendingApproval: this.rejectPendingApproval,\n\n      // Notifications\n      resetViewedNotifications: announcementController.resetViewed.bind(\n        announcementController,\n      ),\n      updateViewedNotifications: announcementController.updateViewed.bind(\n        announcementController,\n      ),\n\n      // CurrencyRateController\n      currencyRateStartPollingByNetworkClientId:\n        currencyRateController.startPollingByNetworkClientId.bind(\n          currencyRateController,\n        ),\n      currencyRateStopPollingByPollingToken:\n        currencyRateController.stopPollingByPollingToken.bind(\n          currencyRateController,\n        ),\n\n      // GasFeeController\n      gasFeeStartPollingByNetworkClientId:\n        gasFeeController.startPollingByNetworkClientId.bind(gasFeeController),\n      gasFeeStopPollingByPollingToken:\n        gasFeeController.stopPollingByPollingToken.bind(gasFeeController),\n\n      getGasFeeTimeEstimate:\n        gasFeeController.getTimeEstimate.bind(gasFeeController),\n\n      addPollingTokenToAppState:\n        appStateController.addPollingToken.bind(appStateController),\n\n      removePollingTokenFromAppState:\n        appStateController.removePollingToken.bind(appStateController),\n\n      // Backup\n      backupUserData: backup.backupUserData.bind(backup),\n      restoreUserData: backup.restoreUserData.bind(backup),\n\n      // TokenDetectionController\n      detectTokens: tokenDetectionController.detectTokens.bind(\n        tokenDetectionController,\n      ),\n\n      // DetectCollectibleController\n      detectNfts: nftDetectionController.detectNfts.bind(\n        nftDetectionController,\n      ),\n\n      /** Token Detection V2 */\n      addDetectedTokens:\n        tokensController.addDetectedTokens.bind(tokensController),\n      addImportedTokens: tokensController.addTokens.bind(tokensController),\n      ignoreTokens: tokensController.ignoreTokens.bind(tokensController),\n      getBalancesInSingleCall:\n        assetsContractController.getBalancesInSingleCall.bind(\n          assetsContractController,\n        ),\n\n      // Authentication Controller\n      performSignIn: authenticationController.performSignIn.bind(\n        authenticationController,\n      ),\n      performSignOut: authenticationController.performSignOut.bind(\n        authenticationController,\n      ),\n\n      // UserStorageController\n      enableProfileSyncing: userStorageController.enableProfileSyncing.bind(\n        userStorageController,\n      ),\n      disableProfileSyncing: userStorageController.disableProfileSyncing.bind(\n        userStorageController,\n      ),\n      setIsProfileSyncingEnabled:\n        userStorageController.setIsProfileSyncingEnabled.bind(\n          userStorageController,\n        ),\n      syncInternalAccountsWithUserStorage:\n        userStorageController.syncInternalAccountsWithUserStorage.bind(\n          userStorageController,\n        ),\n\n      // NotificationServicesController\n      checkAccountsPresence:\n        notificationServicesController.checkAccountsPresence.bind(\n          notificationServicesController,\n        ),\n      createOnChainTriggers:\n        notificationServicesController.createOnChainTriggers.bind(\n          notificationServicesController,\n        ),\n      deleteOnChainTriggersByAccount:\n        notificationServicesController.deleteOnChainTriggersByAccount.bind(\n          notificationServicesController,\n        ),\n      updateOnChainTriggersByAccount:\n        notificationServicesController.updateOnChainTriggersByAccount.bind(\n          notificationServicesController,\n        ),\n      fetchAndUpdateMetamaskNotifications:\n        notificationServicesController.fetchAndUpdateMetamaskNotifications.bind(\n          notificationServicesController,\n        ),\n      markMetamaskNotificationsAsRead:\n        notificationServicesController.markMetamaskNotificationsAsRead.bind(\n          notificationServicesController,\n        ),\n      setFeatureAnnouncementsEnabled:\n        notificationServicesController.setFeatureAnnouncementsEnabled.bind(\n          notificationServicesController,\n        ),\n      enablePushNotifications:\n        notificationServicesPushController.enablePushNotifications.bind(\n          notificationServicesPushController,\n        ),\n      disablePushNotifications:\n        notificationServicesPushController.disablePushNotifications.bind(\n          notificationServicesPushController,\n        ),\n      updateTriggerPushNotifications:\n        notificationServicesPushController.updateTriggerPushNotifications.bind(\n          notificationServicesPushController,\n        ),\n      enableMetamaskNotifications:\n        notificationServicesController.enableMetamaskNotifications.bind(\n          notificationServicesController,\n        ),\n      disableMetamaskNotifications:\n        notificationServicesController.disableNotificationServices.bind(\n          notificationServicesController,\n        ),\n\n      // E2E testing\n      throwTestError: this.throwTestError.bind(this),\n\n      // NameController\n      updateProposedNames: this.nameController.updateProposedNames.bind(\n        this.nameController,\n      ),\n      setName: this.nameController.setName.bind(this.nameController),\n\n      // MultichainBalancesController\n      multichainUpdateBalance: (accountId) =>\n        this.multichainBalancesController.updateBalance(accountId),\n\n      multichainUpdateBalances: () =>\n        this.multichainBalancesController.updateBalances(),\n\n      // Transaction Decode\n      decodeTransactionData: (request) =>\n        decodeTransactionData({\n          ...request,\n          ethQuery: new EthQuery(this.provider),\n        }),\n      // metrics data deleteion\n      createMetaMetricsDataDeletionTask:\n        this.metaMetricsDataDeletionController.createMetaMetricsDataDeletionTask.bind(\n          this.metaMetricsDataDeletionController,\n        ),\n      updateDataDeletionTaskStatus:\n        this.metaMetricsDataDeletionController.updateDataDeletionTaskStatus.bind(\n          this.metaMetricsDataDeletionController,\n        ),\n      // Trace\n      endTrace,\n    };\n  }\n\n  async exportAccount(address, password) {\n    await this.verifyPassword(password);\n    return this.keyringController.exportAccount(password, address);\n  }\n\n  async getTokenStandardAndDetails(address, userAddress, tokenId) {\n    const { tokenList } = this.tokenListController.state;\n    const { tokens } = this.tokensController.state;\n\n    const staticTokenListDetails =\n      STATIC_MAINNET_TOKEN_LIST[address.toLowerCase()] || {};\n    const tokenListDetails = tokenList[address.toLowerCase()] || {};\n    const userDefinedTokenDetails =\n      tokens.find(({ address: _address }) =>\n        isEqualCaseInsensitive(_address, address),\n      ) || {};\n\n    const tokenDetails = {\n      ...staticTokenListDetails,\n      ...tokenListDetails,\n      ...userDefinedTokenDetails,\n    };\n\n    const tokenDetailsStandardIsERC20 =\n      isEqualCaseInsensitive(tokenDetails.standard, TokenStandard.ERC20) ||\n      tokenDetails.erc20 === true;\n\n    const noEvidenceThatTokenIsAnNFT =\n      !tokenId &&\n      !isEqualCaseInsensitive(tokenDetails.standard, TokenStandard.ERC1155) &&\n      !isEqualCaseInsensitive(tokenDetails.standard, TokenStandard.ERC721) &&\n      !tokenDetails.erc721;\n\n    const otherDetailsAreERC20Like =\n      tokenDetails.decimals !== undefined && tokenDetails.symbol;\n\n    const tokenCanBeTreatedAsAnERC20 =\n      tokenDetailsStandardIsERC20 ||\n      (noEvidenceThatTokenIsAnNFT && otherDetailsAreERC20Like);\n\n    let details;\n    if (tokenCanBeTreatedAsAnERC20) {\n      try {\n        const balance = userAddress\n          ? await fetchTokenBalance(address, userAddress, this.provider)\n          : undefined;\n\n        details = {\n          address,\n          balance,\n          standard: TokenStandard.ERC20,\n          decimals: tokenDetails.decimals,\n          symbol: tokenDetails.symbol,\n        };\n      } catch (e) {\n        // If the `fetchTokenBalance` call failed, `details` remains undefined, and we\n        // fall back to the below `assetsContractController.getTokenStandardAndDetails` call\n        log.warn(`Failed to get token balance. Error: ${e}`);\n      }\n    }\n\n    // `details`` will be undefined if `tokenCanBeTreatedAsAnERC20`` is false,\n    // or if it is true but the `fetchTokenBalance`` call failed. In either case, we should\n    // attempt to retrieve details from `assetsContractController.getTokenStandardAndDetails`\n    if (details === undefined) {\n      details = await this.assetsContractController.getTokenStandardAndDetails(\n        address,\n        userAddress,\n        tokenId,\n      );\n    }\n\n    const tokenDetailsStandardIsERC1155 = isEqualCaseInsensitive(\n      details.standard,\n      TokenStandard.ERC1155,\n    );\n\n    if (tokenDetailsStandardIsERC1155) {\n      try {\n        const balance = await fetchERC1155Balance(\n          address,\n          userAddress,\n          tokenId,\n          this.provider,\n        );\n\n        const balanceToUse = balance?._hex\n          ? parseInt(balance._hex, 16).toString()\n          : null;\n\n        details = {\n          ...details,\n          balance: balanceToUse,\n        };\n      } catch (e) {\n        // If the `fetchTokenBalance` call failed, `details` remains undefined, and we\n        // fall back to the below `assetsContractController.getTokenStandardAndDetails` call\n        log.warn('Failed to get token balance. Error:', e);\n      }\n    }\n\n    return {\n      ...details,\n      decimals: details?.decimals?.toString(10),\n      balance: details?.balance?.toString(10),\n    };\n  }\n\n  async getTokenSymbol(address) {\n    try {\n      const details =\n        await this.assetsContractController.getTokenStandardAndDetails(address);\n      return details?.symbol;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  //=============================================================================\n  // VAULT / KEYRING RELATED METHODS\n  //=============================================================================\n\n  /**\n   * Creates a new Vault and create a new keychain.\n   *\n   * A vault, or KeyringController, is a controller that contains\n   * many different account strategies, currently called Keyrings.\n   * Creating it new means wiping all previous keyrings.\n   *\n   * A keychain, or keyring, controls many accounts with a single backup and signing strategy.\n   * For example, a mnemonic phrase can generate many accounts, and is a keyring.\n   *\n   * @param {string} password\n   * @returns {object} vault\n   */\n  async createNewVaultAndKeychain(password) {\n    const releaseLock = await this.createVaultMutex.acquire();\n    try {\n      return await this.keyringController.createNewVaultAndKeychain(password);\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Create a new Vault and restore an existent keyring.\n   *\n   * @param {string} password\n   * @param {number[]} encodedSeedPhrase - The seed phrase, encoded as an array\n   * of UTF-8 bytes.\n   */\n  async createNewVaultAndRestore(password, encodedSeedPhrase) {\n    const releaseLock = await this.createVaultMutex.acquire();\n    try {\n      const { completedOnboarding } = this.onboardingController.state;\n\n      const seedPhraseAsBuffer = Buffer.from(encodedSeedPhrase);\n\n      // clear permissions\n      this.permissionController.clearState();\n\n      // Clear snap state\n      this.snapController.clearState();\n      // Clear notification state\n      this.notificationController.clear();\n\n      // clear accounts in accountTracker\n      this.accountTracker.clearAccounts();\n\n      this.txController.clearUnapprovedTransactions();\n\n      if (completedOnboarding) {\n        this.tokenDetectionController.enable();\n      }\n\n      // create new vault\n      await this.keyringController.createNewVaultAndRestore(\n        password,\n        this._convertMnemonicToWordlistIndices(seedPhraseAsBuffer),\n      );\n\n      if (completedOnboarding) {\n        await this._addAccountsWithBalance();\n\n        // This must be set as soon as possible to communicate to the\n        // keyring's iframe and have the setting initialized properly\n        // Optimistically called to not block MetaMask login due to\n        // Ledger Keyring GitHub downtime\n        this.setLedgerTransportPreference();\n      }\n    } finally {\n      releaseLock();\n    }\n  }\n\n  async _addAccountsWithBalance() {\n    // Scan accounts until we find an empty one\n    const chainId = getCurrentChainId({\n      metamask: this.networkController.state,\n    });\n    const ethQuery = new EthQuery(this.provider);\n    const accounts = await this.keyringController.getAccounts();\n    let address = accounts[accounts.length - 1];\n\n    for (let count = accounts.length; ; count++) {\n      const balance = await this.getBalance(address, ethQuery);\n\n      if (balance === '0x0') {\n        // This account has no balance, so check for tokens\n        await this.tokenDetectionController.detectTokens({\n          selectedAddress: address,\n        });\n\n        const tokens =\n          this.tokensController.state.allTokens?.[chainId]?.[address];\n        const detectedTokens =\n          this.tokensController.state.allDetectedTokens?.[chainId]?.[address];\n\n        if (\n          (tokens?.length ?? 0) === 0 &&\n          (detectedTokens?.length ?? 0) === 0\n        ) {\n          // This account has no balance or tokens\n          if (count !== 1) {\n            await this.removeAccount(address);\n          }\n          break;\n        }\n      }\n\n      // This account has assets, so check the next one\n      address = await this.keyringController.addNewAccount(count);\n    }\n  }\n\n  /**\n   * Encodes a BIP-39 mnemonic as the indices of words in the English BIP-39 wordlist.\n   *\n   * @param {Buffer} mnemonic - The BIP-39 mnemonic.\n   * @returns {Buffer} The Unicode code points for the seed phrase formed from the words in the wordlist.\n   */\n  _convertMnemonicToWordlistIndices(mnemonic) {\n    const indices = mnemonic\n      .toString()\n      .split(' ')\n      .map((word) => wordlist.indexOf(word));\n    return new Uint8Array(new Uint16Array(indices).buffer);\n  }\n\n  /**\n   * Converts a BIP-39 mnemonic stored as indices of words in the English wordlist to a buffer of Unicode code points.\n   *\n   * @param {Uint8Array} wordlistIndices - Indices to specific words in the BIP-39 English wordlist.\n   * @returns {Buffer} The BIP-39 mnemonic formed from the words in the English wordlist, encoded as a list of Unicode code points.\n   */\n  _convertEnglishWordlistIndicesToCodepoints(wordlistIndices) {\n    return Buffer.from(\n      Array.from(new Uint16Array(wordlistIndices.buffer))\n        .map((i) => wordlist[i])\n        .join(' '),\n    );\n  }\n\n  /**\n   * Get an account balance from the AccountTracker or request it directly from the network.\n   *\n   * @param {string} address - The account address\n   * @param {EthQuery} ethQuery - The EthQuery instance to use when asking the network\n   */\n  getBalance(address, ethQuery) {\n    return new Promise((resolve, reject) => {\n      const cached = this.accountTracker.store.getState().accounts[address];\n\n      if (cached && cached.balance) {\n        resolve(cached.balance);\n      } else {\n        ethQuery.getBalance(address, (error, balance) => {\n          if (error) {\n            reject(error);\n            log.error(error);\n          } else {\n            resolve(balance || '0x0');\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Submits the user's password and attempts to unlock the vault.\n   * Also synchronizes the preferencesController, to ensure its schema\n   * is up to date with known accounts once the vault is decrypted.\n   *\n   * @param {string} password - The user's password\n   */\n  async submitPassword(password) {\n    const { completedOnboarding } = this.onboardingController.state;\n\n    // Before attempting to unlock the keyrings, we need the offscreen to have loaded.\n    await this.offscreenPromise;\n\n    await this.keyringController.submitPassword(password);\n\n\n    try {\n      await this.blockTracker.checkForLatestBlock();\n    } catch (error) {\n      log.error('Error while unlocking extension.', error);\n    }\n\n    await this.accountsController.updateAccounts();\n\n    // This must be set as soon as possible to communicate to the\n    // keyring's iframe and have the setting initialized properly\n    // Optimistically called to not block MetaMask login due to\n    // Ledger Keyring GitHub downtime\n    if (completedOnboarding) {\n      this.setLedgerTransportPreference();\n    }\n  }\n\n  async _loginUser(password) {\n    try {\n      // Automatic login via config password\n      await this.submitPassword(password);\n\n      // Updating accounts in this.accountTracker before starting UI syncing ensure that\n      // state has account balance before it is synced with UI\n      await this.accountTracker.updateAccountsAllActiveNetworks();\n    } finally {\n      this._startUISync();\n    }\n  }\n\n  _startUISync() {\n    // Message startUISync is used to start syncing state with UI\n    // Sending this message after login is completed helps to ensure that incomplete state without\n    // account details are not flushed to UI.\n    this.emit('startUISync');\n    this.startUISync = true;\n    this.memStore.subscribe(this.sendUpdate.bind(this));\n  }\n\n  /**\n   * Submits a user's encryption key to log the user in via login token\n   */\n  async submitEncryptionKey() {\n    try {\n      const { loginToken, loginSalt } =\n        await this.extension.storage.session.get(['loginToken', 'loginSalt']);\n      if (loginToken && loginSalt) {\n        const { vault } = this.keyringController.state;\n\n        const jsonVault = JSON.parse(vault);\n\n        if (jsonVault.salt !== loginSalt) {\n          console.warn(\n            'submitEncryptionKey: Stored salt and vault salt do not match',\n          );\n          await this.clearLoginArtifacts();\n          return;\n        }\n\n        await this.keyringController.submitEncryptionKey(loginToken, loginSalt);\n      }\n    } catch (e) {\n      // If somehow this login token doesn't work properly,\n      // remove it and the user will get shown back to the unlock screen\n      await this.clearLoginArtifacts();\n      throw e;\n    }\n  }\n\n  async clearLoginArtifacts() {\n    await this.extension.storage.session.remove(['loginToken', 'loginSalt']);\n  }\n\n  /**\n   * Submits a user's password to check its validity.\n   *\n   * @param {string} password - The user's password\n   */\n  async verifyPassword(password) {\n    await this.keyringController.verifyPassword(password);\n  }\n\n  /**\n   * @type Identity\n   * @property {string} name - The account nickname.\n   * @property {string} address - The account's ethereum address, in lower case.\n   * receiving funds from our automatic Ropsten faucet.\n   */\n\n  /**\n   * Gets the mnemonic of the user's primary keyring.\n   */\n  getPrimaryKeyringMnemonic() {\n    const [keyring] = this.keyringController.getKeyringsByType(\n      KeyringType.hdKeyTree,\n    );\n    if (!keyring.mnemonic) {\n      throw new Error('Primary keyring mnemonic unavailable.');\n    }\n\n    return keyring.mnemonic;\n  }\n\n\n  //\n  // Hardware\n  //\n\n  async getKeyringForDevice(deviceName, hdPath = null) {\n    const keyringOverrides = this.opts.overrides?.keyrings;\n    let keyringName = null;\n    switch (deviceName) {\n      case HardwareDeviceNames.trezor:\n        keyringName = keyringOverrides?.trezor?.type || TrezorKeyring.type;\n        break;\n      case HardwareDeviceNames.ledger:\n        keyringName = keyringOverrides?.ledger?.type || LedgerKeyring.type;\n        break;\n      case HardwareDeviceNames.qr:\n        keyringName = QRHardwareKeyring.type;\n        break;\n      case HardwareDeviceNames.lattice:\n        keyringName = keyringOverrides?.lattice?.type || LatticeKeyring.type;\n        break;\n      default:\n        throw new Error(\n          'MetamaskController:getKeyringForDevice - Unknown device',\n        );\n    }\n    let [keyring] = await this.keyringController.getKeyringsByType(keyringName);\n    if (!keyring) {\n      keyring = await this.keyringController.addNewKeyring(keyringName);\n    }\n    if (hdPath && keyring.setHdPath) {\n      keyring.setHdPath(hdPath);\n    }\n    if (deviceName === HardwareDeviceNames.lattice) {\n      keyring.appName = 'MetaMask';\n    }\n    if (deviceName === HardwareDeviceNames.trezor) {\n      const model = keyring.getModel();\n      this.appStateController.setTrezorModel(model);\n    }\n\n    keyring.network = getProviderConfig({\n      metamask: this.networkController.state,\n    }).type;\n\n    return keyring;\n  }\n\n  async attemptLedgerTransportCreation() {\n    const keyring = await this.getKeyringForDevice(HardwareDeviceNames.ledger);\n    return await keyring.attemptMakeApp();\n  }\n\n  /**\n   * Fetch account list from a hardware device.\n   *\n   * @param deviceName\n   * @param page\n   * @param hdPath\n   * @returns [] accounts\n   */\n  async connectHardware(deviceName, page, hdPath) {\n    const keyring = await this.getKeyringForDevice(deviceName, hdPath);\n\n    if (deviceName === HardwareDeviceNames.ledger) {\n      await this.setLedgerTransportPreference(keyring);\n    }\n\n    let accounts = [];\n    switch (page) {\n      case -1:\n        accounts = await keyring.getPreviousPage();\n        break;\n      case 1:\n        accounts = await keyring.getNextPage();\n        break;\n      default:\n        accounts = await keyring.getFirstPage();\n    }\n\n    // Merge with existing accounts\n    // and make sure addresses are not repeated\n    const oldAccounts = await this.keyringController.getAccounts();\n\n    const accountsToTrack = [\n      ...new Set(\n        oldAccounts.concat(accounts.map((a) => a.address.toLowerCase())),\n      ),\n    ];\n    this.accountTracker.syncWithAddresses(accountsToTrack);\n    return accounts;\n  }\n\n  /**\n   * Check if the device is unlocked\n   *\n   * @param deviceName\n   * @param hdPath\n   * @returns {Promise<boolean>}\n   */\n  async checkHardwareStatus(deviceName, hdPath) {\n    const keyring = await this.getKeyringForDevice(deviceName, hdPath);\n    return keyring.isUnlocked();\n  }\n\n  /**\n   * Clear\n   *\n   * @param deviceName\n   * @returns {Promise<boolean>}\n   */\n  async forgetDevice(deviceName) {\n    const keyring = await this.getKeyringForDevice(deviceName);\n\n    for (const address of keyring.accounts) {\n      await this.removeAccount(address);\n    }\n\n    keyring.forgetDevice();\n    return true;\n  }\n\n  /**\n   * Retrieves the keyring for the selected address and using the .type returns\n   * a subtype for the account. Either 'hardware', 'imported', 'snap', or 'MetaMask'.\n   *\n   * @param {string} address - Address to retrieve keyring for\n   * @returns {'hardware' | 'imported' | 'snap' | 'MetaMask'}\n   */\n  async getAccountType(address) {\n    const keyringType = await this.keyringController.getAccountKeyringType(\n      address,\n    );\n    switch (keyringType) {\n      case KeyringType.trezor:\n      case KeyringType.lattice:\n      case KeyringType.qr:\n      case KeyringType.ledger:\n        return 'hardware';\n      case KeyringType.imported:\n        return 'imported';\n      case KeyringType.snap:\n        return 'snap';\n      default:\n        return 'MetaMask';\n    }\n  }\n\n  /**\n   * Retrieves the keyring for the selected address and using the .type\n   * determines if a more specific name for the device is available. Returns\n   * undefined for non hardware wallets.\n   *\n   * @param {string} address - Address to retrieve keyring for\n   * @returns {'ledger' | 'lattice' | string | undefined}\n   */\n  async getDeviceModel(address) {\n    const keyring = await this.keyringController.getKeyringForAccount(address);\n    switch (keyring.type) {\n      case KeyringType.trezor:\n        return keyring.getModel();\n      case KeyringType.qr:\n        return keyring.getName();\n      case KeyringType.ledger:\n        // TODO: get model after ledger keyring exposes method\n        return HardwareDeviceNames.ledger;\n      case KeyringType.lattice:\n        // TODO: get model after lattice keyring exposes method\n        return HardwareDeviceNames.lattice;\n      default:\n        return undefined;\n    }\n  }\n\n  /**\n   * get hardware account label\n   *\n   * @returns string label\n   */\n\n  getAccountLabel(name, index, hdPathDescription) {\n    return `${name[0].toUpperCase()}${name.slice(1)} ${\n      parseInt(index, 10) + 1\n    } ${hdPathDescription || ''}`.trim();\n  }\n\n  /**\n   * Imports an account from a Trezor or Ledger device.\n   *\n   * @param index\n   * @param deviceName\n   * @param hdPath\n   * @param hdPathDescription\n   * @returns {} keyState\n   */\n  async unlockHardwareWalletAccount(\n    index,\n    deviceName,\n    hdPath,\n    hdPathDescription,\n  ) {\n    const keyring = await this.getKeyringForDevice(deviceName, hdPath);\n\n    keyring.setAccountToUnlock(index);\n    const unlockedAccount =\n      await this.keyringController.addNewAccountForKeyring(keyring);\n    const label = this.getAccountLabel(\n      deviceName === HardwareDeviceNames.qr ? keyring.getName() : deviceName,\n      index,\n      hdPathDescription,\n    );\n    // Set the account label to Trezor 1 / Ledger 1 / QR Hardware 1, etc\n    this.preferencesController.setAccountLabel(unlockedAccount, label);\n    // Select the account\n    this.preferencesController.setSelectedAddress(unlockedAccount);\n\n    // It is expected that the account also exist in the accounts-controller\n    // in other case, an error shall be thrown\n    const account =\n      this.accountsController.getAccountByAddress(unlockedAccount);\n    this.accountsController.setAccountName(account.id, label);\n\n    const accounts = this.accountsController.listAccounts();\n\n    const { identities } = this.preferencesController.store.getState();\n    return { unlockedAccount, identities, accounts };\n  }\n\n  //\n  // Account Management\n  //\n\n  /**\n   * Adds a new account to the default (first) HD seed phrase Keyring.\n   *\n   * @param accountCount\n   * @returns {Promise<string>} The address of the newly-created account.\n   */\n  async addNewAccount(accountCount) {\n    const oldAccounts = await this.keyringController.getAccounts();\n\n    const addedAccountAddress = await this.keyringController.addNewAccount(\n      accountCount,\n    );\n\n    if (!oldAccounts.includes(addedAccountAddress)) {\n      this.preferencesController.setSelectedAddress(addedAccountAddress);\n    }\n\n    return addedAccountAddress;\n  }\n\n  /**\n   * Verifies the validity of the current vault's seed phrase.\n   *\n   * Validity: seed phrase restores the accounts belonging to the current vault.\n   *\n   * Called when the first account is created and on unlocking the vault.\n   *\n   * @param password\n   * @returns {Promise<number[]>} The seed phrase to be confirmed by the user,\n   * encoded as an array of UTF-8 bytes.\n   */\n  async getSeedPhrase(password) {\n    return this._convertEnglishWordlistIndicesToCodepoints(\n      await this.keyringController.exportSeedPhrase(password),\n    );\n  }\n\n  /**\n   * Clears the transaction history, to allow users to force-reset their nonces.\n   * Mostly used in development environments, when networks are restarted with\n   * the same network ID.\n   *\n   * @returns {Promise<string>} The current selected address.\n   */\n  async resetAccount() {\n    const selectedAddress =\n      this.accountsController.getSelectedAccount().address;\n    this.txController.wipeTransactions(false, selectedAddress);\n    this.smartTransactionsController.wipeSmartTransactions({\n      address: selectedAddress,\n      ignoreNetwork: false,\n    });\n    this.networkController.resetConnection();\n\n    return selectedAddress;\n  }\n\n  /**\n   * Gets the permitted accounts for the specified origin. Returns an empty\n   * array if no accounts are permitted.\n   *\n   * @param {string} origin - The origin whose exposed accounts to retrieve.\n   * @param {boolean} [suppressUnauthorizedError] - Suppresses the unauthorized error.\n   * @returns {Promise<string[]>} The origin's permitted accounts, or an empty\n   * array.\n   */\n  async getPermittedAccounts(\n    origin,\n    { suppressUnauthorizedError = true } = {},\n  ) {\n    try {\n      return await this.permissionController.executeRestrictedMethod(\n        origin,\n        RestrictedMethods.eth_accounts,\n      );\n    } catch (error) {\n      if (\n        suppressUnauthorizedError &&\n        error.code === rpcErrorCodes.provider.unauthorized\n      ) {\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Stops exposing the specified chain ID to all third parties.\n   * Exposed chain IDs are stored in caveats of the `endowment:permitted-chains`\n   * permission. This method uses `PermissionController.updatePermissionsByCaveat`\n   * to remove the specified chain ID from every `endowment:permitted-chains`\n   * permission. If a permission only included this chain ID, the permission is\n   * revoked entirely.\n   *\n   * @param {string} targetChainId - The chain ID to stop exposing\n   * to third parties.\n   */\n  removeAllChainIdPermissions(targetChainId) {\n    this.permissionController.updatePermissionsByCaveat(\n      CaveatTypes.restrictNetworkSwitching,\n      (existingChainIds) =>\n        CaveatMutatorFactories[\n          CaveatTypes.restrictNetworkSwitching\n        ].removeChainId(targetChainId, existingChainIds),\n    );\n  }\n\n  /**\n   * Stops exposing the account with the specified address to all third parties.\n   * Exposed accounts are stored in caveats of the eth_accounts permission. This\n   * method uses `PermissionController.updatePermissionsByCaveat` to\n   * remove the specified address from every eth_accounts permission. If a\n   * permission only included this address, the permission is revoked entirely.\n   *\n   * @param {string} targetAccount - The address of the account to stop exposing\n   * to third parties.\n   */\n  removeAllAccountPermissions(targetAccount) {\n    this.permissionController.updatePermissionsByCaveat(\n      CaveatTypes.restrictReturnedAccounts,\n      (existingAccounts) =>\n        CaveatMutatorFactories[\n          CaveatTypes.restrictReturnedAccounts\n        ].removeAccount(targetAccount, existingAccounts),\n    );\n  }\n\n  /**\n   * Removes an account from state / storage.\n   *\n   * @param {string[]} address - A hex address\n   */\n  async removeAccount(address) {\n    // Remove all associated permissions\n    this.removeAllAccountPermissions(address);\n\n\n    const keyring = await this.keyringController.getKeyringForAccount(address);\n    // Remove account from the keyring\n    await this.keyringController.removeAccount(address);\n    const updatedKeyringAccounts = keyring ? await keyring.getAccounts() : {};\n    if (updatedKeyringAccounts?.length === 0) {\n      keyring.destroy?.();\n    }\n\n    return address;\n  }\n\n  /**\n   * Imports an account with the specified import strategy.\n   * These are defined in @metamask/keyring-controller\n   * Each strategy represents a different way of serializing an Ethereum key pair.\n   *\n   * @param {'privateKey' | 'json'} strategy - A unique identifier for an account import strategy.\n   * @param {any} args - The data required by that strategy to import an account.\n   */\n  async importAccountWithStrategy(strategy, args) {\n    const importedAccountAddress =\n      await this.keyringController.importAccountWithStrategy(strategy, args);\n    // set new account as selected\n    this.preferencesController.setSelectedAddress(importedAccountAddress);\n  }\n\n  // ---------------------------------------------------------------------------\n  // Identity Management (signature operations)\n\n  getAddTransactionRequest({\n    transactionParams,\n    transactionOptions,\n    dappRequest,\n  }) {\n    return {\n      internalAccounts: this.accountsController.listAccounts(),\n      dappRequest,\n      networkClientId:\n        dappRequest?.networkClientId ??\n        this.networkController.state.selectedNetworkClientId,\n      selectedAccount: this.accountsController.getAccountByAddress(\n        transactionParams.from,\n      ),\n      transactionController: this.txController,\n      transactionOptions,\n      transactionParams,\n      userOperationController: this.userOperationController,\n      chainId: getCurrentChainId({ metamask: this.networkController.state }),\n      ppomController: this.ppomController,\n      securityAlertsEnabled:\n        this.preferencesController.store.getState()?.securityAlertsEnabled,\n      updateSecurityAlertResponse: this.updateSecurityAlertResponse.bind(this),\n    };\n  }\n\n  /**\n   * @returns {boolean} true if the keyring type supports EIP-1559\n   */\n  async getCurrentAccountEIP1559Compatibility() {\n    return true;\n  }\n\n  //=============================================================================\n  // END (VAULT / KEYRING RELATED METHODS)\n  //=============================================================================\n\n  /**\n   * Allows a user to attempt to cancel a previously submitted transaction\n   * by creating a new transaction.\n   *\n   * @param {number} originalTxId - the id of the txMeta that you want to\n   * attempt to cancel\n   * @param {import(\n   *  './controllers/transactions'\n   * ).CustomGasSettings} [customGasSettings] - overrides to use for gas params\n   * instead of allowing this method to generate them\n   * @param options\n   * @returns {object} MetaMask state\n   */\n  async createCancelTransaction(originalTxId, customGasSettings, options) {\n    await this.txController.stopTransaction(\n      originalTxId,\n      customGasSettings,\n      options,\n    );\n    const state = this.getState();\n    return state;\n  }\n\n  /**\n   * Allows a user to attempt to speed up a previously submitted transaction\n   * by creating a new transaction.\n   *\n   * @param {number} originalTxId - the id of the txMeta that you want to\n   * attempt to speed up\n   * @param {import(\n   *  './controllers/transactions'\n   * ).CustomGasSettings} [customGasSettings] - overrides to use for gas params\n   * instead of allowing this method to generate them\n   * @param options\n   * @returns {object} MetaMask state\n   */\n  async createSpeedUpTransaction(originalTxId, customGasSettings, options) {\n    await this.txController.speedUpTransaction(\n      originalTxId,\n      customGasSettings,\n      options,\n    );\n    const state = this.getState();\n    return state;\n  }\n\n  async estimateGas(estimateGasParams) {\n    return new Promise((resolve, reject) => {\n      return new EthJSQuery(this.provider).estimateGas(\n        estimateGasParams,\n        (err, res) => {\n          if (err) {\n            return reject(err);\n          }\n\n          return resolve(res.toString(16));\n        },\n      );\n    });\n  }\n\n  handleWatchAssetRequest = ({ asset, type, origin, networkClientId }) => {\n    switch (type) {\n      case ERC20:\n        return this.tokensController.watchAsset({\n          asset,\n          type,\n          networkClientId,\n        });\n      case ERC721:\n      case ERC1155:\n        return this.nftController.watchNft(asset, type, origin);\n      default:\n        throw new Error(`Asset type ${type} not supported`);\n    }\n  };\n\n  async updateSecurityAlertResponse(\n    method,\n    securityAlertId,\n    securityAlertResponse,\n  ) {\n    updateSecurityAlertResponse({\n      appStateController: this.appStateController,\n      method,\n      securityAlertId,\n      securityAlertResponse,\n      signatureController: this.signatureController,\n      transactionController: this.txController,\n    });\n  }\n\n  //=============================================================================\n  // PASSWORD MANAGEMENT\n  //=============================================================================\n\n  /**\n   * Allows a user to begin the seed phrase recovery process.\n   */\n  markPasswordForgotten() {\n    this.preferencesController.setPasswordForgotten(true);\n    this.sendUpdate();\n  }\n\n  /**\n   * Allows a user to end the seed phrase recovery process.\n   */\n  unMarkPasswordForgotten() {\n    this.preferencesController.setPasswordForgotten(false);\n    this.sendUpdate();\n  }\n\n  //=============================================================================\n  // REQUEST QUEUE\n  //=============================================================================\n\n  setUseRequestQueue(value) {\n    this.preferencesController.setUseRequestQueue(value);\n  }\n\n  //=============================================================================\n  // SETUP\n  //=============================================================================\n\n  /**\n   * A runtime.MessageSender object, as provided by the browser:\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/MessageSender\n   * @typedef {object} MessageSender\n   * @property {string} - The URL of the page or frame hosting the script that sent the message.\n   */\n\n  /**\n   * A Snap sender object.\n   *\n   * @typedef {object} SnapSender\n   * @property {string} snapId - The ID of the snap.\n   */\n\n  /**\n   * Used to create a multiplexed stream for connecting to an untrusted context\n   * like a Dapp or other extension.\n   *\n   * @param options - Options bag.\n   * @param {ReadableStream} options.connectionStream - The Duplex stream to connect to.\n   * @param {MessageSender | SnapSender} options.sender - The sender of the messages on this stream.\n   * @param {string} [options.subjectType] - The type of the sender, i.e. subject.\n   */\n  setupUntrustedCommunicationEip1193({\n    connectionStream,\n    sender,\n    subjectType,\n  }) {\n    if (sender.url) {\n      if (this.onboardingController.state.completedOnboarding) {\n        if (this.preferencesController.store.getState().usePhishDetect) {\n          const { hostname } = new URL(sender.url);\n          this.phishingController.maybeUpdateState();\n          // Check if new connection is blocked if phishing detection is on\n          const phishingTestResponse = this.phishingController.test(sender.url);\n          if (phishingTestResponse?.result) {\n            this.sendPhishingWarning(connectionStream, hostname);\n            this.metaMetricsController.trackEvent({\n              event: MetaMetricsEventName.PhishingPageDisplayed,\n              category: MetaMetricsEventCategory.Phishing,\n              properties: {\n                url: hostname,\n              },\n            });\n            return;\n          }\n        }\n      }\n    }\n\n    let inputSubjectType;\n    if (subjectType) {\n      inputSubjectType = subjectType;\n    } else if (sender.id && sender.id !== this.extension.runtime.id) {\n      inputSubjectType = SubjectType.Extension;\n    } else {\n      inputSubjectType = SubjectType.Website;\n    }\n\n    // setup multiplexing\n    const mux = setupMultiplex(connectionStream);\n\n    // messages between inpage and background\n    this.setupProviderConnectionEip1193(\n      mux.createStream('metamask-provider'),\n      sender,\n      inputSubjectType,\n    );\n\n    // TODO:LegacyProvider: Delete\n    if (sender.url) {\n      // legacy streams\n      this.setupPublicConfig(mux.createStream('publicConfig'));\n    }\n  }\n\n  /**\n   * Used to create a CAIP stream for connecting to an untrusted context.\n   *\n   * @param options - Options bag.\n   * @param {ReadableStream} options.connectionStream - The Duplex stream to connect to.\n   * @param {MessageSender | SnapSender} options.sender - The sender of the messages on this stream.\n   * @param {string} [options.subjectType] - The type of the sender, i.e. subject.\n   */\n\n  setupUntrustedCommunicationCaip({ connectionStream, sender, subjectType }) {\n    let inputSubjectType;\n    if (subjectType) {\n      inputSubjectType = subjectType;\n    } else if (sender.id && sender.id !== this.extension.runtime.id) {\n      inputSubjectType = SubjectType.Extension;\n    } else {\n      inputSubjectType = SubjectType.Website;\n    }\n\n    const caipStream = createCaipStream(connectionStream);\n\n    // messages between subject and background\n    this.setupProviderConnectionCaip(caipStream, sender, inputSubjectType);\n  }\n\n  /**\n   * Used to create a multiplexed stream for connecting to a trusted context,\n   * like our own user interfaces, which have the provider APIs, but also\n   * receive the exported API from this controller, which includes trusted\n   * functions, like the ability to approve transactions or sign messages.\n   *\n   * @param {*} connectionStream - The duplex stream to connect to.\n   * @param {MessageSender} sender - The sender of the messages on this stream\n   */\n  setupTrustedCommunication(connectionStream, sender) {\n    // setup multiplexing\n    const mux = setupMultiplex(connectionStream);\n    // connect features\n    this.setupControllerConnection(mux.createStream('controller'));\n    this.setupProviderConnectionEip1193(\n      mux.createStream('provider'),\n      sender,\n      SubjectType.Internal,\n    );\n  }\n\n  /**\n   * Used to create a multiplexed stream for connecting to the phishing warning page.\n   *\n   * @param options - Options bag.\n   * @param {ReadableStream} options.connectionStream - The Duplex stream to connect to.\n   */\n  setupPhishingCommunication({ connectionStream }) {\n    const { usePhishDetect } = this.preferencesController.store.getState();\n\n    if (!usePhishDetect) {\n      return;\n    }\n\n    // setup multiplexing\n    const mux = setupMultiplex(connectionStream);\n    const phishingStream = mux.createStream(PHISHING_SAFELIST);\n\n    // set up postStream transport\n    phishingStream.on(\n      'data',\n      createMetaRPCHandler(\n        {\n          safelistPhishingDomain: this.safelistPhishingDomain.bind(this),\n          backToSafetyPhishingWarning:\n            this.backToSafetyPhishingWarning.bind(this),\n        },\n        phishingStream,\n      ),\n    );\n  }\n\n  setUpCookieHandlerCommunication({ connectionStream }) {\n    const {\n      metaMetricsId,\n      dataCollectionForMarketing,\n      participateInMetaMetrics,\n    } = this.metaMetricsController.store.getState();\n\n    if (\n      metaMetricsId &&\n      dataCollectionForMarketing &&\n      participateInMetaMetrics\n    ) {\n      // setup multiplexing\n      const mux = setupMultiplex(connectionStream);\n      const metamaskCookieHandlerStream = mux.createStream(\n        METAMASK_COOKIE_HANDLER,\n      );\n      // set up postStream transport\n      metamaskCookieHandlerStream.on(\n        'data',\n        createMetaRPCHandler(\n          {\n            getCookieFromMarketingPage:\n              this.getCookieFromMarketingPage.bind(this),\n          },\n          metamaskCookieHandlerStream,\n        ),\n      );\n    }\n  }\n\n  getCookieFromMarketingPage(data) {\n    const { ga_client_id: cookieId } = data;\n    this.metaMetricsController.setMarketingCampaignCookieId(cookieId);\n  }\n\n  /**\n   * Called when we detect a suspicious domain. Requests the browser redirects\n   * to our anti-phishing page.\n   *\n   * @private\n   * @param {*} connectionStream - The duplex stream to the per-page script,\n   * for sending the reload attempt to.\n   * @param {string} hostname - The hostname that triggered the suspicion.\n   */\n  sendPhishingWarning(connectionStream, hostname) {\n    const mux = setupMultiplex(connectionStream);\n    const phishingStream = mux.createStream('phishing');\n    phishingStream.write({ hostname });\n  }\n\n  /**\n   * A method for providing our API over a stream using JSON-RPC.\n   *\n   * @param {*} outStream - The stream to provide our API over.\n   */\n  setupControllerConnection(outStream) {\n    const patchStore = new PatchStore(this.memStore);\n    let uiReady = false;\n\n    const handleUpdate = () => {\n      if (!isStreamWritable(outStream) || !uiReady) {\n        return;\n      }\n\n      const patches = patchStore.flushPendingPatches();\n\n      outStream.write({\n        jsonrpc: '2.0',\n        method: 'sendUpdate',\n        params: [patches],\n      });\n    };\n\n    const api = {\n      ...this.getApi(),\n      startPatches: () => {\n        uiReady = true;\n        handleUpdate();\n      },\n      getStatePatches: () => patchStore.flushPendingPatches(),\n    };\n\n    this.on('update', handleUpdate);\n\n    // report new active controller connection\n    this.activeControllerConnections += 1;\n    this.emit('controllerConnectionChanged', this.activeControllerConnections);\n\n    // set up postStream transport\n    outStream.on('data', createMetaRPCHandler(api, outStream));\n\n    const startUISync = () => {\n      if (!isStreamWritable(outStream)) {\n        return;\n      }\n      // send notification to client-side\n      outStream.write({\n        jsonrpc: '2.0',\n        method: 'startUISync',\n      });\n    };\n\n    if (this.startUISync) {\n      startUISync();\n    } else {\n      this.once('startUISync', startUISync);\n    }\n\n    const outstreamEndHandler = () => {\n      if (!outStream.mmFinished) {\n        this.activeControllerConnections -= 1;\n        this.emit(\n          'controllerConnectionChanged',\n          this.activeControllerConnections,\n        );\n        outStream.mmFinished = true;\n        this.removeListener('update', handleUpdate);\n        patchStore.destroy();\n      }\n    };\n\n    // The presence of both of the below handlers may be redundant.\n    // After upgrading metamask/object-multiples to v2.0.0, which included\n    // an upgrade of readable-streams from v2 to v3, we saw that the\n    // `outStream.on('end'` handler was almost never being called. This seems to\n    // related to how v3 handles errors vs how v2 handles errors; there\n    // are \"premature close\" errors in both cases, although in the case\n    // of v2 they don't prevent `outStream.on('end'` from being called.\n    // At the time that this comment was committed, it was known that we\n    // need to investigate and resolve the underlying error, however,\n    // for expediency, we are not addressing them at this time. Instead, we\n    // can observe that `readableStream.finished` preserves the same\n    // functionality as we had when we relied on readable-stream v2. Meanwhile,\n    // the `outStream.on('end')` handler was observed to have been called at least once.\n    // In an abundance of caution to prevent against unexpected future behavioral changes in\n    // streams implementations, we redundantly use multiple paths to attach the same event handler.\n    // The outstreamEndHandler therefore needs to be idempotent, which introduces the `mmFinished` property.\n\n    outStream.mmFinished = false;\n    finished(outStream, outstreamEndHandler);\n    outStream.once('close', outstreamEndHandler);\n    outStream.once('end', outstreamEndHandler);\n  }\n\n  /**\n   * A method for serving our ethereum provider over a given stream.\n   *\n   * @param {*} outStream - The stream to provide over.\n   * @param {MessageSender | SnapSender} sender - The sender of the messages on this stream\n   * @param {SubjectType} subjectType - The type of the sender, i.e. subject.\n   */\n  setupProviderConnectionEip1193(outStream, sender, subjectType) {\n    let origin;\n    if (subjectType === SubjectType.Internal) {\n      origin = ORIGIN_METAMASK;\n    } else if (subjectType === SubjectType.Snap) {\n      origin = sender.snapId;\n    } else {\n      origin = new URL(sender.url).origin;\n    }\n\n    if (sender.id && sender.id !== this.extension.runtime.id) {\n      this.subjectMetadataController.addSubjectMetadata({\n        origin,\n        extensionId: sender.id,\n        subjectType: SubjectType.Extension,\n      });\n    }\n\n    let tabId;\n    if (sender.tab && sender.tab.id) {\n      tabId = sender.tab.id;\n    }\n\n    const engine = this.setupProviderEngineEip1193({\n      origin,\n      sender,\n      subjectType,\n      tabId,\n    });\n\n    const dupeReqFilterStream = createDupeReqFilterStream();\n\n    // setup connection\n    const providerStream = createEngineStream({ engine });\n\n    const connectionId = this.addConnection(origin, { engine });\n\n    pipeline(\n      outStream,\n      dupeReqFilterStream,\n      providerStream,\n      outStream,\n      (err) => {\n        // handle any middleware cleanup\n        engine._middleware.forEach((mid) => {\n          if (mid.destroy && typeof mid.destroy === 'function') {\n            mid.destroy();\n          }\n        });\n        connectionId && this.removeConnection(origin, connectionId);\n        // For context and todos related to the error message match, see https://github.com/MetaMask/metamask-extension/issues/26337\n        if (err && !err.message?.match('Premature close')) {\n          log.error(err);\n        }\n      },\n    );\n\n    // Used to show wallet liveliness to the provider\n    if (subjectType !== SubjectType.Internal) {\n      this._notifyChainChangeForConnection({ engine }, origin);\n    }\n  }\n\n  /**\n   * A method for serving our CAIP provider over a given stream.\n   *\n   * @param {*} outStream - The stream to provide over.\n   * @param {MessageSender | SnapSender} sender - The sender of the messages on this stream\n   * @param {SubjectType} subjectType - The type of the sender, i.e. subject.\n   */\n  setupProviderConnectionCaip(outStream, sender, subjectType) {\n    let origin;\n    if (subjectType === SubjectType.Internal) {\n      origin = ORIGIN_METAMASK;\n    } else if (subjectType === SubjectType.Snap) {\n      origin = sender.snapId;\n    } else {\n      origin = new URL(sender.url).origin;\n    }\n\n    if (sender.id && sender.id !== this.extension.runtime.id) {\n      this.subjectMetadataController.addSubjectMetadata({\n        origin,\n        extensionId: sender.id,\n        subjectType: SubjectType.Extension,\n      });\n    }\n\n    let tabId;\n    if (sender.tab && sender.tab.id) {\n      tabId = sender.tab.id;\n    }\n\n    const engine = this.setupProviderEngineCaip({\n      origin,\n      tabId,\n    });\n\n    const dupeReqFilterStream = createDupeReqFilterStream();\n\n    // setup connection\n    const providerStream = createEngineStream({ engine });\n\n    const connectionId = this.addConnection(origin, { engine });\n\n    pipeline(\n      outStream,\n      dupeReqFilterStream,\n      providerStream,\n      outStream,\n      (err) => {\n        // handle any middleware cleanup\n        engine._middleware.forEach((mid) => {\n          if (mid.destroy && typeof mid.destroy === 'function') {\n            mid.destroy();\n          }\n        });\n        connectionId && this.removeConnection(origin, connectionId);\n        if (err) {\n          log.error(err);\n        }\n      },\n    );\n\n    // Used to show wallet liveliness to the provider\n    if (subjectType !== SubjectType.Internal) {\n      this._notifyChainChangeForConnection({ engine }, origin);\n    }\n  }\n\n  /**\n   * For snaps running in workers.\n   *\n   * @param snapId\n   * @param connectionStream\n   */\n  setupSnapProvider(snapId, connectionStream) {\n    this.setupUntrustedCommunicationEip1193({\n      connectionStream,\n      sender: { snapId },\n      subjectType: SubjectType.Snap,\n    });\n  }\n\n  /**\n   * A method for creating an ethereum provider that is safely restricted for the requesting subject.\n   *\n   * @param {object} options - Provider engine options\n   * @param {string} options.origin - The origin of the sender\n   * @param {MessageSender | SnapSender} options.sender - The sender object.\n   * @param {string} options.subjectType - The type of the sender subject.\n   * @param {tabId} [options.tabId] - The tab ID of the sender - if the sender is within a tab\n   */\n  setupProviderEngineEip1193({ origin, subjectType, sender, tabId }) {\n    const engine = new JsonRpcEngine();\n\n    // Append origin to each request\n    engine.push(createOriginMiddleware({ origin }));\n\n    // Append selectedNetworkClientId to each request\n    engine.push(createSelectedNetworkMiddleware(this.controllerMessenger));\n\n    // Add a middleware that will switch chain on each request (as needed)\n    const requestQueueMiddleware = createQueuedRequestMiddleware({\n      enqueueRequest: this.queuedRequestController.enqueueRequest.bind(\n        this.queuedRequestController,\n      ),\n      useRequestQueue: this.preferencesController.getUseRequestQueue.bind(\n        this.preferencesController,\n      ),\n      shouldEnqueueRequest: (request) => {\n        if (\n          request.method === 'eth_requestAccounts' &&\n          this.permissionController.hasPermission(\n            request.origin,\n            PermissionNames.eth_accounts,\n          )\n        ) {\n          return false;\n        }\n        return methodsWithConfirmation.includes(request.method);\n      },\n    });\n    engine.push(requestQueueMiddleware);\n\n    // If the origin is not in the selectedNetworkController's `domains` state\n    // when the provider engine is created, the selectedNetworkController will\n    // fetch the globally selected networkClient from the networkController and wrap\n    // it in a proxy which can be switched to use its own state if/when the origin\n    // is added to the `domains` state\n    const proxyClient =\n      this.selectedNetworkController.getProviderAndBlockTracker(origin);\n\n    // We create the filter and subscription manager middleware now, but they will\n    // be inserted into the engine later.\n    const filterMiddleware = createFilterMiddleware(proxyClient);\n    const subscriptionManager = createSubscriptionManager(proxyClient);\n    subscriptionManager.events.on('notification', (message) =>\n      engine.emit('notification', message),\n    );\n\n    // Append tabId to each request if it exists\n    if (tabId) {\n      engine.push(createTabIdMiddleware({ tabId }));\n    }\n\n    engine.push(createLoggerMiddleware({ origin }));\n    engine.push(this.permissionLogController.createMiddleware());\n\n    if (origin === BaseUrl.Portfolio) {\n      engine.push(createTxVerificationMiddleware(this.networkController));\n    }\n\n    engine.push(createTracingMiddleware());\n\n    // PPOMMiddleware come after the SelectedNetworkMiddleware\n    engine.push(\n      createPPOMMiddleware(\n        this.ppomController,\n        this.preferencesController,\n        this.networkController,\n        this.appStateController,\n        this.accountsController,\n        this.updateSecurityAlertResponse.bind(this),\n      ),\n    );\n\n    const isConfirmationRedesignEnabled = () => {\n      return this.preferencesController.store.getState().preferences\n        .redesignedConfirmationsEnabled;\n    };\n\n    engine.push(\n      createRPCMethodTrackingMiddleware({\n        getMetricsState: this.metaMetricsController.store.getState.bind(\n          this.metaMetricsController.store,\n        ),\n        getAccountType: this.getAccountType.bind(this),\n        getDeviceModel: this.getDeviceModel.bind(this),\n        isConfirmationRedesignEnabled,\n        snapAndHardwareMessenger: this.controllerMessenger.getRestricted({\n          name: 'SnapAndHardwareMessenger',\n          allowedActions: [\n            'KeyringController:getKeyringForAccount',\n            'SnapController:get',\n            'AccountsController:getSelectedAccount',\n          ],\n        }),\n        appStateController: this.appStateController,\n        metaMetricsController: this.metaMetricsController,\n      }),\n    );\n\n    engine.push(createUnsupportedMethodMiddleware());\n\n    // Legacy RPC methods that need to be implemented _ahead of_ the permission\n    // middleware.\n    engine.push(\n      createLegacyMethodMiddleware({\n        getAccounts: this.getPermittedAccounts.bind(this, origin),\n      }),\n    );\n\n    if (subjectType !== SubjectType.Internal) {\n      engine.push(\n        this.permissionController.createPermissionMiddleware({\n          origin,\n        }),\n      );\n    }\n\n    if (subjectType === SubjectType.Website) {\n      engine.push(\n        createOnboardingMiddleware({\n          location: sender.url,\n          registerOnboarding: this.onboardingController.registerOnboarding,\n        }),\n      );\n    }\n\n    // EVM requests and eth permissions should not be passed to non-EVM accounts\n    // this middleware intercepts these requests and returns an error.\n    engine.push(\n      createEvmMethodsToNonEvmAccountReqFilterMiddleware({\n        messenger: this.controllerMessenger.getRestricted({\n          name: 'EvmMethodsToNonEvmAccountFilterMessenger',\n          allowedActions: ['AccountsController:getSelectedAccount'],\n        }),\n      }),\n    );\n\n    // Unrestricted/permissionless RPC method implementations.\n    // They must nevertheless be placed _behind_ the permission middleware.\n    engine.push(\n      createMethodMiddleware({\n        origin,\n\n        subjectType,\n\n        // Miscellaneous\n        addSubjectMetadata:\n          this.subjectMetadataController.addSubjectMetadata.bind(\n            this.subjectMetadataController,\n          ),\n        metamaskState: this.getState(),\n        getProviderState: this.getProviderState.bind(this),\n        getUnlockPromise: this.appStateController.getUnlockPromise.bind(\n          this.appStateController,\n        ),\n        handleWatchAssetRequest: this.handleWatchAssetRequest.bind(this),\n        requestUserApproval:\n          this.approvalController.addAndShowApprovalRequest.bind(\n            this.approvalController,\n          ),\n        startApprovalFlow: this.approvalController.startFlow.bind(\n          this.approvalController,\n        ),\n        endApprovalFlow: this.approvalController.endFlow.bind(\n          this.approvalController,\n        ),\n        sendMetrics: this.metaMetricsController.trackEvent.bind(\n          this.metaMetricsController,\n        ),\n        // Permission-related\n        getAccounts: this.getPermittedAccounts.bind(this, origin),\n        getPermissionsForOrigin: this.permissionController.getPermissions.bind(\n          this.permissionController,\n          origin,\n        ),\n        hasPermission: this.permissionController.hasPermission.bind(\n          this.permissionController,\n          origin,\n        ),\n        requestAccountsPermission:\n          this.permissionController.requestPermissions.bind(\n            this.permissionController,\n            { origin },\n            { eth_accounts: {} },\n          ),\n        requestPermittedChainsPermission: (chainIds) =>\n          this.permissionController.requestPermissionsIncremental(\n            { origin },\n            {\n              [PermissionNames.permittedChains]: {\n                caveats: [\n                  CaveatFactories[CaveatTypes.restrictNetworkSwitching](\n                    chainIds,\n                  ),\n                ],\n              },\n            },\n          ),\n        requestPermissionsForOrigin:\n          this.permissionController.requestPermissions.bind(\n            this.permissionController,\n            { origin },\n          ),\n        revokePermissionsForOrigin: (permissionKeys) => {\n          try {\n            this.permissionController.revokePermissions({\n              [origin]: permissionKeys,\n            });\n          } catch (e) {\n            // we dont want to handle errors here because\n            // the revokePermissions api method should just\n            // return `null` if the permissions were not\n            // successfully revoked or if the permissions\n            // for the origin do not exist\n            console.log(e);\n          }\n        },\n        getCaveat: ({ target, caveatType }) => {\n          try {\n            return this.permissionController.getCaveat(\n              origin,\n              target,\n              caveatType,\n            );\n          } catch (e) {\n            if (e instanceof PermissionDoesNotExistError) {\n              // suppress expected error in case that the origin\n              // does not have the target permission yet\n            } else {\n              throw e;\n            }\n          }\n\n          return undefined;\n        },\n        getChainPermissionsFeatureFlag: () =>\n          Boolean(process.env.CHAIN_PERMISSIONS),\n        // network configuration-related\n        setActiveNetwork: async (networkClientId) => {\n          await this.networkController.setActiveNetwork(networkClientId);\n          // if the origin has the eth_accounts permission\n          // we set per dapp network selection state\n          if (\n            this.permissionController.hasPermission(\n              origin,\n              PermissionNames.eth_accounts,\n            )\n          ) {\n            this.selectedNetworkController.setNetworkClientIdForDomain(\n              origin,\n              networkClientId,\n            );\n          }\n        },\n        addNetwork: this.networkController.addNetwork.bind(\n          this.networkController,\n        ),\n        updateNetwork: this.networkController.updateNetwork.bind(\n          this.networkController,\n        ),\n        getNetworkConfigurationByChainId:\n          this.networkController.getNetworkConfigurationByChainId.bind(\n            this.networkController,\n          ),\n        getCurrentChainIdForDomain: (domain) => {\n          const networkClientId =\n            this.selectedNetworkController.getNetworkClientIdForDomain(domain);\n          const { chainId } =\n            this.networkController.getNetworkConfigurationByNetworkClientId(\n              networkClientId,\n            );\n          return chainId;\n        },\n\n        // Web3 shim-related\n        getWeb3ShimUsageState: this.alertController.getWeb3ShimUsageState.bind(\n          this.alertController,\n        ),\n        setWeb3ShimUsageRecorded:\n          this.alertController.setWeb3ShimUsageRecorded.bind(\n            this.alertController,\n          ),\n\n      }),\n    );\n\n    engine.push(\n      createSnapsMethodMiddleware(subjectType === SubjectType.Snap, {\n        getUnlockPromise: this.appStateController.getUnlockPromise.bind(\n          this.appStateController,\n        ),\n        getSnaps: this.controllerMessenger.call.bind(\n          this.controllerMessenger,\n          'SnapController:getPermitted',\n          origin,\n        ),\n        requestPermissions: async (requestedPermissions) =>\n          await this.permissionController.requestPermissions(\n            { origin },\n            requestedPermissions,\n          ),\n        getPermissions: this.permissionController.getPermissions.bind(\n          this.permissionController,\n          origin,\n        ),\n        getSnapFile: this.controllerMessenger.call.bind(\n          this.controllerMessenger,\n          'SnapController:getFile',\n          origin,\n        ),\n        installSnaps: this.controllerMessenger.call.bind(\n          this.controllerMessenger,\n          'SnapController:install',\n          origin,\n        ),\n        invokeSnap: this.permissionController.executeRestrictedMethod.bind(\n          this.permissionController,\n          origin,\n          RestrictedMethods.wallet_snap,\n        ),\n        getIsLocked: () => {\n          return !this.appStateController.isUnlocked();\n        },\n        getInterfaceState: (...args) =>\n          this.controllerMessenger.call(\n            'SnapInterfaceController:getInterface',\n            origin,\n            ...args,\n          ).state,\n        createInterface: this.controllerMessenger.call.bind(\n          this.controllerMessenger,\n          'SnapInterfaceController:createInterface',\n          origin,\n        ),\n        updateInterface: this.controllerMessenger.call.bind(\n          this.controllerMessenger,\n          'SnapInterfaceController:updateInterface',\n          origin,\n        ),\n        resolveInterface: this.controllerMessenger.call.bind(\n          this.controllerMessenger,\n          'SnapInterfaceController:resolveInterface',\n          origin,\n        ),\n        getSnap: this.controllerMessenger.call.bind(\n          this.controllerMessenger,\n          'SnapController:get',\n        ),\n        getAllSnaps: this.controllerMessenger.call.bind(\n          this.controllerMessenger,\n          'SnapController:getAll',\n        ),\n        ///: BEGIN:ONLY_INCLUDE_IF(keyring-snaps)\n        hasPermission: this.permissionController.hasPermission.bind(\n          this.permissionController,\n          origin,\n        ),\n        handleSnapRpcRequest: (args) =>\n          this.handleSnapRequest({ ...args, origin }),\n        getAllowedKeyringMethods: keyringSnapPermissionsBuilder(\n          this.subjectMetadataController,\n          origin,\n        ),\n        ///: END:ONLY_INCLUDE_IF\n      }),\n    );\n\n    engine.push(filterMiddleware);\n    engine.push(subscriptionManager.middleware);\n\n    engine.push(this.metamaskMiddleware);\n\n    engine.push(providerAsMiddleware(proxyClient.provider));\n\n    return engine;\n  }\n\n  /**\n   * A method for creating a CAIP provider that is safely restricted for the requesting subject.\n   *\n   * @param {object} options - Provider engine options\n   * @param {string} options.origin - The origin of the sender\n   * @param {tabId} [options.tabId] - The tab ID of the sender - if the sender is within a tab\n   */\n  setupProviderEngineCaip({ origin, tabId }) {\n    const engine = new JsonRpcEngine();\n\n    engine.push((request, _res, _next, end) => {\n      console.log('CAIP request received', { origin, tabId, request });\n      return end(new Error('CAIP RPC Pipeline not yet implemented.'));\n    });\n\n    return engine;\n  }\n\n  /**\n   * TODO:LegacyProvider: Delete\n   * A method for providing our public config info over a stream.\n   * This includes info we like to be synchronous if possible, like\n   * the current selected account, and network ID.\n   *\n   * Since synchronous methods have been deprecated in web3,\n   * this is a good candidate for deprecation.\n   *\n   * @param {*} outStream - The stream to provide public config over.\n   */\n  setupPublicConfig(outStream) {\n    const configStream = storeAsStream(this.publicConfigStore);\n\n    pipeline(configStream, outStream, (err) => {\n      configStream.destroy();\n      // For context and todos related to the error message match, see https://github.com/MetaMask/metamask-extension/issues/26337\n      if (err && !err.message?.match('Premature close')) {\n        log.error(err);\n      }\n    });\n  }\n\n  /**\n   * Adds a reference to a connection by origin. Ignores the 'metamask' origin.\n   * Caller must ensure that the returned id is stored such that the reference\n   * can be deleted later.\n   *\n   * @param {string} origin - The connection's origin string.\n   * @param {object} options - Data associated with the connection\n   * @param {object} options.engine - The connection's JSON Rpc Engine\n   * @returns {string} The connection's id (so that it can be deleted later)\n   */\n  addConnection(origin, { engine }) {\n    if (origin === ORIGIN_METAMASK) {\n      return null;\n    }\n\n    if (!this.connections[origin]) {\n      this.connections[origin] = {};\n    }\n\n    const id = nanoid();\n    this.connections[origin][id] = {\n      engine,\n    };\n\n    return id;\n  }\n\n  /**\n   * Deletes a reference to a connection, by origin and id.\n   * Ignores unknown origins.\n   *\n   * @param {string} origin - The connection's origin string.\n   * @param {string} id - The connection's id, as returned from addConnection.\n   */\n  removeConnection(origin, id) {\n    const connections = this.connections[origin];\n    if (!connections) {\n      return;\n    }\n\n    delete connections[id];\n\n    if (Object.keys(connections).length === 0) {\n      delete this.connections[origin];\n    }\n  }\n\n  /**\n   * Closes all connections for the given origin, and removes the references\n   * to them.\n   * Ignores unknown origins.\n   *\n   * @param {string} origin - The origin string.\n   */\n  removeAllConnections(origin) {\n    const connections = this.connections[origin];\n    if (!connections) {\n      return;\n    }\n\n    Object.keys(connections).forEach((id) => {\n      this.removeConnection(origin, id);\n    });\n  }\n\n  /**\n   * Causes the RPC engines associated with the connections to the given origin\n   * to emit a notification event with the given payload.\n   *\n   * The caller is responsible for ensuring that only permitted notifications\n   * are sent.\n   *\n   * Ignores unknown origins.\n   *\n   * @param {string} origin - The connection's origin string.\n   * @param {unknown} payload - The event payload.\n   */\n  notifyConnections(origin, payload) {\n    const connections = this.connections[origin];\n\n    if (connections) {\n      Object.values(connections).forEach((conn) => {\n        if (conn.engine) {\n          conn.engine.emit('notification', payload);\n        }\n      });\n    }\n  }\n\n  /**\n   * Causes the RPC engines associated with all connections to emit a\n   * notification event with the given payload.\n   *\n   * If the \"payload\" parameter is a function, the payload for each connection\n   * will be the return value of that function called with the connection's\n   * origin.\n   *\n   * The caller is responsible for ensuring that only permitted notifications\n   * are sent.\n   *\n   * @param {unknown} payload - The event payload, or payload getter function.\n   */\n  notifyAllConnections(payload) {\n    const getPayload =\n      typeof payload === 'function'\n        ? (origin) => payload(origin)\n        : () => payload;\n\n    Object.keys(this.connections).forEach((origin) => {\n      Object.values(this.connections[origin]).forEach(async (conn) => {\n        try {\n          this.notifyConnection(conn, await getPayload(origin));\n        } catch (err) {\n          console.error(err);\n        }\n      });\n    });\n  }\n\n  /**\n   * Causes the RPC engine for passed connection to emit a\n   * notification event with the given payload.\n   *\n   * The caller is responsible for ensuring that only permitted notifications\n   * are sent.\n   *\n   * @param {object} connection - Data associated with the connection\n   * @param {object} connection.engine - The connection's JSON Rpc Engine\n   * @param {unknown} payload - The event payload\n   */\n  notifyConnection(connection, payload) {\n    try {\n      if (connection.engine) {\n        connection.engine.emit('notification', payload);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  // handlers\n\n  /**\n   * Handle a KeyringController update\n   *\n   * @param {object} state - the KC state\n   * @returns {Promise<void>}\n   * @private\n   */\n  async _onKeyringControllerUpdate(state) {\n    const { keyrings } = state;\n\n    // The accounts tracker only supports EVM addresses and the keyring\n    // controller may pass non-EVM addresses, so we filter them out\n    const addresses = keyrings\n      .reduce((acc, { accounts }) => acc.concat(accounts), [])\n      .filter(isEthAddress);\n\n    if (!addresses.length) {\n      return;\n    }\n\n    this.accountTracker.syncWithAddresses(addresses);\n  }\n\n  /**\n   * Handle global application unlock.\n   * Notifies all connections that the extension is unlocked, and which\n   * account(s) are currently accessible, if any.\n   */\n  _onUnlock() {\n    this.notifyAllConnections(async (origin) => {\n      return {\n        method: NOTIFICATION_NAMES.unlockStateChanged,\n        params: {\n          isUnlocked: true,\n          accounts: await this.getPermittedAccounts(origin),\n        },\n      };\n    });\n\n    this.unMarkPasswordForgotten();\n\n    // In the current implementation, this handler is triggered by a\n    // KeyringController event. Other controllers subscribe to the 'unlock'\n    // event of the MetaMaskController itself.\n    this.emit('unlock');\n  }\n\n  /**\n   * Handle global application lock.\n   * Notifies all connections that the extension is locked.\n   */\n  _onLock() {\n    this.notifyAllConnections({\n      method: NOTIFICATION_NAMES.unlockStateChanged,\n      params: {\n        isUnlocked: false,\n      },\n    });\n\n    // In the current implementation, this handler is triggered by a\n    // KeyringController event. Other controllers subscribe to the 'lock'\n    // event of the MetaMaskController itself.\n    this.emit('lock');\n  }\n\n  /**\n   * Handle memory state updates.\n   * - Ensure isClientOpenAndUnlocked is updated\n   * - Notifies all connections with the new provider network state\n   *   - The external providers handle diffing the state\n   *\n   * @param newState\n   */\n  _onStateUpdate(newState) {\n    this.isClientOpenAndUnlocked = newState.isUnlocked && this._isClientOpen;\n    this._notifyChainChange();\n  }\n\n  // misc\n\n  /**\n   * A method for emitting the full MetaMask state to all registered listeners.\n   *\n   * @private\n   */\n  privateSendUpdate() {\n    this.emit('update', this.getState());\n  }\n\n  /**\n   * @returns {boolean} Whether the extension is unlocked.\n   */\n  isUnlocked() {\n    return this.keyringController.state.isUnlocked;\n  }\n\n  //=============================================================================\n  // MISCELLANEOUS\n  //=============================================================================\n\n  getExternalPendingTransactions(address) {\n    return this.smartTransactionsController.getTransactions({\n      addressFrom: address,\n      status: 'pending',\n    });\n  }\n\n  /**\n   * Returns the nonce that will be associated with a transaction once approved\n   *\n   * @param {string} address - The hex string address for the transaction\n   * @param networkClientId - The optional networkClientId to get the nonce lock with\n   * @returns {Promise<number>}\n   */\n  async getPendingNonce(address, networkClientId) {\n    const { nonceDetails, releaseLock } = await this.txController.getNonceLock(\n      address,\n      process.env.TRANSACTION_MULTICHAIN ? networkClientId : undefined,\n    );\n\n    const pendingNonce = nonceDetails.params.highestSuggested;\n\n    releaseLock();\n    return pendingNonce;\n  }\n\n  /**\n   * Returns the next nonce according to the nonce-tracker\n   *\n   * @param {string} address - The hex string address for the transaction\n   * @param networkClientId - The optional networkClientId to get the nonce lock with\n   * @returns {Promise<number>}\n   */\n  async getNextNonce(address, networkClientId) {\n    const nonceLock = await this.txController.getNonceLock(\n      address,\n      process.env.TRANSACTION_MULTICHAIN ? networkClientId : undefined,\n    );\n    nonceLock.releaseLock();\n    return nonceLock.nextNonce;\n  }\n\n  /**\n   * Throw an artificial error in a timeout handler for testing purposes.\n   *\n   * @param message - The error message.\n   * @deprecated This is only mean to facilitiate E2E testing. We should not\n   * use this for handling errors.\n   */\n  throwTestError(message) {\n    setTimeout(() => {\n      const error = new Error(message);\n      error.name = 'TestError';\n      throw error;\n    });\n  }\n\n  /**\n   * A method for setting TransactionController event listeners\n   */\n  _addTransactionControllerListeners() {\n    const transactionMetricsRequest = this.getTransactionMetricsRequest();\n\n    this.controllerMessenger.subscribe(\n      'TransactionController:postTransactionBalanceUpdated',\n      handlePostTransactionBalanceUpdate.bind(null, transactionMetricsRequest),\n    );\n\n    this.controllerMessenger.subscribe(\n      'TransactionController:unapprovedTransactionAdded',\n      (transactionMeta) =>\n        handleTransactionAdded(transactionMetricsRequest, { transactionMeta }),\n    );\n\n    this.controllerMessenger.subscribe(\n      'TransactionController:transactionApproved',\n      handleTransactionApproved.bind(null, transactionMetricsRequest),\n    );\n\n    this.controllerMessenger.subscribe(\n      'TransactionController:transactionDropped',\n      handleTransactionDropped.bind(null, transactionMetricsRequest),\n    );\n\n    this.controllerMessenger.subscribe(\n      'TransactionController:transactionConfirmed',\n      handleTransactionConfirmed.bind(null, transactionMetricsRequest),\n    );\n\n    this.controllerMessenger.subscribe(\n      'TransactionController:transactionFailed',\n      handleTransactionFailed.bind(null, transactionMetricsRequest),\n    );\n\n    this.controllerMessenger.subscribe(\n      'TransactionController:transactionNewSwap',\n      ({ transactionMeta }) =>\n        // TODO: This can be called internally by the TransactionController\n        // since Swaps Controller registers this action handler\n        this.controllerMessenger.call(\n          'SwapsController:setTradeTxId',\n          transactionMeta.id,\n        ),\n    );\n\n    this.controllerMessenger.subscribe(\n      'TransactionController:transactionNewSwapApproval',\n      ({ transactionMeta }) =>\n        // TODO: This can be called internally by the TransactionController\n        // since Swaps Controller registers this action handler\n        this.controllerMessenger.call(\n          'SwapsController:setApproveTxId',\n          transactionMeta.id,\n        ),\n    );\n\n    this.controllerMessenger.subscribe(\n      'TransactionController:transactionRejected',\n      handleTransactionRejected.bind(null, transactionMetricsRequest),\n    );\n\n    this.controllerMessenger.subscribe(\n      'TransactionController:transactionSubmitted',\n      handleTransactionSubmitted.bind(null, transactionMetricsRequest),\n    );\n\n    this.controllerMessenger.subscribe(\n      'TransactionController:transactionStatusUpdated',\n      ({ transactionMeta }) => {\n        this._onFinishedTransaction(transactionMeta);\n      },\n    );\n  }\n\n  getTransactionMetricsRequest() {\n    const controllerActions = {\n      // Metametrics Actions\n      createEventFragment: this.metaMetricsController.createEventFragment.bind(\n        this.metaMetricsController,\n      ),\n      finalizeEventFragment:\n        this.metaMetricsController.finalizeEventFragment.bind(\n          this.metaMetricsController,\n        ),\n      getEventFragmentById:\n        this.metaMetricsController.getEventFragmentById.bind(\n          this.metaMetricsController,\n        ),\n      getParticipateInMetrics: () =>\n        this.metaMetricsController.state.participateInMetaMetrics,\n      trackEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n      updateEventFragment: this.metaMetricsController.updateEventFragment.bind(\n        this.metaMetricsController,\n      ),\n      // Other dependencies\n      getAccountType: this.getAccountType.bind(this),\n      getDeviceModel: this.getDeviceModel.bind(this),\n      getEIP1559GasFeeEstimates:\n        this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),\n      getSelectedAddress: () =>\n        this.accountsController.getSelectedAccount().address,\n      getTokenStandardAndDetails: this.getTokenStandardAndDetails.bind(this),\n      getTransaction: (id) =>\n        this.txController.state.transactions.find((tx) => tx.id === id),\n      getIsSmartTransaction: () => {\n        return getIsSmartTransaction(this._getMetaMaskState());\n      },\n      getSmartTransactionByMinedTxHash: (txHash) => {\n        return this.smartTransactionsController.getSmartTransactionByMinedTxHash(\n          txHash,\n        );\n      },\n      getRedesignedConfirmationsEnabled: () => {\n        return this.preferencesController.getRedesignedConfirmationsEnabled;\n      },\n      getRedesignedTransactionsEnabled: () => {\n        return this.preferencesController.getRedesignedTransactionsEnabled;\n      },\n      getMethodData: (data) => {\n        if (!data) {\n          return null;\n        }\n        const { knownMethodData, use4ByteResolution } =\n          this.preferencesController.store.getState();\n        const prefixedData = addHexPrefix(data);\n        return getMethodDataName(\n          knownMethodData,\n          use4ByteResolution,\n          prefixedData,\n          this.preferencesController.addKnownMethodData.bind(\n            this.preferencesController,\n          ),\n          this.provider,\n        );\n      },\n      getIsRedesignedConfirmationsDeveloperEnabled: () => {\n        return this.preferencesController.store.getState().preferences\n          .isRedesignedConfirmationsDeveloperEnabled;\n      },\n      getIsConfirmationAdvancedDetailsOpen: () => {\n        return this.preferencesController.store.getState().preferences\n          .showConfirmationAdvancedDetails;\n      },\n    };\n    return {\n      ...controllerActions,\n      snapAndHardwareMessenger: this.controllerMessenger.getRestricted({\n        name: 'SnapAndHardwareMessenger',\n        allowedActions: [\n          'KeyringController:getKeyringForAccount',\n          'SnapController:get',\n          'AccountsController:getSelectedAccount',\n        ],\n      }),\n      provider: this.provider,\n    };\n  }\n\n  toggleExternalServices(useExternal) {\n    this.preferencesController.toggleExternalServices(useExternal);\n    this.tokenListController.updatePreventPollingOnNetworkRestart(!useExternal);\n    if (useExternal) {\n      this.tokenDetectionController.enable();\n      this.gasFeeController.enableNonRPCGasFeeApis();\n    } else {\n      this.tokenDetectionController.disable();\n      this.gasFeeController.disableNonRPCGasFeeApis();\n    }\n  }\n\n  //=============================================================================\n  // CONFIG\n  //=============================================================================\n\n  /**\n   * Sets the Ledger Live preference to use for Ledger hardware wallet support\n   *\n   * @param _keyring\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Only webhid connections are supported in chrome and u2f in firefox.\n   */\n  async setLedgerTransportPreference(_keyring) {\n    const transportType = window.navigator.hid\n      ? LedgerTransportTypes.webhid\n      : LedgerTransportTypes.u2f;\n    const keyring =\n      _keyring || (await this.getKeyringForDevice(HardwareDeviceNames.ledger));\n    if (keyring?.updateTransportMethod) {\n      return keyring.updateTransportMethod(transportType).catch((e) => {\n        throw e;\n      });\n    }\n\n    return undefined;\n  }\n\n  /**\n   * A method for initializing storage the first time.\n   *\n   * @param {object} initState - The default state to initialize with.\n   * @private\n   */\n  recordFirstTimeInfo(initState) {\n    if (!('firstTimeInfo' in initState)) {\n      const version = process.env.METAMASK_VERSION;\n      initState.firstTimeInfo = {\n        version,\n        date: Date.now(),\n      };\n    }\n  }\n\n  // TODO: Replace isClientOpen methods with `controllerConnectionChanged` events.\n  /* eslint-disable accessor-pairs */\n  /**\n   * A method for recording whether the MetaMask user interface is open or not.\n   *\n   * @param {boolean} open\n   */\n  set isClientOpen(open) {\n    this._isClientOpen = open;\n  }\n  /* eslint-enable accessor-pairs */\n\n  /**\n   * A method that is called by the background when all instances of metamask are closed.\n   * Currently used to stop polling in the gasFeeController.\n   */\n  onClientClosed() {\n    try {\n      this.gasFeeController.stopAllPolling();\n      this.currencyRateController.stopAllPolling();\n      this.appStateController.clearPollingTokens();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * A method that is called by the background when a particular environment type is closed (fullscreen, popup, notification).\n   * Currently used to stop polling in the gasFeeController for only that environement type\n   *\n   * @param environmentType\n   */\n  onEnvironmentTypeClosed(environmentType) {\n    const appStatePollingTokenType =\n      POLLING_TOKEN_ENVIRONMENT_TYPES[environmentType];\n    const pollingTokensToDisconnect =\n      this.appStateController.store.getState()[appStatePollingTokenType];\n    pollingTokensToDisconnect.forEach((pollingToken) => {\n      this.gasFeeController.stopPollingByPollingToken(pollingToken);\n      this.currencyRateController.stopPollingByPollingToken(pollingToken);\n      this.appStateController.removePollingToken(\n        pollingToken,\n        appStatePollingTokenType,\n      );\n    });\n  }\n\n  /**\n   * Adds a domain to the PhishingController safelist\n   *\n   * @param {string} origin - the domain to safelist\n   */\n  safelistPhishingDomain(origin) {\n    return this.phishingController.bypass(origin);\n  }\n\n  async backToSafetyPhishingWarning() {\n    const extensionURL = this.platform.getExtensionURL();\n    await this.platform.switchToAnotherURL(undefined, extensionURL);\n  }\n\n  /**\n   * Locks MetaMask\n   */\n  setLocked() {\n    return this.keyringController.setLocked();\n  }\n\n  removePermissionsFor = (subjects) => {\n    try {\n      this.permissionController.revokePermissions(subjects);\n    } catch (exp) {\n      if (!(exp instanceof PermissionsRequestNotFoundError)) {\n        throw exp;\n      }\n    }\n  };\n\n  updateCaveat = (origin, target, caveatType, caveatValue) => {\n    try {\n      this.controllerMessenger.call(\n        'PermissionController:updateCaveat',\n        origin,\n        target,\n        caveatType,\n        caveatValue,\n      );\n    } catch (exp) {\n      if (!(exp instanceof PermissionsRequestNotFoundError)) {\n        throw exp;\n      }\n    }\n  };\n\n  updateNetworksList = (chainIds) => {\n    try {\n      this.networkOrderController.updateNetworksList(chainIds);\n    } catch (err) {\n      log.error(err.message);\n      throw err;\n    }\n  };\n\n  updateAccountsList = (pinnedAccountList) => {\n    try {\n      this.accountOrderController.updateAccountsList(pinnedAccountList);\n    } catch (err) {\n      log.error(err.message);\n      throw err;\n    }\n  };\n\n  updateHiddenAccountsList = (hiddenAccountList) => {\n    try {\n      this.accountOrderController.updateHiddenAccountsList(hiddenAccountList);\n    } catch (err) {\n      log.error(err.message);\n      throw err;\n    }\n  };\n\n  rejectPermissionsRequest = (requestId) => {\n    try {\n      this.permissionController.rejectPermissionsRequest(requestId);\n    } catch (exp) {\n      if (!(exp instanceof PermissionsRequestNotFoundError)) {\n        throw exp;\n      }\n    }\n  };\n\n  acceptPermissionsRequest = (request) => {\n    try {\n      this.permissionController.acceptPermissionsRequest(request);\n    } catch (exp) {\n      if (!(exp instanceof PermissionsRequestNotFoundError)) {\n        throw exp;\n      }\n    }\n  };\n\n  resolvePendingApproval = async (id, value, options) => {\n    try {\n      await this.approvalController.accept(id, value, options);\n    } catch (exp) {\n      if (!(exp instanceof ApprovalRequestNotFoundError)) {\n        throw exp;\n      }\n    }\n  };\n\n  rejectPendingApproval = (id, error) => {\n    try {\n      this.approvalController.reject(\n        id,\n        new EthereumRpcError(error.code, error.message, error.data),\n      );\n    } catch (exp) {\n      if (!(exp instanceof ApprovalRequestNotFoundError)) {\n        throw exp;\n      }\n    }\n  };\n\n  async _onAccountChange(newAddress) {\n    const permittedAccountsMap = getPermittedAccountsByOrigin(\n      this.permissionController.state,\n    );\n\n    for (const [origin, accounts] of permittedAccountsMap.entries()) {\n      if (accounts.includes(newAddress)) {\n        this._notifyAccountsChange(origin, accounts);\n      }\n    }\n\n    await this.txController.updateIncomingTransactions();\n  }\n\n  async _notifyAccountsChange(origin, newAccounts) {\n    if (this.isUnlocked()) {\n      this.notifyConnections(origin, {\n        method: NOTIFICATION_NAMES.accountsChanged,\n        // This should be the same as the return value of `eth_accounts`,\n        // namely an array of the current / most recently selected Ethereum\n        // account.\n        params:\n          newAccounts.length < 2\n            ? // If the length is 1 or 0, the accounts are sorted by definition.\n              newAccounts\n            : // If the length is 2 or greater, we have to execute\n              // `eth_accounts` vi this method.\n              await this.getPermittedAccounts(origin),\n      });\n    }\n\n    this.permissionLogController.updateAccountsHistory(origin, newAccounts);\n  }\n\n  async _notifyChainChange() {\n    if (this.preferencesController.getUseRequestQueue()) {\n      this.notifyAllConnections(async (origin) => ({\n        method: NOTIFICATION_NAMES.chainChanged,\n        params: await this.getProviderNetworkState(origin),\n      }));\n    } else {\n      this.notifyAllConnections({\n        method: NOTIFICATION_NAMES.chainChanged,\n        params: await this.getProviderNetworkState(),\n      });\n    }\n  }\n\n  async _notifyChainChangeForConnection(connection, origin) {\n    if (this.preferencesController.getUseRequestQueue()) {\n      this.notifyConnection(connection, {\n        method: NOTIFICATION_NAMES.chainChanged,\n        params: await this.getProviderNetworkState(origin),\n      });\n    } else {\n      this.notifyConnection(connection, {\n        method: NOTIFICATION_NAMES.chainChanged,\n        params: await this.getProviderNetworkState(),\n      });\n    }\n  }\n\n  async _onFinishedTransaction(transactionMeta) {\n    if (\n      ![TransactionStatus.confirmed, TransactionStatus.failed].includes(\n        transactionMeta.status,\n      )\n    ) {\n      return;\n    }\n\n    await this._createTransactionNotifcation(transactionMeta);\n    await this._updateNFTOwnership(transactionMeta);\n    this._trackTransactionFailure(transactionMeta);\n  }\n\n  async _createTransactionNotifcation(transactionMeta) {\n    const { chainId } = transactionMeta;\n    let rpcPrefs = {};\n\n    if (chainId) {\n      const networkConfiguration =\n        this.networkController.state.networkConfigurationsByChainId?.[chainId];\n\n      const blockExplorerUrl =\n        networkConfiguration?.blockExplorerUrls?.[\n          networkConfiguration?.defaultBlockExplorerUrlIndex\n        ];\n\n      rpcPrefs = { blockExplorerUrl };\n    }\n\n    try {\n      await this.platform.showTransactionNotification(\n        transactionMeta,\n        rpcPrefs,\n      );\n    } catch (error) {\n      log.error('Failed to create transaction notification', error);\n    }\n  }\n\n  async _updateNFTOwnership(transactionMeta) {\n    // if this is a transferFrom method generated from within the app it may be an NFT transfer transaction\n    // in which case we will want to check and update ownership status of the transferred NFT.\n\n    const { type, txParams, chainId, txReceipt } = transactionMeta;\n    const selectedAddress =\n      this.accountsController.getSelectedAccount().address;\n\n    const { allNfts } = this.nftController.state;\n    const txReceiptLogs = txReceipt?.logs;\n\n    const isContractInteractionTx =\n      type === TransactionType.contractInteraction && txReceiptLogs;\n    const isTransferFromTx =\n      (type === TransactionType.tokenMethodTransferFrom ||\n        type === TransactionType.tokenMethodSafeTransferFrom) &&\n      txParams !== undefined;\n\n    if (!isContractInteractionTx && !isTransferFromTx) {\n      return;\n    }\n\n    if (isTransferFromTx) {\n      const { data, to: contractAddress, from: userAddress } = txParams;\n      const transactionData = parseStandardTokenTransactionData(data);\n      // Sometimes the tokenId value is parsed as \"_value\" param. Not seeing this often any more, but still occasionally:\n      // i.e. call approve() on BAYC contract - https://etherscan.io/token/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#writeContract, and tokenId shows up as _value,\n      // not sure why since it doesn't match the ERC721 ABI spec we use to parse these transactions - https://github.com/MetaMask/metamask-eth-abis/blob/d0474308a288f9252597b7c93a3a8deaad19e1b2/src/abis/abiERC721.ts#L62.\n      const transactionDataTokenId =\n        getTokenIdParam(transactionData) ?? getTokenValueParam(transactionData);\n\n      // check if its a known NFT\n      const knownNft = allNfts?.[userAddress]?.[chainId]?.find(\n        ({ address, tokenId }) =>\n          isEqualCaseInsensitive(address, contractAddress) &&\n          tokenId === transactionDataTokenId,\n      );\n\n      // if it is we check and update ownership status.\n      if (knownNft) {\n        this.nftController.checkAndUpdateSingleNftOwnershipStatus(\n          knownNft,\n          false,\n          // TODO add networkClientId once it is available in the transactionMeta\n          // the chainId previously passed here didn't actually allow us to check for ownership on a non globally selected network\n          // because the check would use the provider for the globally selected network, not the chainId passed here.\n          { userAddress },\n        );\n      }\n    } else {\n      // Else if contract interaction we will parse the logs\n\n      const allNftTransferLog = txReceiptLogs.map((txReceiptLog) => {\n        const isERC1155NftTransfer =\n          txReceiptLog.topics &&\n          txReceiptLog.topics[0] === TRANSFER_SINFLE_LOG_TOPIC_HASH;\n        const isERC721NftTransfer =\n          txReceiptLog.topics &&\n          txReceiptLog.topics[0] === TOKEN_TRANSFER_LOG_TOPIC_HASH;\n        let isTransferToSelectedAddress;\n\n        if (isERC1155NftTransfer) {\n          isTransferToSelectedAddress =\n            txReceiptLog.topics &&\n            txReceiptLog.topics[3] &&\n            txReceiptLog.topics[3].match(selectedAddress?.slice(2));\n        }\n\n        if (isERC721NftTransfer) {\n          isTransferToSelectedAddress =\n            txReceiptLog.topics &&\n            txReceiptLog.topics[2] &&\n            txReceiptLog.topics[2].match(selectedAddress?.slice(2));\n        }\n\n        return {\n          isERC1155NftTransfer,\n          isERC721NftTransfer,\n          isTransferToSelectedAddress,\n          ...txReceiptLog,\n        };\n      });\n      if (allNftTransferLog.length !== 0) {\n        const allNftParsedLog = [];\n        allNftTransferLog.forEach((singleLog) => {\n          if (\n            singleLog.isTransferToSelectedAddress &&\n            (singleLog.isERC1155NftTransfer || singleLog.isERC721NftTransfer)\n          ) {\n            let iface;\n            if (singleLog.isERC1155NftTransfer) {\n              iface = new Interface(abiERC1155);\n            } else {\n              iface = new Interface(abiERC721);\n            }\n            try {\n              const parsedLog = iface.parseLog({\n                data: singleLog.data,\n                topics: singleLog.topics,\n              });\n              allNftParsedLog.push({\n                contract: singleLog.address,\n                ...parsedLog,\n              });\n            } catch (err) {\n              // ignore\n            }\n          }\n        });\n        // Filter known nfts and new Nfts\n        const knownNFTs = [];\n        const newNFTs = [];\n        allNftParsedLog.forEach((single) => {\n          const tokenIdFromLog = getTokenIdParam(single);\n          const existingNft = allNfts?.[selectedAddress]?.[chainId]?.find(\n            ({ address, tokenId }) => {\n              return (\n                isEqualCaseInsensitive(address, single.contract) &&\n                tokenId === tokenIdFromLog\n              );\n            },\n          );\n          if (existingNft) {\n            knownNFTs.push(existingNft);\n          } else {\n            newNFTs.push({\n              tokenId: tokenIdFromLog,\n              ...single,\n            });\n          }\n        });\n        // For known nfts only refresh ownership\n        const refreshOwnershipNFts = knownNFTs.map(async (singleNft) => {\n          return this.nftController.checkAndUpdateSingleNftOwnershipStatus(\n            singleNft,\n            false,\n            // TODO add networkClientId once it is available in the transactionMeta\n            // the chainId previously passed here didn't actually allow us to check for ownership on a non globally selected network\n            // because the check would use the provider for the globally selected network, not the chainId passed here.\n            { selectedAddress },\n          );\n        });\n        await Promise.allSettled(refreshOwnershipNFts);\n        // For new nfts, add them to state\n        const addNftPromises = newNFTs.map(async (singleNft) => {\n          return this.nftController.addNft(\n            singleNft.contract,\n            singleNft.tokenId,\n          );\n        });\n        await Promise.allSettled(addNftPromises);\n      }\n    }\n  }\n\n  _trackTransactionFailure(transactionMeta) {\n    const { txReceipt } = transactionMeta;\n    const metamaskState = this.getState();\n\n    if (!txReceipt || txReceipt.status !== '0x0') {\n      return;\n    }\n\n    this.metaMetricsController.trackEvent(\n      {\n        event: 'Tx Status Update: On-Chain Failure',\n        category: MetaMetricsEventCategory.Background,\n        properties: {\n          action: 'Transactions',\n          errorMessage: transactionMeta.simulationFails?.reason,\n          numberOfTokens: metamaskState.tokens.length,\n          numberOfAccounts: Object.keys(metamaskState.accounts).length,\n        },\n      },\n      {\n        matomoEvent: true,\n      },\n    );\n  }\n\n  _onUserOperationAdded(userOperationMeta) {\n    const transactionMeta = this.txController.state.transactions.find(\n      (tx) => tx.id === userOperationMeta.id,\n    );\n\n    if (!transactionMeta) {\n      return;\n    }\n\n    if (transactionMeta.type === TransactionType.swap) {\n      this.controllerMessenger.publish(\n        'TransactionController:transactionNewSwap',\n        { transactionMeta },\n      );\n    } else if (transactionMeta.type === TransactionType.swapApproval) {\n      this.controllerMessenger.publish(\n        'TransactionController:transactionNewSwapApproval',\n        { transactionMeta },\n      );\n    }\n  }\n\n  _onUserOperationTransactionUpdated(transactionMeta) {\n    const updatedTransactionMeta = {\n      ...transactionMeta,\n      txParams: {\n        ...transactionMeta.txParams,\n        from: this.accountsController.getSelectedAccount().address,\n      },\n    };\n\n    const transactionExists = this.txController.state.transactions.some(\n      (tx) => tx.id === updatedTransactionMeta.id,\n    );\n\n    if (!transactionExists) {\n      this.txController.update((state) => {\n        state.transactions.push(updatedTransactionMeta);\n      });\n    }\n\n    this.txController.updateTransaction(\n      updatedTransactionMeta,\n      'Generated from user operation',\n    );\n\n    this.controllerMessenger.publish(\n      'TransactionController:transactionStatusUpdated',\n      { transactionMeta: updatedTransactionMeta },\n    );\n  }\n\n  _publishSmartTransactionHook(transactionMeta, signedTransactionInHex) {\n    const state = this._getMetaMaskState();\n    const isSmartTransaction = getIsSmartTransaction(state);\n    if (!isSmartTransaction) {\n      // Will cause TransactionController to publish to the RPC provider as normal.\n      return { transactionHash: undefined };\n    }\n    const featureFlags = getFeatureFlagsByChainId(state);\n    return submitSmartTransactionHook({\n      transactionMeta,\n      signedTransactionInHex,\n      transactionController: this.txController,\n      smartTransactionsController: this.smartTransactionsController,\n      controllerMessenger: this.controllerMessenger,\n      isSmartTransaction,\n      isHardwareWallet: isHardwareWallet(state),\n      featureFlags,\n    });\n  }\n\n  _getMetaMaskState() {\n    return {\n      metamask: this.getState(),\n    };\n  }\n\n  async #onPreferencesControllerStateChange(currentState, previousState) {\n    const { currentLocale } = currentState;\n    const chainId = getCurrentChainId({\n      metamask: this.networkController.state,\n    });\n\n    await updateCurrentLocale(currentLocale);\n\n    if (currentState.incomingTransactionsPreferences?.[chainId]) {\n      this.txController.startIncomingTransactionPolling();\n    } else {\n      this.txController.stopIncomingTransactionPolling();\n    }\n\n    this.#checkTokenListPolling(currentState, previousState);\n\n    // TODO: Remove once the preferences controller has been replaced with the core monorepo implementation\n    this.controllerMessenger.publish(\n      'PreferencesController:stateChange',\n      currentState,\n      [],\n    );\n  }\n\n  #checkTokenListPolling(currentState, previousState) {\n    const previousEnabled = this.#isTokenListPollingRequired(previousState);\n    const newEnabled = this.#isTokenListPollingRequired(currentState);\n\n    if (previousEnabled === newEnabled) {\n      return;\n    }\n\n    this.tokenListController.updatePreventPollingOnNetworkRestart(!newEnabled);\n\n    if (newEnabled) {\n      log.debug('Started token list controller polling');\n      this.tokenListController.start();\n    } else {\n      log.debug('Stopped token list controller polling');\n      this.tokenListController.clearingTokenListData();\n      this.tokenListController.stop();\n    }\n  }\n\n  #isTokenListPollingRequired(preferencesControllerState) {\n    const { useTokenDetection, useTransactionSimulations, preferences } =\n      preferencesControllerState ?? {};\n\n    const { petnamesEnabled } = preferences ?? {};\n\n    return useTokenDetection || petnamesEnabled || useTransactionSimulations;\n  }\n}\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAsyncMiddleware = void 0;\n/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n *\n * @param asyncMiddleware - The asynchronous middleware function to wrap.\n * @returns The wrapped asynchronous middleware function, ready to be consumed\n * by JsonRpcEngine.\n */\nfunction createAsyncMiddleware(asyncMiddleware) {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    return (request, response, next, end) => __awaiter(this, void 0, void 0, function* () {\n        // nextPromise is the key to the implementation\n        // it is resolved by the return handler passed to the\n        // \"next\" function\n        let resolveNextPromise;\n        const nextPromise = new Promise((resolve) => {\n            resolveNextPromise = resolve;\n        });\n        let returnHandlerCallback = null;\n        let nextWasCalled = false;\n        // This will be called by the consumer's async middleware.\n        const asyncNext = () => __awaiter(this, void 0, void 0, function* () {\n            nextWasCalled = true;\n            // We pass a return handler to next(). When it is called by the engine,\n            // the consumer's async middleware will resume executing.\n            next((runReturnHandlersCallback) => {\n                // This callback comes from JsonRpcEngine._runReturnHandlers\n                returnHandlerCallback = runReturnHandlersCallback;\n                resolveNextPromise();\n            });\n            return nextPromise;\n        });\n        try {\n            yield asyncMiddleware(request, response, asyncNext);\n            if (nextWasCalled) {\n                yield nextPromise; // we must wait until the return handler is called\n                returnHandlerCallback(null);\n            }\n            else {\n                end(null);\n            }\n            // TODO: Replace `any` with type\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        catch (error) {\n            if (returnHandlerCallback) {\n                returnHandlerCallback(error);\n            }\n            else {\n                end(error);\n            }\n        }\n    });\n}\nexports.createAsyncMiddleware = createAsyncMiddleware;\n//# sourceMappingURL=createAsyncMiddleware.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createScaffoldMiddleware = void 0;\n/**\n * Creates a middleware function from an object of RPC method handler functions,\n * keyed to particular method names. If a method corresponding to a key of this\n * object is requested, this middleware will pass it to the corresponding\n * handler and return the result.\n *\n * @param handlers - The RPC method handler functions.\n * @returns The scaffold middleware function.\n */\nfunction createScaffoldMiddleware(handlers) {\n    return (req, res, next, end) => {\n        const handler = handlers[req.method];\n        // if no handler, return\n        if (handler === undefined) {\n            return next();\n        }\n        // if handler is fn, call as middleware\n        if (typeof handler === 'function') {\n            return handler(req, res, next, end);\n        }\n        // if handler is some other value, use as result\n        res.result = handler;\n        return end();\n    };\n}\nexports.createScaffoldMiddleware = createScaffoldMiddleware;\n//# sourceMappingURL=createScaffoldMiddleware.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUniqueId = void 0;\n// uint32 (two's complement) max\n// more conservative than Number.MAX_SAFE_INTEGER\nconst MAX = 4294967295;\nlet idCounter = Math.floor(Math.random() * MAX);\n/**\n * Gets an ID that is guaranteed to be unique so long as no more than\n * 4_294_967_295 (uint32 max) IDs are created, or the IDs are rapidly turned\n * over.\n *\n * @returns The unique ID.\n */\nfunction getUniqueId() {\n    idCounter = (idCounter + 1) % MAX;\n    return idCounter;\n}\nexports.getUniqueId = getUniqueId;\n//# sourceMappingURL=getUniqueId.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createIdRemapMiddleware = void 0;\nconst getUniqueId_1 = require(\"./getUniqueId\");\n/**\n * Returns a middleware function that overwrites the `id` property of each\n * request with an ID that is guaranteed to be unique, and restores the original\n * ID in a return handler.\n *\n * If used, should be the first middleware in the stack.\n *\n * @returns The ID remap middleware function.\n */\nfunction createIdRemapMiddleware() {\n    return (request, response, next, _end) => {\n        const originalId = request.id;\n        const newId = (0, getUniqueId_1.getUniqueId)();\n        request.id = newId;\n        response.id = newId;\n        next((done) => {\n            request.id = originalId;\n            response.id = originalId;\n            done();\n        });\n    };\n}\nexports.createIdRemapMiddleware = createIdRemapMiddleware;\n//# sourceMappingURL=idRemapMiddleware.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./createAsyncMiddleware\"), exports);\n__exportStar(require(\"./createScaffoldMiddleware\"), exports);\n__exportStar(require(\"./getUniqueId\"), exports);\n__exportStar(require(\"./idRemapMiddleware\"), exports);\n__exportStar(require(\"./JsonRpcEngine\"), exports);\n__exportStar(require(\"./mergeMiddleware\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeMiddleware = void 0;\nconst JsonRpcEngine_1 = require(\"./JsonRpcEngine\");\n/**\n * Takes a stack of middleware and joins them into a single middleware function.\n *\n * @param middlewareStack - The middleware stack to merge.\n * @returns The merged middleware function.\n */\nfunction mergeMiddleware(middlewareStack) {\n    const engine = new JsonRpcEngine_1.JsonRpcEngine();\n    middlewareStack.forEach((middleware) => engine.push(middleware));\n    return engine.asMiddleware();\n}\nexports.mergeMiddleware = mergeMiddleware;\n//# sourceMappingURL=mergeMiddleware.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertExhaustive = exports.assertStruct = exports.assert = exports.AssertionError = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst errors_1 = require(\"./errors.cjs\");\n/**\n * Check if a value is a constructor, i.e., a function that can be called with\n * the `new` keyword.\n *\n * @param fn - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nfunction isConstructable(fn) {\n    /* istanbul ignore next */\n    return Boolean(typeof fn?.prototype?.constructor?.name === 'string');\n}\n/**\n * Attempts to obtain the message from a possible error object. If it is\n * possible to do so, any trailing period will be removed from the message;\n * otherwise an empty string is returned.\n *\n * @param error - The error object to get the message from.\n * @returns The message without any trailing period if `error` is an object\n * with a `message` property; the string version of `error` without any trailing\n * period if it is not `undefined` or `null`; otherwise an empty string.\n */\nfunction getErrorMessageWithoutTrailingPeriod(error) {\n    // We'll add our own period.\n    return (0, errors_1.getErrorMessage)(error).replace(/\\.$/u, '');\n}\n/**\n * Initialise an {@link AssertionErrorConstructor} error.\n *\n * @param ErrorWrapper - The error class to use.\n * @param message - The error message.\n * @returns The error object.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction getError(ErrorWrapper, message) {\n    if (isConstructable(ErrorWrapper)) {\n        return new ErrorWrapper({\n            message,\n        });\n    }\n    return ErrorWrapper({\n        message,\n    });\n}\n/**\n * The default error class that is thrown if an assertion fails.\n */\nclass AssertionError extends Error {\n    constructor(options) {\n        super(options.message);\n        this.code = 'ERR_ASSERTION';\n    }\n}\nexports.AssertionError = AssertionError;\n/**\n * Same as Node.js assert.\n * If the value is falsy, throws an error, does nothing otherwise.\n *\n * @throws {@link AssertionError} If value is falsy.\n * @param value - The test that should be truthy to pass.\n * @param message - Message to be passed to {@link AssertionError} or an\n * {@link Error} instance to throw.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}. If a custom error class is provided for\n * the `message` argument, this argument is ignored.\n */\nfunction assert(value, message = 'Assertion failed.', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    if (!value) {\n        if (message instanceof Error) {\n            throw message;\n        }\n        throw getError(ErrorWrapper, message);\n    }\n}\nexports.assert = assert;\n/**\n * Assert a value against a Superstruct struct.\n *\n * @param value - The value to validate.\n * @param struct - The struct to validate against.\n * @param errorPrefix - A prefix to add to the error message. Defaults to\n * \"Assertion failed\".\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the value is not valid.\n */\nfunction assertStruct(value, struct, errorPrefix = 'Assertion failed', \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper = AssertionError) {\n    try {\n        (0, superstruct_1.assert)(value, struct);\n    }\n    catch (error) {\n        throw getError(ErrorWrapper, `${errorPrefix}: ${getErrorMessageWithoutTrailingPeriod(error)}.`);\n    }\n}\nexports.assertStruct = assertStruct;\n/**\n * Use in the default case of a switch that you want to be fully exhaustive.\n * Using this function forces the compiler to enforce exhaustivity during\n * compile-time.\n *\n * @example\n * ```\n * const number = 1;\n * switch (number) {\n *   case 0:\n *     ...\n *   case 1:\n *     ...\n *   default:\n *     assertExhaustive(snapPrefix);\n * }\n * ```\n * @param _object - The object on which the switch is being operated.\n */\nfunction assertExhaustive(_object) {\n    throw new Error('Invalid branch reached. Should be detected during compilation.');\n}\nexports.assertExhaustive = assertExhaustive;\n//# sourceMappingURL=assert.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base64 = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * Ensure that a provided string-based struct is valid base64.\n *\n * @param struct - The string based struct.\n * @param options - Optional options to specialize base64 validation. See {@link Base64Options} documentation.\n * @returns A superstruct validating base64.\n */\nconst base64 = (struct, options = {}) => {\n    const paddingRequired = options.paddingRequired ?? false;\n    const characterSet = options.characterSet ?? 'base64';\n    let letters;\n    if (characterSet === 'base64') {\n        letters = String.raw `[A-Za-z0-9+\\/]`;\n    }\n    else {\n        (0, assert_1.assert)(characterSet === 'base64url');\n        letters = String.raw `[-_A-Za-z0-9]`;\n    }\n    let re;\n    if (paddingRequired) {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    else {\n        re = new RegExp(`^(?:${letters}{4})*(?:${letters}{2,3}|${letters}{3}=|${letters}{2}==)?$`, 'u');\n    }\n    return (0, superstruct_1.pattern)(struct, re);\n};\nexports.base64 = base64;\n//# sourceMappingURL=base64.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDataView = exports.concatBytes = exports.valueToBytes = exports.base64ToBytes = exports.stringToBytes = exports.numberToBytes = exports.signedBigIntToBytes = exports.bigIntToBytes = exports.hexToBytes = exports.bytesToBase64 = exports.bytesToString = exports.bytesToNumber = exports.bytesToSignedBigInt = exports.bytesToBigInt = exports.bytesToHex = exports.assertIsBytes = exports.isBytes = void 0;\nconst base_1 = require(\"@scure/base\");\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n// '0'.charCodeAt(0) === 48\nconst HEX_MINIMUM_NUMBER_CHARACTER = 48;\n// '9'.charCodeAt(0) === 57\nconst HEX_MAXIMUM_NUMBER_CHARACTER = 58;\nconst HEX_CHARACTER_OFFSET = 87;\n/**\n * Memoized function that returns an array to be used as a lookup table for\n * converting bytes to hexadecimal values.\n *\n * The array is created lazily and then cached for future use. The benefit of\n * this approach is that the performance of converting bytes to hex is much\n * better than if we were to call `toString(16)` on each byte.\n *\n * The downside is that the array is created once and then never garbage\n * collected. This is not a problem in practice because the array is only 256\n * elements long.\n *\n * @returns A function that returns the lookup table.\n */\nfunction getPrecomputedHexValuesBuilder() {\n    // To avoid issues with tree shaking, we need to use a function to return the\n    // array. This is because the array is only used in the `bytesToHex` function\n    // and if we were to use a global variable, the array might be removed by the\n    // tree shaker.\n    const lookupTable = [];\n    return () => {\n        if (lookupTable.length === 0) {\n            for (let i = 0; i < 256; i++) {\n                lookupTable.push(i.toString(16).padStart(2, '0'));\n            }\n        }\n        return lookupTable;\n    };\n}\n/**\n * Function implementation of the {@link getPrecomputedHexValuesBuilder}\n * function.\n */\nconst getPrecomputedHexValues = getPrecomputedHexValuesBuilder();\n/**\n * Check if a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @returns Whether the value is a `Uint8Array`.\n */\nfunction isBytes(value) {\n    return value instanceof Uint8Array;\n}\nexports.isBytes = isBytes;\n/**\n * Assert that a value is a `Uint8Array`.\n *\n * @param value - The value to check.\n * @throws If the value is not a `Uint8Array`.\n */\nfunction assertIsBytes(value) {\n    (0, assert_1.assert)(isBytes(value), 'Value must be a Uint8Array.');\n}\nexports.assertIsBytes = assertIsBytes;\n/**\n * Convert a `Uint8Array` to a hexadecimal string.\n *\n * @param bytes - The bytes to convert to a hexadecimal string.\n * @returns The hexadecimal string.\n */\nfunction bytesToHex(bytes) {\n    assertIsBytes(bytes);\n    if (bytes.length === 0) {\n        return '0x';\n    }\n    const lookupTable = getPrecomputedHexValues();\n    const hexadecimal = new Array(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        hexadecimal[i] = lookupTable[bytes[i]];\n    }\n    return (0, hex_1.add0x)(hexadecimal.join(''));\n}\nexports.bytesToHex = bytesToHex;\n/**\n * Convert a `Uint8Array` to a `bigint`.\n *\n * To convert a `Uint8Array` to a `number` instead, use {@link bytesToNumber}.\n * To convert a two's complement encoded `Uint8Array` to a `bigint`, use\n * {@link bytesToSignedBigInt}.\n *\n * @param bytes - The bytes to convert to a `bigint`.\n * @returns The `bigint`.\n */\nfunction bytesToBigInt(bytes) {\n    assertIsBytes(bytes);\n    const hexadecimal = bytesToHex(bytes);\n    return BigInt(hexadecimal);\n}\nexports.bytesToBigInt = bytesToBigInt;\n/**\n * Convert a `Uint8Array` to a signed `bigint`. This assumes that the bytes are\n * encoded in two's complement.\n *\n * To convert a `Uint8Array` to an unsigned `bigint` instead, use\n * {@link bytesToBigInt}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param bytes - The bytes to convert to a signed `bigint`.\n * @returns The signed `bigint`.\n */\nfunction bytesToSignedBigInt(bytes) {\n    assertIsBytes(bytes);\n    let value = BigInt(0);\n    for (const byte of bytes) {\n        // eslint-disable-next-line no-bitwise\n        value = (value << BigInt(8)) + BigInt(byte);\n    }\n    return BigInt.asIntN(bytes.length * 8, value);\n}\nexports.bytesToSignedBigInt = bytesToSignedBigInt;\n/**\n * Convert a `Uint8Array` to a `number`.\n *\n * To convert a `Uint8Array` to a `bigint` instead, use {@link bytesToBigInt}.\n *\n * @param bytes - The bytes to convert to a number.\n * @returns The number.\n * @throws If the resulting number is not a safe integer.\n */\nfunction bytesToNumber(bytes) {\n    assertIsBytes(bytes);\n    const bigint = bytesToBigInt(bytes);\n    (0, assert_1.assert)(bigint <= BigInt(Number.MAX_SAFE_INTEGER), 'Number is not a safe integer. Use `bytesToBigInt` instead.');\n    return Number(bigint);\n}\nexports.bytesToNumber = bytesToNumber;\n/**\n * Convert a UTF-8 encoded `Uint8Array` to a `string`.\n *\n * @param bytes - The bytes to convert to a string.\n * @returns The string.\n */\nfunction bytesToString(bytes) {\n    assertIsBytes(bytes);\n    return new TextDecoder().decode(bytes);\n}\nexports.bytesToString = bytesToString;\n/**\n * Convert a `Uint8Array` to a base64 encoded string.\n *\n * @param bytes - The bytes to convert to a base64 encoded string.\n * @returns The base64 encoded string.\n */\nfunction bytesToBase64(bytes) {\n    assertIsBytes(bytes);\n    return base_1.base64.encode(bytes);\n}\nexports.bytesToBase64 = bytesToBase64;\n/**\n * Convert a hexadecimal string to a `Uint8Array`. The string can optionally be\n * prefixed with `0x`. It accepts even and odd length strings.\n *\n * If the value is \"0x\", an empty `Uint8Array` is returned.\n *\n * @param value - The hexadecimal string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction hexToBytes(value) {\n    // \"0x\" is often used as empty byte array.\n    if (value?.toLowerCase?.() === '0x') {\n        return new Uint8Array();\n    }\n    (0, hex_1.assertIsHexString)(value);\n    // Remove the `0x` prefix if it exists, and pad the string to have an even\n    // number of characters.\n    const strippedValue = (0, hex_1.remove0x)(value).toLowerCase();\n    const normalizedValue = strippedValue.length % 2 === 0 ? strippedValue : `0${strippedValue}`;\n    const bytes = new Uint8Array(normalizedValue.length / 2);\n    for (let i = 0; i < bytes.length; i++) {\n        // While this is not the prettiest way to convert a hexadecimal string to a\n        // `Uint8Array`, it is a lot faster than using `parseInt` to convert each\n        // character.\n        const c1 = normalizedValue.charCodeAt(i * 2);\n        const c2 = normalizedValue.charCodeAt(i * 2 + 1);\n        const n1 = c1 -\n            (c1 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        const n2 = c2 -\n            (c2 < HEX_MAXIMUM_NUMBER_CHARACTER\n                ? HEX_MINIMUM_NUMBER_CHARACTER\n                : HEX_CHARACTER_OFFSET);\n        bytes[i] = n1 * 16 + n2;\n    }\n    return bytes;\n}\nexports.hexToBytes = hexToBytes;\n/**\n * Convert a `bigint` to a `Uint8Array`.\n *\n * This assumes that the `bigint` is an unsigned integer. To convert a signed\n * `bigint` instead, use {@link signedBigIntToBytes}.\n *\n * @param value - The bigint to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction bigIntToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= BigInt(0), 'Value must be a non-negative bigint.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.bigIntToBytes = bigIntToBytes;\n/**\n * Check if a `bigint` fits in a certain number of bytes.\n *\n * @param value - The `bigint` to check.\n * @param bytes - The number of bytes.\n * @returns Whether the `bigint` fits in the number of bytes.\n */\nfunction bigIntFits(value, bytes) {\n    (0, assert_1.assert)(bytes > 0);\n    /* eslint-disable no-bitwise */\n    const mask = value >> BigInt(31);\n    return !(((~value & mask) + (value & ~mask)) >> BigInt(bytes * 8 + ~0));\n    /* eslint-enable no-bitwise */\n}\n/**\n * Convert a signed `bigint` to a `Uint8Array`. This uses two's complement\n * encoding to represent negative numbers.\n *\n * To convert an unsigned `bigint` to a `Uint8Array` instead, use\n * {@link bigIntToBytes}.\n *\n * @see https://en.wikipedia.org/wiki/Two%27s_complement\n * @param value - The number to convert to bytes.\n * @param byteLength - The length of the resulting `Uint8Array`. If the number\n * is larger than the maximum value that can be represented by the given length,\n * an error is thrown.\n * @returns The bytes as `Uint8Array`.\n */\nfunction signedBigIntToBytes(value, byteLength) {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(typeof byteLength === 'number', 'Byte length must be a number.');\n    (0, assert_1.assert)(byteLength > 0, 'Byte length must be greater than 0.');\n    (0, assert_1.assert)(bigIntFits(value, byteLength), 'Byte length is too small to represent the given value.');\n    // ESLint doesn't like mutating function parameters, so to avoid having to\n    // disable the rule, we create a new variable.\n    let numberValue = value;\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0; i < bytes.length; i++) {\n        bytes[i] = Number(BigInt.asUintN(8, numberValue));\n        // eslint-disable-next-line no-bitwise\n        numberValue >>= BigInt(8);\n    }\n    return bytes.reverse();\n}\nexports.signedBigIntToBytes = signedBigIntToBytes;\n/**\n * Convert a `number` to a `Uint8Array`.\n *\n * @param value - The number to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n * @throws If the number is not a safe integer.\n */\nfunction numberToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToBytes` instead.');\n    const hexadecimal = value.toString(16);\n    return hexToBytes(hexadecimal);\n}\nexports.numberToBytes = numberToBytes;\n/**\n * Convert a `string` to a UTF-8 encoded `Uint8Array`.\n *\n * @param value - The string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction stringToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return new TextEncoder().encode(value);\n}\nexports.stringToBytes = stringToBytes;\n/**\n * Convert a base64 encoded string to a `Uint8Array`.\n *\n * @param value - The base64 encoded string to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction base64ToBytes(value) {\n    (0, assert_1.assert)(typeof value === 'string', 'Value must be a string.');\n    return base_1.base64.decode(value);\n}\nexports.base64ToBytes = base64ToBytes;\n/**\n * Convert a byte-like value to a `Uint8Array`. The value can be a `Uint8Array`,\n * a `bigint`, a `number`, or a `string`.\n *\n * This will attempt to guess the type of the value based on its type and\n * contents. For more control over the conversion, use the more specific\n * conversion functions, such as {@link hexToBytes} or {@link stringToBytes}.\n *\n * If the value is a `string`, and it is prefixed with `0x`, it will be\n * interpreted as a hexadecimal string. Otherwise, it will be interpreted as a\n * UTF-8 string. To convert a hexadecimal string to bytes without interpreting\n * it as a UTF-8 string, use {@link hexToBytes} instead.\n *\n * If the value is a `bigint`, it is assumed to be unsigned. To convert a signed\n * `bigint` to bytes, use {@link signedBigIntToBytes} instead.\n *\n * If the value is a `Uint8Array`, it will be returned as-is.\n *\n * @param value - The value to convert to bytes.\n * @returns The bytes as `Uint8Array`.\n */\nfunction valueToBytes(value) {\n    if (typeof value === 'bigint') {\n        return bigIntToBytes(value);\n    }\n    if (typeof value === 'number') {\n        return numberToBytes(value);\n    }\n    if (typeof value === 'string') {\n        if (value.startsWith('0x')) {\n            return hexToBytes(value);\n        }\n        return stringToBytes(value);\n    }\n    if (isBytes(value)) {\n        return value;\n    }\n    throw new TypeError(`Unsupported value type: \"${typeof value}\".`);\n}\nexports.valueToBytes = valueToBytes;\n/**\n * Concatenate multiple byte-like values into a single `Uint8Array`. The values\n * can be `Uint8Array`, `bigint`, `number`, or `string`. This uses\n * {@link valueToBytes} under the hood to convert each value to bytes. Refer to\n * the documentation of that function for more information.\n *\n * @param values - The values to concatenate.\n * @returns The concatenated bytes as `Uint8Array`.\n */\nfunction concatBytes(values) {\n    const normalizedValues = new Array(values.length);\n    let byteLength = 0;\n    for (let i = 0; i < values.length; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const value = valueToBytes(values[i]);\n        normalizedValues[i] = value;\n        byteLength += value.length;\n    }\n    const bytes = new Uint8Array(byteLength);\n    for (let i = 0, offset = 0; i < normalizedValues.length; i++) {\n        // While we could simply spread the values into an array and use\n        // `Uint8Array.from`, that is a lot slower than using `Uint8Array.set`.\n        bytes.set(normalizedValues[i], offset);\n        offset += normalizedValues[i].length;\n    }\n    return bytes;\n}\nexports.concatBytes = concatBytes;\n/**\n * Create a {@link DataView} from a {@link Uint8Array}. This is a convenience\n * function that avoids having to create a {@link DataView} manually, which\n * requires passing the `byteOffset` and `byteLength` parameters every time.\n *\n * Not passing the `byteOffset` and `byteLength` parameters can result in\n * unexpected behavior when the {@link Uint8Array} is a view of a larger\n * {@link ArrayBuffer}, e.g., when using {@link Uint8Array.subarray}.\n *\n * This function also supports Node.js {@link Buffer}s.\n *\n * @example\n * ```typescript\n * const bytes = new Uint8Array([1, 2, 3]);\n *\n * // This is equivalent to:\n * // const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n * const dataView = createDataView(bytes);\n * ```\n * @param bytes - The bytes to create the {@link DataView} from.\n * @returns The {@link DataView}.\n */\nfunction createDataView(bytes) {\n    // To maintain compatibility with Node.js, we need to check if the bytes are\n    // a Buffer. If so, we need to slice the buffer to get the underlying\n    // ArrayBuffer.\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof Buffer !== 'undefined' && bytes instanceof Buffer) {\n        const buffer = bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength);\n        return new DataView(buffer);\n    }\n    return new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n}\nexports.createDataView = createDataView;\n//# sourceMappingURL=bytes.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toCaipChainId = exports.parseCaipAccountId = exports.parseCaipChainId = exports.isCaipAccountAddress = exports.isCaipAccountId = exports.isCaipReference = exports.isCaipNamespace = exports.isCaipChainId = exports.KnownCaipNamespace = exports.CaipAccountAddressStruct = exports.CaipAccountIdStruct = exports.CaipReferenceStruct = exports.CaipNamespaceStruct = exports.CaipChainIdStruct = exports.CAIP_ACCOUNT_ADDRESS_REGEX = exports.CAIP_ACCOUNT_ID_REGEX = exports.CAIP_REFERENCE_REGEX = exports.CAIP_NAMESPACE_REGEX = exports.CAIP_CHAIN_ID_REGEX = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nexports.CAIP_CHAIN_ID_REGEX = /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u;\nexports.CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u;\nexports.CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u;\nexports.CAIP_ACCOUNT_ID_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u;\nexports.CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u;\n/**\n * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.\n */\nexports.CaipChainIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_CHAIN_ID_REGEX);\n/**\n * A CAIP-2 namespace, i.e., the first part of a CAIP chain ID.\n */\nexports.CaipNamespaceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_NAMESPACE_REGEX);\n/**\n * A CAIP-2 reference, i.e., the second part of a CAIP chain ID.\n */\nexports.CaipReferenceStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_REFERENCE_REGEX);\n/**\n * A CAIP-10 account ID, i.e., a human-readable namespace, reference, and account address.\n */\nexports.CaipAccountIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ID_REGEX);\n/**\n * A CAIP-10 account address, i.e., the third part of the CAIP account ID.\n */\nexports.CaipAccountAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CAIP_ACCOUNT_ADDRESS_REGEX);\n/** Known CAIP namespaces. */\nvar KnownCaipNamespace;\n(function (KnownCaipNamespace) {\n    /** EIP-155 compatible chains. */\n    KnownCaipNamespace[\"Eip155\"] = \"eip155\";\n})(KnownCaipNamespace = exports.KnownCaipNamespace || (exports.KnownCaipNamespace = {}));\n/**\n * Check if the given value is a {@link CaipChainId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipChainId}.\n */\nfunction isCaipChainId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipChainIdStruct);\n}\nexports.isCaipChainId = isCaipChainId;\n/**\n * Check if the given value is a {@link CaipNamespace}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipNamespace}.\n */\nfunction isCaipNamespace(value) {\n    return (0, superstruct_1.is)(value, exports.CaipNamespaceStruct);\n}\nexports.isCaipNamespace = isCaipNamespace;\n/**\n * Check if the given value is a {@link CaipReference}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipReference}.\n */\nfunction isCaipReference(value) {\n    return (0, superstruct_1.is)(value, exports.CaipReferenceStruct);\n}\nexports.isCaipReference = isCaipReference;\n/**\n * Check if the given value is a {@link CaipAccountId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipAccountId}.\n */\nfunction isCaipAccountId(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountIdStruct);\n}\nexports.isCaipAccountId = isCaipAccountId;\n/**\n * Check if a value is a {@link CaipAccountAddress}.\n *\n * @param value - The value to validate.\n * @returns True if the value is a valid {@link CaipAccountAddress}.\n */\nfunction isCaipAccountAddress(value) {\n    return (0, superstruct_1.is)(value, exports.CaipAccountAddressStruct);\n}\nexports.isCaipAccountAddress = isCaipAccountAddress;\n/**\n * Parse a CAIP-2 chain ID to an object containing the namespace and reference.\n * This validates the CAIP-2 chain ID before parsing it.\n *\n * @param caipChainId - The CAIP-2 chain ID to validate and parse.\n * @returns The parsed CAIP-2 chain ID.\n */\nfunction parseCaipChainId(caipChainId) {\n    const match = exports.CAIP_CHAIN_ID_REGEX.exec(caipChainId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP chain ID.');\n    }\n    return {\n        namespace: match.groups.namespace,\n        reference: match.groups.reference,\n    };\n}\nexports.parseCaipChainId = parseCaipChainId;\n/**\n * Parse an CAIP-10 account ID to an object containing the chain ID, parsed chain ID, and account address.\n * This validates the CAIP-10 account ID before parsing it.\n *\n * @param caipAccountId - The CAIP-10 account ID to validate and parse.\n * @returns The parsed CAIP-10 account ID.\n */\nfunction parseCaipAccountId(caipAccountId) {\n    const match = exports.CAIP_ACCOUNT_ID_REGEX.exec(caipAccountId);\n    if (!match?.groups) {\n        throw new Error('Invalid CAIP account ID.');\n    }\n    return {\n        address: match.groups.accountAddress,\n        chainId: match.groups.chainId,\n        chain: {\n            namespace: match.groups.namespace,\n            reference: match.groups.reference,\n        },\n    };\n}\nexports.parseCaipAccountId = parseCaipAccountId;\n/**\n * Chain ID as defined per the CAIP-2\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md}.\n *\n * It defines a way to uniquely identify any blockchain in a human-readable\n * way.\n *\n * @param namespace - The standard (ecosystem) of similar blockchains.\n * @param reference - Identify of a blockchain within a given namespace.\n * @throws {@link Error}\n * This exception is thrown if the inputs does not comply with the CAIP-2\n * syntax specification\n * {@link https://github.com/ChainAgnostic/CAIPs/blob/main/CAIPs/caip-2.md#syntax}.\n * @returns A CAIP chain ID.\n */\nfunction toCaipChainId(namespace, reference) {\n    if (!isCaipNamespace(namespace)) {\n        throw new Error(`Invalid \"namespace\", must match: ${exports.CAIP_NAMESPACE_REGEX.toString()}`);\n    }\n    if (!isCaipReference(reference)) {\n        throw new Error(`Invalid \"reference\", must match: ${exports.CAIP_REFERENCE_REGEX.toString()}`);\n    }\n    return `${namespace}:${reference}`;\n}\nexports.toCaipChainId = toCaipChainId;\n//# sourceMappingURL=caip-types.cjs.map","import { cloneDeep } from 'lodash';\n\nconst version = 2;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      if (versionedData.data.config.provider.type === 'etherscan') {\n        versionedData.data.config.provider.type = 'rpc';\n        versionedData.data.config.provider.rpcTarget =\n          'https://rpc.metamask.io/';\n      }\n    } catch (_) {\n      // empty\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChecksumStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst base64_1 = require(\"./base64.cjs\");\nexports.ChecksumStruct = (0, superstruct_1.size)((0, base64_1.base64)((0, superstruct_1.string)(), { paddingRequired: true }), 44, 44);\n//# sourceMappingURL=checksum.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHex = exports.createBytes = exports.createBigInt = exports.createNumber = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\nconst NumberLikeStruct = (0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.bigint)(), (0, superstruct_1.string)(), hex_1.StrictHexStruct]);\nconst NumberCoercer = (0, superstruct_1.coerce)((0, superstruct_1.number)(), NumberLikeStruct, Number);\nconst BigIntCoercer = (0, superstruct_1.coerce)((0, superstruct_1.bigint)(), NumberLikeStruct, BigInt);\nconst BytesLikeStruct = (0, superstruct_1.union)([hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array)]);\nconst BytesCoercer = (0, superstruct_1.coerce)((0, superstruct_1.instance)(Uint8Array), (0, superstruct_1.union)([hex_1.StrictHexStruct]), bytes_1.hexToBytes);\nconst HexCoercer = (0, superstruct_1.coerce)(hex_1.StrictHexStruct, (0, superstruct_1.instance)(Uint8Array), bytes_1.bytesToHex);\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nfunction createNumber(value) {\n    try {\n        const result = (0, superstruct_1.create)(value, NumberCoercer);\n        (0, assert_1.assert)(Number.isFinite(result), `Expected a number-like value, got \"${value}\".`);\n        return result;\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${value}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createNumber = createNumber;\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nfunction createBigInt(value) {\n    try {\n        // The `BigInt` constructor throws if the value is not a number-like value.\n        // There is no need to validate the value manually.\n        return (0, superstruct_1.create)(value, BigIntCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a number-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBigInt = createBigInt;\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nfunction createBytes(value) {\n    if (typeof value === 'string' && value.toLowerCase() === '0x') {\n        return new Uint8Array();\n    }\n    try {\n        return (0, superstruct_1.create)(value, BytesCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createBytes = createBytes;\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nfunction createHex(value) {\n    if ((value instanceof Uint8Array && value.length === 0) ||\n        (typeof value === 'string' && value.toLowerCase() === '0x')) {\n        return '0x';\n    }\n    try {\n        return (0, superstruct_1.create)(value, HexCoercer);\n    }\n    catch (error) {\n        if (error instanceof superstruct_1.StructError) {\n            throw new Error(`Expected a bytes-like value, got \"${String(error.value)}\".`);\n        }\n        /* istanbul ignore next */\n        throw error;\n    }\n}\nexports.createHex = createHex;\n//# sourceMappingURL=coercers.cjs.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _FrozenMap_map, _FrozenSet_set;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FrozenSet = exports.FrozenMap = void 0;\n/**\n * A {@link ReadonlyMap} that cannot be modified after instantiation.\n * The implementation uses an inner map hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this map.\n */\nclass FrozenMap {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").size;\n    }\n    [(_FrozenMap_map = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\")[Symbol.iterator]();\n    }\n    constructor(entries) {\n        _FrozenMap_map.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenMap_map, new Map(entries), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner map.\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").forEach((value, key, _map) => callbackfn.call(thisArg, value, key, this));\n    }\n    get(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").get(key);\n    }\n    has(key) {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").has(key);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenMap_map, \"f\").values();\n    }\n    toString() {\n        return `FrozenMap(${this.size}) {${this.size > 0\n            ? ` ${[...this.entries()]\n                .map(([key, value]) => `${String(key)} => ${String(value)}`)\n                .join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenMap = FrozenMap;\n/**\n * A {@link ReadonlySet} that cannot be modified after instantiation.\n * The implementation uses an inner set hidden via a private field, and the\n * immutability guarantee relies on it being impossible to get a reference\n * to this set.\n */\nclass FrozenSet {\n    get size() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").size;\n    }\n    [(_FrozenSet_set = new WeakMap(), Symbol.iterator)]() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\")[Symbol.iterator]();\n    }\n    constructor(values) {\n        _FrozenSet_set.set(this, void 0);\n        __classPrivateFieldSet(this, _FrozenSet_set, new Set(values), \"f\");\n        Object.freeze(this);\n    }\n    entries() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").entries();\n    }\n    forEach(callbackfn, thisArg) {\n        // We have to wrap the specified callback in order to prevent it from\n        // receiving a reference to the inner set.\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").forEach((value, value2, _set) => callbackfn.call(thisArg, value, value2, this));\n    }\n    has(value) {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").has(value);\n    }\n    keys() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").keys();\n    }\n    values() {\n        return __classPrivateFieldGet(this, _FrozenSet_set, \"f\").values();\n    }\n    toString() {\n        return `FrozenSet(${this.size}) {${this.size > 0\n            ? ` ${[...this.values()].map((member) => String(member)).join(', ')} `\n            : ''}}`;\n    }\n}\nexports.FrozenSet = FrozenSet;\nObject.freeze(FrozenMap);\nObject.freeze(FrozenMap.prototype);\nObject.freeze(FrozenSet);\nObject.freeze(FrozenSet.prototype);\n//# sourceMappingURL=collections.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=encryption-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapError = exports.getErrorMessage = exports.isErrorWithStack = exports.isErrorWithMessage = exports.isErrorWithCode = void 0;\nconst pony_cause_1 = require(\"pony-cause\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * Type guard for determining whether the given value is an instance of Error.\n * For errors generated via `fs.promises`, `error instanceof Error` won't work,\n * so we have to come up with another way of testing.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isError(error) {\n    return (error instanceof Error ||\n        ((0, misc_1.isObject)(error) && error.constructor.name === 'Error'));\n}\n/**\n * Type guard for determining whether the given value is an error object with a\n * `code` property such as the type of error that Node throws for filesystem\n * operations, etc.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithCode(error) {\n    return typeof error === 'object' && error !== null && 'code' in error;\n}\nexports.isErrorWithCode = isErrorWithCode;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `message` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithMessage(error) {\n    return typeof error === 'object' && error !== null && 'message' in error;\n}\nexports.isErrorWithMessage = isErrorWithMessage;\n/**\n * Type guard for determining whether the given value is an error object with a\n * `stack` property, such as an instance of Error.\n *\n * @param error - The object to check.\n * @returns A boolean.\n */\nfunction isErrorWithStack(error) {\n    return typeof error === 'object' && error !== null && 'stack' in error;\n}\nexports.isErrorWithStack = isErrorWithStack;\n/**\n * Attempts to obtain the message from a possible error object, defaulting to an\n * empty string if it is impossible to do so.\n *\n * @param error - The possible error to get the message from.\n * @returns The message if `error` is an object with a `message` property;\n * the string version of `error` if it is not `undefined` or `null`; otherwise\n * an empty string.\n */\nfunction getErrorMessage(error) {\n    if (isErrorWithMessage(error) && typeof error.message === 'string') {\n        return error.message;\n    }\n    if ((0, misc_1.isNullOrUndefined)(error)) {\n        return '';\n    }\n    return String(error);\n}\nexports.getErrorMessage = getErrorMessage;\n/**\n * Builds a new error object, linking it to the original error via the `cause`\n * property if it is an Error.\n *\n * This function is useful to reframe error messages in general, but is\n * _critical_ when interacting with any of Node's filesystem functions as\n * provided via `fs.promises`, because these do not produce stack traces in the\n * case of an I/O error (see <https://github.com/nodejs/node/issues/30944>).\n *\n * @param originalError - The error to be wrapped (something throwable).\n * @param message - The desired message of the new error.\n * @returns A new error object.\n */\nfunction wrapError(originalError, message) {\n    if (isError(originalError)) {\n        let error;\n        if (Error.length === 2) {\n            // for some reason `tsserver` is not complaining that the\n            // Error constructor doesn't support a second argument in the editor,\n            // but `tsc` does. Error causes are not supported by our current tsc target (ES2020, we need ES2022 to make this work)\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new Error(message, { cause: originalError });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            error = new pony_cause_1.ErrorWithCause(message, { cause: originalError });\n        }\n        if (isErrorWithCode(originalError)) {\n            error.code = originalError.code;\n        }\n        return error;\n    }\n    if (message.length > 0) {\n        return new Error(`${String(originalError)}: ${message}`);\n    }\n    return new Error(String(originalError));\n}\nexports.wrapError = wrapError;\n//# sourceMappingURL=errors.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.remove0x = exports.add0x = exports.isValidChecksumAddress = exports.getChecksumAddress = exports.isValidHexAddress = exports.assertIsStrictHexString = exports.assertIsHexString = exports.isStrictHexString = exports.isHexString = exports.HexChecksumAddressStruct = exports.HexAddressStruct = exports.StrictHexStruct = exports.HexStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst assert_1 = require(\"./assert.cjs\");\nconst bytes_1 = require(\"./bytes.cjs\");\nexports.HexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^(?:0x)?[0-9a-f]+$/iu);\nexports.StrictHexStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]+$/iu);\nexports.HexAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-f]{40}$/u);\nexports.HexChecksumAddressStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^0x[0-9a-fA-F]{40}$/u);\n/**\n * Check if a string is a valid hex string.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isHexString(value) {\n    return (0, superstruct_1.is)(value, exports.HexStruct);\n}\nexports.isHexString = isHexString;\n/**\n * Strictly check if a string is a valid hex string. A valid hex string must\n * start with the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nfunction isStrictHexString(value) {\n    return (0, superstruct_1.is)(value, exports.StrictHexStruct);\n}\nexports.isStrictHexString = isStrictHexString;\n/**\n * Assert that a value is a valid hex string.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsHexString(value) {\n    (0, assert_1.assert)(isHexString(value), 'Value must be a hexadecimal string.');\n}\nexports.assertIsHexString = assertIsHexString;\n/**\n * Assert that a value is a valid hex string. A valid hex string must start with\n * the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nfunction assertIsStrictHexString(value) {\n    (0, assert_1.assert)(isStrictHexString(value), 'Value must be a hexadecimal string, starting with \"0x\".');\n}\nexports.assertIsStrictHexString = assertIsStrictHexString;\n/**\n * Validate that the passed prefixed hex string is an all-lowercase\n * hex address, or a valid mixed-case checksum address.\n *\n * @param possibleAddress - Input parameter to check against.\n * @returns Whether or not the input is a valid hex address.\n */\nfunction isValidHexAddress(possibleAddress) {\n    return ((0, superstruct_1.is)(possibleAddress, exports.HexAddressStruct) ||\n        isValidChecksumAddress(possibleAddress));\n}\nexports.isValidHexAddress = isValidHexAddress;\n/**\n * Encode a passed hex string as an ERC-55 mixed-case checksum address.\n *\n * @param address - The hex address to encode.\n * @returns The address encoded according to ERC-55.\n * @see https://eips.ethereum.org/EIPS/eip-55\n */\nfunction getChecksumAddress(address) {\n    (0, assert_1.assert)((0, superstruct_1.is)(address, exports.HexChecksumAddressStruct), 'Invalid hex address.');\n    const unPrefixed = remove0x(address.toLowerCase());\n    const unPrefixedHash = remove0x((0, bytes_1.bytesToHex)((0, sha3_1.keccak_256)(unPrefixed)));\n    return `0x${unPrefixed\n        .split('')\n        .map((character, nibbleIndex) => {\n        const hashCharacter = unPrefixedHash[nibbleIndex];\n        (0, assert_1.assert)((0, superstruct_1.is)(hashCharacter, (0, superstruct_1.string)()), 'Hash shorter than address.');\n        return parseInt(hashCharacter, 16) > 7\n            ? character.toUpperCase()\n            : character;\n    })\n        .join('')}`;\n}\nexports.getChecksumAddress = getChecksumAddress;\n/**\n * Validate that the passed hex string is a valid ERC-55 mixed-case\n * checksum address.\n *\n * @param possibleChecksum - The hex address to check.\n * @returns True if the address is a checksum address.\n */\nfunction isValidChecksumAddress(possibleChecksum) {\n    if (!(0, superstruct_1.is)(possibleChecksum, exports.HexChecksumAddressStruct)) {\n        return false;\n    }\n    return getChecksumAddress(possibleChecksum) === possibleChecksum;\n}\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Add the `0x`-prefix to a hexadecimal string. If the string already has the\n * prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to add the prefix to.\n * @returns The prefixed hexadecimal string.\n */\nfunction add0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x')) {\n        return hexadecimal;\n    }\n    if (hexadecimal.startsWith('0X')) {\n        return `0x${hexadecimal.substring(2)}`;\n    }\n    return `0x${hexadecimal}`;\n}\nexports.add0x = add0x;\n/**\n * Remove the `0x`-prefix from a hexadecimal string. If the string doesn't have\n * the prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to remove the prefix from.\n * @returns The un-prefixed hexadecimal string.\n */\nfunction remove0x(hexadecimal) {\n    if (hexadecimal.startsWith('0x') || hexadecimal.startsWith('0X')) {\n        return hexadecimal.substring(2);\n    }\n    return hexadecimal;\n}\nexports.remove0x = remove0x;\n//# sourceMappingURL=hex.cjs.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./assert.cjs\"), exports);\n__exportStar(require(\"./base64.cjs\"), exports);\n__exportStar(require(\"./bytes.cjs\"), exports);\n__exportStar(require(\"./caip-types.cjs\"), exports);\n__exportStar(require(\"./checksum.cjs\"), exports);\n__exportStar(require(\"./coercers.cjs\"), exports);\n__exportStar(require(\"./collections.cjs\"), exports);\n__exportStar(require(\"./encryption-types.cjs\"), exports);\n__exportStar(require(\"./errors.cjs\"), exports);\n__exportStar(require(\"./hex.cjs\"), exports);\n__exportStar(require(\"./json.cjs\"), exports);\n__exportStar(require(\"./keyring.cjs\"), exports);\n__exportStar(require(\"./logging.cjs\"), exports);\n__exportStar(require(\"./misc.cjs\"), exports);\n__exportStar(require(\"./number.cjs\"), exports);\n__exportStar(require(\"./opaque.cjs\"), exports);\n__exportStar(require(\"./promise.cjs\"), exports);\n__exportStar(require(\"./time.cjs\"), exports);\n__exportStar(require(\"./transaction-types.cjs\"), exports);\n__exportStar(require(\"./versions.cjs\"), exports);\n//# sourceMappingURL=index.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getJsonRpcIdValidator = exports.assertIsJsonRpcError = exports.isJsonRpcError = exports.assertIsJsonRpcFailure = exports.isJsonRpcFailure = exports.assertIsJsonRpcSuccess = exports.isJsonRpcSuccess = exports.assertIsJsonRpcResponse = exports.isJsonRpcResponse = exports.assertIsPendingJsonRpcResponse = exports.isPendingJsonRpcResponse = exports.JsonRpcResponseStruct = exports.JsonRpcFailureStruct = exports.JsonRpcSuccessStruct = exports.PendingJsonRpcResponseStruct = exports.assertIsJsonRpcRequest = exports.isJsonRpcRequest = exports.assertIsJsonRpcNotification = exports.isJsonRpcNotification = exports.JsonRpcNotificationStruct = exports.JsonRpcRequestStruct = exports.JsonRpcParamsStruct = exports.JsonRpcErrorStruct = exports.JsonRpcIdStruct = exports.JsonRpcVersionStruct = exports.jsonrpc2 = exports.getJsonSize = exports.getSafeJson = exports.isValidJson = exports.JsonStruct = exports.UnsafeJsonStruct = exports.exactOptional = exports.object = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst assert_1 = require(\"./assert.cjs\");\nconst misc_1 = require(\"./misc.cjs\");\n/**\n * A struct to check if the given value is a valid object, with support for\n * {@link exactOptional} types.\n *\n * @param schema - The schema of the object.\n * @returns A struct to check if the given value is an object.\n */\nconst object = (schema) => \n// The type is slightly different from a regular object struct, because we\n// want to make properties with `undefined` in their type optional, but not\n// `undefined` itself. This means that we need a type cast.\n(0, superstruct_1.object)(schema);\nexports.object = object;\n/**\n * Check the last field of a path is present.\n *\n * @param context - The context to check.\n * @param context.path - The path to check.\n * @param context.branch - The branch to check.\n * @returns Whether the last field of a path is present.\n */\nfunction hasOptional({ path, branch }) {\n    const field = path[path.length - 1];\n    return (0, misc_1.hasProperty)(branch[branch.length - 2], field);\n}\n/**\n * A struct which allows the property of an object to be absent, or to be present\n * as long as it's valid and not set to `undefined`.\n *\n * This struct should be used in conjunction with the {@link object} from this\n * library, to get proper type inference.\n *\n * @param struct - The struct to check the value against, if present.\n * @returns A struct to check if the given value is valid, or not present.\n * @example\n * ```ts\n * const struct = object({\n *   foo: exactOptional(string()),\n *   bar: exactOptional(number()),\n *   baz: optional(boolean()),\n *   qux: unknown(),\n * });\n *\n * type Type = Infer<typeof struct>;\n * // Type is equivalent to:\n * // {\n * //   foo?: string;\n * //   bar?: number;\n * //   baz?: boolean | undefined;\n * //   qux: unknown;\n * // }\n * ```\n */\nfunction exactOptional(struct) {\n    return new superstruct_1.Struct({\n        ...struct,\n        type: `optional ${struct.type}`,\n        validator: (value, context) => !hasOptional(context) || struct.validator(value, context),\n        refiner: (value, context) => !hasOptional(context) || struct.refiner(value, context),\n    });\n}\nexports.exactOptional = exactOptional;\n/**\n * A struct to check if the given value is finite number. Superstruct's\n * `number()` struct does not check if the value is finite.\n *\n * @returns A struct to check if the given value is finite number.\n */\nconst finiteNumber = () => (0, superstruct_1.define)('finite number', (value) => {\n    return (0, superstruct_1.is)(value, (0, superstruct_1.number)()) && Number.isFinite(value);\n});\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * Note that this struct is unsafe. For safe validation, use {@link JsonStruct}.\n */\n// We cannot infer the type of the struct, because it is recursive.\nexports.UnsafeJsonStruct = (0, superstruct_1.union)([\n    (0, superstruct_1.literal)(null),\n    (0, superstruct_1.boolean)(),\n    finiteNumber(),\n    (0, superstruct_1.string)(),\n    (0, superstruct_1.array)((0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n    (0, superstruct_1.record)((0, superstruct_1.string)(), (0, superstruct_1.lazy)(() => exports.UnsafeJsonStruct)),\n]);\n/**\n * A struct to check if the given value is a valid JSON-serializable value.\n *\n * This struct sanitizes the value before validating it, so that it is safe to\n * use with untrusted input.\n */\nexports.JsonStruct = (0, superstruct_1.coerce)(exports.UnsafeJsonStruct, (0, superstruct_1.any)(), (value) => {\n    (0, assert_1.assertStruct)(value, exports.UnsafeJsonStruct);\n    return JSON.parse(JSON.stringify(value, (propKey, propValue) => {\n        // Strip __proto__ and constructor properties to prevent prototype pollution.\n        if (propKey === '__proto__' || propKey === 'constructor') {\n            return undefined;\n        }\n        return propValue;\n    }));\n});\n/**\n * Check if the given value is a valid {@link Json} value, i.e., a value that is\n * serializable to JSON.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link Json} value.\n */\nfunction isValidJson(value) {\n    try {\n        getSafeJson(value);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexports.isValidJson = isValidJson;\n/**\n * Validate and return sanitized JSON.\n *\n * Note:\n * This function uses sanitized JsonStruct for validation\n * that applies stringify and then parse of a value provided\n * to ensure that there are no getters which can have side effects\n * that can cause security issues.\n *\n * @param value - JSON structure to be processed.\n * @returns Sanitized JSON structure.\n */\nfunction getSafeJson(value) {\n    return (0, superstruct_1.create)(value, exports.JsonStruct);\n}\nexports.getSafeJson = getSafeJson;\n/**\n * Get the size of a JSON value in bytes. This also validates the value.\n *\n * @param value - The JSON value to get the size of.\n * @returns The size of the JSON value in bytes.\n */\nfunction getJsonSize(value) {\n    (0, assert_1.assertStruct)(value, exports.JsonStruct, 'Invalid JSON value');\n    const json = JSON.stringify(value);\n    return new TextEncoder().encode(json).byteLength;\n}\nexports.getJsonSize = getJsonSize;\n/**\n * The string '2.0'.\n */\nexports.jsonrpc2 = '2.0';\nexports.JsonRpcVersionStruct = (0, superstruct_1.literal)(exports.jsonrpc2);\nexports.JsonRpcIdStruct = (0, superstruct_1.nullable)((0, superstruct_1.union)([(0, superstruct_1.number)(), (0, superstruct_1.string)()]));\nexports.JsonRpcErrorStruct = (0, exports.object)({\n    code: (0, superstruct_1.integer)(),\n    message: (0, superstruct_1.string)(),\n    data: exactOptional(exports.JsonStruct),\n    stack: exactOptional((0, superstruct_1.string)()),\n});\nexports.JsonRpcParamsStruct = (0, superstruct_1.union)([(0, superstruct_1.record)((0, superstruct_1.string)(), exports.JsonStruct), (0, superstruct_1.array)(exports.JsonStruct)]);\nexports.JsonRpcRequestStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\nexports.JsonRpcNotificationStruct = (0, exports.object)({\n    jsonrpc: exports.JsonRpcVersionStruct,\n    method: (0, superstruct_1.string)(),\n    params: exactOptional(exports.JsonRpcParamsStruct),\n});\n/**\n * Check if the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcNotification}\n * object.\n */\nfunction isJsonRpcNotification(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcNotificationStruct);\n}\nexports.isJsonRpcNotification = isJsonRpcNotification;\n/**\n * Assert that the given value is a valid {@link JsonRpcNotification} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcNotification} object.\n */\nfunction assertIsJsonRpcNotification(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcNotificationStruct, 'Invalid JSON-RPC notification', ErrorWrapper);\n}\nexports.assertIsJsonRpcNotification = assertIsJsonRpcNotification;\n/**\n * Check if the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcRequest} object.\n */\nfunction isJsonRpcRequest(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcRequestStruct);\n}\nexports.isJsonRpcRequest = isJsonRpcRequest;\n/**\n * Assert that the given value is a valid {@link JsonRpcRequest} object.\n *\n * @param value - The JSON-RPC request or notification to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcRequest} object.\n */\nfunction assertIsJsonRpcRequest(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcRequestStruct, 'Invalid JSON-RPC request', ErrorWrapper);\n}\nexports.assertIsJsonRpcRequest = assertIsJsonRpcRequest;\nexports.PendingJsonRpcResponseStruct = (0, superstruct_1.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: (0, superstruct_1.optional)((0, superstruct_1.unknown)()),\n    error: (0, superstruct_1.optional)(exports.JsonRpcErrorStruct),\n});\nexports.JsonRpcSuccessStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    result: exports.JsonStruct,\n});\nexports.JsonRpcFailureStruct = (0, exports.object)({\n    id: exports.JsonRpcIdStruct,\n    jsonrpc: exports.JsonRpcVersionStruct,\n    error: exports.JsonRpcErrorStruct,\n});\nexports.JsonRpcResponseStruct = (0, superstruct_1.union)([\n    exports.JsonRpcSuccessStruct,\n    exports.JsonRpcFailureStruct,\n]);\n/**\n * Type guard to check whether specified JSON-RPC response is a\n * {@link PendingJsonRpcResponse}.\n *\n * @param response - The JSON-RPC response to check.\n * @returns Whether the specified JSON-RPC response is pending.\n */\nfunction isPendingJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.PendingJsonRpcResponseStruct);\n}\nexports.isPendingJsonRpcResponse = isPendingJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link PendingJsonRpcResponse} object.\n *\n * @param response - The JSON-RPC response to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link PendingJsonRpcResponse}\n * object.\n */\nfunction assertIsPendingJsonRpcResponse(response, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(response, exports.PendingJsonRpcResponseStruct, 'Invalid pending JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsPendingJsonRpcResponse = assertIsPendingJsonRpcResponse;\n/**\n * Type guard to check if a value is a {@link JsonRpcResponse}.\n *\n * @param response - The object to check.\n * @returns Whether the object is a JsonRpcResponse.\n */\nfunction isJsonRpcResponse(response) {\n    return (0, superstruct_1.is)(response, exports.JsonRpcResponseStruct);\n}\nexports.isJsonRpcResponse = isJsonRpcResponse;\n/**\n * Assert that the given value is a valid {@link JsonRpcResponse} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcResponse} object.\n */\nfunction assertIsJsonRpcResponse(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcResponseStruct, 'Invalid JSON-RPC response', ErrorWrapper);\n}\nexports.assertIsJsonRpcResponse = assertIsJsonRpcResponse;\n/**\n * Check if the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcSuccess} object.\n */\nfunction isJsonRpcSuccess(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcSuccessStruct);\n}\nexports.isJsonRpcSuccess = isJsonRpcSuccess;\n/**\n * Assert that the given value is a valid {@link JsonRpcSuccess} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcSuccess} object.\n */\nfunction assertIsJsonRpcSuccess(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcSuccessStruct, 'Invalid JSON-RPC success response', ErrorWrapper);\n}\nexports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;\n/**\n * Check if the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcFailure} object.\n */\nfunction isJsonRpcFailure(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcFailureStruct);\n}\nexports.isJsonRpcFailure = isJsonRpcFailure;\n/**\n * Assert that the given value is a valid {@link JsonRpcFailure} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcFailure} object.\n */\nfunction assertIsJsonRpcFailure(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcFailureStruct, 'Invalid JSON-RPC failure response', ErrorWrapper);\n}\nexports.assertIsJsonRpcFailure = assertIsJsonRpcFailure;\n/**\n * Check if the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @returns Whether the given value is a valid {@link JsonRpcError} object.\n */\nfunction isJsonRpcError(value) {\n    return (0, superstruct_1.is)(value, exports.JsonRpcErrorStruct);\n}\nexports.isJsonRpcError = isJsonRpcError;\n/**\n * Assert that the given value is a valid {@link JsonRpcError} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error class to throw if the assertion fails.\n * Defaults to {@link AssertionError}.\n * @throws If the given value is not a valid {@link JsonRpcError} object.\n */\nfunction assertIsJsonRpcError(value, \n// eslint-disable-next-line @typescript-eslint/naming-convention\nErrorWrapper) {\n    (0, assert_1.assertStruct)(value, exports.JsonRpcErrorStruct, 'Invalid JSON-RPC error', ErrorWrapper);\n}\nexports.assertIsJsonRpcError = assertIsJsonRpcError;\n/**\n * Gets a function for validating JSON-RPC request / response `id` values.\n *\n * By manipulating the options of this factory, you can control the behavior\n * of the resulting validator for some edge cases. This is useful because e.g.\n * `null` should sometimes but not always be permitted.\n *\n * Note that the empty string (`''`) is always permitted by the JSON-RPC\n * specification, but that kind of sucks and you may want to forbid it in some\n * instances anyway.\n *\n * For more details, see the\n * [JSON-RPC Specification](https://www.jsonrpc.org/specification).\n *\n * @param options - An options object.\n * @param options.permitEmptyString - Whether the empty string (i.e. `''`)\n * should be treated as a valid ID. Default: `true`\n * @param options.permitFractions - Whether fractional numbers (e.g. `1.2`)\n * should be treated as valid IDs. Default: `false`\n * @param options.permitNull - Whether `null` should be treated as a valid ID.\n * Default: `true`\n * @returns The JSON-RPC ID validator function.\n */\nfunction getJsonRpcIdValidator(options) {\n    const { permitEmptyString, permitFractions, permitNull } = {\n        permitEmptyString: true,\n        permitFractions: false,\n        permitNull: true,\n        ...options,\n    };\n    /**\n     * Type guard for {@link JsonRpcId}.\n     *\n     * @param id - The JSON-RPC ID value to check.\n     * @returns Whether the given ID is valid per the options given to the\n     * factory.\n     */\n    const isValidJsonRpcId = (id) => {\n        return Boolean((typeof id === 'number' && (permitFractions || Number.isInteger(id))) ||\n            (typeof id === 'string' && (permitEmptyString || id.length > 0)) ||\n            (permitNull && id === null));\n    };\n    return isValidJsonRpcId;\n}\nexports.getJsonRpcIdValidator = getJsonRpcIdValidator;\n//# sourceMappingURL=json.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=keyring.cjs.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createModuleLogger = exports.createProjectLogger = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst globalLogger = (0, debug_1.default)('metamask');\n/**\n * Creates a logger via the `debug` library whose log messages will be tagged\n * using the name of your project. By default, such messages will be\n * suppressed, but you can reveal them by setting the `DEBUG` environment\n * variable to `metamask:<projectName>`. You can also set this variable to\n * `metamask:*` if you want to see log messages from all MetaMask projects that\n * are also using this function to create their loggers.\n *\n * @param projectName - The name of your project. This should be the name of\n * your NPM package if you're developing one.\n * @returns An instance of `debug`.\n */\nfunction createProjectLogger(projectName) {\n    return globalLogger.extend(projectName);\n}\nexports.createProjectLogger = createProjectLogger;\n/**\n * Creates a logger via the `debug` library which is derived from the logger for\n * the whole project whose log messages will be tagged using the name of your\n * module. By default, such messages will be suppressed, but you can reveal them\n * by setting the `DEBUG` environment variable to\n * `metamask:<projectName>:<moduleName>`. You can also set this variable to\n * `metamask:<projectName>:*` if you want to see log messages from the project,\n * or `metamask:*` if you want to see log messages from all MetaMask projects.\n *\n * @param projectLogger - The logger created via {@link createProjectLogger}.\n * @param moduleName - The name of your module. You could use the name of the\n * file where you're using this logger or some other name.\n * @returns An instance of `debug`.\n */\nfunction createModuleLogger(projectLogger, moduleName) {\n    return projectLogger.extend(moduleName);\n}\nexports.createModuleLogger = createModuleLogger;\n//# sourceMappingURL=logging.cjs.map","import { cloneDeep } from 'lodash';\n\nconst version = 3;\nconst oldTestRpc = 'https://rawtestrpc.metamask.io/';\nconst newTestRpc = 'https://testrpc.metamask.io/';\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      if (versionedData.data.config.provider.rpcTarget === oldTestRpc) {\n        versionedData.data.config.provider.rpcTarget = newTestRpc;\n      }\n    } catch (_) {\n      // empty\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n","\"use strict\";\n//\n// Types\n//\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.calculateNumberSize = exports.calculateStringSize = exports.isASCII = exports.isPlainObject = exports.ESCAPE_CHARACTERS_REGEXP = exports.JsonSize = exports.getKnownPropertyNames = exports.hasProperty = exports.isObject = exports.isNullOrUndefined = exports.isNonEmptyArray = void 0;\n//\n// Type Guards\n//\n/**\n * A {@link NonEmptyArray} type guard.\n *\n * @template Element - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Type guard for \"nullishness\".\n *\n * @param value - Any value.\n * @returns `true` if the value is null or undefined, `false` otherwise.\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n/**\n * A type guard for {@link RuntimeObject}.\n *\n * @param value - The value to check.\n * @returns Whether the specified value has a runtime type of `object` and is\n * neither `null` nor an `Array`.\n */\nfunction isObject(value) {\n    return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\nexports.isObject = isObject;\n//\n// Other utility functions\n//\n/**\n * A type guard for ensuring an object has a property.\n *\n * @param objectToCheck - The object to check.\n * @param name - The property name to check for.\n * @returns Whether the specified object has an own property with the specified\n * name, regardless of whether it is enumerable or not.\n */\nconst hasProperty = (objectToCheck, name) => Object.hasOwnProperty.call(objectToCheck, name);\nexports.hasProperty = hasProperty;\n/**\n * `Object.getOwnPropertyNames()` is intentionally generic: it returns the\n * immediate property names of an object, but it cannot make guarantees about\n * the contents of that object, so the type of the property names is merely\n * `string[]`. While this is technically accurate, it is also unnecessary if we\n * have an object with a type that we own (such as an enum).\n *\n * @param object - The plain object.\n * @returns The own property names of the object which are assigned a type\n * derived from the object itself.\n */\nfunction getKnownPropertyNames(object) {\n    return Object.getOwnPropertyNames(object);\n}\nexports.getKnownPropertyNames = getKnownPropertyNames;\n/**\n * Predefined sizes (in Bytes) of specific parts of JSON structure.\n */\nvar JsonSize;\n(function (JsonSize) {\n    JsonSize[JsonSize[\"Null\"] = 4] = \"Null\";\n    JsonSize[JsonSize[\"Comma\"] = 1] = \"Comma\";\n    JsonSize[JsonSize[\"Wrapper\"] = 1] = \"Wrapper\";\n    JsonSize[JsonSize[\"True\"] = 4] = \"True\";\n    JsonSize[JsonSize[\"False\"] = 5] = \"False\";\n    JsonSize[JsonSize[\"Quote\"] = 1] = \"Quote\";\n    JsonSize[JsonSize[\"Colon\"] = 1] = \"Colon\";\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    JsonSize[JsonSize[\"Date\"] = 24] = \"Date\";\n})(JsonSize = exports.JsonSize || (exports.JsonSize = {}));\n/**\n * Regular expression with pattern matching for (special) escaped characters.\n */\nexports.ESCAPE_CHARACTERS_REGEXP = /\"|\\\\|\\n|\\r|\\t/gu;\n/**\n * Check if the value is plain object.\n *\n * @param value - Value to be checked.\n * @returns True if an object is the plain JavaScript object,\n * false if the object is not plain (e.g. function).\n */\nfunction isPlainObject(value) {\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n    try {\n        let proto = value;\n        while (Object.getPrototypeOf(proto) !== null) {\n            proto = Object.getPrototypeOf(proto);\n        }\n        return Object.getPrototypeOf(value) === proto;\n    }\n    catch (_) {\n        return false;\n    }\n}\nexports.isPlainObject = isPlainObject;\n/**\n * Check if character is ASCII.\n *\n * @param character - Character.\n * @returns True if a character code is ASCII, false if not.\n */\nfunction isASCII(character) {\n    return character.charCodeAt(0) <= 127;\n}\nexports.isASCII = isASCII;\n/**\n * Calculate string size.\n *\n * @param value - String value to calculate size.\n * @returns Number of bytes used to store whole string value.\n */\nfunction calculateStringSize(value) {\n    const size = value.split('').reduce((total, character) => {\n        if (isASCII(character)) {\n            return total + 1;\n        }\n        return total + 2;\n    }, 0);\n    // Also detect characters that need backslash escape\n    return size + (value.match(exports.ESCAPE_CHARACTERS_REGEXP) ?? []).length;\n}\nexports.calculateStringSize = calculateStringSize;\n/**\n * Calculate size of a number ofter JSON serialization.\n *\n * @param value - Number value to calculate size.\n * @returns Number of bytes used to store whole number in JSON.\n */\nfunction calculateNumberSize(value) {\n    return value.toString().length;\n}\nexports.calculateNumberSize = calculateNumberSize;\n//# sourceMappingURL=misc.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hexToBigInt = exports.hexToNumber = exports.bigIntToHex = exports.numberToHex = void 0;\nconst assert_1 = require(\"./assert.cjs\");\nconst hex_1 = require(\"./hex.cjs\");\n/**\n * Convert a number to a hexadecimal string. This verifies that the number is a\n * non-negative safe integer.\n *\n * To convert a `bigint` to a hexadecimal string instead, use\n * {@link bigIntToHex}.\n *\n * @example\n * ```typescript\n * numberToHex(0); // '0x0'\n * numberToHex(1); // '0x1'\n * numberToHex(16); // '0x10'\n * ```\n * @param value - The number to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the number is not a non-negative safe integer.\n */\nconst numberToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'number', 'Value must be a number.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative number.');\n    (0, assert_1.assert)(Number.isSafeInteger(value), 'Value is not a safe integer. Use `bigIntToHex` instead.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.numberToHex = numberToHex;\n/**\n * Convert a `bigint` to a hexadecimal string. This verifies that the `bigint`\n * is a non-negative integer.\n *\n * To convert a number to a hexadecimal string instead, use {@link numberToHex}.\n *\n * @example\n * ```typescript\n * bigIntToHex(0n); // '0x0'\n * bigIntToHex(1n); // '0x1'\n * bigIntToHex(16n); // '0x10'\n * ```\n * @param value - The `bigint` to convert to a hexadecimal string.\n * @returns The hexadecimal string, with the \"0x\"-prefix.\n * @throws If the `bigint` is not a non-negative integer.\n */\nconst bigIntToHex = (value) => {\n    (0, assert_1.assert)(typeof value === 'bigint', 'Value must be a bigint.');\n    (0, assert_1.assert)(value >= 0, 'Value must be a non-negative bigint.');\n    return (0, hex_1.add0x)(value.toString(16));\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert a hexadecimal string to a number. This verifies that the string is a\n * valid hex string, and that the resulting number is a safe integer. Both\n * \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a `bigint` instead, use\n * {@link hexToBigInt}.\n *\n * @example\n * ```typescript\n * hexToNumber('0x0'); // 0\n * hexToNumber('0x1'); // 1\n * hexToNumber('0x10'); // 16\n * ```\n * @param value - The hexadecimal string to convert to a number.\n * @returns The number.\n * @throws If the value is not a valid hexadecimal string, or if the resulting\n * number is not a safe integer.\n */\nconst hexToNumber = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // `parseInt` accepts values without the \"0x\"-prefix, whereas `Number` does\n    // not. Using this is slightly faster than `Number(add0x(value))`.\n    const numberValue = parseInt(value, 16);\n    (0, assert_1.assert)(Number.isSafeInteger(numberValue), 'Value is not a safe integer. Use `hexToBigInt` instead.');\n    return numberValue;\n};\nexports.hexToNumber = hexToNumber;\n/**\n * Convert a hexadecimal string to a `bigint`. This verifies that the string is\n * a valid hex string. Both \"0x\"-prefixed and unprefixed strings are supported.\n *\n * To convert a hexadecimal string to a number instead, use {@link hexToNumber}.\n *\n * @example\n * ```typescript\n * hexToBigInt('0x0'); // 0n\n * hexToBigInt('0x1'); // 1n\n * hexToBigInt('0x10'); // 16n\n * ```\n * @param value - The hexadecimal string to convert to a `bigint`.\n * @returns The `bigint`.\n * @throws If the value is not a valid hexadecimal string.\n */\nconst hexToBigInt = (value) => {\n    (0, hex_1.assertIsHexString)(value);\n    // The `BigInt` constructor requires the \"0x\"-prefix to parse a hex string.\n    return BigInt((0, hex_1.add0x)(value));\n};\nexports.hexToBigInt = hexToBigInt;\n//# sourceMappingURL=number.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=opaque.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDeferredPromise = void 0;\n/**\n * Create a defered Promise.\n *\n * If the Promise is rejected prior to a handler being added, this can result in an\n * `UnhandledPromiseRejection` error. Optionally this can be suppressed with the\n * `suppressUnhandledRejection` flag, as it's common to belatedly handle deferred Promises, or to\n * ignore them if they're no longer relevant (e.g. related to a cancelled request).\n *\n * However, be very careful that you have handled the Promise if you do this. Suppressing these\n * errors is dangerous, they exist for good reason. An unhandled rejection can hide errors, making\n * debugging extremely difficult. They should only be suppressed if you're confident that the\n * Promise is always handled correctly, in both the success and failure cases.\n *\n * @param args - The arguments.\n * @param args.suppressUnhandledRejection - This option adds an empty error handler\n * to the Promise to suppress the UnhandledPromiseRejection error. This can be\n * useful if the deferred Promise is sometimes intentionally not used.\n * @returns A deferred Promise.\n * @template Result - The result type of the Promise.\n */\nfunction createDeferredPromise({ suppressUnhandledRejection = false, } = {}) {\n    let resolve;\n    let reject;\n    const promise = new Promise((innerResolve, innerReject) => {\n        resolve = innerResolve;\n        reject = innerReject;\n    });\n    if (suppressUnhandledRejection) {\n        promise.catch((_error) => {\n            // This handler is used to suppress the UnhandledPromiseRejection error\n        });\n    }\n    // @ts-expect-error We know that these are assigned, but TypeScript doesn't\n    return { promise, resolve, reject };\n}\nexports.createDeferredPromise = createDeferredPromise;\n//# sourceMappingURL=promise.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timeSince = exports.inMilliseconds = exports.Duration = void 0;\n/**\n * Common duration constants, in milliseconds.\n */\nvar Duration;\n(function (Duration) {\n    /**\n     * A millisecond.\n     */\n    Duration[Duration[\"Millisecond\"] = 1] = \"Millisecond\";\n    /**\n     * A second, in milliseconds.\n     */\n    Duration[Duration[\"Second\"] = 1000] = \"Second\";\n    /**\n     * A minute, in milliseconds.\n     */\n    Duration[Duration[\"Minute\"] = 60000] = \"Minute\";\n    /**\n     * An hour, in milliseconds.\n     */\n    Duration[Duration[\"Hour\"] = 3600000] = \"Hour\";\n    /**\n     * A day, in milliseconds.\n     */\n    Duration[Duration[\"Day\"] = 86400000] = \"Day\";\n    /**\n     * A week, in milliseconds.\n     */\n    Duration[Duration[\"Week\"] = 604800000] = \"Week\";\n    /**\n     * A year, in milliseconds.\n     */\n    Duration[Duration[\"Year\"] = 31536000000] = \"Year\";\n})(Duration = exports.Duration || (exports.Duration = {}));\nconst isNonNegativeInteger = (number) => Number.isInteger(number) && number >= 0;\nconst assertIsNonNegativeInteger = (number, name) => {\n    if (!isNonNegativeInteger(number)) {\n        throw new Error(`\"${name}\" must be a non-negative integer. Received: \"${number}\".`);\n    }\n};\n/**\n * Calculates the millisecond value of the specified number of units of time.\n *\n * @param count - The number of units of time.\n * @param duration - The unit of time to count.\n * @returns The count multiplied by the specified duration.\n */\nfunction inMilliseconds(count, duration) {\n    assertIsNonNegativeInteger(count, 'count');\n    return count * duration;\n}\nexports.inMilliseconds = inMilliseconds;\n/**\n * Gets the milliseconds since a particular Unix epoch timestamp.\n *\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n    assertIsNonNegativeInteger(timestamp, 'timestamp');\n    return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;\n//# sourceMappingURL=time.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=transaction-types.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.satisfiesVersionRange = exports.gtRange = exports.gtVersion = exports.assertIsSemVerRange = exports.assertIsSemVerVersion = exports.isValidSemVerRange = exports.isValidSemVerVersion = exports.VersionRangeStruct = exports.VersionStruct = void 0;\nconst superstruct_1 = require(\"@metamask/superstruct\");\nconst semver_1 = require(\"semver\");\nconst assert_1 = require(\"./assert.cjs\");\n/**\n * A struct for validating a version string.\n */\nexports.VersionStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version', (value) => {\n    if ((0, semver_1.valid)(value) === null) {\n        return `Expected SemVer version, got \"${value}\"`;\n    }\n    return true;\n});\nexports.VersionRangeStruct = (0, superstruct_1.refine)((0, superstruct_1.string)(), 'Version range', (value) => {\n    if ((0, semver_1.validRange)(value) === null) {\n        return `Expected SemVer range, got \"${value}\"`;\n    }\n    return true;\n});\n/**\n * Checks whether a SemVer version is valid.\n *\n * @param version - A potential version.\n * @returns `true` if the version is valid, and `false` otherwise.\n */\nfunction isValidSemVerVersion(version) {\n    return (0, superstruct_1.is)(version, exports.VersionStruct);\n}\nexports.isValidSemVerVersion = isValidSemVerVersion;\n/**\n * Checks whether a SemVer version range is valid.\n *\n * @param versionRange - A potential version range.\n * @returns `true` if the version range is valid, and `false` otherwise.\n */\nfunction isValidSemVerRange(versionRange) {\n    return (0, superstruct_1.is)(versionRange, exports.VersionRangeStruct);\n}\nexports.isValidSemVerRange = isValidSemVerRange;\n/**\n * Asserts that a value is a valid concrete SemVer version.\n *\n * @param version - A potential SemVer concrete version.\n */\nfunction assertIsSemVerVersion(version) {\n    (0, assert_1.assertStruct)(version, exports.VersionStruct);\n}\nexports.assertIsSemVerVersion = assertIsSemVerVersion;\n/**\n * Asserts that a value is a valid SemVer range.\n *\n * @param range - A potential SemVer range.\n */\nfunction assertIsSemVerRange(range) {\n    (0, assert_1.assertStruct)(range, exports.VersionRangeStruct);\n}\nexports.assertIsSemVerRange = assertIsSemVerRange;\n/**\n * Checks whether a SemVer version is greater than another.\n *\n * @param version1 - The left-hand version.\n * @param version2 - The right-hand version.\n * @returns `version1 > version2`.\n */\nfunction gtVersion(version1, version2) {\n    return (0, semver_1.gt)(version1, version2);\n}\nexports.gtVersion = gtVersion;\n/**\n * Checks whether a SemVer version is greater than all possibilities in a range.\n *\n * @param version - A SemvVer version.\n * @param range - The range to check against.\n * @returns `version > range`.\n */\nfunction gtRange(version, range) {\n    return (0, semver_1.gtr)(version, range);\n}\nexports.gtRange = gtRange;\n/**\n * Returns whether a SemVer version satisfies a SemVer range.\n *\n * @param version - The SemVer version to check.\n * @param versionRange - The SemVer version range to check against.\n * @returns Whether the version satisfied the version range.\n */\nfunction satisfiesVersionRange(version, versionRange) {\n    return (0, semver_1.satisfies)(version, versionRange, {\n        includePrerelease: true,\n    });\n}\nexports.satisfiesVersionRange = satisfiesVersionRange;\n//# sourceMappingURL=versions.cjs.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Semaphore_1 = require(\"./Semaphore\");\nvar Mutex = /** @class */ (function () {\n    function Mutex() {\n        this._semaphore = new Semaphore_1.default(1);\n    }\n    Mutex.prototype.acquire = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, releaser;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this._semaphore.acquire()];\n                    case 1:\n                        _a = _b.sent(), releaser = _a[1];\n                        return [2 /*return*/, releaser];\n                }\n            });\n        });\n    };\n    Mutex.prototype.runExclusive = function (callback) {\n        return this._semaphore.runExclusive(function () { return callback(); });\n    };\n    Mutex.prototype.isLocked = function () {\n        return this._semaphore.isLocked();\n    };\n    Mutex.prototype.release = function () {\n        this._semaphore.release();\n    };\n    return Mutex;\n}());\nexports.default = Mutex;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Semaphore = /** @class */ (function () {\n    function Semaphore(_maxConcurrency) {\n        this._maxConcurrency = _maxConcurrency;\n        this._queue = [];\n        if (_maxConcurrency <= 0) {\n            throw new Error('semaphore must be initialized to a positive value');\n        }\n        this._value = _maxConcurrency;\n    }\n    Semaphore.prototype.acquire = function () {\n        var _this = this;\n        var locked = this.isLocked();\n        var ticket = new Promise(function (r) { return _this._queue.push(r); });\n        if (!locked)\n            this._dispatch();\n        return ticket;\n    };\n    Semaphore.prototype.runExclusive = function (callback) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var _a, value, release;\n            return tslib_1.__generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.acquire()];\n                    case 1:\n                        _a = _b.sent(), value = _a[0], release = _a[1];\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, , 4, 5]);\n                        return [4 /*yield*/, callback(value)];\n                    case 3: return [2 /*return*/, _b.sent()];\n                    case 4:\n                        release();\n                        return [7 /*endfinally*/];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Semaphore.prototype.isLocked = function () {\n        return this._value <= 0;\n    };\n    Semaphore.prototype.release = function () {\n        if (this._maxConcurrency > 1) {\n            throw new Error('this method is unavailabel on semaphores with concurrency > 1; use the scoped release returned by acquire instead');\n        }\n        if (this._currentReleaser) {\n            var releaser = this._currentReleaser;\n            this._currentReleaser = undefined;\n            releaser();\n        }\n    };\n    Semaphore.prototype._dispatch = function () {\n        var _this = this;\n        var nextConsumer = this._queue.shift();\n        if (!nextConsumer)\n            return;\n        var released = false;\n        this._currentReleaser = function () {\n            if (released)\n                return;\n            released = true;\n            _this._value++;\n            _this._dispatch();\n        };\n        nextConsumer([this._value--, this._currentReleaser]);\n    };\n    return Semaphore;\n}());\nexports.default = Semaphore;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.withTimeout = exports.Semaphore = exports.Mutex = void 0;\nvar Mutex_1 = require(\"./Mutex\");\nObject.defineProperty(exports, \"Mutex\", { enumerable: true, get: function () { return Mutex_1.default; } });\nvar Semaphore_1 = require(\"./Semaphore\");\nObject.defineProperty(exports, \"Semaphore\", { enumerable: true, get: function () { return Semaphore_1.default; } });\nvar withTimeout_1 = require(\"./withTimeout\");\nObject.defineProperty(exports, \"withTimeout\", { enumerable: true, get: function () { return withTimeout_1.withTimeout; } });\n","import { cloneDeep } from 'lodash';\n\nconst version = 4;\n\nexport default {\n  version,\n\n  migrate(versionedData) {\n    const safeVersionedData = cloneDeep(versionedData);\n    safeVersionedData.meta.version = version;\n    try {\n      if (safeVersionedData.data.config.provider.type !== 'rpc') {\n        return Promise.resolve(safeVersionedData);\n      }\n      switch (safeVersionedData.data.config.provider.rpcTarget) {\n        case 'https://testrpc.metamask.io/':\n          safeVersionedData.data.config.provider = {\n            type: 'testnet',\n          };\n          break;\n        case 'https://rpc.metamask.io/':\n          safeVersionedData.data.config.provider = {\n            type: 'mainnet',\n          };\n          break;\n        // No default\n      }\n    } catch (_) {\n      // empty\n    }\n    return Promise.resolve(safeVersionedData);\n  },\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.withTimeout = void 0;\nvar tslib_1 = require(\"tslib\");\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction withTimeout(sync, timeout, timeoutError) {\n    var _this = this;\n    if (timeoutError === void 0) { timeoutError = new Error('timeout'); }\n    return {\n        acquire: function () {\n            return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {\n                var isTimeout, ticket, release;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            isTimeout = false;\n                            setTimeout(function () {\n                                isTimeout = true;\n                                reject(timeoutError);\n                            }, timeout);\n                            return [4 /*yield*/, sync.acquire()];\n                        case 1:\n                            ticket = _a.sent();\n                            if (isTimeout) {\n                                release = Array.isArray(ticket) ? ticket[1] : ticket;\n                                release();\n                            }\n                            else {\n                                resolve(ticket);\n                            }\n                            return [2 /*return*/];\n                    }\n                });\n            }); });\n        },\n        runExclusive: function (callback) {\n            return tslib_1.__awaiter(this, void 0, void 0, function () {\n                var release, ticket;\n                return tslib_1.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            release = function () { return undefined; };\n                            _a.label = 1;\n                        case 1:\n                            _a.trys.push([1, , 7, 8]);\n                            return [4 /*yield*/, this.acquire()];\n                        case 2:\n                            ticket = _a.sent();\n                            if (!Array.isArray(ticket)) return [3 /*break*/, 4];\n                            release = ticket[1];\n                            return [4 /*yield*/, callback(ticket[0])];\n                        case 3: return [2 /*return*/, _a.sent()];\n                        case 4:\n                            release = ticket;\n                            return [4 /*yield*/, callback()];\n                        case 5: return [2 /*return*/, _a.sent()];\n                        case 6: return [3 /*break*/, 8];\n                        case 7:\n                            release();\n                            return [7 /*endfinally*/];\n                        case 8: return [2 /*return*/];\n                    }\n                });\n            });\n        },\n        release: function () {\n            sync.release();\n        },\n        isLocked: function () { return sync.isLocked(); },\n    };\n}\nexports.withTimeout = withTimeout;\n","const SafeEventEmitter = require('@metamask/safe-event-emitter').default\nconst { createAsyncMiddleware, createScaffoldMiddleware } = require('@metamask/json-rpc-engine')\nconst createFilterMiddleware = require('./index.js')\nconst { unsafeRandomBytes, incrementHexInt } = require('./hexUtils.js')\nconst getBlocksForRange = require('./getBlocksForRange.js')\n\nmodule.exports = createSubscriptionMiddleware\n\n\nfunction createSubscriptionMiddleware({ blockTracker, provider }) {\n  // state and utilities for handling subscriptions\n  const subscriptions = {}\n  const filterManager = createFilterMiddleware({ blockTracker, provider })\n\n  // internal flag\n  let isDestroyed = false\n\n  // create subscriptionManager api object\n  const events = new SafeEventEmitter()\n  const middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe),\n  })\n  middleware.destroy = destroy\n  return { events, middleware }\n\n  async function subscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const subscriptionType = req.params[0]\n    // subId is 16 byte hex string\n    const subId = unsafeRandomBytes(16)\n\n    // create sub\n    let sub\n    switch (subscriptionType) {\n      case 'newHeads':\n        sub = createSubNewHeads({ subId })\n        break\n      case 'logs':\n        const filterParams = req.params[1]\n        const filter = await filterManager.newLogFilter(filterParams)\n        sub = createSubFromFilter({ subId, filter })\n        break\n      default:\n        throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`)\n\n    }\n    subscriptions[subId] = sub\n\n    res.result = subId\n    return\n\n    function createSubNewHeads({ subId }) {\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          blockTracker.removeListener('sync', sub.update)\n        },\n        update: async ({ oldBlock, newBlock }) => {\n          // for newHeads\n          const toBlock = newBlock\n          const fromBlock = incrementHexInt(oldBlock)\n          const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock })\n          const results = rawBlocks.map(normalizeBlock).filter(block => block !== null)\n          results.forEach((value) => {\n            _emitSubscriptionResult(subId, value)\n          })\n        }\n      }\n      // check for subscription updates on new block\n      blockTracker.on('sync', sub.update)\n      return sub\n    }\n\n    function createSubFromFilter({ subId, filter }) {\n      filter.on('update', result => _emitSubscriptionResult(subId, result))\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          return await filterManager.uninstallFilter(filter.idHex)\n        },\n      }\n      return sub\n    }\n  }\n\n  async function unsubscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const id = req.params[0]\n    const subscription = subscriptions[id]\n    // if missing, return \"false\" to indicate it was not removed\n    if (!subscription) {\n      res.result = false\n      return\n    }\n    // cleanup subscription\n    delete subscriptions[id]\n    await subscription.destroy()\n    res.result = true\n  }\n\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value,\n      },\n    })\n  }\n\n  function destroy() {\n    events.removeAllListeners()\n    for (const id in subscriptions) {\n      subscriptions[id].destroy()\n      delete subscriptions[id]\n    }\n    isDestroyed = true\n  }\n}\n\nfunction normalizeBlock(block) {\n  if (block === null || block === undefined) {\n    return null;\n  }\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData,\n  }\n}\n","const BaseFilter = require('./base-filter')\nconst getBlocksForRange = require('./getBlocksForRange')\nconst { incrementHexInt } = require('./hexUtils')\n\nclass TxFilter extends BaseFilter {\n\n  constructor ({ provider }) {\n    super()\n    this.type = 'tx'\n    this.provider = provider\n  }\n\n  async update ({ oldBlock }) {\n    const toBlock = oldBlock\n    const fromBlock = incrementHexInt(oldBlock)\n    const blocks = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })\n    const blockTxHashes = []\n    for (const block of blocks) {\n      blockTxHashes.push(...block.transactions)\n    }\n    // add to results\n    this.addResults(blockTxHashes)\n  }\n\n}\n\nmodule.exports = TxFilter\n","/*\n\nThis migration moves state from the flat state trie into KeyringController substate\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 5;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = selectSubstateForKeyringController(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #5${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction selectSubstateForKeyringController(state) {\n  const { config } = state;\n  const newState = {\n    ...state,\n    KeyringController: {\n      vault: state.vault,\n      selectedAccount: config.selectedAccount,\n      walletNicknames: state.walletNicknames,\n    },\n  };\n  delete newState.vault;\n  delete newState.walletNicknames;\n  delete newState.config.selectedAccount;\n\n  return newState;\n}\n","/*\n\nThis migration moves KeyringController.selectedAddress to PreferencesController.selectedAddress\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 6;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = migrateState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction migrateState(state) {\n  const keyringSubstate = state.KeyringController;\n\n  // add new state\n  const newState = {\n    ...state,\n    PreferencesController: {\n      selectedAddress: keyringSubstate.selectedAccount,\n    },\n  };\n\n  // rm old state\n  delete newState.KeyringController.selectedAccount;\n\n  return newState;\n}\n","/*\n\nThis migration breaks out the TransactionManager substate\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 7;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = {\n    ...state,\n    TransactionManager: {\n      transactions: state.transactions || [],\n      gasMultiplier: state.gasMultiplier || 1,\n    },\n  };\n  delete newState.transactions;\n  delete newState.gasMultiplier;\n\n  return newState;\n}\n","/*\n\nThis migration breaks out the NoticeController substate\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 8;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = {\n    ...state,\n    NoticeController: {\n      noticesList: state.noticesList || [],\n    },\n  };\n  delete newState.noticesList;\n\n  return newState;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBlockCacheMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"@metamask/json-rpc-engine\");\nconst logging_utils_1 = require(\"./logging-utils\");\nconst cache_1 = require(\"./utils/cache\");\nconst log = (0, logging_utils_1.createModuleLogger)(logging_utils_1.projectLogger, 'block-cache');\n// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\nconst emptyValues = [undefined, null, '\\u003cnil\\u003e'];\n//\n// Cache Strategies\n//\nclass BlockCacheStrategy {\n    constructor() {\n        this.cache = {};\n    }\n    getBlockCache(blockNumberHex) {\n        const blockNumber = Number.parseInt(blockNumberHex, 16);\n        let blockCache = this.cache[blockNumber];\n        // create new cache if necesary\n        if (!blockCache) {\n            const newCache = {};\n            this.cache[blockNumber] = newCache;\n            blockCache = newCache;\n        }\n        return blockCache;\n    }\n    async get(request, requestedBlockNumber) {\n        // lookup block cache\n        const blockCache = this.getBlockCache(requestedBlockNumber);\n        // lookup payload in block cache\n        const identifier = (0, cache_1.cacheIdentifierForRequest)(request, true);\n        return identifier ? blockCache[identifier] : undefined;\n    }\n    async set(request, requestedBlockNumber, result) {\n        // check if we can cached this result\n        const canCacheResult = this.canCacheResult(request, result);\n        if (!canCacheResult) {\n            return;\n        }\n        // set the value in the cache\n        const identifier = (0, cache_1.cacheIdentifierForRequest)(request, true);\n        if (!identifier) {\n            return;\n        }\n        const blockCache = this.getBlockCache(requestedBlockNumber);\n        blockCache[identifier] = result;\n    }\n    canCacheRequest(request) {\n        // check request method\n        if (!(0, cache_1.canCache)(request.method)) {\n            return false;\n        }\n        // check blockTag\n        const blockTag = (0, cache_1.blockTagForRequest)(request);\n        if (blockTag === 'pending') {\n            return false;\n        }\n        // can be cached\n        return true;\n    }\n    canCacheResult(request, result) {\n        // never cache empty values (e.g. undefined)\n        if (emptyValues.includes(result)) {\n            return false;\n        }\n        // check if transactions have block reference before caching\n        if (request.method &&\n            ['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(request.method)) {\n            if (!result ||\n                !result.blockHash ||\n                result.blockHash ===\n                    '0x0000000000000000000000000000000000000000000000000000000000000000') {\n                return false;\n            }\n        }\n        // otherwise true\n        return true;\n    }\n    // removes all block caches with block number lower than `oldBlockHex`\n    clearBefore(oldBlockHex) {\n        const oldBlockNumber = Number.parseInt(oldBlockHex, 16);\n        // clear old caches\n        Object.keys(this.cache)\n            .map(Number)\n            .filter((num) => num < oldBlockNumber)\n            .forEach((num) => delete this.cache[num]);\n    }\n}\nfunction createBlockCacheMiddleware({ blockTracker, } = {}) {\n    // validate options\n    if (!blockTracker) {\n        throw new Error('createBlockCacheMiddleware - No PollingBlockTracker specified');\n    }\n    // create caching strategies\n    const blockCache = new BlockCacheStrategy();\n    const strategies = {\n        [cache_1.CacheStrategy.Permanent]: blockCache,\n        [cache_1.CacheStrategy.Block]: blockCache,\n        [cache_1.CacheStrategy.Fork]: blockCache,\n        [cache_1.CacheStrategy.Never]: undefined,\n    };\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, next) => {\n        // allow cach to be skipped if so specified\n        if (req.skipCache) {\n            return next();\n        }\n        // check type and matching strategy\n        const type = (0, cache_1.cacheTypeForMethod)(req.method);\n        const strategy = strategies[type];\n        // If there's no strategy in place, pass it down the chain.\n        if (!strategy) {\n            return next();\n        }\n        // If the strategy can't cache this request, ignore it.\n        if (!strategy.canCacheRequest(req)) {\n            return next();\n        }\n        // get block reference (number or keyword)\n        const requestBlockTag = (0, cache_1.blockTagForRequest)(req);\n        const blockTag = requestBlockTag && typeof requestBlockTag === 'string'\n            ? requestBlockTag\n            : 'latest';\n        log('blockTag = %o, req = %o', blockTag, req);\n        // get exact block number\n        let requestedBlockNumber;\n        if (blockTag === 'earliest') {\n            // this just exists for symmetry with \"latest\"\n            requestedBlockNumber = '0x00';\n        }\n        else if (blockTag === 'latest') {\n            // fetch latest block number\n            log('Fetching latest block number to determine cache key');\n            const latestBlockNumber = await blockTracker.getLatestBlock();\n            // clear all cache before latest block\n            log('Clearing values stored under block numbers before %o', latestBlockNumber);\n            blockCache.clearBefore(latestBlockNumber);\n            requestedBlockNumber = latestBlockNumber;\n        }\n        else {\n            // We have a hex number\n            requestedBlockNumber = blockTag;\n        }\n        // end on a hit, continue on a miss\n        const cacheResult = await strategy.get(req, requestedBlockNumber);\n        if (cacheResult === undefined) {\n            // cache miss\n            // wait for other middleware to handle request\n            log('No cache stored under block number %o, carrying request forward', requestedBlockNumber);\n            // eslint-disable-next-line n/callback-return\n            await next();\n            // add result to cache\n            // it's safe to cast res.result as Block, due to runtime type checks\n            // performed when strategy.set is called\n            log('Populating cache with', res);\n            await strategy.set(req, requestedBlockNumber, res.result);\n        }\n        else {\n            // fill in result from cache\n            log('Cache hit, reusing cache result stored under block number %o', requestedBlockNumber);\n            res.result = cacheResult;\n        }\n        return undefined;\n    });\n}\nexports.createBlockCacheMiddleware = createBlockCacheMiddleware;\n//# sourceMappingURL=block-cache.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBlockRefRewriteMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"@metamask/json-rpc-engine\");\nconst cache_1 = require(\"./utils/cache\");\nfunction createBlockRefRewriteMiddleware({ blockTracker, } = {}) {\n    if (!blockTracker) {\n        throw Error('BlockRefRewriteMiddleware - mandatory \"blockTracker\" option is missing.');\n    }\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, _res, next) => {\n        const blockRefIndex = (0, cache_1.blockTagParamIndex)(req.method);\n        // skip if method does not include blockRef\n        if (blockRefIndex === undefined) {\n            return next();\n        }\n        // skip if not \"latest\"\n        const blockRef = Array.isArray(req.params) && req.params[blockRefIndex]\n            ? req.params[blockRefIndex]\n            : // omitted blockRef implies \"latest\"\n                'latest';\n        if (blockRef !== 'latest') {\n            return next();\n        }\n        // rewrite blockRef to block-tracker's block number\n        const latestBlockNumber = await blockTracker.getLatestBlock();\n        if (Array.isArray(req.params)) {\n            // eslint-disable-next-line require-atomic-updates\n            req.params[blockRefIndex] = latestBlockNumber;\n        }\n        return next();\n    });\n}\nexports.createBlockRefRewriteMiddleware = createBlockRefRewriteMiddleware;\n//# sourceMappingURL=block-ref-rewrite.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBlockRefMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"@metamask/json-rpc-engine\");\nconst full_1 = require(\"klona/full\");\nconst logging_utils_1 = require(\"./logging-utils\");\nconst cache_1 = require(\"./utils/cache\");\nconst log = (0, logging_utils_1.createModuleLogger)(logging_utils_1.projectLogger, 'block-ref');\nfunction createBlockRefMiddleware({ provider, blockTracker, } = {}) {\n    if (!provider) {\n        throw Error('BlockRefMiddleware - mandatory \"provider\" option is missing.');\n    }\n    if (!blockTracker) {\n        throw Error('BlockRefMiddleware - mandatory \"blockTracker\" option is missing.');\n    }\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, next) => {\n        var _a;\n        const blockRefIndex = (0, cache_1.blockTagParamIndex)(req.method);\n        // skip if method does not include blockRef\n        if (blockRefIndex === undefined) {\n            return next();\n        }\n        const blockRef = Array.isArray(req.params)\n            ? (_a = req.params[blockRefIndex]) !== null && _a !== void 0 ? _a : 'latest'\n            : 'latest';\n        // skip if not \"latest\"\n        if (blockRef !== 'latest') {\n            log('blockRef is not \"latest\", carrying request forward');\n            return next();\n        }\n        // lookup latest block\n        const latestBlockNumber = await blockTracker.getLatestBlock();\n        log(`blockRef is \"latest\", setting param ${blockRefIndex} to latest block ${latestBlockNumber}`);\n        // create child request with specific block-ref\n        const childRequest = (0, full_1.klona)(req);\n        if (Array.isArray(childRequest.params)) {\n            childRequest.params[blockRefIndex] = latestBlockNumber;\n        }\n        // perform child request\n        log('Performing another request %o', childRequest);\n        // copy child result onto original response\n        res.result = await provider.request(childRequest);\n        return undefined;\n    });\n}\nexports.createBlockRefMiddleware = createBlockRefMiddleware;\n//# sourceMappingURL=block-ref.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBlockTrackerInspectorMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"@metamask/json-rpc-engine\");\nconst logging_utils_1 = require(\"./logging-utils\");\nconst log = (0, logging_utils_1.createModuleLogger)(logging_utils_1.projectLogger, 'block-tracker-inspector');\nconst futureBlockRefRequests = [\n    'eth_getTransactionByHash',\n    'eth_getTransactionReceipt',\n];\n/**\n * Determines whether the given object has the given property.\n *\n * @param objectToCheck - The object to check.\n * @param property - The property to look for.\n * @returns Whether the object has the property.\n */\nfunction hasProperty(objectToCheck, property) {\n    return Object.hasOwnProperty.call(objectToCheck, property);\n}\nfunction getResultBlockNumber(response) {\n    const { result } = response;\n    if (!result ||\n        typeof result !== 'object' ||\n        !hasProperty(result, 'blockNumber')) {\n        return undefined;\n    }\n    if (typeof result.blockNumber === 'string') {\n        return result.blockNumber;\n    }\n    return undefined;\n}\n// inspect if response contains a block ref higher than our latest block\nfunction createBlockTrackerInspectorMiddleware({ blockTracker, }) {\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, next) => {\n        if (!futureBlockRefRequests.includes(req.method)) {\n            return next();\n        }\n        // eslint-disable-next-line n/callback-return\n        await next();\n        // abort if no result or no block number\n        const responseBlockNumber = getResultBlockNumber(res);\n        if (!responseBlockNumber) {\n            return undefined;\n        }\n        log('res.result.blockNumber exists, proceeding. res = %o', res);\n        // if number is higher, suggest block-tracker check for a new block\n        const blockNumber = Number.parseInt(responseBlockNumber, 16);\n        // Typecast: If getCurrentBlock returns null, currentBlockNumber will be NaN, which is fine.\n        const currentBlockNumber = Number.parseInt(blockTracker.getCurrentBlock(), 16);\n        if (blockNumber > currentBlockNumber) {\n            log('blockNumber from response is greater than current block number, refreshing current block number');\n            await blockTracker.checkForLatestBlock();\n        }\n        return undefined;\n    });\n}\nexports.createBlockTrackerInspectorMiddleware = createBlockTrackerInspectorMiddleware;\n//# sourceMappingURL=block-tracker-inspector.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createFetchConfigFromReq = exports.createFetchMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"@metamask/json-rpc-engine\");\nconst rpc_errors_1 = require(\"@metamask/rpc-errors\");\nconst timeout_1 = require(\"./utils/timeout\");\nconst RETRIABLE_ERRORS = [\n    // ignore server overload errors\n    'Gateway timeout',\n    'ETIMEDOUT',\n    // ignore server sent html error pages\n    // or truncated json responses\n    'failed to parse response body',\n    // ignore errors where http req failed to establish\n    'Failed to fetch',\n];\n/**\n * Create middleware for sending a JSON-RPC request to the given RPC URL.\n *\n * @param options - Options\n * @param options.btoa - Generates a base64-encoded string from a binary string.\n * @param options.fetch - The `fetch` function; expected to be equivalent to `window.fetch`.\n * @param options.rpcUrl - The URL to send the request to.\n * @param options.originHttpHeaderKey - If provider, the origin field for each JSON-RPC request\n * will be attached to each outgoing fetch request under this header.\n * @returns The fetch middleware.\n */\nfunction createFetchMiddleware({ \n// eslint-disable-next-line @typescript-eslint/no-shadow\nbtoa, \n// eslint-disable-next-line @typescript-eslint/no-shadow\nfetch, rpcUrl, originHttpHeaderKey, }) {\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, _next) => {\n        const { fetchUrl, fetchParams } = createFetchConfigFromReq({\n            btoa,\n            req,\n            rpcUrl,\n            originHttpHeaderKey,\n        });\n        // attempt request multiple times\n        const maxAttempts = 5;\n        const retryInterval = 1000;\n        for (let attempt = 0; attempt < maxAttempts; attempt++) {\n            try {\n                const fetchRes = await fetch(fetchUrl, fetchParams);\n                // check for http errrors\n                checkForHttpErrors(fetchRes);\n                // parse response body\n                const rawBody = await fetchRes.text();\n                let fetchBody;\n                try {\n                    fetchBody = JSON.parse(rawBody);\n                }\n                catch (_) {\n                    throw new Error(`FetchMiddleware - failed to parse response body: \"${rawBody}\"`);\n                }\n                const result = parseResponse(fetchRes, fetchBody);\n                // set result and exit retry loop\n                res.result = result;\n                return;\n            }\n            catch (err) {\n                const errMsg = err.toString();\n                const isRetriable = RETRIABLE_ERRORS.some((phrase) => errMsg.includes(phrase));\n                // re-throw error if not retriable\n                if (!isRetriable) {\n                    throw err;\n                }\n            }\n            // delay before retrying\n            await (0, timeout_1.timeout)(retryInterval);\n        }\n    });\n}\nexports.createFetchMiddleware = createFetchMiddleware;\nfunction checkForHttpErrors(fetchRes) {\n    // check for errors\n    switch (fetchRes.status) {\n        case 405:\n            throw rpc_errors_1.rpcErrors.methodNotFound();\n        case 418:\n            throw createRatelimitError();\n        case 503:\n        case 504:\n            throw createTimeoutError();\n        default:\n            break;\n    }\n}\nfunction parseResponse(fetchRes, body) {\n    // check for error code\n    if (fetchRes.status !== 200) {\n        throw rpc_errors_1.rpcErrors.internal({\n            message: `Non-200 status code: '${fetchRes.status}'`,\n            data: body,\n        });\n    }\n    // check for rpc error\n    if (body.error) {\n        throw rpc_errors_1.rpcErrors.internal({\n            data: body.error,\n        });\n    }\n    // return successful result\n    return body.result;\n}\n/**\n * Generate `fetch` configuration for sending the given request to an RPC API.\n *\n * @param options - Options\n * @param options.btoa - Generates a base64-encoded string from a binary string.\n * @param options.rpcUrl - The URL to send the request to.\n * @param options.originHttpHeaderKey - If provider, the origin field for each JSON-RPC request\n * will be attached to each outgoing fetch request under this header.\n * @param options.req\n * @returns The fetch middleware.\n */\nfunction createFetchConfigFromReq({ \n// eslint-disable-next-line @typescript-eslint/no-shadow\nbtoa, req, rpcUrl, originHttpHeaderKey, }) {\n    const parsedUrl = new URL(rpcUrl);\n    const fetchUrl = normalizeUrlFromParsed(parsedUrl);\n    // prepare payload\n    // copy only canonical json rpc properties\n    const payload = {\n        id: req.id,\n        jsonrpc: req.jsonrpc,\n        method: req.method,\n        params: req.params,\n    };\n    // extract 'origin' parameter from request\n    const originDomain = req.origin;\n    // serialize request body\n    const serializedPayload = JSON.stringify(payload);\n    // configure fetch params\n    const fetchParams = {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: serializedPayload,\n    };\n    // encoded auth details as header (not allowed in fetch url)\n    if (parsedUrl.username && parsedUrl.password) {\n        const authString = `${parsedUrl.username}:${parsedUrl.password}`;\n        const encodedAuth = btoa(authString);\n        fetchParams.headers.Authorization = `Basic ${encodedAuth}`;\n    }\n    // optional: add request origin as header\n    if (originHttpHeaderKey && originDomain) {\n        fetchParams.headers[originHttpHeaderKey] = originDomain;\n    }\n    return { fetchUrl, fetchParams };\n}\nexports.createFetchConfigFromReq = createFetchConfigFromReq;\nfunction normalizeUrlFromParsed(parsedUrl) {\n    let result = '';\n    result += parsedUrl.protocol;\n    result += `//${parsedUrl.hostname}`;\n    if (parsedUrl.port) {\n        result += `:${parsedUrl.port}`;\n    }\n    result += `${parsedUrl.pathname}`;\n    result += `${parsedUrl.search}`;\n    return result;\n}\nfunction createRatelimitError() {\n    return rpc_errors_1.rpcErrors.internal({ message: `Request is being rate limited.` });\n}\nfunction createTimeoutError() {\n    let msg = `Gateway timeout. The request took too long to process. `;\n    msg += `This can happen when querying logs over too wide a block range.`;\n    return rpc_errors_1.rpcErrors.internal({ message: msg });\n}\n//# sourceMappingURL=fetch.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./block-cache\"), exports);\n__exportStar(require(\"./block-ref-rewrite\"), exports);\n__exportStar(require(\"./block-ref\"), exports);\n__exportStar(require(\"./block-tracker-inspector\"), exports);\n__exportStar(require(\"./fetch\"), exports);\n__exportStar(require(\"./inflight-cache\"), exports);\n__exportStar(require(\"./providerAsMiddleware\"), exports);\n__exportStar(require(\"./retryOnEmpty\"), exports);\n__exportStar(require(\"./wallet\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createInflightCacheMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"@metamask/json-rpc-engine\");\nconst full_1 = require(\"klona/full\");\nconst logging_utils_1 = require(\"./logging-utils\");\nconst cache_1 = require(\"./utils/cache\");\nconst log = (0, logging_utils_1.createModuleLogger)(logging_utils_1.projectLogger, 'inflight-cache');\nfunction createInflightCacheMiddleware() {\n    const inflightRequests = {};\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, next) => {\n        // allow cach to be skipped if so specified\n        if (req.skipCache) {\n            return next();\n        }\n        // get cacheId, if cacheable\n        const cacheId = (0, cache_1.cacheIdentifierForRequest)(req);\n        // if not cacheable, skip\n        if (!cacheId) {\n            log('Request is not cacheable, proceeding. req = %o', req);\n            return next();\n        }\n        // check for matching requests\n        let activeRequestHandlers = inflightRequests[cacheId];\n        // if found, wait for the active request to be handled\n        if (activeRequestHandlers) {\n            // setup the response listener and wait for it to be called\n            // it will handle copying the result and request fields\n            log('Running %i handler(s) for request %o', activeRequestHandlers.length, req);\n            await createActiveRequestHandler(res, activeRequestHandlers);\n            return undefined;\n        }\n        // setup response handler array for subsequent requests\n        activeRequestHandlers = [];\n        inflightRequests[cacheId] = activeRequestHandlers;\n        // allow request to be handled normally\n        log('Carrying original request forward %o', req);\n        // eslint-disable-next-line n/callback-return\n        await next();\n        // clear inflight requests\n        delete inflightRequests[cacheId];\n        // schedule activeRequestHandlers to be handled\n        log('Running %i collected handler(s) for request %o', activeRequestHandlers.length, req);\n        handleActiveRequest(res, activeRequestHandlers);\n        // complete\n        return undefined;\n    });\n    async function createActiveRequestHandler(res, activeRequestHandlers) {\n        const { resolve, promise } = deferredPromise();\n        activeRequestHandlers.push((handledRes) => {\n            // append a copy of the result and error to the response\n            res.result = (0, full_1.klona)(handledRes.result);\n            res.error = (0, full_1.klona)(handledRes.error);\n            resolve();\n        });\n        return promise;\n    }\n    function handleActiveRequest(res, activeRequestHandlers) {\n        // use setTimeout so we can resolve our original request first\n        setTimeout(() => {\n            activeRequestHandlers.forEach((handler) => {\n                try {\n                    handler(res);\n                }\n                catch (err) {\n                    // catch error so all requests are handled correctly\n                    console.error(err);\n                }\n            });\n        });\n    }\n}\nexports.createInflightCacheMiddleware = createInflightCacheMiddleware;\nfunction deferredPromise() {\n    let resolve;\n    const promise = new Promise((_resolve) => {\n        resolve = _resolve;\n    });\n    return { resolve, promise };\n}\n//# sourceMappingURL=inflight-cache.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createModuleLogger = exports.projectLogger = void 0;\nconst utils_1 = require(\"@metamask/utils\");\nObject.defineProperty(exports, \"createModuleLogger\", { enumerable: true, get: function () { return utils_1.createModuleLogger; } });\nexports.projectLogger = (0, utils_1.createProjectLogger)('eth-json-rpc-middleware');\n//# sourceMappingURL=logging-utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ethersProviderAsMiddleware = exports.providerAsMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"@metamask/json-rpc-engine\");\nfunction providerAsMiddleware(provider) {\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res) => {\n        res.result = await provider.request(req);\n    });\n}\nexports.providerAsMiddleware = providerAsMiddleware;\nfunction ethersProviderAsMiddleware(provider) {\n    return (req, res, _next, end) => {\n        // send request to provider\n        provider.send(req, (err, providerRes) => {\n            // forward any error\n            if (err) {\n                // TODO: Remove this cast when next major `@metamask/json-rpc-engine` release is out\n                // The next release changes how errors are propogated.\n                return end(err);\n            }\n            // copy provider response onto original response\n            Object.assign(res, providerRes);\n            return end();\n        });\n    };\n}\nexports.ethersProviderAsMiddleware = ethersProviderAsMiddleware;\n//# sourceMappingURL=providerAsMiddleware.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createRetryOnEmptyMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"@metamask/json-rpc-engine\");\nconst full_1 = require(\"klona/full\");\nconst logging_utils_1 = require(\"./logging-utils\");\nconst cache_1 = require(\"./utils/cache\");\nconst error_1 = require(\"./utils/error\");\nconst timeout_1 = require(\"./utils/timeout\");\n//\n// RetryOnEmptyMiddleware will retry any request with an empty response that has\n// a numbered block reference at or lower than the blockTracker's latest block.\n// Its useful for dealing with load-balanced ethereum JSON RPC\n// nodes that are not always in sync with each other.\n//\nconst log = (0, logging_utils_1.createModuleLogger)(logging_utils_1.projectLogger, 'retry-on-empty');\n// empty values used to determine if a request should be retried\n// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\nconst emptyValues = [\n    undefined,\n    null,\n    '\\u003cnil\\u003e',\n];\nfunction createRetryOnEmptyMiddleware({ provider, blockTracker, } = {}) {\n    if (!provider) {\n        throw Error('RetryOnEmptyMiddleware - mandatory \"provider\" option is missing.');\n    }\n    if (!blockTracker) {\n        throw Error('RetryOnEmptyMiddleware - mandatory \"blockTracker\" option is missing.');\n    }\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, next) => {\n        const blockRefIndex = (0, cache_1.blockTagParamIndex)(req.method);\n        // skip if method does not include blockRef\n        if (blockRefIndex === undefined) {\n            return next();\n        }\n        // skip if not exact block references\n        let blockRef = Array.isArray(req.params) && req.params[blockRefIndex]\n            ? req.params[blockRefIndex]\n            : undefined;\n        // omitted blockRef implies \"latest\"\n        if (blockRef === undefined) {\n            blockRef = 'latest';\n        }\n        // skip if non-number block reference\n        if (['latest', 'pending'].includes(blockRef)) {\n            return next();\n        }\n        // skip if block refernce is not a valid number\n        const blockRefNumber = Number.parseInt(blockRef.slice(2), 16);\n        if (Number.isNaN(blockRefNumber)) {\n            return next();\n        }\n        // lookup latest block\n        const latestBlockNumberHex = await blockTracker.getLatestBlock();\n        const latestBlockNumber = Number.parseInt(latestBlockNumberHex.slice(2), 16);\n        // skip if request block number is higher than current\n        if (blockRefNumber > latestBlockNumber) {\n            log('Requested block number %o is higher than latest block number %o, falling through to original request', blockRefNumber, latestBlockNumber);\n            return next();\n        }\n        log('Requested block number %o is not higher than latest block number %o, trying request until non-empty response is received', blockRefNumber, latestBlockNumber);\n        // create child request with specific block-ref\n        const childRequest = (0, full_1.klona)(req);\n        // attempt child request until non-empty response is received\n        const childResult = await retry(10, async () => {\n            log('Performing request %o', childRequest);\n            const attemptResult = await provider.request(childRequest);\n            log('Result is %o', attemptResult);\n            // verify result\n            const allEmptyValues = emptyValues;\n            if (allEmptyValues.includes(attemptResult)) {\n                throw new Error(`RetryOnEmptyMiddleware - empty result \"${JSON.stringify(attemptResult)}\" for request \"${JSON.stringify(childRequest)}\"`);\n            }\n            return attemptResult;\n        });\n        log('Copying result %o', childResult);\n        // copy child result onto original response\n        res.result = childResult;\n        return undefined;\n    });\n}\nexports.createRetryOnEmptyMiddleware = createRetryOnEmptyMiddleware;\nasync function retry(maxRetries, asyncFn) {\n    for (let index = 0; index < maxRetries; index++) {\n        try {\n            return await asyncFn();\n        }\n        catch (err) {\n            if ((0, error_1.isExecutionRevertedError)(err)) {\n                throw err;\n            }\n            log('(call %i) Request failed, waiting 1s to retry again...', index + 1);\n            await (0, timeout_1.timeout)(1000);\n        }\n    }\n    log('Retries exhausted');\n    throw new Error('RetryOnEmptyMiddleware - retries exhausted');\n}\n//# sourceMappingURL=retryOnEmpty.js.map","/*\n\nThis migration breaks out the CurrencyController substate\n\n*/\n\nimport { cloneDeep, merge } from 'lodash';\n\nconst version = 9;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = merge({}, state, {\n    CurrencyController: {\n      currentCurrency: state.currentFiat || state.fiatCurrency || 'USD',\n      conversionRate: state.conversionRate,\n      conversionDate: state.conversionDate,\n    },\n  });\n  delete newState.currentFiat;\n  delete newState.fiatCurrency;\n  delete newState.conversionRate;\n  delete newState.conversionDate;\n\n  return newState;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cacheTypeForMethod = exports.blockTagParamIndex = exports.blockTagForRequest = exports.canCache = exports.cacheIdentifierForRequest = exports.CacheStrategy = void 0;\nconst safe_stable_stringify_1 = require(\"safe-stable-stringify\");\nconst stringify = (0, safe_stable_stringify_1.configure)({ bigint: false, circularValue: Error });\n/**\n * The cache strategy to use for a given method.\n */\nvar CacheStrategy;\n(function (CacheStrategy) {\n    /**\n     * Cache per-block.\n     */\n    CacheStrategy[\"Block\"] = \"block\";\n    /**\n     * Cache until a chain reorganization occurs.\n     */\n    CacheStrategy[\"Fork\"] = \"fork\";\n    /**\n     * Never cache.\n     */\n    CacheStrategy[\"Never\"] = \"never\";\n    /**\n     * Permanently cache.\n     */\n    CacheStrategy[\"Permanent\"] = \"perma\";\n})(CacheStrategy = exports.CacheStrategy || (exports.CacheStrategy = {}));\n/**\n * Return a cache identifier for the given request.\n *\n * This identifier should include any request details that might impact the\n * response, with the exception of the block parameter if the `skipBlockRef`\n * option is set,\n *\n * If the request cannot be cached, this will return `null`.\n *\n * @param request - The JSON-RPC request.\n * @param skipBlockRef - Skip the block parameter when generating the cache\n * identifier.\n * @returns The cache identifier for this request, or `null` if it can't be\n * cached.\n */\nfunction cacheIdentifierForRequest(request, skipBlockRef) {\n    var _a;\n    const simpleParams = skipBlockRef\n        ? paramsWithoutBlockTag(request)\n        : (_a = request.params) !== null && _a !== void 0 ? _a : [];\n    if (canCache(request.method)) {\n        return `${request.method}:${stringify(simpleParams)}`;\n    }\n    return null;\n}\nexports.cacheIdentifierForRequest = cacheIdentifierForRequest;\n/**\n * Return whether a method can be cached or not.\n *\n * @param method - The method to check.\n * @returns Whether the method can be cached.\n */\nfunction canCache(method) {\n    return cacheTypeForMethod(method) !== CacheStrategy.Never;\n}\nexports.canCache = canCache;\n/**\n * Return the block parameter for the given request, if it has one.\n *\n * @param request - The JSON-RPC request.\n * @returns The block parameter in the given request, or `undefined` if none was found.\n */\nfunction blockTagForRequest(request) {\n    if (!request.params) {\n        return undefined;\n    }\n    const index = blockTagParamIndex(request.method);\n    // Block tag param not passed.\n    if (index === undefined ||\n        !Array.isArray(request.params) ||\n        index >= request.params.length) {\n        return undefined;\n    }\n    return request.params[index];\n}\nexports.blockTagForRequest = blockTagForRequest;\n/**\n * Return the request parameters without the block parameter.\n *\n * @param request - The JSON-RPC request.\n * @returns The request parameters with the block parameter removed, if one was found.\n */\nfunction paramsWithoutBlockTag(request) {\n    if (!request.params) {\n        return [];\n    }\n    const index = blockTagParamIndex(request.method);\n    // Block tag param not passed.\n    if (index === undefined ||\n        !Array.isArray(request.params) ||\n        index >= request.params.length) {\n        return request.params;\n    }\n    // eth_getBlockByNumber has the block tag first, then the optional includeTx? param\n    if (request.method === 'eth_getBlockByNumber') {\n        return request.params.slice(1);\n    }\n    return request.params.slice(0, index);\n}\n/**\n * Returns the index of the block parameter for the given method.\n *\n * @param method - A JSON-RPC method.\n * @returns The index of the block parameter for that method, or `undefined` if\n * there is no known block parameter.\n */\nfunction blockTagParamIndex(method) {\n    switch (method) {\n        // blockTag is at index 2\n        case 'eth_getStorageAt':\n            return 2;\n        // blockTag is at index 1\n        case 'eth_getBalance':\n        case 'eth_getCode':\n        case 'eth_getTransactionCount':\n        case 'eth_call':\n            return 1;\n        // blockTag is at index 0\n        case 'eth_getBlockByNumber':\n            return 0;\n        // there is no blockTag\n        default:\n            return undefined;\n    }\n}\nexports.blockTagParamIndex = blockTagParamIndex;\n/**\n * Return the cache type used for the given method.\n *\n * @param method - A JSON-RPC method.\n * @returns The cache type to use for that method.\n */\nfunction cacheTypeForMethod(method) {\n    switch (method) {\n        // cache permanently\n        case 'web3_clientVersion':\n        case 'web3_sha3':\n        case 'eth_protocolVersion':\n        case 'eth_getBlockTransactionCountByHash':\n        case 'eth_getUncleCountByBlockHash':\n        case 'eth_getCode':\n        case 'eth_getBlockByHash':\n        case 'eth_getTransactionByHash':\n        case 'eth_getTransactionByBlockHashAndIndex':\n        case 'eth_getTransactionReceipt':\n        case 'eth_getUncleByBlockHashAndIndex':\n        case 'eth_getCompilers':\n        case 'eth_compileLLL':\n        case 'eth_compileSolidity':\n        case 'eth_compileSerpent':\n        case 'shh_version':\n        case 'test_permaCache':\n            return CacheStrategy.Permanent;\n        // cache until fork\n        case 'eth_getBlockByNumber':\n        case 'eth_getBlockTransactionCountByNumber':\n        case 'eth_getUncleCountByBlockNumber':\n        case 'eth_getTransactionByBlockNumberAndIndex':\n        case 'eth_getUncleByBlockNumberAndIndex':\n        case 'test_forkCache':\n            return CacheStrategy.Fork;\n        // cache for block\n        case 'eth_gasPrice':\n        case 'eth_blockNumber':\n        case 'eth_getBalance':\n        case 'eth_getStorageAt':\n        case 'eth_getTransactionCount':\n        case 'eth_call':\n        case 'eth_estimateGas':\n        case 'eth_getFilterLogs':\n        case 'eth_getLogs':\n        case 'test_blockCache':\n            return CacheStrategy.Block;\n        // never cache\n        default:\n            return CacheStrategy.Never;\n    }\n}\nexports.cacheTypeForMethod = cacheTypeForMethod;\n//# sourceMappingURL=cache.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isExecutionRevertedError = void 0;\nconst rpc_errors_1 = require(\"@metamask/rpc-errors\");\nconst utils_1 = require(\"@metamask/utils\");\nfunction isExecutionRevertedError(error) {\n    return ((0, utils_1.isJsonRpcError)(error) &&\n        error.code === rpc_errors_1.errorCodes.rpc.invalidInput &&\n        error.message === 'execution reverted');\n}\nexports.isExecutionRevertedError = isExecutionRevertedError;\n//# sourceMappingURL=error.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseTypedMessage = exports.normalizeTypedMessage = void 0;\n/**\n * Normalizes the messageData for the eth_signTypedData\n *\n * @param messageData - The messageData to normalize.\n * @returns The normalized messageData.\n */\nfunction normalizeTypedMessage(messageData) {\n    var _a;\n    let data;\n    try {\n        data = parseTypedMessage(messageData);\n    }\n    catch (e) {\n        // Ignore normalization errors and pass the message as is\n        return messageData;\n    }\n    const { verifyingContract } = (_a = data.domain) !== null && _a !== void 0 ? _a : {};\n    if (!verifyingContract) {\n        return messageData;\n    }\n    data.domain.verifyingContract = normalizeContractAddress(verifyingContract);\n    return JSON.stringify(data);\n}\nexports.normalizeTypedMessage = normalizeTypedMessage;\n/**\n * Parses the messageData to obtain the data object for EIP712 normalization\n *\n * @param data - The messageData to parse.\n * @returns The data object for EIP712 normalization.\n */\nfunction parseTypedMessage(data) {\n    if (typeof data !== 'string') {\n        return data;\n    }\n    return JSON.parse(data);\n}\nexports.parseTypedMessage = parseTypedMessage;\n/**\n * Normalizes the address to standard hexadecimal format\n *\n * @param address - The address to normalize.\n * @returns The normalized address.\n */\nfunction normalizeContractAddress(address) {\n    if (address.startsWith('0X')) {\n        return `0x${address.slice(2)}`;\n    }\n    return address;\n}\n//# sourceMappingURL=normalize.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timeout = void 0;\n/**\n * Wait the specified number of milliseconds.\n *\n * @param duration - The number of milliseconds to wait.\n * @returns A promise that resolves after the specified amount of time.\n */\nasync function timeout(duration) {\n    return new Promise((resolve) => setTimeout(resolve, duration));\n}\nexports.timeout = timeout;\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createWalletMiddleware = void 0;\nconst sigUtil = __importStar(require(\"@metamask/eth-sig-util\"));\nconst json_rpc_engine_1 = require(\"@metamask/json-rpc-engine\");\nconst rpc_errors_1 = require(\"@metamask/rpc-errors\");\nconst utils_1 = require(\"@metamask/utils\");\nconst normalize_1 = require(\"./utils/normalize\");\nfunction createWalletMiddleware({ getAccounts, processDecryptMessage, processEncryptionPublicKey, processEthSignMessage, processPersonalMessage, processTransaction, processSignTransaction, processTypedMessage, processTypedMessageV3, processTypedMessageV4, }) {\n    if (!getAccounts) {\n        throw new Error('opts.getAccounts is required');\n    }\n    return (0, json_rpc_engine_1.createScaffoldMiddleware)({\n        // account lookups\n        eth_accounts: (0, json_rpc_engine_1.createAsyncMiddleware)(lookupAccounts),\n        eth_coinbase: (0, json_rpc_engine_1.createAsyncMiddleware)(lookupDefaultAccount),\n        // tx signatures\n        eth_sendTransaction: (0, json_rpc_engine_1.createAsyncMiddleware)(sendTransaction),\n        eth_signTransaction: (0, json_rpc_engine_1.createAsyncMiddleware)(signTransaction),\n        // message signatures\n        eth_sign: (0, json_rpc_engine_1.createAsyncMiddleware)(ethSign),\n        eth_signTypedData: (0, json_rpc_engine_1.createAsyncMiddleware)(signTypedData),\n        eth_signTypedData_v3: (0, json_rpc_engine_1.createAsyncMiddleware)(signTypedDataV3),\n        eth_signTypedData_v4: (0, json_rpc_engine_1.createAsyncMiddleware)(signTypedDataV4),\n        personal_sign: (0, json_rpc_engine_1.createAsyncMiddleware)(personalSign),\n        eth_getEncryptionPublicKey: (0, json_rpc_engine_1.createAsyncMiddleware)(encryptionPublicKey),\n        eth_decrypt: (0, json_rpc_engine_1.createAsyncMiddleware)(decryptMessage),\n        personal_ecRecover: (0, json_rpc_engine_1.createAsyncMiddleware)(personalRecover),\n    });\n    //\n    // account lookups\n    //\n    async function lookupAccounts(req, res) {\n        res.result = await getAccounts(req);\n    }\n    async function lookupDefaultAccount(req, res) {\n        const accounts = await getAccounts(req);\n        res.result = accounts[0] || null;\n    }\n    //\n    // transaction signatures\n    //\n    async function sendTransaction(req, res) {\n        if (!processTransaction) {\n            throw rpc_errors_1.rpcErrors.methodNotSupported();\n        }\n        if (!req.params ||\n            !Array.isArray(req.params) ||\n            !(req.params.length >= 1)) {\n            throw rpc_errors_1.rpcErrors.invalidInput();\n        }\n        const params = req.params[0];\n        const txParams = Object.assign(Object.assign({}, params), { from: await validateAndNormalizeKeyholder((params === null || params === void 0 ? void 0 : params.from) || '', req) });\n        res.result = await processTransaction(txParams, req);\n    }\n    async function signTransaction(req, res) {\n        if (!processSignTransaction) {\n            throw rpc_errors_1.rpcErrors.methodNotSupported();\n        }\n        if (!req.params ||\n            !Array.isArray(req.params) ||\n            !(req.params.length >= 1)) {\n            throw rpc_errors_1.rpcErrors.invalidInput();\n        }\n        const params = req.params[0];\n        const txParams = Object.assign(Object.assign({}, params), { from: await validateAndNormalizeKeyholder((params === null || params === void 0 ? void 0 : params.from) || '', req) });\n        res.result = await processSignTransaction(txParams, req);\n    }\n    //\n    // message signatures\n    //\n    async function ethSign(req, res) {\n        if (!processEthSignMessage) {\n            throw rpc_errors_1.rpcErrors.methodNotSupported();\n        }\n        if (!(req === null || req === void 0 ? void 0 : req.params) ||\n            !Array.isArray(req.params) ||\n            !(req.params.length >= 2)) {\n            throw rpc_errors_1.rpcErrors.invalidInput();\n        }\n        const params = req.params;\n        const address = await validateAndNormalizeKeyholder(params[0], req);\n        const message = params[1];\n        const extraParams = params[2] || {};\n        const msgParams = Object.assign(Object.assign({}, extraParams), { from: address, data: message, signatureMethod: 'eth_sign' });\n        res.result = await processEthSignMessage(msgParams, req);\n    }\n    async function signTypedData(req, res) {\n        if (!processTypedMessage) {\n            throw rpc_errors_1.rpcErrors.methodNotSupported();\n        }\n        if (!(req === null || req === void 0 ? void 0 : req.params) ||\n            !Array.isArray(req.params) ||\n            !(req.params.length >= 2)) {\n            throw rpc_errors_1.rpcErrors.invalidInput();\n        }\n        const params = req.params;\n        const message = params[0];\n        const address = await validateAndNormalizeKeyholder(params[1], req);\n        const version = 'V1';\n        const extraParams = params[2] || {};\n        const msgParams = Object.assign(Object.assign({}, extraParams), { from: address, data: message, signatureMethod: 'eth_signTypedData', version });\n        res.result = await processTypedMessage(msgParams, req, version);\n    }\n    async function signTypedDataV3(req, res) {\n        if (!processTypedMessageV3) {\n            throw rpc_errors_1.rpcErrors.methodNotSupported();\n        }\n        if (!(req === null || req === void 0 ? void 0 : req.params) ||\n            !Array.isArray(req.params) ||\n            !(req.params.length >= 2)) {\n            throw rpc_errors_1.rpcErrors.invalidInput();\n        }\n        const params = req.params;\n        const address = await validateAndNormalizeKeyholder(params[0], req);\n        const message = (0, normalize_1.normalizeTypedMessage)(params[1]);\n        validateVerifyingContract(message);\n        const version = 'V3';\n        const msgParams = {\n            data: message,\n            from: address,\n            version,\n            signatureMethod: 'eth_signTypedData_v3',\n        };\n        res.result = await processTypedMessageV3(msgParams, req, version);\n    }\n    async function signTypedDataV4(req, res) {\n        if (!processTypedMessageV4) {\n            throw rpc_errors_1.rpcErrors.methodNotSupported();\n        }\n        if (!(req === null || req === void 0 ? void 0 : req.params) ||\n            !Array.isArray(req.params) ||\n            !(req.params.length >= 2)) {\n            throw rpc_errors_1.rpcErrors.invalidInput();\n        }\n        const params = req.params;\n        const address = await validateAndNormalizeKeyholder(params[0], req);\n        const message = (0, normalize_1.normalizeTypedMessage)(params[1]);\n        validateVerifyingContract(message);\n        const version = 'V4';\n        const msgParams = {\n            data: message,\n            from: address,\n            version,\n            signatureMethod: 'eth_signTypedData_v4',\n        };\n        res.result = await processTypedMessageV4(msgParams, req, version);\n    }\n    async function personalSign(req, res) {\n        if (!processPersonalMessage) {\n            throw rpc_errors_1.rpcErrors.methodNotSupported();\n        }\n        if (!(req === null || req === void 0 ? void 0 : req.params) ||\n            !Array.isArray(req.params) ||\n            !(req.params.length >= 2)) {\n            throw rpc_errors_1.rpcErrors.invalidInput();\n        }\n        const params = req.params;\n        // process normally\n        const firstParam = params[0];\n        const secondParam = params[1];\n        // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n        const extraParams = params[2] || {};\n        // We initially incorrectly ordered these parameters.\n        // To gracefully respect users who adopted this API early,\n        // we are currently gracefully recovering from the wrong param order\n        // when it is clearly identifiable.\n        //\n        // That means when the first param is definitely an address,\n        // and the second param is definitely not, but is hex.\n        let address, message;\n        if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n            let warning = `The eth_personalSign method requires params ordered `;\n            warning += `[message, address]. This was previously handled incorrectly, `;\n            warning += `and has been corrected automatically. `;\n            warning += `Please switch this param order for smooth behavior in the future.`;\n            res.warning = warning;\n            address = firstParam;\n            message = secondParam;\n        }\n        else {\n            message = firstParam;\n            address = secondParam;\n        }\n        address = await validateAndNormalizeKeyholder(address, req);\n        const msgParams = Object.assign(Object.assign({}, extraParams), { from: address, data: message, signatureMethod: 'personal_sign' });\n        // eslint-disable-next-line require-atomic-updates\n        res.result = await processPersonalMessage(msgParams, req);\n    }\n    async function personalRecover(req, res) {\n        if (!(req === null || req === void 0 ? void 0 : req.params) ||\n            !Array.isArray(req.params) ||\n            !(req.params.length >= 2)) {\n            throw rpc_errors_1.rpcErrors.invalidInput();\n        }\n        const params = req.params;\n        const message = params[0];\n        const signature = params[1];\n        const signerAddress = sigUtil.recoverPersonalSignature({\n            data: message,\n            signature,\n        });\n        res.result = signerAddress;\n    }\n    async function encryptionPublicKey(req, res) {\n        if (!processEncryptionPublicKey) {\n            throw rpc_errors_1.rpcErrors.methodNotSupported();\n        }\n        if (!(req === null || req === void 0 ? void 0 : req.params) ||\n            !Array.isArray(req.params) ||\n            !(req.params.length >= 1)) {\n            throw rpc_errors_1.rpcErrors.invalidInput();\n        }\n        const params = req.params;\n        const address = await validateAndNormalizeKeyholder(params[0], req);\n        res.result = await processEncryptionPublicKey(address, req);\n    }\n    async function decryptMessage(req, res) {\n        if (!processDecryptMessage) {\n            throw rpc_errors_1.rpcErrors.methodNotSupported();\n        }\n        if (!(req === null || req === void 0 ? void 0 : req.params) ||\n            !Array.isArray(req.params) ||\n            !(req.params.length >= 1)) {\n            throw rpc_errors_1.rpcErrors.invalidInput();\n        }\n        const params = req.params;\n        const ciphertext = params[0];\n        const address = await validateAndNormalizeKeyholder(params[1], req);\n        const extraParams = params[2] || {};\n        const msgParams = Object.assign(Object.assign({}, extraParams), { from: address, data: ciphertext });\n        res.result = await processDecryptMessage(msgParams, req);\n    }\n    //\n    // utility\n    //\n    /**\n     * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n     * copy of it.\n     *\n     * @param address - The address to validate and normalize.\n     * @param req - The request object.\n     * @returns {string} - The normalized address, if valid. Otherwise, throws\n     * an error\n     */\n    async function validateAndNormalizeKeyholder(address, req) {\n        if (typeof address === 'string' &&\n            address.length > 0 &&\n            resemblesAddress(address)) {\n            // Ensure that an \"unauthorized\" error is thrown if the requester does not have the `eth_accounts`\n            // permission.\n            const accounts = await getAccounts(req);\n            const normalizedAccounts = accounts.map((_address) => _address.toLowerCase());\n            const normalizedAddress = address.toLowerCase();\n            if (normalizedAccounts.includes(normalizedAddress)) {\n                return normalizedAddress;\n            }\n            throw rpc_errors_1.providerErrors.unauthorized();\n        }\n        throw rpc_errors_1.rpcErrors.invalidParams({\n            message: `Invalid parameters: must provide an Ethereum address.`,\n        });\n    }\n}\nexports.createWalletMiddleware = createWalletMiddleware;\n/**\n * Validates verifyingContract of typedSignMessage.\n *\n * @param data - The data passed in typedSign request.\n */\nfunction validateVerifyingContract(data) {\n    const { domain: { verifyingContract } = {} } = (0, normalize_1.parseTypedMessage)(data);\n    if (verifyingContract && verifyingContract !== 'cosmos' && !(0, utils_1.isValidHexAddress)(verifyingContract)) {\n        throw rpc_errors_1.rpcErrors.invalidInput();\n    }\n}\nfunction resemblesAddress(str) {\n    // hex prefix 2 + 20 bytes\n    return str.length === 2 + 20 * 2;\n}\n//# sourceMappingURL=wallet.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./ledger-keyring\"), exports);\n__exportStar(require(\"./ledger-iframe-bridge\"), exports);\n__exportStar(require(\"./ledger-bridge\"), exports);\n//# sourceMappingURL=index.js.map","import { BridgeControllerState, BridgeFeatureFlagsKey } from './types';\n\nexport const BRIDGE_CONTROLLER_NAME = 'BridgeController';\n\nexport const DEFAULT_BRIDGE_CONTROLLER_STATE: BridgeControllerState = {\n  bridgeFeatureFlags: {\n    [BridgeFeatureFlagsKey.EXTENSION_SUPPORT]: false,\n    [BridgeFeatureFlagsKey.NETWORK_SRC_ALLOWLIST]: [],\n    [BridgeFeatureFlagsKey.NETWORK_DEST_ALLOWLIST]: [],\n  },\n};\n","/*\n\nThis migration breaks out the ShapeShiftController substate\n\n*/\n\nimport { cloneDeep, merge } from 'lodash';\n\nconst version = 10;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = merge({}, state, {\n    ShapeShiftController: {\n      shapeShiftTxList: state.shapeShiftTxList || [],\n    },\n  });\n  delete newState.shapeShiftTxList;\n\n  return newState;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ledger-bridge.js.map","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _LedgerIframeBridge_instances, _LedgerIframeBridge_opts, _LedgerIframeBridge_deviceActionMessage, _LedgerIframeBridge_setupIframe, _LedgerIframeBridge_getOrigin, _LedgerIframeBridge_eventListener, _LedgerIframeBridge_sendMessage, _LedgerIframeBridge_validateConfiguration;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LedgerIframeBridge = exports.IFrameMessageAction = void 0;\nconst LEDGER_IFRAME_ID = 'LEDGER-IFRAME';\nvar IFrameMessageAction;\n(function (IFrameMessageAction) {\n    IFrameMessageAction[\"LedgerConnectionChange\"] = \"ledger-connection-change\";\n    IFrameMessageAction[\"LedgerUnlock\"] = \"ledger-unlock\";\n    IFrameMessageAction[\"LedgerMakeApp\"] = \"ledger-make-app\";\n    IFrameMessageAction[\"LedgerUpdateTransport\"] = \"ledger-update-transport\";\n    IFrameMessageAction[\"LedgerSignTransaction\"] = \"ledger-sign-transaction\";\n    IFrameMessageAction[\"LedgerSignPersonalMessage\"] = \"ledger-sign-personal-message\";\n    IFrameMessageAction[\"LedgerSignTypedData\"] = \"ledger-sign-typed-data\";\n})(IFrameMessageAction = exports.IFrameMessageAction || (exports.IFrameMessageAction = {}));\nclass LedgerIframeBridge {\n    constructor(opts = {\n        bridgeUrl: 'https://metamask.github.io/eth-ledger-bridge-keyring',\n    }) {\n        _LedgerIframeBridge_instances.add(this);\n        this.iframeLoaded = false;\n        _LedgerIframeBridge_opts.set(this, void 0);\n        this.isDeviceConnected = false;\n        this.currentMessageId = 0;\n        this.messageCallbacks = {};\n        __classPrivateFieldGet(this, _LedgerIframeBridge_instances, \"m\", _LedgerIframeBridge_validateConfiguration).call(this, opts);\n        __classPrivateFieldSet(this, _LedgerIframeBridge_opts, {\n            bridgeUrl: opts === null || opts === void 0 ? void 0 : opts.bridgeUrl,\n        }, \"f\");\n    }\n    async init() {\n        await __classPrivateFieldGet(this, _LedgerIframeBridge_instances, \"m\", _LedgerIframeBridge_setupIframe).call(this, __classPrivateFieldGet(this, _LedgerIframeBridge_opts, \"f\").bridgeUrl);\n        this.eventListener = __classPrivateFieldGet(this, _LedgerIframeBridge_instances, \"m\", _LedgerIframeBridge_eventListener).bind(this, __classPrivateFieldGet(this, _LedgerIframeBridge_opts, \"f\").bridgeUrl);\n        window.addEventListener('message', this.eventListener);\n    }\n    async destroy() {\n        if (this.eventListener) {\n            window.removeEventListener('message', this.eventListener);\n        }\n    }\n    async getOptions() {\n        return __classPrivateFieldGet(this, _LedgerIframeBridge_opts, \"f\");\n    }\n    async setOptions(opts) {\n        var _a;\n        __classPrivateFieldGet(this, _LedgerIframeBridge_instances, \"m\", _LedgerIframeBridge_validateConfiguration).call(this, opts);\n        if (((_a = __classPrivateFieldGet(this, _LedgerIframeBridge_opts, \"f\")) === null || _a === void 0 ? void 0 : _a.bridgeUrl) !== opts.bridgeUrl) {\n            __classPrivateFieldGet(this, _LedgerIframeBridge_opts, \"f\").bridgeUrl = opts.bridgeUrl;\n            await this.destroy();\n            await this.init();\n        }\n    }\n    async attemptMakeApp() {\n        return new Promise((resolve, reject) => {\n            __classPrivateFieldGet(this, _LedgerIframeBridge_instances, \"m\", _LedgerIframeBridge_sendMessage).call(this, {\n                action: IFrameMessageAction.LedgerMakeApp,\n            }, (response) => {\n                if ('success' in response && response.success) {\n                    resolve(true);\n                }\n                else if ('error' in response) {\n                    reject(response.error);\n                }\n                else {\n                    reject(new Error('Unknown error occurred'));\n                }\n            });\n        });\n    }\n    async updateTransportMethod(transportType) {\n        return new Promise((resolve, reject) => {\n            // If the iframe isn't loaded yet, let's store the desired transportType value and\n            // optimistically return a successful promise\n            if (!this.iframeLoaded) {\n                throw new Error('The iframe is not loaded yet');\n            }\n            __classPrivateFieldGet(this, _LedgerIframeBridge_instances, \"m\", _LedgerIframeBridge_sendMessage).call(this, {\n                action: IFrameMessageAction.LedgerUpdateTransport,\n                params: { transportType },\n            }, (response) => {\n                if ('success' in response && response.success) {\n                    return resolve(true);\n                }\n                return reject(new Error('Ledger transport could not be updated'));\n            });\n        });\n    }\n    async getPublicKey(params) {\n        return __classPrivateFieldGet(this, _LedgerIframeBridge_instances, \"m\", _LedgerIframeBridge_deviceActionMessage).call(this, IFrameMessageAction.LedgerUnlock, params);\n    }\n    async deviceSignTransaction(params) {\n        return __classPrivateFieldGet(this, _LedgerIframeBridge_instances, \"m\", _LedgerIframeBridge_deviceActionMessage).call(this, IFrameMessageAction.LedgerSignTransaction, params);\n    }\n    async deviceSignMessage(params) {\n        return __classPrivateFieldGet(this, _LedgerIframeBridge_instances, \"m\", _LedgerIframeBridge_deviceActionMessage).call(this, IFrameMessageAction.LedgerSignPersonalMessage, params);\n    }\n    async deviceSignTypedData(params) {\n        return __classPrivateFieldGet(this, _LedgerIframeBridge_instances, \"m\", _LedgerIframeBridge_deviceActionMessage).call(this, IFrameMessageAction.LedgerSignTypedData, params);\n    }\n}\nexports.LedgerIframeBridge = LedgerIframeBridge;\n_LedgerIframeBridge_opts = new WeakMap(), _LedgerIframeBridge_instances = new WeakSet(), _LedgerIframeBridge_deviceActionMessage = async function _LedgerIframeBridge_deviceActionMessage(...[action, params]) {\n    return new Promise((resolve, reject) => {\n        __classPrivateFieldGet(this, _LedgerIframeBridge_instances, \"m\", _LedgerIframeBridge_sendMessage).call(this, {\n            action,\n            params,\n        }, (response) => {\n            if ('payload' in response && response.payload) {\n                if ('success' in response && response.success) {\n                    return resolve(response.payload);\n                }\n                if ('error' in response.payload) {\n                    return reject(response.payload.error);\n                }\n            }\n            return reject(new Error('Unknown error occurred'));\n        });\n    });\n}, _LedgerIframeBridge_setupIframe = async function _LedgerIframeBridge_setupIframe(bridgeUrl) {\n    return new Promise((resolve) => {\n        this.iframe = document.createElement('iframe');\n        this.iframe.src = bridgeUrl;\n        this.iframe.allow = `hid 'src'`;\n        this.iframe.onload = async () => {\n            this.iframeLoaded = true;\n            resolve();\n        };\n        document.head.appendChild(this.iframe);\n    });\n}, _LedgerIframeBridge_getOrigin = function _LedgerIframeBridge_getOrigin(bridgeUrl) {\n    const tmp = bridgeUrl.split('/');\n    tmp.splice(-1, 1);\n    return tmp.join('/');\n}, _LedgerIframeBridge_eventListener = function _LedgerIframeBridge_eventListener(bridgeUrl, eventMessage) {\n    if (eventMessage.origin !== __classPrivateFieldGet(this, _LedgerIframeBridge_instances, \"m\", _LedgerIframeBridge_getOrigin).call(this, bridgeUrl)) {\n        return;\n    }\n    if (eventMessage.data) {\n        const messageCallback = this.messageCallbacks[eventMessage.data.messageId];\n        if (messageCallback) {\n            messageCallback(eventMessage.data);\n        }\n        else if (eventMessage.data.action === IFrameMessageAction.LedgerConnectionChange) {\n            this.isDeviceConnected = eventMessage.data.payload.connected;\n        }\n    }\n}, _LedgerIframeBridge_sendMessage = function _LedgerIframeBridge_sendMessage(message, callback) {\n    this.currentMessageId += 1;\n    const postMsg = Object.assign(Object.assign({}, message), { messageId: this.currentMessageId, target: LEDGER_IFRAME_ID });\n    this.messageCallbacks[this.currentMessageId] = callback;\n    if (!this.iframeLoaded || !this.iframe || !this.iframe.contentWindow) {\n        throw new Error('The iframe is not loaded yet');\n    }\n    this.iframe.contentWindow.postMessage(postMsg, '*');\n}, _LedgerIframeBridge_validateConfiguration = function _LedgerIframeBridge_validateConfiguration(opts) {\n    if (typeof opts.bridgeUrl !== 'string' || opts.bridgeUrl.length === 0) {\n        throw new Error('bridgeURL is not a valid URL');\n    }\n};\n//# sourceMappingURL=ledger-iframe-bridge.js.map"]}